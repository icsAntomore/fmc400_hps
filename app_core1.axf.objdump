
app_core1.axf:     file format elf32-littlearm


Disassembly of section .vectors:

01000000 <__core1_vectors>:
.section .vectors, "ax"
    .align 5
    .global __core1_vectors
__core1_vectors:
    b   _start_core1        /* Reset */
 1000000:	ea000030 	b	10000c8 <_start_core1>
    b   .                   /* Undefined */
 1000004:	eafffffe 	b	1000004 <__core1_vectors+0x4>
    b   .                   /* SWI */
 1000008:	eafffffe 	b	1000008 <__core1_vectors+0x8>
    b   .                   /* Prefetch abort */
 100000c:	eafffffe 	b	100000c <__core1_vectors+0xc>
    b   .                   /* Data abort */
 1000010:	eafffffe 	b	1000010 <__core1_vectors+0x10>
    b   .                   /* Reserved */
 1000014:	eafffffe 	b	1000014 <__core1_vectors+0x14>
    b   .                   /* IRQ */
 1000018:	eafffffe 	b	1000018 <__core1_vectors+0x18>
    b   .                   /* FIQ */
 100001c:	eafffffe 	b	100001c <__core1_vectors+0x1c>

Disassembly of section .text:

01000020 <core1_startup_body>:
extern void core1_main(void);

/* Entry linkata nel linker: ENTRY(_start_core1) */
//static void __attribute__((used)) core1_startup_body(void)
static void __attribute__((used, section(".text.startup"))) core1_startup_body(void)
{
 1000020:	e92d4800 	push	{fp, lr}
 1000024:	e28db004 	add	fp, sp, #4
 1000028:	e24dd010 	sub	sp, sp, #16
	 /* copia le sezioni .data dall'area di load (flash/DDR alta) all'area di run */
	for (unsigned long *src = &__data_load__, *dst = &__data_start__; dst < &__data_end__; ++src, ++dst) {
 100002c:	e3053984 	movw	r3, #22916	; 0x5984
 1000030:	e3403100 	movt	r3, #256	; 0x100
 1000034:	e50b3008 	str	r3, [fp, #-8]
 1000038:	e3053984 	movw	r3, #22916	; 0x5984
 100003c:	e3403100 	movt	r3, #256	; 0x100
 1000040:	e50b300c 	str	r3, [fp, #-12]
 1000044:	ea000009 	b	1000070 <core1_startup_body+0x50>
		*dst = *src;
 1000048:	e51b3008 	ldr	r3, [fp, #-8]
 100004c:	e5932000 	ldr	r2, [r3]
 1000050:	e51b300c 	ldr	r3, [fp, #-12]
 1000054:	e5832000 	str	r2, [r3]
	for (unsigned long *src = &__data_load__, *dst = &__data_start__; dst < &__data_end__; ++src, ++dst) {
 1000058:	e51b3008 	ldr	r3, [fp, #-8]
 100005c:	e2833004 	add	r3, r3, #4
 1000060:	e50b3008 	str	r3, [fp, #-8]
 1000064:	e51b300c 	ldr	r3, [fp, #-12]
 1000068:	e2833004 	add	r3, r3, #4
 100006c:	e50b300c 	str	r3, [fp, #-12]
 1000070:	e51b200c 	ldr	r2, [fp, #-12]
 1000074:	e30539b8 	movw	r3, #22968	; 0x59b8
 1000078:	e3403100 	movt	r3, #256	; 0x100
 100007c:	e1520003 	cmp	r2, r3
 1000080:	3afffff0 	bcc	1000048 <core1_startup_body+0x28>
	}

    /* azzera BSS */
    for (unsigned long *p = &__bss_start__; p < &__bss_end__; ++p) {
 1000084:	e3083000 	movw	r3, #32768	; 0x8000
 1000088:	e3403100 	movt	r3, #256	; 0x100
 100008c:	e50b3010 	str	r3, [fp, #-16]
 1000090:	ea000005 	b	10000ac <core1_startup_body+0x8c>
        *p = 0UL;
 1000094:	e51b3010 	ldr	r3, [fp, #-16]
 1000098:	e3a02000 	mov	r2, #0
 100009c:	e5832000 	str	r2, [r3]
    for (unsigned long *p = &__bss_start__; p < &__bss_end__; ++p) {
 10000a0:	e51b3010 	ldr	r3, [fp, #-16]
 10000a4:	e2833004 	add	r3, r3, #4
 10000a8:	e50b3010 	str	r3, [fp, #-16]
 10000ac:	e51b2010 	ldr	r2, [fp, #-16]
 10000b0:	e30c3018 	movw	r3, #49176	; 0xc018
 10000b4:	e3403101 	movt	r3, #257	; 0x101
 10000b8:	e1520003 	cmp	r2, r3
 10000bc:	3afffff4 	bcc	1000094 <core1_startup_body+0x74>
       // uint32_t vectors = (uint32_t)&__vectors_start__;
       // __asm__ volatile ("mcr p15,0,%0,c12,c0,0" :: "r"(vectors) : "memory");
       // __asm__ volatile("isb");
    */

    (void)core1_main();
 10000c0:	eb0012c3 	bl	1004bd4 <core1_main>

    for (;;) { /* stop */ }
 10000c4:	eafffffe 	b	10000c4 <core1_startup_body+0xa4>

010000c8 <_start_core1>:
 * posizionamento del simbolo nella sezione `.text.startup` che Ã¨ la
 * prima ad essere emessa dal linker script. */
void __attribute__((naked, section(".text.startup._start_core1"))) _start_core1(void)
{
    /* set SP in cima alla regione DDR_PRIV */
    __asm__ volatile (
 10000c8:	e59fd004 	ldr	sp, [pc, #4]	; 10000d4 <_start_core1+0xc>
 10000cc:	eaffffd3 	b	1000020 <core1_startup_body>
        "ldr sp, =__stack_top__\n\t"
        "b core1_startup_body\n\t"
        ::: "memory");
}
 10000d0:	e320f000 	nop	{0}
 10000d4:	3f000000 	svccc	0x00000000

010000d8 <__core1_unwind_stub>:
    .global __core1_unwind_stub
    .type   __core1_unwind_stub, %function
    .hidden __core1_unwind_stub
__core1_unwind_stub:
    .fnstart
    bx      lr
 10000d8:	e12fff1e 	bx	lr

010000dc <alt_clk_freq_get_osc1>:
}



ALT_STATUS_CODE alt_clk_freq_get_osc1(alt_freq_t *pfreq)
{
 10000dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10000e0:	e28db000 	add	fp, sp, #0
 10000e4:	e24dd00c 	sub	sp, sp, #12
 10000e8:	e50b0008 	str	r0, [fp, #-8]
    *pfreq = (uint64_t) osc1_clock;
 10000ec:	e3053984 	movw	r3, #22916	; 0x5984
 10000f0:	e3403100 	movt	r3, #256	; 0x100
 10000f4:	e5932000 	ldr	r2, [r3]
 10000f8:	e51b3008 	ldr	r3, [fp, #-8]
 10000fc:	e5832000 	str	r2, [r3]
    return ALT_E_SUCCESS;
 1000100:	e3a03000 	mov	r3, #0
}
 1000104:	e1a00003 	mov	r0, r3
 1000108:	e28bd000 	add	sp, fp, #0
 100010c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000110:	e12fff1e 	bx	lr

01000114 <alt_clk_freq_get_cb_intosc_hs_div2_clk>:

ALT_STATUS_CODE alt_clk_freq_get_cb_intosc_hs_div2_clk(alt_freq_t *pfreq)
{
 1000114:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000118:	e28db000 	add	fp, sp, #0
 100011c:	e24dd00c 	sub	sp, sp, #12
 1000120:	e50b0008 	str	r0, [fp, #-8]
    if(cb_intosc_hs_div2)
 1000124:	e3083000 	movw	r3, #32768	; 0x8000
 1000128:	e3403100 	movt	r3, #256	; 0x100
 100012c:	e5933000 	ldr	r3, [r3]
 1000130:	e3530000 	cmp	r3, #0
 1000134:	0a000006 	beq	1000154 <alt_clk_freq_get_cb_intosc_hs_div2_clk+0x40>
    {
        *pfreq = cb_intosc_hs_div2;
 1000138:	e3083000 	movw	r3, #32768	; 0x8000
 100013c:	e3403100 	movt	r3, #256	; 0x100
 1000140:	e5932000 	ldr	r2, [r3]
 1000144:	e51b3008 	ldr	r3, [fp, #-8]
 1000148:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
 100014c:	e3a03000 	mov	r3, #0
 1000150:	ea000000 	b	1000158 <alt_clk_freq_get_cb_intosc_hs_div2_clk+0x44>
    }
    return ALT_E_ERROR;
 1000154:	e3e03000 	mvn	r3, #0
}
 1000158:	e1a00003 	mov	r0, r3
 100015c:	e28bd000 	add	sp, fp, #0
 1000160:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000164:	e12fff1e 	bx	lr

01000168 <alt_clk_freq_get_f2s_free_clk>:

ALT_STATUS_CODE alt_clk_freq_get_f2s_free_clk(alt_freq_t *pfreq)
{
 1000168:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 100016c:	e28db000 	add	fp, sp, #0
 1000170:	e24dd00c 	sub	sp, sp, #12
 1000174:	e50b0008 	str	r0, [fp, #-8]
    if(f2s_free_clk)
 1000178:	e3083004 	movw	r3, #32772	; 0x8004
 100017c:	e3403100 	movt	r3, #256	; 0x100
 1000180:	e5933000 	ldr	r3, [r3]
 1000184:	e3530000 	cmp	r3, #0
 1000188:	0a000006 	beq	10001a8 <alt_clk_freq_get_f2s_free_clk+0x40>
    {
        *pfreq = f2s_free_clk;
 100018c:	e3083004 	movw	r3, #32772	; 0x8004
 1000190:	e3403100 	movt	r3, #256	; 0x100
 1000194:	e5932000 	ldr	r2, [r3]
 1000198:	e51b3008 	ldr	r3, [fp, #-8]
 100019c:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
 10001a0:	e3a03000 	mov	r3, #0
 10001a4:	ea000000 	b	10001ac <alt_clk_freq_get_f2s_free_clk+0x44>
    }
    return ALT_E_ERROR;
 10001a8:	e3e03000 	mvn	r3, #0
}
 10001ac:	e1a00003 	mov	r0, r3
 10001b0:	e28bd000 	add	sp, fp, #0
 10001b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10001b8:	e12fff1e 	bx	lr

010001bc <alt_clk_freq_get_main_pll>:

/***************************************************************
                Functions to retreive frequencies of devices
***************************************************************/
ALT_STATUS_CODE alt_clk_freq_get_main_pll(alt_freq_t *pfreq)
{
 10001bc:	e92d4800 	push	{fp, lr}
 10001c0:	e28db004 	add	fp, sp, #4
 10001c4:	e24dd020 	sub	sp, sp, #32
 10001c8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   ALT_STATUS_CODE ret = ALT_E_SUCCESS;
 10001cc:	e3a03000 	mov	r3, #0
 10001d0:	e50b3008 	str	r3, [fp, #-8]
   alt_freq_t freq;
   uint32_t vco1;
   /* Note - we don't check that we're locked */

   /* Step 1 - what is the clock source freq? */
   uint32_t vco0 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
 10001d4:	e3043040 	movw	r3, #16448	; 0x4040
 10001d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10001dc:	e5933000 	ldr	r3, [r3]
 10001e0:	e50b300c 	str	r3, [fp, #-12]
   switch(ALT_CLKMGR_MAINPLL_VCO0_PSRC_GET(vco0))
 10001e4:	e51b300c 	ldr	r3, [fp, #-12]
 10001e8:	e1a03423 	lsr	r3, r3, #8
 10001ec:	e2033003 	and	r3, r3, #3
 10001f0:	e3530002 	cmp	r3, #2
 10001f4:	0a000010 	beq	100023c <alt_clk_freq_get_main_pll+0x80>
 10001f8:	e3530002 	cmp	r3, #2
 10001fc:	8a000013 	bhi	1000250 <alt_clk_freq_get_main_pll+0x94>
 1000200:	e3530000 	cmp	r3, #0
 1000204:	0a000002 	beq	1000214 <alt_clk_freq_get_main_pll+0x58>
 1000208:	e3530001 	cmp	r3, #1
 100020c:	0a000005 	beq	1000228 <alt_clk_freq_get_main_pll+0x6c>
 1000210:	ea00000e 	b	1000250 <alt_clk_freq_get_main_pll+0x94>
   {
       case ALT_CLKMGR_MAINPLL_VCO0_PSRC_E_EOSC1:
           ret = alt_clk_freq_get_osc1(&freq);
 1000214:	e24b301c 	sub	r3, fp, #28
 1000218:	e1a00003 	mov	r0, r3
 100021c:	ebffffae 	bl	10000dc <alt_clk_freq_get_osc1>
 1000220:	e50b0008 	str	r0, [fp, #-8]
           break;
 1000224:	ea00000b 	b	1000258 <alt_clk_freq_get_main_pll+0x9c>
       case ALT_CLKMGR_MAINPLL_VCO0_PSRC_E_INTOSC:
           ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(&freq);
 1000228:	e24b301c 	sub	r3, fp, #28
 100022c:	e1a00003 	mov	r0, r3
 1000230:	ebffffb7 	bl	1000114 <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 1000234:	e50b0008 	str	r0, [fp, #-8]
           break;
 1000238:	ea000006 	b	1000258 <alt_clk_freq_get_main_pll+0x9c>
       case ALT_CLKMGR_MAINPLL_VCO0_PSRC_E_F2S:/* f2s_free */
           ret = alt_clk_freq_get_f2s_free_clk(&freq);
 100023c:	e24b301c 	sub	r3, fp, #28
 1000240:	e1a00003 	mov	r0, r3
 1000244:	ebffffc7 	bl	1000168 <alt_clk_freq_get_f2s_free_clk>
 1000248:	e50b0008 	str	r0, [fp, #-8]
           break;
 100024c:	ea000001 	b	1000258 <alt_clk_freq_get_main_pll+0x9c>
       default:
           return ALT_E_ERROR;
 1000250:	e3e03000 	mvn	r3, #0
 1000254:	ea00002b 	b	1000308 <alt_clk_freq_get_main_pll+0x14c>
   }

   if(ret != ALT_E_SUCCESS)
 1000258:	e51b3008 	ldr	r3, [fp, #-8]
 100025c:	e3530000 	cmp	r3, #0
 1000260:	0a000001 	beq	100026c <alt_clk_freq_get_main_pll+0xb0>
       return ret;
 1000264:	e51b3008 	ldr	r3, [fp, #-8]
 1000268:	ea000026 	b	1000308 <alt_clk_freq_get_main_pll+0x14c>
   freq64 = freq;
 100026c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000270:	e1a02003 	mov	r2, r3
 1000274:	e3a03000 	mov	r3, #0
 1000278:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   /* Step 2 - scale according to num/denom */
   vco1 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR);
 100027c:	e3043044 	movw	r3, #16452	; 0x4044
 1000280:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000284:	e5933000 	ldr	r3, [r3]
 1000288:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   freq64 *= (ALT_CLKMGR_MAINPLL_VCO1_NUMER_GET(vco1) + 1);
 100028c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000290:	e7ec3053 	ubfx	r3, r3, #0, #13
 1000294:	e2833001 	add	r3, r3, #1
 1000298:	e1a02003 	mov	r2, r3
 100029c:	e3a03000 	mov	r3, #0
 10002a0:	e51b1010 	ldr	r1, [fp, #-16]
 10002a4:	e0000192 	mul	r0, r2, r1
 10002a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 10002ac:	e0010193 	mul	r1, r3, r1
 10002b0:	e0801001 	add	r1, r0, r1
 10002b4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10002b8:	e0832290 	umull	r2, r3, r0, r2
 10002bc:	e0811003 	add	r1, r1, r3
 10002c0:	e1a03001 	mov	r3, r1
 10002c4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
 10002c8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
   freq64 /= (ALT_CLKMGR_MAINPLL_VCO1_DENOM_GET(vco1) + 1);
 10002cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10002d0:	e1a03823 	lsr	r3, r3, #16
 10002d4:	e203303f 	and	r3, r3, #63	; 0x3f
 10002d8:	e2833001 	add	r3, r3, #1
 10002dc:	e1a02003 	mov	r2, r3
 10002e0:	e3a03000 	mov	r3, #0
 10002e4:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 10002e8:	eb001461 	bl	1005474 <__aeabi_uldivmod>
 10002ec:	e1a02000 	mov	r2, r0
 10002f0:	e1a03001 	mov	r3, r1
 10002f4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   *pfreq = (alt_freq_t) freq64;
 10002f8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 10002fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1000300:	e5832000 	str	r2, [r3]
   return ALT_E_SUCCESS;
 1000304:	e3a03000 	mov	r3, #0
}
 1000308:	e1a00003 	mov	r0, r3
 100030c:	e24bd004 	sub	sp, fp, #4
 1000310:	e8bd8800 	pop	{fp, pc}

01000314 <alt_clk_freq_get_peri_pll>:

ALT_STATUS_CODE alt_clk_freq_get_peri_pll(alt_freq_t *pfreq)
{
 1000314:	e92d4800 	push	{fp, lr}
 1000318:	e28db004 	add	fp, sp, #4
 100031c:	e24dd020 	sub	sp, sp, #32
 1000320:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   ALT_STATUS_CODE ret = ALT_E_SUCCESS;
 1000324:	e3a03000 	mov	r3, #0
 1000328:	e50b3008 	str	r3, [fp, #-8]
   uint64_t freq64;
   alt_freq_t freq = 0;
 100032c:	e3a03000 	mov	r3, #0
 1000330:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   uint32_t vco1;

   /* Note - we don't check that we're locked */

   /* Step 1 - what is the clock source freq? */
   uint32_t vco0 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
 1000334:	e30430c0 	movw	r3, #16576	; 0x40c0
 1000338:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100033c:	e5933000 	ldr	r3, [r3]
 1000340:	e50b300c 	str	r3, [fp, #-12]
   switch(ALT_CLKMGR_PERPLL_VCO0_PSRC_GET(vco0))
 1000344:	e51b300c 	ldr	r3, [fp, #-12]
 1000348:	e1a03423 	lsr	r3, r3, #8
 100034c:	e2033003 	and	r3, r3, #3
 1000350:	e3530003 	cmp	r3, #3
 1000354:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1000358:	ea000020 	b	10003e0 <alt_clk_freq_get_peri_pll+0xcc>
 100035c:	0100036c 	tsteq	r0, ip, ror #6
 1000360:	010003b8 			; <UNDEFINED> instruction: 0x010003b8
 1000364:	010003cc 	smlabteq	r0, ip, r3, r0
 1000368:	01000380 	smlabbeq	r0, r0, r3, r0
   {
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_EOSC1:
           ret = alt_clk_freq_get_osc1(&freq);
 100036c:	e24b301c 	sub	r3, fp, #28
 1000370:	e1a00003 	mov	r0, r3
 1000374:	ebffff58 	bl	10000dc <alt_clk_freq_get_osc1>
 1000378:	e50b0008 	str	r0, [fp, #-8]
           break;
 100037c:	ea000019 	b	10003e8 <alt_clk_freq_get_peri_pll+0xd4>
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_MAIN:
           alt_clk_freq_get_main_pll(&freq);
 1000380:	e24b301c 	sub	r3, fp, #28
 1000384:	e1a00003 	mov	r0, r3
 1000388:	ebffff8b 	bl	10001bc <alt_clk_freq_get_main_pll>
           /* There is no bypass for c15 to check for */
           freq /= (1 + alt_read_word(ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR));
 100038c:	e304309c 	movw	r3, #16540	; 0x409c
 1000390:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000394:	e5933000 	ldr	r3, [r3]
 1000398:	e2832001 	add	r2, r3, #1
 100039c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10003a0:	e1a01002 	mov	r1, r2
 10003a4:	e1a00003 	mov	r0, r3
 10003a8:	eb0013eb 	bl	100535c <__udivsi3>
 10003ac:	e1a03000 	mov	r3, r0
 10003b0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
           break;
 10003b4:	ea00000b 	b	10003e8 <alt_clk_freq_get_peri_pll+0xd4>
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_INTOSC:
           ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(&freq);
 10003b8:	e24b301c 	sub	r3, fp, #28
 10003bc:	e1a00003 	mov	r0, r3
 10003c0:	ebffff53 	bl	1000114 <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 10003c4:	e50b0008 	str	r0, [fp, #-8]
           break;
 10003c8:	ea000006 	b	10003e8 <alt_clk_freq_get_peri_pll+0xd4>
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_F2S:/* f2s_free */
           ret = alt_clk_freq_get_f2s_free_clk(&freq);
 10003cc:	e24b301c 	sub	r3, fp, #28
 10003d0:	e1a00003 	mov	r0, r3
 10003d4:	ebffff63 	bl	1000168 <alt_clk_freq_get_f2s_free_clk>
 10003d8:	e50b0008 	str	r0, [fp, #-8]
           break;
 10003dc:	ea000001 	b	10003e8 <alt_clk_freq_get_peri_pll+0xd4>
       default:
           return ALT_E_ERROR;
 10003e0:	e3e03000 	mvn	r3, #0
 10003e4:	ea00002b 	b	1000498 <alt_clk_freq_get_peri_pll+0x184>
   }

   if(ret != ALT_E_SUCCESS)
 10003e8:	e51b3008 	ldr	r3, [fp, #-8]
 10003ec:	e3530000 	cmp	r3, #0
 10003f0:	0a000001 	beq	10003fc <alt_clk_freq_get_peri_pll+0xe8>
       return ret;
 10003f4:	e51b3008 	ldr	r3, [fp, #-8]
 10003f8:	ea000026 	b	1000498 <alt_clk_freq_get_peri_pll+0x184>
   freq64 = freq;
 10003fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000400:	e1a02003 	mov	r2, r3
 1000404:	e3a03000 	mov	r3, #0
 1000408:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   /* Step 2 - scale according to num/denom */
   vco1 = alt_read_word(ALT_CLKMGR_PERPLL_VCO1_ADDR);
 100040c:	e30430c4 	movw	r3, #16580	; 0x40c4
 1000410:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000414:	e5933000 	ldr	r3, [r3]
 1000418:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   freq64 *= (ALT_CLKMGR_PERPLL_VCO1_NUMER_GET(vco1) + 1);
 100041c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000420:	e7ec3053 	ubfx	r3, r3, #0, #13
 1000424:	e2833001 	add	r3, r3, #1
 1000428:	e1a02003 	mov	r2, r3
 100042c:	e3a03000 	mov	r3, #0
 1000430:	e51b1010 	ldr	r1, [fp, #-16]
 1000434:	e0000192 	mul	r0, r2, r1
 1000438:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 100043c:	e0010193 	mul	r1, r3, r1
 1000440:	e0801001 	add	r1, r0, r1
 1000444:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000448:	e0832290 	umull	r2, r3, r0, r2
 100044c:	e0811003 	add	r1, r1, r3
 1000450:	e1a03001 	mov	r3, r1
 1000454:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
 1000458:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
   freq64 /= (ALT_CLKMGR_PERPLL_VCO1_DENOM_GET(vco1) + 1);
 100045c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000460:	e1a03823 	lsr	r3, r3, #16
 1000464:	e203303f 	and	r3, r3, #63	; 0x3f
 1000468:	e2833001 	add	r3, r3, #1
 100046c:	e1a02003 	mov	r2, r3
 1000470:	e3a03000 	mov	r3, #0
 1000474:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 1000478:	eb0013fd 	bl	1005474 <__aeabi_uldivmod>
 100047c:	e1a02000 	mov	r2, r0
 1000480:	e1a03001 	mov	r3, r1
 1000484:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   *pfreq = (alt_freq_t) freq64;
 1000488:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 100048c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1000490:	e5832000 	str	r2, [r3]
   return ALT_E_SUCCESS;
 1000494:	e3a03000 	mov	r3, #0
}
 1000498:	e1a00003 	mov	r0, r3
 100049c:	e24bd004 	sub	sp, fp, #4
 10004a0:	e8bd8800 	pop	{fp, pc}

010004a4 <alt_clk_freq_get_device>:
                                      uint32_t *src_register,
                                      uint32_t *_pll_reg,
                                      uint32_t pll_shift,
                                      uint32_t *_main_reg,
                                      uint32_t main_shift)
{
 10004a4:	e92d4800 	push	{fp, lr}
 10004a8:	e28db004 	add	fp, sp, #4
 10004ac:	e24dd020 	sub	sp, sp, #32
 10004b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 10004b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 10004b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 10004bc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    alt_freq_t freq;
    uint32_t temp;
    ALT_STATUS_CODE ret;

    if(src_in_main)
 10004c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10004c4:	e3530000 	cmp	r3, #0
 10004c8:	0a000004 	beq	10004e0 <alt_clk_freq_get_device+0x3c>
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
 10004cc:	e3043048 	movw	r3, #16456	; 0x4048
 10004d0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10004d4:	e5933000 	ldr	r3, [r3]
 10004d8:	e50b3008 	str	r3, [fp, #-8]
 10004dc:	ea000003 	b	10004f0 <alt_clk_freq_get_device+0x4c>
    else
        temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
 10004e0:	e30430c8 	movw	r3, #16584	; 0x40c8
 10004e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10004e8:	e5933000 	ldr	r3, [r3]
 10004ec:	e50b3008 	str	r3, [fp, #-8]

    if((_enable_mask != 0) &&
 10004f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10004f4:	e3530000 	cmp	r3, #0
 10004f8:	0a000009 	beq	1000524 <alt_clk_freq_get_device+0x80>
       (0 == (_enable_mask & temp)))
 10004fc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 1000500:	e51b3008 	ldr	r3, [fp, #-8]
 1000504:	e0033002 	and	r3, r3, r2
    if((_enable_mask != 0) &&
 1000508:	e3530000 	cmp	r3, #0
 100050c:	1a000004 	bne	1000524 <alt_clk_freq_get_device+0x80>
    {
        *pfreq = 0;/* device disabled */
 1000510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000514:	e3a02000 	mov	r2, #0
 1000518:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
 100051c:	e3a03000 	mov	r3, #0
 1000520:	ea000064 	b	10006b8 <alt_clk_freq_get_device+0x214>
    }

    if(src_in_main)
 1000524:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000528:	e3530000 	cmp	r3, #0
 100052c:	0a000004 	beq	1000544 <alt_clk_freq_get_device+0xa0>
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_BYPASS_ADDR);
 1000530:	e3043054 	movw	r3, #16468	; 0x4054
 1000534:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000538:	e5933000 	ldr	r3, [r3]
 100053c:	e50b3008 	str	r3, [fp, #-8]
 1000540:	ea000003 	b	1000554 <alt_clk_freq_get_device+0xb0>
    else
        temp = alt_read_word(ALT_CLKMGR_PERPLL_BYPASS_ADDR);
 1000544:	e30430d4 	movw	r3, #16596	; 0x40d4
 1000548:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100054c:	e5933000 	ldr	r3, [r3]
 1000550:	e50b3008 	str	r3, [fp, #-8]

    if(temp & _bypass_mask)
 1000554:	e51b2008 	ldr	r2, [fp, #-8]
 1000558:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 100055c:	e0033002 	and	r3, r3, r2
 1000560:	e3530000 	cmp	r3, #0
 1000564:	0a000003 	beq	1000578 <alt_clk_freq_get_device+0xd4>
    {
        return alt_clk_freq_get_osc1(pfreq);
 1000568:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 100056c:	ebfffeda 	bl	10000dc <alt_clk_freq_get_osc1>
 1000570:	e1a03000 	mov	r3, r0
 1000574:	ea00004f 	b	10006b8 <alt_clk_freq_get_device+0x214>
    }
    switch(ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_GET(alt_read_word(src_register)))
 1000578:	e59b3004 	ldr	r3, [fp, #4]
 100057c:	e5933000 	ldr	r3, [r3]
 1000580:	e1a03823 	lsr	r3, r3, #16
 1000584:	e2033007 	and	r3, r3, #7
 1000588:	e3530004 	cmp	r3, #4
 100058c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1000590:	ea000045 	b	10006ac <alt_clk_freq_get_device+0x208>
 1000594:	010005b8 			; <UNDEFINED> instruction: 0x010005b8
 1000598:	01000620 	tsteq	r0, r0, lsr #12
 100059c:	010005a8 	smlatbeq	r0, r8, r5, r0
 10005a0:	01000688 	smlabbeq	r0, r8, r6, r0
 10005a4:	0100069c 			; <UNDEFINED> instruction: 0x0100069c
    {
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_OSC1:
            return alt_clk_freq_get_osc1(pfreq);
 10005a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10005ac:	ebfffeca 	bl	10000dc <alt_clk_freq_get_osc1>
 10005b0:	e1a03000 	mov	r3, r0
 10005b4:	ea00003f 	b	10006b8 <alt_clk_freq_get_device+0x214>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_MAIN:
            ret = alt_clk_freq_get_main_pll(&freq);
 10005b8:	e24b3010 	sub	r3, fp, #16
 10005bc:	e1a00003 	mov	r0, r3
 10005c0:	ebfffefd 	bl	10001bc <alt_clk_freq_get_main_pll>
 10005c4:	e50b000c 	str	r0, [fp, #-12]
            if(ret != ALT_E_SUCCESS)
 10005c8:	e51b300c 	ldr	r3, [fp, #-12]
 10005cc:	e3530000 	cmp	r3, #0
 10005d0:	0a000001 	beq	10005dc <alt_clk_freq_get_device+0x138>
                return ret;
 10005d4:	e51b300c 	ldr	r3, [fp, #-12]
 10005d8:	ea000036 	b	10006b8 <alt_clk_freq_get_device+0x214>
            temp = alt_read_word(_main_reg)>>main_shift;
 10005dc:	e59b3010 	ldr	r3, [fp, #16]
 10005e0:	e5932000 	ldr	r2, [r3]
 10005e4:	e59b3014 	ldr	r3, [fp, #20]
 10005e8:	e1a03332 	lsr	r3, r2, r3
 10005ec:	e50b3008 	str	r3, [fp, #-8]
            *pfreq = freq/(1 + ALT_CLKMGR_MAINPLL_CNTR2CLK_CNT_GET(temp));
 10005f0:	e51b2010 	ldr	r2, [fp, #-16]
 10005f4:	e51b3008 	ldr	r3, [fp, #-8]
 10005f8:	e7ea3053 	ubfx	r3, r3, #0, #11
 10005fc:	e2833001 	add	r3, r3, #1
 1000600:	e1a01003 	mov	r1, r3
 1000604:	e1a00002 	mov	r0, r2
 1000608:	eb001353 	bl	100535c <__udivsi3>
 100060c:	e1a03000 	mov	r3, r0
 1000610:	e1a02003 	mov	r2, r3
 1000614:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000618:	e5832000 	str	r2, [r3]
            break;
 100061c:	ea000024 	b	10006b4 <alt_clk_freq_get_device+0x210>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_PERI:
            ret = alt_clk_freq_get_peri_pll(&freq);
 1000620:	e24b3010 	sub	r3, fp, #16
 1000624:	e1a00003 	mov	r0, r3
 1000628:	ebffff39 	bl	1000314 <alt_clk_freq_get_peri_pll>
 100062c:	e50b000c 	str	r0, [fp, #-12]
            if(ret != ALT_E_SUCCESS)
 1000630:	e51b300c 	ldr	r3, [fp, #-12]
 1000634:	e3530000 	cmp	r3, #0
 1000638:	0a000001 	beq	1000644 <alt_clk_freq_get_device+0x1a0>
                return ret;
 100063c:	e51b300c 	ldr	r3, [fp, #-12]
 1000640:	ea00001c 	b	10006b8 <alt_clk_freq_get_device+0x214>
            temp = alt_read_word(_pll_reg)>>pll_shift;
 1000644:	e59b3008 	ldr	r3, [fp, #8]
 1000648:	e5932000 	ldr	r2, [r3]
 100064c:	e59b300c 	ldr	r3, [fp, #12]
 1000650:	e1a03332 	lsr	r3, r2, r3
 1000654:	e50b3008 	str	r3, [fp, #-8]
            *pfreq = freq/(1 + ALT_CLKMGR_PERPLL_CNTR2CLK_CNT_GET(temp));
 1000658:	e51b2010 	ldr	r2, [fp, #-16]
 100065c:	e51b3008 	ldr	r3, [fp, #-8]
 1000660:	e7ea3053 	ubfx	r3, r3, #0, #11
 1000664:	e2833001 	add	r3, r3, #1
 1000668:	e1a01003 	mov	r1, r3
 100066c:	e1a00002 	mov	r0, r2
 1000670:	eb001339 	bl	100535c <__udivsi3>
 1000674:	e1a03000 	mov	r3, r0
 1000678:	e1a02003 	mov	r2, r3
 100067c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000680:	e5832000 	str	r2, [r3]
            break;
 1000684:	ea00000a 	b	10006b4 <alt_clk_freq_get_device+0x210>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_INTOSC:
            ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(&freq);
 1000688:	e24b3010 	sub	r3, fp, #16
 100068c:	e1a00003 	mov	r0, r3
 1000690:	ebfffe9f 	bl	1000114 <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 1000694:	e50b000c 	str	r0, [fp, #-12]
            break;
 1000698:	ea000005 	b	10006b4 <alt_clk_freq_get_device+0x210>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_FPGA:
            alt_clk_freq_get_f2s_free_clk(&freq);
 100069c:	e24b3010 	sub	r3, fp, #16
 10006a0:	e1a00003 	mov	r0, r3
 10006a4:	ebfffeaf 	bl	1000168 <alt_clk_freq_get_f2s_free_clk>
            /* This value has to come from quartus */
            break;
 10006a8:	ea000001 	b	10006b4 <alt_clk_freq_get_device+0x210>
        default:
           return ALT_E_ERROR;
 10006ac:	e3e03000 	mvn	r3, #0
 10006b0:	ea000000 	b	10006b8 <alt_clk_freq_get_device+0x214>
    }
    return ALT_E_SUCCESS;
 10006b4:	e3a03000 	mov	r3, #0
}
 10006b8:	e1a00003 	mov	r0, r3
 10006bc:	e24bd004 	sub	sp, fp, #4
 10006c0:	e8bd8800 	pop	{fp, pc}

010006c4 <alt_clk_freq_get_mpu>:

ALT_STATUS_CODE alt_clk_freq_get_mpu(alt_freq_t *pfreq)
{
 10006c4:	e92d4800 	push	{fp, lr}
 10006c8:	e28db004 	add	fp, sp, #4
 10006cc:	e24dd028 	sub	sp, sp, #40	; 0x28
 10006d0:	e50b0010 	str	r0, [fp, #-16]
    /* Step 1 - check the mainpllgrp.mpuclk->src for source
    // Step 2 - check bypass */

    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_device(pfreq,
 10006d4:	e3a03000 	mov	r3, #0
 10006d8:	e58d3010 	str	r3, [sp, #16]
 10006dc:	e3043140 	movw	r3, #16704	; 0x4140
 10006e0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10006e4:	e58d300c 	str	r3, [sp, #12]
 10006e8:	e3a03010 	mov	r3, #16
 10006ec:	e58d3008 	str	r3, [sp, #8]
 10006f0:	e3043140 	movw	r3, #16704	; 0x4140
 10006f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10006f8:	e58d3004 	str	r3, [sp, #4]
 10006fc:	e3043060 	movw	r3, #16480	; 0x4060
 1000700:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000704:	e58d3000 	str	r3, [sp]
 1000708:	e3a03001 	mov	r3, #1
 100070c:	e3a02001 	mov	r2, #1
 1000710:	e3a01001 	mov	r1, #1
 1000714:	e51b0010 	ldr	r0, [fp, #-16]
 1000718:	ebffff61 	bl	10004a4 <alt_clk_freq_get_device>
 100071c:	e50b0008 	str	r0, [fp, #-8]
        ALT_CLKMGR_MAINPLL_EN_MPUCLKEN_SET_MSK,
        ALT_CLKMGR_MAINPLL_BYPASS_MPU_SET_MSK,
        ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
        ALT_CLKMGR_ALTERA_ADDR, ALT_CLKMGR_NOCCLK_PERICNT_LSB, /* No ALT_CLKMGR_MPUCLK_PERICNT_LSB defined*/
        ALT_CLKMGR_ALTERA_ADDR, 0);
    return ret;
 1000720:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000724:	e1a00003 	mov	r0, r3
 1000728:	e24bd004 	sub	sp, fp, #4
 100072c:	e8bd8800 	pop	{fp, pc}

01000730 <alt_clk_freq_get_mpu_periph>:

ALT_STATUS_CODE alt_clk_freq_get_mpu_periph(alt_freq_t *pfreq)
{
 1000730:	e92d4800 	push	{fp, lr}
 1000734:	e28db004 	add	fp, sp, #4
 1000738:	e24dd010 	sub	sp, sp, #16
 100073c:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_mpu(pfreq);
 1000740:	e51b0010 	ldr	r0, [fp, #-16]
 1000744:	ebffffde 	bl	10006c4 <alt_clk_freq_get_mpu>
 1000748:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=4;
 100074c:	e51b3010 	ldr	r3, [fp, #-16]
 1000750:	e5933000 	ldr	r3, [r3]
 1000754:	e1a02123 	lsr	r2, r3, #2
 1000758:	e51b3010 	ldr	r3, [fp, #-16]
 100075c:	e5832000 	str	r2, [r3]
    return ret;
 1000760:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000764:	e1a00003 	mov	r0, r3
 1000768:	e24bd004 	sub	sp, fp, #4
 100076c:	e8bd8800 	pop	{fp, pc}

01000770 <alt_clk_freq_get_mpu_l2ram>:

ALT_STATUS_CODE alt_clk_freq_get_mpu_l2ram(alt_freq_t *pfreq)
{
 1000770:	e92d4800 	push	{fp, lr}
 1000774:	e28db004 	add	fp, sp, #4
 1000778:	e24dd010 	sub	sp, sp, #16
 100077c:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_mpu(pfreq);
 1000780:	e51b0010 	ldr	r0, [fp, #-16]
 1000784:	ebffffce 	bl	10006c4 <alt_clk_freq_get_mpu>
 1000788:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=2;
 100078c:	e51b3010 	ldr	r3, [fp, #-16]
 1000790:	e5933000 	ldr	r3, [r3]
 1000794:	e1a020a3 	lsr	r2, r3, #1
 1000798:	e51b3010 	ldr	r3, [fp, #-16]
 100079c:	e5832000 	str	r2, [r3]
    return ret;
 10007a0:	e51b3008 	ldr	r3, [fp, #-8]
}
 10007a4:	e1a00003 	mov	r0, r3
 10007a8:	e24bd004 	sub	sp, fp, #4
 10007ac:	e8bd8800 	pop	{fp, pc}

010007b0 <alt_clk_freq_get_l3_main_free>:

/* Same as noc_clock */
ALT_STATUS_CODE alt_clk_freq_get_l3_main_free(alt_freq_t *pfreq)
{
 10007b0:	e92d4800 	push	{fp, lr}
 10007b4:	e28db004 	add	fp, sp, #4
 10007b8:	e24dd028 	sub	sp, sp, #40	; 0x28
 10007bc:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_device(pfreq,
 10007c0:	e3a03000 	mov	r3, #0
 10007c4:	e58d3010 	str	r3, [sp, #16]
 10007c8:	e3043144 	movw	r3, #16708	; 0x4144
 10007cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10007d0:	e58d300c 	str	r3, [sp, #12]
 10007d4:	e3a03010 	mov	r3, #16
 10007d8:	e58d3008 	str	r3, [sp, #8]
 10007dc:	e3043144 	movw	r3, #16708	; 0x4144
 10007e0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10007e4:	e58d3004 	str	r3, [sp, #4]
 10007e8:	e3043064 	movw	r3, #16484	; 0x4064
 10007ec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10007f0:	e58d3000 	str	r3, [sp]
 10007f4:	e3a03002 	mov	r3, #2
 10007f8:	e3a02000 	mov	r2, #0
 10007fc:	e3a01001 	mov	r1, #1
 1000800:	e51b0010 	ldr	r0, [fp, #-16]
 1000804:	ebffff26 	bl	10004a4 <alt_clk_freq_get_device>
 1000808:	e50b0008 	str	r0, [fp, #-8]
        ALT_CLKMGR_MAINPLL_BYPASS_NOC_SET_MSK,
        ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
        ALT_CLKMGR_NOCCLK_ADDR, ALT_CLKMGR_NOCCLK_PERICNT_LSB,
        ALT_CLKMGR_NOCCLK_ADDR, 0
        );
    return ret;
 100080c:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000810:	e1a00003 	mov	r0, r3
 1000814:	e24bd004 	sub	sp, fp, #4
 1000818:	e8bd8800 	pop	{fp, pc}

0100081c <alt_clk_freq_get_l4_sys_free>:

ALT_STATUS_CODE alt_clk_freq_get_l4_sys_free(alt_freq_t *pfreq)
{
 100081c:	e92d4800 	push	{fp, lr}
 1000820:	e28db004 	add	fp, sp, #4
 1000824:	e24dd010 	sub	sp, sp, #16
 1000828:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 100082c:	e51b0010 	ldr	r0, [fp, #-16]
 1000830:	ebffffde 	bl	10007b0 <alt_clk_freq_get_l3_main_free>
 1000834:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=4;
 1000838:	e51b3010 	ldr	r3, [fp, #-16]
 100083c:	e5933000 	ldr	r3, [r3]
 1000840:	e1a02123 	lsr	r2, r3, #2
 1000844:	e51b3010 	ldr	r3, [fp, #-16]
 1000848:	e5832000 	str	r2, [r3]
    return ret;
 100084c:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000850:	e1a00003 	mov	r0, r3
 1000854:	e24bd004 	sub	sp, fp, #4
 1000858:	e8bd8800 	pop	{fp, pc}

0100085c <alt_clk_freq_get_l4_main>:

ALT_STATUS_CODE alt_clk_freq_get_l4_main(alt_freq_t *pfreq)
{
 100085c:	e92d4800 	push	{fp, lr}
 1000860:	e28db004 	add	fp, sp, #4
 1000864:	e24dd010 	sub	sp, sp, #16
 1000868:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE 
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 100086c:	e51b0010 	ldr	r0, [fp, #-16]
 1000870:	ebffffce 	bl	10007b0 <alt_clk_freq_get_l3_main_free>
 1000874:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_L4MAINCLK_GET(
 1000878:	e30430a8 	movw	r3, #16552	; 0x40a8
 100087c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000880:	e5933000 	ldr	r3, [r3]
 1000884:	e2033003 	and	r3, r3, #3
 1000888:	e3a02001 	mov	r2, #1
 100088c:	e1a02312 	lsl	r2, r2, r3
 1000890:	e51b3010 	ldr	r3, [fp, #-16]
 1000894:	e5933000 	ldr	r3, [r3]
 1000898:	e1a01002 	mov	r1, r2
 100089c:	e1a00003 	mov	r0, r3
 10008a0:	eb0012ad 	bl	100535c <__udivsi3>
 10008a4:	e1a03000 	mov	r3, r0
 10008a8:	e1a02003 	mov	r2, r3
 10008ac:	e51b3010 	ldr	r3, [fp, #-16]
 10008b0:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 10008b4:	e51b3008 	ldr	r3, [fp, #-8]
}
 10008b8:	e1a00003 	mov	r0, r3
 10008bc:	e24bd004 	sub	sp, fp, #4
 10008c0:	e8bd8800 	pop	{fp, pc}

010008c4 <alt_clk_freq_get_l4_mp>:

ALT_STATUS_CODE alt_clk_freq_get_l4_mp(alt_freq_t *pfreq)
{
 10008c4:	e92d4800 	push	{fp, lr}
 10008c8:	e28db004 	add	fp, sp, #4
 10008cc:	e24dd010 	sub	sp, sp, #16
 10008d0:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 10008d4:	e51b0010 	ldr	r0, [fp, #-16]
 10008d8:	ebffffb4 	bl	10007b0 <alt_clk_freq_get_l3_main_free>
 10008dc:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_L4MPCLK_GET(
 10008e0:	e30430a8 	movw	r3, #16552	; 0x40a8
 10008e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10008e8:	e5933000 	ldr	r3, [r3]
 10008ec:	e1a03423 	lsr	r3, r3, #8
 10008f0:	e2033003 	and	r3, r3, #3
 10008f4:	e3a02001 	mov	r2, #1
 10008f8:	e1a02312 	lsl	r2, r2, r3
 10008fc:	e51b3010 	ldr	r3, [fp, #-16]
 1000900:	e5933000 	ldr	r3, [r3]
 1000904:	e1a01002 	mov	r1, r2
 1000908:	e1a00003 	mov	r0, r3
 100090c:	eb001292 	bl	100535c <__udivsi3>
 1000910:	e1a03000 	mov	r3, r0
 1000914:	e1a02003 	mov	r2, r3
 1000918:	e51b3010 	ldr	r3, [fp, #-16]
 100091c:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 1000920:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000924:	e1a00003 	mov	r0, r3
 1000928:	e24bd004 	sub	sp, fp, #4
 100092c:	e8bd8800 	pop	{fp, pc}

01000930 <alt_clk_freq_get_l4_sp>:

ALT_STATUS_CODE alt_clk_freq_get_l4_sp(alt_freq_t *pfreq)
{
 1000930:	e92d4800 	push	{fp, lr}
 1000934:	e28db004 	add	fp, sp, #4
 1000938:	e24dd010 	sub	sp, sp, #16
 100093c:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 1000940:	e51b0010 	ldr	r0, [fp, #-16]
 1000944:	ebffff99 	bl	10007b0 <alt_clk_freq_get_l3_main_free>
 1000948:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_L4SPCLK_GET(
 100094c:	e30430a8 	movw	r3, #16552	; 0x40a8
 1000950:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000954:	e5933000 	ldr	r3, [r3]
 1000958:	e1a03823 	lsr	r3, r3, #16
 100095c:	e2033003 	and	r3, r3, #3
 1000960:	e3a02001 	mov	r2, #1
 1000964:	e1a02312 	lsl	r2, r2, r3
 1000968:	e51b3010 	ldr	r3, [fp, #-16]
 100096c:	e5933000 	ldr	r3, [r3]
 1000970:	e1a01002 	mov	r1, r2
 1000974:	e1a00003 	mov	r0, r3
 1000978:	eb001277 	bl	100535c <__udivsi3>
 100097c:	e1a03000 	mov	r3, r0
 1000980:	e1a02003 	mov	r2, r3
 1000984:	e51b3010 	ldr	r3, [fp, #-16]
 1000988:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 100098c:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000990:	e1a00003 	mov	r0, r3
 1000994:	e24bd004 	sub	sp, fp, #4
 1000998:	e8bd8800 	pop	{fp, pc}

0100099c <alt_clk_freq_get_cs_timer>:

ALT_STATUS_CODE alt_clk_freq_get_cs_timer(alt_freq_t *pfreq)
{
 100099c:	e92d4800 	push	{fp, lr}
 10009a0:	e28db004 	add	fp, sp, #4
 10009a4:	e24dd010 	sub	sp, sp, #16
 10009a8:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 10009ac:	e51b0010 	ldr	r0, [fp, #-16]
 10009b0:	ebffff7e 	bl	10007b0 <alt_clk_freq_get_l3_main_free>
 10009b4:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSATCLK_GET(
 10009b8:	e30430a8 	movw	r3, #16552	; 0x40a8
 10009bc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10009c0:	e5933000 	ldr	r3, [r3]
 10009c4:	e1a03c23 	lsr	r3, r3, #24
 10009c8:	e2033003 	and	r3, r3, #3
 10009cc:	e3a02001 	mov	r2, #1
 10009d0:	e1a02312 	lsl	r2, r2, r3
 10009d4:	e51b3010 	ldr	r3, [fp, #-16]
 10009d8:	e5933000 	ldr	r3, [r3]
 10009dc:	e1a01002 	mov	r1, r2
 10009e0:	e1a00003 	mov	r0, r3
 10009e4:	eb00125c 	bl	100535c <__udivsi3>
 10009e8:	e1a03000 	mov	r3, r0
 10009ec:	e1a02003 	mov	r2, r3
 10009f0:	e51b3010 	ldr	r3, [fp, #-16]
 10009f4:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 10009f8:	e51b3008 	ldr	r3, [fp, #-8]
}
 10009fc:	e1a00003 	mov	r0, r3
 1000a00:	e24bd004 	sub	sp, fp, #4
 1000a04:	e8bd8800 	pop	{fp, pc}

01000a08 <alt_clk_freq_get_cs_at>:

ALT_STATUS_CODE alt_clk_freq_get_cs_at(alt_freq_t *pfreq)
{
 1000a08:	e92d4800 	push	{fp, lr}
 1000a0c:	e28db004 	add	fp, sp, #4
 1000a10:	e24dd010 	sub	sp, sp, #16
 1000a14:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 1000a18:	e51b0010 	ldr	r0, [fp, #-16]
 1000a1c:	ebffff63 	bl	10007b0 <alt_clk_freq_get_l3_main_free>
 1000a20:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSATCLK_GET(
 1000a24:	e30430a8 	movw	r3, #16552	; 0x40a8
 1000a28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000a2c:	e5933000 	ldr	r3, [r3]
 1000a30:	e1a03c23 	lsr	r3, r3, #24
 1000a34:	e2033003 	and	r3, r3, #3
 1000a38:	e3a02001 	mov	r2, #1
 1000a3c:	e1a02312 	lsl	r2, r2, r3
 1000a40:	e51b3010 	ldr	r3, [fp, #-16]
 1000a44:	e5933000 	ldr	r3, [r3]
 1000a48:	e1a01002 	mov	r1, r2
 1000a4c:	e1a00003 	mov	r0, r3
 1000a50:	eb001241 	bl	100535c <__udivsi3>
 1000a54:	e1a03000 	mov	r3, r0
 1000a58:	e1a02003 	mov	r2, r3
 1000a5c:	e51b3010 	ldr	r3, [fp, #-16]
 1000a60:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 1000a64:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000a68:	e1a00003 	mov	r0, r3
 1000a6c:	e24bd004 	sub	sp, fp, #4
 1000a70:	e8bd8800 	pop	{fp, pc}

01000a74 <alt_clk_freq_get_cs_pdbg>:

ALT_STATUS_CODE alt_clk_freq_get_cs_pdbg(alt_freq_t *pfreq)
{
 1000a74:	e92d4800 	push	{fp, lr}
 1000a78:	e28db004 	add	fp, sp, #4
 1000a7c:	e24dd010 	sub	sp, sp, #16
 1000a80:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_cs_timer(pfreq);
 1000a84:	e51b0010 	ldr	r0, [fp, #-16]
 1000a88:	ebffffc3 	bl	100099c <alt_clk_freq_get_cs_timer>
 1000a8c:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSPDBGCLK_GET(
 1000a90:	e30430a8 	movw	r3, #16552	; 0x40a8
 1000a94:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000a98:	e5933000 	ldr	r3, [r3]
 1000a9c:	e1a03e23 	lsr	r3, r3, #28
 1000aa0:	e2033001 	and	r3, r3, #1
 1000aa4:	e3a02001 	mov	r2, #1
 1000aa8:	e1a02312 	lsl	r2, r2, r3
 1000aac:	e51b3010 	ldr	r3, [fp, #-16]
 1000ab0:	e5933000 	ldr	r3, [r3]
 1000ab4:	e1a01002 	mov	r1, r2
 1000ab8:	e1a00003 	mov	r0, r3
 1000abc:	eb001226 	bl	100535c <__udivsi3>
 1000ac0:	e1a03000 	mov	r3, r0
 1000ac4:	e1a02003 	mov	r2, r3
 1000ac8:	e51b3010 	ldr	r3, [fp, #-16]
 1000acc:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 1000ad0:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000ad4:	e1a00003 	mov	r0, r3
 1000ad8:	e24bd004 	sub	sp, fp, #4
 1000adc:	e8bd8800 	pop	{fp, pc}

01000ae0 <alt_clk_freq_get_cs_trace>:

ALT_STATUS_CODE alt_clk_freq_get_cs_trace(alt_freq_t *pfreq)
{
 1000ae0:	e92d4800 	push	{fp, lr}
 1000ae4:	e28db004 	add	fp, sp, #4
 1000ae8:	e24dd010 	sub	sp, sp, #16
 1000aec:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_cs_timer(pfreq);
 1000af0:	e51b0010 	ldr	r0, [fp, #-16]
 1000af4:	ebffffa8 	bl	100099c <alt_clk_freq_get_cs_timer>
 1000af8:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSTRACECLK_GET(
 1000afc:	e30430a8 	movw	r3, #16552	; 0x40a8
 1000b00:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000b04:	e5933000 	ldr	r3, [r3]
 1000b08:	e1a03d23 	lsr	r3, r3, #26
 1000b0c:	e2033003 	and	r3, r3, #3
 1000b10:	e3a02001 	mov	r2, #1
 1000b14:	e1a02312 	lsl	r2, r2, r3
 1000b18:	e51b3010 	ldr	r3, [fp, #-16]
 1000b1c:	e5933000 	ldr	r3, [r3]
 1000b20:	e1a01002 	mov	r1, r2
 1000b24:	e1a00003 	mov	r0, r3
 1000b28:	eb00120b 	bl	100535c <__udivsi3>
 1000b2c:	e1a03000 	mov	r3, r0
 1000b30:	e1a02003 	mov	r2, r3
 1000b34:	e51b3010 	ldr	r3, [fp, #-16]
 1000b38:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 1000b3c:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000b40:	e1a00003 	mov	r0, r3
 1000b44:	e24bd004 	sub	sp, fp, #4
 1000b48:	e8bd8800 	pop	{fp, pc}

01000b4c <alt_clk_freq_get_emac01>:
********************************************************************/

static ALT_STATUS_CODE alt_clk_freq_get_emac01(alt_freq_t *pfreq,
                                      uint32_t enable_mask,
                                      uint32_t select_mask)
{
 1000b4c:	e92d4800 	push	{fp, lr}
 1000b50:	e28db004 	add	fp, sp, #4
 1000b54:	e24dd028 	sub	sp, sp, #40	; 0x28
 1000b58:	e50b0008 	str	r0, [fp, #-8]
 1000b5c:	e50b100c 	str	r1, [fp, #-12]
 1000b60:	e50b2010 	str	r2, [fp, #-16]
    /* Step 1 - Check emac0_en */

    if(alt_read_word(ALT_CLKMGR_PERPLL_EMACCTL_ADDR) & select_mask)
 1000b64:	e3043128 	movw	r3, #16680	; 0x4128
 1000b68:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000b6c:	e5932000 	ldr	r2, [r3]
 1000b70:	e51b3010 	ldr	r3, [fp, #-16]
 1000b74:	e0033002 	and	r3, r3, r2
 1000b78:	e3530000 	cmp	r3, #0
 1000b7c:	0a000013 	beq	1000bd0 <alt_clk_freq_get_emac01+0x84>
    { /* EmacB */
        return alt_clk_freq_get_device(pfreq,
 1000b80:	e3a03000 	mov	r3, #0
 1000b84:	e58d3010 	str	r3, [sp, #16]
 1000b88:	e304306c 	movw	r3, #16492	; 0x406c
 1000b8c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000b90:	e58d300c 	str	r3, [sp, #12]
 1000b94:	e3a03000 	mov	r3, #0
 1000b98:	e58d3008 	str	r3, [sp, #8]
 1000b9c:	e30430ec 	movw	r3, #16620	; 0x40ec
 1000ba0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000ba4:	e58d3004 	str	r3, [sp, #4]
 1000ba8:	e30430ec 	movw	r3, #16620	; 0x40ec
 1000bac:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000bb0:	e58d3000 	str	r3, [sp]
 1000bb4:	e3a03002 	mov	r3, #2
 1000bb8:	e51b200c 	ldr	r2, [fp, #-12]
 1000bbc:	e3a01000 	mov	r1, #0
 1000bc0:	e51b0008 	ldr	r0, [fp, #-8]
 1000bc4:	ebfffe36 	bl	10004a4 <alt_clk_freq_get_device>
 1000bc8:	e1a03000 	mov	r3, r0
 1000bcc:	ea000012 	b	1000c1c <alt_clk_freq_get_emac01+0xd0>
                   ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR, 0
                   );
    }
    else
    { /* EmacA */
        return alt_clk_freq_get_device(pfreq,
 1000bd0:	e3a03000 	mov	r3, #0
 1000bd4:	e58d3010 	str	r3, [sp, #16]
 1000bd8:	e3043068 	movw	r3, #16488	; 0x4068
 1000bdc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000be0:	e58d300c 	str	r3, [sp, #12]
 1000be4:	e3a03000 	mov	r3, #0
 1000be8:	e58d3008 	str	r3, [sp, #8]
 1000bec:	e30430e8 	movw	r3, #16616	; 0x40e8
 1000bf0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000bf4:	e58d3004 	str	r3, [sp, #4]
 1000bf8:	e30430e8 	movw	r3, #16616	; 0x40e8
 1000bfc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c00:	e58d3000 	str	r3, [sp]
 1000c04:	e3a03001 	mov	r3, #1
 1000c08:	e51b200c 	ldr	r2, [fp, #-12]
 1000c0c:	e3a01000 	mov	r1, #0
 1000c10:	e51b0008 	ldr	r0, [fp, #-8]
 1000c14:	ebfffe22 	bl	10004a4 <alt_clk_freq_get_device>
 1000c18:	e1a03000 	mov	r3, r0
                   ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
                   ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR, 0,
                   ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR, 0
                   );
    }
}
 1000c1c:	e1a00003 	mov	r0, r3
 1000c20:	e24bd004 	sub	sp, fp, #4
 1000c24:	e8bd8800 	pop	{fp, pc}

01000c28 <alt_clk_freq_get_emac0>:


ALT_STATUS_CODE alt_clk_freq_get_emac0(alt_freq_t *pfreq)
{
 1000c28:	e92d4800 	push	{fp, lr}
 1000c2c:	e28db004 	add	fp, sp, #4
 1000c30:	e24dd008 	sub	sp, sp, #8
 1000c34:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_emac01(pfreq,
 1000c38:	e3a02301 	mov	r2, #67108864	; 0x4000000
 1000c3c:	e3a01001 	mov	r1, #1
 1000c40:	e51b0008 	ldr	r0, [fp, #-8]
 1000c44:	ebffffc0 	bl	1000b4c <alt_clk_freq_get_emac01>
 1000c48:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_EN_EMAC0EN_SET_MSK,
        ALT_CLKMGR_PERPLL_EMACCTL_EMAC0SEL_SET_MSK);
}
 1000c4c:	e1a00003 	mov	r0, r3
 1000c50:	e24bd004 	sub	sp, fp, #4
 1000c54:	e8bd8800 	pop	{fp, pc}

01000c58 <alt_clk_freq_get_emac1>:

ALT_STATUS_CODE alt_clk_freq_get_emac1(alt_freq_t *pfreq)
{
 1000c58:	e92d4800 	push	{fp, lr}
 1000c5c:	e28db004 	add	fp, sp, #4
 1000c60:	e24dd008 	sub	sp, sp, #8
 1000c64:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_emac01(pfreq,
 1000c68:	e3a02302 	mov	r2, #134217728	; 0x8000000
 1000c6c:	e3a01002 	mov	r1, #2
 1000c70:	e51b0008 	ldr	r0, [fp, #-8]
 1000c74:	ebffffb4 	bl	1000b4c <alt_clk_freq_get_emac01>
 1000c78:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_EN_EMAC1EN_SET_MSK,
        ALT_CLKMGR_PERPLL_EMACCTL_EMAC1SEL_SET_MSK);
}
 1000c7c:	e1a00003 	mov	r0, r3
 1000c80:	e24bd004 	sub	sp, fp, #4
 1000c84:	e8bd8800 	pop	{fp, pc}

01000c88 <alt_clk_freq_get_emac2>:

ALT_STATUS_CODE alt_clk_freq_get_emac2(alt_freq_t *pfreq)
{
 1000c88:	e92d4800 	push	{fp, lr}
 1000c8c:	e28db004 	add	fp, sp, #4
 1000c90:	e24dd008 	sub	sp, sp, #8
 1000c94:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_emac01(pfreq,
 1000c98:	e3a02201 	mov	r2, #268435456	; 0x10000000
 1000c9c:	e3a01004 	mov	r1, #4
 1000ca0:	e51b0008 	ldr	r0, [fp, #-8]
 1000ca4:	ebffffa8 	bl	1000b4c <alt_clk_freq_get_emac01>
 1000ca8:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_EN_EMAC2EN_SET_MSK,
        ALT_CLKMGR_PERPLL_EMACCTL_EMAC2SEL_SET_MSK);
}
 1000cac:	e1a00003 	mov	r0, r3
 1000cb0:	e24bd004 	sub	sp, fp, #4
 1000cb4:	e8bd8800 	pop	{fp, pc}

01000cb8 <alt_clk_freq_get_emac_ptp>:

ALT_STATUS_CODE alt_clk_freq_get_emac_ptp(alt_freq_t *pfreq)
{
 1000cb8:	e92d4800 	push	{fp, lr}
 1000cbc:	e28db004 	add	fp, sp, #4
 1000cc0:	e24dd020 	sub	sp, sp, #32
 1000cc4:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000cc8:	e3a03000 	mov	r3, #0
 1000ccc:	e58d3010 	str	r3, [sp, #16]
 1000cd0:	e3043070 	movw	r3, #16496	; 0x4070
 1000cd4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000cd8:	e58d300c 	str	r3, [sp, #12]
 1000cdc:	e3a03000 	mov	r3, #0
 1000ce0:	e58d3008 	str	r3, [sp, #8]
 1000ce4:	e30430f0 	movw	r3, #16624	; 0x40f0
 1000ce8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000cec:	e58d3004 	str	r3, [sp, #4]
 1000cf0:	e30430f0 	movw	r3, #16624	; 0x40f0
 1000cf4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000cf8:	e58d3000 	str	r3, [sp]
 1000cfc:	e3a03004 	mov	r3, #4
 1000d00:	e3a02008 	mov	r2, #8
 1000d04:	e3a01000 	mov	r1, #0
 1000d08:	e51b0008 	ldr	r0, [fp, #-8]
 1000d0c:	ebfffde4 	bl	10004a4 <alt_clk_freq_get_device>
 1000d10:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_BYPASS_EMACPTP_SET_MSK,
        ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR, 0
        );
}
 1000d14:	e1a00003 	mov	r0, r3
 1000d18:	e24bd004 	sub	sp, fp, #4
 1000d1c:	e8bd8800 	pop	{fp, pc}

01000d20 <alt_clk_freq_get_gpio>:

ALT_STATUS_CODE alt_clk_freq_get_gpio(alt_freq_t *pfreq)
{
 1000d20:	e92d4800 	push	{fp, lr}
 1000d24:	e28db004 	add	fp, sp, #4
 1000d28:	e24dd028 	sub	sp, sp, #40	; 0x28
 1000d2c:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_device(pfreq,
 1000d30:	e3a03000 	mov	r3, #0
 1000d34:	e58d3010 	str	r3, [sp, #16]
 1000d38:	e3043074 	movw	r3, #16500	; 0x4074
 1000d3c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d40:	e58d300c 	str	r3, [sp, #12]
 1000d44:	e3a03000 	mov	r3, #0
 1000d48:	e58d3008 	str	r3, [sp, #8]
 1000d4c:	e30430f4 	movw	r3, #16628	; 0x40f4
 1000d50:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d54:	e58d3004 	str	r3, [sp, #4]
 1000d58:	e30430f4 	movw	r3, #16628	; 0x40f4
 1000d5c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d60:	e58d3000 	str	r3, [sp]
 1000d64:	e3a03008 	mov	r3, #8
 1000d68:	e3a02010 	mov	r2, #16
 1000d6c:	e3a01000 	mov	r1, #0
 1000d70:	e51b0010 	ldr	r0, [fp, #-16]
 1000d74:	ebfffdca 	bl	10004a4 <alt_clk_freq_get_device>
 1000d78:	e50b0008 	str	r0, [fp, #-8]
        ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR, 0
        );
   /* GPIO has an extra external divider */
   *pfreq/=(1 + ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_GET(
 1000d7c:	e304312c 	movw	r3, #16684	; 0x412c
 1000d80:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d84:	e5933000 	ldr	r3, [r3]
 1000d88:	e6ff3073 	uxth	r3, r3
 1000d8c:	e2832001 	add	r2, r3, #1
 1000d90:	e51b3010 	ldr	r3, [fp, #-16]
 1000d94:	e5933000 	ldr	r3, [r3]
 1000d98:	e1a01002 	mov	r1, r2
 1000d9c:	e1a00003 	mov	r0, r3
 1000da0:	eb00116d 	bl	100535c <__udivsi3>
 1000da4:	e1a03000 	mov	r3, r0
 1000da8:	e1a02003 	mov	r2, r3
 1000dac:	e51b3010 	ldr	r3, [fp, #-16]
 1000db0:	e5832000 	str	r2, [r3]
               alt_read_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR)));
   return ret;
 1000db4:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000db8:	e1a00003 	mov	r0, r3
 1000dbc:	e24bd004 	sub	sp, fp, #4
 1000dc0:	e8bd8800 	pop	{fp, pc}

01000dc4 <alt_clk_freq_get_sdmmc>:

ALT_STATUS_CODE alt_clk_freq_get_sdmmc(alt_freq_t *pfreq)
{
 1000dc4:	e92d4800 	push	{fp, lr}
 1000dc8:	e28db004 	add	fp, sp, #4
 1000dcc:	e24dd020 	sub	sp, sp, #32
 1000dd0:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000dd4:	e3a03000 	mov	r3, #0
 1000dd8:	e58d3010 	str	r3, [sp, #16]
 1000ddc:	e3043078 	movw	r3, #16504	; 0x4078
 1000de0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000de4:	e58d300c 	str	r3, [sp, #12]
 1000de8:	e3a03000 	mov	r3, #0
 1000dec:	e58d3008 	str	r3, [sp, #8]
 1000df0:	e30430f8 	movw	r3, #16632	; 0x40f8
 1000df4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000df8:	e58d3004 	str	r3, [sp, #4]
 1000dfc:	e30430f8 	movw	r3, #16632	; 0x40f8
 1000e00:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e04:	e58d3000 	str	r3, [sp]
 1000e08:	e3a03010 	mov	r3, #16
 1000e0c:	e3a02020 	mov	r2, #32
 1000e10:	e3a01000 	mov	r1, #0
 1000e14:	e51b0008 	ldr	r0, [fp, #-8]
 1000e18:	ebfffda1 	bl	10004a4 <alt_clk_freq_get_device>
 1000e1c:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_BYPASS_SDMMC_SET_MSK,
        ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR, 0
        );
}
 1000e20:	e1a00003 	mov	r0, r3
 1000e24:	e24bd004 	sub	sp, fp, #4
 1000e28:	e8bd8800 	pop	{fp, pc}

01000e2c <alt_clk_freq_get_qspi>:

ALT_STATUS_CODE alt_clk_freq_get_qspi(alt_freq_t *pfreq)
{
 1000e2c:	e92d4800 	push	{fp, lr}
 1000e30:	e28db004 	add	fp, sp, #4
 1000e34:	e24dd008 	sub	sp, sp, #8
 1000e38:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_l4_main(pfreq);
 1000e3c:	e51b0008 	ldr	r0, [fp, #-8]
 1000e40:	ebfffe85 	bl	100085c <alt_clk_freq_get_l4_main>
 1000e44:	e1a03000 	mov	r3, r0
}
 1000e48:	e1a00003 	mov	r0, r3
 1000e4c:	e24bd004 	sub	sp, fp, #4
 1000e50:	e8bd8800 	pop	{fp, pc}

01000e54 <alt_clk_freq_get_s2f_user0>:
    *pfreq/=alt_read_word(ALT_SPIM1_BAUDR_ADDR);
    return ret;
}

ALT_STATUS_CODE alt_clk_freq_get_s2f_user0(alt_freq_t *pfreq)
{
 1000e54:	e92d4800 	push	{fp, lr}
 1000e58:	e28db004 	add	fp, sp, #4
 1000e5c:	e24dd020 	sub	sp, sp, #32
 1000e60:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000e64:	e3a03000 	mov	r3, #0
 1000e68:	e58d3010 	str	r3, [sp, #16]
 1000e6c:	e304307c 	movw	r3, #16508	; 0x407c
 1000e70:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e74:	e58d300c 	str	r3, [sp, #12]
 1000e78:	e3a03000 	mov	r3, #0
 1000e7c:	e58d3008 	str	r3, [sp, #8]
 1000e80:	e30430fc 	movw	r3, #16636	; 0x40fc
 1000e84:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e88:	e58d3004 	str	r3, [sp, #4]
 1000e8c:	e304307c 	movw	r3, #16508	; 0x407c
 1000e90:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e94:	e58d3000 	str	r3, [sp]
 1000e98:	e3a03004 	mov	r3, #4
 1000e9c:	e3a02040 	mov	r2, #64	; 0x40
 1000ea0:	e3a01001 	mov	r1, #1
 1000ea4:	e51b0008 	ldr	r0, [fp, #-8]
 1000ea8:	ebfffd7d 	bl	10004a4 <alt_clk_freq_get_device>
 1000eac:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_MAINPLL_BYPASS_S2FUSER0_SET_MSK,
        ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR, 0
        );
}
 1000eb0:	e1a00003 	mov	r0, r3
 1000eb4:	e24bd004 	sub	sp, fp, #4
 1000eb8:	e8bd8800 	pop	{fp, pc}

01000ebc <alt_clk_freq_get_s2f_user1>:

ALT_STATUS_CODE alt_clk_freq_get_s2f_user1(alt_freq_t *pfreq)
{
 1000ebc:	e92d4800 	push	{fp, lr}
 1000ec0:	e28db004 	add	fp, sp, #4
 1000ec4:	e24dd020 	sub	sp, sp, #32
 1000ec8:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000ecc:	e3a03000 	mov	r3, #0
 1000ed0:	e58d3010 	str	r3, [sp, #16]
 1000ed4:	e3043080 	movw	r3, #16512	; 0x4080
 1000ed8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000edc:	e58d300c 	str	r3, [sp, #12]
 1000ee0:	e3a03000 	mov	r3, #0
 1000ee4:	e58d3008 	str	r3, [sp, #8]
 1000ee8:	e3a03c41 	mov	r3, #16640	; 0x4100
 1000eec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000ef0:	e58d3004 	str	r3, [sp, #4]
 1000ef4:	e3a03c41 	mov	r3, #16640	; 0x4100
 1000ef8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000efc:	e58d3000 	str	r3, [sp]
 1000f00:	e3a03020 	mov	r3, #32
 1000f04:	e3a02040 	mov	r2, #64	; 0x40
 1000f08:	e3a01000 	mov	r1, #0
 1000f0c:	e51b0008 	ldr	r0, [fp, #-8]
 1000f10:	ebfffd63 	bl	10004a4 <alt_clk_freq_get_device>
 1000f14:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_BYPASS_S2FUSER1_SET_MSK,
        ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR, 0
        );
}
 1000f18:	e1a00003 	mov	r0, r3
 1000f1c:	e24bd004 	sub	sp, fp, #4
 1000f20:	e8bd8800 	pop	{fp, pc}

01000f24 <alt_clk_freq_get_hmc>:

ALT_STATUS_CODE alt_clk_freq_get_hmc(alt_freq_t *pfreq)
{
 1000f24:	e92d4800 	push	{fp, lr}
 1000f28:	e28db004 	add	fp, sp, #4
 1000f2c:	e24dd020 	sub	sp, sp, #32
 1000f30:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000f34:	e3a03000 	mov	r3, #0
 1000f38:	e58d3010 	str	r3, [sp, #16]
 1000f3c:	e3043084 	movw	r3, #16516	; 0x4084
 1000f40:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000f44:	e58d300c 	str	r3, [sp, #12]
 1000f48:	e3a03000 	mov	r3, #0
 1000f4c:	e58d3008 	str	r3, [sp, #8]
 1000f50:	e3043104 	movw	r3, #16644	; 0x4104
 1000f54:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000f58:	e58d3004 	str	r3, [sp, #4]
 1000f5c:	e3043084 	movw	r3, #16516	; 0x4084
 1000f60:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000f64:	e58d3000 	str	r3, [sp]
 1000f68:	e3a03008 	mov	r3, #8
 1000f6c:	e3a02000 	mov	r2, #0
 1000f70:	e3a01001 	mov	r1, #1
 1000f74:	e51b0008 	ldr	r0, [fp, #-8]
 1000f78:	ebfffd49 	bl	10004a4 <alt_clk_freq_get_device>
 1000f7c:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_MAINPLL_BYPASS_HMCPLLREF_SET_MSK,
        ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR, 0
        );
}
 1000f80:	e1a00003 	mov	r0, r3
 1000f84:	e24bd004 	sub	sp, fp, #4
 1000f88:	e8bd8800 	pop	{fp, pc}

01000f8c <alt_clk_freq_get>:

/*
// alt_clk_freq_get() returns the output frequency of the specified clock.
*/
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
 1000f8c:	e92d4800 	push	{fp, lr}
 1000f90:	e28db004 	add	fp, sp, #4
 1000f94:	e24dd010 	sub	sp, sp, #16
 1000f98:	e1a03000 	mov	r3, r0
 1000f9c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 1000fa0:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE ret = ALT_E_SUCCESS; /*SALT_E_BAD_ARG;*/
 1000fa4:	e3a03000 	mov	r3, #0
 1000fa8:	e50b3008 	str	r3, [fp, #-8]

    if (freq == NULL)
 1000fac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1000fb0:	e3530000 	cmp	r3, #0
 1000fb4:	1a000001 	bne	1000fc0 <alt_clk_freq_get+0x34>
    {
        return ret;
 1000fb8:	e51b3008 	ldr	r3, [fp, #-8]
 1000fbc:	ea00007e 	b	10011bc <alt_clk_freq_get+0x230>
    }

    switch (clk)
 1000fc0:	e55b300d 	ldrb	r3, [fp, #-13]
 1000fc4:	e353001d 	cmp	r3, #29
 1000fc8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1000fcc:	ea000076 	b	10011ac <alt_clk_freq_get+0x220>
 1000fd0:	01001048 	tsteq	r0, r8, asr #32
 1000fd4:	01001058 	qaddeq	r1, r8, r0
 1000fd8:	01001068 	tsteq	r0, r8, rrx
 1000fdc:	01001078 	tsteq	r0, r8, ror r0
 1000fe0:	01001088 	smlabbeq	r0, r8, r0, r1
 1000fe4:	01001098 	swpeq	r1, r8, [r0]
 1000fe8:	010010a8 	smlatbeq	r0, r8, r0, r1
 1000fec:	010010b8 	strheq	r1, [r0, -r8]
 1000ff0:	010010c8 	smlabteq	r0, r8, r0, r1
 1000ff4:	010010d4 	ldrdeq	r1, [r0, -r4]
 1000ff8:	010010e0 	smlatteq	r0, r0, r0, r1
 1000ffc:	010010ec 	smlatteq	r0, ip, r0, r1
 1001000:	010010f8 	strdeq	r1, [r0, -r8]
 1001004:	01001104 	tsteq	r0, r4, lsl #2
 1001008:	01001110 	tsteq	r0, r0, lsl r1
 100100c:	0100111c 	tsteq	r0, ip, lsl r1
 1001010:	01001128 	tsteq	r0, r8, lsr #2
 1001014:	01001134 	tsteq	r0, r4, lsr r1
 1001018:	01001140 	tsteq	r0, r0, asr #2
 100101c:	0100114c 	tsteq	r0, ip, asr #2
 1001020:	01001158 	tsteq	r0, r8, asr r1
 1001024:	01001164 	tsteq	r0, r4, ror #2
 1001028:	01001170 	tsteq	r0, r0, ror r1
 100102c:	0100117c 	tsteq	r0, ip, ror r1
 1001030:	01001188 	smlabbeq	r0, r8, r1, r1
 1001034:	01001194 			; <UNDEFINED> instruction: 0x01001194
 1001038:	010011ac 	smlatbeq	r0, ip, r1, r1
 100103c:	010011ac 	smlatbeq	r0, ip, r1, r1
 1001040:	010011ac 	smlatbeq	r0, ip, r1, r1
 1001044:	010011a0 	smlatbeq	r0, r0, r1, r1
    {
        /* External Inputs */
    case ALT_CLK_OSC1:
        ret = alt_clk_freq_get_osc1(freq);
 1001048:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100104c:	ebfffc22 	bl	10000dc <alt_clk_freq_get_osc1>
 1001050:	e50b0008 	str	r0, [fp, #-8]
        break;
 1001054:	ea000057 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_F2S_FREE_CLK:
        ret = alt_clk_freq_get_f2s_free_clk(freq);
 1001058:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100105c:	ebfffc41 	bl	1000168 <alt_clk_freq_get_f2s_free_clk>
 1001060:	e50b0008 	str	r0, [fp, #-8]
        break;
 1001064:	ea000053 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_INTOSC_HS_DIV2:
        ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(freq);
 1001068:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100106c:	ebfffc28 	bl	1000114 <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 1001070:	e50b0008 	str	r0, [fp, #-8]
        break;
 1001074:	ea00004f 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MAIN_PLL:
        ret = alt_clk_freq_get_main_pll(freq);
 1001078:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100107c:	ebfffc4e 	bl	10001bc <alt_clk_freq_get_main_pll>
 1001080:	e50b0008 	str	r0, [fp, #-8]
        break;
 1001084:	ea00004b 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_PERIPHERAL_PLL:
        ret = alt_clk_freq_get_peri_pll(freq);
 1001088:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100108c:	ebfffca0 	bl	1000314 <alt_clk_freq_get_peri_pll>
 1001090:	e50b0008 	str	r0, [fp, #-8]
        break;
 1001094:	ea000047 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MPU:
        ret = alt_clk_freq_get_mpu(freq);
 1001098:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100109c:	ebfffd88 	bl	10006c4 <alt_clk_freq_get_mpu>
 10010a0:	e50b0008 	str	r0, [fp, #-8]
        break;
 10010a4:	ea000043 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MPU_PERIPH:
        ret = alt_clk_freq_get_mpu_periph(freq);
 10010a8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010ac:	ebfffd9f 	bl	1000730 <alt_clk_freq_get_mpu_periph>
 10010b0:	e50b0008 	str	r0, [fp, #-8]
        break;
 10010b4:	ea00003f 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MPU_L2_RAM:
        ret = alt_clk_freq_get_mpu_l2ram(freq);
 10010b8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010bc:	ebfffdab 	bl	1000770 <alt_clk_freq_get_mpu_l2ram>
 10010c0:	e50b0008 	str	r0, [fp, #-8]
        break;
 10010c4:	ea00003b 	b	10011b8 <alt_clk_freq_get+0x22c>

    case ALT_CLK_L3_MAIN:
        alt_clk_freq_get_l3_main_free(freq);
 10010c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010cc:	ebfffdb7 	bl	10007b0 <alt_clk_freq_get_l3_main_free>
        break;
 10010d0:	ea000038 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_SYS_FREE:
        alt_clk_freq_get_l4_sys_free(freq);
 10010d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010d8:	ebfffdcf 	bl	100081c <alt_clk_freq_get_l4_sys_free>
        break;
 10010dc:	ea000035 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_MAIN:
        alt_clk_freq_get_l4_main(freq);
 10010e0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010e4:	ebfffddc 	bl	100085c <alt_clk_freq_get_l4_main>
        break;
 10010e8:	ea000032 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_MP:
        alt_clk_freq_get_l4_mp(freq);
 10010ec:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010f0:	ebfffdf3 	bl	10008c4 <alt_clk_freq_get_l4_mp>
        break;
 10010f4:	ea00002f 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_SP:
        alt_clk_freq_get_l4_sp(freq);
 10010f8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010fc:	ebfffe0b 	bl	1000930 <alt_clk_freq_get_l4_sp>
        break;
 1001100:	ea00002c 	b	10011b8 <alt_clk_freq_get+0x22c>

    case ALT_CLK_CS_TIMER:
        alt_clk_freq_get_cs_timer(freq);
 1001104:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001108:	ebfffe23 	bl	100099c <alt_clk_freq_get_cs_timer>
        break;
 100110c:	ea000029 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_CS_AT:
        alt_clk_freq_get_cs_at(freq);
 1001110:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001114:	ebfffe3b 	bl	1000a08 <alt_clk_freq_get_cs_at>
        break;
 1001118:	ea000026 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_CS_PDBG:
        alt_clk_freq_get_cs_pdbg(freq);
 100111c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001120:	ebfffe53 	bl	1000a74 <alt_clk_freq_get_cs_pdbg>
        break;
 1001124:	ea000023 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_CS_TRACE:
        alt_clk_freq_get_cs_trace(freq);
 1001128:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100112c:	ebfffe6b 	bl	1000ae0 <alt_clk_freq_get_cs_trace>
        break;
 1001130:	ea000020 	b	10011b8 <alt_clk_freq_get+0x22c>

    case ALT_CLK_S2F_USER0:
        alt_clk_freq_get_s2f_user0(freq);
 1001134:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001138:	ebffff45 	bl	1000e54 <alt_clk_freq_get_s2f_user0>
        break;
 100113c:	ea00001d 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_S2F_USER1:
        alt_clk_freq_get_s2f_user1(freq);
 1001140:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001144:	ebffff5c 	bl	1000ebc <alt_clk_freq_get_s2f_user1>
        break;
 1001148:	ea00001a 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_HMC_PLL_REF:
        alt_clk_freq_get_hmc(freq);
 100114c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001150:	ebffff73 	bl	1000f24 <alt_clk_freq_get_hmc>
        break;
 1001154:	ea000017 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC0:
        alt_clk_freq_get_emac0(freq);
 1001158:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100115c:	ebfffeb1 	bl	1000c28 <alt_clk_freq_get_emac0>
        break;
 1001160:	ea000014 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC1:
        alt_clk_freq_get_emac1(freq);
 1001164:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001168:	ebfffeba 	bl	1000c58 <alt_clk_freq_get_emac1>
        break;
 100116c:	ea000011 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC2:
        alt_clk_freq_get_emac2(freq);
 1001170:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001174:	ebfffec3 	bl	1000c88 <alt_clk_freq_get_emac2>
        break;
 1001178:	ea00000e 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC_PTP:
        alt_clk_freq_get_emac_ptp(freq);
 100117c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001180:	ebfffecc 	bl	1000cb8 <alt_clk_freq_get_emac_ptp>
        break;
 1001184:	ea00000b 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_GPIO:
        alt_clk_freq_get_gpio(freq);
 1001188:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100118c:	ebfffee3 	bl	1000d20 <alt_clk_freq_get_gpio>
        break;
 1001190:	ea000008 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_SDMMC:
        alt_clk_freq_get_sdmmc(freq);
 1001194:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001198:	ebffff09 	bl	1000dc4 <alt_clk_freq_get_sdmmc>
        break;
 100119c:	ea000005 	b	10011b8 <alt_clk_freq_get+0x22c>
    case ALT_CLK_QSPI:
        alt_clk_freq_get_qspi(freq);
 10011a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10011a4:	ebffff20 	bl	1000e2c <alt_clk_freq_get_qspi>
        break;
 10011a8:	ea000002 	b	10011b8 <alt_clk_freq_get+0x22c>
    default:
        ret = ALT_E_BAD_ARG;
 10011ac:	e3e03008 	mvn	r3, #8
 10011b0:	e50b3008 	str	r3, [fp, #-8]
        break;
 10011b4:	e320f000 	nop	{0}

    }   /* end of switch-case construct */

    return ret;
 10011b8:	e51b3008 	ldr	r3, [fp, #-8]
}
 10011bc:	e1a00003 	mov	r0, r3
 10011c0:	e24bd004 	sub	sp, fp, #4
 10011c4:	e8bd8800 	pop	{fp, pc}

010011c8 <alt_clk_is_enabled_helper>:
        return ALT_E_BAD_ARG;
    }   /* end of switch-case construct */
}

static __inline ALT_STATUS_CODE alt_clk_is_enabled_helper(void *reg, uint32_t mask)
{
 10011c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10011cc:	e28db000 	add	fp, sp, #0
 10011d0:	e24dd00c 	sub	sp, sp, #12
 10011d4:	e50b0008 	str	r0, [fp, #-8]
 10011d8:	e50b100c 	str	r1, [fp, #-12]
  if(mask & alt_read_word( reg ))
 10011dc:	e51b3008 	ldr	r3, [fp, #-8]
 10011e0:	e5932000 	ldr	r2, [r3]
 10011e4:	e51b300c 	ldr	r3, [fp, #-12]
 10011e8:	e0033002 	and	r3, r3, r2
 10011ec:	e3530000 	cmp	r3, #0
 10011f0:	0a000001 	beq	10011fc <alt_clk_is_enabled_helper+0x34>
      return ALT_E_TRUE;
 10011f4:	e3a03001 	mov	r3, #1
 10011f8:	ea000000 	b	1001200 <alt_clk_is_enabled_helper+0x38>
  else
      return ALT_E_FALSE;
 10011fc:	e3a03000 	mov	r3, #0
}
 1001200:	e1a00003 	mov	r0, r3
 1001204:	e28bd000 	add	sp, fp, #0
 1001208:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100120c:	e12fff1e 	bx	lr

01001210 <alt_clk_is_enabled>:

ALT_STATUS_CODE alt_clk_is_enabled(ALT_CLK_t clk)
{
 1001210:	e92d4800 	push	{fp, lr}
 1001214:	e28db004 	add	fp, sp, #4
 1001218:	e24dd008 	sub	sp, sp, #8
 100121c:	e1a03000 	mov	r3, r0
 1001220:	e54b3005 	strb	r3, [fp, #-5]
    switch (clk)
 1001224:	e55b3005 	ldrb	r3, [fp, #-5]
 1001228:	e2433005 	sub	r3, r3, #5
 100122c:	e3530018 	cmp	r3, #24
 1001230:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1001234:	ea00008a 	b	1001464 <alt_clk_is_enabled+0x254>
 1001238:	0100129c 			; <UNDEFINED> instruction: 0x0100129c
 100123c:	01001464 	tsteq	r0, r4, ror #8
 1001240:	01001464 	tsteq	r0, r4, ror #8
 1001244:	01001464 	tsteq	r0, r4, ror #8
 1001248:	01001464 	tsteq	r0, r4, ror #8
 100124c:	010012b4 			; <UNDEFINED> instruction: 0x010012b4
 1001250:	010012cc 	smlabteq	r0, ip, r2, r1
 1001254:	010012e4 	smlatteq	r0, r4, r2, r1
 1001258:	010012fc 	strdeq	r1, [r0, -ip]
 100125c:	01001314 	tsteq	r0, r4, lsl r3
 1001260:	01001464 	tsteq	r0, r4, ror #8
 1001264:	01001464 	tsteq	r0, r4, ror #8
 1001268:	0100132c 	tsteq	r0, ip, lsr #6
 100126c:	01001344 	tsteq	r0, r4, asr #6
 1001270:	0100135c 	tsteq	r0, ip, asr r3
 1001274:	01001374 	tsteq	r0, r4, ror r3
 1001278:	0100138c 	smlabbeq	r0, ip, r3, r1
 100127c:	010013a4 	smlatbeq	r0, r4, r3, r1
 1001280:	010013bc 			; <UNDEFINED> instruction: 0x010013bc
 1001284:	010013d4 	ldrdeq	r1, [r0, -r4]
 1001288:	010013ec 	smlatteq	r0, ip, r3, r1
 100128c:	01001404 	tsteq	r0, r4, lsl #8
 1001290:	0100141c 	tsteq	r0, ip, lsl r4
 1001294:	01001434 	tsteq	r0, r4, lsr r4
 1001298:	0100144c 	tsteq	r0, ip, asr #8
    {
        /* External Inputs */
    case ALT_CLK_MPU:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_MPUCLKEN_SET_MSK);
 100129c:	e3a01001 	mov	r1, #1
 10012a0:	e3040048 	movw	r0, #16456	; 0x4048
 10012a4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012a8:	ebffffc6 	bl	10011c8 <alt_clk_is_enabled_helper>
 10012ac:	e1a03000 	mov	r3, r0
 10012b0:	ea00006c 	b	1001468 <alt_clk_is_enabled+0x258>

    case ALT_CLK_L4_MAIN:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLKEN_SET_MSK);
 10012b4:	e3a01002 	mov	r1, #2
 10012b8:	e3040048 	movw	r0, #16456	; 0x4048
 10012bc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012c0:	ebffffc0 	bl	10011c8 <alt_clk_is_enabled_helper>
 10012c4:	e1a03000 	mov	r3, r0
 10012c8:	ea000066 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_L4_MP:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLKEN_SET_MSK);
 10012cc:	e3a01004 	mov	r1, #4
 10012d0:	e3040048 	movw	r0, #16456	; 0x4048
 10012d4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012d8:	ebffffba 	bl	10011c8 <alt_clk_is_enabled_helper>
 10012dc:	e1a03000 	mov	r3, r0
 10012e0:	ea000060 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_L4_SP:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLKEN_SET_MSK);
 10012e4:	e3a01008 	mov	r1, #8
 10012e8:	e3040048 	movw	r0, #16456	; 0x4048
 10012ec:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012f0:	ebffffb4 	bl	10011c8 <alt_clk_is_enabled_helper>
 10012f4:	e1a03000 	mov	r3, r0
 10012f8:	ea00005a 	b	1001468 <alt_clk_is_enabled+0x258>

    case ALT_CLK_CS_TIMER:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CSTMRCLKEN_SET_MSK);
 10012fc:	e3a01020 	mov	r1, #32
 1001300:	e3040048 	movw	r0, #16456	; 0x4048
 1001304:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001308:	ebffffae 	bl	10011c8 <alt_clk_is_enabled_helper>
 100130c:	e1a03000 	mov	r3, r0
 1001310:	ea000054 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_CS_AT:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CSCLKEN_SET_MSK);
 1001314:	e3a01010 	mov	r1, #16
 1001318:	e3040048 	movw	r0, #16456	; 0x4048
 100131c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001320:	ebffffa8 	bl	10011c8 <alt_clk_is_enabled_helper>
 1001324:	e1a03000 	mov	r3, r0
 1001328:	ea00004e 	b	1001468 <alt_clk_is_enabled+0x258>

    case ALT_CLK_S2F_USER0:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLKEN_SET_MSK);
 100132c:	e3a01040 	mov	r1, #64	; 0x40
 1001330:	e3040048 	movw	r0, #16456	; 0x4048
 1001334:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001338:	ebffffa2 	bl	10011c8 <alt_clk_is_enabled_helper>
 100133c:	e1a03000 	mov	r3, r0
 1001340:	ea000048 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_S2F_USER1:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLKEN_SET_MSK);
 1001344:	e3a01040 	mov	r1, #64	; 0x40
 1001348:	e30400c8 	movw	r0, #16584	; 0x40c8
 100134c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001350:	ebffff9c 	bl	10011c8 <alt_clk_is_enabled_helper>
 1001354:	e1a03000 	mov	r3, r0
 1001358:	ea000042 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_HMC_PLL_REF:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_HMCPLLREFCLKEN_SET_MSK);
 100135c:	e3a01080 	mov	r1, #128	; 0x80
 1001360:	e3040048 	movw	r0, #16456	; 0x4048
 1001364:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001368:	ebffff96 	bl	10011c8 <alt_clk_is_enabled_helper>
 100136c:	e1a03000 	mov	r3, r0
 1001370:	ea00003c 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC0:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0EN_SET_MSK);
 1001374:	e3a01001 	mov	r1, #1
 1001378:	e30400c8 	movw	r0, #16584	; 0x40c8
 100137c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001380:	ebffff90 	bl	10011c8 <alt_clk_is_enabled_helper>
 1001384:	e1a03000 	mov	r3, r0
 1001388:	ea000036 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC1:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1EN_SET_MSK);
 100138c:	e3a01002 	mov	r1, #2
 1001390:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001394:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001398:	ebffff8a 	bl	10011c8 <alt_clk_is_enabled_helper>
 100139c:	e1a03000 	mov	r3, r0
 10013a0:	ea000030 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC2:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC2EN_SET_MSK);
 10013a4:	e3a01004 	mov	r1, #4
 10013a8:	e30400c8 	movw	r0, #16584	; 0x40c8
 10013ac:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10013b0:	ebffff84 	bl	10011c8 <alt_clk_is_enabled_helper>
 10013b4:	e1a03000 	mov	r3, r0
 10013b8:	ea00002a 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC_PTP:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMACPTPEN_SET_MSK);
 10013bc:	e3a01008 	mov	r1, #8
 10013c0:	e30400c8 	movw	r0, #16584	; 0x40c8
 10013c4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10013c8:	ebffff7e 	bl	10011c8 <alt_clk_is_enabled_helper>
 10013cc:	e1a03000 	mov	r3, r0
 10013d0:	ea000024 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_GPIO:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIODBEN_SET_MSK);
 10013d4:	e3a01010 	mov	r1, #16
 10013d8:	e30400c8 	movw	r0, #16584	; 0x40c8
 10013dc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10013e0:	ebffff78 	bl	10011c8 <alt_clk_is_enabled_helper>
 10013e4:	e1a03000 	mov	r3, r0
 10013e8:	ea00001e 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_SDMMC:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLKEN_SET_MSK);
 10013ec:	e3a01020 	mov	r1, #32
 10013f0:	e30400c8 	movw	r0, #16584	; 0x40c8
 10013f4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10013f8:	ebffff72 	bl	10011c8 <alt_clk_is_enabled_helper>
 10013fc:	e1a03000 	mov	r3, r0
 1001400:	ea000018 	b	1001468 <alt_clk_is_enabled+0x258>

    case ALT_CLK_USB:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_USBCLKEN_SET_MSK);
 1001404:	e3a01c01 	mov	r1, #256	; 0x100
 1001408:	e30400c8 	movw	r0, #16584	; 0x40c8
 100140c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001410:	ebffff6c 	bl	10011c8 <alt_clk_is_enabled_helper>
 1001414:	e1a03000 	mov	r3, r0
 1001418:	ea000012 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_SPIM:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLKEN_SET_MSK);
 100141c:	e3a01c02 	mov	r1, #512	; 0x200
 1001420:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001424:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001428:	ebffff66 	bl	10011c8 <alt_clk_is_enabled_helper>
 100142c:	e1a03000 	mov	r3, r0
 1001430:	ea00000c 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_NAND:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLKEN_SET_MSK);
 1001434:	e3a01b01 	mov	r1, #1024	; 0x400
 1001438:	e30400c8 	movw	r0, #16584	; 0x40c8
 100143c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001440:	ebffff60 	bl	10011c8 <alt_clk_is_enabled_helper>
 1001444:	e1a03000 	mov	r3, r0
 1001448:	ea000006 	b	1001468 <alt_clk_is_enabled+0x258>
    case ALT_CLK_QSPI:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLKEN_SET_MSK);
 100144c:	e3a01b02 	mov	r1, #2048	; 0x800
 1001450:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001454:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001458:	ebffff5a 	bl	10011c8 <alt_clk_is_enabled_helper>
 100145c:	e1a03000 	mov	r3, r0
 1001460:	ea000000 	b	1001468 <alt_clk_is_enabled+0x258>
    default:
        return ALT_E_BAD_ARG;
 1001464:	e3e03008 	mvn	r3, #8
    }   /* end of switch-case construct */
}
 1001468:	e1a00003 	mov	r0, r3
 100146c:	e24bd004 	sub	sp, fp, #4
 1001470:	e8bd8800 	pop	{fp, pc}

01001474 <alt_read_word_helper>:
// resolves to "*(volatile uint32_t *)src". As there is no assignment, this
// could potentially be optimized away. With the helper, the actual register
// read should occur and be returned (and subsequently discarded).
*/
static __inline uint32_t alt_read_word_helper(const void * addr)
{
 1001474:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001478:	e28db000 	add	fp, sp, #0
 100147c:	e24dd00c 	sub	sp, sp, #12
 1001480:	e50b0008 	str	r0, [fp, #-8]
    return alt_read_word(addr);
 1001484:	e51b3008 	ldr	r3, [fp, #-8]
 1001488:	e5933000 	ldr	r3, [r3]
}
 100148c:	e1a00003 	mov	r0, r3
 1001490:	e28bd000 	add	sp, fp, #0
 1001494:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001498:	e12fff1e 	bx	lr

0100149c <alt_16550_write_divisor_helper>:
/*
// Helper function write the divisor in hardware.
*/
static ALT_STATUS_CODE alt_16550_write_divisor_helper(ALT_16550_HANDLE_t * handle,
                                                      uint32_t divisor)
{
 100149c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10014a0:	e28db000 	add	fp, sp, #0
 10014a4:	e24dd00c 	sub	sp, sp, #12
 10014a8:	e50b0008 	str	r0, [fp, #-8]
 10014ac:	e50b100c 	str	r1, [fp, #-12]
    /* Validate the divisor parameter. */
    if (divisor > 0xffff)
 10014b0:	e51b300c 	ldr	r3, [fp, #-12]
 10014b4:	e3530801 	cmp	r3, #65536	; 0x10000
 10014b8:	3a000001 	bcc	10014c4 <alt_16550_write_divisor_helper+0x28>
    {
        /* This should never happen as it is verified in divisor_set. */
        return ALT_E_ERROR;
 10014bc:	e3e03000 	mvn	r3, #0
 10014c0:	ea000039 	b	10015ac <alt_16550_write_divisor_helper+0x110>
    }

    switch (handle->device)
 10014c4:	e51b3008 	ldr	r3, [fp, #-8]
 10014c8:	e1d330b0 	ldrh	r3, [r3]
 10014cc:	e3530001 	cmp	r3, #1
 10014d0:	ca000002 	bgt	10014e0 <alt_16550_write_divisor_helper+0x44>
 10014d4:	e3530000 	cmp	r3, #0
 10014d8:	aa000002 	bge	10014e8 <alt_16550_write_divisor_helper+0x4c>
 10014dc:	ea000024 	b	1001574 <alt_16550_write_divisor_helper+0xd8>
 10014e0:	e3530c01 	cmp	r3, #256	; 0x100
 10014e4:	1a000022 	bne	1001574 <alt_16550_write_divisor_helper+0xd8>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Set LCR::DLAB (Line Control Register :: Divisor Latch Access Bit) */
        alt_setbits_word(ALT_UART_LCR_ADDR(handle->location), ALT_UART_LCR_DLAB_SET_MSK);
 10014e8:	e51b3008 	ldr	r3, [fp, #-8]
 10014ec:	e5933004 	ldr	r3, [r3, #4]
 10014f0:	e283300c 	add	r3, r3, #12
 10014f4:	e5932000 	ldr	r2, [r3]
 10014f8:	e51b3008 	ldr	r3, [fp, #-8]
 10014fc:	e5933004 	ldr	r3, [r3, #4]
 1001500:	e283300c 	add	r3, r3, #12
 1001504:	e3822080 	orr	r2, r2, #128	; 0x80
 1001508:	e5832000 	str	r2, [r3]

        /* Write DLL (Divisor Latch Low). */
        alt_write_word(ALT_UART_RBR_THR_DLL_ADDR(handle->location), ALT_UART_RBR_THR_DLL_VALUE_SET(divisor));
 100150c:	e51b3008 	ldr	r3, [fp, #-8]
 1001510:	e5933004 	ldr	r3, [r3, #4]
 1001514:	e51b200c 	ldr	r2, [fp, #-12]
 1001518:	e6ef2072 	uxtb	r2, r2
 100151c:	e5832000 	str	r2, [r3]

        /* Write DLH (Divisor Latch High). */
        alt_write_word(ALT_UART_IER_DLH_ADDR(handle->location), ALT_UART_IER_DLH_VALUE_SET(divisor >> 8));
 1001520:	e51b300c 	ldr	r3, [fp, #-12]
 1001524:	e1a02423 	lsr	r2, r3, #8
 1001528:	e51b3008 	ldr	r3, [fp, #-8]
 100152c:	e5933004 	ldr	r3, [r3, #4]
 1001530:	e2833004 	add	r3, r3, #4
 1001534:	e6ef2072 	uxtb	r2, r2
 1001538:	e5832000 	str	r2, [r3]

        /* Clear LCR::DLAB (Line Control Register :: Divisor Latch Access Bit) */
        alt_clrbits_word(ALT_UART_LCR_ADDR(handle->location), ALT_UART_LCR_DLAB_SET_MSK);
 100153c:	e51b3008 	ldr	r3, [fp, #-8]
 1001540:	e5933004 	ldr	r3, [r3, #4]
 1001544:	e283300c 	add	r3, r3, #12
 1001548:	e5932000 	ldr	r2, [r3]
 100154c:	e51b3008 	ldr	r3, [fp, #-8]
 1001550:	e5933004 	ldr	r3, [r3, #4]
 1001554:	e283300c 	add	r3, r3, #12
 1001558:	e3c22080 	bic	r2, r2, #128	; 0x80
 100155c:	e5832000 	str	r2, [r3]

        break;
 1001560:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    /* Update the enabled state in the handle data. */
    if (divisor != 0)
 1001564:	e51b300c 	ldr	r3, [fp, #-12]
 1001568:	e3530000 	cmp	r3, #0
 100156c:	0a000008 	beq	1001594 <alt_16550_write_divisor_helper+0xf8>
 1001570:	ea000001 	b	100157c <alt_16550_write_divisor_helper+0xe0>
        return ALT_E_ERROR;
 1001574:	e3e03000 	mvn	r3, #0
 1001578:	ea00000b 	b	10015ac <alt_16550_write_divisor_helper+0x110>
    {
        handle->data |= ALT_16550_HANDLE_DATA_UART_ENABLED_MSK;
 100157c:	e51b3008 	ldr	r3, [fp, #-8]
 1001580:	e593300c 	ldr	r3, [r3, #12]
 1001584:	e3832102 	orr	r2, r3, #-2147483648	; 0x80000000
 1001588:	e51b3008 	ldr	r3, [fp, #-8]
 100158c:	e583200c 	str	r2, [r3, #12]
 1001590:	ea000004 	b	10015a8 <alt_16550_write_divisor_helper+0x10c>
    }
    else
    {
        handle->data &= ~ALT_16550_HANDLE_DATA_UART_ENABLED_MSK;
 1001594:	e51b3008 	ldr	r3, [fp, #-8]
 1001598:	e593300c 	ldr	r3, [r3, #12]
 100159c:	e3c32102 	bic	r2, r3, #-2147483648	; 0x80000000
 10015a0:	e51b3008 	ldr	r3, [fp, #-8]
 10015a4:	e583200c 	str	r2, [r3, #12]
    }

    return ALT_E_SUCCESS;
 10015a8:	e3a03000 	mov	r3, #0
}
 10015ac:	e1a00003 	mov	r0, r3
 10015b0:	e28bd000 	add	sp, fp, #0
 10015b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10015b8:	e12fff1e 	bx	lr

010015bc <alt_16550_reset_helper>:

/*
// Helper function to reset the UART.
*/
static ALT_STATUS_CODE alt_16550_reset_helper(ALT_16550_HANDLE_t * handle, bool enable_init)
{
 10015bc:	e92d4800 	push	{fp, lr}
 10015c0:	e28db004 	add	fp, sp, #4
 10015c4:	e24dd010 	sub	sp, sp, #16
 10015c8:	e50b0010 	str	r0, [fp, #-16]
 10015cc:	e1a03001 	mov	r3, r1
 10015d0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    switch (handle->device)
 10015d4:	e51b3010 	ldr	r3, [fp, #-16]
 10015d8:	e1d330b0 	ldrh	r3, [r3]
 10015dc:	e3530001 	cmp	r3, #1
 10015e0:	ca000002 	bgt	10015f0 <alt_16550_reset_helper+0x34>
 10015e4:	e3530000 	cmp	r3, #0
 10015e8:	aa000003 	bge	10015fc <alt_16550_reset_helper+0x40>
 10015ec:	ea00001a 	b	100165c <alt_16550_reset_helper+0xa0>
 10015f0:	e3530c01 	cmp	r3, #256	; 0x100
 10015f4:	0a00000b 	beq	1001628 <alt_16550_reset_helper+0x6c>
 10015f8:	ea000017 	b	100165c <alt_16550_reset_helper+0xa0>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
        /* Write SRR::UR (Shadow Reset Register :: UART Reset) */
        alt_write_word(ALT_UART_SRR_ADDR(handle->location), ALT_UART_SRR_UR_SET_MSK);
 10015fc:	e51b3010 	ldr	r3, [fp, #-16]
 1001600:	e5933004 	ldr	r3, [r3, #4]
 1001604:	e2833088 	add	r3, r3, #136	; 0x88
 1001608:	e3a02001 	mov	r2, #1
 100160c:	e5832000 	str	r2, [r3]

        /* Read the MSR to work around case:119085. */
        alt_read_word_helper(ALT_UART_MSR_ADDR(handle->location));
 1001610:	e51b3010 	ldr	r3, [fp, #-16]
 1001614:	e5933004 	ldr	r3, [r3, #4]
 1001618:	e2833018 	add	r3, r3, #24
 100161c:	e1a00003 	mov	r0, r3
 1001620:	ebffff93 	bl	1001474 <alt_read_word_helper>
        break;
 1001624:	ea00000e 	b	1001664 <alt_16550_reset_helper+0xa8>

    case ALT_16550_DEVICE_ALTERA_16550_UART:
        alt_16550_write_divisor_helper(handle, 0); /* Disable UART */
 1001628:	e3a01000 	mov	r1, #0
 100162c:	e51b0010 	ldr	r0, [fp, #-16]
 1001630:	ebffff99 	bl	100149c <alt_16550_write_divisor_helper>
        alt_16550_int_disable_all(handle);         /* Disable interrupts */
 1001634:	e51b0010 	ldr	r0, [fp, #-16]
 1001638:	eb00018a 	bl	1001c68 <alt_16550_int_disable_all>
        alt_16550_fifo_disable(handle);            /* Disable FIFOs */
 100163c:	e51b0010 	ldr	r0, [fp, #-16]
 1001640:	eb0000bc 	bl	1001938 <alt_16550_fifo_disable>
        alt_write_word(ALT_UART_MCR_ADDR(handle->location), 0); /* 0 -> MCR (AFCE, LP, OUT2, OUT1, RTS, DTR) */
 1001644:	e51b3010 	ldr	r3, [fp, #-16]
 1001648:	e5933004 	ldr	r3, [r3, #4]
 100164c:	e2833010 	add	r3, r3, #16
 1001650:	e3a02000 	mov	r2, #0
 1001654:	e5832000 	str	r2, [r3]
        break;
 1001658:	ea000001 	b	1001664 <alt_16550_reset_helper+0xa8>

    default:
        return ALT_E_ERROR;
 100165c:	e3e03000 	mvn	r3, #0
 1001660:	ea000028 	b	1001708 <alt_16550_reset_helper+0x14c>
    }

    /* If we are initializing (as opposed to just uninitializing) */
    if (enable_init)
 1001664:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1001668:	e3530000 	cmp	r3, #0
 100166c:	0a000024 	beq	1001704 <alt_16550_reset_helper+0x148>
    {
        ALT_STATUS_CODE status;
        uint32_t divisor;

        /* Set bit IER::PTIME (Interrupt Enable Register :: Programmable THRE Mode Enable) */
        alt_setbits_word(ALT_UART_IER_DLH_ADDR(handle->location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
 1001670:	e51b3010 	ldr	r3, [fp, #-16]
 1001674:	e5933004 	ldr	r3, [r3, #4]
 1001678:	e2833004 	add	r3, r3, #4
 100167c:	e5932000 	ldr	r2, [r3]
 1001680:	e51b3010 	ldr	r3, [fp, #-16]
 1001684:	e5933004 	ldr	r3, [r3, #4]
 1001688:	e2833004 	add	r3, r3, #4
 100168c:	e3822080 	orr	r2, r2, #128	; 0x80
 1001690:	e5832000 	str	r2, [r3]

        /* Set the line configuration to use 8-N-1. */
        status = alt_16550_line_config_set(handle, ALT_16550_DATABITS_8,
 1001694:	e3a03000 	mov	r3, #0
 1001698:	e3a02000 	mov	r2, #0
 100169c:	e3a01003 	mov	r1, #3
 10016a0:	e51b0010 	ldr	r0, [fp, #-16]
 10016a4:	eb00017a 	bl	1001c94 <alt_16550_line_config_set>
 10016a8:	e50b0008 	str	r0, [fp, #-8]
                                                   ALT_16550_PARITY_DISABLE,
                                                   ALT_16550_STOPBITS_1);
        if (status != ALT_E_SUCCESS)
 10016ac:	e51b3008 	ldr	r3, [fp, #-8]
 10016b0:	e3530000 	cmp	r3, #0
 10016b4:	0a000001 	beq	10016c0 <alt_16550_reset_helper+0x104>
        {
            return status;
 10016b8:	e51b3008 	ldr	r3, [fp, #-8]
 10016bc:	ea000011 	b	1001708 <alt_16550_reset_helper+0x14c>
        }

        divisor = ALT_16550_HANDLE_DATA_DIVISOR_VALUE_GET(handle->data);
 10016c0:	e51b3010 	ldr	r3, [fp, #-16]
 10016c4:	e593300c 	ldr	r3, [r3, #12]
 10016c8:	e6ff3073 	uxth	r3, r3
 10016cc:	e50b300c 	str	r3, [fp, #-12]
        if (divisor == 0)
 10016d0:	e51b300c 	ldr	r3, [fp, #-12]
 10016d4:	e3530000 	cmp	r3, #0
 10016d8:	1a000009 	bne	1001704 <alt_16550_reset_helper+0x148>
        {
            status = alt_16550_baudrate_set(handle, DEFAULT_BAUD);
 10016dc:	e3a01cc2 	mov	r1, #49664	; 0xc200
 10016e0:	e3401001 	movt	r1, #1
 10016e4:	e51b0010 	ldr	r0, [fp, #-16]
 10016e8:	eb000102 	bl	1001af8 <alt_16550_baudrate_set>
 10016ec:	e50b0008 	str	r0, [fp, #-8]
            if (status != ALT_E_SUCCESS)
 10016f0:	e51b3008 	ldr	r3, [fp, #-8]
 10016f4:	e3530000 	cmp	r3, #0
 10016f8:	0a000001 	beq	1001704 <alt_16550_reset_helper+0x148>
            {
                return status;
 10016fc:	e51b3008 	ldr	r3, [fp, #-8]
 1001700:	ea000000 	b	1001708 <alt_16550_reset_helper+0x14c>
            }
        }
    }

    return ALT_E_SUCCESS;
 1001704:	e3a03000 	mov	r3, #0
}
 1001708:	e1a00003 	mov	r0, r3
 100170c:	e24bd004 	sub	sp, fp, #4
 1001710:	e8bd8800 	pop	{fp, pc}

01001714 <alt_16550_init>:

ALT_STATUS_CODE alt_16550_init(ALT_16550_DEVICE_t device,
                               void * location,
                               alt_freq_t clock_freq,
                               ALT_16550_HANDLE_t * handle)
{
 1001714:	e92d4800 	push	{fp, lr}
 1001718:	e28db004 	add	fp, sp, #4
 100171c:	e24dd018 	sub	sp, sp, #24
 1001720:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 1001724:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 1001728:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 100172c:	e1a03000 	mov	r3, r0
 1001730:	e14b30be 	strh	r3, [fp, #-14]
    handle->device = device;
 1001734:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001738:	e15b20be 	ldrh	r2, [fp, #-14]
 100173c:	e1c320b0 	strh	r2, [r3]
    handle->data   = 0;
 1001740:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001744:	e3a02000 	mov	r2, #0
 1001748:	e583200c 	str	r2, [r3, #12]
    handle->fcr    = 0;
 100174c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001750:	e3a02000 	mov	r2, #0
 1001754:	e5832010 	str	r2, [r3, #16]

    switch (device)
 1001758:	e15b30be 	ldrh	r3, [fp, #-14]
 100175c:	e3530001 	cmp	r3, #1
 1001760:	ca000002 	bgt	1001770 <alt_16550_init+0x5c>
 1001764:	e3530000 	cmp	r3, #0
 1001768:	aa000003 	bge	100177c <alt_16550_init+0x68>
 100176c:	ea000036 	b	100184c <alt_16550_init+0x138>
 1001770:	e3530c01 	cmp	r3, #256	; 0x100
 1001774:	0a00002d 	beq	1001830 <alt_16550_init+0x11c>
 1001778:	ea000033 	b	100184c <alt_16550_init+0x138>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
        /* The ALT_CLK_L4_SP is required for all SoCFPGA UARTs. Check that it's enabled. */
        if (alt_clk_is_enabled(ALT_CLK_L4_SP) != ALT_E_TRUE)
 100177c:	e3a0000c 	mov	r0, #12
 1001780:	ebfffea2 	bl	1001210 <alt_clk_is_enabled>
 1001784:	e1a03000 	mov	r3, r0
 1001788:	e3530001 	cmp	r3, #1
 100178c:	0a000001 	beq	1001798 <alt_16550_init+0x84>
        {
            return ALT_E_BAD_CLK;
 1001790:	e3e0300d 	mvn	r3, #13
 1001794:	ea000032 	b	1001864 <alt_16550_init+0x150>
            ALT_STATUS_CODE status;
            #ifdef soc_cv_av
                uint32_t ucr;
            #endif

            status = alt_clk_freq_get(ALT_CLK_L4_SP, &handle->clock_freq);
 1001798:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100179c:	e2833008 	add	r3, r3, #8
 10017a0:	e1a01003 	mov	r1, r3
 10017a4:	e3a0000c 	mov	r0, #12
 10017a8:	ebfffdf7 	bl	1000f8c <alt_clk_freq_get>
 10017ac:	e50b0008 	str	r0, [fp, #-8]
            if (status != ALT_E_SUCCESS)
 10017b0:	e51b3008 	ldr	r3, [fp, #-8]
 10017b4:	e3530000 	cmp	r3, #0
 10017b8:	0a000001 	beq	10017c4 <alt_16550_init+0xb0>
            {
                return status;
 10017bc:	e51b3008 	ldr	r3, [fp, #-8]
 10017c0:	ea000027 	b	1001864 <alt_16550_init+0x150>
            }

            if (device == ALT_16550_DEVICE_SOCFPGA_UART0)
 10017c4:	e15b30be 	ldrh	r3, [fp, #-14]
 10017c8:	e3530000 	cmp	r3, #0
 10017cc:	1a00000b 	bne	1001800 <alt_16550_init+0xec>
            {
                handle->location = ALT_UART0_ADDR;
 10017d0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 10017d4:	e3a03a02 	mov	r3, #8192	; 0x2000
 10017d8:	e34f3fc0 	movt	r3, #65472	; 0xffc0
 10017dc:	e5823004 	str	r3, [r2, #4]

                /* Bring UART0 out of reset. */
#ifdef soc_cv_av
                alt_clrbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_UART0_SET_MSK);
#else
                alt_clrbits_word(ALT_RSTMGR_PER1MODRST_ADDR, ALT_RSTMGR_PER1MODRST_UART0_SET_MSK);
 10017e0:	e3053028 	movw	r3, #20520	; 0x5028
 10017e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10017e8:	e5932000 	ldr	r2, [r3]
 10017ec:	e3053028 	movw	r3, #20520	; 0x5028
 10017f0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10017f4:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 10017f8:	e5832000 	str	r2, [r3]
            {
                return ALT_E_ERROR;
            }
#endif
        }
        break;
 10017fc:	ea000014 	b	1001854 <alt_16550_init+0x140>
                handle->location = ALT_UART1_ADDR;
 1001800:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 1001804:	e3a03c21 	mov	r3, #8448	; 0x2100
 1001808:	e34f3fc0 	movt	r3, #65472	; 0xffc0
 100180c:	e5823004 	str	r3, [r2, #4]
                alt_clrbits_word(ALT_RSTMGR_PER1MODRST_ADDR, ALT_RSTMGR_PER1MODRST_UART1_SET_MSK);
 1001810:	e3053028 	movw	r3, #20520	; 0x5028
 1001814:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1001818:	e5932000 	ldr	r2, [r3]
 100181c:	e3053028 	movw	r3, #20520	; 0x5028
 1001820:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1001824:	e3c22802 	bic	r2, r2, #131072	; 0x20000
 1001828:	e5832000 	str	r2, [r3]
        break;
 100182c:	ea000008 	b	1001854 <alt_16550_init+0x140>
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        handle->location   = location;
 1001830:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001834:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1001838:	e5832004 	str	r2, [r3, #4]
        handle->clock_freq = clock_freq;
 100183c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001840:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 1001844:	e5832008 	str	r2, [r3, #8]
        break;
 1001848:	ea000001 	b	1001854 <alt_16550_init+0x140>
    default:
        return ALT_E_BAD_ARG;
 100184c:	e3e03008 	mvn	r3, #8
 1001850:	ea000003 	b	1001864 <alt_16550_init+0x150>
    }

    return alt_16550_reset_helper(handle, true);
 1001854:	e3a01001 	mov	r1, #1
 1001858:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 100185c:	ebffff56 	bl	10015bc <alt_16550_reset_helper>
 1001860:	e1a03000 	mov	r3, r0
}
 1001864:	e1a00003 	mov	r0, r3
 1001868:	e24bd004 	sub	sp, fp, #4
 100186c:	e8bd8800 	pop	{fp, pc}

01001870 <alt_16550_enable>:
{
    return alt_16550_reset_helper(handle, true);
}

ALT_STATUS_CODE alt_16550_enable(ALT_16550_HANDLE_t * handle)
{
 1001870:	e92d4800 	push	{fp, lr}
 1001874:	e28db004 	add	fp, sp, #4
 1001878:	e24dd008 	sub	sp, sp, #8
 100187c:	e50b0008 	str	r0, [fp, #-8]
    /* Enable Terminal*/
  alt_16550_modem_enable_dtr(handle);
 1001880:	e51b0008 	ldr	r0, [fp, #-8]
 1001884:	eb000182 	bl	1001e94 <alt_16550_modem_enable_dtr>
  alt_16550_modem_enable_rts(handle);
 1001888:	e51b0008 	ldr	r0, [fp, #-8]
 100188c:	eb000175 	bl	1001e68 <alt_16550_modem_enable_rts>

    /* Write the divisor cached in the handle data to the divisor registers. */
    /* This will effectively enable the UART. */
    return alt_16550_write_divisor_helper(handle,
                                          ALT_16550_HANDLE_DATA_DIVISOR_VALUE_GET(handle->data));
 1001890:	e51b3008 	ldr	r3, [fp, #-8]
 1001894:	e593300c 	ldr	r3, [r3, #12]
    return alt_16550_write_divisor_helper(handle,
 1001898:	e6ff3073 	uxth	r3, r3
 100189c:	e1a01003 	mov	r1, r3
 10018a0:	e51b0008 	ldr	r0, [fp, #-8]
 10018a4:	ebfffefc 	bl	100149c <alt_16550_write_divisor_helper>
 10018a8:	e1a03000 	mov	r3, r0

}
 10018ac:	e1a00003 	mov	r0, r3
 10018b0:	e24bd004 	sub	sp, fp, #4
 10018b4:	e8bd8800 	pop	{fp, pc}

010018b8 <alt_16550_fifo_enable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_16550_fifo_enable(ALT_16550_HANDLE_t * handle)
{
 10018b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10018bc:	e28db000 	add	fp, sp, #0
 10018c0:	e24dd00c 	sub	sp, sp, #12
 10018c4:	e50b0008 	str	r0, [fp, #-8]
    switch (handle->device)
 10018c8:	e51b3008 	ldr	r3, [fp, #-8]
 10018cc:	e1d330b0 	ldrh	r3, [r3]
 10018d0:	e3530001 	cmp	r3, #1
 10018d4:	ca000002 	bgt	10018e4 <alt_16550_fifo_enable+0x2c>
 10018d8:	e3530000 	cmp	r3, #0
 10018dc:	aa000002 	bge	10018ec <alt_16550_fifo_enable+0x34>
 10018e0:	ea00000f 	b	1001924 <alt_16550_fifo_enable+0x6c>
 10018e4:	e3530c01 	cmp	r3, #256	; 0x100
 10018e8:	1a00000d 	bne	1001924 <alt_16550_fifo_enable+0x6c>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Set FCR::FIFOE (FIFO Control Register :: FIFO Enable) bit. */
        handle->fcr |= ALT_UART_FCR_FIFOE_SET_MSK | ALT_UART_FCR_RFIFOR_SET_MSK | ALT_UART_FCR_XFIFOR_SET_MSK;
 10018ec:	e51b3008 	ldr	r3, [fp, #-8]
 10018f0:	e5933010 	ldr	r3, [r3, #16]
 10018f4:	e3832007 	orr	r2, r3, #7
 10018f8:	e51b3008 	ldr	r3, [fp, #-8]
 10018fc:	e5832010 	str	r2, [r3, #16]
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
 1001900:	e51b3008 	ldr	r3, [fp, #-8]
 1001904:	e5933004 	ldr	r3, [r3, #4]
 1001908:	e2833008 	add	r3, r3, #8
 100190c:	e51b2008 	ldr	r2, [fp, #-8]
 1001910:	e5922010 	ldr	r2, [r2, #16]
 1001914:	e5832000 	str	r2, [r3]
        break;
 1001918:	e320f000 	nop	{0}
        return ALT_E_ERROR;
    }

    /* No need to reset / clear the FIFOs. This is done automatically when */
    /* FCR::FIFOE is changed. */
    return ALT_E_SUCCESS;
 100191c:	e3a03000 	mov	r3, #0
 1001920:	ea000000 	b	1001928 <alt_16550_fifo_enable+0x70>
        return ALT_E_ERROR;
 1001924:	e3e03000 	mvn	r3, #0
}
 1001928:	e1a00003 	mov	r0, r3
 100192c:	e28bd000 	add	sp, fp, #0
 1001930:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001934:	e12fff1e 	bx	lr

01001938 <alt_16550_fifo_disable>:

ALT_STATUS_CODE alt_16550_fifo_disable(ALT_16550_HANDLE_t * handle)
{
 1001938:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 100193c:	e28db000 	add	fp, sp, #0
 1001940:	e24dd00c 	sub	sp, sp, #12
 1001944:	e50b0008 	str	r0, [fp, #-8]
    switch (handle->device)
 1001948:	e51b3008 	ldr	r3, [fp, #-8]
 100194c:	e1d330b0 	ldrh	r3, [r3]
 1001950:	e3530001 	cmp	r3, #1
 1001954:	ca000002 	bgt	1001964 <alt_16550_fifo_disable+0x2c>
 1001958:	e3530000 	cmp	r3, #0
 100195c:	aa000002 	bge	100196c <alt_16550_fifo_disable+0x34>
 1001960:	ea00000f 	b	10019a4 <alt_16550_fifo_disable+0x6c>
 1001964:	e3530c01 	cmp	r3, #256	; 0x100
 1001968:	1a00000d 	bne	10019a4 <alt_16550_fifo_disable+0x6c>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Clear FCR::FIFOE (FIFO Control Register :: FIFO Enable) bit. */
        handle->fcr &= ~ALT_UART_FCR_FIFOE_SET_MSK;
 100196c:	e51b3008 	ldr	r3, [fp, #-8]
 1001970:	e5933010 	ldr	r3, [r3, #16]
 1001974:	e3c32001 	bic	r2, r3, #1
 1001978:	e51b3008 	ldr	r3, [fp, #-8]
 100197c:	e5832010 	str	r2, [r3, #16]
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
 1001980:	e51b3008 	ldr	r3, [fp, #-8]
 1001984:	e5933004 	ldr	r3, [r3, #4]
 1001988:	e2833008 	add	r3, r3, #8
 100198c:	e51b2008 	ldr	r2, [fp, #-8]
 1001990:	e5922010 	ldr	r2, [r2, #16]
 1001994:	e5832000 	str	r2, [r3]
        break;
 1001998:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 100199c:	e3a03000 	mov	r3, #0
 10019a0:	ea000000 	b	10019a8 <alt_16550_fifo_disable+0x70>
        return ALT_E_ERROR;
 10019a4:	e3e03000 	mvn	r3, #0
}
 10019a8:	e1a00003 	mov	r0, r3
 10019ac:	e28bd000 	add	sp, fp, #0
 10019b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10019b4:	e12fff1e 	bx	lr

010019b8 <alt_16550_fifo_write_safe>:

ALT_STATUS_CODE alt_16550_fifo_write_safe(ALT_16550_HANDLE_t * handle,
                                     const char * buffer,
                                     size_t count,
                                     bool safe)
{
 10019b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10019bc:	e28db000 	add	fp, sp, #0
 10019c0:	e24dd01c 	sub	sp, sp, #28
 10019c4:	e50b0010 	str	r0, [fp, #-16]
 10019c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 10019cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 10019d0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    size_t i;
    /* Verify that the UART is enabled */
    if (!(handle->data & ALT_16550_HANDLE_DATA_UART_ENABLED_MSK))
 10019d4:	e51b3010 	ldr	r3, [fp, #-16]
 10019d8:	e593300c 	ldr	r3, [r3, #12]
 10019dc:	e3530000 	cmp	r3, #0
 10019e0:	ba000001 	blt	10019ec <alt_16550_fifo_write_safe+0x34>
    {
        return ALT_E_ERROR;
 10019e4:	e3e03000 	mvn	r3, #0
 10019e8:	ea00002f 	b	1001aac <alt_16550_fifo_write_safe+0xf4>
    }

    /* Verify that the FIFO is enabled */
    if (!(handle->fcr & ALT_UART_FCR_FIFOE_SET_MSK))
 10019ec:	e51b3010 	ldr	r3, [fp, #-16]
 10019f0:	e5933010 	ldr	r3, [r3, #16]
 10019f4:	e2033001 	and	r3, r3, #1
 10019f8:	e3530000 	cmp	r3, #0
 10019fc:	1a000001 	bne	1001a08 <alt_16550_fifo_write_safe+0x50>
    {
        return ALT_E_ERROR;
 1001a00:	e3e03000 	mvn	r3, #0
 1001a04:	ea000028 	b	1001aac <alt_16550_fifo_write_safe+0xf4>
    }

    switch (handle->device)
 1001a08:	e51b3010 	ldr	r3, [fp, #-16]
 1001a0c:	e1d330b0 	ldrh	r3, [r3]
 1001a10:	e3530001 	cmp	r3, #1
 1001a14:	ca000002 	bgt	1001a24 <alt_16550_fifo_write_safe+0x6c>
 1001a18:	e3530000 	cmp	r3, #0
 1001a1c:	aa000002 	bge	1001a2c <alt_16550_fifo_write_safe+0x74>
 1001a20:	ea00001e 	b	1001aa0 <alt_16550_fifo_write_safe+0xe8>
 1001a24:	e3530c01 	cmp	r3, #256	; 0x100
 1001a28:	1a00001c 	bne	1001aa0 <alt_16550_fifo_write_safe+0xe8>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Write the buffer into the THR (Transmit Holding Register) */
        for (i = 0; i < count; ++i)
 1001a2c:	e3a03000 	mov	r3, #0
 1001a30:	e50b3008 	str	r3, [fp, #-8]
 1001a34:	ea000014 	b	1001a8c <alt_16550_fifo_write_safe+0xd4>
        {
            if (safe)
 1001a38:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 1001a3c:	e3530000 	cmp	r3, #0
 1001a40:	0a000007 	beq	1001a64 <alt_16550_fifo_write_safe+0xac>
                while (ALT_UART_LSR_THRE_GET(alt_read_word(ALT_UART_LSR_ADDR(handle->location))))
 1001a44:	e320f000 	nop	{0}
 1001a48:	e51b3010 	ldr	r3, [fp, #-16]
 1001a4c:	e5933004 	ldr	r3, [r3, #4]
 1001a50:	e2833014 	add	r3, r3, #20
 1001a54:	e5933000 	ldr	r3, [r3]
 1001a58:	e2033020 	and	r3, r3, #32
 1001a5c:	e3530000 	cmp	r3, #0
 1001a60:	1afffff8 	bne	1001a48 <alt_16550_fifo_write_safe+0x90>
                    ; /* Spin waiting for space */
            alt_write_word(ALT_UART_RBR_THR_DLL_ADDR(handle->location), buffer[i]);
 1001a64:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1001a68:	e51b3008 	ldr	r3, [fp, #-8]
 1001a6c:	e0823003 	add	r3, r2, r3
 1001a70:	e5d32000 	ldrb	r2, [r3]
 1001a74:	e51b3010 	ldr	r3, [fp, #-16]
 1001a78:	e5933004 	ldr	r3, [r3, #4]
 1001a7c:	e5832000 	str	r2, [r3]
        for (i = 0; i < count; ++i)
 1001a80:	e51b3008 	ldr	r3, [fp, #-8]
 1001a84:	e2833001 	add	r3, r3, #1
 1001a88:	e50b3008 	str	r3, [fp, #-8]
 1001a8c:	e51b2008 	ldr	r2, [fp, #-8]
 1001a90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001a94:	e1520003 	cmp	r2, r3
 1001a98:	3affffe6 	bcc	1001a38 <alt_16550_fifo_write_safe+0x80>
        }
        break;
 1001a9c:	ea000001 	b	1001aa8 <alt_16550_fifo_write_safe+0xf0>
    default:
        return ALT_E_ERROR;
 1001aa0:	e3e03000 	mvn	r3, #0
 1001aa4:	ea000000 	b	1001aac <alt_16550_fifo_write_safe+0xf4>
    }

    return ALT_E_SUCCESS;
 1001aa8:	e3a03000 	mov	r3, #0
}
 1001aac:	e1a00003 	mov	r0, r3
 1001ab0:	e28bd000 	add	sp, fp, #0
 1001ab4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001ab8:	e12fff1e 	bx	lr

01001abc <alt_16550_fifo_write>:

ALT_STATUS_CODE alt_16550_fifo_write(ALT_16550_HANDLE_t * handle,
                                     const char * buffer,
                                     size_t count)
{
 1001abc:	e92d4800 	push	{fp, lr}
 1001ac0:	e28db004 	add	fp, sp, #4
 1001ac4:	e24dd010 	sub	sp, sp, #16
 1001ac8:	e50b0008 	str	r0, [fp, #-8]
 1001acc:	e50b100c 	str	r1, [fp, #-12]
 1001ad0:	e50b2010 	str	r2, [fp, #-16]
    return alt_16550_fifo_write_safe(handle, buffer, count, false);
 1001ad4:	e3a03000 	mov	r3, #0
 1001ad8:	e51b2010 	ldr	r2, [fp, #-16]
 1001adc:	e51b100c 	ldr	r1, [fp, #-12]
 1001ae0:	e51b0008 	ldr	r0, [fp, #-8]
 1001ae4:	ebffffb3 	bl	10019b8 <alt_16550_fifo_write_safe>
 1001ae8:	e1a03000 	mov	r3, r0
}
 1001aec:	e1a00003 	mov	r0, r3
 1001af0:	e24bd004 	sub	sp, fp, #4
 1001af4:	e8bd8800 	pop	{fp, pc}

01001af8 <alt_16550_baudrate_set>:
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_16550_baudrate_set(ALT_16550_HANDLE_t * handle,
                                       uint32_t baudrate)
{
 1001af8:	e92d4800 	push	{fp, lr}
 1001afc:	e28db004 	add	fp, sp, #4
 1001b00:	e24dd010 	sub	sp, sp, #16
 1001b04:	e50b0010 	str	r0, [fp, #-16]
 1001b08:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t divisor;
    if (baudrate == 0)
 1001b0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001b10:	e3530000 	cmp	r3, #0
 1001b14:	1a000001 	bne	1001b20 <alt_16550_baudrate_set+0x28>
    {
        return ALT_E_ARG_RANGE;
 1001b18:	e3e03007 	mvn	r3, #7
 1001b1c:	ea00000f 	b	1001b60 <alt_16550_baudrate_set+0x68>
    // => baudrate * 16 * divisor = clock
    // => divisor = clock / (baudrate * 16)
    // => divisor = (clock / 16) / baudrate */

    /* Add half of the denominator to address rounding errors. */
    divisor = ((handle->clock_freq + (8 * baudrate)) / (16 * baudrate));
 1001b20:	e51b3010 	ldr	r3, [fp, #-16]
 1001b24:	e5932008 	ldr	r2, [r3, #8]
 1001b28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001b2c:	e1a03183 	lsl	r3, r3, #3
 1001b30:	e0822003 	add	r2, r2, r3
 1001b34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001b38:	e1a03203 	lsl	r3, r3, #4
 1001b3c:	e1a01003 	mov	r1, r3
 1001b40:	e1a00002 	mov	r0, r2
 1001b44:	eb000e04 	bl	100535c <__udivsi3>
 1001b48:	e1a03000 	mov	r3, r0
 1001b4c:	e50b3008 	str	r3, [fp, #-8]

    /* Check for divisor range is in alt_16550_divisor_set(). */
    return alt_16550_divisor_set(handle, divisor);
 1001b50:	e51b1008 	ldr	r1, [fp, #-8]
 1001b54:	e51b0010 	ldr	r0, [fp, #-16]
 1001b58:	eb000003 	bl	1001b6c <alt_16550_divisor_set>
 1001b5c:	e1a03000 	mov	r3, r0
}
 1001b60:	e1a00003 	mov	r0, r3
 1001b64:	e24bd004 	sub	sp, fp, #4
 1001b68:	e8bd8800 	pop	{fp, pc}

01001b6c <alt_16550_divisor_set>:
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_16550_divisor_set(ALT_16550_HANDLE_t * handle,
                                      uint32_t divisor)
{
 1001b6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001b70:	e28db000 	add	fp, sp, #0
 1001b74:	e24dd00c 	sub	sp, sp, #12
 1001b78:	e50b0008 	str	r0, [fp, #-8]
 1001b7c:	e50b100c 	str	r1, [fp, #-12]
    /* Verify divisor value is in range. */
    if ((divisor > 0xffff) || (divisor == 0))
 1001b80:	e51b300c 	ldr	r3, [fp, #-12]
 1001b84:	e3530801 	cmp	r3, #65536	; 0x10000
 1001b88:	2a000002 	bcs	1001b98 <alt_16550_divisor_set+0x2c>
 1001b8c:	e51b300c 	ldr	r3, [fp, #-12]
 1001b90:	e3530000 	cmp	r3, #0
 1001b94:	1a000001 	bne	1001ba0 <alt_16550_divisor_set+0x34>
    {
        return ALT_E_ARG_RANGE;
 1001b98:	e3e03007 	mvn	r3, #7
 1001b9c:	ea00000c 	b	1001bd4 <alt_16550_divisor_set+0x68>
    }

    /* Set the divisor portion of the handle data. */
    handle->data &= ~(0xffff);
 1001ba0:	e51b3008 	ldr	r3, [fp, #-8]
 1001ba4:	e593300c 	ldr	r3, [r3, #12]
 1001ba8:	e1a03823 	lsr	r3, r3, #16
 1001bac:	e1a03803 	lsl	r3, r3, #16
 1001bb0:	e51b2008 	ldr	r2, [fp, #-8]
 1001bb4:	e582300c 	str	r3, [r2, #12]
    handle->data |= divisor;
 1001bb8:	e51b3008 	ldr	r3, [fp, #-8]
 1001bbc:	e593200c 	ldr	r2, [r3, #12]
 1001bc0:	e51b300c 	ldr	r3, [fp, #-12]
 1001bc4:	e1822003 	orr	r2, r2, r3
 1001bc8:	e51b3008 	ldr	r3, [fp, #-8]
 1001bcc:	e583200c 	str	r2, [r3, #12]

    /* Even if the UART is enabled, don't do anything. It is documented that */
    /* the change will take effect when the UART move to the enabled state. */

    return ALT_E_SUCCESS;
 1001bd0:	e3a03000 	mov	r3, #0
}
 1001bd4:	e1a00003 	mov	r0, r3
 1001bd8:	e28bd000 	add	sp, fp, #0
 1001bdc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001be0:	e12fff1e 	bx	lr

01001be4 <alt_16550_ier_mask_clr_helper>:

    return ALT_E_SUCCESS;
}

static ALT_STATUS_CODE alt_16550_ier_mask_clr_helper(ALT_16550_HANDLE_t * handle, uint32_t setmask)
{
 1001be4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001be8:	e28db000 	add	fp, sp, #0
 1001bec:	e24dd00c 	sub	sp, sp, #12
 1001bf0:	e50b0008 	str	r0, [fp, #-8]
 1001bf4:	e50b100c 	str	r1, [fp, #-12]
    switch (handle->device)
 1001bf8:	e51b3008 	ldr	r3, [fp, #-8]
 1001bfc:	e1d330b0 	ldrh	r3, [r3]
 1001c00:	e3530001 	cmp	r3, #1
 1001c04:	ca000002 	bgt	1001c14 <alt_16550_ier_mask_clr_helper+0x30>
 1001c08:	e3530000 	cmp	r3, #0
 1001c0c:	aa000002 	bge	1001c1c <alt_16550_ier_mask_clr_helper+0x38>
 1001c10:	ea00000f 	b	1001c54 <alt_16550_ier_mask_clr_helper+0x70>
 1001c14:	e3530c01 	cmp	r3, #256	; 0x100
 1001c18:	1a00000d 	bne	1001c54 <alt_16550_ier_mask_clr_helper+0x70>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Clear bit in IER (Interrupt Enable Register) */
        alt_clrbits_word(ALT_UART_IER_DLH_ADDR(handle->location), setmask);
 1001c1c:	e51b3008 	ldr	r3, [fp, #-8]
 1001c20:	e5933004 	ldr	r3, [r3, #4]
 1001c24:	e2833004 	add	r3, r3, #4
 1001c28:	e5931000 	ldr	r1, [r3]
 1001c2c:	e51b300c 	ldr	r3, [fp, #-12]
 1001c30:	e1e02003 	mvn	r2, r3
 1001c34:	e51b3008 	ldr	r3, [fp, #-8]
 1001c38:	e5933004 	ldr	r3, [r3, #4]
 1001c3c:	e2833004 	add	r3, r3, #4
 1001c40:	e0022001 	and	r2, r2, r1
 1001c44:	e5832000 	str	r2, [r3]
        break;
 1001c48:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 1001c4c:	e3a03000 	mov	r3, #0
 1001c50:	ea000000 	b	1001c58 <alt_16550_ier_mask_clr_helper+0x74>
        return ALT_E_ERROR;
 1001c54:	e3e03000 	mvn	r3, #0
}
 1001c58:	e1a00003 	mov	r0, r3
 1001c5c:	e28bd000 	add	sp, fp, #0
 1001c60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001c64:	e12fff1e 	bx	lr

01001c68 <alt_16550_int_disable_all>:
    /* Clear the IER::EDSSI (Interrupt Enable Register :: Enable Modem Status Interrupt) bit. */
    return alt_16550_ier_mask_clr_helper(handle, ALT_UART_IER_DLH_EDSSI_DHL3_SET_MSK);
}

ALT_STATUS_CODE alt_16550_int_disable_all(ALT_16550_HANDLE_t * handle)
{
 1001c68:	e92d4800 	push	{fp, lr}
 1001c6c:	e28db004 	add	fp, sp, #4
 1001c70:	e24dd008 	sub	sp, sp, #8
 1001c74:	e50b0008 	str	r0, [fp, #-8]
    /* Clear the IER::(ERBFI | ETBEI | ELSI | EDSSI)
    //   (Interrupt Enable Register :: (Enable Receive Buffer Full Interrupt   |
    //                                  Enable Transmit Buffer Empty Interrupt |
    //                                  Enable Line Status Interrupt           |
    //                                  Enable Modem Status Interrupt)) bits   */
    return alt_16550_ier_mask_clr_helper(handle, ALT_UART_IER_DLH_ERBFI_DLH0_SET_MSK |
 1001c78:	e3a0100f 	mov	r1, #15
 1001c7c:	e51b0008 	ldr	r0, [fp, #-8]
 1001c80:	ebffffd7 	bl	1001be4 <alt_16550_ier_mask_clr_helper>
 1001c84:	e1a03000 	mov	r3, r0
                                                 ALT_UART_IER_DLH_ETBEI_DLH1_SET_MSK |
                                                 ALT_UART_IER_DLH_ELSI_DHL2_SET_MSK  |
                                                 ALT_UART_IER_DLH_EDSSI_DHL3_SET_MSK);
}
 1001c88:	e1a00003 	mov	r0, r3
 1001c8c:	e24bd004 	sub	sp, fp, #4
 1001c90:	e8bd8800 	pop	{fp, pc}

01001c94 <alt_16550_line_config_set>:

ALT_STATUS_CODE alt_16550_line_config_set(ALT_16550_HANDLE_t * handle,
                                          ALT_16550_DATABITS_t databits,
                                          ALT_16550_PARITY_t parity,
                                          ALT_16550_STOPBITS_t stopbits)
{
 1001c94:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001c98:	e28db000 	add	fp, sp, #0
 1001c9c:	e24dd014 	sub	sp, sp, #20
 1001ca0:	e50b0010 	str	r0, [fp, #-16]
 1001ca4:	e1a00001 	mov	r0, r1
 1001ca8:	e1a01002 	mov	r1, r2
 1001cac:	e1a02003 	mov	r2, r3
 1001cb0:	e1a03000 	mov	r3, r0
 1001cb4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 1001cb8:	e1a03001 	mov	r3, r1
 1001cbc:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
 1001cc0:	e1a03002 	mov	r3, r2
 1001cc4:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    /* LCR (Line Control Register) cache. */
    uint32_t lcr = 0;
 1001cc8:	e3a03000 	mov	r3, #0
 1001ccc:	e50b3008 	str	r3, [fp, #-8]

    /* Validate the databits parameter. */
    switch (databits)
 1001cd0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1001cd4:	e3530003 	cmp	r3, #3
 1001cd8:	9a000001 	bls	1001ce4 <alt_16550_line_config_set+0x50>
    case ALT_16550_DATABITS_6:
    case ALT_16550_DATABITS_7:
    case ALT_16550_DATABITS_8:
        break;
    default:
        return ALT_E_ERROR;
 1001cdc:	e3e03000 	mvn	r3, #0
 1001ce0:	ea00003c 	b	1001dd8 <alt_16550_line_config_set+0x144>
        break;
 1001ce4:	e320f000 	nop	{0}
    }

    /* Validate the parity parameter. */
    switch (parity)
 1001ce8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 1001cec:	e3530002 	cmp	r3, #2
 1001cf0:	9a000001 	bls	1001cfc <alt_16550_line_config_set+0x68>
    case ALT_16550_PARITY_DISABLE:
    case ALT_16550_PARITY_ODD:
    case ALT_16550_PARITY_EVEN:
        break;
    default:
        return ALT_E_ERROR;
 1001cf4:	e3e03000 	mvn	r3, #0
 1001cf8:	ea000036 	b	1001dd8 <alt_16550_line_config_set+0x144>
        break;
 1001cfc:	e320f000 	nop	{0}
    }

    /* Validate the stopbits parameter. */
    switch (stopbits)
 1001d00:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 1001d04:	e3530001 	cmp	r3, #1
 1001d08:	9a000001 	bls	1001d14 <alt_16550_line_config_set+0x80>
    {
    case ALT_16550_STOPBITS_1:
    case ALT_16550_STOPBITS_2:
        break;
    default:
        return ALT_E_ERROR;
 1001d0c:	e3e03000 	mvn	r3, #0
 1001d10:	ea000030 	b	1001dd8 <alt_16550_line_config_set+0x144>
        break;
 1001d14:	e320f000 	nop	{0}
    }

    switch (handle->device)
 1001d18:	e51b3010 	ldr	r3, [fp, #-16]
 1001d1c:	e1d330b0 	ldrh	r3, [r3]
 1001d20:	e3530001 	cmp	r3, #1
 1001d24:	ca000002 	bgt	1001d34 <alt_16550_line_config_set+0xa0>
 1001d28:	e3530000 	cmp	r3, #0
 1001d2c:	aa000002 	bge	1001d3c <alt_16550_line_config_set+0xa8>
 1001d30:	ea000027 	b	1001dd4 <alt_16550_line_config_set+0x140>
 1001d34:	e3530c01 	cmp	r3, #256	; 0x100
 1001d38:	1a000025 	bne	1001dd4 <alt_16550_line_config_set+0x140>
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:

        /* Configure the number of databits */
        lcr |= ALT_UART_LCR_DLS_SET(databits);
 1001d3c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1001d40:	e2033003 	and	r3, r3, #3
 1001d44:	e51b2008 	ldr	r2, [fp, #-8]
 1001d48:	e1823003 	orr	r3, r2, r3
 1001d4c:	e50b3008 	str	r3, [fp, #-8]

        /* Configure the number of stopbits */
        lcr |= ALT_UART_LCR_STOP_SET(stopbits);
 1001d50:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 1001d54:	e1a03103 	lsl	r3, r3, #2
 1001d58:	e2033004 	and	r3, r3, #4
 1001d5c:	e51b2008 	ldr	r2, [fp, #-8]
 1001d60:	e1823003 	orr	r3, r2, r3
 1001d64:	e50b3008 	str	r3, [fp, #-8]

        /* Configure the parity */
        if (parity != ALT_16550_PARITY_DISABLE)
 1001d68:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 1001d6c:	e3530000 	cmp	r3, #0
 1001d70:	0a000008 	beq	1001d98 <alt_16550_line_config_set+0x104>
        {
            /* Enable parity in LCR */
            lcr |= ALT_UART_LCR_PEN_SET_MSK;
 1001d74:	e51b3008 	ldr	r3, [fp, #-8]
 1001d78:	e3833008 	orr	r3, r3, #8
 1001d7c:	e50b3008 	str	r3, [fp, #-8]

            if (parity == ALT_16550_PARITY_EVEN)
 1001d80:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 1001d84:	e3530002 	cmp	r3, #2
 1001d88:	1a000002 	bne	1001d98 <alt_16550_line_config_set+0x104>
            {
                /* Enable even parity in LCR; otherwise it's odd parity. */
                lcr |= ALT_UART_LCR_EPS_SET_MSK;
 1001d8c:	e51b3008 	ldr	r3, [fp, #-8]
 1001d90:	e3833010 	orr	r3, r3, #16
 1001d94:	e50b3008 	str	r3, [fp, #-8]
            }
        }

        /* Update LCR (Line Control Register) */
        alt_replbits_word(ALT_UART_LCR_ADDR(handle->location),
 1001d98:	e51b3010 	ldr	r3, [fp, #-16]
 1001d9c:	e5933004 	ldr	r3, [r3, #4]
 1001da0:	e283300c 	add	r3, r3, #12
 1001da4:	e5933000 	ldr	r3, [r3]
 1001da8:	e3c3101f 	bic	r1, r3, #31
 1001dac:	e51b3008 	ldr	r3, [fp, #-8]
 1001db0:	e203201f 	and	r2, r3, #31
 1001db4:	e51b3010 	ldr	r3, [fp, #-16]
 1001db8:	e5933004 	ldr	r3, [r3, #4]
 1001dbc:	e283300c 	add	r3, r3, #12
 1001dc0:	e1812002 	orr	r2, r1, r2
 1001dc4:	e5832000 	str	r2, [r3]
                        | ALT_UART_LCR_STOP_SET_MSK
                        | ALT_UART_LCR_PEN_SET_MSK
                        | ALT_UART_LCR_EPS_SET_MSK,
                        lcr);

        break;
 1001dc8:	e320f000 	nop	{0}

    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 1001dcc:	e3a03000 	mov	r3, #0
 1001dd0:	ea000000 	b	1001dd8 <alt_16550_line_config_set+0x144>
        return ALT_E_ERROR;
 1001dd4:	e3e03000 	mvn	r3, #0
}
 1001dd8:	e1a00003 	mov	r0, r3
 1001ddc:	e28bd000 	add	sp, fp, #0
 1001de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001de4:	e12fff1e 	bx	lr

01001de8 <alt_16550_mcr_mask_set_helper>:
    return ALT_E_SUCCESS;
}

static ALT_STATUS_CODE alt_16550_mcr_mask_set_helper(ALT_16550_HANDLE_t * handle,
                                                     uint32_t setmask)
{
 1001de8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001dec:	e28db000 	add	fp, sp, #0
 1001df0:	e24dd00c 	sub	sp, sp, #12
 1001df4:	e50b0008 	str	r0, [fp, #-8]
 1001df8:	e50b100c 	str	r1, [fp, #-12]
    switch (handle->device)
 1001dfc:	e51b3008 	ldr	r3, [fp, #-8]
 1001e00:	e1d330b0 	ldrh	r3, [r3]
 1001e04:	e3530001 	cmp	r3, #1
 1001e08:	ca000002 	bgt	1001e18 <alt_16550_mcr_mask_set_helper+0x30>
 1001e0c:	e3530000 	cmp	r3, #0
 1001e10:	aa000002 	bge	1001e20 <alt_16550_mcr_mask_set_helper+0x38>
 1001e14:	ea00000e 	b	1001e54 <alt_16550_mcr_mask_set_helper+0x6c>
 1001e18:	e3530c01 	cmp	r3, #256	; 0x100
 1001e1c:	1a00000c 	bne	1001e54 <alt_16550_mcr_mask_set_helper+0x6c>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Set the bit in MCR (Modem Control Register). */
        alt_setbits_word(ALT_UART_MCR_ADDR(handle->location), setmask);
 1001e20:	e51b3008 	ldr	r3, [fp, #-8]
 1001e24:	e5933004 	ldr	r3, [r3, #4]
 1001e28:	e2833010 	add	r3, r3, #16
 1001e2c:	e5931000 	ldr	r1, [r3]
 1001e30:	e51b3008 	ldr	r3, [fp, #-8]
 1001e34:	e5933004 	ldr	r3, [r3, #4]
 1001e38:	e2833010 	add	r3, r3, #16
 1001e3c:	e51b200c 	ldr	r2, [fp, #-12]
 1001e40:	e1812002 	orr	r2, r1, r2
 1001e44:	e5832000 	str	r2, [r3]
        break;
 1001e48:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 1001e4c:	e3a03000 	mov	r3, #0
 1001e50:	ea000000 	b	1001e58 <alt_16550_mcr_mask_set_helper+0x70>
        return ALT_E_ERROR;
 1001e54:	e3e03000 	mvn	r3, #0
}
 1001e58:	e1a00003 	mov	r0, r3
 1001e5c:	e28bd000 	add	sp, fp, #0
 1001e60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001e64:	e12fff1e 	bx	lr

01001e68 <alt_16550_modem_enable_rts>:
    /* Clear MCR::Out2 (Modem Control Register :: Out2) bit. */
    return alt_16550_mcr_mask_clr_helper(handle, ALT_UART_MCR_OUT2_SET_MSK);
}

ALT_STATUS_CODE alt_16550_modem_enable_rts(ALT_16550_HANDLE_t * handle)
{
 1001e68:	e92d4800 	push	{fp, lr}
 1001e6c:	e28db004 	add	fp, sp, #4
 1001e70:	e24dd008 	sub	sp, sp, #8
 1001e74:	e50b0008 	str	r0, [fp, #-8]
    /* Set MCR::RTS (Modem Control Register :: Request To Send) bit. */
    return alt_16550_mcr_mask_set_helper(handle, ALT_UART_MCR_RTS_SET_MSK);
 1001e78:	e3a01002 	mov	r1, #2
 1001e7c:	e51b0008 	ldr	r0, [fp, #-8]
 1001e80:	ebffffd8 	bl	1001de8 <alt_16550_mcr_mask_set_helper>
 1001e84:	e1a03000 	mov	r3, r0
}
 1001e88:	e1a00003 	mov	r0, r3
 1001e8c:	e24bd004 	sub	sp, fp, #4
 1001e90:	e8bd8800 	pop	{fp, pc}

01001e94 <alt_16550_modem_enable_dtr>:
    /* Clear MCR::RTS (Modem Control Register :: Request To Send) bit. */
    return alt_16550_mcr_mask_clr_helper(handle, ALT_UART_MCR_RTS_SET_MSK);
}

ALT_STATUS_CODE alt_16550_modem_enable_dtr(ALT_16550_HANDLE_t * handle)
{
 1001e94:	e92d4800 	push	{fp, lr}
 1001e98:	e28db004 	add	fp, sp, #4
 1001e9c:	e24dd008 	sub	sp, sp, #8
 1001ea0:	e50b0008 	str	r0, [fp, #-8]
    /* Set MCR::DTR (Modem Control Register :: Data Terminal Ready) bit. */
    return alt_16550_mcr_mask_set_helper(handle, ALT_UART_MCR_DTR_SET_MSK);
 1001ea4:	e3a01001 	mov	r1, #1
 1001ea8:	e51b0008 	ldr	r0, [fp, #-8]
 1001eac:	ebffffcd 	bl	1001de8 <alt_16550_mcr_mask_set_helper>
 1001eb0:	e1a03000 	mov	r3, r0
}
 1001eb4:	e1a00003 	mov	r0, r3
 1001eb8:	e24bd004 	sub	sp, fp, #4
 1001ebc:	e8bd8800 	pop	{fp, pc}

01001ec0 <null_printf>:
#endif

extern FILE *term0;
extern FILE *term1;

static __inline int null_printf(__attribute__ ((unused))const char *format, ...){return 0;}
 1001ec0:	e92d000f 	push	{r0, r1, r2, r3}
 1001ec4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001ec8:	e28db000 	add	fp, sp, #0
 1001ecc:	e3a03000 	mov	r3, #0
 1001ed0:	e1a00003 	mov	r0, r3
 1001ed4:	e28bd000 	add	sp, fp, #0
 1001ed8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001edc:	e28dd010 	add	sp, sp, #16
 1001ee0:	e12fff1e 	bx	lr

01001ee4 <alt_mmu_init>:
    __asm("MCR p15, 0, %0,       c2, c0, 1" : : "r" (ttbr1));
#endif
}

ALT_STATUS_CODE alt_mmu_init(void)
{
 1001ee4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001ee8:	e28db000 	add	fp, sp, #0
    return ALT_E_SUCCESS;
 1001eec:	e3a03000 	mov	r3, #0
}
 1001ef0:	e1a00003 	mov	r0, r3
 1001ef4:	e28bd000 	add	sp, fp, #0
 1001ef8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001efc:	e12fff1e 	bx	lr

01001f00 <alt_mmu_ttb1_init>:
{
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_ttb1_init(uint32_t* ttb1)
{
 1001f00:	e92d4800 	push	{fp, lr}
 1001f04:	e28db004 	add	fp, sp, #4
 1001f08:	e24dd018 	sub	sp, sp, #24
 1001f0c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
 1001f10:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
 1001f14:	e50b3010 	str	r3, [fp, #-16]
    return ttbcr;
 1001f18:	e51b3010 	ldr	r3, [fp, #-16]
    uint32_t ttbcr = ttbcr_get_helper();
 1001f1c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
 1001f20:	e51b3008 	ldr	r3, [fp, #-8]
 1001f24:	e2033007 	and	r3, r3, #7
 1001f28:	e50b300c 	str	r3, [fp, #-12]

    /* Verify ttb1 buffer alignment. */
    if ((uintptr_t)ttb1 & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
 1001f2c:	e51b300c 	ldr	r3, [fp, #-12]
 1001f30:	e2833012 	add	r3, r3, #18
 1001f34:	e3a02001 	mov	r2, #1
 1001f38:	e1a03312 	lsl	r3, r2, r3
 1001f3c:	e2432001 	sub	r2, r3, #1
 1001f40:	e51b300c 	ldr	r3, [fp, #-12]
 1001f44:	e263300e 	rsb	r3, r3, #14
 1001f48:	e1a03312 	lsl	r3, r2, r3
 1001f4c:	e1e03003 	mvn	r3, r3
 1001f50:	e1a02003 	mov	r2, r3
 1001f54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001f58:	e0033002 	and	r3, r3, r2
 1001f5c:	e3530000 	cmp	r3, #0
 1001f60:	0a000001 	beq	1001f6c <alt_mmu_ttb1_init+0x6c>
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
 1001f64:	e3e03008 	mvn	r3, #8
 1001f68:	ea000004 	b	1001f80 <alt_mmu_ttb1_init+0x80>

    /* The TTB1 size really depends on TTBCR.N value and if it will be used for
     / TTBR0 or TTBR1. The documentation just states that it should be 16 KiB.
     / See ARMv7-A,R, section B3.5.4. */

    memset(ttb1, 0, ALT_MMU_TTB1_SIZE);
 1001f6c:	e3a02901 	mov	r2, #16384	; 0x4000
 1001f70:	e3a01000 	mov	r1, #0
 1001f74:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1001f78:	eb000b49 	bl	1004ca4 <memset>

    return ALT_E_SUCCESS;
 1001f7c:	e3a03000 	mov	r3, #0
}
 1001f80:	e1a00003 	mov	r0, r3
 1001f84:	e24bd004 	sub	sp, fp, #4
 1001f88:	e8bd8800 	pop	{fp, pc}

01001f8c <alt_mmu_enable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_enable(void)
{
 1001f8c:	e92d4800 	push	{fp, lr}
 1001f90:	e28db004 	add	fp, sp, #4
 1001f94:	e24dd010 	sub	sp, sp, #16
    uint32_t sctlr;
    alt_mmu_tlb_invalidate();
 1001f98:	eb0000ac 	bl	1002250 <alt_mmu_tlb_invalidate>
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
 1001f9c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
 1001fa0:	e50b3010 	str	r3, [fp, #-16]
    return sctlr;
 1001fa4:	e51b3010 	ldr	r3, [fp, #-16]

    sctlr = sctlr_get_helper();
 1001fa8:	e50b3008 	str	r3, [fp, #-8]
    sctlr |= ALT_CPU_SCTLR_M_SET_MSK;
 1001fac:	e51b3008 	ldr	r3, [fp, #-8]
 1001fb0:	e3833001 	orr	r3, r3, #1
 1001fb4:	e50b3008 	str	r3, [fp, #-8]
 1001fb8:	e51b3008 	ldr	r3, [fp, #-8]
 1001fbc:	e50b300c 	str	r3, [fp, #-12]
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
 1001fc0:	e51b300c 	ldr	r3, [fp, #-12]
 1001fc4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1001fc8:	e320f000 	nop	{0}
    sctlr_set_helper(sctlr);

    return ALT_E_SUCCESS;
 1001fcc:	e3a03000 	mov	r3, #0
}
 1001fd0:	e1a00003 	mov	r0, r3
 1001fd4:	e24bd004 	sub	sp, fp, #4
 1001fd8:	e8bd8800 	pop	{fp, pc}

01001fdc <alt_mmu_TTBR0_set>:

    return (void *)(ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n) & ttbr0);
}

ALT_STATUS_CODE alt_mmu_TTBR0_set(const void* addr)
{
 1001fdc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001fe0:	e28db000 	add	fp, sp, #0
 1001fe4:	e24dd024 	sub	sp, sp, #36	; 0x24
 1001fe8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
 1001fec:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
 1001ff0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return ttbcr;
 1001ff4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    uint32_t ttbcr = ttbcr_get_helper();
 1001ff8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
 1001ffc:	e51b3008 	ldr	r3, [fp, #-8]
 1002000:	e2033007 	and	r3, r3, #7
 1002004:	e50b300c 	str	r3, [fp, #-12]
    uint32_t ttbr0; 

    if ((uintptr_t)addr & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
 1002008:	e51b300c 	ldr	r3, [fp, #-12]
 100200c:	e2833012 	add	r3, r3, #18
 1002010:	e3a02001 	mov	r2, #1
 1002014:	e1a03312 	lsl	r3, r2, r3
 1002018:	e2432001 	sub	r2, r3, #1
 100201c:	e51b300c 	ldr	r3, [fp, #-12]
 1002020:	e263300e 	rsb	r3, r3, #14
 1002024:	e1a03312 	lsl	r3, r2, r3
 1002028:	e1e03003 	mvn	r3, r3
 100202c:	e1a02003 	mov	r2, r3
 1002030:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002034:	e0033002 	and	r3, r3, r2
 1002038:	e3530000 	cmp	r3, #0
 100203c:	0a000001 	beq	1002048 <alt_mmu_TTBR0_set+0x6c>
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
 1002040:	e3e03008 	mvn	r3, #8
 1002044:	ea000018 	b	10020ac <alt_mmu_TTBR0_set+0xd0>
    }

    /* The Translation table must reside in Normal Memory, so pick the most
     / performant attributes. */
    ttbr0 =   ALT_CPU_TTBR0_RGN_WBA   /* Translation table is WBA for outer cacheability */
 1002048:	e3a03048 	mov	r3, #72	; 0x48
 100204c:	e50b3010 	str	r3, [fp, #-16]
              | ALT_CPU_TTBR0_IRGN_WBA; /* Translation table is WBA for inner cacheability */
    ttbr0 &= ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n);
 1002050:	e51b300c 	ldr	r3, [fp, #-12]
 1002054:	e2833012 	add	r3, r3, #18
 1002058:	e3a02001 	mov	r2, #1
 100205c:	e1a03312 	lsl	r3, r2, r3
 1002060:	e2432001 	sub	r2, r3, #1
 1002064:	e51b300c 	ldr	r3, [fp, #-12]
 1002068:	e263300e 	rsb	r3, r3, #14
 100206c:	e1a03312 	lsl	r3, r2, r3
 1002070:	e1e03003 	mvn	r3, r3
 1002074:	e1a02003 	mov	r2, r3
 1002078:	e51b3010 	ldr	r3, [fp, #-16]
 100207c:	e0033002 	and	r3, r3, r2
 1002080:	e50b3010 	str	r3, [fp, #-16]
    ttbr0 |= (uint32_t)addr;
 1002084:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002088:	e51b2010 	ldr	r2, [fp, #-16]
 100208c:	e1823003 	orr	r3, r2, r3
 1002090:	e50b3010 	str	r3, [fp, #-16]
 1002094:	e51b3010 	ldr	r3, [fp, #-16]
 1002098:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    __asm("MCR p15, 0, %0,       c2, c0, 0" : : "r" (ttbr0));
 100209c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10020a0:	ee023f10 	mcr	15, 0, r3, cr2, cr0, {0}
}
 10020a4:	e320f000 	nop	{0}

    ttbr0_set_helper(ttbr0);

    return ALT_E_SUCCESS;
 10020a8:	e3a03000 	mov	r3, #0
}
 10020ac:	e1a00003 	mov	r0, r3
 10020b0:	e28bd000 	add	sp, fp, #0
 10020b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10020b8:	e12fff1e 	bx	lr

010020bc <alt_mmu_TTBCR_set>:
}

ALT_STATUS_CODE alt_mmu_TTBCR_set(const bool enable_ttbr0_walk,
                                  const bool enable_ttbr1_walk,
                                  const uint32_t base_addr_width)
{
 10020bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10020c0:	e28db000 	add	fp, sp, #0
 10020c4:	e24dd014 	sub	sp, sp, #20
 10020c8:	e1a03000 	mov	r3, r0
 10020cc:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
 10020d0:	e54b300d 	strb	r3, [fp, #-13]
 10020d4:	e1a03001 	mov	r3, r1
 10020d8:	e54b300e 	strb	r3, [fp, #-14]
    uint32_t ttbcr = 0;
 10020dc:	e3a03000 	mov	r3, #0
 10020e0:	e50b3008 	str	r3, [fp, #-8]

    if (!enable_ttbr0_walk)
 10020e4:	e55b300d 	ldrb	r3, [fp, #-13]
 10020e8:	e2233001 	eor	r3, r3, #1
 10020ec:	e6ef3073 	uxtb	r3, r3
 10020f0:	e3530000 	cmp	r3, #0
 10020f4:	0a000002 	beq	1002104 <alt_mmu_TTBCR_set+0x48>
    {
        ttbcr |= ALT_CPU_TTBCR_PD0_SET_MSK;
 10020f8:	e51b3008 	ldr	r3, [fp, #-8]
 10020fc:	e3833010 	orr	r3, r3, #16
 1002100:	e50b3008 	str	r3, [fp, #-8]
    }

    if (!enable_ttbr1_walk)
 1002104:	e55b300e 	ldrb	r3, [fp, #-14]
 1002108:	e2233001 	eor	r3, r3, #1
 100210c:	e6ef3073 	uxtb	r3, r3
 1002110:	e3530000 	cmp	r3, #0
 1002114:	0a000002 	beq	1002124 <alt_mmu_TTBCR_set+0x68>
    {
        ttbcr |= ALT_CPU_TTBCR_PD1_SET_MSK;
 1002118:	e51b3008 	ldr	r3, [fp, #-8]
 100211c:	e3833020 	orr	r3, r3, #32
 1002120:	e50b3008 	str	r3, [fp, #-8]
    }

    if (base_addr_width > 7)
 1002124:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002128:	e3530007 	cmp	r3, #7
 100212c:	9a000001 	bls	1002138 <alt_mmu_TTBCR_set+0x7c>
    {
        return ALT_E_BAD_ARG;
 1002130:	e3e03008 	mvn	r3, #8
 1002134:	ea000009 	b	1002160 <alt_mmu_TTBCR_set+0xa4>
    }

    ttbcr |= base_addr_width;
 1002138:	e51b2008 	ldr	r2, [fp, #-8]
 100213c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002140:	e1823003 	orr	r3, r2, r3
 1002144:	e50b3008 	str	r3, [fp, #-8]
 1002148:	e51b3008 	ldr	r3, [fp, #-8]
 100214c:	e50b300c 	str	r3, [fp, #-12]
    __asm("MCR p15, 0, %0,       c2, c0, 2" : : "r" (ttbcr));
 1002150:	e51b300c 	ldr	r3, [fp, #-12]
 1002154:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
}
 1002158:	e320f000 	nop	{0}

    ttbcr_set_helper(ttbcr);

    return ALT_E_SUCCESS;
 100215c:	e3a03000 	mov	r3, #0
}
 1002160:	e1a00003 	mov	r0, r3
 1002164:	e28bd000 	add	sp, fp, #0
 1002168:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100216c:	e12fff1e 	bx	lr

01002170 <alt_mmu_DACR_set>:

ALT_STATUS_CODE alt_mmu_DACR_set(const ALT_MMU_DAP_t domain_ap[],
                                 const size_t num_elem)
{
 1002170:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002174:	e28db000 	add	fp, sp, #0
 1002178:	e24dd01c 	sub	sp, sp, #28
 100217c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1002180:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t dacr = 0;
 1002184:	e3a03000 	mov	r3, #0
 1002188:	e50b3008 	str	r3, [fp, #-8]
    uint32_t i;

    if (num_elem > 16)
 100218c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002190:	e3530010 	cmp	r3, #16
 1002194:	9a000001 	bls	10021a0 <alt_mmu_DACR_set+0x30>
    {
        return ALT_E_BAD_ARG;
 1002198:	e3e03008 	mvn	r3, #8
 100219c:	ea000027 	b	1002240 <alt_mmu_DACR_set+0xd0>
    }

    for (i = 0; i < num_elem; ++i)
 10021a0:	e3a03000 	mov	r3, #0
 10021a4:	e50b300c 	str	r3, [fp, #-12]
 10021a8:	ea00001a 	b	1002218 <alt_mmu_DACR_set+0xa8>
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
 10021ac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 10021b0:	e51b300c 	ldr	r3, [fp, #-12]
 10021b4:	e0823003 	add	r3, r2, r3
 10021b8:	e5d33000 	ldrb	r3, [r3]
 10021bc:	e54b300d 	strb	r3, [fp, #-13]

        switch (ap)
 10021c0:	e55b300d 	ldrb	r3, [fp, #-13]
 10021c4:	e3530001 	cmp	r3, #1
 10021c8:	ca000002 	bgt	10021d8 <alt_mmu_DACR_set+0x68>
 10021cc:	e3530000 	cmp	r3, #0
 10021d0:	aa000002 	bge	10021e0 <alt_mmu_DACR_set+0x70>
 10021d4:	ea00000a 	b	1002204 <alt_mmu_DACR_set+0x94>
 10021d8:	e3530003 	cmp	r3, #3
 10021dc:	1a000008 	bne	1002204 <alt_mmu_DACR_set+0x94>
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
 10021e0:	e55b200d 	ldrb	r2, [fp, #-13]
 10021e4:	e51b300c 	ldr	r3, [fp, #-12]
 10021e8:	e1a03083 	lsl	r3, r3, #1
 10021ec:	e1a03312 	lsl	r3, r2, r3
 10021f0:	e1a02003 	mov	r2, r3
 10021f4:	e51b3008 	ldr	r3, [fp, #-8]
 10021f8:	e1833002 	orr	r3, r3, r2
 10021fc:	e50b3008 	str	r3, [fp, #-8]
            break;
 1002200:	ea000001 	b	100220c <alt_mmu_DACR_set+0x9c>
        default:
        case ALT_MMU_DAP_RESERVED:
            return ALT_E_BAD_ARG;
 1002204:	e3e03008 	mvn	r3, #8
 1002208:	ea00000c 	b	1002240 <alt_mmu_DACR_set+0xd0>
    for (i = 0; i < num_elem; ++i)
 100220c:	e51b300c 	ldr	r3, [fp, #-12]
 1002210:	e2833001 	add	r3, r3, #1
 1002214:	e50b300c 	str	r3, [fp, #-12]
 1002218:	e51b200c 	ldr	r2, [fp, #-12]
 100221c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002220:	e1520003 	cmp	r2, r3
 1002224:	3affffe0 	bcc	10021ac <alt_mmu_DACR_set+0x3c>
 1002228:	e51b3008 	ldr	r3, [fp, #-8]
 100222c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    __asm("MCR p15, 0, %0,      c3, c0, 0" : : "r" (dacr));
 1002230:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002234:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
}
 1002238:	e320f000 	nop	{0}
        }
    }

    dacr_set_helper(dacr);

    return ALT_E_SUCCESS;
 100223c:	e3a03000 	mov	r3, #0
}
 1002240:	e1a00003 	mov	r0, r3
 1002244:	e28bd000 	add	sp, fp, #0
 1002248:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100224c:	e12fff1e 	bx	lr

01002250 <alt_mmu_tlb_invalidate>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_tlb_invalidate(void)
{
 1002250:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002254:	e28db000 	add	fp, sp, #0
 1002258:	e24dd00c 	sub	sp, sp, #12
    /* Issue TLBIALL (TLB Invalidate All)
     / See ARMv7-A,R, section B4.1.135. */

    uint32_t dummy = 0;
 100225c:	e3a03000 	mov	r3, #0
 1002260:	e50b3008 	str	r3, [fp, #-8]
#if   defined(__ARMCOMPILER_VERSION)
    __asm("MCR p15, 0, %[dummy], c8, c3, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c8, c3, 0");
#else
    __asm("MCR p15, 0, %0,       c8, c3, 0" : : "r" (dummy));
 1002264:	e51b3008 	ldr	r3, [fp, #-8]
 1002268:	ee083f13 	mcr	15, 0, r3, cr8, cr3, {0}
#endif

    /* Ensure all TLB maintenance operations complete before returning. */
    __asm("dsb");
 100226c:	f57ff04f 	dsb	sy

    return ALT_E_SUCCESS;
 1002270:	e3a03000 	mov	r3, #0
}
 1002274:	e1a00003 	mov	r0, r3
 1002278:	e28bd000 	add	sp, fp, #0
 100227c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002280:	e12fff1e 	bx	lr

01002284 <alt_vregion_mark_pagetable>:
#define ALT_VREGION_1MIB         (2)                              /* 2 */
#define ALT_VREGION_PAGETABLE_S  ((int)ALT_MMU_TTB_NS_SECURE)     /* 0 */
#define ALT_VREGION_PAGETABLE_NS ((int)ALT_MMU_TTB_NS_NON_SECURE) /* 1 */

static ALT_STATUS_CODE alt_vregion_mark_pagetable(char * vregion, ALT_MMU_TTB_NS_t security)
{
 1002284:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002288:	e28db000 	add	fp, sp, #0
 100228c:	e24dd00c 	sub	sp, sp, #12
 1002290:	e50b0008 	str	r0, [fp, #-8]
 1002294:	e1a03001 	mov	r3, r1
 1002298:	e54b3009 	strb	r3, [fp, #-9]
    if (*vregion == ALT_VREGION_1MIB)
 100229c:	e51b3008 	ldr	r3, [fp, #-8]
 10022a0:	e5d33000 	ldrb	r3, [r3]
 10022a4:	e3530002 	cmp	r3, #2
 10022a8:	1a000003 	bne	10022bc <alt_vregion_mark_pagetable+0x38>
    {
        *vregion = (int)security;
 10022ac:	e51b3008 	ldr	r3, [fp, #-8]
 10022b0:	e55b2009 	ldrb	r2, [fp, #-9]
 10022b4:	e5c32000 	strb	r2, [r3]
 10022b8:	ea000006 	b	10022d8 <alt_vregion_mark_pagetable+0x54>
    }
    else if (*vregion != (int)security)
 10022bc:	e51b3008 	ldr	r3, [fp, #-8]
 10022c0:	e5d33000 	ldrb	r3, [r3]
 10022c4:	e55b2009 	ldrb	r2, [fp, #-9]
 10022c8:	e1520003 	cmp	r2, r3
 10022cc:	0a000001 	beq	10022d8 <alt_vregion_mark_pagetable+0x54>
    {
        return ALT_E_ERROR;
 10022d0:	e3e03000 	mvn	r3, #0
 10022d4:	ea000000 	b	10022dc <alt_vregion_mark_pagetable+0x58>
    }

    return ALT_E_SUCCESS;
 10022d8:	e3a03000 	mov	r3, #0
}
 10022dc:	e1a00003 	mov	r0, r3
 10022e0:	e28bd000 	add	sp, fp, #0
 10022e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10022e8:	e12fff1e 	bx	lr

010022ec <alt_mmu_va_space_storage_required_internal>:

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
                                                         const size_t num_mem_regions,
                                                         char * vregion)
{
 10022ec:	e92d4800 	push	{fp, lr}
 10022f0:	e28db004 	add	fp, sp, #4
 10022f4:	e24dd030 	sub	sp, sp, #48	; 0x30
 10022f8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
 10022fc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
 1002300:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    size_t reqsize;
    uint32_t i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 1002304:	e3a03000 	mov	r3, #0
 1002308:	e50b300c 	str	r3, [fp, #-12]
 100230c:	ea000007 	b	1002330 <alt_mmu_va_space_storage_required_internal+0x44>
    {
        vregion[i] = ALT_VREGION_1MIB;
 1002310:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002314:	e51b300c 	ldr	r3, [fp, #-12]
 1002318:	e0823003 	add	r3, r2, r3
 100231c:	e3a02002 	mov	r2, #2
 1002320:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 1002324:	e51b300c 	ldr	r3, [fp, #-12]
 1002328:	e2833001 	add	r3, r3, #1
 100232c:	e50b300c 	str	r3, [fp, #-12]
 1002330:	e51b300c 	ldr	r3, [fp, #-12]
 1002334:	e3530a01 	cmp	r3, #4096	; 0x1000
 1002338:	3afffff4 	bcc	1002310 <alt_mmu_va_space_storage_required_internal+0x24>
    }

    /* For each region entry, mark the TTB1 as either fault, section, pagetable.
     * The total space required is the space required for the TTB1 (16 KiB) + pagetables * (1 KiB) */

    for (i = 0; i < num_mem_regions; ++i)
 100233c:	e3a03000 	mov	r3, #0
 1002340:	e50b300c 	str	r3, [fp, #-12]
 1002344:	ea000096 	b	10025a4 <alt_mmu_va_space_storage_required_internal+0x2b8>
    {
        uintptr_t        va       = (uintptr_t)mem_regions[i].va;
 1002348:	e51b200c 	ldr	r2, [fp, #-12]
 100234c:	e1a03002 	mov	r3, r2
 1002350:	e1a03103 	lsl	r3, r3, #2
 1002354:	e0833002 	add	r3, r3, r2
 1002358:	e1a03103 	lsl	r3, r3, #2
 100235c:	e1a02003 	mov	r2, r3
 1002360:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1002364:	e0833002 	add	r3, r3, r2
 1002368:	e5933000 	ldr	r3, [r3]
 100236c:	e50b3010 	str	r3, [fp, #-16]
        uintptr_t        pa       = (uintptr_t)mem_regions[i].pa;
 1002370:	e51b200c 	ldr	r2, [fp, #-12]
 1002374:	e1a03002 	mov	r3, r2
 1002378:	e1a03103 	lsl	r3, r3, #2
 100237c:	e0833002 	add	r3, r3, r2
 1002380:	e1a03103 	lsl	r3, r3, #2
 1002384:	e1a02003 	mov	r2, r3
 1002388:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 100238c:	e0833002 	add	r3, r3, r2
 1002390:	e5933004 	ldr	r3, [r3, #4]
 1002394:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        uint32_t         size     = mem_regions[i].size;
 1002398:	e51b200c 	ldr	r2, [fp, #-12]
 100239c:	e1a03002 	mov	r3, r2
 10023a0:	e1a03103 	lsl	r3, r3, #2
 10023a4:	e0833002 	add	r3, r3, r2
 10023a8:	e1a03103 	lsl	r3, r3, #2
 10023ac:	e1a02003 	mov	r2, r3
 10023b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10023b4:	e0833002 	add	r3, r3, r2
 10023b8:	e5933008 	ldr	r3, [r3, #8]
 10023bc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        ALT_MMU_TTB_NS_t security = mem_regions[i].security;
 10023c0:	e51b200c 	ldr	r2, [fp, #-12]
 10023c4:	e1a03002 	mov	r3, r2
 10023c8:	e1a03103 	lsl	r3, r3, #2
 10023cc:	e0833002 	add	r3, r3, r2
 10023d0:	e1a03103 	lsl	r3, r3, #2
 10023d4:	e1a02003 	mov	r2, r3
 10023d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10023dc:	e0833002 	add	r3, r3, r2
 10023e0:	e5d33010 	ldrb	r3, [r3, #16]
 10023e4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

        /* Verify [va] aligns to 4 KiB */
        if (va & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 10023e8:	e51b3010 	ldr	r3, [fp, #-16]
 10023ec:	e7eb3053 	ubfx	r3, r3, #0, #12
 10023f0:	e3530000 	cmp	r3, #0
 10023f4:	0a000001 	beq	1002400 <alt_mmu_va_space_storage_required_internal+0x114>
        {
            return 0;
 10023f8:	e3a03000 	mov	r3, #0
 10023fc:	ea000081 	b	1002608 <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Verify [pa] aligns to 4 KiB */
        if (pa & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 1002400:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002404:	e7eb3053 	ubfx	r3, r3, #0, #12
 1002408:	e3530000 	cmp	r3, #0
 100240c:	0a000001 	beq	1002418 <alt_mmu_va_space_storage_required_internal+0x12c>
        {
            return 0;
 1002410:	e3a03000 	mov	r3, #0
 1002414:	ea00007b 	b	1002608 <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Verify [size] aligns to 4 KiB */
        if (size & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 1002418:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100241c:	e7eb3053 	ubfx	r3, r3, #0, #12
 1002420:	e3530000 	cmp	r3, #0
 1002424:	0a000001 	beq	1002430 <alt_mmu_va_space_storage_required_internal+0x144>
        {
            return 0;
 1002428:	e3a03000 	mov	r3, #0
 100242c:	ea000075 	b	1002608 <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Mark the regions at the start of an unaligned 1 MiB as pagetable.
         * Align the [va] to 1 MiB and subtract that from the [size] left to describe. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
 1002430:	e51b3010 	ldr	r3, [fp, #-16]
 1002434:	e7f33053 	ubfx	r3, r3, #0, #20
 1002438:	e3530000 	cmp	r3, #0
 100243c:	0a000020 	beq	10024c4 <alt_mmu_va_space_storage_required_internal+0x1d8>
        {
            uint32_t segment = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
 1002440:	e51b3010 	ldr	r3, [fp, #-16]
 1002444:	e7f33053 	ubfx	r3, r3, #0, #20
 1002448:	e2633601 	rsb	r3, r3, #1048576	; 0x100000
 100244c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 1002450:	e1520003 	cmp	r2, r3
 1002454:	31a03002 	movcc	r3, r2
 1002458:	21a03003 	movcs	r3, r3
 100245c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

            /* Pagetables must be either S or NS. If the pagetable was
             * previously marked as something different, the regions described
             * will not be implementable. */
            if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 1002460:	e51b3010 	ldr	r3, [fp, #-16]
 1002464:	e1a03a23 	lsr	r3, r3, #20
 1002468:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 100246c:	e0823003 	add	r3, r2, r3
 1002470:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 1002474:	e1a01002 	mov	r1, r2
 1002478:	e1a00003 	mov	r0, r3
 100247c:	ebffff80 	bl	1002284 <alt_vregion_mark_pagetable>
 1002480:	e1a03000 	mov	r3, r0
 1002484:	e3530000 	cmp	r3, #0
 1002488:	0a000001 	beq	1002494 <alt_mmu_va_space_storage_required_internal+0x1a8>
                                           security) != ALT_E_SUCCESS)
            {
                return 0;
 100248c:	e3a03000 	mov	r3, #0
 1002490:	ea00005c 	b	1002608 <alt_mmu_va_space_storage_required_internal+0x31c>
            }

            va   += segment;
 1002494:	e51b2010 	ldr	r2, [fp, #-16]
 1002498:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100249c:	e0823003 	add	r3, r2, r3
 10024a0:	e50b3010 	str	r3, [fp, #-16]
            pa   += segment;
 10024a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 10024a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10024ac:	e0823003 	add	r3, r2, r3
 10024b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            size -= segment;
 10024b4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 10024b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10024bc:	e0423003 	sub	r3, r2, r3
 10024c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        /* Skip each 1 MiB aligned segment of size 1 MiB. These regions require
         * pagetable if the PA is not 1 MiB aligned. */

        /* [pa] is not used after this point. */

        if (pa & (ALT_MMU_SECTION_SIZE - 1))
 10024c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10024c8:	e7f33053 	ubfx	r3, r3, #0, #20
 10024cc:	e3530000 	cmp	r3, #0
 10024d0:	0a00001d 	beq	100254c <alt_mmu_va_space_storage_required_internal+0x260>
        {
            /* PA is not 1 MiB aligned. Everything must use pagetables. */

            while (size >= ALT_MMU_SECTION_SIZE)
 10024d4:	ea000012 	b	1002524 <alt_mmu_va_space_storage_required_internal+0x238>
            {
                /* Pagetables must be either S or NS. If the pagetable was
                 * previously marked as something different, the regions described
                 * will not be implementable. */
                if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 10024d8:	e51b3010 	ldr	r3, [fp, #-16]
 10024dc:	e1a03a23 	lsr	r3, r3, #20
 10024e0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 10024e4:	e0823003 	add	r3, r2, r3
 10024e8:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 10024ec:	e1a01002 	mov	r1, r2
 10024f0:	e1a00003 	mov	r0, r3
 10024f4:	ebffff62 	bl	1002284 <alt_vregion_mark_pagetable>
 10024f8:	e1a03000 	mov	r3, r0
 10024fc:	e3530000 	cmp	r3, #0
 1002500:	0a000001 	beq	100250c <alt_mmu_va_space_storage_required_internal+0x220>
                                               security) != ALT_E_SUCCESS)
                {
                    return 0;
 1002504:	e3a03000 	mov	r3, #0
 1002508:	ea00003e 	b	1002608 <alt_mmu_va_space_storage_required_internal+0x31c>
                }

                va   += ALT_MMU_SECTION_SIZE;
 100250c:	e51b3010 	ldr	r3, [fp, #-16]
 1002510:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1002514:	e50b3010 	str	r3, [fp, #-16]
                /* pa   += ALT_MMU_SECTION_SIZE; */
                size -= ALT_MMU_SECTION_SIZE;
 1002518:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100251c:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1002520:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            while (size >= ALT_MMU_SECTION_SIZE)
 1002524:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002528:	e3530601 	cmp	r3, #1048576	; 0x100000
 100252c:	2affffe9 	bcs	10024d8 <alt_mmu_va_space_storage_required_internal+0x1ec>
 1002530:	ea000008 	b	1002558 <alt_mmu_va_space_storage_required_internal+0x26c>
        {
            /* PA is 1 MiB aligned. Sections or supersections can be used. */

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                va   += ALT_MMU_SECTION_SIZE;
 1002534:	e51b3010 	ldr	r3, [fp, #-16]
 1002538:	e2833601 	add	r3, r3, #1048576	; 0x100000
 100253c:	e50b3010 	str	r3, [fp, #-16]
                /* pa   += ALT_MMU_SECTION_SIZE; */
                size -= ALT_MMU_SECTION_SIZE;
 1002540:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002544:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1002548:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            while (size >= ALT_MMU_SECTION_SIZE)
 100254c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002550:	e3530601 	cmp	r3, #1048576	; 0x100000
 1002554:	2afffff6 	bcs	1002534 <alt_mmu_va_space_storage_required_internal+0x248>
            }
        }

        /* The remainder should be a 1 MiB aligned segment of less than 1 MiB. Mark that region as pagetable. */
        if (size)
 1002558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100255c:	e3530000 	cmp	r3, #0
 1002560:	0a00000c 	beq	1002598 <alt_mmu_va_space_storage_required_internal+0x2ac>
        {
            /* Pagetables must be either S or NS. If the pagetable was
             * previously marked as something different, the regions described
             * will not be implementable. */
            if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 1002564:	e51b3010 	ldr	r3, [fp, #-16]
 1002568:	e1a03a23 	lsr	r3, r3, #20
 100256c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002570:	e0823003 	add	r3, r2, r3
 1002574:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 1002578:	e1a01002 	mov	r1, r2
 100257c:	e1a00003 	mov	r0, r3
 1002580:	ebffff3f 	bl	1002284 <alt_vregion_mark_pagetable>
 1002584:	e1a03000 	mov	r3, r0
 1002588:	e3530000 	cmp	r3, #0
 100258c:	0a000001 	beq	1002598 <alt_mmu_va_space_storage_required_internal+0x2ac>
                                           security) != ALT_E_SUCCESS)
            {
                return 0;
 1002590:	e3a03000 	mov	r3, #0
 1002594:	ea00001b 	b	1002608 <alt_mmu_va_space_storage_required_internal+0x31c>
    for (i = 0; i < num_mem_regions; ++i)
 1002598:	e51b300c 	ldr	r3, [fp, #-12]
 100259c:	e2833001 	add	r3, r3, #1
 10025a0:	e50b300c 	str	r3, [fp, #-12]
 10025a4:	e51b200c 	ldr	r2, [fp, #-12]
 10025a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 10025ac:	e1520003 	cmp	r2, r3
 10025b0:	3affff64 	bcc	1002348 <alt_mmu_va_space_storage_required_internal+0x5c>
            }
        }
    }

    /* Calculate the size as 16 KiB (TTB1) + 1 KiB * (TTB2 or the number of pagetables) */
    reqsize = ALT_MMU_TTB1_SIZE;
 10025b4:	e3a03901 	mov	r3, #16384	; 0x4000
 10025b8:	e50b3008 	str	r3, [fp, #-8]

    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 10025bc:	e3a03000 	mov	r3, #0
 10025c0:	e50b300c 	str	r3, [fp, #-12]
 10025c4:	ea00000b 	b	10025f8 <alt_mmu_va_space_storage_required_internal+0x30c>
    {
        if (vregion[i] != ALT_VREGION_1MIB)
 10025c8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 10025cc:	e51b300c 	ldr	r3, [fp, #-12]
 10025d0:	e0823003 	add	r3, r2, r3
 10025d4:	e5d33000 	ldrb	r3, [r3]
 10025d8:	e3530002 	cmp	r3, #2
 10025dc:	0a000002 	beq	10025ec <alt_mmu_va_space_storage_required_internal+0x300>
        {
            reqsize += ALT_MMU_TTB2_SIZE;
 10025e0:	e51b3008 	ldr	r3, [fp, #-8]
 10025e4:	e2833b01 	add	r3, r3, #1024	; 0x400
 10025e8:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 10025ec:	e51b300c 	ldr	r3, [fp, #-12]
 10025f0:	e2833001 	add	r3, r3, #1
 10025f4:	e50b300c 	str	r3, [fp, #-12]
 10025f8:	e51b300c 	ldr	r3, [fp, #-12]
 10025fc:	e3530a01 	cmp	r3, #4096	; 0x1000
 1002600:	3afffff0 	bcc	10025c8 <alt_mmu_va_space_storage_required_internal+0x2dc>
        }
    }

    return reqsize;
 1002604:	e51b3008 	ldr	r3, [fp, #-8]
}
 1002608:	e1a00003 	mov	r0, r3
 100260c:	e24bd004 	sub	sp, fp, #4
 1002610:	e8bd8800 	pop	{fp, pc}

01002614 <alt_mmu_va_space_storage_required>:

size_t alt_mmu_va_space_storage_required(const ALT_MMU_MEM_REGION_t* mem_regions,
                                         const size_t num_mem_regions)
{
 1002614:	e92d4800 	push	{fp, lr}
 1002618:	e28db004 	add	fp, sp, #4
 100261c:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 1002620:	e24dd008 	sub	sp, sp, #8
 1002624:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002628:	e2433004 	sub	r3, r3, #4
 100262c:	e5030004 	str	r0, [r3, #-4]
 1002630:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002634:	e2433004 	sub	r3, r3, #4
 1002638:	e5031008 	str	r1, [r3, #-8]
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    return alt_mmu_va_space_storage_required_internal(mem_regions,
 100263c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002640:	e2433004 	sub	r3, r3, #4
 1002644:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002648:	e2422004 	sub	r2, r2, #4
 100264c:	e1a01002 	mov	r1, r2
 1002650:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002654:	e2422004 	sub	r2, r2, #4
 1002658:	e1a00002 	mov	r0, r2
 100265c:	e1a02003 	mov	r2, r3
 1002660:	e5111008 	ldr	r1, [r1, #-8]
 1002664:	e5100004 	ldr	r0, [r0, #-4]
 1002668:	ebffff1f 	bl	10022ec <alt_mmu_va_space_storage_required_internal>
 100266c:	e1a03000 	mov	r3, r0
                                                      num_mem_regions,
                                                      vregion);
}
 1002670:	e1a00003 	mov	r0, r3
 1002674:	e24bd004 	sub	sp, fp, #4
 1002678:	e8bd8800 	pop	{fp, pc}

0100267c <alt_mmu_va_space_gen_pagetable>:

static __inline uint32_t alt_mmu_va_space_gen_pagetable(uintptr_t pagetable,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 100267c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002680:	e28db000 	add	fp, sp, #0
 1002684:	e24dd00c 	sub	sp, sp, #12
 1002688:	e50b0008 	str	r0, [fp, #-8]
 100268c:	e50b100c 	str	r1, [fp, #-12]
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002690:	e51b300c 	ldr	r3, [fp, #-12]
 1002694:	e5d3300d 	ldrb	r3, [r3, #13]
 1002698:	e35300ff 	cmp	r3, #255	; 0xff
 100269c:	1a000001 	bne	10026a8 <alt_mmu_va_space_gen_pagetable+0x2c>
    {
        return 0;
 10026a0:	e3a03000 	mov	r3, #0
 10026a4:	ea000008 	b	10026cc <alt_mmu_va_space_gen_pagetable+0x50>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x1)
        | ALT_MMU_TTB1_PAGE_TBL_NS_SET(mem->security)
 10026a8:	e51b300c 	ldr	r3, [fp, #-12]
 10026ac:	e5d33010 	ldrb	r3, [r3, #16]
 10026b0:	e1a03183 	lsl	r3, r3, #3
        | ALT_MMU_TTB1_PAGE_TBL_DOMAIN_SET(0)
        | ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_SET(pagetable >> 10);
 10026b4:	e2032008 	and	r2, r3, #8
 10026b8:	e51b3008 	ldr	r3, [fp, #-8]
 10026bc:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10026c0:	e3c33003 	bic	r3, r3, #3
 10026c4:	e1823003 	orr	r3, r2, r3
 10026c8:	e3833001 	orr	r3, r3, #1
}
 10026cc:	e1a00003 	mov	r0, r3
 10026d0:	e28bd000 	add	sp, fp, #0
 10026d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10026d8:	e12fff1e 	bx	lr

010026dc <alt_mmu_va_space_gen_section>:

static __inline uint32_t alt_mmu_va_space_gen_section(uintptr_t pa,
                                                    const ALT_MMU_MEM_REGION_t * mem)
{
 10026dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10026e0:	e28db000 	add	fp, sp, #0
 10026e4:	e24dd01c 	sub	sp, sp, #28
 10026e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 10026ec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 10026f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10026f4:	e5d3300d 	ldrb	r3, [r3, #13]
 10026f8:	e1a03223 	lsr	r3, r3, #4
 10026fc:	e6ef3073 	uxtb	r3, r3
 1002700:	e2033007 	and	r3, r3, #7
 1002704:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 1002708:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100270c:	e5d3300d 	ldrb	r3, [r3, #13]
 1002710:	e1a030a3 	lsr	r3, r3, #1
 1002714:	e6ef3073 	uxtb	r3, r3
 1002718:	e2033001 	and	r3, r3, #1
 100271c:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1002720:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002724:	e5d3300d 	ldrb	r3, [r3, #13]
 1002728:	e2033001 	and	r3, r3, #1
 100272c:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002730:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002734:	e5d3300d 	ldrb	r3, [r3, #13]
 1002738:	e35300ff 	cmp	r3, #255	; 0xff
 100273c:	1a000001 	bne	1002748 <alt_mmu_va_space_gen_section+0x6c>
    {
        return 0;
 1002740:	e3a03000 	mov	r3, #0
 1002744:	ea000029 	b	10027f0 <alt_mmu_va_space_gen_section+0x114>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
 1002748:	e51b3010 	ldr	r3, [fp, #-16]
 100274c:	e1a03103 	lsl	r3, r3, #2
 1002750:	e2033004 	and	r3, r3, #4
 1002754:	e3832002 	orr	r2, r3, #2
        | ALT_MMU_TTB1_SECTION_C_SET(c)
 1002758:	e51b300c 	ldr	r3, [fp, #-12]
 100275c:	e1a03183 	lsl	r3, r3, #3
 1002760:	e2033008 	and	r3, r3, #8
 1002764:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
 1002768:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100276c:	e5d3300f 	ldrb	r3, [r3, #15]
 1002770:	e1a03203 	lsl	r3, r3, #4
 1002774:	e2033010 	and	r3, r3, #16
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
 1002778:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
 100277c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002780:	e5d3300c 	ldrb	r3, [r3, #12]
 1002784:	e1a03683 	lsl	r3, r3, #13
 1002788:	e2031902 	and	r1, r3, #32768	; 0x8000
 100278c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002790:	e5d3300c 	ldrb	r3, [r3, #12]
 1002794:	e1a03503 	lsl	r3, r3, #10
 1002798:	e2033b03 	and	r3, r3, #3072	; 0xc00
 100279c:	e1813003 	orr	r3, r1, r3
 10027a0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
 10027a4:	e51b3008 	ldr	r3, [fp, #-8]
 10027a8:	e1a03603 	lsl	r3, r3, #12
 10027ac:	e2033a07 	and	r3, r3, #28672	; 0x7000
 10027b0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
 10027b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10027b8:	e5d3300e 	ldrb	r3, [r3, #14]
 10027bc:	e1a03803 	lsl	r3, r3, #16
 10027c0:	e2033801 	and	r3, r3, #65536	; 0x10000
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
 10027c4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
 10027c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10027cc:	e5d33010 	ldrb	r3, [r3, #16]
 10027d0:	e1a03983 	lsl	r3, r3, #19
 10027d4:	e2033702 	and	r3, r3, #524288	; 0x80000
 10027d8:	e1823003 	orr	r3, r2, r3
 10027dc:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB1_SECTION_BASE_ADDR_SET(pa >> 20);
 10027e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10027e4:	e1a03a23 	lsr	r3, r3, #20
 10027e8:	e1a03a03 	lsl	r3, r3, #20
 10027ec:	e1823003 	orr	r3, r2, r3
}
 10027f0:	e1a00003 	mov	r0, r3
 10027f4:	e28bd000 	add	sp, fp, #0
 10027f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10027fc:	e12fff1e 	bx	lr

01002800 <alt_mmu_va_space_gen_supersection>:

static __inline uint32_t alt_mmu_va_space_gen_supersection(uintptr_t pa,
                                                         const ALT_MMU_MEM_REGION_t * mem)
{
 1002800:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002804:	e28db000 	add	fp, sp, #0
 1002808:	e24dd01c 	sub	sp, sp, #28
 100280c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1002810:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1002814:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002818:	e5d3300d 	ldrb	r3, [r3, #13]
 100281c:	e1a03223 	lsr	r3, r3, #4
 1002820:	e6ef3073 	uxtb	r3, r3
 1002824:	e2033007 	and	r3, r3, #7
 1002828:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 100282c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002830:	e5d3300d 	ldrb	r3, [r3, #13]
 1002834:	e1a030a3 	lsr	r3, r3, #1
 1002838:	e6ef3073 	uxtb	r3, r3
 100283c:	e2033001 	and	r3, r3, #1
 1002840:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1002844:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002848:	e5d3300d 	ldrb	r3, [r3, #13]
 100284c:	e2033001 	and	r3, r3, #1
 1002850:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002854:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002858:	e5d3300d 	ldrb	r3, [r3, #13]
 100285c:	e35300ff 	cmp	r3, #255	; 0xff
 1002860:	1a000001 	bne	100286c <alt_mmu_va_space_gen_supersection+0x6c>
    {
        return 0;
 1002864:	e3a03000 	mov	r3, #0
 1002868:	ea000029 	b	1002914 <alt_mmu_va_space_gen_supersection+0x114>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
 100286c:	e51b3010 	ldr	r3, [fp, #-16]
 1002870:	e1a03103 	lsl	r3, r3, #2
 1002874:	e2033004 	and	r3, r3, #4
 1002878:	e3833701 	orr	r3, r3, #262144	; 0x40000
 100287c:	e3833002 	orr	r3, r3, #2
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
 1002880:	e51b200c 	ldr	r2, [fp, #-12]
 1002884:	e1a02182 	lsl	r2, r2, #3
 1002888:	e2022008 	and	r2, r2, #8
 100288c:	e1832002 	orr	r2, r3, r2
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
 1002890:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002894:	e5d3300f 	ldrb	r3, [r3, #15]
 1002898:	e1a03203 	lsl	r3, r3, #4
 100289c:	e2033010 	and	r3, r3, #16
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
 10028a0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
 10028a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10028a8:	e5d3300c 	ldrb	r3, [r3, #12]
 10028ac:	e1a03683 	lsl	r3, r3, #13
 10028b0:	e2031902 	and	r1, r3, #32768	; 0x8000
 10028b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10028b8:	e5d3300c 	ldrb	r3, [r3, #12]
 10028bc:	e1a03503 	lsl	r3, r3, #10
 10028c0:	e2033b03 	and	r3, r3, #3072	; 0xc00
 10028c4:	e1813003 	orr	r3, r1, r3
 10028c8:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
 10028cc:	e51b3008 	ldr	r3, [fp, #-8]
 10028d0:	e1a03603 	lsl	r3, r3, #12
 10028d4:	e2033a07 	and	r3, r3, #28672	; 0x7000
 10028d8:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
 10028dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10028e0:	e5d3300e 	ldrb	r3, [r3, #14]
 10028e4:	e1a03803 	lsl	r3, r3, #16
 10028e8:	e2033801 	and	r3, r3, #65536	; 0x10000
        | ALT_MMU_TTB1_SUPERSECTION_NG_SET(0)
 10028ec:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_NS_SET(mem->security)
 10028f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10028f4:	e5d33010 	ldrb	r3, [r3, #16]
 10028f8:	e1a03983 	lsl	r3, r3, #19
 10028fc:	e2033702 	and	r3, r3, #524288	; 0x80000
 1002900:	e1823003 	orr	r3, r2, r3
 1002904:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_BASE_ADDR_SET(pa >> 24);
 1002908:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100290c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
 1002910:	e1823003 	orr	r3, r2, r3
}
 1002914:	e1a00003 	mov	r0, r3
 1002918:	e28bd000 	add	sp, fp, #0
 100291c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002920:	e12fff1e 	bx	lr

01002924 <alt_mmu_va_space_gen_smallpage>:

static __inline uint32_t alt_mmu_va_space_gen_smallpage(uintptr_t pa,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 1002924:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002928:	e28db000 	add	fp, sp, #0
 100292c:	e24dd01c 	sub	sp, sp, #28
 1002930:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1002934:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1002938:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100293c:	e5d3300d 	ldrb	r3, [r3, #13]
 1002940:	e1a03223 	lsr	r3, r3, #4
 1002944:	e6ef3073 	uxtb	r3, r3
 1002948:	e2033007 	and	r3, r3, #7
 100294c:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 1002950:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002954:	e5d3300d 	ldrb	r3, [r3, #13]
 1002958:	e1a030a3 	lsr	r3, r3, #1
 100295c:	e6ef3073 	uxtb	r3, r3
 1002960:	e2033001 	and	r3, r3, #1
 1002964:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1002968:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100296c:	e5d3300d 	ldrb	r3, [r3, #13]
 1002970:	e2033001 	and	r3, r3, #1
 1002974:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002978:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100297c:	e5d3300d 	ldrb	r3, [r3, #13]
 1002980:	e35300ff 	cmp	r3, #255	; 0xff
 1002984:	1a000001 	bne	1002990 <alt_mmu_va_space_gen_smallpage+0x6c>
    {
        return 0;
 1002988:	e3a03000 	mov	r3, #0
 100298c:	ea000023 	b	1002a20 <alt_mmu_va_space_gen_smallpage+0xfc>

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
 1002990:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002994:	e5d3300f 	ldrb	r3, [r3, #15]
 1002998:	e2033001 	and	r3, r3, #1
 100299c:	e3832002 	orr	r2, r3, #2
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
 10029a0:	e51b3010 	ldr	r3, [fp, #-16]
 10029a4:	e1a03103 	lsl	r3, r3, #2
 10029a8:	e2033004 	and	r3, r3, #4
 10029ac:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
 10029b0:	e51b300c 	ldr	r3, [fp, #-12]
 10029b4:	e1a03183 	lsl	r3, r3, #3
 10029b8:	e2033008 	and	r3, r3, #8
 10029bc:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
 10029c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029c4:	e5d3300c 	ldrb	r3, [r3, #12]
 10029c8:	e1a03383 	lsl	r3, r3, #7
 10029cc:	e2031c02 	and	r1, r3, #512	; 0x200
 10029d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029d4:	e5d3300c 	ldrb	r3, [r3, #12]
 10029d8:	e1a03203 	lsl	r3, r3, #4
 10029dc:	e2033030 	and	r3, r3, #48	; 0x30
 10029e0:	e1813003 	orr	r3, r1, r3
 10029e4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
 10029e8:	e51b3008 	ldr	r3, [fp, #-8]
 10029ec:	e1a03303 	lsl	r3, r3, #6
 10029f0:	e2033d07 	and	r3, r3, #448	; 0x1c0
 10029f4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
 10029f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029fc:	e5d3300e 	ldrb	r3, [r3, #14]
 1002a00:	e1a03503 	lsl	r3, r3, #10
 1002a04:	e2033b01 	and	r3, r3, #1024	; 0x400
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
 1002a08:	e1823003 	orr	r3, r2, r3
 1002a0c:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
 1002a10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002a14:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
 1002a18:	e3c3300f 	bic	r3, r3, #15
 1002a1c:	e1823003 	orr	r3, r2, r3
}
 1002a20:	e1a00003 	mov	r0, r3
 1002a24:	e28bd000 	add	sp, fp, #0
 1002a28:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002a2c:	e12fff1e 	bx	lr

01002a30 <alt_mmu_va_space_gen_largepage>:

static __inline uint32_t alt_mmu_va_space_gen_largepage(uintptr_t pa,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 1002a30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002a34:	e28db000 	add	fp, sp, #0
 1002a38:	e24dd01c 	sub	sp, sp, #28
 1002a3c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1002a40:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1002a44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002a48:	e5d3300d 	ldrb	r3, [r3, #13]
 1002a4c:	e1a03223 	lsr	r3, r3, #4
 1002a50:	e6ef3073 	uxtb	r3, r3
 1002a54:	e2033007 	and	r3, r3, #7
 1002a58:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 1002a5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002a60:	e5d3300d 	ldrb	r3, [r3, #13]
 1002a64:	e1a030a3 	lsr	r3, r3, #1
 1002a68:	e6ef3073 	uxtb	r3, r3
 1002a6c:	e2033001 	and	r3, r3, #1
 1002a70:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1002a74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002a78:	e5d3300d 	ldrb	r3, [r3, #13]
 1002a7c:	e2033001 	and	r3, r3, #1
 1002a80:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002a84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002a88:	e5d3300d 	ldrb	r3, [r3, #13]
 1002a8c:	e35300ff 	cmp	r3, #255	; 0xff
 1002a90:	1a000001 	bne	1002a9c <alt_mmu_va_space_gen_largepage+0x6c>
    {
        return 0;
 1002a94:	e3a03000 	mov	r3, #0
 1002a98:	ea000024 	b	1002b30 <alt_mmu_va_space_gen_largepage+0x100>

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
 1002a9c:	e51b3010 	ldr	r3, [fp, #-16]
 1002aa0:	e1a03103 	lsl	r3, r3, #2
 1002aa4:	e2033004 	and	r3, r3, #4
 1002aa8:	e3832001 	orr	r2, r3, #1
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
 1002aac:	e51b300c 	ldr	r3, [fp, #-12]
 1002ab0:	e1a03183 	lsl	r3, r3, #3
 1002ab4:	e2033008 	and	r3, r3, #8
 1002ab8:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
 1002abc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002ac0:	e5d3300c 	ldrb	r3, [r3, #12]
 1002ac4:	e1a03383 	lsl	r3, r3, #7
 1002ac8:	e2031c02 	and	r1, r3, #512	; 0x200
 1002acc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002ad0:	e5d3300c 	ldrb	r3, [r3, #12]
 1002ad4:	e1a03203 	lsl	r3, r3, #4
 1002ad8:	e2033030 	and	r3, r3, #48	; 0x30
 1002adc:	e1813003 	orr	r3, r1, r3
 1002ae0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
 1002ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002ae8:	e5d3300e 	ldrb	r3, [r3, #14]
 1002aec:	e1a03503 	lsl	r3, r3, #10
 1002af0:	e2033b01 	and	r3, r3, #1024	; 0x400
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
 1002af4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
 1002af8:	e51b3008 	ldr	r3, [fp, #-8]
 1002afc:	e1a03603 	lsl	r3, r3, #12
 1002b00:	e2033a07 	and	r3, r3, #28672	; 0x7000
 1002b04:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
 1002b08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002b0c:	e5d3300f 	ldrb	r3, [r3, #15]
 1002b10:	e1a03783 	lsl	r3, r3, #15
 1002b14:	e6ff3073 	uxth	r3, r3
 1002b18:	e1823003 	orr	r3, r2, r3
 1002b1c:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_BASE_ADDR_SET(pa >> 16);
 1002b20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002b24:	e1a03823 	lsr	r3, r3, #16
 1002b28:	e1a03803 	lsl	r3, r3, #16
 1002b2c:	e1823003 	orr	r3, r2, r3
}
 1002b30:	e1a00003 	mov	r0, r3
 1002b34:	e28bd000 	add	sp, fp, #0
 1002b38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002b3c:	e12fff1e 	bx	lr

01002b40 <alt_mmu_ttb2_init>:

static ALT_STATUS_CODE alt_mmu_ttb2_init(uint32_t * ttb2)
{
 1002b40:	e92d4800 	push	{fp, lr}
 1002b44:	e28db004 	add	fp, sp, #4
 1002b48:	e24dd008 	sub	sp, sp, #8
 1002b4c:	e50b0008 	str	r0, [fp, #-8]
    /* For TTB2 (page tables), the page table base address in TTB1 is
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    if ((uintptr_t)ttb2 & ((1 << 10) - 1))
 1002b50:	e51b3008 	ldr	r3, [fp, #-8]
 1002b54:	e7e93053 	ubfx	r3, r3, #0, #10
 1002b58:	e3530000 	cmp	r3, #0
 1002b5c:	0a000001 	beq	1002b68 <alt_mmu_ttb2_init+0x28>
    {
        return ALT_E_BAD_ARG;
 1002b60:	e3e03008 	mvn	r3, #8
 1002b64:	ea000004 	b	1002b7c <alt_mmu_ttb2_init+0x3c>
    }

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
 1002b68:	e3a02b01 	mov	r2, #1024	; 0x400
 1002b6c:	e3a01000 	mov	r1, #0
 1002b70:	e51b0008 	ldr	r0, [fp, #-8]
 1002b74:	eb00084a 	bl	1004ca4 <memset>
    return ALT_E_SUCCESS;
 1002b78:	e3a03000 	mov	r3, #0
}
 1002b7c:	e1a00003 	mov	r0, r3
 1002b80:	e24bd004 	sub	sp, fp, #4
 1002b84:	e8bd8800 	pop	{fp, pc}

01002b88 <alt_mmu_va_space_create>:
ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
                                        const ALT_MMU_MEM_REGION_t* mem_regions,
                                        const size_t num_mem_regions,
                                        alt_mmu_ttb_alloc_t ttb_alloc,
                                        void * ttb_alloc_context)
{
 1002b88:	e92d4800 	push	{fp, lr}
 1002b8c:	e28db004 	add	fp, sp, #4
 1002b90:	e24ddd43 	sub	sp, sp, #4288	; 0x10c0
 1002b94:	e24bca01 	sub	ip, fp, #4096	; 0x1000
 1002b98:	e24cc004 	sub	ip, ip, #4
 1002b9c:	e50c00b4 	str	r0, [ip, #-180]	; 0xffffff4c
 1002ba0:	e24b0a01 	sub	r0, fp, #4096	; 0x1000
 1002ba4:	e2400004 	sub	r0, r0, #4
 1002ba8:	e50010b8 	str	r1, [r0, #-184]	; 0xffffff48
 1002bac:	e24b1a01 	sub	r1, fp, #4096	; 0x1000
 1002bb0:	e2411004 	sub	r1, r1, #4
 1002bb4:	e50120bc 	str	r2, [r1, #-188]	; 0xffffff44
 1002bb8:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002bbc:	e2422004 	sub	r2, r2, #4
 1002bc0:	e50230c0 	str	r3, [r2, #-192]	; 0xffffff40
    int k;
    size_t i;
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    size_t reqsize = alt_mmu_va_space_storage_required_internal(mem_regions,
 1002bc4:	e24b3d42 	sub	r3, fp, #4224	; 0x1080
 1002bc8:	e2433004 	sub	r3, r3, #4
 1002bcc:	e243300c 	sub	r3, r3, #12
 1002bd0:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002bd4:	e2422004 	sub	r2, r2, #4
 1002bd8:	e1a01002 	mov	r1, r2
 1002bdc:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002be0:	e2422004 	sub	r2, r2, #4
 1002be4:	e1a00002 	mov	r0, r2
 1002be8:	e1a02003 	mov	r2, r3
 1002bec:	e51110bc 	ldr	r1, [r1, #-188]	; 0xffffff44
 1002bf0:	e51000b8 	ldr	r0, [r0, #-184]	; 0xffffff48
 1002bf4:	ebfffdbc 	bl	10022ec <alt_mmu_va_space_storage_required_internal>
 1002bf8:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
                                                                num_mem_regions,
                                                                vregion);
    char * memory;
    size_t allocated = 0;
 1002bfc:	e3a03000 	mov	r3, #0
 1002c00:	e50b3010 	str	r3, [fp, #-16]
    if (reqsize == 0)
 1002c04:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 1002c08:	e3530000 	cmp	r3, #0
 1002c0c:	1a000001 	bne	1002c18 <alt_mmu_va_space_create+0x90>
    {
        return ALT_E_ERROR;
 1002c10:	e3e03000 	mvn	r3, #0
 1002c14:	ea00034e 	b	1003954 <alt_mmu_va_space_create+0xdcc>
    }

    memory    = ttb_alloc(reqsize, ttb_alloc_context);
 1002c18:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002c1c:	e2433004 	sub	r3, r3, #4
 1002c20:	e51330c0 	ldr	r3, [r3, #-192]	; 0xffffff40
 1002c24:	e59b1004 	ldr	r1, [fp, #4]
 1002c28:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1002c2c:	e12fff33 	blx	r3
 1002c30:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0

    /* Verify allocation */

    if (memory == NULL)
 1002c34:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1002c38:	e3530000 	cmp	r3, #0
 1002c3c:	1a000001 	bne	1002c48 <alt_mmu_va_space_create+0xc0>
    {
        return ALT_E_ERROR;
 1002c40:	e3e03000 	mvn	r3, #0
 1002c44:	ea000342 	b	1003954 <alt_mmu_va_space_create+0xdcc>
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    /* The stricter of the two alignment is 16 KiB. */

    if ((uintptr_t)memory & ((1 << 14) - 1))
 1002c48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1002c4c:	e7ed3053 	ubfx	r3, r3, #0, #14
 1002c50:	e3530000 	cmp	r3, #0
 1002c54:	0a000001 	beq	1002c60 <alt_mmu_va_space_create+0xd8>
    {
        return ALT_E_BAD_ARG;
 1002c58:	e3e03008 	mvn	r3, #8
 1002c5c:	ea00033c 	b	1003954 <alt_mmu_va_space_create+0xdcc>
    }

    /* "allocate" space for the TTB1. */
    if (allocated + ALT_MMU_TTB1_SIZE > reqsize)
 1002c60:	e51b3010 	ldr	r3, [fp, #-16]
 1002c64:	e2833901 	add	r3, r3, #16384	; 0x4000
 1002c68:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1002c6c:	e1520003 	cmp	r2, r3
 1002c70:	2a000001 	bcs	1002c7c <alt_mmu_va_space_create+0xf4>
    {
        return ALT_E_ERROR;
 1002c74:	e3e03000 	mvn	r3, #0
 1002c78:	ea000335 	b	1003954 <alt_mmu_va_space_create+0xdcc>
    }
    *ttb1 = (uint32_t *)memory;
 1002c7c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002c80:	e2433004 	sub	r3, r3, #4
 1002c84:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002c88:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002c8c:	e5832000 	str	r2, [r3]
    allocated += ALT_MMU_TTB1_SIZE;
 1002c90:	e51b3010 	ldr	r3, [fp, #-16]
 1002c94:	e2833901 	add	r3, r3, #16384	; 0x4000
 1002c98:	e50b3010 	str	r3, [fp, #-16]

    if (alt_mmu_ttb1_init(*ttb1) != ALT_E_SUCCESS)
 1002c9c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002ca0:	e2433004 	sub	r3, r3, #4
 1002ca4:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002ca8:	e5933000 	ldr	r3, [r3]
 1002cac:	e1a00003 	mov	r0, r3
 1002cb0:	ebfffc92 	bl	1001f00 <alt_mmu_ttb1_init>
 1002cb4:	e1a03000 	mov	r3, r0
 1002cb8:	e3530000 	cmp	r3, #0
 1002cbc:	0a000001 	beq	1002cc8 <alt_mmu_va_space_create+0x140>
    {
        return ALT_E_ERROR;
 1002cc0:	e3e03000 	mvn	r3, #0
 1002cc4:	ea000322 	b	1003954 <alt_mmu_va_space_create+0xdcc>
    }

    /* "allocate" space for each pagetable in [vregion] */
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
 1002cc8:	e3a03000 	mov	r3, #0
 1002ccc:	e50b3008 	str	r3, [fp, #-8]
 1002cd0:	ea00003a 	b	1002dc0 <alt_mmu_va_space_create+0x238>
    {
        if (vregion[k] != ALT_VREGION_1MIB)
 1002cd4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002cd8:	e2433004 	sub	r3, r3, #4
 1002cdc:	e1a02003 	mov	r2, r3
 1002ce0:	e51b3008 	ldr	r3, [fp, #-8]
 1002ce4:	e0823003 	add	r3, r2, r3
 1002ce8:	e243308c 	sub	r3, r3, #140	; 0x8c
 1002cec:	e5d33000 	ldrb	r3, [r3]
 1002cf0:	e3530002 	cmp	r3, #2
 1002cf4:	0a00002e 	beq	1002db4 <alt_mmu_va_space_create+0x22c>
        {
            uint32_t desc;
            ALT_MMU_MEM_REGION_t mem_region;
            uint32_t * pagetable = (uint32_t *)(memory + allocated);
 1002cf8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002cfc:	e51b3010 	ldr	r3, [fp, #-16]
 1002d00:	e0823003 	add	r3, r2, r3
 1002d04:	e50b308c 	str	r3, [fp, #-140]	; 0xffffff74
            if (allocated + ALT_MMU_TTB2_SIZE > reqsize)
 1002d08:	e51b3010 	ldr	r3, [fp, #-16]
 1002d0c:	e2833b01 	add	r3, r3, #1024	; 0x400
 1002d10:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1002d14:	e1520003 	cmp	r2, r3
 1002d18:	2a000001 	bcs	1002d24 <alt_mmu_va_space_create+0x19c>
            {
                return ALT_E_ERROR;
 1002d1c:	e3e03000 	mvn	r3, #0
 1002d20:	ea00030b 	b	1003954 <alt_mmu_va_space_create+0xdcc>
            }
            allocated += ALT_MMU_TTB2_SIZE;
 1002d24:	e51b3010 	ldr	r3, [fp, #-16]
 1002d28:	e2833b01 	add	r3, r3, #1024	; 0x400
 1002d2c:	e50b3010 	str	r3, [fp, #-16]
            alt_mmu_ttb2_init(pagetable);
 1002d30:	e51b008c 	ldr	r0, [fp, #-140]	; 0xffffff74
 1002d34:	ebffff81 	bl	1002b40 <alt_mmu_ttb2_init>

            mem_region.attributes = ALT_MMU_ATTR_STRONG; /* Any non-FAULT will work. */
 1002d38:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002d3c:	e2433004 	sub	r3, r3, #4
 1002d40:	e3a02000 	mov	r2, #0
 1002d44:	e5432093 	strb	r2, [r3, #-147]	; 0xffffff6d
            mem_region.security   = (ALT_MMU_TTB_NS_t)vregion[k];
 1002d48:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002d4c:	e2433004 	sub	r3, r3, #4
 1002d50:	e1a02003 	mov	r2, r3
 1002d54:	e51b3008 	ldr	r3, [fp, #-8]
 1002d58:	e0823003 	add	r3, r2, r3
 1002d5c:	e243308c 	sub	r3, r3, #140	; 0x8c
 1002d60:	e5d32000 	ldrb	r2, [r3]
 1002d64:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002d68:	e2433004 	sub	r3, r3, #4
 1002d6c:	e5432090 	strb	r2, [r3, #-144]	; 0xffffff70
            desc = alt_mmu_va_space_gen_pagetable((uintptr_t)pagetable, &mem_region);
 1002d70:	e51b208c 	ldr	r2, [fp, #-140]	; 0xffffff74
 1002d74:	e24b3d42 	sub	r3, fp, #4224	; 0x1080
 1002d78:	e2433004 	sub	r3, r3, #4
 1002d7c:	e2433020 	sub	r3, r3, #32
 1002d80:	e1a01003 	mov	r1, r3
 1002d84:	e1a00002 	mov	r0, r2
 1002d88:	ebfffe3b 	bl	100267c <alt_mmu_va_space_gen_pagetable>
 1002d8c:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70

            (*ttb1)[k] = desc;
 1002d90:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002d94:	e2433004 	sub	r3, r3, #4
 1002d98:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002d9c:	e5932000 	ldr	r2, [r3]
 1002da0:	e51b3008 	ldr	r3, [fp, #-8]
 1002da4:	e1a03103 	lsl	r3, r3, #2
 1002da8:	e0823003 	add	r3, r2, r3
 1002dac:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
 1002db0:	e5832000 	str	r2, [r3]
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
 1002db4:	e51b3008 	ldr	r3, [fp, #-8]
 1002db8:	e2833001 	add	r3, r3, #1
 1002dbc:	e50b3008 	str	r3, [fp, #-8]
 1002dc0:	e51b3008 	ldr	r3, [fp, #-8]
 1002dc4:	e3530a01 	cmp	r3, #4096	; 0x1000
 1002dc8:	baffffc1 	blt	1002cd4 <alt_mmu_va_space_create+0x14c>
    }

    /* The allocated size should match the requested size. If not, this means
     * that the regions descriptor changed between calling
     * alt_mmu_va_space_storage_required() and alt_mmu_va_space_create(). */
    if (reqsize != allocated)
 1002dcc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1002dd0:	e51b3010 	ldr	r3, [fp, #-16]
 1002dd4:	e1520003 	cmp	r2, r3
 1002dd8:	0a000001 	beq	1002de4 <alt_mmu_va_space_create+0x25c>
    {
        return ALT_E_ERROR;
 1002ddc:	e3e03000 	mvn	r3, #0
 1002de0:	ea0002db 	b	1003954 <alt_mmu_va_space_create+0xdcc>
    }

    /* Iterate through all region descriptors */

    for (i = 0; i < num_mem_regions; ++i)
 1002de4:	e3a03000 	mov	r3, #0
 1002de8:	e50b300c 	str	r3, [fp, #-12]
 1002dec:	ea0002d1 	b	1003938 <alt_mmu_va_space_create+0xdb0>
    {
        uintptr_t va   = (uintptr_t)mem_regions[i].va;
 1002df0:	e51b200c 	ldr	r2, [fp, #-12]
 1002df4:	e1a03002 	mov	r3, r2
 1002df8:	e1a03103 	lsl	r3, r3, #2
 1002dfc:	e0833002 	add	r3, r3, r2
 1002e00:	e1a03103 	lsl	r3, r3, #2
 1002e04:	e1a02003 	mov	r2, r3
 1002e08:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002e0c:	e2433004 	sub	r3, r3, #4
 1002e10:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002e14:	e0833002 	add	r3, r3, r2
 1002e18:	e5933000 	ldr	r3, [r3]
 1002e1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        uintptr_t pa   = (uintptr_t)mem_regions[i].pa;
 1002e20:	e51b200c 	ldr	r2, [fp, #-12]
 1002e24:	e1a03002 	mov	r3, r2
 1002e28:	e1a03103 	lsl	r3, r3, #2
 1002e2c:	e0833002 	add	r3, r3, r2
 1002e30:	e1a03103 	lsl	r3, r3, #2
 1002e34:	e1a02003 	mov	r2, r3
 1002e38:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002e3c:	e2433004 	sub	r3, r3, #4
 1002e40:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002e44:	e0833002 	add	r3, r3, r2
 1002e48:	e5933004 	ldr	r3, [r3, #4]
 1002e4c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        uint32_t  size = mem_regions[i].size;
 1002e50:	e51b200c 	ldr	r2, [fp, #-12]
 1002e54:	e1a03002 	mov	r3, r2
 1002e58:	e1a03103 	lsl	r3, r3, #2
 1002e5c:	e0833002 	add	r3, r3, r2
 1002e60:	e1a03103 	lsl	r3, r3, #2
 1002e64:	e1a02003 	mov	r2, r3
 1002e68:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002e6c:	e2433004 	sub	r3, r3, #4
 1002e70:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002e74:	e0833002 	add	r3, r3, r2
 1002e78:	e5933008 	ldr	r3, [r3, #8]
 1002e7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        uint32_t j;

        /* Determine the va/pa relative alignment: 4 KiB, 64 KiB, 1 MiB, 16 MiB */

        uint32_t alignopt[] =
 1002e80:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002e84:	e2433004 	sub	r3, r3, #4
 1002e88:	e1a02003 	mov	r2, r3
 1002e8c:	e3053680 	movw	r3, #22144	; 0x5680
 1002e90:	e3403100 	movt	r3, #256	; 0x100
 1002e94:	e242c0ac 	sub	ip, r2, #172	; 0xac
 1002e98:	e8930007 	ldm	r3, {r0, r1, r2}
 1002e9c:	e88c0007 	stm	ip, {r0, r1, r2}
            ALT_MMU_SECTION_SIZE,
            ALT_MMU_LARGE_PAGE_SIZE
        };

        /* Relative alignment of [va] and [pa]. */
        uint32_t relalign = ALT_MMU_SMALL_PAGE_SIZE;
 1002ea0:	e3a03a01 	mov	r3, #4096	; 0x1000
 1002ea4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

        for (j = 0; j < ARRAY_COUNT(alignopt); ++j)
 1002ea8:	e3a03000 	mov	r3, #0
 1002eac:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1002eb0:	ea000019 	b	1002f1c <alt_mmu_va_space_create+0x394>
        {
            if ( (va & (alignopt[j] - 1)) ==
 1002eb4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1002eb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002ebc:	e0222003 	eor	r2, r2, r3
 1002ec0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002ec4:	e2433004 	sub	r3, r3, #4
 1002ec8:	e1a01003 	mov	r1, r3
 1002ecc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002ed0:	e1a03103 	lsl	r3, r3, #2
 1002ed4:	e0813003 	add	r3, r1, r3
 1002ed8:	e51330ac 	ldr	r3, [r3, #-172]	; 0xffffff54
 1002edc:	e2433001 	sub	r3, r3, #1
 1002ee0:	e0033002 	and	r3, r3, r2
 1002ee4:	e3530000 	cmp	r3, #0
 1002ee8:	1a000008 	bne	1002f10 <alt_mmu_va_space_create+0x388>
                 (pa & (alignopt[j] - 1)) )
            {
                relalign = alignopt[j];
 1002eec:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002ef0:	e2433004 	sub	r3, r3, #4
 1002ef4:	e1a02003 	mov	r2, r3
 1002ef8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002efc:	e1a03103 	lsl	r3, r3, #2
 1002f00:	e0823003 	add	r3, r2, r3
 1002f04:	e51330ac 	ldr	r3, [r3, #-172]	; 0xffffff54
 1002f08:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                break;
 1002f0c:	ea000005 	b	1002f28 <alt_mmu_va_space_create+0x3a0>
        for (j = 0; j < ARRAY_COUNT(alignopt); ++j)
 1002f10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002f14:	e2833001 	add	r3, r3, #1
 1002f18:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1002f1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002f20:	e3530002 	cmp	r3, #2
 1002f24:	9affffe2 	bls	1002eb4 <alt_mmu_va_space_create+0x32c>
        }

        /* Page the 1 MiB unaligned segment of [va]. Areas requiring page tables
         * should already have those page tables created previously in this
         * function. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
 1002f28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002f2c:	e7f33053 	ubfx	r3, r3, #0, #20
 1002f30:	e3530000 	cmp	r3, #0
 1002f34:	0a00010f 	beq	1003378 <alt_mmu_va_space_create+0x7f0>
        {
            /* This is the size of the memory segment after paging which will cause the [va] to align to a 1 MiB,
             * or up to the size of the region being processed, whichever is smaller. */
            uint32_t segsize = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
 1002f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002f3c:	e7f33053 	ubfx	r3, r3, #0, #20
 1002f40:	e2633601 	rsb	r3, r3, #1048576	; 0x100000
 1002f44:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 1002f48:	e1520003 	cmp	r2, r3
 1002f4c:	31a03002 	movcc	r3, r2
 1002f50:	21a03003 	movcs	r3, r3
 1002f54:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
 1002f58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1002f5c:	e3530801 	cmp	r3, #65536	; 0x10000
 1002f60:	3a000101 	bcc	100336c <alt_mmu_va_space_create+0x7e4>
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
 1002f64:	ea000038 	b	100304c <alt_mmu_va_space_create+0x4c4>
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1002f68:	e51b200c 	ldr	r2, [fp, #-12]
 1002f6c:	e1a03002 	mov	r3, r2
 1002f70:	e1a03103 	lsl	r3, r3, #2
 1002f74:	e0833002 	add	r3, r3, r2
 1002f78:	e1a03103 	lsl	r3, r3, #2
 1002f7c:	e1a02003 	mov	r2, r3
 1002f80:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002f84:	e2433004 	sub	r3, r3, #4
 1002f88:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002f8c:	e0833002 	add	r3, r3, r2
 1002f90:	e1a01003 	mov	r1, r3
 1002f94:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1002f98:	ebfffe61 	bl	1002924 <alt_mmu_va_space_gen_smallpage>
 1002f9c:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1002fa0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002fa4:	e2433004 	sub	r3, r3, #4
 1002fa8:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002fac:	e5932000 	ldr	r2, [r3]
 1002fb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002fb4:	e1a03a23 	lsr	r3, r3, #20
 1002fb8:	e1a03103 	lsl	r3, r3, #2
 1002fbc:	e0823003 	add	r3, r2, r3
 1002fc0:	e5933000 	ldr	r3, [r3]
 1002fc4:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1002fc8:	e3c33003 	bic	r3, r3, #3
 1002fcc:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1002fd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002fd4:	e1a03623 	lsr	r3, r3, #12
 1002fd8:	e6ef3073 	uxtb	r3, r3
 1002fdc:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8

                    /* Detect if an existing non-fault region has already been created.
                     * We cannot detect if a fault region is requested and a region description is already a fault,
                     * which it is by default. */
                    if (pagetable[ptindex] != 0)
 1002fe0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
 1002fe4:	e1a03103 	lsl	r3, r3, #2
 1002fe8:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
 1002fec:	e0823003 	add	r3, r2, r3
 1002ff0:	e5933000 	ldr	r3, [r3]
 1002ff4:	e3530000 	cmp	r3, #0
 1002ff8:	0a000001 	beq	1003004 <alt_mmu_va_space_create+0x47c>
                    {
                        return ALT_E_ERROR;
 1002ffc:	e3e03000 	mvn	r3, #0
 1003000:	ea000253 	b	1003954 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 1003004:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
 1003008:	e1a03103 	lsl	r3, r3, #2
 100300c:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
 1003010:	e0823003 	add	r3, r2, r3
 1003014:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
 1003018:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 100301c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003020:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003024:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 1003028:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100302c:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003030:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 1003034:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003038:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 100303c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 1003040:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003044:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003048:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
 100304c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003050:	e6ff3073 	uxth	r3, r3
 1003054:	e3530000 	cmp	r3, #0
 1003058:	0a000049 	beq	1003184 <alt_mmu_va_space_create+0x5fc>
 100305c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003060:	e3530a01 	cmp	r3, #4096	; 0x1000
 1003064:	2affffbf 	bcs	1002f68 <alt_mmu_va_space_create+0x3e0>
                }

                /* Use large pages for the rest of the 64 KiB aligned areas. */
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
 1003068:	ea000045 	b	1003184 <alt_mmu_va_space_create+0x5fc>
                {
                    uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);
 100306c:	e51b200c 	ldr	r2, [fp, #-12]
 1003070:	e1a03002 	mov	r3, r2
 1003074:	e1a03103 	lsl	r3, r3, #2
 1003078:	e0833002 	add	r3, r3, r2
 100307c:	e1a03103 	lsl	r3, r3, #2
 1003080:	e1a02003 	mov	r2, r3
 1003084:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003088:	e2433004 	sub	r3, r3, #4
 100308c:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1003090:	e0833002 	add	r3, r3, r2
 1003094:	e1a01003 	mov	r1, r3
 1003098:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 100309c:	ebfffe63 	bl	1002a30 <alt_mmu_va_space_gen_largepage>
 10030a0:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10030a4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10030a8:	e2433004 	sub	r3, r3, #4
 10030ac:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10030b0:	e5932000 	ldr	r2, [r3]
 10030b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10030b8:	e1a03a23 	lsr	r3, r3, #20
 10030bc:	e1a03103 	lsl	r3, r3, #2
 10030c0:	e0823003 	add	r3, r2, r3
 10030c4:	e5933000 	ldr	r3, [r3]
 10030c8:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10030cc:	e3c33003 	bic	r3, r3, #3
 10030d0:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 10030d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10030d8:	e1a03623 	lsr	r3, r3, #12
 10030dc:	e6ef3073 	uxtb	r3, r3
 10030e0:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0

                    for (j = 0; j < 16; ++j)
 10030e4:	e3a03000 	mov	r3, #0
 10030e8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 10030ec:	ea000015 	b	1003148 <alt_mmu_va_space_create+0x5c0>
                    {
                        if (pagetable[ptindex + j] != 0)
 10030f0:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
 10030f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10030f8:	e0823003 	add	r3, r2, r3
 10030fc:	e1a03103 	lsl	r3, r3, #2
 1003100:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
 1003104:	e0823003 	add	r3, r2, r3
 1003108:	e5933000 	ldr	r3, [r3]
 100310c:	e3530000 	cmp	r3, #0
 1003110:	0a000001 	beq	100311c <alt_mmu_va_space_create+0x594>
                        {
                            return ALT_E_ERROR;
 1003114:	e3e03000 	mvn	r3, #0
 1003118:	ea00020d 	b	1003954 <alt_mmu_va_space_create+0xdcc>
                        }

                        pagetable[ptindex + j] = desc;
 100311c:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
 1003120:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003124:	e0823003 	add	r3, r2, r3
 1003128:	e1a03103 	lsl	r3, r3, #2
 100312c:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
 1003130:	e0823003 	add	r3, r2, r3
 1003134:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1003138:	e5832000 	str	r2, [r3]
                    for (j = 0; j < 16; ++j)
 100313c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003140:	e2833001 	add	r3, r3, #1
 1003144:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003148:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100314c:	e353000f 	cmp	r3, #15
 1003150:	9affffe6 	bls	10030f0 <alt_mmu_va_space_create+0x568>
                    }

                    va      += ALT_MMU_LARGE_PAGE_SIZE;
 1003154:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003158:	e2833801 	add	r3, r3, #65536	; 0x10000
 100315c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_LARGE_PAGE_SIZE;
 1003160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003164:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003168:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_LARGE_PAGE_SIZE;
 100316c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003170:	e2433801 	sub	r3, r3, #65536	; 0x10000
 1003174:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
 1003178:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100317c:	e2433801 	sub	r3, r3, #65536	; 0x10000
 1003180:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
 1003184:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003188:	e3530801 	cmp	r3, #65536	; 0x10000
 100318c:	2affffb6 	bcs	100306c <alt_mmu_va_space_create+0x4e4>
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 1003190:	ea000038 	b	1003278 <alt_mmu_va_space_create+0x6f0>
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1003194:	e51b200c 	ldr	r2, [fp, #-12]
 1003198:	e1a03002 	mov	r3, r2
 100319c:	e1a03103 	lsl	r3, r3, #2
 10031a0:	e0833002 	add	r3, r3, r2
 10031a4:	e1a03103 	lsl	r3, r3, #2
 10031a8:	e1a02003 	mov	r2, r3
 10031ac:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10031b0:	e2433004 	sub	r3, r3, #4
 10031b4:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10031b8:	e0833002 	add	r3, r3, r2
 10031bc:	e1a01003 	mov	r1, r3
 10031c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10031c4:	ebfffdd6 	bl	1002924 <alt_mmu_va_space_gen_smallpage>
 10031c8:	e50b004c 	str	r0, [fp, #-76]	; 0xffffffb4

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10031cc:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10031d0:	e2433004 	sub	r3, r3, #4
 10031d4:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10031d8:	e5932000 	ldr	r2, [r3]
 10031dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10031e0:	e1a03a23 	lsr	r3, r3, #20
 10031e4:	e1a03103 	lsl	r3, r3, #2
 10031e8:	e0823003 	add	r3, r2, r3
 10031ec:	e5933000 	ldr	r3, [r3]
 10031f0:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10031f4:	e3c33003 	bic	r3, r3, #3
 10031f8:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 10031fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003200:	e1a03623 	lsr	r3, r3, #12
 1003204:	e6ef3073 	uxtb	r3, r3
 1003208:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac

                    if (pagetable[ptindex] != 0)
 100320c:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
 1003210:	e1a03103 	lsl	r3, r3, #2
 1003214:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
 1003218:	e0823003 	add	r3, r2, r3
 100321c:	e5933000 	ldr	r3, [r3]
 1003220:	e3530000 	cmp	r3, #0
 1003224:	0a000001 	beq	1003230 <alt_mmu_va_space_create+0x6a8>
                    {
                        return ALT_E_ERROR;
 1003228:	e3e03000 	mvn	r3, #0
 100322c:	ea0001c8 	b	1003954 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 1003230:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
 1003234:	e1a03103 	lsl	r3, r3, #2
 1003238:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
 100323c:	e0823003 	add	r3, r2, r3
 1003240:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
 1003244:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 1003248:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100324c:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003250:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 1003254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003258:	e2833a01 	add	r3, r3, #4096	; 0x1000
 100325c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 1003260:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003264:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003268:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 100326c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003270:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003274:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 1003278:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 100327c:	e3530a01 	cmp	r3, #4096	; 0x1000
 1003280:	2affffc3 	bcs	1003194 <alt_mmu_va_space_create+0x60c>
 1003284:	ea00003b 	b	1003378 <alt_mmu_va_space_create+0x7f0>
            else
            {
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1003288:	e51b200c 	ldr	r2, [fp, #-12]
 100328c:	e1a03002 	mov	r3, r2
 1003290:	e1a03103 	lsl	r3, r3, #2
 1003294:	e0833002 	add	r3, r3, r2
 1003298:	e1a03103 	lsl	r3, r3, #2
 100329c:	e1a02003 	mov	r2, r3
 10032a0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10032a4:	e2433004 	sub	r3, r3, #4
 10032a8:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10032ac:	e0833002 	add	r3, r3, r2
 10032b0:	e1a01003 	mov	r1, r3
 10032b4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10032b8:	ebfffd99 	bl	1002924 <alt_mmu_va_space_gen_smallpage>
 10032bc:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10032c0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10032c4:	e2433004 	sub	r3, r3, #4
 10032c8:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10032cc:	e5932000 	ldr	r2, [r3]
 10032d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10032d4:	e1a03a23 	lsr	r3, r3, #20
 10032d8:	e1a03103 	lsl	r3, r3, #2
 10032dc:	e0823003 	add	r3, r2, r3
 10032e0:	e5933000 	ldr	r3, [r3]
 10032e4:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10032e8:	e3c33003 	bic	r3, r3, #3
 10032ec:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 10032f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10032f4:	e1a03623 	lsr	r3, r3, #12
 10032f8:	e6ef3073 	uxtb	r3, r3
 10032fc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

                    if (pagetable[ptindex] != 0)
 1003300:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 1003304:	e1a03103 	lsl	r3, r3, #2
 1003308:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 100330c:	e0823003 	add	r3, r2, r3
 1003310:	e5933000 	ldr	r3, [r3]
 1003314:	e3530000 	cmp	r3, #0
 1003318:	0a000001 	beq	1003324 <alt_mmu_va_space_create+0x79c>
                    {
                        return ALT_E_ERROR;
 100331c:	e3e03000 	mvn	r3, #0
 1003320:	ea00018b 	b	1003954 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 1003324:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 1003328:	e1a03103 	lsl	r3, r3, #2
 100332c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 1003330:	e0823003 	add	r3, r2, r3
 1003334:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
 1003338:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 100333c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003340:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003344:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 1003348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100334c:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003350:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 1003354:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003358:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 100335c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 1003360:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003364:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003368:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 100336c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003370:	e3530a01 	cmp	r3, #4096	; 0x1000
 1003374:	2affffc3 	bcs	1003288 <alt_mmu_va_space_create+0x700>
        /* If [va] and [pa] are relatively 1 MiB aligned and the size remaining
         * to be described is greater than 1 MiB, use sections. */

        /* Otherwise use pagetables for everything remaining. */

        if (   (relalign >= ALT_MMU_SUPERSECTION_SIZE)
 1003378:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 100337c:	e3530401 	cmp	r3, #16777216	; 0x1000000
 1003380:	3a0000aa 	bcc	1003630 <alt_mmu_va_space_create+0xaa8>
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
 1003384:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003388:	e3530401 	cmp	r3, #16777216	; 0x1000000
 100338c:	3a0000a7 	bcc	1003630 <alt_mmu_va_space_create+0xaa8>
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
 1003390:	ea00002d 	b	100344c <alt_mmu_va_space_create+0x8c4>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 1003394:	e51b200c 	ldr	r2, [fp, #-12]
 1003398:	e1a03002 	mov	r3, r2
 100339c:	e1a03103 	lsl	r3, r3, #2
 10033a0:	e0833002 	add	r3, r3, r2
 10033a4:	e1a03103 	lsl	r3, r3, #2
 10033a8:	e1a02003 	mov	r2, r3
 10033ac:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10033b0:	e2433004 	sub	r3, r3, #4
 10033b4:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10033b8:	e0833002 	add	r3, r3, r2
 10033bc:	e1a01003 	mov	r1, r3
 10033c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10033c4:	ebfffcc4 	bl	10026dc <alt_mmu_va_space_gen_section>
 10033c8:	e50b0064 	str	r0, [fp, #-100]	; 0xffffff9c

                if ((*ttb1)[va >> 20] != 0)
 10033cc:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10033d0:	e2433004 	sub	r3, r3, #4
 10033d4:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10033d8:	e5932000 	ldr	r2, [r3]
 10033dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10033e0:	e1a03a23 	lsr	r3, r3, #20
 10033e4:	e1a03103 	lsl	r3, r3, #2
 10033e8:	e0823003 	add	r3, r2, r3
 10033ec:	e5933000 	ldr	r3, [r3]
 10033f0:	e3530000 	cmp	r3, #0
 10033f4:	0a000001 	beq	1003400 <alt_mmu_va_space_create+0x878>
                {
                    return ALT_E_ERROR;
 10033f8:	e3e03000 	mvn	r3, #0
 10033fc:	ea000154 	b	1003954 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 1003400:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003404:	e2433004 	sub	r3, r3, #4
 1003408:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 100340c:	e5932000 	ldr	r2, [r3]
 1003410:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003414:	e1a03a23 	lsr	r3, r3, #20
 1003418:	e1a03103 	lsl	r3, r3, #2
 100341c:	e0823003 	add	r3, r2, r3
 1003420:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
 1003424:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 1003428:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100342c:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1003430:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 1003434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003438:	e2833601 	add	r3, r3, #1048576	; 0x100000
 100343c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 1003440:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003444:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1003448:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
 100344c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003450:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 1003454:	e3530000 	cmp	r3, #0
 1003458:	0a00003e 	beq	1003558 <alt_mmu_va_space_create+0x9d0>
 100345c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003460:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003464:	2affffca 	bcs	1003394 <alt_mmu_va_space_create+0x80c>
            }

            /* Use supersections for the 16 MiB aligned areas */
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
 1003468:	ea00003a 	b	1003558 <alt_mmu_va_space_create+0x9d0>
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);
 100346c:	e51b200c 	ldr	r2, [fp, #-12]
 1003470:	e1a03002 	mov	r3, r2
 1003474:	e1a03103 	lsl	r3, r3, #2
 1003478:	e0833002 	add	r3, r3, r2
 100347c:	e1a03103 	lsl	r3, r3, #2
 1003480:	e1a02003 	mov	r2, r3
 1003484:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003488:	e2433004 	sub	r3, r3, #4
 100348c:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1003490:	e0833002 	add	r3, r3, r2
 1003494:	e1a01003 	mov	r1, r3
 1003498:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 100349c:	ebfffcd7 	bl	1002800 <alt_mmu_va_space_gen_supersection>
 10034a0:	e50b006c 	str	r0, [fp, #-108]	; 0xffffff94

                for (j = 0; j < 16; ++j)
 10034a4:	e3a03000 	mov	r3, #0
 10034a8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 10034ac:	ea00001d 	b	1003528 <alt_mmu_va_space_create+0x9a0>
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
 10034b0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10034b4:	e2433004 	sub	r3, r3, #4
 10034b8:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10034bc:	e5932000 	ldr	r2, [r3]
 10034c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10034c4:	e1a01a23 	lsr	r1, r3, #20
 10034c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10034cc:	e0813003 	add	r3, r1, r3
 10034d0:	e1a03103 	lsl	r3, r3, #2
 10034d4:	e0823003 	add	r3, r2, r3
 10034d8:	e5933000 	ldr	r3, [r3]
 10034dc:	e3530000 	cmp	r3, #0
 10034e0:	0a000001 	beq	10034ec <alt_mmu_va_space_create+0x964>
                    {
                        return ALT_E_ERROR;
 10034e4:	e3e03000 	mvn	r3, #0
 10034e8:	ea000119 	b	1003954 <alt_mmu_va_space_create+0xdcc>
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
 10034ec:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10034f0:	e2433004 	sub	r3, r3, #4
 10034f4:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10034f8:	e5932000 	ldr	r2, [r3]
 10034fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003500:	e1a01a23 	lsr	r1, r3, #20
 1003504:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003508:	e0813003 	add	r3, r1, r3
 100350c:	e1a03103 	lsl	r3, r3, #2
 1003510:	e0823003 	add	r3, r2, r3
 1003514:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
 1003518:	e5832000 	str	r2, [r3]
                for (j = 0; j < 16; ++j)
 100351c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003520:	e2833001 	add	r3, r3, #1
 1003524:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003528:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100352c:	e353000f 	cmp	r3, #15
 1003530:	9affffde 	bls	10034b0 <alt_mmu_va_space_create+0x928>
                }

                va   += ALT_MMU_SUPERSECTION_SIZE;
 1003534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003538:	e2833401 	add	r3, r3, #16777216	; 0x1000000
 100353c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SUPERSECTION_SIZE;
 1003540:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003544:	e2833401 	add	r3, r3, #16777216	; 0x1000000
 1003548:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SUPERSECTION_SIZE;
 100354c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003550:	e28334ff 	add	r3, r3, #-16777216	; 0xff000000
 1003554:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
 1003558:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100355c:	e3530401 	cmp	r3, #16777216	; 0x1000000
 1003560:	2affffc1 	bcs	100346c <alt_mmu_va_space_create+0x8e4>
            }

            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
 1003564:	ea00002d 	b	1003620 <alt_mmu_va_space_create+0xa98>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 1003568:	e51b200c 	ldr	r2, [fp, #-12]
 100356c:	e1a03002 	mov	r3, r2
 1003570:	e1a03103 	lsl	r3, r3, #2
 1003574:	e0833002 	add	r3, r3, r2
 1003578:	e1a03103 	lsl	r3, r3, #2
 100357c:	e1a02003 	mov	r2, r3
 1003580:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003584:	e2433004 	sub	r3, r3, #4
 1003588:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 100358c:	e0833002 	add	r3, r3, r2
 1003590:	e1a01003 	mov	r1, r3
 1003594:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003598:	ebfffc4f 	bl	10026dc <alt_mmu_va_space_gen_section>
 100359c:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98

                if ((*ttb1)[va >> 20] != 0)
 10035a0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10035a4:	e2433004 	sub	r3, r3, #4
 10035a8:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10035ac:	e5932000 	ldr	r2, [r3]
 10035b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10035b4:	e1a03a23 	lsr	r3, r3, #20
 10035b8:	e1a03103 	lsl	r3, r3, #2
 10035bc:	e0823003 	add	r3, r2, r3
 10035c0:	e5933000 	ldr	r3, [r3]
 10035c4:	e3530000 	cmp	r3, #0
 10035c8:	0a000001 	beq	10035d4 <alt_mmu_va_space_create+0xa4c>
                {
                    return ALT_E_ERROR;
 10035cc:	e3e03000 	mvn	r3, #0
 10035d0:	ea0000df 	b	1003954 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 10035d4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10035d8:	e2433004 	sub	r3, r3, #4
 10035dc:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10035e0:	e5932000 	ldr	r2, [r3]
 10035e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10035e8:	e1a03a23 	lsr	r3, r3, #20
 10035ec:	e1a03103 	lsl	r3, r3, #2
 10035f0:	e0823003 	add	r3, r2, r3
 10035f4:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
 10035f8:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 10035fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003600:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1003604:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 1003608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100360c:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1003610:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 1003614:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003618:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 100361c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SECTION_SIZE)
 1003620:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003624:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003628:	2affffce 	bcs	1003568 <alt_mmu_va_space_create+0x9e0>
        if (   (relalign >= ALT_MMU_SUPERSECTION_SIZE)
 100362c:	ea000037 	b	1003710 <alt_mmu_va_space_create+0xb88>
            }
        }
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
 1003630:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1003634:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003638:	3a000034 	bcc	1003710 <alt_mmu_va_space_create+0xb88>
                 && (size     >= ALT_MMU_SECTION_SIZE))
 100363c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003640:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003644:	3a000031 	bcc	1003710 <alt_mmu_va_space_create+0xb88>
        {
            /* No supersection possible. Use regular sections only. */

            while (size >= ALT_MMU_SECTION_SIZE)
 1003648:	ea00002d 	b	1003704 <alt_mmu_va_space_create+0xb7c>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 100364c:	e51b200c 	ldr	r2, [fp, #-12]
 1003650:	e1a03002 	mov	r3, r2
 1003654:	e1a03103 	lsl	r3, r3, #2
 1003658:	e0833002 	add	r3, r3, r2
 100365c:	e1a03103 	lsl	r3, r3, #2
 1003660:	e1a02003 	mov	r2, r3
 1003664:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003668:	e2433004 	sub	r3, r3, #4
 100366c:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1003670:	e0833002 	add	r3, r3, r2
 1003674:	e1a01003 	mov	r1, r3
 1003678:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 100367c:	ebfffc16 	bl	10026dc <alt_mmu_va_space_gen_section>
 1003680:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90

                if ((*ttb1)[va >> 20] != 0)
 1003684:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003688:	e2433004 	sub	r3, r3, #4
 100368c:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1003690:	e5932000 	ldr	r2, [r3]
 1003694:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003698:	e1a03a23 	lsr	r3, r3, #20
 100369c:	e1a03103 	lsl	r3, r3, #2
 10036a0:	e0823003 	add	r3, r2, r3
 10036a4:	e5933000 	ldr	r3, [r3]
 10036a8:	e3530000 	cmp	r3, #0
 10036ac:	0a000001 	beq	10036b8 <alt_mmu_va_space_create+0xb30>
                {
                    return ALT_E_ERROR;
 10036b0:	e3e03000 	mvn	r3, #0
 10036b4:	ea0000a6 	b	1003954 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 10036b8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10036bc:	e2433004 	sub	r3, r3, #4
 10036c0:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10036c4:	e5932000 	ldr	r2, [r3]
 10036c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10036cc:	e1a03a23 	lsr	r3, r3, #20
 10036d0:	e1a03103 	lsl	r3, r3, #2
 10036d4:	e0823003 	add	r3, r2, r3
 10036d8:	e51b2070 	ldr	r2, [fp, #-112]	; 0xffffff90
 10036dc:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 10036e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10036e4:	e2833601 	add	r3, r3, #1048576	; 0x100000
 10036e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 10036ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10036f0:	e2833601 	add	r3, r3, #1048576	; 0x100000
 10036f4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 10036f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10036fc:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1003700:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SECTION_SIZE)
 1003704:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003708:	e3530601 	cmp	r3, #1048576	; 0x100000
 100370c:	2affffce 	bcs	100364c <alt_mmu_va_space_create+0xac4>

        /* The remainder should be [va] 1 MiB aligned segment not able to use
         * sections or supersections. Mark that region as pagetable. */

        /* Use large pages if it is suitable. */
        if ((relalign >= ALT_MMU_LARGE_PAGE_SIZE) && (size >= ALT_MMU_LARGE_PAGE_SIZE))
 1003710:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1003714:	e3530801 	cmp	r3, #65536	; 0x10000
 1003718:	3a000080 	bcc	1003920 <alt_mmu_va_space_create+0xd98>
 100371c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003720:	e3530801 	cmp	r3, #65536	; 0x10000
 1003724:	3a00007d 	bcc	1003920 <alt_mmu_va_space_create+0xd98>
        {
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
 1003728:	ea000042 	b	1003838 <alt_mmu_va_space_create+0xcb0>
            {
                uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);
 100372c:	e51b200c 	ldr	r2, [fp, #-12]
 1003730:	e1a03002 	mov	r3, r2
 1003734:	e1a03103 	lsl	r3, r3, #2
 1003738:	e0833002 	add	r3, r3, r2
 100373c:	e1a03103 	lsl	r3, r3, #2
 1003740:	e1a02003 	mov	r2, r3
 1003744:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003748:	e2433004 	sub	r3, r3, #4
 100374c:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1003750:	e0833002 	add	r3, r3, r2
 1003754:	e1a01003 	mov	r1, r3
 1003758:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 100375c:	ebfffcb3 	bl	1002a30 <alt_mmu_va_space_gen_largepage>
 1003760:	e50b0074 	str	r0, [fp, #-116]	; 0xffffff8c

                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1003764:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003768:	e2433004 	sub	r3, r3, #4
 100376c:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1003770:	e5932000 	ldr	r2, [r3]
 1003774:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003778:	e1a03a23 	lsr	r3, r3, #20
 100377c:	e1a03103 	lsl	r3, r3, #2
 1003780:	e0823003 	add	r3, r2, r3
 1003784:	e5933000 	ldr	r3, [r3]
 1003788:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 100378c:	e3c33003 	bic	r3, r3, #3
 1003790:	e50b3078 	str	r3, [fp, #-120]	; 0xffffff88
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1003794:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003798:	e1a03623 	lsr	r3, r3, #12
 100379c:	e6ef3073 	uxtb	r3, r3
 10037a0:	e50b307c 	str	r3, [fp, #-124]	; 0xffffff84

                for (j = 0; j < 16; ++j)
 10037a4:	e3a03000 	mov	r3, #0
 10037a8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 10037ac:	ea000015 	b	1003808 <alt_mmu_va_space_create+0xc80>
                {
                    if (pagetable[ptindex + j] != 0)
 10037b0:	e51b207c 	ldr	r2, [fp, #-124]	; 0xffffff84
 10037b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10037b8:	e0823003 	add	r3, r2, r3
 10037bc:	e1a03103 	lsl	r3, r3, #2
 10037c0:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
 10037c4:	e0823003 	add	r3, r2, r3
 10037c8:	e5933000 	ldr	r3, [r3]
 10037cc:	e3530000 	cmp	r3, #0
 10037d0:	0a000001 	beq	10037dc <alt_mmu_va_space_create+0xc54>
                    {
                        return ALT_E_ERROR;
 10037d4:	e3e03000 	mvn	r3, #0
 10037d8:	ea00005d 	b	1003954 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex + j] = desc;
 10037dc:	e51b207c 	ldr	r2, [fp, #-124]	; 0xffffff84
 10037e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10037e4:	e0823003 	add	r3, r2, r3
 10037e8:	e1a03103 	lsl	r3, r3, #2
 10037ec:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
 10037f0:	e0823003 	add	r3, r2, r3
 10037f4:	e51b2074 	ldr	r2, [fp, #-116]	; 0xffffff8c
 10037f8:	e5832000 	str	r2, [r3]
                for (j = 0; j < 16; ++j)
 10037fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003800:	e2833001 	add	r3, r3, #1
 1003804:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003808:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100380c:	e353000f 	cmp	r3, #15
 1003810:	9affffe6 	bls	10037b0 <alt_mmu_va_space_create+0xc28>
                }

                va   += ALT_MMU_LARGE_PAGE_SIZE;
 1003814:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003818:	e2833801 	add	r3, r3, #65536	; 0x10000
 100381c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
 1003820:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003824:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003828:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_LARGE_PAGE_SIZE;
 100382c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003830:	e2433801 	sub	r3, r3, #65536	; 0x10000
 1003834:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
 1003838:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100383c:	e3530801 	cmp	r3, #65536	; 0x10000
 1003840:	2affffb9 	bcs	100372c <alt_mmu_va_space_create+0xba4>
            }
        }

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
 1003844:	ea000035 	b	1003920 <alt_mmu_va_space_create+0xd98>
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1003848:	e51b200c 	ldr	r2, [fp, #-12]
 100384c:	e1a03002 	mov	r3, r2
 1003850:	e1a03103 	lsl	r3, r3, #2
 1003854:	e0833002 	add	r3, r3, r2
 1003858:	e1a03103 	lsl	r3, r3, #2
 100385c:	e1a02003 	mov	r2, r3
 1003860:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003864:	e2433004 	sub	r3, r3, #4
 1003868:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 100386c:	e0833002 	add	r3, r3, r2
 1003870:	e1a01003 	mov	r1, r3
 1003874:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003878:	ebfffc29 	bl	1002924 <alt_mmu_va_space_gen_smallpage>
 100387c:	e50b0080 	str	r0, [fp, #-128]	; 0xffffff80

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1003880:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003884:	e2433004 	sub	r3, r3, #4
 1003888:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 100388c:	e5932000 	ldr	r2, [r3]
 1003890:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003894:	e1a03a23 	lsr	r3, r3, #20
 1003898:	e1a03103 	lsl	r3, r3, #2
 100389c:	e0823003 	add	r3, r2, r3
 10038a0:	e5933000 	ldr	r3, [r3]
 10038a4:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10038a8:	e3c33003 	bic	r3, r3, #3
 10038ac:	e50b3084 	str	r3, [fp, #-132]	; 0xffffff7c
            uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 10038b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10038b4:	e1a03623 	lsr	r3, r3, #12
 10038b8:	e6ef3073 	uxtb	r3, r3
 10038bc:	e50b3088 	str	r3, [fp, #-136]	; 0xffffff78

            if (pagetable[ptindex] != 0)
 10038c0:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
 10038c4:	e1a03103 	lsl	r3, r3, #2
 10038c8:	e51b2084 	ldr	r2, [fp, #-132]	; 0xffffff7c
 10038cc:	e0823003 	add	r3, r2, r3
 10038d0:	e5933000 	ldr	r3, [r3]
 10038d4:	e3530000 	cmp	r3, #0
 10038d8:	0a000001 	beq	10038e4 <alt_mmu_va_space_create+0xd5c>
            {
                return ALT_E_ERROR;
 10038dc:	e3e03000 	mvn	r3, #0
 10038e0:	ea00001b 	b	1003954 <alt_mmu_va_space_create+0xdcc>
            }

            pagetable[ptindex] = desc;
 10038e4:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
 10038e8:	e1a03103 	lsl	r3, r3, #2
 10038ec:	e51b2084 	ldr	r2, [fp, #-132]	; 0xffffff7c
 10038f0:	e0823003 	add	r3, r2, r3
 10038f4:	e51b2080 	ldr	r2, [fp, #-128]	; 0xffffff80
 10038f8:	e5832000 	str	r2, [r3]

            va   += ALT_MMU_SMALL_PAGE_SIZE;
 10038fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003900:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003904:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            pa   += ALT_MMU_SMALL_PAGE_SIZE;
 1003908:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100390c:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003910:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            size -= ALT_MMU_SMALL_PAGE_SIZE;
 1003914:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003918:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 100391c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
 1003920:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003924:	e3530a01 	cmp	r3, #4096	; 0x1000
 1003928:	2affffc6 	bcs	1003848 <alt_mmu_va_space_create+0xcc0>
    for (i = 0; i < num_mem_regions; ++i)
 100392c:	e51b300c 	ldr	r3, [fp, #-12]
 1003930:	e2833001 	add	r3, r3, #1
 1003934:	e50b300c 	str	r3, [fp, #-12]
 1003938:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 100393c:	e2433004 	sub	r3, r3, #4
 1003940:	e51b200c 	ldr	r2, [fp, #-12]
 1003944:	e51330bc 	ldr	r3, [r3, #-188]	; 0xffffff44
 1003948:	e1520003 	cmp	r2, r3
 100394c:	3afffd27 	bcc	1002df0 <alt_mmu_va_space_create+0x268>
        }

    } /* for (size_t i = 0; i < num_mem_regions; ++i) */

    return ALT_E_SUCCESS;
 1003950:	e3a03000 	mov	r3, #0
}
 1003954:	e1a00003 	mov	r0, r3
 1003958:	e24bd004 	sub	sp, fp, #4
 100395c:	e8bd8800 	pop	{fp, pc}

01003960 <alt_mmu_va_space_enable>:

ALT_STATUS_CODE alt_mmu_va_space_enable(const uint32_t * ttb1)
{
 1003960:	e92d4800 	push	{fp, lr}
 1003964:	e28db004 	add	fp, sp, #4
 1003968:	e24dd020 	sub	sp, sp, #32
 100396c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
 1003970:	e3a03000 	mov	r3, #0
 1003974:	e50b3008 	str	r3, [fp, #-8]

    /* Set TTBCR to use N=0 */
    if (status == ALT_E_SUCCESS)
 1003978:	e51b3008 	ldr	r3, [fp, #-8]
 100397c:	e3530000 	cmp	r3, #0
 1003980:	1a00000b 	bne	10039b4 <alt_mmu_va_space_enable+0x54>
    {
        status = alt_mmu_TTBCR_set(true,
 1003984:	e3a02000 	mov	r2, #0
 1003988:	e3a01001 	mov	r1, #1
 100398c:	e3a00001 	mov	r0, #1
 1003990:	ebfff9c9 	bl	10020bc <alt_mmu_TTBCR_set>
 1003994:	e50b0008 	str	r0, [fp, #-8]
                                   true,
                                   0);
        if (status != ALT_E_SUCCESS)
 1003998:	e51b3008 	ldr	r3, [fp, #-8]
 100399c:	e3530000 	cmp	r3, #0
 10039a0:	0a000003 	beq	10039b4 <alt_mmu_va_space_enable+0x54>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 10039a4:	e3a01d15 	mov	r1, #1344	; 0x540
 10039a8:	e305068c 	movw	r0, #22156	; 0x568c
 10039ac:	e3400100 	movt	r0, #256	; 0x100
 10039b0:	ebfff942 	bl	1001ec0 <null_printf>
        }
    }

    /* Set TTBR0 to use ttb1 */

    if (status == ALT_E_SUCCESS)
 10039b4:	e51b3008 	ldr	r3, [fp, #-8]
 10039b8:	e3530000 	cmp	r3, #0
 10039bc:	1a000009 	bne	10039e8 <alt_mmu_va_space_enable+0x88>
    {
        status = alt_mmu_TTBR0_set(ttb1);
 10039c0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 10039c4:	ebfff984 	bl	1001fdc <alt_mmu_TTBR0_set>
 10039c8:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 10039cc:	e51b3008 	ldr	r3, [fp, #-8]
 10039d0:	e3530000 	cmp	r3, #0
 10039d4:	0a000003 	beq	10039e8 <alt_mmu_va_space_enable+0x88>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 10039d8:	e300154b 	movw	r1, #1355	; 0x54b
 10039dc:	e305068c 	movw	r0, #22156	; 0x568c
 10039e0:	e3400100 	movt	r0, #256	; 0x100
 10039e4:	ebfff935 	bl	1001ec0 <null_printf>
        }
    }

    /* Configure DACRs to be client domain. */

    if (status == ALT_E_SUCCESS)
 10039e8:	e51b3008 	ldr	r3, [fp, #-8]
 10039ec:	e3530000 	cmp	r3, #0
 10039f0:	1a000019 	bne	1003a5c <alt_mmu_va_space_enable+0xfc>
    {
        int i;
        ALT_MMU_DAP_t domain_ap[16];
        for (i = 0; i < 16; ++i)
 10039f4:	e3a03000 	mov	r3, #0
 10039f8:	e50b300c 	str	r3, [fp, #-12]
 10039fc:	ea000007 	b	1003a20 <alt_mmu_va_space_enable+0xc0>
        {
            domain_ap[i] = ALT_MMU_DAP_CLIENT;
 1003a00:	e24b201c 	sub	r2, fp, #28
 1003a04:	e51b300c 	ldr	r3, [fp, #-12]
 1003a08:	e0823003 	add	r3, r2, r3
 1003a0c:	e3a02001 	mov	r2, #1
 1003a10:	e5c32000 	strb	r2, [r3]
        for (i = 0; i < 16; ++i)
 1003a14:	e51b300c 	ldr	r3, [fp, #-12]
 1003a18:	e2833001 	add	r3, r3, #1
 1003a1c:	e50b300c 	str	r3, [fp, #-12]
 1003a20:	e51b300c 	ldr	r3, [fp, #-12]
 1003a24:	e353000f 	cmp	r3, #15
 1003a28:	dafffff4 	ble	1003a00 <alt_mmu_va_space_enable+0xa0>
        }

        status = alt_mmu_DACR_set(domain_ap, 16);
 1003a2c:	e24b301c 	sub	r3, fp, #28
 1003a30:	e3a01010 	mov	r1, #16
 1003a34:	e1a00003 	mov	r0, r3
 1003a38:	ebfff9cc 	bl	1002170 <alt_mmu_DACR_set>
 1003a3c:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 1003a40:	e51b3008 	ldr	r3, [fp, #-8]
 1003a44:	e3530000 	cmp	r3, #0
 1003a48:	0a000003 	beq	1003a5c <alt_mmu_va_space_enable+0xfc>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1003a4c:	e300155d 	movw	r1, #1373	; 0x55d
 1003a50:	e305068c 	movw	r0, #22156	; 0x568c
 1003a54:	e3400100 	movt	r0, #256	; 0x100
 1003a58:	ebfff918 	bl	1001ec0 <null_printf>
        }
    }

    /* Enable MMU (implicitly invalidates TLBs) */

    if (status == ALT_E_SUCCESS)
 1003a5c:	e51b3008 	ldr	r3, [fp, #-8]
 1003a60:	e3530000 	cmp	r3, #0
 1003a64:	1a000008 	bne	1003a8c <alt_mmu_va_space_enable+0x12c>
    {
        status = alt_mmu_enable();
 1003a68:	ebfff947 	bl	1001f8c <alt_mmu_enable>
 1003a6c:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 1003a70:	e51b3008 	ldr	r3, [fp, #-8]
 1003a74:	e3530000 	cmp	r3, #0
 1003a78:	0a000003 	beq	1003a8c <alt_mmu_va_space_enable+0x12c>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1003a7c:	e3001568 	movw	r1, #1384	; 0x568
 1003a80:	e305068c 	movw	r0, #22156	; 0x568c
 1003a84:	e3400100 	movt	r0, #256	; 0x100
 1003a88:	ebfff90c 	bl	1001ec0 <null_printf>
        }
    }

    return status;
 1003a8c:	e51b3008 	ldr	r3, [fp, #-8]
}
 1003a90:	e1a00003 	mov	r0, r3
 1003a94:	e24bd004 	sub	sp, fp, #4
 1003a98:	e8bd8800 	pop	{fp, pc}

01003a9c <cput>:
    * @param pinfo            ALT_PRINTF_MEM_INFO_t structure
    * @param count            var to keep track of characters written
    * @return                 None 
    */
static void cput(ALT_PRINTF_MEM_INFO_t *pinfo, int * count, char c)
{
 1003a9c:	e92d4800 	push	{fp, lr}
 1003aa0:	e28db004 	add	fp, sp, #4
 1003aa4:	e24dd010 	sub	sp, sp, #16
 1003aa8:	e50b0008 	str	r0, [fp, #-8]
 1003aac:	e50b100c 	str	r1, [fp, #-12]
 1003ab0:	e1a03002 	mov	r3, r2
 1003ab4:	e54b300d 	strb	r3, [fp, #-13]
    if (pinfo!=NULL) 
 1003ab8:	e51b3008 	ldr	r3, [fp, #-8]
 1003abc:	e3530000 	cmp	r3, #0
 1003ac0:	0a000005 	beq	1003adc <cput+0x40>
    {
      pinfo->putc_function(c,(FILE *)pinfo);
 1003ac4:	e51b3008 	ldr	r3, [fp, #-8]
 1003ac8:	e5933000 	ldr	r3, [r3]
 1003acc:	e55b200d 	ldrb	r2, [fp, #-13]
 1003ad0:	e51b1008 	ldr	r1, [fp, #-8]
 1003ad4:	e1a00002 	mov	r0, r2
 1003ad8:	e12fff33 	blx	r3
    }
    if (c!=0) *count+=1;
 1003adc:	e55b300d 	ldrb	r3, [fp, #-13]
 1003ae0:	e3530000 	cmp	r3, #0
 1003ae4:	0a000004 	beq	1003afc <cput+0x60>
 1003ae8:	e51b300c 	ldr	r3, [fp, #-12]
 1003aec:	e5933000 	ldr	r3, [r3]
 1003af0:	e2832001 	add	r2, r3, #1
 1003af4:	e51b300c 	ldr	r3, [fp, #-12]
 1003af8:	e5832000 	str	r2, [r3]
}
 1003afc:	e320f000 	nop	{0}
 1003b00:	e24bd004 	sub	sp, fp, #4
 1003b04:	e8bd8800 	pop	{fp, pc}

01003b08 <nextchar>:
    * @API Type:              Internal
    * @param index            index of character to return
    * @return                 next character from format string 
    */
static char nextchar(const char *format,int * index)
{
 1003b08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1003b0c:	e28db000 	add	fp, sp, #0
 1003b10:	e24dd014 	sub	sp, sp, #20
 1003b14:	e50b0010 	str	r0, [fp, #-16]
 1003b18:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    char c;
    
    c  = *(format + *index);
 1003b1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003b20:	e5933000 	ldr	r3, [r3]
 1003b24:	e1a02003 	mov	r2, r3
 1003b28:	e51b3010 	ldr	r3, [fp, #-16]
 1003b2c:	e0833002 	add	r3, r3, r2
 1003b30:	e5d33000 	ldrb	r3, [r3]
 1003b34:	e54b3005 	strb	r3, [fp, #-5]
    *index+=1;
 1003b38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003b3c:	e5933000 	ldr	r3, [r3]
 1003b40:	e2832001 	add	r2, r3, #1
 1003b44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003b48:	e5832000 	str	r2, [r3]
    
    return c;
 1003b4c:	e55b3005 	ldrb	r3, [fp, #-5]
}
 1003b50:	e1a00003 	mov	r0, r3
 1003b54:	e28bd000 	add	sp, fp, #0
 1003b58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1003b5c:	e12fff1e 	bx	lr

01003b60 <getdec>:
    * @param val              decimal value returned
    * @param c                current character pointed to be index
    * @return                 next character after decimal string 
    */
static char getdec(const char *format,int * index, int * val, char c)
{ 
 1003b60:	e92d4800 	push	{fp, lr}
 1003b64:	e28db004 	add	fp, sp, #4
 1003b68:	e24dd010 	sub	sp, sp, #16
 1003b6c:	e50b0008 	str	r0, [fp, #-8]
 1003b70:	e50b100c 	str	r1, [fp, #-12]
 1003b74:	e50b2010 	str	r2, [fp, #-16]
 1003b78:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   *val=0;
 1003b7c:	e51b3010 	ldr	r3, [fp, #-16]
 1003b80:	e3a02000 	mov	r2, #0
 1003b84:	e5832000 	str	r2, [r3]
   while ((c >= '0') && (c <='9'))
 1003b88:	ea000010 	b	1003bd0 <getdec+0x70>
   {
     *val=*val * 10 + (c - '0');
 1003b8c:	e51b3010 	ldr	r3, [fp, #-16]
 1003b90:	e5932000 	ldr	r2, [r3]
 1003b94:	e1a03002 	mov	r3, r2
 1003b98:	e1a03103 	lsl	r3, r3, #2
 1003b9c:	e0833002 	add	r3, r3, r2
 1003ba0:	e1a03083 	lsl	r3, r3, #1
 1003ba4:	e1a02003 	mov	r2, r3
 1003ba8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1003bac:	e2433030 	sub	r3, r3, #48	; 0x30
 1003bb0:	e0822003 	add	r2, r2, r3
 1003bb4:	e51b3010 	ldr	r3, [fp, #-16]
 1003bb8:	e5832000 	str	r2, [r3]
     c = nextchar(format,index);
 1003bbc:	e51b100c 	ldr	r1, [fp, #-12]
 1003bc0:	e51b0008 	ldr	r0, [fp, #-8]
 1003bc4:	ebffffcf 	bl	1003b08 <nextchar>
 1003bc8:	e1a03000 	mov	r3, r0
 1003bcc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   while ((c >= '0') && (c <='9'))
 1003bd0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1003bd4:	e353002f 	cmp	r3, #47	; 0x2f
 1003bd8:	9a000002 	bls	1003be8 <getdec+0x88>
 1003bdc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1003be0:	e3530039 	cmp	r3, #57	; 0x39
 1003be4:	9affffe8 	bls	1003b8c <getdec+0x2c>
   }  
   
   return c;
 1003be8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
}
 1003bec:	e1a00003 	mov	r0, r3
 1003bf0:	e24bd004 	sub	sp, fp, #4
 1003bf4:	e8bd8800 	pop	{fp, pc}

01003bf8 <int_to_asc>:
    * @param stg              string to be returned. must be at least 21 bytes.
    * @param isint            if 1 indicates val is signed, otherwise unsigned
    * @return                 number of characters in string 
    */
static int int_to_asc(int64_t val,char * stg,int isint)
{
 1003bf8:	e92d4800 	push	{fp, lr}
 1003bfc:	e28db004 	add	fp, sp, #4
 1003c00:	e24dd018 	sub	sp, sp, #24
 1003c04:	e14b01f4 	strd	r0, [fp, #-20]	; 0xffffffec
 1003c08:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 1003c0c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int count=20,i=0;
 1003c10:	e3a03014 	mov	r3, #20
 1003c14:	e50b3008 	str	r3, [fp, #-8]
 1003c18:	e3a03000 	mov	r3, #0
 1003c1c:	e50b300c 	str	r3, [fp, #-12]
    
    if (isint && (val < 0)) 
 1003c20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003c24:	e3530000 	cmp	r3, #0
 1003c28:	0a00001d 	beq	1003ca4 <int_to_asc+0xac>
 1003c2c:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
 1003c30:	e3520000 	cmp	r2, #0
 1003c34:	e2d33000 	sbcs	r3, r3, #0
 1003c38:	aa000019 	bge	1003ca4 <int_to_asc+0xac>
    {
      val = ~val + 1;
 1003c3c:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
 1003c40:	e2722000 	rsbs	r2, r2, #0
 1003c44:	e2e33000 	rsc	r3, r3, #0
 1003c48:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
    }
    
    while ((uint64_t)val > 0)
 1003c4c:	ea000014 	b	1003ca4 <int_to_asc+0xac>
    {
      stg[count]='0' + ((uint64_t)val%10);
 1003c50:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 1003c54:	e3a0200a 	mov	r2, #10
 1003c58:	e3a03000 	mov	r3, #0
 1003c5c:	eb000604 	bl	1005474 <__aeabi_uldivmod>
 1003c60:	e6ef2072 	uxtb	r2, r2
 1003c64:	e51b3008 	ldr	r3, [fp, #-8]
 1003c68:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 1003c6c:	e0813003 	add	r3, r1, r3
 1003c70:	e2822030 	add	r2, r2, #48	; 0x30
 1003c74:	e6ef2072 	uxtb	r2, r2
 1003c78:	e5c32000 	strb	r2, [r3]
      val=(uint64_t)val/10;
 1003c7c:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 1003c80:	e3a0200a 	mov	r2, #10
 1003c84:	e3a03000 	mov	r3, #0
 1003c88:	eb0005f9 	bl	1005474 <__aeabi_uldivmod>
 1003c8c:	e1a02000 	mov	r2, r0
 1003c90:	e1a03001 	mov	r3, r1
 1003c94:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
      count--;
 1003c98:	e51b3008 	ldr	r3, [fp, #-8]
 1003c9c:	e2433001 	sub	r3, r3, #1
 1003ca0:	e50b3008 	str	r3, [fp, #-8]
    while ((uint64_t)val > 0)
 1003ca4:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
 1003ca8:	e1923003 	orrs	r3, r2, r3
 1003cac:	1affffe7 	bne	1003c50 <int_to_asc+0x58>
    }
    for (i=0;i<(20-count);i++)
 1003cb0:	e3a03000 	mov	r3, #0
 1003cb4:	e50b300c 	str	r3, [fp, #-12]
 1003cb8:	ea00000e 	b	1003cf8 <int_to_asc+0x100>
    {
      stg[i]=stg[ count + 1 + i];
 1003cbc:	e51b3008 	ldr	r3, [fp, #-8]
 1003cc0:	e2832001 	add	r2, r3, #1
 1003cc4:	e51b300c 	ldr	r3, [fp, #-12]
 1003cc8:	e0823003 	add	r3, r2, r3
 1003ccc:	e1a02003 	mov	r2, r3
 1003cd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003cd4:	e0832002 	add	r2, r3, r2
 1003cd8:	e51b300c 	ldr	r3, [fp, #-12]
 1003cdc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 1003ce0:	e0813003 	add	r3, r1, r3
 1003ce4:	e5d22000 	ldrb	r2, [r2]
 1003ce8:	e5c32000 	strb	r2, [r3]
    for (i=0;i<(20-count);i++)
 1003cec:	e51b300c 	ldr	r3, [fp, #-12]
 1003cf0:	e2833001 	add	r3, r3, #1
 1003cf4:	e50b300c 	str	r3, [fp, #-12]
 1003cf8:	e51b3008 	ldr	r3, [fp, #-8]
 1003cfc:	e2633014 	rsb	r3, r3, #20
 1003d00:	e51b200c 	ldr	r2, [fp, #-12]
 1003d04:	e1520003 	cmp	r2, r3
 1003d08:	baffffeb 	blt	1003cbc <int_to_asc+0xc4>
    }
    stg[i]=0;
 1003d0c:	e51b300c 	ldr	r3, [fp, #-12]
 1003d10:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 1003d14:	e0823003 	add	r3, r2, r3
 1003d18:	e3a02000 	mov	r2, #0
 1003d1c:	e5c32000 	strb	r2, [r3]
    
    return (20-count);
 1003d20:	e51b3008 	ldr	r3, [fp, #-8]
 1003d24:	e2633014 	rsb	r3, r3, #20
}     
 1003d28:	e1a00003 	mov	r0, r3
 1003d2c:	e24bd004 	sub	sp, fp, #4
 1003d30:	e8bd8800 	pop	{fp, pc}

01003d34 <hex_to_asc>:
    * @param lengthmod        printf lengthmod format string specifier
    
    * @return                 number of characters in string 
    */
static int hex_to_asc(int64_t val,char * stg,char specifier,int lengthmod)
{
 1003d34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1003d38:	e28db000 	add	fp, sp, #0
 1003d3c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
 1003d40:	e14b02f4 	strd	r0, [fp, #-36]	; 0xffffffdc
 1003d44:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
 1003d48:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
    int count=0,count2=0,startcount=0;  
 1003d4c:	e3a03000 	mov	r3, #0
 1003d50:	e50b3008 	str	r3, [fp, #-8]
 1003d54:	e3a03000 	mov	r3, #0
 1003d58:	e50b300c 	str	r3, [fp, #-12]
 1003d5c:	e3a03000 	mov	r3, #0
 1003d60:	e50b3010 	str	r3, [fp, #-16]
    int digits=8,digitvalue;
 1003d64:	e3a03008 	mov	r3, #8
 1003d68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
       
    if (specifier=='p') specifier='x';   
 1003d6c:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 1003d70:	e3530070 	cmp	r3, #112	; 0x70
 1003d74:	1a000001 	bne	1003d80 <hex_to_asc+0x4c>
 1003d78:	e3a03078 	mov	r3, #120	; 0x78
 1003d7c:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
    if (lengthmod==2)
 1003d80:	e59b3004 	ldr	r3, [fp, #4]
 1003d84:	e3530002 	cmp	r3, #2
 1003d88:	1a000039 	bne	1003e74 <hex_to_asc+0x140>
    {
      digits=16;
 1003d8c:	e3a03010 	mov	r3, #16
 1003d90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    while (count2 < digits)
 1003d94:	ea000036 	b	1003e74 <hex_to_asc+0x140>
    {
      digitvalue=(int)(val>>((digits-count2)*4-4)) & 0xf;
 1003d98:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1003d9c:	e51b300c 	ldr	r3, [fp, #-12]
 1003da0:	e0423003 	sub	r3, r2, r3
 1003da4:	e2433001 	sub	r3, r3, #1
 1003da8:	e1a01103 	lsl	r1, r3, #2
 1003dac:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 1003db0:	e2610020 	rsb	r0, r1, #32
 1003db4:	e251c020 	subs	ip, r1, #32
 1003db8:	e1a02132 	lsr	r2, r2, r1
 1003dbc:	e1822013 	orr	r2, r2, r3, lsl r0
 1003dc0:	4a000000 	bmi	1003dc8 <hex_to_asc+0x94>
 1003dc4:	e1822c53 	orr	r2, r2, r3, asr ip
 1003dc8:	e1a03153 	asr	r3, r3, r1
 1003dcc:	e1a03002 	mov	r3, r2
 1003dd0:	e203300f 	and	r3, r3, #15
 1003dd4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      stg[count]='0' + digitvalue;
 1003dd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003ddc:	e6ef2073 	uxtb	r2, r3
 1003de0:	e51b3008 	ldr	r3, [fp, #-8]
 1003de4:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 1003de8:	e0813003 	add	r3, r1, r3
 1003dec:	e2822030 	add	r2, r2, #48	; 0x30
 1003df0:	e6ef2072 	uxtb	r2, r2
 1003df4:	e5c32000 	strb	r2, [r3]
      if (digitvalue > 9)
 1003df8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003dfc:	e3530009 	cmp	r3, #9
 1003e00:	da00000a 	ble	1003e30 <hex_to_asc+0xfc>
      {
        stg[count] = 'A' + (digitvalue - 10) + specifier - 'X';
 1003e04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003e08:	e6ef2073 	uxtb	r2, r3
 1003e0c:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 1003e10:	e0823003 	add	r3, r2, r3
 1003e14:	e6ef2073 	uxtb	r2, r3
 1003e18:	e51b3008 	ldr	r3, [fp, #-8]
 1003e1c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 1003e20:	e0813003 	add	r3, r1, r3
 1003e24:	e2422021 	sub	r2, r2, #33	; 0x21
 1003e28:	e6ef2072 	uxtb	r2, r2
 1003e2c:	e5c32000 	strb	r2, [r3]
      }
      if ((stg[count]!='0') || startcount)
 1003e30:	e51b3008 	ldr	r3, [fp, #-8]
 1003e34:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 1003e38:	e0823003 	add	r3, r2, r3
 1003e3c:	e5d33000 	ldrb	r3, [r3]
 1003e40:	e3530030 	cmp	r3, #48	; 0x30
 1003e44:	1a000002 	bne	1003e54 <hex_to_asc+0x120>
 1003e48:	e51b3010 	ldr	r3, [fp, #-16]
 1003e4c:	e3530000 	cmp	r3, #0
 1003e50:	0a000004 	beq	1003e68 <hex_to_asc+0x134>
      {
        count+=1; 
 1003e54:	e51b3008 	ldr	r3, [fp, #-8]
 1003e58:	e2833001 	add	r3, r3, #1
 1003e5c:	e50b3008 	str	r3, [fp, #-8]
        startcount=1;
 1003e60:	e3a03001 	mov	r3, #1
 1003e64:	e50b3010 	str	r3, [fp, #-16]
      }
      count2++;
 1003e68:	e51b300c 	ldr	r3, [fp, #-12]
 1003e6c:	e2833001 	add	r3, r3, #1
 1003e70:	e50b300c 	str	r3, [fp, #-12]
    while (count2 < digits)
 1003e74:	e51b200c 	ldr	r2, [fp, #-12]
 1003e78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003e7c:	e1520003 	cmp	r2, r3
 1003e80:	baffffc4 	blt	1003d98 <hex_to_asc+0x64>
    }  
    stg[count]=0;
 1003e84:	e51b3008 	ldr	r3, [fp, #-8]
 1003e88:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 1003e8c:	e0823003 	add	r3, r2, r3
 1003e90:	e3a02000 	mov	r2, #0
 1003e94:	e5c32000 	strb	r2, [r3]
            
    return count;
 1003e98:	e51b3008 	ldr	r3, [fp, #-8]
}
 1003e9c:	e1a00003 	mov	r0, r3
 1003ea0:	e28bd000 	add	sp, fp, #0
 1003ea4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1003ea8:	e12fff1e 	bx	lr

01003eac <printarg>:
    * @param c_count          count of characters output
    * @param args             argument list 
    * @return                 0 for success, 1 for failure 
    */  
static int printarg(ALT_PRINTF_MEM_INFO_t *pinfo,char specifier,char flag,int width,int length,int precision,int dot,int * c_count,va_list * args)
{
 1003eac:	e92d4800 	push	{fp, lr}
 1003eb0:	e28db004 	add	fp, sp, #4
 1003eb4:	e24dd060 	sub	sp, sp, #96	; 0x60
 1003eb8:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
 1003ebc:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
 1003ec0:	e1a03001 	mov	r3, r1
 1003ec4:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf
 1003ec8:	e1a03002 	mov	r3, r2
 1003ecc:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    char ostg[32],pad=' ',leadchar=0,leadchar2=0;
 1003ed0:	e3a03020 	mov	r3, #32
 1003ed4:	e54b3005 	strb	r3, [fp, #-5]
 1003ed8:	e3a03000 	mov	r3, #0
 1003edc:	e54b3006 	strb	r3, [fp, #-6]
 1003ee0:	e3a03000 	mov	r3, #0
 1003ee4:	e54b3007 	strb	r3, [fp, #-7]
    int count,i,adder=0,isint=1;
 1003ee8:	e3a03000 	mov	r3, #0
 1003eec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1003ef0:	e3a03001 	mov	r3, #1
 1003ef4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    int max;
    int64_t val = 0;
 1003ef8:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
 1003efc:	ed4b0b09 	vstr	d16, [fp, #-36]	; 0xffffffdc
    char * stgarg = NULL;
 1003f00:	e3a03000 	mov	r3, #0
 1003f04:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
     
    if ((specifier=='d') || (specifier=='i') || (specifier=='u') || (specifier=='x') || (specifier=='X') || (specifier=='p')) 
 1003f08:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003f0c:	e3530064 	cmp	r3, #100	; 0x64
 1003f10:	0a00000e 	beq	1003f50 <printarg+0xa4>
 1003f14:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003f18:	e3530069 	cmp	r3, #105	; 0x69
 1003f1c:	0a00000b 	beq	1003f50 <printarg+0xa4>
 1003f20:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003f24:	e3530075 	cmp	r3, #117	; 0x75
 1003f28:	0a000008 	beq	1003f50 <printarg+0xa4>
 1003f2c:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003f30:	e3530078 	cmp	r3, #120	; 0x78
 1003f34:	0a000005 	beq	1003f50 <printarg+0xa4>
 1003f38:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003f3c:	e3530058 	cmp	r3, #88	; 0x58
 1003f40:	0a000002 	beq	1003f50 <printarg+0xa4>
 1003f44:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003f48:	e3530070 	cmp	r3, #112	; 0x70
 1003f4c:	1a000148 	bne	1004474 <printarg+0x5c8>
    {
      if ((specifier=='u') || (specifier=='p'))
 1003f50:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003f54:	e3530075 	cmp	r3, #117	; 0x75
 1003f58:	0a000002 	beq	1003f68 <printarg+0xbc>
 1003f5c:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003f60:	e3530070 	cmp	r3, #112	; 0x70
 1003f64:	1a000001 	bne	1003f70 <printarg+0xc4>
      {
        isint=0;
 1003f68:	e3a03000 	mov	r3, #0
 1003f6c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }
      
      if ((length==2) && isint)
 1003f70:	e59b3004 	ldr	r3, [fp, #4]
 1003f74:	e3530002 	cmp	r3, #2
 1003f78:	1a00000b 	bne	1003fac <printarg+0x100>
 1003f7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003f80:	e3530000 	cmp	r3, #0
 1003f84:	0a000008 	beq	1003fac <printarg+0x100>
      {
        val=va_arg( *args, int64_t );
 1003f88:	e59b3014 	ldr	r3, [fp, #20]
 1003f8c:	e5933000 	ldr	r3, [r3]
 1003f90:	e2833007 	add	r3, r3, #7
 1003f94:	e3c33007 	bic	r3, r3, #7
 1003f98:	e2831008 	add	r1, r3, #8
 1003f9c:	e59b2014 	ldr	r2, [fp, #20]
 1003fa0:	e5821000 	str	r1, [r2]
 1003fa4:	e1c320d0 	ldrd	r2, [r3]
 1003fa8:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }
      if ((length==2) && (!isint))
 1003fac:	e59b3004 	ldr	r3, [fp, #4]
 1003fb0:	e3530002 	cmp	r3, #2
 1003fb4:	1a00000b 	bne	1003fe8 <printarg+0x13c>
 1003fb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003fbc:	e3530000 	cmp	r3, #0
 1003fc0:	1a000008 	bne	1003fe8 <printarg+0x13c>
      {
        val=va_arg( *args, uint64_t );
 1003fc4:	e59b3014 	ldr	r3, [fp, #20]
 1003fc8:	e5933000 	ldr	r3, [r3]
 1003fcc:	e2833007 	add	r3, r3, #7
 1003fd0:	e3c33007 	bic	r3, r3, #7
 1003fd4:	e2831008 	add	r1, r3, #8
 1003fd8:	e59b2014 	ldr	r2, [fp, #20]
 1003fdc:	e5821000 	str	r1, [r2]
 1003fe0:	e1c320d0 	ldrd	r2, [r3]
 1003fe4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }
      if ((length!=2) && isint)
 1003fe8:	e59b3004 	ldr	r3, [fp, #4]
 1003fec:	e3530002 	cmp	r3, #2
 1003ff0:	0a00000b 	beq	1004024 <printarg+0x178>
 1003ff4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003ff8:	e3530000 	cmp	r3, #0
 1003ffc:	0a000008 	beq	1004024 <printarg+0x178>
      {
        val=(int64_t)va_arg( *args, int ); 
 1004000:	e59b3014 	ldr	r3, [fp, #20]
 1004004:	e5933000 	ldr	r3, [r3]
 1004008:	e2831004 	add	r1, r3, #4
 100400c:	e59b2014 	ldr	r2, [fp, #20]
 1004010:	e5821000 	str	r1, [r2]
 1004014:	e5933000 	ldr	r3, [r3]
 1004018:	e1a02003 	mov	r2, r3
 100401c:	e1a03fc2 	asr	r3, r2, #31
 1004020:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }
      if ((length!=2) && (!isint))
 1004024:	e59b3004 	ldr	r3, [fp, #4]
 1004028:	e3530002 	cmp	r3, #2
 100402c:	0a00000b 	beq	1004060 <printarg+0x1b4>
 1004030:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004034:	e3530000 	cmp	r3, #0
 1004038:	1a000008 	bne	1004060 <printarg+0x1b4>
      {
        val=(int64_t)va_arg( *args, unsigned int ); 
 100403c:	e59b3014 	ldr	r3, [fp, #20]
 1004040:	e5933000 	ldr	r3, [r3]
 1004044:	e2831004 	add	r1, r3, #4
 1004048:	e59b2014 	ldr	r2, [fp, #20]
 100404c:	e5821000 	str	r1, [r2]
 1004050:	e5933000 	ldr	r3, [r3]
 1004054:	e1a02003 	mov	r2, r3
 1004058:	e3a03000 	mov	r3, #0
 100405c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }      
      
      if ((val==0) && ((precision!=0) || (dot==0)))
 1004060:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 1004064:	e1923003 	orrs	r3, r2, r3
 1004068:	1a00000c 	bne	10040a0 <printarg+0x1f4>
 100406c:	e59b3008 	ldr	r3, [fp, #8]
 1004070:	e3530000 	cmp	r3, #0
 1004074:	1a000002 	bne	1004084 <printarg+0x1d8>
 1004078:	e59b300c 	ldr	r3, [fp, #12]
 100407c:	e3530000 	cmp	r3, #0
 1004080:	1a000006 	bne	10040a0 <printarg+0x1f4>
      { 
        ostg[0]='0';
 1004084:	e3a03030 	mov	r3, #48	; 0x30
 1004088:	e54b3048 	strb	r3, [fp, #-72]	; 0xffffffb8
        ostg[1]=0;
 100408c:	e3a03000 	mov	r3, #0
 1004090:	e54b3047 	strb	r3, [fp, #-71]	; 0xffffffb9
        count=1;
 1004094:	e3a03001 	mov	r3, #1
 1004098:	e50b300c 	str	r3, [fp, #-12]
 100409c:	ea000016 	b	10040fc <printarg+0x250>
      }      
      else 
      {
        if ((specifier=='x') || (specifier=='X') || (specifier=='p'))
 10040a0:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10040a4:	e3530078 	cmp	r3, #120	; 0x78
 10040a8:	0a000005 	beq	10040c4 <printarg+0x218>
 10040ac:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10040b0:	e3530058 	cmp	r3, #88	; 0x58
 10040b4:	0a000002 	beq	10040c4 <printarg+0x218>
 10040b8:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10040bc:	e3530070 	cmp	r3, #112	; 0x70
 10040c0:	1a000008 	bne	10040e8 <printarg+0x23c>
        {      
          count=hex_to_asc(val,ostg,specifier,length);
 10040c4:	e55b1051 	ldrb	r1, [fp, #-81]	; 0xffffffaf
 10040c8:	e24b2048 	sub	r2, fp, #72	; 0x48
 10040cc:	e59b3004 	ldr	r3, [fp, #4]
 10040d0:	e58d3000 	str	r3, [sp]
 10040d4:	e1a03001 	mov	r3, r1
 10040d8:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
 10040dc:	ebffff14 	bl	1003d34 <hex_to_asc>
 10040e0:	e50b000c 	str	r0, [fp, #-12]
 10040e4:	ea000004 	b	10040fc <printarg+0x250>
        }
        else
        {
          count=int_to_asc(val,ostg,isint);
 10040e8:	e24b2048 	sub	r2, fp, #72	; 0x48
 10040ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10040f0:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
 10040f4:	ebfffebf 	bl	1003bf8 <int_to_asc>
 10040f8:	e50b000c 	str	r0, [fp, #-12]
        }
      }
      if ((specifier=='x') || (specifier=='X') || (specifier=='p'))
 10040fc:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004100:	e3530078 	cmp	r3, #120	; 0x78
 1004104:	0a000005 	beq	1004120 <printarg+0x274>
 1004108:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 100410c:	e3530058 	cmp	r3, #88	; 0x58
 1004110:	0a000002 	beq	1004120 <printarg+0x274>
 1004114:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004118:	e3530070 	cmp	r3, #112	; 0x70
 100411c:	1a000020 	bne	10041a4 <printarg+0x2f8>
      {
        if (specifier=='p')
 1004120:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004124:	e3530070 	cmp	r3, #112	; 0x70
 1004128:	1a000007 	bne	100414c <printarg+0x2a0>
        {
          leadchar='0';
 100412c:	e3a03030 	mov	r3, #48	; 0x30
 1004130:	e54b3006 	strb	r3, [fp, #-6]
          leadchar2='x';
 1004134:	e3a03078 	mov	r3, #120	; 0x78
 1004138:	e54b3007 	strb	r3, [fp, #-7]
          adder+=2;
 100413c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004140:	e2833002 	add	r3, r3, #2
 1004144:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1004148:	ea00000c 	b	1004180 <printarg+0x2d4>
        }
        else
        {
          if  ((flag=='#') && (val!=0))
 100414c:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004150:	e3530023 	cmp	r3, #35	; 0x23
 1004154:	1a000009 	bne	1004180 <printarg+0x2d4>
 1004158:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 100415c:	e1923003 	orrs	r3, r2, r3
 1004160:	0a000006 	beq	1004180 <printarg+0x2d4>
          { 
            leadchar='0';
 1004164:	e3a03030 	mov	r3, #48	; 0x30
 1004168:	e54b3006 	strb	r3, [fp, #-6]
            leadchar2=specifier;
 100416c:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004170:	e54b3007 	strb	r3, [fp, #-7]
            adder+=2;
 1004174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004178:	e2833002 	add	r3, r3, #2
 100417c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          }
        }        
        if ((flag=='0') && (dot==0))
 1004180:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004184:	e3530030 	cmp	r3, #48	; 0x30
 1004188:	1a000036 	bne	1004268 <printarg+0x3bc>
 100418c:	e59b300c 	ldr	r3, [fp, #12]
 1004190:	e3530000 	cmp	r3, #0
 1004194:	1a000033 	bne	1004268 <printarg+0x3bc>
        {
          pad='0';
 1004198:	e3a03030 	mov	r3, #48	; 0x30
 100419c:	e54b3005 	strb	r3, [fp, #-5]
        if ((flag=='0') && (dot==0))
 10041a0:	ea000030 	b	1004268 <printarg+0x3bc>
        }
      }
      else
      {
        if ((val<0) && isint)
 10041a4:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 10041a8:	e3520000 	cmp	r2, #0
 10041ac:	e2d33000 	sbcs	r3, r3, #0
 10041b0:	aa000008 	bge	10041d8 <printarg+0x32c>
 10041b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10041b8:	e3530000 	cmp	r3, #0
 10041bc:	0a000005 	beq	10041d8 <printarg+0x32c>
        { 
          leadchar='-';
 10041c0:	e3a0302d 	mov	r3, #45	; 0x2d
 10041c4:	e54b3006 	strb	r3, [fp, #-6]
          adder++;
 10041c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10041cc:	e2833001 	add	r3, r3, #1
 10041d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 10041d4:	ea00001a 	b	1004244 <printarg+0x398>
        }    
        else if ((flag=='+') && (val>=0) && isint) 
 10041d8:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 10041dc:	e353002b 	cmp	r3, #43	; 0x2b
 10041e0:	1a00000c 	bne	1004218 <printarg+0x36c>
 10041e4:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 10041e8:	e3520000 	cmp	r2, #0
 10041ec:	e2d33000 	sbcs	r3, r3, #0
 10041f0:	ba000008 	blt	1004218 <printarg+0x36c>
 10041f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10041f8:	e3530000 	cmp	r3, #0
 10041fc:	0a000005 	beq	1004218 <printarg+0x36c>
        { 
          leadchar='+';
 1004200:	e3a0302b 	mov	r3, #43	; 0x2b
 1004204:	e54b3006 	strb	r3, [fp, #-6]
          adder++;
 1004208:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100420c:	e2833001 	add	r3, r3, #1
 1004210:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1004214:	ea00000a 	b	1004244 <printarg+0x398>
        }  
        else if ((flag==' ') && isint)
 1004218:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 100421c:	e3530020 	cmp	r3, #32
 1004220:	1a000007 	bne	1004244 <printarg+0x398>
 1004224:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004228:	e3530000 	cmp	r3, #0
 100422c:	0a000004 	beq	1004244 <printarg+0x398>
        { 
          leadchar=' ';
 1004230:	e3a03020 	mov	r3, #32
 1004234:	e54b3006 	strb	r3, [fp, #-6]
          adder++;
 1004238:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100423c:	e2833001 	add	r3, r3, #1
 1004240:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }    
      
        if ((flag=='0') && (dot==0))
 1004244:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004248:	e3530030 	cmp	r3, #48	; 0x30
 100424c:	1a000006 	bne	100426c <printarg+0x3c0>
 1004250:	e59b300c 	ldr	r3, [fp, #12]
 1004254:	e3530000 	cmp	r3, #0
 1004258:	1a000003 	bne	100426c <printarg+0x3c0>
        {
          pad='0';
 100425c:	e3a03030 	mov	r3, #48	; 0x30
 1004260:	e54b3005 	strb	r3, [fp, #-5]
 1004264:	ea000000 	b	100426c <printarg+0x3c0>
        if ((flag=='0') && (dot==0))
 1004268:	e320f000 	nop	{0}
        }
      }
      
      max=count;      
 100426c:	e51b300c 	ldr	r3, [fp, #-12]
 1004270:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      if (precision>count)
 1004274:	e59b2008 	ldr	r2, [fp, #8]
 1004278:	e51b300c 	ldr	r3, [fp, #-12]
 100427c:	e1520003 	cmp	r2, r3
 1004280:	da000001 	ble	100428c <printarg+0x3e0>
      {
        max=precision;     
 1004284:	e59b3008 	ldr	r3, [fp, #8]
 1004288:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      }
      
      if ((leadchar!=0) && (pad=='0'))
 100428c:	e55b3006 	ldrb	r3, [fp, #-6]
 1004290:	e3530000 	cmp	r3, #0
 1004294:	0a000007 	beq	10042b8 <printarg+0x40c>
 1004298:	e55b3005 	ldrb	r3, [fp, #-5]
 100429c:	e3530030 	cmp	r3, #48	; 0x30
 10042a0:	1a000004 	bne	10042b8 <printarg+0x40c>
      {
        cput(pinfo, c_count, leadchar);
 10042a4:	e55b3006 	ldrb	r3, [fp, #-6]
 10042a8:	e1a02003 	mov	r2, r3
 10042ac:	e59b1010 	ldr	r1, [fp, #16]
 10042b0:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10042b4:	ebfffdf8 	bl	1003a9c <cput>
      }
      if ((leadchar2!=0) && (pad=='0'))
 10042b8:	e55b3007 	ldrb	r3, [fp, #-7]
 10042bc:	e3530000 	cmp	r3, #0
 10042c0:	0a000007 	beq	10042e4 <printarg+0x438>
 10042c4:	e55b3005 	ldrb	r3, [fp, #-5]
 10042c8:	e3530030 	cmp	r3, #48	; 0x30
 10042cc:	1a000004 	bne	10042e4 <printarg+0x438>
      {
        cput(pinfo, c_count, leadchar2); 
 10042d0:	e55b3007 	ldrb	r3, [fp, #-7]
 10042d4:	e1a02003 	mov	r2, r3
 10042d8:	e59b1010 	ldr	r1, [fp, #16]
 10042dc:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10042e0:	ebfffded 	bl	1003a9c <cput>
      }
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 10042e4:	e3a03000 	mov	r3, #0
 10042e8:	e50b3010 	str	r3, [fp, #-16]
 10042ec:	ea000007 	b	1004310 <printarg+0x464>
      {
        cput(pinfo, c_count, pad);
 10042f0:	e55b3005 	ldrb	r3, [fp, #-5]
 10042f4:	e1a02003 	mov	r2, r3
 10042f8:	e59b1010 	ldr	r1, [fp, #16]
 10042fc:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004300:	ebfffde5 	bl	1003a9c <cput>
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 1004304:	e51b3010 	ldr	r3, [fp, #-16]
 1004308:	e2833001 	add	r3, r3, #1
 100430c:	e50b3010 	str	r3, [fp, #-16]
 1004310:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1004314:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004318:	e0422003 	sub	r2, r2, r3
 100431c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004320:	e0423003 	sub	r3, r2, r3
 1004324:	e51b2010 	ldr	r2, [fp, #-16]
 1004328:	e1520003 	cmp	r2, r3
 100432c:	aa000002 	bge	100433c <printarg+0x490>
 1004330:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004334:	e353002d 	cmp	r3, #45	; 0x2d
 1004338:	1affffec 	bne	10042f0 <printarg+0x444>
      }
      if ((leadchar!=0) && (pad==' '))
 100433c:	e55b3006 	ldrb	r3, [fp, #-6]
 1004340:	e3530000 	cmp	r3, #0
 1004344:	0a000007 	beq	1004368 <printarg+0x4bc>
 1004348:	e55b3005 	ldrb	r3, [fp, #-5]
 100434c:	e3530020 	cmp	r3, #32
 1004350:	1a000004 	bne	1004368 <printarg+0x4bc>
      {
        cput(pinfo, c_count, leadchar); 
 1004354:	e55b3006 	ldrb	r3, [fp, #-6]
 1004358:	e1a02003 	mov	r2, r3
 100435c:	e59b1010 	ldr	r1, [fp, #16]
 1004360:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004364:	ebfffdcc 	bl	1003a9c <cput>
      }
      if ((leadchar2!=0) && (pad==' '))
 1004368:	e55b3007 	ldrb	r3, [fp, #-7]
 100436c:	e3530000 	cmp	r3, #0
 1004370:	0a000007 	beq	1004394 <printarg+0x4e8>
 1004374:	e55b3005 	ldrb	r3, [fp, #-5]
 1004378:	e3530020 	cmp	r3, #32
 100437c:	1a000004 	bne	1004394 <printarg+0x4e8>
      {
        cput(pinfo, c_count, leadchar2);   
 1004380:	e55b3007 	ldrb	r3, [fp, #-7]
 1004384:	e1a02003 	mov	r2, r3
 1004388:	e59b1010 	ldr	r1, [fp, #16]
 100438c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004390:	ebfffdc1 	bl	1003a9c <cput>
      }            
      for (i=0;i<(precision-count);i++) 
 1004394:	e3a03000 	mov	r3, #0
 1004398:	e50b3010 	str	r3, [fp, #-16]
 100439c:	ea000006 	b	10043bc <printarg+0x510>
      {
        cput(pinfo, c_count, '0');
 10043a0:	e3a02030 	mov	r2, #48	; 0x30
 10043a4:	e59b1010 	ldr	r1, [fp, #16]
 10043a8:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10043ac:	ebfffdba 	bl	1003a9c <cput>
      for (i=0;i<(precision-count);i++) 
 10043b0:	e51b3010 	ldr	r3, [fp, #-16]
 10043b4:	e2833001 	add	r3, r3, #1
 10043b8:	e50b3010 	str	r3, [fp, #-16]
 10043bc:	e59b2008 	ldr	r2, [fp, #8]
 10043c0:	e51b300c 	ldr	r3, [fp, #-12]
 10043c4:	e0423003 	sub	r3, r2, r3
 10043c8:	e51b2010 	ldr	r2, [fp, #-16]
 10043cc:	e1520003 	cmp	r2, r3
 10043d0:	bafffff2 	blt	10043a0 <printarg+0x4f4>
      }
      for (i=0;i<count;i++)
 10043d4:	e3a03000 	mov	r3, #0
 10043d8:	e50b3010 	str	r3, [fp, #-16]
 10043dc:	ea00000a 	b	100440c <printarg+0x560>
      {
        cput(pinfo, c_count, ostg[i]);
 10043e0:	e24b2048 	sub	r2, fp, #72	; 0x48
 10043e4:	e51b3010 	ldr	r3, [fp, #-16]
 10043e8:	e0823003 	add	r3, r2, r3
 10043ec:	e5d33000 	ldrb	r3, [r3]
 10043f0:	e1a02003 	mov	r2, r3
 10043f4:	e59b1010 	ldr	r1, [fp, #16]
 10043f8:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10043fc:	ebfffda6 	bl	1003a9c <cput>
      for (i=0;i<count;i++)
 1004400:	e51b3010 	ldr	r3, [fp, #-16]
 1004404:	e2833001 	add	r3, r3, #1
 1004408:	e50b3010 	str	r3, [fp, #-16]
 100440c:	e51b2010 	ldr	r2, [fp, #-16]
 1004410:	e51b300c 	ldr	r3, [fp, #-12]
 1004414:	e1520003 	cmp	r2, r3
 1004418:	bafffff0 	blt	10043e0 <printarg+0x534>
      }
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 100441c:	e3a03000 	mov	r3, #0
 1004420:	e50b3010 	str	r3, [fp, #-16]
 1004424:	ea000006 	b	1004444 <printarg+0x598>
      {
        cput(pinfo, c_count, ' ');    
 1004428:	e3a02020 	mov	r2, #32
 100442c:	e59b1010 	ldr	r1, [fp, #16]
 1004430:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004434:	ebfffd98 	bl	1003a9c <cput>
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 1004438:	e51b3010 	ldr	r3, [fp, #-16]
 100443c:	e2833001 	add	r3, r3, #1
 1004440:	e50b3010 	str	r3, [fp, #-16]
 1004444:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1004448:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100444c:	e0422003 	sub	r2, r2, r3
 1004450:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004454:	e0423003 	sub	r3, r2, r3
 1004458:	e51b2010 	ldr	r2, [fp, #-16]
 100445c:	e1520003 	cmp	r2, r3
 1004460:	aa000091 	bge	10046ac <printarg+0x800>
 1004464:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004468:	e353002d 	cmp	r3, #45	; 0x2d
 100446c:	0affffed 	beq	1004428 <printarg+0x57c>
    if ((specifier=='d') || (specifier=='i') || (specifier=='u') || (specifier=='x') || (specifier=='X') || (specifier=='p')) 
 1004470:	ea00008d 	b	10046ac <printarg+0x800>
      }  
    }
    else if ((specifier=='s') || (specifier=='c'))
 1004474:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004478:	e3530073 	cmp	r3, #115	; 0x73
 100447c:	0a000002 	beq	100448c <printarg+0x5e0>
 1004480:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004484:	e3530063 	cmp	r3, #99	; 0x63
 1004488:	1a000085 	bne	10046a4 <printarg+0x7f8>
    {
      if (specifier=='c')
 100448c:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004490:	e3530063 	cmp	r3, #99	; 0x63
 1004494:	1a00000e 	bne	10044d4 <printarg+0x628>
      {
        ostg[0]=va_arg( * args, int ) & 0xff;
 1004498:	e59b3014 	ldr	r3, [fp, #20]
 100449c:	e5933000 	ldr	r3, [r3]
 10044a0:	e2831004 	add	r1, r3, #4
 10044a4:	e59b2014 	ldr	r2, [fp, #20]
 10044a8:	e5821000 	str	r1, [r2]
 10044ac:	e5933000 	ldr	r3, [r3]
 10044b0:	e6ef3073 	uxtb	r3, r3
 10044b4:	e54b3048 	strb	r3, [fp, #-72]	; 0xffffffb8
        ostg[1]=0;
 10044b8:	e3a03000 	mov	r3, #0
 10044bc:	e54b3047 	strb	r3, [fp, #-71]	; 0xffffffb9
        count=1;
 10044c0:	e3a03001 	mov	r3, #1
 10044c4:	e50b300c 	str	r3, [fp, #-12]
        dot=0;
 10044c8:	e3a03000 	mov	r3, #0
 10044cc:	e58b300c 	str	r3, [fp, #12]
 10044d0:	ea000012 	b	1004520 <printarg+0x674>
      }
      else {
        stgarg=va_arg( * args, char * ); 
 10044d4:	e59b3014 	ldr	r3, [fp, #20]
 10044d8:	e5933000 	ldr	r3, [r3]
 10044dc:	e2831004 	add	r1, r3, #4
 10044e0:	e59b2014 	ldr	r2, [fp, #20]
 10044e4:	e5821000 	str	r1, [r2]
 10044e8:	e5933000 	ldr	r3, [r3]
 10044ec:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
        count=0;
 10044f0:	e3a03000 	mov	r3, #0
 10044f4:	e50b300c 	str	r3, [fp, #-12]
        while (*(stgarg+count)) 
 10044f8:	ea000002 	b	1004508 <printarg+0x65c>
        {
          count++;
 10044fc:	e51b300c 	ldr	r3, [fp, #-12]
 1004500:	e2833001 	add	r3, r3, #1
 1004504:	e50b300c 	str	r3, [fp, #-12]
        while (*(stgarg+count)) 
 1004508:	e51b300c 	ldr	r3, [fp, #-12]
 100450c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 1004510:	e0823003 	add	r3, r2, r3
 1004514:	e5d33000 	ldrb	r3, [r3]
 1004518:	e3530000 	cmp	r3, #0
 100451c:	1afffff6 	bne	10044fc <printarg+0x650>
        }
      }        
       
      if (flag=='0') 
 1004520:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004524:	e3530030 	cmp	r3, #48	; 0x30
 1004528:	1a000001 	bne	1004534 <printarg+0x688>
      {
        pad='0';
 100452c:	e3a03030 	mov	r3, #48	; 0x30
 1004530:	e54b3005 	strb	r3, [fp, #-5]
      }        

      max=count;
 1004534:	e51b300c 	ldr	r3, [fp, #-12]
 1004538:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      if (dot && (precision<=count))
 100453c:	e59b300c 	ldr	r3, [fp, #12]
 1004540:	e3530000 	cmp	r3, #0
 1004544:	0a000005 	beq	1004560 <printarg+0x6b4>
 1004548:	e59b2008 	ldr	r2, [fp, #8]
 100454c:	e51b300c 	ldr	r3, [fp, #-12]
 1004550:	e1520003 	cmp	r2, r3
 1004554:	ca000001 	bgt	1004560 <printarg+0x6b4>
      {
        max=precision;
 1004558:	e59b3008 	ldr	r3, [fp, #8]
 100455c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      }
      
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 1004560:	e3a03000 	mov	r3, #0
 1004564:	e50b3010 	str	r3, [fp, #-16]
 1004568:	ea000007 	b	100458c <printarg+0x6e0>
      {
         cput(pinfo, c_count, pad);
 100456c:	e55b3005 	ldrb	r3, [fp, #-5]
 1004570:	e1a02003 	mov	r2, r3
 1004574:	e59b1010 	ldr	r1, [fp, #16]
 1004578:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 100457c:	ebfffd46 	bl	1003a9c <cput>
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 1004580:	e51b3010 	ldr	r3, [fp, #-16]
 1004584:	e2833001 	add	r3, r3, #1
 1004588:	e50b3010 	str	r3, [fp, #-16]
 100458c:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1004590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004594:	e0422003 	sub	r2, r2, r3
 1004598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100459c:	e0423003 	sub	r3, r2, r3
 10045a0:	e51b2010 	ldr	r2, [fp, #-16]
 10045a4:	e1520003 	cmp	r2, r3
 10045a8:	aa000002 	bge	10045b8 <printarg+0x70c>
 10045ac:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 10045b0:	e353002d 	cmp	r3, #45	; 0x2d
 10045b4:	1affffec 	bne	100456c <printarg+0x6c0>
      }           
       
      for (i=0;(i<count) && ((i<precision) || (dot==0));i++) 
 10045b8:	e3a03000 	mov	r3, #0
 10045bc:	e50b3010 	str	r3, [fp, #-16]
 10045c0:	ea000016 	b	1004620 <printarg+0x774>
      {
        if (specifier=='c')
 10045c4:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10045c8:	e3530063 	cmp	r3, #99	; 0x63
 10045cc:	1a000008 	bne	10045f4 <printarg+0x748>
        {
          cput(pinfo, c_count, ostg[i]);
 10045d0:	e24b2048 	sub	r2, fp, #72	; 0x48
 10045d4:	e51b3010 	ldr	r3, [fp, #-16]
 10045d8:	e0823003 	add	r3, r2, r3
 10045dc:	e5d33000 	ldrb	r3, [r3]
 10045e0:	e1a02003 	mov	r2, r3
 10045e4:	e59b1010 	ldr	r1, [fp, #16]
 10045e8:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10045ec:	ebfffd2a 	bl	1003a9c <cput>
 10045f0:	ea000007 	b	1004614 <printarg+0x768>
        }
        else
        {
          cput(pinfo, c_count, stgarg[i]);
 10045f4:	e51b3010 	ldr	r3, [fp, #-16]
 10045f8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 10045fc:	e0823003 	add	r3, r2, r3
 1004600:	e5d33000 	ldrb	r3, [r3]
 1004604:	e1a02003 	mov	r2, r3
 1004608:	e59b1010 	ldr	r1, [fp, #16]
 100460c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004610:	ebfffd21 	bl	1003a9c <cput>
      for (i=0;(i<count) && ((i<precision) || (dot==0));i++) 
 1004614:	e51b3010 	ldr	r3, [fp, #-16]
 1004618:	e2833001 	add	r3, r3, #1
 100461c:	e50b3010 	str	r3, [fp, #-16]
 1004620:	e51b2010 	ldr	r2, [fp, #-16]
 1004624:	e51b300c 	ldr	r3, [fp, #-12]
 1004628:	e1520003 	cmp	r2, r3
 100462c:	aa000006 	bge	100464c <printarg+0x7a0>
 1004630:	e51b2010 	ldr	r2, [fp, #-16]
 1004634:	e59b3008 	ldr	r3, [fp, #8]
 1004638:	e1520003 	cmp	r2, r3
 100463c:	baffffe0 	blt	10045c4 <printarg+0x718>
 1004640:	e59b300c 	ldr	r3, [fp, #12]
 1004644:	e3530000 	cmp	r3, #0
 1004648:	0affffdd 	beq	10045c4 <printarg+0x718>
        }
      }
      
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 100464c:	e3a03000 	mov	r3, #0
 1004650:	e50b3010 	str	r3, [fp, #-16]
 1004654:	ea000006 	b	1004674 <printarg+0x7c8>
      {
        cput(pinfo, c_count, ' ');    
 1004658:	e3a02020 	mov	r2, #32
 100465c:	e59b1010 	ldr	r1, [fp, #16]
 1004660:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004664:	ebfffd0c 	bl	1003a9c <cput>
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 1004668:	e51b3010 	ldr	r3, [fp, #-16]
 100466c:	e2833001 	add	r3, r3, #1
 1004670:	e50b3010 	str	r3, [fp, #-16]
 1004674:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1004678:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100467c:	e0422003 	sub	r2, r2, r3
 1004680:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004684:	e0423003 	sub	r3, r2, r3
 1004688:	e51b2010 	ldr	r2, [fp, #-16]
 100468c:	e1520003 	cmp	r2, r3
 1004690:	aa000007 	bge	10046b4 <printarg+0x808>
 1004694:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004698:	e353002d 	cmp	r3, #45	; 0x2d
 100469c:	0affffed 	beq	1004658 <printarg+0x7ac>
    else if ((specifier=='s') || (specifier=='c'))
 10046a0:	ea000003 	b	10046b4 <printarg+0x808>
      }   
    }
    else
    {
       return 1;
 10046a4:	e3a03001 	mov	r3, #1
 10046a8:	ea000003 	b	10046bc <printarg+0x810>
    if ((specifier=='d') || (specifier=='i') || (specifier=='u') || (specifier=='x') || (specifier=='X') || (specifier=='p')) 
 10046ac:	e320f000 	nop	{0}
 10046b0:	ea000000 	b	10046b8 <printarg+0x80c>
    else if ((specifier=='s') || (specifier=='c'))
 10046b4:	e320f000 	nop	{0}
    }     
    
    return 0;
 10046b8:	e3a03000 	mov	r3, #0
}
 10046bc:	e1a00003 	mov	r0, r3
 10046c0:	e24bd004 	sub	sp, fp, #4
 10046c4:	e8bd8800 	pop	{fp, pc}

010046c8 <alt_vfprintf>:
    This routine parses the format string and calls the printarg routine to print the args as
    encountered.
    * @return                 #characters output for success, -1 for failure 
    */  
int alt_vfprintf(FILE *stream, const char *format, va_list args)
{
 10046c8:	e92d4800 	push	{fp, lr}
 10046cc:	e28db004 	add	fp, sp, #4
 10046d0:	e24dd048 	sub	sp, sp, #72	; 0x48
 10046d4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
 10046d8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
 10046dc:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    ALT_PRINTF_MEM_INFO_t *pinfo = (ALT_PRINTF_MEM_INFO_t *)stream;
 10046e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10046e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int index=0,length;
 10046e8:	e3a03000 	mov	r3, #0
 10046ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    int count=0,dot;
 10046f0:	e3a03000 	mov	r3, #0
 10046f4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    char c,flag;
    int width,precision;
       
    while (1)
    {
       c  = nextchar(format,&index);
 10046f8:	e24b3018 	sub	r3, fp, #24
 10046fc:	e1a01003 	mov	r1, r3
 1004700:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004704:	ebfffcff 	bl	1003b08 <nextchar>
 1004708:	e1a03000 	mov	r3, r0
 100470c:	e54b300d 	strb	r3, [fp, #-13]
         
       if (c=='%')
 1004710:	e55b300d 	ldrb	r3, [fp, #-13]
 1004714:	e3530025 	cmp	r3, #37	; 0x25
 1004718:	1a000089 	bne	1004944 <alt_vfprintf+0x27c>
       {
          c = nextchar(format,&index);
 100471c:	e24b3018 	sub	r3, fp, #24
 1004720:	e1a01003 	mov	r1, r3
 1004724:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004728:	ebfffcf6 	bl	1003b08 <nextchar>
 100472c:	e1a03000 	mov	r3, r0
 1004730:	e54b300d 	strb	r3, [fp, #-13]
          if (c=='%')  
 1004734:	e55b300d 	ldrb	r3, [fp, #-13]
 1004738:	e3530025 	cmp	r3, #37	; 0x25
 100473c:	1a000005 	bne	1004758 <alt_vfprintf+0x90>
          {
            cput(pinfo,&count,c);
 1004740:	e55b200d 	ldrb	r2, [fp, #-13]
 1004744:	e24b301c 	sub	r3, fp, #28
 1004748:	e1a01003 	mov	r1, r3
 100474c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1004750:	ebfffcd1 	bl	1003a9c <cput>
            continue;
 1004754:	ea000082 	b	1004964 <alt_vfprintf+0x29c>
          }
          
          flag=0;
 1004758:	e3a03000 	mov	r3, #0
 100475c:	e54b300e 	strb	r3, [fp, #-14]
          if ((c=='-') || (c=='+') || (c==' ') || (c=='#') || (c=='0')) 
 1004760:	e55b300d 	ldrb	r3, [fp, #-13]
 1004764:	e353002d 	cmp	r3, #45	; 0x2d
 1004768:	0a00000b 	beq	100479c <alt_vfprintf+0xd4>
 100476c:	e55b300d 	ldrb	r3, [fp, #-13]
 1004770:	e353002b 	cmp	r3, #43	; 0x2b
 1004774:	0a000008 	beq	100479c <alt_vfprintf+0xd4>
 1004778:	e55b300d 	ldrb	r3, [fp, #-13]
 100477c:	e3530020 	cmp	r3, #32
 1004780:	0a000005 	beq	100479c <alt_vfprintf+0xd4>
 1004784:	e55b300d 	ldrb	r3, [fp, #-13]
 1004788:	e3530023 	cmp	r3, #35	; 0x23
 100478c:	0a000002 	beq	100479c <alt_vfprintf+0xd4>
 1004790:	e55b300d 	ldrb	r3, [fp, #-13]
 1004794:	e3530030 	cmp	r3, #48	; 0x30
 1004798:	1a000007 	bne	10047bc <alt_vfprintf+0xf4>
          {
            flag=c;
 100479c:	e55b300d 	ldrb	r3, [fp, #-13]
 10047a0:	e54b300e 	strb	r3, [fp, #-14]
            c = nextchar(format,&index);
 10047a4:	e24b3018 	sub	r3, fp, #24
 10047a8:	e1a01003 	mov	r1, r3
 10047ac:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 10047b0:	ebfffcd4 	bl	1003b08 <nextchar>
 10047b4:	e1a03000 	mov	r3, r0
 10047b8:	e54b300d 	strb	r3, [fp, #-13]
          }
          
          width=0;
 10047bc:	e3a03000 	mov	r3, #0
 10047c0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          if (c=='*')
 10047c4:	e55b300d 	ldrb	r3, [fp, #-13]
 10047c8:	e353002a 	cmp	r3, #42	; 0x2a
 10047cc:	1a00000b 	bne	1004800 <alt_vfprintf+0x138>
          {
            width=va_arg( args, int );
 10047d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 10047d4:	e2832004 	add	r2, r3, #4
 10047d8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
 10047dc:	e5933000 	ldr	r3, [r3]
 10047e0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            c = nextchar(format,&index);
 10047e4:	e24b3018 	sub	r3, fp, #24
 10047e8:	e1a01003 	mov	r1, r3
 10047ec:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 10047f0:	ebfffcc4 	bl	1003b08 <nextchar>
 10047f4:	e1a03000 	mov	r3, r0
 10047f8:	e54b300d 	strb	r3, [fp, #-13]
 10047fc:	ea000006 	b	100481c <alt_vfprintf+0x154>
          }
          else
          {          
            c = getdec(format,&index,&width,c);
 1004800:	e55b300d 	ldrb	r3, [fp, #-13]
 1004804:	e24b2020 	sub	r2, fp, #32
 1004808:	e24b1018 	sub	r1, fp, #24
 100480c:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004810:	ebfffcd2 	bl	1003b60 <getdec>
 1004814:	e1a03000 	mov	r3, r0
 1004818:	e54b300d 	strb	r3, [fp, #-13]
          }
                        
          precision=0;
 100481c:	e3a03000 	mov	r3, #0
 1004820:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          dot=0;
 1004824:	e3a03000 	mov	r3, #0
 1004828:	e50b300c 	str	r3, [fp, #-12]
          if (c=='.')
 100482c:	e55b300d 	ldrb	r3, [fp, #-13]
 1004830:	e353002e 	cmp	r3, #46	; 0x2e
 1004834:	1a00001d 	bne	10048b0 <alt_vfprintf+0x1e8>
          {
            dot=1;
 1004838:	e3a03001 	mov	r3, #1
 100483c:	e50b300c 	str	r3, [fp, #-12]
            c = nextchar(format,&index);
 1004840:	e24b3018 	sub	r3, fp, #24
 1004844:	e1a01003 	mov	r1, r3
 1004848:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 100484c:	ebfffcad 	bl	1003b08 <nextchar>
 1004850:	e1a03000 	mov	r3, r0
 1004854:	e54b300d 	strb	r3, [fp, #-13]
            if (c=='*')
 1004858:	e55b300d 	ldrb	r3, [fp, #-13]
 100485c:	e353002a 	cmp	r3, #42	; 0x2a
 1004860:	1a00000b 	bne	1004894 <alt_vfprintf+0x1cc>
            {
              precision=va_arg( args, int );
 1004864:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1004868:	e2832004 	add	r2, r3, #4
 100486c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
 1004870:	e5933000 	ldr	r3, [r3]
 1004874:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
              c = nextchar(format,&index);
 1004878:	e24b3018 	sub	r3, fp, #24
 100487c:	e1a01003 	mov	r1, r3
 1004880:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004884:	ebfffc9f 	bl	1003b08 <nextchar>
 1004888:	e1a03000 	mov	r3, r0
 100488c:	e54b300d 	strb	r3, [fp, #-13]
 1004890:	ea000006 	b	10048b0 <alt_vfprintf+0x1e8>
            }
            else
            {
              c = getdec(format,&index,&precision,c);
 1004894:	e55b300d 	ldrb	r3, [fp, #-13]
 1004898:	e24b2024 	sub	r2, fp, #36	; 0x24
 100489c:	e24b1018 	sub	r1, fp, #24
 10048a0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 10048a4:	ebfffcad 	bl	1003b60 <getdec>
 10048a8:	e1a03000 	mov	r3, r0
 10048ac:	e54b300d 	strb	r3, [fp, #-13]
            }
          }
          
          /*only l is implemented at this time*/
          length=0;
 10048b0:	e3a03000 	mov	r3, #0
 10048b4:	e50b3008 	str	r3, [fp, #-8]
          while (c=='l')
 10048b8:	ea000008 	b	10048e0 <alt_vfprintf+0x218>
          {
            length++;
 10048bc:	e51b3008 	ldr	r3, [fp, #-8]
 10048c0:	e2833001 	add	r3, r3, #1
 10048c4:	e50b3008 	str	r3, [fp, #-8]
            c=nextchar(format,&index);
 10048c8:	e24b3018 	sub	r3, fp, #24
 10048cc:	e1a01003 	mov	r1, r3
 10048d0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 10048d4:	ebfffc8b 	bl	1003b08 <nextchar>
 10048d8:	e1a03000 	mov	r3, r0
 10048dc:	e54b300d 	strb	r3, [fp, #-13]
          while (c=='l')
 10048e0:	e55b300d 	ldrb	r3, [fp, #-13]
 10048e4:	e353006c 	cmp	r3, #108	; 0x6c
 10048e8:	0afffff3 	beq	10048bc <alt_vfprintf+0x1f4>
          }
          
          if (printarg(pinfo,c,flag,width,length,precision,dot,&count,&args))
 10048ec:	e51bc020 	ldr	ip, [fp, #-32]	; 0xffffffe0
 10048f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 10048f4:	e55b000e 	ldrb	r0, [fp, #-14]
 10048f8:	e55b100d 	ldrb	r1, [fp, #-13]
 10048fc:	e24b2030 	sub	r2, fp, #48	; 0x30
 1004900:	e58d2010 	str	r2, [sp, #16]
 1004904:	e24b201c 	sub	r2, fp, #28
 1004908:	e58d200c 	str	r2, [sp, #12]
 100490c:	e51b200c 	ldr	r2, [fp, #-12]
 1004910:	e58d2008 	str	r2, [sp, #8]
 1004914:	e58d3004 	str	r3, [sp, #4]
 1004918:	e51b3008 	ldr	r3, [fp, #-8]
 100491c:	e58d3000 	str	r3, [sp]
 1004920:	e1a0300c 	mov	r3, ip
 1004924:	e1a02000 	mov	r2, r0
 1004928:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100492c:	ebfffd5e 	bl	1003eac <printarg>
 1004930:	e1a03000 	mov	r3, r0
 1004934:	e3530000 	cmp	r3, #0
 1004938:	0a000006 	beq	1004958 <alt_vfprintf+0x290>
          {
            return -1;
 100493c:	e3e03000 	mvn	r3, #0
 1004940:	ea00000a 	b	1004970 <alt_vfprintf+0x2a8>
          }            
       }
       else 
       {
         cput(pinfo,&count,c);
 1004944:	e55b200d 	ldrb	r2, [fp, #-13]
 1004948:	e24b301c 	sub	r3, fp, #28
 100494c:	e1a01003 	mov	r1, r3
 1004950:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1004954:	ebfffc50 	bl	1003a9c <cput>
       }
       
       if (c==0)
 1004958:	e55b300d 	ldrb	r3, [fp, #-13]
 100495c:	e3530000 	cmp	r3, #0
 1004960:	0a000000 	beq	1004968 <alt_vfprintf+0x2a0>
       c  = nextchar(format,&index);
 1004964:	eaffff63 	b	10046f8 <alt_vfprintf+0x30>
       {
         break;
 1004968:	e320f000 	nop	{0}
       }
    }
    
    return count;
 100496c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
 1004970:	e1a00003 	mov	r0, r3
 1004974:	e24bd004 	sub	sp, fp, #4
 1004978:	e8bd8800 	pop	{fp, pc}

0100497c <uart_putc>:
FILE * term0 = (FILE *) &term0_info;
static UART_INFO_t term1_info = { uart_putc, 0, ALT_16550_DEVICE_SOCFPGA_UART1 };
FILE * term1 = (FILE *) &term1_info;

static void uart_putc(char pchar, FILE *info)
{
 100497c:	e92d4800 	push	{fp, lr}
 1004980:	e28db004 	add	fp, sp, #4
 1004984:	e24dd010 	sub	sp, sp, #16
 1004988:	e1a03000 	mov	r3, r0
 100498c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 1004990:	e54b300d 	strb	r3, [fp, #-13]
  UART_INFO_t *port_info = (UART_INFO_t *) info;
 1004994:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004998:	e50b3008 	str	r3, [fp, #-8]

  if (!port_info->init_done)
 100499c:	e51b3008 	ldr	r3, [fp, #-8]
 10049a0:	e5933004 	ldr	r3, [r3, #4]
 10049a4:	e3530000 	cmp	r3, #0
 10049a8:	1a000004 	bne	10049c0 <uart_putc+0x44>
  {
    port_info->init_done = 1;
 10049ac:	e51b3008 	ldr	r3, [fp, #-8]
 10049b0:	e3a02001 	mov	r2, #1
 10049b4:	e5832004 	str	r2, [r3, #4]
    init_uart(port_info);
 10049b8:	e51b0008 	ldr	r0, [fp, #-8]
 10049bc:	eb00000e 	bl	10049fc <init_uart>
  }

  if (pchar=='\n') uart_putc('\r', info);
 10049c0:	e55b300d 	ldrb	r3, [fp, #-13]
 10049c4:	e353000a 	cmp	r3, #10
 10049c8:	1a000002 	bne	10049d8 <uart_putc+0x5c>
 10049cc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 10049d0:	e3a0000d 	mov	r0, #13
 10049d4:	ebffffe8 	bl	100497c <uart_putc>
  alt_16550_fifo_write_safe(&port_info->mUart, &pchar, 1, 1); 
 10049d8:	e51b3008 	ldr	r3, [fp, #-8]
 10049dc:	e283000c 	add	r0, r3, #12
 10049e0:	e24b100d 	sub	r1, fp, #13
 10049e4:	e3a03001 	mov	r3, #1
 10049e8:	e3a02001 	mov	r2, #1
 10049ec:	ebfff3f1 	bl	10019b8 <alt_16550_fifo_write_safe>

}
 10049f0:	e320f000 	nop	{0}
 10049f4:	e24bd004 	sub	sp, fp, #4
 10049f8:	e8bd8800 	pop	{fp, pc}

010049fc <init_uart>:

static ALT_STATUS_CODE init_uart(UART_INFO_t *uartInfo)
{
 10049fc:	e92d4800 	push	{fp, lr}
 1004a00:	e28db004 	add	fp, sp, #4
 1004a04:	e24dd010 	sub	sp, sp, #16
 1004a08:	e50b0010 	str	r0, [fp, #-16]
    uint32_t uart_location = 0;
 1004a0c:	e3a03000 	mov	r3, #0
 1004a10:	e50b300c 	str	r3, [fp, #-12]
    ALT_STATUS_CODE status;

    status = alt_16550_init( uartInfo->uart_ID, 
 1004a14:	e51b3010 	ldr	r3, [fp, #-16]
 1004a18:	e1d300b8 	ldrh	r0, [r3, #8]
 1004a1c:	e51b3010 	ldr	r3, [fp, #-16]
 1004a20:	e283300c 	add	r3, r3, #12
 1004a24:	e24b100c 	sub	r1, fp, #12
 1004a28:	e3a0200c 	mov	r2, #12
 1004a2c:	ebfff338 	bl	1001714 <alt_16550_init>
 1004a30:	e50b0008 	str	r0, [fp, #-8]
                             (void *)&uart_location, 
                             ALT_CLK_L4_SP, 
                             &uartInfo->mUart);

    if (status == ALT_E_SUCCESS)
 1004a34:	e51b3008 	ldr	r3, [fp, #-8]
 1004a38:	e3530000 	cmp	r3, #0
 1004a3c:	1a000006 	bne	1004a5c <init_uart+0x60>
    {   
        status = alt_16550_baudrate_set(&uartInfo->mUart, BAUD_RATE); 
 1004a40:	e51b3010 	ldr	r3, [fp, #-16]
 1004a44:	e283300c 	add	r3, r3, #12
 1004a48:	e3a01cc2 	mov	r1, #49664	; 0xc200
 1004a4c:	e3401001 	movt	r1, #1
 1004a50:	e1a00003 	mov	r0, r3
 1004a54:	ebfff427 	bl	1001af8 <alt_16550_baudrate_set>
 1004a58:	e50b0008 	str	r0, [fp, #-8]
    }

    if (status == ALT_E_SUCCESS)
 1004a5c:	e51b3008 	ldr	r3, [fp, #-8]
 1004a60:	e3530000 	cmp	r3, #0
 1004a64:	1a000006 	bne	1004a84 <init_uart+0x88>
    {
        status = alt_16550_line_config_set(&uartInfo->mUart,  
 1004a68:	e51b3010 	ldr	r3, [fp, #-16]
 1004a6c:	e283000c 	add	r0, r3, #12
 1004a70:	e3a03000 	mov	r3, #0
 1004a74:	e3a02000 	mov	r2, #0
 1004a78:	e3a01003 	mov	r1, #3
 1004a7c:	ebfff484 	bl	1001c94 <alt_16550_line_config_set>
 1004a80:	e50b0008 	str	r0, [fp, #-8]
                                             ALT_16550_DATABITS_8, 
                                             ALT_16550_PARITY_DISABLE, 
                                             ALT_16550_STOPBITS_1); 
    }
    
    if (status == ALT_E_SUCCESS)
 1004a84:	e51b3008 	ldr	r3, [fp, #-8]
 1004a88:	e3530000 	cmp	r3, #0
 1004a8c:	1a000004 	bne	1004aa4 <init_uart+0xa8>
    {
        status = alt_16550_fifo_enable(&uartInfo->mUart);
 1004a90:	e51b3010 	ldr	r3, [fp, #-16]
 1004a94:	e283300c 	add	r3, r3, #12
 1004a98:	e1a00003 	mov	r0, r3
 1004a9c:	ebfff385 	bl	10018b8 <alt_16550_fifo_enable>
 1004aa0:	e50b0008 	str	r0, [fp, #-8]
    }

    if (status == ALT_E_SUCCESS)
 1004aa4:	e51b3008 	ldr	r3, [fp, #-8]
 1004aa8:	e3530000 	cmp	r3, #0
 1004aac:	1a000004 	bne	1004ac4 <init_uart+0xc8>
    {
        status = alt_16550_enable(&uartInfo->mUart);
 1004ab0:	e51b3010 	ldr	r3, [fp, #-16]
 1004ab4:	e283300c 	add	r3, r3, #12
 1004ab8:	e1a00003 	mov	r0, r3
 1004abc:	ebfff36b 	bl	1001870 <alt_16550_enable>
 1004ac0:	e50b0008 	str	r0, [fp, #-8]
    }
    return status;
 1004ac4:	e51b3008 	ldr	r3, [fp, #-8]
}
 1004ac8:	e1a00003 	mov	r0, r3
 1004acc:	e24bd004 	sub	sp, fp, #4
 1004ad0:	e8bd8800 	pop	{fp, pc}

01004ad4 <init_data>:
#include "arm_mem_regions.h"
#include "shared_ipc.h"


static inline void init_data(void)
{
 1004ad4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004ad8:	e28db000 	add	fp, sp, #0
 1004adc:	e24dd00c 	sub	sp, sp, #12
    extern uint8_t __data_start__;
    extern uint8_t __data_end__;
    extern uint8_t __data_load__;

    const uint8_t *src = &__data_load__;
 1004ae0:	e3053984 	movw	r3, #22916	; 0x5984
 1004ae4:	e3403100 	movt	r3, #256	; 0x100
 1004ae8:	e50b3008 	str	r3, [fp, #-8]
    for (uint8_t *dst = &__data_start__; dst < &__data_end__; ++dst, ++src) {
 1004aec:	e3053984 	movw	r3, #22916	; 0x5984
 1004af0:	e3403100 	movt	r3, #256	; 0x100
 1004af4:	e50b300c 	str	r3, [fp, #-12]
 1004af8:	ea000009 	b	1004b24 <init_data+0x50>
        *dst = *src;
 1004afc:	e51b3008 	ldr	r3, [fp, #-8]
 1004b00:	e5d32000 	ldrb	r2, [r3]
 1004b04:	e51b300c 	ldr	r3, [fp, #-12]
 1004b08:	e5c32000 	strb	r2, [r3]
    for (uint8_t *dst = &__data_start__; dst < &__data_end__; ++dst, ++src) {
 1004b0c:	e51b300c 	ldr	r3, [fp, #-12]
 1004b10:	e2833001 	add	r3, r3, #1
 1004b14:	e50b300c 	str	r3, [fp, #-12]
 1004b18:	e51b3008 	ldr	r3, [fp, #-8]
 1004b1c:	e2833001 	add	r3, r3, #1
 1004b20:	e50b3008 	str	r3, [fp, #-8]
 1004b24:	e51b200c 	ldr	r2, [fp, #-12]
 1004b28:	e30539b8 	movw	r3, #22968	; 0x59b8
 1004b2c:	e3403100 	movt	r3, #256	; 0x100
 1004b30:	e1520003 	cmp	r2, r3
 1004b34:	3afffff0 	bcc	1004afc <init_data+0x28>
    }
}
 1004b38:	e320f000 	nop	{0}
 1004b3c:	e320f000 	nop	{0}
 1004b40:	e28bd000 	add	sp, fp, #0
 1004b44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004b48:	e12fff1e 	bx	lr

01004b4c <zero_bss>:


static inline void zero_bss(void)
{
 1004b4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004b50:	e28db000 	add	fp, sp, #0
 1004b54:	e24dd00c 	sub	sp, sp, #12
    extern uint8_t __bss_start__;
    extern uint8_t __bss_end__;
    for (uint8_t *p = &__bss_start__; p < &__bss_end__; ++p) *p = 0;
 1004b58:	e3083000 	movw	r3, #32768	; 0x8000
 1004b5c:	e3403100 	movt	r3, #256	; 0x100
 1004b60:	e50b3008 	str	r3, [fp, #-8]
 1004b64:	ea000005 	b	1004b80 <zero_bss+0x34>
 1004b68:	e51b3008 	ldr	r3, [fp, #-8]
 1004b6c:	e3a02000 	mov	r2, #0
 1004b70:	e5c32000 	strb	r2, [r3]
 1004b74:	e51b3008 	ldr	r3, [fp, #-8]
 1004b78:	e2833001 	add	r3, r3, #1
 1004b7c:	e50b3008 	str	r3, [fp, #-8]
 1004b80:	e51b2008 	ldr	r2, [fp, #-8]
 1004b84:	e30c3018 	movw	r3, #49176	; 0xc018
 1004b88:	e3403101 	movt	r3, #257	; 0x101
 1004b8c:	e1520003 	cmp	r2, r3
 1004b90:	3afffff4 	bcc	1004b68 <zero_bss+0x1c>
}
 1004b94:	e320f000 	nop	{0}
 1004b98:	e320f000 	nop	{0}
 1004b9c:	e28bd000 	add	sp, fp, #0
 1004ba0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004ba4:	e12fff1e 	bx	lr

01004ba8 <set_vbar>:

extern char _vectors;  // dichiarazione simbolo dal linker/HWLIB
static inline void set_vbar(void *addr) {
 1004ba8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004bac:	e28db000 	add	fp, sp, #0
 1004bb0:	e24dd00c 	sub	sp, sp, #12
 1004bb4:	e50b0008 	str	r0, [fp, #-8]
    __asm__ volatile ("mcr p15,0,%0,c12,c0,0" :: "r"(addr) : "memory");
 1004bb8:	e51b3008 	ldr	r3, [fp, #-8]
 1004bbc:	ee0c3f10 	mcr	15, 0, r3, cr12, cr0, {0}
    __asm__ volatile ("isb");
 1004bc0:	f57ff06f 	isb	sy
}
 1004bc4:	e320f000 	nop	{0}
 1004bc8:	e28bd000 	add	sp, fp, #0
 1004bcc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004bd0:	e12fff1e 	bx	lr

01004bd4 <core1_main>:


void core1_main(void)
{
 1004bd4:	e92d4800 	push	{fp, lr}
 1004bd8:	e28db004 	add	fp, sp, #4
	set_vbar(&_vectors);
 1004bdc:	e3000000 	movw	r0, #0
 1004be0:	e3400100 	movt	r0, #256	; 0x100
 1004be4:	ebffffef 	bl	1004ba8 <set_vbar>
	init_data();
 1004be8:	ebffffb9 	bl	1004ad4 <init_data>
    zero_bss();
 1004bec:	ebffffd6 	bl	1004b4c <zero_bss>

    // MMU di Core1 (crea le regioni: DDR WBWA + SHM NON-CACHEABLE + Device)
    (void)arm_mmu_setup_core1();
 1004bf0:	eb00013d 	bl	10050ec <arm_mmu_setup_core1>
    // in alternativa, re-inizializza uart1 qui)
    // Il binary di Core1 ha una propria copia di uart_stdio.c, quindi
    // deve inizializzare il relativo handle della UART prima di usare
    // printf. Reinizializzare la periferica Ã¨ sicuro e consente di
    // condividere la stessa UART con Core0.
    (void)uart_stdio_init_uart1(115200);
 1004bf4:	e3a00cc2 	mov	r0, #49664	; 0xc200
 1004bf8:	e3400001 	movt	r0, #1
 1004bfc:	eb000149 	bl	1005128 <uart_stdio_init_uart1>

    // Attendi che Core0 abbia inizializzato tutto e âapertoâ lâhandshake
    while (SHM_CTRL->magic != SHM_MAGIC_BOOT) { /* spin */ }
 1004c00:	e320f000 	nop	{0}
 1004c04:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004c08:	e5932000 	ldr	r2, [r3]
 1004c0c:	e3013dea 	movw	r3, #7658	; 0x1dea
 1004c10:	e34c30de 	movt	r3, #49374	; 0xc0de
 1004c14:	e1520003 	cmp	r2, r3
 1004c18:	1afffff9 	bne	1004c04 <core1_main+0x30>
    while (SHM_CTRL->core0_ready != 1u)        { /* spin */ }
 1004c1c:	e320f000 	nop	{0}
 1004c20:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004c24:	e5933004 	ldr	r3, [r3, #4]
 1004c28:	e3530001 	cmp	r3, #1
 1004c2c:	1afffffb 	bne	1004c20 <core1_main+0x4c>

    // Saluta e dichiara âreadyâ

    printf("\n\rHello from HPS - Core 1. SHM @ 0x");
 1004c30:	e30508c4 	movw	r0, #22724	; 0x58c4
 1004c34:	e3400100 	movt	r0, #256	; 0x100
 1004c38:	eb000057 	bl	1004d9c <printf>
    (void)uart_stdio_write_hex32((uint32_t)SHM_BASE);
 1004c3c:	e3a0043f 	mov	r0, #1056964608	; 0x3f000000
 1004c40:	eb000199 	bl	10052ac <uart_stdio_write_hex32>
    printf(" - Now it's ready.");
 1004c44:	e30508e8 	movw	r0, #22760	; 0x58e8
 1004c48:	e3400100 	movt	r0, #256	; 0x100
 1004c4c:	eb000052 	bl	1004d9c <printf>
    SHM_CTRL->core1_ready = 1u;
 1004c50:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004c54:	e5d32008 	ldrb	r2, [r3, #8]
 1004c58:	e3a02000 	mov	r2, #0
 1004c5c:	e3822001 	orr	r2, r2, #1
 1004c60:	e5c32008 	strb	r2, [r3, #8]
 1004c64:	e5d32009 	ldrb	r2, [r3, #9]
 1004c68:	e3a02000 	mov	r2, #0
 1004c6c:	e5c32009 	strb	r2, [r3, #9]
 1004c70:	e5d3200a 	ldrb	r2, [r3, #10]
 1004c74:	e3a02000 	mov	r2, #0
 1004c78:	e5c3200a 	strb	r2, [r3, #10]
 1004c7c:	e5d3200b 	ldrb	r2, [r3, #11]
 1004c80:	e3a02000 	mov	r2, #0
 1004c84:	e5c3200b 	strb	r2, [r3, #11]
    __asm__ volatile("dmb sy" ::: "memory");
 1004c88:	f57ff05f 	dmb	sy

    // Esempio dâuso: aggiorna un contatore condiviso
    for (;;) {
        SHM_CTRL->trig_count++;
 1004c8c:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004c90:	e593200c 	ldr	r2, [r3, #12]
 1004c94:	e2822001 	add	r2, r2, #1
 1004c98:	e583200c 	str	r2, [r3, #12]
        __asm__ volatile("dmb sy" ::: "memory");
 1004c9c:	f57ff05f 	dmb	sy
        SHM_CTRL->trig_count++;
 1004ca0:	eafffff9 	b	1004c8c <core1_main+0xb8>

01004ca4 <memset>:

#undef printf
#undef vprintf

void *memset(void *s, int c, size_t n)
{
 1004ca4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004ca8:	e28db000 	add	fp, sp, #0
 1004cac:	e24dd01c 	sub	sp, sp, #28
 1004cb0:	e50b0010 	str	r0, [fp, #-16]
 1004cb4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 1004cb8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint8_t *p = (uint8_t *)s;
 1004cbc:	e51b3010 	ldr	r3, [fp, #-16]
 1004cc0:	e50b300c 	str	r3, [fp, #-12]
    for (size_t i = 0; i < n; ++i) p[i] = (uint8_t)c;
 1004cc4:	e3a03000 	mov	r3, #0
 1004cc8:	e50b3008 	str	r3, [fp, #-8]
 1004ccc:	ea000008 	b	1004cf4 <memset+0x50>
 1004cd0:	e51b200c 	ldr	r2, [fp, #-12]
 1004cd4:	e51b3008 	ldr	r3, [fp, #-8]
 1004cd8:	e0823003 	add	r3, r2, r3
 1004cdc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1004ce0:	e6ef2072 	uxtb	r2, r2
 1004ce4:	e5c32000 	strb	r2, [r3]
 1004ce8:	e51b3008 	ldr	r3, [fp, #-8]
 1004cec:	e2833001 	add	r3, r3, #1
 1004cf0:	e50b3008 	str	r3, [fp, #-8]
 1004cf4:	e51b2008 	ldr	r2, [fp, #-8]
 1004cf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004cfc:	e1520003 	cmp	r2, r3
 1004d00:	3afffff2 	bcc	1004cd0 <memset+0x2c>
    return s;
 1004d04:	e51b3010 	ldr	r3, [fp, #-16]
}
 1004d08:	e1a00003 	mov	r0, r3
 1004d0c:	e28bd000 	add	sp, fp, #0
 1004d10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004d14:	e12fff1e 	bx	lr

01004d18 <memcpy>:

void *memcpy(void *dst, const void *src, size_t n)
{
 1004d18:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004d1c:	e28db000 	add	fp, sp, #0
 1004d20:	e24dd024 	sub	sp, sp, #36	; 0x24
 1004d24:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1004d28:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 1004d2c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    uint8_t *d = (uint8_t *)dst;
 1004d30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004d34:	e50b300c 	str	r3, [fp, #-12]
    const uint8_t *s = (const uint8_t *)src;
 1004d38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004d3c:	e50b3010 	str	r3, [fp, #-16]
    for (size_t i = 0; i < n; ++i) d[i] = s[i];
 1004d40:	e3a03000 	mov	r3, #0
 1004d44:	e50b3008 	str	r3, [fp, #-8]
 1004d48:	ea00000a 	b	1004d78 <memcpy+0x60>
 1004d4c:	e51b2010 	ldr	r2, [fp, #-16]
 1004d50:	e51b3008 	ldr	r3, [fp, #-8]
 1004d54:	e0822003 	add	r2, r2, r3
 1004d58:	e51b100c 	ldr	r1, [fp, #-12]
 1004d5c:	e51b3008 	ldr	r3, [fp, #-8]
 1004d60:	e0813003 	add	r3, r1, r3
 1004d64:	e5d22000 	ldrb	r2, [r2]
 1004d68:	e5c32000 	strb	r2, [r3]
 1004d6c:	e51b3008 	ldr	r3, [fp, #-8]
 1004d70:	e2833001 	add	r3, r3, #1
 1004d74:	e50b3008 	str	r3, [fp, #-8]
 1004d78:	e51b2008 	ldr	r2, [fp, #-8]
 1004d7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1004d80:	e1520003 	cmp	r2, r3
 1004d84:	3afffff0 	bcc	1004d4c <memcpy+0x34>
    return dst;
 1004d88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
 1004d8c:	e1a00003 	mov	r0, r3
 1004d90:	e28bd000 	add	sp, fp, #0
 1004d94:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004d98:	e12fff1e 	bx	lr

01004d9c <printf>:
{
    return alt_vfprintf(DEFAULT_TERM, format, args);
}

int printf(const char *format, ...)
{
 1004d9c:	e92d000f 	push	{r0, r1, r2, r3}
 1004da0:	e92d4800 	push	{fp, lr}
 1004da4:	e28db004 	add	fp, sp, #4
 1004da8:	e24dd008 	sub	sp, sp, #8
    va_list args;
    va_start(args, format);
 1004dac:	e28b3008 	add	r3, fp, #8
 1004db0:	e50b300c 	str	r3, [fp, #-12]
    int rc = alt_vfprintf(DEFAULT_TERM, format, args);
 1004db4:	e30539a8 	movw	r3, #22952	; 0x59a8
 1004db8:	e3403100 	movt	r3, #256	; 0x100
 1004dbc:	e5933000 	ldr	r3, [r3]
 1004dc0:	e51b200c 	ldr	r2, [fp, #-12]
 1004dc4:	e59b1004 	ldr	r1, [fp, #4]
 1004dc8:	e1a00003 	mov	r0, r3
 1004dcc:	ebfffe3d 	bl	10046c8 <alt_vfprintf>
 1004dd0:	e50b0008 	str	r0, [fp, #-8]
    va_end(args);
    return rc;
 1004dd4:	e51b3008 	ldr	r3, [fp, #-8]
}
 1004dd8:	e1a00003 	mov	r0, r3
 1004ddc:	e24bd004 	sub	sp, fp, #4
 1004de0:	e8bd4800 	pop	{fp, lr}
 1004de4:	e28dd010 	add	sp, sp, #16
 1004de8:	e12fff1e 	bx	lr

01004dec <dsb>:

// ---------------------------
// Helpers CP15 / barriere
// ---------------------------
static inline void dmb(void){ __asm__ volatile("dmb sy" ::: "memory"); }
static inline void dsb(void){ __asm__ volatile("dsb sy" ::: "memory"); }
 1004dec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004df0:	e28db000 	add	fp, sp, #0
 1004df4:	f57ff04f 	dsb	sy
 1004df8:	e320f000 	nop	{0}
 1004dfc:	e28bd000 	add	sp, fp, #0
 1004e00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004e04:	e12fff1e 	bx	lr

01004e08 <isb>:
static inline void isb(void){ __asm__ volatile("isb" ::: "memory"); }
 1004e08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004e0c:	e28db000 	add	fp, sp, #0
 1004e10:	f57ff06f 	isb	sy
 1004e14:	e320f000 	nop	{0}
 1004e18:	e28bd000 	add	sp, fp, #0
 1004e1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004e20:	e12fff1e 	bx	lr

01004e24 <a9_sanitize_before_mmu>:


// Disabilita MMU/I/D/BP e invalida TLB (presume IRQ/FIQ OFF e VBAR giÃ  ok)
static inline void a9_sanitize_before_mmu(void)
{
 1004e24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004e28:	e28db000 	add	fp, sp, #0
 1004e2c:	e24dd00c 	sub	sp, sp, #12
    // qui presumiamo giÃ  IRQ/FIQ disabilitati (cpsid if) e VBAR corretto
    uint32_t sctlr;
    __asm__ volatile("mrc p15,0,%0,c1,c0,0" : "=r"(sctlr));
 1004e30:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
 1004e34:	e50b3008 	str	r3, [fp, #-8]

    // spegni MMU (M), D-cache (C), I-cache (I), Branch predictor (Z)
    sctlr &= ~( (1u<<0) | (1u<<2) | (1u<<12) | (1u<<11) );
 1004e38:	e51b3008 	ldr	r3, [fp, #-8]
 1004e3c:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
 1004e40:	e3c33005 	bic	r3, r3, #5
 1004e44:	e50b3008 	str	r3, [fp, #-8]
    __asm__ volatile("mcr p15,0,%0,c1,c0,0" :: "r"(sctlr));
 1004e48:	e51b3008 	ldr	r3, [fp, #-8]
 1004e4c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    __asm__ volatile("dsb sy; isb");
 1004e50:	f57ff04f 	dsb	sy
 1004e54:	f57ff06f 	isb	sy

    // invalida TLB unificati
    __asm__ volatile("mcr p15,0,%0,c8,c7,0" :: "r"(0));
 1004e58:	e3a03000 	mov	r3, #0
 1004e5c:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    __asm__ volatile("dsb sy; isb");
 1004e60:	f57ff04f 	dsb	sy
 1004e64:	f57ff06f 	isb	sy
}
 1004e68:	e320f000 	nop	{0}
 1004e6c:	e28bd000 	add	sp, fp, #0
 1004e70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004e74:	e12fff1e 	bx	lr

01004e78 <arm_enable_smp_and_scu>:

// Abilita SMP + SCU (prima di accendere cache/MMU)
void arm_enable_smp_and_scu(void)
{
 1004e78:	e92d4800 	push	{fp, lr}
 1004e7c:	e28db004 	add	fp, sp, #4
 1004e80:	e24dd010 	sub	sp, sp, #16
    uint32_t actlr;
    __asm__ volatile("mrc p15,0,%0,c1,c0,1":"=r"(actlr));
 1004e84:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
 1004e88:	e50b3008 	str	r3, [fp, #-8]
    actlr |= (1u<<6); // ACTLR.SMP=1
 1004e8c:	e51b3008 	ldr	r3, [fp, #-8]
 1004e90:	e3833040 	orr	r3, r3, #64	; 0x40
 1004e94:	e50b3008 	str	r3, [fp, #-8]
    __asm__ volatile("mcr p15,0,%0,c1,c0,1"::"r"(actlr));
 1004e98:	e51b3008 	ldr	r3, [fp, #-8]
 1004e9c:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    dsb(); isb();
 1004ea0:	ebffffd1 	bl	1004dec <dsb>
 1004ea4:	ebffffd7 	bl	1004e08 <isb>
     * prova ad accedere ai registri privati della SCU.  In tal caso occorre
     * abilitare la SCU esclusivamente dal core 0, mentre Ã¨ comunque necessario
     * impostare il bit SMP sugli altri core.
    */
    uint32_t mpidr;
    __asm__ volatile("mrc p15,0,%0,c0,c0,5" : "=r"(mpidr));
 1004ea8:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
 1004eac:	e50b300c 	str	r3, [fp, #-12]
    if ((mpidr & 0x3u) == 0u) {
 1004eb0:	e51b300c 	ldr	r3, [fp, #-12]
 1004eb4:	e2033003 	and	r3, r3, #3
 1004eb8:	e3530000 	cmp	r3, #0
 1004ebc:	1a00000d 	bne	1004ef8 <arm_enable_smp_and_scu+0x80>
    	volatile uint32_t *SCU_CTRL = (volatile uint32_t *)(uintptr_t)(A9_SCU_BASE + 0x00u);
 1004ec0:	e3a03903 	mov	r3, #49152	; 0xc000
 1004ec4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 1004ec8:	e50b3010 	str	r3, [fp, #-16]
        uint32_t val = *SCU_CTRL;
 1004ecc:	e51b3010 	ldr	r3, [fp, #-16]
 1004ed0:	e5933000 	ldr	r3, [r3]
 1004ed4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        val |= 1u; // enable SCU
 1004ed8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004edc:	e3833001 	orr	r3, r3, #1
 1004ee0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        *SCU_CTRL = val;
 1004ee4:	e51b3010 	ldr	r3, [fp, #-16]
 1004ee8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1004eec:	e5832000 	str	r2, [r3]
        dsb(); isb();
 1004ef0:	ebffffbd 	bl	1004dec <dsb>
 1004ef4:	ebffffc3 	bl	1004e08 <isb>
    }
}
 1004ef8:	e320f000 	nop	{0}
 1004efc:	e24bd004 	sub	sp, fp, #4
 1004f00:	e8bd8800 	pop	{fp, pc}

01004f04 <mmu_aux_alloc>:
static uint8_t   s_mmu_aux_pool[64 * 1024] __attribute__((aligned(16384)));
static mmu_pool_t s_mmu_pool = { s_mmu_aux_pool, sizeof(s_mmu_aux_pool), 0 };

/* Allocatore con la FIRMA CORRETTA: (const unsigned int size, void *user_ctx) */
static void *mmu_aux_alloc(const unsigned int size, void *user_ctx)
{
 1004f04:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004f08:	e28db000 	add	fp, sp, #0
 1004f0c:	e24dd01c 	sub	sp, sp, #28
 1004f10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1004f14:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mmu_pool_t *pool = (mmu_pool_t *)user_ctx;
 1004f18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004f1c:	e50b3008 	str	r3, [fp, #-8]
    if (!pool) return NULL;
 1004f20:	e51b3008 	ldr	r3, [fp, #-8]
 1004f24:	e3530000 	cmp	r3, #0
 1004f28:	1a000001 	bne	1004f34 <mmu_aux_alloc+0x30>
 1004f2c:	e3a03000 	mov	r3, #0
 1004f30:	ea000023 	b	1004fc4 <mmu_aux_alloc+0xc0>

    /* Allineo a 16KB per richieste grandi (TTB), altrimenti 64B */
    const size_t align = (size >= 16384u) ? 16384u : 64u;
 1004f34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004f38:	e3530901 	cmp	r3, #16384	; 0x4000
 1004f3c:	3a000001 	bcc	1004f48 <mmu_aux_alloc+0x44>
 1004f40:	e3a03901 	mov	r3, #16384	; 0x4000
 1004f44:	ea000000 	b	1004f4c <mmu_aux_alloc+0x48>
 1004f48:	e3a03040 	mov	r3, #64	; 0x40
 1004f4c:	e50b300c 	str	r3, [fp, #-12]
    size_t off = (pool->off + (align - 1u)) & ~(align - 1u);
 1004f50:	e51b3008 	ldr	r3, [fp, #-8]
 1004f54:	e5932008 	ldr	r2, [r3, #8]
 1004f58:	e51b300c 	ldr	r3, [fp, #-12]
 1004f5c:	e0823003 	add	r3, r2, r3
 1004f60:	e2432001 	sub	r2, r3, #1
 1004f64:	e51b300c 	ldr	r3, [fp, #-12]
 1004f68:	e2633000 	rsb	r3, r3, #0
 1004f6c:	e0033002 	and	r3, r3, r2
 1004f70:	e50b3010 	str	r3, [fp, #-16]

    if (off + size > pool->size) return NULL;
 1004f74:	e51b2010 	ldr	r2, [fp, #-16]
 1004f78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004f7c:	e0822003 	add	r2, r2, r3
 1004f80:	e51b3008 	ldr	r3, [fp, #-8]
 1004f84:	e5933004 	ldr	r3, [r3, #4]
 1004f88:	e1520003 	cmp	r2, r3
 1004f8c:	9a000001 	bls	1004f98 <mmu_aux_alloc+0x94>
 1004f90:	e3a03000 	mov	r3, #0
 1004f94:	ea00000a 	b	1004fc4 <mmu_aux_alloc+0xc0>

    void *ptr = pool->base + off;
 1004f98:	e51b3008 	ldr	r3, [fp, #-8]
 1004f9c:	e5932000 	ldr	r2, [r3]
 1004fa0:	e51b3010 	ldr	r3, [fp, #-16]
 1004fa4:	e0823003 	add	r3, r2, r3
 1004fa8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pool->off = off + size;
 1004fac:	e51b2010 	ldr	r2, [fp, #-16]
 1004fb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004fb4:	e0822003 	add	r2, r2, r3
 1004fb8:	e51b3008 	ldr	r3, [fp, #-8]
 1004fbc:	e5832008 	str	r2, [r3, #8]
    return ptr;
 1004fc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
 1004fc4:	e1a00003 	mov	r0, r3
 1004fc8:	e28bd000 	add	sp, fp, #0
 1004fcc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004fd0:	e12fff1e 	bx	lr

01004fd4 <create_va_space_core1_ddr>:


// VA space per CORE1: Shared low DDR + DDR privata core1 + SHM non-cache + periferiche HPS.
static ALT_STATUS_CODE create_va_space_core1_ddr(uint32_t **ttb_out)
{
 1004fd4:	e92d4800 	push	{fp, lr}
 1004fd8:	e28db004 	add	fp, sp, #4
 1004fdc:	e24dd070 	sub	sp, sp, #112	; 0x70
 1004fe0:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98
    ALT_STATUS_CODE s = alt_mmu_init();
 1004fe4:	ebfff3be 	bl	1001ee4 <alt_mmu_init>
 1004fe8:	e50b0008 	str	r0, [fp, #-8]
    if (s != ALT_E_SUCCESS) return s;
 1004fec:	e51b3008 	ldr	r3, [fp, #-8]
 1004ff0:	e3530000 	cmp	r3, #0
 1004ff4:	0a000001 	beq	1005000 <create_va_space_core1_ddr+0x2c>
 1004ff8:	e51b3008 	ldr	r3, [fp, #-8]
 1004ffc:	ea000037 	b	10050e0 <create_va_space_core1_ddr+0x10c>

    s_mmu_pool.off = 0;
 1005000:	e30539ac 	movw	r3, #22956	; 0x59ac
 1005004:	e3403100 	movt	r3, #256	; 0x100
 1005008:	e3a02000 	mov	r2, #0
 100500c:	e5832008 	str	r2, [r3, #8]

    ALT_MMU_MEM_REGION_t regions[] = {
 1005010:	e30538fc 	movw	r3, #22780	; 0x58fc
 1005014:	e3403100 	movt	r3, #256	; 0x100
 1005018:	e24b0060 	sub	r0, fp, #96	; 0x60
 100501c:	e1a01003 	mov	r1, r3
 1005020:	e3a03050 	mov	r3, #80	; 0x50
 1005024:	e1a02003 	mov	r2, r3
 1005028:	ebffff3a 	bl	1004d18 <memcpy>
            .execute    = ALT_MMU_TTB_XN_ENABLE,
            .security   = ALT_MMU_TTB_NS_SECURE
        }
    };

    size_t region_count = sizeof(regions)/sizeof(regions[0]);
 100502c:	e3a03004 	mov	r3, #4
 1005030:	e50b300c 	str	r3, [fp, #-12]
    size_t need = alt_mmu_va_space_storage_required(regions, region_count);
 1005034:	e24b3060 	sub	r3, fp, #96	; 0x60
 1005038:	e51b100c 	ldr	r1, [fp, #-12]
 100503c:	e1a00003 	mov	r0, r3
 1005040:	ebfff573 	bl	1002614 <alt_mmu_va_space_storage_required>
 1005044:	e50b0010 	str	r0, [fp, #-16]
    if (need > sizeof(s_ttb_storage)) return ALT_E_BAD_ARG;
 1005048:	e51b3010 	ldr	r3, [fp, #-16]
 100504c:	e3530801 	cmp	r3, #65536	; 0x10000
 1005050:	9a000001 	bls	100505c <create_va_space_core1_ddr+0x88>
 1005054:	e3e03008 	mvn	r3, #8
 1005058:	ea000020 	b	10050e0 <create_va_space_core1_ddr+0x10c>

    uint32_t *ttb1 = NULL;
 100505c:	e3a03000 	mov	r3, #0
 1005060:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    s = alt_mmu_va_space_create(&ttb1, regions, region_count,
 1005064:	e24b1060 	sub	r1, fp, #96	; 0x60
 1005068:	e24b0064 	sub	r0, fp, #100	; 0x64
 100506c:	e30539ac 	movw	r3, #22956	; 0x59ac
 1005070:	e3403100 	movt	r3, #256	; 0x100
 1005074:	e58d3000 	str	r3, [sp]
 1005078:	e3043f04 	movw	r3, #20228	; 0x4f04
 100507c:	e3403100 	movt	r3, #256	; 0x100
 1005080:	e51b200c 	ldr	r2, [fp, #-12]
 1005084:	ebfff6bf 	bl	1002b88 <alt_mmu_va_space_create>
 1005088:	e50b0008 	str	r0, [fp, #-8]
                                /*ttb_alloc=*/mmu_aux_alloc,
                                /*ttb_alloc_user=*/&s_mmu_pool);
    if (s != ALT_E_SUCCESS) return s;
 100508c:	e51b3008 	ldr	r3, [fp, #-8]
 1005090:	e3530000 	cmp	r3, #0
 1005094:	0a000001 	beq	10050a0 <create_va_space_core1_ddr+0xcc>
 1005098:	e51b3008 	ldr	r3, [fp, #-8]
 100509c:	ea00000f 	b	10050e0 <create_va_space_core1_ddr+0x10c>

    s = alt_mmu_va_space_enable(ttb1);
 10050a0:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
 10050a4:	e1a00003 	mov	r0, r3
 10050a8:	ebfffa2c 	bl	1003960 <alt_mmu_va_space_enable>
 10050ac:	e50b0008 	str	r0, [fp, #-8]
    if (s != ALT_E_SUCCESS) return s;
 10050b0:	e51b3008 	ldr	r3, [fp, #-8]
 10050b4:	e3530000 	cmp	r3, #0
 10050b8:	0a000001 	beq	10050c4 <create_va_space_core1_ddr+0xf0>
 10050bc:	e51b3008 	ldr	r3, [fp, #-8]
 10050c0:	ea000006 	b	10050e0 <create_va_space_core1_ddr+0x10c>

    if (ttb_out) *ttb_out = ttb1;
 10050c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
 10050c8:	e3530000 	cmp	r3, #0
 10050cc:	0a000002 	beq	10050dc <create_va_space_core1_ddr+0x108>
 10050d0:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
 10050d4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
 10050d8:	e5832000 	str	r2, [r3]
    return ALT_E_SUCCESS;
 10050dc:	e3a03000 	mov	r3, #0
}
 10050e0:	e1a00003 	mov	r0, r3
 10050e4:	e24bd004 	sub	sp, fp, #4
 10050e8:	e8bd8800 	pop	{fp, pc}

010050ec <arm_mmu_setup_core1>:
	    return ALT_E_SUCCESS;
}

// Core1 â mappa [C1]
ALT_STATUS_CODE arm_mmu_setup_core1(void)
{
 10050ec:	e92d4800 	push	{fp, lr}
 10050f0:	e28db004 	add	fp, sp, #4
 10050f4:	e24dd008 	sub	sp, sp, #8
    a9_sanitize_before_mmu();
 10050f8:	ebffff49 	bl	1004e24 <a9_sanitize_before_mmu>
    arm_enable_smp_and_scu();
 10050fc:	ebffff5d 	bl	1004e78 <arm_enable_smp_and_scu>

    uint32_t *ttb = NULL;
 1005100:	e3a03000 	mov	r3, #0
 1005104:	e50b300c 	str	r3, [fp, #-12]
    int s;
    s=create_va_space_core1_ddr(&ttb);
 1005108:	e24b300c 	sub	r3, fp, #12
 100510c:	e1a00003 	mov	r0, r3
 1005110:	ebffffaf 	bl	1004fd4 <create_va_space_core1_ddr>
 1005114:	e50b0008 	str	r0, [fp, #-8]
    //return create_va_space_core1(&ttb);
    return s;
 1005118:	e51b3008 	ldr	r3, [fp, #-8]
}
 100511c:	e1a00003 	mov	r0, r3
 1005120:	e24bd004 	sub	sp, fp, #4
 1005124:	e8bd8800 	pop	{fp, pc}

01005128 <uart_stdio_init_uart1>:
/* Facoltativo: CRLF su newline (abilita se ti serve \r\n) */
void uart_stdio_set_crlf(int enable);


ALT_STATUS_CODE uart_stdio_init_uart1(uint32_t baud)
{
 1005128:	e92d4800 	push	{fp, lr}
 100512c:	e28db004 	add	fp, sp, #4
 1005130:	e24dd010 	sub	sp, sp, #16
 1005134:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE st;
    uint32_t l4sp_hz_u32 = 0;
 1005138:	e3a03000 	mov	r3, #0
 100513c:	e50b300c 	str	r3, [fp, #-12]

    /* clock L4_SP (bus dei peripheral, usato dalle UART) */
    st = alt_clk_freq_get(ALT_CLK_L4_SP, &l4sp_hz_u32);
 1005140:	e24b300c 	sub	r3, fp, #12
 1005144:	e1a01003 	mov	r1, r3
 1005148:	e3a0000c 	mov	r0, #12
 100514c:	ebffef8e 	bl	1000f8c <alt_clk_freq_get>
 1005150:	e50b0008 	str	r0, [fp, #-8]
    if (st != ALT_E_SUCCESS) return st;
 1005154:	e51b3008 	ldr	r3, [fp, #-8]
 1005158:	e3530000 	cmp	r3, #0
 100515c:	0a000001 	beq	1005168 <uart_stdio_init_uart1+0x40>
 1005160:	e51b3008 	ldr	r3, [fp, #-8]
 1005164:	ea000022 	b	10051f4 <uart_stdio_init_uart1+0xcc>

    /* init: (device, location=NULL, clock_freq, handle) */
    st = alt_16550_init(ALT_16550_DEVICE_SOCFPGA_UART1, NULL,
 1005168:	e51b200c 	ldr	r2, [fp, #-12]
 100516c:	e30c3000 	movw	r3, #49152	; 0xc000
 1005170:	e3403101 	movt	r3, #257	; 0x101
 1005174:	e3a01000 	mov	r1, #0
 1005178:	e3a00001 	mov	r0, #1
 100517c:	ebfff164 	bl	1001714 <alt_16550_init>
 1005180:	e50b0008 	str	r0, [fp, #-8]
                        (alt_freq_t)l4sp_hz_u32, &s_uart1);
    if (st != ALT_E_SUCCESS) return st;
 1005184:	e51b3008 	ldr	r3, [fp, #-8]
 1005188:	e3530000 	cmp	r3, #0
 100518c:	0a000001 	beq	1005198 <uart_stdio_init_uart1+0x70>
 1005190:	e51b3008 	ldr	r3, [fp, #-8]
 1005194:	ea000016 	b	10051f4 <uart_stdio_init_uart1+0xcc>

    /* baud: nella tua hwlib Ã¨ (handle, baud) */
    st = alt_16550_baudrate_set(&s_uart1, baud);
 1005198:	e51b1010 	ldr	r1, [fp, #-16]
 100519c:	e30c0000 	movw	r0, #49152	; 0xc000
 10051a0:	e3400101 	movt	r0, #257	; 0x101
 10051a4:	ebfff253 	bl	1001af8 <alt_16550_baudrate_set>
 10051a8:	e50b0008 	str	r0, [fp, #-8]
    if (st != ALT_E_SUCCESS) return st;
 10051ac:	e51b3008 	ldr	r3, [fp, #-8]
 10051b0:	e3530000 	cmp	r3, #0
 10051b4:	0a000001 	beq	10051c0 <uart_stdio_init_uart1+0x98>
 10051b8:	e51b3008 	ldr	r3, [fp, #-8]
 10051bc:	ea00000c 	b	10051f4 <uart_stdio_init_uart1+0xcc>
       // st = alt_16550_line_config_set(&s_uart1,
       //        ALT_16550_PARITY_DISABLE, ALT_16550_DATA_BITS_8, ALT_16550_STOP_BITS_1);
       // if (st != ALT_E_SUCCESS) return st;
    */

    (void)alt_16550_fifo_enable(&s_uart1);  /* ok anche se no-op */
 10051c0:	e30c0000 	movw	r0, #49152	; 0xc000
 10051c4:	e3400101 	movt	r0, #257	; 0x101
 10051c8:	ebfff1ba 	bl	10018b8 <alt_16550_fifo_enable>

    st = alt_16550_enable(&s_uart1);
 10051cc:	e30c0000 	movw	r0, #49152	; 0xc000
 10051d0:	e3400101 	movt	r0, #257	; 0x101
 10051d4:	ebfff1a5 	bl	1001870 <alt_16550_enable>
 10051d8:	e50b0008 	str	r0, [fp, #-8]
    if (st != ALT_E_SUCCESS) return st;
 10051dc:	e51b3008 	ldr	r3, [fp, #-8]
 10051e0:	e3530000 	cmp	r3, #0
 10051e4:	0a000001 	beq	10051f0 <uart_stdio_init_uart1+0xc8>
 10051e8:	e51b3008 	ldr	r3, [fp, #-8]
 10051ec:	ea000000 	b	10051f4 <uart_stdio_init_uart1+0xcc>
    setvbuf(stdout, NULL, _IONBF, 0);
    setvbuf(stderr, NULL, _IONBF, 0);
#endif


    return ALT_E_SUCCESS;
 10051f0:	e3a03000 	mov	r3, #0
}
 10051f4:	e1a00003 	mov	r0, r3
 10051f8:	e24bd004 	sub	sp, fp, #4
 10051fc:	e8bd8800 	pop	{fp, pc}

01005200 <uart_stdio_write_raw>:

void uart_stdio_set_crlf(int enable) { s_crlf = enable ? 1 : 0; }

static ALT_STATUS_CODE uart_stdio_write_raw(char ch)
{
 1005200:	e92d4800 	push	{fp, lr}
 1005204:	e28db004 	add	fp, sp, #4
 1005208:	e24dd008 	sub	sp, sp, #8
 100520c:	e1a03000 	mov	r3, r0
 1005210:	e54b3005 	strb	r3, [fp, #-5]
    return alt_16550_fifo_write(&s_uart1, &ch, 1);
 1005214:	e24b3005 	sub	r3, fp, #5
 1005218:	e3a02001 	mov	r2, #1
 100521c:	e1a01003 	mov	r1, r3
 1005220:	e30c0000 	movw	r0, #49152	; 0xc000
 1005224:	e3400101 	movt	r0, #257	; 0x101
 1005228:	ebfff223 	bl	1001abc <alt_16550_fifo_write>
 100522c:	e1a03000 	mov	r3, r0
}
 1005230:	e1a00003 	mov	r0, r3
 1005234:	e24bd004 	sub	sp, fp, #4
 1005238:	e8bd8800 	pop	{fp, pc}

0100523c <uart_stdio_write_char>:

ALT_STATUS_CODE uart_stdio_write_char(char ch)
{
 100523c:	e92d4800 	push	{fp, lr}
 1005240:	e28db004 	add	fp, sp, #4
 1005244:	e24dd010 	sub	sp, sp, #16
 1005248:	e1a03000 	mov	r3, r0
 100524c:	e54b300d 	strb	r3, [fp, #-13]
    if (s_crlf && ch == '\n') {
 1005250:	e30c3014 	movw	r3, #49172	; 0xc014
 1005254:	e3403101 	movt	r3, #257	; 0x101
 1005258:	e5933000 	ldr	r3, [r3]
 100525c:	e3530000 	cmp	r3, #0
 1005260:	0a00000a 	beq	1005290 <uart_stdio_write_char+0x54>
 1005264:	e55b300d 	ldrb	r3, [fp, #-13]
 1005268:	e353000a 	cmp	r3, #10
 100526c:	1a000007 	bne	1005290 <uart_stdio_write_char+0x54>
        ALT_STATUS_CODE st = uart_stdio_write_raw('\r');
 1005270:	e3a0000d 	mov	r0, #13
 1005274:	ebffffe1 	bl	1005200 <uart_stdio_write_raw>
 1005278:	e50b0008 	str	r0, [fp, #-8]
        if (st != ALT_E_SUCCESS) return st;
 100527c:	e51b3008 	ldr	r3, [fp, #-8]
 1005280:	e3530000 	cmp	r3, #0
 1005284:	0a000001 	beq	1005290 <uart_stdio_write_char+0x54>
 1005288:	e51b3008 	ldr	r3, [fp, #-8]
 100528c:	ea000003 	b	10052a0 <uart_stdio_write_char+0x64>
    }
    return uart_stdio_write_raw(ch);
 1005290:	e55b300d 	ldrb	r3, [fp, #-13]
 1005294:	e1a00003 	mov	r0, r3
 1005298:	ebffffd8 	bl	1005200 <uart_stdio_write_raw>
 100529c:	e1a03000 	mov	r3, r0
}
 10052a0:	e1a00003 	mov	r0, r3
 10052a4:	e24bd004 	sub	sp, fp, #4
 10052a8:	e8bd8800 	pop	{fp, pc}

010052ac <uart_stdio_write_hex32>:
    }
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE uart_stdio_write_hex32(uint32_t value)
{
 10052ac:	e92d4800 	push	{fp, lr}
 10052b0:	e28db004 	add	fp, sp, #4
 10052b4:	e24dd018 	sub	sp, sp, #24
 10052b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    for (int shift = 28; shift >= 0; shift -= 4) {
 10052bc:	e3a0301c 	mov	r3, #28
 10052c0:	e50b3008 	str	r3, [fp, #-8]
 10052c4:	ea00001d 	b	1005340 <uart_stdio_write_hex32+0x94>
        uint32_t nibble = (value >> shift) & 0xFu;
 10052c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 10052cc:	e51b3008 	ldr	r3, [fp, #-8]
 10052d0:	e1a03332 	lsr	r3, r2, r3
 10052d4:	e203300f 	and	r3, r3, #15
 10052d8:	e50b300c 	str	r3, [fp, #-12]
        char ch = (char)(nibble < 10 ? ('0' + nibble) : ('A' + (nibble - 10)));
 10052dc:	e51b300c 	ldr	r3, [fp, #-12]
 10052e0:	e3530009 	cmp	r3, #9
 10052e4:	8a000004 	bhi	10052fc <uart_stdio_write_hex32+0x50>
 10052e8:	e51b300c 	ldr	r3, [fp, #-12]
 10052ec:	e6ef3073 	uxtb	r3, r3
 10052f0:	e2833030 	add	r3, r3, #48	; 0x30
 10052f4:	e6ef3073 	uxtb	r3, r3
 10052f8:	ea000003 	b	100530c <uart_stdio_write_hex32+0x60>
 10052fc:	e51b300c 	ldr	r3, [fp, #-12]
 1005300:	e6ef3073 	uxtb	r3, r3
 1005304:	e2833037 	add	r3, r3, #55	; 0x37
 1005308:	e6ef3073 	uxtb	r3, r3
 100530c:	e54b300d 	strb	r3, [fp, #-13]
        ALT_STATUS_CODE st = uart_stdio_write_char(ch);
 1005310:	e55b300d 	ldrb	r3, [fp, #-13]
 1005314:	e1a00003 	mov	r0, r3
 1005318:	ebffffc7 	bl	100523c <uart_stdio_write_char>
 100531c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (st != ALT_E_SUCCESS) return st;
 1005320:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1005324:	e3530000 	cmp	r3, #0
 1005328:	0a000001 	beq	1005334 <uart_stdio_write_hex32+0x88>
 100532c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1005330:	ea000006 	b	1005350 <uart_stdio_write_hex32+0xa4>
    for (int shift = 28; shift >= 0; shift -= 4) {
 1005334:	e51b3008 	ldr	r3, [fp, #-8]
 1005338:	e2433004 	sub	r3, r3, #4
 100533c:	e50b3008 	str	r3, [fp, #-8]
 1005340:	e51b3008 	ldr	r3, [fp, #-8]
 1005344:	e3530000 	cmp	r3, #0
 1005348:	aaffffde 	bge	10052c8 <uart_stdio_write_hex32+0x1c>
    }
    return ALT_E_SUCCESS;
 100534c:	e3a03000 	mov	r3, #0
}
 1005350:	e1a00003 	mov	r0, r3
 1005354:	e24bd004 	sub	sp, fp, #4
 1005358:	e8bd8800 	pop	{fp, pc}

0100535c <__udivsi3>:
 100535c:	e2512001 	subs	r2, r1, #1
 1005360:	012fff1e 	bxeq	lr
 1005364:	3a000036 	bcc	1005444 <__udivsi3+0xe8>
 1005368:	e1500001 	cmp	r0, r1
 100536c:	9a000022 	bls	10053fc <__udivsi3+0xa0>
 1005370:	e1110002 	tst	r1, r2
 1005374:	0a000023 	beq	1005408 <__udivsi3+0xac>
 1005378:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 100537c:	01a01181 	lsleq	r1, r1, #3
 1005380:	03a03008 	moveq	r3, #8
 1005384:	13a03001 	movne	r3, #1
 1005388:	e3510201 	cmp	r1, #268435456	; 0x10000000
 100538c:	31510000 	cmpcc	r1, r0
 1005390:	31a01201 	lslcc	r1, r1, #4
 1005394:	31a03203 	lslcc	r3, r3, #4
 1005398:	3afffffa 	bcc	1005388 <__udivsi3+0x2c>
 100539c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 10053a0:	31510000 	cmpcc	r1, r0
 10053a4:	31a01081 	lslcc	r1, r1, #1
 10053a8:	31a03083 	lslcc	r3, r3, #1
 10053ac:	3afffffa 	bcc	100539c <__udivsi3+0x40>
 10053b0:	e3a02000 	mov	r2, #0
 10053b4:	e1500001 	cmp	r0, r1
 10053b8:	20400001 	subcs	r0, r0, r1
 10053bc:	21822003 	orrcs	r2, r2, r3
 10053c0:	e15000a1 	cmp	r0, r1, lsr #1
 10053c4:	204000a1 	subcs	r0, r0, r1, lsr #1
 10053c8:	218220a3 	orrcs	r2, r2, r3, lsr #1
 10053cc:	e1500121 	cmp	r0, r1, lsr #2
 10053d0:	20400121 	subcs	r0, r0, r1, lsr #2
 10053d4:	21822123 	orrcs	r2, r2, r3, lsr #2
 10053d8:	e15001a1 	cmp	r0, r1, lsr #3
 10053dc:	204001a1 	subcs	r0, r0, r1, lsr #3
 10053e0:	218221a3 	orrcs	r2, r2, r3, lsr #3
 10053e4:	e3500000 	cmp	r0, #0
 10053e8:	11b03223 	lsrsne	r3, r3, #4
 10053ec:	11a01221 	lsrne	r1, r1, #4
 10053f0:	1affffef 	bne	10053b4 <__udivsi3+0x58>
 10053f4:	e1a00002 	mov	r0, r2
 10053f8:	e12fff1e 	bx	lr
 10053fc:	03a00001 	moveq	r0, #1
 1005400:	13a00000 	movne	r0, #0
 1005404:	e12fff1e 	bx	lr
 1005408:	e3510801 	cmp	r1, #65536	; 0x10000
 100540c:	21a01821 	lsrcs	r1, r1, #16
 1005410:	23a02010 	movcs	r2, #16
 1005414:	33a02000 	movcc	r2, #0
 1005418:	e3510c01 	cmp	r1, #256	; 0x100
 100541c:	21a01421 	lsrcs	r1, r1, #8
 1005420:	22822008 	addcs	r2, r2, #8
 1005424:	e3510010 	cmp	r1, #16
 1005428:	21a01221 	lsrcs	r1, r1, #4
 100542c:	22822004 	addcs	r2, r2, #4
 1005430:	e3510004 	cmp	r1, #4
 1005434:	82822003 	addhi	r2, r2, #3
 1005438:	908220a1 	addls	r2, r2, r1, lsr #1
 100543c:	e1a00230 	lsr	r0, r0, r2
 1005440:	e12fff1e 	bx	lr
 1005444:	e3500000 	cmp	r0, #0
 1005448:	13e00000 	mvnne	r0, #0
 100544c:	ea000007 	b	1005470 <__aeabi_idiv0>

01005450 <__aeabi_uidivmod>:
 1005450:	e3510000 	cmp	r1, #0
 1005454:	0afffffa 	beq	1005444 <__udivsi3+0xe8>
 1005458:	e92d4003 	push	{r0, r1, lr}
 100545c:	ebffffbe 	bl	100535c <__udivsi3>
 1005460:	e8bd4006 	pop	{r1, r2, lr}
 1005464:	e0030092 	mul	r3, r2, r0
 1005468:	e0411003 	sub	r1, r1, r3
 100546c:	e12fff1e 	bx	lr

01005470 <__aeabi_idiv0>:
 1005470:	e12fff1e 	bx	lr

01005474 <__aeabi_uldivmod>:
 1005474:	e3530000 	cmp	r3, #0
 1005478:	03520000 	cmpeq	r2, #0
 100547c:	1a000004 	bne	1005494 <__aeabi_uldivmod+0x20>
 1005480:	e3510000 	cmp	r1, #0
 1005484:	03500000 	cmpeq	r0, #0
 1005488:	13e01000 	mvnne	r1, #0
 100548c:	13e00000 	mvnne	r0, #0
 1005490:	eafffff6 	b	1005470 <__aeabi_idiv0>
 1005494:	e24dd008 	sub	sp, sp, #8
 1005498:	e92d6000 	push	{sp, lr}
 100549c:	eb000003 	bl	10054b0 <__udivmoddi4>
 10054a0:	e59de004 	ldr	lr, [sp, #4]
 10054a4:	e28dd008 	add	sp, sp, #8
 10054a8:	e8bd000c 	pop	{r2, r3}
 10054ac:	e12fff1e 	bx	lr

010054b0 <__udivmoddi4>:
 10054b0:	e1510003 	cmp	r1, r3
 10054b4:	01500002 	cmpeq	r0, r2
 10054b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 10054bc:	e1a04000 	mov	r4, r0
 10054c0:	33a00000 	movcc	r0, #0
 10054c4:	e1a05001 	mov	r5, r1
 10054c8:	e59d8020 	ldr	r8, [sp, #32]
 10054cc:	31a01000 	movcc	r1, r0
 10054d0:	3a00003e 	bcc	10055d0 <__udivmoddi4+0x120>
 10054d4:	e1a01003 	mov	r1, r3
 10054d8:	e1a00002 	mov	r0, r2
 10054dc:	e1a06002 	mov	r6, r2
 10054e0:	e1a07003 	mov	r7, r3
 10054e4:	eb00003d 	bl	10055e0 <__clzdi2>
 10054e8:	e1a01005 	mov	r1, r5
 10054ec:	e1a09000 	mov	r9, r0
 10054f0:	e1a00004 	mov	r0, r4
 10054f4:	eb000039 	bl	10055e0 <__clzdi2>
 10054f8:	e049c000 	sub	ip, r9, r0
 10054fc:	e24c9020 	sub	r9, ip, #32
 1005500:	e1a03c17 	lsl	r3, r7, ip
 1005504:	e1833916 	orr	r3, r3, r6, lsl r9
 1005508:	e26ca020 	rsb	sl, ip, #32
 100550c:	e1833a36 	orr	r3, r3, r6, lsr sl
 1005510:	e1550003 	cmp	r5, r3
 1005514:	e1a02c16 	lsl	r2, r6, ip
 1005518:	01540002 	cmpeq	r4, r2
 100551c:	33a00000 	movcc	r0, #0
 1005520:	31a01000 	movcc	r1, r0
 1005524:	3a000005 	bcc	1005540 <__udivmoddi4+0x90>
 1005528:	e3a00001 	mov	r0, #1
 100552c:	e0544002 	subs	r4, r4, r2
 1005530:	e1a01910 	lsl	r1, r0, r9
 1005534:	e1811a30 	orr	r1, r1, r0, lsr sl
 1005538:	e0c55003 	sbc	r5, r5, r3
 100553c:	e1a00c10 	lsl	r0, r0, ip
 1005540:	e35c0000 	cmp	ip, #0
 1005544:	0a000021 	beq	10055d0 <__udivmoddi4+0x120>
 1005548:	e1a060a2 	lsr	r6, r2, #1
 100554c:	e1a0e00c 	mov	lr, ip
 1005550:	e1866f83 	orr	r6, r6, r3, lsl #31
 1005554:	e1a070a3 	lsr	r7, r3, #1
 1005558:	ea000007 	b	100557c <__udivmoddi4+0xcc>
 100555c:	e0543006 	subs	r3, r4, r6
 1005560:	e0c52007 	sbc	r2, r5, r7
 1005564:	e0933003 	adds	r3, r3, r3
 1005568:	e0a22002 	adc	r2, r2, r2
 100556c:	e2934001 	adds	r4, r3, #1
 1005570:	e2a25000 	adc	r5, r2, #0
 1005574:	e25ee001 	subs	lr, lr, #1
 1005578:	0a000006 	beq	1005598 <__udivmoddi4+0xe8>
 100557c:	e1550007 	cmp	r5, r7
 1005580:	01540006 	cmpeq	r4, r6
 1005584:	2afffff4 	bcs	100555c <__udivmoddi4+0xac>
 1005588:	e0944004 	adds	r4, r4, r4
 100558c:	e0a55005 	adc	r5, r5, r5
 1005590:	e25ee001 	subs	lr, lr, #1
 1005594:	1afffff8 	bne	100557c <__udivmoddi4+0xcc>
 1005598:	e1a03c34 	lsr	r3, r4, ip
 100559c:	e1833a15 	orr	r3, r3, r5, lsl sl
 10055a0:	e1833935 	orr	r3, r3, r5, lsr r9
 10055a4:	e0900004 	adds	r0, r0, r4
 10055a8:	e1a04003 	mov	r4, r3
 10055ac:	e1a02c35 	lsr	r2, r5, ip
 10055b0:	e0a11005 	adc	r1, r1, r5
 10055b4:	e1a05002 	mov	r5, r2
 10055b8:	e1a03c12 	lsl	r3, r2, ip
 10055bc:	e1833914 	orr	r3, r3, r4, lsl r9
 10055c0:	e1a0cc14 	lsl	ip, r4, ip
 10055c4:	e050000c 	subs	r0, r0, ip
 10055c8:	e1833a34 	orr	r3, r3, r4, lsr sl
 10055cc:	e0c11003 	sbc	r1, r1, r3
 10055d0:	e3580000 	cmp	r8, #0
 10055d4:	18880030 	stmne	r8, {r4, r5}
 10055d8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 10055dc:	e12fff1e 	bx	lr

010055e0 <__clzdi2>:
 10055e0:	e92d4010 	push	{r4, lr}
 10055e4:	e3510000 	cmp	r1, #0
 10055e8:	1a000002 	bne	10055f8 <__clzdi2+0x18>
 10055ec:	eb000005 	bl	1005608 <__clzsi2>
 10055f0:	e2800020 	add	r0, r0, #32
 10055f4:	ea000001 	b	1005600 <__clzdi2+0x20>
 10055f8:	e1a00001 	mov	r0, r1
 10055fc:	eb000001 	bl	1005608 <__clzsi2>
 1005600:	e8bd4010 	pop	{r4, lr}
 1005604:	e12fff1e 	bx	lr

01005608 <__clzsi2>:
 1005608:	e3a0101c 	mov	r1, #28
 100560c:	e3500801 	cmp	r0, #65536	; 0x10000
 1005610:	21a00820 	lsrcs	r0, r0, #16
 1005614:	22411010 	subcs	r1, r1, #16
 1005618:	e3500c01 	cmp	r0, #256	; 0x100
 100561c:	21a00420 	lsrcs	r0, r0, #8
 1005620:	22411008 	subcs	r1, r1, #8
 1005624:	e3500010 	cmp	r0, #16
 1005628:	21a00220 	lsrcs	r0, r0, #4
 100562c:	22411004 	subcs	r1, r1, #4
 1005630:	e28f2008 	add	r2, pc, #8
 1005634:	e7d20000 	ldrb	r0, [r2, r0]
 1005638:	e0800001 	add	r0, r0, r1
 100563c:	e12fff1e 	bx	lr
 1005640:	02020304 	andeq	r0, r2, #4, 6	; 0x10000000
 1005644:	01010101 	tsteq	r1, r1, lsl #2
	...

Disassembly of section .ARM.exidx:

01005650 <__exidx_start>:
 1005650:	7fffaa88 	svcvc	0x00ffaa88
 1005654:	00000001 	andeq	r0, r0, r1

Disassembly of section .rodata:

01005658 <__rodata_start__>:
 1005658:	4e524157 	mrcmi	1, 2, r4, cr2, cr7, {2}
 100565c:	554d4d5b 	strbpl	r4, [sp, #-3419]	; 0xfffff2a5
 1005660:	44203a5d 	strtmi	r3, [r0], #-2653	; 0xfffff5a3
 1005664:	20617461 	rsbcs	r7, r1, r1, ror #8
 1005668:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
 100566c:	74732065 	ldrbtvc	r2, [r3], #-101	; 0xffffff9b
 1005670:	206c6c69 	rsbcs	r6, ip, r9, ror #24
 1005674:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 1005678:	0a2e6576 	beq	1b9ec58 <__end__+0xb82c38>
 100567c:	00000000 	andeq	r0, r0, r0
 1005680:	01000000 	mrseq	r0, (UNDEF: 0)
 1005684:	00100000 	andseq	r0, r0, r0
 1005688:	00010000 	andeq	r0, r1, r0
 100568c:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 1005690:	4d4d5b47 	vstrmi	d21, [sp, #-284]	; 0xfffffee4
 1005694:	41563a55 	cmpmi	r6, r5, asr sl
 1005698:	46203a5d 			; <UNDEFINED> instruction: 0x46203a5d
 100569c:	756c6961 	strbvc	r6, [ip, #-2401]!	; 0xfffff69f
 10056a0:	6f206572 	svcvs	0x00206572
 10056a4:	696c206e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, sp}^
 10056a8:	2520656e 	strcs	r6, [r0, #-1390]!	; 0xfffffa92
 10056ac:	000a2e64 	andeq	r2, sl, r4, ror #28
 10056b0:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 10056b4:	61635b47 	cmnvs	r3, r7, asr #22
 10056b8:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 10056bc:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 10056c0:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 10056c4:	6146203a 	cmpvs	r6, sl, lsr r0
 10056c8:	20746c75 	rsbscs	r6, r4, r5, ror ip
 10056cc:	65746564 	ldrbvs	r6, [r4, #-1380]!	; 0xfffffa9c
 10056d0:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 10056d4:	4644202e 	strbmi	r2, [r4], -lr, lsr #32
 10056d8:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	; 0xfffffeb4
 10056dc:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 10056e0:	0a2e786c 	beq	1ba3898 <__end__+0xb87878>
 10056e4:	00000000 	andeq	r0, r0, r0
 10056e8:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 10056ec:	61635b47 	cmnvs	r3, r7, asr #22
 10056f0:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 10056f4:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 10056f8:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 10056fc:	6170203a 	cmnvs	r0, sl, lsr r0
 1005700:	5d53535b 	ldclpl	3, cr5, [r3, #-364]	; 0xfffffe94
 1005704:	30203d20 	eorcc	r3, r0, r0, lsr #26
 1005708:	3b782578 	blcc	2e0ecf0 <__end__+0x1df2cd0>
 100570c:	66666f20 	strbtvs	r6, [r6], -r0, lsr #30
 1005710:	20746573 	rsbscs	r6, r4, r3, ror r5
 1005714:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 1005718:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 100571c:	0000000a 	andeq	r0, r0, sl
 1005720:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 1005724:	61635b47 	cmnvs	r3, r7, asr #22
 1005728:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 100572c:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 1005730:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 1005734:	6170203a 	cmnvs	r0, sl, lsr r0
 1005738:	6761705b 			; <UNDEFINED> instruction: 0x6761705b
 100573c:	3d205d65 	stccc	13, cr5, [r0, #-404]!	; 0xfffffe6c
 1005740:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 1005744:	6f203b78 	svcvs	0x00203b78
 1005748:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
 100574c:	203d2074 	eorscs	r2, sp, r4, ror r0
 1005750:	6c257830 	stcvs	8, cr7, [r5], #-192	; 0xffffff40
 1005754:	000a2e78 	andeq	r2, sl, r8, ror lr
 1005758:	5b554d4d 	blpl	2558c94 <__end__+0x153cc74>
 100575c:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1005760:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1005764:	62203a5d 	eorvs	r3, r0, #380928	; 0x5d000
 1005768:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
 100576c:	203a2928 	eorscs	r2, sl, r8, lsr #18
 1005770:	61766e49 	cmnvs	r6, r9, asr #28
 1005774:	2064696c 	rsbcs	r6, r4, ip, ror #18
 1005778:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
 100577c:	74616c73 	strbtvc	r6, [r1], #-3187	; 0xfffff38d
 1005780:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 1005784:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
 1005788:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
 100578c:	0000000a 	andeq	r0, r0, sl
 1005790:	5b554d4d 	blpl	2558ccc <__end__+0x153ccac>
 1005794:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1005798:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 100579c:	62203a5d 	eorvs	r3, r0, #380928	; 0x5d000
 10057a0:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
 10057a4:	203a2928 	eorscs	r2, sl, r8, lsr #18
 10057a8:	74204156 	strtvc	r4, [r0], #-342	; 0xfffffeaa
 10057ac:	4150206f 	cmpmi	r0, pc, rrx
 10057b0:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
 10057b4:	6620726f 	strtvs	r7, [r0], -pc, ror #4
 10057b8:	2520726f 	strcs	r7, [r0, #-623]!	; 0xfffffd91
 10057bc:	44202e70 	strtmi	r2, [r0], #-3696	; 0xfffff190
 10057c0:	20525346 	subscs	r5, r2, r6, asr #6
 10057c4:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 10057c8:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 10057cc:	0000000a 	andeq	r0, r0, sl
 10057d0:	5b554d4d 	blpl	2558d0c <__end__+0x153ccec>
 10057d4:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 10057d8:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 10057dc:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 10057e0:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 10057e4:	54203a29 	strtpl	r3, [r0], #-2601	; 0xfffff5d7
 10057e8:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
 10057ec:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
 10057f0:	61206e6f 			; <UNDEFINED> instruction: 0x61206e6f
 10057f4:	6165726c 	cmnvs	r5, ip, ror #4
 10057f8:	63207964 			; <UNDEFINED> instruction: 0x63207964
 10057fc:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
 1005800:	64657465 	strbtvs	r7, [r5], #-1125	; 0xfffffb9b
 1005804:	00000a2e 	andeq	r0, r0, lr, lsr #20
 1005808:	5b554d4d 	blpl	2558d44 <__end__+0x153cd24>
 100580c:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1005810:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1005814:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 1005818:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 100581c:	56203a29 	strtpl	r3, [r0], -r9, lsr #20
 1005820:	6f742041 	svcvs	0x00742041
 1005824:	20415020 	subcs	r5, r1, r0, lsr #32
 1005828:	6f727265 	svcvs	0x00727265
 100582c:	6f662072 	svcvs	0x00662072
 1005830:	70252072 	eorvc	r2, r5, r2, ror r0
 1005834:	4644202e 	strbmi	r2, [r4], -lr, lsr #32
 1005838:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	; 0xfffffeb4
 100583c:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 1005840:	0a2e786c 	beq	1ba39f8 <__end__+0xb879d8>
 1005844:	00000000 	andeq	r0, r0, r0
 1005848:	5b554d4d 	blpl	2558d84 <__end__+0x153cd64>
 100584c:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1005850:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1005854:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 1005858:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 100585c:	43203a29 			; <UNDEFINED> instruction: 0x43203a29
 1005860:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
 1005864:	64656373 	strbtvs	r6, [r5], #-883	; 0xfffffc8d
 1005868:	78656e20 	stmdavc	r5!, {r5, r9, sl, fp, sp, lr}^
 100586c:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 1005870:	6e656d67 	cdpvs	13, 6, cr6, cr5, cr7, {3}
 1005874:	4e202e74 	mcrmi	14, 1, r2, cr0, cr4, {3}
 1005878:	73207765 			; <UNDEFINED> instruction: 0x73207765
 100587c:	20657a69 	rsbcs	r7, r5, r9, ror #20
 1005880:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 1005884:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 1005888:	0000000a 	andeq	r0, r0, sl
 100588c:	5b554d4d 	blpl	2558dc8 <__end__+0x153cda8>
 1005890:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1005894:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1005898:	65203a5d 	strvs	r3, [r0, #-2653]!	; 0xfffff5a3
 100589c:	2928646e 	stmdbcs	r8!, {r1, r2, r3, r5, r6, sl, sp, lr}
 10058a0:	7254203a 	subsvc	r2, r4, #58	; 0x3a
 10058a4:	6c736e61 	ldclvs	14, cr6, [r3], #-388	; 0xfffffe7c
 10058a8:	6f697461 	svcvs	0x00697461
 10058ac:	7270206e 	rsbsvc	r2, r0, #110	; 0x6e
 10058b0:	6572676f 	ldrbvs	r6, [r2, #-1903]!	; 0xfffff891
 10058b4:	75207373 	strvc	r7, [r0, #-883]!	; 0xfffffc8d
 10058b8:	6d6f636e 	stclvs	3, cr6, [pc, #-440]!	; 1005708 <__rodata_start__+0xb0>
 10058bc:	74656c70 	strbtvc	r6, [r5], #-3184	; 0xfffff390
 10058c0:	000a2e65 	andeq	r2, sl, r5, ror #28
 10058c4:	65480d0a 	strbvs	r0, [r8, #-3338]	; 0xfffff2f6
 10058c8:	206f6c6c 	rsbcs	r6, pc, ip, ror #24
 10058cc:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 100573c <__rodata_start__+0xe4>
 10058d0:	53504820 	cmppl	r0, #32, 16	; 0x200000
 10058d4:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
 10058d8:	2065726f 	rsbcs	r7, r5, pc, ror #4
 10058dc:	53202e31 			; <UNDEFINED> instruction: 0x53202e31
 10058e0:	40204d48 	eormi	r4, r0, r8, asr #26
 10058e4:	00783020 	rsbseq	r3, r8, r0, lsr #32
 10058e8:	4e202d20 	cdpmi	13, 2, cr2, cr0, cr0, {1}
 10058ec:	6920776f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}
 10058f0:	20732774 	rsbscs	r2, r3, r4, ror r7
 10058f4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 10058f8:	00002e79 	andeq	r2, r0, r9, ror lr
	...
 1005904:	01000000 	mrseq	r0, (UNDEF: 0)
 1005908:	00011303 	andeq	r1, r1, r3, lsl #6
 100590c:	00000000 	andeq	r0, r0, r0
 1005910:	01000000 	mrseq	r0, (UNDEF: 0)
 1005914:	01000000 	mrseq	r0, (UNDEF: 0)
 1005918:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 100591c:	00001303 	andeq	r1, r0, r3, lsl #6
 1005920:	00000000 	andeq	r0, r0, r0
 1005924:	3f000000 	svccc	0x00000000
 1005928:	3f000000 	svccc	0x00000000
 100592c:	01000000 	mrseq	r0, (UNDEF: 0)
 1005930:	00010103 	andeq	r0, r1, r3, lsl #2
 1005934:	00000000 	andeq	r0, r0, r0
 1005938:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 100593c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 1005940:	01000000 	mrseq	r0, (UNDEF: 0)
 1005944:	01010103 	tsteq	r1, r3, lsl #2
 1005948:	00000000 	andeq	r0, r0, r0
 100594c:	6361430a 	cmnvs	r1, #671088640	; 0x28000000
 1005950:	53206568 			; <UNDEFINED> instruction: 0x53206568
 1005954:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 1005958:	53203a73 			; <UNDEFINED> instruction: 0x53203a73
 100595c:	524c5443 	subpl	r5, ip, #1124073472	; 0x43000000
 1005960:	2578303d 	ldrbcs	r3, [r8, #-61]!	; 0xffffffc3
 1005964:	586c3830 	stmdapl	ip!, {r4, r5, fp, ip, sp}^
 1005968:	4d4d2020 	stclmi	0, cr2, [sp, #-128]	; 0xffffff80
 100596c:	75253a55 	strvc	r3, [r5, #-2645]!	; 0xfffff5ab
 1005970:	3a492020 	bcc	224d9f8 <__end__+0x12319d8>
 1005974:	20207525 	eorcs	r7, r0, r5, lsr #10
 1005978:	75253a44 	strvc	r3, [r5, #-2628]!	; 0xfffff5bc
 100597c:	50422020 	subpl	r2, r2, r0, lsr #32
 1005980:	0075253a 	rsbseq	r2, r5, sl, lsr r5

Disassembly of section .data:

01005984 <osc1_clock>:
 1005984:	017d7840 	cmneq	sp, r0, asr #16

01005988 <term1_info>:
static UART_INFO_t term1_info = { uart_putc, 0, ALT_16550_DEVICE_SOCFPGA_UART1 };
 1005988:	0100497c 	tsteq	r0, ip, ror r9
 100598c:	00000000 	andeq	r0, r0, r0
 1005990:	00000001 	andeq	r0, r0, r1
	...

010059a8 <term1>:
 10059a8:	01005988 	smlabbeq	r0, r8, r9, r5

010059ac <s_mmu_pool>:
static mmu_pool_t s_mmu_pool = { s_mmu_aux_pool, sizeof(s_mmu_aux_pool), 0 };
 10059ac:	0100c000 	mrseq	ip, (UNDEF: 0)
 10059b0:	00010000 	andeq	r0, r1, r0
 10059b4:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

01008000 <cb_intosc_hs_div2>:
 1008000:	00000000 	andeq	r0, r0, r0

01008004 <f2s_free_clk>:
	...

0100c000 <s_mmu_aux_pool>:
	...

0101c000 <s_uart1>:
	...

0101c014 <s_crlf>:
static int s_crlf = 0;
 101c014:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:

void alt_log_done(FILE *op)
{
       0:	000017e2 	andeq	r1, r0, r2, ror #15
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000003a 	andeq	r0, r0, sl, lsr r0
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	0004980c 	andeq	r9, r4, ip, lsl #16
      14:	000bd000 	andeq	sp, fp, r0
	...

    /* Ensure that the TX FIFO is empty. */

    do
    {
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000402 	andeq	r0, r0, r2, lsl #8
      2c:	61050202 	tstvs	r5, r2, lsl #4
      30:	0300000d 	movweq	r0, #13
      34:	00002eee 	andeq	r2, r0, lr, ror #29
      38:	3f182802 	svccc	0x00182802
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	02000000 	andeq	r0, r0, #0
      40:	080a0504 	stmdaeq	sl, {r2, r8, sl}
      44:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      48:	00080505 	andeq	r0, r8, r5, lsl #10

    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	00000400 	andeq	r0, r0, r0, lsl #8
      54:	9e070202 	cdpls	2, 0, cr0, cr7, cr2, {0}
      58:	0300000e 	movweq	r0, #14
      5c:	000030d0 	ldrdeq	r3, [r0], -r0
      60:	67193402 	ldrvs	r3, [r9, -r2, lsl #8]
      64:	02000000 	andeq	r0, r0, #0
      68:	0b400704 	bleq	1001c80 <alt_16550_int_disable_all+0x18>
      6c:	8a030000 	bhi	c0074 <__core1_vectors-0xf3ff8c>

    /* Leave the UARTs enabled.
     * Many subsequent stages expect the UART to be already setup by preloader. */
}
      70:	0200000d 	andeq	r0, r0, #13
      74:	007a1937 	rsbseq	r1, sl, r7, lsr r9
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	000b3b07 	andeq	r3, fp, r7, lsl #22
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	45070402 	strmi	r0, [r7, #-1026]	; 0xfffffbfe
      8c:	0200000b 	andeq	r0, r0, #11
      90:	0a9d0408 	beq	fe7410b8 <__shm_end__+0xbe7410b8>
      *(pmem->toptr)=0;
      94:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
      98:	0300000c 	movweq	r0, #12
      9c:	8817015e 	ldmdahi	r7, {r1, r2, r3, r4, r6, r8}
      a0:	03000000 	movweq	r0, #0
}
      a4:	000030e2 	andeq	r3, r0, r2, ror #1
      a8:	3f0e2e04 	svccc	0x000e2e04
      ac:	03000000 	movweq	r0, #0
      b0:	00000add 	ldrdeq	r0, [r0], -sp
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	3f0e7404 	svccc	0x000e7404
      b8:	06000000 	streq	r0, [r0], -r0
        break;
      bc:	03a50404 			; <UNDEFINED> instruction: 0x03a50404
    return ALT_E_SUCCESS;
      c0:	000000dd 	ldrdeq	r0, [r0], -sp
      c4:	00023a07 	andeq	r3, r2, r7, lsl #20
        return ALT_E_ERROR;
      c8:	0ca70400 	cfstrseq	mvf0, [r7]
}
      cc:	00000096 	muleq	r0, r6, r0
      d0:	000ae507 	andeq	lr, sl, r7, lsl #10
      d4:	13a80400 			; <UNDEFINED> instruction: 0x13a80400
      d8:	000000dd 	ldrdeq	r0, [r0], -sp
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	004d0800 	subeq	r0, sp, r0, lsl #16
      e0:	00ed0000 	rsceq	r0, sp, r0
      e4:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
      e8:	03000000 	movweq	r0, #0
      ec:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
      f0:	011109a2 	tsteq	r1, r2, lsr #19
    return dst;
      f4:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
}
      f8:	0400000a 	streq	r0, [r0], #-10
      fc:	008107a4 	addeq	r0, r1, r4, lsr #15
     100:	0b000000 	bleq	108 <__core1_vectors-0xfffef8>
     104:	0000000b 	andeq	r0, r0, fp
            if (alt_16550_fifo_write(&s_uart1, &ch, 1) != ALT_E_SUCCESS) {
                errno = EIO; return -1;
            }
            --left;
        }
        return (int)cnt;
     108:	bb05a904 	bllt	16a520 <__core1_vectors-0xe95ae0>
     10c:	04000000 	streq	r0, [r0], #-0
    }
    errno = ENOSYS;
     110:	0c200300 	stceq	3, cr0, [r0], #-0
     114:	aa040000 	bge	10011c <__core1_vectors-0xeffee4>
     118:	0000ed03 	andeq	lr, r0, r3, lsl #26
     11c:	03040c00 	movweq	r0, #19456	; 0x4c00
    return -1;
     120:	00000e49 	andeq	r0, r0, r9, asr #28
}
     124:	67191605 	ldrvs	r1, [r9, -r5, lsl #12]
     128:	03000000 	movweq	r0, #0
     12c:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
    g_arm_msgdma1_desc = (volatile uint32_t*)(uintptr_t) MSGDMA1_DESC_BASE;
    g_arm_msgdma2_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA2_CSR_BASE;
    g_arm_msgdma2_desc = (volatile uint32_t*)(uintptr_t) MSGDMA2_DESC_BASE;
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     130:	810d0c06 	tsthi	sp, r6, lsl #24
     134:	03000000 	movweq	r0, #0
     138:	00000bc7 	andeq	r0, r0, r7, asr #23
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	2b1b2305 	blcs	6c8d58 <__core1_vectors-0x9372a8>
     140:	0d000001 	stceq	0, cr0, [r0, #-4]
     144:	00000708 	andeq	r0, r0, r8, lsl #14
     148:	08340518 	ldmdaeq	r4!, {r3, r4, r8, sl}
     14c:	0000019d 	muleq	r0, sp, r1
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	000a340b 	andeq	r3, sl, fp, lsl #8
     154:	13360500 	teqne	r6, #0, 10
     158:	0000019d 	muleq	r0, sp, r1
     15c:	6b5f0e00 	blvs	17c3964 <__end__+0x7a7944>
     160:	07370500 	ldreq	r0, [r7, -r0, lsl #10]!
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	00000081 	andeq	r0, r0, r1, lsl #1
     168:	07610b04 	strbeq	r0, [r1, -r4, lsl #22]!
     16c:	37050000 	strcc	r0, [r5, -r0]
     170:	0000810b 	andeq	r8, r0, fp, lsl #2
     174:	bf0b0800 	svclt	0x000b0800

    return ALT_E_SUCCESS;
     178:	05000008 	streq	r0, [r0, #-8]
}
     17c:	00811437 	addeq	r1, r1, r7, lsr r4
     180:	0b0c0000 	bleq	300188 <__core1_vectors-0xcffe78>
     184:	00000601 	andeq	r0, r0, r1, lsl #12
    }

    coalesce->va   += thissegsize;
    coalesce->size -= thissegsize;

    while (coalesce->size)
     188:	811b3705 	tsthi	fp, r5, lsl #14
     18c:	10000000 	andne	r0, r0, r0
            dprintf("MMU[coalesce]: next(): Coalesced next segment. New size = 0x%" PRIx32 ".\n", thissegsize);
        }
        else
        {
            /* Cannot coalesce. */
            break;
     190:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
        }
    }

    *segpa   = thissegpa;
     194:	a30b3805 	movwge	r3, #47109	; 0xb805
     198:	14000001 	strne	r0, [r0], #-1
     19c:	43040f00 	movwmi	r0, #20224	; 0x4f00
    *segsize = thissegsize;
     1a0:	08000001 	stmdaeq	r0, {r0}
     1a4:	0000011f 	andeq	r0, r0, pc, lsl r1
     1a8:	000001b3 			; <UNDEFINED> instruction: 0x000001b3

    return ALT_E_SUCCESS;
     1ac:	00008809 	andeq	r8, r0, r9, lsl #16
}
     1b0:	0d000000 	stceq	0, cr0, [r0, #-0]
     1b4:	00000140 	andeq	r0, r0, r0, asr #2
     1b8:	083c0524 	ldmdaeq	ip!, {r2, r5, r8, sl}
        overflow. Finally, we divide by 65536, giving us the numerator value that would result
        in 1200 MHz. If we exceed that, then we need to ramp up
  */
  clk100 = (3200000000u / (osc1_clock>>11)) * (1 + cfg->mainpll.vco1_denom ) * 2; /* /32k */

  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	00000236 	andeq	r0, r0, r6, lsr r2
     1c0:	00015c0b 	andeq	r5, r1, fp, lsl #24
     1c4:	093e0500 	ldmdbeq	lr!, {r8, sl}
     1c8:	00000081 	andeq	r0, r0, r1, lsl #1
     1cc:	0f8f0b00 	svceq	0x008f0b00
  {
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	3f050000 	svccc	0x00050000
     1d4:	00008109 	andeq	r8, r0, r9, lsl #2
     1d8:	b10b0400 	tstlt	fp, r0, lsl #8
     1dc:	0500000e 	streq	r0, [r0, #-14]
     1e0:	00810940 	addeq	r0, r1, r0, asr #18
    do
    {
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	0b080000 	bleq	2001ec <__core1_vectors-0xdffe14>
     1e8:	000009fb 	strdeq	r0, [r0], -fp
     1ec:	81094105 	tsthi	r9, r5, lsl #2
     1f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     1f4:	00038c0b 	andeq	r8, r3, fp, lsl #24
     1f8:	09420500 	stmdbeq	r2, {r8, sl}^
     1fc:	00000081 	andeq	r0, r0, r1, lsl #1
     200:	0de40b10 			; <UNDEFINED> instruction: 0x0de40b10
     204:	43050000 	movwmi	r0, #20480	; 0x5000
     208:	00008109 	andeq	r8, r0, r9, lsl #2
     20c:	7b0b1400 	blvc	2c5214 <__core1_vectors-0xd3adec>
     210:	0500000a 	streq	r0, [r0, #-10]
                     ALT_CLKMGR_MAINPLL_VCO1_DENOM_SET(cfg->mainpll.vco1_denom) |
                     ALT_CLKMGR_MAINPLL_VCO1_NUMER_SET((clkStep>>16) - 1));
        clkStep += clk100;
     214:	00810944 	addeq	r0, r1, r4, asr #18
     218:	0b180000 	bleq	600220 <__core1_vectors-0x9ffde0>
     21c:	00000aa9 	andeq	r0, r0, r9, lsr #21
     220:	81094505 	tsthi	r9, r5, lsl #10
        /* sleep 5 ms for voltages to return to level */
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	1c000000 	stcne	0, cr0, [r0], {-0}
     228:	000f550b 	andeq	r5, pc, fp, lsl #10
     22c:	09460500 	stmdbeq	r6, {r8, sl}^
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	00000081 	andeq	r0, r0, r1, lsl #1
     234:	63100020 	tstvs	r0, #32
     238:	08000002 	stmdaeq	r0, {r1}
     23c:	084f0501 	stmdaeq	pc, {r0, r8, sl}^	; <UNPREDICTABLE>
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	0000027b 	andeq	r0, r0, fp, ror r2
     244:	000f410b 	andeq	r4, pc, fp, lsl #2
     248:	0a500500 	beq	1401650 <__end__+0x3e5630>
     24c:	0000027b 	andeq	r0, r0, fp, ror r2
     250:	0b660b00 	bleq	1982e58 <__end__+0x966e38>
     254:	51050000 	mrspl	r0, (UNDEF: 5)
     258:	00027b09 	andeq	r7, r2, r9, lsl #22
  }
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	d4118000 	ldrle	r8, [r1], #-0
     260:	0500000d 	streq	r0, [r0, #-13]
     264:	011f0a53 	tsteq	pc, r3, asr sl	; <UNPREDICTABLE>
     268:	01000000 	mrseq	r0, (UNDEF: 0)
     26c:	000e1011 	andeq	r1, lr, r1, lsl r0
     270:	0a560500 	beq	1581678 <__end__+0x565658>
     274:	0000011f 	andeq	r0, r0, pc, lsl r1
     278:	08000104 	stmdaeq	r0, {r2, r8}
     27c:	0000011d 	andeq	r0, r0, sp, lsl r1
     280:	0000028b 	andeq	r0, r0, fp, lsl #5
     284:	00008809 	andeq	r8, r0, r9, lsl #16
                   ALT_CLKMGR_MAINPLL_VCO1_DENOM_SET(cfg->mainpll.vco1_denom) |
                   ALT_CLKMGR_MAINPLL_VCO1_NUMER_SET(cfg->mainpll.vco1_numer));

  /* sleep 5 ms for voltages to return to level */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	10001f00 	andne	r1, r0, r0, lsl #30
     28c:	00000a54 	andeq	r0, r0, r4, asr sl
     290:	62050190 	andvs	r0, r5, #144, 2	; 0x24
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	0002ce08 	andeq	ip, r2, r8, lsl #28
     298:	0a340b00 	beq	d02ea0 <__core1_vectors-0x2fd160>
     29c:	63050000 	movwvs	r0, #20480	; 0x5000
     2a0:	0002ce12 	andeq	ip, r2, r2, lsl lr

  /* vco1 of perpllgrp */
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	040b0000 	streq	r0, [fp], #-0
     2a8:	0500000e 	streq	r0, [r0, #-14]
     2ac:	00810664 	addeq	r0, r1, r4, ror #12
     2b0:	0b040000 	bleq	1002b8 <__core1_vectors-0xeffd48>
     2b4:	00000493 	muleq	r0, r3, r4
     2b8:	d4096605 	strle	r6, [r9], #-1541	; 0xfffff9fb
     2bc:	08000002 	stmdaeq	r0, {r1}
     2c0:	0002630b 	andeq	r6, r2, fp, lsl #6
     2c4:	1e670500 	cdpne	5, 6, cr0, cr7, cr0, {0}
     2c8:	00000236 	andeq	r0, r0, r6, lsr r2
     2cc:	040f0088 	streq	r0, [pc], #-136	; 2d4 <__core1_vectors-0xfffd2c>
                   ALT_CLKMGR_PERPLL_VCO1_DENOM_SET(cfg->perpll.vco1_denom) |
                   ALT_CLKMGR_PERPLL_VCO1_NUMER_SET(cfg->perpll.vco1_numer));

  /* #############################################################
     Give enough time for software-managed clock to be reset    */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	0000028b 	andeq	r0, r0, fp, lsl #5
     2d4:	0002e408 	andeq	lr, r2, r8, lsl #8
     2d8:	0002e400 	andeq	lr, r2, r0, lsl #8
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	00880900 	addeq	r0, r8, r0, lsl #18
     2e0:	001f0000 	andseq	r0, pc, r0
     2e4:	02ea040f 	rsceq	r0, sl, #251658240	; 0xf000000
     2e8:	0d120000 	ldceq	0, cr0, [r2, #-0]

  /* ############################################################# */

  /* Power up Bandgap and Analog Circuitry */
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	00000e09 	andeq	r0, r0, r9, lsl #28
     2f0:	087a0508 	ldmdaeq	sl!, {r3, r8, sl}^
     2f4:	00000313 	andeq	r0, r0, r3, lsl r3
     2f8:	000ba50b 	andeq	sl, fp, fp, lsl #10
     2fc:	117b0500 	cmnne	fp, r0, lsl #10
     300:	00000313 	andeq	r0, r0, r3, lsl r3
     304:	30db0b00 	sbcscc	r0, fp, r0, lsl #22
             ALT_CLKMGR_MAINPLL_VCO0_PWRDN_SET_MSK |
             ALT_CLKMGR_MAINPLL_VCO0_BGPWRDN_SET_MSK);
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	7c050000 	stcvc	0, cr0, [r5], {-0}
     30c:	00008106 	andeq	r8, r0, r6, lsl #2
     310:	0f000400 	svceq	0x00000400
     314:	00004d04 	andeq	r4, r0, r4, lsl #26
     318:	06810d00 	streq	r0, [r1], r0, lsl #26
     31c:	05680000 	strbeq	r0, [r8, #-0]!
     320:	045c08ba 	ldrbeq	r0, [ip], #-2234	; 0xfffff746
             ALT_CLKMGR_PERPLL_VCO0_PWRDN_SET_MSK |
             ALT_CLKMGR_PERPLL_VCO0_BGPWRDN_SET_MSK);

  /* #############################################################
     Give enough time for Bandgap and Analog Circuitry to power up */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	5f0e0000 	svcpl	0x000e0000
     328:	bb050070 	bllt	1404f0 <__core1_vectors-0xebfb10>
     32c:	00031312 	andeq	r1, r3, r2, lsl r3
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	5f0e0000 	svcpl	0x000e0000
     334:	bc050072 	stclt	0, cr0, [r5], {114}	; 0x72
     338:	00008107 	andeq	r8, r0, r7, lsl #2
     33c:	5f0e0400 	svcpl	0x000e0400
   / Software should simulateously update the 'Enable' bit and the 'External Regulator Input Select'
   / in the same write access to the VCO register.
   / When the 'Enable' bit is clear, the 'External Regulator Input Select' should be set, and vice versa.
   / mainpllgrp 
  */
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	bd050077 	stclt	0, cr0, [r5, #-476]	; 0xfffffe24
     344:	00008107 	andeq	r8, r0, r7, lsl #2
     348:	3a0b0800 	bcc	2c2350 <__core1_vectors-0xd3dcb0>
     34c:	0500000a 	streq	r0, [r0, #-10]
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	002c09be 	strhteq	r0, [ip], -lr
     354:	0b0c0000 	bleq	30035c <__core1_vectors-0xcffca4>
     358:	0000025d 	andeq	r0, r0, sp, asr r2
     35c:	2c09bf05 	stccs	15, cr11, [r9], {5}
     360:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     364:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
                (data32 & ~ALT_CLKMGR_MAINPLL_VCO0_REGEXTSEL_SET_MSK)
                 | ALT_CLKMGR_MAINPLL_VCO0_EN_SET_MSK);

  /* perpllgrp */
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	11c00500 	bicne	r0, r0, r0, lsl #10
     36c:	000002eb 	andeq	r0, r0, fp, ror #5
     370:	0df60b10 			; <UNDEFINED> instruction: 0x0df60b10
     374:	c1050000 	mrsgt	r0, (UNDEF: 5)
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	00008107 	andeq	r8, r0, r7, lsl #2
     37c:	e40b1800 	str	r1, [fp], #-2048	; 0xfffff800
     380:	05000005 	streq	r0, [r0, #-5]
     384:	011d0ac8 	tsteq	sp, r8, asr #21
     388:	0b1c0000 	bleq	700390 <__core1_vectors-0x8ffc70>
     38c:	00001c39 	andeq	r1, r0, r9, lsr ip
                 (data32 & ~ALT_CLKMGR_PERPLL_VCO0_REGEXTSEL_SET_MSK)
                 | ALT_CLKMGR_PERPLL_VCO0_EN_SET_MSK);

  /* alteragrp.nocclk */
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	e01dca05 	ands	ip, sp, r5, lsl #20
     394:	20000005 	andcs	r0, r0, r5
     398:	00117d0b 	andseq	r7, r1, fp, lsl #26
     39c:	1dcc0500 	cfstr64ne	mvdx0, [ip]
     3a0:	0000060a 	andeq	r0, r0, sl, lsl #12
               cfg->alteragrp.mpuclk);
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	0ac60b24 	beq	ff18303c <__shm_end__+0xbf18303c>
     3a8:	cf050000 	svcgt	0x00050000
     3ac:	00062e0d 	andeq	r2, r6, sp, lsl #28
     3b0:	4a0b2800 	bmi	2ca3b8 <__core1_vectors-0xd35c48>
     3b4:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
               cfg->alteragrp.nocclk);

  /* Main PLL Clock Source and Counters/Divider
     ------------------------------------------
     mainpll.c0 - pll0_mpu_base_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	064809d0 			; <UNDEFINED> instruction: 0x064809d0
     3bc:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
     3c0:	0062755f 	rsbeq	r7, r2, pc, asr r5
     3c4:	eb11d305 	bl	474fe0 <__core1_vectors-0xb8b020>
     3c8:	30000002 	andcc	r0, r0, r2
     3cc:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
     3d0:	12d40500 	sbcsne	r0, r4, #0, 10
     3d4:	00000313 	andeq	r0, r0, r3, lsl r3
     3d8:	755f0e38 	ldrbvc	r0, [pc, #-3640]	; fffff5a8 <__shm_end__+0xbffff5a8>
     3dc:	d5050072 	strle	r0, [r5, #-114]	; 0xffffff8e
     3e0:	00008107 	andeq	r8, r0, r7, lsl #2
               ALT_CLKMGR_MAINPLL_MPUCLK_CNT_SET(cfg->mainpll.mpuclk_cnt) |
               ALT_CLKMGR_MAINPLL_MPUCLK_SRC_SET(cfg->mainpll.mpuclk_src));
  /* mainpll.c1 - pll0_noc _base_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	0a0b3c00 	beq	2cf3ec <__core1_vectors-0xd30c14>
     3e8:	0500000a 	streq	r0, [r0, #-10]
     3ec:	064e11d8 			; <UNDEFINED> instruction: 0x064e11d8
     3f0:	0b400000 	bleq	10003f8 <alt_clk_freq_get_peri_pll+0xe4>
     3f4:	00000156 	andeq	r0, r0, r6, asr r1
     3f8:	5e11d905 	vnmlspl.f16	s26, s2, s10	; <UNPREDICTABLE>
     3fc:	43000006 	movwmi	r0, #6
     400:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
     404:	11dc0500 	bicsne	r0, ip, r0, lsl #10
     408:	000002eb 	andeq	r0, r0, fp, ror #5
     40c:	2ee30b44 	vfmscs.f64	d16, d3, d4
               ALT_CLKMGR_MAINPLL_NOCCLK_CNT_SET(cfg->mainpll.nocclk_cnt) |
               ALT_CLKMGR_MAINPLL_NOCCLK_SRC_SET(cfg->mainpll.nocclk_src));
  /* mainpll.c2 - pll0_emaca_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	df050000 	svcle	0x00050000
     414:	00008107 	andeq	r8, r0, r7, lsl #2
     418:	270b4c00 	strcs	r4, [fp, -r0, lsl #24]
     41c:	05000006 	streq	r0, [r0, #-6]
     420:	00a30ae0 	adceq	r0, r3, r0, ror #21
     424:	0b500000 	bleq	140042c <__end__+0x3e440c>
               ALT_CLKMGR_MAINPLL_CNTR2CLK_CNT_SET(cfg->mainpll.cntr2clk_cnt));
  /* mainpll.c3 - pll0_emacb_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	00002b3e 	andeq	r2, r0, lr, lsr fp
     42c:	7a12e305 	bvc	4b9048 <__core1_vectors-0xb46fb8>
     430:	54000004 	strpl	r0, [r0], #-4
     434:	0001ab0b 	andeq	sl, r1, fp, lsl #22
     438:	0ce70500 	cfstr64eq	mvdx0, [r7]
     43c:	00000137 	andeq	r0, r0, r7, lsr r1
               ALT_CLKMGR_MAINPLL_CNTR3CLK_CNT_SET(cfg->mainpll.cntr3clk_cnt));
  /* mainpll.c4 - pll0_emac_ptp_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	0a260b58 	beq	9831a8 <__core1_vectors-0x67ce58>
     444:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
     448:	0001110e 	andeq	r1, r1, lr, lsl #2
     44c:	940b5c00 	strls	r5, [fp], #-3072	; 0xfffff400
     450:	05000006 	streq	r0, [r0, #-6]
     454:	008109ea 	addeq	r0, r1, sl, ror #19
               ALT_CLKMGR_MAINPLL_CNTR4CLK_CNT_SET(cfg->mainpll.cntr4clk_cnt));
  /* mainpll.c5 - pll0_gpio_db_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	00640000 	rsbeq	r0, r4, r0
     45c:	00008113 	andeq	r8, r0, r3, lsl r1
     460:	00047a00 	andeq	r7, r4, r0, lsl #20
     464:	047a1400 	ldrbteq	r1, [sl], #-1024	; 0xfffffc00
     468:	1d140000 	ldcne	0, cr0, [r4, #-0]
     46c:	14000001 	strne	r0, [r0], #-1
               ALT_CLKMGR_MAINPLL_CNTR5CLK_CNT_SET(cfg->mainpll.cntr5clk_cnt));
  /* mainpll.c6 - pll0_sdmmc_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	000005ce 	andeq	r0, r0, lr, asr #11
     474:	00008114 	andeq	r8, r0, r4, lsl r1
     478:	040f0000 	streq	r0, [pc], #-0	; 480 <__core1_vectors-0xfffb80>
     47c:	00000485 	andeq	r0, r0, r5, lsl #9
     480:	00047a15 	andeq	r7, r4, r5, lsl sl
     484:	04461600 	strbeq	r1, [r6], #-1536	; 0xfffffa00
               ALT_CLKMGR_MAINPLL_CNTR6CLK_CNT_SET(cfg->mainpll.cntr6clk_cnt));
  /* mainpll.c7 - pll0_h2f_user0_clk (A.K.A. s2f_user0_clk) */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	04280000 	strteq	r0, [r8], #-0
     48c:	08026505 	stmdaeq	r2, {r0, r2, r8, sl, sp, lr}
     490:	000005ce 	andeq	r0, r0, lr, asr #11
     494:	00099217 	andeq	r9, r9, r7, lsl r2
     498:	02670500 	rsbeq	r0, r7, #0, 10
     49c:	00008107 	andeq	r8, r0, r7, lsl #2
     4a0:	22170000 	andscs	r0, r7, #0
     4a4:	05000005 	streq	r0, [r0, #-5]
     4a8:	ba0b026c 	blt	2c0e60 <__core1_vectors-0xd3f1a0>
     4ac:	04000006 	streq	r0, [r0], #-6
     4b0:	000b8717 	andeq	r8, fp, r7, lsl r7
               ALT_CLKMGR_MAINPLL_CNTR7CLK_CNT_SET(cfg->mainpll.cntr7clk_cnt) |
               ALT_CLKMGR_MAINPLL_CNTR7CLK_SRC_SET(cfg->mainpll.cntr7clk_src));
  /* mainpll.c8 - pll0_h2f_user1_clk (A.K.A. s2f_user1_clk) */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	026c0500 	rsbeq	r0, ip, #0, 10
     4b8:	0006ba14 	andeq	fp, r6, r4, lsl sl
     4bc:	10170800 	andsne	r0, r7, r0, lsl #16
     4c0:	0500000a 	streq	r0, [r0, #-10]
     4c4:	ba1e026c 	blt	780e7c <__core1_vectors-0x87f184>
     4c8:	0c000006 	stceq	0, cr0, [r0], {6}
               ALT_CLKMGR_MAINPLL_CNTR8CLK_CNT_SET(cfg->mainpll.cntr8clk_cnt));
  /* mainpll.c9 - pll0_hmc_pll_ref_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	000dff17 	andeq	pc, sp, r7, lsl pc	; <UNPREDICTABLE>
     4d0:	026e0500 	rsbeq	r0, lr, #0, 10
     4d4:	00008108 	andeq	r8, r0, r8, lsl #2
     4d8:	fa171000 	blx	5c44e0 <__core1_vectors-0xa3bb20>
     4dc:	05000007 	streq	r0, [r0, #-7]
     4e0:	ba08026f 	blt	200ea4 <__core1_vectors-0xdff15c>
     4e4:	14000008 	strne	r0, [r0], #-8
     4e8:	00042d17 	andeq	r2, r4, r7, lsl sp
     4ec:	02720500 	rsbseq	r0, r2, #0, 10
     4f0:	00008107 	andeq	r8, r0, r7, lsl #2
     4f4:	41173000 	tstmi	r7, r0
               ALT_CLKMGR_MAINPLL_CNTR9CLK_CNT_SET(cfg->mainpll.cntr9clk_cnt) |
               ALT_CLKMGR_MAINPLL_CNTR9CLK_SRC_SET(cfg->mainpll.cntr9clk_src));
  /* mainpll.c15 - periph_ref_clk
   * Comment out because C15 input for PLL1 is not supported (2014.12.15 A10_5v4.PDF) */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	0500000e 	streq	r0, [r0, #-14]
     4fc:	cf160273 	svcgt	0x00160273
     500:	34000008 	strcc	r0, [r0], #-8
     504:	00068917 	andeq	r8, r6, r7, lsl r9
     508:	02750500 	rsbseq	r0, r5, #0, 10
     50c:	00008107 	andeq	r8, r0, r7, lsl #2
               ALT_CLKMGR_MAINPLL_CNTR15CLK_CNT_SET(cfg->mainpll.cntr15clk_cnt));
  /*mainpll's NoC Clocks's divider */
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	7d173800 	ldcvc	8, cr3, [r7, #-0]
     514:	05000007 	streq	r0, [r0, #-7]
     518:	e00a0277 	and	r0, sl, r7, ror r2
     51c:	3c000008 	stccc	0, cr0, [r0], {8}
     520:	000e5117 	andeq	r5, lr, r7, lsl r1
     524:	027a0500 	rsbseq	r0, sl, #0, 10
     528:	00019d13 	andeq	r9, r1, r3, lsl sp
     52c:	f1174000 			; <UNDEFINED> instruction: 0xf1174000
     530:	05000002 	streq	r0, [r0, #-2]
     534:	8107027b 	tsthi	r7, fp, ror r2
     538:	44000000 	strmi	r0, [r0], #-0
     53c:	00066f17 	andeq	r6, r6, r7, lsl pc
     540:	027c0500 	rsbseq	r0, ip, #0, 10
     544:	00019d13 	andeq	r9, r1, r3, lsl sp
     548:	a9174800 	ldmdbge	r7, {fp, lr}
     54c:	05000008 	streq	r0, [r0, #-8]
     550:	e614027d 			; <UNDEFINED> instruction: 0xe614027d
     554:	4c000008 	stcmi	0, cr0, [r0], {8}
     558:	00011017 	andeq	r1, r1, r7, lsl r0
     55c:	02800500 	addeq	r0, r0, #0, 10
     560:	00008107 	andeq	r8, r0, r7, lsl #2
     564:	2f175000 	svccs	0x00175000
     568:	05000006 	streq	r0, [r0, #-6]
     56c:	ce090281 	cdpgt	2, 0, cr0, cr9, cr1, {4}
     570:	54000005 	strpl	r0, [r0], #-5
     574:	000a0517 	andeq	r0, sl, r7, lsl r5
     578:	02a40500 	adceq	r0, r4, #0, 10
     57c:	00089507 	andeq	r9, r8, r7, lsl #10
     580:	54185800 	ldrpl	r5, [r8], #-2048	; 0xfffff800
     584:	0500000a 	streq	r0, [r0, #-10]
     588:	ce1302a8 	cdpgt	2, 1, cr0, cr3, cr8, {5}

  /* Peripheral PLL Clock Source and Counters/Divider
     ------------------------------------------------
     perpll.c2 - pll1_emaca_clk 
  */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	48000002 	stmdami	r0, {r1}
     590:	07871801 	streq	r1, [r7, r1, lsl #16]
     594:	a9050000 	stmdbge	r5, {}	; <UNPREDICTABLE>
     598:	028b1202 	addeq	r1, fp, #536870912	; 0x20000000
     59c:	014c0000 	mrseq	r0, (UNDEF: 76)
     5a0:	00061d18 	andeq	r1, r6, r8, lsl sp
     5a4:	02ad0500 	adceq	r0, sp, #0, 10
     5a8:	0008f70c 	andeq	pc, r8, ip, lsl #14
     5ac:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
     5b0:	00000834 	andeq	r0, r0, r4, lsr r8
     5b4:	1002b205 	andne	fp, r2, r5, lsl #4
               ALT_CLKMGR_PERPLL_CNTR2CLK_CNT_SET(cfg->perpll.cntr2clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_SET(cfg->perpll.cntr2clk_src));
  /* perpll.c3 - pll1_emacb_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0000067b 	andeq	r0, r0, fp, ror r6
     5bc:	131802e0 	tstne	r8, #224, 4
     5c0:	05000000 	streq	r0, [r0, #-0]
     5c4:	030a02b4 	movweq	r0, #41652	; 0xa2b4
     5c8:	ec000009 	stc	0, cr0, [r0], {9}
     5cc:	040f0002 	streq	r0, [pc], #-2	; 5d4 <__core1_vectors-0xfffa2c>
     5d0:	000005d4 	ldrdeq	r0, [r0], -r4
     5d4:	09080102 	stmdbeq	r8, {r1, r8}
     5d8:	15000004 	strne	r0, [r0, #-4]
     5dc:	000005d4 	ldrdeq	r0, [r0], -r4
     5e0:	045c040f 	ldrbeq	r0, [ip], #-1039	; 0xfffffbf1
               ALT_CLKMGR_PERPLL_CNTR3CLK_CNT_SET(cfg->perpll.cntr3clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR3CLK_SRC_SET(cfg->perpll.cntr3clk_src));
  /* perpll.c4 - pll1_emac_ptp_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	81130000 	tsthi	r3, r0
     5e8:	04000000 	streq	r0, [r0], #-0
     5ec:	14000006 	strne	r0, [r0], #-6
     5f0:	0000047a 	andeq	r0, r0, sl, ror r4
     5f4:	00011d14 	andeq	r1, r1, r4, lsl sp
     5f8:	06041400 	streq	r1, [r4], -r0, lsl #8
     5fc:	81140000 	tsthi	r4, r0
     600:	00000000 	andeq	r0, r0, r0
     604:	05db040f 	ldrbeq	r0, [fp, #1039]	; 0x40f
     608:	040f0000 	streq	r0, [pc], #-0	; 610 <__core1_vectors-0xfff9f0>
     60c:	000005e6 	andeq	r0, r0, r6, ror #11
               ALT_CLKMGR_PERPLL_CNTR4CLK_CNT_SET(cfg->perpll.cntr4clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR4CLK_SRC_SET(cfg->perpll.cntr4clk_src));
  /* perpll.c5 - pll1_gpio_db_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	0000af13 	andeq	sl, r0, r3, lsl pc
     614:	00062e00 	andeq	r2, r6, r0, lsl #28
     618:	047a1400 	ldrbteq	r1, [sl], #-1024	; 0xfffffc00
     61c:	1d140000 	ldcne	0, cr0, [r4, #-0]
     620:	14000001 	strne	r0, [r0], #-1
     624:	000000af 	andeq	r0, r0, pc, lsr #1
     628:	00008114 	andeq	r8, r0, r4, lsl r1
     62c:	040f0000 	streq	r0, [pc], #-0	; 634 <__core1_vectors-0xfff9cc>
     630:	00000610 	andeq	r0, r0, r0, lsl r6
     634:	00008113 	andeq	r8, r0, r3, lsl r1
     638:	00064800 	andeq	r4, r6, r0, lsl #16
               ALT_CLKMGR_PERPLL_CNTR5CLK_CNT_SET(cfg->perpll.cntr5clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR5CLK_SRC_SET(cfg->perpll.cntr5clk_src));
  /* perpll.c6 - pll1_sdmmc_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	047a1400 	ldrbteq	r1, [sl], #-1024	; 0xfffffc00
     640:	1d140000 	ldcne	0, cr0, [r4, #-0]
     644:	00000001 	andeq	r0, r0, r1
     648:	0634040f 	ldrteq	r0, [r4], -pc, lsl #8
     64c:	4d080000 	stcmi	0, cr0, [r8, #-0]
     650:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
     654:	09000006 	stmdbeq	r0, {r1, r2}
     658:	00000088 	andeq	r0, r0, r8, lsl #1
     65c:	4d080002 	stcmi	0, cr0, [r8, #-8]
     660:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     664:	09000006 	stmdbeq	r0, {r1, r2}
               ALT_CLKMGR_PERPLL_CNTR6CLK_CNT_SET(cfg->perpll.cntr6clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR6CLK_SRC_SET(cfg->perpll.cntr6clk_src));
  /* perpll.c7 - pll1_h2f_user0_clk (A.K.A. s2f_user0_clk) */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	00000088 	andeq	r0, r0, r8, lsl #1
     66c:	12050000 	andne	r0, r5, #0
     670:	0500000c 	streq	r0, [r0, #-12]
     674:	191a0124 	ldmdbne	sl, {r2, r5, r8}
     678:	19000003 	stmdbne	r0, {r0, r1}
     67c:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
               ALT_CLKMGR_PERPLL_CNTR7CLK_CNT_SET(cfg->perpll.cntr7clk_cnt));
  /* perpll.c8 - pll1_h2f_user1_clk (A.K.A. s2f_user1_clk) */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	0128050c 			; <UNDEFINED> instruction: 0x0128050c
     684:	0006b408 	andeq	fp, r6, r8, lsl #8
     688:	0a341700 	beq	d06290 <__core1_vectors-0x2f9d70>
     68c:	2a050000 	bcs	140694 <__core1_vectors-0xebf96c>
     690:	06b41101 	ldrteq	r1, [r4], r1, lsl #2
     694:	17000000 	strne	r0, [r0, -r0]
     698:	0000082d 	andeq	r0, r0, sp, lsr #16
     69c:	07012b05 	streq	r2, [r1, -r5, lsl #22]
     6a0:	00000081 	andeq	r0, r0, r1, lsl #1
     6a4:	08b31704 	ldmeq	r3!, {r2, r8, r9, sl, ip}
     6a8:	2c050000 	stccs	0, cr0, [r5], {-0}
               ALT_CLKMGR_PERPLL_CNTR8CLK_CNT_SET(cfg->perpll.cntr8clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR8CLK_SRC_SET(cfg->perpll.cntr8clk_src));
  /* perpll.c9 - pll1_hmc_pll_ref_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	06ba0b01 	ldrteq	r0, [sl], r1, lsl #22
     6b0:	00080000 	andeq	r0, r8, r0
     6b4:	067b040f 	ldrbteq	r0, [fp], -pc, lsl #8
     6b8:	040f0000 	streq	r0, [pc], #-0	; 6c0 <__core1_vectors-0xfff940>
     6bc:	0000066e 	andeq	r0, r0, lr, ror #12
     6c0:	000b7f19 	andeq	r7, fp, r9, lsl pc
               ALT_CLKMGR_PERPLL_CNTR9CLK_CNT_SET(cfg->perpll.cntr9clk_cnt));

  /* Select EMAC clock source */
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	44050e00 	strmi	r0, [r5], #-3584	; 0xfffff200
     6c8:	06f90801 	ldrbteq	r0, [r9], r1, lsl #16
     6cc:	c0170000 	andsgt	r0, r7, r0
     6d0:	0500000a 	streq	r0, [r0, #-10]
     6d4:	f9120145 			; <UNDEFINED> instruction: 0xf9120145
     6d8:	00000006 	andeq	r0, r0, r6
     6dc:	0001bf17 	andeq	fp, r1, r7, lsl pc
     6e0:	01460500 	cmpeq	r6, r0, lsl #10
     6e4:	0006f912 	andeq	pc, r6, r2, lsl r9	; <UNPREDICTABLE>
     6e8:	8c170600 	ldchi	6, cr0, [r7], {-0}
     6ec:	0500000e 	streq	r0, [r0, #-14]
     6f0:	54120147 	ldrpl	r0, [r2], #-327	; 0xfffffeb9
     6f4:	0c000000 	stceq	0, cr0, [r0], {-0}
     6f8:	00540800 	subseq	r0, r4, r0, lsl #16
     6fc:	07090000 	streq	r0, [r9, -r0]
     700:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
     704:	02000000 	andeq	r0, r0, #0
               ALT_CLKMGR_PERPLL_EMACCTL_EMAC0SEL_SET(cfg->perpll.emacctl_emac0sel) |
               ALT_CLKMGR_PERPLL_EMACCTL_EMAC1SEL_SET(cfg->perpll.emacctl_emac1sel) |
               ALT_CLKMGR_PERPLL_EMACCTL_EMAC2SEL_SET(cfg->perpll.emacctl_emac2sel));

  /* Init GPIO De-bounce Clock Divider */
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	05d01a00 	ldrbeq	r1, [r0, #2560]	; 0xa00
     70c:	1e070285 	cdpne	2, 0, cr0, cr7, cr5, {4}
     710:	17000008 	strne	r0, [r0, -r8]
     714:	000003ce 	andeq	r0, r0, lr, asr #7
     718:	18028705 	stmdane	r2, {r0, r2, r8, r9, sl, pc}
     71c:	00000088 	andeq	r0, r0, r8, lsl #1
               ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET(cfg->perpll.gpiodiv_gpiodbclk));

  /* #############################################################
     Wait until both the Main PLL and the Peripheral PLL is locked */
  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	0bab1700 	bleq	feac6328 <__shm_end__+0xbeac6328>
     724:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
     728:	05ce1202 	strbeq	r1, [lr, #514]	; 0x202
     72c:	17040000 	strne	r0, [r4, -r0]
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	0000002d 	andeq	r0, r0, sp, lsr #32
     734:	10028905 	andne	r8, r2, r5, lsl #18
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	0000081e 	andeq	r0, r0, lr, lsl r8
     73c:	03101708 	tsteq	r0, #8, 14	; 0x200000
     740:	8a050000 	bhi	140748 <__core1_vectors-0xebf8b8>
     744:	01b31702 			; <UNDEFINED> instruction: 0x01b31702
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	17240000 	strne	r0, [r4, -r0]!
     74c:	00000883 	andeq	r0, r0, r3, lsl #17


  /* Now PLL is locked, but before releasing Bypass,
     All Output Counter Reset must be set and cleared by software for correct clock operation.
     mainpll - Assert 'outresetall' */
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	0f028b05 	svceq	0x00028b05
     754:	00000081 	andeq	r0, r0, r1, lsl #1
     758:	0a2f1748 	beq	bc6480 <__core1_vectors-0x439b80>
     75c:	8c050000 	stchi	0, cr0, [r5], {-0}
     760:	007a2c02 	rsbseq	r2, sl, r2, lsl #24
     764:	17500000 	ldrbne	r0, [r0, -r0]
     768:	00000c76 	andeq	r0, r0, r6, ror ip
            ALT_CLKMGR_MAINPLL_VCO0_OUTRSTALL_SET_MSK);
  /* perpll - Assert 'outresetall' */
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	1a028d05 	bne	a3b88 <__core1_vectors-0xf5c478>
     770:	000006c0 	andeq	r0, r0, r0, asr #13
     774:	0d541758 	ldcleq	7, cr1, [r4, #-352]	; 0xfffffea0
     778:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
     77c:	01111602 	tsteq	r1, r2, lsl #12
     780:	17680000 	strbne	r0, [r8, -r0]!
     784:	00000afa 	strdeq	r0, [r0], -sl
            ALT_CLKMGR_PERPLL_VCO0_OUTRSTALL_SET_MSK);
  /* mainpll - Deassert 'outresetall' */
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	16028f05 	strne	r8, [r2], -r5, lsl #30
     78c:	00000111 	andeq	r0, r0, r1, lsl r1
     790:	0a181770 	beq	606558 <__core1_vectors-0x9f9aa8>
     794:	90050000 	andls	r0, r5, r0
     798:	01111602 	tsteq	r1, r2, lsl #12
     79c:	17780000 	ldrbne	r0, [r8, -r0]!
     7a0:	00000165 	andeq	r0, r0, r5, ror #2
             ALT_CLKMGR_MAINPLL_VCO0_OUTRSTALL_SET_MSK);
  /* perpll - Deassert 'outresetall' */
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	10029105 	andne	r9, r2, r5, lsl #2
     7a8:	0000082e 	andeq	r0, r0, lr, lsr #16
     7ac:	06e31780 	strbteq	r1, [r3], r0, lsl #15
     7b0:	92050000 	andls	r0, r5, #0
     7b4:	083e1002 	ldmdaeq	lr!, {r1, ip}
     7b8:	17880000 	strne	r0, [r8, r0]
     7bc:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
  /* Release all PLL from Bypass and then clear Clock Manager's Bootmode bit
     Note: Bypass Register has bypass, bypassS (set), bypassR (clear) */

  /* =============================================================
     Release from Bypass all mainpllgrp's clocks */
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	0f029305 	svceq	0x00029305
     7c4:	00000081 	andeq	r0, r0, r1, lsl #1
     7c8:	02e317a0 	rsceq	r1, r3, #160, 14	; 0x2800000
     7cc:	94050000 	strls	r0, [r5], #-0
  /* Immediately following writes to
     CTRL.BOOTMODE, MAINPLLGRP.BYPASS.MPU or MAINPLLGRP.BYPASS.NOC register bits
     SW should wait 0.5 usecs and then poll this BUSY bit until it is IDLE
     before proceeding with any other register writes in the Clock Manager.
  */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	01111602 	tsteq	r1, r2, lsl #12
     7d4:	17a40000 	strne	r0, [r4, r0]!
     7d8:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	16029505 	strne	r9, [r2], -r5, lsl #10
     7e0:	00000111 	andeq	r0, r0, r1, lsl r1
     7e4:	0f0117ac 	svceq	0x000117ac
     7e8:	96050000 	strls	r0, [r5], -r0

  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	01111602 	tsteq	r1, r2, lsl #12
     7f0:	17b40000 	ldrne	r0, [r4, r0]!
     7f4:	000009ec 	andeq	r0, r0, ip, ror #19
     7f8:	16029705 	strne	r9, [r2], -r5, lsl #14
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	00000111 	andeq	r0, r0, r1, lsl r1
     800:	014517bc 	strheq	r1, [r5, #-124]	; 0xffffff84
     804:	98050000 	stmdals	r5, {}	; <UNPREDICTABLE>
     808:	01111602 	tsteq	r1, r2, lsl #12
  /* ============================================================= */


  /* =============================================================
     Release from Bypass all perpllgrp's clocks */
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	17c40000 	strbne	r0, [r4, r0]
     810:	00000990 	muleq	r0, r0, r9
     814:	08029905 	stmdaeq	r2, {r0, r2, r8, fp, ip, pc}
     818:	00000081 	andeq	r0, r0, r1, lsl #1
  /* Immediately following writes to
   / CTRL.BOOTMODE, MAINPLLGRP.BYPASS.MPU or MAINPLLGRP.BYPASS.NOC register bits
   / SW should wait 0.5 usecs and then poll this BUSY bit until it is IDLE
   / before proceeding with any other register writes in the Clock Manager.
  */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	d40800cc 	strle	r0, [r8], #-204	; 0xffffff34
     820:	2e000005 	cdpcs	0, 0, cr0, cr0, cr5, {0}
     824:	09000008 	stmdbeq	r0, {r3}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	00000088 	andeq	r0, r0, r8, lsl #1
     82c:	d4080019 	strle	r0, [r8], #-25	; 0xffffffe7
     830:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
     834:	09000008 	stmdbeq	r0, {r3}

  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	00000088 	andeq	r0, r0, r8, lsl #1
     83c:	d4080007 	strle	r0, [r8], #-7
     840:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
     844:	09000008 	stmdbeq	r0, {r3}
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	00000088 	andeq	r0, r0, r8, lsl #1
     84c:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
     850:	07029e05 	streq	r9, [r2, -r5, lsl #28]
     854:	00000875 	andeq	r0, r0, r5, ror r8


  /* =============================================================
   / Clear Clock Manager's Bootmode bit 
  */
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	000e1817 	andeq	r1, lr, r7, lsl r8
     85c:	02a10500 	adceq	r0, r1, #0, 10
     860:	0008751b 	andeq	r7, r8, fp, lsl r5
     864:	48170000 	ldmdami	r7, {}	; <UNPREDICTABLE>
     868:	05000008 	streq	r0, [r0, #-8]
     86c:	851802a2 	ldrhi	r0, [r8, #-674]	; 0xfffffd5e
     870:	78000008 	stmdavc	r0, {r3}
  /* Immediately following writes to
     CTRL.BOOTMODE, MAINPLLGRP.BYPASS.MPU or MAINPLLGRP.BYPASS.NOC register bits
     SW should wait 0.5 usecs and then poll this BUSY bit until it is IDLE
     before proceeding with any other register writes in the Clock Manager.
  */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	03130800 	tsteq	r3, #0, 16
     878:	08850000 	stmeq	r5, {}	; <UNPREDICTABLE>
     87c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	1d000000 	stcne	0, cr0, [r0, #-0]
     884:	00880800 	addeq	r0, r8, r0, lsl #16
     888:	08950000 	ldmeq	r5, {}	; <UNPREDICTABLE>
     88c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>

  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	1d000000 	stcne	0, cr0, [r0, #-0]
     894:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
     898:	ba030283 	blt	c12ac <__core1_vectors-0xf3ed54>
     89c:	1c000008 	stcne	0, cr0, [r0], {8}
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	00000446 	andeq	r0, r0, r6, asr #8
     8a4:	0b029a05 	bleq	a70c0 <__core1_vectors-0xf58f40>
     8a8:	00000709 	andeq	r0, r0, r9, lsl #14
     8ac:	0001381c 	andeq	r3, r1, ip, lsl r8
  /* ============================================================= */

  /* Enable mainpllgrp's software-managed clock */
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	02a30500 	adceq	r0, r3, #0, 10
     8b4:	00084e0b 	andeq	r4, r8, fp, lsl #28
     8b8:	d4080000 	strle	r0, [r8], #-0
     8bc:	ca000005 	bgt	8d8 <__core1_vectors-0xfff728>
               ALT_CLKMGR_MAINPLL_ENS_S2FUSER0CLKEN_SET_MSK |
               ALT_CLKMGR_MAINPLL_ENS_HMCPLLREFCLKEN_SET_MSK);

  /* Enable perpllgrp's software-managed clock */
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	09000008 	stmdbeq	r0, {r3}
     8c4:	00000088 	andeq	r0, r0, r8, lsl #1
     8c8:	001d0018 	andseq	r0, sp, r8, lsl r0
     8cc:	0f000000 	svceq	0x00000000
               ALT_CLKMGR_PERPLL_ENS_RESET);

  /* Clear all interrupt status register, loss lock and slip bits might set during configuration */
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	0008ca04 	andeq	ip, r8, r4, lsl #20
     8d4:	08e01e00 	stmiaeq	r0!, {r9, sl, fp, ip}^
     8d8:	7a140000 	bvc	5008e0 <__core1_vectors-0xaff720>
     8dc:	00000004 	andeq	r0, r0, r4
               ALT_CLKMGR_CLKMGR_INTR_PERPLLRFSLIP_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_MAINPLLFBSLIP_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_PERPLLFBSLIP_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_MAINPLLACHIEVED_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_PERPLLACHIEVED_SET_MSK);
    return ALT_E_SUCCESS;
     8e0:	08d5040f 	ldmeq	r5, {r0, r1, r2, r3, sl}^
}
     8e4:	040f0000 	streq	r0, [pc], #-0	; 8ec <__core1_vectors-0xfff714>
     8e8:	0000019d 	muleq	r0, sp, r1
     8ec:	0008f71e 	andeq	pc, r8, lr, lsl r7	; <UNPREDICTABLE>
     8f0:	00811400 	addeq	r1, r1, r0, lsl #8
     8f4:	0f000000 	svceq	0x00000000
     8f8:	0008fd04 	andeq	pc, r8, r4, lsl #26
     8fc:	ec040f00 	stc	15, cr0, [r4], {-0}
     900:	08000008 	stmdaeq	r0, {r3}
     904:	0000066e 	andeq	r0, r0, lr, ror #12
     908:	00000913 	andeq	r0, r0, r3, lsl r9
     90c:	00008809 	andeq	r8, r0, r9, lsl #16
     910:	1f000200 	svcne	0x00000200
     914:	00000454 	andeq	r0, r0, r4, asr r4
     918:	17033305 	strne	r3, [r3, -r5, lsl #6]
     91c:	0000047a 	andeq	r0, r0, sl, ror r4
     920:	00044d1f 	andeq	r4, r4, pc, lsl sp
     924:	03340500 	teqeq	r4, #0, 10
     928:	0004801d 	andeq	r8, r4, sp, lsl r0
     92c:	0dbc2000 	ldceq	0, cr2, [ip]
     930:	67070000 	strvs	r0, [r7, -r0]
     934:	0005ce0e 	andeq	ip, r5, lr, lsl #28
     938:	0c140300 	ldceq	3, cr0, [r4], {-0}
     93c:	42080000 	andmi	r0, r8, #0
     940:	00066e10 	andeq	r6, r6, r0, lsl lr
     944:	04d60300 	ldrbeq	r0, [r6], #768	; 0x300
     948:	41090000 	mrsmi	r0, (UNDEF: 9)
     94c:	0000331d 	andeq	r3, r0, sp, lsl r3
     950:	09450300 	stmdbeq	r5, {r8, r9}^
     954:	2a0a0000 	bcs	28095c <__core1_vectors-0xd7f6a4>
     958:	00005b12 	andeq	r5, r0, r2, lsl fp
     95c:	0a0c0a00 	beq	303164 <__core1_vectors-0xcfce9c>
     960:	098e092f 	stmibeq	lr, {r0, r1, r2, r3, r5, r8, fp}
     964:	c40b0000 	strgt	r0, [fp], #-0
     968:	0a000004 	beq	980 <__core1_vectors-0xfff680>
     96c:	005b0d30 	subseq	r0, fp, r0, lsr sp
     970:	0b000000 	bleq	978 <__core1_vectors-0xfff688>
     974:	0000050d 	andeq	r0, r0, sp, lsl #10
     978:	5b0d310a 	blpl	34cda8 <__core1_vectors-0xcb3258>
     97c:	04000000 	streq	r0, [r0], #-0
     980:	0002210b 	andeq	r2, r2, fp, lsl #2
     984:	0d320a00 	vldmdbeq	r2!, {s0-s-1}
     988:	0000005b 	andeq	r0, r0, fp, asr r0
     98c:	1f030008 	svcne	0x00030008
     990:	0a00000e 	beq	9d0 <__core1_vectors-0xfff630>
     994:	095d0333 	ldmdbeq	sp, {r0, r1, r4, r5, r8, r9}^
     998:	600a0000 	andvs	r0, sl, r0
     99c:	dc09380a 	stcle	8, cr3, [r9], {10}
     9a0:	0b00000a 	bleq	9d0 <__core1_vectors-0xfff630>
     9a4:	000005ca 	andeq	r0, r0, sl, asr #11
     9a8:	5b0d390a 	blpl	34edd8 <__core1_vectors-0xcb1228>
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	0003810b 	andeq	r8, r3, fp, lsl #2
     9b4:	0d3a0a00 	vldmdbeq	sl!, {s0-s-1}
     9b8:	0000005b 	andeq	r0, r0, fp, asr r0
     9bc:	0f310b04 	svceq	0x00310b04
     9c0:	3b0a0000 	blcc	2809c8 <__core1_vectors-0xd7f638>
     9c4:	00005b0d 	andeq	r5, r0, sp, lsl #22
     9c8:	ec0b0800 	stc	8, cr0, [fp], {-0}
     9cc:	0a000008 	beq	9f4 <__core1_vectors-0xfff60c>
     9d0:	005b0d3c 	subseq	r0, fp, ip, lsr sp
     9d4:	0b0c0000 	bleq	3009dc <__core1_vectors-0xcff624>
     9d8:	00000cc1 	andeq	r0, r0, r1, asr #25
     9dc:	5b0d3d0a 	blpl	34fe0c <__core1_vectors-0xcb01f4>
     9e0:	10000000 	andne	r0, r0, r0
     9e4:	0007280b 	andeq	r2, r7, fp, lsl #16
     9e8:	0d3e0a00 	vldmdbeq	lr!, {s0-s-1}
     9ec:	0000005b 	andeq	r0, r0, fp, asr r0
     9f0:	06370b14 			; <UNDEFINED> instruction: 0x06370b14
     9f4:	3f0a0000 	svccc	0x000a0000
     9f8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     9fc:	af0b1800 	svcge	0x000b1800
     a00:	0a00000d 	beq	a3c <__core1_vectors-0xfff5c4>
     a04:	005b0d40 	subseq	r0, fp, r0, asr #26
     a08:	0b1c0000 	bleq	700a10 <__core1_vectors-0x8ff5f0>
     a0c:	00000770 	andeq	r0, r0, r0, ror r7
     a10:	5b0d410a 	blpl	350e40 <__core1_vectors-0xcaf1c0>
     a14:	20000000 	andcs	r0, r0, r0
     a18:	0001fb0b 	andeq	pc, r1, fp, lsl #22
     a1c:	0d420a00 	vstreq	s1, [r2, #-0]
     a20:	0000005b 	andeq	r0, r0, fp, asr r0
     a24:	016f0b24 	cmneq	pc, r4, lsr #22
     a28:	430a0000 	movwmi	r0, #40960	; 0xa000
     a2c:	00005b0d 	andeq	r5, r0, sp, lsl #22
     a30:	720b2800 	andvc	r2, fp, #0, 16
     a34:	0a00000b 	beq	a68 <__core1_vectors-0xfff598>
     a38:	005b0d44 	subseq	r0, fp, r4, asr #26
     a3c:	0b2c0000 	bleq	b00a44 <__core1_vectors-0x4ff5bc>
     a40:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
     a44:	5b0d450a 	blpl	351e74 <__core1_vectors-0xcae18c>
     a48:	30000000 	andcc	r0, r0, r0
     a4c:	000b2e0b 	andeq	r2, fp, fp, lsl #28
     a50:	0d460a00 	vstreq	s1, [r6, #-0]
     a54:	0000005b 	andeq	r0, r0, fp, asr r0
     a58:	0f600b34 	svceq	0x00600b34
     a5c:	470a0000 	strmi	r0, [sl, -r0]
     a60:	00005b0d 	andeq	r5, r0, sp, lsl #22
     a64:	5c0b3800 	stcpl	8, cr3, [fp], {-0}
     a68:	0a00000a 	beq	a98 <__core1_vectors-0xfff568>
     a6c:	005b0d48 	subseq	r0, fp, r8, asr #26
     a70:	0b3c0000 	bleq	f00a78 <__core1_vectors-0xff588>
     a74:	00000f24 	andeq	r0, r0, r4, lsr #30
     a78:	5b0d490a 	blpl	352ea8 <__core1_vectors-0xcad158>
     a7c:	40000000 	andmi	r0, r0, r0
     a80:	000e330b 	andeq	r3, lr, fp, lsl #6
     a84:	0d4a0a00 	vstreq	s1, [sl, #-0]
     a88:	0000005b 	andeq	r0, r0, fp, asr r0
     a8c:	0b080b44 	bleq	2037a4 <__core1_vectors-0xdfc85c>
     a90:	4b0a0000 	blmi	280a98 <__core1_vectors-0xd7f568>
     a94:	00005b0d 	andeq	r5, r0, sp, lsl #22
     a98:	1e0b4800 	cdpne	8, 0, cr4, cr11, cr0, {0}
     a9c:	0a000000 	beq	aa4 <__core1_vectors-0xfff55c>
     aa0:	005b0d4c 	subseq	r0, fp, ip, asr #26
     aa4:	0b4c0000 	bleq	1300aac <__end__+0x2e4a8c>
     aa8:	000001d7 	ldrdeq	r0, [r0], -r7
     aac:	5b0d4d0a 	blpl	353edc <__core1_vectors-0xcac124>
     ab0:	50000000 	andpl	r0, r0, r0
     ab4:	0006600b 	andeq	r6, r6, fp
     ab8:	0d4e0a00 	vstreq	s1, [lr, #-0]
     abc:	0000005b 	andeq	r0, r0, fp, asr r0
     ac0:	0d6b0b54 	vstmdbeq	fp!, {d16-<overflow reg d57>}
     ac4:	4f0a0000 	svcmi	0x000a0000
     ac8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     acc:	6b0b5800 	blvs	2d6ad4 <__core1_vectors-0xd2952c>
     ad0:	0a00000e 	beq	b10 <__core1_vectors-0xfff4f0>
     ad4:	005b0d50 	subseq	r0, fp, r0, asr sp
     ad8:	005c0000 	subseq	r0, ip, r0
     adc:	00064203 	andeq	r4, r6, r3, lsl #4
     ae0:	03510a00 	cmpeq	r1, #0, 20
     ae4:	0000099a 	muleq	r0, sl, r9
     ae8:	560a540a 	strpl	r5, [sl], -sl, lsl #8
     aec:	000c0309 	andeq	r0, ip, r9, lsl #6
     af0:	05ca0b00 	strbeq	r0, [sl, #2816]	; 0xb00
     af4:	570a0000 	strpl	r0, [sl, -r0]
     af8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     afc:	810b0000 	mrshi	r0, (UNDEF: 11)
     b00:	0a000003 	beq	b14 <__core1_vectors-0xfff4ec>
     b04:	005b0d58 	subseq	r0, fp, r8, asr sp
     b08:	0b040000 	bleq	100b10 <__core1_vectors-0xeff4f0>
     b0c:	00000f31 	andeq	r0, r0, r1, lsr pc
     b10:	5b0d590a 	blpl	356f40 <__core1_vectors-0xca90c0>
     b14:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b18:	000daf0b 	andeq	sl, sp, fp, lsl #30
     b1c:	0d5a0a00 	vldreq	s1, [sl, #-0]
     b20:	0000005b 	andeq	r0, r0, fp, asr r0
     b24:	03b00b0c 	movseq	r0, #12, 22	; 0x3000
     b28:	5b0a0000 	blpl	280b30 <__core1_vectors-0xd7f4d0>
     b2c:	00005b0d 	andeq	r5, r0, sp, lsl #22
     b30:	700b1000 	andvc	r1, fp, r0
     b34:	0a000007 	beq	b58 <__core1_vectors-0xfff4a8>
     b38:	005b0d5c 	subseq	r0, fp, ip, asr sp
     b3c:	0b140000 	bleq	500b44 <__core1_vectors-0xaff4bc>
     b40:	00000d7d 	andeq	r0, r0, sp, ror sp
     b44:	5b0d5d0a 	blpl	357f74 <__core1_vectors-0xca808c>
     b48:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     b4c:	0001fb0b 	andeq	pc, r1, fp, lsl #22
     b50:	0d5e0a00 	vldreq	s1, [lr, #-0]
     b54:	0000005b 	andeq	r0, r0, fp, asr r0
     b58:	06ef0b1c 	usateq	r0, #15, ip, lsl #22
     b5c:	5f0a0000 	svcpl	0x000a0000
     b60:	00005b0d 	andeq	r5, r0, sp, lsl #22
     b64:	6f0b2000 	svcvs	0x000b2000
     b68:	0a000001 	beq	b74 <__core1_vectors-0xfff48c>
     b6c:	005b0d60 	subseq	r0, fp, r0, ror #26
     b70:	0b240000 	bleq	900b78 <__core1_vectors-0x6ff488>
     b74:	00000674 	andeq	r0, r0, r4, ror r6
     b78:	5b0d610a 	blpl	358fa8 <__core1_vectors-0xca7058>
     b7c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     b80:	000b720b 	andeq	r7, fp, fp, lsl #4
     b84:	0d620a00 	vstmdbeq	r2!, {s1-s0}
     b88:	0000005b 	andeq	r0, r0, fp, asr r0
     b8c:	012b0b2c 			; <UNDEFINED> instruction: 0x012b0b2c
     b90:	630a0000 	movwvs	r0, #40960	; 0xa000
     b94:	00005b0d 	andeq	r5, r0, sp, lsl #22
     b98:	bd0b3000 	stclt	0, cr3, [fp, #-0]
     b9c:	0a000005 	beq	bb8 <__core1_vectors-0xfff448>
     ba0:	005b0d64 	subseq	r0, fp, r4, ror #26
     ba4:	0b340000 	bleq	d00bac <__core1_vectors-0x2ff454>
     ba8:	00000f60 	andeq	r0, r0, r0, ror #30
     bac:	5b0d650a 	blpl	359fdc <__core1_vectors-0xca6024>
     bb0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     bb4:	0005930b 	andeq	r9, r5, fp, lsl #6
     bb8:	0d660a00 	vstmdbeq	r6!, {s1-s0}
     bbc:	0000005b 	andeq	r0, r0, fp, asr r0
     bc0:	0a5c0b3c 	beq	17038b8 <__end__+0x6e7898>
     bc4:	670a0000 	strvs	r0, [sl, -r0]
     bc8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     bcc:	6a0b4000 	bvs	2d0bd4 <__core1_vectors-0xd2f42c>
     bd0:	0a000009 	beq	bfc <__core1_vectors-0xfff404>
     bd4:	005b0d68 	subseq	r0, fp, r8, ror #26
     bd8:	0b440000 	bleq	1100be0 <__end__+0xe4bc0>
     bdc:	0000017c 	andeq	r0, r0, ip, ror r1
     be0:	5b0d690a 	blpl	35b010 <__core1_vectors-0xca4ff0>
     be4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     be8:	0009990b 	andeq	r9, r9, fp, lsl #18
     bec:	0d6a0a00 	vstmdbeq	sl!, {s1-s0}
     bf0:	0000005b 	andeq	r0, r0, fp, asr r0
     bf4:	09da0b4c 	ldmibeq	sl, {r2, r3, r6, r8, r9, fp}^
     bf8:	6b0a0000 	blvs	280c00 <__core1_vectors-0xd7f400>
     bfc:	00005b0d 	andeq	r5, r0, sp, lsl #22
     c00:	03005000 	movweq	r5, #0
     c04:	00000240 	andeq	r0, r0, r0, asr #4
     c08:	e8036c0a 	stmda	r3, {r1, r3, sl, fp, sp, lr}
     c0c:	0a00000a 	beq	c3c <__core1_vectors-0xfff3c4>
     c10:	09710a08 	ldmdbeq	r1!, {r3, r9, fp}^
     c14:	00000c33 	andeq	r0, r0, r3, lsr ip
     c18:	0001b10b 	andeq	fp, r1, fp, lsl #2
     c1c:	0d720a00 	vldmdbeq	r2!, {s1-s0}
     c20:	0000005b 	andeq	r0, r0, fp, asr r0
     c24:	07690b00 	strbeq	r0, [r9, -r0, lsl #22]!
     c28:	730a0000 	movwvc	r0, #40960	; 0xa000
     c2c:	00005b0d 	andeq	r5, r0, sp, lsl #22
     c30:	03000400 	movweq	r0, #1024	; 0x400
     c34:	00000925 	andeq	r0, r0, r5, lsr #18
     c38:	0f03740a 	svceq	0x0003740a
     c3c:	0a00000c 	beq	c74 <__core1_vectors-0xfff38c>
     c40:	097a0abc 	ldmdbeq	sl!, {r2, r3, r4, r5, r7, r9, fp}^
     c44:	00000c70 	andeq	r0, r0, r0, ror ip
     c48:	0005ec0b 	andeq	lr, r5, fp, lsl #24
     c4c:	247b0a00 	ldrbtcs	r0, [fp], #-2560	; 0xfffff600
     c50:	00000adc 	ldrdeq	r0, [r0], -ip
     c54:	0ddd0b00 	vldreq	d16, [sp]
     c58:	7c0a0000 	stcvc	0, cr0, [sl], {-0}
     c5c:	000c0324 	andeq	r0, ip, r4, lsr #6
     c60:	db0b6000 	blle	2d8c68 <__core1_vectors-0xd27398>
     c64:	0a000003 	beq	c78 <__core1_vectors-0xfff388>
     c68:	0c33247d 	cfldrseq	mvf2, [r3], #-500	; 0xfffffe0c
     c6c:	00b40000 	adcseq	r0, r4, r0
     c70:	0002fb03 	andeq	pc, r2, r3, lsl #22
     c74:	037e0a00 	cmneq	lr, #0, 20
     c78:	00000c3f 	andeq	r0, r0, pc, lsr ip
     c7c:	000dee21 	andeq	lr, sp, r1, lsr #28
     c80:	4d010700 	stcmi	7, cr0, [r1, #-0]
     c84:	0a000000 	beq	c8c <__core1_vectors-0xfff374>
     c88:	0d490e8b 	stcleq	14, cr0, [r9, #-556]	; 0xfffffdd4
     c8c:	29220000 	stmdbcs	r2!, {}	; <UNPREDICTABLE>
     c90:	00000005 	andeq	r0, r0, r5
     c94:	000ccc22 	andeq	ip, ip, r2, lsr #24
     c98:	f7220100 			; <UNDEFINED> instruction: 0xf7220100
     c9c:	02000008 	andeq	r0, r0, #8
     ca0:	000acc22 	andeq	ip, sl, r2, lsr #24
     ca4:	7c220300 	stcvc	3, cr0, [r2], #-0
     ca8:	04000005 	streq	r0, [r0], #-5
     cac:	000c8f22 	andeq	r8, ip, r2, lsr #30
     cb0:	a5220500 	strge	r0, [r2, #-1280]!	; 0xfffffb00
     cb4:	0600000f 	streq	r0, [r0], -pc
     cb8:	00011822 	andeq	r1, r1, r2, lsr #16
     cbc:	6d220700 	stcvs	7, cr0, [r2, #-0]
     cc0:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
     cc4:	0007c822 	andeq	ip, r7, r2, lsr #16
     cc8:	7c220900 			; <UNDEFINED> instruction: 0x7c220900
     ccc:	0a00000e 	beq	d0c <__core1_vectors-0xfff2f4>
     cd0:	00027122 	andeq	r7, r2, r2, lsr #2
     cd4:	ec220b00 			; <UNDEFINED> instruction: 0xec220b00
     cd8:	0c00000a 	stceq	0, cr0, [r0], {10}
     cdc:	00027f22 	andeq	r7, r2, r2, lsr #30
     ce0:	90220d00 	eorls	r0, r2, r0, lsl #26
     ce4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     ce8:	0005d422 	andeq	sp, r5, r2, lsr #8
     cec:	bd220f00 	stclt	15, cr0, [r2, #-0]
     cf0:	10000003 	andne	r0, r0, r3
     cf4:	000e5922 	andeq	r5, lr, r2, lsr #18
     cf8:	7d221100 	stfvcs	f1, [r2, #-0]
     cfc:	1200000f 	andne	r0, r0, #15
     d00:	000b5222 	andeq	r5, fp, r2, lsr #4
     d04:	11221300 			; <UNDEFINED> instruction: 0x11221300
     d08:	1400000d 	strne	r0, [r0], #-13
     d0c:	000d1f22 	andeq	r1, sp, r2, lsr #30
     d10:	2d221500 	cfstr32cs	mvfx1, [r2, #-0]
     d14:	1600000d 	strne	r0, [r0], -sp
     d18:	00037022 	andeq	r7, r3, r2, lsr #32
     d1c:	f4221700 	vld1.8	{d1}, [r2], r0
     d20:	18000005 	stmdane	r0, {r0, r2}
     d24:	000dc622 	andeq	ip, sp, r2, lsr #12
     d28:	fc221900 	stc2	9, cr1, [r2], #-0	; <UNPREDICTABLE>
     d2c:	1a000006 	bne	d4c <__core1_vectors-0xfff2b4>
     d30:	000e9122 	andeq	r9, lr, r2, lsr #2
     d34:	df221b00 	svcle	0x00221b00
     d38:	1c000008 	stcne	0, cr0, [r0], {8}
     d3c:	000c2b22 	andeq	r2, ip, r2, lsr #22
     d40:	60221d00 	eorvs	r1, r2, r0, lsl #26
     d44:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
     d48:	05030300 	streq	r0, [r3, #-768]	; 0xfffffd00
     d4c:	ae0a0000 	cdpge	0, 0, cr0, cr10, cr0, {0}
     d50:	000c7c03 	andeq	r7, ip, r3, lsl #24
     d54:	39040f00 	stmdbcc	r4, {r8, r9, sl, fp}
     d58:	20000009 	andcs	r0, r0, r9
     d5c:	0000083c 	andeq	r0, r0, ip, lsr r8
     d60:	550e360b 	strpl	r3, [lr, #-1547]	; 0xfffff9f5
     d64:	2000000d 	andcs	r0, r0, sp
     d68:	00000842 	andeq	r0, r0, r2, asr #16
     d6c:	550e370b 	strpl	r3, [lr, #-1803]	; 0xfffff8f5
     d70:	2100000d 	tstcs	r0, sp
     d74:	00000ecd 	andeq	r0, r0, sp, asr #29
     d78:	004d0107 	subeq	r0, sp, r7, lsl #2
     d7c:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
     d80:	000db00e 	andeq	fp, sp, lr
     d84:	031f2200 	tsteq	pc, #0, 4
     d88:	22000000 	andcs	r0, r0, #0
     d8c:	00000536 	andeq	r0, r0, r6, lsr r5
     d90:	040e2201 	streq	r2, [lr], #-513	; 0xfffffdff
     d94:	22020000 	andcs	r0, r2, #0
     d98:	00000c38 	andeq	r0, r0, r8, lsr ip
     d9c:	0c4a2203 	sfmeq	f2, 2, [sl], {3}
     da0:	22040000 	andcs	r0, r4, #0
     da4:	00000336 	andeq	r0, r0, r6, lsr r3
     da8:	03462205 	movteq	r2, #25093	; 0x6205
     dac:	00060000 	andeq	r0, r6, r0
     db0:	00069c21 	andeq	r9, r6, r1, lsr #24
     db4:	4d010700 	stcmi	7, cr0, [r1, #-0]
     db8:	0c000000 	stceq	0, cr0, [r0], {-0}
     dbc:	0dcf0e8e 	stcleq	14, cr0, [pc, #568]	; ffc <__core1_vectors-0xfff004>
     dc0:	60220000 	eorvs	r0, r2, r0
     dc4:	00000004 	andeq	r0, r0, r4
     dc8:	0007dc22 	andeq	sp, r7, r2, lsr #24
     dcc:	23000100 	movwcs	r0, #256	; 0x100
     dd0:	00000878 	andeq	r0, r0, r8, ror r8
     dd4:	510c4c01 	tstpl	ip, r1, lsl #24
     dd8:	05000009 	streq	r0, [r0, #-9]
     ddc:	00598403 	subseq	r8, r9, r3, lsl #8
     de0:	0ebb2301 	cdpeq	3, 11, cr2, cr11, cr1, {0}
     de4:	4d010000 	stcmi	0, cr0, [r1, #-0]
     de8:	0009510c 	andeq	r5, r9, ip, lsl #2
     dec:	00030500 	andeq	r0, r3, r0, lsl #10
     df0:	23010080 	movwcs	r0, #4224	; 0x1080
     df4:	0000019e 	muleq	r0, lr, r1
     df8:	510c4e01 	tstpl	ip, r1, lsl #28
     dfc:	05000009 	streq	r0, [r0, #-9]
     e00:	00800403 	addeq	r0, r0, r3, lsl #8
     e04:	01c52401 	biceq	r2, r5, r1, lsl #8
     e08:	6b010000 	blvs	40e10 <__core1_vectors-0xfbf1f0>
     e0c:	09450103 	stmdbeq	r5, {r0, r1, r8}^
     e10:	00000000 	andeq	r0, r0, r0
     e14:	08f00000 	ldmeq	r0!, {}^	; <UNPREDICTABLE>
     e18:	9c010000 	stcls	0, cr0, [r1], {-0}
     e1c:	00000e81 	andeq	r0, r0, r1, lsl #29
     e20:	67666325 	strbvs	r6, [r6, -r5, lsr #6]!
     e24:	036c0100 	cmneq	ip, #0, 2
     e28:	000e811a 	andeq	r8, lr, sl, lsl r1
     e2c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     e30:	0004fc26 	andeq	pc, r4, r6, lsr #24
     e34:	036d0100 	cmneq	sp, #0, 2
     e38:	000e8718 	andeq	r8, lr, r8, lsl r7
     e3c:	60910200 	addsvs	r0, r1, r0, lsl #4
     e40:	000f1227 	andeq	r1, pc, r7, lsr #4
     e44:	03700100 	cmneq	r0, #0, 2
     e48:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e4c:	70910200 	addsvc	r0, r1, r0, lsl #4
     e50:	0001b827 	andeq	fp, r1, r7, lsr #16
     e54:	03710100 	cmneq	r1, #0, 2
     e58:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e5c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     e60:	00042527 	andeq	r2, r4, r7, lsr #10
     e64:	03720100 	cmneq	r2, #0, 2
     e68:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e70:	0006c527 	andeq	ip, r6, r7, lsr #10
     e74:	03730100 	cmneq	r3, #0, 2
     e78:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e7c:	68910200 	ldmvs	r1, {r9}
     e80:	70040f00 	andvc	r0, r4, r0, lsl #30
     e84:	0f00000c 	svceq	0x0000000c
     e88:	00098e04 	andeq	r8, r9, r4, lsl #28
     e8c:	0eee2400 	cdpeq	4, 14, cr2, cr14, cr0, {0}
     e90:	31010000 	mrscc	r0, (UNDEF: 1)
     e94:	09451103 	stmdbeq	r5, {r0, r1, r8, ip}^
     e98:	12100000 	andsne	r0, r0, #0
     e9c:	02640100 	rsbeq	r0, r4, #0, 2
     ea0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ea4:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
     ea8:	6b6c6325 	blvs	1b19b44 <__end__+0xafdb24>
     eac:	03310100 	teqeq	r1, #0, 2
     eb0:	000d492e 	andeq	r4, sp, lr, lsr #18
     eb4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     eb8:	0c5c2800 	mrrceq	8, 0, r2, ip, cr0
     ebc:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     ec0:	09452103 	stmdbeq	r5, {r0, r1, r8, sp}^
     ec4:	11c80000 	bicne	r0, r8, r0
     ec8:	00480100 	subeq	r0, r8, r0, lsl #2
     ecc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ed0:	00000ef5 	strdeq	r0, [r0], -r5
     ed4:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
     ed8:	03290100 			; <UNDEFINED> instruction: 0x03290100
     edc:	00011d41 	andeq	r1, r1, r1, asr #26
     ee0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ee4:	000f1f26 	andeq	r1, pc, r6, lsr #30
     ee8:	03290100 			; <UNDEFINED> instruction: 0x03290100
     eec:	00005b4f 	andeq	r5, r0, pc, asr #22
     ef0:	70910200 	addsvc	r0, r1, r0, lsl #4
     ef4:	01e62400 	mvneq	r2, r0, lsl #8
     ef8:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
     efc:	09451102 	stmdbeq	r5, {r1, r8, ip}^
     f00:	00000000 	andeq	r0, r0, r0
     f04:	02640000 	rsbeq	r0, r4, #0
     f08:	9c010000 	stcls	0, cr0, [r1], {-0}
     f0c:	00000f21 	andeq	r0, r0, r1, lsr #30
     f10:	6b6c6325 	blvs	1b19bac <__end__+0xafdb8c>
     f14:	02f50100 	rscseq	r0, r5, #0, 2
     f18:	000d4930 	andeq	r4, sp, r0, lsr r9
     f1c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f20:	02c72800 	sbceq	r2, r7, #0, 16
     f24:	ef010000 	svc	0x00010000
     f28:	09452102 	stmdbeq	r5, {r1, r8, sp}^
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	00340000 	eorseq	r0, r4, r0
     f34:	9c010000 	stcls	0, cr0, [r1], {-0}
     f38:	00000f5d 	andeq	r0, r0, sp, asr pc
     f3c:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
     f40:	02ef0100 	rsceq	r0, pc, #0, 2
     f44:	00011d43 	andeq	r1, r1, r3, asr #26
     f48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f4c:	000f1f26 	andeq	r1, pc, r6, lsr #30
     f50:	02ef0100 	rsceq	r0, pc, #0, 2
     f54:	00005b51 	andeq	r5, r0, r1, asr fp
     f58:	70910200 	addsvc	r0, r1, r0, lsl #4
     f5c:	0b8f2400 	bleq	fe3c9f64 <__shm_end__+0xbe3c9f64>
     f60:	bb010000 	bllt	40f68 <__core1_vectors-0xfbf098>
     f64:	09451102 	stmdbeq	r5, {r1, r8, ip}^
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	02640000 	rsbeq	r0, r4, #0
     f70:	9c010000 	stcls	0, cr0, [r1], {-0}
     f74:	00000f89 	andeq	r0, r0, r9, lsl #31
     f78:	6b6c6325 	blvs	1b19c14 <__end__+0xafdbf4>
     f7c:	02bb0100 	adcseq	r0, fp, #0, 2
     f80:	000d4931 	andeq	r4, sp, r1, lsr r9
     f84:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f88:	02aa2800 	adceq	r2, sl, #0, 16
     f8c:	b4010000 	strlt	r0, [r1], #-0
     f90:	09452102 	stmdbeq	r5, {r1, r8, sp}^
     f94:	00000000 	andeq	r0, r0, r0
     f98:	00340000 	eorseq	r0, r4, r0
     f9c:	9c010000 	stcls	0, cr0, [r1], {-0}
     fa0:	00000fc5 	andeq	r0, r0, r5, asr #31
     fa4:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
     fa8:	02b40100 	adcseq	r0, r4, #0, 2
     fac:	00011d44 	andeq	r1, r1, r4, asr #26
     fb0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fb4:	000f1f26 	andeq	r1, pc, r6, lsr #30
     fb8:	02b40100 	adcseq	r0, r4, #0, 2
     fbc:	00005b52 	andeq	r5, r0, r2, asr fp
     fc0:	70910200 	addsvc	r0, r1, r0, lsl #4
     fc4:	0edd2400 	cdpeq	4, 13, cr2, cr13, cr0, {0}
     fc8:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     fcc:	09451102 	stmdbeq	r5, {r1, r8, ip}^
     fd0:	0f8c0000 	svceq	0x008c0000
     fd4:	023c0100 	eorseq	r0, ip, #0, 2
     fd8:	9c010000 	stcls	0, cr0, [r1], {-0}
     fdc:	00001011 	andeq	r1, r0, r1, lsl r0
     fe0:	6b6c6325 	blvs	1b19c7c <__end__+0xafdc5c>
     fe4:	02490100 	subeq	r0, r9, #0, 2
     fe8:	000d492c 	andeq	r4, sp, ip, lsr #18
     fec:	6f910200 	svcvs	0x00910200
     ff0:	0014f826 	andseq	pc, r4, r6, lsr #16
     ff4:	02490100 	subeq	r0, r9, #0, 2
     ff8:	0010113d 	andseq	r1, r0, sp, lsr r1
     ffc:	68910200 	ldmvs	r1, {r9}
    1000:	74657229 	strbtvc	r7, [r5], #-553	; 0xfffffdd7
    1004:	024b0100 	subeq	r0, fp, #0, 2
    1008:	00094515 	andeq	r4, r9, r5, lsl r5
    100c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1010:	51040f00 	tstpl	r4, r0, lsl #30
    1014:	24000009 	strcs	r0, [r0], #-9
    1018:	0000097b 	andeq	r0, r0, fp, ror r9
    101c:	11023901 	tstne	r2, r1, lsl #18
    1020:	00000945 	andeq	r0, r0, r5, asr #18
    1024:	01000f24 	tsteq	r0, r4, lsr #30
    1028:	00000068 	andeq	r0, r0, r8, rrx
    102c:	10439c01 	subne	r9, r3, r1, lsl #24
    1030:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1034:	01000000 	mrseq	r0, (UNDEF: 0)
    1038:	11320239 	teqne	r2, r9, lsr r2
    103c:	02000010 	andeq	r0, r0, #16
    1040:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1044:	00000395 	muleq	r0, r5, r3
    1048:	11022d01 	tstne	r2, r1, lsl #26
    104c:	00000945 	andeq	r0, r0, r5, asr #18
    1050:	01000ebc 			; <UNDEFINED> instruction: 0x01000ebc
    1054:	00000068 	andeq	r0, r0, r8, rrx
    1058:	106f9c01 	rsbne	r9, pc, r1, lsl #24
    105c:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1060:	01000000 	mrseq	r0, (UNDEF: 0)
    1064:	1138022d 	teqne	r8, sp, lsr #4
    1068:	02000010 	andeq	r0, r0, #16
    106c:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1070:	00000c9b 	muleq	r0, fp, ip
    1074:	11022101 	tstne	r2, r1, lsl #2
    1078:	00000945 	andeq	r0, r0, r5, asr #18
    107c:	01000e54 	tsteq	r0, r4, asr lr
    1080:	00000068 	andeq	r0, r0, r8, rrx
    1084:	109b9c01 	addsne	r9, fp, r1, lsl #24
    1088:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    108c:	01000000 	mrseq	r0, (UNDEF: 0)
    1090:	11380221 	teqne	r8, r1, lsr #4
    1094:	02000010 	andeq	r0, r0, #16
    1098:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    109c:	00000565 	andeq	r0, r0, r5, ror #10
    10a0:	11021901 	tstne	r2, r1, lsl #18
    10a4:	00000945 	andeq	r0, r0, r5, asr #18
    10a8:	00000000 	andeq	r0, r0, r0
    10ac:	0000005c 	andeq	r0, r0, ip, asr r0
    10b0:	10d79c01 	sbcsne	r9, r7, r1, lsl #24
    10b4:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    10b8:	01000000 	mrseq	r0, (UNDEF: 0)
    10bc:	11340219 	teqne	r4, r9, lsl r2
    10c0:	02000010 	andeq	r0, r0, #16
    10c4:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    10c8:	01007465 	tsteq	r0, r5, ror #8
    10cc:	4515021b 	ldrmi	r0, [r5, #-539]	; 0xfffffde5
    10d0:	02000009 	andeq	r0, r0, #9
    10d4:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    10d8:	0000054e 	andeq	r0, r0, lr, asr #10
    10dc:	11021101 	tstne	r2, r1, lsl #2
    10e0:	00000945 	andeq	r0, r0, r5, asr #18
    10e4:	00000000 	andeq	r0, r0, r0
    10e8:	0000005c 	andeq	r0, r0, ip, asr r0
    10ec:	11139c01 	tstne	r3, r1, lsl #24
    10f0:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    10f4:	01000000 	mrseq	r0, (UNDEF: 0)
    10f8:	11340211 	teqne	r4, r1, lsl r2
    10fc:	02000010 	andeq	r0, r0, #16
    1100:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1104:	01007465 	tsteq	r0, r5, ror #8
    1108:	45150213 	ldrmi	r0, [r5, #-531]	; 0xfffffded
    110c:	02000009 	andeq	r0, r0, #9
    1110:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1114:	0000047d 	andeq	r0, r0, sp, ror r4
    1118:	11020c01 	tstne	r2, r1, lsl #24
    111c:	00000945 	andeq	r0, r0, r5, asr #18
    1120:	01000e2c 	tsteq	r0, ip, lsr #28
    1124:	00000028 	andeq	r0, r0, r8, lsr #32
    1128:	113f9c01 	teqne	pc, r1, lsl #24
    112c:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1130:	01000000 	mrseq	r0, (UNDEF: 0)
    1134:	1133020c 	teqne	r3, ip, lsl #4
    1138:	02000010 	andeq	r0, r0, #16
    113c:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1140:	00000892 	muleq	r0, r2, r8
    1144:	11020001 	tstne	r2, r1
    1148:	00000945 	andeq	r0, r0, r5, asr #18
    114c:	01000dc4 	smlabteq	r0, r4, sp, r0
    1150:	00000068 	andeq	r0, r0, r8, rrx
    1154:	116b9c01 	cmnne	fp, r1, lsl #24
    1158:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    115c:	01000000 	mrseq	r0, (UNDEF: 0)
    1160:	11340200 	teqne	r4, r0, lsl #4
    1164:	02000010 	andeq	r0, r0, #16
    1168:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    116c:	000004e6 	andeq	r0, r0, r6, ror #9
    1170:	1101ef01 	tstne	r1, r1, lsl #30
    1174:	00000945 	andeq	r0, r0, r5, asr #18
    1178:	01000d20 	tsteq	r0, r0, lsr #26
    117c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1180:	11a79c01 			; <UNDEFINED> instruction: 0x11a79c01
    1184:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1188:	01000000 	mrseq	r0, (UNDEF: 0)
    118c:	113301ef 	teqne	r3, pc, ror #3
    1190:	02000010 	andeq	r0, r0, #16
    1194:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1198:	01007465 	tsteq	r0, r5, ror #8
    119c:	451501f1 	ldrmi	r0, [r5, #-497]	; 0xfffffe0f
    11a0:	02000009 	andeq	r0, r0, #9
    11a4:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    11a8:	00000950 	andeq	r0, r0, r0, asr r9
    11ac:	1101e301 	tstne	r1, r1, lsl #6
    11b0:	00000945 	andeq	r0, r0, r5, asr #18
    11b4:	01000cb8 			; <UNDEFINED> instruction: 0x01000cb8
    11b8:	00000068 	andeq	r0, r0, r8, rrx
    11bc:	11d39c01 	bicsne	r9, r3, r1, lsl #24
    11c0:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    11c4:	01000000 	mrseq	r0, (UNDEF: 0)
    11c8:	113701e3 	teqne	r7, r3, ror #3
    11cc:	02000010 	andeq	r0, r0, #16
    11d0:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    11d4:	0000074a 	andeq	r0, r0, sl, asr #14
    11d8:	1101dc01 	tstne	r1, r1, lsl #24
    11dc:	00000945 	andeq	r0, r0, r5, asr #18
    11e0:	01000c88 	smlabbeq	r0, r8, ip, r0
    11e4:	00000030 	andeq	r0, r0, r0, lsr r0
    11e8:	11ff9c01 	mvnsne	r9, r1, lsl #24
    11ec:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    11f0:	01000000 	mrseq	r0, (UNDEF: 0)
    11f4:	113401dc 	teqne	r4, ip	; <illegal shifter operand>
    11f8:	02000010 	andeq	r0, r0, #16
    11fc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1200:	00000733 	andeq	r0, r0, r3, lsr r7
    1204:	1101d501 	tstne	r1, r1, lsl #10
    1208:	00000945 	andeq	r0, r0, r5, asr #18
    120c:	01000c58 	tsteq	r0, r8, asr ip
    1210:	00000030 	andeq	r0, r0, r0, lsr r0
    1214:	122b9c01 	eorne	r9, fp, #256	; 0x100
    1218:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    121c:	01000000 	mrseq	r0, (UNDEF: 0)
    1220:	113401d5 	teqne	r4, r5	; <illegal shifter operand>
    1224:	02000010 	andeq	r0, r0, #16
    1228:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    122c:	000006cc 	andeq	r0, r0, ip, asr #13
    1230:	1101ce01 	tstne	r1, r1, lsl #28
    1234:	00000945 	andeq	r0, r0, r5, asr #18
    1238:	01000c28 	tsteq	r0, r8, lsr #24
    123c:	00000030 	andeq	r0, r0, r0, lsr r0
    1240:	12579c01 	subsne	r9, r7, #256	; 0x100
    1244:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1248:	01000000 	mrseq	r0, (UNDEF: 0)
    124c:	113401ce 	teqne	r4, lr, asr #3
    1250:	02000010 	andeq	r0, r0, #16
    1254:	2a007491 	bcs	1e4a0 <__core1_vectors-0xfe1b60>
    1258:	00000a85 	andeq	r0, r0, r5, lsl #21
    125c:	1801af01 	stmdane	r1, {r0, r8, r9, sl, fp, sp, pc}
    1260:	00000945 	andeq	r0, r0, r5, asr #18
    1264:	01000b4c 	tsteq	r0, ip, asr #22
    1268:	000000dc 	ldrdeq	r0, [r0], -ip
    126c:	12a39c01 	adcne	r9, r3, #256	; 0x100
    1270:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1274:	01000000 	mrseq	r0, (UNDEF: 0)
    1278:	113c01af 	teqne	ip, pc, lsr #3
    127c:	02000010 	andeq	r0, r0, #16
    1280:	18267491 	stmdane	r6!, {r0, r4, r7, sl, ip, sp, lr}
    1284:	0100000f 	tsteq	r0, pc
    1288:	5b3001b0 	blpl	c01950 <__core1_vectors-0x3fe6b0>
    128c:	02000000 	andeq	r0, r0, #0
    1290:	9e267091 	mcrls	0, 1, r7, cr6, cr1, {4}
    1294:	01000002 	tsteq	r0, r2
    1298:	5b3001b1 	blpl	c01964 <__core1_vectors-0x3fe69c>
    129c:	02000000 	andeq	r0, r0, #0
    12a0:	24006c91 	strcs	r6, [r0], #-3217	; 0xfffff36f
    12a4:	000008c5 	andeq	r0, r0, r5, asr #17
    12a8:	11019401 	tstne	r1, r1, lsl #8
    12ac:	00000945 	andeq	r0, r0, r5, asr #18
    12b0:	01000ae0 	smlatteq	r0, r0, sl, r0
    12b4:	0000006c 	andeq	r0, r0, ip, rrx
    12b8:	12df9c01 	sbcsne	r9, pc, #256	; 0x100
    12bc:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    12c0:	01000000 	mrseq	r0, (UNDEF: 0)
    12c4:	11370194 	teqne	r7, r4	; <illegal shifter operand>
    12c8:	02000010 	andeq	r0, r0, #16
    12cc:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    12d0:	01007465 	tsteq	r0, r5, ror #8
    12d4:	45150196 	ldrmi	r0, [r5, #-406]	; 0xfffffe6a
    12d8:	02000009 	andeq	r0, r0, #9
    12dc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    12e0:	00000d3b 	andeq	r0, r0, fp, lsr sp
    12e4:	11018b01 	tstne	r1, r1, lsl #22
    12e8:	00000945 	andeq	r0, r0, r5, asr #18
    12ec:	01000a74 	tsteq	r0, r4, ror sl
    12f0:	0000006c 	andeq	r0, r0, ip, rrx
    12f4:	131b9c01 	tstne	fp, #256	; 0x100
    12f8:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    12fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1300:	1136018b 	teqne	r6, fp, lsl #3
    1304:	02000010 	andeq	r0, r0, #16
    1308:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    130c:	01007465 	tsteq	r0, r5, ror #8
    1310:	4515018d 	ldrmi	r0, [r5, #-397]	; 0xfffffe73
    1314:	02000009 	andeq	r0, r0, #9
    1318:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    131c:	00000606 	andeq	r0, r0, r6, lsl #12
    1320:	11018201 	tstne	r1, r1, lsl #4
    1324:	00000945 	andeq	r0, r0, r5, asr #18
    1328:	01000a08 	tsteq	r0, r8, lsl #20
    132c:	0000006c 	andeq	r0, r0, ip, rrx
    1330:	13579c01 	cmpne	r7, #256	; 0x100
    1334:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1338:	01000000 	mrseq	r0, (UNDEF: 0)
    133c:	11340182 	teqne	r4, r2, lsl #3
    1340:	02000010 	andeq	r0, r0, #16
    1344:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1348:	01007465 	tsteq	r0, r5, ror #8
    134c:	45150184 	ldrmi	r0, [r5, #-388]	; 0xfffffe7c
    1350:	02000009 	andeq	r0, r0, #9
    1354:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1358:	00000790 	muleq	r0, r0, r7
    135c:	11017901 	tstne	r1, r1, lsl #18
    1360:	00000945 	andeq	r0, r0, r5, asr #18
    1364:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
    1368:	0000006c 	andeq	r0, r0, ip, rrx
    136c:	13939c01 	orrsne	r9, r3, #256	; 0x100
    1370:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1374:	01000000 	mrseq	r0, (UNDEF: 0)
    1378:	11370179 	teqne	r7, r9, ror r1
    137c:	02000010 	andeq	r0, r0, #16
    1380:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1384:	01007465 	tsteq	r0, r5, ror #8
    1388:	4515017b 	ldrmi	r0, [r5, #-379]	; 0xfffffe85
    138c:	02000009 	andeq	r0, r0, #9
    1390:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1394:	000009aa 	andeq	r0, r0, sl, lsr #19
    1398:	11017001 	tstne	r1, r1
    139c:	00000945 	andeq	r0, r0, r5, asr #18
    13a0:	01000930 	tsteq	r0, r0, lsr r9
    13a4:	0000006c 	andeq	r0, r0, ip, rrx
    13a8:	13cf9c01 	bicne	r9, pc, #256	; 0x100
    13ac:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    13b0:	01000000 	mrseq	r0, (UNDEF: 0)
    13b4:	11340170 	teqne	r4, r0, ror r1
    13b8:	02000010 	andeq	r0, r0, #16
    13bc:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    13c0:	01007465 	tsteq	r0, r5, ror #8
    13c4:	45150172 	ldrmi	r0, [r5, #-370]	; 0xfffffe8e
    13c8:	02000009 	andeq	r0, r0, #9
    13cc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    13d0:	0000090e 	andeq	r0, r0, lr, lsl #18
    13d4:	11016701 	tstne	r1, r1, lsl #14
    13d8:	00000945 	andeq	r0, r0, r5, asr #18
    13dc:	010008c4 	smlabteq	r0, r4, r8, r0
    13e0:	0000006c 	andeq	r0, r0, ip, rrx
    13e4:	140b9c01 	strne	r9, [fp], #-3073	; 0xfffff3ff
    13e8:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    13ec:	01000000 	mrseq	r0, (UNDEF: 0)
    13f0:	11340167 	teqne	r4, r7, ror #2
    13f4:	02000010 	andeq	r0, r0, #16
    13f8:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    13fc:	01007465 	tsteq	r0, r5, ror #8
    1400:	45150169 	ldrmi	r0, [r5, #-361]	; 0xfffffe97
    1404:	02000009 	andeq	r0, r0, #9
    1408:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    140c:	00000208 	andeq	r0, r0, r8, lsl #4
    1410:	11015e01 	tstne	r1, r1, lsl #28
    1414:	00000945 	andeq	r0, r0, r5, asr #18
    1418:	0100085c 	tsteq	r0, ip, asr r8
    141c:	00000068 	andeq	r0, r0, r8, rrx
    1420:	14479c01 	strbne	r9, [r7], #-3073	; 0xfffff3ff
    1424:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1428:	01000000 	mrseq	r0, (UNDEF: 0)
    142c:	1136015e 	teqne	r6, lr, asr r1
    1430:	02000010 	andeq	r0, r0, #16
    1434:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1438:	01007465 	tsteq	r0, r5, ror #8
    143c:	45050161 	strmi	r0, [r5, #-353]	; 0xfffffe9f
    1440:	02000009 	andeq	r0, r0, #9
    1444:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1448:	000005a0 	andeq	r0, r0, r0, lsr #11
    144c:	11015601 	tstne	r1, r1, lsl #12
    1450:	00000945 	andeq	r0, r0, r5, asr #18
    1454:	0100081c 	tsteq	r0, ip, lsl r8
    1458:	00000040 	andeq	r0, r0, r0, asr #32
    145c:	14839c01 	strne	r9, [r3], #3073	; 0xc01
    1460:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1464:	01000000 	mrseq	r0, (UNDEF: 0)
    1468:	113a0156 	teqne	sl, r6, asr r1
    146c:	02000010 	andeq	r0, r0, #16
    1470:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1474:	01007465 	tsteq	r0, r5, ror #8
    1478:	45150158 	ldrmi	r0, [r5, #-344]	; 0xfffffea8
    147c:	02000009 	andeq	r0, r0, #9
    1480:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1484:	000007aa 	andeq	r0, r0, sl, lsr #15
    1488:	11014801 	tstne	r1, r1, lsl #16
    148c:	00000945 	andeq	r0, r0, r5, asr #18
    1490:	010007b0 			; <UNDEFINED> instruction: 0x010007b0
    1494:	0000006c 	andeq	r0, r0, ip, rrx
    1498:	14bf9c01 	ldrtne	r9, [pc], #3073	; 14a0 <__core1_vectors-0xffeb60>
    149c:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    14a0:	01000000 	mrseq	r0, (UNDEF: 0)
    14a4:	113b0148 	teqne	fp, r8, asr #2
    14a8:	02000010 	andeq	r0, r0, #16
    14ac:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    14b0:	01007465 	tsteq	r0, r5, ror #8
    14b4:	4515014a 	ldrmi	r0, [r5, #-330]	; 0xfffffeb6
    14b8:	02000009 	andeq	r0, r0, #9
    14bc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    14c0:	000003e5 	andeq	r0, r0, r5, ror #7
    14c4:	11013f01 	tstne	r1, r1, lsl #30
    14c8:	00000945 	andeq	r0, r0, r5, asr #18
    14cc:	01000770 	tsteq	r0, r0, ror r7
    14d0:	00000040 	andeq	r0, r0, r0, asr #32
    14d4:	14fb9c01 	ldrbtne	r9, [fp], #3073	; 0xc01
    14d8:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    14dc:	01000000 	mrseq	r0, (UNDEF: 0)
    14e0:	1138013f 	teqne	r8, pc, lsr r1
    14e4:	02000010 	andeq	r0, r0, #16
    14e8:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    14ec:	01007465 	tsteq	r0, r5, ror #8
    14f0:	45150141 	ldrmi	r0, [r5, #-321]	; 0xfffffebf
    14f4:	02000009 	andeq	r0, r0, #9
    14f8:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    14fc:	00000d93 	muleq	r0, r3, sp
    1500:	11013701 	tstne	r1, r1, lsl #14
    1504:	00000945 	andeq	r0, r0, r5, asr #18
    1508:	01000730 	tsteq	r0, r0, lsr r7
    150c:	00000040 	andeq	r0, r0, r0, asr #32
    1510:	15379c01 	ldrne	r9, [r7, #-3073]!	; 0xfffff3ff
    1514:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1518:	01000000 	mrseq	r0, (UNDEF: 0)
    151c:	11390137 	teqne	r9, r7, lsr r1
    1520:	02000010 	andeq	r0, r0, #16
    1524:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1528:	01007465 	tsteq	r0, r5, ror #8
    152c:	45150139 	ldrmi	r0, [r5, #-313]	; 0xfffffec7
    1530:	02000009 	andeq	r0, r0, #9
    1534:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1538:	00000b19 	andeq	r0, r0, r9, lsl fp
    153c:	11012701 	tstne	r1, r1, lsl #14
    1540:	00000945 	andeq	r0, r0, r5, asr #18
    1544:	010006c4 	smlabteq	r0, r4, r6, r0
    1548:	0000006c 	andeq	r0, r0, ip, rrx
    154c:	15739c01 	ldrbne	r9, [r3, #-3073]!	; 0xfffff3ff
    1550:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1554:	01000000 	mrseq	r0, (UNDEF: 0)
    1558:	11320127 	teqne	r2, r7, lsr #2
    155c:	02000010 	andeq	r0, r0, #16
    1560:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1564:	01007465 	tsteq	r0, r5, ror #8
    1568:	4515012c 	ldrmi	r0, [r5, #-300]	; 0xfffffed4
    156c:	02000009 	andeq	r0, r0, #9
    1570:	2b007491 	blcs	1e7bc <__core1_vectors-0xfe1844>
    1574:	00000710 	andeq	r0, r0, r0, lsl r7
    1578:	4518e501 	ldrmi	lr, [r8, #-1281]	; 0xfffffaff
    157c:	a4000009 	strge	r0, [r0], #-9
    1580:	20010004 	andcs	r0, r1, r4
    1584:	01000002 	tsteq	r0, r2
    1588:	0016429c 	mulseq	r6, ip, r2
    158c:	00182c00 	andseq	r2, r8, r0, lsl #24
    1590:	e5010000 	str	r0, [r1, #-0]
    1594:	0010113c 	andseq	r1, r0, ip, lsr r1
    1598:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    159c:	000f492c 	andeq	r4, pc, ip, lsr #18
    15a0:	30e60100 	rsccc	r0, r6, r0, lsl #2
    15a4:	0000005b 	andeq	r0, r0, fp, asr r0
    15a8:	2c609102 	stfcsp	f1, [r0], #-8
    15ac:	00000f17 	andeq	r0, r0, r7, lsl pc
    15b0:	5b30e701 	blpl	c3b1bc <__core1_vectors-0x3c4e44>
    15b4:	02000000 	andeq	r0, r0, #0
    15b8:	b32c5c91 			; <UNDEFINED> instruction: 0xb32c5c91
    15bc:	0100000a 	tsteq	r0, sl
    15c0:	005b30e8 	subseq	r3, fp, r8, ror #1
    15c4:	91020000 	mrsls	r0, (UNDEF: 2)
    15c8:	0c7b2c58 	ldcleq	12, cr2, [fp], #-352	; 0xfffffea0
    15cc:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    15d0:	00164231 	andseq	r4, r6, r1, lsr r2
    15d4:	00910200 	addseq	r0, r1, r0, lsl #4
    15d8:	000a4b2c 	andeq	r4, sl, ip, lsr #22
    15dc:	31ea0100 	mvncc	r0, r0, lsl #2
    15e0:	00001642 	andeq	r1, r0, r2, asr #12
    15e4:	2c049102 	stfcsd	f1, [r4], {2}
    15e8:	00000356 	andeq	r0, r0, r6, asr r3
    15ec:	5b30eb01 	blpl	c3c1f8 <__core1_vectors-0x3c3e08>
    15f0:	02000000 	andeq	r0, r0, #0
    15f4:	712c0891 			; <UNDEFINED> instruction: 0x712c0891
    15f8:	0100000a 	tsteq	r0, sl
    15fc:	164231ec 	strbne	r3, [r2], -ip, ror #3
    1600:	91020000 	mrsls	r0, (UNDEF: 2)
    1604:	0cb62c0c 	ldceq	12, cr2, [r6], #48	; 0x30
    1608:	ed010000 	stc	0, cr0, [r1, #-0]
    160c:	00005b30 	andeq	r5, r0, r0, lsr fp
    1610:	10910200 	addsne	r0, r1, r0, lsl #4
    1614:	0014f82d 	andseq	pc, r4, sp, lsr #16
    1618:	10ef0100 	rscne	r0, pc, r0, lsl #2
    161c:	00000951 	andeq	r0, r0, r1, asr r9
    1620:	2d6c9102 	stfcsp	f1, [ip, #-8]!
    1624:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1628:	5b0ef001 	blpl	3bd634 <__core1_vectors-0xc429cc>
    162c:	02000000 	andeq	r0, r0, #0
    1630:	722e7491 	eorvc	r7, lr, #-1862270976	; 0x91000000
    1634:	01007465 	tsteq	r0, r5, ror #8
    1638:	094515f1 	stmdbeq	r5, {r0, r4, r5, r6, r7, r8, sl, ip}^
    163c:	91020000 	mrsls	r0, (UNDEF: 2)
    1640:	040f0070 	streq	r0, [pc], #-112	; 1648 <__core1_vectors-0xffe9b8>
    1644:	0000005b 	andeq	r0, r0, fp, asr r0
    1648:	0008132f 	andeq	r1, r8, pc, lsr #6
    164c:	11ab0100 			; <UNDEFINED> instruction: 0x11ab0100
    1650:	00000945 	andeq	r0, r0, r5, asr #18
    1654:	01000314 	tsteq	r0, r4, lsl r3
    1658:	00000190 	muleq	r0, r0, r1
    165c:	16bd9c01 	ldrtne	r9, [sp], r1, lsl #24
    1660:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    1664:	01000000 	mrseq	r0, (UNDEF: 0)
    1668:	101137ab 	andsne	r3, r1, fp, lsr #15
    166c:	91020000 	mrsls	r0, (UNDEF: 2)
    1670:	65722e5c 	ldrbvs	r2, [r2, #-3676]!	; 0xfffff1a4
    1674:	ad010074 	stcge	0, cr0, [r1, #-464]	; 0xfffffe30
    1678:	00094514 	andeq	r4, r9, r4, lsl r5
    167c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1680:	000c192d 	andeq	r1, ip, sp, lsr #18
    1684:	0dae0100 	stfeqs	f0, [lr]
    1688:	0000006e 	andeq	r0, r0, lr, rrx
    168c:	2d689102 	stfcsp	f1, [r8, #-8]!
    1690:	000014f8 	strdeq	r1, [r0], -r8
    1694:	510faf01 	tstpl	pc, r1, lsl #30
    1698:	02000009 	andeq	r0, r0, #9
    169c:	462d6091 			; <UNDEFINED> instruction: 0x462d6091
    16a0:	0100000a 	tsteq	r0, sl
    16a4:	005b0db0 	ldrheq	r0, [fp], #-208	; 0xffffff30
    16a8:	91020000 	mrsls	r0, (UNDEF: 2)
    16ac:	0a412d64 	beq	104cc44 <__end__+0x30c24>
    16b0:	b5010000 	strlt	r0, [r1, #-0]
    16b4:	00005b0d 	andeq	r5, r0, sp, lsl #22
    16b8:	70910200 	addsvc	r0, r1, r0, lsl #4
    16bc:	0ce12f00 	stcleq	15, cr2, [r1]
    16c0:	85010000 	strhi	r0, [r1, #-0]
    16c4:	00094511 	andeq	r4, r9, r1, lsl r5
    16c8:	0001bc00 	andeq	fp, r1, r0, lsl #24
    16cc:	00015801 	andeq	r5, r1, r1, lsl #16
    16d0:	329c0100 	addscc	r0, ip, #0, 2
    16d4:	2c000017 	stccs	0, cr0, [r0], {23}
    16d8:	00000018 	andeq	r0, r0, r8, lsl r0
    16dc:	11378501 	teqne	r7, r1, lsl #10
    16e0:	02000010 	andeq	r0, r0, #16
    16e4:	722e5c91 	eorvc	r5, lr, #37120	; 0x9100
    16e8:	01007465 	tsteq	r0, r5, ror #8
    16ec:	09451487 	stmdbeq	r5, {r0, r1, r2, r7, sl, ip}^
    16f0:	91020000 	mrsls	r0, (UNDEF: 2)
    16f4:	0c192d74 	ldceq	13, cr2, [r9], {116}	; 0x74
    16f8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    16fc:	00006e0d 	andeq	r6, r0, sp, lsl #28
    1700:	68910200 	ldmvs	r1, {r9}
    1704:	0014f82d 	andseq	pc, r4, sp, lsr #16
    1708:	0f890100 	svceq	0x00890100
    170c:	00000951 	andeq	r0, r0, r1, asr r9
    1710:	2d609102 	stfcsp	f1, [r0, #-8]!
    1714:	00000a46 	andeq	r0, r0, r6, asr #20
    1718:	5b0d8a01 	blpl	363f24 <__core1_vectors-0xc9c0dc>
    171c:	02000000 	andeq	r0, r0, #0
    1720:	412d6491 			; <UNDEFINED> instruction: 0x412d6491
    1724:	0100000a 	tsteq	r0, sl
    1728:	005b0d8e 	subseq	r0, fp, lr, lsl #27
    172c:	91020000 	mrsls	r0, (UNDEF: 2)
    1730:	8d300070 	ldchi	0, cr0, [r0, #-448]!	; 0xfffffe40
    1734:	01000001 	tsteq	r0, r1
    1738:	09451178 	stmdbeq	r5, {r3, r4, r5, r6, r8, ip}^
    173c:	01680000 	cmneq	r8, r0
    1740:	00540100 	subseq	r0, r4, r0, lsl #2
    1744:	9c010000 	stcls	0, cr0, [r1], {-0}
    1748:	0000175c 	andeq	r1, r0, ip, asr r7
    174c:	0000182c 	andeq	r1, r0, ip, lsr #16
    1750:	3b780100 	blcc	1e01b58 <__end__+0xde5b38>
    1754:	00001011 	andeq	r1, r0, r1, lsl r0
    1758:	00749102 	rsbseq	r9, r4, r2, lsl #2
    175c:	00085130 	andeq	r5, r8, r0, lsr r1
    1760:	116e0100 	cmnne	lr, r0, lsl #2
    1764:	00000945 	andeq	r0, r0, r5, asr #18
    1768:	01000114 	tsteq	r0, r4, lsl r1
    176c:	00000054 	andeq	r0, r0, r4, asr r0
    1770:	17869c01 	strne	r9, [r6, r1, lsl #24]
    1774:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    1778:	01000000 	mrseq	r0, (UNDEF: 0)
    177c:	1011446e 	andsne	r4, r1, lr, ror #8
    1780:	91020000 	mrsls	r0, (UNDEF: 2)
    1784:	fb300074 	blx	c0195e <__core1_vectors-0x3fe6a2>
    1788:	0100000c 	tsteq	r0, ip
    178c:	09451168 	stmdbeq	r5, {r3, r5, r6, r8, ip}^
    1790:	00dc0000 	sbcseq	r0, ip, r0
    1794:	00380100 	eorseq	r0, r8, r0, lsl #2
    1798:	9c010000 	stcls	0, cr0, [r1], {-0}
    179c:	000017b0 			; <UNDEFINED> instruction: 0x000017b0
    17a0:	0000182c 	andeq	r1, r0, ip, lsr #16
    17a4:	33680100 	cmncc	r8, #0, 2
    17a8:	00001011 	andeq	r1, r0, r1, lsl r0
    17ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17b0:	0009c131 	andeq	ip, r9, r1, lsr r1
    17b4:	11520100 	cmpne	r2, r0, lsl #2
    17b8:	00000945 	andeq	r0, r0, r5, asr #18
    17bc:	00000000 	andeq	r0, r0, r0
    17c0:	00000098 	muleq	r0, r8, r0
    17c4:	63329c01 	teqvs	r2, #256	; 0x100
    17c8:	01006b6c 	tsteq	r0, ip, ror #22
    17cc:	0d493452 	cfstrdeq	mvd3, [r9, #-328]	; 0xfffffeb8
    17d0:	91020000 	mrsls	r0, (UNDEF: 2)
    17d4:	14f82c77 	ldrbtne	r2, [r8], #3191	; 0xc77
    17d8:	53010000 	movwpl	r0, #4096	; 0x1000
    17dc:	00095135 	andeq	r5, r9, r5, lsr r1
    17e0:	70910200 	addsvc	r0, r1, r0, lsl #4
    17e4:	11000000 	mrsne	r0, (UNDEF: 0)
    17e8:	00040000 	andeq	r0, r4, r0
    17ec:	00000338 	andeq	r0, r0, r8, lsr r3
    17f0:	003a0104 	eorseq	r0, sl, r4, lsl #2
    17f4:	b80c0000 	stmdalt	ip, {}	; <UNPREDICTABLE>
    17f8:	d0000013 	andle	r0, r0, r3, lsl r0
    17fc:	6000000b 	andvs	r0, r0, fp
    1800:	00000001 	andeq	r0, r0, r1
    1804:	81000000 	mrshi	r0, (UNDEF: 0)
    1808:	02000009 	andeq	r0, r0, #9
    180c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1810:	87030074 	smlsdxhi	r3, r4, r0, r0
    1814:	02000030 	andeq	r0, r0, #48	; 0x30
    1818:	003817d1 	ldrsbteq	r1, [r8], -r1
    181c:	04040000 	streq	r0, [r4], #-0
    1820:	000b4507 	andeq	r4, fp, r7, lsl #10
    1824:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    1828:	00000805 	andeq	r0, r0, r5, lsl #16
    182c:	9d040804 	stcls	8, cr0, [r4, #-16]
    1830:	0400000a 	streq	r0, [r0], #-10
    1834:	04020601 	streq	r0, [r2], #-1537	; 0xfffff9ff
    1838:	02040000 	andeq	r0, r4, #0
    183c:	000d6105 	andeq	r6, sp, r5, lsl #2
    1840:	2eee0300 	cdpcs	3, 14, cr0, cr14, cr0, {0}
    1844:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    1848:	00006718 	andeq	r6, r0, r8, lsl r7
    184c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1850:	0000080a 	andeq	r0, r0, sl, lsl #16
    1854:	00080104 	andeq	r0, r8, r4, lsl #2
    1858:	04000004 	streq	r0, [r0], #-4
    185c:	0e9e0702 	cdpeq	7, 9, cr0, cr14, cr2, {0}
    1860:	d0030000 	andle	r0, r3, r0
    1864:	03000030 	movweq	r0, #48	; 0x30
    1868:	00881934 	addeq	r1, r8, r4, lsr r9
    186c:	04040000 	streq	r0, [r4], #-0
    1870:	000b4007 	andeq	r4, fp, r7
    1874:	07080400 	streq	r0, [r8, -r0, lsl #8]
    1878:	00000b3b 	andeq	r0, r0, fp, lsr fp
    187c:	0004d603 	andeq	sp, r4, r3, lsl #12
    1880:	1d410400 	cfstrdne	mvd0, [r1, #-0]
    1884:	0000005b 	andeq	r0, r0, fp, asr r0
    1888:	00094503 	andeq	r4, r9, r3, lsl #10
    188c:	122a0500 	eorne	r0, sl, #0, 10
    1890:	0000007c 	andeq	r0, r0, ip, ror r0
    1894:	000dee05 	andeq	lr, sp, r5, lsl #28
    1898:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    189c:	05000000 	streq	r0, [r0, #-0]
    18a0:	017b0e8b 	cmneq	fp, fp, lsl #29
    18a4:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
    18a8:	00000005 	andeq	r0, r0, r5
    18ac:	000ccc06 	andeq	ip, ip, r6, lsl #24
    18b0:	f7060100 			; <UNDEFINED> instruction: 0xf7060100
    18b4:	02000008 	andeq	r0, r0, #8
    18b8:	000acc06 	andeq	ip, sl, r6, lsl #24
    18bc:	7c060300 	stcvc	3, cr0, [r6], {-0}
    18c0:	04000005 	streq	r0, [r0], #-5
    18c4:	000c8f06 	andeq	r8, ip, r6, lsl #30
    18c8:	a5060500 	strge	r0, [r6, #-1280]	; 0xfffffb00
    18cc:	0600000f 	streq	r0, [r0], -pc
    18d0:	00011806 	andeq	r1, r1, r6, lsl #16
    18d4:	6d060700 	stcvs	7, cr0, [r6, #-0]
    18d8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    18dc:	0007c806 	andeq	ip, r7, r6, lsl #16
    18e0:	7c060900 			; <UNDEFINED> instruction: 0x7c060900
    18e4:	0a00000e 	beq	1924 <__core1_vectors-0xffe6dc>
    18e8:	00027106 	andeq	r7, r2, r6, lsl #2
    18ec:	ec060b00 			; <UNDEFINED> instruction: 0xec060b00
    18f0:	0c00000a 	stceq	0, cr0, [r0], {10}
    18f4:	00027f06 	andeq	r7, r2, r6, lsl #30
    18f8:	90060d00 	andls	r0, r6, r0, lsl #26
    18fc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1900:	0005d406 	andeq	sp, r5, r6, lsl #8
    1904:	bd060f00 	stclt	15, cr0, [r6, #-0]
    1908:	10000003 	andne	r0, r0, r3
    190c:	000e5906 	andeq	r5, lr, r6, lsl #18
    1910:	7d061100 	stfvcs	f1, [r6, #-0]
    1914:	1200000f 	andne	r0, r0, #15
    1918:	000b5206 	andeq	r5, fp, r6, lsl #4
    191c:	11061300 	mrsne	r1, LR_und
    1920:	1400000d 	strne	r0, [r0], #-13
    1924:	000d1f06 	andeq	r1, sp, r6, lsl #30
    1928:	2d061500 	cfstr32cs	mvfx1, [r6, #-0]
    192c:	1600000d 	strne	r0, [r0], -sp
    1930:	00037006 	andeq	r7, r3, r6
    1934:	f4061700 	vst1.8	{d1}, [r6], r0
    1938:	18000005 	stmdane	r0, {r0, r2}
    193c:	000dc606 	andeq	ip, sp, r6, lsl #12
    1940:	fc061900 	stc2	9, cr1, [r6], {-0}	; <UNPREDICTABLE>
    1944:	1a000006 	bne	1964 <__core1_vectors-0xffe69c>
    1948:	000e9106 	andeq	r9, lr, r6, lsl #2
    194c:	df061b00 	svcle	0x00061b00
    1950:	1c000008 	stcne	0, cr0, [r0], {8}
    1954:	000c2b06 	andeq	r2, ip, r6, lsl #22
    1958:	60061d00 	andvs	r1, r6, r0, lsl #26
    195c:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    1960:	1add0500 	bne	ff742d68 <__shm_end__+0xbf742d68>
    1964:	02070000 	andeq	r0, r7, #0
    1968:	00000075 	andeq	r0, r0, r5, ror r0
    196c:	a10e4d06 	tstge	lr, r6, lsl #26
    1970:	06000001 	streq	r0, [r0], -r1
    1974:	000015af 	andeq	r1, r0, pc, lsr #11
    1978:	15ce0600 	strbne	r0, [lr, #1536]	; 0x600
    197c:	07010000 	streq	r0, [r1, -r0]
    1980:	000013d9 	ldrdeq	r1, [r0], -r9
    1984:	03000100 	movweq	r0, #256	; 0x100
    1988:	00001b60 	andeq	r1, r0, r0, ror #22
    198c:	7b015f06 	blvc	595ac <__core1_vectors-0xfa6a54>
    1990:	08000001 	stmdaeq	r0, {r0}
    1994:	00001b8a 	andeq	r1, r0, sl, lsl #23
    1998:	10660614 	rsbne	r0, r6, r4, lsl r6
    199c:	000001fc 	strdeq	r0, [r0], -ip
    19a0:	00072109 	andeq	r2, r7, r9, lsl #2
    19a4:	18680600 	stmdane	r8!, {r9, sl}^
    19a8:	000001a1 	andeq	r0, r0, r1, lsr #3
    19ac:	28390900 	ldmdacs	r9!, {r8, fp}
    19b0:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    19b4:	0001fc18 	andeq	pc, r1, r8, lsl ip	; <UNPREDICTABLE>
    19b8:	f2090400 	vshl.s8	d0, d0, d9
    19bc:	06000014 			; <UNDEFINED> instruction: 0x06000014
    19c0:	00a2186a 	adceq	r1, r2, sl, ror #16
    19c4:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    19c8:	00002b3f 	andeq	r2, r0, pc, lsr fp
    19cc:	7c186b06 			; <UNDEFINED> instruction: 0x7c186b06
    19d0:	0c000000 	stceq	0, cr0, [r0], {-0}
    19d4:	7263660a 	rsbvc	r6, r3, #10485760	; 0xa00000
    19d8:	186c0600 	stmdane	ip!, {r9, sl}^
    19dc:	0000007c 	andeq	r0, r0, ip, ror r0
    19e0:	040b0010 	streq	r0, [fp], #-16
    19e4:	001b9d03 	andseq	r9, fp, r3, lsl #26
    19e8:	016e0600 	cmneq	lr, r0, lsl #12
    19ec:	000001ad 	andeq	r0, r0, sp, lsr #3
    19f0:	00187e05 	andseq	r7, r8, r5, lsl #28
    19f4:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    19f8:	06000000 	streq	r0, [r0], -r0
    19fc:	02350eff 	eorseq	r0, r5, #4080	; 0xff0
    1a00:	43060000 	movwmi	r0, #24576	; 0x6000
    1a04:	0000001a 	andeq	r0, r0, sl, lsl r0
    1a08:	00135706 	andseq	r5, r3, r6, lsl #14
    1a0c:	c0060100 	andgt	r0, r6, r0, lsl #2
    1a10:	02000019 	andeq	r0, r0, #25
    1a14:	001b0c06 	andseq	r0, fp, r6, lsl #24
    1a18:	0c000300 	stceq	3, cr0, [r0], {-0}
    1a1c:	00001450 	andeq	r1, r0, r0, asr r4
    1a20:	01011806 	tsteq	r1, r6, lsl #16
    1a24:	0000020a 	andeq	r0, r0, sl, lsl #4
    1a28:	0016940d 	andseq	r9, r6, sp, lsl #8
    1a2c:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    1a30:	06000000 	streq	r0, [r0], -r0
    1a34:	6e0e011e 	mcrvs	1, 0, r0, cr14, cr14, {0}
    1a38:	06000002 	streq	r0, [r0], -r2
    1a3c:	00001006 	andeq	r1, r0, r6
    1a40:	108e0600 	addne	r0, lr, r0, lsl #12
    1a44:	06010000 	streq	r0, [r1], -r0
    1a48:	00001132 	andeq	r1, r0, r2, lsr r1
    1a4c:	13150602 	tstne	r5, #2097152	; 0x200000
    1a50:	00030000 	andeq	r0, r3, r0
    1a54:	00170b0c 	andseq	r0, r7, ip, lsl #22
    1a58:	01360600 	teqeq	r6, r0, lsl #12
    1a5c:	00024201 	andeq	r4, r2, r1, lsl #4
    1a60:	17720d00 	ldrbne	r0, [r2, -r0, lsl #26]!
    1a64:	04070000 	streq	r0, [r7], #-0
    1a68:	00000038 	andeq	r0, r0, r8, lsr r0
    1a6c:	0e028f06 	cdpeq	15, 0, cr8, cr2, cr6, {0}
    1a70:	00000313 	andeq	r0, r0, r3, lsl r3
    1a74:	0012ff06 	andseq	pc, r2, r6, lsl #30
    1a78:	b0063200 	andlt	r3, r6, r0, lsl #4
    1a7c:	4b000016 	blmi	1adc <__core1_vectors-0xffe524>
    1a80:	001b7306 	andseq	r7, fp, r6, lsl #6
    1a84:	32079600 	andcc	r9, r7, #0, 12
    1a88:	2c00001b 	stccs	0, cr0, [r0], {27}
    1a8c:	163a0701 	ldrtne	r0, [sl], -r1, lsl #14
    1a90:	02580000 	subseq	r0, r8, #0
    1a94:	0019e407 	andseq	lr, r9, r7, lsl #8
    1a98:	07038400 	streq	r8, [r3, -r0, lsl #8]
    1a9c:	000015ed 	andeq	r1, r0, sp, ror #11
    1aa0:	c70704b0 			; <UNDEFINED> instruction: 0xc70704b0
    1aa4:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    1aa8:	17430707 	strbne	r0, [r3, -r7, lsl #14]
    1aac:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    1ab0:	0010b507 	andseq	fp, r0, r7, lsl #10
    1ab4:	070e1000 	streq	r1, [lr, -r0]
    1ab8:	000017db 	ldrdeq	r1, [r0], -fp
    1abc:	610712c0 	smlabtvs	r7, r0, r2, r1
    1ac0:	20000015 	andcs	r0, r0, r5, lsl r0
    1ac4:	1579071c 	ldrbne	r0, [r9, #-1820]!	; 0xfffff8e4
    1ac8:	25800000 	strcs	r0, [r0]
    1acc:	00104007 	andseq	r4, r0, r7
    1ad0:	07384000 	ldreq	r4, [r8, -r0]!
    1ad4:	00001a6a 	andeq	r1, r0, sl, ror #20
    1ad8:	65074b00 	strvs	r4, [r7, #-2816]	; 0xfffff500
    1adc:	80000018 	andhi	r0, r0, r8, lsl r0
    1ae0:	1a830770 	bne	fe0c38a8 <__shm_end__+0xbe0c38a8>
    1ae4:	96000000 	strls	r0, [r0], -r0
    1ae8:	001ab207 	andseq	fp, sl, r7, lsl #4
    1aec:	0ee10000 	cdpeq	0, 14, cr0, cr1, cr0, {0}
    1af0:	00001964 	andeq	r1, r0, r4, ror #18
    1af4:	0001c200 	andeq	ip, r1, r0, lsl #4
    1af8:	1b490d00 	blne	1244f00 <__end__+0x228ee0>
    1afc:	01070000 	mrseq	r0, (UNDEF: 7)
    1b00:	0000006e 	andeq	r0, r0, lr, rrx
    1b04:	0e031106 	adfeqs	f1, f3, f6
    1b08:	0000034b 	andeq	r0, r0, fp, asr #6
    1b0c:	00192606 	andseq	r2, r9, r6, lsl #12
    1b10:	87060600 	strhi	r0, [r6, -r0, lsl #12]
    1b14:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    1b18:	001bf706 	andseq	pc, fp, r6, lsl #14
    1b1c:	40060c00 	andmi	r0, r6, r0, lsl #24
    1b20:	02000019 	andeq	r0, r0, #25
    1b24:	00120506 	andseq	r0, r2, r6, lsl #10
    1b28:	05060000 	streq	r0, [r6, #-0]
    1b2c:	01000016 	tsteq	r0, r6, lsl r0
    1b30:	1bb00c00 	blne	fec04b38 <__shm_end__+0xbec04b38>
    1b34:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1b38:	03130103 	tsteq	r3, #-1073741824	; 0xc0000000
    1b3c:	d70d0000 	strle	r0, [sp, -r0]
    1b40:	07000014 	smladeq	r0, r4, r0, r0
    1b44:	00006e01 	andeq	r6, r0, r1, lsl #28
    1b48:	053c0600 	ldreq	r0, [ip, #-1536]!	; 0xfffffa00
    1b4c:	0003840e 	andeq	r8, r3, lr, lsl #8
    1b50:	13fc0600 	mvnsne	r0, #0, 12
    1b54:	06000000 	streq	r0, [r0], -r0
    1b58:	00001411 	andeq	r1, r0, r1, lsl r4
    1b5c:	14260601 	strtne	r0, [r6], #-1537	; 0xfffff9ff
    1b60:	06020000 	streq	r0, [r2], -r0
    1b64:	0000143b 	andeq	r1, r0, fp, lsr r4
    1b68:	190c0003 	stmdbne	ip, {r0, r1}
    1b6c:	06000015 			; <UNDEFINED> instruction: 0x06000015
    1b70:	58010552 	stmdapl	r1, {r1, r4, r6, r8, sl}
    1b74:	0d000003 	stceq	0, cr0, [r0, #-12]
    1b78:	00001276 	andeq	r1, r0, r6, ror r2
    1b7c:	006e0107 	rsbeq	r0, lr, r7, lsl #2
    1b80:	57060000 	strpl	r0, [r6, -r0]
    1b84:	03b10e05 			; <UNDEFINED> instruction: 0x03b10e05
    1b88:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
    1b8c:	00000011 	andeq	r0, r0, r1, lsl r0
    1b90:	00111d06 	andseq	r1, r1, r6, lsl #26
    1b94:	0c000100 	stfeqs	f0, [r0], {-0}
    1b98:	000012ea 	andeq	r1, r0, sl, ror #5
    1b9c:	01056406 	tsteq	r5, r6, lsl #8
    1ba0:	00000391 	muleq	r0, r1, r3
    1ba4:	001a300d 	andseq	r3, sl, sp
    1ba8:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    1bac:	06000000 	streq	r0, [r0], -r0
    1bb0:	e40e0569 	str	r0, [lr], #-1385	; 0xfffffa97
    1bb4:	06000003 	streq	r0, [r0], -r3
    1bb8:	00001591 	muleq	r0, r1, r5
    1bbc:	16640600 	strbtne	r0, [r4], -r0, lsl #12
    1bc0:	06010000 	streq	r0, [r1], -r0
    1bc4:	00001a1a 	andeq	r1, r0, sl, lsl sl
    1bc8:	f90c0002 			; <UNDEFINED> instruction: 0xf90c0002
    1bcc:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    1bd0:	be01057c 	cfrshl64lt	mvdx1, mvdx12, r0
    1bd4:	0f000003 	svceq	0x00000003
    1bd8:	00001679 	andeq	r1, r0, r9, ror r6
    1bdc:	1104ad01 	tstne	r4, r1, lsl #26
    1be0:	00000096 	muleq	r0, r6, r0
    1be4:	00000000 	andeq	r0, r0, r0
    1be8:	0000006c 	andeq	r0, r0, ip, rrx
    1bec:	042d9c01 	strteq	r9, [sp], #-3073	; 0xfffff3ff
    1bf0:	6b100000 	blvs	401bf8 <__core1_vectors-0xbfe408>
    1bf4:	0100000b 	tsteq	r0, fp
    1bf8:	2d4104ad 	cfstrdcs	mvd0, [r1, #-692]	; 0xfffffd4c
    1bfc:	02000004 	andeq	r0, r0, #4
    1c00:	b9107491 	ldmdblt	r0, {r0, r4, r7, sl, ip, sp, lr}
    1c04:	01000027 	tsteq	r0, r7, lsr #32
    1c08:	333604ae 	teqcc	r6, #-1375731712	; 0xae000000
    1c0c:	02000004 	andeq	r0, r0, #4
    1c10:	11007091 	swpne	r7, r1, [r0]
    1c14:	0001fe04 	andeq	pc, r1, r4, lsl #28
    1c18:	7c041100 	stfvcs	f1, [r4], {-0}
    1c1c:	12000000 	andne	r0, r0, #0
    1c20:	0000189a 	muleq	r0, sl, r8
    1c24:	1104a701 	tstne	r4, r1, lsl #14
    1c28:	00000096 	muleq	r0, r6, r0
    1c2c:	00000000 	andeq	r0, r0, r0
    1c30:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c34:	04659c01 	strbteq	r9, [r5], #-3073	; 0xfffff3ff
    1c38:	6b100000 	blvs	401c40 <__core1_vectors-0xbfe3c0>
    1c3c:	0100000b 	tsteq	r0, fp
    1c40:	2d4204a7 	cfstrdcs	mvd0, [r2, #-668]	; 0xfffffd64
    1c44:	02000004 	andeq	r0, r0, #4
    1c48:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1c4c:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
    1c50:	1104a101 	tstne	r4, r1, lsl #2
    1c54:	00000096 	muleq	r0, r6, r0
    1c58:	01001e94 			; <UNDEFINED> instruction: 0x01001e94
    1c5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c60:	04919c01 	ldreq	r9, [r1], #3073	; 0xc01
    1c64:	6b100000 	blvs	401c6c <__core1_vectors-0xbfe394>
    1c68:	0100000b 	tsteq	r0, fp
    1c6c:	2d4104a1 	cfstrdcs	mvd0, [r1, #-644]	; 0xfffffd7c
    1c70:	02000004 	andeq	r0, r0, #4
    1c74:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1c78:	000014a5 	andeq	r1, r0, r5, lsr #9
    1c7c:	11049b01 	tstne	r4, r1, lsl #22
    1c80:	00000096 	muleq	r0, r6, r0
    1c84:	00000000 	andeq	r0, r0, r0
    1c88:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c8c:	04bd9c01 	ldrteq	r9, [sp], #3073	; 0xc01
    1c90:	6b100000 	blvs	401c98 <__core1_vectors-0xbfe368>
    1c94:	0100000b 	tsteq	r0, fp
    1c98:	2d42049b 	cfstrdcs	mvd0, [r2, #-620]	; 0xfffffd94
    1c9c:	02000004 	andeq	r0, r0, #4
    1ca0:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1ca4:	0000152e 	andeq	r1, r0, lr, lsr #10
    1ca8:	11049501 	tstne	r4, r1, lsl #10
    1cac:	00000096 	muleq	r0, r6, r0
    1cb0:	01001e68 	tsteq	r0, r8, ror #28
    1cb4:	0000002c 	andeq	r0, r0, ip, lsr #32
    1cb8:	04e99c01 	strbteq	r9, [r9], #3073	; 0xc01
    1cbc:	6b100000 	blvs	401cc4 <__core1_vectors-0xbfe33c>
    1cc0:	0100000b 	tsteq	r0, fp
    1cc4:	2d410495 	cfstrdcs	mvd0, [r1, #-596]	; 0xfffffdac
    1cc8:	02000004 	andeq	r0, r0, #4
    1ccc:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1cd0:	0000139b 	muleq	r0, fp, r3
    1cd4:	11048f01 	tstne	r4, r1, lsl #30
    1cd8:	00000096 	muleq	r0, r6, r0
    1cdc:	00000000 	andeq	r0, r0, r0
    1ce0:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ce4:	05159c01 	ldreq	r9, [r5, #-3073]	; 0xfffff3ff
    1ce8:	6b100000 	blvs	401cf0 <__core1_vectors-0xbfe310>
    1cec:	0100000b 	tsteq	r0, fp
    1cf0:	2d43048f 	cfstrdcs	mvd0, [r3, #-572]	; 0xfffffdc4
    1cf4:	02000004 	andeq	r0, r0, #4
    1cf8:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1cfc:	0000123c 	andeq	r1, r0, ip, lsr r2
    1d00:	11048901 	tstne	r4, r1, lsl #18
    1d04:	00000096 	muleq	r0, r6, r0
    1d08:	00000000 	andeq	r0, r0, r0
    1d0c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d10:	05419c01 	strbeq	r9, [r1, #-3073]	; 0xfffff3ff
    1d14:	6b100000 	blvs	401d1c <__core1_vectors-0xbfe2e4>
    1d18:	0100000b 	tsteq	r0, fp
    1d1c:	2d420489 	cfstrdcs	mvd0, [r2, #-548]	; 0xfffffddc
    1d20:	02000004 	andeq	r0, r0, #4
    1d24:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1d28:	0000137e 	andeq	r1, r0, lr, ror r3
    1d2c:	11048301 	tstne	r4, r1, lsl #6
    1d30:	00000096 	muleq	r0, r6, r0
    1d34:	00000000 	andeq	r0, r0, r0
    1d38:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d3c:	056d9c01 	strbeq	r9, [sp, #-3073]!	; 0xfffff3ff
    1d40:	6b100000 	blvs	401d48 <__core1_vectors-0xbfe2b8>
    1d44:	0100000b 	tsteq	r0, fp
    1d48:	2d430483 	cfstrdcs	mvd0, [r3, #-524]	; 0xfffffdf4
    1d4c:	02000004 	andeq	r0, r0, #4
    1d50:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1d54:	00001220 	andeq	r1, r0, r0, lsr #4
    1d58:	11047d01 	tstne	r4, r1, lsl #26
    1d5c:	00000096 	muleq	r0, r6, r0
    1d60:	00000000 	andeq	r0, r0, r0
    1d64:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d68:	05999c01 	ldreq	r9, [r9, #3073]	; 0xc01
    1d6c:	6b100000 	blvs	401d74 <__core1_vectors-0xbfe28c>
    1d70:	0100000b 	tsteq	r0, fp
    1d74:	2d42047d 	cfstrdcs	mvd0, [r2, #-500]	; 0xfffffe0c
    1d78:	02000004 	andeq	r0, r0, #4
    1d7c:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1d80:	00001824 	andeq	r1, r0, r4, lsr #16
    1d84:	11047701 	tstne	r4, r1, lsl #14
    1d88:	00000096 	muleq	r0, r6, r0
    1d8c:	00000000 	andeq	r0, r0, r0
    1d90:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d94:	05c59c01 	strbeq	r9, [r5, #3073]	; 0xc01
    1d98:	6b100000 	blvs	401da0 <__core1_vectors-0xbfe260>
    1d9c:	0100000b 	tsteq	r0, fp
    1da0:	2d410477 	cfstrdcs	mvd0, [r1, #-476]	; 0xfffffe24
    1da4:	02000004 	andeq	r0, r0, #4
    1da8:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1dac:	00001026 	andeq	r1, r0, r6, lsr #32
    1db0:	11046b01 	tstne	r4, r1, lsl #22
    1db4:	00000096 	muleq	r0, r6, r0
    1db8:	00000000 	andeq	r0, r0, r0
    1dbc:	00000044 	andeq	r0, r0, r4, asr #32
    1dc0:	05f19c01 	ldrbeq	r9, [r1, #3073]!	; 0xc01
    1dc4:	6b100000 	blvs	401dcc <__core1_vectors-0xbfe234>
    1dc8:	0100000b 	tsteq	r0, fp
    1dcc:	2d40046b 	cfstrdcs	mvd0, [r0, #-428]	; 0xfffffe54
    1dd0:	02000004 	andeq	r0, r0, #4
    1dd4:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1dd8:	00001184 	andeq	r1, r0, r4, lsl #3
    1ddc:	11046501 	tstne	r4, r1, lsl #10
    1de0:	00000096 	muleq	r0, r6, r0
    1de4:	00000000 	andeq	r0, r0, r0
    1de8:	0000002c 	andeq	r0, r0, ip, lsr #32
    1dec:	061d9c01 	ldreq	r9, [sp], -r1, lsl #24
    1df0:	6b100000 	blvs	401df8 <__core1_vectors-0xbfe208>
    1df4:	0100000b 	tsteq	r0, fp
    1df8:	2d440465 	cfstrdcs	mvd0, [r4, #-404]	; 0xfffffe6c
    1dfc:	02000004 	andeq	r0, r0, #4
    1e00:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1e04:	0000146c 	andeq	r1, r0, ip, ror #8
    1e08:	11044e01 	tstne	r4, r1, lsl #28
    1e0c:	00000096 	muleq	r0, r6, r0
    1e10:	00000000 	andeq	r0, r0, r0
    1e14:	00000080 	andeq	r0, r0, r0, lsl #1
    1e18:	06639c01 	strbteq	r9, [r3], -r1, lsl #24
    1e1c:	6b100000 	blvs	401e24 <__core1_vectors-0xbfe1dc>
    1e20:	0100000b 	tsteq	r0, fp
    1e24:	2d43044e 	cfstrdcs	mvd0, [r3, #-312]	; 0xfffffec8
    1e28:	02000004 	andeq	r0, r0, #4
    1e2c:	00136c91 	mulseq	r3, r1, ip
    1e30:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1e34:	14000000 	strne	r0, [r0], #-0
    1e38:	00727063 	rsbseq	r7, r2, r3, rrx
    1e3c:	12045a01 	andne	r5, r4, #4096	; 0x1000
    1e40:	0000007c 	andeq	r0, r0, ip, ror r0
    1e44:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e48:	18b61500 	ldmne	r6!, {r8, sl, ip}
    1e4c:	3d010000 	stccc	0, cr0, [r1, #-0]
    1e50:	00961804 	addseq	r1, r6, r4, lsl #16
    1e54:	00000000 	andeq	r0, r0, r0
    1e58:	00840000 	addeq	r0, r4, r0
    1e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e60:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1e64:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1e68:	043d0100 	ldrteq	r0, [sp], #-256	; 0xffffff00
    1e6c:	00042d4b 	andeq	r2, r4, fp, asr #26
    1e70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e74:	0019fb10 	andseq	pc, r9, r0, lsl fp	; <UNPREDICTABLE>
    1e78:	043d0100 	ldrteq	r0, [sp], #-256	; 0xffffff00
    1e7c:	00007c5c 	andeq	r7, r0, ip, asr ip
    1e80:	70910200 	addsvc	r0, r1, r0, lsl #4
    1e84:	19081500 	stmdbne	r8, {r8, sl, ip}
    1e88:	2b010000 	blcs	41e90 <__core1_vectors-0xfbe170>
    1e8c:	00961804 	addseq	r1, r6, r4, lsl #16
    1e90:	1de80000 	stclne	0, cr0, [r8]
    1e94:	00800100 	addeq	r0, r0, r0, lsl #2
    1e98:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e9c:	000006db 	ldrdeq	r0, [r0], -fp
    1ea0:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1ea4:	042b0100 	strteq	r0, [fp], #-256	; 0xffffff00
    1ea8:	00042d4b 	andeq	r2, r4, fp, asr #26
    1eac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1eb0:	0019fb10 	andseq	pc, r9, r0, lsl fp	; <UNPREDICTABLE>
    1eb4:	042c0100 	strteq	r0, [ip], #-256	; 0xffffff00
    1eb8:	00007c3f 	andeq	r7, r0, pc, lsr ip
    1ebc:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ec0:	11a20f00 			; <UNDEFINED> instruction: 0x11a20f00
    1ec4:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1ec8:	00961104 	addseq	r1, r6, r4, lsl #2
    1ecc:	00000000 	andeq	r0, r0, r0
    1ed0:	006c0000 	rsbeq	r0, ip, r0
    1ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ed8:	00000717 	andeq	r0, r0, r7, lsl r7
    1edc:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1ee0:	04190100 	ldreq	r0, [r9], #-256	; 0xffffff00
    1ee4:	00042d40 	andeq	r2, r4, r0, asr #26
    1ee8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1eec:	0027b910 	eoreq	fp, r7, r0, lsl r9
    1ef0:	041a0100 	ldreq	r0, [sl], #-256	; 0xffffff00
    1ef4:	00043336 	andeq	r3, r4, r6, lsr r3
    1ef8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1efc:	12b20f00 	adcsne	r0, r2, #0, 30
    1f00:	06010000 	streq	r0, [r1], -r0
    1f04:	00961104 	addseq	r1, r6, r4, lsl #2
    1f08:	00000000 	andeq	r0, r0, r0
    1f0c:	00780000 	rsbseq	r0, r8, r0
    1f10:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f14:	00000743 	andeq	r0, r0, r3, asr #14
    1f18:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1f1c:	04060100 	streq	r0, [r6], #-256	; 0xffffff00
    1f20:	00042d43 	andeq	r2, r4, r3, asr #26
    1f24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f28:	14fd0f00 	ldrbtne	r0, [sp], #3840	; 0xf00
    1f2c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    1f30:	00961103 	addseq	r1, r6, r3, lsl #2
    1f34:	00000000 	andeq	r0, r0, r0
    1f38:	00780000 	rsbseq	r0, r8, r0
    1f3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f40:	0000076f 	andeq	r0, r0, pc, ror #14
    1f44:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1f48:	03f40100 	mvnseq	r0, #0, 2
    1f4c:	00042d42 	andeq	r2, r4, r2, asr #26
    1f50:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f54:	18ee0f00 	stmiane	lr!, {r8, r9, sl, fp}^
    1f58:	a1010000 	mrsge	r0, (UNDEF: 1)
    1f5c:	00961103 	addseq	r1, r6, r3, lsl #2
    1f60:	1c940000 	ldcne	0, cr0, [r4], {0}
    1f64:	01540100 	cmpeq	r4, r0, lsl #2
    1f68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f6c:	000007db 	ldrdeq	r0, [r0], -fp
    1f70:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1f74:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    1f78:	00042d40 	andeq	r2, r4, r0, asr #26
    1f7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1f80:	001af010 	andseq	pc, sl, r0, lsl r0	; <UNPREDICTABLE>
    1f84:	03a20100 			; <UNDEFINED> instruction: 0x03a20100
    1f88:	00038440 	andeq	r8, r3, r0, asr #8
    1f8c:	6b910200 	blvs	fe442794 <__shm_end__+0xbe442794>
    1f90:	00165110 	andseq	r5, r6, r0, lsl r1
    1f94:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    1f98:	0003e43e 	andeq	lr, r3, lr, lsr r4
    1f9c:	6a910200 	bvs	fe4427a4 <__shm_end__+0xbe4427a4>
    1fa0:	001a6110 	andseq	r6, sl, r0, lsl r1
    1fa4:	03a40100 			; <UNDEFINED> instruction: 0x03a40100
    1fa8:	0003b140 	andeq	fp, r3, r0, asr #2
    1fac:	69910200 	ldmibvs	r1, {r9}
    1fb0:	72636c14 	rsbvc	r6, r3, #20, 24	; 0x1400
    1fb4:	03a70100 			; <UNDEFINED> instruction: 0x03a70100
    1fb8:	00007c0e 	andeq	r7, r0, lr, lsl #24
    1fbc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fc0:	11ec0f00 	mvnne	r0, r0, lsl #30
    1fc4:	8f010000 	svchi	0x00010000
    1fc8:	00961103 	addseq	r1, r6, r3, lsl #2
    1fcc:	00000000 	andeq	r0, r0, r0
    1fd0:	007c0000 	rsbseq	r0, ip, r0
    1fd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fd8:	00000817 	andeq	r0, r0, r7, lsl r8
    1fdc:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1fe0:	038f0100 	orreq	r0, pc, #0, 2
    1fe4:	00042d3f 	andeq	r2, r4, pc, lsr sp
    1fe8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fec:	0027b910 	eoreq	fp, r7, r0, lsl r9
    1ff0:	03900100 	orrseq	r0, r0, #0, 2
    1ff4:	00081743 	andeq	r1, r8, r3, asr #14
    1ff8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ffc:	4b041100 	blmi	106404 <__core1_vectors-0xef9bfc>
    2000:	12000003 	andne	r0, r0, #3
    2004:	000018d4 	ldrdeq	r1, [r0], -r4
    2008:	11038201 	tstne	r3, r1, lsl #4
    200c:	00000096 	muleq	r0, r6, r0
    2010:	01001c68 	tsteq	r0, r8, ror #24
    2014:	0000002c 	andeq	r0, r0, ip, lsr #32
    2018:	08499c01 	stmdaeq	r9, {r0, sl, fp, ip, pc}^
    201c:	6b100000 	blvs	402024 <__core1_vectors-0xbfdfdc>
    2020:	0100000b 	tsteq	r0, fp
    2024:	2d400382 	stclcs	3, cr0, [r0, #-520]	; 0xfffffdf8
    2028:	02000004 	andeq	r0, r0, #4
    202c:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2030:	00001727 	andeq	r1, r0, r7, lsr #14
    2034:	11037c01 	tstne	r3, r1, lsl #24
    2038:	00000096 	muleq	r0, r6, r0
    203c:	00000000 	andeq	r0, r0, r0
    2040:	0000002c 	andeq	r0, r0, ip, lsr #32
    2044:	08759c01 	ldmdaeq	r5!, {r0, sl, fp, ip, pc}^
    2048:	6b100000 	blvs	402050 <__core1_vectors-0xbfdfb0>
    204c:	0100000b 	tsteq	r0, fp
    2050:	2d42037c 	stclcs	3, cr0, [r2, #-496]	; 0xfffffe10
    2054:	02000004 	andeq	r0, r0, #4
    2058:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    205c:	000017f3 	strdeq	r1, [r0], -r3
    2060:	11037601 	tstne	r3, r1, lsl #12
    2064:	00000096 	muleq	r0, r6, r0
    2068:	00000000 	andeq	r0, r0, r0
    206c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2070:	08a19c01 	stmiaeq	r1!, {r0, sl, fp, ip, pc}
    2074:	6b100000 	blvs	40207c <__core1_vectors-0xbfdf84>
    2078:	0100000b 	tsteq	r0, fp
    207c:	2d410376 	stclcs	3, cr0, [r1, #-472]	; 0xfffffe28
    2080:	02000004 	andeq	r0, r0, #4
    2084:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2088:	0000161f 	andeq	r1, r0, pc, lsl r6
    208c:	11037001 	tstne	r3, r1
    2090:	00000096 	muleq	r0, r6, r0
    2094:	00000000 	andeq	r0, r0, r0
    2098:	0000002c 	andeq	r0, r0, ip, lsr #32
    209c:	08cd9c01 	stmiaeq	sp, {r0, sl, fp, ip, pc}^
    20a0:	6b100000 	blvs	4020a8 <__core1_vectors-0xbfdf58>
    20a4:	0100000b 	tsteq	r0, fp
    20a8:	2d410370 	stclcs	3, cr0, [r1, #-448]	; 0xfffffe40
    20ac:	02000004 	andeq	r0, r0, #4
    20b0:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    20b4:	0000197e 	andeq	r1, r0, lr, ror r9
    20b8:	11036a01 	tstne	r3, r1, lsl #20
    20bc:	00000096 	muleq	r0, r6, r0
    20c0:	00000000 	andeq	r0, r0, r0
    20c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    20c8:	08f99c01 	ldmeq	r9!, {r0, sl, fp, ip, pc}^
    20cc:	6b100000 	blvs	4020d4 <__core1_vectors-0xbfdf2c>
    20d0:	0100000b 	tsteq	r0, fp
    20d4:	2d40036a 	stclcs	3, cr0, [r0, #-424]	; 0xfffffe58
    20d8:	02000004 	andeq	r0, r0, #4
    20dc:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    20e0:	00001075 	andeq	r1, r0, r5, ror r0
    20e4:	11036401 	tstne	r3, r1, lsl #8
    20e8:	00000096 	muleq	r0, r6, r0
    20ec:	00000000 	andeq	r0, r0, r0
    20f0:	0000002c 	andeq	r0, r0, ip, lsr #32
    20f4:	09259c01 	stmdbeq	r5!, {r0, sl, fp, ip, pc}
    20f8:	6b100000 	blvs	402100 <__core1_vectors-0xbfdf00>
    20fc:	0100000b 	tsteq	r0, fp
    2100:	2d3f0364 	ldccs	3, cr0, [pc, #-400]!	; 1f78 <__core1_vectors-0xffe088>
    2104:	02000004 	andeq	r0, r0, #4
    2108:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    210c:	0000128b 	andeq	r1, r0, fp, lsl #5
    2110:	11035e01 	tstne	r3, r1, lsl #28
    2114:	00000096 	muleq	r0, r6, r0
    2118:	00000000 	andeq	r0, r0, r0
    211c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2120:	09519c01 	ldmdbeq	r1, {r0, sl, fp, ip, pc}^
    2124:	6b100000 	blvs	40212c <__core1_vectors-0xbfded4>
    2128:	0100000b 	tsteq	r0, fp
    212c:	2d3e035e 	ldccs	3, cr0, [lr, #-376]!	; 0xfffffe88
    2130:	02000004 	andeq	r0, r0, #4
    2134:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2138:	00001c17 	andeq	r1, r0, r7, lsl ip
    213c:	11035801 	tstne	r3, r1, lsl #16
    2140:	00000096 	muleq	r0, r6, r0
    2144:	00000000 	andeq	r0, r0, r0
    2148:	0000002c 	andeq	r0, r0, ip, lsr #32
    214c:	097d9c01 	ldmdbeq	sp!, {r0, sl, fp, ip, pc}^
    2150:	6b100000 	blvs	402158 <__core1_vectors-0xbfdea8>
    2154:	0100000b 	tsteq	r0, fp
    2158:	2d3f0358 	ldccs	3, cr0, [pc, #-352]!	; 2000 <__core1_vectors-0xffe000>
    215c:	02000004 	andeq	r0, r0, #4
    2160:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2164:	00001bdf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    2168:	11035201 	tstne	r3, r1, lsl #4
    216c:	00000096 	muleq	r0, r6, r0
    2170:	00000000 	andeq	r0, r0, r0
    2174:	0000002c 	andeq	r0, r0, ip, lsr #32
    2178:	09a99c01 	stmibeq	r9!, {r0, sl, fp, ip, pc}
    217c:	6b100000 	blvs	402184 <__core1_vectors-0xbfde7c>
    2180:	0100000b 	tsteq	r0, fp
    2184:	2d3e0352 	ldccs	3, cr0, [lr, #-328]!	; 0xfffffeb8
    2188:	02000004 	andeq	r0, r0, #4
    218c:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    2190:	00001339 	andeq	r1, r0, r9, lsr r3
    2194:	18034101 	stmdane	r3, {r0, r8, lr}
    2198:	00000096 	muleq	r0, r6, r0
    219c:	01001be4 	smlatteq	r0, r4, fp, r1
    21a0:	00000084 	andeq	r0, r0, r4, lsl #1
    21a4:	09e59c01 	stmibeq	r5!, {r0, sl, fp, ip, pc}^
    21a8:	6b100000 	blvs	4021b0 <__core1_vectors-0xbfde50>
    21ac:	0100000b 	tsteq	r0, fp
    21b0:	2d4b0341 	stclcs	3, cr0, [fp, #-260]	; 0xfffffefc
    21b4:	02000004 	andeq	r0, r0, #4
    21b8:	fb107491 	blx	41f406 <__core1_vectors-0xbe0bfa>
    21bc:	01000019 	tsteq	r0, r9, lsl r0
    21c0:	7c5c0341 	mrrcvc	3, 4, r0, ip, cr1
    21c4:	02000000 	andeq	r0, r0, #0
    21c8:	15007091 	strne	r7, [r0, #-145]	; 0xffffff6f
    21cc:	00001258 	andeq	r1, r0, r8, asr r2
    21d0:	18033001 	stmdane	r3, {r0, ip, sp}
    21d4:	00000096 	muleq	r0, r6, r0
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	00000080 	andeq	r0, r0, r0, lsl #1
    21e0:	0a219c01 	beq	8691ec <__core1_vectors-0x796e14>
    21e4:	6b100000 	blvs	4021ec <__core1_vectors-0xbfde14>
    21e8:	0100000b 	tsteq	r0, fp
    21ec:	2d4b0330 	stclcs	3, cr0, [fp, #-192]	; 0xffffff40
    21f0:	02000004 	andeq	r0, r0, #4
    21f4:	fb107491 	blx	41f442 <__core1_vectors-0xbe0bbe>
    21f8:	01000019 	tsteq	r0, r9, lsl r0
    21fc:	7c5c0330 	mrrcvc	3, 3, r0, ip, cr0
    2200:	02000000 	andeq	r0, r0, #0
    2204:	0f007091 	svceq	0x00007091
    2208:	00001a9c 	muleq	r0, ip, sl
    220c:	11031d01 	tstne	r3, r1, lsl #26
    2210:	00000096 	muleq	r0, r6, r0
    2214:	01001b6c 	tsteq	r0, ip, ror #22
    2218:	00000078 	andeq	r0, r0, r8, ror r0
    221c:	0a5d9c01 	beq	1769228 <__end__+0x74d208>
    2220:	6b100000 	blvs	402228 <__core1_vectors-0xbfddd8>
    2224:	0100000b 	tsteq	r0, fp
    2228:	2d3c031d 	ldccs	3, cr0, [ip, #-116]!	; 0xffffff8c
    222c:	02000004 	andeq	r0, r0, #4
    2230:	03107491 	tsteq	r0, #-1862270976	; 0x91000000
    2234:	01000017 	tsteq	r0, r7, lsl r0
    2238:	7c30031e 	ldcvc	3, cr0, [r0], #-120	; 0xffffff88
    223c:	02000000 	andeq	r0, r0, #0
    2240:	0f007091 	svceq	0x00007091
    2244:	00000fd8 	ldrdeq	r0, [r0], -r8
    2248:	11031401 	tstne	r3, r1, lsl #8
    224c:	00000096 	muleq	r0, r6, r0
    2250:	00000000 	andeq	r0, r0, r0
    2254:	0000003c 	andeq	r0, r0, ip, lsr r0
    2258:	0a999c01 	beq	fe669264 <__shm_end__+0xbe669264>
    225c:	6b100000 	blvs	402264 <__core1_vectors-0xbfdd9c>
    2260:	0100000b 	tsteq	r0, fp
    2264:	2d3c0314 	ldccs	3, cr0, [ip, #-80]!	; 0xffffffb0
    2268:	02000004 	andeq	r0, r0, #4
    226c:	03107491 	tsteq	r0, #-1862270976	; 0x91000000
    2270:	01000017 	tsteq	r0, r7, lsl r0
    2274:	33320315 	teqcc	r2, #1409286144	; 0x54000000
    2278:	02000004 	andeq	r0, r0, #4
    227c:	12007091 	andne	r7, r0, #145	; 0x91
    2280:	00001a03 	andeq	r1, r0, r3, lsl #20
    2284:	1102fe01 	tstne	r2, r1, lsl #28	; <UNPREDICTABLE>
    2288:	00000096 	muleq	r0, r6, r0
    228c:	01001af8 	strdeq	r1, [r0, -r8]
    2290:	00000074 	andeq	r0, r0, r4, ror r0
    2294:	0ae59c01 	beq	ff9692a0 <__shm_end__+0xbf9692a0>
    2298:	6b100000 	blvs	4022a0 <__core1_vectors-0xbfdd60>
    229c:	0100000b 	tsteq	r0, fp
    22a0:	2d3d02fe 	lfmcs	f0, 4, [sp, #-1016]!	; 0xfffffc08
    22a4:	02000004 	andeq	r0, r0, #4
    22a8:	cf106c91 	svcgt	0x00106c91
    22ac:	0100000f 	tsteq	r0, pc
    22b0:	7c3102ff 	lfmvc	f0, 4, [r1], #-1020	; 0xfffffc04
    22b4:	02000000 	andeq	r0, r0, #0
    22b8:	03166891 	tsteq	r6, #9502720	; 0x910000
    22bc:	01000017 	tsteq	r0, r7, lsl r0
    22c0:	7c0e0301 	stcvc	3, cr0, [lr], {1}
    22c4:	02000000 	andeq	r0, r0, #0
    22c8:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    22cc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    22d0:	1102eb01 	tstne	r2, r1, lsl #22
    22d4:	00000096 	muleq	r0, r6, r0
    22d8:	00000000 	andeq	r0, r0, r0
    22dc:	0000005c 	andeq	r0, r0, ip, asr r0
    22e0:	0b319c01 	bleq	c692ec <__core1_vectors-0x396d14>
    22e4:	6b100000 	blvs	4022ec <__core1_vectors-0xbfdd14>
    22e8:	0100000b 	tsteq	r0, fp
    22ec:	2d3d02eb 	lfmcs	f0, 4, [sp, #-940]!	; 0xfffffc54
    22f0:	02000004 	andeq	r0, r0, #4
    22f4:	cf106c91 	svcgt	0x00106c91
    22f8:	0100000f 	tsteq	r0, pc
    22fc:	333302ec 	teqcc	r3, #236, 4	; 0xc000000e
    2300:	02000004 	andeq	r0, r0, #4
    2304:	03166891 	tsteq	r6, #9502720	; 0x910000
    2308:	01000017 	tsteq	r0, r7, lsl r0
    230c:	7c0e02ef 	sfmvc	f0, 4, [lr], {239}	; 0xef
    2310:	02000000 	andeq	r0, r0, #0
    2314:	0f007491 	svceq	0x00007491
    2318:	000017a4 	andeq	r1, r0, r4, lsr #15
    231c:	1102c501 	tstne	r2, r1, lsl #10
    2320:	00000096 	muleq	r0, r6, r0
    2324:	00000000 	andeq	r0, r0, r0
    2328:	000000dc 	ldrdeq	r0, [r0], -ip
    232c:	0b6d9c01 	bleq	1b69338 <__end__+0xb4d318>
    2330:	6b100000 	blvs	402338 <__core1_vectors-0xbfdcc8>
    2334:	0100000b 	tsteq	r0, fp
    2338:	2d4402c5 	sfmcs	f0, 2, [r4, #-788]	; 0xfffffcec
    233c:	02000004 	andeq	r0, r0, #4
    2340:	6d107491 	cfldrsvs	mvf7, [r0, #-580]	; 0xfffffdbc
    2344:	01000010 	tsteq	r0, r0, lsl r0
    2348:	6e4b02c6 	cdpvs	2, 4, cr0, cr11, cr6, {6}
    234c:	02000002 	andeq	r0, r0, #2
    2350:	0f007391 	svceq	0x00007391
    2354:	000016e5 	andeq	r1, r0, r5, ror #13
    2358:	11029f01 	tstne	r2, r1, lsl #30
    235c:	00000096 	muleq	r0, r6, r0
    2360:	00000000 	andeq	r0, r0, r0
    2364:	000000dc 	ldrdeq	r0, [r0], -ip
    2368:	0ba99c01 	bleq	fea69374 <__shm_end__+0xbea69374>
    236c:	6b100000 	blvs	402374 <__core1_vectors-0xbfdc8c>
    2370:	0100000b 	tsteq	r0, fp
    2374:	2d44029f 	sfmcs	f0, 2, [r4, #-636]	; 0xfffffd84
    2378:	02000004 	andeq	r0, r0, #4
    237c:	6d107491 	cfldrsvs	mvf7, [r0, #-580]	; 0xfffffdbc
    2380:	01000010 	tsteq	r0, r0, lsl r0
    2384:	354b02a0 	strbcc	r0, [fp, #-672]	; 0xfffffd60
    2388:	02000002 	andeq	r0, r0, #2
    238c:	0f007391 	svceq	0x00007391
    2390:	00001489 	andeq	r1, r0, r9, lsl #9
    2394:	11028401 	tstne	r2, r1, lsl #8
    2398:	00000096 	muleq	r0, r6, r0
    239c:	00000000 	andeq	r0, r0, r0
    23a0:	0000009c 	muleq	r0, ip, r0
    23a4:	0be59c01 	bleq	ff9693b0 <__shm_end__+0xbf9693b0>
    23a8:	6b100000 	blvs	4023b0 <__core1_vectors-0xbfdc50>
    23ac:	0100000b 	tsteq	r0, fp
    23b0:	2d420284 	sfmcs	f0, 2, [r2, #-528]	; 0xfffffdf0
    23b4:	02000004 	andeq	r0, r0, #4
    23b8:	ec107491 	cfldrs	mvf7, [r0], {145}	; 0x91
    23bc:	01000014 	tsteq	r0, r4, lsl r0
    23c0:	33380285 	teqcc	r8, #1342177288	; 0x50000008
    23c4:	02000004 	andeq	r0, r0, #4
    23c8:	0f007091 	svceq	0x00007091
    23cc:	000010e7 	andeq	r1, r0, r7, ror #1
    23d0:	11026901 	tstne	r2, r1, lsl #18
    23d4:	00000096 	muleq	r0, r6, r0
    23d8:	00000000 	andeq	r0, r0, r0
    23dc:	0000009c 	muleq	r0, ip, r0
    23e0:	0c219c01 	stceq	12, cr9, [r1], #-4
    23e4:	6b100000 	blvs	4023ec <__core1_vectors-0xbfdc14>
    23e8:	0100000b 	tsteq	r0, fp
    23ec:	2d420269 	sfmcs	f0, 2, [r2, #-420]	; 0xfffffe5c
    23f0:	02000004 	andeq	r0, r0, #4
    23f4:	ec107491 	cfldrs	mvf7, [r0], {145}	; 0x91
    23f8:	01000014 	tsteq	r0, r4, lsl r0
    23fc:	3338026a 	teqcc	r8, #-1610612730	; 0xa0000006
    2400:	02000004 	andeq	r0, r0, #4
    2404:	0f007091 	svceq	0x00007091
    2408:	000012cf 	andeq	r1, r0, pc, asr #5
    240c:	11025101 	tstne	r2, r1, lsl #2
    2410:	00000096 	muleq	r0, r6, r0
    2414:	00000000 	andeq	r0, r0, r0
    2418:	000000a8 	andeq	r0, r0, r8, lsr #1
    241c:	0c5d9c01 	mrrceq	12, 0, r9, sp, cr1
    2420:	6b100000 	blvs	402428 <__core1_vectors-0xbfdbd8>
    2424:	0100000b 	tsteq	r0, fp
    2428:	2d410251 	sfmcs	f0, 2, [r1, #-324]	; 0xfffffebc
    242c:	02000004 	andeq	r0, r0, #4
    2430:	dc107491 	cfldrsle	mvf7, [r0], {145}	; 0x91
    2434:	01000030 	tsteq	r0, r0, lsr r0
    2438:	33370252 	teqcc	r7, #536870917	; 0x20000005
    243c:	02000004 	andeq	r0, r0, #4
    2440:	0f007091 	svceq	0x00007091
    2444:	00001159 	andeq	r1, r0, r9, asr r1
    2448:	11023a01 	tstne	r2, r1, lsl #20
    244c:	00000096 	muleq	r0, r6, r0
    2450:	00000000 	andeq	r0, r0, r0
    2454:	000000a8 	andeq	r0, r0, r8, lsr #1
    2458:	0c999c01 	ldceq	12, cr9, [r9], {1}
    245c:	6b100000 	blvs	402464 <__core1_vectors-0xbfdb9c>
    2460:	0100000b 	tsteq	r0, fp
    2464:	2d41023a 	sfmcs	f0, 2, [r1, #-232]	; 0xffffff18
    2468:	02000004 	andeq	r0, r0, #4
    246c:	dc107491 	cfldrsle	mvf7, [r0], {145}	; 0x91
    2470:	01000030 	tsteq	r0, r0, lsr r0
    2474:	3337023b 	teqcc	r7, #-1342177277	; 0xb0000003
    2478:	02000004 	andeq	r0, r0, #4
    247c:	0f007091 	svceq	0x00007091
    2480:	000017c2 	andeq	r1, r0, r2, asr #15
    2484:	11021c01 	tstne	r2, r1, lsl #24
    2488:	00000096 	muleq	r0, r6, r0
    248c:	00000000 	andeq	r0, r0, r0
    2490:	000000a8 	andeq	r0, r0, r8, lsr #1
    2494:	0cc59c01 	stcleq	12, cr9, [r5], {1}
    2498:	6b100000 	blvs	4024a0 <__core1_vectors-0xbfdb60>
    249c:	0100000b 	tsteq	r0, fp
    24a0:	2d3f021c 	lfmcs	f0, 4, [pc, #-112]!	; 2438 <__core1_vectors-0xffdbc8>
    24a4:	02000004 	andeq	r0, r0, #4
    24a8:	0f007491 	svceq	0x00007491
    24ac:	00000fee 	andeq	r0, r0, lr, ror #31
    24b0:	11020201 	tstne	r2, r1, lsl #4
    24b4:	00000096 	muleq	r0, r6, r0
    24b8:	00000000 	andeq	r0, r0, r0
    24bc:	000000a8 	andeq	r0, r0, r8, lsr #1
    24c0:	0cf19c01 	ldcleq	12, cr9, [r1], #4
    24c4:	6b100000 	blvs	4024cc <__core1_vectors-0xbfdb34>
    24c8:	0100000b 	tsteq	r0, fp
    24cc:	2d3e0202 	lfmcs	f0, 4, [lr, #-8]!
    24d0:	02000004 	andeq	r0, r0, #4
    24d4:	0f007491 	svceq	0x00007491
    24d8:	00001549 	andeq	r1, r0, r9, asr #10
    24dc:	1101e801 	tstne	r1, r1, lsl #16
    24e0:	00000096 	muleq	r0, r6, r0
    24e4:	00000000 	andeq	r0, r0, r0
    24e8:	000000a8 	andeq	r0, r0, r8, lsr #1
    24ec:	0d1d9c01 	ldceq	12, cr9, [sp, #-4]
    24f0:	6b100000 	blvs	4024f8 <__core1_vectors-0xbfdb08>
    24f4:	0100000b 	tsteq	r0, fp
    24f8:	2d3e01e8 	ldfcss	f0, [lr, #-928]!	; 0xfffffc60
    24fc:	02000004 	andeq	r0, r0, #4
    2500:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2504:	00001850 	andeq	r1, r0, r0, asr r8
    2508:	1101e101 	tstne	r1, r1, lsl #2
    250c:	00000096 	muleq	r0, r6, r0
    2510:	01001abc 			; <UNDEFINED> instruction: 0x01001abc
    2514:	0000003c 	andeq	r0, r0, ip, lsr r0
    2518:	0d699c01 	stcleq	12, cr9, [r9, #-4]!
    251c:	6b100000 	blvs	402524 <__core1_vectors-0xbfdadc>
    2520:	0100000b 	tsteq	r0, fp
    2524:	2d3b01e1 	ldfcss	f0, [fp, #-900]!	; 0xfffffc7c
    2528:	02000004 	andeq	r0, r0, #4
    252c:	5d107491 	cfldrspl	mvf7, [r0, #-580]	; 0xfffffdbc
    2530:	01000019 	tsteq	r0, r9, lsl r0
    2534:	693301e2 	ldmdbvs	r3!, {r1, r5, r6, r7, r8}
    2538:	0200000d 	andeq	r0, r0, #13
    253c:	6b107091 	blvs	41e788 <__core1_vectors-0xbe1878>
    2540:	0100000a 	tsteq	r0, sl
    2544:	2c2d01e3 	stfcss	f0, [sp], #-908	; 0xfffffc74
    2548:	02000000 	andeq	r0, r0, #0
    254c:	11006c91 			; <UNDEFINED> instruction: 0x11006c91
    2550:	000d7604 	andeq	r7, sp, r4, lsl #12
    2554:	08010400 	stmdaeq	r1, {sl}
    2558:	00000409 	andeq	r0, r0, r9, lsl #8
    255c:	000d6f17 	andeq	r6, sp, r7, lsl pc
    2560:	10cd0f00 	sbcne	r0, sp, r0, lsl #30
    2564:	ba010000 	blt	4256c <__core1_vectors-0xfbda94>
    2568:	00961101 	addseq	r1, r6, r1, lsl #2
    256c:	19b80000 	ldmibne	r8!, {}	; <UNPREDICTABLE>
    2570:	01040100 	mrseq	r0, (UNDEF: 20)
    2574:	9c010000 	stcls	0, cr0, [r1], {-0}
    2578:	00000de5 	andeq	r0, r0, r5, ror #27
    257c:	000b6b10 	andeq	r6, fp, r0, lsl fp
    2580:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    2584:	00042d40 	andeq	r2, r4, r0, asr #26
    2588:	6c910200 	lfmvs	f0, 4, [r1], {0}
    258c:	00195d10 	andseq	r5, r9, r0, lsl sp
    2590:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
    2594:	000d6933 	andeq	r6, sp, r3, lsr r9
    2598:	68910200 	ldmvs	r1, {r9}
    259c:	000a6b10 	andeq	r6, sl, r0, lsl fp
    25a0:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    25a4:	00002c2d 	andeq	r2, r0, sp, lsr #24
    25a8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    25ac:	0010e210 	andseq	lr, r0, r0, lsl r2
    25b0:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
    25b4:	000de52b 	andeq	lr, sp, fp, lsr #10
    25b8:	63910200 	orrsvs	r0, r1, #0, 4
    25bc:	01006914 	tsteq	r0, r4, lsl r9
    25c0:	2c0c01bf 	stfcss	f0, [ip], {191}	; 0xbf
    25c4:	02000000 	andeq	r0, r0, #0
    25c8:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
    25cc:	180e0201 	stmdane	lr, {r0, r9}
    25d0:	590f0000 	stmdbpl	pc, {}	; <UNPREDICTABLE>
    25d4:	01000010 	tsteq	r0, r0, lsl r0
    25d8:	96110197 			; <UNDEFINED> instruction: 0x96110197
    25dc:	00000000 	andeq	r0, r0, r0
    25e0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    25e4:	01000000 	mrseq	r0, (UNDEF: 0)
    25e8:	000e469c 	muleq	lr, ip, r6
    25ec:	0b6b1000 	bleq	1ac65f4 <__end__+0xaaa5d4>
    25f0:	97010000 	strls	r0, [r1, -r0]
    25f4:	042d3a01 	strteq	r3, [sp], #-2561	; 0xfffff5ff
    25f8:	91020000 	mrsls	r0, (UNDEF: 2)
    25fc:	195d106c 	ldmdbne	sp, {r2, r3, r5, r6, ip}^
    2600:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2604:	0e462c01 	cdpeq	12, 4, cr2, cr6, cr1, {0}
    2608:	91020000 	mrsls	r0, (UNDEF: 2)
    260c:	0a6b1068 	beq	1ac67b4 <__end__+0xaaa794>
    2610:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2614:	002c2c01 	eoreq	r2, ip, r1, lsl #24
    2618:	91020000 	mrsls	r0, (UNDEF: 2)
    261c:	00691464 	rsbeq	r1, r9, r4, ror #8
    2620:	0c019b01 			; <UNDEFINED> instruction: 0x0c019b01
    2624:	0000002c 	andeq	r0, r0, ip, lsr #32
    2628:	00749102 	rsbseq	r9, r4, r2, lsl #2
    262c:	0d6f0411 	cfstrdeq	mvd0, [pc, #-68]!	; 25f0 <__core1_vectors-0xffda10>
    2630:	5b0f0000 	blpl	3c2638 <__core1_vectors-0xc3d9c8>
    2634:	01000017 	tsteq	r0, r7, lsl r0
    2638:	96110185 	ldrls	r0, [r1], -r5, lsl #3
    263c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2640:	80010019 	andhi	r0, r1, r9, lsl r0
    2644:	01000000 	mrseq	r0, (UNDEF: 0)
    2648:	000e789c 	muleq	lr, ip, r8
    264c:	0b6b1000 	bleq	1ac6654 <__end__+0xaaa634>
    2650:	85010000 	strhi	r0, [r1, #-0]
    2654:	042d3d01 	strteq	r3, [sp], #-3329	; 0xfffff2ff
    2658:	91020000 	mrsls	r0, (UNDEF: 2)
    265c:	c10f0074 	tstgt	pc, r4, ror r0	; <UNPREDICTABLE>
    2660:	01000014 	tsteq	r0, r4, lsl r0
    2664:	96110171 			; <UNDEFINED> instruction: 0x96110171
    2668:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    266c:	80010018 	andhi	r0, r1, r8, lsl r0
    2670:	01000000 	mrseq	r0, (UNDEF: 0)
    2674:	000ea49c 	muleq	lr, ip, r4
    2678:	0b6b1000 	bleq	1ac6680 <__end__+0xaaa660>
    267c:	71010000 	mrsvc	r0, (UNDEF: 1)
    2680:	042d3c01 	strteq	r3, [sp], #-3073	; 0xfffff3ff
    2684:	91020000 	mrsls	r0, (UNDEF: 2)
    2688:	740f0074 	strvc	r0, [pc], #-116	; 2690 <__core1_vectors-0xffd970>
    268c:	01000011 	tsteq	r0, r1, lsl r0
    2690:	96110153 			; <UNDEFINED> instruction: 0x96110153
    2694:	00000000 	andeq	r0, r0, r0
    2698:	a0000000 	andge	r0, r0, r0
    269c:	01000000 	mrseq	r0, (UNDEF: 0)
    26a0:	000ee09c 	muleq	lr, ip, r0
    26a4:	0b6b1000 	bleq	1ac66ac <__end__+0xaaa68c>
    26a8:	53010000 	movwpl	r0, #4096	; 0x1000
    26ac:	042d3601 	strteq	r3, [sp], #-1537	; 0xfffff9ff
    26b0:	91020000 	mrsls	r0, (UNDEF: 2)
    26b4:	15aa1074 	strne	r1, [sl, #116]!	; 0x74
    26b8:	54010000 	strpl	r0, [r1], #-0
    26bc:	0d6f2601 	stcleq	6, cr2, [pc, #-4]!	; 26c0 <__core1_vectors-0xffd940>
    26c0:	91020000 	mrsls	r0, (UNDEF: 2)
    26c4:	300f0073 	andcc	r0, pc, r3, ror r0	; <UNPREDICTABLE>
    26c8:	0100001c 	tsteq	r0, ip, lsl r0
    26cc:	96110136 			; <UNDEFINED> instruction: 0x96110136
    26d0:	00000000 	andeq	r0, r0, r0
    26d4:	a4000000 	strge	r0, [r0], #-0
    26d8:	01000000 	mrseq	r0, (UNDEF: 0)
    26dc:	000f1c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    26e0:	0b6b1000 	bleq	1ac66e8 <__end__+0xaaa6c8>
    26e4:	36010000 	strcc	r0, [r1], -r0
    26e8:	042d3501 	strteq	r3, [sp], #-1281	; 0xfffffaff
    26ec:	91020000 	mrsls	r0, (UNDEF: 2)
    26f0:	15aa1074 	strne	r1, [sl, #116]!	; 0x74
    26f4:	37010000 	strcc	r0, [r1, -r0]
    26f8:	0e462701 	cdpeq	7, 4, cr2, cr6, cr1, {0}
    26fc:	91020000 	mrsls	r0, (UNDEF: 2)
    2700:	cb120070 	blgt	4828c8 <__core1_vectors-0xb7d738>
    2704:	0100001a 	tsteq	r0, sl, lsl r0
    2708:	9611012f 	ldrls	r0, [r1], -pc, lsr #2
    270c:	00000000 	andeq	r0, r0, r0
    2710:	2c000000 	stccs	0, cr0, [r0], {-0}
    2714:	01000000 	mrseq	r0, (UNDEF: 0)
    2718:	000f489c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
    271c:	0b6b1000 	bleq	1ac6724 <__end__+0xaaa704>
    2720:	2f010000 	svccs	0x00010000
    2724:	042d3801 	strteq	r3, [sp], #-2049	; 0xfffff7ff
    2728:	91020000 	mrsls	r0, (UNDEF: 2)
    272c:	98120074 	ldmdals	r2, {r2, r4, r5, r6}
    2730:	01000019 	tsteq	r0, r9, lsl r0
    2734:	96110122 	ldrls	r0, [r1], -r2, lsr #2
    2738:	70000000 	andvc	r0, r0, r0
    273c:	48010018 	stmdami	r1, {r3, r4}
    2740:	01000000 	mrseq	r0, (UNDEF: 0)
    2744:	000f749c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
    2748:	0b6b1000 	bleq	1ac6750 <__end__+0xaaa730>
    274c:	22010000 	andcs	r0, r1, #0
    2750:	042d3701 	strteq	r3, [sp], #-1793	; 0xfffff8ff
    2754:	91020000 	mrsls	r0, (UNDEF: 2)
    2758:	14120074 	ldrne	r0, [r2], #-116	; 0xffffff8c
    275c:	01000018 	tsteq	r0, r8, lsl r0
    2760:	9611011d 			; <UNDEFINED> instruction: 0x9611011d
    2764:	00000000 	andeq	r0, r0, r0
    2768:	2c000000 	stccs	0, cr0, [r0], {-0}
    276c:	01000000 	mrseq	r0, (UNDEF: 0)
    2770:	000fa09c 	muleq	pc, ip, r0	; <UNPREDICTABLE>
    2774:	0b6b1000 	bleq	1ac677c <__end__+0xaaa75c>
    2778:	1d010000 	stcne	0, cr0, [r1, #-0]
    277c:	042d3601 	strteq	r3, [sp], #-1537	; 0xfffff9ff
    2780:	91020000 	mrsls	r0, (UNDEF: 2)
    2784:	3f120074 	svccc	0x00120074
    2788:	01000018 	tsteq	r0, r8, lsl r0
    278c:	96110105 	ldrls	r0, [r1], -r5, lsl #2
    2790:	00000000 	andeq	r0, r0, r0
    2794:	90000000 	andls	r0, r0, r0
    2798:	01000000 	mrseq	r0, (UNDEF: 0)
    279c:	000fcc9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    27a0:	0b6b1000 	bleq	1ac67a8 <__end__+0xaaa788>
    27a4:	05010000 	streq	r0, [r1, #-0]
    27a8:	042d3701 	strteq	r3, [sp], #-1793	; 0xfffff8ff
    27ac:	91020000 	mrsls	r0, (UNDEF: 2)
    27b0:	a3180074 	tstge	r8, #116	; 0x74
    27b4:	01000012 	tsteq	r0, r2, lsl r0
    27b8:	009611bb 			; <UNDEFINED> instruction: 0x009611bb
    27bc:	17140000 	ldrne	r0, [r4, -r0]
    27c0:	015c0100 	cmpeq	ip, r0, lsl #2
    27c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    27c8:	00001038 	andeq	r1, r0, r8, lsr r0
    27cc:	00072119 	andeq	r2, r7, r9, lsl r1
    27d0:	33bb0100 			; <UNDEFINED> instruction: 0x33bb0100
    27d4:	000001a1 	andeq	r0, r0, r1, lsr #3
    27d8:	196e9102 	stmdbne	lr!, {r1, r8, ip, pc}^
    27dc:	00002839 	andeq	r2, r0, r9, lsr r8
    27e0:	fc27bc01 	stc2	12, cr11, [r7], #-4
    27e4:	02000001 	andeq	r0, r0, #1
    27e8:	f2196891 	vtst.16	d6, d25, d1
    27ec:	01000014 	tsteq	r0, r4, lsl r0
    27f0:	00a22bbd 	strhteq	r2, [r2], sp
    27f4:	91020000 	mrsls	r0, (UNDEF: 2)
    27f8:	0b6b1964 	bleq	1ac8d90 <__end__+0xaacd70>
    27fc:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    2800:	00042d35 	andeq	r2, r4, r5, lsr sp
    2804:	60910200 	addsvs	r0, r1, r0, lsl #4
    2808:	0001481a 	andeq	r4, r1, sl, lsl r8
    280c:	27b91b00 	ldrcs	r1, [r9, r0, lsl #22]!
    2810:	cf010000 	svcgt	0x00010000
    2814:	0000961d 	andeq	r9, r0, sp, lsl r6
    2818:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    281c:	a91c0000 	ldmdbge	ip, {}	; <UNPREDICTABLE>
    2820:	01000019 	tsteq	r0, r9, lsl r0
    2824:	00961883 	addseq	r1, r6, r3, lsl #17
    2828:	15bc0000 	ldrne	r0, [ip, #0]!
    282c:	01580100 	cmpeq	r8, r0, lsl #2
    2830:	9c010000 	stcls	0, cr0, [r1], {-0}
    2834:	00001099 	muleq	r0, r9, r0
    2838:	000b6b19 	andeq	r6, fp, r9, lsl fp
    283c:	44830100 	strmi	r0, [r3], #256	; 0x100
    2840:	0000042d 	andeq	r0, r0, sp, lsr #8
    2844:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    2848:	00001658 	andeq	r1, r0, r8, asr r6
    284c:	e5518301 	ldrb	r8, [r1, #-769]	; 0xfffffcff
    2850:	0200000d 	andeq	r0, r0, #13
    2854:	70136b91 	mulsvc	r3, r1, fp
    2858:	94010016 	strls	r0, [r1], #-22	; 0xffffffea
    285c:	1b000000 	blne	2864 <__core1_vectors-0xffd79c>
    2860:	000027b9 			; <UNDEFINED> instruction: 0x000027b9
    2864:	96199e01 	ldrls	r9, [r9], -r1, lsl #28
    2868:	02000000 	andeq	r0, r0, #0
    286c:	031b7491 	tsteq	fp, #-1862270976	; 0x91000000
    2870:	01000017 	tsteq	r0, r7, lsl r0
    2874:	007c129f 			; <UNDEFINED> instruction: 0x007c129f
    2878:	91020000 	mrsls	r0, (UNDEF: 2)
    287c:	1d000070 	stcne	0, cr0, [r0, #-448]	; 0xfffffe40
    2880:	000016c6 	andeq	r1, r0, r6, asr #13
    2884:	96185201 	ldrls	r5, [r8], -r1, lsl #4
    2888:	9c000000 	stcls	0, cr0, [r0], {-0}
    288c:	20010014 	andcs	r0, r1, r4, lsl r0
    2890:	01000001 	tsteq	r0, r1
    2894:	0010d29c 	mulseq	r0, ip, r2
    2898:	0b6b1900 	bleq	1ac8ca0 <__end__+0xaacc80>
    289c:	52010000 	andpl	r0, r1, #0
    28a0:	00042d4c 	andeq	r2, r4, ip, asr #26
    28a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28a8:	00170319 	andseq	r0, r7, r9, lsl r3
    28ac:	40530100 	subsmi	r0, r3, r0, lsl #2
    28b0:	0000007c 	andeq	r0, r0, ip, ror r0
    28b4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    28b8:	0011d71d 	andseq	sp, r1, sp, lsl r7
    28bc:	1a4a0100 	bne	1282cc4 <__end__+0x266ca4>
    28c0:	0000007c 	andeq	r0, r0, ip, ror r0
    28c4:	01001474 	tsteq	r0, r4, ror r4
    28c8:	00000028 	andeq	r0, r0, r8, lsr #32
    28cc:	10fc9c01 	rscsne	r9, ip, r1, lsl #24
    28d0:	03190000 	tsteq	r9, #0
    28d4:	01000011 	tsteq	r0, r1, lsl r0
    28d8:	10fc3c4a 	rscsne	r3, ip, sl, asr #24
    28dc:	91020000 	mrsls	r0, (UNDEF: 2)
    28e0:	04110074 	ldreq	r0, [r1], #-116	; 0xffffff8c
    28e4:	00001102 	andeq	r1, r0, r2, lsl #2
    28e8:	1cec001e 	stclne	0, cr0, [ip], #120	; 0x78
    28ec:	00040000 	andeq	r0, r4, r0
    28f0:	00000527 	andeq	r0, r0, r7, lsr #10
    28f4:	003a0104 	eorseq	r0, sl, r4, lsl #2
    28f8:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    28fc:	d000001c 	andle	r0, r0, ip, lsl r0
    2900:	5800000b 	stmdapl	r0, {r0, r1, r3}
    2904:	00000003 	andeq	r0, r0, r3
    2908:	0d000000 	stceq	0, cr0, [r0, #-0]
    290c:	02000014 	andeq	r0, r0, #20
    2910:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2914:	87030074 	smlsdxhi	r3, r4, r0, r0
    2918:	03000030 	movweq	r0, #48	; 0x30
    291c:	003d17d1 	ldrsbteq	r1, [sp], -r1
    2920:	2c040000 	stccs	0, cr0, [r4], {-0}
    2924:	05000000 	streq	r0, [r0, #-0]
    2928:	0b450704 	bleq	1144540 <__end__+0x128520>
    292c:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    2930:	00080505 	andeq	r0, r8, r5, lsl #10
    2934:	04080500 	streq	r0, [r8], #-1280	; 0xfffffb00
    2938:	00000a9d 	muleq	r0, sp, sl
    293c:	02060105 	andeq	r0, r6, #1073741825	; 0x40000001
    2940:	05000004 	streq	r0, [r0, #-4]
    2944:	0d610502 	cfstr64eq	mvdx0, [r1, #-8]!
    2948:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    294c:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    2950:	006c1828 	rsbeq	r1, ip, r8, lsr #16
    2954:	04050000 	streq	r0, [r5], #-0
    2958:	00080a05 	andeq	r0, r8, r5, lsl #20
    295c:	08010500 	stmdaeq	r1, {r8, sl}
    2960:	00000400 	andeq	r0, r0, r0, lsl #8
    2964:	9e070205 	cdpls	2, 0, cr0, cr7, cr5, {0}
    2968:	0300000e 	movweq	r0, #14
    296c:	000030d0 	ldrdeq	r3, [r0], -r0
    2970:	92193404 	andsls	r3, r9, #4, 8	; 0x4000000
    2974:	04000000 	streq	r0, [r0], #-0
    2978:	00000081 	andeq	r0, r0, r1, lsl #1
    297c:	40070405 	andmi	r0, r7, r5, lsl #8
    2980:	0500000b 	streq	r0, [r0, #-11]
    2984:	0b3b0708 	bleq	ec45ac <__core1_vectors-0x13ba54>
    2988:	2d030000 	stccs	0, cr0, [r3, #-0]
    298c:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    2990:	003d1a56 	eorseq	r1, sp, r6, asr sl
    2994:	d6030000 	strle	r0, [r3], -r0
    2998:	05000004 	streq	r0, [r0, #-4]
    299c:	00601d41 	rsbeq	r1, r0, r1, asr #26
    29a0:	13060000 	movwne	r0, #24576	; 0x6000
    29a4:	0700001e 	smladeq	r0, lr, r0, r0
    29a8:	00007301 	andeq	r7, r0, r1, lsl #6
    29ac:	0e650600 	cdpeq	6, 6, cr0, cr5, cr0, {0}
    29b0:	000000d7 	ldrdeq	r0, [r0], -r7
    29b4:	00238c07 	eoreq	r8, r3, r7, lsl #24
    29b8:	fb070000 	blx	1c29c2 <__core1_vectors-0xe3d63e>
    29bc:	0100001d 	tsteq	r0, sp, lsl r0
    29c0:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    29c4:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    29c8:	0000b803 	andeq	fp, r0, r3, lsl #16
    29cc:	23f80600 	mvnscs	r0, #0, 12
    29d0:	01070000 	mrseq	r0, (UNDEF: 7)
    29d4:	00000073 	andeq	r0, r0, r3, ror r0
    29d8:	020e7306 	andeq	r7, lr, #402653184	; 0x18000000
    29dc:	07000001 	streq	r0, [r0, -r1]
    29e0:	0000221e 	andeq	r2, r0, lr, lsl r2
    29e4:	21060700 	tstcs	r6, r0, lsl #14
    29e8:	00010000 	andeq	r0, r1, r0
    29ec:	00242c03 	eoreq	r2, r4, r3, lsl #24
    29f0:	03770600 	cmneq	r7, #0, 12
    29f4:	000000e3 	andeq	r0, r0, r3, ror #1
    29f8:	00223406 	eoreq	r3, r2, r6, lsl #8
    29fc:	73010700 	movwvc	r0, #5888	; 0x1700
    2a00:	06000000 	streq	r0, [r0], -r0
    2a04:	012d0e7e 			; <UNDEFINED> instruction: 0x012d0e7e
    2a08:	de070000 	cdple	0, 0, cr0, cr7, cr0, {0}
    2a0c:	00000022 	andeq	r0, r0, r2, lsr #32
    2a10:	0025a107 	eoreq	sl, r5, r7, lsl #2
    2a14:	03000100 	movweq	r0, #256	; 0x100
    2a18:	00002256 	andeq	r2, r0, r6, asr r2
    2a1c:	0e038d06 	cdpeq	13, 0, cr8, cr3, cr6, {0}
    2a20:	06000001 	streq	r0, [r0], -r1
    2a24:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
    2a28:	00730107 	rsbseq	r0, r3, r7, lsl #2
    2a2c:	93060000 	movwls	r0, #24576	; 0x6000
    2a30:	0001640e 	andeq	r6, r1, lr, lsl #8
    2a34:	23370700 	teqcs	r7, #0, 14
    2a38:	07000000 	streq	r0, [r0, -r0]
    2a3c:	00001d61 	andeq	r1, r0, r1, ror #26
    2a40:	25c70701 	strbcs	r0, [r7, #1793]	; 0x701
    2a44:	07020000 	streq	r0, [r2, -r0]
    2a48:	00002076 	andeq	r2, r0, r6, ror r0
    2a4c:	da030003 	ble	c2a60 <__core1_vectors-0xf3d5a0>
    2a50:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    2a54:	013903a1 	teqeq	r9, r1, lsr #7
    2a58:	64040000 	strvs	r0, [r4], #-0
    2a5c:	06000001 	streq	r0, [r0], -r1
    2a60:	00002458 	andeq	r2, r0, r8, asr r4
    2a64:	00730107 	rsbseq	r0, r3, r7, lsl #2
    2a68:	bc060000 	stclt	0, cr0, [r6], {-0}
    2a6c:	0001ac06 	andeq	sl, r1, r6, lsl #24
    2a70:	22960700 	addscs	r0, r6, #0, 14
    2a74:	07000000 	streq	r0, [r0, -r0]
    2a78:	00002042 	andeq	r2, r0, r2, asr #32
    2a7c:	21ca0701 	biccs	r0, sl, r1, lsl #14
    2a80:	07020000 	streq	r0, [r2, -r0]
    2a84:	00001ca1 	andeq	r1, r0, r1, lsr #25
    2a88:	24b00703 	ldrtcs	r0, [r0], #1795	; 0x703
    2a8c:	07050000 	streq	r0, [r5, -r0]
    2a90:	0000219f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    2a94:	77030007 	strvc	r0, [r3, -r7]
    2a98:	06000024 	streq	r0, [r0], -r4, lsr #32
    2a9c:	017521c6 	cmneq	r5, r6, asr #3
    2aa0:	9f060000 	svcls	0x00060000
    2aa4:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    2aa8:	00007301 	andeq	r7, r0, r1, lsl #6
    2aac:	06f70600 	ldrbteq	r0, [r7], r0, lsl #12
    2ab0:	0000025b 	andeq	r0, r0, fp, asr r2
    2ab4:	00230907 	eoreq	r0, r3, r7, lsl #18
    2ab8:	9107ff00 	tstls	r7, r0, lsl #30	; <UNPREDICTABLE>
    2abc:	0000001e 	andeq	r0, r0, lr, lsl r0
    2ac0:	0021eb07 	eoreq	lr, r1, r7, lsl #22
    2ac4:	52070100 	andpl	r0, r7, #0, 2
    2ac8:	0200001c 	andeq	r0, r0, #28
    2acc:	0025b707 	eoreq	fp, r5, r7, lsl #14
    2ad0:	32070300 	andcc	r0, r7, #0, 6
    2ad4:	10000020 	andne	r0, r0, r0, lsr #32
    2ad8:	00231c07 	eoreq	r1, r3, r7, lsl #24
    2adc:	a5071300 	strge	r1, [r7, #-768]	; 0xfffffd00
    2ae0:	2000001e 	andcs	r0, r0, lr, lsl r0
    2ae4:	001e6c07 	andseq	r6, lr, r7, lsl #24
    2ae8:	c6074000 	strgt	r4, [r7], -r0
    2aec:	5000001c 	andpl	r0, r0, ip, lsl r0
    2af0:	0023c807 	eoreq	ip, r3, r7, lsl #16
    2af4:	a8076000 	stmdage	r7, {sp, lr}
    2af8:	70000023 	andvc	r0, r0, r3, lsr #32
    2afc:	0020b307 	eoreq	fp, r0, r7, lsl #6
    2b00:	47074100 	strmi	r4, [r7, -r0, lsl #2]
    2b04:	5100001f 	tstpl	r0, pc, lsl r0
    2b08:	001d4d07 	andseq	r4, sp, r7, lsl #26
    2b0c:	39076100 	stmdbcc	r7, {r8, sp, lr}
    2b10:	7100001d 	tstvc	r0, sp, lsl r0
    2b14:	00234d07 	eoreq	r4, r3, r7, lsl #26
    2b18:	56074200 	strpl	r4, [r7], -r0, lsl #4
    2b1c:	52000021 	andpl	r0, r0, #33	; 0x21
    2b20:	001ff907 	andseq	pc, pc, r7, lsl #18
    2b24:	ae076200 	cdpge	2, 0, cr6, cr7, cr0, {0}
    2b28:	7200001f 	andvc	r0, r0, #31
    2b2c:	00201f07 	eoreq	r1, r0, r7, lsl #30
    2b30:	e4074300 	str	r4, [r7], #-768	; 0xfffffd00
    2b34:	53000023 	movwpl	r0, #35	; 0x23
    2b38:	001c3f07 	andseq	r3, ip, r7, lsl #30
    2b3c:	0c076300 	stceq	3, cr6, [r7], {-0}
    2b40:	73000020 	movwvc	r0, #32
    2b44:	1fd80800 	svcne	0x00d80800
    2b48:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    2b4c:	01b82101 			; <UNDEFINED> instruction: 0x01b82101
    2b50:	ca090000 	bgt	242b58 <__core1_vectors-0xdbd4a8>
    2b54:	14000024 	strne	r0, [r0], #-36	; 0xffffffdc
    2b58:	1005cf06 	andne	ip, r5, r6, lsl #30
    2b5c:	000002e5 	andeq	r0, r0, r5, ror #5
    2b60:	0061760a 	rsbeq	r7, r1, sl, lsl #12
    2b64:	1a05d106 	bne	176f84 <__core1_vectors-0xe8907c>
    2b68:	000002e5 	andeq	r0, r0, r5, ror #5
    2b6c:	61700a00 	cmnvs	r0, r0, lsl #20
    2b70:	05d50600 	ldrbeq	r0, [r5, #1536]	; 0x600
    2b74:	0002e51a 	andeq	lr, r2, sl, lsl r5
    2b78:	dc0b0400 	cfstrsle	mvf0, [fp], {-0}
    2b7c:	06000030 			; <UNDEFINED> instruction: 0x06000030
    2b80:	811a05da 			; <UNDEFINED> instruction: 0x811a05da
    2b84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2b88:	0021e40b 	eoreq	lr, r1, fp, lsl #8
    2b8c:	05de0600 	ldrbeq	r0, [lr, #1536]	; 0x600
    2b90:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    2b94:	3d0b0c00 	stccc	12, cr0, [fp, #-0]
    2b98:	06000024 	streq	r0, [r0], -r4, lsr #32
    2b9c:	5b1a05df 	blpl	684320 <__core1_vectors-0x97bce0>
    2ba0:	0d000002 	stceq	0, cr0, [r0, #-8]
    2ba4:	0022780b 	eoreq	r7, r2, fp, lsl #16
    2ba8:	05e40600 	strbeq	r0, [r4, #1536]!	; 0x600
    2bac:	0000d71a 	andeq	sp, r0, sl, lsl r7
    2bb0:	c70b0e00 	strgt	r0, [fp, -r0, lsl #28]
    2bb4:	06000020 	streq	r0, [r0], -r0, lsr #32
    2bb8:	2d1a05e5 	cfldr32cs	mvfx0, [sl, #-916]	; 0xfffffc6c
    2bbc:	0f000001 	svceq	0x00000001
    2bc0:	0023720b 	eoreq	r7, r3, fp, lsl #4
    2bc4:	05e80600 	strbeq	r0, [r8, #1536]!	; 0x600
    2bc8:	0001021a 	andeq	r0, r1, sl, lsl r2
    2bcc:	0c001000 	stceq	0, cr1, [r0], {-0}
    2bd0:	24df0804 	ldrbcs	r0, [pc], #2052	; 2bd8 <__core1_vectors-0xffd428>
    2bd4:	ec060000 	stc	0, cr0, [r6], {-0}
    2bd8:	02680305 	rsbeq	r0, r8, #335544320	; 0x14000000
    2bdc:	e7040000 	str	r0, [r4, -r0]
    2be0:	08000002 	stmdaeq	r0, {r1}
    2be4:	0000250b 	andeq	r2, r0, fp, lsl #10
    2be8:	11060b06 	tstne	r6, r6, lsl #22
    2bec:	00000306 	andeq	r0, r0, r6, lsl #6
    2bf0:	030c040d 	movweq	r0, #50189	; 0xc40d
    2bf4:	e50e0000 	str	r0, [lr, #-0]
    2bf8:	20000002 	andcs	r0, r0, r2
    2bfc:	0f000003 	svceq	0x00000003
    2c00:	00000038 	andeq	r0, r0, r8, lsr r0
    2c04:	0002e50f 	andeq	lr, r2, pc, lsl #10
    2c08:	1f090000 	svcne	0x00090000
    2c0c:	10000025 	andne	r0, r0, r5, lsr #32
    2c10:	10067b06 	andne	r7, r6, r6, lsl #22
    2c14:	00000366 	andeq	r0, r0, r6, ror #6
    2c18:	0061760a 	rsbeq	r7, r1, sl, lsl #12
    2c1c:	12067d06 	andne	r7, r6, #384	; 0x180
    2c20:	00000366 	andeq	r0, r0, r6, ror #6
    2c24:	30dc0b00 	sbcscc	r0, ip, r0, lsl #22
    2c28:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    2c2c:	002c1206 	eoreq	r1, ip, r6, lsl #4
    2c30:	0b040000 	bleq	102c38 <__core1_vectors-0xefd3c8>
    2c34:	0000256e 	andeq	r2, r0, lr, ror #10
    2c38:	0f068006 	svceq	0x00068006
    2c3c:	000000a0 	andeq	r0, r0, r0, lsr #1
    2c40:	22f50b08 	rscscs	r0, r5, #8, 22	; 0x2000
    2c44:	81060000 	mrshi	r0, (UNDEF: 6)
    2c48:	00810f06 	addeq	r0, r1, r6, lsl #30
    2c4c:	000c0000 	andeq	r0, ip, r0
    2c50:	0373040d 	cmneq	r3, #218103808	; 0xd000000
    2c54:	01050000 	mrseq	r0, (UNDEF: 5)
    2c58:	00040908 	andeq	r0, r4, r8, lsl #18
    2c5c:	036c0400 	cmneq	ip, #0, 8
    2c60:	3b080000 	blcc	202c68 <__core1_vectors-0xdfd398>
    2c64:	06000025 	streq	r0, [r0], -r5, lsr #32
    2c68:	20030683 	andcs	r0, r3, r3, lsl #13
    2c6c:	08000003 	stmdaeq	r0, {r0, r1}
    2c70:	00000c88 	andeq	r0, r0, r8, lsl #25
    2c74:	17015e03 	strne	r5, [r1, -r3, lsl #28]
    2c78:	0000003d 	andeq	r0, r0, sp, lsr r0
    2c7c:	0030e203 	eorseq	lr, r0, r3, lsl #4
    2c80:	0e2e0700 	cdpeq	7, 2, cr0, cr14, cr0, {0}
    2c84:	0000006c 	andeq	r0, r0, ip, rrx
    2c88:	000add03 	andeq	sp, sl, r3, lsl #26
    2c8c:	0e740700 	cdpeq	7, 7, cr0, cr4, cr0, {0}
    2c90:	0000006c 	andeq	r0, r0, ip, rrx
    2c94:	a5070410 	strge	r0, [r7, #-1040]	; 0xfffffbf0
    2c98:	0003cc03 	andeq	ip, r3, r3, lsl #24
    2c9c:	023a1100 	eorseq	r1, sl, #0, 2
    2ca0:	a7070000 	strge	r0, [r7, -r0]
    2ca4:	0003850c 	andeq	r8, r3, ip, lsl #10
    2ca8:	0ae51100 	beq	ff9470b0 <__shm_end__+0xbf9470b0>
    2cac:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    2cb0:	0003cc13 	andeq	ip, r3, r3, lsl ip
    2cb4:	73120000 	tstvc	r2, #0
    2cb8:	dc000000 	stcle	0, cr0, [r0], {-0}
    2cbc:	13000003 	movwne	r0, #3
    2cc0:	0000003d 	andeq	r0, r0, sp, lsr r0
    2cc4:	08140003 	ldmdaeq	r4, {r0, r1}
    2cc8:	0009a207 	andeq	sl, r9, r7, lsl #4
    2ccc:	15000004 	strne	r0, [r0, #-4]
    2cd0:	00000a69 	andeq	r0, r0, r9, ror #20
    2cd4:	2507a407 	strcs	sl, [r7, #-1031]	; 0xfffffbf9
    2cd8:	00000000 	andeq	r0, r0, r0
    2cdc:	00000b15 	andeq	r0, r0, r5, lsl fp
    2ce0:	05a90700 	streq	r0, [r9, #1792]!	; 0x700
    2ce4:	000003aa 	andeq	r0, r0, sl, lsr #7
    2ce8:	20030004 	andcs	r0, r3, r4
    2cec:	0700000c 	streq	r0, [r0, -ip]
    2cf0:	03dc03aa 	bicseq	r0, ip, #-1476395006	; 0xa8000002
    2cf4:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    2cf8:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2cfc:	00921916 	addseq	r1, r2, r6, lsl r9
    2d00:	b3030000 	movwlt	r0, #12288	; 0x3000
    2d04:	09000006 	stmdbeq	r0, {r1, r2}
    2d08:	00250d0c 	eoreq	r0, r5, ip, lsl #26
    2d0c:	c7030000 	strgt	r0, [r3, -r0]
    2d10:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2d14:	04181b23 	ldreq	r1, [r8], #-2851	; 0xfffff4dd
    2d18:	08160000 	ldmdaeq	r6, {}	; <UNPREDICTABLE>
    2d1c:	18000007 	stmdane	r0, {r0, r1, r2}
    2d20:	8a083408 	bhi	20fd48 <__core1_vectors-0xdf02b8>
    2d24:	15000004 	strne	r0, [r0, #-4]
    2d28:	00000a34 	andeq	r0, r0, r4, lsr sl
    2d2c:	8a133608 	bhi	4d0554 <__core1_vectors-0xb2faac>
    2d30:	00000004 	andeq	r0, r0, r4
    2d34:	006b5f17 	rsbeq	r5, fp, r7, lsl pc
    2d38:	25073708 	strcs	r3, [r7, #-1800]	; 0xfffff8f8
    2d3c:	04000000 	streq	r0, [r0], #-0
    2d40:	00076115 	andeq	r6, r7, r5, lsl r1
    2d44:	0b370800 	bleq	dc4d4c <__core1_vectors-0x23b2b4>
    2d48:	00000025 	andeq	r0, r0, r5, lsr #32
    2d4c:	08bf1508 	ldmeq	pc!, {r3, r8, sl, ip}	; <UNPREDICTABLE>
    2d50:	37080000 	strcc	r0, [r8, -r0]
    2d54:	00002514 	andeq	r2, r0, r4, lsl r5
    2d58:	01150c00 	tsteq	r5, r0, lsl #24
    2d5c:	08000006 	stmdaeq	r0, {r1, r2}
    2d60:	00251b37 	eoreq	r1, r5, r7, lsr fp
    2d64:	17100000 	ldrne	r0, [r0, -r0]
    2d68:	0800785f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    2d6c:	04900b38 	ldreq	r0, [r0], #2872	; 0xb38
    2d70:	00140000 	andseq	r0, r4, r0
    2d74:	0430040d 	ldrteq	r0, [r0], #-1037	; 0xfffffbf3
    2d78:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2d7c:	a0000004 	andge	r0, r0, r4
    2d80:	13000004 	movwne	r0, #4
    2d84:	0000003d 	andeq	r0, r0, sp, lsr r0
    2d88:	40160000 	andsmi	r0, r6, r0
    2d8c:	24000001 	strcs	r0, [r0], #-1
    2d90:	23083c08 	movwcs	r3, #35848	; 0x8c08
    2d94:	15000005 	strne	r0, [r0, #-5]
    2d98:	0000015c 	andeq	r0, r0, ip, asr r1
    2d9c:	25093e08 	strcs	r3, [r9, #-3592]	; 0xfffff1f8
    2da0:	00000000 	andeq	r0, r0, r0
    2da4:	000f8f15 	andeq	r8, pc, r5, lsl pc	; <UNPREDICTABLE>
    2da8:	093f0800 	ldmdbeq	pc!, {fp}	; <UNPREDICTABLE>
    2dac:	00000025 	andeq	r0, r0, r5, lsr #32
    2db0:	0eb11504 	cdpeq	5, 11, cr1, cr1, cr4, {0}
    2db4:	40080000 	andmi	r0, r8, r0
    2db8:	00002509 	andeq	r2, r0, r9, lsl #10
    2dbc:	fb150800 	blx	544dc6 <__core1_vectors-0xabb23a>
    2dc0:	08000009 	stmdaeq	r0, {r0, r3}
    2dc4:	00250941 	eoreq	r0, r5, r1, asr #18
    2dc8:	150c0000 	strne	r0, [ip, #-0]
    2dcc:	0000038c 	andeq	r0, r0, ip, lsl #7
    2dd0:	25094208 	strcs	r4, [r9, #-520]	; 0xfffffdf8
    2dd4:	10000000 	andne	r0, r0, r0
    2dd8:	000de415 	andeq	lr, sp, r5, lsl r4
    2ddc:	09430800 	stmdbeq	r3, {fp}^
    2de0:	00000025 	andeq	r0, r0, r5, lsr #32
    2de4:	0a7b1514 	beq	1ec823c <__end__+0xeac21c>
    2de8:	44080000 	strmi	r0, [r8], #-0
    2dec:	00002509 	andeq	r2, r0, r9, lsl #10
    2df0:	a9151800 	ldmdbge	r5, {fp, ip}
    2df4:	0800000a 	stmdaeq	r0, {r1, r3}
    2df8:	00250945 	eoreq	r0, r5, r5, asr #18
    2dfc:	151c0000 	ldrne	r0, [ip, #-0]
    2e00:	00000f55 	andeq	r0, r0, r5, asr pc
    2e04:	25094608 	strcs	r4, [r9, #-1544]	; 0xfffff9f8
    2e08:	20000000 	andcs	r0, r0, r0
    2e0c:	02631800 	rsbeq	r1, r3, #0, 16
    2e10:	01080000 	mrseq	r0, (UNDEF: 8)
    2e14:	68084f08 	stmdavs	r8, {r3, r8, r9, sl, fp, lr}
    2e18:	15000005 	strne	r0, [r0, #-5]
    2e1c:	00000f41 	andeq	r0, r0, r1, asr #30
    2e20:	680a5008 	stmdavs	sl, {r3, ip, lr}
    2e24:	00000005 	andeq	r0, r0, r5
    2e28:	000b6615 	andeq	r6, fp, r5, lsl r6
    2e2c:	09510800 	ldmdbeq	r1, {fp}^
    2e30:	00000568 	andeq	r0, r0, r8, ror #10
    2e34:	0dd41980 	vldreq.16	s3, [r4, #256]	; 0x100	; <UNPREDICTABLE>
    2e38:	53080000 	movwpl	r0, #32768	; 0x8000
    2e3c:	00040c0a 	andeq	r0, r4, sl, lsl #24
    2e40:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2e44:	00000e10 	andeq	r0, r0, r0, lsl lr
    2e48:	0c0a5608 	stceq	6, cr5, [sl], {8}
    2e4c:	04000004 	streq	r0, [r0], #-4
    2e50:	e5120001 	ldr	r0, [r2, #-1]
    2e54:	78000002 	stmdavc	r0, {r1}
    2e58:	13000005 	movwne	r0, #5
    2e5c:	0000003d 	andeq	r0, r0, sp, lsr r0
    2e60:	5418001f 	ldrpl	r0, [r8], #-31	; 0xffffffe1
    2e64:	9000000a 	andls	r0, r0, sl
    2e68:	08620801 	stmdaeq	r2!, {r0, fp}^
    2e6c:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    2e70:	000a3415 	andeq	r3, sl, r5, lsl r4
    2e74:	12630800 	rsbne	r0, r3, #0, 16
    2e78:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    2e7c:	0e041500 	cfsh32eq	mvfx1, mvfx4, #0
    2e80:	64080000 	strvs	r0, [r8], #-0
    2e84:	00002506 	andeq	r2, r0, r6, lsl #10
    2e88:	93150400 	tstls	r5, #0, 8
    2e8c:	08000004 	stmdaeq	r0, {r2}
    2e90:	05c10966 	strbeq	r0, [r1, #2406]	; 0x966
    2e94:	15080000 	strne	r0, [r8, #-0]
    2e98:	00000263 	andeq	r0, r0, r3, ror #4
    2e9c:	231e6708 	tstcs	lr, #8, 14	; 0x200000
    2ea0:	88000005 	stmdahi	r0, {r0, r2}
    2ea4:	78040d00 	stmdavc	r4, {r8, sl, fp}
    2ea8:	12000005 	andne	r0, r0, #5
    2eac:	000005d1 	ldrdeq	r0, [r0], -r1
    2eb0:	000005d1 	ldrdeq	r0, [r0], -r1
    2eb4:	00003d13 	andeq	r3, r0, r3, lsl sp
    2eb8:	0d001f00 	stceq	15, cr1, [r0, #-0]
    2ebc:	0005d704 	andeq	sp, r5, r4, lsl #14
    2ec0:	09161a00 	ldmdbeq	r6, {r9, fp, ip}
    2ec4:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2ec8:	00087a08 	andeq	r7, r8, r8, lsl #20
    2ecc:	15000006 	strne	r0, [r0, #-6]
    2ed0:	00000ba5 	andeq	r0, r0, r5, lsr #23
    2ed4:	00117b08 	andseq	r7, r1, r8, lsl #22
    2ed8:	00000006 	andeq	r0, r0, r6
    2edc:	0030db15 	eorseq	sp, r0, r5, lsl fp
    2ee0:	067c0800 	ldrbteq	r0, [ip], -r0, lsl #16
    2ee4:	00000025 	andeq	r0, r0, r5, lsr #32
    2ee8:	040d0004 	streq	r0, [sp], #-4
    2eec:	00000073 	andeq	r0, r0, r3, ror r0
    2ef0:	00068116 	andeq	r8, r6, r6, lsl r1
    2ef4:	ba086800 	blt	21cefc <__core1_vectors-0xde3104>
    2ef8:	00074908 	andeq	r4, r7, r8, lsl #18
    2efc:	705f1700 	subsvc	r1, pc, r0, lsl #14
    2f00:	12bb0800 	adcsne	r0, fp, #0, 16
    2f04:	00000600 	andeq	r0, r0, r0, lsl #12
    2f08:	725f1700 	subsvc	r1, pc, #0, 14
    2f0c:	07bc0800 	ldreq	r0, [ip, r0, lsl #16]!
    2f10:	00000025 	andeq	r0, r0, r5, lsr #32
    2f14:	775f1704 	ldrbvc	r1, [pc, -r4, lsl #14]
    2f18:	07bd0800 	ldreq	r0, [sp, r0, lsl #16]!
    2f1c:	00000025 	andeq	r0, r0, r5, lsr #32
    2f20:	0a3a1508 	beq	e88348 <__core1_vectors-0x177cb8>
    2f24:	be080000 	cdplt	0, 0, cr0, cr8, cr0, {0}
    2f28:	00005909 	andeq	r5, r0, r9, lsl #18
    2f2c:	5d150c00 	ldcpl	12, cr0, [r5, #-0]
    2f30:	08000002 	stmdaeq	r0, {r1}
    2f34:	005909bf 	ldrheq	r0, [r9], #-159	; 0xffffff61
    2f38:	170e0000 	strne	r0, [lr, -r0]
    2f3c:	0066625f 	rsbeq	r6, r6, pc, asr r2
    2f40:	d811c008 	ldmdale	r1, {r3, lr, pc}
    2f44:	10000005 	andne	r0, r0, r5
    2f48:	000df615 	andeq	pc, sp, r5, lsl r6	; <UNPREDICTABLE>
    2f4c:	07c10800 	strbeq	r0, [r1, r0, lsl #16]
    2f50:	00000025 	andeq	r0, r0, r5, lsr #32
    2f54:	05e41518 	strbeq	r1, [r4, #1304]!	; 0x518
    2f58:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    2f5c:	0002e50a 	andeq	lr, r2, sl, lsl #10
    2f60:	39151c00 	ldmdbcc	r5, {sl, fp, ip}
    2f64:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    2f68:	08c11dca 	stmiaeq	r1, {r1, r3, r6, r7, r8, sl, fp, ip}^
    2f6c:	15200000 	strne	r0, [r0, #-0]!
    2f70:	0000117d 	andeq	r1, r0, sp, ror r1
    2f74:	e51dcc08 	ldr	ip, [sp, #-3080]	; 0xfffff3f8
    2f78:	24000008 	strcs	r0, [r0], #-8
    2f7c:	000ac615 	andeq	ip, sl, r5, lsl r6
    2f80:	0dcf0800 	stcleq	8, cr0, [pc]	; 2f88 <__core1_vectors-0xffd078>
    2f84:	00000909 	andeq	r0, r0, r9, lsl #18
    2f88:	2b4a1528 	blcs	1288430 <__end__+0x26c410>
    2f8c:	d0080000 	andle	r0, r8, r0
    2f90:	00092309 	andeq	r2, r9, r9, lsl #6
    2f94:	5f172c00 	svcpl	0x00172c00
    2f98:	08006275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
    2f9c:	05d811d3 	ldrbeq	r1, [r8, #467]	; 0x1d3
    2fa0:	17300000 	ldrne	r0, [r0, -r0]!
    2fa4:	0070755f 	rsbseq	r7, r0, pc, asr r5
    2fa8:	0012d408 	andseq	sp, r2, r8, lsl #8
    2fac:	38000006 	stmdacc	r0, {r1, r2}
    2fb0:	72755f17 	rsbsvc	r5, r5, #23, 30	; 0x5c
    2fb4:	07d50800 	ldrbeq	r0, [r5, r0, lsl #16]
    2fb8:	00000025 	andeq	r0, r0, r5, lsr #32
    2fbc:	0a0a153c 	beq	2884b4 <__core1_vectors-0xd77b4c>
    2fc0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    2fc4:	00092911 	andeq	r2, r9, r1, lsl r9
    2fc8:	56154000 	ldrpl	r4, [r5], -r0
    2fcc:	08000001 	stmdaeq	r0, {r0}
    2fd0:	093911d9 	ldmdbeq	r9!, {r0, r3, r4, r6, r7, r8, ip}
    2fd4:	17430000 	strbne	r0, [r3, -r0]
    2fd8:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    2fdc:	d811dc08 	ldmdale	r1, {r3, sl, fp, ip, lr, pc}
    2fe0:	44000005 	strmi	r0, [r0], #-5
    2fe4:	002ee315 	eoreq	lr, lr, r5, lsl r3
    2fe8:	07df0800 	ldrbeq	r0, [pc, r0, lsl #16]
    2fec:	00000025 	andeq	r0, r0, r5, lsr #32
    2ff0:	0627154c 	strteq	r1, [r7], -ip, asr #10
    2ff4:	e0080000 	and	r0, r8, r0
    2ff8:	0003920a 	andeq	r9, r3, sl, lsl #4
    2ffc:	3e155000 	cdpcc	0, 1, cr5, cr5, cr0, {0}
    3000:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    3004:	076712e3 	strbeq	r1, [r7, -r3, ror #5]!
    3008:	15540000 	ldrbne	r0, [r4, #-0]
    300c:	000001ab 	andeq	r0, r0, fp, lsr #3
    3010:	240ce708 	strcs	lr, [ip], #-1800	; 0xfffff8f8
    3014:	58000004 	stmdapl	r0, {r2}
    3018:	000a2615 	andeq	r2, sl, r5, lsl r6
    301c:	0ee90800 	cdpeq	8, 14, cr0, cr9, cr0, {0}
    3020:	00000400 	andeq	r0, r0, r0, lsl #8
    3024:	0694155c 			; <UNDEFINED> instruction: 0x0694155c
    3028:	ea080000 	b	203030 <__core1_vectors-0xdfcfd0>
    302c:	00002509 	andeq	r2, r0, r9, lsl #10
    3030:	0e006400 	cfcpyseq	mvf6, mvf0
    3034:	00000025 	andeq	r0, r0, r5, lsr #32
    3038:	00000767 	andeq	r0, r0, r7, ror #14
    303c:	0007670f 	andeq	r6, r7, pc, lsl #14
    3040:	02e50f00 	rsceq	r0, r5, #0, 30
    3044:	bb0f0000 	bllt	3c304c <__core1_vectors-0xc3cfb4>
    3048:	0f000008 	svceq	0x00000008
    304c:	00000025 	andeq	r0, r0, r5, lsr #32
    3050:	72040d00 	andvc	r0, r4, #0, 26
    3054:	04000007 	streq	r0, [r0], #-7
    3058:	00000767 	andeq	r0, r0, r7, ror #14
    305c:	0004461b 	andeq	r4, r4, fp, lsl r6
    3060:	08042800 	stmdaeq	r4, {fp, sp}
    3064:	bb080265 	bllt	203a00 <__core1_vectors-0xdfc600>
    3068:	0b000008 	bleq	3090 <__core1_vectors-0xffcf70>
    306c:	00000992 	muleq	r0, r2, r9
    3070:	07026708 	streq	r6, [r2, -r8, lsl #14]
    3074:	00000025 	andeq	r0, r0, r5, lsr #32
    3078:	05220b00 	streq	r0, [r2, #-2816]!	; 0xfffff500
    307c:	6c080000 	stcvs	0, cr0, [r8], {-0}
    3080:	09950b02 	ldmibeq	r5, {r1, r8, r9, fp}
    3084:	0b040000 	bleq	10308c <__core1_vectors-0xefcf74>
    3088:	00000b87 	andeq	r0, r0, r7, lsl #23
    308c:	14026c08 	strne	r6, [r2], #-3080	; 0xfffff3f8
    3090:	00000995 	muleq	r0, r5, r9
    3094:	0a100b08 	beq	405cbc <__core1_vectors-0xbfa344>
    3098:	6c080000 	stcvs	0, cr0, [r8], {-0}
    309c:	09951e02 	ldmibeq	r5, {r1, r9, sl, fp, ip}
    30a0:	0b0c0000 	bleq	3030a8 <__core1_vectors-0xcfcf58>
    30a4:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    30a8:	08026e08 	stmdaeq	r2, {r3, r9, sl, fp, sp, lr}
    30ac:	00000025 	andeq	r0, r0, r5, lsr #32
    30b0:	07fa0b10 			; <UNDEFINED> instruction: 0x07fa0b10
    30b4:	6f080000 	svcvs	0x00080000
    30b8:	0b950802 	bleq	fe5450c8 <__shm_end__+0xbe5450c8>
    30bc:	0b140000 	bleq	5030c4 <__core1_vectors-0xafcf3c>
    30c0:	0000042d 	andeq	r0, r0, sp, lsr #8
    30c4:	07027208 	streq	r7, [r2, -r8, lsl #4]
    30c8:	00000025 	andeq	r0, r0, r5, lsr #32
    30cc:	0e410b30 	vmoveq.8	d1[1], r0
    30d0:	73080000 	movwvc	r0, #32768	; 0x8000
    30d4:	0baa1602 	bleq	fea888e4 <__shm_end__+0xbea888e4>
    30d8:	0b340000 	bleq	d030e0 <__core1_vectors-0x2fcf20>
    30dc:	00000689 	andeq	r0, r0, r9, lsl #13
    30e0:	07027508 	streq	r7, [r2, -r8, lsl #10]
    30e4:	00000025 	andeq	r0, r0, r5, lsr #32
    30e8:	077d0b38 			; <UNDEFINED> instruction: 0x077d0b38
    30ec:	77080000 	strvc	r0, [r8, -r0]
    30f0:	0bbb0a02 	bleq	feec5900 <__shm_end__+0xbeec5900>
    30f4:	0b3c0000 	bleq	f030fc <__core1_vectors-0xfcf04>
    30f8:	00000e51 	andeq	r0, r0, r1, asr lr
    30fc:	13027a08 	movwne	r7, #10760	; 0x2a08
    3100:	0000048a 	andeq	r0, r0, sl, lsl #9
    3104:	02f10b40 	rscseq	r0, r1, #64, 22	; 0x10000
    3108:	7b080000 	blvc	203110 <__core1_vectors-0xdfcef0>
    310c:	00250702 	eoreq	r0, r5, r2, lsl #14
    3110:	0b440000 	bleq	1103118 <__end__+0xe70f8>
    3114:	0000066f 	andeq	r0, r0, pc, ror #12
    3118:	13027c08 	movwne	r7, #11272	; 0x2c08
    311c:	0000048a 	andeq	r0, r0, sl, lsl #9
    3120:	08a90b48 	stmiaeq	r9!, {r3, r6, r8, r9, fp}
    3124:	7d080000 	stcvc	0, cr0, [r8, #-0]
    3128:	0bc11402 	bleq	ff048138 <__shm_end__+0xbf048138>
    312c:	0b4c0000 	bleq	1303134 <__end__+0x2e7114>
    3130:	00000110 	andeq	r0, r0, r0, lsl r1
    3134:	07028008 	streq	r8, [r2, -r8]
    3138:	00000025 	andeq	r0, r0, r5, lsr #32
    313c:	062f0b50 			; <UNDEFINED> instruction: 0x062f0b50
    3140:	81080000 	mrshi	r0, (UNDEF: 8)
    3144:	08bb0902 	ldmeq	fp!, {r1, r8, fp}
    3148:	0b540000 	bleq	1503150 <__end__+0x4e7130>
    314c:	00000a05 	andeq	r0, r0, r5, lsl #20
    3150:	0702a408 	streq	sl, [r2, -r8, lsl #8]
    3154:	00000b70 	andeq	r0, r0, r0, ror fp
    3158:	0a541c58 	beq	150a2c0 <__end__+0x4ee2a0>
    315c:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
    3160:	05bb1302 	ldreq	r1, [fp, #770]!	; 0x302
    3164:	01480000 	mrseq	r0, (UNDEF: 72)
    3168:	0007871c 	andeq	r8, r7, ip, lsl r7
    316c:	02a90800 	adceq	r0, r9, #0, 16
    3170:	00057812 	andeq	r7, r5, r2, lsl r8
    3174:	1c014c00 	stcne	12, cr4, [r1], {-0}
    3178:	0000061d 	andeq	r0, r0, sp, lsl r6
    317c:	0c02ad08 	stceq	13, cr10, [r2], {8}
    3180:	00000bd2 	ldrdeq	r0, [r0], -r2
    3184:	341c02dc 	ldrcc	r0, [ip], #-732	; 0xfffffd24
    3188:	08000008 	stmdaeq	r0, {r3}
    318c:	561002b2 			; <UNDEFINED> instruction: 0x561002b2
    3190:	e0000009 	and	r0, r0, r9
    3194:	00131c02 	andseq	r1, r3, r2, lsl #24
    3198:	b4080000 	strlt	r0, [r8], #-0
    319c:	0bde0a02 	bleq	ff7859ac <__shm_end__+0xbf7859ac>
    31a0:	02ec0000 	rsceq	r0, ip, #0
    31a4:	6c040d00 	stcvs	13, cr0, [r4], {-0}
    31a8:	0d000003 	stceq	0, cr0, [r0, #-12]
    31ac:	00074904 	andeq	r4, r7, r4, lsl #18
    31b0:	00250e00 	eoreq	r0, r5, r0, lsl #28
    31b4:	08e50000 	stmiaeq	r5!, {}^	; <UNPREDICTABLE>
    31b8:	670f0000 	strvs	r0, [pc, -r0]
    31bc:	0f000007 	svceq	0x00000007
    31c0:	000002e5 	andeq	r0, r0, r5, ror #5
    31c4:	0003660f 	andeq	r6, r3, pc, lsl #12
    31c8:	00250f00 	eoreq	r0, r5, r0, lsl #30
    31cc:	0d000000 	stceq	0, cr0, [r0, #-0]
    31d0:	0008c704 	andeq	ip, r8, r4, lsl #14
    31d4:	039e0e00 	orrseq	r0, lr, #0, 28
    31d8:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    31dc:	670f0000 	strvs	r0, [pc, -r0]
    31e0:	0f000007 	svceq	0x00000007
    31e4:	000002e5 	andeq	r0, r0, r5, ror #5
    31e8:	00039e0f 	andeq	r9, r3, pc, lsl #28
    31ec:	00250f00 	eoreq	r0, r5, r0, lsl #30
    31f0:	0d000000 	stceq	0, cr0, [r0, #-0]
    31f4:	0008eb04 	andeq	lr, r8, r4, lsl #22
    31f8:	00250e00 	eoreq	r0, r5, r0, lsl #28
    31fc:	09230000 	stmdbeq	r3!, {}	; <UNPREDICTABLE>
    3200:	670f0000 	strvs	r0, [pc, -r0]
    3204:	0f000007 	svceq	0x00000007
    3208:	000002e5 	andeq	r0, r0, r5, ror #5
    320c:	0f040d00 	svceq	0x00040d00
    3210:	12000009 	andne	r0, r0, #9
    3214:	00000073 	andeq	r0, r0, r3, ror r0
    3218:	00000939 	andeq	r0, r0, r9, lsr r9
    321c:	00003d13 	andeq	r3, r0, r3, lsl sp
    3220:	12000200 	andne	r0, r0, #0, 4
    3224:	00000073 	andeq	r0, r0, r3, ror r0
    3228:	00000949 	andeq	r0, r0, r9, asr #18
    322c:	00003d13 	andeq	r3, r0, r3, lsl sp
    3230:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3234:	00000c12 	andeq	r0, r0, r2, lsl ip
    3238:	1a012408 	bne	4c260 <__core1_vectors-0xfb3da0>
    323c:	00000606 	andeq	r0, r0, r6, lsl #12
    3240:	0008b909 	andeq	fp, r8, r9, lsl #18
    3244:	28080c00 	stmdacs	r8, {sl, fp}
    3248:	098f0801 	stmibeq	pc, {r0, fp}	; <UNPREDICTABLE>
    324c:	340b0000 	strcc	r0, [fp], #-0
    3250:	0800000a 	stmdaeq	r0, {r1, r3}
    3254:	8f11012a 	svchi	0x0011012a
    3258:	00000009 	andeq	r0, r0, r9
    325c:	00082d0b 	andeq	r2, r8, fp, lsl #26
    3260:	012b0800 			; <UNDEFINED> instruction: 0x012b0800
    3264:	00002507 	andeq	r2, r0, r7, lsl #10
    3268:	b30b0400 	movwlt	r0, #46080	; 0xb400
    326c:	08000008 	stmdaeq	r0, {r3}
    3270:	950b012c 	strls	r0, [fp, #-300]	; 0xfffffed4
    3274:	08000009 	stmdaeq	r0, {r0, r3}
    3278:	56040d00 	strpl	r0, [r4], -r0, lsl #26
    327c:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    3280:	00094904 	andeq	r4, r9, r4, lsl #18
    3284:	0b7f0900 	bleq	1fc568c <__end__+0xfa966c>
    3288:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    328c:	d4080144 	strle	r0, [r8], #-324	; 0xfffffebc
    3290:	0b000009 	bleq	32bc <__core1_vectors-0xffcd44>
    3294:	00000ac0 	andeq	r0, r0, r0, asr #21
    3298:	12014508 	andne	r4, r1, #8, 10	; 0x2000000
    329c:	000009d4 	ldrdeq	r0, [r0], -r4
    32a0:	01bf0b00 			; <UNDEFINED> instruction: 0x01bf0b00
    32a4:	46080000 	strmi	r0, [r8], -r0
    32a8:	09d41201 	ldmibeq	r4, {r0, r9, ip}^
    32ac:	0b060000 	bleq	1832b4 <__core1_vectors-0xe7cd4c>
    32b0:	00000e8c 	andeq	r0, r0, ip, lsl #29
    32b4:	12014708 	andne	r4, r1, #8, 14	; 0x200000
    32b8:	0000007a 	andeq	r0, r0, sl, ror r0
    32bc:	7a12000c 	bvc	4832f4 <__core1_vectors-0xb7cd0c>
    32c0:	e4000000 	str	r0, [r0], #-0
    32c4:	13000009 	movwne	r0, #9
    32c8:	0000003d 	andeq	r0, r0, sp, lsr r0
    32cc:	d01d0002 	andsle	r0, sp, r2
    32d0:	07028508 	streq	r8, [r2, -r8, lsl #10]
    32d4:	00000af9 	strdeq	r0, [r0], -r9
    32d8:	0003ce0b 	andeq	ip, r3, fp, lsl #28
    32dc:	02870800 	addeq	r0, r7, #0, 16
    32e0:	00003d18 	andeq	r3, r0, r8, lsl sp
    32e4:	ab0b0000 	blge	2c32ec <__core1_vectors-0xd3cd14>
    32e8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    32ec:	bb120288 	bllt	483d14 <__core1_vectors-0xb7c2ec>
    32f0:	04000008 	streq	r0, [r0], #-8
    32f4:	00002d0b 	andeq	r2, r0, fp, lsl #26
    32f8:	02890800 	addeq	r0, r9, #0, 16
    32fc:	000af910 	andeq	pc, sl, r0, lsl r9	; <UNPREDICTABLE>
    3300:	100b0800 	andne	r0, fp, r0, lsl #16
    3304:	08000003 	stmdaeq	r0, {r0, r1}
    3308:	a017028a 	andsge	r0, r7, sl, lsl #5
    330c:	24000004 	strcs	r0, [r0], #-4
    3310:	0008830b 	andeq	r8, r8, fp, lsl #6
    3314:	028b0800 	addeq	r0, fp, #0, 16
    3318:	0000250f 	andeq	r2, r0, pc, lsl #10
    331c:	2f0b4800 	svccs	0x000b4800
    3320:	0800000a 	stmdaeq	r0, {r1, r3}
    3324:	992c028c 	stmdbls	ip!, {r2, r3, r7, r9}
    3328:	50000000 	andpl	r0, r0, r0
    332c:	000c760b 	andeq	r7, ip, fp, lsl #12
    3330:	028d0800 	addeq	r0, sp, #0, 16
    3334:	00099b1a 	andeq	r9, r9, sl, lsl fp
    3338:	540b5800 	strpl	r5, [fp], #-2048	; 0xfffff800
    333c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    3340:	0016028e 	andseq	r0, r6, lr, lsl #5
    3344:	68000004 	stmdavs	r0, {r2}
    3348:	000afa0b 	andeq	pc, sl, fp, lsl #20
    334c:	028f0800 	addeq	r0, pc, #0, 16
    3350:	00040016 	andeq	r0, r4, r6, lsl r0
    3354:	180b7000 	stmdane	fp, {ip, sp, lr}
    3358:	0800000a 	stmdaeq	r0, {r1, r3}
    335c:	00160290 	mulseq	r6, r0, r2
    3360:	78000004 	stmdavc	r0, {r2}
    3364:	0001650b 	andeq	r6, r1, fp, lsl #10
    3368:	02910800 	addseq	r0, r1, #0, 16
    336c:	000b0910 	andeq	r0, fp, r0, lsl r9
    3370:	e30b8000 	movw	r8, #45056	; 0xb000
    3374:	08000006 	stmdaeq	r0, {r1, r2}
    3378:	19100292 	ldmdbne	r0, {r1, r4, r7, r9}
    337c:	8800000b 	stmdahi	r0, {r0, r1, r3}
    3380:	000f980b 	andeq	r9, pc, fp, lsl #16
    3384:	02930800 	addseq	r0, r3, #0, 16
    3388:	0000250f 	andeq	r2, r0, pc, lsl #10
    338c:	e30ba000 	movw	sl, #45056	; 0xb000
    3390:	08000002 	stmdaeq	r0, {r1}
    3394:	00160294 	mulseq	r6, r4, r2
    3398:	a4000004 	strge	r0, [r0], #-4
    339c:	000bb80b 	andeq	fp, fp, fp, lsl #16
    33a0:	02950800 	addseq	r0, r5, #0, 16
    33a4:	00040016 	andeq	r0, r4, r6, lsl r0
    33a8:	010bac00 	tsteq	fp, r0, lsl #24
    33ac:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    33b0:	00160296 	mulseq	r6, r6, r2
    33b4:	b4000004 	strlt	r0, [r0], #-4
    33b8:	0009ec0b 	andeq	lr, r9, fp, lsl #24
    33bc:	02970800 	addseq	r0, r7, #0, 16
    33c0:	00040016 	andeq	r0, r4, r6, lsl r0
    33c4:	450bbc00 	strmi	fp, [fp, #-3072]	; 0xfffff400
    33c8:	08000001 	stmdaeq	r0, {r0}
    33cc:	00160298 	mulseq	r6, r8, r2
    33d0:	c4000004 	strgt	r0, [r0], #-4
    33d4:	0009900b 	andeq	r9, r9, fp
    33d8:	02990800 	addseq	r0, r9, #0, 16
    33dc:	00002508 	andeq	r2, r0, r8, lsl #10
    33e0:	1200cc00 	andne	ip, r0, #0, 24
    33e4:	0000036c 	andeq	r0, r0, ip, ror #6
    33e8:	00000b09 	andeq	r0, r0, r9, lsl #22
    33ec:	00003d13 	andeq	r3, r0, r3, lsl sp
    33f0:	12001900 	andne	r1, r0, #0, 18
    33f4:	0000036c 	andeq	r0, r0, ip, ror #6
    33f8:	00000b19 	andeq	r0, r0, r9, lsl fp
    33fc:	00003d13 	andeq	r3, r0, r3, lsl sp
    3400:	12000700 	andne	r0, r0, #0, 14
    3404:	0000036c 	andeq	r0, r0, ip, ror #6
    3408:	00000b29 	andeq	r0, r0, r9, lsr #22
    340c:	00003d13 	andeq	r3, r0, r3, lsl sp
    3410:	1d001700 	stcne	7, cr1, [r0, #-0]
    3414:	029e08f0 	addseq	r0, lr, #240, 16	; 0xf00000
    3418:	000b5007 	andeq	r5, fp, r7
    341c:	0e180b00 	vnmlseq.f64	d0, d8, d0
    3420:	a1080000 	mrsge	r0, (UNDEF: 8)
    3424:	0b501b02 	bleq	140a034 <__end__+0x3ee014>
    3428:	0b000000 	bleq	3430 <__core1_vectors-0xffcbd0>
    342c:	00000848 	andeq	r0, r0, r8, asr #16
    3430:	1802a208 	stmdane	r2, {r3, r9, sp, pc}
    3434:	00000b60 	andeq	r0, r0, r0, ror #22
    3438:	00120078 	andseq	r0, r2, r8, ror r0
    343c:	60000006 	andvs	r0, r0, r6
    3440:	1300000b 	movwne	r0, #11
    3444:	0000003d 	andeq	r0, r0, sp, lsr r0
    3448:	3d12001d 	ldccc	0, cr0, [r2, #-116]	; 0xffffff8c
    344c:	70000000 	andvc	r0, r0, r0
    3450:	1300000b 	movwne	r0, #11
    3454:	0000003d 	andeq	r0, r0, sp, lsr r0
    3458:	f01e001d 			; <UNDEFINED> instruction: 0xf01e001d
    345c:	03028308 	movweq	r8, #8968	; 0x2308
    3460:	00000b95 	muleq	r0, r5, fp
    3464:	0004461f 	andeq	r4, r4, pc, lsl r6
    3468:	029a0800 	addseq	r0, sl, #0, 16
    346c:	0009e40b 	andeq	lr, r9, fp, lsl #8
    3470:	01381f00 	teqeq	r8, r0, lsl #30
    3474:	a3080000 	movwge	r0, #32768	; 0x8000
    3478:	0b290b02 	bleq	a46088 <__core1_vectors-0x5b9f78>
    347c:	12000000 	andne	r0, r0, #0
    3480:	0000036c 	andeq	r0, r0, ip, ror #6
    3484:	00000ba5 	andeq	r0, r0, r5, lsr #23
    3488:	00003d13 	andeq	r3, r0, r3, lsl sp
    348c:	20001800 	andcs	r1, r0, r0, lsl #16
    3490:	00000000 	andeq	r0, r0, r0
    3494:	0ba5040d 	bleq	fe9444d0 <__shm_end__+0xbe9444d0>
    3498:	bb210000 	bllt	8434a0 <__core1_vectors-0x7bcb60>
    349c:	0f00000b 	svceq	0x0000000b
    34a0:	00000767 	andeq	r0, r0, r7, ror #14
    34a4:	b0040d00 	andlt	r0, r4, r0, lsl #26
    34a8:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    34ac:	00048a04 	andeq	r8, r4, r4, lsl #20
    34b0:	0bd22100 	bleq	ff48b8b8 <__shm_end__+0xbf48b8b8>
    34b4:	250f0000 	strcs	r0, [pc, #-0]	; 34bc <__core1_vectors-0xffcb44>
    34b8:	00000000 	andeq	r0, r0, r0
    34bc:	0bd8040d 	bleq	ff6044f8 <__shm_end__+0xbf6044f8>
    34c0:	040d0000 	streq	r0, [sp], #-0
    34c4:	00000bc7 	andeq	r0, r0, r7, asr #23
    34c8:	00094912 	andeq	r4, r9, r2, lsl r9
    34cc:	000bee00 	andeq	lr, fp, r0, lsl #28
    34d0:	003d1300 	eorseq	r1, sp, r0, lsl #6
    34d4:	00020000 	andeq	r0, r2, r0
    34d8:	00045422 	andeq	r5, r4, r2, lsr #8
    34dc:	03330800 	teqeq	r3, #0, 16
    34e0:	00076717 	andeq	r6, r7, r7, lsl r7
    34e4:	044d2200 	strbeq	r2, [sp], #-512	; 0xfffffe00
    34e8:	34080000 	strcc	r0, [r8], #-0
    34ec:	076d1d03 	strbeq	r1, [sp, -r3, lsl #26]!
    34f0:	14030000 	strne	r0, [r3], #-0
    34f4:	0a00000c 	beq	352c <__core1_vectors-0xffcad4>
    34f8:	09491042 	stmdbeq	r9, {r1, r6, ip}^
    34fc:	040d0000 	streq	r0, [sp], #-0
    3500:	00000c08 	andeq	r0, r0, r8, lsl #24
    3504:	00083c23 	andeq	r3, r8, r3, lsr #24
    3508:	0e360100 	rsfeqs	f0, f6, f0
    350c:	00000c14 	andeq	r0, r0, r4, lsl ip
    3510:	00084223 	andeq	r4, r8, r3, lsr #4
    3514:	0e370100 	rsfeqs	f0, f7, f0
    3518:	00000c14 	andeq	r0, r0, r4, lsl ip
    351c:	00217224 	eoreq	r7, r1, r4, lsr #4
    3520:	06030200 	streq	r0, [r3], -r0, lsl #4
    3524:	0000ac11 	andeq	sl, r0, r1, lsl ip
    3528:	00000000 	andeq	r0, r0, r0
    352c:	00004400 	andeq	r4, r0, r0, lsl #8
    3530:	5e9c0100 	fmlple	f0, f4, f0
    3534:	2500000c 	strcs	r0, [r0, #-12]
    3538:	000023db 	ldrdeq	r2, [r0], -fp
    353c:	4d060302 	stcmi	3, cr0, [r6, #-8]
    3540:	00000c5e 	andeq	r0, r0, lr, asr ip
    3544:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3548:	0378040d 	cmneq	r8, #218103808	; 0xd000000
    354c:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
    3550:	02000025 	andeq	r0, r0, #37	; 0x25
    3554:	ac1105d2 	cfldr32ge	mvfx0, [r1], {210}	; 0xd2
    3558:	00000000 	andeq	r0, r0, r0
    355c:	bc000000 	stclt	0, cr0, [r0], {-0}
    3560:	01000001 	tsteq	r0, r1
    3564:	000ce69c 	muleq	ip, ip, r6
    3568:	23db2500 	bicscs	r2, fp, #0, 10
    356c:	d2020000 	andle	r0, r2, #0
    3570:	0c5e4e05 	mrrceq	14, 0, r4, lr, cr5
    3574:	91020000 	mrsls	r0, (UNDEF: 2)
    3578:	22862564 	addcs	r2, r6, #100, 10	; 0x19000000
    357c:	d2020000 	andle	r0, r2, #0
    3580:	0ce66405 	cfstrdeq	mvd6, [r6], #20
    3584:	91020000 	mrsls	r0, (UNDEF: 2)
    3588:	22af2560 	adccs	r2, pc, #96, 10	; 0x18000000
    358c:	d2020000 	andle	r0, r2, #0
    3590:	0cec7605 	stcleq	6, cr7, [ip], #20
    3594:	91020000 	mrsls	r0, (UNDEF: 2)
    3598:	2282265c 	addcs	r2, r2, #92, 12	; 0x5c00000
    359c:	d4020000 	strle	r0, [r2], #-0
    35a0:	00a00f05 	adceq	r0, r0, r5, lsl #30
    35a4:	91020000 	mrsls	r0, (UNDEF: 2)
    35a8:	22ab2670 	adccs	r2, fp, #112, 12	; 0x7000000
    35ac:	d5020000 	strle	r0, [r2, #-0]
    35b0:	00810f05 	addeq	r0, r1, r5, lsl #30
    35b4:	91020000 	mrsls	r0, (UNDEF: 2)
    35b8:	03402774 	movteq	r2, #1908	; 0x774
    35bc:	d3260000 			; <UNDEFINED> instruction: 0xd3260000
    35c0:	0200001f 	andeq	r0, r0, #31
    35c4:	811205e2 	tsthi	r2, r2, ror #11
    35c8:	02000000 	andeq	r0, r0, #0
    35cc:	00006c91 	muleq	r0, r1, ip
    35d0:	00a0040d 	adceq	r0, r0, sp, lsl #8
    35d4:	040d0000 	streq	r0, [sp], #-0
    35d8:	00000081 	andeq	r0, r0, r1, lsl #1
    35dc:	001ec224 	andseq	ip, lr, r4, lsr #4
    35e0:	05b80200 	ldreq	r0, [r8, #512]!	; 0x200
    35e4:	0000ac11 	andeq	sl, r0, r1, lsl ip
    35e8:	00000000 	andeq	r0, r0, r0
    35ec:	0000e000 	andeq	lr, r0, r0
    35f0:	4d9c0100 	ldfmis	f0, [ip]
    35f4:	2500000d 	strcs	r0, [r0, #-13]
    35f8:	000023db 	ldrdeq	r2, [r0], -fp
    35fc:	4f05b802 	svcmi	0x0005b802
    3600:	00000c5e 	andeq	r0, r0, lr, asr ip
    3604:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
    3608:	02006176 	andeq	r6, r0, #-2147483619	; 0x8000001d
    360c:	4d6605b8 	cfstr64mi	mvdx0, [r6, #-736]!	; 0xfffffd20
    3610:	0200000d 	andeq	r0, r0, #13
    3614:	dc256891 	stcle	8, cr6, [r5], #-580	; 0xfffffdbc
    3618:	02000030 	andeq	r0, r0, #48	; 0x30
    361c:	2c7105b8 	cfldr64cs	mvdx0, [r1], #-736	; 0xfffffd20
    3620:	02000000 	andeq	r0, r0, #0
    3624:	d3266491 			; <UNDEFINED> instruction: 0xd3266491
    3628:	0200001f 	andeq	r0, r0, #31
    362c:	810e05ba 			; <UNDEFINED> instruction: 0x810e05ba
    3630:	02000000 	andeq	r0, r0, #0
    3634:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
    3638:	000d5304 	andeq	r5, sp, r4, lsl #6
    363c:	5c242900 			; <UNDEFINED> instruction: 0x5c242900
    3640:	0200001f 	andeq	r0, r0, #31
    3644:	a00b0573 	andge	r0, fp, r3, ror r5
    3648:	00000000 	andeq	r0, r0, r0
    364c:	84000000 	strhi	r0, [r0], #-0
    3650:	01000001 	tsteq	r0, r1
    3654:	000e039c 	muleq	lr, ip, r3
    3658:	61762800 	cmnvs	r6, r0, lsl #16
    365c:	05730200 	ldrbeq	r0, [r3, #-512]!	; 0xfffffe00
    3660:	000d4d29 	andeq	r4, sp, r9, lsr #26
    3664:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3668:	001de025 	andseq	lr, sp, r5, lsr #32
    366c:	05730200 	ldrbeq	r0, [r3, #-512]!	; 0xfffffe00
    3670:	000cec38 	andeq	lr, ip, r8, lsr ip
    3674:	60910200 	addsvs	r0, r1, r0, lsl #4
    3678:	001fd325 	andseq	sp, pc, r5, lsr #6
    367c:	05730200 	ldrbeq	r0, [r3, #-512]!	; 0xfffffe00
    3680:	000cec4e 	andeq	lr, ip, lr, asr #24
    3684:	5c910200 	lfmpl	f0, 4, [r1], {0}
    3688:	0061702a 	rsbeq	r7, r1, sl, lsr #32
    368c:	0f057502 	svceq	0x00057502
    3690:	000000a0 	andeq	r0, r0, r0, lsr #1
    3694:	2b749102 	blcs	1d27aa4 <__end__+0xd0ba84>
    3698:	00000000 	andeq	r0, r0, r0
    369c:	00000050 	andeq	r0, r0, r0, asr r0
    36a0:	00000dca 	andeq	r0, r0, sl, asr #27
    36a4:	0073662a 	rsbseq	r6, r3, sl, lsr #12
    36a8:	12058d02 	andne	r8, r5, #2, 26	; 0x80
    36ac:	00000081 	andeq	r0, r0, r1, lsl #1
    36b0:	00689102 	rsbeq	r9, r8, r2, lsl #2
    36b4:	0000002b 	andeq	r0, r0, fp, lsr #32
    36b8:	00006000 	andeq	r6, r0, r0
    36bc:	000de800 	andeq	lr, sp, r0, lsl #16
    36c0:	06282600 	strteq	r2, [r8], -r0, lsl #12
    36c4:	9a020000 	bls	836cc <__core1_vectors-0xf7c934>
    36c8:	00811205 	addeq	r1, r1, r5, lsl #4
    36cc:	91020000 	mrsls	r0, (UNDEF: 2)
    36d0:	002c006c 	eoreq	r0, ip, ip, rrx
    36d4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    36d8:	26000000 	strcs	r0, [r0], -r0
    36dc:	00000628 	andeq	r0, r0, r8, lsr #12
    36e0:	1205a902 	andne	sl, r5, #32768	; 0x8000
    36e4:	00000081 	andeq	r0, r0, r1, lsl #1
    36e8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    36ec:	1d022400 	cfstrsne	mvf2, [r2, #-0]
    36f0:	34020000 	strcc	r0, [r2], #-0
    36f4:	00ac1105 	adceq	r1, ip, r5, lsl #2
    36f8:	39600000 	stmdbcc	r0!, {}^	; <UNPREDICTABLE>
    36fc:	013c0100 	teqeq	ip, r0, lsl #2
    3700:	9c010000 	stcls	0, cr0, [r1], {-0}
    3704:	00000e67 	andeq	r0, r0, r7, ror #28
    3708:	00246d25 	eoreq	r6, r4, r5, lsr #26
    370c:	05340200 	ldreq	r0, [r4, #-512]!	; 0xfffffe00
    3710:	000e673a 	andeq	r6, lr, sl, lsr r7
    3714:	5c910200 	lfmpl	f0, 4, [r1], {0}
    3718:	0027b926 	eoreq	fp, r7, r6, lsr #18
    371c:	05360200 	ldreq	r0, [r6, #-512]!	; 0xfffffe00
    3720:	0000ac15 	andeq	sl, r0, r5, lsl ip
    3724:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3728:	0039f42c 	eorseq	pc, r9, ip, lsr #8
    372c:	00006801 	andeq	r6, r0, r1, lsl #16
    3730:	00692a00 	rsbeq	r2, r9, r0, lsl #20
    3734:	0d055302 	stceq	3, cr5, [r5, #-8]
    3738:	00000025 	andeq	r0, r0, r5, lsr #32
    373c:	26709102 	ldrbtcs	r9, [r0], -r2, lsl #2
    3740:	0000214c 	andeq	r2, r0, ip, asr #2
    3744:	17055402 	strne	r5, [r5, -r2, lsl #8]
    3748:	00000e6d 	andeq	r0, r0, sp, ror #28
    374c:	00609102 	rsbeq	r9, r0, r2, lsl #2
    3750:	8d040d00 	stchi	13, cr0, [r4, #-0]
    3754:	12000000 	andne	r0, r0, #0
    3758:	00000164 	andeq	r0, r0, r4, ror #2
    375c:	00000e7d 	andeq	r0, r0, sp, ror lr
    3760:	00003d13 	andeq	r3, r0, r3, lsl sp
    3764:	24000f00 	strcs	r0, [r0], #-3840	; 0xfffff100
    3768:	00002409 	andeq	r2, r0, r9, lsl #8
    376c:	1103be02 	tstne	r3, r2, lsl #28
    3770:	000000ac 	andeq	r0, r0, ip, lsr #1
    3774:	01002b88 	smlabbeq	r0, r8, fp, r2
    3778:	00000dd8 	ldrdeq	r0, [r0], -r8
    377c:	12079c01 	andne	r9, r7, #256	; 0x100
    3780:	6d250000 	stcvs	0, cr0, [r5, #-0]
    3784:	02000024 	andeq	r0, r0, #36	; 0x24
    3788:	073403be 			; <UNDEFINED> instruction: 0x073403be
    378c:	03000012 	movweq	r0, #18
    3790:	255ec491 	ldrbcs	ip, [lr, #-1169]	; 0xfffffb6f
    3794:	00001e60 	andeq	r1, r0, r0, ror #28
    3798:	4503bf02 	strmi	fp, [r3, #-3842]	; 0xfffff0fe
    379c:	0000120d 	andeq	r1, r0, sp, lsl #4
    37a0:	5ec09103 	acspls	f1, f3
    37a4:	001e5c25 	andseq	r5, lr, r5, lsr #24
    37a8:	03c00200 	biceq	r0, r0, #0, 4
    37ac:	00003836 	andeq	r3, r0, r6, lsr r8
    37b0:	bc910300 	ldclt	3, cr0, [r1], {0}
    37b4:	2597255e 	ldrcs	r2, [r7, #1374]	; 0x55e
    37b8:	c1020000 	mrsgt	r0, (UNDEF: 2)
    37bc:	02f93d03 	rscseq	r3, r9, #3, 26	; 0xc0
    37c0:	91030000 	mrsls	r0, (UNDEF: 3)
    37c4:	f4255eb8 			; <UNDEFINED> instruction: 0xf4255eb8
    37c8:	0200001e 	andeq	r0, r0, #30
    37cc:	e53003c2 	ldr	r0, [r0, #-962]!	; 0xfffffc3e
    37d0:	02000002 	andeq	r0, r0, #2
    37d4:	6b2a0091 	blvs	a83a20 <__core1_vectors-0x57c5e0>
    37d8:	03c40200 	biceq	r0, r4, #0, 4
    37dc:	00002509 	andeq	r2, r0, r9, lsl #10
    37e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    37e4:	0200692a 	andeq	r6, r0, #688128	; 0xa8000
    37e8:	2c0c03c5 	stccs	3, cr0, [ip], {197}	; 0xc5
    37ec:	02000000 	andeq	r0, r0, #0
    37f0:	6a267091 	bvs	99fa3c <__core1_vectors-0x6605c4>
    37f4:	02000021 	andeq	r0, r0, #33	; 0x21
    37f8:	130a03c6 	movwne	r0, #41926	; 0xa3c6
    37fc:	03000012 	movweq	r0, #18
    3800:	265eec91 			; <UNDEFINED> instruction: 0x265eec91
    3804:	00002484 	andeq	r2, r0, r4, lsl #9
    3808:	0c03c802 	stceq	8, cr12, [r3], {2}
    380c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3810:	26509102 	ldrbcs	r9, [r0], -r2, lsl #2
    3814:	000023bb 			; <UNDEFINED> instruction: 0x000023bb
    3818:	0c03cb02 			; <UNDEFINED> instruction: 0x0c03cb02
    381c:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    3820:	264c9102 	strbcs	r9, [ip], -r2, lsl #2
    3824:	0000228c 	andeq	r2, r0, ip, lsl #5
    3828:	0c03cc02 	stceq	12, cr12, [r3], {2}
    382c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3830:	2b6c9102 	blcs	1b27c40 <__end__+0xb0bc20>
    3834:	01002cf8 	strdeq	r2, [r0, -r8]
    3838:	000000bc 	strheq	r0, [r0], -ip
    383c:	00000f8a 	andeq	r0, r0, sl, lsl #31
    3840:	002c9426 	eoreq	r9, ip, r6, lsr #8
    3844:	03ff0200 	mvnseq	r0, #0, 4
    3848:	00008116 	andeq	r8, r0, r6, lsl r1
    384c:	ec910300 	ldc	3, cr0, [r1], {0}
    3850:	2421267e 	strtcs	r2, [r1], #-1662	; 0xfffff982
    3854:	00020000 	andeq	r0, r2, r0
    3858:	02e72204 	rsceq	r2, r7, #4, 4	; 0x40000000
    385c:	91030000 	mrsls	r0, (UNDEF: 3)
    3860:	9d265ed8 	stcls	14, cr5, [r6, #-864]!	; 0xfffffca0
    3864:	02000024 	andeq	r0, r0, #36	; 0x24
    3868:	ec180401 	cfldrs	mvf0, [r8], {1}
    386c:	0300000c 	movweq	r0, #12
    3870:	007ef091 			; <UNDEFINED> instruction: 0x007ef091
    3874:	002df02c 	eoreq	pc, sp, ip, lsr #32
    3878:	000b3c01 	andeq	r3, fp, r1, lsl #24
    387c:	61762a00 	cmnvs	r6, r0, lsl #20
    3880:	041d0200 	ldreq	r0, [sp], #-512	; 0xfffffe00
    3884:	0000a013 	andeq	sl, r0, r3, lsl r0
    3888:	68910200 	ldmvs	r1, {r9}
    388c:	0061702a 	rsbeq	r7, r1, sl, lsr #32
    3890:	13041e02 	movwne	r1, #19970	; 0x4e02
    3894:	000000a0 	andeq	r0, r0, r0, lsr #1
    3898:	26649102 	strbtcs	r9, [r4], -r2, lsl #2
    389c:	000030dc 	ldrdeq	r3, [r0], -ip
    38a0:	13041f02 	movwne	r1, #20226	; 0x4f02
    38a4:	00000081 	andeq	r0, r0, r1, lsl #1
    38a8:	2a609102 	bcs	1827cb8 <__end__+0x80bc98>
    38ac:	2002006a 	andcs	r0, r2, sl, rrx
    38b0:	00811204 	addeq	r1, r1, r4, lsl #4
    38b4:	91020000 	mrsls	r0, (UNDEF: 2)
    38b8:	20fd265c 	rscscs	r2, sp, ip, asr r6
    38bc:	24020000 	strcs	r0, [r2], #-0
    38c0:	12241204 	eorne	r1, r4, #4, 4	; 0x40000000
    38c4:	91030000 	mrsls	r0, (UNDEF: 3)
    38c8:	b4265ecc 	strtlt	r5, [r6], #-3788	; 0xfffff134
    38cc:	02000021 	andeq	r0, r0, #33	; 0x21
    38d0:	8112042c 	tsthi	r2, ip, lsr #8
    38d4:	02000000 	andeq	r0, r0, #0
    38d8:	382b5891 	stmdacc	fp!, {r0, r4, r7, fp, ip, lr}
    38dc:	4001002f 	andmi	r0, r1, pc, lsr #32
    38e0:	0b000004 	bleq	38f8 <__core1_vectors-0xffc708>
    38e4:	26000011 			; <UNDEFINED> instruction: 0x26000011
    38e8:	000022af 	andeq	r2, r0, pc, lsr #5
    38ec:	16043f02 	strne	r3, [r4], -r2, lsl #30
    38f0:	00000081 	andeq	r0, r0, r1, lsl #1
    38f4:	2b549102 	blcs	1527d04 <__end__+0x50bce4>
    38f8:	01002f68 	tsteq	r0, r8, ror #30
    38fc:	000000e4 	andeq	r0, r0, r4, ror #1
    3900:	0000104e 	andeq	r1, r0, lr, asr #32
    3904:	002c9426 	eoreq	r9, ip, r6, lsr #8
    3908:	04480200 	strbeq	r0, [r8], #-512	; 0xfffffe00
    390c:	0000811e 	andeq	r8, r0, lr, lsl r1
    3910:	bc910300 	ldclt	3, cr0, [r1], {0}
    3914:	249d267f 	ldrcs	r2, [sp], #1663	; 0x67f
    3918:	4a020000 	bmi	83920 <__core1_vectors-0xf7c6e0>
    391c:	0cec2004 	stcleq	0, cr2, [ip], #16
    3920:	91030000 	mrsls	r0, (UNDEF: 3)
    3924:	01267fb8 			; <UNDEFINED> instruction: 0x01267fb8
    3928:	02000023 	andeq	r0, r0, #35	; 0x23
    392c:	811e044b 	tsthi	lr, fp, asr #8
    3930:	03000000 	movweq	r0, #0
    3934:	007fb491 			; <UNDEFINED> instruction: 0x007fb491
    3938:	00306c2b 	eorseq	r6, r0, fp, lsr #24
    393c:	00011801 	andeq	r1, r1, r1, lsl #16
    3940:	00108f00 	andseq	r8, r0, r0, lsl #30
    3944:	2c942600 	ldccs	6, cr2, [r4], {0}
    3948:	60020000 	andvs	r0, r2, r0
    394c:	00811e04 	addeq	r1, r1, r4, lsl #28
    3950:	91030000 	mrsls	r0, (UNDEF: 3)
    3954:	9d267fa4 	stcls	15, cr7, [r6, #-656]!	; 0xfffffd70
    3958:	02000024 	andeq	r0, r0, #36	; 0x24
    395c:	ec200462 	cfstrs	mvf0, [r0], #-392	; 0xfffffe78
    3960:	0300000c 	movweq	r0, #12
    3964:	267fa091 			; <UNDEFINED> instruction: 0x267fa091
    3968:	00002301 	andeq	r2, r0, r1, lsl #6
    396c:	1e046302 	cdpne	3, 0, cr6, cr4, cr2, {0}
    3970:	00000081 	andeq	r0, r0, r1, lsl #1
    3974:	7f9c9103 	svcvc	0x009c9103
    3978:	31942b00 	orrscc	r2, r4, r0, lsl #22
    397c:	00e40100 	rsceq	r0, r4, r0, lsl #2
    3980:	10d00000 	sbcsne	r0, r0, r0
    3984:	94260000 	strtls	r0, [r6], #-0
    3988:	0200002c 	andeq	r0, r0, #44	; 0x2c
    398c:	811e0479 	tsthi	lr, r9, ror r4
    3990:	03000000 	movweq	r0, #0
    3994:	267fb091 			; <UNDEFINED> instruction: 0x267fb091
    3998:	0000249d 	muleq	r0, sp, r4
    399c:	20047b02 	andcs	r7, r4, r2, lsl #22
    39a0:	00000cec 	andeq	r0, r0, ip, ror #25
    39a4:	7fac9103 	svcvc	0x00ac9103
    39a8:	00230126 	eoreq	r0, r3, r6, lsr #2
    39ac:	047c0200 	ldrbteq	r0, [ip], #-512	; 0xfffffe00
    39b0:	0000811e 	andeq	r8, r0, lr, lsl r1
    39b4:	a8910300 	ldmge	r1, {r8, r9}
    39b8:	882c007f 	stmdahi	ip!, {r0, r1, r2, r3, r4, r5, r6}
    39bc:	e4010032 	str	r0, [r1], #-50	; 0xffffffce
    39c0:	26000000 	strcs	r0, [r0], -r0
    39c4:	00002c94 	muleq	r0, r4, ip
    39c8:	1e049002 	cdpne	0, 0, cr9, cr4, cr2, {0}
    39cc:	00000081 	andeq	r0, r0, r1, lsl #1
    39d0:	26489102 	strbcs	r9, [r8], -r2, lsl #2
    39d4:	0000249d 	muleq	r0, sp, r4
    39d8:	20049202 	andcs	r9, r4, r2, lsl #4
    39dc:	00000cec 	andeq	r0, r0, ip, ror #25
    39e0:	26449102 	strbcs	r9, [r4], -r2, lsl #2
    39e4:	00002301 	andeq	r2, r0, r1, lsl #6
    39e8:	1e049302 	cdpne	3, 0, cr9, cr4, cr2, {0}
    39ec:	00000081 	andeq	r0, r0, r1, lsl #1
    39f0:	00409102 	subeq	r9, r0, r2, lsl #2
    39f4:	33942b00 	orrscc	r2, r4, #0, 22
    39f8:	00b80100 	adcseq	r0, r8, r0, lsl #2
    39fc:	112a0000 			; <UNDEFINED> instruction: 0x112a0000
    3a00:	94260000 	strtls	r0, [r6], #-0
    3a04:	0200002c 	andeq	r0, r0, #44	; 0x2c
    3a08:	811a04b6 			; <UNDEFINED> instruction: 0x811a04b6
    3a0c:	03000000 	movweq	r0, #0
    3a10:	007f9891 			; <UNDEFINED> instruction: 0x007f9891
    3a14:	00346c2b 	eorseq	r6, r4, fp, lsr #24
    3a18:	0000ec01 	andeq	lr, r0, r1, lsl #24
    3a1c:	00114900 	andseq	r4, r1, r0, lsl #18
    3a20:	2c942600 	ldccs	6, cr2, [r4], {0}
    3a24:	c7020000 	strgt	r0, [r2, -r0]
    3a28:	00811a04 	addeq	r1, r1, r4, lsl #20
    3a2c:	91030000 	mrsls	r0, (UNDEF: 3)
    3a30:	2b007f90 	blcs	23878 <__core1_vectors-0xfdc788>
    3a34:	01003568 	tsteq	r0, r8, ror #10
    3a38:	000000b8 	strheq	r0, [r0], -r8
    3a3c:	00001168 	andeq	r1, r0, r8, ror #2
    3a40:	002c9426 	eoreq	r9, ip, r6, lsr #8
    3a44:	04db0200 	ldrbeq	r0, [fp], #512	; 0x200
    3a48:	0000811a 	andeq	r8, r0, sl, lsl r1
    3a4c:	94910300 	ldrls	r0, [r1], #768	; 0x300
    3a50:	4c2b007f 	stcmi	0, cr0, [fp], #-508	; 0xfffffe04
    3a54:	b8010036 	stmdalt	r1, {r1, r2, r4, r5}
    3a58:	87000000 	strhi	r0, [r0, -r0]
    3a5c:	26000011 			; <UNDEFINED> instruction: 0x26000011
    3a60:	00002c94 	muleq	r0, r4, ip
    3a64:	1a04f002 	bne	13fa74 <__core1_vectors-0xec058c>
    3a68:	00000081 	andeq	r0, r0, r1, lsl #1
    3a6c:	7f8c9103 	svcvc	0x008c9103
    3a70:	372c2b00 	strcc	r2, [ip, -r0, lsl #22]!
    3a74:	010c0100 	mrseq	r0, (UNDEF: 28)
    3a78:	11c80000 	bicne	r0, r8, r0
    3a7c:	94260000 	strtls	r0, [r6], #-0
    3a80:	0200002c 	andeq	r0, r0, #44	; 0x2c
    3a84:	811a0507 	tsthi	sl, r7, lsl #10
    3a88:	03000000 	movweq	r0, #0
    3a8c:	267f8891 			; <UNDEFINED> instruction: 0x267f8891
    3a90:	0000249d 	muleq	r0, sp, r4
    3a94:	1c050902 			; <UNDEFINED> instruction: 0x1c050902
    3a98:	00000cec 	andeq	r0, r0, ip, ror #25
    3a9c:	7f849103 	svcvc	0x00849103
    3aa0:	00230126 	eoreq	r0, r3, r6, lsr #2
    3aa4:	050a0200 	streq	r0, [sl, #-512]	; 0xfffffe00
    3aa8:	0000811a 	andeq	r8, r0, sl, lsl r1
    3aac:	80910300 	addshi	r0, r1, r0, lsl #6
    3ab0:	482c007f 	stmdami	ip!, {r0, r1, r2, r3, r4, r5, r6}
    3ab4:	d8010038 	stmdale	r1, {r3, r4, r5}
    3ab8:	26000000 	strcs	r0, [r0], -r0
    3abc:	00002c94 	muleq	r0, r4, ip
    3ac0:	16051e02 	strne	r1, [r5], -r2, lsl #28
    3ac4:	00000081 	andeq	r0, r0, r1, lsl #1
    3ac8:	7efc9103 	nrmvce	f1, f3
    3acc:	00249d26 	eoreq	r9, r4, r6, lsr #26
    3ad0:	05200200 	streq	r0, [r0, #-512]!	; 0xfffffe00
    3ad4:	000cec18 	andeq	lr, ip, r8, lsl ip
    3ad8:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
    3adc:	2301267e 	movwcs	r2, #5758	; 0x167e
    3ae0:	21020000 	mrscs	r0, (UNDEF: 2)
    3ae4:	00811605 	addeq	r1, r1, r5, lsl #12
    3ae8:	91030000 	mrsls	r0, (UNDEF: 3)
    3aec:	00007ef4 	strdeq	r7, [r0], -r4
    3af0:	ec040d00 	stc	13, cr0, [r4], {-0}
    3af4:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    3af8:	0002f404 	andeq	pc, r2, r4, lsl #8
    3afc:	036c1200 	cmneq	ip, #0, 4
    3b00:	12240000 	eorne	r0, r4, #0
    3b04:	3d2d0000 	stccc	0, cr0, [sp, #-0]
    3b08:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    3b0c:	8112000f 	tsthi	r2, pc
    3b10:	34000000 	strcc	r0, [r0], #-0
    3b14:	13000012 	movwne	r0, #18
    3b18:	0000003d 	andeq	r0, r0, sp, lsr r0
    3b1c:	7d2e0002 	stcvc	0, cr0, [lr, #-8]!
    3b20:	0200001c 	andeq	r0, r0, #28
    3b24:	ac1803af 	ldcge	3, cr0, [r8], {175}	; 0xaf
    3b28:	40000000 	andmi	r0, r0, r0
    3b2c:	4801002b 	stmdami	r1, {r0, r1, r3, r5}
    3b30:	01000000 	mrseq	r0, (UNDEF: 0)
    3b34:	0012609c 	mulseq	r2, ip, r0
    3b38:	24722500 	ldrbtcs	r2, [r2], #-1280	; 0xfffffb00
    3b3c:	af020000 	svcge	0x00020000
    3b40:	0cec3503 	cfstr64eq	mvdx3, [ip], #12
    3b44:	91020000 	mrsls	r0, (UNDEF: 2)
    3b48:	ff2f0074 			; <UNDEFINED> instruction: 0xff2f0074
    3b4c:	02000021 	andeq	r0, r0, #33	; 0x21
    3b50:	811a0395 			; <UNDEFINED> instruction: 0x811a0395
    3b54:	30000000 	andcc	r0, r0, r0
    3b58:	1001002a 	andne	r0, r1, sl, lsr #32
    3b5c:	01000001 	tsteq	r0, r1
    3b60:	0012c79c 	mulseq	r2, ip, r7
    3b64:	61702800 	cmnvs	r0, r0, lsl #16
    3b68:	03950200 	orrseq	r0, r5, #0, 4
    3b6c:	0000a043 	andeq	sl, r0, r3, asr #32
    3b70:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3b74:	6d656d28 	stclvs	13, cr6, [r5, #-160]!	; 0xffffff60
    3b78:	03960200 	orrseq	r0, r6, #0, 4
    3b7c:	00120d54 	andseq	r0, r2, r4, asr sp
    3b80:	60910200 	addsvs	r0, r1, r0, lsl #4
    3b84:	7865742a 	stmdavc	r5!, {r1, r3, r5, sl, ip, sp, lr}^
    3b88:	03980200 	orrseq	r0, r8, #0, 4
    3b8c:	00002509 	andeq	r2, r0, r9, lsl #10
    3b90:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3b94:	0200632a 	andeq	r6, r0, #-1476395008	; 0xa8000000
    3b98:	25090399 	strcs	r0, [r9, #-921]	; 0xfffffc67
    3b9c:	02000000 	andeq	r0, r0, #0
    3ba0:	622a7091 	eorvs	r7, sl, #145	; 0x91
    3ba4:	039a0200 	orrseq	r0, sl, #0, 4
    3ba8:	00002509 	andeq	r2, r0, r9, lsl #10
    3bac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3bb0:	1d1a2f00 	ldcne	15, cr2, [sl, #-0]
    3bb4:	7b020000 	blvc	83bbc <__core1_vectors-0xf7c444>
    3bb8:	00811a03 	addeq	r1, r1, r3, lsl #20
    3bbc:	29240000 	stmdbcs	r4!, {}	; <UNPREDICTABLE>
    3bc0:	010c0100 	mrseq	r0, (UNDEF: 28)
    3bc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bc8:	0000132e 	andeq	r1, r0, lr, lsr #6
    3bcc:	00617028 	rsbeq	r7, r1, r8, lsr #32
    3bd0:	43037b02 	movwmi	r7, #15106	; 0x3b02
    3bd4:	000000a0 	andeq	r0, r0, r0, lsr #1
    3bd8:	28649102 	stmdacs	r4!, {r1, r8, ip, pc}^
    3bdc:	006d656d 	rsbeq	r6, sp, sp, ror #10
    3be0:	54037c02 	strpl	r7, [r3], #-3074	; 0xfffff3fe
    3be4:	0000120d 	andeq	r1, r0, sp, lsl #4
    3be8:	2a609102 	bcs	1827ff8 <__end__+0x80bfd8>
    3bec:	00786574 	rsbseq	r6, r8, r4, ror r5
    3bf0:	09037e02 	stmdbeq	r3, {r1, r9, sl, fp, ip, sp, lr}
    3bf4:	00000025 	andeq	r0, r0, r5, lsr #32
    3bf8:	2a749102 	bcs	1d28008 <__end__+0xd0bfe8>
    3bfc:	7f020063 	svcvc	0x00020063
    3c00:	00250903 	eoreq	r0, r5, r3, lsl #18
    3c04:	91020000 	mrsls	r0, (UNDEF: 2)
    3c08:	00622a70 	rsbeq	r2, r2, r0, ror sl
    3c0c:	09038002 	stmdbeq	r3, {r1, pc}
    3c10:	00000025 	andeq	r0, r0, r5, lsr #32
    3c14:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3c18:	0020cf2f 	eoreq	ip, r0, pc, lsr #30
    3c1c:	03610200 	cmneq	r1, #0, 4
    3c20:	0000811a 	andeq	r8, r0, sl, lsl r1
    3c24:	00280000 	eoreq	r0, r8, r0
    3c28:	00012401 	andeq	r2, r1, r1, lsl #8
    3c2c:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    3c30:	28000013 	stmdacs	r0, {r0, r1, r4}
    3c34:	02006170 	andeq	r6, r0, #112, 2
    3c38:	a0460361 	subge	r0, r6, r1, ror #6
    3c3c:	02000000 	andeq	r0, r0, #0
    3c40:	6d286491 	cfstrsvs	mvf6, [r8, #-580]!	; 0xfffffdbc
    3c44:	02006d65 	andeq	r6, r0, #6464	; 0x1940
    3c48:	0d570362 	ldcleq	3, cr0, [r7, #-392]	; 0xfffffe78
    3c4c:	02000012 	andeq	r0, r0, #18
    3c50:	742a6091 	strtvc	r6, [sl], #-145	; 0xffffff6f
    3c54:	02007865 	andeq	r7, r0, #6619136	; 0x650000
    3c58:	25090364 	strcs	r0, [r9, #-868]	; 0xfffffc9c
    3c5c:	02000000 	andeq	r0, r0, #0
    3c60:	632a7491 			; <UNDEFINED> instruction: 0x632a7491
    3c64:	03650200 	cmneq	r5, #0, 4
    3c68:	00002509 	andeq	r2, r0, r9, lsl #10
    3c6c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3c70:	0200622a 	andeq	r6, r0, #-1610612734	; 0xa0000002
    3c74:	25090366 	strcs	r0, [r9, #-870]	; 0xfffffc9a
    3c78:	02000000 	andeq	r0, r0, #0
    3c7c:	2f006c91 	svccs	0x00006c91
    3c80:	00002059 	andeq	r2, r0, r9, asr r0
    3c84:	1a034702 	bne	d5894 <__core1_vectors-0xf2a76c>
    3c88:	00000081 	andeq	r0, r0, r1, lsl #1
    3c8c:	010026dc 	ldrdeq	r2, [r0, -ip]
    3c90:	00000124 	andeq	r0, r0, r4, lsr #2
    3c94:	13fc9c01 	mvnsne	r9, #256	; 0x100
    3c98:	70280000 	eorvc	r0, r8, r0
    3c9c:	47020061 	strmi	r0, [r2, -r1, rrx]
    3ca0:	00a04103 	adceq	r4, r0, r3, lsl #2
    3ca4:	91020000 	mrsls	r0, (UNDEF: 2)
    3ca8:	656d2864 	strbvs	r2, [sp, #-2148]!	; 0xfffff79c
    3cac:	4802006d 	stmdami	r2, {r0, r2, r3, r5, r6}
    3cb0:	120d5203 	andne	r5, sp, #805306368	; 0x30000000
    3cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    3cb8:	65742a60 	ldrbvs	r2, [r4, #-2656]!	; 0xfffff5a0
    3cbc:	4a020078 	bmi	83ea4 <__core1_vectors-0xf7c15c>
    3cc0:	00250903 	eoreq	r0, r5, r3, lsl #18
    3cc4:	91020000 	mrsls	r0, (UNDEF: 2)
    3cc8:	00632a74 	rsbeq	r2, r3, r4, ror sl
    3ccc:	09034b02 	stmdbeq	r3, {r1, r8, r9, fp, lr}
    3cd0:	00000025 	andeq	r0, r0, r5, lsr #32
    3cd4:	2a709102 	bcs	1c280e4 <__end__+0xc0c0c4>
    3cd8:	4c020062 	stcmi	0, cr0, [r2], {98}	; 0x62
    3cdc:	00250903 	eoreq	r0, r5, r3, lsl #18
    3ce0:	91020000 	mrsls	r0, (UNDEF: 2)
    3ce4:	282f006c 	stmdacs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    3ce8:	0200001f 	andeq	r0, r0, #31
    3cec:	811a0338 	tsthi	sl, r8, lsr r3
    3cf0:	7c000000 	stcvc	0, cr0, [r0], {-0}
    3cf4:	60010026 	andvs	r0, r1, r6, lsr #32
    3cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    3cfc:	0014389c 	mulseq	r4, ip, r8
    3d00:	249d2500 	ldrcs	r2, [sp], #1280	; 0x500
    3d04:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    3d08:	00a04303 	adceq	r4, r0, r3, lsl #6
    3d0c:	91020000 	mrsls	r0, (UNDEF: 2)
    3d10:	656d2874 	strbvs	r2, [sp, #-2164]!	; 0xfffff78c
    3d14:	3902006d 	stmdbcc	r2, {r0, r2, r3, r5, r6}
    3d18:	120d5403 	andne	r5, sp, #50331648	; 0x3000000
    3d1c:	91020000 	mrsls	r0, (UNDEF: 2)
    3d20:	6d240070 	stcvs	0, cr0, [r4, #-448]!	; 0xfffffe40
    3d24:	0200001f 	andeq	r0, r0, #31
    3d28:	2c08032e 	stccs	3, cr0, [r8], {46}	; 0x2e
    3d2c:	14000000 	strne	r0, [r0], #-0
    3d30:	68010026 	stmdavs	r1, {r1, r2, r5}
    3d34:	01000000 	mrseq	r0, (UNDEF: 0)
    3d38:	0014879c 	mulseq	r4, ip, r7
    3d3c:	1e602500 	cdpne	5, 6, cr2, cr0, cr0, {0}
    3d40:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    3d44:	120d4603 	andne	r4, sp, #3145728	; 0x300000
    3d48:	91030000 	mrsls	r0, (UNDEF: 3)
    3d4c:	5c255ff4 	stcpl	15, cr5, [r5], #-976	; 0xfffffc30
    3d50:	0200001e 	andeq	r0, r0, #30
    3d54:	3837032f 	ldmdacc	r7!, {r0, r1, r2, r3, r5, r8, r9}
    3d58:	03000000 	movweq	r0, #0
    3d5c:	265ff091 			; <UNDEFINED> instruction: 0x265ff091
    3d60:	0000216a 	andeq	r2, r0, sl, ror #2
    3d64:	0a033102 	beq	d0174 <__core1_vectors-0xf2fe8c>
    3d68:	00001213 	andeq	r1, r0, r3, lsl r2
    3d6c:	5ff89103 	svcpl	0x00f89103
    3d70:	1da42e00 	stcne	14, cr2, [r4]
    3d74:	b2020000 	andlt	r0, r2, #0
    3d78:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    3d7c:	22ec0000 	rsccs	r0, ip, #0
    3d80:	03280100 			; <UNDEFINED> instruction: 0x03280100
    3d84:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d88:	00001553 	andeq	r1, r0, r3, asr r5
    3d8c:	001e6025 	andseq	r6, lr, r5, lsr #32
    3d90:	02b20200 	adcseq	r0, r2, #0, 4
    3d94:	00120d56 	andseq	r0, r2, r6, asr sp
    3d98:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3d9c:	001e5c25 	andseq	r5, lr, r5, lsr #24
    3da0:	02b30200 	adcseq	r0, r3, #0, 4
    3da4:	00003847 	andeq	r3, r0, r7, asr #16
    3da8:	50910200 	addspl	r0, r1, r0, lsl #4
    3dac:	00216a25 	eoreq	r6, r1, r5, lsr #20
    3db0:	02b40200 	adcseq	r0, r4, #0, 4
    3db4:	0008bb41 	andeq	fp, r8, r1, asr #22
    3db8:	4c910200 	lfmmi	f0, 4, [r1], {0}
    3dbc:	00248426 	eoreq	r8, r4, r6, lsr #8
    3dc0:	02b60200 	adcseq	r0, r6, #0, 4
    3dc4:	00002c0c 	andeq	r2, r0, ip, lsl #24
    3dc8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3dcc:	0200692a 	andeq	r6, r0, #688128	; 0xa8000
    3dd0:	810e02b7 			; <UNDEFINED> instruction: 0x810e02b7
    3dd4:	02000000 	andeq	r0, r0, #0
    3dd8:	482c7091 	stmdami	ip!, {r0, r4, r7, ip, sp, lr}
    3ddc:	50010023 	andpl	r0, r1, r3, lsr #32
    3de0:	2a000002 	bcs	3df0 <__core1_vectors-0xffc210>
    3de4:	02006176 	andeq	r6, r0, #-2147483619	; 0x8000001d
    3de8:	a01a02c2 	andsge	r0, sl, r2, asr #5
    3dec:	02000000 	andeq	r0, r0, #0
    3df0:	702a6c91 	mlavc	sl, r1, ip, r6
    3df4:	c3020061 	movwgt	r0, #8289	; 0x2061
    3df8:	00a01a02 	adceq	r1, r0, r2, lsl #20
    3dfc:	91020000 	mrsls	r0, (UNDEF: 2)
    3e00:	30dc2668 	sbcscc	r2, ip, r8, ror #12
    3e04:	c4020000 	strgt	r0, [r2], #-0
    3e08:	00811a02 	addeq	r1, r1, r2, lsl #20
    3e0c:	91020000 	mrsls	r0, (UNDEF: 2)
    3e10:	23722664 	cmncs	r2, #100, 12	; 0x6400000
    3e14:	c5020000 	strgt	r0, [r2, #-0]
    3e18:	01021a02 	tsteq	r2, r2, lsl #20
    3e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    3e20:	24402c63 	strbcs	r2, [r0], #-3171	; 0xfffff39d
    3e24:	00840100 	addeq	r0, r4, r0, lsl #2
    3e28:	85260000 	strhi	r0, [r6, #-0]!
    3e2c:	0200001d 	andeq	r0, r0, #29
    3e30:	811602dd 			; <UNDEFINED> instruction: 0x811602dd
    3e34:	02000000 	andeq	r0, r0, #0
    3e38:	00005c91 	muleq	r0, r1, ip
    3e3c:	248c2f00 	strcs	r2, [ip], #3840	; 0xf00
    3e40:	a4020000 	strge	r0, [r2], #-0
    3e44:	00ac1802 	adceq	r1, ip, r2, lsl #16
    3e48:	22840000 	addcs	r0, r4, #0
    3e4c:	00680100 	rsbeq	r0, r8, r0, lsl #2
    3e50:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e54:	0000158f 	andeq	r1, r0, pc, lsl #11
    3e58:	00216a25 	eoreq	r6, r1, r5, lsr #20
    3e5c:	02a40200 	adceq	r0, r4, #0, 4
    3e60:	0008bb3a 	andeq	fp, r8, sl, lsr fp
    3e64:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3e68:	00237225 	eoreq	r7, r3, r5, lsr #4
    3e6c:	02a40200 	adceq	r0, r4, #0, 4
    3e70:	00010254 	andeq	r0, r1, r4, asr r2
    3e74:	73910200 	orrsvc	r0, r1, #0, 4
    3e78:	20993000 	addscs	r3, r9, r0
    3e7c:	8a020000 	bhi	83e84 <__core1_vectors-0xf7c17c>
    3e80:	00ac1102 	adceq	r1, ip, r2, lsl #2
    3e84:	00000000 	andeq	r0, r0, r0
    3e88:	00340000 	eorseq	r0, r4, r0
    3e8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e90:	000015bb 			; <UNDEFINED> instruction: 0x000015bb
    3e94:	001ebc26 	andseq	fp, lr, r6, lsr #24
    3e98:	028f0200 	addeq	r0, pc, #0, 4
    3e9c:	0000810e 	andeq	r8, r0, lr, lsl #2
    3ea0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3ea4:	25573000 	ldrbcs	r3, [r7, #-0]
    3ea8:	75020000 	strvc	r0, [r2, #-0]
    3eac:	00ac1102 	adceq	r1, ip, r2, lsl #2
    3eb0:	22500000 	subscs	r0, r0, #0
    3eb4:	00340100 	eorseq	r0, r4, r0, lsl #2
    3eb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ebc:	000015e7 	andeq	r1, r0, r7, ror #11
    3ec0:	001ebc26 	andseq	fp, lr, r6, lsr #24
    3ec4:	027a0200 	rsbseq	r0, sl, #0, 4
    3ec8:	0000810e 	andeq	r8, r0, lr, lsl #2
    3ecc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3ed0:	24f43000 	ldrbtcs	r3, [r4], #0
    3ed4:	62020000 	andvs	r0, r2, #0
    3ed8:	00ac1102 	adceq	r1, ip, r2, lsl #2
    3edc:	00000000 	andeq	r0, r0, r0
    3ee0:	00780000 	rsbseq	r0, r8, r0
    3ee4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ee8:	0000164d 	andeq	r1, r0, sp, asr #12
    3eec:	001e5525 	andseq	r5, lr, r5, lsr #10
    3ef0:	02620200 	rsbeq	r0, r2, #0, 4
    3ef4:	00008d37 	andeq	r8, r0, r7, lsr sp
    3ef8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3efc:	001d9f25 	andseq	r9, sp, r5, lsr #30
    3f00:	02620200 	rsbeq	r0, r2, #0, 4
    3f04:	00008d4e 	andeq	r8, r0, lr, asr #26
    3f08:	68910200 	ldmvs	r1, {r9}
    3f0c:	0022b726 	eoreq	fp, r2, r6, lsr #14
    3f10:	02640200 	rsbeq	r0, r4, #0, 4
    3f14:	0000810e 	andeq	r8, r0, lr, lsl #2
    3f18:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3f1c:	001c7631 	andseq	r7, ip, r1, lsr r6
    3f20:	00000000 	andeq	r0, r0, r0
    3f24:	00000c00 	andeq	r0, r0, r0, lsl #24
    3f28:	02700200 	rsbseq	r0, r0, #0, 4
    3f2c:	1c833205 	sfmne	f3, 4, [r3], {5}
    3f30:	91020000 	mrsls	r0, (UNDEF: 2)
    3f34:	30000070 	andcc	r0, r0, r0, ror r0
    3f38:	00001e34 	andeq	r1, r0, r4, lsr lr
    3f3c:	11024102 	tstne	r2, r2, lsl #2
    3f40:	000000ac 	andeq	r0, r0, ip, lsr #1
    3f44:	01002170 	tsteq	r0, r0, ror r1
    3f48:	000000e0 	andeq	r0, r0, r0, ror #1
    3f4c:	16de9c01 	ldrbne	r9, [lr], r1, lsl #24
    3f50:	4c250000 	stcmi	0, cr0, [r5], #-0
    3f54:	02000021 	andeq	r0, r0, #33	; 0x21
    3f58:	de360241 	cdple	2, 3, cr0, cr6, cr1, {2}
    3f5c:	02000016 	andeq	r0, r0, #22
    3f60:	a7256491 			; <UNDEFINED> instruction: 0xa7256491
    3f64:	02000024 	andeq	r0, r0, #36	; 0x24
    3f68:	382f0242 	stmdacc	pc!, {r1, r6, r9}	; <UNPREDICTABLE>
    3f6c:	02000000 	andeq	r0, r0, #0
    3f70:	23266091 			; <UNDEFINED> instruction: 0x23266091
    3f74:	0200001f 	andeq	r0, r0, #31
    3f78:	810e0244 	tsthi	lr, r4, asr #4
    3f7c:	02000000 	andeq	r0, r0, #0
    3f80:	692a7491 	stmdbvs	sl!, {r0, r4, r7, sl, ip, sp, lr}
    3f84:	02450200 	subeq	r0, r5, #0, 4
    3f88:	0000810e 	andeq	r8, r0, lr, lsl #2
    3f8c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3f90:	0021ac2b 	eoreq	sl, r1, fp, lsr #24
    3f94:	00006001 	andeq	r6, r0, r1
    3f98:	0016c300 	andseq	ip, r6, r0, lsl #6
    3f9c:	70612a00 	rsbvc	r2, r1, r0, lsl #20
    3fa0:	024e0200 	subeq	r0, lr, #0, 4
    3fa4:	00016417 	andeq	r6, r1, r7, lsl r4
    3fa8:	6f910200 	svcvs	0x00910200
    3fac:	1c5c3100 	ldfnee	f3, [ip], {-0}
    3fb0:	22300000 	eorscs	r0, r0, #0
    3fb4:	000c0100 	andeq	r0, ip, r0, lsl #2
    3fb8:	5d020000 	stcpl	0, cr0, [r2, #-0]
    3fbc:	69320502 	ldmdbvs	r2!, {r1, r8, sl}
    3fc0:	0200001c 	andeq	r0, r0, #28
    3fc4:	00006891 	muleq	r0, r1, r8
    3fc8:	0170040d 	cmneq	r0, sp, lsl #8
    3fcc:	7f300000 	svcvc	0x00300000
    3fd0:	0200001e 	andeq	r0, r0, #30
    3fd4:	ac110225 	lfmge	f0, 4, [r1], {37}	; 0x25
    3fd8:	bc000000 	stclt	0, cr0, [r0], {-0}
    3fdc:	b4010020 	strlt	r0, [r1], #-32	; 0xffffffe0
    3fe0:	01000000 	mrseq	r0, (UNDEF: 0)
    3fe4:	00175a9c 	mulseq	r7, ip, sl
    3fe8:	1ee22500 	cdpne	5, 14, cr2, cr2, cr0, {0}
    3fec:	25020000 	strcs	r0, [r2, #-0]
    3ff0:	17612e02 	strbne	r2, [r1, -r2, lsl #28]!
    3ff4:	91020000 	mrsls	r0, (UNDEF: 2)
    3ff8:	25dc256f 	ldrbcs	r2, [ip, #1391]	; 0x56f
    3ffc:	26020000 	strcs	r0, [r2], -r0
    4000:	17612e02 	strbne	r2, [r1, -r2, lsl #28]!
    4004:	91020000 	mrsls	r0, (UNDEF: 2)
    4008:	2448256e 	strbcs	r2, [r8], #-1390	; 0xfffffa92
    400c:	27020000 	strcs	r0, [r2, -r0]
    4010:	008d3202 	addeq	r3, sp, r2, lsl #4
    4014:	91020000 	mrsls	r0, (UNDEF: 2)
    4018:	23c22668 	biccs	r2, r2, #104, 12	; 0x6800000
    401c:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    4020:	00810e02 	addeq	r0, r1, r2, lsl #28
    4024:	91020000 	mrsls	r0, (UNDEF: 2)
    4028:	1c243174 	stfnes	f3, [r4], #-464	; 0xfffffe30
    402c:	21500000 	cmpcs	r0, r0
    4030:	000c0100 	andeq	r0, ip, r0, lsl #2
    4034:	3c020000 	stccc	0, cr0, [r2], {-0}
    4038:	31320502 	teqcc	r2, r2, lsl #10
    403c:	0200001c 	andeq	r0, r0, #28
    4040:	00007091 	muleq	r0, r1, r0
    4044:	0e020105 	adfeqs	f0, f2, f5
    4048:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    404c:	0000175a 	andeq	r1, r0, sl, asr r7
    4050:	00236030 	eoreq	r6, r3, r0, lsr r0
    4054:	02120200 	andseq	r0, r2, #0, 4
    4058:	0000ac11 	andeq	sl, r0, r1, lsl ip
    405c:	00000000 	andeq	r0, r0, r0
    4060:	00007c00 	andeq	r7, r0, r0, lsl #24
    4064:	da9c0100 	ble	fe70446c <__shm_end__+0xbe70446c>
    4068:	25000017 	strcs	r0, [r0, #-23]	; 0xffffffe9
    406c:	00001103 	andeq	r1, r0, r3, lsl #2
    4070:	2f021202 	svccs	0x00021202
    4074:	00000d4d 	andeq	r0, r0, sp, asr #26
    4078:	26649102 	strbtcs	r9, [r4], -r2, lsl #2
    407c:	000022c8 	andeq	r2, r0, r8, asr #5
    4080:	0e021402 	cdpeq	4, 0, cr1, cr2, cr2, {0}
    4084:	00000081 	andeq	r0, r0, r1, lsl #1
    4088:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
    408c:	00001bcc 	andeq	r1, r0, ip, asr #23
    4090:	00000000 	andeq	r0, r0, r0
    4094:	0000000c 	andeq	r0, r0, ip
    4098:	0d021c02 	stceq	12, cr1, [r2, #-8]
    409c:	000017bf 			; <UNDEFINED> instruction: 0x000017bf
    40a0:	001bde34 	andseq	sp, fp, r4, lsr lr
    40a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    40a8:	1bb03100 	blne	fec104b0 <__shm_end__+0xbec104b0>
    40ac:	00000000 	andeq	r0, r0, r0
    40b0:	000c0000 	andeq	r0, ip, r0
    40b4:	20020000 	andcs	r0, r2, r0
    40b8:	be320502 	cdplt	5, 3, cr0, cr2, cr2, {0}
    40bc:	0200001b 	andeq	r0, r0, #27
    40c0:	00007091 	muleq	r0, r1, r0
    40c4:	001c8f30 	andseq	r8, ip, r0, lsr pc
    40c8:	020b0200 	andeq	r0, fp, #0, 4
    40cc:	0002e508 	andeq	lr, r2, r8, lsl #10
    40d0:	00000000 	andeq	r0, r0, r0
    40d4:	00003800 	andeq	r3, r0, r0, lsl #16
    40d8:	209c0100 	addscs	r0, ip, r0, lsl #2
    40dc:	26000018 			; <UNDEFINED> instruction: 0x26000018
    40e0:	000022c8 	andeq	r2, r0, r8, asr #5
    40e4:	0e020d02 	cdpeq	13, 0, cr0, cr2, cr2, {0}
    40e8:	00000081 	andeq	r0, r0, r1, lsl #1
    40ec:	31749102 	cmncc	r4, r2, lsl #2
    40f0:	00001bcc 	andeq	r1, r0, ip, asr #23
    40f4:	00000000 	andeq	r0, r0, r0
    40f8:	0000000c 	andeq	r0, r0, ip
    40fc:	16020d02 	strne	r0, [r2], -r2, lsl #26
    4100:	001bde34 	andseq	sp, fp, r4, lsr lr
    4104:	70910200 	addsvc	r0, r1, r0, lsl #4
    4108:	8d300000 	ldchi	0, cr0, [r0, #-0]
    410c:	0200001d 	andeq	r0, r0, #29
    4110:	ac1101f3 	ldfges	f0, [r1], {243}	; 0xf3
    4114:	dc000000 	stcle	0, cr0, [r0], {-0}
    4118:	e001001f 	and	r0, r1, pc, lsl r0
    411c:	01000000 	mrseq	r0, (UNDEF: 0)
    4120:	0018b49c 	mulseq	r8, ip, r4
    4124:	11032500 	tstne	r3, r0, lsl #10
    4128:	f3020000 	vhadd.u8	d0, d2, d0
    412c:	0d4d2f01 	stcleq	15, cr2, [sp, #-4]
    4130:	91020000 	mrsls	r0, (UNDEF: 2)
    4134:	23c2265c 	biccs	r2, r2, #92, 12	; 0x5c00000
    4138:	f5020000 			; <UNDEFINED> instruction: 0xf5020000
    413c:	00810e01 	addeq	r0, r1, r1, lsl #28
    4140:	91020000 	mrsls	r0, (UNDEF: 2)
    4144:	24652674 	strbtcs	r2, [r5], #-1652	; 0xfffff98c
    4148:	f6020000 			; <UNDEFINED> instruction: 0xf6020000
    414c:	00810e01 	addeq	r0, r1, r1, lsl #28
    4150:	91020000 	mrsls	r0, (UNDEF: 2)
    4154:	22c22670 	sbccs	r2, r2, #112, 12	; 0x7000000
    4158:	f7020000 			; <UNDEFINED> instruction: 0xf7020000
    415c:	00810e01 	addeq	r0, r1, r1, lsl #28
    4160:	91020000 	mrsls	r0, (UNDEF: 2)
    4164:	1c3e336c 	ldcne	3, cr3, [lr], #-432	; 0xfffffe50
    4168:	1fec0000 	svcne	0x00ec0000
    416c:	000c0100 	andeq	r0, ip, r0, lsl #2
    4170:	f5020000 			; <UNDEFINED> instruction: 0xf5020000
    4174:	18991601 	ldmne	r9, {r0, r9, sl, ip}
    4178:	4f340000 	svcmi	0x00340000
    417c:	0200001c 	andeq	r0, r0, #28
    4180:	31006891 			; <UNDEFINED> instruction: 0x31006891
    4184:	00001bec 	andeq	r1, r0, ip, ror #23
    4188:	0100209c 	swpeq	r2, ip, [r0]
    418c:	0000000c 	andeq	r0, r0, ip
    4190:	05020602 	streq	r0, [r2, #-1538]	; 0xfffff9fe
    4194:	001bf932 	andseq	pc, fp, r2, lsr r9	; <UNPREDICTABLE>
    4198:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    419c:	c1300000 	teqgt	r0, r0
    41a0:	0200001f 	andeq	r0, r0, #31
    41a4:	e50801ea 	str	r0, [r8, #-490]	; 0xfffffe16
    41a8:	00000002 	andeq	r0, r0, r2
    41ac:	74000000 	strvc	r0, [r0], #-0
    41b0:	01000000 	mrseq	r0, (UNDEF: 0)
    41b4:	0019389c 	mulseq	r9, ip, r8
    41b8:	23c22600 	biccs	r2, r2, #0, 12
    41bc:	ec020000 	stc	0, cr0, [r2], {-0}
    41c0:	00810e01 	addeq	r0, r1, r1, lsl #28
    41c4:	91020000 	mrsls	r0, (UNDEF: 2)
    41c8:	24652674 	strbtcs	r2, [r5], #-1652	; 0xfffff98c
    41cc:	ed020000 	stc	0, cr0, [r2, #-0]
    41d0:	00810e01 	addeq	r0, r1, r1, lsl #28
    41d4:	91020000 	mrsls	r0, (UNDEF: 2)
    41d8:	22c22670 	sbccs	r2, r2, #112, 12	; 0x7000000
    41dc:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
    41e0:	00810e01 	addeq	r0, r1, r1, lsl #28
    41e4:	91020000 	mrsls	r0, (UNDEF: 2)
    41e8:	1c3e336c 	ldcne	3, cr3, [lr], #-432	; 0xfffffe50
    41ec:	00000000 	andeq	r0, r0, r0
    41f0:	000c0000 	andeq	r0, ip, r0
    41f4:	ec020000 	stc	0, cr0, [r2], {-0}
    41f8:	191d1601 	ldmdbne	sp, {r0, r9, sl, ip}
    41fc:	4f340000 	svcmi	0x00340000
    4200:	0200001c 	andeq	r0, r0, #28
    4204:	31006491 			; <UNDEFINED> instruction: 0x31006491
    4208:	00001c06 	andeq	r1, r0, r6, lsl #24
    420c:	00000000 	andeq	r0, r0, r0
    4210:	0000000c 	andeq	r0, r0, ip
    4214:	1601ee02 	strne	lr, [r1], -r2, lsl #28
    4218:	001c1734 	andseq	r1, ip, r4, lsr r7
    421c:	68910200 	ldmvs	r1, {r9}
    4220:	90240000 	eorls	r0, r4, r0
    4224:	02000021 	andeq	r0, r0, #33	; 0x21
    4228:	ac1101de 	ldfges	f0, [r1], {222}	; 0xde
    422c:	8c000000 	stchi	0, cr0, [r0], {-0}
    4230:	5001001f 	andpl	r0, r1, pc, lsl r0
    4234:	01000000 	mrseq	r0, (UNDEF: 0)
    4238:	00199c9c 	mulseq	r9, ip, ip
    423c:	2cfb2600 	ldclcs	6, cr2, [fp]
    4240:	e0020000 	and	r0, r2, r0
    4244:	00810e01 	addeq	r0, r1, r1, lsl #28
    4248:	91020000 	mrsls	r0, (UNDEF: 2)
    424c:	1caa3374 	stcne	3, cr3, [sl], #464	; 0x1d0
    4250:	1f9c0000 	svcne	0x009c0000
    4254:	000c0100 	andeq	r0, ip, r0, lsl #2
    4258:	e3020000 	movw	r0, #8192	; 0x2000
    425c:	19810d01 	stmibne	r1, {r0, r8, sl, fp}
    4260:	bb340000 	bllt	d04268 <__core1_vectors-0x2fbd98>
    4264:	0200001c 	andeq	r0, r0, #28
    4268:	31006c91 			; <UNDEFINED> instruction: 0x31006c91
    426c:	00001c90 	muleq	r0, r0, ip
    4270:	01001fc0 	smlabteq	r0, r0, pc, r1	; <UNPREDICTABLE>
    4274:	0000000c 	andeq	r0, r0, ip
    4278:	0501e502 	streq	lr, [r1, #-1282]	; 0xfffffafe
    427c:	001c9d32 	andseq	r9, ip, r2, lsr sp
    4280:	70910200 	addsvc	r0, r1, r0, lsl #4
    4284:	ce240000 	cdpgt	0, 2, cr0, cr4, cr0, {0}
    4288:	02000022 	andeq	r0, r0, #34	; 0x22
    428c:	ac1101d1 	ldfges	f0, [r1], {209}	; 0xd1
    4290:	00000000 	andeq	r0, r0, r0
    4294:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4298:	01000000 	mrseq	r0, (UNDEF: 0)
    429c:	001a009c 	mulseq	sl, ip, r0
    42a0:	2cfb2600 	ldclcs	6, cr2, [fp]
    42a4:	d3020000 	movwle	r0, #8192	; 0x2000
    42a8:	00810e01 	addeq	r0, r1, r1, lsl #28
    42ac:	91020000 	mrsls	r0, (UNDEF: 2)
    42b0:	1caa3374 	stcne	3, cr3, [sl], #464	; 0x1d0
    42b4:	00000000 	andeq	r0, r0, r0
    42b8:	000c0000 	andeq	r0, ip, r0
    42bc:	d3020000 	movwle	r0, #8192	; 0x2000
    42c0:	19e51601 	stmibne	r5!, {r0, r9, sl, ip}^
    42c4:	bb340000 	bllt	d042cc <__core1_vectors-0x2fbd34>
    42c8:	0200001c 	andeq	r0, r0, #28
    42cc:	31007091 	swpcc	r7, r1, [r0]
    42d0:	00001c90 	muleq	r0, r0, ip
    42d4:	00000000 	andeq	r0, r0, r0
    42d8:	0000000c 	andeq	r0, r0, ip
    42dc:	0501d902 	streq	sp, [r1, #-2306]	; 0xfffff6fe
    42e0:	001c9d32 	andseq	r9, ip, r2, lsr sp
    42e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    42e8:	20300000 	eorscs	r0, r0, r0
    42ec:	02000021 	andeq	r0, r0, #33	; 0x21
    42f0:	ac110190 	ldfges	f0, [r1], {144}	; 0x90
    42f4:	00000000 	andeq	r0, r0, r0
    42f8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    42fc:	01000001 	tsteq	r0, r1
    4300:	001aa39c 	mulseq	sl, ip, r3
    4304:	246d2500 	strbtcs	r2, [sp], #-1280	; 0xfffffb00
    4308:	90020000 	andls	r0, r2, r0
    430c:	0e673701 	cdpeq	7, 6, cr3, cr7, cr1, {0}
    4310:	91020000 	mrsls	r0, (UNDEF: 2)
    4314:	6176285c 	cmnvs	r6, ip, asr r8
    4318:	01910200 	orrseq	r0, r1, r0, lsl #4
    431c:	000d4d33 	andeq	r4, sp, r3, lsr sp
    4320:	58910200 	ldmpl	r1, {r9}
    4324:	002c9425 	eoreq	r9, ip, r5, lsr #8
    4328:	01920200 	orrseq	r0, r2, r0, lsl #4
    432c:	00008d36 	andeq	r8, r0, r6, lsr sp
    4330:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    4334:	00221426 	eoreq	r1, r2, r6, lsr #8
    4338:	01940200 	orrseq	r0, r4, r0, lsl #4
    433c:	00175a0a 	andseq	r5, r7, sl, lsl #20
    4340:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4344:	001c6226 	andseq	r6, ip, r6, lsr #4
    4348:	01950200 	orrseq	r0, r5, r0, lsl #4
    434c:	0000810e 	andeq	r8, r0, lr, lsl #2
    4350:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4354:	00247226 	eoreq	r7, r4, r6, lsr #4
    4358:	01960200 	orrseq	r0, r6, r0, lsl #4
    435c:	000cec0f 	andeq	lr, ip, pc, lsl #24
    4360:	68910200 	ldmvs	r1, {r9}
    4364:	00230326 	eoreq	r0, r3, r6, lsr #6
    4368:	01970200 	orrseq	r0, r7, r0, lsl #4
    436c:	0000810e 	andeq	r8, r0, lr, lsl #2
    4370:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4374:	0000002c 	andeq	r0, r0, ip, lsr #32
    4378:	00004400 	andeq	r4, r0, r0, lsl #8
    437c:	00692a00 	rsbeq	r2, r9, r0, lsl #20
    4380:	0d01c602 	stceq	6, cr12, [r1, #-8]
    4384:	00000025 	andeq	r0, r0, r5, lsr #32
    4388:	00709102 	rsbseq	r9, r0, r2, lsl #2
    438c:	1f063000 	svcne	0x00063000
    4390:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    4394:	00ac1101 	adceq	r1, ip, r1, lsl #2
    4398:	00000000 	andeq	r0, r0, r0
    439c:	01500000 	cmpeq	r0, r0
    43a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    43a4:	00001b1c 	andeq	r1, r0, ip, lsl fp
    43a8:	00246d25 	eoreq	r6, r4, r5, lsr #26
    43ac:	01490200 	mrseq	r0, (UNDEF: 105)
    43b0:	000cec31 	andeq	lr, ip, r1, lsr ip
    43b4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    43b8:	00617628 	rsbeq	r7, r1, r8, lsr #12
    43bc:	33014a02 	movwcc	r4, #6658	; 0x1a02
    43c0:	00000d4d 	andeq	r0, r0, sp, asr #26
    43c4:	25609102 	strbcs	r9, [r0, #-258]!	; 0xfffffefe
    43c8:	00002c94 	muleq	r0, r4, ip
    43cc:	36014b02 	strcc	r4, [r1], -r2, lsl #22
    43d0:	0000008d 	andeq	r0, r0, sp, lsl #1
    43d4:	2a5c9102 	bcs	17287e4 <__end__+0x70c7c4>
    43d8:	4d020069 	stcmi	0, cr0, [r2, #-420]	; 0xfffffe5c
    43dc:	00250901 	eoreq	r0, r5, r1, lsl #18
    43e0:	91020000 	mrsls	r0, (UNDEF: 2)
    43e4:	23032674 	movwcs	r2, #13940	; 0x3674
    43e8:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    43ec:	00810e01 	addeq	r0, r1, r1, lsl #28
    43f0:	91020000 	mrsls	r0, (UNDEF: 2)
    43f4:	20e4266c 	rsccs	r2, r4, ip, ror #12
    43f8:	4f020000 	svcmi	0x00020000
    43fc:	175a0a01 	ldrbne	r0, [sl, -r1, lsl #20]
    4400:	91020000 	mrsls	r0, (UNDEF: 2)
    4404:	e7240073 			; <UNDEFINED> instruction: 0xe7240073
    4408:	0200001f 	andeq	r0, r0, #31
    440c:	ac110134 	ldfges	f0, [r1], {52}	; 0x34
    4410:	00000000 	andeq	r0, r0, r0
    4414:	8c01001f 	stchi	0, cr0, [r1], {31}
    4418:	01000000 	mrseq	r0, (UNDEF: 0)
    441c:	001b829c 	mulseq	fp, ip, r2
    4420:	246d2500 	strbtcs	r2, [sp], #-1280	; 0xfffffb00
    4424:	34020000 	strcc	r0, [r2], #-0
    4428:	0cec2d01 	stcleq	13, cr2, [ip], #4
    442c:	91020000 	mrsls	r0, (UNDEF: 2)
    4430:	23c22664 	biccs	r2, r2, #100, 12	; 0x6400000
    4434:	36020000 	strcc	r0, [r2], -r0
    4438:	00810e01 	addeq	r0, r1, r1, lsl #28
    443c:	91020000 	mrsls	r0, (UNDEF: 2)
    4440:	24652674 	strbtcs	r2, [r5], #-1652	; 0xfffff98c
    4444:	37020000 	strcc	r0, [r2, -r0]
    4448:	00810e01 	addeq	r0, r1, r1, lsl #28
    444c:	91020000 	mrsls	r0, (UNDEF: 2)
    4450:	1c3e3170 	ldfnes	f3, [lr], #-448	; 0xfffffe40
    4454:	1f100000 	svcne	0x00100000
    4458:	000c0100 	andeq	r0, ip, r0, lsl #2
    445c:	36020000 	strcc	r0, [r2], -r0
    4460:	4f341601 	svcmi	0x00341601
    4464:	0200001c 	andeq	r0, r0, #28
    4468:	00006c91 	muleq	r0, r1, ip
    446c:	00208a35 	eoreq	r8, r0, r5, lsr sl
    4470:	012f0200 			; <UNDEFINED> instruction: 0x012f0200
    4474:	0000ac11 	andeq	sl, r0, r1, lsl ip
    4478:	00000000 	andeq	r0, r0, r0
    447c:	00001c00 	andeq	r1, r0, r0, lsl #24
    4480:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    4484:	000021bd 			; <UNDEFINED> instruction: 0x000021bd
    4488:	11012a02 	tstne	r1, r2, lsl #20
    448c:	000000ac 	andeq	r0, r0, ip, lsr #1
    4490:	01001ee4 	smlatteq	r0, r4, lr, r1
    4494:	0000001c 	andeq	r0, r0, ip, lsl r0
    4498:	7b369c01 	blvc	dab4a4 <__core1_vectors-0x254b5c>
    449c:	02000023 	andeq	r0, r0, #35	; 0x23
    44a0:	0335011c 	teqeq	r5, #28, 2
    44a4:	00001bcc 	andeq	r1, r0, ip, asr #23
    44a8:	0022c837 	eoreq	ip, r2, r7, lsr r8
    44ac:	011c0200 	tsteq	ip, r0, lsl #4
    44b0:	0000814f 	andeq	r8, r0, pc, asr #2
    44b4:	67380000 	ldrvs	r0, [r8, -r0]!
    44b8:	02000022 	andeq	r0, r0, #34	; 0x22
    44bc:	8139010a 	teqhi	r9, sl, lsl #2
    44c0:	03000000 	movweq	r0, #0
    44c4:	00001bec 	andeq	r1, r0, ip, ror #23
    44c8:	0022c839 	eoreq	ip, r2, r9, lsr r8
    44cc:	010f0200 	mrseq	r0, (UNDEF: 47)
    44d0:	0000810e 	andeq	r8, r0, lr, lsl #2
    44d4:	453a0000 	ldrmi	r0, [sl, #-0]!
    44d8:	02000022 	andeq	r0, r0, #34	; 0x22
    44dc:	060335fc 			; <UNDEFINED> instruction: 0x060335fc
    44e0:	3b00001c 	blcc	4558 <__core1_vectors-0xffbaa8>
    44e4:	000022c2 	andeq	r2, r0, r2, asr #5
    44e8:	814ffc02 	cmphi	pc, r2, lsl #24	; <UNPREDICTABLE>
    44ec:	00000000 	andeq	r0, r0, r0
    44f0:	001d743c 	andseq	r7, sp, ip, lsr r4
    44f4:	39ea0200 	stmibcc	sl!, {r9}^
    44f8:	00000081 	andeq	r0, r0, r1, lsl #1
    44fc:	001c2403 	andseq	r2, ip, r3, lsl #8
    4500:	22c23d00 	sbccs	r3, r2, #0, 26
    4504:	ef020000 	svc	0x00020000
    4508:	0000810e 	andeq	r8, r0, lr, lsl #2
    450c:	cf3a0000 	svcgt	0x003a0000
    4510:	0200001d 	andeq	r0, r0, #29
    4514:	3e0335dc 	mcrcc	5, 0, r3, cr3, cr12, {6}
    4518:	3b00001c 	blcc	4590 <__core1_vectors-0xffba70>
    451c:	000023c2 	andeq	r2, r0, r2, asr #7
    4520:	814fdc02 	cmphi	pc, r2, lsl #24
    4524:	00000000 	andeq	r0, r0, r0
    4528:	001dea3c 	andseq	lr, sp, ip, lsr sl
    452c:	39ca0200 	stmibcc	sl, {r9}^
    4530:	00000081 	andeq	r0, r0, r1, lsl #1
    4534:	001c5c03 	andseq	r5, ip, r3, lsl #24
    4538:	23c23d00 	biccs	r3, r2, #0, 26
    453c:	cf020000 	svcgt	0x00020000
    4540:	0000810e 	andeq	r8, r0, lr, lsl #2
    4544:	8f3a0000 	svchi	0x003a0000
    4548:	0200001f 	andeq	r0, r0, #31
    454c:	760335bc 			; <UNDEFINED> instruction: 0x760335bc
    4550:	3b00001c 	blcc	45c8 <__core1_vectors-0xffba38>
    4554:	00001f23 	andeq	r1, r0, r3, lsr #30
    4558:	814ebc02 	cmphi	lr, r2, lsl #24
    455c:	00000000 	andeq	r0, r0, r0
    4560:	0021363a 	eoreq	r3, r1, sl, lsr r6
    4564:	359a0200 	ldrcc	r0, [sl, #512]	; 0x200
    4568:	001c9003 	andseq	r9, ip, r3
    456c:	22b73b00 	adcscs	r3, r7, #0, 22
    4570:	9a020000 	bls	84578 <__core1_vectors-0xf7ba88>
    4574:	00008154 	andeq	r8, r0, r4, asr r1
    4578:	6c3a0000 	ldcvs	0, cr0, [sl], #-0
    457c:	0200001c 	andeq	r0, r0, #28
    4580:	aa033578 	bge	d1b68 <__core1_vectors-0xf2e498>
    4584:	3b00001c 	blcc	45fc <__core1_vectors-0xffba04>
    4588:	00002cfb 	strdeq	r2, [r0], -fp
    458c:	814f7802 	cmphi	pc, r2, lsl #16
    4590:	00000000 	andeq	r0, r0, r0
    4594:	001e233c 	andseq	r2, lr, ip, lsr r3
    4598:	39660200 	stmdbcc	r6!, {r9}^
    459c:	00000081 	andeq	r0, r0, r1, lsl #1
    45a0:	001cc803 	andseq	ip, ip, r3, lsl #16
    45a4:	2cfb3d00 	ldclcs	13, cr3, [fp]
    45a8:	6b020000 	blvs	845b0 <__core1_vectors-0xf7ba50>
    45ac:	0000810e 	andeq	r8, r0, lr, lsl #2
    45b0:	f13e0000 			; <UNDEFINED> instruction: 0xf13e0000
    45b4:	01000020 	tsteq	r0, r0, lsr #32
    45b8:	00251539 	eoreq	r1, r5, r9, lsr r5
    45bc:	1ec00000 	cdpne	0, 12, cr0, cr0, cr0, {0}
    45c0:	00240100 	eoreq	r0, r4, r0, lsl #2
    45c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    45c8:	001f1c3f 	andseq	r1, pc, pc, lsr ip	; <UNPREDICTABLE>
    45cc:	45390100 	ldrmi	r0, [r9, #-256]!	; 0xffffff00
    45d0:	00000366 	andeq	r0, r0, r6, ror #6
    45d4:	40709102 	rsbsmi	r9, r0, r2, lsl #2
    45d8:	10a00000 	adcne	r0, r0, r0
    45dc:	00040000 	andeq	r0, r4, r0
    45e0:	000008fa 	strdeq	r0, [r0], -sl
    45e4:	003a0104 	eorseq	r0, sl, r4, lsl #2
    45e8:	590c0000 	stmdbpl	ip, {}	; <UNPREDICTABLE>
    45ec:	d0000026 	andle	r0, r0, r6, lsr #32
    45f0:	6000000b 	andvs	r0, r0, fp
    45f4:	00000004 	andeq	r0, r0, r4
    45f8:	54000000 	strpl	r0, [r0], #-0
    45fc:	02000022 	andeq	r0, r0, #34	; 0x22
    4600:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4604:	87030074 	smlsdxhi	r3, r4, r0, r0
    4608:	02000030 	andeq	r0, r0, #48	; 0x30
    460c:	003817d1 	ldrsbteq	r1, [r8], -r1
    4610:	04040000 	streq	r0, [r4], #-0
    4614:	000b4507 	andeq	r4, fp, r7, lsl #10
    4618:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    461c:	00000805 	andeq	r0, r0, r5, lsl #16
    4620:	9d040804 	stcls	8, cr0, [r4, #-16]
    4624:	0400000a 	streq	r0, [r0], #-10
    4628:	04020601 	streq	r0, [r2], #-1537	; 0xfffff9ff
    462c:	02040000 	andeq	r0, r4, #0
    4630:	000d6105 	andeq	r6, sp, r5, lsl #2
    4634:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4638:	0000080a 	andeq	r0, r0, sl, lsl #16
    463c:	000d8b03 	andeq	r8, sp, r3, lsl #22
    4640:	182b0300 	stmdane	fp!, {r8, r9}
    4644:	0000003f 	andeq	r0, r0, pc, lsr r0
    4648:	00080104 	andeq	r0, r8, r4, lsl #2
    464c:	04000004 	streq	r0, [r0], #-4
    4650:	0e9e0702 	cdpeq	7, 9, cr0, cr14, cr2, {0}
    4654:	04040000 	streq	r0, [r4], #-0
    4658:	000b4007 	andeq	r4, fp, r7
    465c:	0d8a0300 	stceq	3, cr0, [sl]
    4660:	37030000 	strcc	r0, [r3, -r0]
    4664:	00008f19 	andeq	r8, r0, r9, lsl pc
    4668:	07080400 	streq	r0, [r8, -r0, lsl #8]
    466c:	00000b3b 	andeq	r0, r0, fp, lsr fp
    4670:	00269103 	eoreq	r9, r6, r3, lsl #2
    4674:	1b280400 	blne	a0567c <__core1_vectors-0x5fa984>
    4678:	000000a2 	andeq	r0, r0, r2, lsr #1
    467c:	00261d05 	eoreq	r1, r6, r5, lsl #26
    4680:	000a0400 	andeq	r0, sl, r0, lsl #8
    4684:	000000b9 	strheq	r0, [r0], -r9
    4688:	00271406 	eoreq	r1, r7, r6, lsl #8
    468c:	0000b900 	andeq	fp, r0, r0, lsl #18
    4690:	07000000 	streq	r0, [r0, -r0]
    4694:	261f0304 	ldrcs	r0, [pc], -r4, lsl #6
    4698:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    469c:	00009618 	andeq	r9, r0, r8, lsl r6
    46a0:	0c880800 	stceq	8, cr0, [r8], {0}
    46a4:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    46a8:	00381701 	eorseq	r1, r8, r1, lsl #14
    46ac:	e2030000 	and	r0, r3, #0
    46b0:	06000030 			; <UNDEFINED> instruction: 0x06000030
    46b4:	005b0e2e 	subseq	r0, fp, lr, lsr #28
    46b8:	dd030000 	stcle	0, cr0, [r3, #-0]
    46bc:	0600000a 	streq	r0, [r0], -sl
    46c0:	005b0e74 	subseq	r0, fp, r4, ror lr
    46c4:	04090000 	streq	r0, [r9], #-0
    46c8:	0e03a506 	cfsh32eq	mvfx10, mvfx3, #6
    46cc:	0a000001 	beq	46d8 <__core1_vectors-0xffb928>
    46d0:	0000023a 	andeq	r0, r0, sl, lsr r2
    46d4:	c70ca706 	strgt	sl, [ip, -r6, lsl #14]
    46d8:	0a000000 	beq	46e0 <__core1_vectors-0xffb920>
    46dc:	00000ae5 	andeq	r0, r0, r5, ror #21
    46e0:	0e13a806 	cdpeq	8, 1, cr10, cr3, cr6, {0}
    46e4:	00000001 	andeq	r0, r0, r1
    46e8:	00006e0b 	andeq	r6, r0, fp, lsl #28
    46ec:	00011e00 	andeq	r1, r1, r0, lsl #28
    46f0:	00380c00 	eorseq	r0, r8, r0, lsl #24
    46f4:	00030000 	andeq	r0, r3, r0
    46f8:	a206080d 	andge	r0, r6, #851968	; 0xd0000
    46fc:	00014209 	andeq	r4, r1, r9, lsl #4
    4700:	0a690e00 	beq	1a47f08 <__end__+0xa2bee8>
    4704:	a4060000 	strge	r0, [r6], #-0
    4708:	00002507 	andeq	r2, r0, r7, lsl #10
    470c:	0b0e0000 	bleq	384714 <__core1_vectors-0xc7b8ec>
    4710:	06000000 	streq	r0, [r0], -r0
    4714:	00ec05a9 	rsceq	r0, ip, r9, lsr #11
    4718:	00040000 	andeq	r0, r4, r0
    471c:	000c2003 	andeq	r2, ip, r3
    4720:	03aa0600 			; <UNDEFINED> instruction: 0x03aa0600
    4724:	0000011e 	andeq	r0, r0, lr, lsl r1
    4728:	000e4903 	andeq	r4, lr, r3, lsl #18
    472c:	19160700 	ldmdbne	r6, {r8, r9, sl}
    4730:	0000007c 	andeq	r0, r0, ip, ror r0
    4734:	0006b303 	andeq	fp, r6, r3, lsl #6
    4738:	0d0c0800 	stceq	8, cr0, [ip, #-0]
    473c:	00000025 	andeq	r0, r0, r5, lsr #32
    4740:	000bc703 	andeq	ip, fp, r3, lsl #14
    4744:	1b230700 	blne	8c634c <__core1_vectors-0x739cb4>
    4748:	0000015a 	andeq	r0, r0, sl, asr r1
    474c:	0007080f 	andeq	r0, r7, pc, lsl #16
    4750:	34071800 	strcc	r1, [r7], #-2048	; 0xfffff800
    4754:	0001cc08 	andeq	ip, r1, r8, lsl #24
    4758:	0a340e00 	beq	d07f60 <__core1_vectors-0x2f80a0>
    475c:	36070000 	strcc	r0, [r7], -r0
    4760:	0001cc13 	andeq	ip, r1, r3, lsl ip
    4764:	5f100000 	svcpl	0x00100000
    4768:	3707006b 	strcc	r0, [r7, -fp, rrx]
    476c:	00002507 	andeq	r2, r0, r7, lsl #10
    4770:	610e0400 	tstvs	lr, r0, lsl #8
    4774:	07000007 	streq	r0, [r0, -r7]
    4778:	00250b37 	eoreq	r0, r5, r7, lsr fp
    477c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    4780:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    4784:	25143707 	ldrcs	r3, [r4, #-1799]	; 0xfffff8f9
    4788:	0c000000 	stceq	0, cr0, [r0], {-0}
    478c:	0006010e 	andeq	r0, r6, lr, lsl #2
    4790:	1b370700 	blne	dc6398 <__core1_vectors-0x239c68>
    4794:	00000025 	andeq	r0, r0, r5, lsr #32
    4798:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    479c:	0b380700 	bleq	e063a4 <__core1_vectors-0x1f9c5c>
    47a0:	000001d2 	ldrdeq	r0, [r0], -r2
    47a4:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
    47a8:	00000172 	andeq	r0, r0, r2, ror r1
    47ac:	00014e0b 	andeq	r4, r1, fp, lsl #28
    47b0:	0001e200 	andeq	lr, r1, r0, lsl #4
    47b4:	00380c00 	eorseq	r0, r8, r0, lsl #24
    47b8:	00000000 	andeq	r0, r0, r0
    47bc:	0001400f 	andeq	r4, r1, pc
    47c0:	3c072400 	cfstrscc	mvf2, [r7], {-0}
    47c4:	00026508 	andeq	r6, r2, r8, lsl #10
    47c8:	015c0e00 	cmpeq	ip, r0, lsl #28
    47cc:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    47d0:	00002509 	andeq	r2, r0, r9, lsl #10
    47d4:	8f0e0000 	svchi	0x000e0000
    47d8:	0700000f 	streq	r0, [r0, -pc]
    47dc:	0025093f 	eoreq	r0, r5, pc, lsr r9
    47e0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    47e4:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    47e8:	25094007 	strcs	r4, [r9, #-7]
    47ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    47f0:	0009fb0e 	andeq	pc, r9, lr, lsl #22
    47f4:	09410700 	stmdbeq	r1, {r8, r9, sl}^
    47f8:	00000025 	andeq	r0, r0, r5, lsr #32
    47fc:	038c0e0c 	orreq	r0, ip, #12, 28	; 0xc0
    4800:	42070000 	andmi	r0, r7, #0
    4804:	00002509 	andeq	r2, r0, r9, lsl #10
    4808:	e40e1000 	str	r1, [lr], #-0
    480c:	0700000d 	streq	r0, [r0, -sp]
    4810:	00250943 	eoreq	r0, r5, r3, asr #18
    4814:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    4818:	00000a7b 	andeq	r0, r0, fp, ror sl
    481c:	25094407 	strcs	r4, [r9, #-1031]	; 0xfffffbf9
    4820:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4824:	000aa90e 	andeq	sl, sl, lr, lsl #18
    4828:	09450700 	stmdbeq	r5, {r8, r9, sl}^
    482c:	00000025 	andeq	r0, r0, r5, lsr #32
    4830:	0f550e1c 	svceq	0x00550e1c
    4834:	46070000 	strmi	r0, [r7], -r0
    4838:	00002509 	andeq	r2, r0, r9, lsl #10
    483c:	12002000 	andne	r2, r0, #0
    4840:	00000263 	andeq	r0, r0, r3, ror #4
    4844:	4f070108 	svcmi	0x00070108
    4848:	0002aa08 	andeq	sl, r2, r8, lsl #20
    484c:	0f410e00 	svceq	0x00410e00
    4850:	50070000 	andpl	r0, r7, r0
    4854:	0002aa0a 	andeq	sl, r2, sl, lsl #20
    4858:	660e0000 	strvs	r0, [lr], -r0
    485c:	0700000b 	streq	r0, [r0, -fp]
    4860:	02aa0951 	adceq	r0, sl, #1327104	; 0x144000
    4864:	13800000 	orrne	r0, r0, #0
    4868:	00000dd4 	ldrdeq	r0, [r0], -r4
    486c:	4e0a5307 	cdpmi	3, 0, cr5, cr10, cr7, {0}
    4870:	00000001 	andeq	r0, r0, r1
    4874:	0e101301 	cdpeq	3, 1, cr1, cr0, cr1, {0}
    4878:	56070000 	strpl	r0, [r7], -r0
    487c:	00014e0a 	andeq	r4, r1, sl, lsl #28
    4880:	00010400 	andeq	r0, r1, r0, lsl #8
    4884:	0000b90b 	andeq	fp, r0, fp, lsl #18
    4888:	0002ba00 	andeq	fp, r2, r0, lsl #20
    488c:	00380c00 	eorseq	r0, r8, r0, lsl #24
    4890:	001f0000 	andseq	r0, pc, r0
    4894:	000a5412 	andeq	r5, sl, r2, lsl r4
    4898:	07019000 	streq	r9, [r1, -r0]
    489c:	02fd0862 	rscseq	r0, sp, #6422528	; 0x620000
    48a0:	340e0000 	strcc	r0, [lr], #-0
    48a4:	0700000a 	streq	r0, [r0, -sl]
    48a8:	02fd1263 	rscseq	r1, sp, #805306374	; 0x30000006
    48ac:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    48b0:	00000e04 	andeq	r0, r0, r4, lsl #28
    48b4:	25066407 	strcs	r6, [r6, #-1031]	; 0xfffffbf9
    48b8:	04000000 	streq	r0, [r0], #-0
    48bc:	0004930e 	andeq	r9, r4, lr, lsl #6
    48c0:	09660700 	stmdbeq	r6!, {r8, r9, sl}^
    48c4:	00000303 	andeq	r0, r0, r3, lsl #6
    48c8:	02630e08 	rsbeq	r0, r3, #8, 28	; 0x80
    48cc:	67070000 	strvs	r0, [r7, -r0]
    48d0:	0002651e 	andeq	r6, r2, lr, lsl r5
    48d4:	11008800 	tstne	r0, r0, lsl #16
    48d8:	0002ba04 	andeq	fp, r2, r4, lsl #20
    48dc:	03130b00 	tsteq	r3, #0, 22
    48e0:	03130000 	tsteq	r3, #0
    48e4:	380c0000 	stmdacc	ip, {}	; <UNPREDICTABLE>
    48e8:	1f000000 	svcne	0x00000000
    48ec:	19041100 	stmdbne	r4, {r8, ip}
    48f0:	14000003 	strne	r0, [r0], #-3
    48f4:	000e090f 	andeq	r0, lr, pc, lsl #18
    48f8:	7a070800 	bvc	1c6900 <__core1_vectors-0xe39700>
    48fc:	00034208 	andeq	r4, r3, r8, lsl #4
    4900:	0ba50e00 	bleq	fe948108 <__shm_end__+0xbe948108>
    4904:	7b070000 	blvc	1c490c <__core1_vectors-0xe3b6f4>
    4908:	00034211 	andeq	r4, r3, r1, lsl r2
    490c:	db0e0000 	blle	384914 <__core1_vectors-0xc7b6ec>
    4910:	07000030 	smladxeq	r0, r0, r0, r0
    4914:	0025067c 	eoreq	r0, r5, ip, ror r6
    4918:	00040000 	andeq	r0, r4, r0
    491c:	006e0411 	rsbeq	r0, lr, r1, lsl r4
    4920:	810f0000 	mrshi	r0, CPSR
    4924:	68000006 	stmdavs	r0, {r1, r2}
    4928:	8b08ba07 	blhi	23314c <__core1_vectors-0xdcceb4>
    492c:	10000004 	andne	r0, r0, r4
    4930:	0700705f 	smlsdeq	r0, pc, r0, r7	; <UNPREDICTABLE>
    4934:	034212bb 	movteq	r1, #8891	; 0x22bb
    4938:	10000000 	andne	r0, r0, r0
    493c:	0700725f 	smlsdeq	r0, pc, r2, r7	; <UNPREDICTABLE>
    4940:	002507bc 	strhteq	r0, [r5], -ip
    4944:	10040000 	andne	r0, r4, r0
    4948:	0700775f 	smlsdeq	r0, pc, r7, r7	; <UNPREDICTABLE>
    494c:	002507bd 	strhteq	r0, [r5], -sp
    4950:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    4954:	00000a3a 	andeq	r0, r0, sl, lsr sl
    4958:	5409be07 	strpl	fp, [r9], #-3591	; 0xfffff1f9
    495c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4960:	00025d0e 	andeq	r5, r2, lr, lsl #26
    4964:	09bf0700 	ldmibeq	pc!, {r8, r9, sl}	; <UNPREDICTABLE>
    4968:	00000054 	andeq	r0, r0, r4, asr r0
    496c:	625f100e 	subsvs	r1, pc, #14
    4970:	c0070066 	andgt	r0, r7, r6, rrx
    4974:	00031a11 	andeq	r1, r3, r1, lsl sl
    4978:	f60e1000 			; <UNDEFINED> instruction: 0xf60e1000
    497c:	0700000d 	streq	r0, [r0, -sp]
    4980:	002507c1 	eoreq	r0, r5, r1, asr #15
    4984:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    4988:	000005e4 	andeq	r0, r0, r4, ror #11
    498c:	b90ac807 	stmdblt	sl, {r0, r1, r2, fp, lr, pc}
    4990:	1c000000 	stcne	0, cr0, [r0], {-0}
    4994:	001c390e 	andseq	r3, ip, lr, lsl #18
    4998:	1dca0700 	stclne	7, cr0, [sl]
    499c:	0000060f 	andeq	r0, r0, pc, lsl #12
    49a0:	117d0e20 	cmnne	sp, r0, lsr #28
    49a4:	cc070000 	stcgt	0, cr0, [r7], {-0}
    49a8:	0006391d 	andeq	r3, r6, sp, lsl r9
    49ac:	c60e2400 	strgt	r2, [lr], -r0, lsl #8
    49b0:	0700000a 	streq	r0, [r0, -sl]
    49b4:	065d0dcf 	ldrbeq	r0, [sp], -pc, asr #27
    49b8:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    49bc:	00002b4a 	andeq	r2, r0, sl, asr #22
    49c0:	7709d007 	strvc	sp, [r9, -r7]
    49c4:	2c000006 	stccs	0, cr0, [r0], {6}
    49c8:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
    49cc:	11d30700 	bicsne	r0, r3, r0, lsl #14
    49d0:	0000031a 	andeq	r0, r0, sl, lsl r3
    49d4:	755f1030 	ldrbvc	r1, [pc, #-48]	; 49ac <__core1_vectors-0xffb654>
    49d8:	d4070070 	strle	r0, [r7], #-112	; 0xffffff90
    49dc:	00034212 	andeq	r4, r3, r2, lsl r2
    49e0:	5f103800 	svcpl	0x00103800
    49e4:	07007275 	smlsdxeq	r0, r5, r2, r7
    49e8:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
    49ec:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
    49f0:	00000a0a 	andeq	r0, r0, sl, lsl #20
    49f4:	7d11d807 	ldcvc	8, cr13, [r1, #-28]	; 0xffffffe4
    49f8:	40000006 	andmi	r0, r0, r6
    49fc:	0001560e 	andeq	r5, r1, lr, lsl #12
    4a00:	11d90700 	bicsne	r0, r9, r0, lsl #14
    4a04:	0000068d 	andeq	r0, r0, sp, lsl #13
    4a08:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
    4a0c:	dc070062 	stcle	0, cr0, [r7], {98}	; 0x62
    4a10:	00031a11 	andeq	r1, r3, r1, lsl sl
    4a14:	e30e4400 	movw	r4, #58368	; 0xe400
    4a18:	0700002e 	streq	r0, [r0, -lr, lsr #32]
    4a1c:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
    4a20:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    4a24:	00000627 	andeq	r0, r0, r7, lsr #12
    4a28:	d40ae007 	strle	lr, [sl], #-7
    4a2c:	50000000 	andpl	r0, r0, r0
    4a30:	002b3e0e 	eoreq	r3, fp, lr, lsl #28
    4a34:	12e30700 	rscne	r0, r3, #0, 14
    4a38:	000004a9 	andeq	r0, r0, r9, lsr #9
    4a3c:	01ab0e54 			; <UNDEFINED> instruction: 0x01ab0e54
    4a40:	e7070000 	str	r0, [r7, -r0]
    4a44:	0001660c 	andeq	r6, r1, ip, lsl #12
    4a48:	260e5800 	strcs	r5, [lr], -r0, lsl #16
    4a4c:	0700000a 	streq	r0, [r0, -sl]
    4a50:	01420ee9 	smlaltteq	r0, r2, r9, lr
    4a54:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    4a58:	00000694 	muleq	r0, r4, r6
    4a5c:	2509ea07 	strcs	lr, [r9, #-2567]	; 0xfffff5f9
    4a60:	64000000 	strvs	r0, [r0], #-0
    4a64:	00251500 	eoreq	r1, r5, r0, lsl #10
    4a68:	04a90000 	strteq	r0, [r9], #0
    4a6c:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
    4a70:	16000004 	strne	r0, [r0], -r4
    4a74:	000000b9 	strheq	r0, [r0], -r9
    4a78:	0005fd16 	andeq	pc, r5, r6, lsl sp	; <UNPREDICTABLE>
    4a7c:	00251600 	eoreq	r1, r5, r0, lsl #12
    4a80:	11000000 	mrsne	r0, (UNDEF: 0)
    4a84:	0004b404 	andeq	fp, r4, r4, lsl #8
    4a88:	04a91700 	strteq	r1, [r9], #1792	; 0x700
    4a8c:	46180000 	ldrmi	r0, [r8], -r0
    4a90:	28000004 	stmdacs	r0, {r2}
    4a94:	02650704 	rsbeq	r0, r5, #4, 14	; 0x100000
    4a98:	0005fd08 	andeq	pc, r5, r8, lsl #26
    4a9c:	09921900 	ldmibeq	r2, {r8, fp, ip}
    4aa0:	67070000 	strvs	r0, [r7, -r0]
    4aa4:	00250702 	eoreq	r0, r5, r2, lsl #14
    4aa8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4aac:	00000522 	andeq	r0, r0, r2, lsr #10
    4ab0:	0b026c07 	bleq	9fad4 <__core1_vectors-0xf6052c>
    4ab4:	000006e9 	andeq	r0, r0, r9, ror #13
    4ab8:	0b871904 	bleq	fe1caed0 <__shm_end__+0xbe1caed0>
    4abc:	6c070000 	stcvs	0, cr0, [r7], {-0}
    4ac0:	06e91402 	strbteq	r1, [r9], r2, lsl #8
    4ac4:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    4ac8:	00000a10 	andeq	r0, r0, r0, lsl sl
    4acc:	1e026c07 	cdpne	12, 0, cr6, cr2, cr7, {0}
    4ad0:	000006e9 	andeq	r0, r0, r9, ror #13
    4ad4:	0dff190c 			; <UNDEFINED> instruction: 0x0dff190c
    4ad8:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    4adc:	00250802 	eoreq	r0, r5, r2, lsl #16
    4ae0:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
    4ae4:	000007fa 	strdeq	r0, [r0], -sl
    4ae8:	08026f07 	stmdaeq	r2, {r0, r1, r2, r8, r9, sl, fp, sp, lr}
    4aec:	000008e9 	andeq	r0, r0, r9, ror #17
    4af0:	042d1914 	strteq	r1, [sp], #-2324	; 0xfffff6ec
    4af4:	72070000 	andvc	r0, r7, #0
    4af8:	00250702 	eoreq	r0, r5, r2, lsl #14
    4afc:	19300000 	ldmdbne	r0!, {}	; <UNPREDICTABLE>
    4b00:	00000e41 	andeq	r0, r0, r1, asr #28
    4b04:	16027307 	strne	r7, [r2], -r7, lsl #6
    4b08:	000008fe 	strdeq	r0, [r0], -lr
    4b0c:	06891934 			; <UNDEFINED> instruction: 0x06891934
    4b10:	75070000 	strvc	r0, [r7, #-0]
    4b14:	00250702 	eoreq	r0, r5, r2, lsl #14
    4b18:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
    4b1c:	0000077d 	andeq	r0, r0, sp, ror r7
    4b20:	0a027707 	beq	a2744 <__core1_vectors-0xf5d8bc>
    4b24:	0000090f 	andeq	r0, r0, pc, lsl #18
    4b28:	0e51193c 			; <UNDEFINED> instruction: 0x0e51193c
    4b2c:	7a070000 	bvc	1c4b34 <__core1_vectors-0xe3b4cc>
    4b30:	01cc1302 	biceq	r1, ip, r2, lsl #6
    4b34:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    4b38:	000002f1 	strdeq	r0, [r0], -r1
    4b3c:	07027b07 	streq	r7, [r2, -r7, lsl #22]
    4b40:	00000025 	andeq	r0, r0, r5, lsr #32
    4b44:	066f1944 	strbteq	r1, [pc], -r4, asr #18
    4b48:	7c070000 	stcvc	0, cr0, [r7], {-0}
    4b4c:	01cc1302 	biceq	r1, ip, r2, lsl #6
    4b50:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
    4b54:	000008a9 	andeq	r0, r0, r9, lsr #17
    4b58:	14027d07 	strne	r7, [r2], #-3335	; 0xfffff2f9
    4b5c:	00000915 	andeq	r0, r0, r5, lsl r9
    4b60:	0110194c 	tsteq	r0, ip, asr #18
    4b64:	80070000 	andhi	r0, r7, r0
    4b68:	00250702 	eoreq	r0, r5, r2, lsl #14
    4b6c:	19500000 	ldmdbne	r0, {}^	; <UNPREDICTABLE>
    4b70:	0000062f 	andeq	r0, r0, pc, lsr #12
    4b74:	09028107 	stmdbeq	r2, {r0, r1, r2, r8, pc}
    4b78:	000005fd 	strdeq	r0, [r0], -sp
    4b7c:	0a051954 	beq	14b0d4 <__core1_vectors-0xeb4f2c>
    4b80:	a4070000 	strge	r0, [r7], #-0
    4b84:	08c40702 	stmiaeq	r4, {r1, r8, r9, sl}^
    4b88:	1a580000 	bne	1604b90 <__end__+0x5e8b70>
    4b8c:	00000a54 	andeq	r0, r0, r4, asr sl
    4b90:	1302a807 	movwne	sl, #10247	; 0x2807
    4b94:	000002fd 	strdeq	r0, [r0], -sp
    4b98:	871a0148 	ldrhi	r0, [sl, -r8, asr #2]
    4b9c:	07000007 	streq	r0, [r0, -r7]
    4ba0:	ba1202a9 	blt	48564c <__core1_vectors-0xb7a9b4>
    4ba4:	4c000002 	stcmi	0, cr0, [r0], {2}
    4ba8:	061d1a01 	ldreq	r1, [sp], -r1, lsl #20
    4bac:	ad070000 	stcge	0, cr0, [r7, #-0]
    4bb0:	09260c02 	stmdbeq	r6!, {r1, sl, fp}
    4bb4:	02dc0000 	sbcseq	r0, ip, #0
    4bb8:	0008341a 	andeq	r3, r8, sl, lsl r4
    4bbc:	02b20700 	adcseq	r0, r2, #0, 14
    4bc0:	0006aa10 	andeq	sl, r6, r0, lsl sl
    4bc4:	1a02e000 	bne	bcbcc <__core1_vectors-0xf43434>
    4bc8:	00000013 	andeq	r0, r0, r3, lsl r0
    4bcc:	0a02b407 	beq	b1bf0 <__core1_vectors-0xf4e410>
    4bd0:	00000932 	andeq	r0, r0, r2, lsr r9
    4bd4:	110002ec 	smlattne	r0, ip, r2, r0
    4bd8:	00060304 	andeq	r0, r6, r4, lsl #6
    4bdc:	08010400 	stmdaeq	r1, {sl}
    4be0:	00000409 	andeq	r0, r0, r9, lsl #8
    4be4:	00060317 	andeq	r0, r6, r7, lsl r3
    4be8:	8b041100 	blhi	108ff0 <__core1_vectors-0xef7010>
    4bec:	15000004 	strne	r0, [r0, #-4]
    4bf0:	00000025 	andeq	r0, r0, r5, lsr #32
    4bf4:	00000633 	andeq	r0, r0, r3, lsr r6
    4bf8:	0004a916 	andeq	sl, r4, r6, lsl r9
    4bfc:	00b91600 	adcseq	r1, r9, r0, lsl #12
    4c00:	33160000 	tstcc	r6, #0
    4c04:	16000006 	strne	r0, [r0], -r6
    4c08:	00000025 	andeq	r0, r0, r5, lsr #32
    4c0c:	0a041100 	beq	109014 <__core1_vectors-0xef6fec>
    4c10:	11000006 	tstne	r0, r6
    4c14:	00061504 	andeq	r1, r6, r4, lsl #10
    4c18:	00e01500 	rsceq	r1, r0, r0, lsl #10
    4c1c:	065d0000 	ldrbeq	r0, [sp], -r0
    4c20:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
    4c24:	16000004 	strne	r0, [r0], -r4
    4c28:	000000b9 	strheq	r0, [r0], -r9
    4c2c:	0000e016 	andeq	lr, r0, r6, lsl r0
    4c30:	00251600 	eoreq	r1, r5, r0, lsl #12
    4c34:	11000000 	mrsne	r0, (UNDEF: 0)
    4c38:	00063f04 	andeq	r3, r6, r4, lsl #30
    4c3c:	00251500 	eoreq	r1, r5, r0, lsl #10
    4c40:	06770000 	ldrbteq	r0, [r7], -r0
    4c44:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
    4c48:	16000004 	strne	r0, [r0], -r4
    4c4c:	000000b9 	strheq	r0, [r0], -r9
    4c50:	63041100 	movwvs	r1, #16640	; 0x4100
    4c54:	0b000006 	bleq	4c74 <__core1_vectors-0xffb38c>
    4c58:	0000006e 	andeq	r0, r0, lr, rrx
    4c5c:	0000068d 	andeq	r0, r0, sp, lsl #13
    4c60:	0000380c 	andeq	r3, r0, ip, lsl #16
    4c64:	0b000200 	bleq	546c <__core1_vectors-0xffab94>
    4c68:	0000006e 	andeq	r0, r0, lr, rrx
    4c6c:	0000069d 	muleq	r0, sp, r6
    4c70:	0000380c 	andeq	r3, r0, ip, lsl #16
    4c74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4c78:	00000c12 	andeq	r0, r0, r2, lsl ip
    4c7c:	1a012407 	bne	4dca0 <__core1_vectors-0xfb2360>
    4c80:	00000348 	andeq	r0, r0, r8, asr #6
    4c84:	0008b91b 	andeq	fp, r8, fp, lsl r9
    4c88:	28070c00 	stmdacs	r7, {sl, fp}
    4c8c:	06e30801 	strbteq	r0, [r3], r1, lsl #16
    4c90:	34190000 	ldrcc	r0, [r9], #-0
    4c94:	0700000a 	streq	r0, [r0, -sl]
    4c98:	e311012a 	tst	r1, #-2147483638	; 0x8000000a
    4c9c:	00000006 	andeq	r0, r0, r6
    4ca0:	00082d19 	andeq	r2, r8, r9, lsl sp
    4ca4:	012b0700 			; <UNDEFINED> instruction: 0x012b0700
    4ca8:	00002507 	andeq	r2, r0, r7, lsl #10
    4cac:	b3190400 	tstlt	r9, #0, 8
    4cb0:	07000008 	streq	r0, [r0, -r8]
    4cb4:	e90b012c 	stmdb	fp, {r2, r3, r5, r8}
    4cb8:	08000006 	stmdaeq	r0, {r1, r2}
    4cbc:	aa041100 	bge	1090c4 <__core1_vectors-0xef6f3c>
    4cc0:	11000006 	tstne	r0, r6
    4cc4:	00069d04 	andeq	r9, r6, r4, lsl #26
    4cc8:	0b7f1b00 	bleq	1fcb8d0 <__end__+0xfaf8b0>
    4ccc:	070e0000 	streq	r0, [lr, -r0]
    4cd0:	28080144 	stmdacs	r8, {r2, r6, r8}
    4cd4:	19000007 	stmdbne	r0, {r0, r1, r2}
    4cd8:	00000ac0 	andeq	r0, r0, r0, asr #21
    4cdc:	12014507 	andne	r4, r1, #29360128	; 0x1c00000
    4ce0:	00000728 	andeq	r0, r0, r8, lsr #14
    4ce4:	01bf1900 			; <UNDEFINED> instruction: 0x01bf1900
    4ce8:	46070000 	strmi	r0, [r7], -r0
    4cec:	07281201 	streq	r1, [r8, -r1, lsl #4]!
    4cf0:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
    4cf4:	00000e8c 	andeq	r0, r0, ip, lsl #29
    4cf8:	12014707 	andne	r4, r1, #1835008	; 0x1c0000
    4cfc:	00000075 	andeq	r0, r0, r5, ror r0
    4d00:	750b000c 	strvc	r0, [fp, #-12]
    4d04:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4d08:	0c000007 	stceq	0, cr0, [r0], {7}
    4d0c:	00000038 	andeq	r0, r0, r8, lsr r0
    4d10:	d01c0002 	andsle	r0, ip, r2
    4d14:	07028507 	streq	r8, [r2, -r7, lsl #10]
    4d18:	0000084d 	andeq	r0, r0, sp, asr #16
    4d1c:	0003ce19 	andeq	ip, r3, r9, lsl lr
    4d20:	02870700 	addeq	r0, r7, #0, 14
    4d24:	00003818 	andeq	r3, r0, r8, lsl r8
    4d28:	ab190000 	blge	644d30 <__core1_vectors-0x9bb2d0>
    4d2c:	0700000b 	streq	r0, [r0, -fp]
    4d30:	fd120288 	ldc2	2, cr0, [r2, #-544]	; 0xfffffde0
    4d34:	04000005 	streq	r0, [r0], #-5
    4d38:	00002d19 	andeq	r2, r0, r9, lsl sp
    4d3c:	02890700 	addeq	r0, r9, #0, 14
    4d40:	00084d10 	andeq	r4, r8, r0, lsl sp
    4d44:	10190800 	andsne	r0, r9, r0, lsl #16
    4d48:	07000003 	streq	r0, [r0, -r3]
    4d4c:	e217028a 	ands	r0, r7, #-1610612728	; 0xa0000008
    4d50:	24000001 	strcs	r0, [r0], #-1
    4d54:	00088319 	andeq	r8, r8, r9, lsl r3
    4d58:	028b0700 	addeq	r0, fp, #0, 14
    4d5c:	0000250f 	andeq	r2, r0, pc, lsl #10
    4d60:	2f194800 	svccs	0x00194800
    4d64:	0700000a 	streq	r0, [r0, -sl]
    4d68:	8f2c028c 	svchi	0x002c028c
    4d6c:	50000000 	andpl	r0, r0, r0
    4d70:	000c7619 	andeq	r7, ip, r9, lsl r6
    4d74:	028d0700 	addeq	r0, sp, #0, 14
    4d78:	0006ef1a 	andeq	lr, r6, sl, lsl pc
    4d7c:	54195800 	ldrpl	r5, [r9], #-2048	; 0xfffff800
    4d80:	0700000d 	streq	r0, [r0, -sp]
    4d84:	4216028e 	andsmi	r0, r6, #-536870904	; 0xe0000008
    4d88:	68000001 	stmdavs	r0, {r0}
    4d8c:	000afa19 	andeq	pc, sl, r9, lsl sl	; <UNPREDICTABLE>
    4d90:	028f0700 	addeq	r0, pc, #0, 14
    4d94:	00014216 	andeq	r4, r1, r6, lsl r2
    4d98:	18197000 	ldmdane	r9, {ip, sp, lr}
    4d9c:	0700000a 	streq	r0, [r0, -sl]
    4da0:	42160290 	andsmi	r0, r6, #144, 4
    4da4:	78000001 	stmdavc	r0, {r0}
    4da8:	00016519 	andeq	r6, r1, r9, lsl r5
    4dac:	02910700 	addseq	r0, r1, #0, 14
    4db0:	00085d10 	andeq	r5, r8, r0, lsl sp
    4db4:	e3198000 	tst	r9, #0
    4db8:	07000006 	streq	r0, [r0, -r6]
    4dbc:	6d100292 	lfmvs	f0, 4, [r0, #-584]	; 0xfffffdb8
    4dc0:	88000008 	stmdahi	r0, {r3}
    4dc4:	000f9819 	andeq	r9, pc, r9, lsl r8	; <UNPREDICTABLE>
    4dc8:	02930700 	addseq	r0, r3, #0, 14
    4dcc:	0000250f 	andeq	r2, r0, pc, lsl #10
    4dd0:	e319a000 	tst	r9, #0
    4dd4:	07000002 	streq	r0, [r0, -r2]
    4dd8:	42160294 	andsmi	r0, r6, #148, 4	; 0x40000009
    4ddc:	a4000001 	strge	r0, [r0], #-1
    4de0:	000bb819 	andeq	fp, fp, r9, lsl r8
    4de4:	02950700 	addseq	r0, r5, #0, 14
    4de8:	00014216 	andeq	r4, r1, r6, lsl r2
    4dec:	0119ac00 	tsteq	r9, r0, lsl #24
    4df0:	0700000f 	streq	r0, [r0, -pc]
    4df4:	42160296 	andsmi	r0, r6, #1610612745	; 0x60000009
    4df8:	b4000001 	strlt	r0, [r0], #-1
    4dfc:	0009ec19 	andeq	lr, r9, r9, lsl ip
    4e00:	02970700 	addseq	r0, r7, #0, 14
    4e04:	00014216 	andeq	r4, r1, r6, lsl r2
    4e08:	4519bc00 	ldrmi	fp, [r9, #-3072]	; 0xfffff400
    4e0c:	07000001 	streq	r0, [r0, -r1]
    4e10:	42160298 	andsmi	r0, r6, #152, 4	; 0x80000009
    4e14:	c4000001 	strgt	r0, [r0], #-1
    4e18:	00099019 	andeq	r9, r9, r9, lsl r0
    4e1c:	02990700 	addseq	r0, r9, #0, 14
    4e20:	00002508 	andeq	r2, r0, r8, lsl #10
    4e24:	0b00cc00 	bleq	37e2c <__core1_vectors-0xfc81d4>
    4e28:	00000603 	andeq	r0, r0, r3, lsl #12
    4e2c:	0000085d 	andeq	r0, r0, sp, asr r8
    4e30:	0000380c 	andeq	r3, r0, ip, lsl #16
    4e34:	0b001900 	bleq	b23c <__core1_vectors-0xff4dc4>
    4e38:	00000603 	andeq	r0, r0, r3, lsl #12
    4e3c:	0000086d 	andeq	r0, r0, sp, ror #16
    4e40:	0000380c 	andeq	r3, r0, ip, lsl #16
    4e44:	0b000700 	bleq	6a4c <__core1_vectors-0xff95b4>
    4e48:	00000603 	andeq	r0, r0, r3, lsl #12
    4e4c:	0000087d 	andeq	r0, r0, sp, ror r8
    4e50:	0000380c 	andeq	r3, r0, ip, lsl #16
    4e54:	1c001700 	stcne	7, cr1, [r0], {-0}
    4e58:	029e07f0 	addseq	r0, lr, #240, 14	; 0x3c00000
    4e5c:	0008a407 	andeq	sl, r8, r7, lsl #8
    4e60:	0e181900 	vnmlseq.f16	s2, s16, s0	; <UNPREDICTABLE>
    4e64:	a1070000 	mrsge	r0, (UNDEF: 7)
    4e68:	08a41b02 	stmiaeq	r4!, {r1, r8, r9, fp, ip}
    4e6c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4e70:	00000848 	andeq	r0, r0, r8, asr #16
    4e74:	1802a207 	stmdane	r2, {r0, r1, r2, r9, sp, pc}
    4e78:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    4e7c:	420b0078 	andmi	r0, fp, #120	; 0x78
    4e80:	b4000003 	strlt	r0, [r0], #-3
    4e84:	0c000008 	stceq	0, cr0, [r0], {8}
    4e88:	00000038 	andeq	r0, r0, r8, lsr r0
    4e8c:	380b001d 	stmdacc	fp, {r0, r2, r3, r4}
    4e90:	c4000000 	strgt	r0, [r0], #-0
    4e94:	0c000008 	stceq	0, cr0, [r0], {8}
    4e98:	00000038 	andeq	r0, r0, r8, lsr r0
    4e9c:	f01d001d 			; <UNDEFINED> instruction: 0xf01d001d
    4ea0:	03028307 	movweq	r8, #8967	; 0x2307
    4ea4:	000008e9 	andeq	r0, r0, r9, ror #17
    4ea8:	0004461e 	andeq	r4, r4, lr, lsl r6
    4eac:	029a0700 	addseq	r0, sl, #0, 14
    4eb0:	0007380b 	andeq	r3, r7, fp, lsl #16
    4eb4:	01381e00 	teqeq	r8, r0, lsl #28
    4eb8:	a3070000 	movwge	r0, #28672	; 0x7000
    4ebc:	087d0b02 	ldmdaeq	sp!, {r1, r8, r9, fp}^
    4ec0:	0b000000 	bleq	4ec8 <__core1_vectors-0xffb138>
    4ec4:	00000603 	andeq	r0, r0, r3, lsl #12
    4ec8:	000008f9 	strdeq	r0, [r0], -r9
    4ecc:	0000380c 	andeq	r3, r0, ip, lsl #16
    4ed0:	1f001800 	svcne	0x00001800
    4ed4:	00000000 	andeq	r0, r0, r0
    4ed8:	08f90411 	ldmeq	r9!, {r0, r4, sl}^
    4edc:	0f200000 	svceq	0x00200000
    4ee0:	16000009 	strne	r0, [r0], -r9
    4ee4:	000004a9 	andeq	r0, r0, r9, lsr #9
    4ee8:	04041100 	streq	r1, [r4], #-256	; 0xffffff00
    4eec:	11000009 	tstne	r0, r9
    4ef0:	0001cc04 	andeq	ip, r1, r4, lsl #24
    4ef4:	09262000 	stmdbeq	r6!, {sp}
    4ef8:	25160000 	ldrcs	r0, [r6, #-0]
    4efc:	00000000 	andeq	r0, r0, r0
    4f00:	092c0411 	stmdbeq	ip!, {r0, r4, sl}
    4f04:	04110000 	ldreq	r0, [r1], #-0
    4f08:	0000091b 	andeq	r0, r0, fp, lsl r9
    4f0c:	00069d0b 	andeq	r9, r6, fp, lsl #26
    4f10:	00094200 	andeq	r4, r9, r0, lsl #4
    4f14:	00380c00 	eorseq	r0, r8, r0, lsl #24
    4f18:	00020000 	andeq	r0, r2, r0
    4f1c:	00045421 	andeq	r5, r4, r1, lsr #8
    4f20:	03330700 	teqeq	r3, #0, 14
    4f24:	0004a917 	andeq	sl, r4, r7, lsl r9
    4f28:	044d2100 	strbeq	r2, [sp], #-256	; 0xffffff00
    4f2c:	34070000 	strcc	r0, [r7], #-0
    4f30:	04af1d03 	strteq	r1, [pc], #3331	; 4f38 <__core1_vectors-0xffb0c8>
    4f34:	14030000 	strne	r0, [r3], #-0
    4f38:	0500000c 	streq	r0, [r0, #-12]
    4f3c:	069d1042 	ldreq	r1, [sp], r2, asr #32
    4f40:	ab0f0000 	blge	3c4f48 <__core1_vectors-0xc3b0b8>
    4f44:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
    4f48:	9d102709 	ldcls	7, cr2, [r0, #-36]	; 0xffffffdc
    4f4c:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    4f50:	0000262e 	andeq	r2, r0, lr, lsr #12
    4f54:	b30c2909 	movwlt	r2, #51465	; 0xc909
    4f58:	00000009 	andeq	r0, r0, r9
    4f5c:	0026cf0e 	eoreq	ip, r6, lr, lsl #30
    4f60:	0b2a0900 	bleq	a87368 <__core1_vectors-0x578c98>
    4f64:	000005fd 	strdeq	r0, [r0], -sp
    4f68:	26c80e04 	strbcs	r0, [r8], r4, lsl #28
    4f6c:	2b090000 	blcs	244f74 <__core1_vectors-0xdbb08c>
    4f70:	0005fd0b 	andeq	pc, r5, fp, lsl #26
    4f74:	20000800 	andcs	r0, r0, r0, lsl #16
    4f78:	000009ad 	andeq	r0, r0, sp, lsr #19
    4f7c:	00060316 	andeq	r0, r6, r6, lsl r3
    4f80:	09ad1600 	stmibeq	sp!, {r9, sl, ip}
    4f84:	11000000 	mrsne	r0, (UNDEF: 0)
    4f88:	00095c04 	andeq	r5, r9, r4, lsl #24
    4f8c:	9d041100 	stflss	f1, [r4, #-0]
    4f90:	03000009 	movweq	r0, #9
    4f94:	00002766 	andeq	r2, r0, r6, ror #14
    4f98:	68032c09 	stmdavs	r3, {r0, r3, sl, fp, sp}
    4f9c:	22000009 	andcs	r0, r0, #9
    4fa0:	0000083c 	andeq	r0, r0, ip, lsr r8
    4fa4:	ad0e3609 	stcge	6, cr3, [lr, #-36]	; 0xffffffdc
    4fa8:	22000009 	andcs	r0, r0, #9
    4fac:	00000842 	andeq	r0, r0, r2, asr #16
    4fb0:	ad0e3709 	stcge	7, cr3, [lr, #-36]	; 0xffffffdc
    4fb4:	23000009 	movwcs	r0, #9
    4fb8:	000009c5 	andeq	r0, r0, r5, asr #19
    4fbc:	051d2d01 	ldreq	r2, [sp, #-3329]	; 0xfffff2ff
    4fc0:	00000003 	andeq	r0, r0, r3
    4fc4:	09d12300 	ldmibeq	r1, {r8, r9, sp}^
    4fc8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    4fcc:	a803051d 	stmdage	r3, {r0, r2, r3, r4, r8, sl}
    4fd0:	24010059 	strcs	r0, [r1], #-89	; 0xffffffa7
    4fd4:	0000267b 	andeq	r2, r0, fp, ror r6
    4fd8:	05022901 	streq	r2, [r2, #-2305]	; 0xfffff6ff
    4fdc:	00000025 	andeq	r0, r0, r5, lsr #32
    4fe0:	010046c8 	smlabteq	r0, r8, r6, r4
    4fe4:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    4fe8:	0ad39c01 	beq	ff4ebff4 <__shm_end__+0xbf4ebff4>
    4fec:	fe250000 	cdp2	0, 2, cr0, cr5, cr0, {0}
    4ff0:	01000025 	tsteq	r0, r5, lsr #32
    4ff4:	ad180229 	lfmge	f0, 4, [r8, #-164]	; 0xffffff5c
    4ff8:	02000009 	andeq	r0, r0, #9
    4ffc:	1c255491 	cfstrsne	mvf5, [r5], #-580	; 0xfffffdbc
    5000:	0100001f 	tsteq	r0, pc, lsl r0
    5004:	332c0229 			; <UNDEFINED> instruction: 0x332c0229
    5008:	02000006 	andeq	r0, r0, #6
    500c:	6c255091 	stcvs	0, cr5, [r5], #-580	; 0xfffffdbc
    5010:	01000002 	tsteq	r0, r2
    5014:	bb3c0229 	bllt	f058c0 <__core1_vectors-0xfa740>
    5018:	02000000 	andeq	r0, r0, #0
    501c:	f8264c91 			; <UNDEFINED> instruction: 0xf8264c91
    5020:	01000025 	tsteq	r0, r5, lsr #32
    5024:	d31c022b 	tstle	ip, #-1342177278	; 0xb0000002
    5028:	0200000a 	andeq	r0, r0, #10
    502c:	03266891 			; <UNDEFINED> instruction: 0x03266891
    5030:	01000023 	tsteq	r0, r3, lsr #32
    5034:	2509022c 	strcs	r0, [r9, #-556]	; 0xfffffdd4
    5038:	02000000 	andeq	r0, r0, #0
    503c:	e3266491 			; <UNDEFINED> instruction: 0xe3266491
    5040:	0100001d 	tsteq	r0, sp, lsl r0
    5044:	2511022c 	ldrcs	r0, [r1, #-556]	; 0xfffffdd4
    5048:	02000000 	andeq	r0, r0, #0
    504c:	6b267491 	blvs	9a2298 <__core1_vectors-0x65dd68>
    5050:	0100000a 	tsteq	r0, sl
    5054:	2509022d 	strcs	r0, [r9, #-557]	; 0xfffffdd3
    5058:	02000000 	andeq	r0, r0, #0
    505c:	64276091 	strtvs	r6, [r7], #-145	; 0xffffff6f
    5060:	0100746f 	tsteq	r0, pc, ror #8
    5064:	2511022d 	ldrcs	r0, [r1, #-557]	; 0xfffffdd3
    5068:	02000000 	andeq	r0, r0, #0
    506c:	63277091 			; <UNDEFINED> instruction: 0x63277091
    5070:	022e0100 	eoreq	r0, lr, #0, 2
    5074:	0006030a 	andeq	r0, r6, sl, lsl #6
    5078:	6f910200 	svcvs	0x00910200
    507c:	0026eb26 	eoreq	lr, r6, r6, lsr #22
    5080:	022e0100 	eoreq	r0, lr, #0, 2
    5084:	0006030c 	andeq	r0, r6, ip, lsl #6
    5088:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    508c:	00245226 	eoreq	r5, r4, r6, lsr #4
    5090:	022f0100 	eoreq	r0, pc, #0, 2
    5094:	00002509 	andeq	r2, r0, r9, lsl #10
    5098:	5c910200 	lfmpl	f0, 4, [r1], {0}
    509c:	0026f726 	eoreq	pc, r6, r6, lsr #14
    50a0:	022f0100 	eoreq	r0, pc, #0, 2
    50a4:	0000250f 	andeq	r2, r0, pc, lsl #10
    50a8:	58910200 	ldmpl	r1, {r9}
    50ac:	b9041100 	stmdblt	r4, {r8, ip}
    50b0:	28000009 	stmdacs	r0, {r0, r3}
    50b4:	000026e2 	andeq	r2, r0, r2, ror #13
    50b8:	0c016201 	sfmeq	f6, 4, [r1], {1}
    50bc:	00000025 	andeq	r0, r0, r5, lsr #32
    50c0:	01003eac 	smlatbeq	r0, ip, lr, r3
    50c4:	0000081c 	andeq	r0, r0, ip, lsl r8
    50c8:	0c389c01 	ldceq	12, cr9, [r8], #-4
    50cc:	f8250000 			; <UNDEFINED> instruction: 0xf8250000
    50d0:	01000025 	tsteq	r0, r5, lsr #32
    50d4:	d32c0162 			; <UNDEFINED> instruction: 0xd32c0162
    50d8:	0300000a 	movweq	r0, #10
    50dc:	257fac91 	ldrbcs	sl, [pc, #-3217]!	; 4453 <__core1_vectors-0xffbbad>
    50e0:	0000275c 	andeq	r2, r0, ip, asr r7
    50e4:	37016201 	strcc	r6, [r1, -r1, lsl #4]
    50e8:	00000603 	andeq	r0, r0, r3, lsl #12
    50ec:	7fab9103 	svcvc	0x00ab9103
    50f0:	0026eb25 	eoreq	lr, r6, r5, lsr #22
    50f4:	01620100 	cmneq	r2, r0, lsl #2
    50f8:	00060346 	andeq	r0, r6, r6, asr #6
    50fc:	aa910300 	bge	fe445d04 <__shm_end__+0xbe445d04>
    5100:	2452257f 	ldrbcs	r2, [r2], #-1407	; 0xfffffa81
    5104:	62010000 	andvs	r0, r1, #0
    5108:	00254f01 	eoreq	r4, r5, r1, lsl #30
    510c:	91030000 	mrsls	r0, (UNDEF: 3)
    5110:	e3257fa4 			; <UNDEFINED> instruction: 0xe3257fa4
    5114:	0100001d 	tsteq	r0, sp, lsl r0
    5118:	25590162 	ldrbcs	r0, [r9, #-354]	; 0xfffffe9e
    511c:	02000000 	andeq	r0, r0, #0
    5120:	f7250091 			; <UNDEFINED> instruction: 0xf7250091
    5124:	01000026 	tsteq	r0, r6, lsr #32
    5128:	25640162 	strbcs	r0, [r4, #-354]!	; 0xfffffe9e
    512c:	02000000 	andeq	r0, r0, #0
    5130:	64290491 	strtvs	r0, [r9], #-1169	; 0xfffffb6f
    5134:	0100746f 	tsteq	r0, pc, ror #8
    5138:	25720162 	ldrbcs	r0, [r2, #-354]!	; 0xfffffe9e
    513c:	02000000 	andeq	r0, r0, #0
    5140:	01250891 			; <UNDEFINED> instruction: 0x01250891
    5144:	01000027 	tsteq	r0, r7, lsr #32
    5148:	387c0162 	ldmdacc	ip!, {r1, r5, r6, r8}^
    514c:	0200000c 	andeq	r0, r0, #12
    5150:	6c250c91 	stcvs	12, cr0, [r5], #-580	; 0xfffffdbc
    5154:	01000002 	tsteq	r0, r2
    5158:	3e8e0162 	rmfccez	f0, f6, f2
    515c:	0200000c 	andeq	r0, r0, #12
    5160:	52261091 	eorpl	r1, r6, #145	; 0x91
    5164:	01000027 	tsteq	r0, r7, lsr #32
    5168:	440a0164 	strmi	r0, [sl], #-356	; 0xfffffe9c
    516c:	0300000c 	movweq	r0, #12
    5170:	277fb491 			; <UNDEFINED> instruction: 0x277fb491
    5174:	00646170 	rsbeq	r6, r4, r0, ror r1
    5178:	13016401 	movwne	r6, #5121	; 0x1401
    517c:	00000603 	andeq	r0, r0, r3, lsl #12
    5180:	26779102 	ldrbtcs	r9, [r7], -r2, lsl #2
    5184:	00002614 	andeq	r2, r0, r4, lsl r6
    5188:	1b016401 	blne	5e194 <__core1_vectors-0xfa1e6c>
    518c:	00000603 	andeq	r0, r0, r3, lsl #12
    5190:	26769102 	ldrbtcs	r9, [r6], -r2, lsl #2
    5194:	000025ee 	andeq	r2, r0, lr, ror #11
    5198:	26016401 	strcs	r6, [r1], -r1, lsl #8
    519c:	00000603 	andeq	r0, r0, r3, lsl #12
    51a0:	26759102 	ldrbtcs	r9, [r5], -r2, lsl #2
    51a4:	00000a6b 	andeq	r0, r0, fp, ror #20
    51a8:	09016501 	stmdbeq	r1, {r0, r8, sl, sp, lr}
    51ac:	00000025 	andeq	r0, r0, r5, lsr #32
    51b0:	27709102 	ldrbcs	r9, [r0, -r2, lsl #2]!
    51b4:	65010069 	strvs	r0, [r1, #-105]	; 0xffffff97
    51b8:	00250f01 	eoreq	r0, r5, r1, lsl #30
    51bc:	91020000 	mrsls	r0, (UNDEF: 2)
    51c0:	2719266c 	ldrcs	r2, [r9, -ip, ror #12]
    51c4:	65010000 	strvs	r0, [r1, #-0]
    51c8:	00251101 	eoreq	r1, r5, r1, lsl #2
    51cc:	91020000 	mrsls	r0, (UNDEF: 2)
    51d0:	27362668 	ldrcs	r2, [r6, -r8, ror #12]!
    51d4:	65010000 	strvs	r0, [r1, #-0]
    51d8:	00251901 	eoreq	r1, r5, r1, lsl #18
    51dc:	91020000 	mrsls	r0, (UNDEF: 2)
    51e0:	616d2764 	cmnvs	sp, r4, ror #14
    51e4:	66010078 			; <UNDEFINED> instruction: 0x66010078
    51e8:	00250901 	eoreq	r0, r5, r1, lsl #18
    51ec:	91020000 	mrsls	r0, (UNDEF: 2)
    51f0:	61762760 	cmnvs	r6, r0, ror #14
    51f4:	6701006c 	strvs	r0, [r1, -ip, rrx]
    51f8:	00620d01 	rsbeq	r0, r2, r1, lsl #26
    51fc:	91020000 	mrsls	r0, (UNDEF: 2)
    5200:	26272658 			; <UNDEFINED> instruction: 0x26272658
    5204:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    5208:	05fd0c01 	ldrbeq	r0, [sp, #3073]!	; 0xc01
    520c:	91020000 	mrsls	r0, (UNDEF: 2)
    5210:	04110054 	ldreq	r0, [r1], #-84	; 0xffffffac
    5214:	00000025 	andeq	r0, r0, r5, lsr #32
    5218:	00bb0411 	adcseq	r0, fp, r1, lsl r4
    521c:	030b0000 	movweq	r0, #45056	; 0xb000
    5220:	54000006 	strpl	r0, [r0], #-6
    5224:	0c00000c 	stceq	0, cr0, [r0], {12}
    5228:	00000038 	andeq	r0, r0, r8, lsr r0
    522c:	3c2a001f 	stccc	0, cr0, [sl], #-124	; 0xffffff84
    5230:	01000026 	tsteq	r0, r6, lsr #32
    5234:	250c0137 	strcs	r0, [ip, #-311]	; 0xfffffec9
    5238:	34000000 	strcc	r0, [r0], #-0
    523c:	7801003d 	stmdavc	r1, {r0, r2, r3, r4, r5}
    5240:	01000001 	tsteq	r0, r1
    5244:	000d009c 	muleq	sp, ip, r0
    5248:	61762900 	cmnvs	r6, r0, lsl #18
    524c:	3701006c 	strcc	r0, [r1, -ip, rrx]
    5250:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    5254:	91020000 	mrsls	r0, (UNDEF: 2)
    5258:	74732958 	ldrbtvc	r2, [r3], #-2392	; 0xfffff6a8
    525c:	37010067 	strcc	r0, [r1, -r7, rrx]
    5260:	05fd2a01 	ldrbeq	r2, [sp, #2561]!	; 0xa01
    5264:	91020000 	mrsls	r0, (UNDEF: 2)
    5268:	275c2554 			; <UNDEFINED> instruction: 0x275c2554
    526c:	37010000 	strcc	r0, [r1, -r0]
    5270:	06033301 	streq	r3, [r3], -r1, lsl #6
    5274:	91020000 	mrsls	r0, (UNDEF: 2)
    5278:	273c2553 			; <UNDEFINED> instruction: 0x273c2553
    527c:	37010000 	strcc	r0, [r1, -r0]
    5280:	00254101 	eoreq	r4, r5, r1, lsl #2
    5284:	91020000 	mrsls	r0, (UNDEF: 2)
    5288:	0a6b2600 	beq	1acea90 <__end__+0xab2a70>
    528c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    5290:	00250901 	eoreq	r0, r5, r1, lsl #18
    5294:	91020000 	mrsls	r0, (UNDEF: 2)
    5298:	272a2674 			; <UNDEFINED> instruction: 0x272a2674
    529c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    52a0:	00251101 	eoreq	r1, r5, r1, lsl #2
    52a4:	91020000 	mrsls	r0, (UNDEF: 2)
    52a8:	271f2670 			; <UNDEFINED> instruction: 0x271f2670
    52ac:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    52b0:	00251a01 	eoreq	r1, r5, r1, lsl #20
    52b4:	91020000 	mrsls	r0, (UNDEF: 2)
    52b8:	26c1266c 	strbcs	r2, [r1], ip, ror #12
    52bc:	3a010000 	bcc	452c4 <__core1_vectors-0xfbad3c>
    52c0:	00250901 	eoreq	r0, r5, r1, lsl #18
    52c4:	91020000 	mrsls	r0, (UNDEF: 2)
    52c8:	27092668 	strcs	r2, [r9, -r8, ror #12]
    52cc:	3a010000 	bcc	452d4 <__core1_vectors-0xfbad2c>
    52d0:	00251201 	eoreq	r1, r5, r1, lsl #4
    52d4:	91020000 	mrsls	r0, (UNDEF: 2)
    52d8:	a0280064 	eorge	r0, r8, r4, rrx
    52dc:	01000026 	tsteq	r0, r6, lsr #32
    52e0:	250c0115 	strcs	r0, [ip, #-277]	; 0xfffffeeb
    52e4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    52e8:	3c01003b 	stccc	0, cr0, [r1], {59}	; 0x3b
    52ec:	01000001 	tsteq	r0, r1
    52f0:	000d6a9c 	muleq	sp, ip, sl
    52f4:	61762900 	cmnvs	r6, r0, lsl #18
    52f8:	1501006c 	strne	r0, [r1, #-108]	; 0xffffff94
    52fc:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    5300:	91020000 	mrsls	r0, (UNDEF: 2)
    5304:	74732968 	ldrbtvc	r2, [r3], #-2408	; 0xfffff698
    5308:	15010067 	strne	r0, [r1, #-103]	; 0xffffff99
    530c:	05fd2a01 	ldrbeq	r2, [sp, #2561]!	; 0xa01
    5310:	91020000 	mrsls	r0, (UNDEF: 2)
    5314:	27362564 	ldrcs	r2, [r6, -r4, ror #10]!
    5318:	15010000 	strne	r0, [r1, #-0]
    531c:	00253201 	eoreq	r3, r5, r1, lsl #4
    5320:	91020000 	mrsls	r0, (UNDEF: 2)
    5324:	0a6b2660 	beq	1acecac <__end__+0xab2c8c>
    5328:	17010000 	strne	r0, [r1, -r0]
    532c:	00250901 	eoreq	r0, r5, r1, lsl #18
    5330:	91020000 	mrsls	r0, (UNDEF: 2)
    5334:	00692774 	rsbeq	r2, r9, r4, ror r7
    5338:	12011701 	andne	r1, r1, #262144	; 0x40000
    533c:	00000025 	andeq	r0, r0, r5, lsr #32
    5340:	00709102 	rsbseq	r9, r0, r2, lsl #2
    5344:	0026522b 	eoreq	r5, r6, fp, lsr #4
    5348:	0dbe0100 	ldfeqs	f0, [lr]
    534c:	00000603 	andeq	r0, r0, r3, lsl #12
    5350:	01003b60 	tsteq	r0, r0, ror #22
    5354:	00000098 	muleq	r0, r8, r0
    5358:	0dbf9c01 	ldceq	12, cr9, [pc, #4]!	; 5364 <__core1_vectors-0xffac9c>
    535c:	1c2c0000 	stcne	0, cr0, [ip], #-0
    5360:	0100001f 	tsteq	r0, pc, lsl r0
    5364:	063320be 			; <UNDEFINED> instruction: 0x063320be
    5368:	91020000 	mrsls	r0, (UNDEF: 2)
    536c:	23032c74 	movwcs	r2, #15476	; 0x3c74
    5370:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    5374:	000c382d 	andeq	r3, ip, sp, lsr #16
    5378:	70910200 	addsvc	r0, r1, r0, lsl #4
    537c:	6c61762d 	stclvs	6, cr7, [r1], #-180	; 0xffffff4c
    5380:	3abe0100 	bcc	fef85788 <__shm_end__+0xbef85788>
    5384:	00000c38 	andeq	r0, r0, r8, lsr ip
    5388:	2d6c9102 	stfcsp	f1, [ip, #-8]!
    538c:	be010063 	cdplt	0, 0, cr0, cr1, cr3, {3}
    5390:	00060344 	andeq	r0, r6, r4, asr #6
    5394:	6b910200 	blvs	fe445b9c <__shm_end__+0xbe445b9c>
    5398:	26882e00 	strcs	r2, [r8], r0, lsl #28
    539c:	ad010000 	stcge	0, cr0, [r1, #-0]
    53a0:	0006030d 	andeq	r0, r6, sp, lsl #6
    53a4:	003b0800 	eorseq	r0, fp, r0, lsl #16
    53a8:	00005801 	andeq	r5, r0, r1, lsl #16
    53ac:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    53b0:	2c00000e 	stccs	0, cr0, [r0], {14}
    53b4:	00001f1c 	andeq	r1, r0, ip, lsl pc
    53b8:	3322ad01 			; <UNDEFINED> instruction: 0x3322ad01
    53bc:	02000006 	andeq	r0, r0, #6
    53c0:	032c6c91 			; <UNDEFINED> instruction: 0x032c6c91
    53c4:	01000023 	tsteq	r0, r3, lsr #32
    53c8:	0c382fad 	ldceq	15, cr2, [r8], #-692	; 0xfffffd4c
    53cc:	91020000 	mrsls	r0, (UNDEF: 2)
    53d0:	00632f68 	rsbeq	r2, r3, r8, ror #30
    53d4:	030aaf01 	movweq	sl, #44801	; 0xaf01
    53d8:	02000006 	andeq	r0, r0, #6
    53dc:	30007791 	mulcc	r0, r1, r7
    53e0:	00002731 	andeq	r2, r0, r1, lsr r7
    53e4:	9c0d9f01 	stcls	15, cr9, [sp], {1}
    53e8:	6c01003a 	stcvs	0, cr0, [r1], {58}	; 0x3a
    53ec:	01000000 	mrseq	r0, (UNDEF: 0)
    53f0:	000e479c 	muleq	lr, ip, r7
    53f4:	25f82c00 	ldrbcs	r2, [r8, #3072]!	; 0xc00
    53f8:	9f010000 	svcls	0x00010000
    53fc:	000ad329 	andeq	sp, sl, r9, lsr #6
    5400:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5404:	000a6b2c 	andeq	r6, sl, ip, lsr #22
    5408:	369f0100 	ldrcc	r0, [pc], r0, lsl #2
    540c:	00000c38 	andeq	r0, r0, r8, lsr ip
    5410:	2d709102 	ldfcsp	f1, [r0, #-8]!
    5414:	9f010063 	svcls	0x00010063
    5418:	00060342 	andeq	r0, r6, r2, asr #6
    541c:	6f910200 	svcvs	0x00910200
    5420:	26803100 	strcs	r3, [r0], r0, lsl #2
    5424:	c4050000 	strgt	r0, [r5], #-0
    5428:	00002505 	andeq	r2, r0, r5, lsl #10
    542c:	00000000 	andeq	r0, r0, r0
    5430:	00004800 	andeq	r4, r0, r0, lsl #16
    5434:	9e9c0100 	fmllse	f0, f4, f0
    5438:	2c00000e 	stccs	0, cr0, [r0], {14}
    543c:	000025fe 	strdeq	r2, [r0], -lr
    5440:	ad138c01 	ldcge	12, cr8, [r3, #-4]
    5444:	02000009 	andeq	r0, r0, #9
    5448:	1c2c5c91 	stcne	12, cr5, [ip], #-580	; 0xfffffdbc
    544c:	0100001f 	tsteq	r0, pc, lsl r0
    5450:	0633278c 	ldrteq	r2, [r3], -ip, lsl #15
    5454:	91020000 	mrsls	r0, (UNDEF: 2)
    5458:	722f3274 	eorvc	r3, pc, #116, 4	; 0x40000007
    545c:	8e010063 	cdphi	0, 0, cr0, cr1, cr3, {3}
    5460:	00002509 	andeq	r2, r0, r9, lsl #10
    5464:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5468:	00026c33 	andeq	r6, r2, r3, lsr ip
    546c:	0d900100 	ldfeqs	f0, [r0]
    5470:	000000bb 	strheq	r0, [r0], -fp
    5474:	00609102 	rsbeq	r9, r0, r2, lsl #2
    5478:	00264731 	eoreq	r4, r6, r1, lsr r7
    547c:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 5384 <__core1_vectors-0xffac7c>
    5480:	00000025 	andeq	r0, r0, r5, lsr #32
    5484:	00000000 	andeq	r0, r0, r0
    5488:	00000050 	andeq	r0, r0, r0, asr r0
    548c:	0ee69c01 	cdpeq	12, 14, cr9, cr6, cr1, {0}
    5490:	1c2c0000 	stcne	0, cr0, [ip], #-0
    5494:	0100001f 	tsteq	r0, pc, lsl r0
    5498:	06331c7f 			; <UNDEFINED> instruction: 0x06331c7f
    549c:	91020000 	mrsls	r0, (UNDEF: 2)
    54a0:	722f3270 	eorvc	r3, pc, #112, 4
    54a4:	81010063 	tsthi	r1, r3, rrx
    54a8:	00002509 	andeq	r2, r0, r9, lsl #10
    54ac:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    54b0:	00026c33 	andeq	r6, r2, r3, lsr ip
    54b4:	0d830100 	stfeqs	f0, [r3]
    54b8:	000000bb 	strheq	r0, [r0], -fp
    54bc:	00609102 	rsbeq	r9, r0, r2, lsl #2
    54c0:	00274631 	eoreq	r4, r7, r1, lsr r6
    54c4:	056b0100 	strbeq	r0, [fp, #-256]!	; 0xffffff00
    54c8:	00000025 	andeq	r0, r0, r5, lsr #32
    54cc:	00000000 	andeq	r0, r0, r0
    54d0:	00000068 	andeq	r0, r0, r8, rrx
    54d4:	0f4b9c01 	svceq	0x004b9c01
    54d8:	742d0000 	strtvc	r0, [sp], #-0
    54dc:	6b01006f 	blvs	456a0 <__core1_vectors-0xfba960>
    54e0:	0005fd17 	andeq	pc, r5, r7, lsl sp	; <UNPREDICTABLE>
    54e4:	4c910200 	lfmmi	f0, 4, [r1], {0}
    54e8:	001f1c2c 	andseq	r1, pc, ip, lsr #24
    54ec:	276b0100 	strbcs	r0, [fp, -r0, lsl #2]!
    54f0:	00000633 	andeq	r0, r0, r3, lsr r6
    54f4:	32749102 	rsbscc	r9, r4, #-2147483648	; 0x80000000
    54f8:	00275733 	eoreq	r5, r7, r3, lsr r7
    54fc:	1b6d0100 	blne	1b45904 <__end__+0xb298e4>
    5500:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
    5504:	2f589102 	svccs	0x00589102
    5508:	01006372 	tsteq	r0, r2, ror r3
    550c:	0025096e 	eoreq	r0, r5, lr, ror #18
    5510:	91020000 	mrsls	r0, (UNDEF: 2)
    5514:	026c3364 	rsbeq	r3, ip, #100, 6	; 0x90000001
    5518:	70010000 	andvc	r0, r1, r0
    551c:	0000bb0d 	andeq	fp, r0, sp, lsl #22
    5520:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    5524:	26d53100 	ldrbcs	r3, [r5], r0, lsl #2
    5528:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    552c:	00002505 	andeq	r2, r0, r5, lsl #10
    5530:	00000000 	andeq	r0, r0, r0
    5534:	00007800 	andeq	r7, r0, r0, lsl #16
    5538:	bd9c0100 	ldflts	f0, [ip]
    553c:	2d00000f 	stccs	0, cr0, [r0, #-60]	; 0xffffffc4
    5540:	01006f74 	tsteq	r0, r4, ror pc
    5544:	05fd1859 	ldrbeq	r1, [sp, #2137]!	; 0x859
    5548:	91020000 	mrsls	r0, (UNDEF: 2)
    554c:	006e2d54 	rsbeq	r2, lr, r4, asr sp
    5550:	2c235901 			; <UNDEFINED> instruction: 0x2c235901
    5554:	02000000 	andeq	r0, r0, #0
    5558:	1c2c5091 	stcne	0, cr5, [ip], #-580	; 0xfffffdbc
    555c:	0100001f 	tsteq	r0, pc, lsl r0
    5560:	06333259 			; <UNDEFINED> instruction: 0x06333259
    5564:	91020000 	mrsls	r0, (UNDEF: 2)
    5568:	57333278 			; <UNDEFINED> instruction: 0x57333278
    556c:	01000027 	tsteq	r0, r7, lsr #32
    5570:	09b91b5b 	ldmibeq	r9!, {r0, r1, r3, r4, r6, r8, r9, fp, ip}
    5574:	91020000 	mrsls	r0, (UNDEF: 2)
    5578:	63722f60 	cmnvs	r2, #96, 30	; 0x180
    557c:	095c0100 	ldmdbeq	ip, {r8}^
    5580:	00000025 	andeq	r0, r0, r5, lsr #32
    5584:	336c9102 	cmncc	ip, #-2147483648	; 0x80000000
    5588:	0000026c 	andeq	r0, r0, ip, ror #4
    558c:	bb0d5e01 	bllt	35cd98 <__core1_vectors-0xca3268>
    5590:	02000000 	andeq	r0, r0, #0
    5594:	34005c91 	strcc	r5, [r0], #-3217	; 0xfffff36f
    5598:	00002605 	andeq	r2, r0, r5, lsl #12
    559c:	000d4901 	andeq	r4, sp, r1, lsl #18
    55a0:	b4000000 	strlt	r0, [r0], #-0
    55a4:	01000000 	mrseq	r0, (UNDEF: 0)
    55a8:	0010019c 	mulseq	r0, ip, r1
    55ac:	260e2c00 	strcs	r2, [lr], -r0, lsl #24
    55b0:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    55b4:	0006031b 	andeq	r0, r6, fp, lsl r3
    55b8:	6f910200 	svcvs	0x00910200
    55bc:	0028df2c 	eoreq	sp, r8, ip, lsr #30
    55c0:	28490100 	stmdacs	r9, {r8}^
    55c4:	000009ad 	andeq	r0, r0, sp, lsr #19
    55c8:	33689102 	cmncc	r8, #-2147483648	; 0x80000000
    55cc:	00002757 	andeq	r2, r0, r7, asr r7
    55d0:	d31c4b01 	tstle	ip, #1024	; 0x400
    55d4:	0200000a 	andeq	r0, r0, #10
    55d8:	31007491 			; <UNDEFINED> instruction: 0x31007491
    55dc:	000026f0 	strdeq	r2, [r0], -r0
    55e0:	2c08e005 	stccs	0, cr14, [r8], {5}
    55e4:	00000000 	andeq	r0, r0, r0
    55e8:	90000000 	andls	r0, r0, r0
    55ec:	01000000 	mrseq	r0, (UNDEF: 0)
    55f0:	0010769c 	mulseq	r0, ip, r6
    55f4:	74702d00 	ldrbtvc	r2, [r0], #-3328	; 0xfffff300
    55f8:	35010072 	strcc	r0, [r1, #-114]	; 0xffffff8e
    55fc:	0010761b 	andseq	r7, r0, fp, lsl r6
    5600:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5604:	0030dc2c 	eorseq	sp, r0, ip, lsr #24
    5608:	27350100 	ldrcs	r0, [r5, -r0, lsl #2]!
    560c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5610:	2c689102 	stfcsp	f1, [r8], #-8
    5614:	00000a6b 	andeq	r0, r0, fp, ror #20
    5618:	2c343501 	cfldr32cs	mvfx3, [r4], #-4
    561c:	02000000 	andeq	r0, r0, #0
    5620:	fe2c6491 	mcr2	4, 1, r6, cr12, cr1, {4}
    5624:	01000025 	tsteq	r0, r5, lsr #32
    5628:	09ad4135 	stmibeq	sp!, {r0, r2, r4, r5, r8, lr}
    562c:	91020000 	mrsls	r0, (UNDEF: 2)
    5630:	25f83360 	ldrbcs	r3, [r8, #864]!	; 0x360
    5634:	37010000 	strcc	r0, [r1, -r0]
    5638:	000ad31c 	andeq	sp, sl, ip, lsl r3
    563c:	70910200 	addsvc	r0, r1, r0, lsl #4
    5640:	00230333 	eoreq	r0, r3, r3, lsr r3
    5644:	09380100 	ldmdbeq	r8!, {r8}
    5648:	00000025 	andeq	r0, r0, r5, lsr #32
    564c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    5650:	107c0411 	rsbsne	r0, ip, r1, lsl r4
    5654:	36350000 	ldrtcc	r0, [r5], -r0
    5658:	00002676 	andeq	r2, r0, r6, ror r6
    565c:	2505dd05 	strcs	sp, [r5, #-3333]	; 0xfffff2fb
    5660:	00000000 	andeq	r0, r0, r0
    5664:	30000000 	andcc	r0, r0, r0
    5668:	01000000 	mrseq	r0, (UNDEF: 0)
    566c:	74732d9c 	ldrbtvc	r2, [r3], #-3484	; 0xfffff264
    5670:	30010072 	andcc	r0, r1, r2, ror r0
    5674:	00063316 	andeq	r3, r6, r6, lsl r3
    5678:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    567c:	0ce50000 	stcleq	0, cr0, [r5]
    5680:	00040000 	andeq	r0, r4, r0
    5684:	00000c68 	andeq	r0, r0, r8, ror #24
    5688:	003a0104 	eorseq	r0, sl, r4, lsl #2
    568c:	420c0000 	andmi	r0, ip, #0
    5690:	d0000028 	andle	r0, r0, r8, lsr #32
    5694:	d800000b 	stmdale	r0, {r0, r1, r3}
    5698:	00000004 	andeq	r0, r0, r4
    569c:	06000000 	streq	r0, [r0], -r0
    56a0:	0200002a 	andeq	r0, r0, #42	; 0x2a
    56a4:	04020601 	streq	r0, [r2], #-1537	; 0xfffff9ff
    56a8:	02020000 	andeq	r0, r2, #0
    56ac:	000d6105 	andeq	r6, sp, r5, lsl #2
    56b0:	2eee0300 	cdpcs	3, 14, cr0, cr14, cr0, {0}
    56b4:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    56b8:	00003f18 	andeq	r3, r0, r8, lsl pc
    56bc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    56c0:	0000080a 	andeq	r0, r0, sl, lsl #16
    56c4:	05050802 	streq	r0, [r5, #-2050]	; 0xfffff7fe
    56c8:	02000008 	andeq	r0, r0, #8
    56cc:	04000801 	streq	r0, [r0], #-2049	; 0xfffff7ff
    56d0:	02020000 	andeq	r0, r2, #0
    56d4:	000e9e07 	andeq	r9, lr, r7, lsl #28
    56d8:	30d00300 	sbcscc	r0, r0, r0, lsl #6
    56dc:	34020000 	strcc	r0, [r2], #-0
    56e0:	00006719 	andeq	r6, r0, r9, lsl r7
    56e4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    56e8:	00000b40 	andeq	r0, r0, r0, asr #22
    56ec:	3b070802 	blcc	1c76fc <__core1_vectors-0xe38904>
    56f0:	0400000b 	streq	r0, [r0], #-11
    56f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    56f8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    56fc:	000b4507 	andeq	r4, fp, r7, lsl #10
    5700:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    5704:	00000a9d 	muleq	r0, sp, sl
    5708:	0004d603 	andeq	sp, r4, r3, lsl #12
    570c:	1d410300 	stclne	3, cr0, [r1, #-0]
    5710:	00000033 	andeq	r0, r0, r3, lsr r0
    5714:	00094503 	andeq	r4, r9, r3, lsl #10
    5718:	122a0400 	eorne	r0, sl, #0, 8
    571c:	0000005b 	andeq	r0, r0, fp, asr r0
    5720:	000dee05 	andeq	lr, sp, r5, lsl #28
    5724:	4d010700 	stcmi	7, cr0, [r1, #-0]
    5728:	04000000 	streq	r0, [r0], #-0
    572c:	016f0e8b 	smulbbeq	pc, fp, lr	; <UNPREDICTABLE>
    5730:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
    5734:	00000005 	andeq	r0, r0, r5
    5738:	000ccc06 	andeq	ip, ip, r6, lsl #24
    573c:	f7060100 			; <UNDEFINED> instruction: 0xf7060100
    5740:	02000008 	andeq	r0, r0, #8
    5744:	000acc06 	andeq	ip, sl, r6, lsl #24
    5748:	7c060300 	stcvc	3, cr0, [r6], {-0}
    574c:	04000005 	streq	r0, [r0], #-5
    5750:	000c8f06 	andeq	r8, ip, r6, lsl #30
    5754:	a5060500 	strge	r0, [r6, #-1280]	; 0xfffffb00
    5758:	0600000f 	streq	r0, [r0], -pc
    575c:	00011806 	andeq	r1, r1, r6, lsl #16
    5760:	6d060700 	stcvs	7, cr0, [r6, #-0]
    5764:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5768:	0007c806 	andeq	ip, r7, r6, lsl #16
    576c:	7c060900 			; <UNDEFINED> instruction: 0x7c060900
    5770:	0a00000e 	beq	57b0 <__core1_vectors-0xffa850>
    5774:	00027106 	andeq	r7, r2, r6, lsl #2
    5778:	ec060b00 			; <UNDEFINED> instruction: 0xec060b00
    577c:	0c00000a 	stceq	0, cr0, [r0], {10}
    5780:	00027f06 	andeq	r7, r2, r6, lsl #30
    5784:	90060d00 	andls	r0, r6, r0, lsl #26
    5788:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    578c:	0005d406 	andeq	sp, r5, r6, lsl #8
    5790:	bd060f00 	stclt	15, cr0, [r6, #-0]
    5794:	10000003 	andne	r0, r0, r3
    5798:	000e5906 	andeq	r5, lr, r6, lsl #18
    579c:	7d061100 	stfvcs	f1, [r6, #-0]
    57a0:	1200000f 	andne	r0, r0, #15
    57a4:	000b5206 	andeq	r5, fp, r6, lsl #4
    57a8:	11061300 	mrsne	r1, LR_und
    57ac:	1400000d 	strne	r0, [r0], #-13
    57b0:	000d1f06 	andeq	r1, sp, r6, lsl #30
    57b4:	2d061500 	cfstr32cs	mvfx1, [r6, #-0]
    57b8:	1600000d 	strne	r0, [r0], -sp
    57bc:	00037006 	andeq	r7, r3, r6
    57c0:	f4061700 	vst1.8	{d1}, [r6], r0
    57c4:	18000005 	stmdane	r0, {r0, r2}
    57c8:	000dc606 	andeq	ip, sp, r6, lsl #12
    57cc:	fc061900 	stc2	9, cr1, [r6], {-0}	; <UNPREDICTABLE>
    57d0:	1a000006 	bne	57f0 <__core1_vectors-0xffa810>
    57d4:	000e9106 	andeq	r9, lr, r6, lsl #2
    57d8:	df061b00 	svcle	0x00061b00
    57dc:	1c000008 	stcne	0, cr0, [r0], {8}
    57e0:	000c2b06 	andeq	r2, ip, r6, lsl #22
    57e4:	60061d00 	andvs	r1, r6, r0, lsl #26
    57e8:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    57ec:	1add0500 	bne	ff746bf4 <__shm_end__+0xbf746bf4>
    57f0:	02070000 	andeq	r0, r7, #0
    57f4:	00000054 	andeq	r0, r0, r4, asr r0
    57f8:	950e4d05 	strls	r4, [lr, #-3333]	; 0xfffff2fb
    57fc:	06000001 	streq	r0, [r0], -r1
    5800:	000015af 	andeq	r1, r0, pc, lsr #11
    5804:	15ce0600 	strbne	r0, [lr, #1536]	; 0x600
    5808:	07010000 	streq	r0, [r1, -r0]
    580c:	000013d9 	ldrdeq	r1, [r0], -r9
    5810:	03000100 	movweq	r0, #256	; 0x100
    5814:	00001b60 	andeq	r1, r0, r0, ror #22
    5818:	6f015f05 	svcvs	0x00015f05
    581c:	08000001 	stmdaeq	r0, {r0}
    5820:	00001b8a 	andeq	r1, r0, sl, lsl #23
    5824:	10660514 	rsbne	r0, r6, r4, lsl r5
    5828:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    582c:	00072109 	andeq	r2, r7, r9, lsl #2
    5830:	18680500 	stmdane	r8!, {r8, sl}^
    5834:	00000195 	muleq	r0, r5, r1
    5838:	28390900 	ldmdacs	r9!, {r8, fp}
    583c:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    5840:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5844:	f2090400 	vshl.s8	d0, d0, d9
    5848:	05000014 	streq	r0, [r0, #-20]	; 0xffffffec
    584c:	0096186a 	addseq	r1, r6, sl, ror #16
    5850:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    5854:	00002b3f 	andeq	r2, r0, pc, lsr fp
    5858:	5b186b05 	blpl	620474 <__core1_vectors-0x9dfb8c>
    585c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5860:	7263660a 	rsbvc	r6, r3, #10485760	; 0xa00000
    5864:	186c0500 	stmdane	ip!, {r8, sl}^
    5868:	0000005b 	andeq	r0, r0, fp, asr r0
    586c:	040b0010 	streq	r0, [fp], #-16
    5870:	001b9d03 	andseq	r9, fp, r3, lsl #26
    5874:	016e0500 	cmneq	lr, r0, lsl #10
    5878:	000001a1 	andeq	r0, r0, r1, lsr #3
    587c:	0014d70c 	andseq	sp, r4, ip, lsl #14
    5880:	4d010700 	stcmi	7, cr0, [r1, #-0]
    5884:	05000000 	streq	r0, [r0, #-0]
    5888:	2a0e053c 	bcs	386d80 <__core1_vectors-0xc79280>
    588c:	06000002 	streq	r0, [r0], -r2
    5890:	000013fc 	strdeq	r1, [r0], -ip
    5894:	14110600 	ldrne	r0, [r1], #-1536	; 0xfffffa00
    5898:	06010000 	streq	r0, [r1], -r0
    589c:	00001426 	andeq	r1, r0, r6, lsr #8
    58a0:	143b0602 	ldrtne	r0, [fp], #-1538	; 0xfffff9fe
    58a4:	00030000 	andeq	r0, r3, r0
    58a8:	0012760c 	andseq	r7, r2, ip, lsl #12
    58ac:	4d010700 	stcmi	7, cr0, [r1, #-0]
    58b0:	05000000 	streq	r0, [r0, #-0]
    58b4:	4a0e0557 	bmi	386e18 <__core1_vectors-0xc791e8>
    58b8:	06000002 	streq	r0, [r0], -r2
    58bc:	00001108 	andeq	r1, r0, r8, lsl #2
    58c0:	111d0600 	tstne	sp, r0, lsl #12
    58c4:	00010000 	andeq	r0, r1, r0
    58c8:	001a300c 	andseq	r3, sl, ip
    58cc:	4d010700 	stcmi	7, cr0, [r1, #-0]
    58d0:	05000000 	streq	r0, [r0, #-0]
    58d4:	700e0569 	andvc	r0, lr, r9, ror #10
    58d8:	06000002 	streq	r0, [r0], -r2
    58dc:	00001591 	muleq	r0, r1, r5
    58e0:	16640600 	strbtne	r0, [r4], -r0, lsl #12
    58e4:	06010000 	streq	r0, [r1], -r0
    58e8:	00001a1a 	andeq	r1, r0, sl, lsl sl
    58ec:	8a0c0002 	bhi	3058fc <__core1_vectors-0xcfa704>
    58f0:	07000028 	streq	r0, [r0, -r8, lsr #32]
    58f4:	00004d01 	andeq	r4, r0, r1, lsl #26
    58f8:	05820500 	streq	r0, [r2, #1280]	; 0x500
    58fc:	0002b40e 	andeq	fp, r2, lr, lsl #8
    5900:	28ff0600 	ldmcs	pc!, {r9, sl}^	; <UNPREDICTABLE>
    5904:	06800000 	streq	r0, [r0], r0
    5908:	00002800 	andeq	r2, r0, r0, lsl #16
    590c:	28e40640 	stmiacs	r4!, {r6, r9, sl}^
    5910:	06200000 	strteq	r0, [r0], -r0
    5914:	000027dd 	ldrdeq	r2, [r0], -sp
    5918:	28710610 	ldmdacs	r1!, {r4, r9, sl}^
    591c:	06080000 	streq	r0, [r8], -r0
    5920:	0000279b 	muleq	r0, fp, r7
    5924:	27820604 	strcs	r0, [r2, r4, lsl #12]
    5928:	06020000 	streq	r0, [r2], -r0
    592c:	0000281b 	andeq	r2, r0, fp, lsl r8
    5930:	880d0001 	stmdahi	sp, {r0}
    5934:	0600000c 	streq	r0, [r0], -ip
    5938:	7c17015e 	ldfvcs	f0, [r7], {94}	; 0x5e
    593c:	03000000 	movweq	r0, #0
    5940:	000030e2 	andeq	r3, r0, r2, ror #1
    5944:	3f0e2e07 	svccc	0x000e2e07
    5948:	03000000 	movweq	r0, #0
    594c:	00000add 	ldrdeq	r0, [r0], -sp
    5950:	3f0e7407 	svccc	0x000e7407
    5954:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5958:	03a50704 			; <UNDEFINED> instruction: 0x03a50704
    595c:	000002fb 	strdeq	r0, [r0], -fp
    5960:	00023a0f 	andeq	r3, r2, pc, lsl #20
    5964:	0ca70700 	stceq	7, cr0, [r7]
    5968:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    596c:	000ae50f 	andeq	lr, sl, pc, lsl #10
    5970:	13a80700 			; <UNDEFINED> instruction: 0x13a80700
    5974:	000002fb 	strdeq	r0, [r0], -fp
    5978:	004d1000 	subeq	r1, sp, r0
    597c:	030b0000 	movweq	r0, #45056	; 0xb000
    5980:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    5984:	03000000 	movweq	r0, #0
    5988:	07081200 	streq	r1, [r8, -r0, lsl #4]
    598c:	032f09a2 			; <UNDEFINED> instruction: 0x032f09a2
    5990:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
    5994:	0700000a 	streq	r0, [r0, -sl]
    5998:	007507a4 	rsbseq	r0, r5, r4, lsr #15
    599c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    59a0:	0000000b 	andeq	r0, r0, fp
    59a4:	d905a907 	stmdble	r5, {r0, r1, r2, r8, fp, sp, pc}
    59a8:	04000002 	streq	r0, [r0], #-2
    59ac:	0c200300 	stceq	3, cr0, [r0], #-0
    59b0:	aa070000 	bge	1c59b8 <__core1_vectors-0xe3a648>
    59b4:	00030b03 	andeq	r0, r3, r3, lsl #22
    59b8:	0e490300 	cdpeq	3, 4, cr0, cr9, cr0, {0}
    59bc:	16080000 	strne	r0, [r8], -r0
    59c0:	00006719 	andeq	r6, r0, r9, lsl r7
    59c4:	06b30300 	ldrteq	r0, [r3], r0, lsl #6
    59c8:	0c090000 	stceq	0, cr0, [r9], {-0}
    59cc:	0000750d 	andeq	r7, r0, sp, lsl #10
    59d0:	0bc70300 	bleq	ff1c65d8 <__shm_end__+0xbf1c65d8>
    59d4:	23080000 	movwcs	r0, #32768	; 0x8000
    59d8:	0003471b 	andeq	r4, r3, fp, lsl r7
    59dc:	07080800 	streq	r0, [r8, -r0, lsl #16]
    59e0:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    59e4:	03b90834 			; <UNDEFINED> instruction: 0x03b90834
    59e8:	34090000 	strcc	r0, [r9], #-0
    59ec:	0800000a 	stmdaeq	r0, {r1, r3}
    59f0:	03b91336 			; <UNDEFINED> instruction: 0x03b91336
    59f4:	0a000000 	beq	59fc <__core1_vectors-0xffa604>
    59f8:	08006b5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
    59fc:	00750737 	rsbseq	r0, r5, r7, lsr r7
    5a00:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    5a04:	00000761 	andeq	r0, r0, r1, ror #14
    5a08:	750b3708 	strvc	r3, [fp, #-1800]	; 0xfffff8f8
    5a0c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5a10:	0008bf09 	andeq	fp, r8, r9, lsl #30
    5a14:	14370800 	ldrtne	r0, [r7], #-2048	; 0xfffff800
    5a18:	00000075 	andeq	r0, r0, r5, ror r0
    5a1c:	0601090c 	streq	r0, [r1], -ip, lsl #18
    5a20:	37080000 	strcc	r0, [r8, -r0]
    5a24:	0000751b 	andeq	r7, r0, fp, lsl r5
    5a28:	5f0a1000 	svcpl	0x000a1000
    5a2c:	38080078 	stmdacc	r8, {r3, r4, r5, r6}
    5a30:	0003bf0b 	andeq	fp, r3, fp, lsl #30
    5a34:	13001400 	movwne	r1, #1024	; 0x400
    5a38:	00035f04 	andeq	r5, r3, r4, lsl #30
    5a3c:	033b1000 	teqeq	fp, #0
    5a40:	03cf0000 	biceq	r0, pc, #0
    5a44:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    5a48:	00000000 	andeq	r0, r0, r0
    5a4c:	01400800 	cmpeq	r0, r0, lsl #16
    5a50:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    5a54:	0452083c 	ldrbeq	r0, [r2], #-2108	; 0xfffff7c4
    5a58:	5c090000 	stcpl	0, cr0, [r9], {-0}
    5a5c:	08000001 	stmdaeq	r0, {r0}
    5a60:	0075093e 	rsbseq	r0, r5, lr, lsr r9
    5a64:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5a68:	00000f8f 	andeq	r0, r0, pc, lsl #31
    5a6c:	75093f08 	strvc	r3, [r9, #-3848]	; 0xfffff0f8
    5a70:	04000000 	streq	r0, [r0], #-0
    5a74:	000eb109 	andeq	fp, lr, r9, lsl #2
    5a78:	09400800 	stmdbeq	r0, {fp}^
    5a7c:	00000075 	andeq	r0, r0, r5, ror r0
    5a80:	09fb0908 	ldmibeq	fp!, {r3, r8, fp}^
    5a84:	41080000 	mrsmi	r0, (UNDEF: 8)
    5a88:	00007509 	andeq	r7, r0, r9, lsl #10
    5a8c:	8c090c00 	stchi	12, cr0, [r9], {-0}
    5a90:	08000003 	stmdaeq	r0, {r0, r1}
    5a94:	00750942 	rsbseq	r0, r5, r2, asr #18
    5a98:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    5a9c:	00000de4 	andeq	r0, r0, r4, ror #27
    5aa0:	75094308 	strvc	r4, [r9, #-776]	; 0xfffffcf8
    5aa4:	14000000 	strne	r0, [r0], #-0
    5aa8:	000a7b09 	andeq	r7, sl, r9, lsl #22
    5aac:	09440800 	stmdbeq	r4, {fp}^
    5ab0:	00000075 	andeq	r0, r0, r5, ror r0
    5ab4:	0aa90918 	beq	fea47f1c <__shm_end__+0xbea47f1c>
    5ab8:	45080000 	strmi	r0, [r8, #-0]
    5abc:	00007509 	andeq	r7, r0, r9, lsl #10
    5ac0:	55091c00 	strpl	r1, [r9, #-3072]	; 0xfffff400
    5ac4:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5ac8:	00750946 	rsbseq	r0, r5, r6, asr #18
    5acc:	00200000 	eoreq	r0, r0, r0
    5ad0:	00026314 	andeq	r6, r2, r4, lsl r3
    5ad4:	08010800 	stmdaeq	r1, {fp}
    5ad8:	0497084f 	ldreq	r0, [r7], #2127	; 0x84f
    5adc:	41090000 	mrsmi	r0, (UNDEF: 9)
    5ae0:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5ae4:	04970a50 	ldreq	r0, [r7], #2640	; 0xa50
    5ae8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5aec:	00000b66 	andeq	r0, r0, r6, ror #22
    5af0:	97095108 	strls	r5, [r9, -r8, lsl #2]
    5af4:	80000004 	andhi	r0, r0, r4
    5af8:	000dd415 	andeq	sp, sp, r5, lsl r4
    5afc:	0a530800 	beq	14c7b04 <__end__+0x4abae4>
    5b00:	0000033b 	andeq	r0, r0, fp, lsr r3
    5b04:	10150100 	andsne	r0, r5, r0, lsl #2
    5b08:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    5b0c:	033b0a56 	teqeq	fp, #352256	; 0x56000
    5b10:	01040000 	mrseq	r0, (UNDEF: 4)
    5b14:	01f01000 	mvnseq	r1, r0
    5b18:	04a70000 	strteq	r0, [r7], #0
    5b1c:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    5b20:	1f000000 	svcne	0x00000000
    5b24:	0a541400 	beq	150ab2c <__end__+0x4eeb0c>
    5b28:	01900000 	orrseq	r0, r0, r0
    5b2c:	ea086208 	b	21e354 <__core1_vectors-0xde1cac>
    5b30:	09000004 	stmdbeq	r0, {r2}
    5b34:	00000a34 	andeq	r0, r0, r4, lsr sl
    5b38:	ea126308 	b	49e760 <__core1_vectors-0xb618a0>
    5b3c:	00000004 	andeq	r0, r0, r4
    5b40:	000e0409 	andeq	r0, lr, r9, lsl #8
    5b44:	06640800 	strbteq	r0, [r4], -r0, lsl #16
    5b48:	00000075 	andeq	r0, r0, r5, ror r0
    5b4c:	04930904 	ldreq	r0, [r3], #2308	; 0x904
    5b50:	66080000 	strvs	r0, [r8], -r0
    5b54:	0004f009 	andeq	pc, r4, r9
    5b58:	63090800 	movwvs	r0, #38912	; 0x9800
    5b5c:	08000002 	stmdaeq	r0, {r1}
    5b60:	04521e67 	ldrbeq	r1, [r2], #-3687	; 0xfffff199
    5b64:	00880000 	addeq	r0, r8, r0
    5b68:	04a70413 	strteq	r0, [r7], #1043	; 0x413
    5b6c:	00100000 	andseq	r0, r0, r0
    5b70:	00000005 	andeq	r0, r0, r5
    5b74:	11000005 	tstne	r0, r5
    5b78:	0000007c 	andeq	r0, r0, ip, ror r0
    5b7c:	0413001f 	ldreq	r0, [r3], #-31	; 0xffffffe1
    5b80:	00000506 	andeq	r0, r0, r6, lsl #10
    5b84:	0e090816 	mcreq	8, 0, r0, cr9, cr6, {0}
    5b88:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    5b8c:	052f087a 	streq	r0, [pc, #-2170]!	; 531a <__core1_vectors-0xfface6>
    5b90:	a5090000 	strge	r0, [r9, #-0]
    5b94:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    5b98:	052f117b 	streq	r1, [pc, #-379]!	; 5a25 <__core1_vectors-0xffa5db>
    5b9c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5ba0:	000030db 	ldrdeq	r3, [r0], -fp
    5ba4:	75067c08 	strvc	r7, [r6, #-3080]	; 0xfffff3f8
    5ba8:	04000000 	streq	r0, [r0], #-0
    5bac:	4d041300 	stcmi	3, cr1, [r4, #-0]
    5bb0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5bb4:	00000681 	andeq	r0, r0, r1, lsl #13
    5bb8:	08ba0868 	ldmeq	sl!, {r3, r5, r6, fp}
    5bbc:	00000678 	andeq	r0, r0, r8, ror r6
    5bc0:	00705f0a 	rsbseq	r5, r0, sl, lsl #30
    5bc4:	2f12bb08 	svccs	0x0012bb08
    5bc8:	00000005 	andeq	r0, r0, r5
    5bcc:	00725f0a 	rsbseq	r5, r2, sl, lsl #30
    5bd0:	7507bc08 	strvc	fp, [r7, #-3080]	; 0xfffff3f8
    5bd4:	04000000 	streq	r0, [r0], #-0
    5bd8:	00775f0a 	rsbseq	r5, r7, sl, lsl #30
    5bdc:	7507bd08 	strvc	fp, [r7, #-3336]	; 0xfffff2f8
    5be0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5be4:	000a3a09 	andeq	r3, sl, r9, lsl #20
    5be8:	09be0800 	ldmibeq	lr!, {fp}
    5bec:	0000002c 	andeq	r0, r0, ip, lsr #32
    5bf0:	025d090c 	subseq	r0, sp, #12, 18	; 0x30000
    5bf4:	bf080000 	svclt	0x00080000
    5bf8:	00002c09 	andeq	r2, r0, r9, lsl #24
    5bfc:	5f0a0e00 	svcpl	0x000a0e00
    5c00:	08006662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp, lr}
    5c04:	050711c0 	streq	r1, [r7, #-448]	; 0xfffffe40
    5c08:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    5c0c:	00000df6 	strdeq	r0, [r0], -r6
    5c10:	7507c108 	strvc	ip, [r7, #-264]	; 0xfffffef8
    5c14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5c18:	0005e409 	andeq	lr, r5, r9, lsl #8
    5c1c:	0ac80800 	beq	ff207c24 <__shm_end__+0xbf207c24>
    5c20:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5c24:	1c39091c 			; <UNDEFINED> instruction: 0x1c39091c
    5c28:	ca080000 	bgt	205c30 <__core1_vectors-0xdfa3d0>
    5c2c:	0007fc1d 	andeq	pc, r7, sp, lsl ip	; <UNPREDICTABLE>
    5c30:	7d092000 	stcvc	0, cr2, [r9, #-0]
    5c34:	08000011 	stmdaeq	r0, {r0, r4}
    5c38:	08261dcc 	stmdaeq	r6!, {r2, r3, r6, r7, r8, sl, fp, ip}
    5c3c:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    5c40:	00000ac6 	andeq	r0, r0, r6, asr #21
    5c44:	4a0dcf08 	bmi	37986c <__core1_vectors-0xc86794>
    5c48:	28000008 	stmdacs	r0, {r3}
    5c4c:	002b4a09 	eoreq	r4, fp, r9, lsl #20
    5c50:	09d00800 	ldmibeq	r0, {fp}^
    5c54:	00000864 	andeq	r0, r0, r4, ror #16
    5c58:	755f0a2c 	ldrbvc	r0, [pc, #-2604]	; 5234 <__core1_vectors-0xffadcc>
    5c5c:	d3080062 	movwle	r0, #32866	; 0x8062
    5c60:	00050711 	andeq	r0, r5, r1, lsl r7
    5c64:	5f0a3000 	svcpl	0x000a3000
    5c68:	08007075 	stmdaeq	r0, {r0, r2, r4, r5, r6, ip, sp, lr}
    5c6c:	052f12d4 	streq	r1, [pc, #-724]!	; 59a0 <__core1_vectors-0xffa660>
    5c70:	0a380000 	beq	e05c78 <__core1_vectors-0x1fa388>
    5c74:	0072755f 	rsbseq	r7, r2, pc, asr r5
    5c78:	7507d508 	strvc	sp, [r7, #-1288]	; 0xfffffaf8
    5c7c:	3c000000 	stccc	0, cr0, [r0], {-0}
    5c80:	000a0a09 	andeq	r0, sl, r9, lsl #20
    5c84:	11d80800 	bicsne	r0, r8, r0, lsl #16
    5c88:	0000086a 	andeq	r0, r0, sl, ror #16
    5c8c:	01560940 	cmpeq	r6, r0, asr #18
    5c90:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    5c94:	00087a11 	andeq	r7, r8, r1, lsl sl
    5c98:	5f0a4300 	svcpl	0x000a4300
    5c9c:	0800626c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp, lr}
    5ca0:	050711dc 	streq	r1, [r7, #-476]	; 0xfffffe24
    5ca4:	09440000 	stmdbeq	r4, {}^	; <UNPREDICTABLE>
    5ca8:	00002ee3 	andeq	r2, r0, r3, ror #29
    5cac:	7507df08 	strvc	sp, [r7, #-3848]	; 0xfffff0f8
    5cb0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5cb4:	00062709 	andeq	r2, r6, r9, lsl #14
    5cb8:	0ae00800 	beq	ff807cc0 <__shm_end__+0xbf807cc0>
    5cbc:	000002c1 	andeq	r0, r0, r1, asr #5
    5cc0:	2b3e0950 	blcs	f88208 <__core1_vectors-0x77df8>
    5cc4:	e3080000 	movw	r0, #32768	; 0x8000
    5cc8:	00069612 	andeq	r9, r6, r2, lsl r6
    5ccc:	ab095400 	blge	25acd4 <__core1_vectors-0xda532c>
    5cd0:	08000001 	stmdaeq	r0, {r0}
    5cd4:	03530ce7 	cmpeq	r3, #59136	; 0xe700
    5cd8:	09580000 	ldmdbeq	r8, {}^	; <UNPREDICTABLE>
    5cdc:	00000a26 	andeq	r0, r0, r6, lsr #20
    5ce0:	2f0ee908 	svccs	0x000ee908
    5ce4:	5c000003 	stcpl	0, cr0, [r0], {3}
    5ce8:	00069409 	andeq	r9, r6, r9, lsl #8
    5cec:	09ea0800 	stmibeq	sl!, {fp}^
    5cf0:	00000075 	andeq	r0, r0, r5, ror r0
    5cf4:	75170064 	ldrvc	r0, [r7, #-100]	; 0xffffff9c
    5cf8:	96000000 	strls	r0, [r0], -r0
    5cfc:	18000006 	stmdane	r0, {r1, r2}
    5d00:	00000696 	muleq	r0, r6, r6
    5d04:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5d08:	07ea1800 	strbeq	r1, [sl, r0, lsl #16]!
    5d0c:	75180000 	ldrvc	r0, [r8, #-0]
    5d10:	00000000 	andeq	r0, r0, r0
    5d14:	06a10413 	ssateq	r0, #2, r3, lsl #8
    5d18:	96190000 	ldrls	r0, [r9], -r0
    5d1c:	1a000006 	bne	5d3c <__core1_vectors-0xffa2c4>
    5d20:	00000446 	andeq	r0, r0, r6, asr #8
    5d24:	65080428 	strvs	r0, [r8, #-1064]	; 0xfffffbd8
    5d28:	07ea0802 	strbeq	r0, [sl, r2, lsl #16]!
    5d2c:	921b0000 	andsls	r0, fp, #0
    5d30:	08000009 	stmdaeq	r0, {r0, r3}
    5d34:	75070267 	strvc	r0, [r7, #-615]	; 0xfffffd99
    5d38:	00000000 	andeq	r0, r0, r0
    5d3c:	0005221b 	andeq	r2, r5, fp, lsl r2
    5d40:	026c0800 	rsbeq	r0, ip, #0, 16
    5d44:	0008d60b 	andeq	sp, r8, fp, lsl #12
    5d48:	871b0400 	ldrhi	r0, [fp, -r0, lsl #8]
    5d4c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    5d50:	d614026c 	ldrle	r0, [r4], -ip, ror #4
    5d54:	08000008 	stmdaeq	r0, {r3}
    5d58:	000a101b 	andeq	r1, sl, fp, lsl r0
    5d5c:	026c0800 	rsbeq	r0, ip, #0, 16
    5d60:	0008d61e 	andeq	sp, r8, lr, lsl r6
    5d64:	ff1b0c00 			; <UNDEFINED> instruction: 0xff1b0c00
    5d68:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    5d6c:	7508026e 	strvc	r0, [r8, #-622]	; 0xfffffd92
    5d70:	10000000 	andne	r0, r0, r0
    5d74:	0007fa1b 	andeq	pc, r7, fp, lsl sl	; <UNPREDICTABLE>
    5d78:	026f0800 	rsbeq	r0, pc, #0, 16
    5d7c:	000ad608 	andeq	sp, sl, r8, lsl #12
    5d80:	2d1b1400 	cfldrscs	mvf1, [fp, #-0]
    5d84:	08000004 	stmdaeq	r0, {r2}
    5d88:	75070272 	strvc	r0, [r7, #-626]	; 0xfffffd8e
    5d8c:	30000000 	andcc	r0, r0, r0
    5d90:	000e411b 	andeq	r4, lr, fp, lsl r1
    5d94:	02730800 	rsbseq	r0, r3, #0, 16
    5d98:	000aeb16 	andeq	lr, sl, r6, lsl fp
    5d9c:	891b3400 	ldmdbhi	fp, {sl, ip, sp}
    5da0:	08000006 	stmdaeq	r0, {r1, r2}
    5da4:	75070275 	strvc	r0, [r7, #-629]	; 0xfffffd8b
    5da8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5dac:	00077d1b 	andeq	r7, r7, fp, lsl sp
    5db0:	02770800 	rsbseq	r0, r7, #0, 16
    5db4:	000afc0a 	andeq	pc, sl, sl, lsl #24
    5db8:	511b3c00 	tstpl	fp, r0, lsl #24
    5dbc:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    5dc0:	b913027a 	ldmdblt	r3, {r1, r3, r4, r5, r6, r9}
    5dc4:	40000003 	andmi	r0, r0, r3
    5dc8:	0002f11b 	andeq	pc, r2, fp, lsl r1	; <UNPREDICTABLE>
    5dcc:	027b0800 	rsbseq	r0, fp, #0, 16
    5dd0:	00007507 	andeq	r7, r0, r7, lsl #10
    5dd4:	6f1b4400 	svcvs	0x001b4400
    5dd8:	08000006 	stmdaeq	r0, {r1, r2}
    5ddc:	b913027c 	ldmdblt	r3, {r2, r3, r4, r5, r6, r9}
    5de0:	48000003 	stmdami	r0, {r0, r1}
    5de4:	0008a91b 	andeq	sl, r8, fp, lsl r9
    5de8:	027d0800 	rsbseq	r0, sp, #0, 16
    5dec:	000b0214 	andeq	r0, fp, r4, lsl r2
    5df0:	101b4c00 	andsne	r4, fp, r0, lsl #24
    5df4:	08000001 	stmdaeq	r0, {r0}
    5df8:	75070280 	strvc	r0, [r7, #-640]	; 0xfffffd80
    5dfc:	50000000 	andpl	r0, r0, r0
    5e00:	00062f1b 	andeq	r2, r6, fp, lsl pc
    5e04:	02810800 	addeq	r0, r1, #0, 16
    5e08:	0007ea09 	andeq	lr, r7, r9, lsl #20
    5e0c:	051b5400 	ldreq	r5, [fp, #-1024]	; 0xfffffc00
    5e10:	0800000a 	stmdaeq	r0, {r1, r3}
    5e14:	b10702a4 	smlatblt	r7, r4, r2, r0
    5e18:	5800000a 	stmdapl	r0, {r1, r3}
    5e1c:	000a541c 	andeq	r5, sl, ip, lsl r4
    5e20:	02a80800 	adceq	r0, r8, #0, 16
    5e24:	0004ea13 	andeq	lr, r4, r3, lsl sl
    5e28:	1c014800 	stcne	8, cr4, [r1], {-0}
    5e2c:	00000787 	andeq	r0, r0, r7, lsl #15
    5e30:	1202a908 	andne	sl, r2, #8, 18	; 0x20000
    5e34:	000004a7 	andeq	r0, r0, r7, lsr #9
    5e38:	1d1c014c 	ldfnes	f0, [ip, #-304]	; 0xfffffed0
    5e3c:	08000006 	stmdaeq	r0, {r1, r2}
    5e40:	130c02ad 	movwne	r0, #49837	; 0xc2ad
    5e44:	dc00000b 	stcle	0, cr0, [r0], {11}
    5e48:	08341c02 	ldmdaeq	r4!, {r1, sl, fp, ip}
    5e4c:	b2080000 	andlt	r0, r8, #0
    5e50:	08971002 	ldmeq	r7, {r1, ip}
    5e54:	02e00000 	rsceq	r0, r0, #0
    5e58:	0000131c 	andeq	r1, r0, ip, lsl r3
    5e5c:	02b40800 	adcseq	r0, r4, #0, 16
    5e60:	000b1f0a 	andeq	r1, fp, sl, lsl #30
    5e64:	0002ec00 	andeq	lr, r2, r0, lsl #24
    5e68:	07f00413 			; <UNDEFINED> instruction: 0x07f00413
    5e6c:	01020000 	mrseq	r0, (UNDEF: 2)
    5e70:	00040908 	andeq	r0, r4, r8, lsl #18
    5e74:	07f01900 	ldrbeq	r1, [r0, r0, lsl #18]!
    5e78:	04130000 	ldreq	r0, [r3], #-0
    5e7c:	00000678 	andeq	r0, r0, r8, ror r6
    5e80:	00007517 	andeq	r7, r0, r7, lsl r5
    5e84:	00082000 	andeq	r2, r8, r0
    5e88:	06961800 	ldreq	r1, [r6], r0, lsl #16
    5e8c:	f0180000 			; <UNDEFINED> instruction: 0xf0180000
    5e90:	18000001 	stmdane	r0, {r0}
    5e94:	00000820 	andeq	r0, r0, r0, lsr #16
    5e98:	00007518 	andeq	r7, r0, r8, lsl r5
    5e9c:	04130000 	ldreq	r0, [r3], #-0
    5ea0:	000007f7 	strdeq	r0, [r0], -r7
    5ea4:	08020413 	stmdaeq	r2, {r0, r1, r4, sl}
    5ea8:	cd170000 	ldcgt	0, cr0, [r7, #-0]
    5eac:	4a000002 	bmi	5ebc <__core1_vectors-0xffa144>
    5eb0:	18000008 	stmdane	r0, {r3}
    5eb4:	00000696 	muleq	r0, r6, r6
    5eb8:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5ebc:	02cd1800 	sbceq	r1, sp, #0, 16
    5ec0:	75180000 	ldrvc	r0, [r8, #-0]
    5ec4:	00000000 	andeq	r0, r0, r0
    5ec8:	082c0413 	stmdaeq	ip!, {r0, r1, r4, sl}
    5ecc:	75170000 	ldrvc	r0, [r7, #-0]
    5ed0:	64000000 	strvs	r0, [r0], #-0
    5ed4:	18000008 	stmdane	r0, {r3}
    5ed8:	00000696 	muleq	r0, r6, r6
    5edc:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5ee0:	04130000 	ldreq	r0, [r3], #-0
    5ee4:	00000850 	andeq	r0, r0, r0, asr r8
    5ee8:	00004d10 	andeq	r4, r0, r0, lsl sp
    5eec:	00087a00 	andeq	r7, r8, r0, lsl #20
    5ef0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    5ef4:	00020000 	andeq	r0, r2, r0
    5ef8:	00004d10 	andeq	r4, r0, r0, lsl sp
    5efc:	00088a00 	andeq	r8, r8, r0, lsl #20
    5f00:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    5f04:	00000000 	andeq	r0, r0, r0
    5f08:	000c120d 	andeq	r1, ip, sp, lsl #4
    5f0c:	01240800 			; <UNDEFINED> instruction: 0x01240800
    5f10:	0005351a 	andeq	r3, r5, sl, lsl r5
    5f14:	08b91d00 	ldmeq	r9!, {r8, sl, fp, ip}
    5f18:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    5f1c:	d0080128 	andle	r0, r8, r8, lsr #2
    5f20:	1b000008 	blne	5f48 <__core1_vectors-0xffa0b8>
    5f24:	00000a34 	andeq	r0, r0, r4, lsr sl
    5f28:	11012a08 	tstne	r1, r8, lsl #20
    5f2c:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5f30:	082d1b00 	stmdaeq	sp!, {r8, r9, fp, ip}
    5f34:	2b080000 	blcs	205f3c <__core1_vectors-0xdfa0c4>
    5f38:	00750701 	rsbseq	r0, r5, r1, lsl #14
    5f3c:	1b040000 	blne	105f44 <__core1_vectors-0xefa0bc>
    5f40:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
    5f44:	0b012c08 	bleq	50f6c <__core1_vectors-0xfaf094>
    5f48:	000008d6 	ldrdeq	r0, [r0], -r6
    5f4c:	04130008 	ldreq	r0, [r3], #-8
    5f50:	00000897 	muleq	r0, r7, r8
    5f54:	088a0413 	stmeq	sl, {r0, r1, r4, sl}
    5f58:	7f1d0000 	svcvc	0x001d0000
    5f5c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    5f60:	08014408 	stmdaeq	r1, {r3, sl, lr}
    5f64:	00000915 	andeq	r0, r0, r5, lsl r9
    5f68:	000ac01b 	andeq	ip, sl, fp, lsl r0
    5f6c:	01450800 	cmpeq	r5, r0, lsl #16
    5f70:	00091512 	andeq	r1, r9, r2, lsl r5
    5f74:	bf1b0000 	svclt	0x001b0000
    5f78:	08000001 	stmdaeq	r0, {r0}
    5f7c:	15120146 	ldrne	r0, [r2, #-326]	; 0xfffffeba
    5f80:	06000009 	streq	r0, [r0], -r9
    5f84:	000e8c1b 	andeq	r8, lr, fp, lsl ip
    5f88:	01470800 	cmpeq	r7, r0, lsl #16
    5f8c:	00005412 	andeq	r5, r0, r2, lsl r4
    5f90:	10000c00 	andne	r0, r0, r0, lsl #24
    5f94:	00000054 	andeq	r0, r0, r4, asr r0
    5f98:	00000925 	andeq	r0, r0, r5, lsr #18
    5f9c:	00007c11 	andeq	r7, r0, r1, lsl ip
    5fa0:	1e000200 	cdpne	2, 0, cr0, cr0, cr0, {0}
    5fa4:	028508d0 	addeq	r0, r5, #208, 16	; 0xd00000
    5fa8:	000a3a07 	andeq	r3, sl, r7, lsl #20
    5fac:	03ce1b00 	biceq	r1, lr, #0, 22
    5fb0:	87080000 	strhi	r0, [r8, -r0]
    5fb4:	007c1802 	rsbseq	r1, ip, r2, lsl #16
    5fb8:	1b000000 	blne	5fc0 <__core1_vectors-0xffa040>
    5fbc:	00000bab 	andeq	r0, r0, fp, lsr #23
    5fc0:	12028808 	andne	r8, r2, #8, 16	; 0x80000
    5fc4:	000007ea 	andeq	r0, r0, sl, ror #15
    5fc8:	002d1b04 	eoreq	r1, sp, r4, lsl #22
    5fcc:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    5fd0:	0a3a1002 	beq	e89fe0 <__core1_vectors-0x176020>
    5fd4:	1b080000 	blne	205fdc <__core1_vectors-0xdfa024>
    5fd8:	00000310 	andeq	r0, r0, r0, lsl r3
    5fdc:	17028a08 	strne	r8, [r2, -r8, lsl #20]
    5fe0:	000003cf 	andeq	r0, r0, pc, asr #7
    5fe4:	08831b24 	stmeq	r3, {r2, r5, r8, r9, fp, ip}
    5fe8:	8b080000 	blhi	205ff0 <__core1_vectors-0xdfa010>
    5fec:	00750f02 	rsbseq	r0, r5, r2, lsl #30
    5ff0:	1b480000 	blne	1205ff8 <__end__+0x1e9fd8>
    5ff4:	00000a2f 	andeq	r0, r0, pc, lsr #20
    5ff8:	2c028c08 	stccs	12, cr8, [r2], {8}
    5ffc:	0000006e 	andeq	r0, r0, lr, rrx
    6000:	0c761b50 			; <UNDEFINED> instruction: 0x0c761b50
    6004:	8d080000 	stchi	0, cr0, [r8, #-0]
    6008:	08dc1a02 	ldmeq	ip, {r1, r9, fp, ip}^
    600c:	1b580000 	blne	1606014 <__end__+0x5e9ff4>
    6010:	00000d54 	andeq	r0, r0, r4, asr sp
    6014:	16028e08 	strne	r8, [r2], -r8, lsl #28
    6018:	0000032f 	andeq	r0, r0, pc, lsr #6
    601c:	0afa1b68 	beq	ffe8cdc4 <__shm_end__+0xbfe8cdc4>
    6020:	8f080000 	svchi	0x00080000
    6024:	032f1602 			; <UNDEFINED> instruction: 0x032f1602
    6028:	1b700000 	blne	1c06030 <__end__+0xbea010>
    602c:	00000a18 	andeq	r0, r0, r8, lsl sl
    6030:	16029008 	strne	r9, [r2], -r8
    6034:	0000032f 	andeq	r0, r0, pc, lsr #6
    6038:	01651b78 	smceq	20920	; 0x51b8
    603c:	91080000 	mrsls	r0, (UNDEF: 8)
    6040:	0a4a1002 	beq	128a050 <__end__+0x26e030>
    6044:	1b800000 	blne	fe00604c <__shm_end__+0xbe00604c>
    6048:	000006e3 	andeq	r0, r0, r3, ror #13
    604c:	10029208 	andne	r9, r2, r8, lsl #4
    6050:	00000a5a 	andeq	r0, r0, sl, asr sl
    6054:	0f981b88 	svceq	0x00981b88
    6058:	93080000 	movwls	r0, #32768	; 0x8000
    605c:	00750f02 	rsbseq	r0, r5, r2, lsl #30
    6060:	1ba00000 	blne	fe806068 <__shm_end__+0xbe806068>
    6064:	000002e3 	andeq	r0, r0, r3, ror #5
    6068:	16029408 	strne	r9, [r2], -r8, lsl #8
    606c:	0000032f 	andeq	r0, r0, pc, lsr #6
    6070:	0bb81ba4 	bleq	fee0cf08 <__shm_end__+0xbee0cf08>
    6074:	95080000 	strls	r0, [r8, #-0]
    6078:	032f1602 			; <UNDEFINED> instruction: 0x032f1602
    607c:	1bac0000 	blne	feb06084 <__shm_end__+0xbeb06084>
    6080:	00000f01 	andeq	r0, r0, r1, lsl #30
    6084:	16029608 	strne	r9, [r2], -r8, lsl #12
    6088:	0000032f 	andeq	r0, r0, pc, lsr #6
    608c:	09ec1bb4 	stmibeq	ip!, {r2, r4, r5, r7, r8, r9, fp, ip}^
    6090:	97080000 	strls	r0, [r8, -r0]
    6094:	032f1602 			; <UNDEFINED> instruction: 0x032f1602
    6098:	1bbc0000 	blne	fef060a0 <__shm_end__+0xbef060a0>
    609c:	00000145 	andeq	r0, r0, r5, asr #2
    60a0:	16029808 	strne	r9, [r2], -r8, lsl #16
    60a4:	0000032f 	andeq	r0, r0, pc, lsr #6
    60a8:	09901bc4 	ldmibeq	r0, {r2, r6, r7, r8, r9, fp, ip}
    60ac:	99080000 	stmdbls	r8, {}	; <UNPREDICTABLE>
    60b0:	00750802 	rsbseq	r0, r5, r2, lsl #16
    60b4:	00cc0000 	sbceq	r0, ip, r0
    60b8:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    60bc:	000a4a00 	andeq	r4, sl, r0, lsl #20
    60c0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    60c4:	00190000 	andseq	r0, r9, r0
    60c8:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    60cc:	000a5a00 	andeq	r5, sl, r0, lsl #20
    60d0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    60d4:	00070000 	andeq	r0, r7, r0
    60d8:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    60dc:	000a6a00 	andeq	r6, sl, r0, lsl #20
    60e0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    60e4:	00170000 	andseq	r0, r7, r0
    60e8:	9e08f01e 	mcrls	0, 0, pc, cr8, cr14, {0}	; <UNPREDICTABLE>
    60ec:	0a910702 	beq	fe447cfc <__shm_end__+0xbe447cfc>
    60f0:	181b0000 	ldmdane	fp, {}	; <UNPREDICTABLE>
    60f4:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    60f8:	911b02a1 	tstls	fp, r1, lsr #5
    60fc:	0000000a 	andeq	r0, r0, sl
    6100:	0008481b 	andeq	r4, r8, fp, lsl r8
    6104:	02a20800 	adceq	r0, r2, #0, 16
    6108:	000aa118 	andeq	sl, sl, r8, lsl r1
    610c:	10007800 	andne	r7, r0, r0, lsl #16
    6110:	0000052f 	andeq	r0, r0, pc, lsr #10
    6114:	00000aa1 	andeq	r0, r0, r1, lsr #21
    6118:	00007c11 	andeq	r7, r0, r1, lsl ip
    611c:	10001d00 	andne	r1, r0, r0, lsl #26
    6120:	0000007c 	andeq	r0, r0, ip, ror r0
    6124:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    6128:	00007c11 	andeq	r7, r0, r1, lsl ip
    612c:	1f001d00 	svcne	0x00001d00
    6130:	028308f0 	addeq	r0, r3, #240, 16	; 0xf00000
    6134:	000ad603 	andeq	sp, sl, r3, lsl #12
    6138:	04462000 	strbeq	r2, [r6], #-0
    613c:	9a080000 	bls	206144 <__core1_vectors-0xdf9ebc>
    6140:	09250b02 	stmdbeq	r5!, {r1, r8, r9, fp}
    6144:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
    6148:	08000001 	stmdaeq	r0, {r0}
    614c:	6a0b02a3 	bvs	2c6be0 <__core1_vectors-0xd39420>
    6150:	0000000a 	andeq	r0, r0, sl
    6154:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    6158:	000ae600 	andeq	lr, sl, r0, lsl #12
    615c:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    6160:	00180000 	andseq	r0, r8, r0
    6164:	00000021 	andeq	r0, r0, r1, lsr #32
    6168:	e6041300 	str	r1, [r4], -r0, lsl #6
    616c:	2200000a 	andcs	r0, r0, #10
    6170:	00000afc 	strdeq	r0, [r0], -ip
    6174:	00069618 	andeq	r9, r6, r8, lsl r6
    6178:	04130000 	ldreq	r0, [r3], #-0
    617c:	00000af1 	strdeq	r0, [r0], -r1
    6180:	03b90413 			; <UNDEFINED> instruction: 0x03b90413
    6184:	13220000 			; <UNDEFINED> instruction: 0x13220000
    6188:	1800000b 	stmdane	r0, {r0, r1, r3}
    618c:	00000075 	andeq	r0, r0, r5, ror r0
    6190:	19041300 	stmdbne	r4, {r8, r9, ip}
    6194:	1300000b 	movwne	r0, #11
    6198:	000b0804 	andeq	r0, fp, r4, lsl #16
    619c:	088a1000 	stmeq	sl, {ip}
    61a0:	0b2f0000 	bleq	bc61a8 <__core1_vectors-0x439e58>
    61a4:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    61a8:	02000000 	andeq	r0, r0, #0
    61ac:	04542300 	ldrbeq	r2, [r4], #-768	; 0xfffffd00
    61b0:	33080000 	movwcc	r0, #32768	; 0x8000
    61b4:	06961703 	ldreq	r1, [r6], r3, lsl #14
    61b8:	4d230000 	stcmi	0, cr0, [r3, #-0]
    61bc:	08000004 	stmdaeq	r0, {r2}
    61c0:	9c1d0334 	ldcls	3, cr0, [sp], {52}	; 0x34
    61c4:	03000006 	movweq	r0, #6
    61c8:	00000c14 	andeq	r0, r0, r4, lsl ip
    61cc:	8a10420a 	bhi	4169fc <__core1_vectors-0xbe9604>
    61d0:	22000008 	andcs	r0, r0, #8
    61d4:	00000b65 	andeq	r0, r0, r5, ror #22
    61d8:	0007f018 	andeq	pc, r7, r8, lsl r0	; <UNPREDICTABLE>
    61dc:	0b651800 	bleq	194c1e4 <__end__+0x9301c4>
    61e0:	13000000 	movwne	r0, #0
    61e4:	000b4904 	andeq	r4, fp, r4, lsl #18
    61e8:	55041300 	strpl	r1, [r4, #-768]	; 0xfffffd00
    61ec:	2400000b 	strcs	r0, [r0], #-11
    61f0:	0000083c 	andeq	r0, r0, ip, lsr r8
    61f4:	650e360b 	strvs	r3, [lr, #-1547]	; 0xfffff9f5
    61f8:	2400000b 	strcs	r0, [r0], #-11
    61fc:	00000842 	andeq	r0, r0, r2, asr #16
    6200:	650e370b 	strvs	r3, [lr, #-1803]	; 0xfffff8f5
    6204:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    6208:	000028a2 	andeq	r2, r0, r2, lsr #17
    620c:	102c0120 	eorne	r0, ip, r0, lsr #2
    6210:	00000bcb 	andeq	r0, r0, fp, asr #23
    6214:	00262e09 	eoreq	r2, r6, r9, lsl #28
    6218:	0a2e0100 	beq	b86620 <__core1_vectors-0x4799e0>
    621c:	00000b6b 	andeq	r0, r0, fp, ror #22
    6220:	28cf0900 	stmiacs	pc, {r8, fp}^	; <UNPREDICTABLE>
    6224:	2f010000 	svccs	0x00010000
    6228:	0000750a 	andeq	r7, r0, sl, lsl #10
    622c:	c7090400 	strgt	r0, [r9, -r0, lsl #8]
    6230:	01000028 	tsteq	r0, r8, lsr #32
    6234:	01951630 	orrseq	r1, r5, r0, lsr r6
    6238:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    623c:	0000277c 	andeq	r2, r0, ip, ror r7
    6240:	f2163101 	vrhadd.s16	d3, d6, d1
    6244:	0c000001 	stceq	0, cr0, [r0], {1}
    6248:	28ae0300 	stmiacs	lr!, {r8, r9}
    624c:	32010000 	andcc	r0, r1, #0
    6250:	000b8903 	andeq	r8, fp, r3, lsl #18
    6254:	28d92500 	ldmcs	r9, {r8, sl, sp}^
    6258:	37010000 	strcc	r0, [r1, -r0]
    625c:	000bcb14 	andeq	ip, fp, r4, lsl fp
    6260:	00030500 	andeq	r0, r3, r0, lsl #10
    6264:	26000000 	strcs	r0, [r0], -r0
    6268:	00000b71 	andeq	r0, r0, r1, ror fp
    626c:	05083801 	streq	r3, [r8, #-2049]	; 0xfffff7ff
    6270:	00000003 	andeq	r0, r0, r3
    6274:	28662500 	stmdacs	r6!, {r8, sl, sp}^
    6278:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    627c:	000bcb14 	andeq	ip, fp, r4, lsl fp
    6280:	88030500 	stmdahi	r3, {r8, sl}
    6284:	26010059 			; <UNDEFINED> instruction: 0x26010059
    6288:	00000b7d 	andeq	r0, r0, sp, ror fp
    628c:	05083a01 	streq	r3, [r8, #-2561]	; 0xfffff5ff
    6290:	0059a803 	subseq	sl, r9, r3, lsl #16
    6294:	28ba2701 	ldmcs	sl!, {r0, r8, r9, sl, sp}
    6298:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    629c:	00000006 	andeq	r0, r0, r6
    62a0:	00007c00 	andeq	r7, r0, r0, lsl #24
    62a4:	5a9c0100 	bpl	fe7066ac <__shm_end__+0xbe7066ac>
    62a8:	2800000c 	stmdacs	r0, {r2, r3}
    62ac:	0100706f 	tsteq	r0, pc, rrx
    62b0:	0b65196e 	bleq	194c870 <__end__+0x930850>
    62b4:	91020000 	mrsls	r0, (UNDEF: 2)
    62b8:	285f256c 	ldmdacs	pc, {r2, r3, r5, r6, r8, sl, sp}^	; <UNPREDICTABLE>
    62bc:	70010000 	andvc	r0, r1, r0
    62c0:	000c5a12 	andeq	r5, ip, r2, lsl sl
    62c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    62c8:	0027b425 	eoreq	fp, r7, r5, lsr #8
    62cc:	0e710100 	rpweqs	f0, f1, f0
    62d0:	0000005b 	andeq	r0, r0, fp, asr r0
    62d4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    62d8:	0bcb0413 	bleq	ff2c732c <__shm_end__+0xbf2c732c>
    62dc:	f6290000 			; <UNDEFINED> instruction: 0xf6290000
    62e0:	01000027 	tsteq	r0, r7, lsr #32
    62e4:	008a184b 	addeq	r1, sl, fp, asr #16
    62e8:	49fc0000 	ldmibmi	ip!, {}^	; <UNPREDICTABLE>
    62ec:	00d80100 	sbcseq	r0, r8, r0, lsl #2
    62f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    62f4:	00000ca8 	andeq	r0, r0, r8, lsr #25
    62f8:	0027c02a 	eoreq	ip, r7, sl, lsr #32
    62fc:	2f4b0100 	svccs	0x004b0100
    6300:	00000c5a 	andeq	r0, r0, sl, asr ip
    6304:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
    6308:	00002834 	andeq	r2, r0, r4, lsr r8
    630c:	5b0e4d01 	blpl	399718 <__core1_vectors-0xc668e8>
    6310:	02000000 	andeq	r0, r0, #0
    6314:	b9257091 	stmdblt	r5!, {r0, r4, r7, ip, sp, lr}
    6318:	01000027 	tsteq	r0, r7, lsr #32
    631c:	008a154e 	addeq	r1, sl, lr, asr #10
    6320:	91020000 	mrsls	r0, (UNDEF: 2)
    6324:	d32b0074 			; <UNDEFINED> instruction: 0xd32b0074
    6328:	01000027 	tsteq	r0, r7, lsr #32
    632c:	497c0d3c 	ldmdbmi	ip!, {r2, r3, r4, r5, r8, sl, fp}^
    6330:	00800100 	addeq	r0, r0, r0, lsl #2
    6334:	9c010000 	stcls	0, cr0, [r1], {-0}
    6338:	00260e2a 	eoreq	r0, r6, sl, lsr #28
    633c:	1c3c0100 	ldfnes	f0, [ip], #-0
    6340:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6344:	2a6f9102 	bcs	1bea754 <__end__+0xbce734>
    6348:	000028df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    634c:	65293c01 	strvs	r3, [r9, #-3073]!	; 0xfffff3ff
    6350:	0200000b 	andeq	r0, r0, #11
    6354:	c9256891 	stmdbgt	r5!, {r0, r4, r7, fp, sp, lr}
    6358:	01000027 	tsteq	r0, r7, lsr #32
    635c:	0c5a103e 	mrrceq	0, 3, r1, sl, cr14
    6360:	91020000 	mrsls	r0, (UNDEF: 2)
    6364:	4d000074 	stcmi	0, cr0, [r0, #-464]	; 0xfffffe30
    6368:	0400000b 	streq	r0, [r0], #-11
    636c:	000eeb00 	andeq	lr, lr, r0, lsl #22
    6370:	3a010400 	bcc	47378 <__core1_vectors-0xfb8c88>
    6374:	0c000000 	stceq	0, cr0, [r0], {-0}
    6378:	00002a13 	andeq	r2, r0, r3, lsl sl
    637c:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6380:	000004f8 	strdeq	r0, [r0], -r8
    6384:	00000000 	andeq	r0, r0, r0
    6388:	00002bdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    638c:	02060102 	andeq	r0, r6, #-2147483648	; 0x80000000
    6390:	02000004 	andeq	r0, r0, #4
    6394:	0d610502 	cfstr64eq	mvdx0, [r1, #-8]!
    6398:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    639c:	0200002e 	andeq	r0, r0, #46	; 0x2e
    63a0:	003f1828 	eorseq	r1, pc, r8, lsr #16
    63a4:	04020000 	streq	r0, [r2], #-0
    63a8:	00080a05 	andeq	r0, r8, r5, lsl #20
    63ac:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    63b0:	00000805 	andeq	r0, r0, r5, lsl #16
    63b4:	002a4503 	eoreq	r4, sl, r3, lsl #10
    63b8:	182e0200 	stmdane	lr!, {r9}
    63bc:	0000005e 	andeq	r0, r0, lr, asr r0
    63c0:	00004d04 	andeq	r4, r0, r4, lsl #26
    63c4:	08010200 	stmdaeq	r1, {r9}
    63c8:	00000400 	andeq	r0, r0, r0, lsl #8
    63cc:	9e070202 	cdpls	2, 0, cr0, cr7, cr2, {0}
    63d0:	0300000e 	movweq	r0, #14
    63d4:	000030d0 	ldrdeq	r3, [r0], -r0
    63d8:	82193402 	andshi	r3, r9, #33554432	; 0x2000000
    63dc:	04000000 	streq	r0, [r0], #-0
    63e0:	0000006c 	andeq	r0, r0, ip, rrx
    63e4:	00006c05 	andeq	r6, r0, r5, lsl #24
    63e8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    63ec:	00000b40 	andeq	r0, r0, r0, asr #22
    63f0:	3b070802 	blcc	1c8400 <__core1_vectors-0xe37c00>
    63f4:	0600000b 	streq	r0, [r0], -fp
    63f8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    63fc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6400:	000b4507 	andeq	r4, fp, r7, lsl #10
    6404:	232d0300 			; <UNDEFINED> instruction: 0x232d0300
    6408:	56020000 	strpl	r0, [r2], -r0
    640c:	0000971a 	andeq	r9, r0, sl, lsl r7
    6410:	b0040700 	andlt	r0, r4, r0, lsl #14
    6414:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6418:	00000000 	andeq	r0, r0, r0
    641c:	9d040802 	stcls	8, cr0, [r4, #-8]
    6420:	0900000a 	stmdbeq	r0, {r1, r3}
    6424:	02010204 	andeq	r0, r1, #4, 4	; 0x40000000
    6428:	0000180e 	andeq	r1, r0, lr, lsl #16
    642c:	000c880a 	andeq	r8, ip, sl, lsl #16
    6430:	015e0300 	cmpeq	lr, r0, lsl #6
    6434:	00009717 	andeq	r9, r0, r7, lsl r7
    6438:	30e20300 	rsccc	r0, r2, r0, lsl #6
    643c:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    6440:	00003f0e 	andeq	r3, r0, lr, lsl #30
    6444:	0add0300 	beq	ff74704c <__shm_end__+0xbf74704c>
    6448:	74040000 	strvc	r0, [r4], #-0
    644c:	00003f0e 	andeq	r3, r0, lr, lsl #30
    6450:	04040b00 	streq	r0, [r4], #-2816	; 0xfffff500
    6454:	010c03a5 	smlatbeq	ip, r5, r3, r0
    6458:	3a0c0000 	bcc	306460 <__core1_vectors-0xcf9ba0>
    645c:	04000002 	streq	r0, [r0], #-2
    6460:	00c50ca7 	sbceq	r0, r5, r7, lsr #25
    6464:	e50c0000 	str	r0, [ip, #-0]
    6468:	0400000a 	streq	r0, [r0], #-10
    646c:	010c13a8 	smlatbeq	ip, r8, r3, r1
    6470:	0d000000 	stceq	0, cr0, [r0, #-0]
    6474:	0000005e 	andeq	r0, r0, lr, asr r0
    6478:	0000011c 	andeq	r0, r0, ip, lsl r1
    647c:	0000970e 	andeq	r9, r0, lr, lsl #14
    6480:	0f000300 	svceq	0x00000300
    6484:	09a20408 	stmibeq	r2!, {r3, sl}
    6488:	00000140 	andeq	r0, r0, r0, asr #2
    648c:	000a6910 	andeq	r6, sl, r0, lsl r9
    6490:	07a40400 	streq	r0, [r4, r0, lsl #8]!
    6494:	00000090 	muleq	r0, r0, r0
    6498:	000b1000 	andeq	r1, fp, r0
    649c:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    64a0:	0000ea05 	andeq	lr, r0, r5, lsl #20
    64a4:	03000400 	movweq	r0, #1024	; 0x400
    64a8:	00000c20 	andeq	r0, r0, r0, lsr #24
    64ac:	1c03aa04 			; <UNDEFINED> instruction: 0x1c03aa04
    64b0:	03000001 	movweq	r0, #1
    64b4:	00000e49 	andeq	r0, r0, r9, asr #28
    64b8:	82191605 	andshi	r1, r9, #5242880	; 0x500000
    64bc:	03000000 	movweq	r0, #0
    64c0:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
    64c4:	900d0c06 	andls	r0, sp, r6, lsl #24
    64c8:	03000000 	movweq	r0, #0
    64cc:	00000bc7 	andeq	r0, r0, r7, asr #23
    64d0:	581b2305 	ldmdapl	fp, {r0, r2, r8, r9, sp}
    64d4:	11000001 	tstne	r0, r1
    64d8:	00000708 	andeq	r0, r0, r8, lsl #14
    64dc:	08340518 	ldmdaeq	r4!, {r3, r4, r8, sl}
    64e0:	000001ca 	andeq	r0, r0, sl, asr #3
    64e4:	000a3410 	andeq	r3, sl, r0, lsl r4
    64e8:	13360500 	teqne	r6, #0, 10
    64ec:	000001ca 	andeq	r0, r0, sl, asr #3
    64f0:	6b5f1200 	blvs	17cacf8 <__end__+0x7aecd8>
    64f4:	07370500 	ldreq	r0, [r7, -r0, lsl #10]!
    64f8:	00000090 	muleq	r0, r0, r0
    64fc:	07611004 	strbeq	r1, [r1, -r4]!
    6500:	37050000 	strcc	r0, [r5, -r0]
    6504:	0000900b 	andeq	r9, r0, fp
    6508:	bf100800 	svclt	0x00100800
    650c:	05000008 	streq	r0, [r0, #-8]
    6510:	00901437 	addseq	r1, r0, r7, lsr r4
    6514:	100c0000 	andne	r0, ip, r0
    6518:	00000601 	andeq	r0, r0, r1, lsl #12
    651c:	901b3705 	andsls	r3, fp, r5, lsl #14
    6520:	10000000 	andne	r0, r0, r0
    6524:	00785f12 	rsbseq	r5, r8, r2, lsl pc
    6528:	d00b3805 	andle	r3, fp, r5, lsl #16
    652c:	14000001 	strne	r0, [r0], #-1
    6530:	70040700 	andvc	r0, r4, r0, lsl #14
    6534:	0d000001 	stceq	0, cr0, [r0, #-4]
    6538:	0000014c 	andeq	r0, r0, ip, asr #2
    653c:	000001e0 	andeq	r0, r0, r0, ror #3
    6540:	0000970e 	andeq	r9, r0, lr, lsl #14
    6544:	11000000 	mrsne	r0, (UNDEF: 0)
    6548:	00000140 	andeq	r0, r0, r0, asr #2
    654c:	083c0524 	ldmdaeq	ip!, {r2, r5, r8, sl}
    6550:	00000263 	andeq	r0, r0, r3, ror #4
    6554:	00015c10 	andeq	r5, r1, r0, lsl ip
    6558:	093e0500 	ldmdbeq	lr!, {r8, sl}
    655c:	00000090 	muleq	r0, r0, r0
    6560:	0f8f1000 	svceq	0x008f1000
    6564:	3f050000 	svccc	0x00050000
    6568:	00009009 	andeq	r9, r0, r9
    656c:	b1100400 	tstlt	r0, r0, lsl #8
    6570:	0500000e 	streq	r0, [r0, #-14]
    6574:	00900940 	addseq	r0, r0, r0, asr #18
    6578:	10080000 	andne	r0, r8, r0
    657c:	000009fb 	strdeq	r0, [r0], -fp
    6580:	90094105 	andls	r4, r9, r5, lsl #2
    6584:	0c000000 	stceq	0, cr0, [r0], {-0}
    6588:	00038c10 	andeq	r8, r3, r0, lsl ip
    658c:	09420500 	stmdbeq	r2, {r8, sl}^
    6590:	00000090 	muleq	r0, r0, r0
    6594:	0de41010 	stcleq	0, cr1, [r4, #64]!	; 0x40
    6598:	43050000 	movwmi	r0, #20480	; 0x5000
    659c:	00009009 	andeq	r9, r0, r9
    65a0:	7b101400 	blvc	40b5a8 <__core1_vectors-0xbf4a58>
    65a4:	0500000a 	streq	r0, [r0, #-10]
    65a8:	00900944 	addseq	r0, r0, r4, asr #18
    65ac:	10180000 	andsne	r0, r8, r0
    65b0:	00000aa9 	andeq	r0, r0, r9, lsr #21
    65b4:	90094505 	andls	r4, r9, r5, lsl #10
    65b8:	1c000000 	stcne	0, cr0, [r0], {-0}
    65bc:	000f5510 	andeq	r5, pc, r0, lsl r5	; <UNPREDICTABLE>
    65c0:	09460500 	stmdbeq	r6, {r8, sl}^
    65c4:	00000090 	muleq	r0, r0, r0
    65c8:	63130020 	tstvs	r3, #32
    65cc:	08000002 	stmdaeq	r0, {r1}
    65d0:	084f0501 	stmdaeq	pc, {r0, r8, sl}^	; <UNPREDICTABLE>
    65d4:	000002a8 	andeq	r0, r0, r8, lsr #5
    65d8:	000f4110 	andeq	r4, pc, r0, lsl r1	; <UNPREDICTABLE>
    65dc:	0a500500 	beq	14079e4 <__end__+0x3eb9c4>
    65e0:	000002a8 	andeq	r0, r0, r8, lsr #5
    65e4:	0b661000 	bleq	198a5ec <__end__+0x96e5cc>
    65e8:	51050000 	mrspl	r0, (UNDEF: 5)
    65ec:	0002a809 	andeq	sl, r2, r9, lsl #16
    65f0:	d4148000 	ldrle	r8, [r4], #-0
    65f4:	0500000d 	streq	r0, [r0, #-13]
    65f8:	014c0a53 	cmpeq	ip, r3, asr sl
    65fc:	01000000 	mrseq	r0, (UNDEF: 0)
    6600:	000e1014 	andeq	r1, lr, r4, lsl r0
    6604:	0a560500 	beq	1587a0c <__end__+0x56b9ec>
    6608:	0000014c 	andeq	r0, r0, ip, asr #2
    660c:	0d000104 	stfeqs	f0, [r0, #-16]
    6610:	000000bc 	strheq	r0, [r0], -ip
    6614:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    6618:	0000970e 	andeq	r9, r0, lr, lsl #14
    661c:	13001f00 	movwne	r1, #3840	; 0xf00
    6620:	00000a54 	andeq	r0, r0, r4, asr sl
    6624:	62050190 	andvs	r0, r5, #144, 2	; 0x24
    6628:	0002fb08 	andeq	pc, r2, r8, lsl #22
    662c:	0a341000 	beq	d0a634 <__core1_vectors-0x2f59cc>
    6630:	63050000 	movwvs	r0, #20480	; 0x5000
    6634:	0002fb12 	andeq	pc, r2, r2, lsl fp	; <UNPREDICTABLE>
    6638:	04100000 	ldreq	r0, [r0], #-0
    663c:	0500000e 	streq	r0, [r0, #-14]
    6640:	00900664 	addseq	r0, r0, r4, ror #12
    6644:	10040000 	andne	r0, r4, r0
    6648:	00000493 	muleq	r0, r3, r4
    664c:	01096605 	tsteq	r9, r5, lsl #12
    6650:	08000003 	stmdaeq	r0, {r0, r1}
    6654:	00026310 	andeq	r6, r2, r0, lsl r3
    6658:	1e670500 	cdpne	5, 6, cr0, cr7, cr0, {0}
    665c:	00000263 	andeq	r0, r0, r3, ror #4
    6660:	04070088 	streq	r0, [r7], #-136	; 0xffffff78
    6664:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    6668:	0003110d 	andeq	r1, r3, sp, lsl #2
    666c:	00031100 	andeq	r1, r3, r0, lsl #2
    6670:	00970e00 	addseq	r0, r7, r0, lsl #28
    6674:	001f0000 	andseq	r0, pc, r0
    6678:	03170407 	tsteq	r7, #117440512	; 0x7000000
    667c:	11150000 	tstne	r5, r0
    6680:	00000e09 	andeq	r0, r0, r9, lsl #28
    6684:	087a0508 	ldmdaeq	sl!, {r3, r8, sl}^
    6688:	00000340 	andeq	r0, r0, r0, asr #6
    668c:	000ba510 	andeq	sl, fp, r0, lsl r5
    6690:	117b0500 	cmnne	fp, r0, lsl #10
    6694:	00000340 	andeq	r0, r0, r0, asr #6
    6698:	30db1000 	sbcscc	r1, fp, r0
    669c:	7c050000 	stcvc	0, cr0, [r5], {-0}
    66a0:	00009006 	andeq	r9, r0, r6
    66a4:	07000400 	streq	r0, [r0, -r0, lsl #8]
    66a8:	00005e04 	andeq	r5, r0, r4, lsl #28
    66ac:	06811100 	streq	r1, [r1], r0, lsl #2
    66b0:	05680000 	strbeq	r0, [r8, #-0]!
    66b4:	048908ba 	streq	r0, [r9], #2234	; 0x8ba
    66b8:	5f120000 	svcpl	0x00120000
    66bc:	bb050070 	bllt	146884 <__core1_vectors-0xeb977c>
    66c0:	00034012 	andeq	r4, r3, r2, lsl r0
    66c4:	5f120000 	svcpl	0x00120000
    66c8:	bc050072 	stclt	0, cr0, [r5], {114}	; 0x72
    66cc:	00009007 	andeq	r9, r0, r7
    66d0:	5f120400 	svcpl	0x00120400
    66d4:	bd050077 	stclt	0, cr0, [r5, #-476]	; 0xfffffe24
    66d8:	00009007 	andeq	r9, r0, r7
    66dc:	3a100800 	bcc	4086e4 <__core1_vectors-0xbf791c>
    66e0:	0500000a 	streq	r0, [r0, #-10]
    66e4:	002c09be 	strhteq	r0, [ip], -lr
    66e8:	100c0000 	andne	r0, ip, r0
    66ec:	0000025d 	andeq	r0, r0, sp, asr r2
    66f0:	2c09bf05 	stccs	15, cr11, [r9], {5}
    66f4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    66f8:	66625f12 	uqadd16vs	r5, r2, r2
    66fc:	11c00500 	bicne	r0, r0, r0, lsl #10
    6700:	00000318 	andeq	r0, r0, r8, lsl r3
    6704:	0df61010 	ldcleq	0, cr1, [r6, #64]!	; 0x40
    6708:	c1050000 	mrsgt	r0, (UNDEF: 5)
    670c:	00009007 	andeq	r9, r0, r7
    6710:	e4101800 	ldr	r1, [r0], #-2048	; 0xfffff800
    6714:	05000005 	streq	r0, [r0, #-5]
    6718:	00bc0ac8 	adcseq	r0, ip, r8, asr #21
    671c:	101c0000 	andsne	r0, ip, r0
    6720:	00001c39 	andeq	r1, r0, r9, lsr ip
    6724:	0d1dca05 	vldreq	s24, [sp, #-20]	; 0xffffffec
    6728:	20000006 	andcs	r0, r0, r6
    672c:	00117d10 	andseq	r7, r1, r0, lsl sp
    6730:	1dcc0500 	cfstr64ne	mvdx0, [ip]
    6734:	00000637 	andeq	r0, r0, r7, lsr r6
    6738:	0ac61024 	beq	ff18a7d0 <__shm_end__+0xbf18a7d0>
    673c:	cf050000 	svcgt	0x00050000
    6740:	00065b0d 	andeq	r5, r6, sp, lsl #22
    6744:	4a102800 	bmi	41074c <__core1_vectors-0xbef8b4>
    6748:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    674c:	067509d0 			; <UNDEFINED> instruction: 0x067509d0
    6750:	122c0000 	eorne	r0, ip, #0
    6754:	0062755f 	rsbeq	r7, r2, pc, asr r5
    6758:	1811d305 	ldmdane	r1, {r0, r2, r8, r9, ip, lr, pc}
    675c:	30000003 	andcc	r0, r0, r3
    6760:	70755f12 	rsbsvc	r5, r5, r2, lsl pc
    6764:	12d40500 	sbcsne	r0, r4, #0, 10
    6768:	00000340 	andeq	r0, r0, r0, asr #6
    676c:	755f1238 	ldrbvc	r1, [pc, #-568]	; 653c <__core1_vectors-0xff9ac4>
    6770:	d5050072 	strle	r0, [r5, #-114]	; 0xffffff8e
    6774:	00009007 	andeq	r9, r0, r7
    6778:	0a103c00 	beq	415780 <__core1_vectors-0xbea880>
    677c:	0500000a 	streq	r0, [r0, #-10]
    6780:	067b11d8 			; <UNDEFINED> instruction: 0x067b11d8
    6784:	10400000 	subne	r0, r0, r0
    6788:	00000156 	andeq	r0, r0, r6, asr r1
    678c:	8b11d905 	blhi	47cba8 <__core1_vectors-0xb83458>
    6790:	43000006 	movwmi	r0, #6
    6794:	626c5f12 	rsbvs	r5, ip, #18, 30	; 0x48
    6798:	11dc0500 	bicsne	r0, ip, r0, lsl #10
    679c:	00000318 	andeq	r0, r0, r8, lsl r3
    67a0:	2ee31044 	cdpcs	0, 14, cr1, cr3, cr4, {2}
    67a4:	df050000 	svcle	0x00050000
    67a8:	00009007 	andeq	r9, r0, r7
    67ac:	27104c00 	ldrcs	r4, [r0, -r0, lsl #24]
    67b0:	05000006 	streq	r0, [r0, #-6]
    67b4:	00d20ae0 	sbcseq	r0, r2, r0, ror #21
    67b8:	10500000 	subsne	r0, r0, r0
    67bc:	00002b3e 	andeq	r2, r0, lr, lsr fp
    67c0:	a712e305 	ldrge	lr, [r2, -r5, lsl #6]
    67c4:	54000004 	strpl	r0, [r0], #-4
    67c8:	0001ab10 	andeq	sl, r1, r0, lsl fp
    67cc:	0ce70500 	cfstr64eq	mvdx0, [r7]
    67d0:	00000164 	andeq	r0, r0, r4, ror #2
    67d4:	0a261058 	beq	98a93c <__core1_vectors-0x6756c4>
    67d8:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
    67dc:	0001400e 	andeq	r4, r1, lr
    67e0:	94105c00 	ldrls	r5, [r0], #-3072	; 0xfffff400
    67e4:	05000006 	streq	r0, [r0, #-6]
    67e8:	009009ea 	addseq	r0, r0, sl, ror #19
    67ec:	00640000 	rsbeq	r0, r4, r0
    67f0:	00009016 	andeq	r9, r0, r6, lsl r0
    67f4:	0004a700 	andeq	sl, r4, r0, lsl #14
    67f8:	04a71700 	strteq	r1, [r7], #1792	; 0x700
    67fc:	bc170000 	ldclt	0, cr0, [r7], {-0}
    6800:	17000000 	strne	r0, [r0, -r0]
    6804:	000005fb 	strdeq	r0, [r0], -fp
    6808:	00009017 	andeq	r9, r0, r7, lsl r0
    680c:	04070000 	streq	r0, [r7], #-0
    6810:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    6814:	0004a704 	andeq	sl, r4, r4, lsl #14
    6818:	04461800 	strbeq	r1, [r6], #-2048	; 0xfffff800
    681c:	04280000 	strteq	r0, [r8], #-0
    6820:	08026505 	stmdaeq	r2, {r0, r2, r8, sl, sp, lr}
    6824:	000005fb 	strdeq	r0, [r0], -fp
    6828:	00099219 	andeq	r9, r9, r9, lsl r2
    682c:	02670500 	rsbeq	r0, r7, #0, 10
    6830:	00009007 	andeq	r9, r0, r7
    6834:	22190000 	andscs	r0, r9, #0
    6838:	05000005 	streq	r0, [r0, #-5]
    683c:	e70b026c 	str	r0, [fp, -ip, ror #4]
    6840:	04000006 	streq	r0, [r0], #-6
    6844:	000b8719 	andeq	r8, fp, r9, lsl r7
    6848:	026c0500 	rsbeq	r0, ip, #0, 10
    684c:	0006e714 	andeq	lr, r6, r4, lsl r7
    6850:	10190800 	andsne	r0, r9, r0, lsl #16
    6854:	0500000a 	streq	r0, [r0, #-10]
    6858:	e71e026c 	ldr	r0, [lr, -ip, ror #4]
    685c:	0c000006 	stceq	0, cr0, [r0], {6}
    6860:	000dff19 	andeq	pc, sp, r9, lsl pc	; <UNPREDICTABLE>
    6864:	026e0500 	rsbeq	r0, lr, #0, 10
    6868:	00009008 	andeq	r9, r0, r8
    686c:	fa191000 	blx	64a874 <__core1_vectors-0x9b578c>
    6870:	05000007 	streq	r0, [r0, #-7]
    6874:	e708026f 	str	r0, [r8, -pc, ror #4]
    6878:	14000008 	strne	r0, [r0], #-8
    687c:	00042d19 	andeq	r2, r4, r9, lsl sp
    6880:	02720500 	rsbseq	r0, r2, #0, 10
    6884:	00009007 	andeq	r9, r0, r7
    6888:	41193000 	tstmi	r9, r0
    688c:	0500000e 	streq	r0, [r0, #-14]
    6890:	aa160273 	bge	587264 <__core1_vectors-0xa78d9c>
    6894:	34000000 	strcc	r0, [r0], #-0
    6898:	00068919 	andeq	r8, r6, r9, lsl r9
    689c:	02750500 	rsbseq	r0, r5, #0, 10
    68a0:	00009007 	andeq	r9, r0, r7
    68a4:	7d193800 	ldcvc	8, cr3, [r9, #-0]
    68a8:	05000007 	streq	r0, [r0, #-7]
    68ac:	020a0277 	andeq	r0, sl, #1879048199	; 0x70000007
    68b0:	3c000009 	stccc	0, cr0, [r0], {9}
    68b4:	000e5119 	andeq	r5, lr, r9, lsl r1
    68b8:	027a0500 	rsbseq	r0, sl, #0, 10
    68bc:	0001ca13 	andeq	ip, r1, r3, lsl sl
    68c0:	f1194000 			; <UNDEFINED> instruction: 0xf1194000
    68c4:	05000002 	streq	r0, [r0, #-2]
    68c8:	9007027b 	andls	r0, r7, fp, ror r2
    68cc:	44000000 	strmi	r0, [r0], #-0
    68d0:	00066f19 	andeq	r6, r6, r9, lsl pc
    68d4:	027c0500 	rsbseq	r0, ip, #0, 10
    68d8:	0001ca13 	andeq	ip, r1, r3, lsl sl
    68dc:	a9194800 	ldmdbge	r9, {fp, lr}
    68e0:	05000008 	streq	r0, [r0, #-8]
    68e4:	0814027d 	ldmdaeq	r4, {r0, r2, r3, r4, r5, r6, r9}
    68e8:	4c000009 	stcmi	0, cr0, [r0], {9}
    68ec:	00011019 	andeq	r1, r1, r9, lsl r0
    68f0:	02800500 	addeq	r0, r0, #0, 10
    68f4:	00009007 	andeq	r9, r0, r7
    68f8:	2f195000 	svccs	0x00195000
    68fc:	05000006 	streq	r0, [r0, #-6]
    6900:	fb090281 	blx	24730e <__core1_vectors-0xdb8cf2>
    6904:	54000005 	strpl	r0, [r0], #-5
    6908:	000a0519 	andeq	r0, sl, r9, lsl r5
    690c:	02a40500 	adceq	r0, r4, #0, 10
    6910:	0008c207 	andeq	ip, r8, r7, lsl #4
    6914:	541a5800 	ldrpl	r5, [sl], #-2048	; 0xfffff800
    6918:	0500000a 	streq	r0, [r0, #-10]
    691c:	fb1302a8 	blx	4c73c6 <__core1_vectors-0xb38c3a>
    6920:	48000002 	stmdami	r0, {r1}
    6924:	07871a01 	streq	r1, [r7, r1, lsl #20]
    6928:	a9050000 	stmdbge	r5, {}	; <UNPREDICTABLE>
    692c:	02b81202 	adcseq	r1, r8, #536870912	; 0x20000000
    6930:	014c0000 	mrseq	r0, (UNDEF: 76)
    6934:	00061d1a 	andeq	r1, r6, sl, lsl sp
    6938:	02ad0500 	adceq	r0, sp, #0, 10
    693c:	0009190c 	andeq	r1, r9, ip, lsl #18
    6940:	1a02dc00 	bne	bd948 <__core1_vectors-0xf426b8>
    6944:	00000834 	andeq	r0, r0, r4, lsr r8
    6948:	1002b205 	andne	fp, r2, r5, lsl #4
    694c:	000006a8 	andeq	r0, r0, r8, lsr #13
    6950:	131a02e0 	tstne	sl, #224, 4
    6954:	05000000 	streq	r0, [r0, #-0]
    6958:	250a02b4 	strcs	r0, [sl, #-692]	; 0xfffffd4c
    695c:	ec000009 	stc	0, cr0, [r0], {9}
    6960:	04070002 	streq	r0, [r7], #-2
    6964:	00000601 	andeq	r0, r0, r1, lsl #12
    6968:	09080102 	stmdbeq	r8, {r1, r8}
    696c:	04000004 	streq	r0, [r0], #-4
    6970:	00000601 	andeq	r0, r0, r1, lsl #12
    6974:	04890407 	streq	r0, [r9], #1031	; 0x407
    6978:	90160000 	andsls	r0, r6, r0
    697c:	31000000 	mrscc	r0, (UNDEF: 0)
    6980:	17000006 	strne	r0, [r0, -r6]
    6984:	000004a7 	andeq	r0, r0, r7, lsr #9
    6988:	0000bc17 	andeq	fp, r0, r7, lsl ip
    698c:	06311700 	ldrteq	r1, [r1], -r0, lsl #14
    6990:	90170000 	andsls	r0, r7, r0
    6994:	00000000 	andeq	r0, r0, r0
    6998:	06080407 	streq	r0, [r8], -r7, lsl #8
    699c:	04070000 	streq	r0, [r7], #-0
    69a0:	00000613 	andeq	r0, r0, r3, lsl r6
    69a4:	0000de16 	andeq	sp, r0, r6, lsl lr
    69a8:	00065b00 	andeq	r5, r6, r0, lsl #22
    69ac:	04a71700 	strteq	r1, [r7], #1792	; 0x700
    69b0:	bc170000 	ldclt	0, cr0, [r7], {-0}
    69b4:	17000000 	strne	r0, [r0, -r0]
    69b8:	000000de 	ldrdeq	r0, [r0], -lr
    69bc:	00009017 	andeq	r9, r0, r7, lsl r0
    69c0:	04070000 	streq	r0, [r7], #-0
    69c4:	0000063d 	andeq	r0, r0, sp, lsr r6
    69c8:	00009016 	andeq	r9, r0, r6, lsl r0
    69cc:	00067500 	andeq	r7, r6, r0, lsl #10
    69d0:	04a71700 	strteq	r1, [r7], #1792	; 0x700
    69d4:	bc170000 	ldclt	0, cr0, [r7], {-0}
    69d8:	00000000 	andeq	r0, r0, r0
    69dc:	06610407 	strbteq	r0, [r1], -r7, lsl #8
    69e0:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    69e4:	8b000000 	blhi	69ec <__core1_vectors-0xff9614>
    69e8:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    69ec:	00000097 	muleq	r0, r7, r0
    69f0:	5e0d0002 	cdppl	0, 0, cr0, cr13, cr2, {0}
    69f4:	9b000000 	blls	69fc <__core1_vectors-0xff9604>
    69f8:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    69fc:	00000097 	muleq	r0, r7, r0
    6a00:	120a0000 	andne	r0, sl, #0
    6a04:	0500000c 	streq	r0, [r0, #-12]
    6a08:	461a0124 	ldrmi	r0, [sl], -r4, lsr #2
    6a0c:	1b000003 	blne	6a20 <__core1_vectors-0xff95e0>
    6a10:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    6a14:	0128050c 			; <UNDEFINED> instruction: 0x0128050c
    6a18:	0006e108 	andeq	lr, r6, r8, lsl #2
    6a1c:	0a341900 	beq	d0ce24 <__core1_vectors-0x2f31dc>
    6a20:	2a050000 	bcs	146a28 <__core1_vectors-0xeb95d8>
    6a24:	06e11101 	strbteq	r1, [r1], r1, lsl #2
    6a28:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    6a2c:	0000082d 	andeq	r0, r0, sp, lsr #16
    6a30:	07012b05 	streq	r2, [r1, -r5, lsl #22]
    6a34:	00000090 	muleq	r0, r0, r0
    6a38:	08b31904 	ldmeq	r3!, {r2, r8, fp, ip}
    6a3c:	2c050000 	stccs	0, cr0, [r5], {-0}
    6a40:	06e70b01 	strbteq	r0, [r7], r1, lsl #22
    6a44:	00080000 	andeq	r0, r8, r0
    6a48:	06a80407 	strteq	r0, [r8], r7, lsl #8
    6a4c:	04070000 	streq	r0, [r7], #-0
    6a50:	0000069b 	muleq	r0, fp, r6
    6a54:	000b7f1b 	andeq	r7, fp, fp, lsl pc
    6a58:	44050e00 	strmi	r0, [r5], #-3584	; 0xfffff200
    6a5c:	07260801 	streq	r0, [r6, -r1, lsl #16]!
    6a60:	c0190000 	andsgt	r0, r9, r0
    6a64:	0500000a 	streq	r0, [r0, #-10]
    6a68:	26120145 	ldrcs	r0, [r2], -r5, asr #2
    6a6c:	00000007 	andeq	r0, r0, r7
    6a70:	0001bf19 	andeq	fp, r1, r9, lsl pc
    6a74:	01460500 	cmpeq	r6, r0, lsl #10
    6a78:	00072612 	andeq	r2, r7, r2, lsl r6
    6a7c:	8c190600 	ldchi	6, cr0, [r9], {-0}
    6a80:	0500000e 	streq	r0, [r0, #-14]
    6a84:	65120147 	ldrvs	r0, [r2, #-327]	; 0xfffffeb9
    6a88:	0c000000 	stceq	0, cr0, [r0], {-0}
    6a8c:	00650d00 	rsbeq	r0, r5, r0, lsl #26
    6a90:	07360000 	ldreq	r0, [r6, -r0]!
    6a94:	970e0000 	strls	r0, [lr, -r0]
    6a98:	02000000 	andeq	r0, r0, #0
    6a9c:	05d01c00 	ldrbeq	r1, [r0, #3072]	; 0xc00
    6aa0:	4b070285 	blmi	1c74bc <__core1_vectors-0xe38b44>
    6aa4:	19000008 	stmdbne	r0, {r3}
    6aa8:	000003ce 	andeq	r0, r0, lr, asr #7
    6aac:	18028705 	stmdane	r2, {r0, r2, r8, r9, sl, pc}
    6ab0:	00000097 	muleq	r0, r7, r0
    6ab4:	0bab1900 	bleq	feaccebc <__shm_end__+0xbeaccebc>
    6ab8:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    6abc:	05fb1202 	ldrbeq	r1, [fp, #514]!	; 0x202
    6ac0:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    6ac4:	0000002d 	andeq	r0, r0, sp, lsr #32
    6ac8:	10028905 	andne	r8, r2, r5, lsl #18
    6acc:	0000084b 	andeq	r0, r0, fp, asr #16
    6ad0:	03101908 	tsteq	r0, #8, 18	; 0x20000
    6ad4:	8a050000 	bhi	146adc <__core1_vectors-0xeb9524>
    6ad8:	01e01702 	mvneq	r1, r2, lsl #14
    6adc:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6ae0:	00000883 	andeq	r0, r0, r3, lsl #17
    6ae4:	0f028b05 	svceq	0x00028b05
    6ae8:	00000090 	muleq	r0, r0, r0
    6aec:	0a2f1948 	beq	bcd014 <__core1_vectors-0x432fec>
    6af0:	8c050000 	stchi	0, cr0, [r5], {-0}
    6af4:	00892c02 	addeq	r2, r9, r2, lsl #24
    6af8:	19500000 	ldmdbne	r0, {}^	; <UNPREDICTABLE>
    6afc:	00000c76 	andeq	r0, r0, r6, ror ip
    6b00:	1a028d05 	bne	a9f1c <__core1_vectors-0xf560e4>
    6b04:	000006ed 	andeq	r0, r0, sp, ror #13
    6b08:	0d541958 	vldreq.16	s3, [r4, #-176]	; 0xffffff50	; <UNPREDICTABLE>
    6b0c:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
    6b10:	01401602 	cmpeq	r0, r2, lsl #12
    6b14:	19680000 	stmdbne	r8!, {}^	; <UNPREDICTABLE>
    6b18:	00000afa 	strdeq	r0, [r0], -sl
    6b1c:	16028f05 	strne	r8, [r2], -r5, lsl #30
    6b20:	00000140 	andeq	r0, r0, r0, asr #2
    6b24:	0a181970 	beq	60d0ec <__core1_vectors-0x9f2f14>
    6b28:	90050000 	andls	r0, r5, r0
    6b2c:	01401602 	cmpeq	r0, r2, lsl #12
    6b30:	19780000 	ldmdbne	r8!, {}^	; <UNPREDICTABLE>
    6b34:	00000165 	andeq	r0, r0, r5, ror #2
    6b38:	10029105 	andne	r9, r2, r5, lsl #2
    6b3c:	0000085b 	andeq	r0, r0, fp, asr r8
    6b40:	06e31980 	strbteq	r1, [r3], r0, lsl #19
    6b44:	92050000 	andls	r0, r5, #0
    6b48:	086b1002 	stmdaeq	fp!, {r1, ip}^
    6b4c:	19880000 	stmibne	r8, {}	; <UNPREDICTABLE>
    6b50:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    6b54:	0f029305 	svceq	0x00029305
    6b58:	00000090 	muleq	r0, r0, r0
    6b5c:	02e319a0 	rsceq	r1, r3, #160, 18	; 0x280000
    6b60:	94050000 	strls	r0, [r5], #-0
    6b64:	01401602 	cmpeq	r0, r2, lsl #12
    6b68:	19a40000 	stmibne	r4!, {}	; <UNPREDICTABLE>
    6b6c:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
    6b70:	16029505 	strne	r9, [r2], -r5, lsl #10
    6b74:	00000140 	andeq	r0, r0, r0, asr #2
    6b78:	0f0119ac 	svceq	0x000119ac
    6b7c:	96050000 	strls	r0, [r5], -r0
    6b80:	01401602 	cmpeq	r0, r2, lsl #12
    6b84:	19b40000 	ldmibne	r4!, {}	; <UNPREDICTABLE>
    6b88:	000009ec 	andeq	r0, r0, ip, ror #19
    6b8c:	16029705 	strne	r9, [r2], -r5, lsl #14
    6b90:	00000140 	andeq	r0, r0, r0, asr #2
    6b94:	014519bc 	strheq	r1, [r5, #-156]	; 0xffffff64
    6b98:	98050000 	stmdals	r5, {}	; <UNPREDICTABLE>
    6b9c:	01401602 	cmpeq	r0, r2, lsl #12
    6ba0:	19c40000 	stmibne	r4, {}^	; <UNPREDICTABLE>
    6ba4:	00000990 	muleq	r0, r0, r9
    6ba8:	08029905 	stmdaeq	r2, {r0, r2, r8, fp, ip, pc}
    6bac:	00000090 	muleq	r0, r0, r0
    6bb0:	010d00cc 	smlabteq	sp, ip, r0, r0
    6bb4:	5b000006 	blpl	6bd4 <__core1_vectors-0xff942c>
    6bb8:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    6bbc:	00000097 	muleq	r0, r7, r0
    6bc0:	010d0019 	tsteq	sp, r9, lsl r0
    6bc4:	6b000006 	blvs	6be4 <__core1_vectors-0xff941c>
    6bc8:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    6bcc:	00000097 	muleq	r0, r7, r0
    6bd0:	010d0007 	tsteq	sp, r7
    6bd4:	7b000006 	blvc	6bf4 <__core1_vectors-0xff940c>
    6bd8:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    6bdc:	00000097 	muleq	r0, r7, r0
    6be0:	f01c0017 			; <UNDEFINED> instruction: 0xf01c0017
    6be4:	07029e05 	streq	r9, [r2, -r5, lsl #28]
    6be8:	000008a2 	andeq	r0, r0, r2, lsr #17
    6bec:	000e1819 	andeq	r1, lr, r9, lsl r8
    6bf0:	02a10500 	adceq	r0, r1, #0, 10
    6bf4:	0008a21b 	andeq	sl, r8, fp, lsl r2
    6bf8:	48190000 	ldmdami	r9, {}	; <UNPREDICTABLE>
    6bfc:	05000008 	streq	r0, [r0, #-8]
    6c00:	b21802a2 	andslt	r0, r8, #536870922	; 0x2000000a
    6c04:	78000008 	stmdavc	r0, {r3}
    6c08:	03400d00 	movteq	r0, #3328	; 0xd00
    6c0c:	08b20000 	ldmeq	r2!, {}	; <UNPREDICTABLE>
    6c10:	970e0000 	strls	r0, [lr, -r0]
    6c14:	1d000000 	stcne	0, cr0, [r0, #-0]
    6c18:	00970d00 	addseq	r0, r7, r0, lsl #26
    6c1c:	08c20000 	stmiaeq	r2, {}^	; <UNPREDICTABLE>
    6c20:	970e0000 	strls	r0, [lr, -r0]
    6c24:	1d000000 	stcne	0, cr0, [r0, #-0]
    6c28:	05f01d00 	ldrbeq	r1, [r0, #3328]!	; 0xd00
    6c2c:	e7030283 	str	r0, [r3, -r3, lsl #5]
    6c30:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    6c34:	00000446 	andeq	r0, r0, r6, asr #8
    6c38:	0b029a05 	bleq	ad454 <__core1_vectors-0xf52bac>
    6c3c:	00000736 	andeq	r0, r0, r6, lsr r7
    6c40:	0001381e 	andeq	r3, r1, lr, lsl r8
    6c44:	02a30500 	adceq	r0, r3, #0, 10
    6c48:	00087b0b 	andeq	r7, r8, fp, lsl #22
    6c4c:	010d0000 	mrseq	r0, (UNDEF: 13)
    6c50:	f7000006 			; <UNDEFINED> instruction: 0xf7000006
    6c54:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    6c58:	00000097 	muleq	r0, r7, r0
    6c5c:	021f0018 	andseq	r0, pc, #24
    6c60:	17000009 	strne	r0, [r0, -r9]
    6c64:	000004a7 	andeq	r0, r0, r7, lsr #9
    6c68:	f7040700 			; <UNDEFINED> instruction: 0xf7040700
    6c6c:	07000008 	streq	r0, [r0, -r8]
    6c70:	0001ca04 	andeq	ip, r1, r4, lsl #20
    6c74:	09191f00 	ldmdbeq	r9, {r8, r9, sl, fp, ip}
    6c78:	90170000 	andsls	r0, r7, r0
    6c7c:	00000000 	andeq	r0, r0, r0
    6c80:	091f0407 	ldmdbeq	pc, {r0, r1, r2, sl}	; <UNPREDICTABLE>
    6c84:	04070000 	streq	r0, [r7], #-0
    6c88:	0000090e 	andeq	r0, r0, lr, lsl #18
    6c8c:	00069b0d 	andeq	r9, r6, sp, lsl #22
    6c90:	00093500 	andeq	r3, r9, r0, lsl #10
    6c94:	00970e00 	addseq	r0, r7, r0, lsl #28
    6c98:	00020000 	andeq	r0, r2, r0
    6c9c:	00045420 	andeq	r5, r4, r0, lsr #8
    6ca0:	03330500 	teqeq	r3, #0, 10
    6ca4:	0004a717 	andeq	sl, r4, r7, lsl r7
    6ca8:	044d2000 	strbeq	r2, [sp], #-0
    6cac:	34050000 	strcc	r0, [r5], #-0
    6cb0:	04ad1d03 	strteq	r1, [sp], #3331	; 0xd03
    6cb4:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    6cb8:	5f000000 	svcpl	0x00000000
    6cbc:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    6cc0:	00000097 	muleq	r0, r7, r0
    6cc4:	4f040003 	svcmi	0x00040003
    6cc8:	21000009 	tstcs	r0, r9
    6ccc:	00002a2a 	andeq	r2, r0, sl, lsr #20
    6cd0:	5f170807 	svcpl	0x00170807
    6cd4:	05000009 	streq	r0, [r0, #-9]
    6cd8:	00000003 	andeq	r0, r0, r3
    6cdc:	29192100 	ldmdbcs	r9, {r8, sp}
    6ce0:	0a070000 	beq	1c6ce8 <__core1_vectors-0xe39318>
    6ce4:	00095f17 	andeq	r5, r9, r7, lsl pc
    6ce8:	00030500 	andeq	r0, r3, r0, lsl #10
    6cec:	21000000 	mrscs	r0, (UNDEF: 0)
    6cf0:	000029d0 	ldrdeq	r2, [r0], -r0
    6cf4:	5f170d07 	svcpl	0x00170d07
    6cf8:	05000009 	streq	r0, [r0, #-9]
    6cfc:	00000003 	andeq	r0, r0, r3
    6d00:	29942100 	ldmibcs	r4, {r8, sp}
    6d04:	0e070000 	cdpeq	0, 0, cr0, cr7, cr0, {0}
    6d08:	00095f17 	andeq	r5, r9, r7, lsl pc
    6d0c:	00030500 	andeq	r0, r3, r0, lsl #10
    6d10:	22000000 	andcs	r0, r0, #0
    6d14:	0000292d 	andeq	r2, r0, sp, lsr #18
    6d18:	7d1a1107 	ldfvcs	f1, [sl, #-28]	; 0xffffffe4
    6d1c:	22000000 	andcs	r0, r0, #0
    6d20:	00002a06 	andeq	r2, r0, r6, lsl #20
    6d24:	7d1a1207 	lfmvc	f1, 4, [sl, #-28]	; 0xffffffe4
    6d28:	22000000 	andcs	r0, r0, #0
    6d2c:	00002a60 	andeq	r2, r0, r0, ror #20
    6d30:	7d1a1307 	ldcvc	3, cr1, [sl, #-28]	; 0xffffffe4
    6d34:	23000000 	movwcs	r0, #0
    6d38:	07080100 	streq	r0, [r8, -r0, lsl #2]
    6d3c:	000a3609 	andeq	r3, sl, r9, lsl #12
    6d40:	2a001000 	bcs	ad48 <__core1_vectors-0xff52b8>
    6d44:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    6d48:	00007d17 	andeq	r7, r0, r7, lsl sp
    6d4c:	56100000 	ldrpl	r0, [r0], -r0
    6d50:	08000029 	stmdaeq	r0, {r0, r3, r5}
    6d54:	007d170a 	rsbseq	r1, sp, sl, lsl #14
    6d58:	10040000 	andne	r0, r4, r0
    6d5c:	00002962 	andeq	r2, r0, r2, ror #18
    6d60:	7d170b08 	vldrvc	d0, [r7, #-32]	; 0xffffffe0
    6d64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6d68:	00294b10 	eoreq	r4, r9, r0, lsl fp
    6d6c:	170c0800 	strne	r0, [ip, -r0, lsl #16]
    6d70:	0000007d 	andeq	r0, r0, sp, ror r0
    6d74:	2a3c100c 	bcs	f0adac <__core1_vectors-0xf5254>
    6d78:	0d080000 	stceq	0, cr0, [r8, #-0]
    6d7c:	00007d17 	andeq	r7, r0, r7, lsl sp
    6d80:	6e101000 	cdpvs	0, 1, cr1, cr0, cr0, {0}
    6d84:	08000029 	stmdaeq	r0, {r0, r3, r5}
    6d88:	007d170e 	rsbseq	r1, sp, lr, lsl #14
    6d8c:	10140000 	andsne	r0, r4, r0
    6d90:	00002982 	andeq	r2, r0, r2, lsl #19
    6d94:	46170f08 	ldrmi	r0, [r7], -r8, lsl #30
    6d98:	1800000a 	stmdane	r0, {r1, r3}
    6d9c:	007d0d00 	rsbseq	r0, sp, r0, lsl #26
    6da0:	0a460000 	beq	1186da8 <__end__+0x16ad88>
    6da4:	970e0000 	strls	r0, [lr, -r0]
    6da8:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    6dac:	0a360500 	beq	d881b4 <__core1_vectors-0x277e4c>
    6db0:	37030000 	strcc	r0, [r3, -r0]
    6db4:	08000029 	stmdaeq	r0, {r0, r3, r5}
    6db8:	09d00311 	ldmibeq	r0, {r0, r4, r8, r9}^
    6dbc:	42220000 	eormi	r0, r2, #0
    6dc0:	01000029 	tsteq	r0, r9, lsr #32
    6dc4:	06010d2e 	streq	r0, [r1], -lr, lsr #26
    6dc8:	77240000 	strvc	r0, [r4, -r0]!
    6dcc:	01000029 	tsteq	r0, r9, lsr #32
    6dd0:	4bd40635 	blmi	ff5086ac <__shm_end__+0xbf5086ac>
    6dd4:	00d00100 	sbcseq	r0, r0, r0, lsl #2
    6dd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    6ddc:	00298b25 	eoreq	r8, r9, r5, lsr #22
    6de0:	142f0100 	strtne	r0, [pc], #-256	; 6de8 <__core1_vectors-0xff9218>
    6de4:	01004ba8 	smlatbeq	r0, r8, fp, r4
    6de8:	0000002c 	andeq	r0, r0, ip, lsr #32
    6dec:	0a9b9c01 	beq	fe6eddf8 <__shm_end__+0xbe6eddf8>
    6df0:	03260000 			; <UNDEFINED> instruction: 0x03260000
    6df4:	01000011 	tsteq	r0, r1, lsl r0
    6df8:	00bc232f 	adcseq	r2, ip, pc, lsr #6
    6dfc:	91020000 	mrsls	r0, (UNDEF: 2)
    6e00:	57250074 			; <UNDEFINED> instruction: 0x57250074
    6e04:	0100002a 	tsteq	r0, sl, lsr #32
    6e08:	4b4c1427 	blmi	130beac <__end__+0x2efe8c>
    6e0c:	005c0100 	subseq	r0, ip, r0, lsl #2
    6e10:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e14:	00000ae1 	andeq	r0, r0, r1, ror #21
    6e18:	0029b622 	eoreq	fp, r9, r2, lsr #12
    6e1c:	14290100 	strtne	r0, [r9], #-256	; 0xffffff00
    6e20:	0000004d 	andeq	r0, r0, sp, asr #32
    6e24:	0029c422 	eoreq	ip, r9, r2, lsr #8
    6e28:	142a0100 	strtne	r0, [sl], #-256	; 0xffffff00
    6e2c:	0000004d 	andeq	r0, r0, sp, asr #32
    6e30:	004b5827 	subeq	r5, fp, r7, lsr #16
    6e34:	00003c01 	andeq	r3, r0, r1, lsl #24
    6e38:	00702800 	rsbseq	r2, r0, r0, lsl #16
    6e3c:	e1132b01 	tst	r3, r1, lsl #22
    6e40:	0200000a 	andeq	r0, r0, #10
    6e44:	00007491 	muleq	r0, r1, r4
    6e48:	004d0407 	subeq	r0, sp, r7, lsl #8
    6e4c:	4d250000 	stcmi	0, cr0, [r5, #-0]
    6e50:	0100002a 	tsteq	r0, sl, lsr #32
    6e54:	4ad4141a 	bmi	ff50bec4 <__shm_end__+0xbf50bec4>
    6e58:	00780100 	rsbseq	r0, r8, r0, lsl #2
    6e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e60:	00000b4a 	andeq	r0, r0, sl, asr #22
    6e64:	0029e322 	eoreq	lr, r9, r2, lsr #6
    6e68:	141c0100 	ldrne	r0, [ip], #-256	; 0xffffff00
    6e6c:	0000004d 	andeq	r0, r0, sp, asr #32
    6e70:	0029a922 	eoreq	sl, r9, r2, lsr #18
    6e74:	141d0100 	ldrne	r0, [sp], #-256	; 0xffffff00
    6e78:	0000004d 	andeq	r0, r0, sp, asr #32
    6e7c:	0029f222 	eoreq	pc, r9, r2, lsr #4
    6e80:	141e0100 	ldrne	r0, [lr], #-256	; 0xffffff00
    6e84:	0000004d 	andeq	r0, r0, sp, asr #32
    6e88:	63727328 	cmnvs	r2, #40, 6	; 0xa0000000
    6e8c:	14200100 	strtne	r0, [r0], #-256	; 0xffffff00
    6e90:	00000b4a 	andeq	r0, r0, sl, asr #22
    6e94:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    6e98:	01004aec 	smlatteq	r0, ip, sl, r4
    6e9c:	0000004c 	andeq	r0, r0, ip, asr #32
    6ea0:	74736428 	ldrbtvc	r6, [r3], #-1064	; 0xfffffbd8
    6ea4:	13210100 			; <UNDEFINED> instruction: 0x13210100
    6ea8:	00000ae1 	andeq	r0, r0, r1, ror #21
    6eac:	00709102 	rsbseq	r9, r0, r2, lsl #2
    6eb0:	59040700 	stmdbpl	r4, {r8, r9, sl}
    6eb4:	00000000 	andeq	r0, r0, r0
    6eb8:	00000122 	andeq	r0, r0, r2, lsr #2
    6ebc:	11260004 			; <UNDEFINED> instruction: 0x11260004
    6ec0:	01040000 	mrseq	r0, (UNDEF: 4)
    6ec4:	0000003a 	andeq	r0, r0, sl, lsr r0
    6ec8:	002a8f0c 	eoreq	r8, sl, ip, lsl #30
    6ecc:	000bd000 	andeq	sp, fp, r0
    6ed0:	00052000 	andeq	r2, r5, r0
    6ed4:	00000000 	andeq	r0, r0, r0
    6ed8:	002da400 	eoreq	sl, sp, r0, lsl #8
    6edc:	06010200 	streq	r0, [r1], -r0, lsl #4
    6ee0:	00000402 	andeq	r0, r0, r2, lsl #8
    6ee4:	61050202 	tstvs	r5, r2, lsl #4
    6ee8:	0200000d 	andeq	r0, r0, #13
    6eec:	080a0504 	stmdaeq	sl, {r2, r8, sl}
    6ef0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6ef4:	00080505 	andeq	r0, r8, r5, lsl #10
    6ef8:	08010200 	stmdaeq	r1, {r9}
    6efc:	00000400 	andeq	r0, r0, r0, lsl #8
    6f00:	9e070202 	cdpls	2, 0, cr0, cr7, cr2, {0}
    6f04:	0200000e 	andeq	r0, r0, #14
    6f08:	0b400704 	bleq	1008b20 <f2s_free_clk+0xb1c>
    6f0c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6f10:	000b3b07 	andeq	r3, fp, r7, lsl #22
    6f14:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    6f18:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6f1c:	45070402 	strmi	r0, [r7, #-1026]	; 0xfffffbfe
    6f20:	0400000b 	streq	r0, [r0], #-11
    6f24:	000029b6 			; <UNDEFINED> instruction: 0x000029b6
    6f28:	4f160301 	svcmi	0x00160301
    6f2c:	04000000 	streq	r0, [r0], #-0
    6f30:	000029c4 	andeq	r2, r0, r4, asr #19
    6f34:	4f250301 	svcmi	0x00250301
    6f38:	04000000 	streq	r0, [r0], #-0
    6f3c:	00002a81 	andeq	r2, r0, r1, lsl #21
    6f40:	4f320301 	svcmi	0x00320301
    6f44:	04000000 	streq	r0, [r0], #-0
    6f48:	000029e3 	andeq	r2, r0, r3, ror #19
    6f4c:	4f160401 	svcmi	0x00160401
    6f50:	04000000 	streq	r0, [r0], #-0
    6f54:	000029a9 	andeq	r2, r0, r9, lsr #19
    6f58:	4f260401 	svcmi	0x00260401
    6f5c:	04000000 	streq	r0, [r0], #-0
    6f60:	000029f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    6f64:	4f340401 	svcmi	0x00340401
    6f68:	05000000 	streq	r0, [r0, #-0]
    6f6c:	00002aa9 	andeq	r2, r0, r9, lsr #21
    6f70:	c8442e01 	stmdagt	r4, {r0, r9, sl, fp, sp}^
    6f74:	0c010000 	stceq	0, cr0, [r1], {-0}
    6f78:	01000000 	mrseq	r0, (UNDEF: 0)
    6f7c:	2a6e069c 	bcs	1b889f4 <__end__+0xb6c9d4>
    6f80:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6f84:	0000203d 	andeq	r2, r0, sp, lsr r0
    6f88:	0000a801 	andeq	sl, r0, r1, lsl #16
    6f8c:	1f9c0100 	svcne	0x009c0100
    6f90:	07000001 	streq	r0, [r0, -r1]
    6f94:	0100002c 	tsteq	r0, ip, lsr #32
    6f98:	00000058 	andeq	r0, r0, r8, asr r0
    6f9c:	00000107 	andeq	r0, r0, r7, lsl #2
    6fa0:	63727308 	cmnvs	r2, #8, 6	; 0x20000000
    6fa4:	160c0100 	strne	r0, [ip], -r0, lsl #2
    6fa8:	0000011f 	andeq	r0, r0, pc, lsl r1
    6fac:	08749102 	ldmdaeq	r4!, {r1, r8, ip, pc}^
    6fb0:	00747364 	rsbseq	r7, r4, r4, ror #6
    6fb4:	1f2d0c01 	svcne	0x002d0c01
    6fb8:	02000001 	andeq	r0, r0, #1
    6fbc:	09007091 	stmdbeq	r0, {r0, r4, r7, ip, sp, lr}
    6fc0:	01000084 	smlabbeq	r0, r4, r0, r0
    6fc4:	0000003c 	andeq	r0, r0, ip, lsr r0
    6fc8:	01007008 	tsteq	r0, r8
    6fcc:	011f1911 	tsteq	pc, r1, lsl r9	; <UNPREDICTABLE>
    6fd0:	91020000 	mrsls	r0, (UNDEF: 2)
    6fd4:	0a00006c 	beq	718c <__core1_vectors-0xff8e74>
    6fd8:	00004f04 	andeq	r4, r0, r4, lsl #30
    6fdc:	0b7b0000 	bleq	1ec6fe4 <__end__+0xeaafc4>
    6fe0:	00040000 	andeq	r0, r4, r0
    6fe4:	000011c5 	andeq	r1, r0, r5, asr #3
    6fe8:	003a0104 	eorseq	r0, sl, r4, lsl #2
    6fec:	d40c0000 	strle	r0, [ip], #-0
    6ff0:	d000002a 	andle	r0, r0, sl, lsr #32
    6ff4:	3800000b 	stmdacc	r0, {r0, r1, r3}
    6ff8:	00000005 	andeq	r0, r0, r5
    6ffc:	55000000 	strpl	r0, [r0, #-0]
    7000:	0200002e 	andeq	r0, r0, #46	; 0x2e
    7004:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7008:	87030074 	smlsdxhi	r3, r4, r0, r0
    700c:	02000030 	andeq	r0, r0, #48	; 0x30
    7010:	003817d1 	ldrsbteq	r1, [r8], -r1
    7014:	04040000 	streq	r0, [r4], #-0
    7018:	000b4507 	andeq	r4, fp, r7, lsl #10
    701c:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    7020:	00000805 	andeq	r0, r0, r5, lsl #16
    7024:	9d040804 	stcls	8, cr0, [r4, #-16]
    7028:	0400000a 	streq	r0, [r0], #-10
    702c:	04020601 	streq	r0, [r2], #-1537	; 0xfffff9ff
    7030:	02040000 	andeq	r0, r4, #0
    7034:	000d6105 	andeq	r6, sp, r5, lsl #2
    7038:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    703c:	0000080a 	andeq	r0, r0, sl, lsl #16
    7040:	002a4503 	eoreq	r4, sl, r3, lsl #10
    7044:	182e0300 	stmdane	lr!, {r8, r9}
    7048:	00000073 	andeq	r0, r0, r3, ror r0
    704c:	00006205 	andeq	r6, r0, r5, lsl #4
    7050:	08010400 	stmdaeq	r1, {sl}
    7054:	00000400 	andeq	r0, r0, r0, lsl #8
    7058:	9e070204 	cdpls	2, 0, cr0, cr7, cr4, {0}
    705c:	0400000e 	streq	r0, [r0], #-14
    7060:	0b400704 	bleq	1008c78 <f2s_free_clk+0xc74>
    7064:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    7068:	000b3b07 	andeq	r3, fp, r7, lsl #22
    706c:	26910300 	ldrcs	r0, [r1], r0, lsl #6
    7070:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    7074:	00009b1b 	andeq	r9, r0, fp, lsl fp
    7078:	261d0600 	ldrcs	r0, [sp], -r0, lsl #12
    707c:	0a040000 	beq	107084 <__core1_vectors-0xef8f7c>
    7080:	0000b200 	andeq	fp, r0, r0, lsl #4
    7084:	27140700 	ldrcs	r0, [r4, -r0, lsl #14]
    7088:	00b20000 	adcseq	r0, r2, r0
    708c:	00000000 	andeq	r0, r0, r0
    7090:	1f030408 	svcne	0x00030408
    7094:	05000026 	streq	r0, [r0, #-38]	; 0xffffffda
    7098:	008f182e 	addeq	r1, pc, lr, lsr #16
    709c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    70a0:	0200000c 	andeq	r0, r0, #12
    70a4:	3817015e 	ldmdacc	r7, {r1, r2, r3, r4, r6, r8}
    70a8:	03000000 	movweq	r0, #0
    70ac:	000030e2 	andeq	r3, r0, r2, ror #1
    70b0:	5b0e2e06 	blpl	3928d0 <__core1_vectors-0xc6d730>
    70b4:	03000000 	movweq	r0, #0
    70b8:	00000add 	ldrdeq	r0, [r0], -sp
    70bc:	5b0e7406 	blpl	3a40dc <__core1_vectors-0xc5bf24>
    70c0:	0a000000 	beq	70c8 <__core1_vectors-0xff8f38>
    70c4:	03a50604 			; <UNDEFINED> instruction: 0x03a50604
    70c8:	00000107 	andeq	r0, r0, r7, lsl #2
    70cc:	00023a0b 	andeq	r3, r2, fp, lsl #20
    70d0:	0ca70600 	stceq	6, cr0, [r7]
    70d4:	000000c0 	andeq	r0, r0, r0, asr #1
    70d8:	000ae50b 	andeq	lr, sl, fp, lsl #10
    70dc:	13a80600 			; <UNDEFINED> instruction: 0x13a80600
    70e0:	00000107 	andeq	r0, r0, r7, lsl #2
    70e4:	00730c00 	rsbseq	r0, r3, r0, lsl #24
    70e8:	01170000 	tsteq	r7, r0
    70ec:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    70f0:	03000000 	movweq	r0, #0
    70f4:	06080e00 	streq	r0, [r8], -r0, lsl #28
    70f8:	013b09a2 	teqeq	fp, r2, lsr #19
    70fc:	690f0000 	stmdbvs	pc, {}	; <UNPREDICTABLE>
    7100:	0600000a 	streq	r0, [r0], -sl
    7104:	002507a4 	eoreq	r0, r5, r4, lsr #15
    7108:	0f000000 	svceq	0x00000000
    710c:	0000000b 	andeq	r0, r0, fp
    7110:	e505a906 	str	sl, [r5, #-2310]	; 0xfffff6fa
    7114:	04000000 	streq	r0, [r0], #-0
    7118:	0c200300 	stceq	3, cr0, [r0], #-0
    711c:	aa060000 	bge	187124 <__core1_vectors-0xe78edc>
    7120:	00011703 	andeq	r1, r1, r3, lsl #14
    7124:	0e490300 	cdpeq	3, 4, cr0, cr9, cr0, {0}
    7128:	16070000 	strne	r0, [r7], -r0
    712c:	00008119 	andeq	r8, r0, r9, lsl r1
    7130:	06b30300 	ldrteq	r0, [r3], r0, lsl #6
    7134:	0c080000 	stceq	0, cr0, [r8], {-0}
    7138:	0000250d 	andeq	r2, r0, sp, lsl #10
    713c:	0bc70300 	bleq	ff1c7d44 <__shm_end__+0xbf1c7d44>
    7140:	23070000 	movwcs	r0, #28672	; 0x7000
    7144:	0001531b 	andeq	r5, r1, fp, lsl r3
    7148:	07081000 	streq	r1, [r8, -r0]
    714c:	07180000 	ldreq	r0, [r8, -r0]
    7150:	01c50834 	biceq	r0, r5, r4, lsr r8
    7154:	340f0000 	strcc	r0, [pc], #-0	; 715c <__core1_vectors-0xff8ea4>
    7158:	0700000a 	streq	r0, [r0, -sl]
    715c:	01c51336 	biceq	r1, r5, r6, lsr r3
    7160:	11000000 	mrsne	r0, (UNDEF: 0)
    7164:	07006b5f 	smlsdeq	r0, pc, fp, r6	; <UNPREDICTABLE>
    7168:	00250737 	eoreq	r0, r5, r7, lsr r7
    716c:	0f040000 	svceq	0x00040000
    7170:	00000761 	andeq	r0, r0, r1, ror #14
    7174:	250b3707 	strcs	r3, [fp, #-1799]	; 0xfffff8f9
    7178:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    717c:	0008bf0f 	andeq	fp, r8, pc, lsl #30
    7180:	14370700 	ldrtne	r0, [r7], #-1792	; 0xfffff900
    7184:	00000025 	andeq	r0, r0, r5, lsr #32
    7188:	06010f0c 	streq	r0, [r1], -ip, lsl #30
    718c:	37070000 	strcc	r0, [r7, -r0]
    7190:	0000251b 	andeq	r2, r0, fp, lsl r5
    7194:	5f111000 	svcpl	0x00111000
    7198:	38070078 	stmdacc	r7, {r3, r4, r5, r6}
    719c:	0001cb0b 	andeq	ip, r1, fp, lsl #22
    71a0:	12001400 	andne	r1, r0, #0, 8
    71a4:	00016b04 	andeq	r6, r1, r4, lsl #22
    71a8:	01470c00 	cmpeq	r7, r0, lsl #24
    71ac:	01db0000 	bicseq	r0, fp, r0
    71b0:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    71b4:	00000000 	andeq	r0, r0, r0
    71b8:	01401000 	mrseq	r1, (UNDEF: 64)
    71bc:	07240000 	streq	r0, [r4, -r0]!
    71c0:	025e083c 	subseq	r0, lr, #60, 16	; 0x3c0000
    71c4:	5c0f0000 	stcpl	0, cr0, [pc], {-0}
    71c8:	07000001 	streq	r0, [r0, -r1]
    71cc:	0025093e 	eoreq	r0, r5, lr, lsr r9
    71d0:	0f000000 	svceq	0x00000000
    71d4:	00000f8f 	andeq	r0, r0, pc, lsl #31
    71d8:	25093f07 	strcs	r3, [r9, #-3847]	; 0xfffff0f9
    71dc:	04000000 	streq	r0, [r0], #-0
    71e0:	000eb10f 	andeq	fp, lr, pc, lsl #2
    71e4:	09400700 	stmdbeq	r0, {r8, r9, sl}^
    71e8:	00000025 	andeq	r0, r0, r5, lsr #32
    71ec:	09fb0f08 	ldmibeq	fp!, {r3, r8, r9, sl, fp}^
    71f0:	41070000 	mrsmi	r0, (UNDEF: 7)
    71f4:	00002509 	andeq	r2, r0, r9, lsl #10
    71f8:	8c0f0c00 	stchi	12, cr0, [pc], {-0}
    71fc:	07000003 	streq	r0, [r0, -r3]
    7200:	00250942 	eoreq	r0, r5, r2, asr #18
    7204:	0f100000 	svceq	0x00100000
    7208:	00000de4 	andeq	r0, r0, r4, ror #27
    720c:	25094307 	strcs	r4, [r9, #-775]	; 0xfffffcf9
    7210:	14000000 	strne	r0, [r0], #-0
    7214:	000a7b0f 	andeq	r7, sl, pc, lsl #22
    7218:	09440700 	stmdbeq	r4, {r8, r9, sl}^
    721c:	00000025 	andeq	r0, r0, r5, lsr #32
    7220:	0aa90f18 	beq	fea4ae88 <__shm_end__+0xbea4ae88>
    7224:	45070000 	strmi	r0, [r7, #-0]
    7228:	00002509 	andeq	r2, r0, r9, lsl #10
    722c:	550f1c00 	strpl	r1, [pc, #-3072]	; 6634 <__core1_vectors-0xff99cc>
    7230:	0700000f 	streq	r0, [r0, -pc]
    7234:	00250946 	eoreq	r0, r5, r6, asr #18
    7238:	00200000 	eoreq	r0, r0, r0
    723c:	00026313 	andeq	r6, r2, r3, lsl r3
    7240:	07010800 	streq	r0, [r1, -r0, lsl #16]
    7244:	02a3084f 	adceq	r0, r3, #5177344	; 0x4f0000
    7248:	410f0000 	mrsmi	r0, CPSR
    724c:	0700000f 	streq	r0, [r0, -pc]
    7250:	02a30a50 	adceq	r0, r3, #80, 20	; 0x50000
    7254:	0f000000 	svceq	0x00000000
    7258:	00000b66 	andeq	r0, r0, r6, ror #22
    725c:	a3095107 	movwge	r5, #37127	; 0x9107
    7260:	80000002 	andhi	r0, r0, r2
    7264:	000dd414 	andeq	sp, sp, r4, lsl r4
    7268:	0a530700 	beq	14c8e70 <__end__+0x4ace50>
    726c:	00000147 	andeq	r0, r0, r7, asr #2
    7270:	10140100 	andsne	r0, r4, r0, lsl #2
    7274:	0700000e 	streq	r0, [r0, -lr]
    7278:	01470a56 	cmpeq	r7, r6, asr sl
    727c:	01040000 	mrseq	r0, (UNDEF: 4)
    7280:	00b20c00 	adcseq	r0, r2, r0, lsl #24
    7284:	02b30000 	adcseq	r0, r3, #0
    7288:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    728c:	1f000000 	svcne	0x00000000
    7290:	0a541300 	beq	150be98 <__end__+0x4efe78>
    7294:	01900000 	orrseq	r0, r0, r0
    7298:	f6086207 			; <UNDEFINED> instruction: 0xf6086207
    729c:	0f000002 	svceq	0x00000002
    72a0:	00000a34 	andeq	r0, r0, r4, lsr sl
    72a4:	f6126307 			; <UNDEFINED> instruction: 0xf6126307
    72a8:	00000002 	andeq	r0, r0, r2
    72ac:	000e040f 	andeq	r0, lr, pc, lsl #8
    72b0:	06640700 	strbteq	r0, [r4], -r0, lsl #14
    72b4:	00000025 	andeq	r0, r0, r5, lsr #32
    72b8:	04930f04 	ldreq	r0, [r3], #3844	; 0xf04
    72bc:	66070000 	strvs	r0, [r7], -r0
    72c0:	0002fc09 	andeq	pc, r2, r9, lsl #24
    72c4:	630f0800 	movwvs	r0, #63488	; 0xf800
    72c8:	07000002 	streq	r0, [r0, -r2]
    72cc:	025e1e67 	subseq	r1, lr, #1648	; 0x670
    72d0:	00880000 	addeq	r0, r8, r0
    72d4:	02b30412 	adcseq	r0, r3, #301989888	; 0x12000000
    72d8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    72dc:	0c000003 	stceq	0, cr0, [r0], {3}
    72e0:	0d000003 	stceq	0, cr0, [r0, #-12]
    72e4:	00000038 	andeq	r0, r0, r8, lsr r0
    72e8:	0412001f 	ldreq	r0, [r2], #-31	; 0xffffffe1
    72ec:	00000312 	andeq	r0, r0, r2, lsl r3
    72f0:	0e091015 	mcreq	0, 0, r1, cr9, cr5, {0}
    72f4:	07080000 	streq	r0, [r8, -r0]
    72f8:	033b087a 	teqeq	fp, #7995392	; 0x7a0000
    72fc:	a50f0000 	strge	r0, [pc, #-0]	; 7304 <__core1_vectors-0xff8cfc>
    7300:	0700000b 	streq	r0, [r0, -fp]
    7304:	033b117b 	teqeq	fp, #-1073741794	; 0xc000001e
    7308:	0f000000 	svceq	0x00000000
    730c:	000030db 	ldrdeq	r3, [r0], -fp
    7310:	25067c07 	strcs	r7, [r6, #-3079]	; 0xfffff3f9
    7314:	04000000 	streq	r0, [r0], #-0
    7318:	73041200 	movwvc	r1, #16896	; 0x4200
    731c:	10000000 	andne	r0, r0, r0
    7320:	00000681 	andeq	r0, r0, r1, lsl #13
    7324:	08ba0768 	ldmeq	sl!, {r3, r5, r6, r8, r9, sl}
    7328:	00000484 	andeq	r0, r0, r4, lsl #9
    732c:	00705f11 	rsbseq	r5, r0, r1, lsl pc
    7330:	3b12bb07 	blcc	4b5f54 <__core1_vectors-0xb4a0ac>
    7334:	00000003 	andeq	r0, r0, r3
    7338:	00725f11 	rsbseq	r5, r2, r1, lsl pc
    733c:	2507bc07 	strcs	fp, [r7, #-3079]	; 0xfffff3f9
    7340:	04000000 	streq	r0, [r0], #-0
    7344:	00775f11 	rsbseq	r5, r7, r1, lsl pc
    7348:	2507bd07 	strcs	fp, [r7, #-3335]	; 0xfffff2f9
    734c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7350:	000a3a0f 	andeq	r3, sl, pc, lsl #20
    7354:	09be0700 	ldmibeq	lr!, {r8, r9, sl}
    7358:	00000054 	andeq	r0, r0, r4, asr r0
    735c:	025d0f0c 	subseq	r0, sp, #12, 30	; 0x30
    7360:	bf070000 	svclt	0x00070000
    7364:	00005409 	andeq	r5, r0, r9, lsl #8
    7368:	5f110e00 	svcpl	0x00110e00
    736c:	07006662 	streq	r6, [r0, -r2, ror #12]
    7370:	031311c0 	tsteq	r3, #192, 2	; 0x30
    7374:	0f100000 	svceq	0x00100000
    7378:	00000df6 	strdeq	r0, [r0], -r6
    737c:	2507c107 	strcs	ip, [r7, #-263]	; 0xfffffef9
    7380:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7384:	0005e40f 	andeq	lr, r5, pc, lsl #8
    7388:	0ac80700 	beq	ff208f90 <__shm_end__+0xbf208f90>
    738c:	000000b2 	strheq	r0, [r0], -r2
    7390:	1c390f1c 	ldcne	15, cr0, [r9], #-112	; 0xffffff90
    7394:	ca070000 	bgt	1c739c <__core1_vectors-0xe38c64>
    7398:	0006081d 	andeq	r0, r6, sp, lsl r8
    739c:	7d0f2000 	stcvc	0, cr2, [pc, #-0]	; 73a4 <__core1_vectors-0xff8c5c>
    73a0:	07000011 	smladeq	r0, r1, r0, r0
    73a4:	06321dcc 	ldrteq	r1, [r2], -ip, asr #27
    73a8:	0f240000 	svceq	0x00240000
    73ac:	00000ac6 	andeq	r0, r0, r6, asr #21
    73b0:	560dcf07 	strpl	ip, [sp], -r7, lsl #30
    73b4:	28000006 	stmdacs	r0, {r1, r2}
    73b8:	002b4a0f 	eoreq	r4, fp, pc, lsl #20
    73bc:	09d00700 	ldmibeq	r0, {r8, r9, sl}^
    73c0:	00000670 	andeq	r0, r0, r0, ror r6
    73c4:	755f112c 	ldrbvc	r1, [pc, #-300]	; 72a0 <__core1_vectors-0xff8d60>
    73c8:	d3070062 	movwle	r0, #28770	; 0x7062
    73cc:	00031311 	andeq	r1, r3, r1, lsl r3
    73d0:	5f113000 	svcpl	0x00113000
    73d4:	07007075 	smlsdxeq	r0, r5, r0, r7
    73d8:	033b12d4 	teqeq	fp, #212, 4	; 0x4000000d
    73dc:	11380000 	teqne	r8, r0
    73e0:	0072755f 	rsbseq	r7, r2, pc, asr r5
    73e4:	2507d507 	strcs	sp, [r7, #-1287]	; 0xfffffaf9
    73e8:	3c000000 	stccc	0, cr0, [r0], {-0}
    73ec:	000a0a0f 	andeq	r0, sl, pc, lsl #20
    73f0:	11d80700 	bicsne	r0, r8, r0, lsl #14
    73f4:	00000676 	andeq	r0, r0, r6, ror r6
    73f8:	01560f40 	cmpeq	r6, r0, asr #30
    73fc:	d9070000 	stmdble	r7, {}	; <UNPREDICTABLE>
    7400:	00068611 	andeq	r8, r6, r1, lsl r6
    7404:	5f114300 	svcpl	0x00114300
    7408:	0700626c 	streq	r6, [r0, -ip, ror #4]
    740c:	031311dc 	tsteq	r3, #220, 2	; 0x37
    7410:	0f440000 	svceq	0x00440000
    7414:	00002ee3 	andeq	r2, r0, r3, ror #29
    7418:	2507df07 	strcs	sp, [r7, #-3847]	; 0xfffff0f9
    741c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    7420:	0006270f 	andeq	r2, r6, pc, lsl #14
    7424:	0ae00700 	beq	ff80902c <__shm_end__+0xbf80902c>
    7428:	000000cd 	andeq	r0, r0, sp, asr #1
    742c:	2b3e0f50 	blcs	f8b174 <__core1_vectors-0x74e8c>
    7430:	e3070000 	movw	r0, #28672	; 0x7000
    7434:	0004a212 	andeq	sl, r4, r2, lsl r2
    7438:	ab0f5400 	blge	3dc440 <__core1_vectors-0xc23bc0>
    743c:	07000001 	streq	r0, [r0, -r1]
    7440:	015f0ce7 	cmpeq	pc, r7, ror #25
    7444:	0f580000 	svceq	0x00580000
    7448:	00000a26 	andeq	r0, r0, r6, lsr #20
    744c:	3b0ee907 	blcc	3c1870 <__core1_vectors-0xc3e790>
    7450:	5c000001 	stcpl	0, cr0, [r0], {1}
    7454:	0006940f 	andeq	r9, r6, pc, lsl #8
    7458:	09ea0700 	stmibeq	sl!, {r8, r9, sl}^
    745c:	00000025 	andeq	r0, r0, r5, lsr #32
    7460:	25160064 	ldrcs	r0, [r6, #-100]	; 0xffffff9c
    7464:	a2000000 	andge	r0, r0, #0
    7468:	17000004 	strne	r0, [r0, -r4]
    746c:	000004a2 	andeq	r0, r0, r2, lsr #9
    7470:	0000b217 	andeq	fp, r0, r7, lsl r2
    7474:	05f61700 	ldrbeq	r1, [r6, #1792]!	; 0x700
    7478:	25170000 	ldrcs	r0, [r7, #-0]
    747c:	00000000 	andeq	r0, r0, r0
    7480:	04ad0412 	strteq	r0, [sp], #1042	; 0x412
    7484:	a2050000 	andge	r0, r5, #0
    7488:	18000004 	stmdane	r0, {r2}
    748c:	00000446 	andeq	r0, r0, r6, asr #8
    7490:	65070428 	strvs	r0, [r7, #-1064]	; 0xfffffbd8
    7494:	05f60802 	ldrbeq	r0, [r6, #2050]!	; 0x802
    7498:	92190000 	andsls	r0, r9, #0
    749c:	07000009 	streq	r0, [r0, -r9]
    74a0:	25070267 	strcs	r0, [r7, #-615]	; 0xfffffd99
    74a4:	00000000 	andeq	r0, r0, r0
    74a8:	00052219 	andeq	r2, r5, r9, lsl r2
    74ac:	026c0700 	rsbeq	r0, ip, #0, 14
    74b0:	0006e20b 	andeq	lr, r6, fp, lsl #4
    74b4:	87190400 	ldrhi	r0, [r9, -r0, lsl #8]
    74b8:	0700000b 	streq	r0, [r0, -fp]
    74bc:	e214026c 	ands	r0, r4, #108, 4	; 0xc0000006
    74c0:	08000006 	stmdaeq	r0, {r1, r2}
    74c4:	000a1019 	andeq	r1, sl, r9, lsl r0
    74c8:	026c0700 	rsbeq	r0, ip, #0, 14
    74cc:	0006e21e 	andeq	lr, r6, lr, lsl r2
    74d0:	ff190c00 			; <UNDEFINED> instruction: 0xff190c00
    74d4:	0700000d 	streq	r0, [r0, -sp]
    74d8:	2508026e 	strcs	r0, [r8, #-622]	; 0xfffffd92
    74dc:	10000000 	andne	r0, r0, r0
    74e0:	0007fa19 	andeq	pc, r7, r9, lsl sl	; <UNPREDICTABLE>
    74e4:	026f0700 	rsbeq	r0, pc, #0, 14
    74e8:	0008e208 	andeq	lr, r8, r8, lsl #4
    74ec:	2d191400 	cfldrscs	mvf1, [r9, #-0]
    74f0:	07000004 	streq	r0, [r0, -r4]
    74f4:	25070272 	strcs	r0, [r7, #-626]	; 0xfffffd8e
    74f8:	30000000 	andcc	r0, r0, r0
    74fc:	000e4119 	andeq	r4, lr, r9, lsl r1
    7500:	02730700 	rsbseq	r0, r3, #0, 14
    7504:	0008f716 	andeq	pc, r8, r6, lsl r7	; <UNPREDICTABLE>
    7508:	89193400 	ldmdbhi	r9, {sl, ip, sp}
    750c:	07000006 	streq	r0, [r0, -r6]
    7510:	25070275 	strcs	r0, [r7, #-629]	; 0xfffffd8b
    7514:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    7518:	00077d19 	andeq	r7, r7, r9, lsl sp
    751c:	02770700 	rsbseq	r0, r7, #0, 14
    7520:	0009080a 	andeq	r0, r9, sl, lsl #16
    7524:	51193c00 	tstpl	r9, r0, lsl #24
    7528:	0700000e 	streq	r0, [r0, -lr]
    752c:	c513027a 	ldrgt	r0, [r3, #-634]	; 0xfffffd86
    7530:	40000001 	andmi	r0, r0, r1
    7534:	0002f119 	andeq	pc, r2, r9, lsl r1	; <UNPREDICTABLE>
    7538:	027b0700 	rsbseq	r0, fp, #0, 14
    753c:	00002507 	andeq	r2, r0, r7, lsl #10
    7540:	6f194400 	svcvs	0x00194400
    7544:	07000006 	streq	r0, [r0, -r6]
    7548:	c513027c 	ldrgt	r0, [r3, #-636]	; 0xfffffd84
    754c:	48000001 	stmdami	r0, {r0}
    7550:	0008a919 	andeq	sl, r8, r9, lsl r9
    7554:	027d0700 	rsbseq	r0, sp, #0, 14
    7558:	00090e14 	andeq	r0, r9, r4, lsl lr
    755c:	10194c00 	andsne	r4, r9, r0, lsl #24
    7560:	07000001 	streq	r0, [r0, -r1]
    7564:	25070280 	strcs	r0, [r7, #-640]	; 0xfffffd80
    7568:	50000000 	andpl	r0, r0, r0
    756c:	00062f19 	andeq	r2, r6, r9, lsl pc
    7570:	02810700 	addeq	r0, r1, #0, 14
    7574:	0005f609 	andeq	pc, r5, r9, lsl #12
    7578:	05195400 	ldreq	r5, [r9, #-1024]	; 0xfffffc00
    757c:	0700000a 	streq	r0, [r0, -sl]
    7580:	bd0702a4 	sfmlt	f0, 4, [r7, #-656]	; 0xfffffd70
    7584:	58000008 	stmdapl	r0, {r3}
    7588:	000a541a 	andeq	r5, sl, sl, lsl r4
    758c:	02a80700 	adceq	r0, r8, #0, 14
    7590:	0002f613 	andeq	pc, r2, r3, lsl r6	; <UNPREDICTABLE>
    7594:	1a014800 	bne	5959c <__core1_vectors-0xfa6a64>
    7598:	00000787 	andeq	r0, r0, r7, lsl #15
    759c:	1202a907 	andne	sl, r2, #114688	; 0x1c000
    75a0:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    75a4:	1d1a014c 	ldfnes	f0, [sl, #-304]	; 0xfffffed0
    75a8:	07000006 	streq	r0, [r0, -r6]
    75ac:	1f0c02ad 	svcne	0x000c02ad
    75b0:	dc000009 	stcle	0, cr0, [r0], {9}
    75b4:	08341a02 	ldmdaeq	r4!, {r1, r9, fp, ip}
    75b8:	b2070000 	andlt	r0, r7, #0
    75bc:	06a31002 	strteq	r1, [r3], r2
    75c0:	02e00000 	rsceq	r0, r0, #0
    75c4:	0000131a 	andeq	r1, r0, sl, lsl r3
    75c8:	02b40700 	adcseq	r0, r4, #0, 14
    75cc:	00092b0a 	andeq	r2, r9, sl, lsl #22
    75d0:	0002ec00 	andeq	lr, r2, r0, lsl #24
    75d4:	05fc0412 	ldrbeq	r0, [ip, #1042]!	; 0x412
    75d8:	01040000 	mrseq	r0, (UNDEF: 4)
    75dc:	00040908 	andeq	r0, r4, r8, lsl #18
    75e0:	05fc0500 	ldrbeq	r0, [ip, #1280]!	; 0x500
    75e4:	04120000 	ldreq	r0, [r2], #-0
    75e8:	00000484 	andeq	r0, r0, r4, lsl #9
    75ec:	00002516 	andeq	r2, r0, r6, lsl r5
    75f0:	00062c00 	andeq	r2, r6, r0, lsl #24
    75f4:	04a21700 	strteq	r1, [r2], #1792	; 0x700
    75f8:	b2170000 	andslt	r0, r7, #0
    75fc:	17000000 	strne	r0, [r0, -r0]
    7600:	0000062c 	andeq	r0, r0, ip, lsr #12
    7604:	00002517 	andeq	r2, r0, r7, lsl r5
    7608:	04120000 	ldreq	r0, [r2], #-0
    760c:	00000603 	andeq	r0, r0, r3, lsl #12
    7610:	060e0412 			; <UNDEFINED> instruction: 0x060e0412
    7614:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    7618:	56000000 	strpl	r0, [r0], -r0
    761c:	17000006 	strne	r0, [r0, -r6]
    7620:	000004a2 	andeq	r0, r0, r2, lsr #9
    7624:	0000b217 	andeq	fp, r0, r7, lsl r2
    7628:	00d91700 	sbcseq	r1, r9, r0, lsl #14
    762c:	25170000 	ldrcs	r0, [r7, #-0]
    7630:	00000000 	andeq	r0, r0, r0
    7634:	06380412 			; <UNDEFINED> instruction: 0x06380412
    7638:	25160000 	ldrcs	r0, [r6, #-0]
    763c:	70000000 	andvc	r0, r0, r0
    7640:	17000006 	strne	r0, [r0, -r6]
    7644:	000004a2 	andeq	r0, r0, r2, lsr #9
    7648:	0000b217 	andeq	fp, r0, r7, lsl r2
    764c:	04120000 	ldreq	r0, [r2], #-0
    7650:	0000065c 	andeq	r0, r0, ip, asr r6
    7654:	0000730c 	andeq	r7, r0, ip, lsl #6
    7658:	00068600 	andeq	r8, r6, r0, lsl #12
    765c:	00380d00 	eorseq	r0, r8, r0, lsl #26
    7660:	00020000 	andeq	r0, r2, r0
    7664:	0000730c 	andeq	r7, r0, ip, lsl #6
    7668:	00069600 	andeq	r9, r6, r0, lsl #12
    766c:	00380d00 	eorseq	r0, r8, r0, lsl #26
    7670:	00000000 	andeq	r0, r0, r0
    7674:	000c1209 	andeq	r1, ip, r9, lsl #4
    7678:	01240700 			; <UNDEFINED> instruction: 0x01240700
    767c:	0003411a 	andeq	r4, r3, sl, lsl r1
    7680:	08b91b00 	ldmeq	r9!, {r8, r9, fp, ip}
    7684:	070c0000 	streq	r0, [ip, -r0]
    7688:	dc080128 	stfles	f0, [r8], {40}	; 0x28
    768c:	19000006 	stmdbne	r0, {r1, r2}
    7690:	00000a34 	andeq	r0, r0, r4, lsr sl
    7694:	11012a07 	tstne	r1, r7, lsl #20
    7698:	000006dc 	ldrdeq	r0, [r0], -ip
    769c:	082d1900 	stmdaeq	sp!, {r8, fp, ip}
    76a0:	2b070000 	blcs	1c76a8 <__core1_vectors-0xe38958>
    76a4:	00250701 	eoreq	r0, r5, r1, lsl #14
    76a8:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    76ac:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
    76b0:	0b012c07 	bleq	526d4 <__core1_vectors-0xfad92c>
    76b4:	000006e2 	andeq	r0, r0, r2, ror #13
    76b8:	04120008 	ldreq	r0, [r2], #-8
    76bc:	000006a3 	andeq	r0, r0, r3, lsr #13
    76c0:	06960412 			; <UNDEFINED> instruction: 0x06960412
    76c4:	7f1b0000 	svcvc	0x001b0000
    76c8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    76cc:	08014407 	stmdaeq	r1, {r0, r1, r2, sl, lr}
    76d0:	00000721 	andeq	r0, r0, r1, lsr #14
    76d4:	000ac019 	andeq	ip, sl, r9, lsl r0
    76d8:	01450700 	cmpeq	r5, r0, lsl #14
    76dc:	00072112 	andeq	r2, r7, r2, lsl r1
    76e0:	bf190000 	svclt	0x00190000
    76e4:	07000001 	streq	r0, [r0, -r1]
    76e8:	21120146 	tstcs	r2, r6, asr #2
    76ec:	06000007 	streq	r0, [r0], -r7
    76f0:	000e8c19 	andeq	r8, lr, r9, lsl ip
    76f4:	01470700 	cmpeq	r7, r0, lsl #14
    76f8:	00007a12 	andeq	r7, r0, r2, lsl sl
    76fc:	0c000c00 	stceq	12, cr0, [r0], {-0}
    7700:	0000007a 	andeq	r0, r0, sl, ror r0
    7704:	00000731 	andeq	r0, r0, r1, lsr r7
    7708:	0000380d 	andeq	r3, r0, sp, lsl #16
    770c:	1c000200 	sfmne	f0, 4, [r0], {-0}
    7710:	028507d0 	addeq	r0, r5, #208, 14	; 0x3400000
    7714:	00084607 	andeq	r4, r8, r7, lsl #12
    7718:	03ce1900 	biceq	r1, lr, #0, 18
    771c:	87070000 	strhi	r0, [r7, -r0]
    7720:	00381802 	eorseq	r1, r8, r2, lsl #16
    7724:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    7728:	00000bab 	andeq	r0, r0, fp, lsr #23
    772c:	12028807 	andne	r8, r2, #458752	; 0x70000
    7730:	000005f6 	strdeq	r0, [r0], -r6
    7734:	002d1904 	eoreq	r1, sp, r4, lsl #18
    7738:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
    773c:	08461002 	stmdaeq	r6, {r1, ip}^
    7740:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    7744:	00000310 	andeq	r0, r0, r0, lsl r3
    7748:	17028a07 	strne	r8, [r2, -r7, lsl #20]
    774c:	000001db 	ldrdeq	r0, [r0], -fp
    7750:	08831924 	stmeq	r3, {r2, r5, r8, fp, ip}
    7754:	8b070000 	blhi	1c775c <__core1_vectors-0xe388a4>
    7758:	00250f02 	eoreq	r0, r5, r2, lsl #30
    775c:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
    7760:	00000a2f 	andeq	r0, r0, pc, lsr #20
    7764:	2c028c07 	stccs	12, cr8, [r2], {7}
    7768:	00000088 	andeq	r0, r0, r8, lsl #1
    776c:	0c761950 			; <UNDEFINED> instruction: 0x0c761950
    7770:	8d070000 	stchi	0, cr0, [r7, #-0]
    7774:	06e81a02 	strbteq	r1, [r8], r2, lsl #20
    7778:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    777c:	00000d54 	andeq	r0, r0, r4, asr sp
    7780:	16028e07 	strne	r8, [r2], -r7, lsl #28
    7784:	0000013b 	andeq	r0, r0, fp, lsr r1
    7788:	0afa1968 	beq	ffe8dd30 <__shm_end__+0xbfe8dd30>
    778c:	8f070000 	svchi	0x00070000
    7790:	013b1602 	teqeq	fp, r2, lsl #12
    7794:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
    7798:	00000a18 	andeq	r0, r0, r8, lsl sl
    779c:	16029007 	strne	r9, [r2], -r7
    77a0:	0000013b 	andeq	r0, r0, fp, lsr r1
    77a4:	01651978 	smceq	20888	; 0x5198
    77a8:	91070000 	mrsls	r0, (UNDEF: 7)
    77ac:	08561002 	ldmdaeq	r6, {r1, ip}^
    77b0:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
    77b4:	000006e3 	andeq	r0, r0, r3, ror #13
    77b8:	10029207 	andne	r9, r2, r7, lsl #4
    77bc:	00000866 	andeq	r0, r0, r6, ror #16
    77c0:	0f981988 	svceq	0x00981988
    77c4:	93070000 	movwls	r0, #28672	; 0x7000
    77c8:	00250f02 	eoreq	r0, r5, r2, lsl #30
    77cc:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
    77d0:	000002e3 	andeq	r0, r0, r3, ror #5
    77d4:	16029407 	strne	r9, [r2], -r7, lsl #8
    77d8:	0000013b 	andeq	r0, r0, fp, lsr r1
    77dc:	0bb819a4 	bleq	fee0de74 <__shm_end__+0xbee0de74>
    77e0:	95070000 	strls	r0, [r7, #-0]
    77e4:	013b1602 	teqeq	fp, r2, lsl #12
    77e8:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
    77ec:	00000f01 	andeq	r0, r0, r1, lsl #30
    77f0:	16029607 	strne	r9, [r2], -r7, lsl #12
    77f4:	0000013b 	andeq	r0, r0, fp, lsr r1
    77f8:	09ec19b4 	stmibeq	ip!, {r2, r4, r5, r7, r8, fp, ip}^
    77fc:	97070000 	strls	r0, [r7, -r0]
    7800:	013b1602 	teqeq	fp, r2, lsl #12
    7804:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
    7808:	00000145 	andeq	r0, r0, r5, asr #2
    780c:	16029807 	strne	r9, [r2], -r7, lsl #16
    7810:	0000013b 	andeq	r0, r0, fp, lsr r1
    7814:	099019c4 	ldmibeq	r0, {r2, r6, r7, r8, fp, ip}
    7818:	99070000 	stmdbls	r7, {}	; <UNPREDICTABLE>
    781c:	00250802 	eoreq	r0, r5, r2, lsl #16
    7820:	00cc0000 	sbceq	r0, ip, r0
    7824:	0005fc0c 	andeq	pc, r5, ip, lsl #24
    7828:	00085600 	andeq	r5, r8, r0, lsl #12
    782c:	00380d00 	eorseq	r0, r8, r0, lsl #26
    7830:	00190000 	andseq	r0, r9, r0
    7834:	0005fc0c 	andeq	pc, r5, ip, lsl #24
    7838:	00086600 	andeq	r6, r8, r0, lsl #12
    783c:	00380d00 	eorseq	r0, r8, r0, lsl #26
    7840:	00070000 	andeq	r0, r7, r0
    7844:	0005fc0c 	andeq	pc, r5, ip, lsl #24
    7848:	00087600 	andeq	r7, r8, r0, lsl #12
    784c:	00380d00 	eorseq	r0, r8, r0, lsl #26
    7850:	00170000 	andseq	r0, r7, r0
    7854:	9e07f01c 	mcrls	0, 0, pc, cr7, cr12, {0}	; <UNPREDICTABLE>
    7858:	089d0702 	ldmeq	sp, {r1, r8, r9, sl}
    785c:	18190000 	ldmdane	r9, {}	; <UNPREDICTABLE>
    7860:	0700000e 	streq	r0, [r0, -lr]
    7864:	9d1b02a1 	lfmls	f0, 4, [fp, #-644]	; 0xfffffd7c
    7868:	00000008 	andeq	r0, r0, r8
    786c:	00084819 	andeq	r4, r8, r9, lsl r8
    7870:	02a20700 	adceq	r0, r2, #0, 14
    7874:	0008ad18 	andeq	sl, r8, r8, lsl sp
    7878:	0c007800 	stceq	8, cr7, [r0], {-0}
    787c:	0000033b 	andeq	r0, r0, fp, lsr r3
    7880:	000008ad 	andeq	r0, r0, sp, lsr #17
    7884:	0000380d 	andeq	r3, r0, sp, lsl #16
    7888:	0c001d00 	stceq	13, cr1, [r0], {-0}
    788c:	00000038 	andeq	r0, r0, r8, lsr r0
    7890:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
    7894:	0000380d 	andeq	r3, r0, sp, lsl #16
    7898:	1d001d00 	stcne	13, cr1, [r0, #-0]
    789c:	028307f0 	addeq	r0, r3, #240, 14	; 0x3c00000
    78a0:	0008e203 	andeq	lr, r8, r3, lsl #4
    78a4:	04461e00 	strbeq	r1, [r6], #-3584	; 0xfffff200
    78a8:	9a070000 	bls	1c78b0 <__core1_vectors-0xe38750>
    78ac:	07310b02 	ldreq	r0, [r1, -r2, lsl #22]!
    78b0:	381e0000 	ldmdacc	lr, {}	; <UNPREDICTABLE>
    78b4:	07000001 	streq	r0, [r0, -r1]
    78b8:	760b02a3 	strvc	r0, [fp], -r3, lsr #5
    78bc:	00000008 	andeq	r0, r0, r8
    78c0:	0005fc0c 	andeq	pc, r5, ip, lsl #24
    78c4:	0008f200 	andeq	pc, r8, r0, lsl #4
    78c8:	00380d00 	eorseq	r0, r8, r0, lsl #26
    78cc:	00180000 	andseq	r0, r8, r0
    78d0:	0000001f 	andeq	r0, r0, pc, lsl r0
    78d4:	f2041200 	vhsub.s8	d1, d4, d0
    78d8:	20000008 	andcs	r0, r0, r8
    78dc:	00000908 	andeq	r0, r0, r8, lsl #18
    78e0:	0004a217 	andeq	sl, r4, r7, lsl r2
    78e4:	04120000 	ldreq	r0, [r2], #-0
    78e8:	000008fd 	strdeq	r0, [r0], -sp
    78ec:	01c50412 	biceq	r0, r5, r2, lsl r4
    78f0:	1f200000 	svcne	0x00200000
    78f4:	17000009 	strne	r0, [r0, -r9]
    78f8:	00000025 	andeq	r0, r0, r5, lsr #32
    78fc:	25041200 	strcs	r1, [r4, #-512]	; 0xfffffe00
    7900:	12000009 	andne	r0, r0, #9
    7904:	00091404 	andeq	r1, r9, r4, lsl #8
    7908:	06960c00 	ldreq	r0, [r6], r0, lsl #24
    790c:	093b0000 	ldmdbeq	fp!, {}	; <UNPREDICTABLE>
    7910:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    7914:	02000000 	andeq	r0, r0, #0
    7918:	04542100 	ldrbeq	r2, [r4], #-256	; 0xffffff00
    791c:	33070000 	movwcc	r0, #28672	; 0x7000
    7920:	04a21703 	strteq	r1, [r2], #1795	; 0x703
    7924:	4d210000 	stcmi	0, cr0, [r1, #-0]
    7928:	07000004 	streq	r0, [r0, -r4]
    792c:	a81d0334 	ldmdage	sp, {r2, r4, r5, r8, r9}
    7930:	03000004 	movweq	r0, #4
    7934:	00000c14 	andeq	r0, r0, r4, lsl ip
    7938:	96104205 	ldrls	r4, [r0], -r5, lsl #4
    793c:	12000006 	andne	r0, r0, #6
    7940:	00095504 	andeq	r5, r9, r4, lsl #10
    7944:	083c2200 	ldmdaeq	ip!, {r9, sp}
    7948:	36090000 	strcc	r0, [r9], -r0
    794c:	0009610e 	andeq	r6, r9, lr, lsl #2
    7950:	08422200 	stmdaeq	r2, {r9, sp}^
    7954:	37090000 	strcc	r0, [r9, -r0]
    7958:	0009610e 	andeq	r6, r9, lr, lsl #2
    795c:	20f62300 	rscscs	r2, r6, r0, lsl #6
    7960:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    7964:	00002505 	andeq	r2, r0, r5, lsl #10
    7968:	004d9c00 	subeq	r9, sp, r0, lsl #24
    796c:	00005001 	andeq	r5, r0, r1
    7970:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    7974:	24000009 	strcs	r0, [r0], #-9
    7978:	00001f1c 	andeq	r1, r0, ip, lsl pc
    797c:	2c182e01 	ldccs	14, cr2, [r8], {1}
    7980:	02000006 	andeq	r0, r0, #6
    7984:	26257091 			; <UNDEFINED> instruction: 0x26257091
    7988:	0000026c 	andeq	r0, r0, ip, ror #4
    798c:	b40d3001 	strlt	r3, [sp], #-1
    7990:	02000000 	andeq	r0, r0, #0
    7994:	72276091 	eorvc	r6, r7, #145	; 0x91
    7998:	32010063 	andcc	r0, r1, #99	; 0x63
    799c:	00002509 	andeq	r2, r0, r9, lsl #10
    79a0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    79a4:	2ac52300 	bcs	ff1505ac <__shm_end__+0xbf1505ac>
    79a8:	d0050000 	andle	r0, r5, r0
    79ac:	00002505 	andeq	r2, r0, r5, lsl #10
    79b0:	00000000 	andeq	r0, r0, r0
    79b4:	00004000 	andeq	r4, r0, r0
    79b8:	009c0100 	addseq	r0, ip, r0, lsl #2
    79bc:	2400000a 	strcs	r0, [r0], #-10
    79c0:	00001f1c 	andeq	r1, r0, ip, lsl pc
    79c4:	2c192901 			; <UNDEFINED> instruction: 0x2c192901
    79c8:	02000006 	andeq	r0, r0, #6
    79cc:	6c247491 	cfstrsvs	mvf7, [r4], #-580	; 0xfffffdbc
    79d0:	01000002 	tsteq	r0, r2
    79d4:	00b42929 	adcseq	r2, r4, r9, lsr #18
    79d8:	91020000 	mrsls	r0, (UNDEF: 2)
    79dc:	b6280070 			; <UNDEFINED> instruction: 0xb6280070
    79e0:	0100002a 	tsteq	r0, sl, lsr #32
    79e4:	00b2071b 	adcseq	r0, r2, fp, lsl r7
    79e8:	00000000 	andeq	r0, r0, r0
    79ec:	01080000 	mrseq	r0, (UNDEF: 8)
    79f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    79f4:	00000a92 	muleq	r0, r2, sl
    79f8:	74736429 	ldrbtvc	r6, [r3], #-1065	; 0xfffffbd7
    79fc:	151b0100 	ldrne	r0, [fp, #-256]	; 0xffffff00
    7a00:	000000b2 	strheq	r0, [r0], -r2
    7a04:	29649102 	stmdbcs	r4!, {r1, r8, ip, pc}^
    7a08:	00637273 	rsbeq	r7, r3, r3, ror r2
    7a0c:	92261b01 	eorls	r1, r6, #1024	; 0x400
    7a10:	0200000a 	andeq	r0, r0, #10
    7a14:	6e296091 	mcrvs	0, 1, r6, cr9, cr1, {4}
    7a18:	321b0100 	andscc	r0, fp, #0, 2
    7a1c:	0000002c 	andeq	r0, r0, ip, lsr #32
    7a20:	275c9102 	ldrbcs	r9, [ip, -r2, lsl #2]
    7a24:	1d010064 	stcne	0, cr0, [r1, #-400]	; 0xfffffe70
    7a28:	000a990e 	andeq	r9, sl, lr, lsl #18
    7a2c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    7a30:	01007327 	tsteq	r0, r7, lsr #6
    7a34:	0a9f141e 	beq	fe7ccab4 <__shm_end__+0xbe7ccab4>
    7a38:	91020000 	mrsls	r0, (UNDEF: 2)
    7a3c:	00002a68 	andeq	r2, r0, r8, ror #20
    7a40:	004c0000 	subeq	r0, ip, r0
    7a44:	0a7a0000 	beq	1e87a4c <__end__+0xe6ba2c>
    7a48:	69270000 	stmdbvs	r7!, {}	; <UNPREDICTABLE>
    7a4c:	15210100 	strne	r0, [r1, #-256]!	; 0xffffff00
    7a50:	0000002c 	andeq	r0, r0, ip, lsr #32
    7a54:	00749102 	rsbseq	r9, r4, r2, lsl #2
    7a58:	0000002b 	andeq	r0, r0, fp, lsr #32
    7a5c:	00004c00 	andeq	r4, r0, r0, lsl #24
    7a60:	00692700 	rsbeq	r2, r9, r0, lsl #14
    7a64:	2c152301 	ldccs	3, cr2, [r5], {1}
    7a68:	02000000 	andeq	r0, r0, #0
    7a6c:	00007091 	muleq	r0, r1, r0
    7a70:	0a980412 	beq	fe608ac0 <__shm_end__+0xbe608ac0>
    7a74:	122c0000 	eorne	r0, ip, #0
    7a78:	00006204 	andeq	r6, r0, r4, lsl #4
    7a7c:	6e041200 	cdpvs	2, 0, cr1, cr4, cr0, {0}
    7a80:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7a84:	00002abe 			; <UNDEFINED> instruction: 0x00002abe
    7a88:	b2071301 	andlt	r1, r7, #67108864	; 0x4000000
    7a8c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7a90:	8401004d 	strhi	r0, [r1], #-77	; 0xffffffb3
    7a94:	01000000 	mrseq	r0, (UNDEF: 0)
    7a98:	000b1c9c 	muleq	fp, ip, ip
    7a9c:	73642900 	cmnvc	r4, #0, 18
    7aa0:	13010074 	movwne	r0, #4212	; 0x1074
    7aa4:	0000b214 	andeq	fp, r0, r4, lsl r2
    7aa8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    7aac:	63727329 	cmnvs	r2, #-1543503872	; 0xa4000000
    7ab0:	25130100 	ldrcs	r0, [r3, #-256]	; 0xffffff00
    7ab4:	00000a92 	muleq	r0, r2, sl
    7ab8:	29609102 	stmdbcs	r0!, {r1, r8, ip, pc}^
    7abc:	1301006e 	movwne	r0, #4206	; 0x106e
    7ac0:	00002c31 	andeq	r2, r0, r1, lsr ip
    7ac4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    7ac8:	01006427 	tsteq	r0, r7, lsr #8
    7acc:	0a990e15 	beq	fe64b328 <__shm_end__+0xbe64b328>
    7ad0:	91020000 	mrsls	r0, (UNDEF: 2)
    7ad4:	00732770 	rsbseq	r2, r3, r0, ror r7
    7ad8:	9f141601 	svcls	0x00141601
    7adc:	0200000a 	andeq	r0, r0, #10
    7ae0:	402b6c91 	mlami	fp, r1, ip, r6
    7ae4:	4801004d 	stmdami	r1, {r0, r2, r3, r6}
    7ae8:	27000000 	strcs	r0, [r0, -r0]
    7aec:	17010069 	strne	r0, [r1, -r9, rrx]
    7af0:	00002c11 	andeq	r2, r0, r1, lsl ip
    7af4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7af8:	cd2d0000 	stcgt	0, cr0, [sp, #-0]
    7afc:	0100002a 	tsteq	r0, sl, lsr #32
    7b00:	00b2070c 	adcseq	r0, r2, ip, lsl #14
    7b04:	4ca40000 	stcmi	0, cr0, [r4]
    7b08:	00740100 	rsbseq	r0, r4, r0, lsl #2
    7b0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7b10:	01007329 	tsteq	r0, r9, lsr #6
    7b14:	00b2140c 	adcseq	r1, r2, ip, lsl #8
    7b18:	91020000 	mrsls	r0, (UNDEF: 2)
    7b1c:	0063296c 	rsbeq	r2, r3, ip, ror #18
    7b20:	251b0c01 	ldrcs	r0, [fp, #-3073]	; 0xfffff3ff
    7b24:	02000000 	andeq	r0, r0, #0
    7b28:	6e296891 	mcrvs	8, 1, r6, cr9, cr1, {4}
    7b2c:	250c0100 	strcs	r0, [ip, #-256]	; 0xffffff00
    7b30:	0000002c 	andeq	r0, r0, ip, lsr #32
    7b34:	27649102 	strbcs	r9, [r4, -r2, lsl #2]!
    7b38:	0e010070 	mcreq	0, 0, r0, cr1, cr0, {3}
    7b3c:	000a990e 	andeq	r9, sl, lr, lsl #18
    7b40:	70910200 	addsvc	r0, r1, r0, lsl #4
    7b44:	004cc42b 	subeq	ip, ip, fp, lsr #8
    7b48:	00004001 	andeq	r4, r0, r1
    7b4c:	00692700 	rsbeq	r2, r9, r0, lsl #14
    7b50:	2c110f01 	ldccs	15, cr0, [r1], {1}
    7b54:	02000000 	andeq	r0, r0, #0
    7b58:	00007491 	muleq	r0, r1, r4
    7b5c:	00002200 	andeq	r2, r0, r0, lsl #4
    7b60:	50000200 	andpl	r0, r0, r0, lsl #4
    7b64:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7b68:	0030b001 	eorseq	fp, r0, r1
    7b6c:	0000d800 	andeq	sp, r0, r0, lsl #16
    7b70:	0000dc01 	andeq	sp, r0, r1, lsl #24
    7b74:	002ae901 	eoreq	lr, sl, r1, lsl #18
    7b78:	000bd000 	andeq	sp, fp, r0
    7b7c:	002b0600 	eoreq	r0, fp, r0, lsl #12
    7b80:	22800100 	addcs	r0, r0, #0, 2
    7b84:	02000000 	andeq	r0, r0, #0
    7b88:	00146400 	andseq	r6, r4, r0, lsl #8
    7b8c:	fc010400 	stc2	4, cr0, [r1], {-0}
    7b90:	00000030 	andeq	r0, r0, r0, lsr r0
    7b94:	20010000 	andcs	r0, r1, r0
    7b98:	12010000 	andne	r0, r1, #0
    7b9c:	d000002b 	andle	r0, r0, fp, lsr #32
    7ba0:	0600000b 	streq	r0, [r0], -fp
    7ba4:	0100002b 	tsteq	r0, fp, lsr #32
    7ba8:	00126d80 	andseq	r6, r2, r0, lsl #27
    7bac:	78000400 	stmdavc	r0, {sl}
    7bb0:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7bb4:	00003a01 	andeq	r3, r0, r1, lsl #20
    7bb8:	2d380c00 	ldccs	12, cr0, [r8, #-0]
    7bbc:	0bd00000 	bleq	ff407bc4 <__shm_end__+0xbf407bc4>
    7bc0:	05800000 	streq	r0, [r0]
    7bc4:	00000000 	andeq	r0, r0, r0
    7bc8:	314a0000 	mrscc	r0, (UNDEF: 74)
    7bcc:	01020000 	mrseq	r0, (UNDEF: 2)
    7bd0:	00040206 	andeq	r0, r4, r6, lsl #4
    7bd4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    7bd8:	00000d61 	andeq	r0, r0, r1, ror #26
    7bdc:	002eee03 	eoreq	lr, lr, r3, lsl #28
    7be0:	18280200 	stmdane	r8!, {r9}
    7be4:	0000003f 	andeq	r0, r0, pc, lsr r0
    7be8:	0a050402 	beq	148bf8 <__core1_vectors-0xeb7408>
    7bec:	02000008 	andeq	r0, r0, #8
    7bf0:	08050508 	stmdaeq	r5, {r3, r8, sl}
    7bf4:	45030000 	strmi	r0, [r3, #-0]
    7bf8:	0200002a 	andeq	r0, r0, #42	; 0x2a
    7bfc:	0059182e 	subseq	r1, r9, lr, lsr #16
    7c00:	01020000 	mrseq	r0, (UNDEF: 2)
    7c04:	00040008 	andeq	r0, r4, r8
    7c08:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7c0c:	00000e9e 	muleq	r0, lr, lr
    7c10:	0030d003 	eorseq	sp, r0, r3
    7c14:	19340200 	ldmdbne	r4!, {r9}
    7c18:	00000078 	andeq	r0, r0, r8, ror r0
    7c1c:	00006704 	andeq	r6, r0, r4, lsl #14
    7c20:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7c24:	00000b40 	andeq	r0, r0, r0, asr #22
    7c28:	3b070802 	blcc	1c9c38 <__core1_vectors-0xe363c8>
    7c2c:	0500000b 	streq	r0, [r0, #-11]
    7c30:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7c34:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7c38:	000b4507 	andeq	r4, fp, r7, lsl #10
    7c3c:	008d0600 	addeq	r0, sp, r0, lsl #12
    7c40:	2d030000 	stccs	0, cr0, [r3, #-0]
    7c44:	02000023 	andeq	r0, r0, #35	; 0x23
    7c48:	008d1a56 	addeq	r1, sp, r6, asr sl
    7c4c:	87030000 	strhi	r0, [r3, -r0]
    7c50:	03000030 	movweq	r0, #48	; 0x30
    7c54:	008d17d1 	ldrdeq	r1, [sp], r1	; <UNPREDICTABLE>
    7c58:	a5060000 	strge	r0, [r6, #-0]
    7c5c:	02000000 	andeq	r0, r0, #0
    7c60:	0a9d0408 	beq	fe748c88 <__shm_end__+0xbe748c88>
    7c64:	d6030000 	strle	r0, [r3], -r0
    7c68:	04000004 	streq	r0, [r0], #-4
    7c6c:	00331d41 	eorseq	r1, r3, r1, asr #26
    7c70:	13070000 	movwne	r0, #28672	; 0x7000
    7c74:	0700001e 	smladeq	r0, lr, r0, r0
    7c78:	00005901 	andeq	r5, r0, r1, lsl #18
    7c7c:	0e650500 	cdpeq	5, 6, cr0, cr5, cr0, {0}
    7c80:	000000e8 	andeq	r0, r0, r8, ror #1
    7c84:	00238c08 	eoreq	r8, r3, r8, lsl #24
    7c88:	fb080000 	blx	207c92 <__core1_vectors-0xdf836e>
    7c8c:	0100001d 	tsteq	r0, sp, lsl r0
    7c90:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    7c94:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    7c98:	0000c903 	andeq	ip, r0, r3, lsl #18
    7c9c:	23f80700 	mvnscs	r0, #0, 14
    7ca0:	01070000 	mrseq	r0, (UNDEF: 7)
    7ca4:	00000059 	andeq	r0, r0, r9, asr r0
    7ca8:	130e7305 	movwne	r7, #58117	; 0xe305
    7cac:	08000001 	stmdaeq	r0, {r0}
    7cb0:	0000221e 	andeq	r2, r0, lr, lsl r2
    7cb4:	21060800 	tstcs	r6, r0, lsl #16
    7cb8:	00010000 	andeq	r0, r1, r0
    7cbc:	00242c03 	eoreq	r2, r4, r3, lsl #24
    7cc0:	03770500 	cmneq	r7, #0, 10
    7cc4:	000000f4 	strdeq	r0, [r0], -r4
    7cc8:	00223407 	eoreq	r3, r2, r7, lsl #8
    7ccc:	59010700 	stmdbpl	r1, {r8, r9, sl}
    7cd0:	05000000 	streq	r0, [r0, #-0]
    7cd4:	013e0e7e 	teqeq	lr, lr, ror lr
    7cd8:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    7cdc:	00000022 	andeq	r0, r0, r2, lsr #32
    7ce0:	0025a108 	eoreq	sl, r5, r8, lsl #2
    7ce4:	03000100 	movweq	r0, #256	; 0x100
    7ce8:	00002256 	andeq	r2, r0, r6, asr r2
    7cec:	1f038d05 	svcne	0x00038d05
    7cf0:	07000001 	streq	r0, [r0, -r1]
    7cf4:	00002458 	andeq	r2, r0, r8, asr r4
    7cf8:	00590107 	subseq	r0, r9, r7, lsl #2
    7cfc:	bc050000 	stclt	0, cr0, [r5], {-0}
    7d00:	00018106 	andeq	r8, r1, r6, lsl #2
    7d04:	22960800 	addscs	r0, r6, #0, 16
    7d08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7d0c:	00002042 	andeq	r2, r0, r2, asr #32
    7d10:	21ca0801 	biccs	r0, sl, r1, lsl #16
    7d14:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7d18:	00001ca1 	andeq	r1, r0, r1, lsr #25
    7d1c:	24b00803 	ldrtcs	r0, [r0], #2051	; 0x803
    7d20:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    7d24:	0000219f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    7d28:	77030007 	strvc	r0, [r3, -r7]
    7d2c:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
    7d30:	014a21c6 	smlalbteq	r2, sl, r6, r1
    7d34:	9f070000 	svcls	0x00070000
    7d38:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    7d3c:	00005901 	andeq	r5, r0, r1, lsl #18
    7d40:	06f70500 	ldrbteq	r0, [r7], r0, lsl #10
    7d44:	00000230 	andeq	r0, r0, r0, lsr r2
    7d48:	00230908 	eoreq	r0, r3, r8, lsl #18
    7d4c:	9108ff00 	tstls	r8, r0, lsl #30	; <UNPREDICTABLE>
    7d50:	0000001e 	andeq	r0, r0, lr, lsl r0
    7d54:	0021eb08 	eoreq	lr, r1, r8, lsl #22
    7d58:	52080100 	andpl	r0, r8, #0, 2
    7d5c:	0200001c 	andeq	r0, r0, #28
    7d60:	0025b708 	eoreq	fp, r5, r8, lsl #14
    7d64:	32080300 	andcc	r0, r8, #0, 6
    7d68:	10000020 	andne	r0, r0, r0, lsr #32
    7d6c:	00231c08 	eoreq	r1, r3, r8, lsl #24
    7d70:	a5081300 	strge	r1, [r8, #-768]	; 0xfffffd00
    7d74:	2000001e 	andcs	r0, r0, lr, lsl r0
    7d78:	001e6c08 	andseq	r6, lr, r8, lsl #24
    7d7c:	c6084000 	strgt	r4, [r8], -r0
    7d80:	5000001c 	andpl	r0, r0, ip, lsl r0
    7d84:	0023c808 	eoreq	ip, r3, r8, lsl #16
    7d88:	a8086000 	stmdage	r8, {sp, lr}
    7d8c:	70000023 	andvc	r0, r0, r3, lsr #32
    7d90:	0020b308 	eoreq	fp, r0, r8, lsl #6
    7d94:	47084100 	strmi	r4, [r8, -r0, lsl #2]
    7d98:	5100001f 	tstpl	r0, pc, lsl r0
    7d9c:	001d4d08 	andseq	r4, sp, r8, lsl #26
    7da0:	39086100 	stmdbcc	r8, {r8, sp, lr}
    7da4:	7100001d 	tstvc	r0, sp, lsl r0
    7da8:	00234d08 	eoreq	r4, r3, r8, lsl #26
    7dac:	56084200 	strpl	r4, [r8], -r0, lsl #4
    7db0:	52000021 	andpl	r0, r0, #33	; 0x21
    7db4:	001ff908 	andseq	pc, pc, r8, lsl #18
    7db8:	ae086200 	cdpge	2, 0, cr6, cr8, cr0, {0}
    7dbc:	7200001f 	andvc	r0, r0, #31
    7dc0:	00201f08 	eoreq	r1, r0, r8, lsl #30
    7dc4:	e4084300 	str	r4, [r8], #-768	; 0xfffffd00
    7dc8:	53000023 	movwpl	r0, #35	; 0x23
    7dcc:	001c3f08 	andseq	r3, ip, r8, lsl #30
    7dd0:	0c086300 	stceq	3, cr6, [r8], {-0}
    7dd4:	73000020 	movwvc	r0, #32
    7dd8:	1fd80900 	svcne	0x00d80900
    7ddc:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
    7de0:	018d2101 	orreq	r2, sp, r1, lsl #2
    7de4:	ca0a0000 	bgt	287dec <__core1_vectors-0xd78214>
    7de8:	14000024 	strne	r0, [r0], #-36	; 0xffffffdc
    7dec:	1005cf05 	andne	ip, r5, r5, lsl #30
    7df0:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    7df4:	0061760b 	rsbeq	r7, r1, fp, lsl #12
    7df8:	1a05d105 	bne	17c214 <__core1_vectors-0xe83dec>
    7dfc:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    7e00:	61700b00 	cmnvs	r0, r0, lsl #22
    7e04:	05d50500 	ldrbeq	r0, [r5, #1280]	; 0x500
    7e08:	0002ba1a 	andeq	fp, r2, sl, lsl sl
    7e0c:	dc0c0400 	cfstrsle	mvf0, [ip], {-0}
    7e10:	05000030 	streq	r0, [r0, #-48]	; 0xffffffd0
    7e14:	671a05da 			; <UNDEFINED> instruction: 0x671a05da
    7e18:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7e1c:	0021e40c 	eoreq	lr, r1, ip, lsl #8
    7e20:	05de0500 	ldrbeq	r0, [lr, #1280]	; 0x500
    7e24:	0001811a 	andeq	r8, r1, sl, lsl r1
    7e28:	3d0c0c00 	stccc	12, cr0, [ip, #-0]
    7e2c:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
    7e30:	301a05df 			; <UNDEFINED> instruction: 0x301a05df
    7e34:	0d000002 	stceq	0, cr0, [r0, #-8]
    7e38:	0022780c 	eoreq	r7, r2, ip, lsl #16
    7e3c:	05e40500 	strbeq	r0, [r4, #1280]!	; 0x500
    7e40:	0000e81a 	andeq	lr, r0, sl, lsl r8
    7e44:	c70c0e00 	strgt	r0, [ip, -r0, lsl #28]
    7e48:	05000020 	streq	r0, [r0, #-32]	; 0xffffffe0
    7e4c:	3e1a05e5 	cdpcc	5, 1, cr0, cr10, cr5, {7}
    7e50:	0f000001 	svceq	0x00000001
    7e54:	0023720c 	eoreq	r7, r3, ip, lsl #4
    7e58:	05e80500 	strbeq	r0, [r8, #1280]!	; 0x500
    7e5c:	0001131a 	andeq	r1, r1, sl, lsl r3
    7e60:	0d001000 	stceq	0, cr1, [r0, #-0]
    7e64:	24df0904 	ldrbcs	r0, [pc], #2308	; 7e6c <__core1_vectors-0xff8194>
    7e68:	ec050000 	stc	0, cr0, [r5], {-0}
    7e6c:	023d0305 	eorseq	r0, sp, #335544320	; 0x14000000
    7e70:	040e0000 	streq	r0, [lr], #-0
    7e74:	000002d6 	ldrdeq	r0, [r0], -r6
    7e78:	09080102 	stmdbeq	r8, {r1, r8}
    7e7c:	06000004 	streq	r0, [r0], -r4
    7e80:	000002cf 	andeq	r0, r0, pc, asr #5
    7e84:	002e9807 	eoreq	r9, lr, r7, lsl #16
    7e88:	59010700 	stmdbpl	r1, {r8, r9, sl}
    7e8c:	06000000 	streq	r0, [r0], -r0
    7e90:	03060e41 	movweq	r0, #28225	; 0x6e41
    7e94:	77080000 	strvc	r0, [r8, -r0]
    7e98:	0000002c 	andeq	r0, r0, ip, lsr #32
    7e9c:	002b9808 	eoreq	r9, fp, r8, lsl #16
    7ea0:	cf080100 	svcgt	0x00080100
    7ea4:	0200002c 	andeq	r0, r0, #44	; 0x2c
    7ea8:	002cab08 	eoreq	sl, ip, r8, lsl #22
    7eac:	09000300 	stmdbeq	r0, {r8, r9}
    7eb0:	00000c88 	andeq	r0, r0, r8, lsl #25
    7eb4:	17015e03 	strne	r5, [r1, -r3, lsl #28]
    7eb8:	0000008d 	andeq	r0, r0, sp, lsl #1
    7ebc:	0030e203 	eorseq	lr, r0, r3, lsl #4
    7ec0:	0e2e0700 	cdpeq	7, 2, cr0, cr14, cr0, {0}
    7ec4:	0000003f 	andeq	r0, r0, pc, lsr r0
    7ec8:	000add03 	andeq	sp, sl, r3, lsl #26
    7ecc:	0e740700 	cdpeq	7, 7, cr0, cr4, cr0, {0}
    7ed0:	0000003f 	andeq	r0, r0, pc, lsr r0
    7ed4:	a507040f 	strge	r0, [r7, #-1039]	; 0xfffffbf1
    7ed8:	00034d03 	andeq	r4, r3, r3, lsl #26
    7edc:	023a1000 	eorseq	r1, sl, #0
    7ee0:	a7070000 	strge	r0, [r7, -r0]
    7ee4:	0003060c 	andeq	r0, r3, ip, lsl #12
    7ee8:	0ae51000 	beq	ff94bef0 <__shm_end__+0xbf94bef0>
    7eec:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    7ef0:	00034d13 	andeq	r4, r3, r3, lsl sp
    7ef4:	59110000 	ldmdbpl	r1, {}	; <UNPREDICTABLE>
    7ef8:	5d000000 	stcpl	0, cr0, [r0, #-0]
    7efc:	12000003 	andne	r0, r0, #3
    7f00:	0000008d 	andeq	r0, r0, sp, lsl #1
    7f04:	08130003 	ldmdaeq	r3, {r0, r1}
    7f08:	8109a207 	tsthi	r9, r7, lsl #4
    7f0c:	14000003 	strne	r0, [r0], #-3
    7f10:	00000a69 	andeq	r0, r0, r9, ror #20
    7f14:	8607a407 	strhi	sl, [r7], -r7, lsl #8
    7f18:	00000000 	andeq	r0, r0, r0
    7f1c:	00000b14 	andeq	r0, r0, r4, lsl fp
    7f20:	05a90700 	streq	r0, [r9, #1792]!	; 0x700
    7f24:	0000032b 	andeq	r0, r0, fp, lsr #6
    7f28:	20030004 	andcs	r0, r3, r4
    7f2c:	0700000c 	streq	r0, [r0, -ip]
    7f30:	035d03aa 	cmpeq	sp, #-1476395006	; 0xa8000002
    7f34:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    7f38:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    7f3c:	00781916 	rsbseq	r1, r8, r6, lsl r9
    7f40:	b3030000 	movwlt	r0, #12288	; 0x3000
    7f44:	09000006 	stmdbeq	r0, {r1, r2}
    7f48:	00860d0c 	addeq	r0, r6, ip, lsl #26
    7f4c:	c7030000 	strgt	r0, [r3, -r0]
    7f50:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    7f54:	03991b23 	orrseq	r1, r9, #35840	; 0x8c00
    7f58:	08150000 	ldmdaeq	r5, {}	; <UNPREDICTABLE>
    7f5c:	18000007 	stmdane	r0, {r0, r1, r2}
    7f60:	0b083408 	bleq	214f88 <__core1_vectors-0xdeb078>
    7f64:	14000004 	strne	r0, [r0], #-4
    7f68:	00000a34 	andeq	r0, r0, r4, lsr sl
    7f6c:	0b133608 	bleq	4d5794 <__core1_vectors-0xb2a86c>
    7f70:	00000004 	andeq	r0, r0, r4
    7f74:	006b5f16 	rsbeq	r5, fp, r6, lsl pc
    7f78:	86073708 	strhi	r3, [r7], -r8, lsl #14
    7f7c:	04000000 	streq	r0, [r0], #-0
    7f80:	00076114 	andeq	r6, r7, r4, lsl r1
    7f84:	0b370800 	bleq	dc9f8c <__core1_vectors-0x236074>
    7f88:	00000086 	andeq	r0, r0, r6, lsl #1
    7f8c:	08bf1408 	ldmeq	pc!, {r3, sl, ip}	; <UNPREDICTABLE>
    7f90:	37080000 	strcc	r0, [r8, -r0]
    7f94:	00008614 	andeq	r8, r0, r4, lsl r6
    7f98:	01140c00 	tsteq	r4, r0, lsl #24
    7f9c:	08000006 	stmdaeq	r0, {r1, r2}
    7fa0:	00861b37 	addeq	r1, r6, r7, lsr fp
    7fa4:	16100000 	ldrne	r0, [r0], -r0
    7fa8:	0800785f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    7fac:	04110b38 	ldreq	r0, [r1], #-2872	; 0xfffff4c8
    7fb0:	00140000 	andseq	r0, r4, r0
    7fb4:	03b1040e 			; <UNDEFINED> instruction: 0x03b1040e
    7fb8:	8d110000 	ldchi	0, cr0, [r1, #-0]
    7fbc:	21000003 	tstcs	r0, r3
    7fc0:	12000004 	andne	r0, r0, #4
    7fc4:	0000008d 	andeq	r0, r0, sp, lsl #1
    7fc8:	40150000 	andsmi	r0, r5, r0
    7fcc:	24000001 	strcs	r0, [r0], #-1
    7fd0:	a4083c08 	strge	r3, [r8], #-3080	; 0xfffff3f8
    7fd4:	14000004 	strne	r0, [r0], #-4
    7fd8:	0000015c 	andeq	r0, r0, ip, asr r1
    7fdc:	86093e08 	strhi	r3, [r9], -r8, lsl #28
    7fe0:	00000000 	andeq	r0, r0, r0
    7fe4:	000f8f14 	andeq	r8, pc, r4, lsl pc	; <UNPREDICTABLE>
    7fe8:	093f0800 	ldmdbeq	pc!, {fp}	; <UNPREDICTABLE>
    7fec:	00000086 	andeq	r0, r0, r6, lsl #1
    7ff0:	0eb11404 	cdpeq	4, 11, cr1, cr1, cr4, {0}
    7ff4:	40080000 	andmi	r0, r8, r0
    7ff8:	00008609 	andeq	r8, r0, r9, lsl #12
    7ffc:	fb140800 	blx	50a006 <__core1_vectors-0xaf5ffa>
    8000:	08000009 	stmdaeq	r0, {r0, r3}
    8004:	00860941 	addeq	r0, r6, r1, asr #18
    8008:	140c0000 	strne	r0, [ip], #-0
    800c:	0000038c 	andeq	r0, r0, ip, lsl #7
    8010:	86094208 	strhi	r4, [r9], -r8, lsl #4
    8014:	10000000 	andne	r0, r0, r0
    8018:	000de414 	andeq	lr, sp, r4, lsl r4
    801c:	09430800 	stmdbeq	r3, {fp}^
    8020:	00000086 	andeq	r0, r0, r6, lsl #1
    8024:	0a7b1414 	beq	1ecd07c <__end__+0xeb105c>
    8028:	44080000 	strmi	r0, [r8], #-0
    802c:	00008609 	andeq	r8, r0, r9, lsl #12
    8030:	a9141800 	ldmdbge	r4, {fp, ip}
    8034:	0800000a 	stmdaeq	r0, {r1, r3}
    8038:	00860945 	addeq	r0, r6, r5, asr #18
    803c:	141c0000 	ldrne	r0, [ip], #-0
    8040:	00000f55 	andeq	r0, r0, r5, asr pc
    8044:	86094608 	strhi	r4, [r9], -r8, lsl #12
    8048:	20000000 	andcs	r0, r0, r0
    804c:	02631700 	rsbeq	r1, r3, #0, 14
    8050:	01080000 	mrseq	r0, (UNDEF: 8)
    8054:	e9084f08 	stmdb	r8, {r3, r8, r9, sl, fp, lr}
    8058:	14000004 	strne	r0, [r0], #-4
    805c:	00000f41 	andeq	r0, r0, r1, asr #30
    8060:	e90a5008 	stmdb	sl, {r3, ip, lr}
    8064:	00000004 	andeq	r0, r0, r4
    8068:	000b6614 	andeq	r6, fp, r4, lsl r6
    806c:	09510800 	ldmdbeq	r1, {fp}^
    8070:	000004e9 	andeq	r0, r0, r9, ror #9
    8074:	0dd41880 	ldcleq	8, cr1, [r4, #512]	; 0x200
    8078:	53080000 	movwpl	r0, #32768	; 0x8000
    807c:	00038d0a 	andeq	r8, r3, sl, lsl #26
    8080:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    8084:	00000e10 	andeq	r0, r0, r0, lsl lr
    8088:	8d0a5608 	stchi	6, cr5, [sl, #-32]	; 0xffffffe0
    808c:	04000003 	streq	r0, [r0], #-3
    8090:	ba110001 	blt	44809c <__core1_vectors-0xbb7f64>
    8094:	f9000002 			; <UNDEFINED> instruction: 0xf9000002
    8098:	12000004 	andne	r0, r0, #4
    809c:	0000008d 	andeq	r0, r0, sp, lsl #1
    80a0:	5417001f 	ldrpl	r0, [r7], #-31	; 0xffffffe1
    80a4:	9000000a 	andls	r0, r0, sl
    80a8:	08620801 	stmdaeq	r2!, {r0, fp}^
    80ac:	0000053c 	andeq	r0, r0, ip, lsr r5
    80b0:	000a3414 	andeq	r3, sl, r4, lsl r4
    80b4:	12630800 	rsbne	r0, r3, #0, 16
    80b8:	0000053c 	andeq	r0, r0, ip, lsr r5
    80bc:	0e041400 	cfcpyseq	mvf1, mvf4
    80c0:	64080000 	strvs	r0, [r8], #-0
    80c4:	00008606 	andeq	r8, r0, r6, lsl #12
    80c8:	93140400 	tstls	r4, #0, 8
    80cc:	08000004 	stmdaeq	r0, {r2}
    80d0:	05420966 	strbeq	r0, [r2, #-2406]	; 0xfffff69a
    80d4:	14080000 	strne	r0, [r8], #-0
    80d8:	00000263 	andeq	r0, r0, r3, ror #4
    80dc:	a41e6708 	ldrge	r6, [lr], #-1800	; 0xfffff8f8
    80e0:	88000004 	stmdahi	r0, {r2}
    80e4:	f9040e00 			; <UNDEFINED> instruction: 0xf9040e00
    80e8:	11000004 	tstne	r0, r4
    80ec:	00000552 	andeq	r0, r0, r2, asr r5
    80f0:	00000552 	andeq	r0, r0, r2, asr r5
    80f4:	00008d12 	andeq	r8, r0, r2, lsl sp
    80f8:	0e001f00 	cdpeq	15, 0, cr1, cr0, cr0, {0}
    80fc:	00055804 	andeq	r5, r5, r4, lsl #16
    8100:	09151900 	ldmdbeq	r5, {r8, fp, ip}
    8104:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    8108:	81087a08 	tsthi	r8, r8, lsl #20
    810c:	14000005 	strne	r0, [r0], #-5
    8110:	00000ba5 	andeq	r0, r0, r5, lsr #23
    8114:	81117b08 	tsthi	r1, r8, lsl #22
    8118:	00000005 	andeq	r0, r0, r5
    811c:	0030db14 	eorseq	sp, r0, r4, lsl fp
    8120:	067c0800 	ldrbteq	r0, [ip], -r0, lsl #16
    8124:	00000086 	andeq	r0, r0, r6, lsl #1
    8128:	040e0004 	streq	r0, [lr], #-4
    812c:	00000059 	andeq	r0, r0, r9, asr r0
    8130:	00068115 	andeq	r8, r6, r5, lsl r1
    8134:	ba086800 	blt	22213c <__core1_vectors-0xdddec4>
    8138:	0006ca08 	andeq	ip, r6, r8, lsl #20
    813c:	705f1600 	subsvc	r1, pc, r0, lsl #12
    8140:	12bb0800 	adcsne	r0, fp, #0, 16
    8144:	00000581 	andeq	r0, r0, r1, lsl #11
    8148:	725f1600 	subsvc	r1, pc, #0, 12
    814c:	07bc0800 	ldreq	r0, [ip, r0, lsl #16]!
    8150:	00000086 	andeq	r0, r0, r6, lsl #1
    8154:	775f1604 	ldrbvc	r1, [pc, -r4, lsl #12]
    8158:	07bd0800 	ldreq	r0, [sp, r0, lsl #16]!
    815c:	00000086 	andeq	r0, r0, r6, lsl #1
    8160:	0a3a1408 	beq	e8d188 <__core1_vectors-0x172e78>
    8164:	be080000 	cdplt	0, 0, cr0, cr8, cr0, {0}
    8168:	00002c09 	andeq	r2, r0, r9, lsl #24
    816c:	5d140c00 	ldcpl	12, cr0, [r4, #-0]
    8170:	08000002 	stmdaeq	r0, {r1}
    8174:	002c09bf 	strhteq	r0, [ip], -pc
    8178:	160e0000 	strne	r0, [lr], -r0
    817c:	0066625f 	rsbeq	r6, r6, pc, asr r2
    8180:	5911c008 	ldmdbpl	r1, {r3, lr, pc}
    8184:	10000005 	andne	r0, r0, r5
    8188:	000df614 	andeq	pc, sp, r4, lsl r6	; <UNPREDICTABLE>
    818c:	07c10800 	strbeq	r0, [r1, r0, lsl #16]
    8190:	00000086 	andeq	r0, r0, r6, lsl #1
    8194:	05e41418 	strbeq	r1, [r4, #1048]!	; 0x418
    8198:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    819c:	0002ba0a 	andeq	fp, r2, sl, lsl #20
    81a0:	39141c00 	ldmdbcc	r4, {sl, fp, ip}
    81a4:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    81a8:	08421dca 	stmdaeq	r2, {r1, r3, r6, r7, r8, sl, fp, ip}^
    81ac:	14200000 	strtne	r0, [r0], #-0
    81b0:	0000117d 	andeq	r1, r0, sp, ror r1
    81b4:	661dcc08 	ldrvs	ip, [sp], -r8, lsl #24
    81b8:	24000008 	strcs	r0, [r0], #-8
    81bc:	000ac614 	andeq	ip, sl, r4, lsl r6
    81c0:	0dcf0800 	stcleq	8, cr0, [pc]	; 81c8 <__core1_vectors-0xff7e38>
    81c4:	0000088a 	andeq	r0, r0, sl, lsl #17
    81c8:	2b4a1428 	blcs	128d270 <__end__+0x271250>
    81cc:	d0080000 	andle	r0, r8, r0
    81d0:	0008a409 	andeq	sl, r8, r9, lsl #8
    81d4:	5f162c00 	svcpl	0x00162c00
    81d8:	08006275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
    81dc:	055911d3 	ldrbeq	r1, [r9, #-467]	; 0xfffffe2d
    81e0:	16300000 	ldrtne	r0, [r0], -r0
    81e4:	0070755f 	rsbseq	r7, r0, pc, asr r5
    81e8:	8112d408 	tsthi	r2, r8, lsl #8
    81ec:	38000005 	stmdacc	r0, {r0, r2}
    81f0:	72755f16 	rsbsvc	r5, r5, #22, 30	; 0x58
    81f4:	07d50800 	ldrbeq	r0, [r5, r0, lsl #16]
    81f8:	00000086 	andeq	r0, r0, r6, lsl #1
    81fc:	0a0a143c 	beq	28d2f4 <__core1_vectors-0xd72d0c>
    8200:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    8204:	0008aa11 	andeq	sl, r8, r1, lsl sl
    8208:	56144000 	ldrpl	r4, [r4], -r0
    820c:	08000001 	stmdaeq	r0, {r0}
    8210:	08ba11d9 	ldmeq	sl!, {r0, r3, r4, r6, r7, r8, ip}
    8214:	16430000 	strbne	r0, [r3], -r0
    8218:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    821c:	5911dc08 	ldmdbpl	r1, {r3, sl, fp, ip, lr, pc}
    8220:	44000005 	strmi	r0, [r0], #-5
    8224:	002ee314 	eoreq	lr, lr, r4, lsl r3
    8228:	07df0800 	ldrbeq	r0, [pc, r0, lsl #16]
    822c:	00000086 	andeq	r0, r0, r6, lsl #1
    8230:	0627144c 	strteq	r1, [r7], -ip, asr #8
    8234:	e0080000 	and	r0, r8, r0
    8238:	0003130a 	andeq	r1, r3, sl, lsl #6
    823c:	3e145000 	cdpcc	0, 1, cr5, cr4, cr0, {0}
    8240:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    8244:	06e812e3 	strbteq	r1, [r8], r3, ror #5
    8248:	14540000 	ldrbne	r0, [r4], #-0
    824c:	000001ab 	andeq	r0, r0, fp, lsr #3
    8250:	a50ce708 	strge	lr, [ip, #-1800]	; 0xfffff8f8
    8254:	58000003 	stmdapl	r0, {r0, r1}
    8258:	000a2614 	andeq	r2, sl, r4, lsl r6
    825c:	0ee90800 	cdpeq	8, 14, cr0, cr9, cr0, {0}
    8260:	00000381 	andeq	r0, r0, r1, lsl #7
    8264:	0694145c 			; <UNDEFINED> instruction: 0x0694145c
    8268:	ea080000 	b	208270 <__core1_vectors-0xdf7d90>
    826c:	00008609 	andeq	r8, r0, r9, lsl #12
    8270:	1a006400 	bne	21278 <__core1_vectors-0xfded88>
    8274:	00000086 	andeq	r0, r0, r6, lsl #1
    8278:	000006e8 	andeq	r0, r0, r8, ror #13
    827c:	0006e81b 	andeq	lr, r6, fp, lsl r8
    8280:	02ba1b00 	adcseq	r1, sl, #0, 22
    8284:	3c1b0000 	ldccc	0, cr0, [fp], {-0}
    8288:	1b000008 	blne	82b0 <__core1_vectors-0xff7d50>
    828c:	00000086 	andeq	r0, r0, r6, lsl #1
    8290:	f3040e00 	vcge.f32	d0, d4, d0
    8294:	06000006 	streq	r0, [r0], -r6
    8298:	000006e8 	andeq	r0, r0, r8, ror #13
    829c:	0004461c 	andeq	r4, r4, ip, lsl r6
    82a0:	08042800 	stmdaeq	r4, {fp, sp}
    82a4:	3c080265 	sfmcc	f0, 4, [r8], {101}	; 0x65
    82a8:	0c000008 	stceq	0, cr0, [r0], {8}
    82ac:	00000992 	muleq	r0, r2, r9
    82b0:	07026708 	streq	r6, [r2, -r8, lsl #14]
    82b4:	00000086 	andeq	r0, r0, r6, lsl #1
    82b8:	05220c00 	streq	r0, [r2, #-3072]!	; 0xfffff400
    82bc:	6c080000 	stcvs	0, cr0, [r8], {-0}
    82c0:	09160b02 	ldmdbeq	r6, {r1, r8, r9, fp}
    82c4:	0c040000 	stceq	0, cr0, [r4], {-0}
    82c8:	00000b87 	andeq	r0, r0, r7, lsl #23
    82cc:	14026c08 	strne	r6, [r2], #-3080	; 0xfffff3f8
    82d0:	00000916 	andeq	r0, r0, r6, lsl r9
    82d4:	0a100c08 	beq	40b2fc <__core1_vectors-0xbf4d04>
    82d8:	6c080000 	stcvs	0, cr0, [r8], {-0}
    82dc:	09161e02 	ldmdbeq	r6, {r1, r9, sl, fp, ip}
    82e0:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    82e4:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    82e8:	08026e08 	stmdaeq	r2, {r3, r9, sl, fp, sp, lr}
    82ec:	00000086 	andeq	r0, r0, r6, lsl #1
    82f0:	07fa0c10 			; <UNDEFINED> instruction: 0x07fa0c10
    82f4:	6f080000 	svcvs	0x00080000
    82f8:	0b160802 	bleq	58a308 <__core1_vectors-0xa75cf8>
    82fc:	0c140000 	ldceq	0, cr0, [r4], {-0}
    8300:	0000042d 	andeq	r0, r0, sp, lsr #8
    8304:	07027208 	streq	r7, [r2, -r8, lsl #4]
    8308:	00000086 	andeq	r0, r0, r6, lsl #1
    830c:	0e410c30 	mcreq	12, 2, r0, cr1, cr0, {1}
    8310:	73080000 	movwvc	r0, #32768	; 0x8000
    8314:	0b2b1602 	bleq	acdb24 <__core1_vectors-0x5324dc>
    8318:	0c340000 	ldceq	0, cr0, [r4], #-0
    831c:	00000689 	andeq	r0, r0, r9, lsl #13
    8320:	07027508 	streq	r7, [r2, -r8, lsl #10]
    8324:	00000086 	andeq	r0, r0, r6, lsl #1
    8328:	077d0c38 			; <UNDEFINED> instruction: 0x077d0c38
    832c:	77080000 	strvc	r0, [r8, -r0]
    8330:	0b3c0a02 	bleq	f0ab40 <__core1_vectors-0xf54c0>
    8334:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    8338:	00000e51 	andeq	r0, r0, r1, asr lr
    833c:	13027a08 	movwne	r7, #10760	; 0x2a08
    8340:	0000040b 	andeq	r0, r0, fp, lsl #8
    8344:	02f10c40 	rscseq	r0, r1, #64, 24	; 0x4000
    8348:	7b080000 	blvc	208350 <__core1_vectors-0xdf7cb0>
    834c:	00860702 	addeq	r0, r6, r2, lsl #14
    8350:	0c440000 	mareq	acc0, r0, r4
    8354:	0000066f 	andeq	r0, r0, pc, ror #12
    8358:	13027c08 	movwne	r7, #11272	; 0x2c08
    835c:	0000040b 	andeq	r0, r0, fp, lsl #8
    8360:	08a90c48 	stmiaeq	r9!, {r3, r6, sl, fp}
    8364:	7d080000 	stcvc	0, cr0, [r8, #-0]
    8368:	0b421402 	bleq	108d378 <__end__+0x71358>
    836c:	0c4c0000 	mareq	acc0, r0, ip
    8370:	00000110 	andeq	r0, r0, r0, lsl r1
    8374:	07028008 	streq	r8, [r2, -r8]
    8378:	00000086 	andeq	r0, r0, r6, lsl #1
    837c:	062f0c50 			; <UNDEFINED> instruction: 0x062f0c50
    8380:	81080000 	mrshi	r0, (UNDEF: 8)
    8384:	083c0902 	ldmdaeq	ip!, {r1, r8, fp}
    8388:	0c540000 	mraeq	r0, r4, acc0
    838c:	00000a05 	andeq	r0, r0, r5, lsl #20
    8390:	0702a408 	streq	sl, [r2, -r8, lsl #8]
    8394:	00000af1 	strdeq	r0, [r0], -r1
    8398:	0a541d58 	beq	150f900 <__end__+0x4f38e0>
    839c:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
    83a0:	053c1302 	ldreq	r1, [ip, #-770]!	; 0xfffffcfe
    83a4:	01480000 	mrseq	r0, (UNDEF: 72)
    83a8:	0007871d 	andeq	r8, r7, sp, lsl r7
    83ac:	02a90800 	adceq	r0, r9, #0, 16
    83b0:	0004f912 	andeq	pc, r4, r2, lsl r9	; <UNPREDICTABLE>
    83b4:	1d014c00 	stcne	12, cr4, [r1, #-0]
    83b8:	0000061d 	andeq	r0, r0, sp, lsl r6
    83bc:	0c02ad08 	stceq	13, cr10, [r2], {8}
    83c0:	00000b53 	andeq	r0, r0, r3, asr fp
    83c4:	341d02dc 	ldrcc	r0, [sp], #-732	; 0xfffffd24
    83c8:	08000008 	stmdaeq	r0, {r3}
    83cc:	d71002b2 			; <UNDEFINED> instruction: 0xd71002b2
    83d0:	e0000008 	and	r0, r0, r8
    83d4:	00131d02 	andseq	r1, r3, r2, lsl #26
    83d8:	b4080000 	strlt	r0, [r8], #-0
    83dc:	0b5f0a02 	bleq	17cabec <__end__+0x7aebcc>
    83e0:	02ec0000 	rsceq	r0, ip, #0
    83e4:	cf040e00 	svcgt	0x00040e00
    83e8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    83ec:	0006ca04 	andeq	ip, r6, r4, lsl #20
    83f0:	00861a00 	addeq	r1, r6, r0, lsl #20
    83f4:	08660000 	stmdaeq	r6!, {}^	; <UNPREDICTABLE>
    83f8:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    83fc:	1b000006 	blne	841c <__core1_vectors-0xff7be4>
    8400:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    8404:	0002c91b 	andeq	ip, r2, fp, lsl r9
    8408:	00861b00 	addeq	r1, r6, r0, lsl #22
    840c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8410:	00084804 	andeq	r4, r8, r4, lsl #16
    8414:	031f1a00 	tsteq	pc, #0, 20
    8418:	088a0000 	stmeq	sl, {}	; <UNPREDICTABLE>
    841c:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    8420:	1b000006 	blne	8440 <__core1_vectors-0xff7bc0>
    8424:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    8428:	00031f1b 	andeq	r1, r3, fp, lsl pc
    842c:	00861b00 	addeq	r1, r6, r0, lsl #22
    8430:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8434:	00086c04 	andeq	r6, r8, r4, lsl #24
    8438:	00861a00 	addeq	r1, r6, r0, lsl #20
    843c:	08a40000 	stmiaeq	r4!, {}	; <UNPREDICTABLE>
    8440:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    8444:	1b000006 	blne	8464 <__core1_vectors-0xff7b9c>
    8448:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    844c:	90040e00 	andls	r0, r4, r0, lsl #28
    8450:	11000008 	tstne	r0, r8
    8454:	00000059 	andeq	r0, r0, r9, asr r0
    8458:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    845c:	00008d12 	andeq	r8, r0, r2, lsl sp
    8460:	11000200 	mrsne	r0, R8_usr
    8464:	00000059 	andeq	r0, r0, r9, asr r0
    8468:	000008ca 	andeq	r0, r0, sl, asr #17
    846c:	00008d12 	andeq	r8, r0, r2, lsl sp
    8470:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8474:	00000c12 	andeq	r0, r0, r2, lsl ip
    8478:	1a012408 	bne	514a0 <__core1_vectors-0xfaeb60>
    847c:	00000587 	andeq	r0, r0, r7, lsl #11
    8480:	0008b90a 	andeq	fp, r8, sl, lsl #18
    8484:	28080c00 	stmdacs	r8, {sl, fp}
    8488:	09100801 	ldmdbeq	r0, {r0, fp}
    848c:	340c0000 	strcc	r0, [ip], #-0
    8490:	0800000a 	stmdaeq	r0, {r1, r3}
    8494:	1011012a 	andsne	r0, r1, sl, lsr #2
    8498:	00000009 	andeq	r0, r0, r9
    849c:	00082d0c 	andeq	r2, r8, ip, lsl #26
    84a0:	012b0800 			; <UNDEFINED> instruction: 0x012b0800
    84a4:	00008607 	andeq	r8, r0, r7, lsl #12
    84a8:	b30c0400 	movwlt	r0, #50176	; 0xc400
    84ac:	08000008 	stmdaeq	r0, {r3}
    84b0:	160b012c 	strne	r0, [fp], -ip, lsr #2
    84b4:	08000009 	stmdaeq	r0, {r0, r3}
    84b8:	d7040e00 	strle	r0, [r4, -r0, lsl #28]
    84bc:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    84c0:	0008ca04 	andeq	ip, r8, r4, lsl #20
    84c4:	0b7f0a00 	bleq	1fcaccc <__end__+0xfaecac>
    84c8:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    84cc:	55080144 	strpl	r0, [r8, #-324]	; 0xfffffebc
    84d0:	0c000009 	stceq	0, cr0, [r0], {9}
    84d4:	00000ac0 	andeq	r0, r0, r0, asr #21
    84d8:	12014508 	andne	r4, r1, #8, 10	; 0x2000000
    84dc:	00000955 	andeq	r0, r0, r5, asr r9
    84e0:	01bf0c00 			; <UNDEFINED> instruction: 0x01bf0c00
    84e4:	46080000 	strmi	r0, [r8], -r0
    84e8:	09551201 	ldmdbeq	r5, {r0, r9, ip}^
    84ec:	0c060000 	stceq	0, cr0, [r6], {-0}
    84f0:	00000e8c 	andeq	r0, r0, ip, lsl #29
    84f4:	12014708 	andne	r4, r1, #8, 14	; 0x200000
    84f8:	00000060 	andeq	r0, r0, r0, rrx
    84fc:	6011000c 	andsvs	r0, r1, ip
    8500:	65000000 	strvs	r0, [r0, #-0]
    8504:	12000009 	andne	r0, r0, #9
    8508:	0000008d 	andeq	r0, r0, sp, lsl #1
    850c:	d01e0002 	andsle	r0, lr, r2
    8510:	07028508 	streq	r8, [r2, -r8, lsl #10]
    8514:	00000a7a 	andeq	r0, r0, sl, ror sl
    8518:	0003ce0c 	andeq	ip, r3, ip, lsl #28
    851c:	02870800 	addeq	r0, r7, #0, 16
    8520:	00008d18 	andeq	r8, r0, r8, lsl sp
    8524:	ab0c0000 	blge	30852c <__core1_vectors-0xcf7ad4>
    8528:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    852c:	3c120288 	lfmcc	f0, 4, [r2], {136}	; 0x88
    8530:	04000008 	streq	r0, [r0], #-8
    8534:	00002d0c 	andeq	r2, r0, ip, lsl #26
    8538:	02890800 	addeq	r0, r9, #0, 16
    853c:	000a7a10 	andeq	r7, sl, r0, lsl sl
    8540:	100c0800 	andne	r0, ip, r0, lsl #16
    8544:	08000003 	stmdaeq	r0, {r0, r1}
    8548:	2117028a 	tstcs	r7, sl, lsl #5
    854c:	24000004 	strcs	r0, [r0], #-4
    8550:	0008830c 	andeq	r8, r8, ip, lsl #6
    8554:	028b0800 	addeq	r0, fp, #0, 16
    8558:	0000860f 	andeq	r8, r0, pc, lsl #12
    855c:	2f0c4800 	svccs	0x000c4800
    8560:	0800000a 	stmdaeq	r0, {r1, r3}
    8564:	7f2c028c 	svcvc	0x002c028c
    8568:	50000000 	andpl	r0, r0, r0
    856c:	000c760c 	andeq	r7, ip, ip, lsl #12
    8570:	028d0800 	addeq	r0, sp, #0, 16
    8574:	00091c1a 	andeq	r1, r9, sl, lsl ip
    8578:	540c5800 	strpl	r5, [ip], #-2048	; 0xfffff800
    857c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    8580:	8116028e 	tsthi	r6, lr, lsl #5
    8584:	68000003 	stmdavs	r0, {r0, r1}
    8588:	000afa0c 	andeq	pc, sl, ip, lsl #20
    858c:	028f0800 	addeq	r0, pc, #0, 16
    8590:	00038116 	andeq	r8, r3, r6, lsl r1
    8594:	180c7000 	stmdane	ip, {ip, sp, lr}
    8598:	0800000a 	stmdaeq	r0, {r1, r3}
    859c:	81160290 			; <UNDEFINED> instruction: 0x81160290
    85a0:	78000003 	stmdavc	r0, {r0, r1}
    85a4:	0001650c 	andeq	r6, r1, ip, lsl #10
    85a8:	02910800 	addseq	r0, r1, #0, 16
    85ac:	000a8a10 	andeq	r8, sl, r0, lsl sl
    85b0:	e30c8000 	movw	r8, #49152	; 0xc000
    85b4:	08000006 	stmdaeq	r0, {r1, r2}
    85b8:	9a100292 	bls	409008 <__core1_vectors-0xbf6ff8>
    85bc:	8800000a 	stmdahi	r0, {r1, r3}
    85c0:	000f980c 	andeq	r9, pc, ip, lsl #16
    85c4:	02930800 	addseq	r0, r3, #0, 16
    85c8:	0000860f 	andeq	r8, r0, pc, lsl #12
    85cc:	e30ca000 	movw	sl, #49152	; 0xc000
    85d0:	08000002 	stmdaeq	r0, {r1}
    85d4:	81160294 			; <UNDEFINED> instruction: 0x81160294
    85d8:	a4000003 	strge	r0, [r0], #-3
    85dc:	000bb80c 	andeq	fp, fp, ip, lsl #16
    85e0:	02950800 	addseq	r0, r5, #0, 16
    85e4:	00038116 	andeq	r8, r3, r6, lsl r1
    85e8:	010cac00 	tsteq	ip, r0, lsl #24
    85ec:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    85f0:	81160296 			; <UNDEFINED> instruction: 0x81160296
    85f4:	b4000003 	strlt	r0, [r0], #-3
    85f8:	0009ec0c 	andeq	lr, r9, ip, lsl #24
    85fc:	02970800 	addseq	r0, r7, #0, 16
    8600:	00038116 	andeq	r8, r3, r6, lsl r1
    8604:	450cbc00 	strmi	fp, [ip, #-3072]	; 0xfffff400
    8608:	08000001 	stmdaeq	r0, {r0}
    860c:	81160298 			; <UNDEFINED> instruction: 0x81160298
    8610:	c4000003 	strgt	r0, [r0], #-3
    8614:	0009900c 	andeq	r9, r9, ip
    8618:	02990800 	addseq	r0, r9, #0, 16
    861c:	00008608 	andeq	r8, r0, r8, lsl #12
    8620:	1100cc00 	tstne	r0, r0, lsl #24
    8624:	000002cf 	andeq	r0, r0, pc, asr #5
    8628:	00000a8a 	andeq	r0, r0, sl, lsl #21
    862c:	00008d12 	andeq	r8, r0, r2, lsl sp
    8630:	11001900 	tstne	r0, r0, lsl #18
    8634:	000002cf 	andeq	r0, r0, pc, asr #5
    8638:	00000a9a 	muleq	r0, sl, sl
    863c:	00008d12 	andeq	r8, r0, r2, lsl sp
    8640:	11000700 	tstne	r0, r0, lsl #14
    8644:	000002cf 	andeq	r0, r0, pc, asr #5
    8648:	00000aaa 	andeq	r0, r0, sl, lsr #21
    864c:	00008d12 	andeq	r8, r0, r2, lsl sp
    8650:	1e001700 	cdpne	7, 0, cr1, cr0, cr0, {0}
    8654:	029e08f0 	addseq	r0, lr, #240, 16	; 0xf00000
    8658:	000ad107 	andeq	sp, sl, r7, lsl #2
    865c:	0e180c00 	cdpeq	12, 1, cr0, cr8, cr0, {0}
    8660:	a1080000 	mrsge	r0, (UNDEF: 8)
    8664:	0ad11b02 	beq	ff44f274 <__shm_end__+0xbf44f274>
    8668:	0c000000 	stceq	0, cr0, [r0], {-0}
    866c:	00000848 	andeq	r0, r0, r8, asr #16
    8670:	1802a208 	stmdane	r2, {r3, r9, sp, pc}
    8674:	00000ae1 	andeq	r0, r0, r1, ror #21
    8678:	81110078 	tsthi	r1, r8, ror r0
    867c:	e1000005 	tst	r0, r5
    8680:	1200000a 	andne	r0, r0, #10
    8684:	0000008d 	andeq	r0, r0, sp, lsl #1
    8688:	8d11001d 	ldchi	0, cr0, [r1, #-116]	; 0xffffff8c
    868c:	f1000000 	cps	#0
    8690:	1200000a 	andne	r0, r0, #10
    8694:	0000008d 	andeq	r0, r0, sp, lsl #1
    8698:	f01f001d 			; <UNDEFINED> instruction: 0xf01f001d
    869c:	03028308 	movweq	r8, #8968	; 0x2308
    86a0:	00000b16 	andeq	r0, r0, r6, lsl fp
    86a4:	00044620 	andeq	r4, r4, r0, lsr #12
    86a8:	029a0800 	addseq	r0, sl, #0, 16
    86ac:	0009650b 	andeq	r6, r9, fp, lsl #10
    86b0:	01382000 	teqeq	r8, r0
    86b4:	a3080000 	movwge	r0, #32768	; 0x8000
    86b8:	0aaa0b02 	beq	fea8b2c8 <__shm_end__+0xbea8b2c8>
    86bc:	11000000 	mrsne	r0, (UNDEF: 0)
    86c0:	000002cf 	andeq	r0, r0, pc, asr #5
    86c4:	00000b26 	andeq	r0, r0, r6, lsr #22
    86c8:	00008d12 	andeq	r8, r0, r2, lsl sp
    86cc:	21001800 	tstcs	r0, r0, lsl #16
    86d0:	00000000 	andeq	r0, r0, r0
    86d4:	0b26040e 	bleq	989714 <__core1_vectors-0x6768ec>
    86d8:	3c220000 	stccc	0, cr0, [r2], #-0
    86dc:	1b00000b 	blne	8710 <__core1_vectors-0xff78f0>
    86e0:	000006e8 	andeq	r0, r0, r8, ror #13
    86e4:	31040e00 	tstcc	r4, r0, lsl #28
    86e8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    86ec:	00040b04 	andeq	r0, r4, r4, lsl #22
    86f0:	0b532200 	bleq	14d0ef8 <__end__+0x4b4ed8>
    86f4:	861b0000 	ldrhi	r0, [fp], -r0
    86f8:	00000000 	andeq	r0, r0, r0
    86fc:	0b59040e 	bleq	164973c <__end__+0x62d71c>
    8700:	040e0000 	streq	r0, [lr], #-0
    8704:	00000b48 	andeq	r0, r0, r8, asr #22
    8708:	0008ca11 	andeq	ip, r8, r1, lsl sl
    870c:	000b6f00 	andeq	r6, fp, r0, lsl #30
    8710:	008d1200 	addeq	r1, sp, r0, lsl #4
    8714:	00020000 	andeq	r0, r2, r0
    8718:	00045423 	andeq	r5, r4, r3, lsr #8
    871c:	03330800 	teqeq	r3, #0, 16
    8720:	0006e817 	andeq	lr, r6, r7, lsl r8
    8724:	044d2300 	strbeq	r2, [sp], #-768	; 0xfffffd00
    8728:	34080000 	strcc	r0, [r8], #-0
    872c:	06ee1d03 	strbteq	r1, [lr], r3, lsl #26
    8730:	14030000 	strne	r0, [r3], #-0
    8734:	0a00000c 	beq	876c <__core1_vectors-0xff7894>
    8738:	08ca1042 	stmiaeq	sl, {r1, r6, ip}^
    873c:	040e0000 	streq	r0, [lr], #-0
    8740:	00000b89 	andeq	r0, r0, r9, lsl #23
    8744:	00083c24 	andeq	r3, r8, r4, lsr #24
    8748:	0e360b00 	vaddeq.f64	d0, d6, d0
    874c:	00000b95 	muleq	r0, r5, fp
    8750:	00084224 	andeq	r4, r8, r4, lsr #4
    8754:	0e370b00 	vaddeq.f64	d0, d7, d0
    8758:	00000b95 	muleq	r0, r5, fp
    875c:	00006711 	andeq	r6, r0, r1, lsl r7
    8760:	000bc400 	andeq	ip, fp, r0, lsl #8
    8764:	008d2500 	addeq	r2, sp, r0, lsl #10
    8768:	3fff0000 	svccc	0x00ff0000
    876c:	2c692600 	stclcs	6, cr2, [r9], #-0
    8770:	50010000 	andpl	r0, r1, r0
    8774:	000bb311 	andeq	fp, fp, r1, lsl r3
    8778:	05400000 	strbeq	r0, [r0, #-0]
    877c:	00000003 	andeq	r0, r0, r3
    8780:	010c1300 	mrseq	r1, LR_mon
    8784:	0c090954 			; <UNDEFINED> instruction: 0x0c090954
    8788:	a6140000 	ldrge	r0, [r4], -r0
    878c:	0100000b 	tsteq	r0, fp
    8790:	0c090e55 	stceq	14, cr0, [r9], {85}	; 0x55
    8794:	14000000 	strne	r0, [r0], #-0
    8798:	000030dc 	ldrdeq	r3, [r0], -ip
    879c:	a50e5601 	strge	r5, [lr, #-1537]	; 0xfffff9ff
    87a0:	04000000 	streq	r0, [r0], #-0
    87a4:	66666f16 	uqadd16vs	r6, r6, r6
    87a8:	0e570100 	rdfeqs	f0, f7, f0
    87ac:	000000a5 	andeq	r0, r0, r5, lsr #1
    87b0:	040e0008 	streq	r0, [lr], #-8
    87b4:	0000004d 	andeq	r0, r0, sp, asr #32
    87b8:	002bb203 	eoreq	fp, fp, r3, lsl #4
    87bc:	03580100 	cmpeq	r8, #0, 2
    87c0:	00000bd8 	ldrdeq	r0, [r0], -r8
    87c4:	00004d11 	andeq	r4, r0, r1, lsl sp
    87c8:	000c2c00 	andeq	r2, ip, r0, lsl #24
    87cc:	008d2500 	addeq	r2, sp, r0, lsl #10
    87d0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
    87d4:	2b6f2600 	blcs	1bd1fdc <__end__+0xbb5fbc>
    87d8:	5a010000 	bpl	487e0 <__core1_vectors-0xfb7820>
    87dc:	000c1b12 	andeq	r1, ip, r2, lsl fp
    87e0:	05400000 	strbeq	r0, [r0, #-0]
    87e4:	00c00003 	sbceq	r0, r0, r3
    87e8:	2e672701 	cdpcs	7, 6, cr2, cr7, cr1, {0}
    87ec:	5b010000 	blpl	487f4 <__core1_vectors-0xfb780c>
    87f0:	000c0f13 	andeq	r0, ip, r3, lsl pc
    87f4:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    87f8:	28010059 	stmdacs	r1, {r0, r3, r4, r6}
    87fc:	00002e57 	andeq	r2, r0, r7, asr lr
    8800:	14015d01 	strne	r5, [r1], #-3329	; 0xfffff2ff
    8804:	00000c65 	andeq	r0, r0, r5, ror #24
    8808:	00000305 	andeq	r0, r0, r5, lsl #6
    880c:	040e0000 	streq	r0, [lr], #-0
    8810:	00000073 	andeq	r0, r0, r3, ror r0
    8814:	002b8728 	eoreq	r8, fp, r8, lsr #14
    8818:	015e0100 	cmpeq	lr, r0, lsl #2
    881c:	000c6514 	andeq	r6, ip, r4, lsl r5
    8820:	00030500 	andeq	r0, r3, r0, lsl #10
    8824:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8828:	00002b35 	andeq	r2, r0, r5, lsr fp
    882c:	14015f01 	strne	r5, [r1], #-3841	; 0xfffff0ff
    8830:	00000c65 	andeq	r0, r0, r5, ror #24
    8834:	00000305 	andeq	r0, r0, r5, lsl #6
    8838:	99280000 	stmdbls	r8!, {}	; <UNPREDICTABLE>
    883c:	0100002c 	tsteq	r0, ip, lsr #32
    8840:	65140160 	ldrvs	r0, [r4, #-352]	; 0xfffffea0
    8844:	0500000c 	streq	r0, [r0, #-12]
    8848:	00000003 	andeq	r0, r0, r3
    884c:	2c862800 	stccs	8, cr2, [r6], {0}
    8850:	61010000 	mrsvs	r0, (UNDEF: 1)
    8854:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    8858:	03050000 	movweq	r0, #20480	; 0x5000
    885c:	00000000 	andeq	r0, r0, r0
    8860:	002ebe28 	eoreq	fp, lr, r8, lsr #28
    8864:	01620100 	cmneq	r2, r0, lsl #2
    8868:	000c6514 	andeq	r6, ip, r4, lsl r5
    886c:	00030500 	andeq	r0, r3, r0, lsl #10
    8870:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8874:	00002d01 	andeq	r2, r0, r1, lsl #26
    8878:	14016301 	strne	r6, [r1], #-769	; 0xfffffcff
    887c:	00000c65 	andeq	r0, r0, r5, ror #24
    8880:	00000305 	andeq	r0, r0, r5, lsl #6
    8884:	99280000 	stmdbls	r8!, {}	; <UNPREDICTABLE>
    8888:	0100002d 	tsteq	r0, sp, lsr #32
    888c:	65140164 	ldrvs	r0, [r4, #-356]	; 0xfffffe9c
    8890:	0500000c 	streq	r0, [r0, #-12]
    8894:	00000003 	andeq	r0, r0, r3
    8898:	2d252800 	stccs	8, cr2, [r5, #-0]
    889c:	65010000 	strvs	r0, [r1, #-0]
    88a0:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    88a4:	03050000 	movweq	r0, #20480	; 0x5000
    88a8:	00000000 	andeq	r0, r0, r0
    88ac:	002c3928 	eoreq	r3, ip, r8, lsr #18
    88b0:	01660100 	cmneq	r6, r0, lsl #2
    88b4:	000c6514 	andeq	r6, ip, r4, lsl r5
    88b8:	00030500 	andeq	r0, r3, r0, lsl #10
    88bc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    88c0:	00002bbd 			; <UNDEFINED> instruction: 0x00002bbd
    88c4:	14016701 	strne	r6, [r1], #-1793	; 0xfffff8ff
    88c8:	00000c65 	andeq	r0, r0, r5, ror #24
    88cc:	00000305 	andeq	r0, r0, r5, lsl #6
    88d0:	a5280000 	strge	r0, [r8, #-0]!
    88d4:	0100002e 	tsteq	r0, lr, lsr #32
    88d8:	65140168 	ldrvs	r0, [r4, #-360]	; 0xfffffe98
    88dc:	0500000c 	streq	r0, [r0, #-12]
    88e0:	00000003 	andeq	r0, r0, r3
    88e4:	2e372800 	cdpcs	8, 3, cr2, cr7, cr0, {0}
    88e8:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    88ec:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    88f0:	03050000 	movweq	r0, #20480	; 0x5000
    88f4:	00000000 	andeq	r0, r0, r0
    88f8:	002ce028 	eoreq	lr, ip, r8, lsr #32
    88fc:	016a0100 	cmneq	sl, r0, lsl #2
    8900:	000c6514 	andeq	r6, ip, r4, lsl r5
    8904:	00030500 	andeq	r0, r3, r0, lsl #10
    8908:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    890c:	00002e25 	andeq	r2, r0, r5, lsr #28
    8910:	14016b01 	strne	r6, [r1], #-2817	; 0xfffff4ff
    8914:	00000c65 	andeq	r0, r0, r5, ror #24
    8918:	00000305 	andeq	r0, r0, r5, lsl #6
    891c:	4e290000 	cdpmi	0, 2, cr0, cr9, cr0, {0}
    8920:	0100002d 	tsteq	r0, sp, lsr #32
    8924:	880d016d 	stmdahi	sp, {r0, r2, r3, r5, r6, r8}
    8928:	0500000d 	streq	r0, [r0, #-13]
    892c:	00000003 	andeq	r0, r0, r3
    8930:	02010200 	andeq	r0, r1, #0, 4
    8934:	0000180e 	andeq	r1, r0, lr, lsl #16
    8938:	002b442a 	eoreq	r4, fp, sl, lsr #8
    893c:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    8940:	0000bd11 	andeq	fp, r0, r1, lsl sp
    8944:	00000000 	andeq	r0, r0, r0
    8948:	0000ac00 	andeq	sl, r0, r0, lsl #24
    894c:	2b9c0100 	blcs	fe708d54 <__shm_end__+0xbe708d54>
    8950:	00002dc5 	andeq	r2, r0, r5, asr #27
    8954:	11018601 	tstne	r1, r1, lsl #12
    8958:	000000bd 	strheq	r0, [r0], -sp
    895c:	00000000 	andeq	r0, r0, r0
    8960:	00000188 	andeq	r0, r0, r8, lsl #3
    8964:	0dd09c01 	ldcleq	12, cr9, [r0, #4]
    8968:	732c0000 			; <UNDEFINED> instruction: 0x732c0000
    896c:	01880100 	orreq	r0, r8, r0, lsl #2
    8970:	0000bd15 	andeq	fp, r0, r5, lsl sp
    8974:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8978:	2c202b00 			; <UNDEFINED> instruction: 0x2c202b00
    897c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    8980:	00bd1101 	adcseq	r1, sp, r1, lsl #2
    8984:	00000000 	andeq	r0, r0, r0
    8988:	006c0000 	rsbeq	r0, ip, r0
    898c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8990:	00000dfa 	strdeq	r0, [r0], -sl
    8994:	0100732c 	tsteq	r0, ip, lsr #6
    8998:	bd15017b 	ldflts	f0, [r5, #-492]	; 0xfffffe14
    899c:	02000000 	andeq	r0, r0, #0
    89a0:	2a007491 	bcs	25bec <__core1_vectors-0xfda414>
    89a4:	00002c4b 	andeq	r2, r0, fp, asr #24
    89a8:	11016f01 	tstne	r1, r1, lsl #30
    89ac:	000000bd 	strheq	r0, [r0], -sp
    89b0:	00000000 	andeq	r0, r0, r0
    89b4:	00000088 	andeq	r0, r0, r8, lsl #1
    89b8:	0e2d9c01 	cdpeq	12, 2, cr9, cr13, cr1, {0}
    89bc:	0100002c 	tsteq	r0, ip, lsr #32
    89c0:	8806014f 	stmdahi	r6, {r0, r1, r2, r3, r6, r8}
    89c4:	0000000d 	andeq	r0, r0, sp
    89c8:	44000000 	strmi	r0, [r0], #-0
    89cc:	01000000 	mrseq	r0, (UNDEF: 0)
    89d0:	000e3d9c 	muleq	lr, ip, sp
    89d4:	2b7e2900 	blcs	1f92ddc <__end__+0xf76dbc>
    89d8:	52010000 	andpl	r0, r1, #0
    89dc:	0c651801 	stcleq	8, cr1, [r5], #-4
    89e0:	91020000 	mrsls	r0, (UNDEF: 2)
    89e4:	de2e0074 	mcrle	0, 1, r0, cr14, cr4, {3}
    89e8:	0100002b 	tsteq	r0, fp, lsr #32
    89ec:	00060147 	andeq	r0, r6, r7, asr #2
    89f0:	6c000000 	stcvs	0, cr0, [r0], {-0}
    89f4:	01000000 	mrseq	r0, (UNDEF: 0)
    89f8:	000e639c 	muleq	lr, ip, r3
    89fc:	00732c00 	rsbseq	r2, r3, r0, lsl #24
    8a00:	0e014901 	vmlaeq.f16	s8, s2, s2	; <UNPREDICTABLE>
    8a04:	00000067 	andeq	r0, r0, r7, rrx
    8a08:	00749102 	rsbseq	r9, r4, r2, lsl #2
    8a0c:	002cba2e 	eoreq	fp, ip, lr, lsr #20
    8a10:	013e0100 	teqeq	lr, r0, lsl #2
    8a14:	00000006 	andeq	r0, r0, r6
    8a18:	0000ec00 	andeq	lr, r0, r0, lsl #24
    8a1c:	c99c0100 	ldmibgt	ip, {r8}
    8a20:	2f00000e 	svccs	0x0000000e
    8a24:	00002b68 	andeq	r2, r0, r8, ror #22
    8a28:	21013e01 	tstcs	r1, r1, lsl #28
    8a2c:	00000ec9 	andeq	r0, r0, r9, asr #29
    8a30:	2f6c9102 	svccs	0x006c9102
    8a34:	00002c2f 	andeq	r2, r0, pc, lsr #24
    8a38:	2f013e01 	svccs	0x00013e01
    8a3c:	00000ec9 	andeq	r0, r0, r9, asr #29
    8a40:	2f689102 	svccs	0x00689102
    8a44:	00002e8e 	andeq	r2, r0, lr, lsl #29
    8a48:	40013e01 	andmi	r3, r1, r1, lsl #28
    8a4c:	00000ec9 	andeq	r0, r0, r9, asr #29
    8a50:	2f649102 	svccs	0x00649102
    8a54:	00002d1a 	andeq	r2, r0, sl, lsl sp
    8a58:	51013e01 	tstpl	r1, r1, lsl #28
    8a5c:	00000ec9 	andeq	r0, r0, r9, asr #29
    8a60:	2c609102 	stfcsp	f1, [r0], #-8
    8a64:	40010073 	andmi	r0, r1, r3, ror r0
    8a68:	00670e01 	rsbeq	r0, r7, r1, lsl #28
    8a6c:	91020000 	mrsls	r0, (UNDEF: 2)
    8a70:	040e0074 	streq	r0, [lr], #-116	; 0xffffff8c
    8a74:	00000d88 	andeq	r0, r0, r8, lsl #27
    8a78:	002cf230 	eoreq	pc, ip, r0, lsr r2	; <UNPREDICTABLE>
    8a7c:	01370100 	teqeq	r7, r0, lsl #2
    8a80:	00006718 	andeq	r6, r0, r8, lsl r7
    8a84:	00000000 	andeq	r0, r0, r0
    8a88:	00002800 	andeq	r2, r0, r0, lsl #16
    8a8c:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    8a90:	2c00000e 	stccs	0, cr0, [r0], {14}
    8a94:	39010073 	stmdbcc	r1, {r0, r1, r4, r5, r6}
    8a98:	00670e01 	rsbeq	r0, r7, r1, lsl #28
    8a9c:	91020000 	mrsls	r0, (UNDEF: 2)
    8aa0:	722b0074 	eorvc	r0, fp, #116	; 0x74
    8aa4:	0100002e 	tsteq	r0, lr, lsr #32
    8aa8:	bd110119 	ldflts	f0, [r1, #-100]	; 0xffffff9c
    8aac:	00000000 	andeq	r0, r0, r0
    8ab0:	84000000 	strhi	r0, [r0], #-0
    8ab4:	01000000 	mrseq	r0, (UNDEF: 0)
    8ab8:	000f5d9c 	muleq	pc, ip, sp	; <UNPREDICTABLE>
    8abc:	19a22f00 	stmibne	r2!, {r8, r9, sl, fp, sp}
    8ac0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    8ac4:	0d882c01 	stceq	12, cr2, [r8, #4]
    8ac8:	91020000 	mrsls	r0, (UNDEF: 2)
    8acc:	0000316f 	andeq	r3, r0, pc, ror #2
    8ad0:	00280000 	eoreq	r0, r8, r0
    8ad4:	0f420000 	svceq	0x00420000
    8ad8:	20290000 	eorcs	r0, r9, r0
    8adc:	0100002d 	tsteq	r0, sp, lsr #32
    8ae0:	67120120 	ldrvs	r0, [r2, -r0, lsr #2]
    8ae4:	02000000 	andeq	r0, r0, #0
    8ae8:	32007091 	andcc	r7, r0, #145	; 0x91
    8aec:	00000000 	andeq	r0, r0, r0
    8af0:	00000028 	andeq	r0, r0, r8, lsr #32
    8af4:	002d2029 	eoreq	r2, sp, r9, lsr #32
    8af8:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
    8afc:	00006712 	andeq	r6, r0, r2, lsl r7
    8b00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8b04:	f2330000 	vhadd.s<illegal width 64>	d0, d3, d0
    8b08:	0100002d 	tsteq	r0, sp, lsr #32
    8b0c:	00140107 	andseq	r0, r4, r7, lsl #2
    8b10:	90000000 	andls	r0, r0, r0
    8b14:	01000000 	mrseq	r0, (UNDEF: 0)
    8b18:	000f959c 	muleq	pc, ip, r5	; <UNPREDICTABLE>
    8b1c:	19a22f00 	stmibne	r2!, {r8, r9, sl, fp, sp}
    8b20:	07010000 	streq	r0, [r1, -r0]
    8b24:	0d882c01 	stceq	12, cr2, [r8, #4]
    8b28:	91020000 	mrsls	r0, (UNDEF: 2)
    8b2c:	2cfb296f 			; <UNDEFINED> instruction: 0x2cfb296f
    8b30:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    8b34:	00670e01 	rsbeq	r0, r7, r1, lsl #28
    8b38:	91020000 	mrsls	r0, (UNDEF: 2)
    8b3c:	05340074 	ldreq	r0, [r4, #-116]!	; 0xffffff8c
    8b40:	0100002e 	tsteq	r0, lr, lsr #32
    8b44:	000006ea 	andeq	r0, r0, sl, ror #13
    8b48:	00dc0000 	sbcseq	r0, ip, r0
    8b4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8b50:	00001029 	andeq	r1, r0, r9, lsr #32
    8b54:	002d8d27 	eoreq	r8, sp, r7, lsr #26
    8b58:	0eec0100 	cdpeq	1, 14, cr0, cr12, cr0, {0}
    8b5c:	00000067 	andeq	r0, r0, r7, rrx
    8b60:	27689102 	strbcs	r9, [r8, -r2, lsl #2]!
    8b64:	00002d71 	andeq	r2, r0, r1, ror sp
    8b68:	6716ec01 	ldrvs	lr, [r6, -r1, lsl #24]
    8b6c:	02000000 	andeq	r0, r0, #0
    8b70:	94276091 	strtls	r6, [r7], #-145	; 0xffffff6f
    8b74:	0100002d 	tsteq	r0, sp, lsr #32
    8b78:	00671cec 	rsbeq	r1, r7, ip, ror #25
    8b7c:	91020000 	mrsls	r0, (UNDEF: 2)
    8b80:	6573355c 	ldrbvs	r3, [r3, #-1372]!	; 0xfffffaa4
    8b84:	ec010074 	stc	0, cr0, [r1], {116}	; 0x74
    8b88:	00006722 	andeq	r6, r0, r2, lsr #14
    8b8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8b90:	79617735 	stmdbvc	r1!, {r0, r2, r4, r5, r8, r9, sl, ip, sp, lr}^
    8b94:	27ec0100 	strbcs	r0, [ip, r0, lsl #2]!
    8b98:	00000067 	andeq	r0, r0, r7, rrx
    8b9c:	27709102 	ldrbcs	r9, [r0, -r2, lsl #2]!
    8ba0:	00002ba7 	andeq	r2, r0, r7, lsr #23
    8ba4:	672cec01 	strvs	lr, [ip, -r1, lsl #24]!
    8ba8:	02000000 	andeq	r0, r0, #0
    8bac:	b7276491 			; <UNDEFINED> instruction: 0xb7276491
    8bb0:	0100002e 	tsteq	r0, lr, lsr #32
    8bb4:	00670eef 	rsbeq	r0, r7, pc, ror #29
    8bb8:	91020000 	mrsls	r0, (UNDEF: 2)
    8bbc:	0568366c 	strbeq	r3, [r8, #-1644]!	; 0xfffff994
    8bc0:	73350000 	teqvc	r5, #0
    8bc4:	fd010077 	stc2	0, cr0, [r1, #-476]	; 0xfffffe24
    8bc8:	00006716 	andeq	r6, r0, r6, lsl r7
    8bcc:	58910200 	ldmpl	r1, {r9}
    8bd0:	f4340000 			; <UNDEFINED> instruction: 0xf4340000
    8bd4:	0100002b 	tsteq	r0, fp, lsr #32
    8bd8:	000006e2 	andeq	r0, r0, r2, ror #13
    8bdc:	00300000 	eorseq	r0, r0, r0
    8be0:	9c010000 	stcls	0, cr0, [r1], {-0}
    8be4:	0000104f 	andeq	r1, r0, pc, asr #32
    8be8:	002d2027 	eoreq	r2, sp, r7, lsr #32
    8bec:	0ee40100 	cdpeq	1, 14, cr0, cr4, cr0, {0}
    8bf0:	00000067 	andeq	r0, r0, r7, rrx
    8bf4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    8bf8:	002d5d37 	eoreq	r5, sp, r7, lsr sp
    8bfc:	11d20100 	bicsne	r0, r2, r0, lsl #2
    8c00:	000000bd 	strheq	r0, [r0], -sp
    8c04:	010050ec 	smlatteq	r0, ip, r0, r5
    8c08:	0000003c 	andeq	r0, r0, ip, lsr r0
    8c0c:	10869c01 	addne	r9, r6, r1, lsl #24
    8c10:	74350000 	ldrtvc	r0, [r5], #-0
    8c14:	01006274 	tsteq	r0, r4, ror r2
    8c18:	10860fd7 	ldrdne	r0, [r6], r7
    8c1c:	91020000 	mrsls	r0, (UNDEF: 2)
    8c20:	00733570 	rsbseq	r3, r3, r0, ror r5
    8c24:	8609d801 	strhi	sp, [r9], -r1, lsl #16
    8c28:	02000000 	andeq	r0, r0, #0
    8c2c:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
    8c30:	00006704 	andeq	r6, r0, r4, lsl #14
    8c34:	2dde3800 	ldclcs	8, cr3, [lr]
    8c38:	bb010000 	bllt	48c40 <__core1_vectors-0xfb73c0>
    8c3c:	0000bd11 	andeq	fp, r0, r1, lsl sp
    8c40:	00000000 	andeq	r0, r0, r0
    8c44:	00005c00 	andeq	r5, r0, r0, lsl #24
    8c48:	c29c0100 	addsgt	r0, ip, #0, 2
    8c4c:	24000010 	strcs	r0, [r0], #-16
    8c50:	00002942 	andeq	r2, r0, r2, asr #18
    8c54:	cf0ebd01 	svcgt	0x000ebd01
    8c58:	27000002 	strcs	r0, [r0, -r2]
    8c5c:	00002cfb 	strdeq	r2, [r0], -fp
    8c60:	670fc701 	strvs	ip, [pc, -r1, lsl #14]
    8c64:	02000000 	andeq	r0, r0, #0
    8c68:	39007491 	stmdbcc	r0, {r0, r4, r7, sl, ip, sp, lr}
    8c6c:	00002dab 	andeq	r2, r0, fp, lsr #27
    8c70:	bd187001 	ldclt	0, cr7, [r8, #-4]
    8c74:	d4000000 	strle	r0, [r0], #-0
    8c78:	1801004f 	stmdane	r1, {r0, r1, r2, r3, r6}
    8c7c:	01000001 	tsteq	r0, r1
    8c80:	0011389c 	mulseq	r1, ip, r8
    8c84:	2e4f3a00 	vmlacs.f32	s7, s30, s0
    8c88:	70010000 	andvc	r0, r1, r0
    8c8c:	0011383d 	andseq	r3, r1, sp, lsr r8
    8c90:	94910300 	ldrls	r0, [r1], #768	; 0x300
    8c94:	0073357f 	rsbseq	r3, r3, pc, ror r5
    8c98:	bd157201 	lfmlt	f7, 4, [r5, #-4]
    8c9c:	02000000 	andeq	r0, r0, #0
    8ca0:	64277491 	strtvs	r7, [r7], #-1169	; 0xfffffb6f
    8ca4:	0100001e 	tsteq	r0, lr, lsl r0
    8ca8:	113e1a77 	teqne	lr, r7, ror sl
    8cac:	91030000 	mrsls	r0, (UNDEF: 3)
    8cb0:	d1277f9c 			; <UNDEFINED> instruction: 0xd1277f9c
    8cb4:	0100002d 	tsteq	r0, sp, lsr #32
    8cb8:	00a50ca8 	adceq	r0, r5, r8, lsr #25
    8cbc:	91020000 	mrsls	r0, (UNDEF: 2)
    8cc0:	2e4a2770 	mcrcs	7, 2, r2, cr10, cr0, {3}
    8cc4:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    8cc8:	0000a50c 	andeq	sl, r0, ip, lsl #10
    8ccc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8cd0:	00246d27 	eoreq	r6, r4, r7, lsr #26
    8cd4:	0fac0100 	svceq	0x00ac0100
    8cd8:	00001086 	andeq	r1, r0, r6, lsl #1
    8cdc:	7f989103 	svcvc	0x00989103
    8ce0:	86040e00 	strhi	r0, [r4], -r0, lsl #28
    8ce4:	11000010 	tstne	r0, r0, lsl r0
    8ce8:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    8cec:	0000114e 	andeq	r1, r0, lr, asr #2
    8cf0:	00008d12 	andeq	r8, r0, r2, lsl sp
    8cf4:	3b000300 	blcc	98fc <__core1_vectors-0xff6704>
    8cf8:	00002bd0 	ldrdeq	r2, [r0], -r0
    8cfc:	ba0e5e01 	blt	3a0508 <__core1_vectors-0xc5faf8>
    8d00:	04000002 	streq	r0, [r0], #-2
    8d04:	d001004f 	andle	r0, r1, pc, asr #32
    8d08:	01000000 	mrseq	r0, (UNDEF: 0)
    8d0c:	0011c39c 	mulseq	r1, ip, r3
    8d10:	30dc3a00 	sbcscc	r3, ip, r0, lsl #20
    8d14:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    8d18:	0000942f 	andeq	r9, r0, pc, lsr #8
    8d1c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    8d20:	002c603a 	eoreq	r6, ip, sl, lsr r0
    8d24:	3b5e0100 	blcc	178912c <__end__+0x76d10c>
    8d28:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    8d2c:	27609102 	strbcs	r9, [r0, -r2, lsl #2]!
    8d30:	00002e6d 	andeq	r2, r0, sp, ror #28
    8d34:	c3116001 	tstgt	r1, #1
    8d38:	02000011 	andeq	r0, r0, #17
    8d3c:	b7277491 			; <UNDEFINED> instruction: 0xb7277491
    8d40:	01000021 	tsteq	r0, r1, lsr #32
    8d44:	00b11264 	adcseq	r1, r1, r4, ror #4
    8d48:	91020000 	mrsls	r0, (UNDEF: 2)
    8d4c:	666f3570 			; <UNDEFINED> instruction: 0x666f3570
    8d50:	65010066 	strvs	r0, [r1, #-102]	; 0xffffff9a
    8d54:	0000a50c 	andeq	sl, r0, ip, lsl #10
    8d58:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8d5c:	72747035 	rsbsvc	r7, r4, #53	; 0x35
    8d60:	0b690100 	bleq	1a49168 <__end__+0xa2d148>
    8d64:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    8d68:	00689102 	rsbeq	r9, r8, r2, lsl #2
    8d6c:	0c0f040e 	cfstrseq	mvf0, [pc], {14}
    8d70:	76340000 	ldrtvc	r0, [r4], -r0
    8d74:	0100002d 	tsteq	r0, sp, lsr #32
    8d78:	4e780630 	mrcmi	6, 3, r0, cr8, cr0, {1}
    8d7c:	008c0100 	addeq	r0, ip, r0, lsl #2
    8d80:	9c010000 	stcls	0, cr0, [r1], {-0}
    8d84:	00001226 	andeq	r1, r0, r6, lsr #4
    8d88:	002d1427 	eoreq	r1, sp, r7, lsr #8
    8d8c:	0e320100 	rsfeqs	f0, f2, f0
    8d90:	00000067 	andeq	r0, r0, r7, rrx
    8d94:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    8d98:	00002e88 	andeq	r2, r0, r8, lsl #29
    8d9c:	670e4201 	strvs	r4, [lr, -r1, lsl #4]
    8da0:	02000000 	andeq	r0, r0, #0
    8da4:	c0327091 	mlasgt	r2, r1, r0, r7
    8da8:	3801004e 	stmdacc	r1, {r1, r2, r3, r6}
    8dac:	27000000 	strcs	r0, [r0, -r0]
    8db0:	00002b2c 	andeq	r2, r0, ip, lsr #22
    8db4:	65194501 	ldrvs	r4, [r9, #-1281]	; 0xfffffaff
    8db8:	0200000c 	andeq	r0, r0, #12
    8dbc:	76356c91 			; <UNDEFINED> instruction: 0x76356c91
    8dc0:	01006c61 	tsteq	r0, r1, ror #24
    8dc4:	00671246 	rsbeq	r1, r7, r6, asr #4
    8dc8:	91020000 	mrsls	r0, (UNDEF: 2)
    8dcc:	3c000068 	stccc	0, cr0, [r0], {104}	; 0x68
    8dd0:	00002b51 	andeq	r2, r0, r1, asr fp
    8dd4:	24141f01 	ldrcs	r1, [r4], #-3841	; 0xfffff0ff
    8dd8:	5401004e 	strpl	r0, [r1], #-78	; 0xffffffb2
    8ddc:	01000000 	mrseq	r0, (UNDEF: 0)
    8de0:	00124c9c 	mulseq	r2, ip, ip
    8de4:	2cfb2700 	ldclcs	7, cr2, [fp]
    8de8:	22010000 	andcs	r0, r1, #0
    8dec:	0000670e 	andeq	r6, r0, lr, lsl #14
    8df0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8df4:	73693d00 	cmnvc	r9, #0, 26
    8df8:	1b010062 	blne	48f88 <__core1_vectors-0xfb7078>
    8dfc:	004e0814 	subeq	r0, lr, r4, lsl r8
    8e00:	00001c01 	andeq	r1, r0, r1, lsl #24
    8e04:	3d9c0100 	ldfccs	f0, [ip]
    8e08:	00627364 	rsbeq	r7, r2, r4, ror #6
    8e0c:	ec141a01 			; <UNDEFINED> instruction: 0xec141a01
    8e10:	1c01004d 	stcne	0, cr0, [r1], {77}	; 0x4d
    8e14:	01000000 	mrseq	r0, (UNDEF: 0)
    8e18:	10cf009c 	smullne	r0, pc, ip, r0	; <UNPREDICTABLE>
    8e1c:	00040000 	andeq	r0, r4, r0
    8e20:	00001880 	andeq	r1, r0, r0, lsl #17
    8e24:	003a0104 	eorseq	r0, sl, r4, lsl #2
    8e28:	410c0000 	mrsmi	r0, (UNDEF: 12)
    8e2c:	d0000030 	andle	r0, r0, r0, lsr r0
    8e30:	2800000b 	stmdacs	r0, {r0, r1, r3}
    8e34:	00000006 	andeq	r0, r0, r6
    8e38:	d7000000 	strle	r0, [r0, -r0]
    8e3c:	02000036 	andeq	r0, r0, #54	; 0x36
    8e40:	04020601 	streq	r0, [r2], #-1537	; 0xfffff9ff
    8e44:	01020000 	mrseq	r0, (UNDEF: 2)
    8e48:	00040008 	andeq	r0, r4, r8
    8e4c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    8e50:	00000d61 	andeq	r0, r0, r1, ror #26
    8e54:	9e070202 	cdpls	2, 0, cr0, cr7, cr2, {0}
    8e58:	0300000e 	movweq	r0, #14
    8e5c:	00002eec 	andeq	r2, r0, ip, ror #29
    8e60:	4d184d02 	ldcmi	13, cr4, [r8, #-8]
    8e64:	02000000 	andeq	r0, r0, #0
    8e68:	080a0504 	stmdaeq	sl, {r2, r8, sl}
    8e6c:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    8e70:	02000030 	andeq	r0, r0, #48	; 0x30
    8e74:	0060194f 	rsbeq	r1, r0, pc, asr #18
    8e78:	04020000 	streq	r0, [r2], #-0
    8e7c:	000b4007 	andeq	r4, fp, r7
    8e80:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    8e84:	00000805 	andeq	r0, r0, r5, lsl #16
    8e88:	3b070802 	blcc	1cae98 <__core1_vectors-0xe35168>
    8e8c:	0300000b 	movweq	r0, #11
    8e90:	00003052 	andeq	r3, r0, r2, asr r0
    8e94:	671ec802 	ldrvs	ip, [lr, -r2, lsl #16]
    8e98:	04000000 	streq	r0, [r0], #-0
    8e9c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8ea0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    8ea4:	000b4507 	andeq	r4, fp, r7, lsl #10
    8ea8:	30870300 	addcc	r0, r7, r0, lsl #6
    8eac:	d1030000 	mrsle	r0, (UNDEF: 3)
    8eb0:	00008817 	andeq	r8, r0, r7, lsl r8
    8eb4:	0c880500 	cfstr32eq	mvfx0, [r8], {0}
    8eb8:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
    8ebc:	00881701 	addeq	r1, r8, r1, lsl #14
    8ec0:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    8ec4:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    8ec8:	004d0e1e 	subeq	r0, sp, lr, lsl lr
    8ecc:	82030000 	andhi	r0, r3, #0
    8ed0:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    8ed4:	004d0e22 	subeq	r0, sp, r2, lsr #28
    8ed8:	e2030000 	and	r0, r3, #0
    8edc:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    8ee0:	004d0e2e 	subeq	r0, sp, lr, lsr #28
    8ee4:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    8ee8:	0400002f 	streq	r0, [r0], #-47	; 0xffffffd1
    8eec:	00330f38 	eorseq	r0, r3, r8, lsr pc
    8ef0:	93030000 	movwls	r0, #12288	; 0x3000
    8ef4:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    8ef8:	003a183c 	eorseq	r1, sl, ip, lsr r8
    8efc:	39030000 	stmdbcc	r3, {}	; <UNPREDICTABLE>
    8f00:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    8f04:	003a183f 	eorseq	r1, sl, pc, lsr r8
    8f08:	33030000 	movwcc	r0, #12288	; 0x3000
    8f0c:	0400002f 	streq	r0, [r0], #-47	; 0xffffffd1
    8f10:	003a184b 	eorseq	r1, sl, fp, asr #16
    8f14:	7c030000 	stcvc	0, cr0, [r3], {-0}
    8f18:	0400002f 	streq	r0, [r0], #-47	; 0xffffffd1
    8f1c:	0054145a 	subseq	r1, r4, sl, asr r4
    8f20:	e1030000 	mrs	r0, (UNDEF: 3)
    8f24:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    8f28:	00c01066 	sbceq	r1, r0, r6, rrx
    8f2c:	dd030000 	stcle	0, cr0, [r3, #-0]
    8f30:	0400000a 	streq	r0, [r0], #-10
    8f34:	004d0e74 	subeq	r0, sp, r4, ror lr
    8f38:	04060000 	streq	r0, [r6], #-0
    8f3c:	4203a504 	andmi	sl, r3, #4, 10	; 0x1000000
    8f40:	07000001 	streq	r0, [r0, -r1]
    8f44:	0000023a 	andeq	r0, r0, sl, lsr r2
    8f48:	9b0ca704 	blls	332b60 <__core1_vectors-0xccd4a0>
    8f4c:	07000000 	streq	r0, [r0, -r0]
    8f50:	00000ae5 	andeq	r0, r0, r5, ror #21
    8f54:	4213a804 	andsmi	sl, r3, #4, 16	; 0x40000
    8f58:	00000001 	andeq	r0, r0, r1
    8f5c:	00002c08 	andeq	r2, r0, r8, lsl #24
    8f60:	00015200 	andeq	r5, r1, r0, lsl #4
    8f64:	00880900 	addeq	r0, r8, r0, lsl #18
    8f68:	00030000 	andeq	r0, r3, r0
    8f6c:	a204080a 	andge	r0, r4, #655360	; 0xa0000
    8f70:	00017609 	andeq	r7, r1, r9, lsl #12
    8f74:	0a690b00 	beq	1a4bb7c <__end__+0xa2fb5c>
    8f78:	a4040000 	strge	r0, [r4], #-0
    8f7c:	00008107 	andeq	r8, r0, r7, lsl #2
    8f80:	0b0b0000 	bleq	2c8f88 <__core1_vectors-0xd37078>
    8f84:	04000000 	streq	r0, [r0], #-0
    8f88:	012005a9 	smulwbeq	r0, r9, r5
    8f8c:	00040000 	andeq	r0, r4, r0
    8f90:	000c2003 	andeq	r2, ip, r3
    8f94:	03aa0400 			; <UNDEFINED> instruction: 0x03aa0400
    8f98:	00000152 	andeq	r0, r0, r2, asr r1
    8f9c:	f603040c 			; <UNDEFINED> instruction: 0xf603040c
    8fa0:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    8fa4:	003a18d1 	ldrsbteq	r1, [sl], -r1
    8fa8:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    8fac:	0500002e 	streq	r0, [r0, #-46]	; 0xffffffd2
    8fb0:	0041132c 	subeq	r1, r1, ip, lsr #6
    8fb4:	d0030000 	andle	r0, r3, r0
    8fb8:	05000030 	streq	r0, [r0, #-48]	; 0xffffffd0
    8fbc:	00541430 	subseq	r1, r4, r0, lsr r4
    8fc0:	df030000 	svcle	0x00030000
    8fc4:	0600002f 	streq	r0, [r0], -pc, lsr #32
    8fc8:	0075122a 	rsbseq	r1, r5, sl, lsr #4
    8fcc:	c70d0000 	strgt	r0, [sp, -r0]
    8fd0:	1000002f 	andne	r0, r0, pc, lsr #32
    8fd4:	dc082f07 	stcle	15, cr2, [r8], {7}
    8fd8:	0b000001 	bleq	8fe4 <__core1_vectors-0xff701c>
    8fdc:	000030c0 	andeq	r3, r0, r0, asr #1
    8fe0:	a8093007 	stmdage	r9, {r0, r1, r2, ip, sp}
    8fe4:	00000001 	andeq	r0, r0, r1
    8fe8:	002f740b 	eoreq	r7, pc, fp, lsl #8
    8fec:	07310700 	ldreq	r0, [r1, -r0, lsl #14]!
    8ff0:	0000004d 	andeq	r0, r0, sp, asr #32
    8ff4:	00030008 	andeq	r0, r3, r8
    8ff8:	08000031 	stmdaeq	r0, {r0, r4, r5}
    8ffc:	00a81461 	adceq	r1, r8, r1, ror #8
    9000:	84030000 	strhi	r0, [r3], #-0
    9004:	08000030 	stmdaeq	r0, {r4, r5}
    9008:	00b41566 	adcseq	r1, r4, r6, ror #10
    900c:	040e0000 	streq	r0, [lr], #-0
    9010:	000001fa 	strdeq	r0, [r0], -sl
    9014:	09080102 	stmdbeq	r8, {r1, r8}
    9018:	0f000004 	svceq	0x00000004
    901c:	000001fa 	strdeq	r0, [r0], -sl
    9020:	002f3503 	eoreq	r3, pc, r3, lsl #10
    9024:	128b0800 	addne	r0, fp, #0, 16
    9028:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    902c:	0030e303 	eorseq	lr, r0, r3, lsl #6
    9030:	129d0800 	addsne	r0, sp, #0, 16
    9034:	00000108 	andeq	r0, r0, r8, lsl #2
    9038:	00300003 	eorseq	r0, r0, r3
    903c:	12a10800 	adcne	r0, r1, #0, 16
    9040:	000000cc 	andeq	r0, r0, ip, asr #1
    9044:	00309503 	eorseq	r9, r0, r3, lsl #10
    9048:	12a50800 	adcne	r0, r5, #0, 16
    904c:	000000d8 	ldrdeq	r0, [r0], -r8
    9050:	00303b03 	eorseq	r3, r0, r3, lsl #22
    9054:	12a90800 	adcne	r0, r9, #0, 16
    9058:	000000e4 	andeq	r0, r0, r4, ror #1
    905c:	002f7e03 	eoreq	r7, pc, r3, lsl #28
    9060:	12bd0800 	adcsne	r0, sp, #0, 16
    9064:	000000fc 	strdeq	r0, [r0], -ip
    9068:	002ef803 	eoreq	pc, lr, r3, lsl #16
    906c:	13c20800 	bicne	r0, r2, #0, 16
    9070:	00000184 	andeq	r0, r0, r4, lsl #3
    9074:	9d040802 	stcls	8, cr0, [r4, #-8]
    9078:	1000000a 	andne	r0, r0, sl
    907c:	00002fd7 	ldrdeq	r2, [r0], -r7
    9080:	6d0f1009 	stcvs	0, cr1, [pc, #-36]	; 9064 <__core1_vectors-0xff6f9c>
    9084:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    9088:	0001f404 	andeq	pc, r1, r4, lsl #8
    908c:	0dbf1000 	ldceq	0, cr1, [pc]	; 9094 <__core1_vectors-0xff6f6c>
    9090:	fc090000 	stc2	0, cr0, [r9], {-0}
    9094:	0001f40e 	andeq	pc, r1, lr, lsl #8
    9098:	300e1000 	andcc	r1, lr, r0
    909c:	fd090000 	stc2	0, cr0, [r9, #-0]
    90a0:	0000810c 	andeq	r8, r0, ip, lsl #2
    90a4:	2f471000 	svccs	0x00471000
    90a8:	fd090000 	stc2	0, cr0, [r9, #-0]
    90ac:	00008114 	andeq	r8, r0, r4, lsl r1
    90b0:	2eda1000 	cdpcs	0, 13, cr1, cr10, cr0, {0}
    90b4:	fd090000 	stc2	0, cr0, [r9, #-0]
    90b8:	0000811c 	andeq	r8, r0, ip, lsl r1
    90bc:	2f851000 	svccs	0x00851000
    90c0:	ff090000 			; <UNDEFINED> instruction: 0xff090000
    90c4:	0000810c 	andeq	r8, r0, ip, lsl #2
    90c8:	0e490300 	cdpeq	3, 4, cr0, cr9, cr0, {0}
    90cc:	160a0000 	strne	r0, [sl], -r0
    90d0:	00006019 	andeq	r6, r0, r9, lsl r0
    90d4:	06b30300 	ldrteq	r0, [r3], r0, lsl #6
    90d8:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    90dc:	0000810d 	andeq	r8, r0, sp, lsl #2
    90e0:	0bc70300 	bleq	ff1c9ce8 <__shm_end__+0xbf1c9ce8>
    90e4:	230a0000 	movwcs	r0, #40960	; 0xa000
    90e8:	0002bb1b 	andeq	fp, r2, fp, lsl fp
    90ec:	07080d00 	streq	r0, [r8, -r0, lsl #26]
    90f0:	0a180000 	beq	6090f8 <__core1_vectors-0x9f6f08>
    90f4:	032d0834 			; <UNDEFINED> instruction: 0x032d0834
    90f8:	340b0000 	strcc	r0, [fp], #-0
    90fc:	0a00000a 	beq	912c <__core1_vectors-0xff6ed4>
    9100:	032d1336 			; <UNDEFINED> instruction: 0x032d1336
    9104:	11000000 	mrsne	r0, (UNDEF: 0)
    9108:	0a006b5f 	beq	23e8c <__core1_vectors-0xfdc174>
    910c:	00810737 	addeq	r0, r1, r7, lsr r7
    9110:	0b040000 	bleq	109118 <__core1_vectors-0xef6ee8>
    9114:	00000761 	andeq	r0, r0, r1, ror #14
    9118:	810b370a 	tsthi	fp, sl, lsl #14
    911c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9120:	0008bf0b 	andeq	fp, r8, fp, lsl #30
    9124:	14370a00 	ldrtne	r0, [r7], #-2560	; 0xfffff600
    9128:	00000081 	andeq	r0, r0, r1, lsl #1
    912c:	06010b0c 	streq	r0, [r1], -ip, lsl #22
    9130:	370a0000 	strcc	r0, [sl, -r0]
    9134:	0000811b 	andeq	r8, r0, fp, lsl r1
    9138:	5f111000 	svcpl	0x00111000
    913c:	380a0078 	stmdacc	sl, {r3, r4, r5, r6}
    9140:	0003330b 	andeq	r3, r3, fp, lsl #6
    9144:	0e001400 	cfcpyseq	mvf1, mvf0
    9148:	0002d304 	andeq	sp, r2, r4, lsl #6
    914c:	02af0800 	adceq	r0, pc, #0, 16
    9150:	03430000 	movteq	r0, #12288	; 0x3000
    9154:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    9158:	00000000 	andeq	r0, r0, r0
    915c:	01400d00 	cmpeq	r0, r0, lsl #26
    9160:	0a240000 	beq	909168 <__core1_vectors-0x6f6e98>
    9164:	03c6083c 	biceq	r0, r6, #60, 16	; 0x3c0000
    9168:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
    916c:	0a000001 	beq	9178 <__core1_vectors-0xff6e88>
    9170:	0081093e 	addeq	r0, r1, lr, lsr r9
    9174:	0b000000 	bleq	917c <__core1_vectors-0xff6e84>
    9178:	00000f8f 	andeq	r0, r0, pc, lsl #31
    917c:	81093f0a 	tsthi	r9, sl, lsl #30
    9180:	04000000 	streq	r0, [r0], #-0
    9184:	000eb10b 	andeq	fp, lr, fp, lsl #2
    9188:	09400a00 	stmdbeq	r0, {r9, fp}^
    918c:	00000081 	andeq	r0, r0, r1, lsl #1
    9190:	09fb0b08 	ldmibeq	fp!, {r3, r8, r9, fp}^
    9194:	410a0000 	mrsmi	r0, (UNDEF: 10)
    9198:	00008109 	andeq	r8, r0, r9, lsl #2
    919c:	8c0b0c00 	stchi	12, cr0, [fp], {-0}
    91a0:	0a000003 	beq	91b4 <__core1_vectors-0xff6e4c>
    91a4:	00810942 	addeq	r0, r1, r2, asr #18
    91a8:	0b100000 	bleq	4091b0 <__core1_vectors-0xbf6e50>
    91ac:	00000de4 	andeq	r0, r0, r4, ror #27
    91b0:	8109430a 	tsthi	r9, sl, lsl #6
    91b4:	14000000 	strne	r0, [r0], #-0
    91b8:	000a7b0b 	andeq	r7, sl, fp, lsl #22
    91bc:	09440a00 	stmdbeq	r4, {r9, fp}^
    91c0:	00000081 	andeq	r0, r0, r1, lsl #1
    91c4:	0aa90b18 	beq	fea4be2c <__shm_end__+0xbea4be2c>
    91c8:	450a0000 	strmi	r0, [sl, #-0]
    91cc:	00008109 	andeq	r8, r0, r9, lsl #2
    91d0:	550b1c00 	strpl	r1, [fp, #-3072]	; 0xfffff400
    91d4:	0a00000f 	beq	9218 <__core1_vectors-0xff6de8>
    91d8:	00810946 	addeq	r0, r1, r6, asr #18
    91dc:	00200000 	eoreq	r0, r0, r0
    91e0:	00026312 	andeq	r6, r2, r2, lsl r3
    91e4:	0a010800 	beq	4b1ec <__core1_vectors-0xfb4e14>
    91e8:	040b084f 	streq	r0, [fp], #-2127	; 0xfffff7b1
    91ec:	410b0000 	mrsmi	r0, (UNDEF: 11)
    91f0:	0a00000f 	beq	9234 <__core1_vectors-0xff6dcc>
    91f4:	040b0a50 	streq	r0, [fp], #-2640	; 0xfffff5b0
    91f8:	0b000000 	bleq	9200 <__core1_vectors-0xff6e00>
    91fc:	00000b66 	andeq	r0, r0, r6, ror #22
    9200:	0b09510a 	bleq	25d630 <__core1_vectors-0xda29d0>
    9204:	80000004 	andhi	r0, r0, r4
    9208:	000dd413 	andeq	sp, sp, r3, lsl r4
    920c:	0a530a00 	beq	14cba14 <__end__+0x4af9f4>
    9210:	000002af 	andeq	r0, r0, pc, lsr #5
    9214:	10130100 	andsne	r0, r3, r0, lsl #2
    9218:	0a00000e 	beq	9258 <__core1_vectors-0xff6da8>
    921c:	02af0a56 	adceq	r0, pc, #352256	; 0x56000
    9220:	01040000 	mrseq	r0, (UNDEF: 4)
    9224:	01820800 	orreq	r0, r2, r0, lsl #16
    9228:	041b0000 	ldreq	r0, [fp], #-0
    922c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    9230:	1f000000 	svcne	0x00000000
    9234:	0a541200 	beq	150da3c <__end__+0x4f1a1c>
    9238:	01900000 	orrseq	r0, r0, r0
    923c:	5e08620a 	cdppl	2, 0, cr6, cr8, cr10, {0}
    9240:	0b000004 	bleq	9258 <__core1_vectors-0xff6da8>
    9244:	00000a34 	andeq	r0, r0, r4, lsr sl
    9248:	5e12630a 	cdppl	3, 1, cr6, cr2, cr10, {0}
    924c:	00000004 	andeq	r0, r0, r4
    9250:	000e040b 	andeq	r0, lr, fp, lsl #8
    9254:	06640a00 	strbteq	r0, [r4], -r0, lsl #20
    9258:	00000081 	andeq	r0, r0, r1, lsl #1
    925c:	04930b04 	ldreq	r0, [r3], #2820	; 0xb04
    9260:	660a0000 	strvs	r0, [sl], -r0
    9264:	00046409 	andeq	r6, r4, r9, lsl #8
    9268:	630b0800 	movwvs	r0, #47104	; 0xb800
    926c:	0a000002 	beq	927c <__core1_vectors-0xff6d84>
    9270:	03c61e67 	biceq	r1, r6, #1648	; 0x670
    9274:	00880000 	addeq	r0, r8, r0
    9278:	041b040e 	ldreq	r0, [fp], #-1038	; 0xfffffbf2
    927c:	74080000 	strvc	r0, [r8], #-0
    9280:	74000004 	strvc	r0, [r0], #-4
    9284:	09000004 	stmdbeq	r0, {r2}
    9288:	00000088 	andeq	r0, r0, r8, lsl #1
    928c:	040e001f 	streq	r0, [lr], #-31	; 0xffffffe1
    9290:	0000047a 	andeq	r0, r0, sl, ror r4
    9294:	0e090d14 	mcreq	13, 0, r0, cr9, cr4, {0}
    9298:	0a080000 	beq	2092a0 <__core1_vectors-0xdf6d60>
    929c:	04a3087a 	strteq	r0, [r3], #2170	; 0x87a
    92a0:	a50b0000 	strge	r0, [fp, #-0]
    92a4:	0a00000b 	beq	92d8 <__core1_vectors-0xff6d28>
    92a8:	04a3117b 	strteq	r1, [r3], #379	; 0x17b
    92ac:	0b000000 	bleq	92b4 <__core1_vectors-0xff6d4c>
    92b0:	000030db 	ldrdeq	r3, [r0], -fp
    92b4:	81067c0a 	tsthi	r6, sl, lsl #24
    92b8:	04000000 	streq	r0, [r0], #-0
    92bc:	2c040e00 	stccs	14, cr0, [r4], {-0}
    92c0:	0d000000 	stceq	0, cr0, [r0, #-0]
    92c4:	00000681 	andeq	r0, r0, r1, lsl #13
    92c8:	08ba0a68 	ldmeq	sl!, {r3, r5, r6, r9, fp}
    92cc:	000005ec 	andeq	r0, r0, ip, ror #11
    92d0:	00705f11 	rsbseq	r5, r0, r1, lsl pc
    92d4:	a312bb0a 	tstge	r2, #10240	; 0x2800
    92d8:	00000004 	andeq	r0, r0, r4
    92dc:	00725f11 	rsbseq	r5, r2, r1, lsl pc
    92e0:	8107bc0a 	tsthi	r7, sl, lsl #24
    92e4:	04000000 	streq	r0, [r0], #-0
    92e8:	00775f11 	rsbseq	r5, r7, r1, lsl pc
    92ec:	8107bd0a 	tsthi	r7, sl, lsl #26
    92f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    92f4:	000a3a0b 	andeq	r3, sl, fp, lsl #20
    92f8:	09be0a00 	ldmibeq	lr!, {r9, fp}
    92fc:	00000033 	andeq	r0, r0, r3, lsr r0
    9300:	025d0b0c 	subseq	r0, sp, #12, 22	; 0x3000
    9304:	bf0a0000 	svclt	0x000a0000
    9308:	00003309 	andeq	r3, r0, r9, lsl #6
    930c:	5f110e00 	svcpl	0x00110e00
    9310:	0a006662 	beq	22ca0 <__core1_vectors-0xfdd360>
    9314:	047b11c0 	ldrbteq	r1, [fp], #-448	; 0xfffffe40
    9318:	0b100000 	bleq	409320 <__core1_vectors-0xbf6ce0>
    931c:	00000df6 	strdeq	r0, [r0], -r6
    9320:	8107c10a 	tsthi	r7, sl, lsl #2
    9324:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9328:	0005e40b 	andeq	lr, r5, fp, lsl #8
    932c:	0ac80a00 	beq	ff20bb34 <__shm_end__+0xbf20bb34>
    9330:	00000182 	andeq	r0, r0, r2, lsl #3
    9334:	1c390b1c 			; <UNDEFINED> instruction: 0x1c390b1c
    9338:	ca0a0000 	bgt	289340 <__core1_vectors-0xd76cc0>
    933c:	00075e1d 	andeq	r5, r7, sp, lsl lr
    9340:	7d0b2000 	stcvc	0, cr2, [fp, #-0]
    9344:	0a000011 	beq	9390 <__core1_vectors-0xff6c70>
    9348:	078d1dcc 	streq	r1, [sp, ip, asr #27]
    934c:	0b240000 	bleq	909354 <__core1_vectors-0x6f6cac>
    9350:	00000ac6 	andeq	r0, r0, r6, asr #21
    9354:	b10dcf0a 	tstlt	sp, sl, lsl #30
    9358:	28000007 	stmdacs	r0, {r0, r1, r2}
    935c:	002b4a0b 	eoreq	r4, fp, fp, lsl #20
    9360:	09d00a00 	ldmibeq	r0, {r9, fp}^
    9364:	000007cb 	andeq	r0, r0, fp, asr #15
    9368:	755f112c 	ldrbvc	r1, [pc, #-300]	; 9244 <__core1_vectors-0xff6dbc>
    936c:	d30a0062 	movwle	r0, #41058	; 0xa062
    9370:	00047b11 	andeq	r7, r4, r1, lsl fp
    9374:	5f113000 	svcpl	0x00113000
    9378:	0a007075 	beq	25554 <__core1_vectors-0xfdaaac>
    937c:	04a312d4 	strteq	r1, [r3], #724	; 0x2d4
    9380:	11380000 	teqne	r8, r0
    9384:	0072755f 	rsbseq	r7, r2, pc, asr r5
    9388:	8107d50a 	tsthi	r7, sl, lsl #10
    938c:	3c000000 	stccc	0, cr0, [r0], {-0}
    9390:	000a0a0b 	andeq	r0, sl, fp, lsl #20
    9394:	11d80a00 	bicsne	r0, r8, r0, lsl #20
    9398:	000007d1 	ldrdeq	r0, [r0], -r1
    939c:	01560b40 	cmpeq	r6, r0, asr #22
    93a0:	d90a0000 	stmdble	sl, {}	; <UNPREDICTABLE>
    93a4:	0007e111 	andeq	lr, r7, r1, lsl r1
    93a8:	5f114300 	svcpl	0x00114300
    93ac:	0a00626c 	beq	21d64 <__core1_vectors-0xfde29c>
    93b0:	047b11dc 	ldrbteq	r1, [fp], #-476	; 0xfffffe24
    93b4:	0b440000 	bleq	11093bc <__end__+0xed39c>
    93b8:	00002ee3 	andeq	r2, r0, r3, ror #29
    93bc:	8107df0a 	tsthi	r7, sl, lsl #30
    93c0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    93c4:	0006270b 	andeq	r2, r6, fp, lsl #14
    93c8:	0ae00a00 	beq	ff80bbd0 <__shm_end__+0xbf80bbd0>
    93cc:	000000c0 	andeq	r0, r0, r0, asr #1
    93d0:	2b3e0b50 	blcs	f8c118 <__core1_vectors-0x73ee8>
    93d4:	e30a0000 	movw	r0, #40960	; 0xa000
    93d8:	00060a12 	andeq	r0, r6, r2, lsl sl
    93dc:	ab0b5400 	blge	2de3e4 <__core1_vectors-0xd21c1c>
    93e0:	0a000001 	beq	93ec <__core1_vectors-0xff6c14>
    93e4:	02c70ce7 	sbceq	r0, r7, #59136	; 0xe700
    93e8:	0b580000 	bleq	16093f0 <__end__+0x5ed3d0>
    93ec:	00000a26 	andeq	r0, r0, r6, lsr #20
    93f0:	760ee90a 	strvc	lr, [lr], -sl, lsl #18
    93f4:	5c000001 	stcpl	0, cr0, [r0], {1}
    93f8:	0006940b 	andeq	r9, r6, fp, lsl #8
    93fc:	09ea0a00 	stmibeq	sl!, {r9, fp}^
    9400:	00000081 	andeq	r0, r0, r1, lsl #1
    9404:	81150064 	tsthi	r5, r4, rrx
    9408:	0a000000 	beq	9410 <__core1_vectors-0xff6bf0>
    940c:	16000006 	strne	r0, [r0], -r6
    9410:	0000060a 	andeq	r0, r0, sl, lsl #12
    9414:	00018216 	andeq	r8, r1, r6, lsl r2
    9418:	01f41600 	mvnseq	r1, r0, lsl #12
    941c:	81160000 	tsthi	r6, r0
    9420:	00000000 	andeq	r0, r0, r0
    9424:	0615040e 	ldreq	r0, [r5], -lr, lsl #8
    9428:	0a0f0000 	beq	3c9430 <__core1_vectors-0xc36bd0>
    942c:	17000006 	strne	r0, [r0, -r6]
    9430:	00000446 	andeq	r0, r0, r6, asr #8
    9434:	650a0428 	strvs	r0, [sl, #-1064]	; 0xfffffbd8
    9438:	075e0802 	ldrbeq	r0, [lr, -r2, lsl #16]
    943c:	92180000 	andsls	r0, r8, #0
    9440:	0a000009 	beq	946c <__core1_vectors-0xff6b94>
    9444:	81070267 	tsthi	r7, r7, ror #4
    9448:	00000000 	andeq	r0, r0, r0
    944c:	00052218 	andeq	r2, r5, r8, lsl r2
    9450:	026c0a00 	rsbeq	r0, ip, #0, 20
    9454:	00083d0b 	andeq	r3, r8, fp, lsl #26
    9458:	87180400 	ldrhi	r0, [r8, -r0, lsl #8]
    945c:	0a00000b 	beq	9490 <__core1_vectors-0xff6b70>
    9460:	3d14026c 	lfmcc	f0, 4, [r4, #-432]	; 0xfffffe50
    9464:	08000008 	stmdaeq	r0, {r3}
    9468:	000a1018 	andeq	r1, sl, r8, lsl r0
    946c:	026c0a00 	rsbeq	r0, ip, #0, 20
    9470:	00083d1e 	andeq	r3, r8, lr, lsl sp
    9474:	ff180c00 			; <UNDEFINED> instruction: 0xff180c00
    9478:	0a00000d 	beq	94b4 <__core1_vectors-0xff6b4c>
    947c:	8108026e 	tsthi	r8, lr, ror #4
    9480:	10000000 	andne	r0, r0, r0
    9484:	0007fa18 	andeq	pc, r7, r8, lsl sl	; <UNPREDICTABLE>
    9488:	026f0a00 	rsbeq	r0, pc, #0, 20
    948c:	000a3d08 	andeq	r3, sl, r8, lsl #26
    9490:	2d181400 	cfldrscs	mvf1, [r8, #-0]
    9494:	0a000004 	beq	94ac <__core1_vectors-0xff6b54>
    9498:	81070272 	tsthi	r7, r2, ror r2
    949c:	30000000 	andcc	r0, r0, r0
    94a0:	000e4118 	andeq	r4, lr, r8, lsl r1
    94a4:	02730a00 	rsbseq	r0, r3, #0, 20
    94a8:	000a5216 	andeq	r5, sl, r6, lsl r2
    94ac:	89183400 	ldmdbhi	r8, {sl, ip, sp}
    94b0:	0a000006 	beq	94d0 <__core1_vectors-0xff6b30>
    94b4:	81070275 	tsthi	r7, r5, ror r2
    94b8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    94bc:	00077d18 	andeq	r7, r7, r8, lsl sp
    94c0:	02770a00 	rsbseq	r0, r7, #0, 20
    94c4:	000a630a 	andeq	r6, sl, sl, lsl #6
    94c8:	51183c00 	tstpl	r8, r0, lsl #24
    94cc:	0a00000e 	beq	950c <__core1_vectors-0xff6af4>
    94d0:	2d13027a 	lfmcs	f0, 4, [r3, #-488]	; 0xfffffe18
    94d4:	40000003 	andmi	r0, r0, r3
    94d8:	0002f118 	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
    94dc:	027b0a00 	rsbseq	r0, fp, #0, 20
    94e0:	00008107 	andeq	r8, r0, r7, lsl #2
    94e4:	6f184400 	svcvs	0x00184400
    94e8:	0a000006 	beq	9508 <__core1_vectors-0xff6af8>
    94ec:	2d13027c 	lfmcs	f0, 4, [r3, #-496]	; 0xfffffe10
    94f0:	48000003 	stmdami	r0, {r0, r1}
    94f4:	0008a918 	andeq	sl, r8, r8, lsl r9
    94f8:	027d0a00 	rsbseq	r0, sp, #0, 20
    94fc:	000a6914 	andeq	r6, sl, r4, lsl r9
    9500:	10184c00 	andsne	r4, r8, r0, lsl #24
    9504:	0a000001 	beq	9510 <__core1_vectors-0xff6af0>
    9508:	81070280 	smlabbhi	r7, r0, r2, r0
    950c:	50000000 	andpl	r0, r0, r0
    9510:	00062f18 	andeq	r2, r6, r8, lsl pc
    9514:	02810a00 	addeq	r0, r1, #0, 20
    9518:	0001f409 	andeq	pc, r1, r9, lsl #8
    951c:	05185400 	ldreq	r5, [r8, #-1024]	; 0xfffffc00
    9520:	0a00000a 	beq	9550 <__core1_vectors-0xff6ab0>
    9524:	180702a4 	stmdane	r7, {r2, r5, r7, r9}
    9528:	5800000a 	stmdapl	r0, {r1, r3}
    952c:	000a5419 	andeq	r5, sl, r9, lsl r4
    9530:	02a80a00 	adceq	r0, r8, #0, 20
    9534:	00045e13 	andeq	r5, r4, r3, lsl lr
    9538:	19014800 	stmdbne	r1, {fp, lr}
    953c:	00000787 	andeq	r0, r0, r7, lsl #15
    9540:	1202a90a 	andne	sl, r2, #163840	; 0x28000
    9544:	0000041b 	andeq	r0, r0, fp, lsl r4
    9548:	1d19014c 	ldfnes	f0, [r9, #-304]	; 0xfffffed0
    954c:	0a000006 	beq	956c <__core1_vectors-0xff6a94>
    9550:	7a0c02ad 	bvc	30a00c <__core1_vectors-0xcf5ff4>
    9554:	dc00000a 	stcle	0, cr0, [r0], {10}
    9558:	08341902 	ldmdaeq	r4!, {r1, r8, fp, ip}
    955c:	b20a0000 	andlt	r0, sl, #0
    9560:	07fe1002 	ldrbeq	r1, [lr, r2]!
    9564:	02e00000 	rsceq	r0, r0, #0
    9568:	00001319 	andeq	r1, r0, r9, lsl r3
    956c:	02b40a00 	adcseq	r0, r4, #0, 20
    9570:	000a860a 	andeq	r8, sl, sl, lsl #12
    9574:	0002ec00 	andeq	lr, r2, r0, lsl #24
    9578:	05ec040e 	strbeq	r0, [ip, #1038]!	; 0x40e
    957c:	81150000 	tsthi	r5, r0
    9580:	82000000 	andhi	r0, r0, #0
    9584:	16000007 	strne	r0, [r0], -r7
    9588:	0000060a 	andeq	r0, r0, sl, lsl #12
    958c:	00018216 	andeq	r8, r1, r6, lsl r2
    9590:	07821600 	streq	r1, [r2, r0, lsl #12]
    9594:	81160000 	tsthi	r6, r0
    9598:	00000000 	andeq	r0, r0, r0
    959c:	0201040e 	andeq	r0, r1, #234881024	; 0xe000000
    95a0:	820f0000 	andhi	r0, pc, #0
    95a4:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    95a8:	00076404 	andeq	r6, r7, r4, lsl #8
    95ac:	01141500 	tsteq	r4, r0, lsl #10
    95b0:	07b10000 	ldreq	r0, [r1, r0]!
    95b4:	0a160000 	beq	5895bc <__core1_vectors-0xa76a44>
    95b8:	16000006 	strne	r0, [r0], -r6
    95bc:	00000182 	andeq	r0, r0, r2, lsl #3
    95c0:	00011416 	andeq	r1, r1, r6, lsl r4
    95c4:	00811600 	addeq	r1, r1, r0, lsl #12
    95c8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    95cc:	00079304 	andeq	r9, r7, r4, lsl #6
    95d0:	00811500 	addeq	r1, r1, r0, lsl #10
    95d4:	07cb0000 	strbeq	r0, [fp, r0]
    95d8:	0a160000 	beq	5895e0 <__core1_vectors-0xa76a20>
    95dc:	16000006 	strne	r0, [r0], -r6
    95e0:	00000182 	andeq	r0, r0, r2, lsl #3
    95e4:	b7040e00 	strlt	r0, [r4, -r0, lsl #28]
    95e8:	08000007 	stmdaeq	r0, {r0, r1, r2}
    95ec:	0000002c 	andeq	r0, r0, ip, lsr #32
    95f0:	000007e1 	andeq	r0, r0, r1, ror #15
    95f4:	00008809 	andeq	r8, r0, r9, lsl #16
    95f8:	08000200 	stmdaeq	r0, {r9}
    95fc:	0000002c 	andeq	r0, r0, ip, lsr #32
    9600:	000007f1 	strdeq	r0, [r0], -r1
    9604:	00008809 	andeq	r8, r0, r9, lsl #16
    9608:	05000000 	streq	r0, [r0, #-0]
    960c:	00000c12 	andeq	r0, r0, r2, lsl ip
    9610:	1a01240a 	bne	52640 <__core1_vectors-0xfad9c0>
    9614:	000004a9 	andeq	r0, r0, r9, lsr #9
    9618:	0008b91a 	andeq	fp, r8, sl, lsl r9
    961c:	280a0c00 	stmdacs	sl, {sl, fp}
    9620:	08370801 	ldmdaeq	r7!, {r0, fp}
    9624:	34180000 	ldrcc	r0, [r8], #-0
    9628:	0a00000a 	beq	9658 <__core1_vectors-0xff69a8>
    962c:	3711012a 	ldrcc	r0, [r1, -sl, lsr #2]
    9630:	00000008 	andeq	r0, r0, r8
    9634:	00082d18 	andeq	r2, r8, r8, lsl sp
    9638:	012b0a00 			; <UNDEFINED> instruction: 0x012b0a00
    963c:	00008107 	andeq	r8, r0, r7, lsl #2
    9640:	b3180400 	tstlt	r8, #0, 8
    9644:	0a000008 	beq	966c <__core1_vectors-0xff6994>
    9648:	3d0b012c 	stfccs	f0, [fp, #-176]	; 0xffffff50
    964c:	08000008 	stmdaeq	r0, {r3}
    9650:	fe040e00 	cdp2	14, 0, cr0, cr4, cr0, {0}
    9654:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    9658:	0007f104 	andeq	pc, r7, r4, lsl #2
    965c:	0b7f1a00 	bleq	1fcfe64 <__end__+0xfb3e44>
    9660:	0a0e0000 	beq	389668 <__core1_vectors-0xc76998>
    9664:	7c080144 	stfvcs	f0, [r8], {68}	; 0x44
    9668:	18000008 	stmdane	r0, {r3}
    966c:	00000ac0 	andeq	r0, r0, r0, asr #21
    9670:	1201450a 	andne	r4, r1, #41943040	; 0x2800000
    9674:	0000087c 	andeq	r0, r0, ip, ror r8
    9678:	01bf1800 			; <UNDEFINED> instruction: 0x01bf1800
    967c:	460a0000 	strmi	r0, [sl], -r0
    9680:	087c1201 	ldmdaeq	ip!, {r0, r9, ip}^
    9684:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    9688:	00000e8c 	andeq	r0, r0, ip, lsl #29
    968c:	1201470a 	andne	r4, r1, #2621440	; 0x280000
    9690:	0000003a 	andeq	r0, r0, sl, lsr r0
    9694:	3a08000c 	bcc	2096cc <__core1_vectors-0xdf6934>
    9698:	8c000000 	stchi	0, cr0, [r0], {-0}
    969c:	09000008 	stmdbeq	r0, {r3}
    96a0:	00000088 	andeq	r0, r0, r8, lsl #1
    96a4:	d01b0002 	andsle	r0, fp, r2
    96a8:	0702850a 	streq	r8, [r2, -sl, lsl #10]
    96ac:	000009a1 	andeq	r0, r0, r1, lsr #19
    96b0:	0003ce18 	andeq	ip, r3, r8, lsl lr
    96b4:	02870a00 	addeq	r0, r7, #0, 20
    96b8:	00008818 	andeq	r8, r0, r8, lsl r8
    96bc:	ab180000 	blge	6096c4 <__core1_vectors-0x9f693c>
    96c0:	0a00000b 	beq	96f4 <__core1_vectors-0xff690c>
    96c4:	f4120288 			; <UNDEFINED> instruction: 0xf4120288
    96c8:	04000001 	streq	r0, [r0], #-1
    96cc:	00002d18 	andeq	r2, r0, r8, lsl sp
    96d0:	02890a00 	addeq	r0, r9, #0, 20
    96d4:	0009a110 	andeq	sl, r9, r0, lsl r1
    96d8:	10180800 	andsne	r0, r8, r0, lsl #16
    96dc:	0a000003 	beq	96f0 <__core1_vectors-0xff6910>
    96e0:	4317028a 	tstmi	r7, #-1610612728	; 0xa0000008
    96e4:	24000003 	strcs	r0, [r0], #-3
    96e8:	00088318 	andeq	r8, r8, r8, lsl r3
    96ec:	028b0a00 	addeq	r0, fp, #0, 20
    96f0:	0000810f 	andeq	r8, r0, pc, lsl #2
    96f4:	2f184800 	svccs	0x00184800
    96f8:	0a00000a 	beq	9728 <__core1_vectors-0xff68d8>
    96fc:	6e2c028c 	cdpvs	2, 2, cr0, cr12, cr12, {4}
    9700:	50000000 	andpl	r0, r0, r0
    9704:	000c7618 	andeq	r7, ip, r8, lsl r6
    9708:	028d0a00 	addeq	r0, sp, #0, 20
    970c:	0008431a 	andeq	r4, r8, sl, lsl r3
    9710:	54185800 	ldrpl	r5, [r8], #-2048	; 0xfffff800
    9714:	0a00000d 	beq	9750 <__core1_vectors-0xff68b0>
    9718:	7616028e 	ldrvc	r0, [r6], -lr, lsl #5
    971c:	68000001 	stmdavs	r0, {r0}
    9720:	000afa18 	andeq	pc, sl, r8, lsl sl	; <UNPREDICTABLE>
    9724:	028f0a00 	addeq	r0, pc, #0, 20
    9728:	00017616 	andeq	r7, r1, r6, lsl r6
    972c:	18187000 	ldmdane	r8, {ip, sp, lr}
    9730:	0a00000a 	beq	9760 <__core1_vectors-0xff68a0>
    9734:	76160290 			; <UNDEFINED> instruction: 0x76160290
    9738:	78000001 	stmdavc	r0, {r0}
    973c:	00016518 	andeq	r6, r1, r8, lsl r5
    9740:	02910a00 	addseq	r0, r1, #0, 20
    9744:	0009b110 	andeq	fp, r9, r0, lsl r1
    9748:	e3188000 	tst	r8, #0
    974c:	0a000006 	beq	976c <__core1_vectors-0xff6894>
    9750:	c1100292 			; <UNDEFINED> instruction: 0xc1100292
    9754:	88000009 	stmdahi	r0, {r0, r3}
    9758:	000f9818 	andeq	r9, pc, r8, lsl r8	; <UNPREDICTABLE>
    975c:	02930a00 	addseq	r0, r3, #0, 20
    9760:	0000810f 	andeq	r8, r0, pc, lsl #2
    9764:	e318a000 	tst	r8, #0
    9768:	0a000002 	beq	9778 <__core1_vectors-0xff6888>
    976c:	76160294 			; <UNDEFINED> instruction: 0x76160294
    9770:	a4000001 	strge	r0, [r0], #-1
    9774:	000bb818 	andeq	fp, fp, r8, lsl r8
    9778:	02950a00 	addseq	r0, r5, #0, 20
    977c:	00017616 	andeq	r7, r1, r6, lsl r6
    9780:	0118ac00 	tsteq	r8, r0, lsl #24
    9784:	0a00000f 	beq	97c8 <__core1_vectors-0xff6838>
    9788:	76160296 			; <UNDEFINED> instruction: 0x76160296
    978c:	b4000001 	strlt	r0, [r0], #-1
    9790:	0009ec18 	andeq	lr, r9, r8, lsl ip
    9794:	02970a00 	addseq	r0, r7, #0, 20
    9798:	00017616 	andeq	r7, r1, r6, lsl r6
    979c:	4518bc00 	ldrmi	fp, [r8, #-3072]	; 0xfffff400
    97a0:	0a000001 	beq	97ac <__core1_vectors-0xff6854>
    97a4:	76160298 			; <UNDEFINED> instruction: 0x76160298
    97a8:	c4000001 	strgt	r0, [r0], #-1
    97ac:	00099018 	andeq	r9, r9, r8, lsl r0
    97b0:	02990a00 	addseq	r0, r9, #0, 20
    97b4:	00008108 	andeq	r8, r0, r8, lsl #2
    97b8:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
    97bc:	000001fa 	strdeq	r0, [r0], -sl
    97c0:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
    97c4:	00008809 	andeq	r8, r0, r9, lsl #16
    97c8:	08001900 	stmdaeq	r0, {r8, fp, ip}
    97cc:	000001fa 	strdeq	r0, [r0], -sl
    97d0:	000009c1 	andeq	r0, r0, r1, asr #19
    97d4:	00008809 	andeq	r8, r0, r9, lsl #16
    97d8:	08000700 	stmdaeq	r0, {r8, r9, sl}
    97dc:	000001fa 	strdeq	r0, [r0], -sl
    97e0:	000009d1 	ldrdeq	r0, [r0], -r1
    97e4:	00008809 	andeq	r8, r0, r9, lsl #16
    97e8:	1b001700 	blne	f3f0 <__core1_vectors-0xff0c10>
    97ec:	029e0af0 	addseq	r0, lr, #240, 20	; 0xf0000
    97f0:	0009f807 	andeq	pc, r9, r7, lsl #16
    97f4:	0e181800 	cdpeq	8, 1, cr1, cr8, cr0, {0}
    97f8:	a10a0000 	mrsge	r0, (UNDEF: 10)
    97fc:	09f81b02 	ldmibeq	r8!, {r1, r8, r9, fp, ip}^
    9800:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9804:	00000848 	andeq	r0, r0, r8, asr #16
    9808:	1802a20a 	stmdane	r2, {r1, r3, r9, sp, pc}
    980c:	00000a08 	andeq	r0, r0, r8, lsl #20
    9810:	a3080078 	movwge	r0, #32888	; 0x8078
    9814:	08000004 	stmdaeq	r0, {r2}
    9818:	0900000a 	stmdbeq	r0, {r1, r3}
    981c:	00000088 	andeq	r0, r0, r8, lsl #1
    9820:	8808001d 	stmdahi	r8, {r0, r2, r3, r4}
    9824:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9828:	0900000a 	stmdbeq	r0, {r1, r3}
    982c:	00000088 	andeq	r0, r0, r8, lsl #1
    9830:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
    9834:	0302830a 	movweq	r8, #8970	; 0x230a
    9838:	00000a3d 	andeq	r0, r0, sp, lsr sl
    983c:	0004461d 	andeq	r4, r4, sp, lsl r6
    9840:	029a0a00 	addseq	r0, sl, #0, 20
    9844:	00088c0b 	andeq	r8, r8, fp, lsl #24
    9848:	01381d00 	teqeq	r8, r0, lsl #26
    984c:	a30a0000 	movwge	r0, #40960	; 0xa000
    9850:	09d10b02 	ldmibeq	r1, {r1, r8, r9, fp}^
    9854:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9858:	000001fa 	strdeq	r0, [r0], -sl
    985c:	00000a4d 	andeq	r0, r0, sp, asr #20
    9860:	00008809 	andeq	r8, r0, r9, lsl #16
    9864:	1e001800 	cdpne	8, 0, cr1, cr0, cr0, {0}
    9868:	00000000 	andeq	r0, r0, r0
    986c:	0a4d040e 	beq	134a8ac <__end__+0x32e88c>
    9870:	631f0000 	tstvs	pc, #0
    9874:	1600000a 	strne	r0, [r0], -sl
    9878:	0000060a 	andeq	r0, r0, sl, lsl #12
    987c:	58040e00 	stmdapl	r4, {r9, sl, fp}
    9880:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    9884:	00032d04 	andeq	r2, r3, r4, lsl #26
    9888:	0a7a1f00 	beq	1e91490 <__end__+0xe75470>
    988c:	81160000 	tsthi	r6, r0
    9890:	00000000 	andeq	r0, r0, r0
    9894:	0a80040e 	beq	fe00a8d4 <__shm_end__+0xbe00a8d4>
    9898:	040e0000 	streq	r0, [lr], #-0
    989c:	00000a6f 	andeq	r0, r0, pc, ror #20
    98a0:	0007f108 	andeq	pc, r7, r8, lsl #2
    98a4:	000a9600 	andeq	r9, sl, r0, lsl #12
    98a8:	00880900 	addeq	r0, r8, r0, lsl #18
    98ac:	00020000 	andeq	r0, r2, r0
    98b0:	00045420 	andeq	r5, r4, r0, lsr #8
    98b4:	03330a00 	teqeq	r3, #0, 20
    98b8:	00060a17 	andeq	r0, r6, r7, lsl sl
    98bc:	044d2000 	strbeq	r2, [sp], #-0
    98c0:	340a0000 	strcc	r0, [sl], #-0
    98c4:	06101d03 	ldreq	r1, [r0], -r3, lsl #26
    98c8:	ed100000 	ldc	0, cr0, [r0, #-0]
    98cc:	0c00002f 	stceq	0, cr0, [r0], {47}	; 0x2f
    98d0:	004d169a 	umaaleq	r1, sp, sl, r6
    98d4:	d0100000 	andsle	r0, r0, r0
    98d8:	0c00002e 	stceq	0, cr0, [r0], {46}	; 0x2e
    98dc:	0081159b 	umulleq	r1, r1, fp, r5	; <UNPREDICTABLE>
    98e0:	f4080000 	vst4.8	{d0-d3}, [r8], r0
    98e4:	d8000001 	stmdale	r0, {r0}
    98e8:	0900000a 	stmdbeq	r0, {r1, r3}
    98ec:	00000088 	andeq	r0, r0, r8, lsl #1
    98f0:	bf100001 	svclt	0x00100001
    98f4:	0c00002f 	stceq	0, cr0, [r0], {47}	; 0x2f
    98f8:	0ac8179e 	beq	ff20f778 <__shm_end__+0xbf20f778>
    98fc:	9d0d0000 	stcls	0, cr0, [sp, #-0]
    9900:	58000030 	stmdapl	r0, {r4, r5}
    9904:	a8081b0d 	stmdage	r8, {r0, r2, r3, r8, r9, fp, ip}
    9908:	0b00000b 	bleq	993c <__core1_vectors-0xff66c4>
    990c:	00002f6d 	andeq	r2, r0, sp, ror #30
    9910:	1e0a1d0d 	cdpne	13, 0, cr1, cr10, cr13, {0}
    9914:	00000002 	andeq	r0, r0, r2
    9918:	002fe60b 	eoreq	lr, pc, fp, lsl #12
    991c:	0a1e0d00 	beq	78cd24 <__core1_vectors-0x8732dc>
    9920:	00000206 	andeq	r0, r0, r6, lsl #4
    9924:	2fa90b02 	svccs	0x00a90b02
    9928:	1f0d0000 	svcne	0x000d0000
    992c:	0002420a 	andeq	r4, r2, sl, lsl #4
    9930:	b60b0400 	strlt	r0, [fp], -r0, lsl #8
    9934:	0d00002f 	stceq	0, cr0, [r0, #-188]	; 0xffffff44
    9938:	024e0b20 	subeq	r0, lr, #32, 22	; 0x8000
    993c:	0b080000 	bleq	209944 <__core1_vectors-0xdf66bc>
    9940:	00002fd0 	ldrdeq	r2, [r0], -r0
    9944:	2a0a210d 	bcs	291d80 <__core1_vectors-0xd6e280>
    9948:	0a000002 	beq	9958 <__core1_vectors-0xff66a8>
    994c:	002fa20b 	eoreq	sl, pc, fp, lsl #4
    9950:	0a220d00 	beq	88cd58 <__core1_vectors-0x7732a8>
    9954:	00000236 	andeq	r0, r0, r6, lsr r2
    9958:	31090b0c 	tstcc	r9, ip, lsl #22
    995c:	230d0000 	movwcs	r0, #53248	; 0xd000
    9960:	00021e0a 	andeq	r1, r2, sl, lsl #28
    9964:	d90b0e00 	stmdble	fp, {r9, sl, fp}
    9968:	0d000030 	stceq	0, cr0, [r0, #-192]	; 0xffffff40
    996c:	02120a24 	andseq	r0, r2, #36, 20	; 0x24000
    9970:	0b100000 	bleq	409978 <__core1_vectors-0xbf6688>
    9974:	000030a2 	andeq	r3, r0, r2, lsr #1
    9978:	b4132a0d 	ldrlt	r2, [r3], #-2573	; 0xfffff5f3
    997c:	18000001 	stmdane	r0, {r0}
    9980:	0030620b 	eorseq	r6, r0, fp, lsl #4
    9984:	132b0d00 			; <UNDEFINED> instruction: 0x132b0d00
    9988:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    998c:	30e90b28 	rsccc	r0, r9, r8, lsr #22
    9990:	2c0d0000 	stccs	0, cr0, [sp], {-0}
    9994:	0001b413 	andeq	fp, r1, r3, lsl r4
    9998:	e10b3800 	tst	fp, r0, lsl #16
    999c:	0d00002e 	stceq	0, cr0, [r0, #-184]	; 0xffffff48
    99a0:	01e8112d 	mvneq	r1, sp, lsr #2
    99a4:	0b480000 	bleq	12099ac <__end__+0x1ed98c>
    99a8:	00002f4e 	andeq	r2, r0, lr, asr #30
    99ac:	dc0c2e0d 	stcle	14, cr2, [ip], {13}
    99b0:	4c000001 	stcmi	0, cr0, [r0], {1}
    99b4:	002f210b 	eoreq	r2, pc, fp, lsl #2
    99b8:	09300d00 	ldmdbeq	r0!, {r8, sl, fp}
    99bc:	00000ba8 	andeq	r0, r0, r8, lsr #23
    99c0:	4d080050 	stcmi	0, cr0, [r8, #-320]	; 0xfffffec0
    99c4:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    99c8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    99cc:	00000088 	andeq	r0, r0, r8, lsl #1
    99d0:	88080001 	stmdahi	r8, {r0}
    99d4:	c3000007 	movwgt	r0, #7
    99d8:	2100000b 	tstcs	r0, fp
    99dc:	0bb80f00 	bleq	fee0d5e4 <__shm_end__+0xbee0d5e4>
    99e0:	f1100000 	setpan	#0
    99e4:	0e000030 	mcreq	0, 0, r0, cr0, cr0, {1}
    99e8:	0bc32414 	bleq	ff0d2a40 <__shm_end__+0xbf0d2a40>
    99ec:	00100000 	andseq	r0, r0, r0
    99f0:	0e00002f 	cdpeq	0, 0, cr0, cr0, cr15, {1}
    99f4:	00811515 	addeq	r1, r1, r5, lsl r5
    99f8:	d6030000 	strle	r0, [r3], -r0
    99fc:	0f000004 	svceq	0x00000004
    9a00:	01901d41 	orrseq	r1, r0, r1, asr #26
    9a04:	45030000 	strmi	r0, [r3, #-0]
    9a08:	10000009 	andne	r0, r0, r9
    9a0c:	019c122a 	orrseq	r1, ip, sl, lsr #4
    9a10:	ee220000 	cdp	0, 2, cr0, cr2, cr0, {0}
    9a14:	0700000d 	streq	r0, [r0, -sp]
    9a18:	00002c01 	andeq	r2, r0, r1, lsl #24
    9a1c:	0e8b1000 	cdpeq	0, 8, cr1, cr11, cr0, {0}
    9a20:	00000cc5 	andeq	r0, r0, r5, asr #25
    9a24:	00052923 	andeq	r2, r5, r3, lsr #18
    9a28:	cc230000 	stcgt	0, cr0, [r3], #-0
    9a2c:	0100000c 	tsteq	r0, ip
    9a30:	0008f723 	andeq	pc, r8, r3, lsr #14
    9a34:	cc230200 	sfmgt	f0, 4, [r3], #-0
    9a38:	0300000a 	movweq	r0, #10
    9a3c:	00057c23 	andeq	r7, r5, r3, lsr #24
    9a40:	8f230400 	svchi	0x00230400
    9a44:	0500000c 	streq	r0, [r0, #-12]
    9a48:	000fa523 	andeq	sl, pc, r3, lsr #10
    9a4c:	18230600 	stmdane	r3!, {r9, sl}
    9a50:	07000001 	streq	r0, [r0, -r1]
    9a54:	000f6d23 	andeq	r6, pc, r3, lsr #26
    9a58:	c8230800 	stmdagt	r3!, {fp}
    9a5c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    9a60:	000e7c23 	andeq	r7, lr, r3, lsr #24
    9a64:	71230a00 			; <UNDEFINED> instruction: 0x71230a00
    9a68:	0b000002 	bleq	9a78 <__core1_vectors-0xff6588>
    9a6c:	000aec23 	andeq	lr, sl, r3, lsr #24
    9a70:	7f230c00 	svcvc	0x00230c00
    9a74:	0d000002 	stceq	0, cr0, [r0, #-8]
    9a78:	00029023 	andeq	r9, r2, r3, lsr #32
    9a7c:	d4230e00 	strtle	r0, [r3], #-3584	; 0xfffff200
    9a80:	0f000005 	svceq	0x00000005
    9a84:	0003bd23 	andeq	fp, r3, r3, lsr #26
    9a88:	59231000 	stmdbpl	r3!, {ip}
    9a8c:	1100000e 	tstne	r0, lr
    9a90:	000f7d23 	andeq	r7, pc, r3, lsr #26
    9a94:	52231200 	eorpl	r1, r3, #0, 4
    9a98:	1300000b 	movwne	r0, #11
    9a9c:	000d1123 	andeq	r1, sp, r3, lsr #2
    9aa0:	1f231400 	svcne	0x00231400
    9aa4:	1500000d 	strne	r0, [r0, #-13]
    9aa8:	000d2d23 	andeq	r2, sp, r3, lsr #26
    9aac:	70231600 	eorvc	r1, r3, r0, lsl #12
    9ab0:	17000003 	strne	r0, [r0, -r3]
    9ab4:	0005f423 	andeq	pc, r5, r3, lsr #8
    9ab8:	c6231800 	strtgt	r1, [r3], -r0, lsl #16
    9abc:	1900000d 	stmdbne	r0, {r0, r2, r3}
    9ac0:	0006fc23 	andeq	pc, r6, r3, lsr #24
    9ac4:	91231a00 			; <UNDEFINED> instruction: 0x91231a00
    9ac8:	1b00000e 	blne	9b08 <__core1_vectors-0xff64f8>
    9acc:	0008df23 	andeq	sp, r8, r3, lsr #30
    9ad0:	2b231c00 	blcs	8d0ad8 <__core1_vectors-0x72f528>
    9ad4:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    9ad8:	00036023 	andeq	r6, r3, r3, lsr #32
    9adc:	22001e00 	andcs	r1, r0, #0, 28
    9ae0:	00001add 	ldrdeq	r1, [r0], -sp
    9ae4:	003a0207 	eorseq	r0, sl, r7, lsl #4
    9ae8:	4d110000 	ldcmi	0, cr0, [r1, #-0]
    9aec:	000ceb0e 	andeq	lr, ip, lr, lsl #22
    9af0:	15af2300 	strne	r2, [pc, #768]!	; 9df8 <__core1_vectors-0xff6208>
    9af4:	23000000 	movwcs	r0, #0
    9af8:	000015ce 	andeq	r1, r0, lr, asr #11
    9afc:	13d92401 	bicsne	r2, r9, #16777216	; 0x1000000
    9b00:	01000000 	mrseq	r0, (UNDEF: 0)
    9b04:	1b600300 	blne	180a70c <__end__+0x7ee6ec>
    9b08:	5f110000 	svcpl	0x00110000
    9b0c:	000cc501 	andeq	ip, ip, r1, lsl #10
    9b10:	1b8a0d00 	blne	fe28cf18 <__shm_end__+0xbe28cf18>
    9b14:	11140000 	tstne	r4, r0
    9b18:	0d461066 	stcleq	0, cr1, [r6, #-408]	; 0xfffffe68
    9b1c:	210b0000 	mrscs	r0, (UNDEF: 11)
    9b20:	11000007 	tstne	r0, r7
    9b24:	0ceb1868 	stcleq	8, cr1, [fp], #416	; 0x1a0
    9b28:	0b000000 	bleq	9b30 <__core1_vectors-0xff64d0>
    9b2c:	00002839 	andeq	r2, r0, r9, lsr r8
    9b30:	82186911 	andshi	r6, r8, #278528	; 0x44000
    9b34:	04000001 	streq	r0, [r0], #-1
    9b38:	0014f20b 	andseq	pc, r4, fp, lsl #4
    9b3c:	186a1100 	stmdane	sl!, {r8, ip}^
    9b40:	00000bec 	andeq	r0, r0, ip, ror #23
    9b44:	2b3f0b08 	blcs	fcc76c <__core1_vectors-0x33894>
    9b48:	6b110000 	blvs	449b50 <__core1_vectors-0xbb64b0>
    9b4c:	00019c18 	andeq	r9, r1, r8, lsl ip
    9b50:	66110c00 	ldrvs	r0, [r1], -r0, lsl #24
    9b54:	11007263 	tstne	r0, r3, ror #4
    9b58:	019c186c 	orrseq	r1, ip, ip, ror #16
    9b5c:	00100000 	andseq	r0, r0, r0
    9b60:	001b9d03 	andseq	r9, fp, r3, lsl #26
    9b64:	016e1100 	cmneq	lr, r0, lsl #2
    9b68:	00000cf7 	strdeq	r0, [r0], -r7
    9b6c:	002f2b25 	eoreq	r2, pc, r5, lsr #22
    9b70:	1b0b0100 	blne	2c9f78 <__core1_vectors-0xd36088>
    9b74:	00000d46 	andeq	r0, r0, r6, asr #26
    9b78:	c0000305 	andgt	r0, r0, r5, lsl #6
    9b7c:	15250101 	strne	r0, [r5, #-257]!	; 0xfffffeff
    9b80:	01000030 	tsteq	r0, r0, lsr r0
    9b84:	00810c0c 	addeq	r0, r1, ip, lsl #24
    9b88:	03050000 	movweq	r0, #20480	; 0x5000
    9b8c:	0101c014 	tsteq	r1, r4, lsl r0
    9b90:	002ff726 	eoreq	pc, pc, r6, lsr #14
    9b94:	07960100 	ldreq	r0, [r6, r0, lsl #2]
    9b98:	00000212 	andeq	r0, r0, r2, lsl r2
    9b9c:	00000000 	andeq	r0, r0, r0
    9ba0:	0000002c 	andeq	r0, r0, ip, lsr #32
    9ba4:	0dbd9c01 	ldceq	12, cr9, [sp, #4]!
    9ba8:	66270000 	strtvs	r0, [r7], -r0
    9bac:	96010064 	strls	r0, [r1], -r4, rrx
    9bb0:	00008112 	andeq	r8, r0, r2, lsl r1
    9bb4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9bb8:	736f7027 	cmnvc	pc, #39	; 0x27
    9bbc:	1c960100 	ldfnes	f0, [r6], {0}
    9bc0:	00000212 	andeq	r0, r0, r2, lsl r2
    9bc4:	28709102 	ldmdacs	r0!, {r1, r8, ip, pc}^
    9bc8:	000030c7 	andeq	r3, r0, r7, asr #1
    9bcc:	81259601 			; <UNDEFINED> instruction: 0x81259601
    9bd0:	02000000 	andeq	r0, r0, #0
    9bd4:	26006c91 			; <UNDEFINED> instruction: 0x26006c91
    9bd8:	00003006 	andeq	r3, r0, r6
    9bdc:	81059501 	tsthi	r5, r1, lsl #10
    9be0:	00000000 	andeq	r0, r0, r0
    9be4:	50000000 	andpl	r0, r0, r0
    9be8:	01000000 	mrseq	r0, (UNDEF: 0)
    9bec:	000de69c 	muleq	sp, ip, r6
    9bf0:	64662700 	strbtvs	r2, [r6], #-1792	; 0xfffff900
    9bf4:	11950100 	orrsne	r0, r5, r0, lsl #2
    9bf8:	00000081 	andeq	r0, r0, r1, lsl #1
    9bfc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    9c00:	00309b26 	eorseq	r9, r0, r6, lsr #22
    9c04:	05940100 	ldreq	r0, [r4, #256]	; 0x100
    9c08:	00000081 	andeq	r0, r0, r1, lsl #1
    9c0c:	00000000 	andeq	r0, r0, r0
    9c10:	00000034 	andeq	r0, r0, r4, lsr r0
    9c14:	0e1d9c01 	cdpeq	12, 1, cr9, cr13, cr1, {0}
    9c18:	66270000 	strtvs	r0, [r7], -r0
    9c1c:	94010064 	strls	r0, [r1], #-100	; 0xffffff9c
    9c20:	00008110 	andeq	r8, r0, r0, lsl r1
    9c24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9c28:	00747327 	rsbseq	r7, r4, r7, lsr #6
    9c2c:	1d219401 	cfstrsne	mvf9, [r1, #-4]!
    9c30:	0200000e 	andeq	r0, r0, #14
    9c34:	0e007091 	mcreq	0, 0, r7, cr0, cr1, {4}
    9c38:	000ae404 	andeq	lr, sl, r4, lsl #8
    9c3c:	2b4a2600 	blcs	1293444 <__end__+0x277424>
    9c40:	93010000 	movwls	r0, #4096	; 0x1000
    9c44:	00008105 	andeq	r8, r0, r5, lsl #2
    9c48:	00000000 	andeq	r0, r0, r0
    9c4c:	00002400 	andeq	r2, r0, r0, lsl #8
    9c50:	4c9c0100 	ldfmis	f0, [ip], {0}
    9c54:	2700000e 	strcs	r0, [r0, -lr]
    9c58:	01006466 	tsteq	r0, r6, ror #8
    9c5c:	00811093 	umulleq	r1, r1, r3, r0	; <UNPREDICTABLE>
    9c60:	91020000 	mrsls	r0, (UNDEF: 2)
    9c64:	39290074 	stmdbcc	r9!, {r2, r4, r5, r6}
    9c68:	0100001c 	tsteq	r0, ip, lsl r0
    9c6c:	00810580 	addeq	r0, r1, r0, lsl #11
    9c70:	00000000 	andeq	r0, r0, r0
    9c74:	00b40000 	adcseq	r0, r4, r0
    9c78:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c7c:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
    9c80:	00646627 	rsbeq	r6, r4, r7, lsr #12
    9c84:	810f8001 	tsthi	pc, r1
    9c88:	02000000 	andeq	r0, r0, #0
    9c8c:	62276c91 	eorvs	r6, r7, #37120	; 0x9100
    9c90:	01006675 	tsteq	r0, r5, ror r6
    9c94:	01821980 	orreq	r1, r2, r0, lsl #19
    9c98:	91020000 	mrsls	r0, (UNDEF: 2)
    9c9c:	6e632768 	cdpvs	7, 6, cr2, cr3, cr8, {3}
    9ca0:	80010074 	andhi	r0, r1, r4, ror r0
    9ca4:	00008f25 	andeq	r8, r0, r5, lsr #30
    9ca8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    9cac:	0000002a 	andeq	r0, r0, sl, lsr #32
    9cb0:	00006400 	andeq	r6, r0, r0, lsl #8
    9cb4:	00702b00 	rsbseq	r2, r0, r0, lsl #22
    9cb8:	f40f8301 	vst2.8	{d8-d11}, [pc], r1
    9cbc:	02000001 	andeq	r0, r0, #1
    9cc0:	672b7491 			; <UNDEFINED> instruction: 0x672b7491
    9cc4:	0100746f 	tsteq	r0, pc, ror #8
    9cc8:	008f1084 	addeq	r1, pc, r4, lsl #1
    9ccc:	91020000 	mrsls	r0, (UNDEF: 2)
    9cd0:	29000070 	stmdbcs	r0, {r4, r5, r6}
    9cd4:	0000117d 	andeq	r1, r0, sp, ror r1
    9cd8:	81056801 	tsthi	r5, r1, lsl #16
    9cdc:	00000000 	andeq	r0, r0, r0
    9ce0:	30000000 	andcc	r0, r0, r0
    9ce4:	01000001 	tsteq	r0, r1
    9ce8:	000f3e9c 	muleq	pc, ip, lr	; <UNPREDICTABLE>
    9cec:	64662700 	strbtvs	r2, [r6], #-1792	; 0xfffff900
    9cf0:	10680100 	rsbne	r0, r8, r0, lsl #2
    9cf4:	00000081 	andeq	r0, r0, r1, lsl #1
    9cf8:	27649102 	strbcs	r9, [r4, -r2, lsl #2]!
    9cfc:	00667562 	rsbeq	r7, r6, r2, ror #10
    9d00:	3e206801 	cdpcc	8, 2, cr6, cr0, cr1, {0}
    9d04:	0200000f 	andeq	r0, r0, #15
    9d08:	63276091 			; <UNDEFINED> instruction: 0x63276091
    9d0c:	0100746e 	tsteq	r0, lr, ror #8
    9d10:	008f2c68 	addeq	r2, pc, r8, ror #24
    9d14:	91020000 	mrsls	r0, (UNDEF: 2)
    9d18:	00002a5c 	andeq	r2, r0, ip, asr sl
    9d1c:	00e00000 	rsceq	r0, r0, r0
    9d20:	702b0000 	eorvc	r0, fp, r0
    9d24:	156b0100 	strbne	r0, [fp, #-256]!	; 0xffffff00
    9d28:	00000782 	andeq	r0, r0, r2, lsl #15
    9d2c:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    9d30:	0000308e 	andeq	r3, r0, lr, lsl #1
    9d34:	8f106c01 	svchi	0x00106c01
    9d38:	02000000 	andeq	r0, r0, #0
    9d3c:	002a7091 	mlaeq	sl, r1, r0, r7
    9d40:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    9d44:	2b000000 	blcs	9d4c <__core1_vectors-0xff62b4>
    9d48:	01006863 	tsteq	r0, r3, ror #16
    9d4c:	01fa126f 	mvnseq	r1, pc, ror #4
    9d50:	91020000 	mrsls	r0, (UNDEF: 2)
    9d54:	0000006f 	andeq	r0, r0, pc, rrx
    9d58:	0f44040e 	svceq	0x0044040e
    9d5c:	292c0000 	stmdbcs	ip!, {}	; <UNPREDICTABLE>
    9d60:	00002f0a 	andeq	r2, r0, sl, lsl #30
    9d64:	e0115b01 	ands	r5, r1, r1, lsl #22
    9d68:	ac00000b 	stcge	0, cr0, [r0], {11}
    9d6c:	b0010052 	andlt	r0, r1, r2, asr r0
    9d70:	01000000 	mrseq	r0, (UNDEF: 0)
    9d74:	000fbd9c 	muleq	pc, ip, sp	; <UNPREDICTABLE>
    9d78:	000d2800 	andeq	r2, sp, r0, lsl #16
    9d7c:	5b010000 	blpl	49d84 <__core1_vectors-0xfb627c>
    9d80:	00019c31 	andeq	r9, r1, r1, lsr ip
    9d84:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    9d88:	0052bc2a 	subseq	fp, r2, sl, lsr #24
    9d8c:	00009001 	andeq	r9, r0, r1
    9d90:	2bac2500 	blcs	feb13198 <__shm_end__+0xbeb13198>
    9d94:	5d010000 	stcpl	0, cr0, [r1, #-0]
    9d98:	0000810e 	andeq	r8, r0, lr, lsl #2
    9d9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9da0:	0052c82a 	subseq	ip, r2, sl, lsr #16
    9da4:	00006c01 	andeq	r6, r0, r1, lsl #24
    9da8:	301c2500 	andscc	r2, ip, r0, lsl #10
    9dac:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    9db0:	00019c12 	andeq	r9, r1, r2, lsl ip
    9db4:	70910200 	addsvc	r0, r1, r0, lsl #4
    9db8:	0068632b 	rsbeq	r6, r8, fp, lsr #6
    9dbc:	fa0e5f01 	blx	3a19c8 <__core1_vectors-0xc5e638>
    9dc0:	02000001 	andeq	r0, r0, #1
    9dc4:	732b6f91 			; <UNDEFINED> instruction: 0x732b6f91
    9dc8:	60010074 	andvs	r0, r1, r4, ror r0
    9dcc:	000be019 	andeq	lr, fp, r9, lsl r0
    9dd0:	68910200 	ldmvs	r1, {r9}
    9dd4:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    9dd8:	0000306a 	andeq	r3, r0, sl, rrx
    9ddc:	e0115201 	ands	r5, r1, r1, lsl #4
    9de0:	0000000b 	andeq	r0, r0, fp
    9de4:	64000000 	strvs	r0, [r0], #-0
    9de8:	01000000 	mrseq	r0, (UNDEF: 0)
    9dec:	000fff9c 	muleq	pc, ip, pc	; <UNPREDICTABLE>
    9df0:	74732700 	ldrbtvc	r2, [r3], #-1792	; 0xfffff900
    9df4:	52010072 	andpl	r0, r1, #114	; 0x72
    9df8:	00078235 	andeq	r8, r7, r5, lsr r2
    9dfc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9e00:	0000002a 	andeq	r0, r0, sl, lsr #32
    9e04:	00003000 	andeq	r3, r0, r0
    9e08:	74732b00 	ldrbtvc	r2, [r3], #-2816	; 0xfffff500
    9e0c:	19550100 	ldmdbne	r5, {r8}^
    9e10:	00000be0 	andeq	r0, r0, r0, ror #23
    9e14:	00749102 	rsbseq	r9, r4, r2, lsl #2
    9e18:	30232900 	eorcc	r2, r3, r0, lsl #18
    9e1c:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    9e20:	000be011 	andeq	lr, fp, r1, lsl r0
    9e24:	00523c00 	subseq	r3, r2, r0, lsl #24
    9e28:	00007001 	andeq	r7, r0, r1
    9e2c:	409c0100 	addsmi	r0, ip, r0, lsl #2
    9e30:	27000010 	smladcs	r0, r0, r0, r0
    9e34:	01006863 	tsteq	r0, r3, ror #16
    9e38:	01fa2c49 	mvnseq	r2, r9, asr #24
    9e3c:	91020000 	mrsls	r0, (UNDEF: 2)
    9e40:	52702a6f 	rsbspl	r2, r0, #454656	; 0x6f000
    9e44:	00200100 	eoreq	r0, r0, r0, lsl #2
    9e48:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    9e4c:	4c010074 	stcmi	0, cr0, [r1], {116}	; 0x74
    9e50:	000be019 	andeq	lr, fp, r9, lsl r0
    9e54:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9e58:	582d0000 	stmdapl	sp!, {}	; <UNPREDICTABLE>
    9e5c:	0100002f 	tsteq	r0, pc, lsr #32
    9e60:	0be01844 	bleq	ff80ff78 <__shm_end__+0xbf80ff78>
    9e64:	52000000 	andpl	r0, r0, #0
    9e68:	003c0100 	eorseq	r0, ip, r0, lsl #2
    9e6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9e70:	00001069 	andeq	r1, r0, r9, rrx
    9e74:	00686327 	rsbeq	r6, r8, r7, lsr #6
    9e78:	fa324401 	blx	c9ae84 <__core1_vectors-0x36517c>
    9e7c:	02000001 	andeq	r0, r0, #1
    9e80:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
    9e84:	00002f8e 	andeq	r2, r0, lr, lsl #31
    9e88:	00064201 	andeq	r4, r6, r1, lsl #4
    9e8c:	44000000 	strmi	r0, [r0], #-0
    9e90:	01000000 	mrseq	r0, (UNDEF: 0)
    9e94:	00108f9c 	mulseq	r0, ip, pc	; <UNPREDICTABLE>
    9e98:	19a22800 	stmibne	r2!, {fp, sp}
    9e9c:	42010000 	andmi	r0, r1, #0
    9ea0:	0000811e 	andeq	r8, r0, lr, lsl r1
    9ea4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9ea8:	30aa2f00 	adccc	r2, sl, r0, lsl #30
    9eac:	15010000 	strne	r0, [r1, #-0]
    9eb0:	000be011 	andeq	lr, fp, r1, lsl r0
    9eb4:	00512800 	subseq	r2, r1, r0, lsl #16
    9eb8:	0000d801 	andeq	sp, r0, r1, lsl #16
    9ebc:	289c0100 	ldmcs	ip, {r8}
    9ec0:	00002fb1 			; <UNDEFINED> instruction: 0x00002fb1
    9ec4:	9c301501 	cfldr32ls	mvfx1, [r0], #-4
    9ec8:	02000001 	andeq	r0, r0, #1
    9ecc:	732b6c91 			; <UNDEFINED> instruction: 0x732b6c91
    9ed0:	17010074 	smlsdxne	r1, r4, r0, r0
    9ed4:	000be015 	andeq	lr, fp, r5, lsl r0
    9ed8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9edc:	002f3b25 	eoreq	r3, pc, r5, lsr #22
    9ee0:	0e180100 	mufeqe	f0, f0, f0
    9ee4:	0000019c 	muleq	r0, ip, r1
    9ee8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    9eec:	00002200 	andeq	r2, r0, r0, lsl #4
    9ef0:	43000200 	movwmi	r0, #512	; 0x200
    9ef4:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    9ef8:	003b0b01 	eorseq	r0, fp, r1, lsl #22
    9efc:	00535c00 	subseq	r5, r3, r0, lsl #24
    9f00:	00547001 	subseq	r7, r4, r1
    9f04:	00311101 	eorseq	r1, r1, r1, lsl #2
    9f08:	00313800 	eorseq	r3, r1, r0, lsl #16
    9f0c:	002b0600 	eoreq	r0, fp, r0, lsl #12
    9f10:	22800100 	addcs	r0, r0, #0, 2
    9f14:	02000000 	andeq	r0, r0, #0
    9f18:	001b5700 	andseq	r5, fp, r0, lsl #14
    9f1c:	7f010400 	svcvc	0x00010400
    9f20:	7000003b 	andvc	r0, r0, fp, lsr r0
    9f24:	74010054 	strvc	r0, [r1], #-84	; 0xffffffac
    9f28:	11010054 	qaddne	r0, r4, r1
    9f2c:	38000031 	stmdacc	r0, {r0, r4, r5}
    9f30:	06000031 			; <UNDEFINED> instruction: 0x06000031
    9f34:	0100002b 	tsteq	r0, fp, lsr #32
    9f38:	00002280 	andeq	r2, r0, r0, lsl #5
    9f3c:	6b000200 	blvs	a744 <__core1_vectors-0xff58bc>
    9f40:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    9f44:	003bd601 	eorseq	sp, fp, r1, lsl #12
    9f48:	00547400 	subseq	r7, r4, r0, lsl #8
    9f4c:	0054b001 	subseq	fp, r4, r1
    9f50:	00318f01 	eorseq	r8, r1, r1, lsl #30
    9f54:	00313800 	eorseq	r3, r1, r0, lsl #16
    9f58:	002b0600 	eoreq	r0, fp, r0, lsl #12
    9f5c:	e5800100 	str	r0, [r0, #256]	; 0x100
    9f60:	04000009 	streq	r0, [r0], #-9
    9f64:	001b7f00 	andseq	r7, fp, r0, lsl #30
    9f68:	b8010400 	stmdalt	r1, {sl}
    9f6c:	0c00003d 	stceq	0, cr0, [r0], {61}	; 0x3d
    9f70:	0000416f 	andeq	r4, r0, pc, ror #2
    9f74:	00003138 	andeq	r3, r0, r8, lsr r1
    9f78:	010054b0 			; <UNDEFINED> instruction: 0x010054b0
    9f7c:	00000130 	andeq	r0, r0, r0, lsr r1
    9f80:	00003c2d 	andeq	r3, r0, sp, lsr #24
    9f84:	3b070802 	blcc	1cbf94 <__core1_vectors-0xe3406c>
    9f88:	0300000b 	movweq	r0, #11
    9f8c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    9f90:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    9f94:	000b4507 	andeq	r4, fp, r7, lsl #10
    9f98:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    9f9c:	00000805 	andeq	r0, r0, r5, lsl #16
    9fa0:	9d040802 	stcls	8, cr0, [r4, #-8]
    9fa4:	0400000a 	streq	r0, [r0], #-10
    9fa8:	0000349c 	muleq	r0, ip, r4
    9fac:	33162a02 	tstcc	r6, #8192	; 0x2000
    9fb0:	04000000 	streq	r0, [r0], #-0
    9fb4:	00003873 	andeq	r3, r0, r3, ror r8
    9fb8:	60152f02 	andsvs	r2, r5, r2, lsl #30
    9fbc:	05000000 	streq	r0, [r0, #-0]
    9fc0:	00006604 	andeq	r6, r0, r4, lsl #12
    9fc4:	00480600 	subeq	r0, r8, r0, lsl #12
    9fc8:	00750000 	rsbseq	r0, r5, r0
    9fcc:	75070000 	strvc	r0, [r7, #-0]
    9fd0:	00000000 	andeq	r0, r0, r0
    9fd4:	007b0405 	rsbseq	r0, fp, r5, lsl #8
    9fd8:	04080000 	streq	r0, [r8], #-0
    9fdc:	00004054 	andeq	r4, r0, r4, asr r0
    9fe0:	880f3602 	stmdahi	pc, {r1, r9, sl, ip, sp}	; <UNPREDICTABLE>
    9fe4:	05000000 	streq	r0, [r0, #-0]
    9fe8:	00008e04 	andeq	r8, r0, r4, lsl #28
    9fec:	002c0600 	eoreq	r0, ip, r0, lsl #12
    9ff0:	00a20000 	adceq	r0, r2, r0
    9ff4:	75070000 	strvc	r0, [r7, #-0]
    9ff8:	07000000 	streq	r0, [r0, -r0]
    9ffc:	00000075 	andeq	r0, r0, r5, ror r0
    a000:	08010200 	stmdaeq	r1, {r9}
    a004:	00000400 	andeq	r0, r0, r0, lsl #8
    a008:	003a9b09 	eorseq	r9, sl, r9, lsl #22
    a00c:	12bb0200 	adcsne	r0, fp, #0, 4
    a010:	00000054 	andeq	r0, r0, r4, asr r0
    a014:	00408209 	subeq	r8, r0, r9, lsl #4
    a018:	10be0200 	adcsne	r0, lr, r0, lsl #4
    a01c:	0000007c 	andeq	r0, r0, ip, ror r0
    a020:	02060102 	andeq	r0, r6, #-2147483648	; 0x80000000
    a024:	0a000004 	beq	a03c <__core1_vectors-0xff5fc4>
    a028:	00003793 	muleq	r0, r3, r7
    a02c:	00a20107 	adceq	r0, r2, r7, lsl #2
    a030:	17030000 	strne	r0, [r3, -r0]
    a034:	0001f506 	andeq	pc, r1, r6, lsl #10
    a038:	332b0b00 			; <UNDEFINED> instruction: 0x332b0b00
    a03c:	0b000000 	bleq	a044 <__core1_vectors-0xff5fbc>
    a040:	00003692 	muleq	r0, r2, r6
    a044:	3b660b01 	blcc	198cc50 <__end__+0x970c30>
    a048:	0b020000 	bleq	8a050 <__core1_vectors-0xf75fb0>
    a04c:	00003f9f 	muleq	r0, pc, pc	; <UNPREDICTABLE>
    a050:	3b0a0b03 	blcc	28cc64 <__core1_vectors-0xd7339c>
    a054:	0b040000 	bleq	10a05c <__core1_vectors-0xef5fa4>
    a058:	00003ea8 	andeq	r3, r0, r8, lsr #29
    a05c:	3d2b0b05 	fstmdbxcc	fp!, {d0-d1}	;@ Deprecated
    a060:	0b060000 	bleq	18a068 <__core1_vectors-0xe75f98>
    a064:	00003975 	andeq	r3, r0, r5, ror r9
    a068:	3ebd0b07 	vmovcc.f64	d0, #215	; 0xbeb80000 -0.3593750
    a06c:	0b080000 	bleq	20a074 <__core1_vectors-0xdf5f8c>
    a070:	00003ecb 	andeq	r3, r0, fp, asr #29
    a074:	3f920b09 	svccc	0x00920b09
    a078:	0b0a0000 	bleq	28a080 <__core1_vectors-0xd75f80>
    a07c:	00003a61 	andeq	r3, r0, r1, ror #20
    a080:	34dd0b0b 	ldrbcc	r0, [sp], #2827	; 0xb0b
    a084:	0b0c0000 	bleq	30a08c <__core1_vectors-0xcf5f74>
    a088:	000034f1 	strdeq	r3, [r0], -r1
    a08c:	37d70b0d 	ldrbcc	r0, [r7, sp, lsl #22]
    a090:	0b0e0000 	bleq	38a098 <__core1_vectors-0xc75f68>
    a094:	000037ed 	andeq	r3, r0, sp, ror #15
    a098:	36cc0b0f 	strbcc	r0, [ip], pc, lsl #22
    a09c:	0b100000 	bleq	40a0a4 <__core1_vectors-0xbf5f5c>
    a0a0:	00003aee 	andeq	r3, r0, lr, ror #21
    a0a4:	37560b11 	smmlacc	r6, r1, fp, r0
    a0a8:	0b120000 	bleq	48a0b0 <__core1_vectors-0xb75f50>
    a0ac:	00004235 	andeq	r4, r0, r5, lsr r2
    a0b0:	33a70b13 			; <UNDEFINED> instruction: 0x33a70b13
    a0b4:	0b140000 	bleq	50a0bc <__core1_vectors-0xaf5f44>
    a0b8:	0000377a 	andeq	r3, r0, sl, ror r7
    a0bc:	32ea0b15 	rsccc	r0, sl, #21504	; 0x5400
    a0c0:	0b160000 	bleq	58a0c8 <__core1_vectors-0xa75f38>
    a0c4:	00003fc2 	andeq	r3, r0, r2, asr #31
    a0c8:	40db0b17 	sbcsmi	r0, fp, r7, lsl fp
    a0cc:	0b180000 	bleq	60a0d4 <__core1_vectors-0x9f5f2c>
    a0d0:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    a0d4:	3bd80b19 	blcc	ff60cd40 <__shm_end__+0xbf60cd40>
    a0d8:	0b1a0000 	bleq	68a0e0 <__core1_vectors-0x975f20>
    a0dc:	00003fd0 	ldrdeq	r3, [r0], -r0
    a0e0:	32040b1b 	andcc	r0, r4, #27648	; 0x6c00
    a0e4:	0b1c0000 	bleq	70a0ec <__core1_vectors-0x8f5f14>
    a0e8:	00003fde 	ldrdeq	r3, [r0], -lr
    a0ec:	3fec0b1d 	svccc	0x00ec0b1d
    a0f0:	0b1e0000 	bleq	78a0f8 <__core1_vectors-0x875f08>
    a0f4:	000031b2 			; <UNDEFINED> instruction: 0x000031b2
    a0f8:	40160b1f 	andsmi	r0, r6, pc, lsl fp
    a0fc:	0b200000 	bleq	80a104 <__core1_vectors-0x7f5efc>
    a100:	0000358c 	andeq	r3, r0, ip, lsl #11
    a104:	3ac00b21 	bcc	ff00cd90 <__shm_end__+0xbf00cd90>
    a108:	0b220000 	bleq	88a110 <__core1_vectors-0x775ef0>
    a10c:	00003fb5 			; <UNDEFINED> instruction: 0x00003fb5
    a110:	39e20b23 	stmibcc	r2!, {r0, r1, r5, r8, r9, fp}^
    a114:	0b240000 	bleq	90a11c <__core1_vectors-0x6f5ee4>
    a118:	000038d6 	ldrdeq	r3, [r0], -r6
    a11c:	35b50b25 	ldrcc	r0, [r5, #2853]!	; 0xb25
    a120:	0b260000 	bleq	98a128 <__core1_vectors-0x675ed8>
    a124:	000038f4 	strdeq	r3, [r0], -r4
    a128:	366e0b27 	strbtcc	r0, [lr], -r7, lsr #22
    a12c:	0b280000 	bleq	a0a134 <__core1_vectors-0x5f5ecc>
    a130:	00003904 	andeq	r3, r0, r4, lsl #18
    a134:	39140b29 	ldmdbcc	r4, {r0, r3, r5, r8, r9, fp}
    a138:	0b2a0000 	bleq	a8a140 <__core1_vectors-0x575ec0>
    a13c:	00003a47 	andeq	r3, r0, r7, asr #20
    a140:	387d0b2b 	ldmdacc	sp!, {r0, r1, r3, r5, r8, r9, fp}^
    a144:	0b2c0000 	bleq	b0a14c <__core1_vectors-0x4f5eb4>
    a148:	00003c79 	andeq	r3, r0, r9, ror ip
    a14c:	36130b2d 	ldrcc	r0, [r3], -sp, lsr #22
    a150:	002e0000 	eoreq	r0, lr, r0
    a154:	00380f0a 	eorseq	r0, r8, sl, lsl #30
    a158:	a2010700 	andge	r0, r1, #0, 14
    a15c:	04000000 	streq	r0, [r0], #-0
    a160:	03d60617 	bicseq	r0, r6, #24117248	; 0x1700000
    a164:	130b0000 	movwne	r0, #45056	; 0xb000
    a168:	00000035 	andeq	r0, r0, r5, lsr r0
    a16c:	0032570b 	eorseq	r5, r2, fp, lsl #14
    a170:	e30b0100 	movw	r0, #45312	; 0xb100
    a174:	02000041 	andeq	r0, r0, #65	; 0x41
    a178:	00405c0b 	subeq	r5, r0, fp, lsl #24
    a17c:	330b0300 	movwcc	r0, #45824	; 0xb300
    a180:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    a184:	0033170b 	eorseq	r1, r3, fp, lsl #14
    a188:	ef0b0500 	svc	0x000b0500
    a18c:	06000035 			; <UNDEFINED> instruction: 0x06000035
    a190:	0035230b 	eorseq	r2, r5, fp, lsl #6
    a194:	f90b0700 			; <UNDEFINED> instruction: 0xf90b0700
    a198:	0800003e 	stmdaeq	r0, {r1, r2, r3, r4, r5}
    a19c:	0040410b 	subeq	r4, r0, fp, lsl #2
    a1a0:	4f0b0900 	svcmi	0x000b0900
    a1a4:	0a00003d 	beq	a2a0 <__core1_vectors-0xff5d60>
    a1a8:	00335c0b 	eorseq	r5, r3, fp, lsl #24
    a1ac:	660b0b00 	strvs	r0, [fp], -r0, lsl #22
    a1b0:	0c000035 	stceq	0, cr0, [r0], {53}	; 0x35
    a1b4:	0032d80b 	eorseq	sp, r2, fp, lsl #16
    a1b8:	180b0d00 	stmdane	fp, {r8, sl, fp}
    a1bc:	0e000042 	cdpeq	0, 0, cr0, cr0, cr2, {2}
    a1c0:	003a340b 	eorseq	r3, sl, fp, lsl #8
    a1c4:	210b0f00 	tstcs	fp, r0, lsl #30
    a1c8:	10000037 	andne	r0, r0, r7, lsr r0
    a1cc:	003a710b 	eorseq	r7, sl, fp, lsl #2
    a1d0:	1d0b1100 	stfnes	f1, [fp, #-0]
    a1d4:	12000041 	andne	r0, r0, #65	; 0x41
    a1d8:	00341f0b 	eorseq	r1, r4, fp, lsl #30
    a1dc:	340b1300 	strcc	r1, [fp], #-768	; 0xfffffd00
    a1e0:	14000037 	strne	r0, [r0], #-55	; 0xffffffc9
    a1e4:	0039a50b 	eorseq	sl, r9, fp, lsl #10
    a1e8:	fe0b1500 	cdp2	5, 0, cr1, cr11, cr0, {0}
    a1ec:	16000034 			; <UNDEFINED> instruction: 0x16000034
    a1f0:	0039f10b 	eorseq	pc, r9, fp, lsl #2
    a1f4:	f90b1700 			; <UNDEFINED> instruction: 0xf90b1700
    a1f8:	18000037 	stmdane	r0, {r0, r1, r2, r4, r5}
    a1fc:	0033350b 	eorseq	r3, r3, fp, lsl #10
    a200:	c40b1900 	strgt	r1, [fp], #-2304	; 0xfffff700
    a204:	1a000040 	bne	a30c <__core1_vectors-0xff5cf4>
    a208:	0039630b 	eorseq	r6, r9, fp, lsl #6
    a20c:	ed0b1b00 	vstr	d1, [fp, #-0]
    a210:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    a214:	0031ed0b 	eorseq	lr, r1, fp, lsl #26
    a218:	ae0b1d00 	cdpge	13, 0, cr1, cr11, cr0, {0}
    a21c:	1e000038 	mcrne	0, 0, r0, cr0, cr8, {1}
    a220:	00389a0b 	eorseq	r9, r8, fp, lsl #20
    a224:	0c0b1f00 	stceq	15, cr1, [fp], {-0}
    a228:	2000003d 	andcs	r0, r0, sp, lsr r0
    a22c:	003d970b 	eorseq	r9, sp, fp, lsl #14
    a230:	a30b2100 	movwge	r2, #45312	; 0xb100
    a234:	22000040 	andcs	r0, r0, #64	; 0x40
    a238:	0036200b 	eorseq	r2, r6, fp
    a23c:	880b2300 	stmdahi	fp, {r8, r9, sp}
    a240:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    a244:	003d640b 	eorseq	r6, sp, fp, lsl #8
    a248:	880b2500 	stmdahi	fp, {r8, sl, sp}
    a24c:	2600003c 			; <UNDEFINED> instruction: 0x2600003c
    a250:	003c9c0b 	eorseq	r9, ip, fp, lsl #24
    a254:	b00b2700 	andlt	r2, fp, r0, lsl #14
    a258:	2800003c 	stmdacs	r0, {r2, r3, r4, r5}
    a25c:	0034870b 	eorseq	r8, r4, fp, lsl #14
    a260:	0a0b2900 	beq	2d4668 <__core1_vectors-0xd2b998>
    a264:	2a000034 	bcs	a33c <__core1_vectors-0xff5cc4>
    a268:	0034320b 	eorseq	r3, r4, fp, lsl #4
    a26c:	420b2b00 	andmi	r2, fp, #0, 22
    a270:	2c00003f 	stccs	0, cr0, [r0], {63}	; 0x3f
    a274:	0034640b 	eorseq	r6, r4, fp, lsl #8
    a278:	560b2d00 	strpl	r2, [fp], -r0, lsl #26
    a27c:	2e00003f 	mcrcs	0, 0, r0, cr0, cr15, {1}
    a280:	003f6a0b 	eorseq	r6, pc, fp, lsl #20
    a284:	7e0b2f00 	cdpvc	15, 0, cr2, cr11, cr0, {0}
    a288:	3000003f 	andcc	r0, r0, pc, lsr r0
    a28c:	0035780b 	eorseq	r7, r5, fp, lsl #16
    a290:	520b3100 	andpl	r3, fp, #0, 2
    a294:	32000035 	andcc	r0, r0, #53	; 0x35
    a298:	0038c20b 	eorseq	ip, r8, fp, lsl #4
    a29c:	840b3300 	strhi	r3, [fp], #-768	; 0xfffffd00
    a2a0:	3400003a 	strcc	r0, [r0], #-58	; 0xffffffc6
    a2a4:	0041520b 	subeq	r5, r1, fp, lsl #4
    a2a8:	d20b3500 	andle	r3, fp, #0, 10
    a2ac:	36000035 			; <UNDEFINED> instruction: 0x36000035
    a2b0:	0036a20b 	eorseq	sl, r6, fp, lsl #4
    a2b4:	b70b3700 	strlt	r3, [fp, -r0, lsl #14]
    a2b8:	38000036 	stmdacc	r0, {r1, r2, r4, r5}
    a2bc:	0039240b 	eorseq	r2, r9, fp, lsl #8
    a2c0:	4e0b3900 	vmlami.f16	s6, s22, s0	; <UNPREDICTABLE>
    a2c4:	3a000039 	bcc	a3b0 <__core1_vectors-0xff5c50>
    a2c8:	0041950b 	subeq	r9, r1, fp, lsl #10
    a2cc:	730b3b00 	movwvc	r3, #47872	; 0xbb00
    a2d0:	3c00003b 	stccc	0, cr0, [r0], {59}	; 0x3b
    a2d4:	0036450b 	eorseq	r4, r6, fp, lsl #10
    a2d8:	690b3d00 	stmdbvs	fp, {r8, sl, fp, ip, sp}
    a2dc:	3e000032 	mcrcc	0, 0, r0, cr0, cr2, {1}
    a2e0:	00321a0b 	eorseq	r1, r2, fp, lsl #20
    a2e4:	d00b3f00 	andle	r3, fp, r0, lsl #30
    a2e8:	4000003a 	andmi	r0, r0, sl, lsr r0
    a2ec:	003bf40b 	eorseq	pc, fp, fp, lsl #8
    a2f0:	ee0b4100 	adfe	f4, f3, f0
    a2f4:	4200003c 	andmi	r0, r0, #60	; 0x3c
    a2f8:	0039390b 	eorseq	r3, r9, fp, lsl #18
    a2fc:	ce0b4300 	cdpgt	3, 0, cr4, cr11, cr0, {0}
    a300:	44000041 	strmi	r0, [r0], #-65	; 0xffffffbf
    a304:	003b9e0b 	eorseq	r9, fp, fp, lsl #28
    a308:	4e0b4500 	cfsh32mi	mvfx4, mvfx11, #0
    a30c:	46000034 			; <UNDEFINED> instruction: 0x46000034
    a310:	0037030b 	eorseq	r0, r7, fp, lsl #6
    a314:	470b4700 	strmi	r4, [fp, -r0, lsl #14]
    a318:	48000038 	stmdami	r0, {r3, r4, r5}
    a31c:	0031d10b 	eorseq	sp, r1, fp, lsl #2
    a320:	fa0b4900 	blx	2dc728 <__core1_vectors-0xd238d8>
    a324:	4a000032 	bmi	a3f4 <__core1_vectors-0xff5c0c>
    a328:	0036590b 	eorseq	r5, r6, fp, lsl #18
    a32c:	830b4b00 	movwhi	r4, #47872	; 0xbb00
    a330:	4c000039 	stcmi	0, cr0, [r0], {57}	; 0x39
    a334:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a338:	00000e9e 	muleq	r0, lr, lr
    a33c:	0003f30c 	andeq	pc, r3, ip, lsl #6
    a340:	0003e800 	andeq	lr, r3, r0, lsl #16
    a344:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    a348:	000003dd 	ldrdeq	r0, [r0], -sp
    a34c:	03ff0405 	mvnseq	r0, #83886080	; 0x5000000
    a350:	ed0e0000 	stc	0, cr0, [lr, #-0]
    a354:	02000003 	andeq	r0, r0, #3
    a358:	04090801 	streq	r0, [r9], #-2049	; 0xfffff7ff
    a35c:	f80e0000 			; <UNDEFINED> instruction: 0xf80e0000
    a360:	0f000003 	svceq	0x00000003
    a364:	00003398 	muleq	r0, r8, r3
    a368:	1a014c05 	bne	5d384 <__core1_vectors-0xfa2c7c>
    a36c:	000003e8 	andeq	r0, r0, r8, ror #7
    a370:	0036dd0f 	eorseq	sp, r6, pc, lsl #26
    a374:	01820500 	orreq	r0, r2, r0, lsl #10
    a378:	0003e81a 	andeq	lr, r3, sl, lsl r8
    a37c:	03f80c00 	mvnseq	r0, #0, 24
    a380:	04290000 	strteq	r0, [r9], #-0
    a384:	000d0000 	andeq	r0, sp, r0
    a388:	0038e609 	eorseq	lr, r8, r9, lsl #12
    a38c:	0d2d0600 	stceq	6, cr0, [sp, #-0]
    a390:	0000041e 	andeq	r0, r0, lr, lsl r4
    a394:	00402609 	subeq	r2, r0, r9, lsl #12
    a398:	1c380600 	ldcne	6, cr0, [r8], #-0
    a39c:	000001f5 	strdeq	r0, [r0], -r5
    a3a0:	0035990a 	eorseq	r9, r5, sl, lsl #18
    a3a4:	a2010700 	andge	r0, r1, #0, 14
    a3a8:	06000000 	streq	r0, [r0], -r0
    a3ac:	04b40e3a 	ldrteq	r0, [r4], #3642	; 0xe3a
    a3b0:	e60b0000 	str	r0, [fp], -r0
    a3b4:	00000031 	andeq	r0, r0, r1, lsr r0
    a3b8:	0037e60b 	eorseq	lr, r7, fp, lsl #12
    a3bc:	2f0b0100 	svccs	0x000b0100
    a3c0:	02000041 	andeq	r0, r0, #65	; 0x41
    a3c4:	0040f20b 	subeq	pc, r0, fp, lsl #4
    a3c8:	2d0b0300 	stccs	3, cr0, [fp, #-0]
    a3cc:	0400003b 	streq	r0, [r0], #-59	; 0xffffffc5
    a3d0:	003eb60b 	eorseq	fp, lr, fp, lsl #12
    a3d4:	db0b0500 	blle	2cb7dc <__core1_vectors-0xd34824>
    a3d8:	06000033 			; <UNDEFINED> instruction: 0x06000033
    a3dc:	0033bd0b 	eorseq	fp, r3, fp, lsl #26
    a3e0:	ea0b0700 	b	2cbfe8 <__core1_vectors-0xd34018>
    a3e4:	08000034 	stmdaeq	r0, {r2, r4, r5}
    a3e8:	003a070b 	eorseq	r0, sl, fp, lsl #14
    a3ec:	e20b0900 	and	r0, fp, #0, 18
    a3f0:	0a000033 	beq	a4c4 <__core1_vectors-0xff5b3c>
    a3f4:	003a0e0b 	eorseq	r0, sl, fp, lsl #28
    a3f8:	470b0b00 	strmi	r0, [fp, -r0, lsl #22]
    a3fc:	0c000034 	stceq	0, cr0, [r0], {52}	; 0x34
    a400:	0033d40b 	eorseq	sp, r3, fp, lsl #8
    a404:	0d0b0d00 	stceq	13, cr0, [fp, #-0]
    a408:	0e00003f 	mcreq	0, 0, r0, cr0, cr15, {1}
    a40c:	003c120b 	eorseq	r1, ip, fp, lsl #4
    a410:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
    a414:	00003d24 	andeq	r3, r0, r4, lsr #26
    a418:	41013f06 	tstmi	r1, r6, lsl #30
    a41c:	09000004 	stmdbeq	r0, {r2}
    a420:	00003e99 	muleq	r0, r9, lr
    a424:	b40f4106 	strlt	r4, [pc], #-262	; a42c <__core1_vectors-0xff5bd4>
    a428:	09000004 	stmdbeq	r0, {r2}
    a42c:	00003f21 	andeq	r3, r0, r1, lsr #30
    a430:	2c0c4a06 			; <UNDEFINED> instruction: 0x2c0c4a06
    a434:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a438:	0000337c 	andeq	r3, r0, ip, ror r3
    a43c:	2c0c4b06 			; <UNDEFINED> instruction: 0x2c0c4b06
    a440:	10000000 	andne	r0, r0, r0
    a444:	00003ffa 	strdeq	r3, [r0], -sl
    a448:	003f3209 	eorseq	r3, pc, r9, lsl #4
    a44c:	144c0600 	strbne	r0, [ip], #-1536	; 0xfffffa00
    a450:	000004f5 	strdeq	r0, [r0], -r5
    a454:	04e40405 	strbteq	r0, [r4], #1029	; 0x405
    a458:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
    a45c:	000037b0 			; <UNDEFINED> instruction: 0x000037b0
    a460:	080f4e06 	stmdaeq	pc, {r1, r2, r9, sl, fp, lr}	; <UNPREDICTABLE>
    a464:	05000005 	streq	r0, [r0, #-5]
    a468:	0004fb04 	andeq	pc, r4, r4, lsl #22
    a46c:	3d3a1200 	lfmcc	f1, 4, [sl, #-0]
    a470:	1a090000 	bne	24a478 <__core1_vectors-0xdb5b88>
    a474:	0600003b 			; <UNDEFINED> instruction: 0x0600003b
    a478:	051f0d52 	ldreq	r0, [pc, #-3410]	; 972e <__core1_vectors-0xff68d2>
    a47c:	04050000 	streq	r0, [r5], #-0
    a480:	0000050e 	andeq	r0, r0, lr, lsl #10
    a484:	0034d013 	eorseq	sp, r4, r3, lsl r0
    a488:	67063400 	strvs	r3, [r6, -r0, lsl #8]
    a48c:	05501501 	ldrbeq	r1, [r0, #-1281]	; 0xfffffaff
    a490:	ef140000 	svc	0x00140000
    a494:	06000038 			; <UNDEFINED> instruction: 0x06000038
    a498:	ed0f0169 	stfs	f0, [pc, #-420]	; a2fc <__core1_vectors-0xff5d04>
    a49c:	00000003 	andeq	r0, r0, r3
    a4a0:	0034b414 	eorseq	fp, r4, r4, lsl r4
    a4a4:	016a0600 	cmneq	sl, r0, lsl #12
    a4a8:	00055514 	andeq	r5, r5, r4, lsl r5
    a4ac:	0e000400 	cfcpyseq	mvf0, mvf0
    a4b0:	00000525 	andeq	r0, r0, r5, lsr #10
    a4b4:	0000c80c 	andeq	ip, r0, ip, lsl #16
    a4b8:	00056500 	andeq	r6, r5, r0, lsl #10
    a4bc:	00331500 	eorseq	r1, r3, r0, lsl #10
    a4c0:	002d0000 	eoreq	r0, sp, r0
    a4c4:	0005500c 	andeq	r5, r5, ip
    a4c8:	00057000 	andeq	r7, r5, r0
    a4cc:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    a4d0:	00000565 	andeq	r0, r0, r5, ror #10
    a4d4:	00381e0f 	eorseq	r1, r8, pc, lsl #28
    a4d8:	016b0600 	cmneq	fp, r0, lsl #12
    a4dc:	00057003 	andeq	r7, r5, r3
    a4e0:	3a540f00 	bcc	150e0e8 <__end__+0x4f20c8>
    a4e4:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    a4e8:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    a4ec:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
    a4f0:	0700003d 	smladxeq	r0, sp, r0, r0
    a4f4:	0000a201 	andeq	sl, r0, r1, lsl #4
    a4f8:	01810600 	orreq	r0, r1, r0, lsl #12
    a4fc:	00063906 	andeq	r3, r6, r6, lsl #18
    a500:	32900b00 	addscc	r0, r0, #0, 22
    a504:	0b000000 	bleq	a50c <__core1_vectors-0xff5af4>
    a508:	0000329c 	muleq	r0, ip, r2
    a50c:	32a80b02 	adccc	r0, r8, #2048	; 0x800
    a510:	0b030000 	bleq	ca518 <__core1_vectors-0xf35ae8>
    a514:	000035c5 	andeq	r3, r0, r5, asr #11
    a518:	32b40b03 	adcscc	r0, r4, #3072	; 0xc00
    a51c:	0b040000 	bleq	10a524 <__core1_vectors-0xef5adc>
    a520:	00003749 	andeq	r3, r0, r9, asr #14
    a524:	382f0b04 	stmdacc	pc!, {r2, r8, r9, fp}	; <UNPREDICTABLE>
    a528:	0b050000 	bleq	14a530 <__core1_vectors-0xeb5ad0>
    a52c:	00003785 	andeq	r3, r0, r5, lsl #15
    a530:	336d0b05 	cmncc	sp, #5120	; 0x1400
    a534:	0b050000 	bleq	14a53c <__core1_vectors-0xeb5ac4>
    a538:	000032c0 	andeq	r3, r0, r0, asr #5
    a53c:	39bb0b06 	ldmibcc	fp!, {r1, r2, r8, r9, fp}
    a540:	0b060000 	bleq	18a548 <__core1_vectors-0xe75ab8>
    a544:	000034a6 	andeq	r3, r0, r6, lsr #9
    a548:	39c80b06 	stmibcc	r8, {r1, r2, r8, r9, fp}^
    a54c:	0b060000 	bleq	18a554 <__core1_vectors-0xe75aac>
    a550:	00003ed9 	ldrdeq	r3, [r0], -r9
    a554:	39d50b06 	ldmibcc	r5, {r1, r2, r8, r9, fp}^
    a558:	0b060000 	bleq	18a560 <__core1_vectors-0xe75aa0>
    a55c:	00003a15 	andeq	r3, r0, r5, lsl sl
    a560:	32cc0b06 	sbccc	r0, ip, #6144	; 0x1800
    a564:	0b070000 	bleq	1ca56c <__core1_vectors-0xe35a94>
    a568:	00003afd 	strdeq	r3, [r0], -sp
    a56c:	3b4a0b07 	blcc	128d190 <__end__+0x271170>
    a570:	0b070000 	bleq	1ca578 <__core1_vectors-0xe35a88>
    a574:	00003f14 	andeq	r3, r0, r4, lsl pc
    a578:	34790b07 	ldrbtcc	r0, [r9], #-2823	; 0xfffff4f9
    a57c:	0b070000 	bleq	1ca584 <__core1_vectors-0xe35a7c>
    a580:	00003bcb 	andeq	r3, r0, fp, asr #23
    a584:	32450b08 	subcc	r0, r5, #8, 22	; 0x2000
    a588:	0b080000 	bleq	20a590 <__core1_vectors-0xdf5a70>
    a58c:	00003ee7 	andeq	r3, r0, r7, ror #29
    a590:	3be70b08 	blcc	ff9cd1b8 <__shm_end__+0xbf9cd1b8>
    a594:	00080000 	andeq	r0, r8, r0
    a598:	0041440f 	subeq	r4, r1, pc, lsl #8
    a59c:	019f0600 	orrseq	r0, pc, r0, lsl #12
    a5a0:	00058f1f 	andeq	r8, r5, pc, lsl pc
    a5a4:	3c190f00 	ldccc	15, cr0, [r9], {-0}
    a5a8:	a2060000 	andge	r0, r6, #0
    a5ac:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    a5b0:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    a5b4:	06000038 			; <UNDEFINED> instruction: 0x06000038
    a5b8:	2c0c01a5 	stfcss	f0, [ip], {165}	; 0xa5
    a5bc:	0f000000 	svceq	0x00000000
    a5c0:	0000422a 	andeq	r4, r0, sl, lsr #4
    a5c4:	0c01a806 	stceq	8, cr10, [r1], {6}
    a5c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    a5cc:	00338c0f 	eorseq	r8, r3, pc, lsl #24
    a5d0:	01ab0600 			; <UNDEFINED> instruction: 0x01ab0600
    a5d4:	00002c0c 	andeq	r2, r0, ip, lsl #24
    a5d8:	3c230f00 	stccc	15, cr0, [r3], #-0
    a5dc:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
    a5e0:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    a5e4:	340f0000 	strcc	r0, [pc], #-0	; a5ec <__core1_vectors-0xff5a14>
    a5e8:	0600003b 			; <UNDEFINED> instruction: 0x0600003b
    a5ec:	2c0c01b1 	stfcss	f0, [ip], {177}	; 0xb1
    a5f0:	0f000000 	svceq	0x00000000
    a5f4:	00003b3f 	andeq	r3, r0, pc, lsr fp
    a5f8:	0c01b406 	cfstrseq	mvf11, [r1], {6}
    a5fc:	0000002c 	andeq	r0, r0, ip, lsr #32
    a600:	003c2d0f 	eorseq	r2, ip, pc, lsl #26
    a604:	01b70600 			; <UNDEFINED> instruction: 0x01b70600
    a608:	00002c0c 	andeq	r2, r0, ip, lsl #24
    a60c:	39970f00 	ldmibcc	r7, {r8, r9, sl, fp}
    a610:	ba060000 	blt	18a618 <__core1_vectors-0xe759e8>
    a614:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    a618:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
    a61c:	06000041 	streq	r0, [r0], -r1, asr #32
    a620:	2c0c01bd 	stfcss	f0, [ip], {189}	; 0xbd
    a624:	0f000000 	svceq	0x00000000
    a628:	00003c37 	andeq	r3, r0, r7, lsr ip
    a62c:	0c01c006 	stceq	0, cr12, [r1], {6}
    a630:	0000002c 	andeq	r0, r0, ip, lsr #32
    a634:	00424d0f 	subeq	r4, r2, pc, lsl #26
    a638:	01c30600 	biceq	r0, r3, r0, lsl #12
    a63c:	00002c0c 	andeq	r2, r0, ip, lsl #24
    a640:	40f90f00 	rscsmi	r0, r9, r0, lsl #30
    a644:	c6060000 	strgt	r0, [r6], -r0
    a648:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    a64c:	050f0000 	streq	r0, [pc, #-0]	; a654 <__core1_vectors-0xff59ac>
    a650:	06000041 	streq	r0, [r0], -r1, asr #32
    a654:	2c0c01c9 	stfcss	f0, [ip], {201}	; 0xc9
    a658:	0f000000 	svceq	0x00000000
    a65c:	00004111 	andeq	r4, r0, r1, lsl r1
    a660:	0c01cc06 	stceq	12, cr12, [r1], {6}
    a664:	0000002c 	andeq	r0, r0, ip, lsr #32
    a668:	0041360f 	subeq	r3, r1, pc, lsl #12
    a66c:	01d00600 	bicseq	r0, r0, r0, lsl #12
    a670:	00002c0c 	andeq	r2, r0, ip, lsl #24
    a674:	42400f00 	submi	r0, r0, #0, 30
    a678:	d3060000 	movwle	r0, #24576	; 0x6000
    a67c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    a680:	e90f0000 	stmdb	pc, {}	; <UNPREDICTABLE>
    a684:	06000033 			; <UNDEFINED> instruction: 0x06000033
    a688:	2c0c01d6 	stfcss	f0, [ip], {214}	; 0xd6
    a68c:	0f000000 	svceq	0x00000000
    a690:	000031c1 	andeq	r3, r0, r1, asr #3
    a694:	0c01d906 			; <UNDEFINED> instruction: 0x0c01d906
    a698:	0000002c 	andeq	r0, r0, ip, lsr #32
    a69c:	0036020f 	eorseq	r0, r6, pc, lsl #4
    a6a0:	01dc0600 	bicseq	r0, ip, r0, lsl #12
    a6a4:	00002c0c 	andeq	r2, r0, ip, lsl #24
    a6a8:	33c40f00 	biccc	r0, r4, #0, 30
    a6ac:	df060000 	svcle	0x00060000
    a6b0:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    a6b4:	410f0000 	mrsmi	r0, CPSR
    a6b8:	0600003c 			; <UNDEFINED> instruction: 0x0600003c
    a6bc:	2c0c01e2 	stfcss	f0, [ip], {226}	; 0xe2
    a6c0:	0f000000 	svceq	0x00000000
    a6c4:	00003865 	andeq	r3, r0, r5, ror #16
    a6c8:	0c01e506 	cfstr32eq	mvfx14, [r1], {6}
    a6cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    a6d0:	003aad0f 	eorseq	sl, sl, pc, lsl #26
    a6d4:	01e80600 	mvneq	r0, r0, lsl #12
    a6d8:	00002c0c 	andeq	r2, r0, ip, lsl #24
    a6dc:	402f0f00 	eormi	r0, pc, r0, lsl #30
    a6e0:	ef060000 	svc	0x00060000
    a6e4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    a6e8:	f80f0000 			; <UNDEFINED> instruction: 0xf80f0000
    a6ec:	06000041 	streq	r0, [r0], -r1, asr #32
    a6f0:	2c0c01f2 	stfcss	f0, [ip], {242}	; 0xf2
    a6f4:	0f000000 	svceq	0x00000000
    a6f8:	00004208 	andeq	r4, r0, r8, lsl #4
    a6fc:	0c01f506 	cfstr32eq	mvfx15, [r1], {6}
    a700:	0000002c 	andeq	r0, r0, ip, lsr #32
    a704:	0034bd0f 	eorseq	fp, r4, pc, lsl #26
    a708:	01f80600 	mvnseq	r0, r0, lsl #12
    a70c:	00002c0c 	andeq	r2, r0, ip, lsl #24
    a710:	406d0f00 	rsbmi	r0, sp, r0, lsl #30
    a714:	fb060000 	blx	18a71e <__core1_vectors-0xe758e2>
    a718:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    a71c:	b30f0000 	movwlt	r0, #61440	; 0xf000
    a720:	0600003b 			; <UNDEFINED> instruction: 0x0600003b
    a724:	2c0c01fe 	stfcss	f0, [ip], {254}	; 0xfe
    a728:	0f000000 	svceq	0x00000000
    a72c:	0000367b 	andeq	r3, r0, fp, ror r6
    a730:	0c020206 	sfmeq	f0, 4, [r2], {6}
    a734:	0000002c 	andeq	r0, r0, ip, lsr #32
    a738:	003d8a0f 	eorseq	r8, sp, pc, lsl #20
    a73c:	020a0600 	andeq	r0, sl, #0, 12
    a740:	00002c0c 	andeq	r2, r0, ip, lsl #24
    a744:	35440f00 	strbcc	r0, [r4, #-3840]	; 0xfffff100
    a748:	0d060000 	stceq	0, cr0, [r6, #-0]
    a74c:	002c0c02 	eoreq	r0, ip, r2, lsl #24
    a750:	2c0c0000 	stccs	0, cr0, [ip], {-0}
    a754:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    a758:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    a75c:	37650f00 	strbcc	r0, [r5, -r0, lsl #30]!
    a760:	fb060000 	blx	18a76a <__core1_vectors-0xe75896>
    a764:	07f30c03 	ldrbeq	r0, [r3, r3, lsl #24]!
    a768:	f50c0000 			; <UNDEFINED> instruction: 0xf50c0000
    a76c:	1b000004 	blne	a784 <__core1_vectors-0xff587c>
    a770:	15000008 	strne	r0, [r0, #-8]
    a774:	00000033 	andeq	r0, r0, r3, lsr r0
    a778:	640f000d 	strvs	r0, [pc], #-13	; a780 <__core1_vectors-0xff5880>
    a77c:	0600003c 			; <UNDEFINED> instruction: 0x0600003c
    a780:	0b140584 	bleq	50bd98 <__core1_vectors-0xaf4268>
    a784:	16000008 	strne	r0, [r0], -r8
    a788:	00003827 	andeq	r3, r0, r7, lsr #16
    a78c:	00a20107 	adceq	r0, r2, r7, lsl #2
    a790:	8b060000 	blhi	18a798 <__core1_vectors-0xe75868>
    a794:	08660605 	stmdaeq	r6!, {r0, r2, r9, sl}^
    a798:	a70b0000 	strge	r0, [fp, -r0]
    a79c:	00000035 	andeq	r0, r0, r5, lsr r0
    a7a0:	003a220b 	eorseq	r2, sl, fp, lsl #4
    a7a4:	7b0b0100 	blvc	2cabac <__core1_vectors-0xd35454>
    a7a8:	02000032 	andeq	r0, r0, #50	; 0x32
    a7ac:	0041ba0b 	subeq	fp, r1, fp, lsl #20
    a7b0:	d10b0300 	mrsle	r0, (UNDEF: 59)
    a7b4:	0400003c 	streq	r0, [r0], #-60	; 0xffffffc4
    a7b8:	003cc40b 	eorseq	ip, ip, fp, lsl #8
    a7bc:	4c0b0500 	cfstr32mi	mvfx0, [fp], {-0}
    a7c0:	06000033 			; <UNDEFINED> instruction: 0x06000033
    a7c4:	41aa0f00 			; <UNDEFINED> instruction: 0x41aa0f00
    a7c8:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
    a7cc:	08281505 	stmdaeq	r8!, {r0, r2, r8, sl, ip}
    a7d0:	920f0000 	andls	r0, pc, #0
    a7d4:	06000040 	streq	r0, [r0], -r0, asr #32
    a7d8:	33110799 	tstcc	r1, #40108032	; 0x2640000
    a7dc:	0f000000 	svceq	0x00000000
    a7e0:	00003c51 	andeq	r3, r0, r1, asr ip
    a7e4:	0c07ae06 	stceq	14, cr10, [r7], {6}
    a7e8:	0000002c 	andeq	r0, r0, ip, lsr #32
    a7ec:	00400e04 	subeq	r0, r0, r4, lsl #28
    a7f0:	167b0700 	ldrbtne	r0, [fp], -r0, lsl #14
    a7f4:	000000a2 	andeq	r0, r0, r2, lsr #1
    a7f8:	00088d0e 	andeq	r8, r8, lr, lsl #26
    a7fc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    a800:	00000d61 	andeq	r0, r0, r1, ror #26
    a804:	00330f04 	eorseq	r0, r3, r4, lsl #30
    a808:	16810700 	strne	r0, [r1], r0, lsl #14
    a80c:	00000033 	andeq	r0, r0, r3, lsr r0
    a810:	00321204 	eorseq	r1, r2, r4, lsl #4
    a814:	16850700 	strne	r0, [r5], r0, lsl #14
    a818:	00000025 	andeq	r0, r0, r5, lsr #32
    a81c:	04040402 	streq	r0, [r4], #-1026	; 0xfffffbfe
    a820:	02000034 	andeq	r0, r0, #52	; 0x34
    a824:	33fc0308 	mvnscc	r0, #8, 6	; 0x20000000
    a828:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a82c:	000aa204 	andeq	sl, sl, r4, lsl #4
    a830:	03100200 	tsteq	r0, #0, 4
    a834:	00003cdf 	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    a838:	0008990c 	andeq	r9, r8, ip, lsl #18
    a83c:	0008e900 	andeq	lr, r8, r0, lsl #18
    a840:	00331500 	eorseq	r1, r3, r0, lsl #10
    a844:	00ff0000 	rscseq	r0, pc, r0
    a848:	0008d90e 	andeq	sp, r8, lr, lsl #18
    a84c:	3b570f00 	blcc	15ce454 <__end__+0x5b2434>
    a850:	fc070000 	stc2	0, cr0, [r7], {-0}
    a854:	08e91601 	stmiaeq	r9!, {r0, r9, sl, ip}^
    a858:	b30f0000 	movwlt	r0, #61440	; 0xf000
    a85c:	07000033 	smladxeq	r0, r3, r0, r0
    a860:	e9160202 	ldmdb	r6, {r1, r9}
    a864:	17000008 	strne	r0, [r0, -r8]
    a868:	00003238 	andeq	r3, r0, r8, lsr r2
    a86c:	0103b301 	tsteq	r3, r1, lsl #6
    a870:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    a874:	010054b0 			; <UNDEFINED> instruction: 0x010054b0
    a878:	00000130 	andeq	r0, r0, r0, lsr r1
    a87c:	09e29c01 	stmibeq	r2!, {r0, sl, fp, ip, pc}^
    a880:	6e180000 	cdpvs	0, 1, cr0, cr8, cr0, {0}
    a884:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    a888:	0008b117 	andeq	fp, r8, r7, lsl r1
    a88c:	00000400 	andeq	r0, r0, r0, lsl #8
    a890:	00000000 	andeq	r0, r0, r0
    a894:	00641800 	rsbeq	r1, r4, r0, lsl #16
    a898:	2203b301 	andcs	fp, r3, #67108864	; 0x4000000
    a89c:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    a8a0:	00000030 	andeq	r0, r0, r0, lsr r0
    a8a4:	0000002c 	andeq	r0, r0, ip, lsr #32
    a8a8:	00707219 	rsbseq	r7, r0, r9, lsl r2
    a8ac:	2e03b301 	cdpcs	3, 0, cr11, cr3, cr1, {0}
    a8b0:	000009e2 	andeq	r0, r0, r2, ror #19
    a8b4:	1a009102 	bne	2ecc4 <__core1_vectors-0xfd133c>
    a8b8:	b5010071 	strlt	r0, [r1, #-113]	; 0xffffff8f
    a8bc:	08b10b03 	ldmeq	r1!, {r0, r1, r8, r9, fp}
    a8c0:	00600000 	rsbeq	r0, r0, r0
    a8c4:	00580000 	subseq	r0, r8, r0
    a8c8:	721a0000 	andsvc	r0, sl, #0
    a8cc:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    a8d0:	0008b112 	andeq	fp, r8, r2, lsl r1
    a8d4:	0000b600 	andeq	fp, r0, r0, lsl #12
    a8d8:	0000ac00 	andeq	sl, r0, r0, lsl #24
    a8dc:	00791a00 	rsbseq	r1, r9, r0, lsl #20
    a8e0:	1903b501 	stmdbne	r3, {r0, r8, sl, ip, sp, pc}
    a8e4:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    a8e8:	00000112 	andeq	r0, r0, r2, lsl r1
    a8ec:	0000010e 	andeq	r0, r0, lr, lsl #2
    a8f0:	317a6c1a 	cmncc	sl, sl, lsl ip
    a8f4:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    a8f8:	0008a50a 	andeq	sl, r8, sl, lsl #10
    a8fc:	00013e00 	andeq	r3, r1, r0, lsl #28
    a900:	00013a00 	andeq	r3, r1, r0, lsl #20
    a904:	7a6c1a00 	bvc	1b1110c <__end__+0xaf50ec>
    a908:	b6010032 			; <UNDEFINED> instruction: 0xb6010032
    a90c:	08a50f03 	stmiaeq	r5!, {r0, r1, r8, r9, sl, fp}
    a910:	015e0000 	cmpeq	lr, r0
    a914:	015c0000 	cmpeq	ip, r0
    a918:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    a91c:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    a920:	0008a514 	andeq	sl, r8, r4, lsl r5
    a924:	00017b00 	andeq	r7, r1, r0, lsl #22
    a928:	00017100 	andeq	r7, r1, r0, lsl #2
    a92c:	006b1a00 	rsbeq	r1, fp, r0, lsl #20
    a930:	1703b601 	strne	fp, [r3, -r1, lsl #12]
    a934:	000008a5 	andeq	r0, r0, r5, lsr #17
    a938:	000001c2 	andeq	r0, r0, r2, asr #3
    a93c:	000001be 			; <UNDEFINED> instruction: 0x000001be
    a940:	b1040500 	tstlt	r4, r0, lsl #10
    a944:	00000008 	andeq	r0, r0, r8
    a948:	00000022 	andeq	r0, r0, r2, lsr #32
    a94c:	1ce10002 	stclne	0, cr0, [r1], #8
    a950:	01040000 	mrseq	r0, (UNDEF: 4)
    a954:	00003e1a 	andeq	r3, r0, sl, lsl lr
    a958:	010055e0 	smlatteq	r0, r0, r5, r5
    a95c:	01005608 	tsteq	r0, r8, lsl #12
    a960:	00003111 	andeq	r3, r0, r1, lsl r1
    a964:	00003138 	andeq	r3, r0, r8, lsr r1
    a968:	00002b06 	andeq	r2, r0, r6, lsl #22
    a96c:	00228001 	eoreq	r8, r2, r1
    a970:	00020000 	andeq	r0, r2, r0
    a974:	00001cf5 	strdeq	r1, [r0], -r5
    a978:	3e7b0104 	rpwcce	f0, f3, f4
    a97c:	56080000 	strpl	r0, [r8], -r0
    a980:	56500100 	ldrbpl	r0, [r0], -r0, lsl #2
    a984:	31110100 	tstcc	r1, r0, lsl #2
    a988:	31380000 	teqcc	r8, r0
    a98c:	2b060000 	blcs	18a994 <__core1_vectors-0xe7566c>
    a990:	80010000 	andhi	r0, r1, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
{
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011117 	andne	r1, r1, r7, lsl r1
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__core1_vectors-0xd3ff54>
    ALT_PRINTF("\n");
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__core1_vectors-0xc7f3d8>
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__core1_vectors-0x7d39c>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	03001605 	movweq	r1, #1541	; 0x605
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	3b0b3a0e 	blcc	2ce87c <__core1_vectors-0xd31784>
      40:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__core1_vectors-0xd3fb54>
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	0b3b0b3a 	bleq	ec2d3c <__core1_vectors-0x13d2c4>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
      58:	3a0e0300 	bcc	380c60 <__core1_vectors-0xc7f3a0>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
}
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <__core1_vectors-0xffff58>
      78:	0b0b0113 	bleq	2c04cc <__core1_vectors-0xd3fb34>
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	0b3b0b3a 	bleq	ec2d6c <__core1_vectors-0x13d294>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__core1_vectors-0xc7f370>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      *(pmem->toptr)=0;
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__core1_vectors-0xd3ff24>
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__core1_vectors-0xc7f354>
}
      a4:	3b0b3a0b 	blcc	2ce8d8 <__core1_vectors-0xd31728>
      a8:	010b390b 	tsteq	fp, fp, lsl #18
      ac:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      b0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	0b3b0b3a 	bleq	ec2da4 <__core1_vectors-0x13d25c>
      b8:	13490b39 	movtne	r0, #39737	; 0x9b39
        break;
      bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    return ALT_E_SUCCESS;
      c0:	0b000f0f 	bleq	3d04 <__core1_vectors-0xffc2fc>
      c4:	0013490b 	andseq	r4, r3, fp, lsl #18
        return ALT_E_ERROR;
      c8:	01131000 	tsteq	r3, r0
}
      cc:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
      d0:	0b3b0b3a 	bleq	ec2dc0 <__core1_vectors-0x13d240>
      d4:	13010b39 	movwne	r0, #6969	; 0x1b39
      d8:	0d110000 	ldceq	0, cr0, [r1, #-0]
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	3a0e0300 	bcc	380ce4 <__core1_vectors-0xc7f31c>
      e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      e4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      e8:	12000005 	andne	r0, r0, #5
      ec:	19270015 	stmdbne	r7!, {r0, r2, r4}
      f0:	15130000 	ldrne	r0, [r3, #-0]
    return dst;
      f4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
}
      f8:	00130113 	andseq	r0, r3, r3, lsl r1
      fc:	00051400 	andeq	r1, r5, r0, lsl #8
     100:	00001349 	andeq	r1, r0, r9, asr #6
     104:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
        return (int)cnt;
     108:	16000013 			; <UNDEFINED> instruction: 0x16000013
     10c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    errno = ENOSYS;
     110:	0b3a050b 	bleq	e81544 <__core1_vectors-0x17eabc>
     114:	0b39053b 	bleq	e41608 <__core1_vectors-0x1be9f8>
     118:	00001301 	andeq	r1, r0, r1, lsl #6
     11c:	03000d17 	movweq	r0, #3351	; 0xd17
    return -1;
     120:	3b0b3a0e 	blcc	2ce960 <__core1_vectors-0xd316a0>
}
     124:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     128:	000b3813 	andeq	r3, fp, r3, lsl r8
     12c:	000d1800 	andeq	r1, sp, r0, lsl #16
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     130:	0b3a0e03 	bleq	e83944 <__core1_vectors-0x17c6bc>
     134:	0b39053b 	bleq	e41628 <__core1_vectors-0x1be9d8>
     138:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	13190000 	tstne	r9, #0
     140:	0b0e0301 	bleq	380d4c <__core1_vectors-0xc7f2b4>
     144:	3b0b3a0b 	blcc	2ce978 <__core1_vectors-0xd31688>
     148:	010b3905 	tsteq	fp, r5, lsl #18
     14c:	1a000013 	bne	1a0 <__core1_vectors-0xfffe60>
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	0b0b0113 	bleq	2c05a4 <__core1_vectors-0xd3fa5c>
     154:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     158:	13010b39 	movwne	r0, #6969	; 0x1b39
     15c:	171b0000 	ldrne	r0, [fp, -r0]
     160:	3a0b0b01 	bcc	2c2d6c <__core1_vectors-0xd3d294>
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     168:	0013010b 	andseq	r0, r3, fp, lsl #2
     16c:	000d1c00 	andeq	r1, sp, r0, lsl #24
     170:	0b3a0e03 	bleq	e83984 <__core1_vectors-0x17c67c>
     174:	0b39053b 	bleq	e41668 <__core1_vectors-0x1be998>
    return ALT_E_SUCCESS;
     178:	00001349 	andeq	r1, r0, r9, asr #6
}
     17c:	0300131d 	movweq	r1, #797	; 0x31d
     180:	00193c0e 	andseq	r3, r9, lr, lsl #24
     184:	01151e00 	tsteq	r5, r0, lsl #28
    while (coalesce->size)
     188:	13011927 	movwne	r1, #6439	; 0x1927
     18c:	341f0000 	ldrcc	r0, [pc], #-0	; 194 <__core1_vectors-0xfffe6c>
            break;
     190:	3a0e0300 	bcc	380d98 <__core1_vectors-0xc7f268>
    *segpa   = thissegpa;
     194:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	3f13490b 	svccc	0x0013490b
     19c:	00193c19 	andseq	r3, r9, r9, lsl ip
    *segsize = thissegsize;
     1a0:	00342000 	eorseq	r2, r4, r0
     1a4:	0b3a0e03 	bleq	e839b8 <__core1_vectors-0x17c648>
     1a8:	0b390b3b 	bleq	e42e9c <__core1_vectors-0x1bd164>
    return ALT_E_SUCCESS;
     1ac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
}
     1b0:	0000193c 	andeq	r1, r0, ip, lsr r9
     1b4:	03010421 	movweq	r0, #5153	; 0x1421
     1b8:	0b0b3e0e 	bleq	2cf9f8 <__core1_vectors-0xd30608>
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	3a13490b 	bcc	4d25f0 <__core1_vectors-0xb2da10>
     1c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1c4:	0013010b 	andseq	r0, r3, fp, lsl #2
     1c8:	00282200 	eoreq	r2, r8, r0, lsl #4
     1cc:	0b1c0e03 	bleq	7039e0 <__core1_vectors-0x8fc620>
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	34230000 	strtcc	r0, [r3], #-0
     1d4:	3a0e0300 	bcc	380ddc <__core1_vectors-0xc7f224>
     1d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1dc:	3f13490b 	svccc	0x0013490b
     1e0:	00180219 	andseq	r0, r8, r9, lsl r2
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
     1e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     1ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     1f0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     1f4:	01111349 	tsteq	r1, r9, asr #6
     1f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1fc:	01194296 			; <UNDEFINED> instruction: 0x01194296
     200:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     204:	08030005 	stmdaeq	r3, {r0, r2}
     208:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     20c:	13490b39 	movtne	r0, #39737	; 0x9b39
     210:	00001802 	andeq	r1, r0, r2, lsl #16
        clkStep += clk100;
     214:	03000526 	movweq	r0, #1318	; 0x526
     218:	3b0b3a0e 	blcc	2cea58 <__core1_vectors-0xd315a8>
     21c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     220:	00180213 	andseq	r0, r8, r3, lsl r2
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	00342700 	eorseq	r2, r4, r0, lsl #14
     228:	0b3a0e03 	bleq	e83a3c <__core1_vectors-0x17c5c4>
     22c:	0b39053b 	bleq	e41720 <__core1_vectors-0x1be8e0>
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     234:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     238:	3a0e0301 	bcc	380e44 <__core1_vectors-0xc7f1bc>
     23c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     244:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     248:	97184006 	ldrls	r4, [r8, -r6]
     24c:	13011942 	movwne	r1, #6466	; 0x1942
     250:	34290000 	strtcc	r0, [r9], #-0
     254:	3a080300 	bcc	200e5c <__core1_vectors-0xdff1a4>
     258:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     260:	2a000018 	bcs	2c8 <__core1_vectors-0xfffd38>
     264:	0e03012e 	adfeqsp	f0, f3, #0.5
     268:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     26c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     270:	01111349 	tsteq	r1, r9, asr #6
     274:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     278:	01194296 			; <UNDEFINED> instruction: 0x01194296
     27c:	2b000013 	blcs	2d0 <__core1_vectors-0xfffd30>
     280:	0e03012e 	adfeqsp	f0, f3, #0.5
     284:	0b3b0b3a 	bleq	ec2f74 <__core1_vectors-0x13d08c>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     28c:	01111349 	tsteq	r1, r9, asr #6
     290:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	01194296 			; <UNDEFINED> instruction: 0x01194296
     298:	2c000013 	stccs	0, cr0, [r0], {19}
     29c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     2a0:	0b3b0b3a 	bleq	ec2f90 <__core1_vectors-0x13d070>
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	13490b39 	movtne	r0, #39737	; 0x9b39
     2a8:	00001802 	andeq	r1, r0, r2, lsl #16
     2ac:	0300342d 	movweq	r3, #1069	; 0x42d
     2b0:	3b0b3a0e 	blcc	2ceaf0 <__core1_vectors-0xd31510>
     2b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     2b8:	00180213 	andseq	r0, r8, r3, lsl r2
     2bc:	00342e00 	eorseq	r2, r4, r0, lsl #28
     2c0:	0b3a0803 	bleq	e822d4 <__core1_vectors-0x17dd2c>
     2c4:	0b390b3b 	bleq	e42fb8 <__core1_vectors-0x1bd048>
     2c8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     2cc:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	03193f01 	tsteq	r9, #1, 30
     2d4:	3b0b3a0e 	blcc	2ceb14 <__core1_vectors-0xd314ec>
     2d8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	11134919 	tstne	r3, r9, lsl r9
     2e0:	40061201 	andmi	r1, r6, r1, lsl #4
     2e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     2e8:	00001301 	andeq	r1, r0, r1, lsl #6
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	3f012e30 	svccc	0x00012e30
     2f0:	3a0e0319 	bcc	380f5c <__core1_vectors-0xc7f0a4>
     2f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2f8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     2fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     300:	97184006 	ldrls	r4, [r8, -r6]
     304:	13011942 	movwne	r1, #6466	; 0x1942
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
     30c:	03193f01 	tsteq	r9, #1, 30
     310:	3b0b3a0e 	blcc	2ceb50 <__core1_vectors-0xd314b0>
     314:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     318:	11134919 	tstne	r3, r9, lsl r9
     31c:	40061201 	andmi	r1, r6, r1, lsl #4
     320:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	05320000 	ldreq	r0, [r2, #-0]!
     328:	3a080300 	bcc	200f30 <__core1_vectors-0xdff0d0>
     32c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     334:	00000018 	andeq	r0, r0, r8, lsl r0
     338:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     33c:	030b130e 	movweq	r1, #45838	; 0xb30e
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     344:	10011117 	andne	r1, r1, r7, lsl r1
     348:	02000017 	andeq	r0, r0, #23
     34c:	0b0b0024 	bleq	2c03e4 <__core1_vectors-0xd3fc1c>
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     354:	16030000 	strne	r0, [r3], -r0
     358:	3a0e0300 	bcc	380f60 <__core1_vectors-0xc7f0a0>
     35c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     360:	0013490b 	andseq	r4, r3, fp, lsl #18
     364:	00240400 	eoreq	r0, r4, r0, lsl #8
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	0b3e0b0b 	bleq	f82f9c <__core1_vectors-0x7d064>
     36c:	00000e03 	andeq	r0, r0, r3, lsl #28
     370:	03010405 	movweq	r0, #5125	; 0x1405
     374:	0b0b3e0e 	bleq	2cfbb4 <__core1_vectors-0xd3044c>
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	3a13490b 	bcc	4d27ac <__core1_vectors-0xb2d854>
     37c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     380:	0013010b 	andseq	r0, r3, fp, lsl #2
     384:	00280600 	eoreq	r0, r8, r0, lsl #12
     388:	0b1c0e03 	bleq	703b9c <__core1_vectors-0x8fc464>
     38c:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     394:	08000005 	stmdaeq	r0, {r0, r2}
     398:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     39c:	0b3a0b0b 	bleq	e82fd0 <__core1_vectors-0x17d030>
     3a0:	0b390b3b 	bleq	e43094 <__core1_vectors-0x1bcf6c>
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	00001301 	andeq	r1, r0, r1, lsl #6
     3a8:	03000d09 	movweq	r0, #3337	; 0xd09
     3ac:	3b0b3a0e 	blcc	2cebec <__core1_vectors-0xd31414>
     3b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     3b4:	000b3813 	andeq	r3, fp, r3, lsl r8
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	000d0a00 	andeq	r0, sp, r0, lsl #20
     3bc:	0b3a0803 	bleq	e823d0 <__core1_vectors-0x17dc30>
     3c0:	0b390b3b 	bleq	e430b4 <__core1_vectors-0x1bcf4c>
     3c4:	0b381349 	bleq	e050f0 <__core1_vectors-0x1faf10>
     3c8:	0f0b0000 	svceq	0x000b0000
     3cc:	000b0b00 	andeq	r0, fp, r0, lsl #22
     3d0:	00160c00 	andseq	r0, r6, r0, lsl #24
     3d4:	0b3a0e03 	bleq	e83be8 <__core1_vectors-0x17c418>
     3d8:	0b39053b 	bleq	e418cc <__core1_vectors-0x1be734>
     3dc:	00001349 	andeq	r1, r0, r9, asr #6
     3e0:	0301040d 	movweq	r0, #5133	; 0x140d
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	0b0b3e0e 	bleq	2cfc24 <__core1_vectors-0xd303dc>
     3e8:	3a13490b 	bcc	4d281c <__core1_vectors-0xb2d7e4>
     3ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3f0:	0013010b 	andseq	r0, r3, fp, lsl #2
     3f4:	00280e00 	eoreq	r0, r8, r0, lsl #28
     3f8:	061c0e03 	ldreq	r0, [ip], -r3, lsl #28
     3fc:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     400:	03193f01 	tsteq	r9, #1, 30
     404:	3b0b3a0e 	blcc	2cec44 <__core1_vectors-0xd313bc>
     408:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     40c:	11134919 	tstne	r3, r9, lsl r9
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	40061201 	andmi	r1, r6, r1, lsl #4
     414:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     418:	00001301 	andeq	r1, r0, r1, lsl #6
     41c:	03000510 	movweq	r0, #1296	; 0x510
     420:	3b0b3a0e 	blcc	2cec60 <__core1_vectors-0xd313a0>
     424:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	00180213 	andseq	r0, r8, r3, lsl r2
     42c:	000f1100 	andeq	r1, pc, r0, lsl #2
     430:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     434:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     438:	03193f01 	tsteq	r9, #1, 30
     43c:	3b0b3a0e 	blcc	2cec7c <__core1_vectors-0xd31384>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     444:	11134919 	tstne	r3, r9, lsl r9
     448:	40061201 	andmi	r1, r6, r1, lsl #4
     44c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     450:	00001301 	andeq	r1, r0, r1, lsl #6
     454:	11010b13 	tstne	r1, r3, lsl fp
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	00061201 	andeq	r1, r6, r1, lsl #4
     45c:	00341400 	eorseq	r1, r4, r0, lsl #8
     460:	0b3a0803 	bleq	e82474 <__core1_vectors-0x17db8c>
     464:	0b39053b 	bleq	e41958 <__core1_vectors-0x1be6a8>
     468:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     46c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	3a0e0301 	bcc	38107c <__core1_vectors-0xc7ef84>
     474:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     478:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     47c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     480:	97184006 	ldrls	r4, [r8, -r6]
     484:	13011942 	movwne	r1, #6466	; 0x1942
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	34160000 	ldrcc	r0, [r6], #-0
     48c:	3a0e0300 	bcc	381094 <__core1_vectors-0xc7ef6c>
     490:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     494:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     498:	17000018 	smladne	r0, r8, r0, r0
     49c:	13490026 	movtne	r0, #36902	; 0x9026
     4a0:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     4a4:	03193f01 	tsteq	r9, #1, 30
     4a8:	3b0b3a0e 	blcc	2cece8 <__core1_vectors-0xd31318>
     4ac:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     4b0:	11134919 	tstne	r3, r9, lsl r9
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	40061201 	andmi	r1, r6, r1, lsl #4
     4b8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     4bc:	00001301 	andeq	r1, r0, r1, lsl #6
     4c0:	03000519 	movweq	r0, #1305	; 0x519
     4c4:	3b0b3a0e 	blcc	2ced04 <__core1_vectors-0xd312fc>
     4c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	00180213 	andseq	r0, r8, r3, lsl r2
     4d0:	010b1a00 	tsteq	fp, r0, lsl #20
     4d4:	00001755 	andeq	r1, r0, r5, asr r7
     4d8:	0300341b 	movweq	r3, #1051	; 0x41b
     4dc:	3b0b3a0e 	blcc	2ced1c <__core1_vectors-0xd312e4>
     4e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     4e4:	00180213 	andseq	r0, r8, r3, lsl r2
     4e8:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
     4ec:	0b3a0e03 	bleq	e83d00 <__core1_vectors-0x17c300>
     4f0:	0b390b3b 	bleq	e431e4 <__core1_vectors-0x1bce1c>
     4f4:	13491927 	movtne	r1, #39207	; 0x9927
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     4fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     500:	00130119 	andseq	r0, r3, r9, lsl r1
     504:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
     508:	0b3a0e03 	bleq	e83d1c <__core1_vectors-0x17c2e4>
     50c:	0b390b3b 	bleq	e43200 <__core1_vectors-0x1bce00>
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	13491927 	movtne	r1, #39207	; 0x9927
     514:	06120111 			; <UNDEFINED> instruction: 0x06120111
     518:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     51c:	00130119 	andseq	r0, r3, r9, lsl r1
     520:	00261e00 	eoreq	r1, r6, r0, lsl #28
     524:	01000000 	mrseq	r0, (UNDEF: 0)
     528:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     52c:	0e030b13 	vmoveq.32	d3[0], r0
     530:	17550e1b 	smmlane	r5, fp, lr, r0
     534:	17100111 			; <UNDEFINED> instruction: 0x17100111
     538:	24020000 	strcs	r0, [r2], #-0
     53c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     540:	0008030b 	andeq	r0, r8, fp, lsl #6
     544:	00160300 	andseq	r0, r6, r0, lsl #6
     548:	0b3a0e03 	bleq	e83d5c <__core1_vectors-0x17c2a4>
     54c:	0b390b3b 	bleq	e43240 <__core1_vectors-0x1bcdc0>
     550:	00001349 	andeq	r1, r0, r9, asr #6
     554:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
     558:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     55c:	0b0b0024 	bleq	2c05f4 <__core1_vectors-0xd3fa0c>
     560:	0e030b3e 	vmoveq.16	d3[0], r0
     564:	04060000 	streq	r0, [r6], #-0
     568:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
     56c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
     570:	3b0b3a13 	blcc	2cedc4 <__core1_vectors-0xd3123c>
     574:	010b390b 	tsteq	fp, fp, lsl #18
     578:	07000013 	smladeq	r0, r3, r0, r0
     57c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     580:	00000b1c 	andeq	r0, r0, ip, lsl fp
     584:	03001608 	movweq	r1, #1544	; 0x608
     588:	3b0b3a0e 	blcc	2cedc8 <__core1_vectors-0xd31238>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     590:	09000013 	stmdbeq	r0, {r0, r1, r4}
     594:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     598:	0b3a0b0b 	bleq	e831cc <__core1_vectors-0x17ce34>
     59c:	0b39053b 	bleq	e41a90 <__core1_vectors-0x1be570>
     5a0:	00001301 	andeq	r1, r0, r1, lsl #6
     5a4:	03000d0a 	movweq	r0, #3338	; 0xd0a
     5a8:	3b0b3a08 	blcc	2cedd0 <__core1_vectors-0xd31230>
     5ac:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     5b0:	000b3813 	andeq	r3, fp, r3, lsl r8
     5b4:	000d0b00 	andeq	r0, sp, r0, lsl #22
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0b3a0e03 	bleq	e83dcc <__core1_vectors-0x17c234>
     5bc:	0b39053b 	bleq	e41ab0 <__core1_vectors-0x1be550>
     5c0:	0b381349 	bleq	e052ec <__core1_vectors-0x1fad14>
     5c4:	0f0c0000 	svceq	0x000c0000
     5c8:	000b0b00 	andeq	r0, fp, r0, lsl #22
     5cc:	000f0d00 	andeq	r0, pc, r0, lsl #26
     5d0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     5d4:	150e0000 	strne	r0, [lr, #-0]
     5d8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     5dc:	00130113 	andseq	r0, r3, r3, lsl r1
     5e0:	00050f00 	andeq	r0, r5, r0, lsl #30
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	00001349 	andeq	r1, r0, r9, asr #6
     5e8:	0b011710 	bleq	46230 <__core1_vectors-0xfb9dd0>
     5ec:	3b0b3a0b 	blcc	2cee20 <__core1_vectors-0xd311e0>
     5f0:	010b390b 	tsteq	fp, fp, lsl #18
     5f4:	11000013 	tstne	r0, r3, lsl r0
     5f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     5fc:	0b3b0b3a 	bleq	ec32ec <__core1_vectors-0x13cd14>
     600:	13490b39 	movtne	r0, #39737	; 0x9b39
     604:	01120000 	tsteq	r2, r0
     608:	01134901 	tsteq	r3, r1, lsl #18
     60c:	13000013 	movwne	r0, #19
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	13490021 	movtne	r0, #36897	; 0x9021
     614:	00000b2f 	andeq	r0, r0, pc, lsr #22
     618:	0b011314 	bleq	45270 <__core1_vectors-0xfbad90>
     61c:	3b0b3a0b 	blcc	2cee50 <__core1_vectors-0xd311b0>
     620:	010b390b 	tsteq	fp, fp, lsl #18
     624:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     628:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     62c:	0b3b0b3a 	bleq	ec331c <__core1_vectors-0x13cce4>
     630:	13490b39 	movtne	r0, #39737	; 0x9b39
     634:	00000b38 	andeq	r0, r0, r8, lsr fp
     638:	03011316 	movweq	r1, #4886	; 0x1316
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	3a0b0b0e 	bcc	2c327c <__core1_vectors-0xd3cd84>
     640:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     644:	0013010b 	andseq	r0, r3, fp, lsl #2
     648:	000d1700 	andeq	r1, sp, r0, lsl #14
     64c:	0b3a0803 	bleq	e82660 <__core1_vectors-0x17d9a0>
     650:	0b390b3b 	bleq	e43344 <__core1_vectors-0x1bccbc>
     654:	0b381349 	bleq	e05380 <__core1_vectors-0x1fac80>
     658:	13180000 	tstne	r8, #0
     65c:	0b0e0301 	bleq	381268 <__core1_vectors-0xc7ed98>
     660:	3b0b3a05 	blcc	2cee7c <__core1_vectors-0xd31184>
     664:	010b390b 	tsteq	fp, fp, lsl #18
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	19000013 	stmdbne	r0, {r0, r1, r4}
     66c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     670:	0b3b0b3a 	bleq	ec3360 <__core1_vectors-0x13cca0>
     674:	13490b39 	movtne	r0, #39737	; 0x9b39
     678:	00000538 	andeq	r0, r0, r8, lsr r5
     67c:	2700151a 	smladcs	r0, sl, r5, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	1b000019 	blne	6ec <__core1_vectors-0xfff914>
     684:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     688:	0b3a050b 	bleq	e81abc <__core1_vectors-0x17e544>
     68c:	0b39053b 	bleq	e41b80 <__core1_vectors-0x1be480>
     690:	00001301 	andeq	r1, r0, r1, lsl #6
     694:	03000d1c 	movweq	r0, #3356	; 0xd1c
     698:	3b0b3a0e 	blcc	2ceed8 <__core1_vectors-0xd31128>
     69c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     6a0:	00053813 	andeq	r3, r5, r3, lsl r8
     6a4:	01131d00 	tsteq	r3, r0, lsl #26
     6a8:	0b3a0b0b 	bleq	e832dc <__core1_vectors-0x17cd24>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	0b39053b 	bleq	e41ba0 <__core1_vectors-0x1be460>
     6b0:	00001301 	andeq	r1, r0, r1, lsl #6
     6b4:	0b01171e 	bleq	46334 <__core1_vectors-0xfb9ccc>
     6b8:	3b0b3a0b 	blcc	2ceeec <__core1_vectors-0xd31114>
     6bc:	010b3905 	tsteq	fp, r5, lsl #18
     6c0:	1f000013 	svcne	0x00000013
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     6c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6cc:	13490b39 	movtne	r0, #39737	; 0x9b39
     6d0:	13200000 	nopne	{0}	; <UNPREDICTABLE>
     6d4:	3c0e0300 	stccc	3, cr0, [lr], {-0}
     6d8:	21000019 	tstcs	r0, r9, lsl r0
     6dc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     6e0:	00001301 	andeq	r1, r0, r1, lsl #6
     6e4:	03003422 	movweq	r3, #1058	; 0x422
     6e8:	3b0b3a0e 	blcc	2cef28 <__core1_vectors-0xd310d8>
     6ec:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     6f0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     6f4:	23000019 	movwcs	r0, #25
     6f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     6fc:	0b3b0b3a 	bleq	ec33ec <__core1_vectors-0x13cc14>
     700:	13490b39 	movtne	r0, #39737	; 0x9b39
     704:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     70c:	03193f01 	tsteq	r9, #1, 30
     710:	3b0b3a0e 	blcc	2cef50 <__core1_vectors-0xd310b0>
     714:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     718:	11134919 	tstne	r3, r9, lsl r9
     71c:	40061201 	andmi	r1, r6, r1, lsl #4
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     724:	00001301 	andeq	r1, r0, r1, lsl #6
     728:	03000525 	movweq	r0, #1317	; 0x525
     72c:	3b0b3a0e 	blcc	2cef6c <__core1_vectors-0xd31094>
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     734:	00180213 	andseq	r0, r8, r3, lsl r2
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	00342600 	eorseq	r2, r4, r0, lsl #12
     73c:	0b3a0e03 	bleq	e83f50 <__core1_vectors-0x17c0b0>
     740:	0b39053b 	bleq	e41c34 <__core1_vectors-0x1be3cc>
     744:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	0b270000 	bleq	9c0750 <__core1_vectors-0x63f8b0>
     74c:	00175501 	andseq	r5, r7, r1, lsl #10
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	00052800 	andeq	r2, r5, r0, lsl #16
     754:	0b3a0803 	bleq	e82768 <__core1_vectors-0x17d898>
     758:	0b39053b 	bleq	e41c4c <__core1_vectors-0x1be3b4>
     75c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     760:	26290000 	strtcs	r0, [r9], -r0
     764:	2a000000 	bcs	76c <__core1_vectors-0xfff894>
     768:	08030034 	stmdaeq	r3, {r2, r4, r5}
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     770:	13490b39 	movtne	r0, #39737	; 0x9b39
     774:	00001802 	andeq	r1, r0, r2, lsl #16
     778:	11010b2b 	tstne	r1, fp, lsr #22
     77c:	01061201 	tsteq	r6, r1, lsl #4
     780:	2c000013 	stccs	0, cr0, [r0], {19}
     784:	0111010b 	tsteq	r1, fp, lsl #2
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	00000612 	andeq	r0, r0, r2, lsl r6
     78c:	4900212d 	stmdbmi	r0, {r0, r2, r3, r5, r8, sp}
     790:	00052f13 	andeq	r2, r5, r3, lsl pc
     794:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     798:	0b3a0e03 	bleq	e83fac <__core1_vectors-0x17c054>
     79c:	0b39053b 	bleq	e41c90 <__core1_vectors-0x1be370>
     7a0:	13491927 	movtne	r1, #39207	; 0x9927
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7ac:	00130119 	andseq	r0, r3, r9, lsl r1
     7b0:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
     7b4:	0b3a0e03 	bleq	e83fc8 <__core1_vectors-0x17c038>
     7b8:	0b39053b 	bleq	e41cac <__core1_vectors-0x1be354>
     7bc:	13491927 	movtne	r1, #39207	; 0x9927
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     7c8:	00130119 	andseq	r0, r3, r9, lsl r1
     7cc:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     7d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7d8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	01111349 	tsteq	r1, r9, asr #6
     7e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     7e4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     7e8:	31000013 	tstcc	r0, r3, lsl r0
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     7f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7f4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     7f8:	00000b57 	andeq	r0, r0, r7, asr fp
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	31000532 	tstcc	r0, r2, lsr r5
     800:	00180213 	andseq	r0, r8, r3, lsl r2
     804:	011d3300 	tsteq	sp, r0, lsl #6
     808:	01111331 	tsteq	r1, r1, lsr r3
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	0b580612 	bleq	160205c <__end__+0x5e603c>
     810:	0b570559 	bleq	15c1d7c <__end__+0x5a5d5c>
     814:	00001301 	andeq	r1, r0, r1, lsl #6
     818:	31003434 	tstcc	r0, r4, lsr r4
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	00180213 	andseq	r0, r8, r3, lsl r2
     820:	002e3500 	eoreq	r3, lr, r0, lsl #10
     824:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     82c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     830:	01111349 	tsteq	r1, r9, asr #6
     834:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	00194297 	mulseq	r9, r7, r2
     83c:	012e3600 			; <UNDEFINED> instruction: 0x012e3600
     840:	0b3a0e03 	bleq	e84054 <__core1_vectors-0x17bfac>
     844:	0b39053b 	bleq	e41d38 <__core1_vectors-0x1be2c8>
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	0b201927 	bleq	806cec <__core1_vectors-0x7f9314>
     84c:	00001301 	andeq	r1, r0, r1, lsl #6
     850:	03000537 	movweq	r0, #1335	; 0x537
     854:	3b0b3a0e 	blcc	2cf094 <__core1_vectors-0xd30f6c>
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     85c:	38000013 	stmdacc	r0, {r0, r1, r4}
     860:	0e03012e 	adfeqsp	f0, f3, #0.5
     864:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     868:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     86c:	0b201349 	bleq	805598 <__core1_vectors-0x7faa68>
     870:	00001301 	andeq	r1, r0, r1, lsl #6
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	03003439 	movweq	r3, #1081	; 0x439
     878:	3b0b3a0e 	blcc	2cf0b8 <__core1_vectors-0xd30f48>
     87c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	3a000013 	bcc	8d4 <__core1_vectors-0xfff72c>
     884:	0e03012e 	adfeqsp	f0, f3, #0.5
     888:	0b3b0b3a 	bleq	ec3578 <__core1_vectors-0x13ca88>
     88c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	13010b20 	movwne	r0, #6944	; 0x1b20
     894:	053b0000 	ldreq	r0, [fp, #-0]!
     898:	3a0e0300 	bcc	3814a0 <__core1_vectors-0xc7eb60>
     89c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	0013490b 	andseq	r4, r3, fp, lsl #18
     8a4:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
     8a8:	0b3a0e03 	bleq	e840bc <__core1_vectors-0x17bf44>
     8ac:	0b390b3b 	bleq	e435a0 <__core1_vectors-0x1bca60>
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	13491927 	movtne	r1, #39207	; 0x9927
     8b4:	13010b20 	movwne	r0, #6944	; 0x1b20
     8b8:	343d0000 	ldrtcc	r0, [sp], #-0
     8bc:	3a0e0300 	bcc	3814c4 <__core1_vectors-0xc7eb3c>
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     8c8:	012e3e00 			; <UNDEFINED> instruction: 0x012e3e00
     8cc:	0b3a0e03 	bleq	e840e0 <__core1_vectors-0x17bf20>
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	0b390b3b 	bleq	e435c4 <__core1_vectors-0x1bca3c>
     8d4:	13491927 	movtne	r1, #39207	; 0x9927
     8d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    return ALT_E_SUCCESS;
     8e0:	3f000019 	svccc	0x00000019
}
     8e4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     8e8:	0b3b0b3a 	bleq	ec35d8 <__core1_vectors-0x13ca28>
     8ec:	13490b39 	movtne	r0, #39737	; 0x9b39
     8f0:	00001802 	andeq	r1, r0, r2, lsl #16
     8f4:	00001840 	andeq	r1, r0, r0, asr #16
     8f8:	11010000 	mrsne	r0, (UNDEF: 1)
     8fc:	130e2501 	movwne	r2, #58625	; 0xe501
     900:	1b0e030b 	blne	381534 <__core1_vectors-0xc7eacc>
     904:	1117550e 	tstne	r7, lr, lsl #10
     908:	00171001 	andseq	r1, r7, r1
     90c:	00240200 	eoreq	r0, r4, r0, lsl #4
     910:	0b3e0b0b 	bleq	f83544 <__core1_vectors-0x7cabc>
     914:	00000803 	andeq	r0, r0, r3, lsl #16
     918:	03001603 	movweq	r1, #1539	; 0x603
     91c:	3b0b3a0e 	blcc	2cf15c <__core1_vectors-0xd30ea4>
     920:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     924:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     928:	0b0b0024 	bleq	2c09c0 <__core1_vectors-0xd3f640>
     92c:	0e030b3e 	vmoveq.16	d3[0], r0
     930:	13050000 	movwne	r0, #20480	; 0x5000
     934:	0b0e0301 	bleq	381540 <__core1_vectors-0xc7eac0>
     938:	3b0b3a0b 	blcc	2cf16c <__core1_vectors-0xd30e94>
     93c:	0013010b 	andseq	r0, r3, fp, lsl #2
     940:	000d0600 	andeq	r0, sp, r0, lsl #12
     944:	13490e03 	movtne	r0, #40451	; 0x9e03
     948:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
     94c:	0f070000 	svceq	0x00070000
     950:	000b0b00 	andeq	r0, fp, r0, lsl #22
     954:	00160800 	andseq	r0, r6, r0, lsl #16
     958:	0b3a0e03 	bleq	e8416c <__core1_vectors-0x17be94>
     95c:	0b39053b 	bleq	e41e50 <__core1_vectors-0x1be1b0>
     960:	00001349 	andeq	r1, r0, r9, asr #6
     964:	0b011709 	bleq	46590 <__core1_vectors-0xfb9a70>
     968:	3b0b3a0b 	blcc	2cf19c <__core1_vectors-0xd30e64>
     96c:	010b390b 	tsteq	fp, fp, lsl #18
     970:	0a000013 	beq	9c4 <__core1_vectors-0xfff63c>
     974:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     978:	0b3b0b3a 	bleq	ec3668 <__core1_vectors-0x13c998>
     97c:	13490b39 	movtne	r0, #39737	; 0x9b39
     980:	010b0000 	mrseq	r0, (UNDEF: 11)
     984:	01134901 	tsteq	r3, r1, lsl #18
     988:	0c000013 	stceq	0, cr0, [r0], {19}
     98c:	13490021 	movtne	r0, #36897	; 0x9021
     990:	00000b2f 	andeq	r0, r0, pc, lsr #22
     994:	0b01130d 	bleq	455d0 <__core1_vectors-0xfbaa30>
     998:	3b0b3a0b 	blcc	2cf1cc <__core1_vectors-0xd30e34>
     99c:	010b390b 	tsteq	fp, fp, lsl #18
     9a0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     9a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     9a8:	0b3b0b3a 	bleq	ec3698 <__core1_vectors-0x13c968>
     9ac:	13490b39 	movtne	r0, #39737	; 0x9b39
     9b0:	00000b38 	andeq	r0, r0, r8, lsr fp
     9b4:	0301130f 	movweq	r1, #4879	; 0x130f
     9b8:	3a0b0b0e 	bcc	2c35f8 <__core1_vectors-0xd3ca08>
     9bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9c0:	0013010b 	andseq	r0, r3, fp, lsl #2
     9c4:	000d1000 	andeq	r1, sp, r0
     9c8:	0b3a0803 	bleq	e829dc <__core1_vectors-0x17d624>
     9cc:	0b390b3b 	bleq	e436c0 <__core1_vectors-0x1bc940>
     9d0:	0b381349 	bleq	e056fc <__core1_vectors-0x1fa904>
     9d4:	0f110000 	svceq	0x00110000
     9d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     9dc:	12000013 	andne	r0, r0, #19
     9e0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     9e4:	0b3a050b 	bleq	e81e18 <__core1_vectors-0x17e1e8>
     9e8:	0b390b3b 	bleq	e436dc <__core1_vectors-0x1bc924>
     9ec:	00001301 	andeq	r1, r0, r1, lsl #6
     9f0:	03000d13 	movweq	r0, #3347	; 0xd13
     9f4:	3b0b3a0e 	blcc	2cf234 <__core1_vectors-0xd30dcc>
     9f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     9fc:	00053813 	andeq	r3, r5, r3, lsl r8
     a00:	00151400 	andseq	r1, r5, r0, lsl #8
     a04:	00001927 	andeq	r1, r0, r7, lsr #18
     a08:	27011515 	smladcs	r1, r5, r5, r1
     a0c:	01134919 	tsteq	r3, r9, lsl r9
     a10:	16000013 			; <UNDEFINED> instruction: 0x16000013
     a14:	13490005 	movtne	r0, #36869	; 0x9005
     a18:	26170000 	ldrcs	r0, [r7], -r0
     a1c:	00134900 	andseq	r4, r3, r0, lsl #18
     a20:	01131800 	tsteq	r3, r0, lsl #16
     a24:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     a28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a2c:	13010b39 	movwne	r0, #6969	; 0x1b39
     a30:	0d190000 	ldceq	0, cr0, [r9, #-0]
     a34:	3a0e0300 	bcc	38163c <__core1_vectors-0xc7e9c4>
     a38:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a3c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     a40:	1a00000b 	bne	a74 <__core1_vectors-0xfff58c>
     a44:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a4c:	13490b39 	movtne	r0, #39737	; 0x9b39
     a50:	00000538 	andeq	r0, r0, r8, lsr r5
     a54:	0301131b 	movweq	r1, #4891	; 0x131b
     a58:	3a0b0b0e 	bcc	2c3698 <__core1_vectors-0xd3c968>
     a5c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a60:	0013010b 	andseq	r0, r3, fp, lsl #2
     a64:	01131c00 	tsteq	r3, r0, lsl #24
     a68:	0b3a0b0b 	bleq	e8369c <__core1_vectors-0x17c964>
     a6c:	0b39053b 	bleq	e41f60 <__core1_vectors-0x1be0a0>
     a70:	00001301 	andeq	r1, r0, r1, lsl #6
     a74:	0b01171d 	bleq	466f0 <__core1_vectors-0xfb9910>
     a78:	3b0b3a0b 	blcc	2cf2ac <__core1_vectors-0xd30d54>
     a7c:	010b3905 	tsteq	fp, r5, lsl #18
     a80:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     a84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a8c:	13490b39 	movtne	r0, #39737	; 0x9b39
     a90:	131f0000 	tstne	pc, #0
     a94:	3c0e0300 	stccc	3, cr0, [lr], {-0}
     a98:	20000019 	andcs	r0, r0, r9, lsl r0
     a9c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     aa0:	00001301 	andeq	r1, r0, r1, lsl #6
     aa4:	03003421 	movweq	r3, #1057	; 0x421
     aa8:	3b0b3a0e 	blcc	2cf2e8 <__core1_vectors-0xd30d18>
     aac:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ab0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     ab4:	22000019 	andcs	r0, r0, #25
     ab8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     abc:	0b3b0b3a 	bleq	ec37ac <__core1_vectors-0x13c854>
     ac0:	13490b39 	movtne	r0, #39737	; 0x9b39
     ac4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     ac8:	34230000 	strtcc	r0, [r3], #-0
     acc:	3a134700 	bcc	4d26d4 <__core1_vectors-0xb2d92c>
     ad0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ad4:	0018020b 	andseq	r0, r8, fp, lsl #4
     ad8:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
     adc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     ae0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ae4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     ae8:	01111349 	tsteq	r1, r9, asr #6
     aec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     af0:	01194296 			; <UNDEFINED> instruction: 0x01194296
     af4:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     af8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     afc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b00:	13490b39 	movtne	r0, #39737	; 0x9b39
     b04:	00001802 	andeq	r1, r0, r2, lsl #16
     b08:	03003426 	movweq	r3, #1062	; 0x426
     b0c:	3b0b3a0e 	blcc	2cf34c <__core1_vectors-0xd30cb4>
     b10:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     b14:	00180213 	andseq	r0, r8, r3, lsl r2
     b18:	00342700 	eorseq	r2, r4, r0, lsl #14
     b1c:	0b3a0803 	bleq	e82b30 <__core1_vectors-0x17d4d0>
     b20:	0b39053b 	bleq	e42014 <__core1_vectors-0x1bdfec>
     b24:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b28:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     b2c:	3a0e0301 	bcc	381738 <__core1_vectors-0xc7e8c8>
     b30:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b34:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b38:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b3c:	96184006 	ldrls	r4, [r8], -r6
     b40:	13011942 	movwne	r1, #6466	; 0x1942
     b44:	05290000 	streq	r0, [r9, #-0]!
     b48:	3a080300 	bcc	201750 <__core1_vectors-0xdfe8b0>
     b4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b50:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b54:	2a000018 	bcs	bbc <__core1_vectors-0xfff444>
     b58:	0e03012e 	adfeqsp	f0, f3, #0.5
     b5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b60:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     b64:	01111349 	tsteq	r1, r9, asr #6
     b68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b6c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b70:	2b000013 	blcs	bc4 <__core1_vectors-0xfff43c>
     b74:	0e03012e 	adfeqsp	f0, f3, #0.5
     b78:	0b3b0b3a 	bleq	ec3868 <__core1_vectors-0x13c798>
     b7c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     b80:	01111349 	tsteq	r1, r9, asr #6
     b84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b88:	01194296 			; <UNDEFINED> instruction: 0x01194296
     b8c:	2c000013 	stccs	0, cr0, [r0], {19}
     b90:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b94:	0b3b0b3a 	bleq	ec3884 <__core1_vectors-0x13c77c>
     b98:	13490b39 	movtne	r0, #39737	; 0x9b39
     b9c:	00001802 	andeq	r1, r0, r2, lsl #16
     ba0:	0300052d 	movweq	r0, #1325	; 0x52d
     ba4:	3b0b3a08 	blcc	2cf3cc <__core1_vectors-0xd30c34>
     ba8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     bac:	00180213 	andseq	r0, r8, r3, lsl r2
     bb0:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     bb4:	0b3a0e03 	bleq	e843c8 <__core1_vectors-0x17bc38>
     bb8:	0b390b3b 	bleq	e438ac <__core1_vectors-0x1bc754>
     bbc:	13491927 	movtne	r1, #39207	; 0x9927
     bc0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     bc4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     bc8:	00130119 	andseq	r0, r3, r9, lsl r1
     bcc:	00342f00 	eorseq	r2, r4, r0, lsl #30
     bd0:	0b3a0803 	bleq	e82be4 <__core1_vectors-0x17d41c>
     bd4:	0b390b3b 	bleq	e438c8 <__core1_vectors-0x1bc738>
     bd8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     bdc:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
     be0:	3a0e0301 	bcc	3817ec <__core1_vectors-0xc7e814>
     be4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     be8:	1119270b 	tstne	r9, fp, lsl #14
     bec:	40061201 	andmi	r1, r6, r1, lsl #4
     bf0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     bf4:	00001301 	andeq	r1, r0, r1, lsl #6
     bf8:	3f012e31 	svccc	0x00012e31
     bfc:	3a0e0319 	bcc	381868 <__core1_vectors-0xc7e798>
     c00:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c04:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     c08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c0c:	96184006 	ldrls	r4, [r8], -r6
     c10:	13011942 	movwne	r1, #6466	; 0x1942
     c14:	18320000 	ldmdane	r2!, {}	; <UNPREDICTABLE>
     c18:	33000000 	movwcc	r0, #0
     c1c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c20:	0b3b0b3a 	bleq	ec3910 <__core1_vectors-0x13c6f0>
     c24:	13490b39 	movtne	r0, #39737	; 0x9b39
     c28:	00001802 	andeq	r1, r0, r2, lsl #16
     c2c:	03012e34 	movweq	r2, #7732	; 0x1e34
     c30:	3b0b3a0e 	blcc	2cf470 <__core1_vectors-0xd30b90>
     c34:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     c38:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c3c:	97184006 	ldrls	r4, [r8, -r6]
     c40:	13011942 	movwne	r1, #6466	; 0x1942
     c44:	26350000 	ldrtcs	r0, [r5], -r0
     c48:	36000000 	strcc	r0, [r0], -r0
     c4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c50:	0b3a0e03 	bleq	e84464 <__core1_vectors-0x17bb9c>
     c54:	0b390b3b 	bleq	e43948 <__core1_vectors-0x1bc6b8>
     c58:	13491927 	movtne	r1, #39207	; 0x9927
     c5c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c60:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     c64:	00000019 	andeq	r0, r0, r9, lsl r0
     c68:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     c6c:	030b130e 	movweq	r1, #45838	; 0xb30e
     c70:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     c74:	10011117 	andne	r1, r1, r7, lsl r1
     c78:	02000017 	andeq	r0, r0, #23
     c7c:	0b0b0024 	bleq	2c0d14 <__core1_vectors-0xd3f2ec>
     c80:	0e030b3e 	vmoveq.16	d3[0], r0
     c84:	16030000 	strne	r0, [r3], -r0
     c88:	3a0e0300 	bcc	381890 <__core1_vectors-0xc7e770>
     c8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c90:	0013490b 	andseq	r4, r3, fp, lsl #18
     c94:	00240400 	eoreq	r0, r4, r0, lsl #8
     c98:	0b3e0b0b 	bleq	f838cc <__core1_vectors-0x7c734>
     c9c:	00000803 	andeq	r0, r0, r3, lsl #16
     ca0:	03010405 	movweq	r0, #5125	; 0x1405
     ca4:	0b0b3e0e 	bleq	2d04e4 <__core1_vectors-0xd2fb1c>
     ca8:	3a13490b 	bcc	4d30dc <__core1_vectors-0xb2cf24>
     cac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cb0:	0013010b 	andseq	r0, r3, fp, lsl #2
     cb4:	00280600 	eoreq	r0, r8, r0, lsl #12
     cb8:	0b1c0e03 	bleq	7044cc <__core1_vectors-0x8fbb34>
     cbc:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     cc0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     cc4:	08000005 	stmdaeq	r0, {r0, r2}
     cc8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     ccc:	0b3a0b0b 	bleq	e83900 <__core1_vectors-0x17c700>
     cd0:	0b390b3b 	bleq	e439c4 <__core1_vectors-0x1bc63c>
     cd4:	00001301 	andeq	r1, r0, r1, lsl #6
     cd8:	03000d09 	movweq	r0, #3337	; 0xd09
     cdc:	3b0b3a0e 	blcc	2cf51c <__core1_vectors-0xd30ae4>
     ce0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ce4:	000b3813 	andeq	r3, fp, r3, lsl r8
     ce8:	000d0a00 	andeq	r0, sp, r0, lsl #20
     cec:	0b3a0803 	bleq	e82d00 <__core1_vectors-0x17d300>
     cf0:	0b390b3b 	bleq	e439e4 <__core1_vectors-0x1bc61c>
     cf4:	0b381349 	bleq	e05a20 <__core1_vectors-0x1fa5e0>
     cf8:	0f0b0000 	svceq	0x000b0000
     cfc:	000b0b00 	andeq	r0, fp, r0, lsl #22
     d00:	01040c00 	tsteq	r4, r0, lsl #24
     d04:	0b3e0e03 	bleq	f84518 <__core1_vectors-0x7bae8>
     d08:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     d0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d10:	13010b39 	movwne	r0, #6969	; 0x1b39
     d14:	160d0000 	strne	r0, [sp], -r0
     d18:	3a0e0300 	bcc	381920 <__core1_vectors-0xc7e6e0>
     d1c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d20:	0013490b 	andseq	r4, r3, fp, lsl #18
     d24:	01170e00 	tsteq	r7, r0, lsl #28
     d28:	0b3a0b0b 	bleq	e8395c <__core1_vectors-0x17c6a4>
     d2c:	0b390b3b 	bleq	e43a20 <__core1_vectors-0x1bc5e0>
     d30:	00001301 	andeq	r1, r0, r1, lsl #6
     d34:	03000d0f 	movweq	r0, #3343	; 0xd0f
     d38:	3b0b3a0e 	blcc	2cf578 <__core1_vectors-0xd30a88>
     d3c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d40:	10000013 	andne	r0, r0, r3, lsl r0
     d44:	13490101 	movtne	r0, #37121	; 0x9101
     d48:	00001301 	andeq	r1, r0, r1, lsl #6
     d4c:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
     d50:	000b2f13 	andeq	r2, fp, r3, lsl pc
     d54:	01131200 	tsteq	r3, r0, lsl #4
     d58:	0b3a0b0b 	bleq	e8398c <__core1_vectors-0x17c674>
     d5c:	0b390b3b 	bleq	e43a50 <__core1_vectors-0x1bc5b0>
     d60:	00001301 	andeq	r1, r0, r1, lsl #6
     d64:	0b000f13 	bleq	49b8 <__core1_vectors-0xffb648>
     d68:	0013490b 	andseq	r4, r3, fp, lsl #18
     d6c:	01131400 	tsteq	r3, r0, lsl #8
     d70:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     d74:	0b3b0b3a 	bleq	ec3a64 <__core1_vectors-0x13c59c>
     d78:	13010b39 	movwne	r0, #6969	; 0x1b39
     d7c:	0d150000 	ldceq	0, cr0, [r5, #-0]
     d80:	3a0e0300 	bcc	381988 <__core1_vectors-0xc7e678>
     d84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d88:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d8c:	16000005 	strne	r0, [r0], -r5
     d90:	19270015 	stmdbne	r7!, {r0, r2, r4}
     d94:	15170000 	ldrne	r0, [r7, #-0]
     d98:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     d9c:	00130113 	andseq	r0, r3, r3, lsl r1
     da0:	00051800 	andeq	r1, r5, r0, lsl #16
     da4:	00001349 	andeq	r1, r0, r9, asr #6
     da8:	49002619 	stmdbmi	r0, {r0, r3, r4, r9, sl, sp}
     dac:	1a000013 	bne	e00 <__core1_vectors-0xfff200>
     db0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     db4:	0b3a050b 	bleq	e821e8 <__core1_vectors-0x17de18>
     db8:	0b39053b 	bleq	e422ac <__core1_vectors-0x1bdd54>
     dbc:	00001301 	andeq	r1, r0, r1, lsl #6
     dc0:	03000d1b 	movweq	r0, #3355	; 0xd1b
     dc4:	3b0b3a0e 	blcc	2cf604 <__core1_vectors-0xd309fc>
     dc8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     dcc:	000b3813 	andeq	r3, fp, r3, lsl r8
     dd0:	000d1c00 	andeq	r1, sp, r0, lsl #24
     dd4:	0b3a0e03 	bleq	e845e8 <__core1_vectors-0x17ba18>
     dd8:	0b39053b 	bleq	e422cc <__core1_vectors-0x1bdd34>
     ddc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     de0:	131d0000 	tstne	sp, #0
     de4:	0b0e0301 	bleq	3819f0 <__core1_vectors-0xc7e610>
     de8:	3b0b3a0b 	blcc	2cf61c <__core1_vectors-0xd309e4>
     dec:	010b3905 	tsteq	fp, r5, lsl #18
     df0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     df4:	0b0b0113 	bleq	2c1248 <__core1_vectors-0xd3edb8>
     df8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     dfc:	13010b39 	movwne	r0, #6969	; 0x1b39
     e00:	171f0000 	ldrne	r0, [pc, -r0]
     e04:	3a0b0b01 	bcc	2c3a10 <__core1_vectors-0xd3c5f0>
     e08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e0c:	0013010b 	andseq	r0, r3, fp, lsl #2
     e10:	000d2000 	andeq	r2, sp, r0
     e14:	0b3a0e03 	bleq	e84628 <__core1_vectors-0x17b9d8>
     e18:	0b39053b 	bleq	e4230c <__core1_vectors-0x1bdcf4>
     e1c:	00001349 	andeq	r1, r0, r9, asr #6
     e20:	03001321 	movweq	r1, #801	; 0x321
     e24:	00193c0e 	andseq	r3, r9, lr, lsl #24
     e28:	01152200 	tsteq	r5, r0, lsl #4
     e2c:	13011927 	movwne	r1, #6439	; 0x1927
     e30:	34230000 	strtcc	r0, [r3], #-0
     e34:	3a0e0300 	bcc	381a3c <__core1_vectors-0xc7e5c4>
     e38:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e3c:	3f13490b 	svccc	0x0013490b
     e40:	00193c19 	andseq	r3, r9, r9, lsl ip
     e44:	00342400 	eorseq	r2, r4, r0, lsl #8
     e48:	0b3a0e03 	bleq	e8465c <__core1_vectors-0x17b9a4>
     e4c:	0b390b3b 	bleq	e43b40 <__core1_vectors-0x1bc4c0>
     e50:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     e54:	0000193c 	andeq	r1, r0, ip, lsr r9
     e58:	03003425 	movweq	r3, #1061	; 0x425
     e5c:	3b0b3a0e 	blcc	2cf69c <__core1_vectors-0xd30964>
     e60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e64:	00180213 	andseq	r0, r8, r3, lsl r2
     e68:	00342600 	eorseq	r2, r4, r0, lsl #12
     e6c:	0b3a1347 	bleq	e85b90 <__core1_vectors-0x17a470>
     e70:	0b390b3b 	bleq	e43b64 <__core1_vectors-0x1bc49c>
     e74:	00001802 	andeq	r1, r0, r2, lsl #16
     e78:	3f012e27 	svccc	0x00012e27
     e7c:	3a0e0319 	bcc	381ae8 <__core1_vectors-0xc7e518>
     e80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e84:	1119270b 	tstne	r9, fp, lsl #14
     e88:	40061201 	andmi	r1, r6, r1, lsl #4
     e8c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     e90:	00001301 	andeq	r1, r0, r1, lsl #6
     e94:	03000528 	movweq	r0, #1320	; 0x528
     e98:	3b0b3a08 	blcc	2cf6c0 <__core1_vectors-0xd30940>
     e9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ea0:	00180213 	andseq	r0, r8, r3, lsl r2
     ea4:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
     ea8:	0b3a0e03 	bleq	e846bc <__core1_vectors-0x17b944>
     eac:	0b390b3b 	bleq	e43ba0 <__core1_vectors-0x1bc460>
     eb0:	13491927 	movtne	r1, #39207	; 0x9927
     eb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     eb8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     ebc:	00130119 	andseq	r0, r3, r9, lsl r1
     ec0:	00052a00 	andeq	r2, r5, r0, lsl #20
     ec4:	0b3a0e03 	bleq	e846d8 <__core1_vectors-0x17b928>
     ec8:	0b390b3b 	bleq	e43bbc <__core1_vectors-0x1bc444>
     ecc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ed0:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     ed4:	3a0e0301 	bcc	381ae0 <__core1_vectors-0xc7e520>
     ed8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     edc:	1119270b 	tstne	r9, fp, lsl #14
     ee0:	40061201 	andmi	r1, r6, r1, lsl #4
     ee4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     ee8:	01000000 	mrseq	r0, (UNDEF: 0)
     eec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     ef0:	0e030b13 	vmoveq.32	d3[0], r0
     ef4:	17550e1b 	smmlane	r5, fp, lr, r0
     ef8:	17100111 			; <UNDEFINED> instruction: 0x17100111
     efc:	24020000 	strcs	r0, [r2], #-0
     f00:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f04:	000e030b 	andeq	r0, lr, fp, lsl #6
     f08:	00160300 	andseq	r0, r6, r0, lsl #6
     f0c:	0b3a0e03 	bleq	e84720 <__core1_vectors-0x17b8e0>
     f10:	0b390b3b 	bleq	e43c04 <__core1_vectors-0x1bc3fc>
     f14:	00001349 	andeq	r1, r0, r9, asr #6
     f18:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
     f1c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     f20:	13490035 	movtne	r0, #36917	; 0x9035
     f24:	24060000 	strcs	r0, [r6], #-0
     f28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f2c:	0008030b 	andeq	r0, r8, fp, lsl #6
     f30:	000f0700 	andeq	r0, pc, r0, lsl #14
     f34:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     f38:	13080000 	movwne	r0, #32768	; 0x8000
     f3c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
     f40:	09000019 	stmdbeq	r0, {r0, r3, r4}
     f44:	0b0b000f 	bleq	2c0f88 <__core1_vectors-0xd3f078>
     f48:	160a0000 	strne	r0, [sl], -r0
     f4c:	3a0e0300 	bcc	381b54 <__core1_vectors-0xc7e4ac>
     f50:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f54:	0013490b 	andseq	r4, r3, fp, lsl #18
     f58:	01170b00 	tsteq	r7, r0, lsl #22
     f5c:	0b3a0b0b 	bleq	e83b90 <__core1_vectors-0x17c470>
     f60:	0b390b3b 	bleq	e43c54 <__core1_vectors-0x1bc3ac>
     f64:	00001301 	andeq	r1, r0, r1, lsl #6
     f68:	03000d0c 	movweq	r0, #3340	; 0xd0c
     f6c:	3b0b3a0e 	blcc	2cf7ac <__core1_vectors-0xd30854>
     f70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     f74:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     f78:	13490101 	movtne	r0, #37121	; 0x9101
     f7c:	00001301 	andeq	r1, r0, r1, lsl #6
     f80:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
     f84:	000b2f13 	andeq	r2, fp, r3, lsl pc
     f88:	01130f00 	tsteq	r3, r0, lsl #30
     f8c:	0b3a0b0b 	bleq	e83bc0 <__core1_vectors-0x17c440>
     f90:	0b390b3b 	bleq	e43c84 <__core1_vectors-0x1bc37c>
     f94:	00001301 	andeq	r1, r0, r1, lsl #6
     f98:	03000d10 	movweq	r0, #3344	; 0xd10
     f9c:	3b0b3a0e 	blcc	2cf7dc <__core1_vectors-0xd30824>
     fa0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     fa4:	000b3813 	andeq	r3, fp, r3, lsl r8
     fa8:	01131100 	tsteq	r3, r0, lsl #2
     fac:	0b0b0e03 	bleq	2c47c0 <__core1_vectors-0xd3b840>
     fb0:	0b3b0b3a 	bleq	ec3ca0 <__core1_vectors-0x13c360>
     fb4:	13010b39 	movwne	r0, #6969	; 0x1b39
     fb8:	0d120000 	ldceq	0, cr0, [r2, #-0]
     fbc:	3a080300 	bcc	201bc4 <__core1_vectors-0xdfe43c>
     fc0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fc4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     fc8:	1300000b 	movwne	r0, #11
     fcc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     fd0:	0b3a050b 	bleq	e82404 <__core1_vectors-0x17dbfc>
     fd4:	0b390b3b 	bleq	e43cc8 <__core1_vectors-0x1bc338>
     fd8:	00001301 	andeq	r1, r0, r1, lsl #6
     fdc:	03000d14 	movweq	r0, #3348	; 0xd14
     fe0:	3b0b3a0e 	blcc	2cf820 <__core1_vectors-0xd307e0>
     fe4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     fe8:	00053813 	andeq	r3, r5, r3, lsl r8
     fec:	00151500 	andseq	r1, r5, r0, lsl #10
     ff0:	00001927 	andeq	r1, r0, r7, lsr #18
     ff4:	27011516 	smladcs	r1, r6, r5, r1
     ff8:	01134919 	tsteq	r3, r9, lsl r9
     ffc:	17000013 	smladne	r0, r3, r0, r0
    1000:	13490005 	movtne	r0, #36869	; 0x9005
    1004:	13180000 	tstne	r8, #0
    1008:	0b0e0301 	bleq	381c14 <__core1_vectors-0xc7e3ec>
    100c:	3b0b3a05 	blcc	2cf828 <__core1_vectors-0xd307d8>
    1010:	010b3905 	tsteq	fp, r5, lsl #18
    1014:	19000013 	stmdbne	r0, {r0, r1, r4}
    1018:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    101c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1020:	13490b39 	movtne	r0, #39737	; 0x9b39
    1024:	00000b38 	andeq	r0, r0, r8, lsr fp
    1028:	03000d1a 	movweq	r0, #3354	; 0xd1a
    102c:	3b0b3a0e 	blcc	2cf86c <__core1_vectors-0xd30794>
    1030:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1034:	00053813 	andeq	r3, r5, r3, lsl r8
    1038:	01131b00 	tsteq	r3, r0, lsl #22
    103c:	0b0b0e03 	bleq	2c4850 <__core1_vectors-0xd3b7b0>
    1040:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1044:	13010b39 	movwne	r0, #6969	; 0x1b39
    1048:	131c0000 	tstne	ip, #0
    104c:	3a0b0b01 	bcc	2c3c58 <__core1_vectors-0xd3c3a8>
    1050:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1054:	0013010b 	andseq	r0, r3, fp, lsl #2
    1058:	01171d00 	tsteq	r7, r0, lsl #26
    105c:	0b3a0b0b 	bleq	e83c90 <__core1_vectors-0x17c370>
    1060:	0b39053b 	bleq	e42554 <__core1_vectors-0x1bdaac>
    1064:	00001301 	andeq	r1, r0, r1, lsl #6
    1068:	03000d1e 	movweq	r0, #3358	; 0xd1e
    106c:	3b0b3a0e 	blcc	2cf8ac <__core1_vectors-0xd30754>
    1070:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1074:	1f000013 	svcne	0x00000013
    1078:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    107c:	00001301 	andeq	r1, r0, r1, lsl #6
    1080:	03003420 	movweq	r3, #1056	; 0x420
    1084:	3b0b3a0e 	blcc	2cf8c4 <__core1_vectors-0xd3073c>
    1088:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    108c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1090:	21000019 	tstcs	r0, r9, lsl r0
    1094:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1098:	0b3b0b3a 	bleq	ec3d88 <__core1_vectors-0x13c278>
    109c:	13490b39 	movtne	r0, #39737	; 0x9b39
    10a0:	00001802 	andeq	r1, r0, r2, lsl #16
    10a4:	03003422 	movweq	r3, #1058	; 0x422
    10a8:	3b0b3a0e 	blcc	2cf8e8 <__core1_vectors-0xd30718>
    10ac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    10b0:	3c193f13 	ldccc	15, cr3, [r9], {19}
    10b4:	23000019 	movwcs	r0, #25
    10b8:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
    10bc:	0b3b0b3a 	bleq	ec3dac <__core1_vectors-0x13c254>
    10c0:	13010b39 	movwne	r0, #6969	; 0x1b39
    10c4:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    10c8:	03193f00 	tsteq	r9, #0, 30
    10cc:	3b0b3a0e 	blcc	2cf90c <__core1_vectors-0xd306f4>
    10d0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    10d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10d8:	96184006 	ldrls	r4, [r8], -r6
    10dc:	00001942 	andeq	r1, r0, r2, asr #18
    10e0:	03012e25 	movweq	r2, #7717	; 0x1e25
    10e4:	3b0b3a0e 	blcc	2cf924 <__core1_vectors-0xd306dc>
    10e8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    10ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10f0:	97184006 	ldrls	r4, [r8, -r6]
    10f4:	13011942 	movwne	r1, #6466	; 0x1942
    10f8:	05260000 	streq	r0, [r6, #-0]!
    10fc:	3a0e0300 	bcc	381d04 <__core1_vectors-0xc7e2fc>
    1100:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1104:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1108:	27000018 	smladcs	r0, r8, r0, r0
    110c:	0111010b 	tsteq	r1, fp, lsl #2
    1110:	00000612 	andeq	r0, r0, r2, lsl r6
    1114:	03003428 	movweq	r3, #1064	; 0x428
    1118:	3b0b3a08 	blcc	2cf940 <__core1_vectors-0xd306c0>
    111c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1120:	00180213 	andseq	r0, r8, r3, lsl r2
    1124:	11010000 	mrsne	r0, (UNDEF: 1)
    1128:	130e2501 	movwne	r2, #58625	; 0xe501
    112c:	1b0e030b 	blne	381d60 <__core1_vectors-0xc7e2a0>
    1130:	1117550e 	tstne	r7, lr, lsl #10
    1134:	00171001 	andseq	r1, r7, r1
    1138:	00240200 	eoreq	r0, r4, r0, lsl #4
    113c:	0b3e0b0b 	bleq	f83d70 <__core1_vectors-0x7c290>
    1140:	00000e03 	andeq	r0, r0, r3, lsl #28
    1144:	0b002403 	bleq	a158 <__core1_vectors-0xff5ea8>
    1148:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    114c:	04000008 	streq	r0, [r0], #-8
    1150:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1154:	0b3b0b3a 	bleq	ec3e44 <__core1_vectors-0x13c1bc>
    1158:	13490b39 	movtne	r0, #39737	; 0x9b39
    115c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1160:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1164:	03193f00 	tsteq	r9, #0, 30
    1168:	3b0b3a0e 	blcc	2cf9a8 <__core1_vectors-0xd30658>
    116c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1170:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1174:	97184006 	ldrls	r4, [r8, -r6]
    1178:	00001942 	andeq	r1, r0, r2, asr #18
    117c:	03012e06 	movweq	r2, #7686	; 0x1e06
    1180:	3b0b3a0e 	blcc	2cf9c0 <__core1_vectors-0xd30640>
    1184:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1188:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    118c:	96184006 	ldrls	r4, [r8], -r6
    1190:	13011942 	movwne	r1, #6466	; 0x1942
    1194:	0b070000 	bleq	1c119c <__core1_vectors-0xe3ee64>
    1198:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    119c:	00130106 	andseq	r0, r3, r6, lsl #2
    11a0:	00340800 	eorseq	r0, r4, r0, lsl #16
    11a4:	0b3a0803 	bleq	e831b8 <__core1_vectors-0x17ce48>
    11a8:	0b390b3b 	bleq	e43e9c <__core1_vectors-0x1bc164>
    11ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    11b0:	0b090000 	bleq	2411b8 <__core1_vectors-0xdbee48>
    11b4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    11b8:	0a000006 	beq	11d8 <__core1_vectors-0xffee28>
    11bc:	0b0b000f 	bleq	2c1200 <__core1_vectors-0xd3ee00>
    11c0:	00001349 	andeq	r1, r0, r9, asr #6
    11c4:	01110100 	tsteq	r1, r0, lsl #2
    11c8:	0b130e25 	bleq	4c4a64 <__core1_vectors-0xb3b59c>
    11cc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    11d0:	01111755 	tsteq	r1, r5, asr r7
    11d4:	00001710 	andeq	r1, r0, r0, lsl r7
    11d8:	0b002402 	bleq	a1e8 <__core1_vectors-0xff5e18>
    11dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    11e0:	03000008 	movweq	r0, #8
    11e4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    11e8:	0b3b0b3a 	bleq	ec3ed8 <__core1_vectors-0x13c128>
    11ec:	13490b39 	movtne	r0, #39737	; 0x9b39
    11f0:	24040000 	strcs	r0, [r4], #-0
    11f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    11f8:	000e030b 	andeq	r0, lr, fp, lsl #6
    11fc:	00260500 	eoreq	r0, r6, r0, lsl #10
    1200:	00001349 	andeq	r1, r0, r9, asr #6
    1204:	03011306 	movweq	r1, #4870	; 0x1306
    1208:	3a0b0b0e 	bcc	2c3e48 <__core1_vectors-0xd3c1b8>
    120c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1210:	07000013 	smladeq	r0, r3, r0, r0
    1214:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1218:	0b381349 	bleq	e05f44 <__core1_vectors-0x1fa0bc>
    121c:	00001934 	andeq	r1, r0, r4, lsr r9
    1220:	0b000f08 	bleq	4e48 <__core1_vectors-0xffb1b8>
    1224:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1228:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    122c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1230:	13490b39 	movtne	r0, #39737	; 0x9b39
    1234:	170a0000 	strne	r0, [sl, -r0]
    1238:	3a0b0b01 	bcc	2c3e44 <__core1_vectors-0xd3c1bc>
    123c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1240:	0013010b 	andseq	r0, r3, fp, lsl #2
    1244:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1248:	0b3a0e03 	bleq	e84a5c <__core1_vectors-0x17b5a4>
    124c:	0b390b3b 	bleq	e43f40 <__core1_vectors-0x1bc0c0>
    1250:	00001349 	andeq	r1, r0, r9, asr #6
    1254:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1258:	00130113 	andseq	r0, r3, r3, lsl r1
    125c:	00210d00 	eoreq	r0, r1, r0, lsl #26
    1260:	0b2f1349 	bleq	bc5f8c <__core1_vectors-0x43a074>
    1264:	130e0000 	movwne	r0, #57344	; 0xe000
    1268:	3a0b0b01 	bcc	2c3e74 <__core1_vectors-0xd3c18c>
    126c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1270:	0013010b 	andseq	r0, r3, fp, lsl #2
    1274:	000d0f00 	andeq	r0, sp, r0, lsl #30
    1278:	0b3a0e03 	bleq	e84a8c <__core1_vectors-0x17b574>
    127c:	0b390b3b 	bleq	e43f70 <__core1_vectors-0x1bc090>
    1280:	0b381349 	bleq	e05fac <__core1_vectors-0x1fa054>
    1284:	13100000 	tstne	r0, #0
    1288:	0b0e0301 	bleq	381e94 <__core1_vectors-0xc7e16c>
    128c:	3b0b3a0b 	blcc	2cfac0 <__core1_vectors-0xd30540>
    1290:	010b390b 	tsteq	fp, fp, lsl #18
    1294:	11000013 	tstne	r0, r3, lsl r0
    1298:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    129c:	0b3b0b3a 	bleq	ec3f8c <__core1_vectors-0x13c074>
    12a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    12a4:	00000b38 	andeq	r0, r0, r8, lsr fp
    12a8:	0b000f12 	bleq	4ef8 <__core1_vectors-0xffb108>
    12ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    12b0:	01131300 	tsteq	r3, r0, lsl #6
    12b4:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    12b8:	0b3b0b3a 	bleq	ec3fa8 <__core1_vectors-0x13c058>
    12bc:	13010b39 	movwne	r0, #6969	; 0x1b39
    12c0:	0d140000 	ldceq	0, cr0, [r4, #-0]
    12c4:	3a0e0300 	bcc	381ecc <__core1_vectors-0xc7e134>
    12c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12cc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    12d0:	15000005 	strne	r0, [r0, #-5]
    12d4:	19270015 	stmdbne	r7!, {r0, r2, r4}
    12d8:	15160000 	ldrne	r0, [r6, #-0]
    12dc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    12e0:	00130113 	andseq	r0, r3, r3, lsl r1
    12e4:	00051700 	andeq	r1, r5, r0, lsl #14
    12e8:	00001349 	andeq	r1, r0, r9, asr #6
    12ec:	03011318 	movweq	r1, #4888	; 0x1318
    12f0:	3a050b0e 	bcc	143f30 <__core1_vectors-0xebc0d0>
    12f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12f8:	0013010b 	andseq	r0, r3, fp, lsl #2
    12fc:	000d1900 	andeq	r1, sp, r0, lsl #18
    1300:	0b3a0e03 	bleq	e84b14 <__core1_vectors-0x17b4ec>
    1304:	0b39053b 	bleq	e427f8 <__core1_vectors-0x1bd808>
    1308:	0b381349 	bleq	e06034 <__core1_vectors-0x1f9fcc>
    130c:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
    1310:	3a0e0300 	bcc	381f18 <__core1_vectors-0xc7e0e8>
    1314:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1318:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    131c:	1b000005 	blne	1338 <__core1_vectors-0xffecc8>
    1320:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1324:	0b3a0b0b 	bleq	e83f58 <__core1_vectors-0x17c0a8>
    1328:	0b39053b 	bleq	e4281c <__core1_vectors-0x1bd7e4>
    132c:	00001301 	andeq	r1, r0, r1, lsl #6
    1330:	0b01131c 	bleq	45fa8 <__core1_vectors-0xfba058>
    1334:	3b0b3a0b 	blcc	2cfb68 <__core1_vectors-0xd30498>
    1338:	010b3905 	tsteq	fp, r5, lsl #18
    133c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1340:	0b0b0117 	bleq	2c17a4 <__core1_vectors-0xd3e85c>
    1344:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1348:	13010b39 	movwne	r0, #6969	; 0x1b39
    134c:	0d1e0000 	ldceq	0, cr0, [lr, #-0]
    1350:	3a0e0300 	bcc	381f58 <__core1_vectors-0xc7e0a8>
    1354:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1358:	0013490b 	andseq	r4, r3, fp, lsl #18
    135c:	00131f00 	andseq	r1, r3, r0, lsl #30
    1360:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    1364:	15200000 	strne	r0, [r0, #-0]!
    1368:	01192701 	tsteq	r9, r1, lsl #14
    136c:	21000013 	tstcs	r0, r3, lsl r0
    1370:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1374:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1378:	13490b39 	movtne	r0, #39737	; 0x9b39
    137c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1380:	34220000 	strtcc	r0, [r2], #-0
    1384:	3a0e0300 	bcc	381f8c <__core1_vectors-0xc7e074>
    1388:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    138c:	3f13490b 	svccc	0x0013490b
    1390:	00193c19 	andseq	r3, r9, r9, lsl ip
    1394:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
    1398:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    139c:	0b3b0b3a 	bleq	ec408c <__core1_vectors-0x13bf74>
    13a0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    13a4:	01111349 	tsteq	r1, r9, asr #6
    13a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    13ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
    13b0:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    13b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    13b8:	0b3b0b3a 	bleq	ec40a8 <__core1_vectors-0x13bf58>
    13bc:	13490b39 	movtne	r0, #39737	; 0x9b39
    13c0:	00001802 	andeq	r1, r0, r2, lsl #16
    13c4:	00001825 	andeq	r1, r0, r5, lsr #16
    13c8:	00342600 	eorseq	r2, r4, r0, lsl #12
    13cc:	0b3a0e03 	bleq	e84be0 <__core1_vectors-0x17b420>
    13d0:	0b390b3b 	bleq	e440c4 <__core1_vectors-0x1bbf3c>
    13d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    13d8:	34270000 	strtcc	r0, [r7], #-0
    13dc:	3a080300 	bcc	201fe4 <__core1_vectors-0xdfe01c>
    13e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    13e8:	28000018 	stmdacs	r0, {r3, r4}
    13ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    13f0:	0b3a0e03 	bleq	e84c04 <__core1_vectors-0x17b3fc>
    13f4:	0b390b3b 	bleq	e440e8 <__core1_vectors-0x1bbf18>
    13f8:	13491927 	movtne	r1, #39207	; 0x9927
    13fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1400:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1404:	00130119 	andseq	r0, r3, r9, lsl r1
    1408:	00052900 	andeq	r2, r5, r0, lsl #18
    140c:	0b3a0803 	bleq	e83420 <__core1_vectors-0x17cbe0>
    1410:	0b390b3b 	bleq	e44104 <__core1_vectors-0x1bbefc>
    1414:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1418:	0b2a0000 	bleq	a81420 <__core1_vectors-0x57ebe0>
    141c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1420:	00130106 	andseq	r0, r3, r6, lsl #2
    1424:	010b2b00 	tsteq	fp, r0, lsl #22
    1428:	06120111 			; <UNDEFINED> instruction: 0x06120111
    142c:	262c0000 	strtcs	r0, [ip], -r0
    1430:	2d000000 	stccs	0, cr0, [r0, #-0]
    1434:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1438:	0b3a0e03 	bleq	e84c4c <__core1_vectors-0x17b3b4>
    143c:	0b390b3b 	bleq	e44130 <__core1_vectors-0x1bbed0>
    1440:	13491927 	movtne	r1, #39207	; 0x9927
    1444:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1448:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    144c:	00000019 	andeq	r0, r0, r9, lsl r0
    1450:	10001101 	andne	r1, r0, r1, lsl #2
    1454:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    1458:	1b0e0301 	blne	382064 <__core1_vectors-0xc7df9c>
    145c:	130e250e 	movwne	r2, #58638	; 0xe50e
    1460:	00000005 	andeq	r0, r0, r5
    1464:	10001101 	andne	r1, r0, r1, lsl #2
    1468:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    146c:	1b0e0301 	blne	382078 <__core1_vectors-0xc7df88>
    1470:	130e250e 	movwne	r2, #58638	; 0xe50e
    1474:	00000005 	andeq	r0, r0, r5
    1478:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    147c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1480:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1484:	10011117 	andne	r1, r1, r7, lsl r1
    1488:	02000017 	andeq	r0, r0, #23
    148c:	0b0b0024 	bleq	2c1524 <__core1_vectors-0xd3eadc>
    1490:	0e030b3e 	vmoveq.16	d3[0], r0
    1494:	16030000 	strne	r0, [r3], -r0
    1498:	3a0e0300 	bcc	3820a0 <__core1_vectors-0xc7df60>
    149c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14a0:	0013490b 	andseq	r4, r3, fp, lsl #18
    14a4:	00350400 	eorseq	r0, r5, r0, lsl #8
    14a8:	00001349 	andeq	r1, r0, r9, asr #6
    14ac:	0b002405 	bleq	a4c8 <__core1_vectors-0xff5b38>
    14b0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    14b4:	06000008 	streq	r0, [r0], -r8
    14b8:	13490026 	movtne	r0, #36902	; 0x9026
    14bc:	04070000 	streq	r0, [r7], #-0
    14c0:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
    14c4:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
    14c8:	3b0b3a13 	blcc	2cfd1c <__core1_vectors-0xd302e4>
    14cc:	010b390b 	tsteq	fp, fp, lsl #18
    14d0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    14d4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    14d8:	00000b1c 	andeq	r0, r0, ip, lsl fp
    14dc:	03001609 	movweq	r1, #1545	; 0x609
    14e0:	3b0b3a0e 	blcc	2cfd20 <__core1_vectors-0xd302e0>
    14e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    14e8:	0a000013 	beq	153c <__core1_vectors-0xffeac4>
    14ec:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    14f0:	0b3a0b0b 	bleq	e84124 <__core1_vectors-0x17bedc>
    14f4:	0b39053b 	bleq	e429e8 <__core1_vectors-0x1bd618>
    14f8:	00001301 	andeq	r1, r0, r1, lsl #6
    14fc:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1500:	3b0b3a08 	blcc	2cfd28 <__core1_vectors-0xd302d8>
    1504:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1508:	000b3813 	andeq	r3, fp, r3, lsl r8
    150c:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1510:	0b3a0e03 	bleq	e84d24 <__core1_vectors-0x17b2dc>
    1514:	0b39053b 	bleq	e42a08 <__core1_vectors-0x1bd5f8>
    1518:	0b381349 	bleq	e06244 <__core1_vectors-0x1f9dbc>
    151c:	0f0d0000 	svceq	0x000d0000
    1520:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1524:	000f0e00 	andeq	r0, pc, r0, lsl #28
    1528:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    152c:	170f0000 	strne	r0, [pc, -r0]
    1530:	3a0b0b01 	bcc	2c413c <__core1_vectors-0xd3bec4>
    1534:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1538:	0013010b 	andseq	r0, r3, fp, lsl #2
    153c:	000d1000 	andeq	r1, sp, r0
    1540:	0b3a0e03 	bleq	e84d54 <__core1_vectors-0x17b2ac>
    1544:	0b390b3b 	bleq	e44238 <__core1_vectors-0x1bbdc8>
    1548:	00001349 	andeq	r1, r0, r9, asr #6
    154c:	49010111 	stmdbmi	r1, {r0, r4, r8}
    1550:	00130113 	andseq	r0, r3, r3, lsl r1
    1554:	00211200 	eoreq	r1, r1, r0, lsl #4
    1558:	0b2f1349 	bleq	bc6284 <__core1_vectors-0x439d7c>
    155c:	13130000 	tstne	r3, #0
    1560:	3a0b0b01 	bcc	2c416c <__core1_vectors-0xd3be94>
    1564:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1568:	0013010b 	andseq	r0, r3, fp, lsl #2
    156c:	000d1400 	andeq	r1, sp, r0, lsl #8
    1570:	0b3a0e03 	bleq	e84d84 <__core1_vectors-0x17b27c>
    1574:	0b390b3b 	bleq	e44268 <__core1_vectors-0x1bbd98>
    1578:	0b381349 	bleq	e062a4 <__core1_vectors-0x1f9d5c>
    157c:	13150000 	tstne	r5, #0
    1580:	0b0e0301 	bleq	38218c <__core1_vectors-0xc7de74>
    1584:	3b0b3a0b 	blcc	2cfdb8 <__core1_vectors-0xd30248>
    1588:	010b390b 	tsteq	fp, fp, lsl #18
    158c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1590:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1594:	0b3b0b3a 	bleq	ec4284 <__core1_vectors-0x13bd7c>
    1598:	13490b39 	movtne	r0, #39737	; 0x9b39
    159c:	00000b38 	andeq	r0, r0, r8, lsr fp
    15a0:	03011317 	movweq	r1, #4887	; 0x1317
    15a4:	3a050b0e 	bcc	1441e4 <__core1_vectors-0xebbe1c>
    15a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15ac:	0013010b 	andseq	r0, r3, fp, lsl #2
    15b0:	000d1800 	andeq	r1, sp, r0, lsl #16
    15b4:	0b3a0e03 	bleq	e84dc8 <__core1_vectors-0x17b238>
    15b8:	0b390b3b 	bleq	e442ac <__core1_vectors-0x1bbd54>
    15bc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    15c0:	15190000 	ldrne	r0, [r9, #-0]
    15c4:	00192700 	andseq	r2, r9, r0, lsl #14
    15c8:	01151a00 	tsteq	r5, r0, lsl #20
    15cc:	13491927 	movtne	r1, #39207	; 0x9927
    15d0:	00001301 	andeq	r1, r0, r1, lsl #6
    15d4:	4900051b 	stmdbmi	r0, {r0, r1, r3, r4, r8, sl}
    15d8:	1c000013 	stcne	0, cr0, [r0], {19}
    15dc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    15e0:	0b3a050b 	bleq	e82a14 <__core1_vectors-0x17d5ec>
    15e4:	0b39053b 	bleq	e42ad8 <__core1_vectors-0x1bd528>
    15e8:	00001301 	andeq	r1, r0, r1, lsl #6
    15ec:	03000d1d 	movweq	r0, #3357	; 0xd1d
    15f0:	3b0b3a0e 	blcc	2cfe30 <__core1_vectors-0xd301d0>
    15f4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    15f8:	00053813 	andeq	r3, r5, r3, lsl r8
    15fc:	01131e00 	tsteq	r3, r0, lsl #28
    1600:	0b3a0b0b 	bleq	e84234 <__core1_vectors-0x17bdcc>
    1604:	0b39053b 	bleq	e42af8 <__core1_vectors-0x1bd508>
    1608:	00001301 	andeq	r1, r0, r1, lsl #6
    160c:	0b01171f 	bleq	47290 <__core1_vectors-0xfb8d70>
    1610:	3b0b3a0b 	blcc	2cfe44 <__core1_vectors-0xd301bc>
    1614:	010b3905 	tsteq	fp, r5, lsl #18
    1618:	20000013 	andcs	r0, r0, r3, lsl r0
    161c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1620:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1624:	13490b39 	movtne	r0, #39737	; 0x9b39
    1628:	13210000 			; <UNDEFINED> instruction: 0x13210000
    162c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    1630:	22000019 	andcs	r0, r0, #25
    1634:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1638:	00001301 	andeq	r1, r0, r1, lsl #6
    163c:	03003423 	movweq	r3, #1059	; 0x423
    1640:	3b0b3a0e 	blcc	2cfe80 <__core1_vectors-0xd30180>
    1644:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1648:	3c193f13 	ldccc	15, cr3, [r9], {19}
    164c:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    1650:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1654:	0b3b0b3a 	bleq	ec4344 <__core1_vectors-0x13bcbc>
    1658:	13490b39 	movtne	r0, #39737	; 0x9b39
    165c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1660:	21250000 			; <UNDEFINED> instruction: 0x21250000
    1664:	2f134900 	svccs	0x00134900
    1668:	26000005 	strcs	r0, [r0], -r5
    166c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1670:	0b3b0b3a 	bleq	ec4360 <__core1_vectors-0x13bca0>
    1674:	13490b39 	movtne	r0, #39737	; 0x9b39
    1678:	02050188 	andeq	r0, r5, #136, 2	; 0x22
    167c:	27000018 	smladcs	r0, r8, r0, r0
    1680:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1684:	0b3b0b3a 	bleq	ec4374 <__core1_vectors-0x13bc8c>
    1688:	13490b39 	movtne	r0, #39737	; 0x9b39
    168c:	00001802 	andeq	r1, r0, r2, lsl #16
    1690:	03003428 	movweq	r3, #1064	; 0x428
    1694:	3b0b3a0e 	blcc	2cfed4 <__core1_vectors-0xd3012c>
    1698:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    169c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    16a0:	29000018 	stmdbcs	r0, {r3, r4}
    16a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    16a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16ac:	13490b39 	movtne	r0, #39737	; 0x9b39
    16b0:	00001802 	andeq	r1, r0, r2, lsl #16
    16b4:	3f002e2a 	svccc	0x00002e2a
    16b8:	3a0e0319 	bcc	382324 <__core1_vectors-0xc7dcdc>
    16bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16c0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    16c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    16c8:	97184006 	ldrls	r4, [r8, -r6]
    16cc:	00001942 	andeq	r1, r0, r2, asr #18
    16d0:	3f012e2b 	svccc	0x00012e2b
    16d4:	3a0e0319 	bcc	382340 <__core1_vectors-0xc7dcc0>
    16d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16dc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    16e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    16e4:	96184006 	ldrls	r4, [r8], -r6
    16e8:	13011942 	movwne	r1, #6466	; 0x1942
    16ec:	342c0000 	strtcc	r0, [ip], #-0
    16f0:	3a080300 	bcc	2022f8 <__core1_vectors-0xdfdd08>
    16f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    16fc:	2d000018 	stccs	0, cr0, [r0, #-96]	; 0xffffffa0
    1700:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1704:	0b3a0e03 	bleq	e84f18 <__core1_vectors-0x17b0e8>
    1708:	0b39053b 	bleq	e42bfc <__core1_vectors-0x1bd404>
    170c:	13491927 	movtne	r1, #39207	; 0x9927
    1710:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1714:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1718:	00130119 	andseq	r0, r3, r9, lsl r1
    171c:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
    1720:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1724:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1728:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    172c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1730:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1734:	00130119 	andseq	r0, r3, r9, lsl r1
    1738:	00052f00 	andeq	r2, r5, r0, lsl #30
    173c:	0b3a0e03 	bleq	e84f50 <__core1_vectors-0x17b0b0>
    1740:	0b39053b 	bleq	e42c34 <__core1_vectors-0x1bd3cc>
    1744:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1748:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
    174c:	3a0e0301 	bcc	382358 <__core1_vectors-0xc7dca8>
    1750:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1754:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1758:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    175c:	97184006 	ldrls	r4, [r8, -r6]
    1760:	13011942 	movwne	r1, #6466	; 0x1942
    1764:	0b310000 	bleq	c4176c <__core1_vectors-0x3be894>
    1768:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    176c:	00130106 	andseq	r0, r3, r6, lsl #2
    1770:	010b3200 	mrseq	r3, R11_fiq
    1774:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1778:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    177c:	3a0e0301 	bcc	382388 <__core1_vectors-0xc7dc78>
    1780:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1784:	1119270b 	tstne	r9, fp, lsl #14
    1788:	40061201 	andmi	r1, r6, r1, lsl #4
    178c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1790:	00001301 	andeq	r1, r0, r1, lsl #6
    1794:	3f012e34 	svccc	0x00012e34
    1798:	3a0e0319 	bcc	382404 <__core1_vectors-0xc7dbfc>
    179c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17a0:	1119270b 	tstne	r9, fp, lsl #14
    17a4:	40061201 	andmi	r1, r6, r1, lsl #4
    17a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    17ac:	00001301 	andeq	r1, r0, r1, lsl #6
    17b0:	03003435 	movweq	r3, #1077	; 0x435
    17b4:	3b0b3a08 	blcc	2cffdc <__core1_vectors-0xd30024>
    17b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    17bc:	00180213 	andseq	r0, r8, r3, lsl r2
    17c0:	010b3600 	tsteq	fp, r0, lsl #12
    17c4:	00001755 	andeq	r1, r0, r5, asr r7
    17c8:	3f012e37 	svccc	0x00012e37
    17cc:	3a0e0319 	bcc	382438 <__core1_vectors-0xc7dbc8>
    17d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17d4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    17d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    17dc:	96184006 	ldrls	r4, [r8], -r6
    17e0:	13011942 	movwne	r1, #6466	; 0x1942
    17e4:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    17e8:	03193f01 	tsteq	r9, #1, 30
    17ec:	3b0b3a0e 	blcc	2d002c <__core1_vectors-0xd2ffd4>
    17f0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    17f4:	11134919 	tstne	r3, r9, lsl r9
    17f8:	40061201 	andmi	r1, r6, r1, lsl #4
    17fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1800:	00001301 	andeq	r1, r0, r1, lsl #6
    1804:	03012e39 	movweq	r2, #7737	; 0x1e39
    1808:	3b0b3a0e 	blcc	2d0048 <__core1_vectors-0xd2ffb8>
    180c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1810:	11134919 	tstne	r3, r9, lsl r9
    1814:	40061201 	andmi	r1, r6, r1, lsl #4
    1818:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    181c:	00001301 	andeq	r1, r0, r1, lsl #6
    1820:	0300053a 	movweq	r0, #1338	; 0x53a
    1824:	3b0b3a0e 	blcc	2d0064 <__core1_vectors-0xd2ff9c>
    1828:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    182c:	00180213 	andseq	r0, r8, r3, lsl r2
    1830:	012e3b00 			; <UNDEFINED> instruction: 0x012e3b00
    1834:	0b3a0e03 	bleq	e85048 <__core1_vectors-0x17afb8>
    1838:	0b390b3b 	bleq	e4452c <__core1_vectors-0x1bbad4>
    183c:	13491927 	movtne	r1, #39207	; 0x9927
    1840:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1844:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1848:	00130119 	andseq	r0, r3, r9, lsl r1
    184c:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
    1850:	0b3a0e03 	bleq	e85064 <__core1_vectors-0x17af9c>
    1854:	0b390b3b 	bleq	e44548 <__core1_vectors-0x1bbab8>
    1858:	01111927 	tsteq	r1, r7, lsr #18
    185c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1860:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1864:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
    1868:	0803002e 	stmdaeq	r3, {r1, r2, r3, r5}
    186c:	0b3b0b3a 	bleq	ec455c <__core1_vectors-0x13baa4>
    1870:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1874:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1878:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    187c:	00000019 	andeq	r0, r0, r9, lsl r0
    1880:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1884:	030b130e 	movweq	r1, #45838	; 0xb30e
    1888:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    188c:	10011117 	andne	r1, r1, r7, lsl r1
    1890:	02000017 	andeq	r0, r0, #23
    1894:	0b0b0024 	bleq	2c192c <__core1_vectors-0xd3e6d4>
    1898:	0e030b3e 	vmoveq.16	d3[0], r0
    189c:	16030000 	strne	r0, [r3], -r0
    18a0:	3a0e0300 	bcc	3824a8 <__core1_vectors-0xc7db58>
    18a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    18ac:	00240400 	eoreq	r0, r4, r0, lsl #8
    18b0:	0b3e0b0b 	bleq	f844e4 <__core1_vectors-0x7bb1c>
    18b4:	00000803 	andeq	r0, r0, r3, lsl #16
    18b8:	03001605 	movweq	r1, #1541	; 0x605
    18bc:	3b0b3a0e 	blcc	2d00fc <__core1_vectors-0xd2ff04>
    18c0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    18c4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    18c8:	0b0b0117 	bleq	2c1d2c <__core1_vectors-0xd3e2d4>
    18cc:	0b3b0b3a 	bleq	ec45bc <__core1_vectors-0x13ba44>
    18d0:	13010b39 	movwne	r0, #6969	; 0x1b39
    18d4:	0d070000 	stceq	0, cr0, [r7, #-0]
    18d8:	3a0e0300 	bcc	3824e0 <__core1_vectors-0xc7db20>
    18dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    18e4:	01010800 	tsteq	r1, r0, lsl #16
    18e8:	13011349 	movwne	r1, #4937	; 0x1349
    18ec:	21090000 	mrscs	r0, (UNDEF: 9)
    18f0:	2f134900 	svccs	0x00134900
    18f4:	0a00000b 	beq	1928 <__core1_vectors-0xffe6d8>
    18f8:	0b0b0113 	bleq	2c1d4c <__core1_vectors-0xd3e2b4>
    18fc:	0b3b0b3a 	bleq	ec45ec <__core1_vectors-0x13ba14>
    1900:	13010b39 	movwne	r0, #6969	; 0x1b39
    1904:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1908:	3a0e0300 	bcc	382510 <__core1_vectors-0xc7daf0>
    190c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1910:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1914:	0c00000b 	stceq	0, cr0, [r0], {11}
    1918:	0b0b000f 	bleq	2c195c <__core1_vectors-0xd3e6a4>
    191c:	130d0000 	movwne	r0, #53248	; 0xd000
    1920:	0b0e0301 	bleq	38252c <__core1_vectors-0xc7dad4>
    1924:	3b0b3a0b 	blcc	2d0158 <__core1_vectors-0xd2fea8>
    1928:	010b390b 	tsteq	fp, fp, lsl #18
    192c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1930:	0b0b000f 	bleq	2c1974 <__core1_vectors-0xd3e68c>
    1934:	00001349 	andeq	r1, r0, r9, asr #6
    1938:	4900260f 	stmdbmi	r0, {r0, r1, r2, r3, r9, sl, sp}
    193c:	10000013 	andne	r0, r0, r3, lsl r0
    1940:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1944:	0b3b0b3a 	bleq	ec4634 <__core1_vectors-0x13b9cc>
    1948:	13490b39 	movtne	r0, #39737	; 0x9b39
    194c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1950:	0d110000 	ldceq	0, cr0, [r1, #-0]
    1954:	3a080300 	bcc	20255c <__core1_vectors-0xdfdaa4>
    1958:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    195c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1960:	1200000b 	andne	r0, r0, #11
    1964:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1968:	0b3a050b 	bleq	e82d9c <__core1_vectors-0x17d264>
    196c:	0b390b3b 	bleq	e44660 <__core1_vectors-0x1bb9a0>
    1970:	00001301 	andeq	r1, r0, r1, lsl #6
    1974:	03000d13 	movweq	r0, #3347	; 0xd13
    1978:	3b0b3a0e 	blcc	2d01b8 <__core1_vectors-0xd2fe48>
    197c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1980:	00053813 	andeq	r3, r5, r3, lsl r8
    1984:	00151400 	andseq	r1, r5, r0, lsl #8
    1988:	00001927 	andeq	r1, r0, r7, lsr #18
    198c:	27011515 	smladcs	r1, r5, r5, r1
    1990:	01134919 	tsteq	r3, r9, lsl r9
    1994:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1998:	13490005 	movtne	r0, #36869	; 0x9005
    199c:	13170000 	tstne	r7, #0
    19a0:	0b0e0301 	bleq	3825ac <__core1_vectors-0xc7da54>
    19a4:	3b0b3a05 	blcc	2d01c0 <__core1_vectors-0xd2fe40>
    19a8:	010b3905 	tsteq	fp, r5, lsl #18
    19ac:	18000013 	stmdane	r0, {r0, r1, r4}
    19b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    19b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    19b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    19bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    19c0:	03000d19 	movweq	r0, #3353	; 0xd19
    19c4:	3b0b3a0e 	blcc	2d0204 <__core1_vectors-0xd2fdfc>
    19c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    19cc:	00053813 	andeq	r3, r5, r3, lsl r8
    19d0:	01131a00 	tsteq	r3, r0, lsl #20
    19d4:	0b0b0e03 	bleq	2c51e8 <__core1_vectors-0xd3ae18>
    19d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    19dc:	13010b39 	movwne	r0, #6969	; 0x1b39
    19e0:	131b0000 	tstne	fp, #0
    19e4:	3a0b0b01 	bcc	2c45f0 <__core1_vectors-0xd3ba10>
    19e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    19ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    19f0:	01171c00 	tsteq	r7, r0, lsl #24
    19f4:	0b3a0b0b 	bleq	e84628 <__core1_vectors-0x17b9d8>
    19f8:	0b39053b 	bleq	e42eec <__core1_vectors-0x1bd114>
    19fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1a00:	03000d1d 	movweq	r0, #3357	; 0xd1d
    1a04:	3b0b3a0e 	blcc	2d0244 <__core1_vectors-0xd2fdbc>
    1a08:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1a0c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1a10:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    1a14:	0000193c 	andeq	r1, r0, ip, lsr r9
    1a18:	2701151f 	smladcs	r1, pc, r5, r1	; <UNPREDICTABLE>
    1a1c:	00130119 	andseq	r0, r3, r9, lsl r1
    1a20:	00342000 	eorseq	r2, r4, r0
    1a24:	0b3a0e03 	bleq	e85238 <__core1_vectors-0x17adc8>
    1a28:	0b39053b 	bleq	e42f1c <__core1_vectors-0x1bd0e4>
    1a2c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1a30:	0000193c 	andeq	r1, r0, ip, lsr r9
    1a34:	00002121 	andeq	r2, r0, r1, lsr #2
    1a38:	01042200 	mrseq	r2, R12_usr
    1a3c:	0b3e0e03 	bleq	f85250 <__core1_vectors-0x7adb0>
    1a40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1a44:	0b3b0b3a 	bleq	ec4734 <__core1_vectors-0x13b8cc>
    1a48:	13010b39 	movwne	r0, #6969	; 0x1b39
    1a4c:	28230000 	stmdacs	r3!, {}	; <UNPREDICTABLE>
    1a50:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1a54:	2400000b 	strcs	r0, [r0], #-11
    1a58:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1a5c:	0000051c 	andeq	r0, r0, ip, lsl r5
    1a60:	03003425 	movweq	r3, #1061	; 0x425
    1a64:	3b0b3a0e 	blcc	2d02a4 <__core1_vectors-0xd2fd5c>
    1a68:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1a6c:	00180213 	andseq	r0, r8, r3, lsl r2
    1a70:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
    1a74:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1a78:	0b3b0b3a 	bleq	ec4768 <__core1_vectors-0x13b898>
    1a7c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1a80:	01111349 	tsteq	r1, r9, asr #6
    1a84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1a88:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1a8c:	27000013 	smladcs	r0, r3, r0, r0
    1a90:	08030005 	stmdaeq	r3, {r0, r2}
    1a94:	0b3b0b3a 	bleq	ec4784 <__core1_vectors-0x13b87c>
    1a98:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a9c:	00001802 	andeq	r1, r0, r2, lsl #16
    1aa0:	03000528 	movweq	r0, #1320	; 0x528
    1aa4:	3b0b3a0e 	blcc	2d02e4 <__core1_vectors-0xd2fd1c>
    1aa8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1aac:	00180213 	andseq	r0, r8, r3, lsl r2
    1ab0:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    1ab4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1ab8:	0b3b0b3a 	bleq	ec47a8 <__core1_vectors-0x13b858>
    1abc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1ac0:	01111349 	tsteq	r1, r9, asr #6
    1ac4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1ac8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1acc:	2a000013 	bcs	1b20 <__core1_vectors-0xffe4e0>
    1ad0:	0111010b 	tsteq	r1, fp, lsl #2
    1ad4:	00000612 	andeq	r0, r0, r2, lsl r6
    1ad8:	0300342b 	movweq	r3, #1067	; 0x42b
    1adc:	3b0b3a08 	blcc	2d0304 <__core1_vectors-0xd2fcfc>
    1ae0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ae4:	00180213 	andseq	r0, r8, r3, lsl r2
    1ae8:	00262c00 	eoreq	r2, r6, r0, lsl #24
    1aec:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
    1af0:	3a0e0301 	bcc	3826fc <__core1_vectors-0xc7d904>
    1af4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1af8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1afc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1b00:	96184006 	ldrls	r4, [r8], -r6
    1b04:	13011942 	movwne	r1, #6466	; 0x1942
    1b08:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    1b0c:	03193f01 	tsteq	r9, #1, 30
    1b10:	3b0b3a0e 	blcc	2d0350 <__core1_vectors-0xd2fcb0>
    1b14:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1b18:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1b1c:	97184006 	ldrls	r4, [r8, -r6]
    1b20:	13011942 	movwne	r1, #6466	; 0x1942
    1b24:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
    1b28:	03193f01 	tsteq	r9, #1, 30
    1b2c:	3b0b3a0e 	blcc	2d036c <__core1_vectors-0xd2fc94>
    1b30:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1b34:	11134919 	tstne	r3, r9, lsl r9
    1b38:	40061201 	andmi	r1, r6, r1, lsl #4
    1b3c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1b40:	01000000 	mrseq	r0, (UNDEF: 0)
    1b44:	06100011 			; <UNDEFINED> instruction: 0x06100011
    1b48:	01120111 	tsteq	r2, r1, lsl r1
    1b4c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1b50:	05130e25 	ldreq	r0, [r3, #-3621]	; 0xfffff1db
    1b54:	01000000 	mrseq	r0, (UNDEF: 0)
    1b58:	06100011 			; <UNDEFINED> instruction: 0x06100011
    1b5c:	01120111 	tsteq	r2, r1, lsl r1
    1b60:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1b64:	05130e25 	ldreq	r0, [r3, #-3621]	; 0xfffff1db
    1b68:	01000000 	mrseq	r0, (UNDEF: 0)
    1b6c:	06100011 			; <UNDEFINED> instruction: 0x06100011
    1b70:	01120111 	tsteq	r2, r1, lsl r1
    1b74:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1b78:	05130e25 	ldreq	r0, [r3, #-3621]	; 0xfffff1db
    1b7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b80:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1b84:	0e030b13 	vmoveq.32	d3[0], r0
    1b88:	01110e1b 	tsteq	r1, fp, lsl lr
    1b8c:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1b90:	24020000 	strcs	r0, [r2], #-0
    1b94:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1b98:	000e030b 	andeq	r0, lr, fp, lsl #6
    1b9c:	00240300 	eoreq	r0, r4, r0, lsl #6
    1ba0:	0b3e0b0b 	bleq	f847d4 <__core1_vectors-0x7b82c>
    1ba4:	00000803 	andeq	r0, r0, r3, lsl #16
    1ba8:	03001604 	movweq	r1, #1540	; 0x604
    1bac:	3b0b3a0e 	blcc	2d03ec <__core1_vectors-0xd2fc14>
    1bb0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1bb4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    1bb8:	0b0b000f 	bleq	2c1bfc <__core1_vectors-0xd3e404>
    1bbc:	00001349 	andeq	r1, r0, r9, asr #6
    1bc0:	27011506 	strcs	r1, [r1, -r6, lsl #10]
    1bc4:	01134919 	tsteq	r3, r9, lsl r9
    1bc8:	07000013 	smladeq	r0, r3, r0, r0
    1bcc:	13490005 	movtne	r0, #36869	; 0x9005
    1bd0:	26080000 	strcs	r0, [r8], -r0
    1bd4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1bd8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1bdc:	0b3b0b3a 	bleq	ec48cc <__core1_vectors-0x13b734>
    1be0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1be4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1be8:	040a0000 	streq	r0, [sl], #-0
    1bec:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
    1bf0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
    1bf4:	3b0b3a13 	blcc	2d0448 <__core1_vectors-0xd2fbb8>
    1bf8:	010b390b 	tsteq	fp, fp, lsl #18
    1bfc:	0b000013 	bleq	1c50 <__core1_vectors-0xffe3b0>
    1c00:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1c04:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1c08:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1c0c:	00130113 	andseq	r0, r3, r3, lsl r1
    1c10:	00210d00 	eoreq	r0, r1, r0, lsl #26
    1c14:	260e0000 	strcs	r0, [lr], -r0
    1c18:	00134900 	andseq	r4, r3, r0, lsl #18
    1c1c:	00340f00 	eorseq	r0, r4, r0, lsl #30
    1c20:	0b3a0e03 	bleq	e85434 <__core1_vectors-0x17abcc>
    1c24:	0b39053b 	bleq	e43118 <__core1_vectors-0x1bcee8>
    1c28:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1c2c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1c30:	03001310 	movweq	r1, #784	; 0x310
    1c34:	00193c0e 	andseq	r3, r9, lr, lsl #24
    1c38:	00151100 	andseq	r1, r5, r0, lsl #2
    1c3c:	00001927 	andeq	r1, r0, r7, lsr #18
    1c40:	03001712 	movweq	r1, #1810	; 0x712
    1c44:	00193c0e 	andseq	r3, r9, lr, lsl #24
    1c48:	01131300 	tsteq	r3, r0, lsl #6
    1c4c:	0b0b0e03 	bleq	2c5460 <__core1_vectors-0xd3aba0>
    1c50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c54:	13010b39 	movwne	r0, #6969	; 0x1b39
    1c58:	0d140000 	ldceq	0, cr0, [r4, #-0]
    1c5c:	3a0e0300 	bcc	382864 <__core1_vectors-0xc7d79c>
    1c60:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c64:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1c68:	1500000b 	strne	r0, [r0, #-11]
    1c6c:	13490021 	movtne	r0, #36897	; 0x9021
    1c70:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1c74:	03010416 	movweq	r0, #5142	; 0x1416
    1c78:	0b0b3e0e 	bleq	2d14b8 <__core1_vectors-0xd2eb48>
    1c7c:	3a13490b 	bcc	4d40b0 <__core1_vectors-0xb2bf50>
    1c80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c84:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c88:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    1c8c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1c90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c94:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1c98:	01111349 	tsteq	r1, r9, asr #6
    1c9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1ca0:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1ca4:	18000013 	stmdane	r0, {r0, r1, r4}
    1ca8:	08030005 	stmdaeq	r3, {r0, r2}
    1cac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1cb0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1cb4:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1cb8:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    1cbc:	08030005 	stmdaeq	r3, {r0, r2}
    1cc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1cc4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1cc8:	00001802 	andeq	r1, r0, r2, lsl #16
    1ccc:	0300341a 	movweq	r3, #1050	; 0x41a
    1cd0:	3b0b3a08 	blcc	2d04f8 <__core1_vectors-0xd2fb08>
    1cd4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1cd8:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    1cdc:	00001742 	andeq	r1, r0, r2, asr #14
    1ce0:	00110100 	andseq	r0, r1, r0, lsl #2
    1ce4:	01110610 	tsteq	r1, r0, lsl r6
    1ce8:	0e030112 	mcreq	1, 0, r0, cr3, cr2, {0}
    1cec:	0e250e1b 	mcreq	14, 1, r0, cr5, cr11, {0}
    1cf0:	00000513 	andeq	r0, r0, r3, lsl r5
    1cf4:	00110100 	andseq	r0, r1, r0, lsl #2
    1cf8:	01110610 	tsteq	r1, r0, lsl r6
    1cfc:	0e030112 	mcreq	1, 0, r0, cr3, cr2, {0}
    1d00:	0e250e1b 	mcreq	14, 1, r0, cr5, cr11, {0}
    1d04:	00000513 	andeq	r0, r0, r3, lsl r5
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
{
   0:	00000154 	andeq	r0, r0, r4, asr r1
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  14:	00000098 	muleq	r0, r8, r0
    ALT_PRINTF("\n");
  18:	010000dc 	ldrdeq	r0, [r0, -ip]
  1c:	00000038 	andeq	r0, r0, r8, lsr r0
  20:	01000114 	tsteq	r0, r4, lsl r1
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	00000054 	andeq	r0, r0, r4, asr r0
  28:	01000168 	tsteq	r0, r8, ror #2
  2c:	00000054 	andeq	r0, r0, r4, asr r0
  30:	010001bc 			; <UNDEFINED> instruction: 0x010001bc
  34:	00000158 	andeq	r0, r0, r8, asr r1
  38:	01000314 	tsteq	r0, r4, lsl r3
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	00000190 	muleq	r0, r0, r1
  40:	010004a4 	smlatbeq	r0, r4, r4, r0
  44:	00000220 	andeq	r0, r0, r0, lsr #4
  48:	010006c4 	smlabteq	r0, r4, r6, r0
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	0000006c 	andeq	r0, r0, ip, rrx
  50:	01000730 	tsteq	r0, r0, lsr r7
  54:	00000040 	andeq	r0, r0, r0, asr #32
  58:	01000770 	tsteq	r0, r0, ror r7
  5c:	00000040 	andeq	r0, r0, r0, asr #32
  60:	010007b0 			; <UNDEFINED> instruction: 0x010007b0
  64:	0000006c 	andeq	r0, r0, ip, rrx
  68:	0100081c 	tsteq	r0, ip, lsl r8
  6c:	00000040 	andeq	r0, r0, r0, asr #32
}
  70:	0100085c 	tsteq	r0, ip, asr r8
  74:	00000068 	andeq	r0, r0, r8, rrx
  78:	010008c4 	smlabteq	r0, r4, r8, r0
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
  7c:	0000006c 	andeq	r0, r0, ip, rrx
  80:	01000930 	tsteq	r0, r0, lsr r9
  84:	0000006c 	andeq	r0, r0, ip, rrx
  88:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
  8c:	0000006c 	andeq	r0, r0, ip, rrx
  90:	01000a08 	tsteq	r0, r8, lsl #20
      *(pmem->toptr)=0;
  94:	0000006c 	andeq	r0, r0, ip, rrx
  98:	01000a74 	tsteq	r0, r4, ror sl
  9c:	0000006c 	andeq	r0, r0, ip, rrx
  a0:	01000ae0 	smlatteq	r0, r0, sl, r0
}
  a4:	0000006c 	andeq	r0, r0, ip, rrx
  a8:	01000b4c 	tsteq	r0, ip, asr #22
  ac:	000000dc 	ldrdeq	r0, [r0], -ip
  b0:	01000c28 	tsteq	r0, r8, lsr #24
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
  b4:	00000030 	andeq	r0, r0, r0, lsr r0
  b8:	01000c58 	tsteq	r0, r8, asr ip
        break;
  bc:	00000030 	andeq	r0, r0, r0, lsr r0
    return ALT_E_SUCCESS;
  c0:	01000c88 	smlabbeq	r0, r8, ip, r0
  c4:	00000030 	andeq	r0, r0, r0, lsr r0
        return ALT_E_ERROR;
  c8:	01000cb8 			; <UNDEFINED> instruction: 0x01000cb8
}
  cc:	00000068 	andeq	r0, r0, r8, rrx
  d0:	01000d20 	tsteq	r0, r0, lsr #26
  d4:	000000a4 	andeq	r0, r0, r4, lsr #1
  d8:	01000dc4 	smlabteq	r0, r4, sp, r0
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  dc:	00000068 	andeq	r0, r0, r8, rrx
  e0:	01000e2c 	tsteq	r0, ip, lsr #28
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	00000000 	andeq	r0, r0, r0
  ec:	0000005c 	andeq	r0, r0, ip, asr r0
  f0:	00000000 	andeq	r0, r0, r0
    return dst;
  f4:	0000005c 	andeq	r0, r0, ip, asr r0
}
  f8:	01000e54 	tsteq	r0, r4, asr lr
  fc:	00000068 	andeq	r0, r0, r8, rrx
 100:	01000ebc 			; <UNDEFINED> instruction: 0x01000ebc
 104:	00000068 	andeq	r0, r0, r8, rrx
        return (int)cnt;
 108:	01000f24 	tsteq	r0, r4, lsr #30
 10c:	00000068 	andeq	r0, r0, r8, rrx
    errno = ENOSYS;
 110:	01000f8c 	smlabbeq	r0, ip, pc, r0	; <UNPREDICTABLE>
 114:	0000023c 	andeq	r0, r0, ip, lsr r2
 118:	00000000 	andeq	r0, r0, r0
 11c:	00000034 	andeq	r0, r0, r4, lsr r0
    return -1;
 120:	00000000 	andeq	r0, r0, r0
}
 124:	00000264 	andeq	r0, r0, r4, ror #4
 128:	00000000 	andeq	r0, r0, r0
 12c:	00000034 	andeq	r0, r0, r4, lsr r0
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 130:	00000000 	andeq	r0, r0, r0
 134:	00000264 	andeq	r0, r0, r4, ror #4
 138:	010011c8 	smlabteq	r0, r8, r1, r1
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	00000048 	andeq	r0, r0, r8, asr #32
 140:	01001210 	tsteq	r0, r0, lsl r2
 144:	00000264 	andeq	r0, r0, r4, ror #4
 148:	00000000 	andeq	r0, r0, r0
 14c:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 158:	000001ec 	andeq	r0, r0, ip, ror #3
 15c:	17e60002 	strbne	r0, [r6, r2]!
 160:	00040000 	andeq	r0, r4, r0
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	00000000 	andeq	r0, r0, r0
 168:	01001474 	tsteq	r0, r4, ror r4
 16c:	00000028 	andeq	r0, r0, r8, lsr #32
 170:	0100149c 			; <UNDEFINED> instruction: 0x0100149c
 174:	00000120 	andeq	r0, r0, r0, lsr #2
    return ALT_E_SUCCESS;
 178:	010015bc 			; <UNDEFINED> instruction: 0x010015bc
}
 17c:	00000158 	andeq	r0, r0, r8, asr r1
 180:	01001714 	tsteq	r0, r4, lsl r7
 184:	0000015c 	andeq	r0, r0, ip, asr r1
    while (coalesce->size)
 188:	00000000 	andeq	r0, r0, r0
 18c:	00000090 	muleq	r0, r0, r0
            break;
 190:	00000000 	andeq	r0, r0, r0
    *segpa   = thissegpa;
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
 198:	01001870 	tsteq	r0, r0, ror r8
 19c:	00000048 	andeq	r0, r0, r8, asr #32
    *segsize = thissegsize;
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1a8:	00000000 	andeq	r0, r0, r0
    return ALT_E_SUCCESS;
 1ac:	000000a4 	andeq	r0, r0, r4, lsr #1
}
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	000000a0 	andeq	r0, r0, r0, lsr #1
 1b8:	010018b8 			; <UNDEFINED> instruction: 0x010018b8
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
 1bc:	00000080 	andeq	r0, r0, r0, lsl #1
 1c0:	01001938 	tsteq	r0, r8, lsr r9
 1c4:	00000080 	andeq	r0, r0, r0, lsl #1
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	000000d8 	ldrdeq	r0, [r0], -r8
    clkStep = 9 * clk100; /* 900MHz */
 1d0:	010019b8 			; <UNDEFINED> instruction: 0x010019b8
 1d4:	00000104 	andeq	r0, r0, r4, lsl #2
 1d8:	01001abc 			; <UNDEFINED> instruction: 0x01001abc
 1dc:	0000003c 	andeq	r0, r0, ip, lsr r0
 1e0:	00000000 	andeq	r0, r0, r0
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 1e4:	000000a8 	andeq	r0, r0, r8, lsr #1
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	000000a8 	andeq	r0, r0, r8, lsr #1
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	000000a8 	andeq	r0, r0, r8, lsr #1
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	000000a8 	andeq	r0, r0, r8, lsr #1
 200:	00000000 	andeq	r0, r0, r0
 204:	000000a8 	andeq	r0, r0, r8, lsr #1
 208:	00000000 	andeq	r0, r0, r0
 20c:	0000009c 	muleq	r0, ip, r0
 210:	00000000 	andeq	r0, r0, r0
        clkStep += clk100;
 214:	0000009c 	muleq	r0, ip, r0
 218:	00000000 	andeq	r0, r0, r0
 21c:	000000dc 	ldrdeq	r0, [r0], -ip
 220:	00000000 	andeq	r0, r0, r0
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 224:	000000dc 	ldrdeq	r0, [r0], -ip
 228:	00000000 	andeq	r0, r0, r0
 22c:	0000005c 	andeq	r0, r0, ip, asr r0
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 230:	01001af8 	strdeq	r1, [r0, -r8]
 234:	00000074 	andeq	r0, r0, r4, ror r0
 238:	00000000 	andeq	r0, r0, r0
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
 240:	01001b6c 	tsteq	r0, ip, ror #22
 244:	00000078 	andeq	r0, r0, r8, ror r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	00000080 	andeq	r0, r0, r0, lsl #1
 250:	01001be4 	smlatteq	r0, r4, fp, r1
 254:	00000084 	andeq	r0, r0, r4, lsl #1
 258:	00000000 	andeq	r0, r0, r0
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 25c:	0000002c 	andeq	r0, r0, ip, lsr #32
 260:	00000000 	andeq	r0, r0, r0
 264:	0000002c 	andeq	r0, r0, ip, lsr #32
 268:	00000000 	andeq	r0, r0, r0
 26c:	0000002c 	andeq	r0, r0, ip, lsr #32
 270:	00000000 	andeq	r0, r0, r0
 274:	0000002c 	andeq	r0, r0, ip, lsr #32
 278:	00000000 	andeq	r0, r0, r0
 27c:	0000002c 	andeq	r0, r0, ip, lsr #32
 280:	00000000 	andeq	r0, r0, r0
 284:	0000002c 	andeq	r0, r0, ip, lsr #32
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 288:	00000000 	andeq	r0, r0, r0
 28c:	0000002c 	andeq	r0, r0, ip, lsr #32
 290:	00000000 	andeq	r0, r0, r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 294:	0000002c 	andeq	r0, r0, ip, lsr #32
 298:	01001c68 	tsteq	r0, r8, ror #24
 29c:	0000002c 	andeq	r0, r0, ip, lsr #32
 2a0:	00000000 	andeq	r0, r0, r0
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
 2a4:	0000007c 	andeq	r0, r0, ip, ror r0
 2a8:	01001c94 			; <UNDEFINED> instruction: 0x01001c94
 2ac:	00000154 	andeq	r0, r0, r4, asr r1
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000078 	andeq	r0, r0, r8, ror r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	00000078 	andeq	r0, r0, r8, ror r0
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
 2c8:	01001de8 	smlatteq	r0, r8, sp, r1
 2cc:	00000080 	andeq	r0, r0, r0, lsl #1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000084 	andeq	r0, r0, r4, lsl #1
 2d8:	00000000 	andeq	r0, r0, r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 2dc:	00000080 	andeq	r0, r0, r0, lsl #1
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2e8:	00000000 	andeq	r0, r0, r0
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 2ec:	00000044 	andeq	r0, r0, r4, asr #32
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 300:	00000000 	andeq	r0, r0, r0
 304:	0000002c 	andeq	r0, r0, ip, lsr #32
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
 310:	00000000 	andeq	r0, r0, r0
 314:	0000002c 	andeq	r0, r0, ip, lsr #32
 318:	01001e68 	tsteq	r0, r8, ror #28
 31c:	0000002c 	andeq	r0, r0, ip, lsr #32
 320:	00000000 	andeq	r0, r0, r0
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
 328:	01001e94 			; <UNDEFINED> instruction: 0x01001e94
 32c:	0000002c 	andeq	r0, r0, ip, lsr #32
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
 330:	00000000 	andeq	r0, r0, r0
 334:	0000002c 	andeq	r0, r0, ip, lsr #32
 338:	00000000 	andeq	r0, r0, r0
 33c:	0000006c 	andeq	r0, r0, ip, rrx
	...
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
 348:	00000114 	andeq	r0, r0, r4, lsl r1
 34c:	28ea0002 	stmiacs	sl!, {r1}^
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 350:	00040000 	andeq	r0, r4, r0
 354:	00000000 	andeq	r0, r0, r0
 358:	01001ec0 	smlabteq	r0, r0, lr, r1
 35c:	00000024 	andeq	r0, r0, r4, lsr #32
 360:	01001ee4 	smlatteq	r0, r4, lr, r1
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
 368:	00000000 	andeq	r0, r0, r0
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	01001f00 	tsteq	r0, r0, lsl #30
 374:	0000008c 	andeq	r0, r0, ip, lsl #1
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 378:	00000000 	andeq	r0, r0, r0
 37c:	00000150 	andeq	r0, r0, r0, asr r1
 380:	00000000 	andeq	r0, r0, r0
 384:	00000168 	andeq	r0, r0, r8, ror #2
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000068 	andeq	r0, r0, r8, rrx
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
 390:	01001f8c 	smlabbeq	r0, ip, pc, r1	; <UNPREDICTABLE>
 394:	00000050 	andeq	r0, r0, r0, asr r0
 398:	00000000 	andeq	r0, r0, r0
 39c:	00000074 	andeq	r0, r0, r4, ror r0
 3a0:	01001fdc 	ldrdeq	r1, [r0, -ip]
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
 3a4:	000000e0 	andeq	r0, r0, r0, ror #1
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	00000038 	andeq	r0, r0, r8, lsr r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	0000007c 	andeq	r0, r0, ip, ror r0
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
 3b8:	010020bc 	strheq	r2, [r0, -ip]
 3bc:	000000b4 	strheq	r0, [r0], -r4
 3c0:	01002170 	tsteq	r0, r0, ror r1
 3c4:	000000e0 	andeq	r0, r0, r0, ror #1
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	00000078 	andeq	r0, r0, r8, ror r0
 3d0:	01002250 	tsteq	r0, r0, asr r2
 3d4:	00000034 	andeq	r0, r0, r4, lsr r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	00000034 	andeq	r0, r0, r4, lsr r0
 3e0:	01002284 	smlabbeq	r0, r4, r2, r2
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
 3e4:	00000068 	andeq	r0, r0, r8, rrx
 3e8:	010022ec 	smlatteq	r0, ip, r2, r2
 3ec:	00000328 	andeq	r0, r0, r8, lsr #6
 3f0:	01002614 	tsteq	r0, r4, lsl r6
 3f4:	00000068 	andeq	r0, r0, r8, rrx
 3f8:	0100267c 	tsteq	r0, ip, ror r6
 3fc:	00000060 	andeq	r0, r0, r0, rrx
 400:	010026dc 	ldrdeq	r2, [r0, -ip]
 404:	00000124 	andeq	r0, r0, r4, lsr #2
 408:	01002800 	tsteq	r0, r0, lsl #16
 40c:	00000124 	andeq	r0, r0, r4, lsr #2
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
 410:	01002924 	tsteq	r0, r4, lsr #18
 414:	0000010c 	andeq	r0, r0, ip, lsl #2
 418:	01002a30 	tsteq	r0, r0, lsr sl
 41c:	00000110 	andeq	r0, r0, r0, lsl r1
 420:	01002b40 	tsteq	r0, r0, asr #22
 424:	00000048 	andeq	r0, r0, r8, asr #32
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
 428:	01002b88 	smlabbeq	r0, r8, fp, r2
 42c:	00000dd8 	ldrdeq	r0, [r0], -r8
 430:	01003960 	tsteq	r0, r0, ror #18
 434:	0000013c 	andeq	r0, r0, ip, lsr r1
 438:	00000000 	andeq	r0, r0, r0
 43c:	00000184 	andeq	r0, r0, r4, lsl #3
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
 440:	00000000 	andeq	r0, r0, r0
 444:	000000e0 	andeq	r0, r0, r0, ror #1
 448:	00000000 	andeq	r0, r0, r0
 44c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 450:	00000000 	andeq	r0, r0, r0
 454:	00000044 	andeq	r0, r0, r4, asr #32
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
 460:	00000084 	andeq	r0, r0, r4, lsl #1
 464:	45da0002 	ldrbmi	r0, [sl, #2]
 468:	00040000 	andeq	r0, r4, r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
 474:	00000030 	andeq	r0, r0, r0, lsr r0
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000090 	muleq	r0, r0, r0
 480:	00000000 	andeq	r0, r0, r0
 484:	000000b4 	strheq	r0, [r0], -r4
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000078 	andeq	r0, r0, r8, ror r0
 490:	00000000 	andeq	r0, r0, r0
 494:	00000068 	andeq	r0, r0, r8, rrx
 498:	00000000 	andeq	r0, r0, r0
 49c:	00000050 	andeq	r0, r0, r0, asr r0
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	00000048 	andeq	r0, r0, r8, asr #32
 4a8:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
 4ac:	0000006c 	andeq	r0, r0, ip, rrx
 4b0:	01003b08 	tsteq	r0, r8, lsl #22
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
 4b4:	00000058 	andeq	r0, r0, r8, asr r0
 4b8:	01003b60 	tsteq	r0, r0, ror #22
 4bc:	00000098 	muleq	r0, r8, r0
 4c0:	01003bf8 	strdeq	r3, [r0, -r8]
 4c4:	0000013c 	andeq	r0, r0, ip, lsr r1
 4c8:	01003d34 	tsteq	r0, r4, lsr sp
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
 4cc:	00000178 	andeq	r0, r0, r8, ror r1
 4d0:	01003eac 	smlatbeq	r0, ip, lr, r3
 4d4:	0000081c 	andeq	r0, r0, ip, lsl r8
 4d8:	010046c8 	smlabteq	r0, r8, r6, r4
 4dc:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
	...
 4e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 4ec:	567e0002 	ldrbtpl	r0, [lr], -r2
 4f0:	00040000 	andeq	r0, r4, r0
 4f4:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
 4f8:	0100497c 	tsteq	r0, ip, ror r9
 4fc:	00000080 	andeq	r0, r0, r0, lsl #1
 500:	010049fc 	strdeq	r4, [r0, -ip]
 504:	000000d8 	ldrdeq	r0, [r0], -r8
 508:	00000000 	andeq	r0, r0, r0
 50c:	0000007c 	andeq	r0, r0, ip, ror r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
 518:	00000034 	andeq	r0, r0, r4, lsr r0
 51c:	63670002 	cmnvs	r7, #2
 520:	00040000 	andeq	r0, r4, r0
 524:	00000000 	andeq	r0, r0, r0
 528:	01004ad4 	ldrdeq	r4, [r0, -r4]
 52c:	00000078 	andeq	r0, r0, r8, ror r0
 530:	01004b4c 	tsteq	r0, ip, asr #22
 534:	0000005c 	andeq	r0, r0, ip, asr r0
 538:	01004ba8 	smlatbeq	r0, r8, fp, r4
 53c:	0000002c 	andeq	r0, r0, ip, lsr #32
 540:	01004bd4 	ldrdeq	r4, [r0, -r4]
 544:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 550:	00000024 	andeq	r0, r0, r4, lsr #32
 554:	6eb80002 	cdpvs	0, 11, cr0, cr8, cr2, {0}
 558:	00040000 	andeq	r0, r4, r0
 55c:	00000000 	andeq	r0, r0, r0
 560:	01000020 	tsteq	r0, r0, lsr #32
 564:	000000a8 	andeq	r0, r0, r8, lsr #1
 568:	010000c8 	smlabteq	r0, r8, r0, r0
 56c:	0000000c 	andeq	r0, r0, ip
	...
 578:	0000003c 	andeq	r0, r0, ip, lsr r0
 57c:	6fde0002 	svcvs	0x00de0002
 580:	00040000 	andeq	r0, r4, r0
 584:	00000000 	andeq	r0, r0, r0
 588:	01004ca4 	smlatbeq	r0, r4, ip, r4
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
 58c:	00000074 	andeq	r0, r0, r4, ror r0
 590:	01004d18 	tsteq	r0, r8, lsl sp
 594:	00000084 	andeq	r0, r0, r4, lsl #1
 598:	00000000 	andeq	r0, r0, r0
 59c:	00000108 	andeq	r0, r0, r8, lsl #2
 5a0:	00000000 	andeq	r0, r0, r0
 5a4:	00000040 	andeq	r0, r0, r0, asr #32
 5a8:	01004d9c 			; <UNDEFINED> instruction: 0x01004d9c
 5ac:	00000050 	andeq	r0, r0, r0, asr r0
	...
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
 5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5bc:	7b5d0002 	blvc	17405cc <__end__+0x7245ac>
 5c0:	00040000 	andeq	r0, r4, r0
 5c4:	00000000 	andeq	r0, r0, r0
 5c8:	010000d8 	ldrdeq	r0, [r0, -r8]
 5cc:	00000004 	andeq	r0, r0, r4
	...
 5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5dc:	7b830002 	blvc	fe0c05ec <__shm_end__+0xbe0c05ec>
 5e0:	00040000 	andeq	r0, r4, r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
 5e4:	00000000 	andeq	r0, r0, r0
 5e8:	01000000 	mrseq	r0, (UNDEF: 0)
 5ec:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 5f8:	000000b4 	strheq	r0, [r0], -r4
 5fc:	7ba90002 	blvc	fea4060c <__shm_end__+0xbea4060c>
 600:	00040000 	andeq	r0, r4, r0
 604:	00000000 	andeq	r0, r0, r0
 608:	01004dec 	smlatteq	r0, ip, sp, r4
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
 610:	01004e08 	tsteq	r0, r8, lsl #28
 614:	0000001c 	andeq	r0, r0, ip, lsl r0
 618:	01004e24 	tsteq	r0, r4, lsr #28
 61c:	00000054 	andeq	r0, r0, r4, asr r0
 620:	01004e78 	tsteq	r0, r8, ror lr
 624:	0000008c 	andeq	r0, r0, ip, lsl #1
 628:	01004f04 	tsteq	r0, r4, lsl #30
 62c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 630:	01004fd4 	ldrdeq	r4, [r0, -r4]
 634:	00000118 	andeq	r0, r0, r8, lsl r1
 638:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
 63c:	0000005c 	andeq	r0, r0, ip, asr r0
 640:	010050ec 	smlatteq	r0, ip, r0, r5
 644:	0000003c 	andeq	r0, r0, ip, lsr r0
 648:	00000000 	andeq	r0, r0, r0
 64c:	00000030 	andeq	r0, r0, r0, lsr r0
 650:	00000000 	andeq	r0, r0, r0
 654:	000000dc 	ldrdeq	r0, [r0], -ip
 658:	00000000 	andeq	r0, r0, r0
 65c:	00000090 	muleq	r0, r0, r0
 660:	00000000 	andeq	r0, r0, r0
 664:	00000084 	andeq	r0, r0, r4, lsl #1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
 668:	00000000 	andeq	r0, r0, r0
 66c:	00000028 	andeq	r0, r0, r8, lsr #32
 670:	00000000 	andeq	r0, r0, r0
 674:	000000ec 	andeq	r0, r0, ip, ror #1
 678:	00000000 	andeq	r0, r0, r0
 67c:	0000006c 	andeq	r0, r0, ip, rrx
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
 680:	00000000 	andeq	r0, r0, r0
 684:	00000044 	andeq	r0, r0, r4, asr #32
 688:	00000000 	andeq	r0, r0, r0
 68c:	00000088 	andeq	r0, r0, r8, lsl #1
 690:	00000000 	andeq	r0, r0, r0
 694:	0000006c 	andeq	r0, r0, ip, rrx
 698:	00000000 	andeq	r0, r0, r0
 69c:	00000188 	andeq	r0, r0, r8, lsl #3
 6a0:	00000000 	andeq	r0, r0, r0
 6a4:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
 6b0:	00000074 	andeq	r0, r0, r4, ror r0
 6b4:	8e1a0002 	cdphi	0, 1, cr0, cr10, cr2, {0}
 6b8:	00040000 	andeq	r0, r4, r0
 6bc:	00000000 	andeq	r0, r0, r0
 6c0:	01005128 	tsteq	r0, r8, lsr #2
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
 6c4:	000000d8 	ldrdeq	r0, [r0], -r8
 6c8:	00000000 	andeq	r0, r0, r0
 6cc:	00000044 	andeq	r0, r0, r4, asr #32
 6d0:	01005200 	mrseq	r5, R8_usr
 6d4:	0000003c 	andeq	r0, r0, ip, lsr r0
 6d8:	0100523c 	tsteq	r0, ip, lsr r2
 6dc:	00000070 	andeq	r0, r0, r0, ror r0
 6e0:	00000000 	andeq	r0, r0, r0
 6e4:	00000064 	andeq	r0, r0, r4, rrx
 6e8:	010052ac 	smlatbeq	r0, ip, r2, r5
 6ec:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 6f0:	00000000 	andeq	r0, r0, r0
 6f4:	00000130 	andeq	r0, r0, r0, lsr r1
 6f8:	00000000 	andeq	r0, r0, r0
 6fc:	000000b4 	strheq	r0, [r0], -r4
 700:	00000000 	andeq	r0, r0, r0
 704:	00000024 	andeq	r0, r0, r4, lsr #32
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
 708:	00000000 	andeq	r0, r0, r0
 70c:	00000034 	andeq	r0, r0, r4, lsr r0
 710:	00000000 	andeq	r0, r0, r0
 714:	00000050 	andeq	r0, r0, r0, asr r0
 718:	00000000 	andeq	r0, r0, r0
 71c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
 728:	0000001c 	andeq	r0, r0, ip, lsl r0
 72c:	9eed0002 	cdpls	0, 14, cr0, cr13, cr2, {0}
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
 730:	00040000 	andeq	r0, r4, r0
 734:	00000000 	andeq	r0, r0, r0
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
 738:	0100535c 	tsteq	r0, ip, asr r3
 73c:	00000114 	andeq	r0, r0, r4, lsl r1
	...
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
 748:	0000001c 	andeq	r0, r0, ip, lsl r0
 74c:	9f130002 	svcls	0x00130002
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 750:	00040000 	andeq	r0, r4, r0
 754:	00000000 	andeq	r0, r0, r0
 758:	01005470 	tsteq	r0, r0, ror r4
 75c:	00000004 	andeq	r0, r0, r4
	...
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 76c:	9f390002 	svcls	0x00390002
 770:	00040000 	andeq	r0, r4, r0
 774:	00000000 	andeq	r0, r0, r0
 778:	01005474 	tsteq	r0, r4, ror r4
 77c:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 788:	0000001c 	andeq	r0, r0, ip, lsl r0
 78c:	9f5f0002 	svcls	0x005f0002
 790:	00040000 	andeq	r0, r4, r0
 794:	00000000 	andeq	r0, r0, r0
 798:	010054b0 			; <UNDEFINED> instruction: 0x010054b0
 79c:	00000130 	andeq	r0, r0, r0, lsr r1
	...
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 7a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7ac:	a9480002 	stmdbge	r8, {r1}^
 7b0:	00040000 	andeq	r0, r4, r0
 7b4:	00000000 	andeq	r0, r0, r0
 7b8:	010055e0 	smlatteq	r0, r0, r5, r5
 7bc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
 7c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7cc:	a96e0002 	stmdbge	lr!, {r1}^
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 7d0:	00040000 	andeq	r0, r4, r0
 7d4:	00000000 	andeq	r0, r0, r0
 7d8:	01005608 	tsteq	r0, r8, lsl #12
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
 7dc:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
{
   0:	00000001 	andeq	r0, r0, r1
   4:	00000001 	andeq	r0, r0, r1
   8:	010000dc 	ldrdeq	r0, [r0, -ip]
   c:	01000114 	tsteq	r0, r4, lsl r1
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	01000114 	tsteq	r0, r4, lsl r1
  14:	01000168 	tsteq	r0, r8, ror #2
    ALT_PRINTF("\n");
  18:	01000168 	tsteq	r0, r8, ror #2
  1c:	010001bc 			; <UNDEFINED> instruction: 0x010001bc
  20:	010001bc 			; <UNDEFINED> instruction: 0x010001bc
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	01000314 	tsteq	r0, r4, lsl r3
  28:	01000314 	tsteq	r0, r4, lsl r3
  2c:	010004a4 	smlatbeq	r0, r4, r4, r0
  30:	010004a4 	smlatbeq	r0, r4, r4, r0
  34:	010006c4 	smlabteq	r0, r4, r6, r0
  38:	010006c4 	smlabteq	r0, r4, r6, r0
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	01000730 	tsteq	r0, r0, lsr r7
  40:	01000730 	tsteq	r0, r0, lsr r7
  44:	01000770 	tsteq	r0, r0, ror r7
  48:	01000770 	tsteq	r0, r0, ror r7
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	010007b0 			; <UNDEFINED> instruction: 0x010007b0
  50:	010007b0 			; <UNDEFINED> instruction: 0x010007b0
  54:	0100081c 	tsteq	r0, ip, lsl r8
  58:	0100081c 	tsteq	r0, ip, lsl r8
  5c:	0100085c 	tsteq	r0, ip, asr r8
  60:	0100085c 	tsteq	r0, ip, asr r8
  64:	010008c4 	smlabteq	r0, r4, r8, r0
  68:	010008c4 	smlabteq	r0, r4, r8, r0
  6c:	01000930 	tsteq	r0, r0, lsr r9
}
  70:	01000930 	tsteq	r0, r0, lsr r9
  74:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
  78:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
  7c:	01000a08 	tsteq	r0, r8, lsl #20
  80:	01000a08 	tsteq	r0, r8, lsl #20
  84:	01000a74 	tsteq	r0, r4, ror sl
  88:	01000a74 	tsteq	r0, r4, ror sl
  8c:	01000ae0 	smlatteq	r0, r0, sl, r0
  90:	01000ae0 	smlatteq	r0, r0, sl, r0
      *(pmem->toptr)=0;
  94:	01000b4c 	tsteq	r0, ip, asr #22
  98:	01000b4c 	tsteq	r0, ip, asr #22
  9c:	01000c28 	tsteq	r0, r8, lsr #24
  a0:	01000c28 	tsteq	r0, r8, lsr #24
}
  a4:	01000c58 	tsteq	r0, r8, asr ip
  a8:	01000c58 	tsteq	r0, r8, asr ip
  ac:	01000c88 	smlabbeq	r0, r8, ip, r0
  b0:	01000c88 	smlabbeq	r0, r8, ip, r0
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
  b4:	01000cb8 			; <UNDEFINED> instruction: 0x01000cb8
  b8:	01000cb8 			; <UNDEFINED> instruction: 0x01000cb8
        break;
  bc:	01000d20 	tsteq	r0, r0, lsr #26
    return ALT_E_SUCCESS;
  c0:	01000d20 	tsteq	r0, r0, lsr #26
  c4:	01000dc4 	smlabteq	r0, r4, sp, r0
        return ALT_E_ERROR;
  c8:	01000dc4 	smlabteq	r0, r4, sp, r0
}
  cc:	01000e2c 	tsteq	r0, ip, lsr #28
  d0:	01000e2c 	tsteq	r0, ip, lsr #28
  d4:	01000e54 	tsteq	r0, r4, asr lr
  d8:	00000001 	andeq	r0, r0, r1
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  dc:	00000001 	andeq	r0, r0, r1
  e0:	00000001 	andeq	r0, r0, r1
  e4:	00000001 	andeq	r0, r0, r1
  e8:	01000e54 	tsteq	r0, r4, asr lr
  ec:	01000ebc 			; <UNDEFINED> instruction: 0x01000ebc
  f0:	01000ebc 			; <UNDEFINED> instruction: 0x01000ebc
    return dst;
  f4:	01000f24 	tsteq	r0, r4, lsr #30
}
  f8:	01000f24 	tsteq	r0, r4, lsr #30
  fc:	01000f8c 	smlabbeq	r0, ip, pc, r0	; <UNPREDICTABLE>
 100:	01000f8c 	smlabbeq	r0, ip, pc, r0	; <UNPREDICTABLE>
 104:	010011c8 	smlabteq	r0, r8, r1, r1
        return (int)cnt;
 108:	00000001 	andeq	r0, r0, r1
 10c:	00000001 	andeq	r0, r0, r1
    errno = ENOSYS;
 110:	00000001 	andeq	r0, r0, r1
 114:	00000001 	andeq	r0, r0, r1
 118:	00000001 	andeq	r0, r0, r1
 11c:	00000001 	andeq	r0, r0, r1
    return -1;
 120:	00000001 	andeq	r0, r0, r1
}
 124:	00000001 	andeq	r0, r0, r1
 128:	010011c8 	smlabteq	r0, r8, r1, r1
 12c:	01001210 	tsteq	r0, r0, lsl r2
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 130:	01001210 	tsteq	r0, r0, lsl r2
 134:	01001474 	tsteq	r0, r4, ror r4
 138:	00000001 	andeq	r0, r0, r1
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	00000001 	andeq	r0, r0, r1
	...
 148:	01001798 			; <UNDEFINED> instruction: 0x01001798
 14c:	010017fc 	strdeq	r1, [r0, -ip]
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 150:	01001800 	tsteq	r0, r0, lsl #16
 154:	0100182c 	tsteq	r0, ip, lsr #16
	...
 160:	01001474 	tsteq	r0, r4, ror r4
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	0100149c 			; <UNDEFINED> instruction: 0x0100149c
 168:	0100149c 			; <UNDEFINED> instruction: 0x0100149c
 16c:	010015bc 			; <UNDEFINED> instruction: 0x010015bc
 170:	010015bc 			; <UNDEFINED> instruction: 0x010015bc
 174:	01001714 	tsteq	r0, r4, lsl r7
    return ALT_E_SUCCESS;
 178:	01001714 	tsteq	r0, r4, lsl r7
}
 17c:	01001870 	tsteq	r0, r0, ror r8
 180:	00000001 	andeq	r0, r0, r1
 184:	00000001 	andeq	r0, r0, r1
    while (coalesce->size)
 188:	00000001 	andeq	r0, r0, r1
 18c:	00000001 	andeq	r0, r0, r1
            break;
 190:	01001870 	tsteq	r0, r0, ror r8
    *segpa   = thissegpa;
 194:	010018b8 			; <UNDEFINED> instruction: 0x010018b8
 198:	00000001 	andeq	r0, r0, r1
 19c:	00000001 	andeq	r0, r0, r1
    *segsize = thissegsize;
 1a0:	00000001 	andeq	r0, r0, r1
 1a4:	00000001 	andeq	r0, r0, r1
 1a8:	00000001 	andeq	r0, r0, r1
    return ALT_E_SUCCESS;
 1ac:	00000001 	andeq	r0, r0, r1
}
 1b0:	010018b8 			; <UNDEFINED> instruction: 0x010018b8
 1b4:	01001938 	tsteq	r0, r8, lsr r9
 1b8:	01001938 	tsteq	r0, r8, lsr r9
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
 1bc:	010019b8 			; <UNDEFINED> instruction: 0x010019b8
 1c0:	00000001 	andeq	r0, r0, r1
 1c4:	00000001 	andeq	r0, r0, r1
 1c8:	010019b8 			; <UNDEFINED> instruction: 0x010019b8
 1cc:	01001abc 			; <UNDEFINED> instruction: 0x01001abc
    clkStep = 9 * clk100; /* 900MHz */
 1d0:	01001abc 			; <UNDEFINED> instruction: 0x01001abc
 1d4:	01001af8 	strdeq	r1, [r0, -r8]
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	00000001 	andeq	r0, r0, r1
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 1e4:	00000001 	andeq	r0, r0, r1
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	00000001 	andeq	r0, r0, r1
 1f0:	00000001 	andeq	r0, r0, r1
 1f4:	00000001 	andeq	r0, r0, r1
 1f8:	00000001 	andeq	r0, r0, r1
 1fc:	00000001 	andeq	r0, r0, r1
 200:	00000001 	andeq	r0, r0, r1
 204:	00000001 	andeq	r0, r0, r1
 208:	00000001 	andeq	r0, r0, r1
 20c:	00000001 	andeq	r0, r0, r1
 210:	00000001 	andeq	r0, r0, r1
        clkStep += clk100;
 214:	00000001 	andeq	r0, r0, r1
 218:	00000001 	andeq	r0, r0, r1
 21c:	00000001 	andeq	r0, r0, r1
 220:	00000001 	andeq	r0, r0, r1
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 224:	00000001 	andeq	r0, r0, r1
 228:	01001af8 	strdeq	r1, [r0, -r8]
 22c:	01001b6c 	tsteq	r0, ip, ror #22
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 230:	00000001 	andeq	r0, r0, r1
 234:	00000001 	andeq	r0, r0, r1
 238:	01001b6c 	tsteq	r0, ip, ror #22
 23c:	01001be4 	smlatteq	r0, r4, fp, r1
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
 240:	00000001 	andeq	r0, r0, r1
 244:	00000001 	andeq	r0, r0, r1
 248:	01001be4 	smlatteq	r0, r4, fp, r1
 24c:	01001c68 	tsteq	r0, r8, ror #24
 250:	00000001 	andeq	r0, r0, r1
 254:	00000001 	andeq	r0, r0, r1
 258:	00000001 	andeq	r0, r0, r1
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 25c:	00000001 	andeq	r0, r0, r1
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	00000001 	andeq	r0, r0, r1
 26c:	00000001 	andeq	r0, r0, r1
 270:	00000001 	andeq	r0, r0, r1
 274:	00000001 	andeq	r0, r0, r1
 278:	00000001 	andeq	r0, r0, r1
 27c:	00000001 	andeq	r0, r0, r1
 280:	00000001 	andeq	r0, r0, r1
 284:	00000001 	andeq	r0, r0, r1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 288:	00000001 	andeq	r0, r0, r1
 28c:	00000001 	andeq	r0, r0, r1
 290:	01001c68 	tsteq	r0, r8, ror #24
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 294:	01001c94 			; <UNDEFINED> instruction: 0x01001c94
 298:	00000001 	andeq	r0, r0, r1
 29c:	00000001 	andeq	r0, r0, r1
 2a0:	01001c94 			; <UNDEFINED> instruction: 0x01001c94
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
 2a4:	01001de8 	smlatteq	r0, r8, sp, r1
 2a8:	00000001 	andeq	r0, r0, r1
 2ac:	00000001 	andeq	r0, r0, r1
 2b0:	00000001 	andeq	r0, r0, r1
 2b4:	00000001 	andeq	r0, r0, r1
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	01001de8 	smlatteq	r0, r8, sp, r1
 2c4:	01001e68 	tsteq	r0, r8, ror #28
 2c8:	00000001 	andeq	r0, r0, r1
 2cc:	00000001 	andeq	r0, r0, r1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 2dc:	00000001 	andeq	r0, r0, r1
 2e0:	00000001 	andeq	r0, r0, r1
 2e4:	00000001 	andeq	r0, r0, r1
 2e8:	00000001 	andeq	r0, r0, r1
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 2ec:	00000001 	andeq	r0, r0, r1
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
 300:	00000001 	andeq	r0, r0, r1
 304:	00000001 	andeq	r0, r0, r1
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 308:	00000001 	andeq	r0, r0, r1
 30c:	00000001 	andeq	r0, r0, r1
 310:	01001e68 	tsteq	r0, r8, ror #28
 314:	01001e94 			; <UNDEFINED> instruction: 0x01001e94
 318:	00000001 	andeq	r0, r0, r1
 31c:	00000001 	andeq	r0, r0, r1
 320:	01001e94 			; <UNDEFINED> instruction: 0x01001e94
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 324:	01001ec0 	smlabteq	r0, r0, lr, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
 330:	00000001 	andeq	r0, r0, r1
 334:	00000001 	andeq	r0, r0, r1
	...
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
 340:	00000001 	andeq	r0, r0, r1
 344:	00000001 	andeq	r0, r0, r1
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
	...
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 358:	01001ec0 	smlabteq	r0, r0, lr, r1
 35c:	01001ee4 	smlatteq	r0, r4, lr, r1
 360:	01001ee4 	smlatteq	r0, r4, lr, r1
 364:	01001f00 	tsteq	r0, r0, lsl #30
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
 370:	01001f00 	tsteq	r0, r0, lsl #30
 374:	01001f8c 	smlabbeq	r0, ip, pc, r1	; <UNPREDICTABLE>
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	00000001 	andeq	r0, r0, r1
 38c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
 390:	01001f8c 	smlabbeq	r0, ip, pc, r1	; <UNPREDICTABLE>
 394:	01001fdc 	ldrdeq	r1, [r0, -ip]
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	01001fdc 	ldrdeq	r1, [r0, -ip]
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
 3a4:	010020bc 	strheq	r2, [r0, -ip]
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
 3b8:	010020bc 	strheq	r2, [r0, -ip]
 3bc:	01002170 	tsteq	r0, r0, ror r1
 3c0:	01002170 	tsteq	r0, r0, ror r1
 3c4:	01002250 	tsteq	r0, r0, asr r2
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	01002250 	tsteq	r0, r0, asr r2
 3d4:	01002284 	smlabbeq	r0, r4, r2, r2
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	01002284 	smlabbeq	r0, r4, r2, r2
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
 3e4:	010022ec 	smlatteq	r0, ip, r2, r2
 3e8:	010022ec 	smlatteq	r0, ip, r2, r2
 3ec:	01002614 	tsteq	r0, r4, lsl r6
 3f0:	01002614 	tsteq	r0, r4, lsl r6
 3f4:	0100267c 	tsteq	r0, ip, ror r6
 3f8:	0100267c 	tsteq	r0, ip, ror r6
 3fc:	010026dc 	ldrdeq	r2, [r0, -ip]
 400:	010026dc 	ldrdeq	r2, [r0, -ip]
 404:	01002800 	tsteq	r0, r0, lsl #16
 408:	01002800 	tsteq	r0, r0, lsl #16
 40c:	01002924 	tsteq	r0, r4, lsr #18
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
 410:	01002924 	tsteq	r0, r4, lsr #18
 414:	01002a30 	tsteq	r0, r0, lsr sl
 418:	01002a30 	tsteq	r0, r0, lsr sl
 41c:	01002b40 	tsteq	r0, r0, asr #22
 420:	01002b40 	tsteq	r0, r0, asr #22
 424:	01002b88 	smlabbeq	r0, r8, fp, r2
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
 428:	01002b88 	smlabbeq	r0, r8, fp, r2
 42c:	01003960 	tsteq	r0, r0, ror #18
 430:	01003960 	tsteq	r0, r0, ror #18
 434:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
 438:	00000001 	andeq	r0, r0, r1
 43c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
 440:	00000001 	andeq	r0, r0, r1
 444:	00000001 	andeq	r0, r0, r1
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	00000001 	andeq	r0, r0, r1
 46c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
 470:	00000001 	andeq	r0, r0, r1
 474:	00000001 	andeq	r0, r0, r1
 478:	00000001 	andeq	r0, r0, r1
 47c:	00000001 	andeq	r0, r0, r1
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
 488:	00000001 	andeq	r0, r0, r1
 48c:	00000001 	andeq	r0, r0, r1
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
 49c:	01003b08 	tsteq	r0, r8, lsl #22
 4a0:	01003b08 	tsteq	r0, r8, lsl #22
 4a4:	01003b60 	tsteq	r0, r0, ror #22
 4a8:	01003b60 	tsteq	r0, r0, ror #22
 4ac:	01003bf8 	strdeq	r3, [r0, -r8]
 4b0:	01003bf8 	strdeq	r3, [r0, -r8]
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
 4b4:	01003d34 	tsteq	r0, r4, lsr sp
 4b8:	01003d34 	tsteq	r0, r4, lsr sp
 4bc:	01003eac 	smlatbeq	r0, ip, lr, r3
 4c0:	01003eac 	smlatbeq	r0, ip, lr, r3
 4c4:	010046c8 	smlabteq	r0, r8, r6, r4
 4c8:	010046c8 	smlabteq	r0, r8, r6, r4
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
 4cc:	0100497c 	tsteq	r0, ip, ror r9
	...
 4d8:	0100497c 	tsteq	r0, ip, ror r9
 4dc:	010049fc 	strdeq	r4, [r0, -ip]
 4e0:	010049fc 	strdeq	r4, [r0, -ip]
 4e4:	01004ad4 	ldrdeq	r4, [r0, -r4]
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
 4f8:	01004ad4 	ldrdeq	r4, [r0, -r4]
 4fc:	01004b4c 	tsteq	r0, ip, asr #22
 500:	01004b4c 	tsteq	r0, ip, asr #22
 504:	01004ba8 	smlatbeq	r0, r8, fp, r4
 508:	01004ba8 	smlatbeq	r0, r8, fp, r4
 50c:	01004bd4 	ldrdeq	r4, [r0, -r4]
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
 510:	01004bd4 	ldrdeq	r4, [r0, -r4]
 514:	01004ca4 	smlatbeq	r0, r4, ip, r4
	...
 520:	01000020 	tsteq	r0, r0, lsr #32
 524:	010000c8 	smlabteq	r0, r8, r0, r0
 528:	010000c8 	smlabteq	r0, r8, r0, r0
 52c:	010000d4 	ldrdeq	r0, [r0, -r4]
	...
 538:	01004ca4 	smlatbeq	r0, r4, ip, r4
 53c:	01004d18 	tsteq	r0, r8, lsl sp
 540:	01004d18 	tsteq	r0, r8, lsl sp
 544:	01004d9c 			; <UNDEFINED> instruction: 0x01004d9c
 548:	00000001 	andeq	r0, r0, r1
 54c:	00000001 	andeq	r0, r0, r1
 550:	00000001 	andeq	r0, r0, r1
 554:	00000001 	andeq	r0, r0, r1
 558:	01004d9c 			; <UNDEFINED> instruction: 0x01004d9c
 55c:	01004dec 	smlatteq	r0, ip, sp, r4
	...
 568:	00000001 	andeq	r0, r0, r1
 56c:	00000001 	andeq	r0, r0, r1
 570:	00000001 	andeq	r0, r0, r1
 574:	00000001 	andeq	r0, r0, r1
	...
 580:	01004dec 	smlatteq	r0, ip, sp, r4
 584:	01004e08 	tsteq	r0, r8, lsl #28
 588:	01004e08 	tsteq	r0, r8, lsl #28
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
 58c:	01004e24 	tsteq	r0, r4, lsr #28
 590:	01004e24 	tsteq	r0, r4, lsr #28
 594:	01004e78 	tsteq	r0, r8, ror lr
 598:	01004e78 	tsteq	r0, r8, ror lr
 59c:	01004f04 	tsteq	r0, r4, lsl #30
 5a0:	01004f04 	tsteq	r0, r4, lsl #30
 5a4:	01004fd4 	ldrdeq	r4, [r0, -r4]
 5a8:	01004fd4 	ldrdeq	r4, [r0, -r4]
 5ac:	010050ec 	smlatteq	r0, ip, r0, r5
 5b0:	00000001 	andeq	r0, r0, r1
 5b4:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
 5b8:	010050ec 	smlatteq	r0, ip, r0, r5
 5bc:	01005128 	tsteq	r0, r8, lsr #2
 5c0:	00000001 	andeq	r0, r0, r1
 5c4:	00000001 	andeq	r0, r0, r1
 5c8:	00000001 	andeq	r0, r0, r1
 5cc:	00000001 	andeq	r0, r0, r1
 5d0:	00000001 	andeq	r0, r0, r1
 5d4:	00000001 	andeq	r0, r0, r1
 5d8:	00000001 	andeq	r0, r0, r1
 5dc:	00000001 	andeq	r0, r0, r1
 5e0:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
 5e4:	00000001 	andeq	r0, r0, r1
 5e8:	00000001 	andeq	r0, r0, r1
 5ec:	00000001 	andeq	r0, r0, r1
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
 5f8:	00000001 	andeq	r0, r0, r1
 5fc:	00000001 	andeq	r0, r0, r1
 600:	00000001 	andeq	r0, r0, r1
 604:	00000001 	andeq	r0, r0, r1
 608:	00000001 	andeq	r0, r0, r1
 60c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
 610:	00000001 	andeq	r0, r0, r1
 614:	00000001 	andeq	r0, r0, r1
 618:	00000001 	andeq	r0, r0, r1
 61c:	00000001 	andeq	r0, r0, r1
	...
 628:	01005128 	tsteq	r0, r8, lsr #2
 62c:	01005200 	mrseq	r5, R8_usr
 630:	00000001 	andeq	r0, r0, r1
 634:	00000001 	andeq	r0, r0, r1
 638:	01005200 	mrseq	r5, R8_usr
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
 63c:	0100523c 	tsteq	r0, ip, lsr r2
 640:	0100523c 	tsteq	r0, ip, lsr r2
 644:	010052ac 	smlatbeq	r0, ip, r2, r5
 648:	00000001 	andeq	r0, r0, r1
 64c:	00000001 	andeq	r0, r0, r1
 650:	010052ac 	smlatbeq	r0, ip, r2, r5
 654:	0100535c 	tsteq	r0, ip, asr r3
 658:	00000001 	andeq	r0, r0, r1
 65c:	00000001 	andeq	r0, r0, r1
 660:	00000001 	andeq	r0, r0, r1
 664:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
 668:	00000001 	andeq	r0, r0, r1
 66c:	00000001 	andeq	r0, r0, r1
 670:	00000001 	andeq	r0, r0, r1
 674:	00000001 	andeq	r0, r0, r1
 678:	00000001 	andeq	r0, r0, r1
 67c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
 680:	00000001 	andeq	r0, r0, r1
 684:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
{
       0:	0000097d 	andeq	r0, r0, sp, ror r9
       4:	014d0003 	cmpeq	sp, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    ALT_PRINTF("\n");
      18:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
      1c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
      20:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	6d77682f 	ldclvs	8, cr6, [r7, #-188]!	; 0xffffff44
      28:	732f7267 			; <UNDEFINED> instruction: 0x732f7267
      2c:	615f636f 	cmpvs	pc, pc, ror #6
      30:	2f003031 	svccs	0x00003031
      34:	2f727375 	svccs	0x00727375
      38:	2f62696c 	svccs	0x0062696c
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	2f636367 	svccs	0x00636367
      40:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      44:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      48:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      50:	2f312e32 	svccs	0x00312e32
      54:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      58:	00656475 	rsbeq	r6, r5, r5, ror r4
      5c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      60:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      64:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      68:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      6c:	2f62696c 	svccs	0x0062696c
}
      70:	00737973 	rsbseq	r7, r3, r3, ror r9
      74:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      80:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      84:	0062696c 	rsbeq	r6, r2, ip, ror #18
      88:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
      8c:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
      90:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      *(pmem->toptr)=0;
      94:	77680065 	strbvc	r0, [r8, -r5, rrx]!
      98:	2f62696c 	svccs	0x0062696c
      9c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      a0:	2f656475 	svccs	0x00656475
}
      a4:	5f636f73 	svcpl	0x00636f73
      a8:	00303161 	eorseq	r3, r0, r1, ror #2
      ac:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
      b0:	6f6c635f 	svcvs	0x006c635f
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	6d5f6b63 	vldrvs	d22, [pc, #-396]	; ffffff30 <__shm_end__+0xbfffff30>
      b8:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
        break;
      bc:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
    return ALT_E_SUCCESS;
      c0:	00000100 	andeq	r0, r0, r0, lsl #2
      c4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
        return ALT_E_ERROR;
      c8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
}
      cc:	00000200 	andeq	r0, r0, r0, lsl #4
      d0:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
      d4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
      d8:	00000200 	andeq	r0, r0, r0, lsl #4
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
      e0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
      e4:	00000300 	andeq	r0, r0, r0, lsl #6
      e8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
      ec:	00682e74 	rsbeq	r2, r8, r4, ror lr
      f0:	6c000003 	stcvs	0, cr0, [r0], {3}
    return dst;
      f4:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
}
      f8:	00030068 	andeq	r0, r3, r8, rrx
      fc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     100:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     104:	00040068 	andeq	r0, r4, r8, rrx
        return (int)cnt;
     108:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     10c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    errno = ENOSYS;
     110:	00000400 	andeq	r0, r0, r0, lsl #8
     114:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     118:	00682e62 	rsbeq	r2, r8, r2, ror #28
     11c:	61000005 	tstvs	r0, r5
    return -1;
     120:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
}
     124:	6b636f6c 	blvs	18dbedc <__end__+0x8bfebc>
     128:	6e616d5f 	mcrvs	13, 3, r6, cr1, cr15, {2}
     12c:	72656761 	rsbvc	r6, r5, #25427968	; 0x1840000
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     130:	0600682e 	streq	r6, [r0], -lr, lsr #16
     134:	6c610000 	stclvs	0, cr0, [r1], #-0
     138:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
     140:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     144:	6c610000 	stclvs	0, cr0, [r1], #-0
     148:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     14c:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     154:	05000000 	streq	r0, [r0, #-0]
     158:	02050001 	andeq	r0, r5, #1
     15c:	00000000 	andeq	r0, r0, r0
     160:	0100d303 	tsteq	r0, r3, lsl #6
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	05bb0505 	ldreq	r0, [fp, #1285]!	; 0x505
     168:	053f0814 	ldreq	r0, [pc, #-2068]!	; fffff95c <__shm_end__+0xbffff95c>
     16c:	1b058309 	blne	160d98 <__core1_vectors-0xe9f268>
     170:	83090530 	movwhi	r0, #38192	; 0x9530
     174:	05301605 	ldreq	r1, [r0, #-1541]!	; 0xfffff9fb
    return ALT_E_SUCCESS;
     178:	10058309 	andne	r8, r5, r9, lsl #6
}
     17c:	4c0c0530 	cfstr32mi	mvfx0, [ip], {48}	; 0x30
     180:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     184:	01010008 	tsteq	r1, r8
    while (coalesce->size)
     188:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     18c:	0000dc02 	andeq	sp, r0, r2, lsl #24
            break;
     190:	00e80301 	rsceq	r0, r8, r1, lsl #6
    *segpa   = thissegpa;
     194:	830c0501 	movwhi	r0, #50433	; 0xc501
     198:	2f01059f 	svccs	0x0001059f
     19c:	01000802 	tsteq	r0, r2, lsl #16
    *segsize = thissegsize;
     1a0:	00010501 	andeq	r0, r1, r1, lsl #10
     1a4:	01140205 	tsteq	r4, r5, lsl #4
     1a8:	ee030100 	adfs	f0, f3, f0
    return ALT_E_SUCCESS;
     1ac:	08050100 	stmdaeq	r5, {r8}
}
     1b0:	66070583 	strvs	r0, [r7], -r3, lsl #11
     1b4:	9f4c1005 	svcls	0x004c1005
     1b8:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     1c0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     1c4:	02050001 	andeq	r0, r5, #1
     1c8:	01000168 	tsteq	r0, r8, ror #2
     1cc:	0100f803 	tsteq	r0, r3, lsl #16	; <UNPREDICTABLE>
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	05830805 	streq	r0, [r3, #2053]	; 0x805
     1d4:	10056607 	andne	r6, r5, r7, lsl #12
     1d8:	0c059f4c 	stceq	15, cr9, [r5], {76}	; 0x4c
     1dc:	2f01054c 	svccs	0x0001054c
     1e0:	01000802 	tsteq	r0, r2, lsl #16
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	00010501 	andeq	r0, r1, r1, lsl #10
     1e8:	01bc0205 			; <UNDEFINED> instruction: 0x01bc0205
     1ec:	85030100 	strhi	r0, [r3, #-256]	; 0xffffff00
     1f0:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
     1f4:	0d055183 	stfeqs	f5, [r5, #-524]	; 0xfffffdf4
     1f8:	4b0b054a 	blmi	2c1728 <__core1_vectors-0xd3e8d8>
     1fc:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
     200:	05230812 	streq	r0, [r3, #-2066]!	; 0xfffff7ee
     204:	1205830c 	andne	r8, r5, #12, 6	; 0x30000000
     208:	830c0530 	movwhi	r0, #50480	; 0xc530
     20c:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
     210:	1305830c 	movwne	r8, #21260	; 0x530c
        clkStep += clk100;
     214:	4d060530 	cfstr32mi	mvfx0, [r6, #-192]	; 0xffffff40
     218:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
     21c:	05854b0b 	streq	r4, [r5, #2827]	; 0xb0b
     220:	0f054a09 	svceq	0x00054a09
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	4a37054b 	bmi	dc1758 <__core1_vectors-0x23e8a8>
     228:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
     22c:	0559080f 	ldrbeq	r0, [r9, #-2063]	; 0xfffff7f1
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	0b056637 	bleq	159b14 <__core1_vectors-0xea64ec>
     234:	a00d0566 	andge	r0, sp, r6, ror #10
     238:	4b2e0b05 	blmi	b82e54 <__core1_vectors-0x47d1ac>
     23c:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	022f0104 	eoreq	r0, pc, #4, 2
     244:	01010006 	tsteq	r1, r6
     248:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     24c:	00031402 	andeq	r1, r3, r2, lsl #8
     250:	01ab0301 			; <UNDEFINED> instruction: 0x01ab0301
     254:	83140501 	tsthi	r4, #4194304	; 0x400000
     258:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	0d055014 	stceq	0, cr5, [r5, #-80]	; 0xffffffb0
     260:	4b0b054a 	blmi	2c1790 <__core1_vectors-0xd3e870>
     264:	3f081205 	svccc	0x00081205
     268:	30830c05 	addcc	r0, r3, r5, lsl #24
     26c:	05681905 	strbeq	r1, [r8, #-2309]!	; 0xfffff6fb
     270:	11056617 	tstne	r5, r7, lsl r6
     274:	bb0c052e 	bllt	301734 <__core1_vectors-0xcfe8cc>
     278:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
     27c:	1205830c 	andne	r8, r5, #12, 6	; 0x30000000
     280:	830c0530 	movwhi	r0, #50480	; 0xc530
     284:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	0f054d06 	svceq	0x00054d06
     28c:	4b0b0567 	blmi	2c1830 <__core1_vectors-0xd3e7d0>
     290:	4a090585 	bmi	2418ac <__core1_vectors-0xdbe754>
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
     298:	0b054a36 	bleq	152b78 <__core1_vectors-0xead488>
     29c:	080f0566 	stmdaeq	pc, {r1, r2, r5, r6, r8, sl}	; <UNPREDICTABLE>
     2a0:	66360559 			; <UNDEFINED> instruction: 0x66360559
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
     2a8:	0b05a00d 	bleq	1682e4 <__core1_vectors-0xe97d1c>
     2ac:	01054b2e 	tsteq	r5, lr, lsr #22
     2b0:	01040200 	mrseq	r0, R12_usr
     2b4:	0006022f 	andeq	r0, r6, pc, lsr #4
     2b8:	01050101 	tsteq	r5, r1, lsl #2
     2bc:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
     2c0:	03010004 	movweq	r0, #4100	; 0x1004
     2c4:	050101ed 	streq	r0, [r1, #-493]	; 0xfffffe13
     2c8:	1005db07 	andne	sp, r5, r7, lsl #22
     2cc:	4a0e0567 	bmi	381870 <__core1_vectors-0xc7e790>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	05681005 	strbeq	r1, [r8, #-5]!
     2d4:	07054a0e 	streq	r4, [r5, -lr, lsl #20]
     2d8:	001c054c 	andseq	r0, ip, ip, asr #10
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     2e0:	01040200 	mrseq	r0, R12_usr
     2e4:	4d100565 	cfldr32mi	mvfx0, [r0, #-404]	; 0xfffffe6c
     2e8:	4d070567 	cfstr32mi	mvfx0, [r7, #-412]	; 0xfffffe64
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	05671005 	strbeq	r1, [r7, #-5]!
     2f0:	10054a0e 	andne	r4, r5, lr, lsl #20
     2f4:	4a0e0568 	bmi	38189c <__core1_vectors-0xc7e764>
     2f8:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
     2fc:	10056607 	andne	r6, r5, r7, lsl #12
     300:	840c054c 	strhi	r0, [ip], #-1356	; 0xfffffab4
     304:	77081405 	strvc	r1, [r8, -r5, lsl #8]
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	05841305 	streq	r1, [r4, #773]	; 0x305
     30c:	1805830f 	stmdane	r5, {r0, r1, r2, r3, r8, r9, pc}
     310:	4b140567 	blmi	5018b4 <__core1_vectors-0xafe74c>
     314:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     318:	2005671a 	andcs	r6, r5, sl, lsl r7
     31c:	4a1e052e 	bmi	7817dc <__core1_vectors-0x87e824>
     320:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	0d059e14 	stceq	14, cr9, [r5, #-80]	; 0xffffffb0
     328:	3013054b 	andscc	r0, r3, fp, asr #10
     32c:	05830f05 	streq	r0, [r3, #3845]	; 0xf05
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	14056718 	strne	r6, [r5], #-1816	; 0xfffff8e8
     334:	4a12054b 	bmi	481868 <__core1_vectors-0xb7e798>
     338:	05671a05 	strbeq	r1, [r7, #-2565]!	; 0xfffff5fb
     33c:	1e052e20 	cdpne	14, 0, cr2, cr5, cr0, {1}
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	2e1a054a 	cfmac32cs	mvfx0, mvfx10, mvfx10
     344:	059e1405 	ldreq	r1, [lr, #1029]	; 0x405
     348:	13054b0d 	movwne	r4, #23309	; 0x5b0d
     34c:	830d0530 	movwhi	r0, #54576	; 0xd530
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	13056830 	movwne	r6, #22576	; 0x5830
     354:	4c0c0530 	cfstr32mi	mvfx0, [ip], {48}	; 0x30
     358:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
     35c:	022f0104 	eoreq	r0, pc, #4, 2
     360:	01010006 	tsteq	r1, r6
     364:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	0006c402 	andeq	ip, r6, r2, lsl #8
     36c:	02a70301 	adceq	r0, r7, #67108864	; 0x4000000
     370:	870b0501 	strhi	r0, [fp, -r1, lsl #10]
     374:	26020c05 	strcs	r0, [r2], -r5, lsl #24
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	2f010519 	svccs	0x00010519
     37c:	01000602 	tsteq	r0, r2, lsl #12
     380:	00010501 	andeq	r0, r1, r1, lsl #10
     384:	07300205 	ldreq	r0, [r0, -r5, lsl #4]!
     388:	b7030100 	strlt	r0, [r3, -r0, lsl #2]
     38c:	0b050102 	bleq	14079c <__core1_vectors-0xebf864>
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	0c056784 	stceq	7, cr6, [r5], {132}	; 0x84
     394:	2f01059f 	svccs	0x0001059f
     398:	01000602 	tsteq	r0, r2, lsl #12
     39c:	00010501 	andeq	r0, r1, r1, lsl #10
     3a0:	07700205 	ldrbeq	r0, [r0, -r5, lsl #4]!
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	bf030100 	svclt	0x00030100
     3a8:	0b050102 	bleq	1407b8 <__core1_vectors-0xebf848>
     3ac:	0c056784 	stceq	7, cr6, [r5], {132}	; 0x84
     3b0:	2f01059f 	svccs	0x0001059f
     3b4:	01000602 	tsteq	r0, r2, lsl #12
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	00010501 	andeq	r0, r1, r1, lsl #10
     3bc:	07b00205 	ldreq	r0, [r0, r5, lsl #4]!
     3c0:	c8030100 	stmdagt	r3, {r8}
     3c4:	0b050102 	bleq	1407d4 <__core1_vectors-0xebf82c>
     3c8:	020c0584 	andeq	r0, ip, #132, 10	; 0x21000000
     3cc:	01051a26 	tsteq	r5, r6, lsr #20
     3d0:	0006022f 	andeq	r0, r6, pc, lsr #4
     3d4:	01050101 	tsteq	r5, r1, lsl #2
     3d8:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
     3dc:	03010008 	movweq	r0, #4104	; 0x1008
     3e0:	050102d6 	streq	r0, [r1, #-726]	; 0xfffffd2a
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	0567840b 	strbeq	r8, [r7, #-1035]!	; 0xfffffbf5
     3e8:	01059f0c 	tsteq	r5, ip, lsl #30
     3ec:	0006022f 	andeq	r0, r6, pc, lsr #4
     3f0:	01050101 	tsteq	r5, r1, lsl #2
     3f4:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
     3f8:	03010008 	movweq	r0, #4104	; 0x1008
     3fc:	050102de 	streq	r0, [r1, #-734]	; 0xfffffd22
     400:	1305840b 	movwne	r8, #21515	; 0x540b
     404:	82100567 	andshi	r0, r0, #432013312	; 0x19c00000
     408:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
     40c:	0522080c 	streq	r0, [r2, #-2060]!	; 0xfffff7f4
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	06022f01 	streq	r2, [r2], -r1, lsl #30
     414:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     418:	02050001 	andeq	r0, r5, #1
     41c:	010008c4 	smlabteq	r0, r4, r8, r0
     420:	0102e703 	tsteq	r2, r3, lsl #14
     424:	05840b05 	streq	r0, [r4, #2821]	; 0xb05
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	10056713 	andne	r6, r5, r3, lsl r7
     42c:	4a0b059e 	bmi	2c1aac <__core1_vectors-0xd3e554>
     430:	22080c05 	andcs	r0, r8, #1280	; 0x500
     434:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     438:	01010006 	tsteq	r1, r6
     43c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	00093002 	andeq	r3, r9, r2
     444:	02f00301 	rscseq	r0, r0, #67108864	; 0x4000000
     448:	840b0501 	strhi	r0, [fp], #-1281	; 0xfffffaff
     44c:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
     450:	0b059e10 	bleq	167c98 <__core1_vectors-0xe98368>
     454:	080c054a 	stmdaeq	ip, {r1, r3, r6, r8, sl}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	2f010522 	svccs	0x00010522
     45c:	01000602 	tsteq	r0, r2, lsl #12
     460:	00010501 	andeq	r0, r1, r1, lsl #10
     464:	099c0205 	ldmibeq	ip, {r0, r2, r9}
     468:	f9030100 			; <UNDEFINED> instruction: 0xf9030100
     46c:	0b050102 	bleq	14087c <__core1_vectors-0xebf784>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	67130584 	ldrvs	r0, [r3, -r4, lsl #11]
     474:	059e1005 	ldreq	r1, [lr, #5]
     478:	0c054a0b 			; <UNDEFINED> instruction: 0x0c054a0b
     47c:	01052208 	tsteq	r5, r8, lsl #4
     480:	0006022f 	andeq	r0, r6, pc, lsr #4
     484:	01050101 	tsteq	r5, r1, lsl #2
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	08020500 	stmdaeq	r2, {r8, sl}
     48c:	0301000a 	movweq	r0, #4106	; 0x100a
     490:	05010382 	streq	r0, [r1, #-898]	; 0xfffffc7e
     494:	1305840b 	movwne	r8, #21515	; 0x540b
     498:	9e100567 	cfmsc32ls	mvfx0, mvfx0, mvfx7
     49c:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
     4a0:	0522080c 	streq	r0, [r2, #-2060]!	; 0xfffff7f4
     4a4:	06022f01 	streq	r2, [r2], -r1, lsl #30
     4a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     4ac:	02050001 	andeq	r0, r5, #1
     4b0:	01000a74 	tsteq	r0, r4, ror sl
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	01038b03 	tsteq	r3, r3, lsl #22
     4b8:	05840b05 	streq	r0, [r4, #2821]	; 0xb05
     4bc:	10056713 	andne	r6, r5, r3, lsl r7
     4c0:	4a0b059e 	bmi	2c1b40 <__core1_vectors-0xd3e4c0>
     4c4:	22080c05 	andcs	r0, r8, #1280	; 0x500
     4c8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	01010006 	tsteq	r1, r6
     4d0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     4d4:	000ae002 	andeq	lr, sl, r2
     4d8:	03940301 	orrseq	r0, r4, #67108864	; 0x4000000
     4dc:	840b0501 	strhi	r0, [fp], #-1281	; 0xfffffaff
     4e0:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
     4e4:	0b059e10 	bleq	167d2c <__core1_vectors-0xe982d4>
     4e8:	080c054a 	stmdaeq	ip, {r1, r3, r6, r8, sl}
     4ec:	2f010522 	svccs	0x00010522
     4f0:	01000602 	tsteq	r0, r2, lsl #12
     4f4:	00010501 	andeq	r0, r1, r1, lsl #10
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	0b4c0205 	bleq	1300d14 <__end__+0x2e4cf4>
     4fc:	b1030100 	mrslt	r0, (UNDEF: 19)
     500:	08050103 	stmdaeq	r5, {r0, r1, r8}
     504:	663605bd 			; <UNDEFINED> instruction: 0x663605bd
     508:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     50c:	0b034c10 	bleq	d3554 <__core1_vectors-0xf2caac>
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	05012802 	streq	r2, [r1, #-2050]	; 0xfffff7fe
     514:	02090301 	andeq	r0, r9, #67108864	; 0x4000000
     518:	06020126 	streq	r0, [r2], -r6, lsr #2
     51c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     520:	02050001 	andeq	r0, r5, #1
     524:	01000c28 	tsteq	r0, r8, lsr #24
     528:	0103ce03 	tsteq	r3, r3, lsl #28
     52c:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     530:	0602a101 	streq	sl, [r2], -r1, lsl #2
     534:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     538:	02050001 	andeq	r0, r5, #1
     53c:	01000c58 	tsteq	r0, r8, asr ip
     540:	0103d503 	tsteq	r3, r3, lsl #10
     544:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     548:	0602a101 	streq	sl, [r2], -r1, lsl #2
     54c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     550:	02050001 	andeq	r0, r5, #1
     554:	01000c88 	smlabbeq	r0, r8, ip, r0
     558:	0103dc03 	tsteq	r3, r3, lsl #24
     55c:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     560:	0602a101 	streq	sl, [r2], -r1, lsl #2
     564:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     568:	02050001 	andeq	r0, r5, #1
     56c:	01000cb8 			; <UNDEFINED> instruction: 0x01000cb8
     570:	0103e303 	tsteq	r3, r3, lsl #6
     574:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     578:	1a260201 	bne	980d84 <__core1_vectors-0x67f27c>
     57c:	01000602 	tsteq	r0, r2, lsl #12
     580:	00010501 	andeq	r0, r1, r1, lsl #10
     584:	0d200205 	sfmeq	f0, 4, [r0, #-20]!	; 0xffffffec
     588:	ef030100 	svc	0x00030100
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	0b050103 	bleq	1409a0 <__core1_vectors-0xebf660>
     590:	03110584 	tsteq	r1, #132, 10	; 0x21000000
     594:	01260209 			; <UNDEFINED> instruction: 0x01260209
     598:	05820f05 	streq	r0, [r2, #3845]	; 0xf05
     59c:	0b052e0a 	bleq	14bdcc <__core1_vectors-0xeb4234>
     5a0:	01052208 	tsteq	r5, r8, lsl #4
     5a4:	0006022f 	andeq	r0, r6, pc, lsr #4
     5a8:	01050101 	tsteq	r5, r1, lsl #2
     5ac:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
     5b0:	0301000d 	movweq	r0, #4109	; 0x100d
     5b4:	05010480 	streq	r0, [r1, #-1152]	; 0xfffffb80
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0105830c 	tsteq	r5, ip, lsl #6
     5bc:	021a2602 	andseq	r2, sl, #2097152	; 0x200000
     5c0:	01010006 	tsteq	r1, r6
     5c4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     5c8:	000e2c02 	andeq	r2, lr, r2, lsl #24
     5cc:	048c0301 	streq	r0, [ip], #769	; 0x301
     5d0:	830c0501 	movwhi	r0, #50433	; 0xc501
     5d4:	02670105 	rsbeq	r0, r7, #1073741825	; 0x40000001
     5d8:	01010006 	tsteq	r1, r6
     5dc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     5e0:	00000002 	andeq	r0, r0, r2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	04910300 	ldreq	r0, [r1], #768	; 0x300
     5e8:	840b0501 	strhi	r0, [fp], #-1281	; 0xfffffaff
     5ec:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
     5f0:	0c05660b 	stceq	6, cr6, [r5], {11}
     5f4:	01052108 	tsteq	r5, r8, lsl #2
     5f8:	0006022f 	andeq	r0, r6, pc, lsr #4
     5fc:	01050101 	tsteq	r5, r1, lsl #2
     600:	00020500 	andeq	r0, r2, r0, lsl #10
     604:	03000000 	movweq	r0, #0
     608:	05010499 	streq	r0, [r1, #-1177]	; 0xfffffb67
     60c:	0d05840b 	cfstrseq	mvf8, [r5, #-44]	; 0xffffffd4
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	660b0567 	strvs	r0, [fp], -r7, ror #10
     614:	21080c05 	tstcs	r8, r5, lsl #24
     618:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     61c:	01010006 	tsteq	r1, r6
     620:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     624:	000e5402 	andeq	r5, lr, r2, lsl #8
     628:	04a10301 	strteq	r0, [r1], #769	; 0x301
     62c:	830c0501 	movwhi	r0, #50433	; 0xc501
     630:	26020105 	strcs	r0, [r2], -r5, lsl #2
     634:	0006021a 	andeq	r0, r6, sl, lsl r2
     638:	01050101 	tsteq	r5, r1, lsl #2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
     640:	0301000e 	movweq	r0, #4110	; 0x100e
     644:	050104ad 	streq	r0, [r1, #-1197]	; 0xfffffb53
     648:	0105830c 	tsteq	r5, ip, lsl #6
     64c:	021a2602 	andseq	r2, sl, #2097152	; 0x200000
     650:	01010006 	tsteq	r1, r6
     654:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     658:	000f2402 	andeq	r2, pc, r2, lsl #8
     65c:	04b90301 	ldrteq	r0, [r9], #769	; 0x301
     660:	830c0501 	movwhi	r0, #50433	; 0xc501
     664:	26020105 	strcs	r0, [r2], -r5, lsl #2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	0006021a 	andeq	r0, r6, sl, lsl r2
     66c:	01050101 	tsteq	r5, r1, lsl #2
     670:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     674:	0301000f 	movweq	r0, #4111	; 0x100f
     678:	050104c9 	streq	r0, [r1, #-1225]	; 0xfffffb37
     67c:	0805bb15 	stmdaeq	r5, {r0, r2, r4, r8, r9, fp, ip, sp, pc}
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	6810054c 	ldmdavs	r0, {r2, r3, r6, r8, sl}
     684:	054d0505 	strbeq	r0, [sp, #-1285]	; 0xfffffafb
     688:	1644020f 	strbne	r0, [r4], -pc, lsl #4
     68c:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     690:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
     694:	300f0567 	andcc	r0, pc, r7, ror #10
     698:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     69c:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
     6a0:	300f0567 	andcc	r0, pc, r7, ror #10
     6a4:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     6a8:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	300f0567 	andcc	r0, pc, r7, ror #10
     6b0:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     6b4:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
     6b8:	304b3167 	subcc	r3, fp, r7, ror #2
     6bc:	304b304b 	subcc	r3, fp, fp, asr #32
     6c0:	314b304b 	cmpcc	fp, fp, asr #32
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	304b304b 	subcc	r3, fp, fp, asr #32
     6c8:	314b304b 	cmpcc	fp, fp, asr #32
     6cc:	304b304b 	subcc	r3, fp, fp, asr #32
     6d0:	304b304b 	subcc	r3, fp, fp, asr #32
     6d4:	304b304b 	subcc	r3, fp, fp, asr #32
     6d8:	304b304b 	subcc	r3, fp, fp, asr #32
     6dc:	054b304b 	strbeq	r3, [fp, #-75]	; 0xffffffb5
     6e0:	0905300d 	stmdbeq	r5, {r0, r2, r3, ip, sp}
     6e4:	320c054b 	andcc	r0, ip, #314572800	; 0x12c00000
     6e8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     6ec:	01010006 	tsteq	r1, r6
     6f0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     6f4:	00000002 	andeq	r0, r0, r2
     6f8:	05b40300 	ldreq	r0, [r4, #768]!	; 0x300
     6fc:	9f050501 	svcls	0x00050501
     700:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
     704:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     70c:	02050001 	andeq	r0, r5, #1
     710:	00000000 	andeq	r0, r0, r0
     714:	0105bb03 	tsteq	r5, r3, lsl #22
     718:	059f0505 	ldreq	r0, [pc, #1285]	; c25 <__core1_vectors-0xfff3db>
     71c:	163c0210 			; <UNDEFINED> instruction: 0x163c0210
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	bdbcbcbd 	ldclt	12, cr11, [ip, #756]!	; 0x2f4
     724:	bcbcbdbc 	ldclt	13, cr11, [ip], #752	; 0x2f0
     728:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
     72c:	bcbdbcbc 	ldclt	12, cr11, [sp], #752	; 0x2f0
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	05bcbcbc 	ldreq	fp, [ip, #3260]!	; 0xcbc
     734:	06023001 	streq	r3, [r2], -r1
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     73c:	02050001 	andeq	r0, r5, #1
     740:	00000000 	andeq	r0, r0, r0
     744:	0105ef03 	tsteq	r5, r3, lsl #30
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	059f0505 	ldreq	r0, [pc, #1285]	; c55 <__core1_vectors-0xfff3ab>
     74c:	0105670c 	tsteq	r5, ip, lsl #14
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	0008022f 	andeq	r0, r8, pc, lsr #4
     754:	01050101 	tsteq	r5, r1, lsl #2
     758:	00020500 	andeq	r0, r2, r0, lsl #10
     75c:	03000000 	movweq	r0, #0
     760:	050105f5 	streq	r0, [r1, #-1525]	; 0xfffffa0b
     764:	10059f05 	andne	r9, r5, r5, lsl #30
     768:	bd163c02 	ldclt	12, cr3, [r6, #-8]
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	bcbdbcbc 	ldclt	12, cr11, [sp], #752	; 0x2f0
     770:	bcbcbcbd 	ldclt	12, cr11, [ip], #756	; 0x2f4
     774:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
     778:	bcbcbdbc 	ldclt	13, cr11, [ip], #752	; 0x2f0
     77c:	0105bcbc 			; <UNDEFINED> instruction: 0x0105bcbc
     780:	00060230 	andeq	r0, r6, r0, lsr r2
     784:	01050101 	tsteq	r5, r1, lsl #2
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	c8020500 	stmdagt	r2, {r8, sl}
     78c:	03010011 	movweq	r0, #4113	; 0x1011
     790:	050106a9 	streq	r0, [r1, #-1705]	; 0xfffff957
     794:	0b059f0d 	bleq	1683d0 <__core1_vectors-0xe97c30>
     798:	4a05054a 	bmi	141cc8 <__core1_vectors-0xebe338>
     79c:	4c4b0e05 	mcrrmi	14, 0, r0, fp, cr5
     7a0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	01010008 	tsteq	r1, r8
     7a8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     7ac:	00121002 	andseq	r1, r2, r2
     7b0:	06b10301 	ldrteq	r0, [r1], r1, lsl #6
     7b4:	9f050501 	svcls	0x00050501
     7b8:	3c021005 	stccc	0, cr1, [r2], {5}
     7bc:	bcbcbd16 	ldclt	13, cr11, [ip], #88	; 0x58
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	bcbdbcbd 	ldclt	12, cr11, [sp], #756	; 0x2f4
     7c4:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
     7c8:	bdbcbcbc 	ldclt	12, cr11, [ip, #752]!	; 0x2f0
     7cc:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	02300105 	eorseq	r0, r0, #1073741825	; 0x40000001
     7d4:	01010006 	tsteq	r1, r6
     7d8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	00000002 	andeq	r0, r0, r2
     7e0:	06ee0300 	strbteq	r0, [lr], r0, lsl #6
     7e4:	03050501 	movweq	r0, #21761	; 0x5501
     7e8:	18059e25 	stmdane	r5, {r0, r2, r5, r9, sl, fp, ip, pc}
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	4a100568 	bmi	401d94 <__core1_vectors-0xbfe26c>
     7f0:	05671f05 	strbeq	r1, [r7, #-3845]!	; 0xfffff0fb
     7f4:	1a054a17 	bne	153058 <__core1_vectors-0xeacfa8>
     7f8:	4a120567 	bmi	481d9c <__core1_vectors-0xb7e264>
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	d9690305 	stmdble	r9!, {r0, r2, r8, r9}^
     800:	05676731 	strbeq	r6, [r7, #-1841]!	; 0xfffff8cf
     804:	03054b0a 	movweq	r4, #23306	; 0x5b0a
     808:	86878769 	strhi	r8, [r7], r9, ror #14
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	05860c05 	streq	r0, [r6, #3077]	; 0xc05
     810:	35054a0a 	strcc	r4, [r5, #-2570]	; 0xfffff5f6
     814:	4a06054d 	bmi	181d50 <__core1_vectors-0xe7e2b0>
     818:	c04c0505 	subgt	r0, ip, r5, lsl #10
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	26080305 	strcs	r0, [r8], -r5, lsl #6
     820:	27032605 	strcs	r2, [r3, -r5, lsl #12]
     824:	19052008 	stmdbne	r5, {r3, sp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	ba400582 	blt	1001e38 <alt_16550_mcr_mask_set_helper+0x50>
     82c:	054a3205 	strbeq	r3, [sl, #-517]	; 0xfffffdfb
     830:	0a052e2d 	beq	14c0ec <__core1_vectors-0xeb3f14>
     834:	4c12052e 	cfldr32mi	mvfx0, [r2], {46}	; 0x2e
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
     83c:	30052e2c 	andcc	r2, r5, ip, lsr #28
     840:	2e050582 	cfsh32cs	mvfx0, mvfx5, #-62
     844:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	04020009 	streq	r0, [r2], #-9
     84c:	1105a101 	tstne	r5, r1, lsl #2
     850:	01040200 	mrseq	r0, R12_usr
     854:	10057708 	andne	r7, r5, r8, lsl #14
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	01040200 	mrseq	r0, R12_usr
     85c:	00090584 	andeq	r0, r9, r4, lsl #11
     860:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     864:	02001905 	andeq	r1, r0, #81920	; 0x14000
     868:	05830104 	streq	r0, [r3, #260]	; 0x104
     86c:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
     870:	38054a01 	stmdacc	r5, {r0, r9, fp, lr}
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	01040200 	mrseq	r0, R12_usr
     878:	0005054a 	andeq	r0, r5, sl, asr #10
     87c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
     884:	055d080a 	ldrbeq	r0, [sp, #-2058]	; 0xfffff7f6
     888:	05856703 	streq	r6, [r5, #1795]	; 0x703
     88c:	055e080a 	ldrbeq	r0, [lr, #-2058]	; 0xfffff7f6
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	d9876703 	stmible	r7, {r0, r1, r8, r9, sl, sp, lr}
     894:	05dc0a05 	ldrbeq	r0, [ip, #2565]	; 0xa05
     898:	0c056703 	stceq	7, cr6, [r5], {3}
     89c:	05820d03 	streq	r0, [r2, #3331]	; 0xd03
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	03054a0a 	movweq	r4, #23050	; 0x5a0a
     8a4:	bf0c054b 	svclt	0x000c054b
     8a8:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
     8ac:	a0bf4b03 	adcsge	r4, pc, r3, lsl #22
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	085c08a4 	ldmdaeq	ip, {r2, r5, r7, fp}^
     8b4:	bdbdbd5c 	ldclt	13, cr11, [sp, #368]!	; 0x170
     8b8:	5c08bdbd 	stcpl	13, cr11, [r8], {189}	; 0xbd
     8bc:	bd5d08bd 	ldcllt	8, cr0, [sp, #-756]	; 0xfffffd0c
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	3e020c03 	cdpcc	12, 0, cr0, cr2, cr3, {0}
     8c4:	085c0801 	ldmdaeq	ip, {r0, fp}^
     8c8:	085c085c 	ldmdaeq	ip, {r2, r3, r4, r6, fp}^
     8cc:	bd5c085c 	ldcllt	8, cr0, [ip, #-368]	; 0xfffffe90
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	02be5c08 	adcseq	r5, lr, #8, 24	; 0x800
     8d4:	0e051822 	cdpeq	8, 0, cr1, cr5, cr2, {1}
     8d8:	01040200 	mrseq	r0, R12_usr
     8dc:	000c05c0 	andeq	r0, ip, r0, asr #11
    return ALT_E_SUCCESS;
     8e0:	4a010402 	bmi	418f0 <__core1_vectors-0xfbe710>
}
     8e4:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
     8e8:	054b0104 	strbeq	r0, [fp, #-260]	; 0xfffffefc
     8ec:	0402000c 	streq	r0, [r2], #-12
     8f0:	3d054b01 	vstrcc	d4, [r5, #-4]
     8f4:	02040200 	andeq	r0, r4, #0, 4
     8f8:	0044054a 	subeq	r0, r4, sl, asr #10
     8fc:	49020402 	stmdbmi	r2, {r1, sl}
     900:	d9520305 	ldmdble	r2, {r0, r2, r8, r9}^
     904:	0903d9d9 	stmdbeq	r3, {r0, r3, r4, r6, r7, r8, fp, ip, lr, pc}
     908:	890a05d6 	stmdbhi	sl, {r1, r2, r4, r6, r7, r8, sl}
     90c:	05670305 	strbeq	r0, [r7, #-773]!	; 0xfffffcfb
     910:	0402000e 	streq	r0, [r2], #-14
     914:	0c058501 	cfstr32eq	mvfx8, [r5], {1}
     918:	01040200 	mrseq	r0, R12_usr
     91c:	000d054a 	andeq	r0, sp, sl, asr #10
     920:	4b010402 	blmi	41930 <__core1_vectors-0xfbe6d0>
     924:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
     928:	504a0104 	subpl	r0, sl, r4, lsl #2
     92c:	05890a05 	streq	r0, [r9, #2565]	; 0xa05
     930:	0e056703 	cdpeq	7, 0, cr6, cr5, cr3, {0}
     934:	01040200 	mrseq	r0, R12_usr
     938:	000c0585 	andeq	r0, ip, r5, lsl #11
     93c:	4a010402 	bmi	4194c <__core1_vectors-0xfbe6b4>
     940:	02000d05 	andeq	r0, r0, #320	; 0x140
     944:	054b0104 	strbeq	r0, [fp, #-260]	; 0xfffffefc
     948:	04020003 	streq	r0, [r2], #-3
     94c:	05514a01 	ldrbeq	r4, [r1, #-2561]	; 0xfffff5ff
     950:	0305de0a 	movweq	sp, #24074	; 0x5e0a
     954:	000e0567 	andeq	r0, lr, r7, ror #10
     958:	85010402 	strhi	r0, [r1, #-1026]	; 0xfffffbfe
     95c:	02000c05 	andeq	r0, r0, #1280	; 0x500
     960:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     964:	0402000d 	streq	r0, [r2], #-13
     968:	03054b01 	movweq	r4, #23297	; 0x5b01
     96c:	01040200 	mrseq	r0, R12_usr
     970:	86874e4a 	strhi	r4, [r7], sl, asr #28
     974:	09030c05 	stmdbeq	r3, {r0, r2, sl, fp}
     978:	2f010582 	svccs	0x00010582
     97c:	01000602 	tsteq	r0, r2, lsl #12
     980:	000a8801 	andeq	r8, sl, r1, lsl #16
     984:	d2000300 	andle	r0, r0, #0, 6
     988:	02000000 	andeq	r0, r0, #0
     98c:	0d0efb01 	vstreq	d15, [lr, #-4]
     990:	01010100 	mrseq	r0, (UNDEF: 17)
     994:	00000001 	andeq	r0, r0, r1
     998:	01000001 	tsteq	r0, r1
     99c:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     9a0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     9a4:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
     9a8:	0072676d 	rsbseq	r6, r2, sp, ror #14
     9ac:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     9b0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     9b4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     9b8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     9bc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     9c0:	61652d65 	cmnvs	r5, r5, ror #26
     9c4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     9c8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     9cc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     9d0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     9d4:	6c776800 	ldclvs	8, cr6, [r7], #-0
     9d8:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     9dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     9e0:	68006564 	stmdavs	r0, {r2, r5, r6, r8, sl, sp, lr}
     9e4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     9e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     9ec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     9f0:	636f732f 	cmnvs	pc, #-1140850688	; 0xbc000000
     9f4:	3031615f 	eorscc	r6, r1, pc, asr r1
     9f8:	6c610000 	stclvs	0, cr0, [r1], #-0
     9fc:	36315f74 	shsub16cc	r5, r1, r4
     a00:	5f303535 	svcpl	0x00303535
     a04:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     a08:	0100632e 	tsteq	r0, lr, lsr #6
     a0c:	74730000 	ldrbtvc	r0, [r3], #-0
     a10:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     a14:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a18:	74730000 	ldrbtvc	r0, [r3], #-0
     a1c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     a20:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a24:	77680000 	strbvc	r0, [r8, -r0]!
     a28:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     a2c:	00030068 	andeq	r0, r3, r8, rrx
     a30:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     a34:	6f6c635f 	svcvs	0x006c635f
     a38:	6d5f6b63 	vldrvs	d22, [pc, #-396]	; 8b4 <__core1_vectors-0xfff74c>
     a3c:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     a40:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
     a44:	00000400 	andeq	r0, r0, r0, lsl #8
     a48:	5f746c61 	svcpl	0x00746c61
     a4c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
     a50:	61755f30 	cmnvs	r5, r0, lsr pc
     a54:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     a58:	00000300 	andeq	r0, r0, r0, lsl #6
     a5c:	00010500 	andeq	r0, r1, r0, lsl #10
     a60:	14740205 	ldrbtne	r0, [r4], #-517	; 0xfffffdfb
     a64:	ca030100 	bgt	c0e6c <__core1_vectors-0xf3f194>
     a68:	0c050100 	stfeqs	f0, [r5], {-0}
     a6c:	4b010583 	blmi	42080 <__core1_vectors-0xfbdf80>
     a70:	01000802 	tsteq	r0, r2, lsl #16
     a74:	00010501 	andeq	r0, r1, r1, lsl #10
     a78:	149c0205 	ldrne	r0, [ip], #517	; 0x205
     a7c:	d3030100 	movwle	r0, #12544	; 0x3100
     a80:	08050100 	stmdaeq	r5, {r8}
     a84:	691005a0 	ldmdbvs	r0, {r5, r7, r8, sl}
     a88:	054d1305 	strbeq	r1, [sp, #-773]	; 0xfffffcfb
     a8c:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
     a90:	a12308dc 	ldrdge	r0, [r3, -ip]!
     a94:	052208d9 	streq	r0, [r2, #-2265]!	; 0xfffff727
     a98:	10053508 	andne	r3, r5, r8, lsl #10
     a9c:	5016057e 	andspl	r0, r6, lr, ror r5
     aa0:	a10c05be 			; <UNDEFINED> instruction: 0xa10c05be
     aa4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     aa8:	01010008 	tsteq	r1, r8
     aac:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     ab0:	0015bc02 	andseq	fp, r5, r2, lsl #24
     ab4:	01830301 	orreq	r0, r3, r1, lsl #6
     ab8:	bb130501 	bllt	4c1ec4 <__core1_vectors-0xb3e13c>
     abc:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ac0:	1e05f709 	cdpne	7, 0, cr15, cr5, cr9, {0}
     ac4:	660905a1 	strvs	r0, [r9], -r1, lsr #11
     ac8:	4b67314b 	blmi	19ccffc <__end__+0x9b0fdc>
     acc:	10059f4b 	andne	r9, r5, fp, asr #30
     ad0:	4e080531 	mcrmi	5, 0, r0, cr8, cr1, {1}
     ad4:	056c0905 	strbeq	r0, [ip, #-2309]!	; 0xfffff6fb
     ad8:	05230812 	streq	r0, [r3, #-2066]!	; 0xfffff7ee
     adc:	1405bd0c 	strne	fp, [r5], #-3340	; 0xfffff2f4
     ae0:	4d130568 	cfldr32mi	mvfx0, [r3, #-416]	; 0xfffffe60
     ae4:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
     ae8:	16054b0c 	strne	r4, [r5], -ip, lsl #22
     aec:	9f100568 	svcls	0x00100568
     af0:	05681805 	strbeq	r1, [r8, #-2053]!	; 0xfffff7fb
     af4:	01054f0c 	tsteq	r5, ip, lsl #30
     af8:	0006022f 	andeq	r0, r6, pc, lsr #4
     afc:	01050101 	tsteq	r5, r1, lsl #2
     b00:	14020500 	strne	r0, [r2], #-1280	; 0xfffffb00
     b04:	03010017 	movweq	r0, #4119	; 0x1017
     b08:	050101be 	streq	r0, [r1, #-446]	; 0xfffffe42
     b0c:	6767f314 			; <UNDEFINED> instruction: 0x6767f314
     b10:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     b14:	0525080d 	streq	r0, [r5, #-2061]!	; 0xfffff7f3
     b18:	1405660c 	strne	r6, [r5], #-1548	; 0xfffff9f4
     b1c:	0336054c 	teqeq	r6, #76, 10	; 0x13000000
     b20:	16054a09 	strne	r4, [r5], -r9, lsl #20
     b24:	8310054a 	tsthi	r0, #310378496	; 0x12800000
     b28:	05681805 	strbeq	r1, [r8, #-2053]!	; 0xfffff7fb
     b2c:	22054d10 	andcs	r4, r5, #16, 26	; 0x400
     b30:	88110568 	ldmdahi	r1, {r3, r5, r6, r8, sl}
     b34:	17030905 	strne	r0, [r3, -r5, lsl #18]
     b38:	032205d6 			; <UNDEFINED> instruction: 0x032205d6
     b3c:	11052e6e 	tstne	r5, lr, ror #28
     b40:	03090588 	movweq	r0, #38280	; 0x9588
     b44:	1c05d60c 	stcne	6, cr13, [r5], {12}
     b48:	09056730 	stmdbeq	r5, {r4, r5, r8, r9, sl, sp, lr}
     b4c:	30100567 	andscc	r0, r0, r7, ror #10
     b50:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     b54:	06028301 	streq	r8, [r2], -r1, lsl #6
     b58:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     b5c:	02050001 	andeq	r0, r5, #1
     b60:	00000000 	andeq	r0, r0, r0
     b64:	01028503 	tsteq	r2, r3, lsl #10
     b68:	05831305 	streq	r1, [r3, #773]	; 0x305
     b6c:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
     b70:	d81005a4 	ldmdale	r0, {r2, r5, r7, r8, sl}
     b74:	054f0905 	strbeq	r0, [pc, #-2309]	; 277 <__core1_vectors-0xfffd89>
     b78:	054dd810 	strbeq	sp, [sp, #-2064]	; 0xfffff7f0
     b7c:	06028401 	streq	r8, [r2], -r1, lsl #8
     b80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     b84:	02050001 	andeq	r0, r5, #1
     b88:	00000000 	andeq	r0, r0, r0
     b8c:	01029d03 	tsteq	r2, r3, lsl #26
     b90:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     b94:	06028301 	streq	r8, [r2], -r1, lsl #6
     b98:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     b9c:	02050001 	andeq	r0, r5, #1
     ba0:	01001870 	tsteq	r0, r0, ror r8
     ba4:	0102a203 	tsteq	r2, r3, lsl #4
     ba8:	4b840305 	blmi	fe1017c4 <__shm_end__+0xbe1017c4>
     bac:	054f2b05 	strbeq	r2, [pc, #-2821]	; af <__core1_vectors-0xffff51>
     bb0:	0105490c 	tsteq	r5, ip, lsl #18
     bb4:	000602a1 	andeq	r0, r6, r1, lsr #5
     bb8:	01050101 	tsteq	r5, r1, lsl #2
     bbc:	00020500 	andeq	r0, r2, r0, lsl #10
     bc0:	03000000 	movweq	r0, #0
     bc4:	050102af 	streq	r0, [r1, #-687]	; 0xfffffd51
     bc8:	0105850c 	tsteq	r5, ip, lsl #10
     bcc:	00060283 	andeq	r0, r6, r3, lsl #5
     bd0:	01050101 	tsteq	r5, r1, lsl #2
     bd4:	00020500 	andeq	r0, r2, r0, lsl #10
     bd8:	03000000 	movweq	r0, #0
     bdc:	050102b7 	streq	r0, [r1, #-695]	; 0xfffffd49
     be0:	0805a011 	stmdaeq	r5, {r0, r4, sp, pc}
     be4:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
     be8:	054e0f05 	strbeq	r0, [lr, #-3845]	; 0xfffff0fb
     bec:	08054a15 	stmdaeq	r5, {r0, r2, r4, r9, fp, lr}
     bf0:	4c10052e 	cfldr32mi	mvfx0, [r0], {46}	; 0x2e
     bf4:	054d1305 	strbeq	r1, [sp, #-773]	; 0xfffffcfb
     bf8:	11054a05 	tstne	r5, r5, lsl #20
     bfc:	660f05dc 			; <UNDEFINED> instruction: 0x660f05dc
     c00:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     c04:	1005320c 	andne	r3, r5, ip, lsl #4
     c08:	31010548 	tstcc	r1, r8, asr #10
     c0c:	01000802 	tsteq	r0, r2, lsl #16
     c10:	00010501 	andeq	r0, r1, r1, lsl #10
     c14:	00000205 	andeq	r0, r0, r5, lsl #4
     c18:	d4030000 	strle	r0, [r3], #-0
     c1c:	11050102 	tstne	r5, r2, lsl #2
     c20:	4a0805bc 	bmi	202318 <__core1_vectors-0xdfdce8>
     c24:	054c1005 	strbeq	r1, [ip, #-5]
     c28:	15054e0f 	strne	r4, [r5, #-3599]	; 0xfffff1f1
     c2c:	2e08054a 	cfsh32cs	mvfx0, mvfx8, #42
     c30:	054c1005 	strbeq	r1, [ip, #-5]
     c34:	05054d13 	streq	r4, [r5, #-3347]	; 0xfffff2ed
     c38:	dc09054a 	cfstr32le	mvfx0, [r9], {74}	; 0x4a
     c3c:	330c0583 	movwcc	r0, #50563	; 0xc583
     c40:	05471005 	strbeq	r1, [r7, #-5]
     c44:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
     c48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c4c:	02050001 	andeq	r0, r5, #1
     c50:	010018b8 			; <UNDEFINED> instruction: 0x010018b8
     c54:	0102f103 	tsteq	r2, r3, lsl #2	; <UNPREDICTABLE>
     c58:	05831305 	streq	r1, [r3, #773]	; 0x305
     c5c:	15054a05 	strne	r4, [r5, #-2565]	; 0xfffff5fb
     c60:	9f0905dc 	svcls	0x000905dc
     c64:	350c05bb 	strcc	r0, [ip, #-1467]	; 0xfffffa45
     c68:	05451005 	strbeq	r1, [r5, #-5]
     c6c:	08023401 	stmdaeq	r2, {r0, sl, ip, sp}
     c70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c74:	02050001 	andeq	r0, r5, #1
     c78:	01001938 	tsteq	r0, r8, lsr r9
     c7c:	01038503 	tsteq	r3, r3, lsl #10
     c80:	05831305 	streq	r1, [r3, #773]	; 0x305
     c84:	15054a05 	strne	r4, [r5, #-2565]	; 0xfffff5fb
     c88:	9f0905dc 	svcls	0x000905dc
     c8c:	330c05bb 	movwcc	r0, #50619	; 0xc5bb
     c90:	05471005 	strbeq	r1, [r7, #-5]
     c94:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
     c98:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c9c:	02050001 	andeq	r0, r5, #1
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	01039903 	tsteq	r3, r3, lsl #18
     ca8:	05bd1105 	ldreq	r1, [sp, #261]!	; 0x105
     cac:	10054a08 	andne	r4, r5, r8, lsl #20
     cb0:	4e11054c 	cfmac32mi	mvfx0, mvfx1, mvfx12
     cb4:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     cb8:	10052e08 	andne	r2, r5, r8, lsl #28
     cbc:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     cc0:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     cc4:	0905dc10 	stmdbeq	r5, {r4, sl, fp, ip, lr, pc}
     cc8:	0019054a 	andseq	r0, r9, sl, asr #10
     ccc:	30030402 	andcc	r0, r3, r2, lsl #8
     cd0:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
     cd4:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
     cd8:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
     cdc:	20056603 	andcs	r6, r5, r3, lsl #12
     ce0:	03040200 	movweq	r0, #16896	; 0x4200
     ce4:	00090548 	andeq	r0, r9, r8, asr #10
     ce8:	66010402 	strvs	r0, [r1], -r2, lsl #8
     cec:	30100586 	andscc	r0, r0, r6, lsl #11
     cf0:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     cf4:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     cf8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     cfc:	02050001 	andeq	r0, r5, #1
     d00:	010019b8 			; <UNDEFINED> instruction: 0x010019b8
     d04:	0103bd03 	tsteq	r3, r3, lsl #26
     d08:	05d91105 	ldrbeq	r1, [r9, #261]	; 0x105
     d0c:	10054a08 	andne	r4, r5, r8, lsl #20
     d10:	4e11054c 	cfmac32mi	mvfx0, mvfx1, mvfx12
     d14:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     d18:	10052e08 	andne	r2, r5, r8, lsl #28
     d1c:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     d20:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     d24:	0905dc10 	stmdbeq	r5, {r4, sl, fp, ip, lr, pc}
     d28:	3010054a 	andscc	r0, r0, sl, asr #10
     d2c:	05671705 	strbeq	r1, [r7, #-1797]!	; 0xfffff8fb
     d30:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
     d34:	17052e01 	strne	r2, [r5, -r1, lsl #28]
     d38:	01040200 	mrseq	r0, R12_usr
     d3c:	000d059e 	muleq	sp, lr, r5
     d40:	4c020402 	cfstrsmi	mvf0, [r2], {2}
     d44:	02002005 	andeq	r2, r0, #5
     d48:	05d10204 	ldrbeq	r0, [r1, #516]	; 0x204
     d4c:	04020009 	streq	r0, [r2], #-9
     d50:	05896601 	streq	r6, [r9, #1537]	; 0x601
     d54:	0c053010 	stceq	0, cr3, [r5], {16}
     d58:	2f01054d 	svccs	0x0001054d
     d5c:	01000802 	tsteq	r0, r2, lsl #16
     d60:	00010501 	andeq	r0, r1, r1, lsl #10
     d64:	1abc0205 	bne	fef01580 <__shm_end__+0xbef01580>
     d68:	e3030100 	movw	r0, #12544	; 0x3100
     d6c:	0c050103 	stfeqs	f0, [r5], {3}
     d70:	bb0105bb 	bllt	42464 <__core1_vectors-0xfbdb9c>
     d74:	01000602 	tsteq	r0, r2, lsl #12
     d78:	00010501 	andeq	r0, r1, r1, lsl #10
     d7c:	00000205 	andeq	r0, r0, r5, lsl #4
     d80:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
     d84:	11050103 	tstne	r5, r3, lsl #2
     d88:	4a170584 	bmi	5c23a0 <__core1_vectors-0xa3dc60>
     d8c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
     d90:	13054c10 	movwne	r4, #23568	; 0x5c10
     d94:	4a05054d 	bmi	1422d0 <__core1_vectors-0xebdd30>
     d98:	9ff70905 	svcls	0x00f70905
     d9c:	1005d731 	andne	sp, r5, r1, lsr r7
     da0:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     da4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     da8:	01010008 	tsteq	r1, r8
     dac:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     db0:	00000002 	andeq	r0, r0, r2
     db4:	04820300 	streq	r0, [r2], #768	; 0x300
     db8:	84110501 	ldrhi	r0, [r1], #-1281	; 0xfffffaff
     dbc:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     dc0:	10052e08 	andne	r2, r5, r8, lsl #28
     dc4:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     dc8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     dcc:	319ff709 	orrscc	pc, pc, r9, lsl #14
     dd0:	301005d7 			; <UNDEFINED> instruction: 0x301005d7
     dd4:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     dd8:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     ddc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     de0:	02050001 	andeq	r0, r5, #1
     de4:	00000000 	andeq	r0, r0, r0
     de8:	01049c03 	tsteq	r4, r3, lsl #24
     dec:	05841105 	streq	r1, [r4, #261]	; 0x105
     df0:	08054a17 	stmdaeq	r5, {r0, r1, r2, r4, r9, fp, lr}
     df4:	4c10052e 	cfldr32mi	mvfx0, [r0], {46}	; 0x2e
     df8:	054d1305 	strbeq	r1, [sp, #-773]	; 0xfffffcfb
     dfc:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
     e00:	d832a0f8 	ldmdale	r2!, {r3, r4, r5, r6, r7, sp, pc}
     e04:	05301005 	ldreq	r1, [r0, #-5]!
     e08:	01054d0c 	tsteq	r5, ip, lsl #26
     e0c:	0008022f 	andeq	r0, r8, pc, lsr #4
     e10:	01050101 	tsteq	r5, r1, lsl #2
     e14:	00020500 	andeq	r0, r2, r0, lsl #10
     e18:	03000000 	movweq	r0, #0
     e1c:	050104bb 	streq	r0, [r1, #-1211]	; 0xfffffb45
     e20:	05059f13 	streq	r9, [r5, #-3859]	; 0xfffff0ed
     e24:	f811054a 			; <UNDEFINED> instruction: 0xf811054a
     e28:	059e5f05 	ldreq	r5, [lr, #3845]	; 0xf05
     e2c:	09054a0f 	stmdbeq	r5, {r0, r1, r2, r3, r9, fp, lr}
     e30:	3211054b 	andscc	r0, r1, #314572800	; 0x12c00000
     e34:	059e7005 	ldreq	r7, [lr, #5]
     e38:	09054a0f 	stmdbeq	r5, {r0, r1, r2, r3, r9, fp, lr}
     e3c:	3010054b 	andscc	r0, r0, fp, asr #10
     e40:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     e44:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     e48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     e4c:	02050001 	andeq	r0, r5, #1
     e50:	00000000 	andeq	r0, r0, r0
     e54:	0104d203 	tsteq	r4, r3, lsl #4
     e58:	059f1305 	ldreq	r1, [pc, #773]	; 1165 <__core1_vectors-0xffee9b>
     e5c:	11054a05 	tstne	r5, r5, lsl #20
     e60:	9e5f05f8 	mrcls	5, 2, r0, cr15, cr8, {7}
     e64:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
     e68:	11054b09 	tstne	r5, r9, lsl #22
     e6c:	9e700533 	mrcls	5, 3, r0, cr0, cr3, {1}
     e70:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
     e74:	10054b09 	andne	r4, r5, r9, lsl #22
     e78:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     e7c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     e80:	01010008 	tsteq	r1, r8
     e84:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     e88:	00000002 	andeq	r0, r0, r2
     e8c:	04ea0300 	strbteq	r0, [sl], #768	; 0x300
     e90:	a0110501 	andsge	r0, r1, r1, lsl #10
     e94:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     e98:	10052e08 	andne	r2, r5, r8, lsl #28
     e9c:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     ea0:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ea4:	1005f712 	andne	pc, r5, r2, lsl r7	; <UNPREDICTABLE>
     ea8:	6709054a 	strvs	r0, [r9, -sl, asr #10]
     eac:	05311005 	ldreq	r1, [r1, #-5]!
     eb0:	10056709 	andne	r6, r5, r9, lsl #14
     eb4:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     eb8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     ebc:	01010008 	tsteq	r1, r8
     ec0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     ec4:	00000002 	andeq	r0, r0, r2
     ec8:	05850300 	streq	r0, [r5, #768]	; 0x300
     ecc:	a0110501 	andsge	r0, r1, r1, lsl #10
     ed0:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     ed4:	10052e08 	andne	r2, r5, r8, lsl #28
     ed8:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     edc:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ee0:	1005f712 	andne	pc, r5, r2, lsl r7	; <UNPREDICTABLE>
     ee4:	6709054a 	strvs	r0, [r9, -sl, asr #10]
     ee8:	05311005 	ldreq	r1, [r1, #-5]!
     eec:	10056709 	andne	r6, r5, r9, lsl #14
     ef0:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     ef4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     ef8:	01010008 	tsteq	r1, r8
     efc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     f00:	00000002 	andeq	r0, r0, r2
     f04:	05a00300 	streq	r0, [r0, #768]!	; 0x300
     f08:	bc110501 	cfldr32lt	mvfx0, [r1], {1}
     f0c:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     f10:	10052e08 	andne	r2, r5, r8, lsl #28
     f14:	4e05054c 	cfsh32mi	mvfx0, mvfx5, #44
     f18:	056e1005 	strbeq	r1, [lr, #-5]!
     f1c:	13054809 	movwne	r4, #22537	; 0x5809
     f20:	4a050533 	bmi	1423f4 <__core1_vectors-0xebdc0c>
     f24:	9fdc1505 	svcls	0x00dc1505
     f28:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     f2c:	09056615 	stmdbeq	r5, {r0, r2, r4, r9, sl, sp, lr}
     f30:	0c05bb67 			; <UNDEFINED> instruction: 0x0c05bb67
     f34:	47100533 			; <UNDEFINED> instruction: 0x47100533
     f38:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
     f3c:	01010008 	tsteq	r1, r8
     f40:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     f44:	00000002 	andeq	r0, r0, r2
     f48:	05c60300 	strbeq	r0, [r6, #768]	; 0x300
     f4c:	bc110501 	cfldr32lt	mvfx0, [r1], {1}
     f50:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     f54:	10052e08 	andne	r2, r5, r8, lsl #28
     f58:	4e05054c 	cfsh32mi	mvfx0, mvfx5, #44
     f5c:	056e1005 	strbeq	r1, [lr, #-5]!
     f60:	13054809 	movwne	r4, #22537	; 0x5809
     f64:	4a050533 	bmi	142438 <__core1_vectors-0xebdbc8>
     f68:	9fdc1505 	svcls	0x00dc1505
     f6c:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     f70:	09056615 	stmdbeq	r5, {r0, r2, r4, r9, sl, sp, lr}
     f74:	0c05bb67 			; <UNDEFINED> instruction: 0x0c05bb67
     f78:	47100533 			; <UNDEFINED> instruction: 0x47100533
     f7c:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
     f80:	01010008 	tsteq	r1, r8
     f84:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     f88:	00000002 	andeq	r0, r0, r2
     f8c:	05ec0300 	strbeq	r0, [ip, #768]!	; 0x300
     f90:	a0180501 	andsge	r0, r8, r1, lsl #10
     f94:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
     f98:	4a0a0318 	bmi	281c00 <__core1_vectors-0xd7e400>
     f9c:	054a2505 	strbeq	r2, [sl, #-1285]	; 0xfffffafb
     fa0:	0f052e2b 	svceq	0x00052e2b
     fa4:	4c0c059e 	cfstr32mi	mvfx0, [ip], {158}	; 0x9e
     fa8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     fac:	01010006 	tsteq	r1, r6
     fb0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     fb4:	001af802 	andseq	pc, sl, r2, lsl #16
     fb8:	05ff0301 	ldrbeq	r0, [pc, #769]!	; 12c1 <__core1_vectors-0xffed3f>
     fbc:	a0080501 	andge	r0, r8, r1, lsl #10
     fc0:	05681005 	strbeq	r1, [r8, #-5]!
     fc4:	4a0a0317 	bmi	281c28 <__core1_vectors-0xd7e3d8>
     fc8:	054a2905 	strbeq	r2, [sl, #-2309]	; 0xfffff6fb
     fcc:	3c054a24 			; <UNDEFINED> instruction: 0x3c054a24
     fd0:	4a0d052e 	bmi	342490 <__core1_vectors-0xcbdb70>
     fd4:	05a10c05 	streq	r0, [r1, #3077]!	; 0xc05
     fd8:	06028301 	streq	r8, [r2], -r1, lsl #6
     fdc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     fe0:	02050001 	andeq	r0, r5, #1
     fe4:	00000000 	andeq	r0, r0, r0
     fe8:	01069503 	tsteq	r6, r3, lsl #10
     fec:	05a01005 	streq	r1, [r0, #5]!
     ff0:	0c05660e 	stceq	6, cr6, [r5], {14}
     ff4:	2f01054c 	svccs	0x0001054c
     ff8:	01000802 	tsteq	r0, r2, lsl #16
     ffc:	00010501 	andeq	r0, r1, r1, lsl #10
    1000:	1b6c0205 	blne	1b0181c <__end__+0xae57fc>
    1004:	9e030100 	adflss	f0, f3, f0
    1008:	08050106 	stmdaeq	r5, {r1, r2, r8}
    100c:	001c05a0 	andseq	r0, ip, r0, lsr #11
    1010:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1014:	05681005 	strbeq	r1, [r8, #-5]!
    1018:	05bb4e12 	ldreq	r4, [fp, #3602]!	; 0xe12
    101c:	0105bf0c 	tsteq	r5, ip, lsl #30
    1020:	0008022f 	andeq	r0, r8, pc, lsr #4
    1024:	01050101 	tsteq	r5, r1, lsl #2
    1028:	00020500 	andeq	r0, r2, r0, lsl #10
    102c:	03000000 	movweq	r0, #0
    1030:	050106b0 	streq	r0, [r1, #-1712]	; 0xfffff950
    1034:	05059f13 	streq	r9, [r5, #-3859]	; 0xfffff0ed
    1038:	dc09054a 	cfstr32le	mvfx0, [r9], {74}	; 0x4a
    103c:	0c053d08 	stceq	13, cr3, [r5], {8}
    1040:	47100533 			; <UNDEFINED> instruction: 0x47100533
    1044:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    1048:	01010008 	tsteq	r1, r8
    104c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1050:	001be402 	andseq	lr, fp, r2, lsl #8
    1054:	06c10301 	strbeq	r0, [r1], r1, lsl #6
    1058:	9f130501 	svcls	0x00130501
    105c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    1060:	5908dc09 	stmdbpl	r8, {r0, r3, sl, fp, ip, lr, pc}
    1064:	05330c05 	ldreq	r0, [r3, #-3077]!	; 0xfffff3fb
    1068:	01054710 	tsteq	r5, r0, lsl r7
    106c:	00080232 	andeq	r0, r8, r2, lsr r2
    1070:	01050101 	tsteq	r5, r1, lsl #2
    1074:	00020500 	andeq	r0, r2, r0, lsl #10
    1078:	03000000 	movweq	r0, #0
    107c:	050106d2 	streq	r0, [r1, #-1746]	; 0xfffff92e
    1080:	0105840c 	tsteq	r5, ip, lsl #8
    1084:	00060283 	andeq	r0, r6, r3, lsl #5
    1088:	01050101 	tsteq	r5, r1, lsl #2
    108c:	00020500 	andeq	r0, r2, r0, lsl #10
    1090:	03000000 	movweq	r0, #0
    1094:	050106d8 	streq	r0, [r1, #-1752]	; 0xfffff928
    1098:	0105840c 	tsteq	r5, ip, lsl #8
    109c:	00060283 	andeq	r0, r6, r3, lsl #5
    10a0:	01050101 	tsteq	r5, r1, lsl #2
    10a4:	00020500 	andeq	r0, r2, r0, lsl #10
    10a8:	03000000 	movweq	r0, #0
    10ac:	050106de 	streq	r0, [r1, #-1758]	; 0xfffff922
    10b0:	0105840c 	tsteq	r5, ip, lsl #8
    10b4:	00060283 	andeq	r0, r6, r3, lsl #5
    10b8:	01050101 	tsteq	r5, r1, lsl #2
    10bc:	00020500 	andeq	r0, r2, r0, lsl #10
    10c0:	03000000 	movweq	r0, #0
    10c4:	050106e4 	streq	r0, [r1, #-1764]	; 0xfffff91c
    10c8:	0105840c 	tsteq	r5, ip, lsl #8
    10cc:	00060283 	andeq	r0, r6, r3, lsl #5
    10d0:	01050101 	tsteq	r5, r1, lsl #2
    10d4:	00020500 	andeq	r0, r2, r0, lsl #10
    10d8:	03000000 	movweq	r0, #0
    10dc:	050106ea 	streq	r0, [r1, #-1770]	; 0xfffff916
    10e0:	0105840c 	tsteq	r5, ip, lsl #8
    10e4:	00060283 	andeq	r0, r6, r3, lsl #5
    10e8:	01050101 	tsteq	r5, r1, lsl #2
    10ec:	00020500 	andeq	r0, r2, r0, lsl #10
    10f0:	03000000 	movweq	r0, #0
    10f4:	050106f0 	streq	r0, [r1, #-1776]	; 0xfffff910
    10f8:	0105840c 	tsteq	r5, ip, lsl #8
    10fc:	00060283 	andeq	r0, r6, r3, lsl #5
    1100:	01050101 	tsteq	r5, r1, lsl #2
    1104:	00020500 	andeq	r0, r2, r0, lsl #10
    1108:	03000000 	movweq	r0, #0
    110c:	050106f6 	streq	r0, [r1, #-1782]	; 0xfffff90a
    1110:	0105840c 	tsteq	r5, ip, lsl #8
    1114:	00060283 	andeq	r0, r6, r3, lsl #5
    1118:	01050101 	tsteq	r5, r1, lsl #2
    111c:	00020500 	andeq	r0, r2, r0, lsl #10
    1120:	03000000 	movweq	r0, #0
    1124:	050106fc 	streq	r0, [r1, #-1788]	; 0xfffff904
    1128:	0105840c 	tsteq	r5, ip, lsl #8
    112c:	00060283 	andeq	r0, r6, r3, lsl #5
    1130:	01050101 	tsteq	r5, r1, lsl #2
    1134:	68020500 	stmdavs	r2, {r8, sl}
    1138:	0301001c 	movweq	r0, #4124	; 0x101c
    113c:	05010782 	streq	r0, [r1, #-1922]	; 0xfffff87e
    1140:	0105880c 	tsteq	r5, ip, lsl #16
    1144:	00060286 	andeq	r0, r6, r6, lsl #5
    1148:	01050101 	tsteq	r5, r1, lsl #2
    114c:	00020500 	andeq	r0, r2, r0, lsl #10
    1150:	03000000 	movweq	r0, #0
    1154:	05010790 	streq	r0, [r1, #-1936]	; 0xfffff870
    1158:	05059f13 	streq	r9, [r5, #-3859]	; 0xfffff0ed
    115c:	dc2c054a 	cfstr32le	mvfx0, [ip], #-296	; 0xfffffed8
    1160:	05821305 	streq	r1, [r2, #773]	; 0x305
    1164:	11052e2c 	tstne	r5, ip, lsr #28
    1168:	4b09054a 	blmi	242698 <__core1_vectors-0xdbd968>
    116c:	05330c05 	ldreq	r0, [r3, #-3077]!	; 0xfffff3fb
    1170:	01054710 	tsteq	r5, r0, lsl r7
    1174:	00080232 	andeq	r0, r8, r2, lsr r2
    1178:	01050101 	tsteq	r5, r1, lsl #2
    117c:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    1180:	0301001c 	movweq	r0, #4124	; 0x101c
    1184:	050107a4 	streq	r0, [r1, #-1956]	; 0xfffff85c
    1188:	0592080e 	ldreq	r0, [r2, #2062]	; 0x80e
    118c:	10054d05 	andne	r4, r5, r5, lsl #26
    1190:	4809056e 	stmdami	r9, {r1, r2, r3, r5, r6, r8, sl}
    1194:	05340505 	ldreq	r0, [r4, #-1285]!	; 0xfffffafb
    1198:	09056d10 	stmdbeq	r5, {r4, r8, sl, fp, sp, lr}
    119c:	34050548 	strcc	r0, [r5], #-1352	; 0xfffffab8
    11a0:	056c1005 	strbeq	r1, [ip, #-5]!
    11a4:	13054809 	movwne	r4, #22537	; 0x5809
    11a8:	4a050533 	bmi	14267c <__core1_vectors-0xebd984>
    11ac:	05dd1005 	ldrbeq	r1, [sp, #5]
    11b0:	10054a0d 	andne	r4, r5, sp, lsl #20
    11b4:	660d0569 	strvs	r0, [sp], -r9, ror #10
    11b8:	05690c05 	strbeq	r0, [r9, #-3077]!	; 0xfffff3fb
    11bc:	10056911 	andne	r6, r5, r1, lsl r9
    11c0:	69150568 	ldmdbvs	r5, {r3, r5, r6, r8, sl}
    11c4:	086b0905 	stmdaeq	fp!, {r0, r2, r8, fp}^
    11c8:	340c057b 	strcc	r0, [ip], #-1403	; 0xfffffa85
    11cc:	05471005 	strbeq	r1, [r7, #-5]
    11d0:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
    11d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    11d8:	02050001 	andeq	r0, r5, #1
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	0107f403 	tsteq	r7, r3, lsl #8	; <UNPREDICTABLE>
    11e4:	05831305 	streq	r1, [r3, #773]	; 0x305
    11e8:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
    11ec:	052108dc 	streq	r0, [r1, #-2268]!	; 0xfffff724
    11f0:	1005340c 	andne	r3, r5, ip, lsl #8
    11f4:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    11f8:	01000802 	tsteq	r0, r2, lsl #16
    11fc:	00010501 	andeq	r0, r1, r1, lsl #10
    1200:	00000205 	andeq	r0, r0, r5, lsl #4
    1204:	86030000 	strhi	r0, [r3], -r0
    1208:	13050108 	movwne	r0, #20744	; 0x5108
    120c:	4a050583 	bmi	142820 <__core1_vectors-0xebd7e0>
    1210:	08dc0905 	ldmeq	ip, {r0, r2, r8, fp}^
    1214:	350c0521 	strcc	r0, [ip, #-1313]	; 0xfffffadf
    1218:	05461005 	strbeq	r1, [r6, #-5]
    121c:	08023301 	stmdaeq	r2, {r0, r8, r9, ip, sp}
    1220:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1224:	02050001 	andeq	r0, r5, #1
    1228:	00000000 	andeq	r0, r0, r0
    122c:	01089a03 	tsteq	r8, r3, lsl #20
    1230:	059f1305 	ldreq	r1, [pc, #773]	; 153d <__core1_vectors-0xffeac3>
    1234:	13054a05 	movwne	r4, #23045	; 0x5a05
    1238:	4a1105dc 	bmi	4429b0 <__core1_vectors-0xbbd650>
    123c:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    1240:	1005330c 	andne	r3, r5, ip, lsl #6
    1244:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    1248:	01000802 	tsteq	r0, r2, lsl #16
    124c:	00010501 	andeq	r0, r1, r1, lsl #10
    1250:	1de80205 	sfmne	f0, 2, [r8, #20]!
    1254:	ac030100 	stfges	f0, [r3], {-0}
    1258:	13050108 	movwne	r0, #20744	; 0x5108
    125c:	4a05059f 	bmi	1428e0 <__core1_vectors-0xebd720>
    1260:	08dc0905 	ldmeq	ip, {r0, r2, r8, fp}^
    1264:	330c053d 	movwcc	r0, #50493	; 0xc53d
    1268:	05471005 	strbeq	r1, [r7, #-5]
    126c:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
    1270:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1274:	02050001 	andeq	r0, r5, #1
    1278:	00000000 	andeq	r0, r0, r0
    127c:	0108bd03 	tsteq	r8, r3, lsl #26
    1280:	059f1305 	ldreq	r1, [pc, #773]	; 158d <__core1_vectors-0xffea73>
    1284:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
    1288:	055908dc 	ldrbeq	r0, [r9, #-2268]	; 0xfffff724
    128c:	1005330c 	andne	r3, r5, ip, lsl #6
    1290:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    1294:	01000802 	tsteq	r0, r2, lsl #16
    1298:	00010501 	andeq	r0, r1, r1, lsl #10
    129c:	00000205 	andeq	r0, r0, r5, lsl #4
    12a0:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    12a4:	11050108 	tstne	r5, r8, lsl #2
    12a8:	4a170584 	bmi	5c28c0 <__core1_vectors-0xa3d740>
    12ac:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    12b0:	0f054c10 	svceq	0x00054c10
    12b4:	4a08054e 	bmi	2027f4 <__core1_vectors-0xdfd80c>
    12b8:	054d1805 	strbeq	r1, [sp, #-2053]	; 0xfffff7fb
    12bc:	36054a12 			; <UNDEFINED> instruction: 0x36054a12
    12c0:	4a0c054b 	bmi	3027f4 <__core1_vectors-0xcfd80c>
    12c4:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    12c8:	01054f0c 	tsteq	r5, ip, lsl #30
    12cc:	00060283 	andeq	r0, r6, r3, lsl #5
    12d0:	01050101 	tsteq	r5, r1, lsl #2
    12d4:	00020500 	andeq	r0, r2, r0, lsl #10
    12d8:	03000000 	movweq	r0, #0
    12dc:	050108e5 	streq	r0, [r1, #-2277]	; 0xfffff71b
    12e0:	0105840c 	tsteq	r5, ip, lsl #8
    12e4:	00060283 	andeq	r0, r6, r3, lsl #5
    12e8:	01050101 	tsteq	r5, r1, lsl #2
    12ec:	00020500 	andeq	r0, r2, r0, lsl #10
    12f0:	03000000 	movweq	r0, #0
    12f4:	050108eb 	streq	r0, [r1, #-2283]	; 0xfffff715
    12f8:	0805840f 	stmdaeq	r5, {r0, r1, r2, r3, sl, pc}
    12fc:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
    1300:	054e0c05 	strbeq	r0, [lr, #-3077]	; 0xfffff3fb
    1304:	06028301 	streq	r8, [r2], -r1, lsl #6
    1308:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    130c:	02050001 	andeq	r0, r5, #1
    1310:	00000000 	andeq	r0, r0, r0
    1314:	0108f703 	tsteq	r8, r3, lsl #14	; <UNPREDICTABLE>
    1318:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    131c:	06028301 	streq	r8, [r2], -r1, lsl #6
    1320:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1324:	02050001 	andeq	r0, r5, #1
    1328:	00000000 	andeq	r0, r0, r0
    132c:	0108fd03 	tsteq	r8, r3, lsl #26	; <UNPREDICTABLE>
    1330:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    1334:	06028301 	streq	r8, [r2], -r1, lsl #6
    1338:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    133c:	02050001 	andeq	r0, r5, #1
    1340:	00000000 	andeq	r0, r0, r0
    1344:	01098303 	tsteq	r9, r3, lsl #6
    1348:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    134c:	06028301 	streq	r8, [r2], -r1, lsl #6
    1350:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1354:	02050001 	andeq	r0, r5, #1
    1358:	00000000 	andeq	r0, r0, r0
    135c:	01098903 	tsteq	r9, r3, lsl #18
    1360:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    1364:	06028301 	streq	r8, [r2], -r1, lsl #6
    1368:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    136c:	02050001 	andeq	r0, r5, #1
    1370:	00000000 	andeq	r0, r0, r0
    1374:	01098f03 	tsteq	r9, r3, lsl #30
    1378:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    137c:	06028301 	streq	r8, [r2], -r1, lsl #6
    1380:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1384:	02050001 	andeq	r0, r5, #1
    1388:	01001e68 	tsteq	r0, r8, ror #28
    138c:	01099503 	tsteq	r9, r3, lsl #10
    1390:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    1394:	06028301 	streq	r8, [r2], -r1, lsl #6
    1398:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    139c:	02050001 	andeq	r0, r5, #1
    13a0:	00000000 	andeq	r0, r0, r0
    13a4:	01099b03 	tsteq	r9, r3, lsl #22
    13a8:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    13ac:	06028301 	streq	r8, [r2], -r1, lsl #6
    13b0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13b4:	02050001 	andeq	r0, r5, #1
    13b8:	01001e94 			; <UNDEFINED> instruction: 0x01001e94
    13bc:	0109a103 	tsteq	r9, r3, lsl #2
    13c0:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    13c4:	06028301 	streq	r8, [r2], -r1, lsl #6
    13c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13cc:	02050001 	andeq	r0, r5, #1
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	0109a703 	tsteq	r9, r3, lsl #14
    13d8:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    13dc:	06028301 	streq	r8, [r2], -r1, lsl #6
    13e0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13e4:	02050001 	andeq	r0, r5, #1
    13e8:	00000000 	andeq	r0, r0, r0
    13ec:	0109ae03 	tsteq	r9, r3, lsl #28
    13f0:	059f1305 	ldreq	r1, [pc, #773]	; 16fd <__core1_vectors-0xffe903>
    13f4:	13054a05 	movwne	r4, #23045	; 0x5a05
    13f8:	4a1105dc 	bmi	442b70 <__core1_vectors-0xbbd490>
    13fc:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    1400:	1005330c 	andne	r3, r5, ip, lsl #6
    1404:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    1408:	01000802 	tsteq	r0, r2, lsl #16
    140c:	000e4301 	andeq	r4, lr, r1, lsl #6
    1410:	ff000300 			; <UNDEFINED> instruction: 0xff000300
    1414:	02000000 	andeq	r0, r0, #0
    1418:	0d0efb01 	vstreq	d15, [lr, #-4]
    141c:	01010100 	mrseq	r0, (UNDEF: 17)
    1420:	00000001 	andeq	r0, r0, r1
    1424:	01000001 	tsteq	r0, r1
    1428:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    142c:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    1430:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1434:	77680065 	strbvc	r0, [r8, -r5, rrx]!
    1438:	2f62696c 	svccs	0x0062696c
    143c:	2f637273 	svccs	0x00637273
    1440:	676d7768 	strbvs	r7, [sp, -r8, ror #14]!
    1444:	752f0072 	strvc	r0, [pc, #-114]!	; 13da <__core1_vectors-0xffec26>
    1448:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1284 <__core1_vectors-0xffed7c>
    144c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1450:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    1454:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1458:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    145c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1460:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    1464:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    1468:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    146c:	2f006564 	svccs	0x00006564
    1470:	2f727375 	svccs	0x00727375
    1474:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1478:	2f656475 	svccs	0x00656475
    147c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1480:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1484:	2f007379 	svccs	0x00007379
    1488:	2f727375 	svccs	0x00727375
    148c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1490:	2f656475 	svccs	0x00656475
    1494:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1498:	00006269 	andeq	r6, r0, r9, ror #4
    149c:	5f746c61 	svcpl	0x00746c61
    14a0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    14a4:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
    14a8:	00000100 	andeq	r0, r0, r0, lsl #2
    14ac:	5f746c61 	svcpl	0x00746c61
    14b0:	2e756d6d 	cdpcs	13, 7, cr6, cr5, cr13, {3}
    14b4:	00020063 	andeq	r0, r2, r3, rrx
    14b8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    14bc:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    14c0:	00030068 	andeq	r0, r3, r8, rrx
    14c4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    14c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    14cc:	00030068 	andeq	r0, r3, r8, rrx
    14d0:	6c776800 	ldclvs	8, cr6, [r7], #-0
    14d4:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    14d8:	00000100 	andeq	r0, r0, r0, lsl #2
    14dc:	5f746c61 	svcpl	0x00746c61
    14e0:	2e756d6d 	cdpcs	13, 7, cr6, cr5, cr13, {3}
    14e4:	00010068 	andeq	r0, r1, r8, rrx
    14e8:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    14ec:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    14f0:	00040068 	andeq	r0, r4, r8, rrx
    14f4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    14f8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    14fc:	00000400 	andeq	r0, r0, r0, lsl #8
    1500:	6b636f6c 	blvs	18dd2b8 <__end__+0x8c1298>
    1504:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1508:	74730000 	ldrbtvc	r0, [r3], #-0
    150c:	2e6f6964 	vnmulcs.f16	s13, s30, s9	; <UNPREDICTABLE>
    1510:	00050068 	andeq	r0, r5, r8, rrx
    1514:	51050000 	mrspl	r0, (UNDEF: 5)
    1518:	c0020500 	andgt	r0, r2, r0, lsl #10
    151c:	0301001e 	movweq	r0, #4126	; 0x101e
    1520:	59050138 	stmdbpl	r5, {r3, r4, r5, r8}
    1524:	2e010566 	cfsh32cs	mvfx0, mvfx1, #54
    1528:	01000a02 	tsteq	r0, r2, lsl #20
    152c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1530:	02050001 	andeq	r0, r5, #1
    1534:	01001ee4 	smlatteq	r0, r4, lr, r1
    1538:	0102aa03 	tsteq	r2, r3, lsl #20
    153c:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    1540:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1544:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1548:	00010502 	andeq	r0, r1, r2, lsl #10
    154c:	00000205 	andeq	r0, r0, r5, lsl #4
    1550:	af030000 	svcge	0x00030000
    1554:	0c050102 	stfeqs	f0, [r5], {2}
    1558:	2f01054b 	svccs	0x0001054b
    155c:	01000802 	tsteq	r0, r2, lsl #16
    1560:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1564:	02050001 	andeq	r0, r5, #1
    1568:	01001f00 	tsteq	r0, r0, lsl #30
    156c:	0102b403 	tsteq	r2, r3, lsl #8
    1570:	a1030505 	tstge	r3, r5, lsl #10
    1574:	0c05827f 	sfmeq	f0, 1, [r5], {127}	; 0x7f
    1578:	0316054d 	tsteq	r6, #322961408	; 0x13400000
    157c:	052e00dd 	streq	r0, [lr, #-221]!	; 0xffffff23
    1580:	1c052f0e 	stcne	15, cr2, [r5], {14}
    1584:	f21b0569 	vrshl.s16	q0, <illegal reg q12.5>, <illegal reg q5.5>
    1588:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    158c:	08052e19 	stmdaeq	r5, {r0, r3, r4, r9, sl, fp, sp}
    1590:	4d10052e 	cfldr32mi	mvfx0, [r0, #-184]	; 0xffffff48
    1594:	05510505 	ldrbeq	r0, [r1, #-1285]	; 0xfffffafb
    1598:	0105840c 	tsteq	r5, ip, lsl #8
    159c:	0006022f 	andeq	r0, r6, pc, lsr #4
    15a0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    15a4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    15a8:	00000002 	andeq	r0, r0, r2
    15ac:	02cb0300 	sbceq	r0, fp, #0, 6
    15b0:	bd0a0501 	cfstr32lt	mvfx0, [sl, #-4]
    15b4:	05510d05 	ldrbeq	r0, [r1, #-3333]	; 0xfffff2fb
    15b8:	12054a05 	andne	r4, r5, #20480	; 0x5000
    15bc:	4a0c05f6 	bmi	302d9c <__core1_vectors-0xcfd264>
    15c0:	054d1a05 	strbeq	r1, [sp, #-2565]	; 0xfffff5fb
    15c4:	1f054d11 	svcne	0x00054d11
    15c8:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
    15cc:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
    15d0:	1f055011 	svcne	0x00055011
    15d4:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
    15d8:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
    15dc:	1b05510d 	blne	155a18 <__core1_vectors-0xeaa5e8>
    15e0:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
    15e4:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    15e8:	09054f10 	stmdbeq	r5, {r4, r8, r9, sl, fp, lr}
    15ec:	524a7503 	subpl	r7, sl, #12582912	; 0xc00000
    15f0:	09030d05 	stmdbeq	r3, {r0, r2, r8, sl, fp}
    15f4:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
    15f8:	054c1605 	strbeq	r1, [ip, #-1541]	; 0xfffff9fb
    15fc:	0d056608 	stceq	6, cr6, [r5, #-32]	; 0xffffffe0
    1600:	8215054c 	andshi	r0, r5, #76, 10	; 0x13000000
    1604:	056b1005 	strbeq	r1, [fp, #-5]!
    1608:	18054a09 	stmdane	r5, {r0, r3, r9, fp, lr}
    160c:	03040200 	movweq	r0, #16896	; 0x4200
    1610:	00110530 	andseq	r0, r1, r0, lsr r5
    1614:	66030402 	strvs	r0, [r3], -r2, lsl #8
    1618:	02001d05 	andeq	r1, r0, #320	; 0x140
    161c:	00660304 	rsbeq	r0, r6, r4, lsl #6
    1620:	48030402 	stmdami	r3, {r1, sl}
    1624:	02000905 	andeq	r0, r0, #81920	; 0x14000
    1628:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    162c:	01056c0c 	tsteq	r5, ip, lsl #24
    1630:	0008022f 	andeq	r0, r8, pc, lsr #4
    1634:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    1638:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    163c:	00000002 	andeq	r0, r0, r2
    1640:	03920300 	orrseq	r0, r2, #0, 6
    1644:	bb0a0501 	bllt	282a50 <__core1_vectors-0xd7d5b0>
    1648:	09030d05 	stmdbeq	r3, {r0, r2, r8, sl, fp}
    164c:	4a05054a 	bmi	142b7c <__core1_vectors-0xebd484>
    1650:	25080d05 	strcs	r0, [r8, #-3333]	; 0xfffff2fb
    1654:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
    1658:	14052e0c 	strne	r2, [r5], #-3596	; 0xfffff1f4
    165c:	4e0d054c 	cfsh32mi	mvfx0, mvfx13, #44
    1660:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
    1664:	14052e0c 	strne	r2, [r5], #-3596	; 0xfffff1f4
    1668:	4c13054c 	cfldr32mi	mvfx0, [r3], {76}	; 0x4c
    166c:	034b0905 	movteq	r0, #47365	; 0xb905
    1670:	16052e79 			; <UNDEFINED> instruction: 0x16052e79
    1674:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    1678:	15052e24 	strne	r2, [r5, #-3620]	; 0xfffff1dc
    167c:	660f052e 	strvs	r0, [pc], -lr, lsr #10
    1680:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    1684:	10054a08 	andne	r4, r5, r8, lsl #20
    1688:	4e23054c 	cfsh64mi	mvdx0, mvdx3, #44
    168c:	05660a05 	strbeq	r0, [r6, #-2565]!	; 0xfffff5fb
    1690:	0b05310d 	bleq	14dacc <__core1_vectors-0xeb2534>
    1694:	4b13054a 	blmi	4c2bc4 <__core1_vectors-0xb3d43c>
    1698:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    169c:	15054c0d 	strne	r4, [r5, #-3085]	; 0xfffff3f3
    16a0:	6c100582 	cfldr32vs	mvfx0, [r0], {130}	; 0x82
    16a4:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    16a8:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    16ac:	11053003 	tstne	r5, r3
    16b0:	03040200 	movweq	r0, #16896	; 0x4200
    16b4:	001d0566 	andseq	r0, sp, r6, ror #10
    16b8:	66030402 	strvs	r0, [r3], -r2, lsl #8
    16bc:	03040200 	movweq	r0, #16896	; 0x4200
    16c0:	00090548 	andeq	r0, r9, r8, asr #10
    16c4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    16c8:	056c0c05 	strbeq	r0, [ip, #-3077]!	; 0xfffff3fb
    16cc:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    16d0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    16d4:	00010502 	andeq	r0, r1, r2, lsl #10
    16d8:	00000205 	andeq	r0, r0, r5, lsl #4
    16dc:	d1030000 	mrsle	r0, (UNDEF: 3)
    16e0:	05050103 	streq	r0, [r5, #-259]	; 0xfffffefd
    16e4:	667da003 	ldrbtvs	sl, [sp], -r3
    16e8:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    16ec:	02de0316 	sbcseq	r0, lr, #1476395008	; 0x58000000
    16f0:	2f0f052e 	svccs	0x000f052e
    16f4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    16f8:	0b054c09 	bleq	154724 <__core1_vectors-0xeab8dc>
    16fc:	03050568 	movweq	r0, #21864	; 0x5568
    1700:	059e7daa 	ldreq	r7, [lr, #3498]	; 0xdaa
    1704:	0c054c01 	stceq	12, cr4, [r5], {1}
    1708:	2e02d703 	cdpcs	7, 0, cr13, cr2, cr3, {0}
    170c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1710:	01010006 	tsteq	r1, r6
    1714:	01050204 	tsteq	r5, r4, lsl #4
    1718:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    171c:	0301001f 	movweq	r0, #4127	; 0x101f
    1720:	050103de 	streq	r0, [r1, #-990]	; 0xfffffc22
    1724:	91036805 	tstls	r3, r5, lsl #16
    1728:	0c052e7d 	stceq	14, cr2, [r5], {125}	; 0x7d
    172c:	030d054d 	movweq	r0, #54605	; 0xd54d
    1730:	052e02ee 	streq	r0, [lr, #-750]!	; 0xfffffd12
    1734:	05052f0b 	streq	r2, [r5, #-3851]	; 0xfffff0f5
    1738:	9e7d9e03 	cdpls	14, 7, cr9, cr13, cr3, {0}
    173c:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
    1740:	02e3030c 	rsceq	r0, r3, #12, 6	; 0x30000000
    1744:	2f01052e 	svccs	0x0001052e
    1748:	01000602 	tsteq	r0, r2, lsl #12
    174c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1750:	02050001 	andeq	r0, r5, #1
    1754:	00000000 	andeq	r0, r0, r0
    1758:	0103ea03 	tsteq	r3, r3, lsl #20
    175c:	eb030505 	bl	c2b78 <__core1_vectors-0xf3d488>
    1760:	0c05667d 	stceq	6, cr6, [r5], {125}	; 0x7d
    1764:	0316054d 	tsteq	r6, #322961408	; 0x13400000
    1768:	052e0293 	streq	r0, [lr, #-659]!	; 0xfffffd6d
    176c:	05052f0e 	streq	r2, [r5, #-3854]	; 0xfffff0f2
    1770:	667e8903 	ldrbtvs	r8, [lr], -r3, lsl #18
    1774:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    1778:	01f50316 	mvnseq	r0, r6, lsl r3
    177c:	3015052e 	andscc	r0, r5, lr, lsr #10
    1780:	20084105 	andcs	r4, r8, r5, lsl #2
    1784:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    1788:	01010008 	tsteq	r1, r8
    178c:	01050204 	tsteq	r5, r4, lsl #4
    1790:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    1794:	0301001f 	movweq	r0, #4127	; 0x101f
    1798:	050103f3 	streq	r0, [r1, #-1011]	; 0xfffffc0d
    179c:	7de20305 	stclvc	3, cr0, [r2, #20]!
    17a0:	4d0c0582 	cfstr32mi	mvfx0, [ip, #-520]	; 0xfffffdf8
    17a4:	9c031605 	stcls	6, cr1, [r3], {5}
    17a8:	0e052e02 	cdpeq	14, 0, cr2, cr5, cr2, {0}
    17ac:	691c052f 	ldmdbvs	ip, {r0, r1, r2, r3, r5, r8, sl}
    17b0:	05f21b05 	ldrbeq	r1, [r2, #2821]!	; 0xb05
    17b4:	19054a09 	stmdbne	r5, {r0, r3, r9, fp, lr}
    17b8:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    17bc:	054d1005 	strbeq	r1, [sp, #-5]
    17c0:	0f054f0b 	svceq	0x00054f0b
    17c4:	f20e054c 	vrshl.s8	q0, q6, q7
    17c8:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    17cc:	0b05670e 	bleq	15b40c <__core1_vectors-0xea4bf4>
    17d0:	0305052e 	movweq	r0, #21806	; 0x552e
    17d4:	059e7e82 	ldreq	r7, [lr, #3714]	; 0xe82
    17d8:	0c054c01 	stceq	12, cr4, [r5], {1}
    17dc:	2e028003 	cdpcs	0, 0, cr8, cr2, cr3, {0}
    17e0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    17e4:	01010008 	tsteq	r1, r8
    17e8:	01050204 	tsteq	r5, r4, lsl #4
    17ec:	00020500 	andeq	r0, r2, r0, lsl #10
    17f0:	03000000 	movweq	r0, #0
    17f4:	0501048b 	streq	r0, [r1, #-1163]	; 0xfffffb75
    17f8:	7e8a0305 	cdpvc	3, 8, cr0, cr10, cr5, {0}
    17fc:	4d0c0566 	cfstr32mi	mvfx0, [ip, #-408]	; 0xfffffe68
    1800:	f4031605 	vst1.8	{d1-d3}, [r3], r5
    1804:	38052e01 	stmdacc	r5, {r0, r9, sl, fp, sp}
    1808:	67010530 	smladxvs	r1, r0, r5, r0
    180c:	01000802 	tsteq	r0, r2, lsl #16
    1810:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1814:	02050001 	andeq	r0, r5, #1
    1818:	00000000 	andeq	r0, r0, r0
    181c:	01049203 	tsteq	r4, r3, lsl #4
    1820:	05850905 	streq	r0, [r5, #2309]	; 0x905
    1824:	08052e19 	stmdaeq	r5, {r0, r3, r4, r9, sl, fp, sp}
    1828:	4d10052e 	cfldr32mi	mvfx0, [r0, #-184]	; 0xffffff48
    182c:	fd030505 	stc2	5, cr0, [r3, #-20]	; 0xffffffec
    1830:	0c054a7d 			; <UNDEFINED> instruction: 0x0c054a7d
    1834:	030d054d 	movweq	r0, #54605	; 0xd54d
    1838:	052e0283 	streq	r0, [lr, #-643]!	; 0xfffffd7d
    183c:	0e052f0b 	cdpeq	15, 0, cr2, cr5, cr11, {0}
    1840:	2e0b0567 	cfsh32cs	mvfx0, mvfx11, #55
    1844:	88030505 	stmdahi	r3, {r0, r2, r8, sl}
    1848:	01059e7e 	tsteq	r5, lr, ror lr
    184c:	030c054c 	movweq	r0, #50508	; 0xc54c
    1850:	052e01fa 	streq	r0, [lr, #-506]!	; 0xfffffe06
    1854:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1858:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    185c:	00010502 	andeq	r0, r1, r2, lsl #10
    1860:	20bc0205 	adcscs	r0, ip, r5, lsl #4
    1864:	a7030100 	strge	r0, [r3, -r0, lsl #2]
    1868:	0e050104 	adfeqs	f0, f5, f4
    186c:	4c0905f3 	cfstr32mi	mvfx0, [r9], {243}	; 0xf3
    1870:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    1874:	09054c0f 	stmdbeq	r5, {r0, r1, r2, r3, sl, fp, lr}
    1878:	66080569 	strvs	r0, [r8], -r9, ror #10
    187c:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    1880:	10056908 	andne	r6, r5, r8, lsl #18
    1884:	4d0b0568 	cfstr32mi	mvfx0, [fp, #-416]	; 0xfffffe60
    1888:	ac030505 	cfstr32ge	mvfx0, [r3], {5}
    188c:	0105ba7d 	tsteq	r5, sp, ror sl
    1890:	030c054c 	movweq	r0, #50508	; 0xc54c
    1894:	052e02d6 	streq	r0, [lr, #-726]!	; 0xfffffd2a
    1898:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    189c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    18a0:	00010502 	andeq	r0, r1, r2, lsl #10
    18a4:	21700205 	cmncs	r0, r5, lsl #4
    18a8:	c2030100 	andgt	r0, r3, #0, 2
    18ac:	0e050104 	adfeqs	f0, f5, f4
    18b0:	4d08059f 	cfstr32mi	mvfx0, [r8, #-636]	; 0xfffffd84
    18b4:	05681005 	strbeq	r1, [r8, #-5]!
    18b8:	05054d0c 	streq	r4, [r5, #-3340]	; 0xfffff2f4
    18bc:	3025054a 	eorcc	r0, r5, sl, asr #10
    18c0:	05661705 	strbeq	r1, [r6, #-1797]!	; 0xfffff8fb
    18c4:	18054c09 	stmdane	r5, {r0, r3, sl, fp, lr}
    18c8:	2e1e05f7 	mrccs	5, 0, r0, cr14, cr7, {7}
    18cc:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    18d0:	0d054a12 	vstreq	s8, [r5, #-72]	; 0xffffffb8
    18d4:	31140567 	tstcc	r4, r7, ror #10
    18d8:	02001f05 	andeq	r1, r0, #5, 30
    18dc:	73030204 	movwvc	r0, #12804	; 0x3204
    18e0:	0005054a 	andeq	r0, r5, sl, asr #10
    18e4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    18e8:	ba7cfa03 	blt	1f400fc <__end__+0xf240dc>
    18ec:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
    18f0:	0397030c 	orrseq	r0, r7, #12, 6	; 0x30000000
    18f4:	2f01052e 	svccs	0x0001052e
    18f8:	01000802 	tsteq	r0, r2, lsl #16
    18fc:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1900:	02050001 	andeq	r0, r5, #1
    1904:	00000000 	andeq	r0, r0, r0
    1908:	0104e203 	tsteq	r4, r3, lsl #4
    190c:	059f2305 	ldreq	r2, [pc, #773]	; 1c19 <__core1_vectors-0xffe3e7>
    1910:	08054a0e 	stmdaeq	r5, {r1, r2, r3, r9, fp, lr}
    1914:	68100568 	ldmdavs	r0, {r3, r5, r6, r8, sl}
    1918:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
    191c:	05056810 	streq	r6, [r5, #-2064]	; 0xfffff7f0
    1920:	827cb703 	rsbshi	fp, ip, #786432	; 0xc0000
    1924:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
    1928:	03cc030c 	biceq	r0, ip, #12, 6	; 0x30000000
    192c:	2f01052e 	svccs	0x0001052e
    1930:	01000802 	tsteq	r0, r2, lsl #16
    1934:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1938:	02050001 	andeq	r0, r5, #1
    193c:	01002250 	tsteq	r0, r0, asr r2
    1940:	0104f503 	tsteq	r4, r3, lsl #10	; <UNPREDICTABLE>
    1944:	056a0e05 	strbeq	r0, [sl, #-3589]!	; 0xfffff1fb
    1948:	054e5105 	strbeq	r5, [lr, #-261]	; 0xfffffefb
    194c:	0105300c 	tsteq	r5, ip
    1950:	0008022f 	andeq	r0, r8, pc, lsr #4
    1954:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    1958:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    195c:	00000002 	andeq	r0, r0, r2
    1960:	058a0300 	streq	r0, [sl, #768]	; 0x300
    1964:	6a0e0501 	bvs	382d70 <__core1_vectors-0xc7d290>
    1968:	4e510505 	cdpmi	5, 5, cr0, cr1, cr5, {0}
    196c:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
    1970:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1974:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1978:	00010502 	andeq	r0, r1, r2, lsl #10
    197c:	22840205 	addcs	r0, r4, #1342177280	; 0x50000000
    1980:	a4030100 	strge	r0, [r3], #-256	; 0xffffff00
    1984:	09050105 	stmdbeq	r5, {r0, r2, r8}
    1988:	4a0805bb 	bmi	20307c <__core1_vectors-0xdfcf84>
    198c:	054c1205 	strbeq	r1, [ip, #-517]	; 0xfffffdfb
    1990:	0d05840e 	cfstrseq	mvf8, [r5, #-56]	; 0xffffffc8
    1994:	6810054a 	ldmdavs	r0, {r1, r3, r6, r8, sl}
    1998:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    199c:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    19a0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    19a4:	00010502 	andeq	r0, r1, r2, lsl #10
    19a8:	22ec0205 	rsccs	r0, ip, #1342177280	; 0x50000000
    19ac:	b4030100 	strlt	r0, [r3], #-256	; 0xffffff00
    19b0:	0c050105 	stfeqs	f0, [r5], {5}
    19b4:	4a0505bd 	bmi	1430b0 <__core1_vectors-0xebcf50>
    19b8:	02001005 	andeq	r1, r0, #5
    19bc:	05300304 	ldreq	r0, [r0, #-772]!	; 0xfffffcfc
    19c0:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    19c4:	31056603 	tstcc	r5, r3, lsl #12
    19c8:	03040200 	movweq	r0, #16896	; 0x4200
    19cc:	00050548 	andeq	r0, r5, r8, asr #10
    19d0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    19d4:	056e0c05 	strbeq	r0, [lr, #-3077]!	; 0xfffff3fb
    19d8:	3b054a05 	blcc	1541f4 <__core1_vectors-0xeabe0c>
    19dc:	f23e0530 	vqrshl.s64	d0, d16, d14
    19e0:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
    19e4:	3e052f3b 	mcrcc	15, 0, r2, cr5, cr11, {1}
    19e8:	2e1a05f2 	mrccs	5, 0, r0, cr10, cr2, {7}
    19ec:	052f3005 	streq	r3, [pc, #-5]!	; 19ef <__core1_vectors-0xffe611>
    19f0:	3005f21a 	andcc	pc, r5, sl, lsl r2	; <UNPREDICTABLE>
    19f4:	f21a054b 	vrshl.s16	q0, <illegal reg q5.5>, q5
    19f8:	054d1005 	strbeq	r1, [sp, #-5]
    19fc:	14054a0c 	strne	r4, [r5], #-2572	; 0xfffff5f4
    1a00:	4e10054c 	cfmac32mi	mvfx0, mvfx0, mvfx12
    1a04:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1a08:	12054c14 	andne	r4, r5, #20, 24	; 0x1400
    1a0c:	4a0c054e 	bmi	302f4c <__core1_vectors-0xcfd0b4>
    1a10:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    1a14:	0c054f10 	stceq	15, cr4, [r5], {16}
    1a18:	4c20054a 	cfstr32mi	mvfx0, [r0], #-296	; 0xfffffed8
    1a1c:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    1a20:	1105a338 	tstne	r5, r8, lsr r3
    1a24:	d610054a 	ldrle	r0, [r0], -sl, asr #10
    1a28:	054d1805 	strbeq	r1, [sp, #-2053]	; 0xfffff7fb
    1a2c:	83834d12 	orrhi	r4, r3, #1152	; 0x480
    1a30:	058a1005 	streq	r1, [sl, #5]
    1a34:	13054a0c 	movwne	r4, #23052	; 0x5a0c
    1a38:	333c054e 	teqcc	ip, #327155712	; 0x13800000
    1a3c:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
    1a40:	1c05d614 	stcne	6, cr13, [r5], {20}
    1a44:	4d16054d 	cfldr32mi	mvfx0, [r6, #-308]	; 0xfffffecc
    1a48:	03130568 	tsteq	r3, #104, 10	; 0x1a000000
    1a4c:	16056673 			; <UNDEFINED> instruction: 0x16056673
    1a50:	68821603 	stmvs	r2, {r0, r1, r9, sl, ip}
    1a54:	05621305 	strbeq	r1, [r2, #-773]!	; 0xfffffcfb
    1a58:	6609030c 	strvs	r0, [r9], -ip, lsl #6
    1a5c:	056b3805 	strbeq	r3, [fp, #-2053]!	; 0xfffff7fb
    1a60:	10054a11 	andne	r4, r5, r1, lsl sl
    1a64:	4d1805d6 	cfldr32mi	mvfx0, [r8, #-856]	; 0xfffffca8
    1a68:	02002605 	andeq	r2, r0, #5242880	; 0x500000
    1a6c:	a5030204 	strge	r0, [r3, #-516]	; 0xfffffdfc
    1a70:	05054a7f 	streq	r4, [r5, #-2687]	; 0xfffff581
    1a74:	01040200 	mrseq	r0, R12_usr
    1a78:	030d0566 	movweq	r0, #54630	; 0xd566
    1a7c:	058200e1 	streq	r0, [r2, #225]	; 0xe1
    1a80:	05054c0c 	streq	r4, [r5, #-3084]	; 0xfffff3f4
    1a84:	3014054a 	andscc	r0, r4, sl, asr #10
    1a88:	05820c05 	streq	r0, [r2, #3077]	; 0xc05
    1a8c:	31054c15 	tstcc	r5, r5, lsl ip
    1a90:	02040200 	andeq	r0, r4, #0, 4
    1a94:	00050562 	andeq	r0, r5, r2, ror #10
    1a98:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1a9c:	056e0c05 	strbeq	r0, [lr, #-3077]!	; 0xfffff3fb
    1aa0:	06022f01 	streq	r2, [r2], -r1, lsl #30
    1aa4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1aa8:	00010502 	andeq	r0, r1, r2, lsl #10
    1aac:	26140205 	ldrcs	r0, [r4], -r5, lsl #4
    1ab0:	af030100 	svcge	0x00030100
    1ab4:	0c050106 	stfeqs	f0, [r5], {6}
    1ab8:	01053f08 	tsteq	r5, r8, lsl #30
    1abc:	06029308 	streq	r9, [r2], -r8, lsl #6
    1ac0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1ac4:	00010502 	andeq	r0, r1, r2, lsl #10
    1ac8:	267c0205 	ldrbtcs	r0, [ip], -r5, lsl #4
    1acc:	b9030100 	stmdblt	r3, {r8}
    1ad0:	0c050106 	stfeqs	f0, [r5], {6}
    1ad4:	4a08059f 	bmi	203158 <__core1_vectors-0xdfcea8>
    1ad8:	054c1005 	strbeq	r1, [ip, #-5]
    1adc:	09054f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, lr}
    1ae0:	2e0b0568 	cfsh32cs	mvfx0, mvfx11, #56
    1ae4:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1ae8:	08024b01 	stmdaeq	r2, {r0, r8, r9, fp, lr}
    1aec:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1af0:	00010502 	andeq	r0, r1, r2, lsl #10
    1af4:	26dc0205 	ldrbcs	r0, [ip], r5, lsl #4
    1af8:	c8030100 	stmdagt	r3, {r8}
    1afc:	13050106 	movwne	r0, #20742	; 0x5106
    1b00:	4a26059f 	bmi	983184 <__core1_vectors-0x67ce7c>
    1b04:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1b08:	26054b13 			; <UNDEFINED> instruction: 0x26054b13
    1b0c:	4a09054a 	bmi	24303c <__core1_vectors-0xdbcfc4>
    1b10:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    1b14:	0c054a09 			; <UNDEFINED> instruction: 0x0c054a09
    1b18:	4a08054c 	bmi	203050 <__core1_vectors-0xdfcfb0>
    1b1c:	054c1005 	strbeq	r1, [ip, #-5]
    1b20:	09054f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, lr}
    1b24:	2f0b0566 	svccs	0x000b0566
    1b28:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1b2c:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1b30:	2f0b0583 	svccs	0x000b0583
    1b34:	20080905 	andcs	r0, r8, r5, lsl #18
    1b38:	052f0b05 	streq	r0, [pc, #-2821]!	; 103b <__core1_vectors-0xffefc5>
    1b3c:	0b056609 	bleq	15b368 <__core1_vectors-0xea4c98>
    1b40:	8309052f 	movwhi	r0, #38191	; 0x952f
    1b44:	052f0b05 	streq	r0, [pc, #-2821]!	; 1047 <__core1_vectors-0xffefb9>
    1b48:	0b058209 	bleq	162374 <__core1_vectors-0xe9dc8c>
    1b4c:	6609054b 	strvs	r0, [r9], -fp, asr #10
    1b50:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1b54:	01010008 	tsteq	r1, r8
    1b58:	01050204 	tsteq	r5, r4, lsl #4
    1b5c:	00020500 	andeq	r0, r2, r0, lsl #10
    1b60:	03010028 	movweq	r0, #4136	; 0x1028
    1b64:	050106e2 	streq	r0, [r1, #-1762]	; 0xfffff91e
    1b68:	26059f13 			; <UNDEFINED> instruction: 0x26059f13
    1b6c:	4a09054a 	bmi	24309c <__core1_vectors-0xdbcf64>
    1b70:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    1b74:	09054a26 	stmdbeq	r5, {r1, r2, r5, r9, fp, lr}
    1b78:	4b13054a 	blmi	4c30a8 <__core1_vectors-0xb3cf58>
    1b7c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1b80:	08054c0c 	stmdaeq	r5, {r2, r3, sl, fp, lr}
    1b84:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
    1b88:	054f0b05 	strbeq	r0, [pc, #-2821]	; 108b <__core1_vectors-0xffef75>
    1b8c:	0b056609 	bleq	15b3b8 <__core1_vectors-0xea4c48>
    1b90:	6609054b 	strvs	r0, [r9], -fp, asr #10
    1b94:	052f0b05 	streq	r0, [pc, #-2821]!	; 1097 <__core1_vectors-0xffef69>
    1b98:	0b058309 	bleq	1627c4 <__core1_vectors-0xe9d83c>
    1b9c:	0809052f 	stmdaeq	r9, {r0, r1, r2, r3, r5, r8, sl}
    1ba0:	2f0b0520 	svccs	0x000b0520
    1ba4:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1ba8:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1bac:	2f0b0583 	svccs	0x000b0583
    1bb0:	05820905 	streq	r0, [r2, #2309]	; 0x905
    1bb4:	09054b0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, fp, lr}
    1bb8:	2f01054a 	svccs	0x0001054a
    1bbc:	01000802 	tsteq	r0, r2, lsl #16
    1bc0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1bc4:	02050001 	andeq	r0, r5, #1
    1bc8:	01002924 	tsteq	r0, r4, lsr #18
    1bcc:	0106fc03 	tsteq	r6, r3, lsl #24	; <UNPREDICTABLE>
    1bd0:	059f1305 	ldreq	r1, [pc, #773]	; 1edd <__core1_vectors-0xffe123>
    1bd4:	09054a26 	stmdbeq	r5, {r1, r2, r5, r9, fp, lr}
    1bd8:	4b13054a 	blmi	4c3108 <__core1_vectors-0xb3cef8>
    1bdc:	054a2605 	strbeq	r2, [sl, #-1541]	; 0xfffff9fb
    1be0:	13054a09 	movwne	r4, #23049	; 0x5a09
    1be4:	4a09054b 	bmi	243118 <__core1_vectors-0xdbcee8>
    1be8:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
    1bec:	10054a08 	andne	r4, r5, r8, lsl #20
    1bf0:	510b054c 	tstpl	fp, ip, asr #10
    1bf4:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1bf8:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1bfc:	2f0b0566 	svccs	0x000b0566
    1c00:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1c04:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1c08:	0b052008 	bleq	149c30 <__core1_vectors-0xeb63d0>
    1c0c:	6609052f 	strvs	r0, [r9], -pc, lsr #10
    1c10:	052f0b05 	streq	r0, [pc, #-2821]!	; 1113 <__core1_vectors-0xffeeed>
    1c14:	0b058309 	bleq	162840 <__core1_vectors-0xe9d7c0>
    1c18:	6609054b 	strvs	r0, [r9], -fp, asr #10
    1c1c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1c20:	01010008 	tsteq	r1, r8
    1c24:	01050204 	tsteq	r5, r4, lsl #4
    1c28:	30020500 	andcc	r0, r2, r0, lsl #10
    1c2c:	0301002a 	movweq	r0, #4138	; 0x102a
    1c30:	05010796 	streq	r0, [r1, #-1942]	; 0xfffff86a
    1c34:	26059f13 			; <UNDEFINED> instruction: 0x26059f13
    1c38:	4a09054a 	bmi	243168 <__core1_vectors-0xdbce98>
    1c3c:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    1c40:	09054a26 	stmdbeq	r5, {r1, r2, r5, r9, fp, lr}
    1c44:	4b13054a 	blmi	4c3174 <__core1_vectors-0xb3ce8c>
    1c48:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c4c:	08054c0c 	stmdaeq	r5, {r2, r3, sl, fp, lr}
    1c50:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
    1c54:	05510b05 	ldrbeq	r0, [r1, #-2821]	; 0xfffff4fb
    1c58:	0b056609 	bleq	15b484 <__core1_vectors-0xea4b7c>
    1c5c:	6609052f 	strvs	r0, [r9], -pc, lsr #10
    1c60:	052f0b05 	streq	r0, [pc, #-2821]!	; 1163 <__core1_vectors-0xffee9d>
    1c64:	05200809 	streq	r0, [r0, #-2057]!	; 0xfffff7f7
    1c68:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1c6c:	2f0b0583 	svccs	0x000b0583
    1c70:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1c74:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1c78:	4b0b0582 	blmi	2c3288 <__core1_vectors-0xd3cd78>
    1c7c:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1c80:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1c84:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1c88:	00010502 	andeq	r0, r1, r2, lsl #10
    1c8c:	2b400205 	blcs	10024a8 <alt_mmu_va_space_storage_required_internal+0x1bc>
    1c90:	af030100 	svcge	0x00030100
    1c94:	09050107 	stmdbeq	r5, {r0, r1, r2, r8}
    1c98:	2e190587 	cdpcs	5, 1, cr0, cr9, cr7, {4}
    1c9c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    1ca0:	05054c10 	streq	r4, [r5, #-3088]	; 0xfffff3f0
    1ca4:	830c054d 	movwhi	r0, #50509	; 0xc54d
    1ca8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1cac:	01010006 	tsteq	r1, r6
    1cb0:	01050204 	tsteq	r5, r4, lsl #4
    1cb4:	88020500 	stmdahi	r2, {r8, sl}
    1cb8:	0301002b 	movweq	r0, #4139	; 0x102b
    1cbc:	050107c2 	streq	r0, [r1, #-1986]	; 0xfffff83e
    1cc0:	05cd0816 	strbeq	r0, [sp, #2070]	; 0x816
    1cc4:	05b0080c 	ldreq	r0, [r0, #2060]!	; 0x80c
    1cc8:	10054b08 	andne	r4, r5, r8, lsl #22
    1ccc:	4d110568 	cfldr32mi	mvfx0, [r1, #-416]	; 0xfffffe60
    1cd0:	05da0805 	ldrbeq	r0, [sl, #2053]	; 0x805
    1cd4:	09056810 	stmdbeq	r5, {r4, fp, sp, lr}
    1cd8:	054a1003 	strbeq	r1, [sl, #-3]
    1cdc:	08052e1b 	stmdaeq	r5, {r0, r1, r3, r4, r9, sl, fp, sp}
    1ce0:	4c10052e 	cfldr32mi	mvfx0, [r0], {46}	; 0x2e
    1ce4:	054e1305 	strbeq	r1, [lr, #-773]	; 0xfffffcfb
    1ce8:	10054a08 	andne	r4, r5, r8, lsl #20
    1cec:	4c0b0568 	cfstr32mi	mvfx0, [fp], {104}	; 0x68
    1cf0:	059f0f05 	ldreq	r0, [pc, #3845]	; 2bfd <__core1_vectors-0xffd403>
    1cf4:	08056809 	stmdaeq	r5, {r0, r3, fp, sp, lr}
    1cf8:	4c1005d6 	cfldr32mi	mvfx0, [r0], {214}	; 0xd6
    1cfc:	054e0c05 	strbeq	r0, [lr, #-3077]	; 0xfffff3fb
    1d00:	14054a05 	strne	r4, [r5], #-2565	; 0xfffff5fb
    1d04:	d60c0530 			; <UNDEFINED> instruction: 0xd60c0530
    1d08:	054e1805 	strbeq	r1, [lr, #-2053]	; 0xfffff7fb
    1d0c:	1005831b 	andne	r8, r5, fp, lsl r3
    1d10:	6818054a 	ldmdavs	r8, {r1, r3, r6, r8, sl}
    1d14:	054c1705 	strbeq	r1, [ip, #-1797]	; 0xfffff8fb
    1d18:	2305670d 	movwcs	r6, #22285	; 0x570d
    1d1c:	833e054c 	teqhi	lr, #76, 10	; 0x13000000
    1d20:	05d62305 	ldrbeq	r2, [r6, #773]	; 0x305
    1d24:	0e056714 	mcreq	7, 0, r6, cr5, cr4, {0}
    1d28:	821405f4 	andshi	r0, r4, #244, 10	; 0x3d000000
    1d2c:	05661805 	strbeq	r1, [r6, #-2053]!	; 0xfffff7fb
    1d30:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    1d34:	4a6e0302 	bmi	1b82944 <__end__+0xb66924>
    1d38:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    1d3c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1d40:	66190308 	ldrvs	r0, [r9], -r8, lsl #6
    1d44:	05841005 	streq	r1, [r4, #5]
    1d48:	05054f0c 	streq	r4, [r5, #-3852]	; 0xfffff0f4
    1d4c:	3030054a 	eorscc	r0, r0, sl, asr #10
    1d50:	3c083305 	stccc	3, cr3, [r8], {5}
    1d54:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    1d58:	33052f30 	movwcc	r2, #24368	; 0x5f30
    1d5c:	13053c08 	movwne	r3, #23560	; 0x5c08
    1d60:	2f25052e 	svccs	0x0025052e
    1d64:	3c081305 	stccc	3, cr1, [r8], {5}
    1d68:	fa4f1205 	blx	13c6584 <__end__+0x3aa564>
    1d6c:	054c1005 	strbeq	r1, [ip, #-5]
    1d70:	2b054a09 	blcs	15459c <__core1_vectors-0xeaba64>
    1d74:	66210530 			; <UNDEFINED> instruction: 0x66210530
    1d78:	05d62505 	ldrbeq	r2, [r6, #1285]	; 0x505
    1d7c:	10052e2b 	andne	r2, r5, fp, lsr #28
    1d80:	4d1a052e 	cfldr32mi	mvfx0, [sl, #-184]	; 0xffffff48
    1d84:	05f31105 	ldrbeq	r1, [r3, #261]!	; 0x105
    1d88:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    1d8c:	2e7a0302 	cdpcs	3, 7, cr0, cr10, cr2, {0}
    1d90:	02000905 	andeq	r0, r0, #81920	; 0x14000
    1d94:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1d98:	660d0310 			; <UNDEFINED> instruction: 0x660d0310
    1d9c:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1da0:	16054e20 	strne	r4, [r5], -r0, lsr #28
    1da4:	a0100566 	andsge	r0, r0, r6, ror #10
    1da8:	056b1705 	strbeq	r1, [fp, #-1797]!	; 0xfffff8fb
    1dac:	25053054 	strcs	r3, [r5, #-84]	; 0xffffffac
    1db0:	f43a05ba 			; <UNDEFINED> instruction: 0xf43a05ba
    1db4:	05824405 	streq	r4, [r2, #1029]	; 0x405
    1db8:	4b054a40 	blmi	1546c0 <__core1_vectors-0xeab940>
    1dbc:	4a200566 	bmi	80335c <__core1_vectors-0x7fcca4>
    1dc0:	052f2805 	streq	r2, [pc, #-2053]!	; 15c3 <__core1_vectors-0xffea3d>
    1dc4:	22054a1e 	andcs	r4, r5, #122880	; 0x1e000
    1dc8:	9e18054f 	cfmac32ls	mvfx0, mvfx8, mvfx15
    1dcc:	054c2005 	strbeq	r2, [ip, #-5]
    1dd0:	28054d1e 	stmdacs	r5, {r1, r2, r3, r4, r8, sl, fp, lr}
    1dd4:	4c1d0582 	cfldr32mi	mvfx0, [sp], {130}	; 0x82
    1dd8:	03676767 	cmneq	r7, #27000832	; 0x19c0000
    1ddc:	1705666c 	strne	r6, [r5, -ip, ror #12]
    1de0:	0044054a 	subeq	r0, r4, sl, asr #10
    1de4:	4a010402 	bmi	42df4 <__core1_vectors-0xfbd20c>
    1de8:	18031705 	stmdane	r3, {r0, r2, r8, r9, sl, ip}
    1dec:	30540566 	subscc	r0, r4, r6, ror #10
    1df0:	05ba2505 	ldreq	r2, [sl, #1285]!	; 0x505
    1df4:	4405f43a 	strmi	pc, [r5], #-1082	; 0xfffffbc6
    1df8:	4a400582 	bmi	1003408 <alt_mmu_va_space_create+0x880>
    1dfc:	05664b05 	strbeq	r4, [r6, #-2821]!	; 0xfffff4fb
    1e00:	28054a20 	stmdacs	r5, {r5, r9, fp, lr}
    1e04:	4a1e052f 	bmi	7832c8 <__core1_vectors-0x87cd38>
    1e08:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
    1e0c:	2f054a15 	svccs	0x00054a15
    1e10:	66260530 			; <UNDEFINED> instruction: 0x66260530
    1e14:	05821c05 	streq	r1, [r2, #3077]	; 0xc05
    1e18:	2b054c24 	blcs	154eb0 <__core1_vectors-0xeab150>
    1e1c:	02040200 	andeq	r0, r4, #0, 4
    1e20:	0022054d 	eoreq	r0, r2, sp, asr #10
    1e24:	66020402 	strvs	r0, [r2], -r2, lsl #8
    1e28:	02003005 	andeq	r3, r0, #5
    1e2c:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    1e30:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    1e34:	4a790302 	bmi	1e42a44 <__end__+0xe26a24>
    1e38:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    1e3c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1e40:	660a031d 			; <UNDEFINED> instruction: 0x660a031d
    1e44:	05676767 	strbeq	r6, [r7, #-1895]!	; 0xfffff899
    1e48:	666c0317 			; <UNDEFINED> instruction: 0x666c0317
    1e4c:	05661903 	strbeq	r1, [r6, #-2307]!	; 0xfffff6fd
    1e50:	25053054 	strcs	r3, [r5, #-84]	; 0xffffffac
    1e54:	f43a05ba 			; <UNDEFINED> instruction: 0xf43a05ba
    1e58:	05824405 	streq	r4, [r2, #1029]	; 0x405
    1e5c:	4b054a40 	blmi	154764 <__core1_vectors-0xeab89c>
    1e60:	4a200566 	bmi	803400 <__core1_vectors-0x7fcc00>
    1e64:	052f2805 	streq	r2, [pc, #-2053]!	; 1667 <__core1_vectors-0xffe999>
    1e68:	22054a1e 	andcs	r4, r5, #122880	; 0x1e000
    1e6c:	9e18054c 	cfmac32ls	mvfx0, mvfx8, mvfx12
    1e70:	054c2005 	strbeq	r2, [ip, #-5]
    1e74:	28054d1e 	stmdacs	r5, {r1, r2, r3, r4, r8, sl, fp, lr}
    1e78:	4c1d0582 	cfldr32mi	mvfx0, [sp], {130}	; 0x82
    1e7c:	05676767 	strbeq	r6, [r7, #-1895]!	; 0xfffff899
    1e80:	666f0317 			; <UNDEFINED> instruction: 0x666f0317
    1e84:	19035405 	stmdbne	r3, {r0, r2, sl, ip, lr}
    1e88:	ba250582 	blt	943498 <__core1_vectors-0x6bcb68>
    1e8c:	05f43a05 	ldrbeq	r3, [r4, #2565]!	; 0xa05
    1e90:	40058244 	andmi	r8, r5, r4, asr #4
    1e94:	664b054a 	strbvs	r0, [fp], -sl, asr #10
    1e98:	054a2005 	strbeq	r2, [sl, #-5]
    1e9c:	1e052f28 	cdpne	15, 0, cr2, cr5, cr8, {1}
    1ea0:	4c22054a 	cfstr32mi	mvfx0, [r2], #-296	; 0xfffffed8
    1ea4:	059e1805 	ldreq	r1, [lr, #2053]	; 0x805
    1ea8:	1e054c20 	cdpne	12, 0, cr4, cr5, cr0, {1}
    1eac:	8228054d 	eorhi	r0, r8, #322961408	; 0x13400000
    1eb0:	674c1d05 	strbvs	r1, [ip, -r5, lsl #26]
    1eb4:	17056767 	strne	r6, [r5, -r7, ror #14]
    1eb8:	05666f03 	strbeq	r6, [r6, #-3843]!	; 0xfffff0fd
    1ebc:	6620030c 	strtvs	r0, [r0], -ip, lsl #6
    1ec0:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    1ec4:	4e056b13 	vmovmi.32	d5[0], r6
    1ec8:	ba210530 	blt	843390 <__core1_vectors-0x7bcc70>
    1ecc:	05f41605 	ldrbeq	r1, [r4, #1541]!	; 0x605
    1ed0:	1c058220 	sfmne	f0, 1, [r5], {32}
    1ed4:	6614054a 	ldrvs	r0, [r4], -sl, asr #10
    1ed8:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
    1edc:	1c054d12 	stcne	13, cr4, [r5], {18}
    1ee0:	4a180582 	bmi	6034f0 <__core1_vectors-0x9fcb10>
    1ee4:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
    1ee8:	67674c16 			; <UNDEFINED> instruction: 0x67674c16
    1eec:	73031905 	movwvc	r1, #14597	; 0x3905
    1ef0:	4a130566 	bmi	4c3490 <__core1_vectors-0xb3cb70>
    1ef4:	02004205 	andeq	r4, r0, #1342177280	; 0x50000000
    1ef8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1efc:	66110313 			; <UNDEFINED> instruction: 0x66110313
    1f00:	05305305 	ldreq	r5, [r0, #-773]!	; 0xfffffcfb
    1f04:	1805ba21 	stmdane	r5, {r0, r5, r9, fp, ip, sp, pc}
    1f08:	4a1105f4 	bmi	4436e0 <__core1_vectors-0xbbc920>
    1f0c:	05301a05 	ldreq	r1, [r0, #-2565]!	; 0xfffff5fb
    1f10:	2c058225 	sfmcs	f0, 1, [r5], {37}	; 0x25
    1f14:	4a20054a 	bmi	803444 <__core1_vectors-0x7fcbbc>
    1f18:	05661805 	strbeq	r1, [r6, #-2053]!	; 0xfffff7fb
    1f1c:	16054c20 	strne	r4, [r5], -r0, lsr #24
    1f20:	02040200 	andeq	r0, r4, #0, 4
    1f24:	0021054d 	eoreq	r0, r1, sp, asr #10
    1f28:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    1f2c:	02002805 	andeq	r2, r0, #327680	; 0x50000
    1f30:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    1f34:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    1f38:	2d054a02 	vstrcs	s8, [r5, #-8]
    1f3c:	02040200 	andeq	r0, r4, #0, 4
    1f40:	0025054a 	eoreq	r0, r5, sl, asr #10
    1f44:	03020402 	movweq	r0, #9218	; 0x2402
    1f48:	11054a79 	tstne	r5, r9, ror sl
    1f4c:	01040200 	mrseq	r0, R12_usr
    1f50:	03160566 	tsteq	r6, #427819008	; 0x19800000
    1f54:	6767660a 	strbvs	r6, [r7, -sl, lsl #12]!
    1f58:	70031305 	andvc	r1, r3, r5, lsl #6
    1f5c:	66140366 	ldrvs	r0, [r4], -r6, ror #6
    1f60:	05304e05 	ldreq	r4, [r0, #-3589]!	; 0xfffff1fb
    1f64:	1605ba21 	strne	fp, [r5], -r1, lsr #20
    1f68:	822005f4 	eorhi	r0, r0, #244, 10	; 0x3d000000
    1f6c:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
    1f70:	1c056614 	stcne	6, cr6, [r5], {20}
    1f74:	4d12054c 	cfldr32mi	mvfx0, [r2, #-304]	; 0xfffffed0
    1f78:	05821c05 	streq	r1, [r2, #3077]	; 0xc05
    1f7c:	23054a18 	movwcs	r4, #23064	; 0x5a18
    1f80:	4c16054a 	cfldr32mi	mvfx0, [r6], {74}	; 0x4a
    1f84:	13056767 	movwne	r6, #22375	; 0x5767
    1f88:	05667303 	strbeq	r7, [r6, #-771]!	; 0xfffffcfd
    1f8c:	6655030c 	ldrbvs	r0, [r5], -ip, lsl #6
    1f90:	3b031105 	blcc	c63ac <__core1_vectors-0xf39c54>
    1f94:	6712052e 	ldrvs	r0, [r2, -lr, lsr #10]
    1f98:	056a1305 	strbeq	r1, [sl, #-773]!	; 0xfffffcfb
    1f9c:	2105304e 	tstcs	r5, lr, asr #32
    1fa0:	f41605ba 			; <UNDEFINED> instruction: 0xf41605ba
    1fa4:	05822005 	streq	r2, [r2, #5]
    1fa8:	14054a1c 	strne	r4, [r5], #-2588	; 0xfffff5e4
    1fac:	4c1c0566 	cfldr32mi	mvfx0, [ip], {102}	; 0x66
    1fb0:	054d1205 	strbeq	r1, [sp, #-517]	; 0xfffffdfb
    1fb4:	1805821c 	stmdane	r5, {r2, r3, r4, r9, pc}
    1fb8:	4a23054a 	bmi	8c34e8 <__core1_vectors-0x73cb18>
    1fbc:	674c1605 	strbvs	r1, [ip, -r5, lsl #12]
    1fc0:	03130567 	tsteq	r3, #432013312	; 0x19c00000
    1fc4:	0c056673 	stceq	6, cr6, [r5], {115}	; 0x73
    1fc8:	05661503 	strbeq	r1, [r6, #-1283]!	; 0xfffffafd
    1fcc:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    1fd0:	13056601 	movwne	r6, #22017	; 0x5601
    1fd4:	30500568 	subscc	r0, r0, r8, ror #10
    1fd8:	05ba2105 	ldreq	r2, [sl, #261]!	; 0x105
    1fdc:	4005f436 	andmi	pc, r5, r6, lsr r4	; <UNPREDICTABLE>
    1fe0:	4a3c0582 	bmi	f035f0 <__core1_vectors-0xfca10>
    1fe4:	05664705 	strbeq	r4, [r6, #-1797]!	; 0xfffff8fb
    1fe8:	24054a1c 	strcs	r4, [r5], #-2588	; 0xfffff5e4
    1fec:	4a1a052f 	bmi	6834b0 <__core1_vectors-0x97cb50>
    1ff0:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
    1ff4:	2b054a11 	blcs	154840 <__core1_vectors-0xeab7c0>
    1ff8:	66220530 			; <UNDEFINED> instruction: 0x66220530
    1ffc:	05821805 	streq	r1, [r2, #2053]	; 0x805
    2000:	27054c20 	strcs	r4, [r5, -r0, lsr #24]
    2004:	02040200 	andeq	r0, r4, #0, 4
    2008:	001e054d 	andseq	r0, lr, sp, asr #10
    200c:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2010:	02002c05 	andeq	r2, r0, #1280	; 0x500
    2014:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    2018:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    201c:	4a790302 	bmi	1e42c2c <__end__+0xe26c0c>
    2020:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
    2024:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2028:	660a0316 			; <UNDEFINED> instruction: 0x660a0316
    202c:	13056767 	movwne	r6, #22375	; 0x5767
    2030:	05666d03 	strbeq	r6, [r6, #-3331]!	; 0xfffff2fd
    2034:	6617030f 	ldrvs	r0, [r7], -pc, lsl #6
    2038:	05304c05 	ldreq	r4, [r0, #-3077]!	; 0xfffff3fb
    203c:	3205ba1d 	andcc	fp, r5, #118784	; 0x1d000
    2040:	823c05f4 	eorshi	r0, ip, #244, 10	; 0x3d000000
    2044:	054a3805 	strbeq	r3, [sl, #-2053]	; 0xfffff7fb
    2048:	18056643 	stmdane	r5, {r0, r1, r6, r9, sl, sp, lr}
    204c:	2f20054a 	svccs	0x0020054a
    2050:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
    2054:	10054c1a 	andne	r4, r5, sl, lsl ip
    2058:	4c18059e 	cfldr32mi	mvfx0, [r8], {158}	; 0x9e
    205c:	054d1605 	strbeq	r1, [sp, #-1541]	; 0xfffff9fb
    2060:	12058220 	andne	r8, r5, #32, 4
    2064:	0567674c 	strbeq	r6, [r7, #-1868]!	; 0xfffff8b4
    2068:	6670030f 	ldrbtvs	r0, [r0], -pc, lsl #6
    206c:	ff032605 			; <UNDEFINED> instruction: 0xff032605
    2070:	0505667d 	streq	r6, [r5, #-1661]	; 0xfffff983
    2074:	01040200 	mrseq	r0, R12_usr
    2078:	030c0566 	movweq	r0, #50534	; 0xc566
    207c:	05ba0296 	ldreq	r0, [sl, #662]!	; 0x296
    2080:	04020001 	streq	r0, [r2], #-1
    2084:	06022f01 	streq	r2, [r2], -r1, lsl #30
    2088:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    208c:	00010502 	andeq	r0, r1, r2, lsl #10
    2090:	39600205 	stmdbcc	r0!, {r0, r2, r9}^
    2094:	b4030100 	strlt	r0, [r3], #-256	; 0xffffff00
    2098:	1505010a 	strne	r0, [r5, #-266]	; 0xfffffef6
    209c:	4d080583 	cfstr32mi	mvfx0, [r8, #-524]	; 0xfffffdf4
    20a0:	05681205 	strbeq	r1, [r8, #-517]!	; 0xfffffdfb
    20a4:	0d05a10c 	stfeqd	f2, [r5, #-48]	; 0xffffffd0
    20a8:	88080568 	stmdahi	r8, {r3, r5, r6, r8, sl}
    20ac:	05681205 	strbeq	r1, [r8, #-517]!	; 0xfffffdfb
    20b0:	0d05670c 	stceq	7, cr6, [r5, #-48]	; 0xffffffd0
    20b4:	88080568 	stmdahi	r8, {r3, r5, r6, r8, sl}
    20b8:	056a1005 	strbeq	r1, [sl, #-5]!
    20bc:	1a054a09 	bne	1548e8 <__core1_vectors-0xeab718>
    20c0:	03040200 	movweq	r0, #16896	; 0x4200
    20c4:	001d0530 	andseq	r0, sp, r0, lsr r5
    20c8:	9c030402 	cfstrsls	mvf0, [r3], {2}
    20cc:	02000905 	andeq	r0, r0, #81920	; 0x14000
    20d0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    20d4:	0c056b12 			; <UNDEFINED> instruction: 0x0c056b12
    20d8:	680d059f 	stmdavs	sp, {r0, r1, r2, r3, r4, r7, r8, sl}
    20dc:	05880805 	streq	r0, [r8, #2053]	; 0x805
    20e0:	0c056812 	stceq	8, cr6, [r5], {18}
    20e4:	680d054b 	stmdavs	sp, {r0, r1, r3, r6, r8, sl}
    20e8:	05860c05 	streq	r0, [r6, #3077]	; 0xc05
    20ec:	06022f01 	streq	r2, [r2], -r1, lsl #30
    20f0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    20f4:	00010502 	andeq	r0, r1, r2, lsl #10
    20f8:	00000205 	andeq	r0, r0, r5, lsl #4
    20fc:	f3030000 	vhadd.u8	d0, d3, d0
    2100:	0f05010a 	svceq	0x0005010a
    2104:	030505bb 	movweq	r0, #21947	; 0x55bb
    2108:	2f4b4a0e 	svccs	0x004b4a0e
    210c:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    2110:	17054a08 	strne	r4, [r5, -r8, lsl #20]
    2114:	4a12054f 	bmi	483658 <__core1_vectors-0xb7c9a8>
    2118:	674d1e05 	strbvs	r1, [sp, -r5, lsl #28]
    211c:	05652405 	strbeq	r2, [r5, #-1029]!	; 0xfffffbfb
    2120:	2405301e 	strcs	r3, [r5], #-30	; 0xffffffe2
    2124:	2d0f0549 	cfstr32cs	mvfx0, [pc, #-292]	; 2008 <__core1_vectors-0xffdff8>
    2128:	054e0905 	strbeq	r0, [lr, #-2309]	; 0xfffff6fb
    212c:	0d05a011 	stceq	0, cr10, [r5, #-68]	; 0xffffffbc
    2130:	4e1b054a 	cfmac32mi	mvfx0, mvfx11, mvfx10
    2134:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    2138:	05674b0c 	strbeq	r4, [r7, #-2828]!	; 0xfffff4f4
    213c:	30058409 	andcc	r8, r5, r9, lsl #8
    2140:	4a1405da 	bmi	5038b0 <__core1_vectors-0xafc750>
    2144:	881b054b 	ldmdahi	fp, {r0, r1, r3, r6, r8, sl}
    2148:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    214c:	05834b0c 	streq	r4, [r3, #2828]	; 0xb0c
    2150:	2e058409 	cdpcs	4, 0, cr8, cr5, cr9, {0}
    2154:	4a1405f6 	bmi	503934 <__core1_vectors-0xafc6cc>
    2158:	690c054b 	stmdbvs	ip, {r0, r1, r3, r6, r8, sl}
    215c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    2160:	01010006 	tsteq	r1, r6
    2164:	01050204 	tsteq	r5, r4, lsl #4
    2168:	00020500 	andeq	r0, r2, r0, lsl #10
    216c:	03000000 	movweq	r0, #0
    2170:	05010bb8 	streq	r0, [r1, #-3000]	; 0xfffff448
    2174:	1705bd09 	strne	fp, [r5, -r9, lsl #26]
    2178:	4a1e052e 	bmi	783638 <__core1_vectors-0x87c9c8>
    217c:	052e2405 	streq	r2, [lr, #-1029]!	; 0xfffffbfb
    2180:	09052e08 	stmdbeq	r5, {r3, r9, sl, fp, sp}
    2184:	6710054c 	ldrvs	r0, [r0, -ip, asr #10]
    2188:	054d1b05 	strbeq	r1, [sp, #-2821]	; 0xfffff4fb
    218c:	0905d619 	stmdbeq	r5, {r0, r3, r4, r9, sl, ip, lr, pc}
    2190:	2e08054b 	cfsh32cs	mvfx0, mvfx8, #43
    2194:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
    2198:	1d05bc10 	stcne	12, cr11, [r5, #-64]	; 0xffffffc0
    219c:	ba1b054d 	blt	6c36d8 <__core1_vectors-0x93c928>
    21a0:	674c1405 	strbvs	r1, [ip, -r5, lsl #8]
    21a4:	05680c05 	strbeq	r0, [r8, #-3077]!	; 0xfffff3fb
    21a8:	04020001 	streq	r0, [r2], #-1
    21ac:	06022f01 	streq	r2, [r2], -r1, lsl #30
    21b0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    21b4:	00010502 	andeq	r0, r1, r2, lsl #10
    21b8:	00000205 	andeq	r0, r0, r5, lsl #4
    21bc:	d2030000 	andle	r0, r3, #0
    21c0:	0f05010b 	svceq	0x0005010b
    21c4:	110567bb 			; <UNDEFINED> instruction: 0x110567bb
    21c8:	4a080568 	bmi	203770 <__core1_vectors-0xdfc890>
    21cc:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
    21d0:	14056710 	strne	r6, [r5], #-1808	; 0xfffff8f0
    21d4:	0b05bb4d 	bleq	170f10 <__core1_vectors-0xe8f0f0>
    21d8:	313805bc 	teqcc	r8, ip	; <illegal shifter operand>
    21dc:	054a1f05 	strbeq	r1, [sl, #-3845]	; 0xfffff0fb
    21e0:	0d05ba1d 	vstreq	s22, [r5, #-116]	; 0xffffff8c
    21e4:	2e0c054b 	cfsh32cs	mvfx0, mvfx12, #43
    21e8:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    21ec:	2105d814 	tstcs	r5, r4, lsl r8
    21f0:	d61f054d 	ldrle	r0, [pc], -sp, asr #10
    21f4:	054c1505 	strbeq	r1, [ip, #-1285]	; 0xfffffafb
    21f8:	0c054a2e 			; <UNDEFINED> instruction: 0x0c054a2e
    21fc:	4d270566 	cfstr32mi	mvfx0, [r7, #-408]!	; 0xfffffe68
    2200:	674a1c05 	strbvs	r1, [sl, -r5, lsl #24]
    2204:	054a2705 	strbeq	r2, [sl, #-1797]	; 0xfffff8fb
    2208:	05674a1c 	strbeq	r4, [r7, #-2588]!	; 0xfffff5e4
    220c:	1c054a27 			; <UNDEFINED> instruction: 0x1c054a27
    2210:	680d054a 	stmdavs	sp, {r1, r3, r6, r8, sl}
    2214:	6c031405 	cfstrsvs	mvf1, [r3], {5}
    2218:	4a0b0582 	bmi	2c3828 <__core1_vectors-0xd3c7d8>
    221c:	19030d05 	stmdbne	r3, {r0, r2, r8, sl, fp}
    2220:	320e0566 	andcc	r0, lr, #427819008	; 0x19800000
    2224:	680c0567 	stmdavs	ip, {r0, r1, r2, r5, r6, r8, sl}
    2228:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    222c:	01010006 	tsteq	r1, r6
    2230:	01050204 	tsteq	r5, r4, lsl #4
    2234:	00020500 	andeq	r0, r2, r0, lsl #10
    2238:	03000000 	movweq	r0, #0
    223c:	05010c83 	streq	r0, [r1, #-3203]	; 0xfffff37d
    2240:	08058311 	stmdaeq	r5, {r0, r4, r8, r9, pc}
    2244:	4c09054a 	cfstr32mi	mvfx0, [r9], {74}	; 0x4a
    2248:	4e671005 	cdpmi	0, 6, cr1, cr7, cr5, {0}
    224c:	02300105 	eorseq	r0, r0, #1073741825	; 0x40000001
    2250:	01010006 	tsteq	r1, r6
    2254:	000007ae 	andeq	r0, r0, lr, lsr #15
    2258:	01040003 	tsteq	r4, r3
    225c:	01020000 	mrseq	r0, (UNDEF: 2)
    2260:	000d0efb 	strdeq	r0, [sp], -fp
    2264:	01010101 	tsteq	r1, r1, lsl #2
    2268:	01000000 	mrseq	r0, (UNDEF: 0)
    226c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    2270:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2274:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2278:	6974752f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, sp, lr}^
    227c:	2f00736c 	svccs	0x0000736c
    2280:	2f727375 	svccs	0x00727375
    2284:	2f62696c 	svccs	0x0062696c
    2288:	2f636367 	svccs	0x00636367
    228c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2290:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    2294:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2298:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    229c:	2f312e32 	svccs	0x00312e32
    22a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    22a4:	00656475 	rsbeq	r6, r5, r5, ror r4
    22a8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    22ac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    22b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    22b4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    22b8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    22bc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    22c0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    22c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    22c8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    22cc:	2f62696c 	svccs	0x0062696c
    22d0:	00737973 	rsbseq	r7, r3, r3, ror r9
    22d4:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    22d8:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    22dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    22e0:	61000065 	tstvs	r0, r5, rrx
    22e4:	705f746c 	subsvc	r7, pc, ip, ror #8
    22e8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    22ec:	00632e66 	rsbeq	r2, r3, r6, ror #28
    22f0:	73000001 	movwvc	r0, #1
    22f4:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    22f8:	00682e66 	rsbeq	r2, r8, r6, ror #28
    22fc:	73000002 	movwvc	r0, #2
    2300:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2304:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2308:	73000002 	movwvc	r0, #2
    230c:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    2310:	00682e67 	rsbeq	r2, r8, r7, ror #28
    2314:	73000002 	movwvc	r0, #2
    2318:	6f696474 	svcvs	0x00696474
    231c:	0300682e 	movweq	r6, #2094	; 0x82e
    2320:	745f0000 	ldrbvc	r0, [pc], #-0	; 2328 <__core1_vectors-0xffdcd8>
    2324:	73657079 	cmnvc	r5, #121	; 0x79
    2328:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    232c:	65720000 	ldrbvs	r0, [r2, #-0]!
    2330:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    2334:	00040068 	andeq	r0, r4, r8, rrx
    2338:	636f6c00 	cmnvs	pc, #0, 24
    233c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    2340:	61000004 	tstvs	r0, r4
    2344:	705f746c 	subsvc	r7, pc, ip, ror #8
    2348:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    234c:	00682e66 	rsbeq	r2, r8, r6, ror #28
    2350:	3c000005 	stccc	0, cr0, [r0], {5}
    2354:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2358:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    235c:	0000003e 	andeq	r0, r0, lr, lsr r0
    2360:	01050000 	mrseq	r0, (UNDEF: 5)
    2364:	00020500 	andeq	r0, r2, r0, lsl #10
    2368:	03000000 	movweq	r0, #0
    236c:	0c050130 	stfeqs	f0, [r5], {48}	; 0x30
    2370:	9f010583 	svcls	0x00010583
    2374:	01000602 	tsteq	r0, r2, lsl #12
    2378:	00010501 	andeq	r0, r1, r1, lsl #10
    237c:	00000205 	andeq	r0, r0, r5, lsl #4
    2380:	35030000 	strcc	r0, [r3, #-0]
    2384:	d71c0501 	ldrle	r0, [ip, -r1, lsl #10]
    2388:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    238c:	0d054c0b 	stceq	12, cr4, [r5, #-44]	; 0xffffffd4
    2390:	4a1e0530 	bmi	783858 <__core1_vectors-0x87c7a8>
    2394:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    2398:	1a05830d 	bne	162fd4 <__core1_vectors-0xe9d02c>
    239c:	66120563 	ldrvs	r0, [r2], -r3, ror #10
    23a0:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    23a4:	01055010 	tsteq	r5, r0, lsl r0
    23a8:	00060267 	andeq	r0, r6, r7, ror #4
    23ac:	01050101 	tsteq	r5, r1, lsl #2
    23b0:	00020500 	andeq	r0, r2, r0, lsl #10
    23b4:	03000000 	movweq	r0, #0
    23b8:	050100c9 	streq	r0, [r1, #-201]	; 0xffffff37
    23bc:	0e05bb1c 	vmoveq.32	d5[0], fp
    23c0:	4a1c054c 	bmi	7038f8 <__core1_vectors-0x8fc708>
    23c4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    23c8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    23cc:	26054a01 	strcs	r4, [r5], -r1, lsl #20
    23d0:	01040200 	mrseq	r0, R12_usr
    23d4:	4c0d054a 	cfstr32mi	mvfx0, [sp], {74}	; 0x4a
    23d8:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
    23dc:	12054b0b 	andne	r4, r5, #11264	; 0x2c00
    23e0:	690e054a 	stmdbvs	lr, {r1, r3, r6, r8, sl}
    23e4:	054a1d05 	strbeq	r1, [sl, #-3333]	; 0xfffff2fb
    23e8:	2f054a08 	svccs	0x00054a08
    23ec:	01040200 	mrseq	r0, R12_usr
    23f0:	0027054a 	eoreq	r0, r7, sl, asr #10
    23f4:	4a010402 	bmi	43404 <__core1_vectors-0xfbcbfc>
    23f8:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    23fc:	01054a15 	tsteq	r5, r5, lsl sl
    2400:	0008024c 	andeq	r0, r8, ip, asr #4
    2404:	01050101 	tsteq	r5, r1, lsl #2
    2408:	00020500 	andeq	r0, r2, r0, lsl #10
    240c:	03000000 	movweq	r0, #0
    2410:	050100d9 	streq	r0, [r1, #-217]	; 0xffffff27
    2414:	0f05bf05 	svceq	0x0005bf05
    2418:	4b19054c 	blmi	643950 <__core1_vectors-0x9bc6b0>
    241c:	05821005 	streq	r1, [r2, #5]
    2420:	08052f17 	stmdaeq	r5, {r0, r1, r2, r4, r8, r9, sl, fp, sp}
    2424:	bd0c0568 	cfstr32lt	mvfx0, [ip, #-416]	; 0xfffffe60
    2428:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    242c:	0101000a 	tsteq	r1, sl
    2430:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2434:	00000002 	andeq	r0, r0, r2
    2438:	00eb0300 	rsceq	r0, fp, r0, lsl #6
    243c:	a3050501 	movwge	r0, #21761	; 0x5501
    2440:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    2444:	17054b10 	smladne	r5, r0, fp, r4
    2448:	6808054b 	stmdavs	r8, {r0, r1, r3, r6, r8, sl}
    244c:	05bd0c05 	ldreq	r0, [sp, #3077]!	; 0xc05
    2450:	0a022f01 	beq	8e05c <__core1_vectors-0xf71fa4>
    2454:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2458:	02050001 	andeq	r0, r5, #1
    245c:	00000000 	andeq	r0, r0, r0
    2460:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    2464:	05860505 	streq	r0, [r6, #1285]	; 0x505
    2468:	0c054b08 			; <UNDEFINED> instruction: 0x0c054b08
    246c:	2f0105f5 	svccs	0x000105f5
    2470:	01000a02 	tsteq	r0, r2, lsl #20
    2474:	00010501 	andeq	r0, r1, r1, lsl #10
    2478:	00000205 	andeq	r0, r0, r5, lsl #4
    247c:	8c030000 	stchi	0, cr0, [r3], {-0}
    2480:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    2484:	4b0805a2 	blmi	203b14 <__core1_vectors-0xdfc4ec>
    2488:	05a10c05 	streq	r0, [r1, #3077]!	; 0xc05
    248c:	0a022f01 	beq	8e098 <__core1_vectors-0xf71f68>
    2490:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2494:	02050001 	andeq	r0, r5, #1
    2498:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
    249c:	01019f03 	tsteq	r1, r3, lsl #30
    24a0:	05d70805 	ldrbeq	r0, [r7, #2053]	; 0x805
    24a4:	0705680c 	streq	r6, [r5, -ip, lsl #16]
    24a8:	8408054a 	strhi	r0, [r8], #-1354	; 0xfffffab6
    24ac:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    24b0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    24b4:	06029f01 	streq	r9, [r2], -r1, lsl #30
    24b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    24bc:	02050001 	andeq	r0, r5, #1
    24c0:	01003b08 	tsteq	r0, r8, lsl #22
    24c4:	0101ad03 	tsteq	r1, r3, lsl #26
    24c8:	05a11505 	streq	r1, [r1, #1285]!	; 0x505
    24cc:	08056613 	stmdaeq	r5, {r0, r1, r4, r9, sl, sp, lr}
    24d0:	4b0b054a 	blmi	2c3a00 <__core1_vectors-0xd3c600>
    24d4:	05a00c05 	streq	r0, [r0, #3077]!	; 0xc05
    24d8:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    24dc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    24e0:	02050001 	andeq	r0, r5, #1
    24e4:	01003b60 	tsteq	r0, r0, ror #22
    24e8:	0101be03 	tsteq	r1, r3, lsl #28
    24ec:	05d70805 	ldrbeq	r0, [r7, #2053]	; 0x805
    24f0:	0b05670a 	bleq	15c120 <__core1_vectors-0xea3ee0>
    24f4:	4a100530 	bmi	4039bc <__core1_vectors-0xbfc644>
    24f8:	059e1a05 	ldreq	r1, [lr, #2565]	; 0xa05
    24fc:	0a054a15 	beq	154d58 <__core1_vectors-0xeab2a8>
    2500:	059b4b2e 	ldreq	r4, [fp, #2862]	; 0xb2e
    2504:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    2508:	0b056601 	bleq	15bd14 <__core1_vectors-0xea42ec>
    250c:	2f01056c 	svccs	0x0001056c
    2510:	01000602 	tsteq	r0, r2, lsl #12
    2514:	00010501 	andeq	r0, r1, r1, lsl #10
    2518:	3bf80205 	blcc	ffe02d34 <__shm_end__+0xbfe02d34>
    251c:	95030100 	strls	r0, [r3, #-256]	; 0xffffff00
    2520:	09050102 	stmdbeq	r5, {r1, r8}
    2524:	4a1205bb 	bmi	483c18 <__core1_vectors-0xb7c3e8>
    2528:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
    252c:	0402000f 	streq	r0, [r2], #-15
    2530:	0b056601 	bleq	15bd3c <__core1_vectors-0xea42c4>
    2534:	19058584 	stmdbne	r5, {r2, r7, r8, sl, pc}
    2538:	2e260530 	mcrcs	5, 1, r0, cr6, cr0, {1}
    253c:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    2540:	16052e0a 	strne	r2, [r5], -sl, lsl #28
    2544:	4a110566 	bmi	443ae4 <__core1_vectors-0xbbc51c>
    2548:	052f0b05 	streq	r0, [pc, #-2821]!	; 1a4b <__core1_vectors-0xffe5b5>
    254c:	0a052e18 	beq	14ddb4 <__core1_vectors-0xeb224c>
    2550:	2f0c059e 	svccs	0x000c059e
    2554:	6c620b05 			; <UNDEFINED> instruction: 0x6c620b05
    2558:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    255c:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
    2560:	1d053003 	stcne	0, cr3, [r5, #-12]
    2564:	03040200 	movweq	r0, #16896	; 0x4200
    2568:	0011054a 	andseq	r0, r1, sl, asr #10
    256c:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2570:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    2574:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    2578:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
    257c:	0d056603 	stceq	6, cr6, [r5, #-12]
    2580:	03040200 	movweq	r0, #16896	; 0x4200
    2584:	001c052e 	andseq	r0, ip, lr, lsr #10
    2588:	2c030402 	cfstrscs	mvf0, [r3], {2}
    258c:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    2590:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2594:	04020005 	streq	r0, [r2], #-5
    2598:	08054a01 	stmdaeq	r5, {r0, r9, fp, lr}
    259c:	660b056a 	strvs	r0, [fp], -sl, ror #10
    25a0:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    25a4:	06024b01 	streq	r4, [r2], -r1, lsl #22
    25a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    25ac:	02050001 	andeq	r0, r5, #1
    25b0:	01003d34 	tsteq	r0, r4, lsr sp
    25b4:	0102b703 	tsteq	r2, r3, lsl #14
    25b8:	05bb0905 	ldreq	r0, [fp, #2309]!	; 0x905
    25bc:	1a054a11 	bne	154e08 <__core1_vectors-0xeab1f8>
    25c0:	4b09054a 	blmi	243af0 <__core1_vectors-0xdbc510>
    25c4:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
    25c8:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    25cc:	08056601 	stmdaeq	r5, {r0, r9, sl, sp, lr}
    25d0:	680d054b 	stmdavs	sp, {r0, r1, r3, r6, r8, sl}
    25d4:	054c0b05 	strbeq	r0, [ip, #-2821]	; 0xfffff4fb
    25d8:	2f053025 	svccs	0x00053025
    25dc:	4a1b0566 	bmi	6c3b7c <__core1_vectors-0x93c484>
    25e0:	05f21205 	ldrbeq	r1, [r2, #517]!	; 0x205
    25e4:	16052e11 			; <UNDEFINED> instruction: 0x16052e11
    25e8:	4a0a054b 	bmi	283b1c <__core1_vectors-0xd7c4e4>
    25ec:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    25f0:	0a054a11 	beq	154e3c <__core1_vectors-0xeab1c4>
    25f4:	682e052f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r8, sl}
    25f8:	059e0c05 	ldreq	r0, [lr, #3077]	; 0xc05
    25fc:	1405663a 	strne	r6, [r5], #-1594	; 0xfffff9c6
    2600:	300f054a 	andcc	r0, pc, sl, asr #10
    2604:	05820a05 	streq	r0, [r2, #2565]	; 0xa05
    2608:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    260c:	0e054a01 	vmlaeq.f32	s8, s10, s2
    2610:	67130568 	ldrvs	r0, [r3, -r8, ror #10]
    2614:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    2618:	6673030b 	ldrbtvs	r0, [r3], -fp, lsl #6
    261c:	0f030805 	svceq	0x00030805
    2620:	660f0582 	strvs	r0, [pc], -r2, lsl #11
    2624:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
    2628:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    262c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2630:	02050001 	andeq	r0, r5, #1
    2634:	01003eac 	smlatbeq	r0, ip, lr, r3
    2638:	0102e203 	tsteq	r2, r3, lsl #4
    263c:	21081305 	tstcs	r8, r5, lsl #6
    2640:	054a1b05 	strbeq	r1, [sl, #-2821]	; 0xfffff4fb
    2644:	11054a26 	tstne	r5, r6, lsr #20
    2648:	4a19054b 	bmi	643b7c <__core1_vectors-0x9bc484>
    264c:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    2650:	08054b0c 	stmdaeq	r5, {r2, r3, r8, r9, fp, lr}
    2654:	001a054c 	andseq	r0, sl, ip, asr #10
    2658:	66010402 	strvs	r0, [r1], -r2, lsl #8
    265c:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
    2660:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    2664:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
    2668:	56056603 	strpl	r6, [r5], -r3, lsl #12
    266c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2670:	006a0566 	rsbeq	r0, sl, r6, ror #10
    2674:	66050402 	strvs	r0, [r5], -r2, lsl #8
    2678:	05680a05 	strbeq	r0, [r8, #-2565]!	; 0xfffff5fb
    267c:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    2680:	0e056601 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx1
    2684:	4d0a0568 	cfstr32mi	mvfx0, [sl, #-416]	; 0xfffffe60
    2688:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    268c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2690:	0a05680c 	beq	15c6c8 <__core1_vectors-0xea3938>
    2694:	17052208 	strne	r2, [r5, -r8, lsl #4]
    2698:	01040200 	mrseq	r0, R12_usr
    269c:	680d0566 	stmdavs	sp, {r1, r2, r5, r6, r8, sl}
    26a0:	05f20c05 	ldrbeq	r0, [r2, #3077]!	; 0xc05
    26a4:	1705300a 	strne	r3, [r5, -sl]
    26a8:	01040200 	mrseq	r0, R12_usr
    26ac:	68160566 	ldmdavs	r6, {r1, r2, r5, r6, r8, sl}
    26b0:	05ba0c05 	ldreq	r0, [sl, #3077]!	; 0xc05
    26b4:	1705680a 	strne	r6, [r5, -sl, lsl #16]
    26b8:	01040200 	mrseq	r0, R12_usr
    26bc:	68160566 	ldmdavs	r6, {r1, r2, r5, r6, r8, sl}
    26c0:	05ba0c05 	ldreq	r0, [sl, #3077]!	; 0xc05
    26c4:	1405690a 	strne	r6, [r5], #-2314	; 0xfffff6f6
    26c8:	01040200 	mrseq	r0, R12_usr
    26cc:	00270566 	eoreq	r0, r7, r6, ror #10
    26d0:	66020402 	strvs	r0, [r2], -r2, lsl #8
    26d4:	4b681005 	blmi	1a066f0 <__end__+0x9ea6d0>
    26d8:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    26dc:	1e056a0c 	vmlane.f32	s12, s10, s24
    26e0:	01040200 	mrseq	r0, R12_usr
    26e4:	00320566 	eorseq	r0, r2, r6, ror #10
    26e8:	66020402 	strvs	r0, [r2], -r2, lsl #8
    26ec:	05681105 	strbeq	r1, [r8, #-261]!	; 0xfffffefb
    26f0:	1105f210 	tstne	r5, r0, lsl r2	; <UNPREDICTABLE>
    26f4:	a10a0532 	tstge	sl, r2, lsr r5
    26f8:	02001c05 	andeq	r1, r0, #1280	; 0x500
    26fc:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2700:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    2704:	0c056602 	stceq	6, cr6, [r5], {2}
    2708:	68130568 	ldmdavs	r3, {r3, r5, r6, r8, sl}
    270c:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
    2710:	0f054b10 	svceq	0x00054b10
    2714:	001c0586 	andseq	r0, ip, r6, lsl #11
    2718:	66010402 	strvs	r0, [r1], -r2, lsl #8
    271c:	05681505 	strbeq	r1, [r8, #-1285]!	; 0xfffffafb
    2720:	12054b16 	andne	r4, r5, #22528	; 0x5800
    2724:	690c054b 	stmdbvs	ip, {r0, r1, r3, r6, r8, sl}
    2728:	02001905 	andeq	r1, r0, #81920	; 0x14000
    272c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2730:	0c05680e 	stceq	8, cr6, [r5], {14}
    2734:	15053548 	strne	r3, [r5, #-1352]	; 0xfffffab8
    2738:	01040200 	mrseq	r0, R12_usr
    273c:	68130582 	ldmdavs	r3, {r1, r7, r8, sl}
    2740:	054b1005 	strbeq	r1, [fp, #-5]
    2744:	1e058411 	cfmvdlrne	mvd5, r8
    2748:	01040200 	mrseq	r0, R12_usr
    274c:	002a0566 	eoreq	r0, sl, r6, ror #10
    2750:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    2754:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
    2758:	11054b10 	tstne	r5, r0, lsl fp
    275c:	001e0584 	andseq	r0, lr, r4, lsl #11
    2760:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2764:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
    2768:	0c054b10 			; <UNDEFINED> instruction: 0x0c054b10
    276c:	00190569 	andseq	r0, r9, r9, ror #10
    2770:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2774:	05680e05 	strbeq	r0, [r8, #-3589]!	; 0xfffff1fb
    2778:	6667030c 	strbtvs	r0, [r7], -ip, lsl #6
    277c:	1d030a05 	vstrne	s0, [r3, #-20]	; 0xffffffec
    2780:	0c054b2e 			; <UNDEFINED> instruction: 0x0c054b2e
    2784:	4d0a0584 	cfstr32mi	mvfx0, [sl, #-528]	; 0xfffffdf0
    2788:	02001905 	andeq	r1, r0, #81920	; 0x14000
    278c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2790:	0a056809 	beq	15c7bc <__core1_vectors-0xea3844>
    2794:	001a05a0 	andseq	r0, sl, r0, lsr #11
    2798:	66010402 	strvs	r0, [r1], -r2, lsl #8
    279c:	05680905 	strbeq	r0, [r8, #-2309]!	; 0xfffff6fb
    27a0:	0705a00d 	streq	sl, [r5, -sp]
    27a4:	0009054a 	andeq	r0, r9, sl, asr #10
    27a8:	30040402 	andcc	r0, r4, r2, lsl #8
    27ac:	02003805 	andeq	r3, r0, #327680	; 0x50000
    27b0:	059c0404 	ldreq	r0, [ip, #1028]	; 0x404
    27b4:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    27b8:	1e056601 	cfmadd32ne	mvax0, mvfx6, mvfx5, mvfx1
    27bc:	01040200 	mrseq	r0, R12_usr
    27c0:	00070566 	andeq	r0, r7, r6, ror #10
    27c4:	4a010402 	bmi	437d4 <__core1_vectors-0xfbc82c>
    27c8:	02002705 	andeq	r2, r0, #1310720	; 0x140000
    27cc:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    27d0:	19056a0a 	stmdbne	r5, {r1, r3, r9, fp, sp, lr}
    27d4:	01040200 	mrseq	r0, R12_usr
    27d8:	68090566 	stmdavs	r9, {r1, r2, r5, r6, r8, sl}
    27dc:	05a00a05 	streq	r0, [r0, #2565]!	; 0xa05
    27e0:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    27e4:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    27e8:	a00d0568 	andge	r0, sp, r8, ror #10
    27ec:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    27f0:	04020009 	streq	r0, [r2], #-9
    27f4:	25053003 	strcs	r3, [r5, #-3]
    27f8:	03040200 	movweq	r0, #16896	; 0x4200
    27fc:	001c0580 	andseq	r0, ip, r0, lsl #11
    2800:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2804:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    2808:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    280c:	07056a0d 	streq	r6, [r5, -sp, lsl #20]
    2810:	0009054a 	andeq	r0, r9, sl, asr #10
    2814:	30030402 	andcc	r0, r3, r2, lsl #8
    2818:	02001905 	andeq	r1, r0, #81920	; 0x14000
    281c:	05f00304 	ldrbeq	r0, [r0, #772]!	; 0x304
    2820:	04020007 	streq	r0, [r2], #-7
    2824:	0d056601 	stceq	6, cr6, [r5, #-4]
    2828:	4a070586 	bmi	1c3e48 <__core1_vectors-0xe3c1b8>
    282c:	02000905 	andeq	r0, r0, #81920	; 0x14000
    2830:	05300404 	ldreq	r0, [r0, #-1028]!	; 0xfffffbfc
    2834:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    2838:	1a058004 	bne	162850 <__core1_vectors-0xe9d7b0>
    283c:	01040200 	mrseq	r0, R12_usr
    2840:	001e0566 	andseq	r0, lr, r6, ror #10
    2844:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2848:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    284c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2850:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    2854:	08056603 	stmdaeq	r5, {r0, r1, r9, sl, sp, lr}
    2858:	667f8703 	ldrbtvs	r8, [pc], -r3, lsl #14
    285c:	fe030d05 	vdot.bf16	d0, d3, d5[0]
    2860:	1f052e00 	svcne	0x00052e00
    2864:	01040200 	mrseq	r0, R12_usr
    2868:	680a0566 	stmdavs	sl, {r1, r2, r5, r6, r8, sl}
    286c:	05681105 	strbeq	r1, [r8, #-261]!	; 0xfffffefb
    2870:	054bba10 	strbeq	fp, [fp, #-2576]	; 0xfffff5f0
    2874:	0c054b0e 			; <UNDEFINED> instruction: 0x0c054b0e
    2878:	690f054b 	stmdbvs	pc, {r0, r1, r3, r6, r8, sl}	; <UNPREDICTABLE>
    287c:	05d70e05 	ldrbeq	r0, [r7, #3589]	; 0xe05
    2880:	10054b0f 	andne	r4, r5, pc, lsl #22
    2884:	64180530 	ldrvs	r0, [r8], #-1328	; 0xfffffad0
    2888:	05661005 	strbeq	r1, [r6, #-5]!
    288c:	0a052e0f 	beq	14e0d0 <__core1_vectors-0xeb1f30>
    2890:	680c0550 	stmdavs	ip, {r4, r6, r8, sl}
    2894:	4b4d0a05 	blmi	13450b0 <__end__+0x329090>
    2898:	02000f05 	andeq	r0, r0, #5, 30
    289c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    28a0:	0d05840c 	cfstrseq	mvf8, [r5, #-48]	; 0xffffffd0
    28a4:	4a07054d 	bmi	1c3de0 <__core1_vectors-0xe3c220>
    28a8:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    28ac:	05300404 	ldreq	r0, [r0, #-1028]!	; 0xfffffbfc
    28b0:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    28b4:	1a059c04 	bne	1698cc <__core1_vectors-0xe96734>
    28b8:	01040200 	mrseq	r0, R12_usr
    28bc:	001e0566 	andseq	r0, lr, r6, ror #10
    28c0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    28c4:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    28c8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    28cc:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    28d0:	0d056603 	stceq	6, cr6, [r5, #-12]
    28d4:	4a07056b 	bmi	1c3e88 <__core1_vectors-0xe3c178>
    28d8:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
    28dc:	2605680b 	strcs	r6, [r5], -fp, lsl #16
    28e0:	0b052408 	bleq	14b908 <__core1_vectors-0xeb46f8>
    28e4:	003a0566 	eorseq	r0, sl, r6, ror #10
    28e8:	03020402 	movweq	r0, #9218	; 0x2402
    28ec:	07059e78 	smlsdxeq	r5, r8, lr, r9
    28f0:	01040200 	mrseq	r0, R12_usr
    28f4:	001a0566 	andseq	r0, sl, r6, ror #10
    28f8:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
    28fc:	02002c05 	andeq	r2, r0, #1280	; 0x500
    2900:	05820404 	streq	r0, [r2, #1028]	; 0x404
    2904:	660c030d 	strvs	r0, [ip], -sp, lsl #6
    2908:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    290c:	04020009 	streq	r0, [r2], #-9
    2910:	38053004 	stmdacc	r5, {r2, ip, sp}
    2914:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2918:	001a0580 	andseq	r0, sl, r0, lsl #11
    291c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2920:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
    2924:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2928:	04020007 	streq	r0, [r2], #-7
    292c:	27054a01 	strcs	r4, [r5, -r1, lsl #20]
    2930:	03040200 	movweq	r0, #16896	; 0x4200
    2934:	030d0566 	movweq	r0, #54630	; 0xd566
    2938:	0f056652 	svceq	0x00056652
    293c:	052e3503 	streq	r3, [lr, #-1283]!	; 0xfffffafd
    2940:	7ecd0308 	cdpvc	3, 12, cr0, cr13, cr8, {0}
    2944:	030d054a 	movweq	r0, #54602	; 0xd54a
    2948:	054a00fe 	strbeq	r0, [sl, #-254]	; 0xffffff02
    294c:	2e38030c 	cdpcs	3, 3, cr0, cr8, cr12, {0}
    2950:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    2954:	022f0104 	eoreq	r0, pc, #4, 2
    2958:	01010006 	tsteq	r1, r6
    295c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2960:	0046c802 	subeq	ip, r6, r2, lsl #16
    2964:	04a90301 	strteq	r0, [r9], #769	; 0x301
    2968:	bb1c0501 	bllt	703d74 <__core1_vectors-0x8fc28c>
    296c:	4b4b0905 	blmi	12c4d88 <__end__+0x2a8d68>
    2970:	05500d05 	ldrbeq	r0, [r0, #-3333]	; 0xfffff2fb
    2974:	0f05bc0b 	svceq	0x0005bc0b
    2978:	bb0e0568 	bllt	383f20 <__core1_vectors-0xc7c0e0>
    297c:	9f680d05 	svcls	0x00680d05
    2980:	05310f05 	ldreq	r0, [r1, #-3845]!	; 0xfffff0fb
    2984:	18054b0e 	stmdane	r5, {r1, r2, r3, r8, r9, fp, lr}
    2988:	01040200 	mrseq	r0, R12_usr
    298c:	00240566 	eoreq	r0, r4, r6, ror #10
    2990:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2994:	02003005 	andeq	r3, r0, #5
    2998:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    299c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    29a0:	11056604 	tstne	r5, r4, lsl #12
    29a4:	10054b68 	andne	r4, r5, r8, ror #22
    29a8:	4b0e05bd 	blmi	3840a4 <__core1_vectors-0xc7bf5c>
    29ac:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
    29b0:	11058212 	tstne	r5, r2, lsl r2
    29b4:	1405da2f 	strne	sp, [r5], #-2607	; 0xfffff5d1
    29b8:	4b0e05d9 	blmi	384124 <__core1_vectors-0xc7bedc>
    29bc:	6810054b 	ldmdavs	r0, {r0, r1, r3, r6, r8, sl}
    29c0:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
    29c4:	1905bb10 	stmdbne	r5, {r4, r8, r9, fp, ip, sp, pc}
    29c8:	82180568 	andshi	r0, r8, #104, 10	; 0x1a000000
    29cc:	da2f1305 	ble	bc75e8 <__core1_vectors-0x438a18>
    29d0:	4bdb1105 	blmi	ff6c6dec <__shm_end__+0xbf6c6dec>
    29d4:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
    29d8:	1105670f 	tstne	r5, pc, lsl #14
    29dc:	6c0f05b7 	cfstr32vs	mvfx0, [pc], {183}	; 0xb7
    29e0:	24020e05 	strcs	r0, [r2], #-3589	; 0xfffff1fb
    29e4:	4c140512 	cfldr32mi	mvfx0, [r4], {18}
    29e8:	054f0a05 	strbeq	r0, [pc, #-2565]	; 1feb <__core1_vectors-0xffe015>
    29ec:	4003a10b 	andmi	sl, r3, fp, lsl #2
    29f0:	030a0566 	movweq	r0, #42342	; 0xa566
    29f4:	052e00c2 	streq	r0, [lr, #-194]!	; 0xffffff3e
    29f8:	0105320c 	tsteq	r5, ip, lsl #4
    29fc:	01040200 	mrseq	r0, R12_usr
    2a00:	0006022f 	andeq	r0, r6, pc, lsr #4
    2a04:	01d50101 	bicseq	r0, r5, r1, lsl #2
    2a08:	00030000 	andeq	r0, r3, r0
    2a0c:	00000136 	andeq	r0, r0, r6, lsr r1
    2a10:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2a14:	0101000d 	tsteq	r1, sp
    2a18:	00000101 	andeq	r0, r0, r1, lsl #2
    2a1c:	00000100 	andeq	r0, r0, r0, lsl #2
    2a20:	6c776801 	ldclvs	8, cr6, [r7], #-4
    2a24:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2a28:	752f6372 	strvc	r6, [pc, #-882]!	; 26be <__core1_vectors-0xffd942>
    2a2c:	736c6974 	cmnvc	ip, #116, 18	; 0x1d0000
    2a30:	73752f00 	cmnvc	r5, #0, 30
    2a34:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    2a38:	63672f62 	cmnvs	r7, #392	; 0x188
    2a3c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    2a40:	6f6e2d6d 	svcvs	0x006e2d6d
    2a44:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    2a48:	2f696261 	svccs	0x00696261
    2a4c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    2a50:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    2a54:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2a58:	77680065 	strbvc	r0, [r8, -r5, rrx]!
    2a5c:	2f62696c 	svccs	0x0062696c
    2a60:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2a64:	00656475 	rsbeq	r6, r5, r5, ror r4
    2a68:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    2a6c:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    2a70:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2a74:	6f732f65 	svcvs	0x00732f65
    2a78:	31615f63 	cmncc	r1, r3, ror #30
    2a7c:	752f0030 	strvc	r0, [pc, #-48]!	; 2a54 <__core1_vectors-0xffd5ac>
    2a80:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2a84:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2a88:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2a8c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2a90:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2a94:	752f0073 	strvc	r0, [pc, #-115]!	; 2a29 <__core1_vectors-0xffd5d7>
    2a98:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2a9c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2aa0:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2aa4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2aa8:	61000062 	tstvs	r0, r2, rrx
    2aac:	705f746c 	subsvc	r7, pc, ip, ror #8
    2ab0:	72617532 	rsbvc	r7, r1, #209715200	; 0xc800000
    2ab4:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2ab8:	73000001 	movwvc	r0, #1
    2abc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2ac0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2ac4:	68000002 	stmdavs	r0, {r1}
    2ac8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2acc:	0300682e 	movweq	r6, #2094	; 0x82e
    2ad0:	6c610000 	stclvs	0, cr0, [r1], #-0
    2ad4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    2ad8:	5f6b636f 	svcpl	0x006b636f
    2adc:	616e616d 	cmnvs	lr, sp, ror #2
    2ae0:	2e726567 	cdpcs	5, 7, cr6, cr2, cr7, {3}
    2ae4:	00040068 	andeq	r0, r4, r8, rrx
    2ae8:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2aec:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    2af0:	755f3035 	ldrbvc	r3, [pc, #-53]	; 2ac3 <__core1_vectors-0xffd53d>
    2af4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    2af8:	00030068 	andeq	r0, r3, r8, rrx
    2afc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2b00:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    2b04:	00020068 	andeq	r0, r2, r8, rrx
    2b08:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    2b0c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2b10:	00050068 	andeq	r0, r5, r8, rrx
    2b14:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    2b18:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2b1c:	00000500 	andeq	r0, r0, r0, lsl #10
    2b20:	6b636f6c 	blvs	18de8d8 <__end__+0x8c28b8>
    2b24:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    2b28:	74730000 	ldrbtvc	r0, [r3], #-0
    2b2c:	2e6f6964 	vnmulcs.f16	s13, s30, s9	; <UNPREDICTABLE>
    2b30:	00060068 	andeq	r0, r6, r8, rrx
    2b34:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2b38:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2b3c:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    2b40:	00030068 	andeq	r0, r3, r8, rrx
    2b44:	01050000 	mrseq	r0, (UNDEF: 5)
    2b48:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    2b4c:	03010049 	movweq	r0, #4169	; 0x1049
    2b50:	1005013c 	andne	r0, r5, ip, lsr r1
    2b54:	4c1105bb 	cfldr32mi	mvfx0, [r1], {187}	; 0xbb
    2b58:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    2b5c:	05054c1a 	streq	r4, [r5, #-3098]	; 0xfffff3e6
    2b60:	4d0c0567 	cfstr32mi	mvfx0, [ip, #-412]	; 0xfffffe64
    2b64:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2b68:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    2b6c:	03054a01 	movweq	r4, #23041	; 0x5a01
    2b70:	bc010567 	cfstr32lt	mvfx0, [r1], {103}	; 0x67
    2b74:	01000602 	tsteq	r0, r2, lsl #12
    2b78:	00010501 	andeq	r0, r1, r1, lsl #10
    2b7c:	49fc0205 	ldmibmi	ip!, {r0, r2, r9}^
    2b80:	cb030100 	blgt	c2f88 <__core1_vectors-0xf3d078>
    2b84:	0e050100 	adfeqs	f0, f5, f0
    2b88:	08054d83 	stmdaeq	r5, {r0, r1, r7, r8, sl, fp, lr}
    2b8c:	681205f7 	ldmdavs	r2, {r0, r1, r2, r4, r5, r6, r7, r8, sl}
    2b90:	05d90805 	ldrbeq	r0, [r9, #2053]	; 0x805
    2b94:	08056812 	stmdaeq	r5, {r1, r4, fp, sp, lr}
    2b98:	681205dc 	ldmdavs	r2, {r2, r3, r4, r6, r7, r8, sl}
    2b9c:	05a10805 	streq	r0, [r1, #2053]!	; 0x805
    2ba0:	0c056812 	stceq	8, cr6, [r5], {18}
    2ba4:	2f0105a0 	svccs	0x000105a0
    2ba8:	01000602 	tsteq	r0, r2, lsl #12
    2bac:	00010501 	andeq	r0, r1, r1, lsl #10
    2bb0:	00000205 	andeq	r0, r0, r5, lsl #4
    2bb4:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    2bb8:	12050100 	andne	r0, r5, #0, 2
    2bbc:	4d050583 	cfstr32mi	mvfx0, [r5, #-524]	; 0xfffffdf4
    2bc0:	02000905 	andeq	r0, r0, #81920	; 0x14000
    2bc4:	056c0104 	strbeq	r0, [ip, #-260]!	; 0xfffffefc
    2bc8:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    2bcc:	0505bb01 	streq	fp, [r5, #-2817]	; 0xfffff4ff
    2bd0:	01040200 	mrseq	r0, R12_usr
    2bd4:	01054c4a 	tsteq	r5, sl, asr #24
    2bd8:	06022408 	streq	r2, [r2], -r8, lsl #8
    2bdc:	c1010100 	mrsgt	r0, (UNDEF: 17)
    2be0:	03000001 	movweq	r0, #1
    2be4:	0000cb00 	andeq	ip, r0, r0, lsl #22
    2be8:	fb010200 	blx	433f2 <__core1_vectors-0xfbcc0e>
    2bec:	01000d0e 	tsteq	r0, lr, lsl #26
    2bf0:	00010101 	andeq	r0, r1, r1, lsl #2
    2bf4:	00010000 	andeq	r0, r1, r0
    2bf8:	72730100 	rsbsvc	r0, r3, #0, 2
    2bfc:	6f632f63 	svcvs	0x00632f63
    2c00:	00316572 	eorseq	r6, r1, r2, ror r5
    2c04:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2c08:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2c0c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2c10:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2c14:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2c18:	61652d65 	cmnvs	r5, r5, ror #26
    2c1c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    2c20:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    2c24:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2c28:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    2c2c:	73752f00 	cmnvc	r5, #0, 30
    2c30:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2c34:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2c38:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    2c3c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2c40:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    2c44:	636e6900 	cmnvs	lr, #0, 18
    2c48:	6f630000 	svcvs	0x00630000
    2c4c:	5f316572 	svcpl	0x00316572
    2c50:	6e69616d 	powvsez	f6, f1, #5.0
    2c54:	0100632e 	tsteq	r0, lr, lsr #6
    2c58:	74730000 	ldrbtvc	r0, [r3], #-0
    2c5c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    2c60:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2c64:	74730000 	ldrbtvc	r0, [r3], #-0
    2c68:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    2c6c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2c70:	745f0000 	ldrbvc	r0, [pc], #-0	; 2c78 <__core1_vectors-0xffd388>
    2c74:	73657079 	cmnvc	r5, #121	; 0x79
    2c78:	0300682e 	movweq	r6, #2094	; 0x82e
    2c7c:	65720000 	ldrbvs	r0, [r2, #-0]!
    2c80:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    2c84:	00030068 	andeq	r0, r3, r8, rrx
    2c88:	636f6c00 	cmnvs	pc, #0, 24
    2c8c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    2c90:	64000003 	strvs	r0, [r0], #-3
    2c94:	6c5f616d 	ldfvse	f6, [pc], {109}	; 0x6d
    2c98:	756f7961 	strbvc	r7, [pc, #-2401]!	; 233f <__core1_vectors-0xffdcc1>
    2c9c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2ca0:	73000004 	movwvc	r0, #4
    2ca4:	65726168 	ldrbvs	r6, [r2, #-360]!	; 0xfffffe98
    2ca8:	70695f64 	rsbvc	r5, r9, r4, ror #30
    2cac:	00682e63 	rsbeq	r2, r8, r3, ror #28
    2cb0:	00000004 	andeq	r0, r0, r4
    2cb4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2cb8:	004ad402 	subeq	sp, sl, r2, lsl #8
    2cbc:	011a0301 	tsteq	sl, r1, lsl #6
    2cc0:	056b1405 	strbeq	r1, [fp, #-1029]!	; 0xfffffbfb
    2cc4:	05056713 	streq	r6, [r5, #-1811]	; 0xfffff8ed
    2cc8:	00100566 	andseq	r0, r0, r6, ror #10
    2ccc:	2f030402 	svccs	0x00030402
    2cd0:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
    2cd4:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    2cd8:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    2cdc:	46054903 	strmi	r4, [r5], -r3, lsl #18
    2ce0:	03040200 	movweq	r0, #16896	; 0x4200
    2ce4:	00050566 	andeq	r0, r5, r6, ror #10
    2ce8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2cec:	02a10105 	adceq	r0, r1, #1073741825	; 0x40000001
    2cf0:	0101000a 	tsteq	r1, sl
    2cf4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2cf8:	004b4c02 	subeq	r4, fp, r2, lsl #24
    2cfc:	01270301 			; <UNDEFINED> instruction: 0x01270301
    2d00:	05691305 	strbeq	r1, [r9, #-773]!	; 0xfffffcfb
    2d04:	41056605 	tstmi	r5, r5, lsl #12
    2d08:	03040200 	movweq	r0, #16896	; 0x4200
    2d0c:	0039052e 	eorseq	r0, r9, lr, lsr #10
    2d10:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2d14:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    2d18:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2d1c:	0a029f01 	beq	aa928 <__core1_vectors-0xf556d8>
    2d20:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2d24:	02050029 	andeq	r0, r5, #41	; 0x29
    2d28:	01004ba8 	smlatbeq	r0, r8, fp, r4
    2d2c:	05012e03 	streq	r2, [r1, #-3587]	; 0xfffff1fd
    2d30:	054b8305 	strbeq	r8, [fp, #-773]	; 0xfffffcfb
    2d34:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    2d38:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2d3c:	02050001 	andeq	r0, r5, #1
    2d40:	01004bd4 	ldrdeq	r4, [r0, -r4]
    2d44:	05013503 	streq	r3, [r1, #-1283]	; 0xfffffafd
    2d48:	05674b02 	strbeq	r4, [r7, #-2818]!	; 0xfffff4fe
    2d4c:	0b052f05 	bleq	14e968 <__core1_vectors-0xeb1698>
    2d50:	05693631 	strbeq	r3, [r9, #-1585]!	; 0xfffff9cf
    2d54:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    2d58:	0b052e01 	bleq	14e564 <__core1_vectors-0xeb1a9c>
    2d5c:	01040200 	mrseq	r0, R12_usr
    2d60:	1405834a 	strne	r8, [r5], #-842	; 0xfffffcb6
    2d64:	01040200 	mrseq	r0, R12_usr
    2d68:	000b052e 	andeq	r0, fp, lr, lsr #10
    2d6c:	4a010402 	bmi	43d7c <__core1_vectors-0xfbc284>
    2d70:	054e0505 	strbeq	r0, [lr, #-1285]	; 0xfffffafb
    2d74:	0505670b 	streq	r6, [r5, #-1803]	; 0xfffff8f5
    2d78:	670d054b 	strvs	r0, [sp, -fp, asr #10]
    2d7c:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
    2d80:	05910805 	ldreq	r0, [r1, #2053]	; 0x805
    2d84:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
    2d88:	1d053201 	sfmne	f3, 4, [r5, #-4]
    2d8c:	01040200 	mrseq	r0, R12_usr
    2d90:	0009054a 	andeq	r0, r9, sl, asr #10
    2d94:	4b010402 	blmi	43da4 <__core1_vectors-0xfbc25c>
    2d98:	02001d05 	andeq	r1, r0, #320	; 0x140
    2d9c:	022d0104 	eoreq	r0, sp, #4, 2
    2da0:	01010002 	tsteq	r1, r2
    2da4:	000000ad 	andeq	r0, r0, sp, lsr #1
    2da8:	00300003 	eorseq	r0, r0, r3
    2dac:	01020000 	mrseq	r0, (UNDEF: 2)
    2db0:	000d0efb 	strdeq	r0, [sp], -fp
    2db4:	01010101 	tsteq	r1, r1, lsl #2
    2db8:	01000000 	mrseq	r0, (UNDEF: 0)
    2dbc:	73010000 	movwvc	r0, #4096	; 0x1000
    2dc0:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    2dc4:	3165726f 	cmncc	r5, pc, ror #4
    2dc8:	6f630000 	svcvs	0x00630000
    2dcc:	5f316572 	svcpl	0x00316572
    2dd0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    2dd4:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    2dd8:	00010063 	andeq	r0, r1, r3, rrx
    2ddc:	01050000 	mrseq	r0, (UNDEF: 5)
    2de0:	20020500 	andcs	r0, r2, r0, lsl #10
    2de4:	03010000 	movweq	r0, #4096	; 0x1000
    2de8:	16050109 	strne	r0, [r5], -r9, lsl #2
    2dec:	662d0568 	strtvs	r0, [sp], -r8, ror #10
    2df0:	05660205 	strbeq	r0, [r6, #-517]!	; 0xfffffdfb
    2df4:	0402000a 	streq	r0, [r2], #-10
    2df8:	08052f03 	stmdaeq	r5, {r0, r1, r8, r9, sl, fp, sp}
    2dfc:	03040200 	movweq	r0, #16896	; 0x4200
    2e00:	0059054a 	subseq	r0, r9, sl, asr #10
    2e04:	49030402 	stmdbmi	r3, {r1, sl}
    2e08:	02006005 	andeq	r6, r0, #5
    2e0c:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    2e10:	04020002 	streq	r0, [r2], #-2
    2e14:	19056601 	stmdbne	r5, {r0, r9, sl, sp, lr}
    2e18:	660505a3 	strvs	r0, [r5], -r3, lsr #11
    2e1c:	02000c05 	andeq	r0, r0, #1280	; 0x500
    2e20:	052f0304 	streq	r0, [pc, #-772]!	; 2b24 <__core1_vectors-0xffd4dc>
    2e24:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    2e28:	05056503 	streq	r6, [r5, #-1283]	; 0xfffffafd
    2e2c:	01040200 	mrseq	r0, R12_usr
    2e30:	9e0a0366 	cdpls	3, 0, cr0, cr10, cr6, {3}
    2e34:	01040200 	mrseq	r0, R12_usr
    2e38:	00020230 	andeq	r0, r2, r0, lsr r2
    2e3c:	01050101 	tsteq	r5, r1, lsl #2
    2e40:	c8020500 	stmdagt	r2, {r8, sl}
    2e44:	03010000 	movweq	r0, #4096	; 0x1000
    2e48:	0505012e 	streq	r0, [r5, #-302]	; 0xfffffed2
    2e4c:	4e010514 	mcrmi	5, 0, r0, cr1, cr4, {0}
    2e50:	01000402 	tsteq	r0, r2, lsl #8
    2e54:	00025701 	andeq	r5, r2, r1, lsl #14
    2e58:	fc000300 	stc2	3, cr0, [r0], {-0}
    2e5c:	02000000 	andeq	r0, r0, #0
    2e60:	0d0efb01 	vstreq	d15, [lr, #-4]
    2e64:	01010100 	mrseq	r0, (UNDEF: 17)
    2e68:	00000001 	andeq	r0, r0, r1
    2e6c:	01000001 	tsteq	r0, r1
    2e70:	2f637273 	svccs	0x00637273
    2e74:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2e78:	752f0031 	strvc	r0, [pc, #-49]!	; 2e4f <__core1_vectors-0xffd1b1>
    2e7c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 2cb8 <__core1_vectors-0xffd348>
    2e80:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    2e84:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    2e88:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    2e8c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2e90:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2e94:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    2e98:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    2e9c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2ea0:	2f006564 	svccs	0x00006564
    2ea4:	2f727375 	svccs	0x00727375
    2ea8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2eac:	2f656475 	svccs	0x00656475
    2eb0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2eb4:	2f006269 	svccs	0x00006269
    2eb8:	2f727375 	svccs	0x00727375
    2ebc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2ec0:	2f656475 	svccs	0x00656475
    2ec4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2ec8:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2ecc:	68007379 	stmdavs	r0, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    2ed0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2ed4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2ed8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    2edc:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    2ee0:	6d5f6362 	ldclvs	3, cr6, [pc, #-392]	; 2d60 <__core1_vectors-0xffd2a0>
    2ee4:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    2ee8:	00000100 	andeq	r0, r0, r0, lsl #2
    2eec:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    2ef0:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    2ef4:	00000200 	andeq	r0, r0, r0, lsl #4
    2ef8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2efc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2f00:	00000200 	andeq	r0, r0, r0, lsl #4
    2f04:	61647473 	smcvs	18243	; 0x4743
    2f08:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    2f0c:	00000200 	andeq	r0, r0, r0, lsl #4
    2f10:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2f14:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    2f18:	5f000003 	svcpl	0x00000003
    2f1c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    2f20:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2f24:	72000004 	andvc	r0, r0, #4
    2f28:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    2f2c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    2f30:	6f6c0000 	svcvs	0x006c0000
    2f34:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    2f38:	00000400 	andeq	r0, r0, r0, lsl #8
    2f3c:	5f746c61 	svcpl	0x00746c61
    2f40:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    2f44:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
    2f48:	00000500 	andeq	r0, r0, r0, lsl #10
    2f4c:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    2f50:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    2f54:	00003e6e 	andeq	r3, r0, lr, ror #28
    2f58:	05000000 	streq	r0, [r0, #-0]
    2f5c:	02050001 	andeq	r0, r5, #1
    2f60:	01004ca4 	smlatbeq	r0, r4, ip, r4
    2f64:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    2f68:	1105bb0e 	tstne	r5, lr, lsl #22
    2f6c:	4a05054b 	bmi	1444a0 <__core1_vectors-0xebbb60>
    2f70:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
    2f74:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    2f78:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    2f7c:	29056603 	stmdbcs	r5, {r0, r1, r9, sl, sp, lr}
    2f80:	03040200 	movweq	r0, #16896	; 0x4200
    2f84:	001f054a 	andseq	r0, pc, sl, asr #10
    2f88:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2f8c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    2f90:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2f94:	0105830c 	tsteq	r5, ip, lsl #6
    2f98:	0008022f 	andeq	r0, r8, pc, lsr #4
    2f9c:	01050101 	tsteq	r5, r1, lsl #2
    2fa0:	18020500 	stmdane	r2, {r8, sl}
    2fa4:	0301004d 	movweq	r0, #4173	; 0x104d
    2fa8:	0e050113 	mcreq	1, 0, r0, cr5, cr3, {0}
    2fac:	4b1405bb 	blmi	5046a0 <__core1_vectors-0xafb960>
    2fb0:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
    2fb4:	2c054a05 			; <UNDEFINED> instruction: 0x2c054a05
    2fb8:	03040200 	movweq	r0, #16896	; 0x4200
    2fbc:	0025052e 	eoreq	r0, r5, lr, lsr #10
    2fc0:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2fc4:	02002c05 	andeq	r2, r0, #1280	; 0x500
    2fc8:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    2fcc:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    2fd0:	1f052e03 	svcne	0x00052e03
    2fd4:	03040200 	movweq	r0, #16896	; 0x4200
    2fd8:	0005052e 	andeq	r0, r5, lr, lsr #10
    2fdc:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2fe0:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
    2fe4:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    2fe8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2fec:	02050001 	andeq	r0, r5, #1
    2ff0:	00000000 	andeq	r0, r0, r0
    2ff4:	05011b03 	streq	r1, [r1, #-2819]	; 0xfffff4fd
    2ff8:	1405bb0e 	strne	fp, [r5], #-2830	; 0xfffff4f2
    2ffc:	4b08054b 	blmi	204530 <__core1_vectors-0xdfbad0>
    3000:	02001005 	andeq	r1, r0, #5
    3004:	05820204 	streq	r0, [r2, #516]	; 0x204
    3008:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    300c:	08056603 	stmdaeq	r5, {r0, r1, r9, sl, sp, lr}
    3010:	8315054b 	tsthi	r5, #314572800	; 0x12c00000
    3014:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    3018:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    301c:	29052e03 	stmdbcs	r5, {r0, r1, r9, sl, fp, sp}
    3020:	03040200 	movweq	r0, #16896	; 0x4200
    3024:	00300566 	eorseq	r0, r0, r6, ror #10
    3028:	66030402 	strvs	r0, [r3], -r2, lsl #8
    302c:	02002d05 	andeq	r2, r0, #320	; 0x140
    3030:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    3034:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    3038:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
    303c:	01040200 	mrseq	r0, R12_usr
    3040:	a0150566 	andsge	r0, r5, r6, ror #10
    3044:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    3048:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    304c:	29052e03 	stmdbcs	r5, {r0, r1, r9, sl, fp, sp}
    3050:	03040200 	movweq	r0, #16896	; 0x4200
    3054:	00320582 	eorseq	r0, r2, r2, lsl #11
    3058:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
    305c:	02002f05 	andeq	r2, r0, #5, 30
    3060:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    3064:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    3068:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
    306c:	01040200 	mrseq	r0, R12_usr
    3070:	680c0566 	stmdavs	ip, {r1, r2, r5, r6, r8, sl}
    3074:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    3078:	01010008 	tsteq	r1, r8
    307c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3080:	00000002 	andeq	r0, r0, r2
    3084:	01290300 			; <UNDEFINED> instruction: 0x01290300
    3088:	059f0c05 	ldreq	r0, [pc, #3077]	; 3c95 <__core1_vectors-0xffc36b>
    308c:	0602f301 	streq	pc, [r2], -r1, lsl #6
    3090:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3094:	02050001 	andeq	r0, r5, #1
    3098:	01004d9c 			; <UNDEFINED> instruction: 0x01004d9c
    309c:	05012e03 	streq	r2, [r1, #-3587]	; 0xfffff1fd
    30a0:	0e058405 	cdpeq	4, 0, cr8, cr5, cr5, {0}
    30a4:	f40c054b 	vst3.16	{d0,d2,d4}, [ip], fp
    30a8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    30ac:	0101000a 	tsteq	r1, sl
    30b0:	00000048 	andeq	r0, r0, r8, asr #32
    30b4:	00330003 	eorseq	r0, r3, r3
    30b8:	01020000 	mrseq	r0, (UNDEF: 2)
    30bc:	000d0efb 	strdeq	r0, [sp], -fp
    30c0:	01010101 	tsteq	r1, r1, lsl #2
    30c4:	01000000 	mrseq	r0, (UNDEF: 0)
    30c8:	73010000 	movwvc	r0, #4096	; 0x1000
    30cc:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    30d0:	3165726f 	cmncc	r5, pc, ror #4
    30d4:	6f630000 	svcvs	0x00630000
    30d8:	5f316572 	svcpl	0x00316572
    30dc:	64697865 	strbtvs	r7, [r9], #-2149	; 0xfffff79b
    30e0:	74735f78 	ldrbtvc	r5, [r3], #-3960	; 0xfffff088
    30e4:	532e6275 			; <UNDEFINED> instruction: 0x532e6275
    30e8:	00000100 	andeq	r0, r0, r0, lsl #2
    30ec:	02050000 	andeq	r0, r5, #0
    30f0:	010000d8 	ldrdeq	r0, [r0, -r8]
    30f4:	02011503 	andeq	r1, r1, #12582912	; 0xc00000
    30f8:	01010002 	tsteq	r1, r2
    30fc:	0000004a 	andeq	r0, r0, sl, asr #32
    3100:	00300003 	eorseq	r0, r0, r3
    3104:	01020000 	mrseq	r0, (UNDEF: 2)
    3108:	000d0efb 	strdeq	r0, [sp], -fp
    310c:	01010101 	tsteq	r1, r1, lsl #2
    3110:	01000000 	mrseq	r0, (UNDEF: 0)
    3114:	73010000 	movwvc	r0, #4096	; 0x1000
    3118:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    311c:	3165726f 	cmncc	r5, pc, ror #4
    3120:	6f630000 	svcvs	0x00630000
    3124:	5f316572 	svcpl	0x00316572
    3128:	74636576 	strbtvc	r6, [r3], #-1398	; 0xfffffa8a
    312c:	2e73726f 	cdpcs	2, 7, cr7, cr3, cr15, {3}
    3130:	00010053 	andeq	r0, r1, r3, asr r0
    3134:	05000000 	streq	r0, [r0, #-0]
    3138:	00000002 	andeq	r0, r0, r2
    313c:	2f2f1601 	svccs	0x002f1601
    3140:	2f2f2f2f 	svccs	0x002f2f2f
    3144:	0002022f 	andeq	r0, r2, pc, lsr #4
    3148:	05890101 	streq	r0, [r9, #257]	; 0x101
    314c:	00030000 	andeq	r0, r3, r0
    3150:	00000129 	andeq	r0, r0, r9, lsr #2
    3154:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3158:	0101000d 	tsteq	r1, sp
    315c:	00000101 	andeq	r0, r0, r1, lsl #2
    3160:	00000100 	andeq	r0, r0, r0, lsl #2
    3164:	63727301 	cmnvs	r2, #67108864	; 0x4000000
    3168:	73752f00 	cmnvc	r5, #0, 30
    316c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3170:	63672f62 	cmnvs	r7, #392	; 0x188
    3174:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3178:	6f6e2d6d 	svcvs	0x006e2d6d
    317c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3180:	2f696261 	svccs	0x00696261
    3184:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3188:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    318c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3190:	77680065 	strbvc	r0, [r8, -r5, rrx]!
    3194:	2f62696c 	svccs	0x0062696c
    3198:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    319c:	00656475 	rsbeq	r6, r5, r5, ror r4
    31a0:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    31a4:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    31a8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    31ac:	6f732f65 	svcvs	0x00732f65
    31b0:	31615f63 	cmncc	r1, r3, ror #30
    31b4:	752f0030 	strvc	r0, [pc, #-48]!	; 318c <__core1_vectors-0xffce74>
    31b8:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    31bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    31c0:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    31c4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    31c8:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    31cc:	752f0073 	strvc	r0, [pc, #-115]!	; 3161 <__core1_vectors-0xffce9f>
    31d0:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    31d4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    31d8:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    31dc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    31e0:	61000062 	tstvs	r0, r2, rrx
    31e4:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 3024 <__core1_vectors-0xffcfdc>
    31e8:	725f6d65 	subsvc	r6, pc, #6464	; 0x1940
    31ec:	6f696765 	svcvs	0x00696765
    31f0:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    31f4:	00000100 	andeq	r0, r0, r0, lsl #2
    31f8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    31fc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3200:	00000200 	andeq	r0, r0, r0, lsl #4
    3204:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    3208:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    320c:	00000200 	andeq	r0, r0, r0, lsl #4
    3210:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    3214:	00682e62 	rsbeq	r2, r8, r2, ror #28
    3218:	61000003 	tstvs	r0, r3
    321c:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 3074 <__core1_vectors-0xffcf8c>
    3220:	682e756d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}
    3224:	00000300 	andeq	r0, r0, r0, lsl #6
    3228:	5f746c61 	svcpl	0x00746c61
    322c:	64697262 	strbtvs	r7, [r9], #-610	; 0xfffffd9e
    3230:	6d5f6567 	cfldr64vs	mvdx6, [pc, #-412]	; 309c <__core1_vectors-0xffcf64>
    3234:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
    3238:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    323c:	00000400 	andeq	r0, r0, r0, lsl #8
    3240:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3244:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3248:	00000500 	andeq	r0, r0, r0, lsl #10
    324c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    3250:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3254:	6c000005 	stcvs	0, cr0, [r0], {5}
    3258:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    325c:	00050068 	andeq	r0, r5, r8, rrx
    3260:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3264:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3268:	00000600 	andeq	r0, r0, r0, lsl #12
    326c:	5f746c61 	svcpl	0x00746c61
    3270:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    3274:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
    3278:	00000300 	andeq	r0, r0, r0, lsl #6
    327c:	001d0500 	andseq	r0, sp, r0, lsl #10
    3280:	4dec0205 	sfmmi	f0, 2, [ip, #20]!
    3284:	19030100 	stmdbne	r3, {r8}
    3288:	4a1f0501 	bmi	7c4694 <__core1_vectors-0x83b96c>
    328c:	022e0105 	eoreq	r0, lr, #1073741825	; 0x40000001
    3290:	01010008 	tsteq	r1, r8
    3294:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
    3298:	004e0802 	subeq	r0, lr, r2, lsl #16
    329c:	011a0301 	tsteq	sl, r1, lsl #6
    32a0:	054a1f05 	strbeq	r1, [sl, #-3845]	; 0xfffff0fb
    32a4:	08022e01 	stmdaeq	r2, {r0, r9, sl, fp, sp}
    32a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    32ac:	02050001 	andeq	r0, r5, #1
    32b0:	01004e24 	tsteq	r0, r4, lsr #28
    32b4:	05011f03 	streq	r1, [r1, #-3843]	; 0xfffff0fd
    32b8:	0b056905 	bleq	15d6d4 <__core1_vectors-0xea292c>
    32bc:	8305054d 	movwhi	r0, #21837	; 0x554d
    32c0:	054b4d4b 	strbeq	r4, [fp, #-3403]	; 0xfffff2b5
    32c4:	08024b01 	stmdaeq	r2, {r0, r8, r9, fp, lr}
    32c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    32cc:	02050001 	andeq	r0, r5, #1
    32d0:	01004e78 	tsteq	r0, r8, ror lr
    32d4:	05013003 	streq	r3, [r1, #-3]
    32d8:	0b056805 	bleq	15d2f4 <__core1_vectors-0xea2d0c>
    32dc:	6705054b 	strvs	r0, [r5, -fp, asr #10]
    32e0:	2e0c054b 	cfsh32cs	mvfx0, mvfx12, #43
    32e4:	0d030505 	cfstr32eq	mvfx0, [r3, #-20]	; 0xffffffec
    32e8:	4b10052e 	blmi	4047a8 <__core1_vectors-0xbfb858>
    32ec:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    32f0:	12054b19 	andne	r4, r5, #25600	; 0x6400
    32f4:	670d0567 	strvs	r0, [sp, -r7, ror #10]
    32f8:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
    32fc:	10056709 	andne	r6, r5, r9, lsl #14
    3300:	3001052e 	andcc	r0, r1, lr, lsr #10
    3304:	01000602 	tsteq	r0, r2, lsl #12
    3308:	00010501 	andeq	r0, r1, r1, lsl #10
    330c:	4f040205 	svcmi	0x00040205
    3310:	de030100 	adfles	f0, f3, f0
    3314:	11050100 	mrsne	r0, (UNDEF: 21)
    3318:	4b08059f 	blmi	20499c <__core1_vectors-0xdfb664>
    331c:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    3320:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3324:	02004d34 	andeq	r4, r0, #52, 26	; 0xd00
    3328:	66060104 	strvs	r0, [r6], -r4, lsl #2
    332c:	02040200 	andeq	r0, r4, #0, 4
    3330:	0012054a 	andseq	r0, r2, sl, asr #10
    3334:	06040402 	streq	r0, [r4], -r2, lsl #8
    3338:	0017052e 	andseq	r0, r7, lr, lsr #10
    333c:	2f040402 	svccs	0x00040402
    3340:	02001d05 	andeq	r1, r0, #320	; 0x140
    3344:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
    3348:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    334c:	0c056604 	stceq	6, cr6, [r5], {4}
    3350:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3354:	000d054a 	andeq	r0, sp, sl, asr #10
    3358:	4c040402 	cfstrsmi	mvf0, [r4], {2}
    335c:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    3360:	05660404 	strbeq	r0, [r6, #-1028]!	; 0xfffffbfc
    3364:	04020008 	streq	r0, [r2], #-8
    3368:	29054a04 	stmdbcs	r5, {r2, r9, fp, lr}
    336c:	01040200 	mrseq	r0, R12_usr
    3370:	4c15054a 	cfldr32mi	mvfx0, [r5], {74}	; 0x4a
    3374:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    3378:	0f056715 	svceq	0x00056715
    337c:	4b0c0566 	blmi	30491c <__core1_vectors-0xcfb6e4>
    3380:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    3384:	01010008 	tsteq	r1, r8
    3388:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    338c:	004fd402 	subeq	sp, pc, r2, lsl #8
    3390:	00f00301 	rscseq	r0, r0, r1, lsl #6
    3394:	83190501 	tsthi	r9, #4194304	; 0x400000
    3398:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    339c:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    33a0:	14056601 	strne	r6, [r5], #-1537	; 0xfffff9ff
    33a4:	841a054c 	ldrhi	r0, [sl], #-1356	; 0xfffffab4
    33a8:	31030c05 	tstcc	r3, r5, lsl #24
    33ac:	4b1305d6 	blmi	4c4b0c <__core1_vectors-0xb3b4f4>
    33b0:	059f0805 	ldreq	r0, [pc, #2053]	; 3bbd <__core1_vectors-0xffc443>
    33b4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    33b8:	0f056601 	svceq	0x00056601
    33bc:	4b09054c 	blmi	2448f4 <__core1_vectors-0xdbb70c>
    33c0:	3f080805 	svccc	0x00080805
    33c4:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    33c8:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    33cc:	08054c09 	stmdaeq	r5, {r0, r3, sl, fp, lr}
    33d0:	00240583 	eoreq	r0, r4, r3, lsl #11
    33d4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    33d8:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
    33dc:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    33e0:	0c056601 	stceq	6, cr6, [r5], {1}
    33e4:	00010567 	andeq	r0, r1, r7, ror #10
    33e8:	2f010402 	svccs	0x00010402
    33ec:	01000602 	tsteq	r0, r2, lsl #12
    33f0:	00010501 	andeq	r0, r1, r1, lsl #10
    33f4:	00000205 	andeq	r0, r0, r5, lsl #4
    33f8:	bb030000 	bllt	c3400 <__core1_vectors-0xf3cc00>
    33fc:	06050101 	streq	r0, [r5], -r1, lsl #2
    3400:	3267316a 	rsbcc	r3, r7, #-2147483622	; 0x8000001a
    3404:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    3408:	054b8306 	strbeq	r8, [fp, #-774]	; 0xfffffcfa
    340c:	01054d0d 	tsteq	r5, sp, lsl #26
    3410:	0008022f 	andeq	r0, r8, pc, lsr #4
    3414:	01050101 	tsteq	r5, r1, lsl #2
    3418:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    341c:	03010050 	movweq	r0, #4176	; 0x1050
    3420:	050101d2 	streq	r0, [r1, #-466]	; 0xfffffe2e
    3424:	052f6705 	streq	r6, [pc, #-1797]!	; 2d27 <__core1_vectors-0xffd2d9>
    3428:	0705300f 	streq	r3, [r5, -pc]
    342c:	840c054c 	strhi	r0, [ip], #-1356	; 0xfffffab4
    3430:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    3434:	01010006 	tsteq	r1, r6
    3438:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    343c:	00000002 	andeq	r0, r0, r2
    3440:	01e20300 	mvneq	r0, r0, lsl #6
    3444:	670e0501 	strvs	r0, [lr, -r1, lsl #10]
    3448:	4b4b0505 	blmi	12c4864 <__end__+0x2a8844>
    344c:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    3450:	06022f01 	streq	r2, [r2], -r1, lsl #30
    3454:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3458:	02050001 	andeq	r0, r5, #1
    345c:	00000000 	andeq	r0, r0, r0
    3460:	0101ea03 	tsteq	r1, r3, lsl #20
    3464:	056a0e05 	strbeq	r0, [sl, #-3589]!	; 0xfffff1fb
    3468:	314b4b05 	cmpcc	fp, r5, lsl #22
    346c:	054d1b05 	strbeq	r1, [sp, #-2821]	; 0xfffff4fb
    3470:	1b054a10 	blne	155cb8 <__core1_vectors-0xeaa348>
    3474:	4a10054b 	bmi	4049a8 <__core1_vectors-0xbfb658>
    3478:	054b1b05 	strbeq	r1, [fp, #-2821]	; 0xfffff4fb
    347c:	0e054a10 	vmoveq	s10, r4
    3480:	4b12054c 	blmi	4849b8 <__core1_vectors-0xb7b648>
    3484:	054b2005 	strbeq	r2, [fp, #-5]
    3488:	16054a2e 	strne	r4, [r5], -lr, lsr #20
    348c:	4b0d0566 	blmi	344a2c <__core1_vectors-0xcbb5d4>
    3490:	054b1005 	strbeq	r1, [fp, #-5]
    3494:	2305631f 	movwcs	r6, #21279	; 0x531f
    3498:	310d0566 	tstcc	sp, r6, ror #10
    349c:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
    34a0:	667a031b 			; <UNDEFINED> instruction: 0x667a031b
    34a4:	05671205 	strbeq	r1, [r7, #-517]!	; 0xfffffdfb
    34a8:	05053309 	streq	r3, [r5, #-777]	; 0xfffffcf7
    34ac:	2f010530 	svccs	0x00010530
    34b0:	01000602 	tsteq	r0, r2, lsl #12
    34b4:	00010501 	andeq	r0, r1, r1, lsl #10
    34b8:	00000205 	andeq	r0, r0, r5, lsl #4
    34bc:	87030000 	strhi	r0, [r3, -r0]
    34c0:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    34c4:	4b0805a0 	blmi	204b4c <__core1_vectors-0xdfb4b4>
    34c8:	67670f05 	strbvs	r0, [r7, -r5, lsl #30]!
    34cc:	67678467 	strbvs	r8, [r7, -r7, ror #8]!
    34d0:	4b680505 	blmi	1a048ec <__end__+0x9e88cc>
    34d4:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    34d8:	06022f01 	streq	r2, [r2], -r1, lsl #30
    34dc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    34e0:	02050001 	andeq	r0, r5, #1
    34e4:	00000000 	andeq	r0, r0, r0
    34e8:	01029903 	tsteq	r2, r3, lsl #18
    34ec:	059f0805 	ldreq	r0, [pc, #2053]	; 3cf9 <__core1_vectors-0xffc307>
    34f0:	052f6809 	streq	r6, [pc, #-2057]!	; 2cef <__core1_vectors-0xffd311>
    34f4:	09053012 	stmdbeq	r5, {r1, r4, ip, sp}
    34f8:	10054b4b 	andne	r4, r5, fp, asr #22
    34fc:	3009052e 	andcc	r0, r9, lr, lsr #10
    3500:	12053069 	andne	r3, r5, #105	; 0x69
    3504:	4b09052f 	blmi	2449c8 <__core1_vectors-0xdbb638>
    3508:	2e10054b 	cfmac32cs	mvfx0, mvfx0, mvfx11
    350c:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
    3510:	01054c0c 	tsteq	r5, ip, lsl #24
    3514:	0006022f 	andeq	r0, r6, pc, lsr #4
    3518:	01050101 	tsteq	r5, r1, lsl #2
    351c:	00020500 	andeq	r0, r2, r0, lsl #10
    3520:	03000000 	movweq	r0, #0
    3524:	050102b7 	streq	r0, [r1, #-695]	; 0xfffffd49
    3528:	0c056805 	stceq	8, cr6, [r5], {5}
    352c:	2f01054b 	svccs	0x0001054b
    3530:	01000802 	tsteq	r0, r2, lsl #16
    3534:	00010501 	andeq	r0, r1, r1, lsl #10
    3538:	00000205 	andeq	r0, r0, r5, lsl #4
    353c:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    3540:	12050102 	andne	r0, r5, #-2147483648	; 0x80000000
    3544:	4b0805d7 	blmi	204ca8 <__core1_vectors-0xdfb358>
    3548:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    354c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3550:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    3554:	0805ba01 	stmdaeq	r5, {r0, r9, fp, ip, sp, pc}
    3558:	0024054b 	eoreq	r0, r4, fp, asr #10
    355c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3560:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    3564:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3568:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    356c:	08059e01 	stmdaeq	r5, {r0, r9, sl, fp, ip, pc}
    3570:	0024054b 	eoreq	r0, r4, fp, asr #10
    3574:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3578:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    357c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3580:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    3584:	08059e01 	stmdaeq	r5, {r0, r9, sl, fp, ip, pc}
    3588:	0024054b 	eoreq	r0, r4, fp, asr #10
    358c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3590:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    3594:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3598:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    359c:	01059e01 	tsteq	r5, r1, lsl #28
    35a0:	0006024b 	andeq	r0, r6, fp, asr #4
    35a4:	01050101 	tsteq	r5, r1, lsl #2
    35a8:	00020500 	andeq	r0, r2, r0, lsl #10
    35ac:	03000000 	movweq	r0, #0
    35b0:	050102c7 	streq	r0, [r1, #-711]	; 0xfffffd39
    35b4:	05056712 	streq	r6, [r5, #-1810]	; 0xfffff8ee
    35b8:	4b1b054c 	blmi	6c4af0 <__core1_vectors-0x93b510>
    35bc:	05490505 	strbeq	r0, [r9, #-1285]	; 0xfffffafb
    35c0:	05052f26 	streq	r2, [r5, #-3878]	; 0xfffff0da
    35c4:	2f300549 	svccs	0x00300549
    35c8:	05490505 	strbeq	r0, [r9, #-1285]	; 0xfffffafb
    35cc:	02220801 	eoreq	r0, r2, #65536	; 0x10000
    35d0:	01010006 	tsteq	r1, r6
    35d4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    35d8:	00000002 	andeq	r0, r0, r2
    35dc:	02cf0300 	sbceq	r0, pc, #0, 6
    35e0:	68180501 	ldmdavs	r8, {r0, r8, sl}
    35e4:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    35e8:	1f054a19 	svcne	0x00054a19
    35ec:	8601052e 	strhi	r0, [r1], -lr, lsr #10
    35f0:	01000802 	tsteq	r0, r2, lsl #16
    35f4:	00010501 	andeq	r0, r1, r1, lsl #10
    35f8:	00000205 	andeq	r0, r0, r5, lsl #4
    35fc:	ef030000 	svc	0x00030000
    3600:	09050102 	stmdbeq	r5, {r1, r8}
    3604:	6608054b 	strvs	r0, [r8], -fp, asr #10
    3608:	02001805 	andeq	r1, r0, #327680	; 0x50000
    360c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3610:	31059f1b 	tstcc	r5, fp, lsl pc
    3614:	01040200 	mrseq	r0, R12_usr
    3618:	9f1b059e 	svcls	0x001b059e
    361c:	059f1005 	ldreq	r1, [pc, #5]	; 3629 <__core1_vectors-0xffc9d7>
    3620:	01054b0c 	tsteq	r5, ip, lsl #22
    3624:	0008022f 	andeq	r0, r8, pc, lsr #4
    3628:	01050101 	tsteq	r5, r1, lsl #2
    362c:	00020500 	andeq	r0, r2, r0, lsl #10
    3630:	03000000 	movweq	r0, #0
    3634:	050102f8 	streq	r0, [r1, #-760]	; 0xfffffd08
    3638:	08056819 	stmdaeq	r5, {r0, r3, r4, fp, sp, lr}
    363c:	00240567 	eoreq	r0, r4, r7, ror #10
    3640:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3644:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    3648:	24056708 	strcs	r6, [r5], #-1800	; 0xfffff8f8
    364c:	01040200 	mrseq	r0, R12_usr
    3650:	4c140566 	cfldr32mi	mvfx0, [r4], {102}	; 0x66
    3654:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
    3658:	06022f01 	streq	r2, [r2], -r1, lsl #30
    365c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3660:	02050001 	andeq	r0, r5, #1
    3664:	00000000 	andeq	r0, r0, r0
    3668:	01038603 	tsteq	r3, r3, lsl #12
    366c:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
    3670:	08054c09 	stmdaeq	r5, {r0, r3, sl, fp, lr}
    3674:	4b0d059e 	blmi	344cf4 <__core1_vectors-0xcbb30c>
    3678:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    367c:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
    3680:	18056601 	stmdane	r5, {r0, r9, sl, sp, lr}
    3684:	9f9f9f4e 	svcls	0x009f9f4e
    3688:	9f9f9f9f 	svcls	0x009f9f9f
    368c:	15059f9f 	strne	r9, [r5, #-3999]	; 0xfffff061
    3690:	16059f9f 			; <UNDEFINED> instruction: 0x16059f9f
    3694:	9f18059f 	svcls	0x0018059f
    3698:	a00c059f 	mulge	ip, pc, r5	; <UNPREDICTABLE>
    369c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    36a0:	01010006 	tsteq	r1, r6
    36a4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    36a8:	00000002 	andeq	r0, r0, r2
    36ac:	03a30300 			; <UNDEFINED> instruction: 0x03a30300
    36b0:	4b120501 	blmi	484abc <__core1_vectors-0xb7b544>
    36b4:	05831305 	streq	r1, [r3, #773]	; 0x305
    36b8:	17058314 	smladne	r5, r4, r3, r8
    36bc:	83180583 	tsthi	r8, #549453824	; 0x20c00000
    36c0:	05831705 	streq	r1, [r3, #1797]	; 0x705
    36c4:	17058318 	smladne	r5, r8, r3, r8
    36c8:	83140583 	tsthi	r4, #549453824	; 0x20c00000
    36cc:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    36d0:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    36d4:	30010100 	andcc	r0, r1, r0, lsl #2
    36d8:	03000004 	movweq	r0, #4
    36dc:	00019300 	andeq	r9, r1, r0, lsl #6
    36e0:	fb010200 	blx	43eea <__core1_vectors-0xfbc116>
    36e4:	01000d0e 	tsteq	r0, lr, lsl #26
    36e8:	00010101 	andeq	r0, r1, r1, lsl #2
    36ec:	00010000 	andeq	r0, r1, r0
    36f0:	72730100 	rsbsvc	r0, r3, #0, 2
    36f4:	752f0063 	strvc	r0, [pc, #-99]!	; 3699 <__core1_vectors-0xffc967>
    36f8:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    36fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3700:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3704:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3708:	616d2f62 	cmnvs	sp, r2, ror #30
    370c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3710:	752f0065 	strvc	r0, [pc, #-101]!	; 36b3 <__core1_vectors-0xffc94d>
    3714:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3550 <__core1_vectors-0xffcab0>
    3718:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    371c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3720:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3724:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3728:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    372c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3730:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3734:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3738:	2f006564 	svccs	0x00006564
    373c:	2f727375 	svccs	0x00727375
    3740:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3744:	2f656475 	svccs	0x00656475
    3748:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    374c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3750:	2f007379 	svccs	0x00007379
    3754:	2f727375 	svccs	0x00727375
    3758:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    375c:	2f656475 	svccs	0x00656475
    3760:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3764:	68006269 	stmdavs	r0, {r0, r3, r5, r6, r9, sp, lr}
    3768:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    376c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3770:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3774:	6c776800 	ldclvs	8, cr6, [r7], #-0
    3778:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    377c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3780:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    3784:	615f636f 	cmpvs	pc, pc, ror #6
    3788:	00003031 	andeq	r3, r0, r1, lsr r0
    378c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    3790:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    3794:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    3798:	00000100 	andeq	r0, r0, r0, lsl #2
    379c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    37a0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    37a4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    37a8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    37ac:	00000200 	andeq	r0, r0, r0, lsl #4
    37b0:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    37b4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    37b8:	00000300 	andeq	r0, r0, r0, lsl #6
    37bc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    37c0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    37c4:	00000400 	andeq	r0, r0, r0, lsl #8
    37c8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    37cc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    37d0:	00040068 	andeq	r0, r4, r8, rrx
    37d4:	69745f00 	ldmdbvs	r4!, {r8, r9, sl, fp, ip, lr}^
    37d8:	6176656d 	cmnvs	r6, sp, ror #10
    37dc:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    37e0:	5f000004 	svcpl	0x00000004
    37e4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    37e8:	63657073 	cmnvs	r5, #115	; 0x73
    37ec:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    37f0:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
    37f4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    37f8:	00040068 	andeq	r0, r4, r8, rrx
    37fc:	696e7500 	stmdbvs	lr!, {r8, sl, ip, sp, lr}^
    3800:	2e647473 	mcrcs	4, 3, r7, cr4, cr3, {3}
    3804:	00040068 	andeq	r0, r4, r8, rrx
    3808:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    380c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3810:	00000400 	andeq	r0, r0, r0, lsl #8
    3814:	6b636f6c 	blvs	18df5cc <__end__+0x8c35ac>
    3818:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    381c:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    3820:	682e656d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    3824:	00000500 	andeq	r0, r0, r0, lsl #10
    3828:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    382c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3830:	72650000 	rsbvc	r0, r5, #0
    3834:	2e6f6e72 	mcrcs	14, 3, r6, cr15, cr2, {3}
    3838:	00040068 	andeq	r0, r4, r8, rrx
    383c:	6c776800 	ldclvs	8, cr6, [r7], #-0
    3840:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    3844:	00000600 	andeq	r0, r0, r0, lsl #12
    3848:	5f746c61 	svcpl	0x00746c61
    384c:	636f6c63 	cmnvs	pc, #25344	; 0x6300
    3850:	616d5f6b 	cmnvs	sp, fp, ror #30
    3854:	6567616e 	strbvs	r6, [r7, #-366]!	; 0xfffffe92
    3858:	00682e72 	rsbeq	r2, r8, r2, ror lr
    385c:	61000007 	tstvs	r0, r7
    3860:	315f746c 	cmpcc	pc, ip, ror #8
    3864:	30353536 	eorscc	r3, r5, r6, lsr r5
    3868:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    386c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3870:	00000006 	andeq	r0, r0, r6
    3874:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3878:	00512802 	subseq	r2, r1, r2, lsl #16
    387c:	01150301 	tsteq	r5, r1, lsl #6
    3880:	05840e05 	streq	r0, [r4, #3589]	; 0xe05
    3884:	08054d0a 	stmdaeq	r5, {r1, r3, r8, sl, fp, lr}
    3888:	0025059f 	mlaeq	r5, pc, r5, r0	; <UNPREDICTABLE>
    388c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3890:	054d0a05 	strbeq	r0, [sp, #-2565]	; 0xfffff5fb
    3894:	2505d808 	strcs	sp, [r5, #-2056]	; 0xfffff7f8
    3898:	01040200 	mrseq	r0, R12_usr
    389c:	4d0a0566 	cfstr32mi	mvfx0, [sl, #-408]	; 0xfffffe68
    38a0:	059f0805 	ldreq	r0, [pc, #2053]	; 40ad <__core1_vectors-0xffbf53>
    38a4:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    38a8:	0b056601 	bleq	15d0b4 <__core1_vectors-0xea2f4c>
    38ac:	680a0552 	stmdavs	sl, {r1, r4, r6, r8, sl}
    38b0:	05830805 	streq	r0, [r3, #2053]	; 0x805
    38b4:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    38b8:	0c056601 	stceq	6, cr6, [r5], {1}
    38bc:	054a0f03 	strbeq	r0, [sl, #-3843]	; 0xfffff0fd
    38c0:	04020001 	streq	r0, [r2], #-1
    38c4:	06022f01 	streq	r2, [r2], -r1, lsl #30
    38c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    38cc:	02050026 	andeq	r0, r5, #38	; 0x26
    38d0:	00000000 	andeq	r0, r0, r0
    38d4:	0100c103 	tsteq	r0, r3, lsl #2
    38d8:	05823c05 	streq	r3, [r2, #3077]	; 0xc05
    38dc:	0105ba2f 	tsteq	r5, pc, lsr #20
    38e0:	00080266 	andeq	r0, r8, r6, ror #4
    38e4:	01050101 	tsteq	r5, r1, lsl #2
    38e8:	00020500 	andeq	r0, r2, r0, lsl #10
    38ec:	03010052 	movweq	r0, #4178	; 0x1052
    38f0:	050100c4 	streq	r0, [r1, #-196]	; 0xffffff3c
    38f4:	01059f0c 	tsteq	r5, ip, lsl #30
    38f8:	000602d7 	ldrdeq	r0, [r6], -r7
    38fc:	01050101 	tsteq	r5, r1, lsl #2
    3900:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    3904:	03010052 	movweq	r0, #4178	; 0x1052
    3908:	050100c9 	streq	r0, [r1, #-201]	; 0xffffff37
    390c:	08059f09 	stmdaeq	r5, {r0, r3, r8, r9, sl, fp, ip, pc}
    3910:	00100566 	andseq	r0, r0, r6, ror #10
    3914:	4a010402 	bmi	44924 <__core1_vectors-0xfbb6dc>
    3918:	05671e05 	strbeq	r1, [r7, #-3589]!	; 0xfffff1fb
    391c:	2905670c 	stmdbcs	r5, {r2, r3, r8, r9, sl, sp, lr}
    3920:	01040200 	mrseq	r0, R12_usr
    3924:	4c0c0566 	cfstr32mi	mvfx0, [ip], {102}	; 0x66
    3928:	02830105 	addeq	r0, r3, #1073741825	; 0x40000001
    392c:	01010006 	tsteq	r1, r6
    3930:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3934:	00000002 	andeq	r0, r0, r2
    3938:	00d20300 	sbcseq	r0, r2, r0, lsl #6
    393c:	830b0501 	movwhi	r0, #46337	; 0xb501
    3940:	052f3805 	streq	r3, [pc, #-2053]!	; 3143 <__core1_vectors-0xffcebd>
    3944:	0c05661e 	stceq	6, cr6, [r5], {30}
    3948:	00290583 	eoreq	r0, r9, r3, lsl #11
    394c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3950:	05480c05 	strbeq	r0, [r8, #-3077]	; 0xfffff3fb
    3954:	0c054a0b 			; <UNDEFINED> instruction: 0x0c054a0b
    3958:	2f01054e 	svccs	0x0001054e
    395c:	01000602 	tsteq	r0, r2, lsl #12
    3960:	00010501 	andeq	r0, r1, r1, lsl #10
    3964:	52ac0205 	adcpl	r0, ip, #1342177280	; 0x50000000
    3968:	db030100 	blle	c3d70 <__core1_vectors-0xf3c290>
    396c:	0e050100 	adfeqs	f0, f5, f0
    3970:	4a050583 	bmi	144f84 <__core1_vectors-0xebb07c>
    3974:	052f2205 	streq	r2, [pc, #-517]!	; 3777 <__core1_vectors-0xffc889>
    3978:	13056612 	movwne	r6, #22034	; 0x5612
    397c:	002d054b 	eoreq	r0, sp, fp, asr #10
    3980:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3984:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    3988:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    398c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    3990:	13056602 	movwne	r6, #22018	; 0x5602
    3994:	02040200 	andeq	r0, r4, #0, 4
    3998:	000e054a 	andeq	r0, lr, sl, asr #10
    399c:	4a040402 	bmi	1049ac <__core1_vectors-0xefb654>
    39a0:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
    39a4:	052f0404 	streq	r0, [pc, #-1028]!	; 35a8 <__core1_vectors-0xffca58>
    39a8:	0402000c 	streq	r0, [r2], #-12
    39ac:	29058304 	stmdbcs	r5, {r2, r8, r9, pc}
    39b0:	01040200 	mrseq	r0, R12_usr
    39b4:	002c0566 	eoreq	r0, ip, r6, ror #10
    39b8:	46020402 	strmi	r0, [r2], -r2, lsl #8
    39bc:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    39c0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    39c4:	01056c0c 	tsteq	r5, ip, lsl #24
    39c8:	0006022f 	andeq	r0, r6, pc, lsr #4
    39cc:	01050101 	tsteq	r5, r1, lsl #2
    39d0:	00020500 	andeq	r0, r2, r0, lsl #10
    39d4:	03000000 	movweq	r0, #0
    39d8:	050100e8 	streq	r0, [r1, #-232]	; 0xffffff18
    39dc:	1d05bb08 	vstrne	d11, [r5, #-32]	; 0xffffffe0
    39e0:	01040200 	mrseq	r0, R12_usr
    39e4:	67150566 	ldrvs	r0, [r5, -r6, ror #10]
    39e8:	054b1005 	strbeq	r1, [fp, #-5]
    39ec:	19054c0f 	stmdbne	r5, {r0, r1, r2, r3, sl, fp, lr}
    39f0:	6617052f 	ldrvs	r0, [r7], -pc, lsr #10
    39f4:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    39f8:	10052f11 	andne	r2, r5, r1, lsl pc
    39fc:	001e0566 	andseq	r0, lr, r6, ror #10
    3a00:	4a010402 	bmi	44a10 <__core1_vectors-0xfbb5f0>
    3a04:	02001805 	andeq	r1, r0, #327680	; 0x50000
    3a08:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    3a0c:	14054b15 	strne	r4, [r5], #-2837	; 0xfffff4eb
    3a10:	4b1505d6 	blmi	545170 <__core1_vectors-0xabae90>
    3a14:	054a1b05 	strbeq	r1, [sl, #-2821]	; 0xfffff4fb
    3a18:	11054a29 	tstne	r5, r9, lsr #20
    3a1c:	d610054d 	ldrle	r0, [r0], -sp, asr #10
    3a20:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
    3a24:	25054a17 	strcs	r4, [r5, #-2583]	; 0xfffff5e9
    3a28:	4c0d054a 	cfstr32mi	mvfx0, [sp], {74}	; 0x4a
    3a2c:	76030f05 	strvc	r0, [r3], -r5, lsl #30
    3a30:	03100566 	tsteq	r0, #427819008	; 0x19800000
    3a34:	0505660c 	streq	r6, [r5, #-1548]	; 0xfffff9f4
    3a38:	4a0b054c 	bmi	2c4f70 <__core1_vectors-0xd3b090>
    3a3c:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    3a40:	06022f01 	streq	r2, [r2], -r1, lsl #30
    3a44:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3a48:	02050001 	andeq	r0, r5, #1
    3a4c:	00000000 	andeq	r0, r0, r0
    3a50:	01018003 	tsteq	r1, r3
    3a54:	05bb0805 	ldreq	r0, [fp, #2053]!	; 0x805
    3a58:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    3a5c:	0f056601 	svceq	0x00056601
    3a60:	4b100567 	blmi	405004 <__core1_vectors-0xbfaffc>
    3a64:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    3a68:	10052f11 	andne	r2, r5, r1, lsl pc
    3a6c:	4b1105ba 	blmi	44515c <__core1_vectors-0xbbaea4>
    3a70:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    3a74:	1005640f 	andne	r6, r5, pc, lsl #8
    3a78:	4c050588 	cfstr32mi	mvfx0, [r5], {136}	; 0x88
    3a7c:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    3a80:	01054b0c 	tsteq	r5, ip, lsl #22
    3a84:	0006022f 	andeq	r0, r6, pc, lsr #4
    3a88:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
    3a8c:	00020500 	andeq	r0, r2, r0, lsl #10
    3a90:	03000000 	movweq	r0, #0
    3a94:	05010192 	streq	r0, [r1, #-402]	; 0xfffffe6e
    3a98:	01058227 	tsteq	r5, r7, lsr #4
    3a9c:	0008022e 	andeq	r0, r8, lr, lsr #4
    3aa0:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    3aa4:	00020500 	andeq	r0, r2, r0, lsl #10
    3aa8:	03000000 	movweq	r0, #0
    3aac:	05010193 	streq	r0, [r1, #-403]	; 0xfffffe6d
    3ab0:	4f059e3d 	svcmi	0x00059e3d
    3ab4:	2e1b0566 	cfmsc32cs	mvfx0, mvfx11, mvfx6
    3ab8:	01000802 	tsteq	r0, r2, lsl #16
    3abc:	00150501 	andseq	r0, r5, r1, lsl #10
    3ac0:	00000205 	andeq	r0, r0, r5, lsl #4
    3ac4:	94030000 	strls	r0, [r3], #-0
    3ac8:	49050101 	stmdbmi	r5, {r0, r8}
    3acc:	00320582 	eorseq	r0, r2, r2, lsl #11
    3ad0:	66020402 	strvs	r0, [r2], -r2, lsl #8
    3ad4:	02004905 	andeq	r4, r0, #81920	; 0x14000
    3ad8:	00660404 	rsbeq	r0, r6, r4, lsl #8
    3adc:	06050402 	streq	r0, [r5], -r2, lsl #8
    3ae0:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    3ae4:	01054a06 	tsteq	r5, r6, lsl #20
    3ae8:	09040200 	stmdbeq	r4, {r9}
    3aec:	08022e06 	stmdaeq	r2, {r1, r2, r9, sl, fp, sp}
    3af0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3af4:	0205002d 	andeq	r0, r5, #45	; 0x2d
    3af8:	00000000 	andeq	r0, r0, r0
    3afc:	01019503 	tsteq	r1, r3, lsl #10
    3b00:	05ba5905 	ldreq	r5, [sl, #2309]!	; 0x905
    3b04:	08022e01 	stmdaeq	r2, {r0, r9, sl, fp, sp}
    3b08:	70010100 	andvc	r0, r1, r0, lsl #2
    3b0c:	03000000 	movweq	r0, #0
    3b10:	00003d00 	andeq	r3, r0, r0, lsl #26
    3b14:	fb010200 	blx	4431e <__core1_vectors-0xfbbce2>
    3b18:	01000d0e 	tsteq	r0, lr, lsl #26
    3b1c:	00010101 	andeq	r0, r1, r1, lsl #2
    3b20:	00010000 	andeq	r0, r1, r0
    3b24:	2e2e0100 	sufcse	f0, f6, f0
    3b28:	2f2e2e2f 	svccs	0x002e2e2f
    3b2c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 3a7c <__core1_vectors-0xffc584>
    3b30:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3b34:	6f632f63 	svcvs	0x00632f63
    3b38:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3b3c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3b40:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    3b44:	75663162 	strbvc	r3, [r6, #-354]!	; 0xfffffe9e
    3b48:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
    3b4c:	00010053 	andeq	r0, r1, r3, asr r0
    3b50:	05000000 	streq	r0, [r0, #-0]
    3b54:	00535c02 	subseq	r5, r3, r2, lsl #24
    3b58:	08ca0301 	stmiaeq	sl, {r0, r8, r9}^
    3b5c:	2f2f3001 	svccs	0x002f3001
    3b60:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    3b64:	2f143e02 	svccs	0x00143e02
    3b68:	302f2f31 	eorcc	r2, pc, r1, lsr pc	; <UNPREDICTABLE>
    3b6c:	322f9208 	eorcc	r9, pc, #8, 4	; 0x80000000
    3b70:	2f661f03 	svccs	0x00661f03
    3b74:	2f2f2f2f 	svccs	0x002f2f2f
    3b78:	02022f2f 	andeq	r2, r2, #47, 30	; 0xbc
    3b7c:	53010100 	movwpl	r0, #4352	; 0x1100
    3b80:	03000000 	movweq	r0, #0
    3b84:	00003d00 	andeq	r3, r0, r0, lsl #26
    3b88:	fb010200 	blx	44392 <__core1_vectors-0xfbbc6e>
    3b8c:	01000d0e 	tsteq	r0, lr, lsl #26
    3b90:	00010101 	andeq	r0, r1, r1, lsl #2
    3b94:	00010000 	andeq	r0, r1, r0
    3b98:	2e2e0100 	sufcse	f0, f6, f0
    3b9c:	2f2e2e2f 	svccs	0x002e2e2f
    3ba0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 3af0 <__core1_vectors-0xffc510>
    3ba4:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3ba8:	6f632f63 	svcvs	0x00632f63
    3bac:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3bb0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3bb4:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    3bb8:	75663162 	strbvc	r3, [r6, #-354]!	; 0xfffffe9e
    3bbc:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
    3bc0:	00010053 	andeq	r0, r1, r3, asr r0
    3bc4:	05000000 	streq	r0, [r0, #-0]
    3bc8:	00547002 	subseq	r7, r4, r2
    3bcc:	0bb40301 	bleq	fed047d8 <__shm_end__+0xbed047d8>
    3bd0:	00020201 	andeq	r0, r2, r1, lsl #4
    3bd4:	00530101 	subseq	r0, r3, r1, lsl #2
    3bd8:	00030000 	andeq	r0, r3, r0
    3bdc:	00000039 	andeq	r0, r0, r9, lsr r0
    3be0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3be4:	0101000d 	tsteq	r1, sp
    3be8:	00000101 	andeq	r0, r0, r1, lsl #2
    3bec:	00000100 	andeq	r0, r0, r0, lsl #2
    3bf0:	2f2e2e01 	svccs	0x002e2e01
    3bf4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3bf8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    3bfc:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    3c00:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    3c04:	2f676966 	svccs	0x00676966
    3c08:	006d7261 	rsbeq	r7, sp, r1, ror #4
    3c0c:	61706200 	cmnvs	r0, r0, lsl #4
    3c10:	532e6962 			; <UNDEFINED> instruction: 0x532e6962
    3c14:	00000100 	andeq	r0, r0, r0, lsl #2
    3c18:	02050000 	andeq	r0, r5, #0
    3c1c:	01005474 	tsteq	r0, r4, ror r4
    3c20:	0101fd03 	tsteq	r1, r3, lsl #26	; <UNPREDICTABLE>
    3c24:	672f4cf4 			; <UNDEFINED> instruction: 0x672f4cf4
    3c28:	01000202 	tsteq	r0, r2, lsl #4
    3c2c:	0001e901 	andeq	lr, r1, r1, lsl #18
    3c30:	ca000300 	bgt	4838 <__core1_vectors-0xffb7c8>
    3c34:	02000000 	andeq	r0, r0, #0
    3c38:	0d0efb01 	vstreq	d15, [lr, #-4]
    3c3c:	01010100 	mrseq	r0, (UNDEF: 17)
    3c40:	00000001 	andeq	r0, r0, r1
    3c44:	01000001 	tsteq	r0, r1
    3c48:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3c4c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3c50:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3c54:	00636367 	rsbeq	r6, r3, r7, ror #6
    3c58:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3c5c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3c60:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3c64:	2f636367 	svccs	0x00636367
    3c68:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    3c6c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3c70:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    3c74:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3c78:	672f2e2f 	strvs	r2, [pc, -pc, lsr #28]!
    3c7c:	2e006363 	cdpcs	3, 0, cr6, cr0, cr3, {3}
    3c80:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3c84:	2f2e2e2f 	svccs	0x002e2e2f
    3c88:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    3c8c:	2e2f6363 	cdpcs	3, 2, cr6, cr15, cr3, {3}
    3c90:	63672f2e 	cmnvs	r7, #46, 30	; 0xb8
    3c94:	6f632f63 	svcvs	0x00632f63
    3c98:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3c9c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3ca0:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    3ca4:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    3ca8:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    3cac:	68000001 	stmdavs	r0, {r0}
    3cb0:	74687361 	strbtvc	r7, [r8], #-865	; 0xfffffc9f
    3cb4:	682e6261 	stmdavs	lr!, {r0, r5, r6, r9, sp, lr}
    3cb8:	00000200 	andeq	r0, r0, r0, lsl #4
    3cbc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3cc0:	2e617369 	cdpcs	3, 6, cr7, cr1, cr9, {3}
    3cc4:	00030068 	andeq	r0, r3, r8, rrx
    3cc8:	6d726100 	ldfvse	f6, [r2, #-0]
    3ccc:	7570632d 	ldrbvc	r6, [r0, #-813]!	; 0xfffffcd3
    3cd0:	0300682e 	movweq	r6, #2094	; 0x82e
    3cd4:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    3cd8:	632d6e73 			; <UNDEFINED> instruction: 0x632d6e73
    3cdc:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    3ce0:	73746e61 	cmnvc	r4, #1552	; 0x610
    3ce4:	0300682e 	movweq	r6, #2094	; 0x82e
    3ce8:	72610000 	rsbvc	r0, r1, #0
    3cec:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    3cf0:	6c000004 	stcvs	0, cr0, [r0], {4}
    3cf4:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3cf8:	682e3263 	stmdavs	lr!, {r0, r1, r5, r6, r9, ip, sp}
    3cfc:	00000100 	andeq	r0, r0, r0, lsl #2
    3d00:	00010500 	andeq	r0, r1, r0, lsl #10
    3d04:	54b00205 	ldrtpl	r0, [r0], #517	; 0x205
    3d08:	b3030100 	movwlt	r0, #12544	; 0x3100
    3d0c:	03050107 	movweq	r0, #20743	; 0x5107
    3d10:	06060513 			; <UNDEFINED> instruction: 0x06060513
    3d14:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    3d18:	4a740301 	bmi	1d04924 <__end__+0xce8904>
    3d1c:	2f0b052e 	svccs	0x000b052e
    3d20:	052d0105 	streq	r0, [sp, #-261]!	; 0xfffffefb
    3d24:	03300603 	teqeq	r0, #3145728	; 0x300000
    3d28:	0105010a 	tsteq	r5, sl, lsl #2
    3d2c:	01740306 	cmneq	r4, r6, lsl #6
    3d30:	052f0b05 	streq	r0, [pc, #-2821]!	; 3233 <__core1_vectors-0xffcdcd>
    3d34:	2e0b0306 	cdpcs	3, 0, cr0, cr11, cr6, {0}
    3d38:	30060705 	andcc	r0, r6, r5, lsl #14
    3d3c:	01060d05 	tsteq	r6, r5, lsl #26
    3d40:	07052d9f 			; <UNDEFINED> instruction: 0x07052d9f
    3d44:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    3d48:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    3d4c:	05300607 	ldreq	r0, [r0, #-1543]!	; 0xfffff9f9
    3d50:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3d54:	052f0607 	streq	r0, [pc, #-1543]!	; 3755 <__core1_vectors-0xffc8ab>
    3d58:	2e010609 	cfmadd32cs	mvax0, mvfx0, mvfx1, mvfx9
    3d5c:	05890a05 	streq	r0, [r9, #2565]	; 0xa05
    3d60:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
    3d64:	35060705 	strcc	r0, [r6, #-1797]	; 0xfffff8fb
    3d68:	01060a05 	tsteq	r6, r5, lsl #20
    3d6c:	68030b05 	stmdavs	r3, {r0, r2, r8, r9, fp}
    3d70:	0a052e2e 	beq	14f630 <__core1_vectors-0xeb09d0>
    3d74:	052e1803 	streq	r1, [lr, #-2051]!	; 0xfffff7fd
    3d78:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3d7c:	2d130606 	ldccs	6, cr0, [r3, #-24]	; 0xffffffe8
    3d80:	0405492f 	streq	r4, [r5], #-2351	; 0xfffff6d1
    3d84:	06052f06 	streq	r2, [r5], -r6, lsl #30
    3d88:	07050106 	streq	r0, [r5, -r6, lsl #2]
    3d8c:	0a053106 	beq	1501ac <__core1_vectors-0xeafe54>
    3d90:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3d94:	06054c06 	streq	r4, [r5], -r6, lsl #24
    3d98:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3d9c:	01068606 	tsteq	r6, r6, lsl #12
    3da0:	05320b05 	ldreq	r0, [r2, #-2821]!	; 0xfffff4fb
    3da4:	05054a10 	streq	r4, [r5, #-2576]	; 0xfffff5f0
    3da8:	08052e4a 	stmdaeq	r5, {r1, r3, r6, r9, sl, fp, sp}
    3dac:	0e053106 	adfeqs	f3, f5, f6
    3db0:	06060513 			; <UNDEFINED> instruction: 0x06060513
    3db4:	04052e01 	streq	r2, [r5], #-3585	; 0xfffff1ff
    3db8:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    3dbc:	05140805 	ldreq	r0, [r4, #-2053]	; 0xfffff7fb
    3dc0:	05141303 	ldreq	r1, [r4, #-771]	; 0xfffffcfd
    3dc4:	050f060b 	streq	r0, [pc, #-1547]	; 37c1 <__core1_vectors-0xffc83f>
    3dc8:	052e6905 	streq	r6, [lr, #-2309]!	; 0xfffff6fb
    3dcc:	052f0608 	streq	r0, [pc, #-1544]!	; 37cc <__core1_vectors-0xffc834>
    3dd0:	0605130e 	streq	r1, [r5], -lr, lsl #6
    3dd4:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    3dd8:	05320604 	ldreq	r0, [r2, #-1540]!	; 0xfffff9fc
    3ddc:	65130606 	ldrvs	r0, [r3, #-1542]	; 0xfffff9fa
    3de0:	052d2e2f 	streq	r2, [sp, #-3631]!	; 0xfffff1d1
    3de4:	052f0604 	streq	r0, [pc, #-1540]!	; 37e8 <__core1_vectors-0xffc818>
    3de8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3dec:	052f0604 	streq	r0, [pc, #-1540]!	; 37f0 <__core1_vectors-0xffc810>
    3df0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    3df4:	0f056606 	svceq	0x00056606
    3df8:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
    3dfc:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    3e00:	01060605 	tsteq	r6, r5, lsl #12
    3e04:	2f060505 	svccs	0x00060505
    3e08:	01060905 	tsteq	r6, r5, lsl #18
    3e0c:	2f060305 	svccs	0x00060305
    3e10:	13060105 	movwne	r0, #24837	; 0x6105
    3e14:	0002022e 	andeq	r0, r2, lr, lsr #4
    3e18:	005d0101 	subseq	r0, sp, r1, lsl #2
    3e1c:	00030000 	andeq	r0, r3, r0
    3e20:	0000003d 	andeq	r0, r0, sp, lsr r0
    3e24:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3e28:	0101000d 	tsteq	r1, sp
    3e2c:	00000101 	andeq	r0, r0, r1, lsl #2
    3e30:	00000100 	andeq	r0, r0, r0, lsl #2
    3e34:	2f2e2e01 	svccs	0x002e2e01
    3e38:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3e3c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    3e40:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    3e44:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    3e48:	2f676966 	svccs	0x00676966
    3e4c:	006d7261 	rsbeq	r7, sp, r1, ror #4
    3e50:	62696c00 	rsbvs	r6, r9, #0, 24
    3e54:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
    3e58:	532e7363 			; <UNDEFINED> instruction: 0x532e7363
    3e5c:	00000100 	andeq	r0, r0, r0, lsl #2
    3e60:	02050000 	andeq	r0, r5, #0
    3e64:	010055e0 	smlatteq	r0, r0, r5, r5
    3e68:	010de103 	tsteq	sp, r3, lsl #2
    3e6c:	09032f30 	stmdbeq	r3, {r4, r5, r8, r9, sl, fp, sp}
    3e70:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
    3e74:	0402342f 	streq	r3, [r2], #-1071	; 0xfffffbd1
    3e78:	60010100 	andvs	r0, r1, r0, lsl #2
    3e7c:	03000000 	movweq	r0, #0
    3e80:	00003d00 	andeq	r3, r0, r0, lsl #26
    3e84:	fb010200 	blx	4468e <__core1_vectors-0xfbb972>
    3e88:	01000d0e 	tsteq	r0, lr, lsl #26
    3e8c:	00010101 	andeq	r0, r1, r1, lsl #2
    3e90:	00010000 	andeq	r0, r1, r0
    3e94:	2e2e0100 	sufcse	f0, f6, f0
    3e98:	2f2e2e2f 	svccs	0x002e2e2f
    3e9c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 3dec <__core1_vectors-0xffc214>
    3ea0:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3ea4:	6f632f63 	svcvs	0x00632f63
    3ea8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3eac:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3eb0:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    3eb4:	75663162 	strbvc	r3, [r6, #-354]!	; 0xfffffe9e
    3eb8:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
    3ebc:	00010053 	andeq	r0, r1, r3, asr r0
    3ec0:	05000000 	streq	r0, [r0, #-0]
    3ec4:	00560802 	subseq	r0, r6, r2, lsl #16
    3ec8:	0dc00301 	stcleq	3, cr0, [r0, #4]
    3ecc:	2f302f01 	svccs	0x00302f01
    3ed0:	2f2f302f 	svccs	0x002f302f
    3ed4:	2f2f2f30 	svccs	0x002f2f30
    3ed8:	0a022f2f 	beq	8fb9c <__core1_vectors-0xf70464>
    3edc:	Address 0x0000000000003edc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
{
       0:	6f6c5f5f 	svcvs	0x006c5f5f
       4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
       8:	5f00745f 	svcpl	0x0000745f
       c:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	5f006575 	svcpl	0x00006575
      14:	0066735f 	rsbeq	r7, r6, pc, asr r3
    ALT_PRINTF("\n");
      18:	65726670 	ldrbvs	r6, [r2, #-1648]!	; 0xfffff990
      1c:	6f6e0071 	svcvs	0x006e0071
      20:	76696463 	strbtvc	r6, [r9], -r3, ror #8
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	6d346c5f 	ldcvs	12, cr6, [r4, #-380]!	; 0xfffffe84
      28:	6b6c6370 	blvs	1b18df0 <__end__+0xafcdd0>
      2c:	73615f00 	cmnvc	r1, #0, 30
      30:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
      34:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
      38:	4e470066 	cdpmi	0, 4, cr0, cr7, cr6, {3}
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	31432055 	qdaddcc	r2, r5, r3
      40:	2e392037 	mrccs	0, 1, r2, cr9, cr7, {1}
      44:	20312e32 	eorscs	r2, r1, r2, lsr lr
      48:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
      50:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
      54:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
      58:	5b202965 	blpl	80a5f4 <__core1_vectors-0x7f5a0c>
      5c:	2f4d5241 	svccs	0x004d5241
      60:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      64:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
      68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
      6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
}
      70:	6f697369 	svcvs	0x00697369
      74:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
      78:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
      80:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
      84:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
      88:	612d7865 			; <UNDEFINED> instruction: 0x612d7865
      8c:	6d2d2039 	stcvs	0, cr2, [sp, #-228]!	; 0xffffff1c
      90:	616f6c66 	cmnvs	pc, r6, ror #24
      *(pmem->toptr)=0;
      94:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
      98:	6f733d69 	svcvs	0x00733d69
      9c:	70667466 	rsbvc	r7, r6, r6, ror #8
      a0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
}
      a4:	6e3d7570 	mrcvs	5, 1, r7, cr13, cr0, {3}
      a8:	206e6f65 	rsbcs	r6, lr, r5, ror #30
      ac:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      b0:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      b8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
        break;
      bc:	612d3776 			; <UNDEFINED> instruction: 0x612d3776
    return ALT_E_SUCCESS;
      c0:	2b706d2b 	blcs	1c1b574 <__end__+0xbff554>
      c4:	2b636573 	blcs	18d9698 <__end__+0x8bd678>
        return ALT_E_ERROR;
      c8:	646d6973 	strbtvs	r6, [sp], #-2419	; 0xfffff68d
}
      cc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      d0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
      d4:	6164662d 	cmnvs	r4, sp, lsr #12
      d8:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
      e0:	20736e6f 	rsbscs	r6, r3, pc, ror #28
      e4:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
      e8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
      ec:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
      f0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    return dst;
      f4:	20736e6f 	rsbscs	r6, r3, pc, ror #28
}
      f8:	7266662d 	rsbvc	r6, r6, #47185920	; 0x2d00000
      fc:	74736565 	ldrbtvc	r6, [r3], #-1381	; 0xfffffa9b
     100:	69646e61 	stmdbvs	r4!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     104:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
        return (int)cnt;
     108:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; ffffff78 <__shm_end__+0xbfffff78>
     10c:	00656970 	rsbeq	r6, r5, r0, ror r9
    errno = ENOSYS;
     110:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
     114:	006e656c 	rsbeq	r6, lr, ip, ror #10
     118:	5f544c41 	svcpl	0x00544c41
     11c:	5f4b4c43 	svcpl	0x004b4c43
    return -1;
     120:	5f55504d 	svcpl	0x0055504d
}
     124:	525f324c 	subspl	r3, pc, #76, 4	; 0xc0000004
     128:	63004d41 	movwvs	r4, #3393	; 0xd41
     12c:	3672746e 	ldrbtcc	r7, [r2], -lr, ror #8
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     130:	5f6b6c63 	svcpl	0x006b6c63
     134:	00637273 	rsbeq	r7, r3, r3, ror r2
     138:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	00646573 	rsbeq	r6, r4, r3, ror r5
     140:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     144:	63775f00 	cmnvs	r7, #0, 30
     148:	6f747273 	svcvs	0x00747273
     14c:	5f73626d 	svcpl	0x0073626d
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     154:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
     158:	00667562 	rsbeq	r7, r6, r2, ror #10
     15c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     160:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
     168:	625f6134 	subsvs	r6, pc, #52, 2
     16c:	63006675 	movwvs	r6, #1653	; 0x675
     170:	3572746e 	ldrbcc	r7, [r2, #-1134]!	; 0xfffffb92
     174:	5f6b6c63 	svcpl	0x006b6c63
    return ALT_E_SUCCESS;
     178:	00746e63 	rsbseq	r6, r4, r3, ror #28
}
     17c:	63616d65 	cmnvs	r1, #6464	; 0x1940
     180:	5f6c7463 	svcpl	0x006c7463
     184:	63616d65 	cmnvs	r1, #6464	; 0x1940
    while (coalesce->size)
     188:	6c657331 	stclvs	3, cr7, [r5], #-196	; 0xffffff3c
     18c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
            break;
     190:	6b6c635f 	blvs	1b18f14 <__end__+0xafcef4>
    *segpa   = thissegpa;
     194:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     198:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     19c:	32665f74 	rsbcc	r5, r6, #116, 30	; 0x1d0
    *segsize = thissegsize;
     1a0:	72665f73 	rsbvc	r5, r6, #460	; 0x1cc
     1a4:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
     1a8:	5f006b6c 	svcpl	0x00006b6c
    return ALT_E_SUCCESS;
     1ac:	6b636f6c 	blvs	18dbf64 <__end__+0x8bff44>
}
     1b0:	75706d00 	ldrbvc	r6, [r0, #-3328]!	; 0xfffff300
     1b4:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     1b8:	61746164 	cmnvs	r4, r4, ror #2
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	5f003233 	svcpl	0x00003233
     1c0:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
     1c4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     1c8:	6b6c635f 	blvs	1b18f4c <__end__+0xafcf2c>
     1cc:	5f72676d 	svcpl	0x0072676d
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     1d4:	6e006769 	cdpvs	7, 0, cr6, cr0, cr9, {3}
     1d8:	6964636f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     1dc:	346c5f76 	strbtcc	r5, [ip], #-3958	; 0xfffff08a
     1e0:	6c637073 	stclvs	0, cr7, [r3], #-460	; 0xfffffe34
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	6c61006b 	stclvs	0, cr0, [r1], #-428	; 0xfffffe54
     1e8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     1ec:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
     1f0:	5f6b636f 	svcpl	0x006b636f
     1f4:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     1f8:	6300656c 	movwvs	r6, #1388	; 0x56c
     1fc:	3472746e 	ldrbtcc	r7, [r2], #-1134	; 0xfffffb92
     200:	5f6b6c63 	svcpl	0x006b6c63
     204:	00746e63 	rsbseq	r6, r4, r3, ror #28
     208:	5f746c61 	svcpl	0x00746c61
     20c:	5f6b6c63 	svcpl	0x006b6c63
     210:	71657266 	cmnvc	r5, r6, ror #4
        clkStep += clk100;
     214:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     218:	5f346c5f 	svcpl	0x00346c5f
     21c:	6e69616d 	powvsez	f6, f1, #5.0
     220:	6b6c6300 	blvs	1b18e28 <__end__+0xafce08>
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     228:	666f5f71 	uqsub16vs	r5, pc, r1	; <UNPREDICTABLE>
     22c:	5f62635f 	svcpl	0x0062635f
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	6f746e69 	svcvs	0x00746e69
     234:	6c5f6373 	mrrcvs	3, 7, r6, pc, cr3	; <UNPREDICTABLE>
     238:	5f5f0073 	svcpl	0x005f0073
     23c:	00686377 	rsbeq	r6, r8, r7, ror r3
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	434f4c43 	movtmi	r4, #64579	; 0xfc43
     244:	414d5f4b 	cmpmi	sp, fp, asr #30
     248:	4547414e 	strbmi	r4, [r7, #-334]	; 0xfffffeb2
     24c:	45505f52 	ldrbmi	r5, [r0, #-3922]	; 0xfffff0ae
     250:	4c505f52 	mrrcmi	15, 5, r5, r0, cr2
     254:	4f435f4c 	svcmi	0x00435f4c
     258:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
     260:	5f00656c 	svcpl	0x0000656c
     264:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; fffff3fd <__shm_end__+0xbffff3fd>
     268:	5f746978 	svcpl	0x00746978
     26c:	73677261 	cmnvc	r7, #268435462	; 0x10000006
     270:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     274:	4b4c435f 	blmi	1310ff8 <__end__+0x2f4fd8>
     278:	5f344c5f 	svcpl	0x00344c5f
     27c:	4100504d 	tstmi	r0, sp, asr #32
     280:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     284:	435f4b4c 	cmpmi	pc, #76, 22	; 0x13000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	49545f53 	ldmdbmi	r4, {r0, r1, r4, r6, r8, r9, sl, fp, ip, lr}^
     28c:	0052454d 	subseq	r4, r2, sp, asr #10
     290:	5f544c41 	svcpl	0x00544c41
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	5f4b4c43 	svcpl	0x004b4c43
     298:	415f5343 	cmpmi	pc, r3, asr #6
     29c:	65730054 	ldrbvs	r0, [r3, #-84]!	; 0xffffffac
     2a0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	73616d5f 	cmnvc	r1, #6080	; 0x17c0
     2a8:	6c61006b 	stclvs	0, cr0, [r1], #-428	; 0xfffffe54
     2ac:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     2b0:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
     2b4:	5f6b636f 	svcpl	0x006b636f
     2b8:	61736964 	cmnvs	r3, r4, ror #18
     2bc:	5f656c62 	svcpl	0x00656c62
     2c0:	706c6568 	rsbvc	r6, ip, r8, ror #10
     2c4:	61007265 	tstvs	r0, r5, ror #4
     2c8:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     2cc:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	6b636f6c 	blvs	18dc088 <__end__+0x8c0068>
     2d4:	616e655f 	cmnvs	lr, pc, asr r5
     2d8:	5f656c62 	svcpl	0x00656c62
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	706c6568 	rsbvc	r6, ip, r8, ror #10
     2e0:	5f007265 	svcpl	0x00007265
     2e4:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
     2e8:	735f6e65 	cmpvc	pc, #1616	; 0x650
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     2f0:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     2f4:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
     2f8:	43006b5f 	movwmi	r6, #2911	; 0xb5f
     2fc:	4b434f4c 	blmi	10d4034 <__end__+0xb8014>
     300:	4e414d5f 	mcrmi	13, 2, r4, cr1, cr15, {2}
     304:	52454741 	subpl	r4, r5, #17039360	; 0x1040000
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
     30c:	00474946 	subeq	r4, r7, r6, asr #18
     310:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     314:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
     318:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
     31c:	41006675 	tstmi	r0, r5, ror r6
     320:	475f544c 	ldrbmi	r5, [pc, -ip, asr #8]
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
     328:	475f5550 			; <UNDEFINED> instruction: 0x475f5550
     32c:	41424f4c 	cmpmi	r2, ip, asr #30
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	4d545f4c 	ldclmi	15, cr5, [r4, #-304]	; 0xfffffed0
     334:	4c410052 	mcrrmi	0, 5, r0, r1, cr2
     338:	50475f54 	subpl	r5, r7, r4, asr pc
     33c:	50535f54 	subspl	r5, r3, r4, asr pc
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	524d545f 	subpl	r5, sp, #1593835520	; 0x5f000000
     344:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
     348:	50475f54 	subpl	r5, r7, r4, asr pc
     34c:	50535f54 	subspl	r5, r3, r4, asr pc
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	524d545f 	subpl	r5, sp, #1593835520	; 0x5f000000
     354:	6c700031 	ldclvs	0, cr0, [r0], #-196	; 0xffffff3c
     358:	68735f6c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     35c:	00746669 	rsbseq	r6, r4, r9, ror #12
     360:	5f544c41 	svcpl	0x00544c41
     364:	5f4b4c43 	svcpl	0x004b4c43
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	4e4b4e55 	mcrmi	14, 2, r4, cr11, cr5, {2}
     36c:	004e574f 	subeq	r5, lr, pc, asr #14
     370:	5f544c41 	svcpl	0x00544c41
     374:	5f4b4c43 	svcpl	0x004b4c43
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	43414d45 	movtmi	r4, #7493	; 0x1d45
     37c:	5054505f 	subspl	r5, r4, pc, asr r0
     380:	6f637600 	svcvs	0x00637600
     384:	65645f31 	strbvs	r5, [r4, #-3889]!	; 0xfffff0cf
     388:	006d6f6e 	rsbeq	r6, sp, lr, ror #30
     38c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
     394:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     398:	6b6c635f 	blvs	1b1911c <__end__+0xafd0fc>
     39c:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     3a0:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	32735f74 	rsbscc	r5, r3, #116, 30	; 0x1d0
     3a8:	73755f66 	cmnvc	r5, #408	; 0x198
     3ac:	00317265 	eorseq	r7, r1, r5, ror #4
     3b0:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     3b4:	6b6c6332 	blvs	1b19084 <__end__+0xafd064>
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
     3bc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     3c0:	4b4c435f 	blmi	1311144 <__end__+0x2f5124>
     3c4:	5f53435f 	svcpl	0x0053435f
     3c8:	43415254 	movtmi	r5, #4692	; 0x1254
     3cc:	755f0045 	ldrbvc	r0, [pc, #-69]	; 38f <__core1_vectors-0xfffc71>
     3d0:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     3d4:	61725f64 	cmnvs	r2, r4, ror #30
     3d8:	6100646e 	tstvs	r0, lr, ror #8
     3dc:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     3e0:	70726761 	rsbsvc	r6, r2, r1, ror #14
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     3e8:	6b6c635f 	blvs	1b1916c <__end__+0xafd14c>
     3ec:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     3f0:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     3f4:	706d5f74 	rsbvc	r5, sp, r4, ror pc
     3f8:	326c5f75 	rsbcc	r5, ip, #468	; 0x1d4
     3fc:	006d6172 	rsbeq	r6, sp, r2, ror r1
     400:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     404:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     408:	61686320 	cmnvs	r8, r0, lsr #6
     40c:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	50475f54 	subpl	r5, r7, r4, asr pc
     414:	50435f54 	subpl	r5, r3, r4, asr pc
     418:	44575f55 	ldrbmi	r5, [r7], #-3925	; 0xfffff0ab
     41c:	54504754 	ldrbpl	r4, [r0], #-1876	; 0xfffff8ac
     420:	524d545f 	subpl	r5, sp, #1593835520	; 0x5f000000
     424:	6b6c6300 	blvs	1b1902c <__end__+0xafd00c>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	70657453 	rsbvc	r7, r5, r3, asr r4
     42c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     430:	63657073 	cmnvs	r5, #115	; 0x73
     434:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
     438:	6f6c5f64 	svcvs	0x006c5f64
     43c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
     444:	725f006f 	subsvc	r0, pc, #111	; 0x6f
     448:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
     44c:	6c675f00 	stclvs	15, cr5, [r7], #-0
     450:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
     454:	706d695f 	rsbvc	r6, sp, pc, asr r9
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	5f657275 	svcpl	0x00657275
     45c:	00727470 	rsbseq	r7, r2, r0, ror r4
     460:	5f544c41 	svcpl	0x00544c41
     464:	5f545047 	svcpl	0x00545047
     468:	54534552 	ldrbpl	r4, [r3], #-1362	; 0xfffffaae
     46c:	5f545241 	svcpl	0x00545241
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     474:	454e4f5f 	strbmi	r4, [lr, #-3935]	; 0xfffff0a1
     478:	544f4853 	strbpl	r4, [pc], #-2131	; 480 <__core1_vectors-0xfffb80>
     47c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     480:	6b6c635f 	blvs	1b19204 <__end__+0xafd1e4>
     484:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     48c:	73715f74 	cmnvc	r1, #116, 30	; 0x1d0
     490:	5f006970 	svcpl	0x00006970
     494:	00736e66 	rsbseq	r6, r3, r6, ror #28
     498:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     49c:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     4a0:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
     4a4:	2f72676d 	svccs	0x0072676d
     4a8:	5f636f73 	svcpl	0x00636f73
     4ac:	2f303161 	svccs	0x00303161
     4b0:	5f746c61 	svcpl	0x00746c61
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	636f6c63 	cmnvs	pc, #25344	; 0x6300
     4b8:	616d5f6b 	cmnvs	sp, fp, ror #30
     4bc:	6567616e 	strbvs	r6, [r7, #-366]!	; 0xfffffe92
     4c0:	00632e72 	rsbeq	r2, r3, r2, ror lr
     4c4:	5f6b6c63 	svcpl	0x006b6c63
     4c8:	71657266 	cmnvc	r5, r6, ror #4
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	5f666f5f 	svcpl	0x00666f5f
     4d0:	63736f65 	cmnvs	r3, #404	; 0x194
     4d4:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
     4d8:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xfffff0ac
     4dc:	53555441 	cmppl	r5, #1090519040	; 0x41000000
     4e0:	444f435f 	strbmi	r4, [pc], #-863	; 4e8 <__core1_vectors-0xfffb18>
     4e4:	6c610045 	stclvs	0, cr0, [r1], #-276	; 0xfffffeec
     4e8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     4ec:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     4f0:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     4f4:	675f7465 	ldrbvs	r7, [pc, -r5, ror #8]
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
     4fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     500:	4100736b 	tstmi	r0, fp, ror #6
     504:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     508:	745f4b4c 	ldrbvc	r4, [pc], #-2892	; 510 <__core1_vectors-0xfffaf0>
     50c:	6b6c6300 	blvs	1b19114 <__end__+0xafd0f4>
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     514:	666f5f71 	uqsub16vs	r5, pc, r1	; <UNPREDICTABLE>
     518:	6832665f 	ldmdavs	r2!, {r0, r1, r2, r3, r4, r6, r9, sl, sp, lr}
     51c:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     520:	735f0065 	cmpvc	pc, #101	; 0x65
     524:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     528:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     52c:	4b4c435f 	blmi	13112b0 <__end__+0x2f5290>
     530:	43534f5f 	cmpmi	r3, #380	; 0x17c
     534:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
     538:	50475f54 	subpl	r5, r7, r4, asr pc
     53c:	50435f54 	subpl	r5, r3, r4, asr pc
     540:	52505f55 	subspl	r5, r0, #340	; 0x154
     544:	54415649 	strbpl	r5, [r1], #-1609	; 0xfffff9b7
     548:	4d545f45 	ldclmi	15, cr5, [r4, #-276]	; 0xfffffeec
     54c:	6c610052 	stclvs	0, cr0, [r1], #-328	; 0xfffffeb8
     550:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     554:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     558:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     55c:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
     560:	306d6970 	rsbcc	r6, sp, r0, ror r9
     564:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     568:	6b6c635f 	blvs	1b192ec <__end__+0xafd2cc>
     56c:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     570:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     574:	70735f74 	rsbsvc	r5, r3, r4, ror pc
     578:	00316d69 	eorseq	r6, r1, r9, ror #26
     57c:	5f544c41 	svcpl	0x00544c41
     580:	5f4b4c43 	svcpl	0x004b4c43
     584:	49524550 	ldmdbmi	r2, {r4, r6, r8, sl, lr}^
     588:	52454850 	subpl	r4, r5, #80, 16	; 0x500000
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	505f4c41 	subspl	r4, pc, r1, asr #24
     590:	63004c4c 	movwvs	r4, #3148	; 0xc4c
     594:	3872746e 	ldmdacc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     598:	5f6b6c63 	svcpl	0x006b6c63
     59c:	00637273 	rsbeq	r7, r3, r3, ror r2
     5a0:	5f746c61 	svcpl	0x00746c61
     5a4:	5f6b6c63 	svcpl	0x006b6c63
     5a8:	71657266 	cmnvc	r5, r6, ror #4
     5ac:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     5b0:	5f346c5f 	svcpl	0x00346c5f
     5b4:	5f737973 	svcpl	0x00737973
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     5bc:	746e6300 	strbtvc	r6, [lr], #-768	; 0xfffffd00
     5c0:	6c633772 	stclvs	7, cr3, [r3], #-456	; 0xfffffe38
     5c4:	6e635f6b 	cdpvs	15, 6, cr5, cr3, cr11, {3}
     5c8:	63760074 	cmnvs	r6, #116	; 0x74
     5cc:	705f306f 	subsvc	r3, pc, pc, rrx
     5d0:	00637273 	rsbeq	r7, r3, r3, ror r2
     5d4:	5f544c41 	svcpl	0x00544c41
     5d8:	5f4b4c43 	svcpl	0x004b4c43
     5dc:	505f5343 	subspl	r5, pc, r3, asr #6
     5e0:	00474244 	subeq	r4, r7, r4, asr #4
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	6f6f635f 	svcvs	0x006f635f
     5e8:	0065696b 	rsbeq	r6, r5, fp, ror #18
     5ec:	6e69616d 	powvsez	f6, f1, #5.0
     5f0:	006c6c70 	rsbeq	r6, ip, r0, ror ip
     5f4:	5f544c41 	svcpl	0x00544c41
     5f8:	5f4b4c43 	svcpl	0x004b4c43
     5fc:	4f495047 	svcmi	0x00495047
     600:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
     604:	6c610073 	stclvs	0, cr0, [r1], #-460	; 0xfffffe34
     608:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     60c:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     614:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
     618:	74615f73 	strbtvc	r5, [r1], #-3955	; 0xfffff08d
     61c:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     620:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     624:	5f00636e 	svcpl	0x0000636e
     628:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
     62c:	5f007465 	svcpl	0x00007465
     630:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
     634:	6e006675 	mcrvs	6, 0, r6, cr0, cr5, {3}
     638:	6c63636f 	stclvs	3, cr6, [r3], #-444	; 0xfffffe44
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	72735f6b 	rsbsvc	r5, r3, #428	; 0x1ac
     640:	4c430063 	mcrrmi	0, 6, r0, r3, cr3
     644:	5f4b434f 	svcpl	0x004b434f
     648:	414e414d 	cmpmi	lr, sp, asr #2
     64c:	5f524547 	svcpl	0x00524547
     650:	4e49414d 	dvfmiem	f4, f1, #5.0
     654:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     658:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
     65c:	00474946 	subeq	r4, r7, r6, asr #18
     660:	64636f6e 	strbtvs	r6, [r3], #-3950	; 0xfffff092
     664:	635f7669 	cmpvs	pc, #110100480	; 0x6900000
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	63746173 	cmnvs	r4, #-1073741796	; 0xc000001c
     66c:	5f006b6c 	svcpl	0x00006b6c
     670:	00733570 	rsbseq	r3, r3, r0, ror r5
     674:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     678:	6b6c6335 	blvs	1b19354 <__end__+0xafd334>
     67c:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	735f5f00 	cmpvc	pc, #0, 30
     684:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
     688:	735f5f00 	cmpvc	pc, #0, 30
     68c:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
     690:	0074696e 	rsbseq	r6, r4, lr, ror #18
     694:	616c665f 	cmnvs	ip, pc, asr r6
     698:	00327367 	eorseq	r7, r2, r7, ror #6
     69c:	5f544c41 	svcpl	0x00544c41
     6a0:	5f545047 	svcpl	0x00545047
     6a4:	54534552 	ldrbpl	r4, [r3], #-1362	; 0xfffffaae
     6a8:	5f545241 	svcpl	0x00545241
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     6b0:	5f00655f 	svcpl	0x0000655f
     6b4:	4b434f4c 	blmi	10d43ec <__end__+0xb83cc>
     6b8:	4345525f 	movtmi	r5, #21087	; 0x525f
     6bc:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
     6c0:	545f4556 	ldrbpl	r4, [pc], #-1366	; 6c8 <__core1_vectors-0xfff938>
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	6b6c6300 	blvs	1b192cc <__end__+0xafd2ac>
     6c8:	00303031 	eorseq	r3, r0, r1, lsr r0
     6cc:	5f746c61 	svcpl	0x00746c61
     6d0:	5f6b6c63 	svcpl	0x006b6c63
     6d4:	71657266 	cmnvc	r5, r6, ror #4
     6d8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     6dc:	616d655f 	cmnvs	sp, pc, asr r5
     6e0:	5f003063 	svcpl	0x00003063
     6e4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     6e8:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
     6ec:	63006675 	movwvs	r6, #1653	; 0x675
     6f0:	3472746e 	ldrbtcc	r7, [r2], #-1134	; 0xfffffb92
     6f4:	5f6b6c63 	svcpl	0x006b6c63
     6f8:	00637273 	rsbeq	r7, r3, r3, ror r2
     6fc:	5f544c41 	svcpl	0x00544c41
     700:	5f4b4c43 	svcpl	0x004b4c43
     704:	00425355 	subeq	r5, r2, r5, asr r3
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	6769425f 			; <UNDEFINED> instruction: 0x6769425f
     70c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     710:	5f746c61 	svcpl	0x00746c61
     714:	5f6b6c63 	svcpl	0x006b6c63
     718:	71657266 	cmnvc	r5, r6, ror #4
     71c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	7665645f 			; <UNDEFINED> instruction: 0x7665645f
     724:	00656369 	rsbeq	r6, r5, r9, ror #6
     728:	63636f6e 	cmnvs	r3, #440	; 0x1b8
     72c:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	6100746e 	tstvs	r0, lr, ror #8
     734:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     73c:	5f716572 	svcpl	0x00716572
     740:	5f746567 	svcpl	0x00746567
     744:	63616d65 	cmnvs	r1, #6464	; 0x1940
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	6c610031 	stclvs	0, cr0, [r1], #-196	; 0xffffff3c
     74c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     754:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     758:	655f7465 	ldrbvs	r7, [pc, #-1125]	; 2fb <__core1_vectors-0xfffd05>
     75c:	3263616d 	rsbcc	r6, r3, #1073741851	; 0x4000001b
     760:	616d5f00 	cmnvs	sp, r0, lsl #30
     764:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
     768:	636f6e00 	cmnvs	pc, #0, 28
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     770:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     774:	6b6c6333 	blvs	1b19448 <__end__+0xafd428>
     778:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
     77c:	635f5f00 	cmpvs	pc, #0, 30
     780:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
     784:	5f007075 	svcpl	0x00007075
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
     78c:	00307469 	eorseq	r7, r0, r9, ror #8
     790:	5f746c61 	svcpl	0x00746c61
     794:	5f6b6c63 	svcpl	0x006b6c63
     798:	71657266 	cmnvc	r5, r6, ror #4
     79c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     7a0:	5f73635f 	svcpl	0x0073635f
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     7a8:	6c610072 	stclvs	0, cr0, [r1], #-456	; 0xfffffe38
     7ac:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     7b0:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     7b4:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     7b8:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
     7bc:	616d5f33 	cmnvs	sp, r3, lsr pc
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	665f6e69 	ldrbvs	r6, [pc], -r9, ror #28
     7c4:	00656572 	rsbeq	r6, r5, r2, ror r5
     7c8:	5f544c41 	svcpl	0x00544c41
     7cc:	5f4b4c43 	svcpl	0x004b4c43
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	535f344c 	cmppl	pc, #76, 8	; 0x4c000000
     7d4:	465f5359 			; <UNDEFINED> instruction: 0x465f5359
     7d8:	00454552 	subeq	r4, r5, r2, asr r5
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	5f544c41 	svcpl	0x00544c41
     7e0:	5f545047 	svcpl	0x00545047
     7e4:	54534552 	ldrbpl	r4, [r3], #-1362	; 0xfffffaae
     7e8:	5f545241 	svcpl	0x00545241
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     7f0:	5245505f 	subpl	r5, r5, #95	; 0x5f
     7f4:	49444f49 	stmdbmi	r4, {r0, r3, r6, r8, r9, sl, fp, lr}^
     7f8:	655f0043 	ldrbvs	r0, [pc, #-67]	; 7bd <__core1_vectors-0xfff843>
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
     800:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     804:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     808:	6f6c2067 	svcvs	0x006c2067
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     810:	6100746e 	tstvs	r0, lr, ror #8
     814:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     818:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	5f716572 	svcpl	0x00716572
     820:	5f746567 	svcpl	0x00746567
     824:	69726570 	ldmdbvs	r2!, {r4, r5, r6, r8, sl, sp, lr}^
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	6c6c705f 	stclvs	0, cr7, [ip], #-380	; 0xfffffe84
     82c:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
     830:	0073626f 	rsbseq	r6, r3, pc, ror #4
     834:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	0065756c 	rsbeq	r7, r5, ip, ror #10
     83c:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!	; 0xfffffe30
     840:	65740030 	ldrbvs	r0, [r4, #-48]!	; 0xffffffd0
     844:	00316d72 	eorseq	r6, r1, r2, ror sp
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	616d6e5f 	cmnvs	sp, pc, asr lr
     84c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     850:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     854:	6b6c635f 	blvs	1b195d8 <__end__+0xafd5b8>
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     85c:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     860:	62635f74 	rsbvs	r5, r3, #116, 30	; 0x1d0
     864:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     868:	5f63736f 	svcpl	0x0063736f
     86c:	645f7368 	ldrbvs	r7, [pc], #-872	; 874 <__core1_vectors-0xfff78c>
     870:	5f327669 	svcpl	0x00327669
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     878:	3163736f 	cmncc	r3, pc, ror #6
     87c:	6f6c635f 	svcvs	0x006c635f
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	5f006b63 	svcpl	0x00006b63
     884:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
     888:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
     88c:	61676e67 	cmnvs	r7, r7, ror #28
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	6c61006d 	stclvs	0, cr0, [r1], #-436	; 0xfffffe4c
     894:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     898:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     89c:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
     8a4:	636d6d64 	cmnvs	sp, #100, 26	; 0x1900
     8a8:	72665f00 	rsbvc	r5, r6, #0, 30
     8ac:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	5f007473 	svcpl	0x00007473
     8b4:	73626f69 	cmnvc	r2, #420	; 0x1a4
     8b8:	6c675f00 	stclvs	15, cr5, [r7], #-0
     8bc:	5f006575 	svcpl	0x00006575
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     8c4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     8c8:	6b6c635f 	blvs	1b1964c <__end__+0xafd62c>
     8cc:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     8d4:	73635f74 	cmnvc	r3, #116, 30	; 0x1d0
     8d8:	6172745f 	cmnvs	r2, pc, asr r4
     8dc:	41006563 	tstmi	r0, r3, ror #10
    return ALT_E_SUCCESS;
     8e0:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
}
     8e4:	4e5f4b4c 	vnmlami.f64	d20, d15, d12
     8e8:	00444e41 	subeq	r4, r4, r1, asr #28
     8ec:	6375706d 	cmnvs	r5, #109	; 0x6d
     8f0:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
     8f4:	4100746e 	tstmi	r0, lr, ror #8
     8f8:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     8fc:	495f4b4c 	ldmdbmi	pc, {r2, r3, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
     900:	534f544e 	movtpl	r5, #62542	; 0xf44e
     904:	53485f43 	movtpl	r5, #36675	; 0x8f43
     908:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
     90c:	6c610032 	stclvs	0, cr0, [r1], #-200	; 0xffffff38
     910:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     914:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     918:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     91c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
     920:	706d5f34 	rsbvc	r5, sp, r4, lsr pc
     924:	4f4c4300 	svcmi	0x004c4300
     928:	4d5f4b43 	vldrmi	d20, [pc, #-268]	; 824 <__core1_vectors-0xfff7dc>
     92c:	47414e41 	strbmi	r4, [r1, -r1, asr #28]
     930:	415f5245 	cmpmi	pc, r5, asr #4
     934:	5245544c 	subpl	r5, r5, #76, 8	; 0x4c000000
     938:	52475f41 	subpl	r5, r7, #260	; 0x104
     93c:	4f435f50 	svcmi	0x00435f50
     940:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
     944:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     948:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     94c:	00745f71 	rsbseq	r5, r4, r1, ror pc
     950:	5f746c61 	svcpl	0x00746c61
     954:	5f6b6c63 	svcpl	0x006b6c63
     958:	71657266 	cmnvc	r5, r6, ror #4
     95c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     960:	616d655f 	cmnvs	sp, pc, asr r5
     964:	74705f63 	ldrbtvc	r5, [r0], #-3939	; 0xfffff09d
     968:	6d650070 	stclvs	0, cr0, [r5, #-448]!	; 0xfffffe40
     96c:	74636361 	strbtvc	r6, [r3], #-865	; 0xfffffc9f
     970:	6d655f6c 	stclvs	15, cr5, [r5, #-432]!	; 0xfffffe50
     974:	73306361 	teqvc	r0, #-2080374783	; 0x84000001
     978:	61006c65 	tstvs	r0, r5, ror #24
     97c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     980:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     984:	5f716572 	svcpl	0x00716572
     988:	5f746567 	svcpl	0x00746567
     98c:	00636d68 	rsbeq	r6, r3, r8, ror #26
     990:	655f685f 	ldrbvs	r6, [pc, #-2143]	; 139 <__core1_vectors-0xfffec7>
     994:	6f6e7272 	svcvs	0x006e7272
     998:	616d6500 	cmnvs	sp, r0, lsl #10
     99c:	6c746363 	ldclvs	3, cr6, [r4], #-396	; 0xfffffe74
     9a0:	616d655f 	cmnvs	sp, pc, asr r5
     9a4:	65733263 	ldrbvs	r3, [r3, #-611]!	; 0xfffffd9d
     9a8:	6c61006c 	stclvs	0, cr0, [r1], #-432	; 0xfffffe50
     9ac:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     9b0:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     9b4:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     9b8:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
     9bc:	70735f34 	rsbsvc	r5, r3, r4, lsr pc
     9c0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     9c4:	6b6c635f 	blvs	1b19748 <__end__+0xafd728>
     9c8:	7478655f 	ldrbtvc	r6, [r8], #-1375	; 0xfffffaa1
     9cc:	6b6c635f 	blvs	1b19750 <__end__+0xafd730>
     9d0:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     9d4:	65735f71 	ldrbvs	r5, [r3, #-3953]!	; 0xfffff08f
     9d8:	70670074 	rsbvc	r0, r7, r4, ror r0
     9dc:	69646f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     9e0:	70675f76 	rsbvc	r5, r7, r6, ror pc
     9e4:	62646f69 	rsbvs	r6, r4, #420	; 0x1a4
     9e8:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     9ec:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
     9f0:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     9f4:	6174735f 	cmnvs	r4, pc, asr r3
     9f8:	5f006574 	svcpl	0x00006574
     9fc:	5f6d745f 	svcpl	0x006d745f
     a00:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
     a04:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
     a08:	755f0077 	ldrbvc	r0, [pc, #-119]	; 999 <__core1_vectors-0xfff667>
     a0c:	00667562 	rsbeq	r7, r6, r2, ror #10
     a10:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     a14:	00727265 	rsbseq	r7, r2, r5, ror #4
     a18:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
     a1c:	5f626d6f 	svcpl	0x00626d6f
     a20:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     a24:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 898 <__core1_vectors-0xfff768>
     a28:	61747362 	cmnvs	r4, r2, ror #6
     a2c:	5f006574 	svcpl	0x00006574
     a30:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     a34:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     a38:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     a3c:	7367616c 	cmnvc	r7, #108, 2
     a40:	6f637600 	svcvs	0x00637600
     a44:	63760030 	cmnvs	r6, #48	; 0x30
     a48:	5f00316f 	svcpl	0x0000316f
     a4c:	5f6c6c70 	svcpl	0x006c6c70
     a50:	00676572 	rsbeq	r6, r7, r2, ror r5
     a54:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
     a58:	00746978 	rsbseq	r6, r4, r8, ror r9
     a5c:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     a60:	6b6c6339 	blvs	1b1974c <__end__+0xafd72c>
     a64:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
     a68:	635f5f00 	cmpvs	pc, #0, 30
     a6c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     a70:	616d5f00 	cmnvs	sp, r0, lsl #30
     a74:	725f6e69 	subsvc	r6, pc, #1680	; 0x690
     a78:	5f006765 	svcpl	0x00006765
     a7c:	5f6d745f 	svcpl	0x006d745f
     a80:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
     a84:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     a88:	6b6c635f 	blvs	1b1980c <__end__+0xafd7ec>
     a8c:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     a90:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     a94:	6d655f74 	stclvs	15, cr5, [r5, #-464]!	; 0xfffffe30
     a98:	31306361 	teqcc	r0, r1, ror #6
     a9c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     aa0:	6f642067 	svcvs	0x00642067
     aa4:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
     aa8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; ab0 <__core1_vectors-0xfff550>
     aac:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
     ab0:	5f007961 	svcpl	0x00007961
     ab4:	61707962 	cmnvs	r0, r2, ror #18
     ab8:	6d5f7373 	ldclvs	3, cr7, [pc, #-460]	; 8f4 <__core1_vectors-0xfff70c>
     abc:	006b7361 	rsbeq	r7, fp, r1, ror #6
     ac0:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
     ac4:	735f0064 	cmpvc	pc, #100	; 0x64
     ac8:	006b6565 	rsbeq	r6, fp, r5, ror #10
     acc:	5f544c41 	svcpl	0x00544c41
     ad0:	5f4b4c43 	svcpl	0x004b4c43
     ad4:	4e49414d 	dvfmiem	f4, f1, #5.0
     ad8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     adc:	70665f00 	rsbvc	r5, r6, r0, lsl #30
     ae0:	745f736f 	ldrbvc	r7, [pc], #-879	; ae8 <__core1_vectors-0xfff518>
     ae4:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
     ae8:	00626863 	rsbeq	r6, r2, r3, ror #16
     aec:	5f544c41 	svcpl	0x00544c41
     af0:	5f4b4c43 	svcpl	0x004b4c43
     af4:	535f344c 	cmppl	pc, #76, 8	; 0x4c000000
     af8:	6d5f0050 	ldclvs	0, cr0, [pc, #-320]	; 9c0 <__core1_vectors-0xfff640>
     afc:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
     b00:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
     b04:	00657461 	rsbeq	r7, r5, r1, ror #8
     b08:	64636f6e 	strbtvs	r6, [r3], #-3950	; 0xfffff092
     b0c:	6c5f7669 	mrrcvs	6, 6, r7, pc, cr9	; <UNPREDICTABLE>
     b10:	69616d34 	stmdbvs	r1!, {r2, r4, r5, r8, sl, fp, sp, lr}^
     b14:	6b6c636e 	blvs	1b198d4 <__end__+0xafd8b4>
     b18:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     b1c:	6b6c635f 	blvs	1b198a0 <__end__+0xafd880>
     b20:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     b24:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     b28:	706d5f74 	rsbvc	r5, sp, r4, ror pc
     b2c:	6e630075 	mcrvs	0, 3, r0, cr3, cr5, {3}
     b30:	63377274 	teqvs	r7, #116, 4	; 0x40000007
     b34:	735f6b6c 	cmpvc	pc, #108, 22	; 0x1b000
     b38:	6c006372 	stcvs	3, cr6, [r0], {114}	; 0x72
     b3c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     b40:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     b44:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     b48:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     b4c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     b50:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
     b54:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     b58:	4d485f4b 	stclmi	15, cr5, [r8, #-300]	; 0xfffffed4
     b5c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     b60:	45525f4c 	ldrbmi	r5, [r2, #-3916]	; 0xfffff0b4
     b64:	645f0046 	ldrbvs	r0, [pc], #-70	; b6c <__core1_vectors-0xfff494>
     b68:	685f6f73 	ldmdavs	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     b6c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     b70:	6e630065 	cdpvs	0, 6, cr0, cr3, cr5, {3}
     b74:	63367274 	teqvs	r6, #116, 4	; 0x40000007
     b78:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
     b7c:	5f00746e 	svcpl	0x0000746e
     b80:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     b84:	5f003834 	svcpl	0x00003834
     b88:	6f647473 	svcvs	0x00647473
     b8c:	61007475 	tstvs	r0, r5, ror r4
     b90:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     b94:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
     b98:	6b636f6c 	blvs	18dc950 <__end__+0x8c0930>
     b9c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     ba0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     ba4:	61625f00 	cmnvs	r2, r0, lsl #30
     ba8:	5f006573 	svcpl	0x00006573
     bac:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
     bb0:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
     bb4:	00747361 	rsbseq	r7, r4, r1, ror #6
     bb8:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
     bbc:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
     bc0:	6174735f 	cmnvs	r4, pc, asr r3
     bc4:	5f006574 	svcpl	0x00006574
     bc8:	636f6c66 	cmnvs	pc, #26112	; 0x6600
     bcc:	00745f6b 	rsbseq	r5, r4, fp, ror #30
     bd0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; b1c <__core1_vectors-0xfff4e4>
     bd4:	6f6d2f65 	svcvs	0x006d2f65
     bd8:	6c6c6572 	cfstr64vs	mvdx6, [ip], #-456	; 0xfffffe38
     bdc:	6e612f69 	cdpvs	15, 6, cr2, cr1, cr9, {3}
     be0:	612f6f74 			; <UNDEFINED> instruction: 0x612f6f74
     be4:	695f3031 	ldmdbvs	pc, {r0, r4, r5, ip, sp}^	; <UNPREDICTABLE>
     be8:	612f7363 			; <UNDEFINED> instruction: 0x612f7363
     bec:	665f3031 			; <UNDEFINED> instruction: 0x665f3031
     bf0:	3034636d 	eorscc	r6, r4, sp, ror #6
     bf4:	6f732f30 	svcvs	0x00732f30
     bf8:	61777466 	cmnvs	r7, r6, ror #8
     bfc:	682f6572 	stmdavs	pc!, {r1, r4, r5, r6, r8, sl, sp, lr}	; <UNPREDICTABLE>
     c00:	462d7370 			; <UNDEFINED> instruction: 0x462d7370
     c04:	3034636d 	eorscc	r6, r4, sp, ror #6
     c08:	77732d30 			; <UNDEFINED> instruction: 0x77732d30
     c0c:	3130762d 	teqcc	r0, sp, lsr #12
     c10:	5f5f002f 	svcpl	0x005f002f
     c14:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
     c18:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
     c1c:	00343671 	eorseq	r3, r4, r1, ror r6
     c20:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
     c24:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     c28:	4100745f 	tstmi	r0, pc, asr r4
     c2c:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     c30:	515f4b4c 	cmppl	pc, ip, asr #22
     c34:	00495053 	subeq	r5, r9, r3, asr r0
     c38:	5f544c41 	svcpl	0x00544c41
     c3c:	5f545047 	svcpl	0x00545047
     c40:	3143534f 	cmpcc	r3, pc, asr #6
     c44:	524d545f 	subpl	r5, sp, #1593835520	; 0x5f000000
     c48:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
     c4c:	50475f54 	subpl	r5, r7, r4, asr pc
     c50:	534f5f54 	movtpl	r5, #65364	; 0xff54
     c54:	545f3143 	ldrbpl	r3, [pc], #-323	; c5c <__core1_vectors-0xfff3a4>
     c58:	0031524d 	eorseq	r5, r1, sp, asr #4
     c5c:	5f746c61 	svcpl	0x00746c61
     c60:	5f6b6c63 	svcpl	0x006b6c63
     c64:	655f7369 	ldrbvs	r7, [pc, #-873]	; 903 <__core1_vectors-0xfff6fd>
     c68:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     c6c:	685f6465 	ldmdavs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
     c70:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
     c74:	725f0072 	subsvc	r0, pc, #114	; 0x72
     c78:	73003834 	movwvc	r3, #2100	; 0x834
     c7c:	725f6372 	subsvc	r6, pc, #-939524095	; 0xc8000001
     c80:	73696765 	cmnvc	r9, #26476544	; 0x1940000
     c84:	00726574 	rsbseq	r6, r2, r4, ror r5
     c88:	746e6977 	strbtvc	r6, [lr], #-2423	; 0xfffff689
     c8c:	4100745f 	tstmi	r0, pc, asr r4
     c90:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     c94:	4d5f4b4c 	vldrmi	d20, [pc, #-304]	; b6c <__core1_vectors-0xfff494>
     c98:	61005550 	tstvs	r0, r0, asr r5
     c9c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     ca0:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     ca4:	5f716572 	svcpl	0x00716572
     ca8:	5f746567 	svcpl	0x00746567
     cac:	5f663273 	svcpl	0x00663273
     cb0:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     cb4:	616d0030 	cmnvs	sp, r0, lsr r0
     cb8:	735f6e69 	cmpvc	pc, #1680	; 0x690
     cbc:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
     cc0:	75706d00 	ldrbvc	r6, [r0, #-3328]!	; 0xfffff300
     cc4:	5f6b6c63 	svcpl	0x006b6c63
     cc8:	00637273 	rsbeq	r7, r3, r3, ror r2
     ccc:	5f544c41 	svcpl	0x00544c41
     cd0:	5f4b4c43 	svcpl	0x004b4c43
     cd4:	5f533246 	svcpl	0x00533246
     cd8:	45455246 	strbmi	r5, [r5, #-582]	; 0xfffffdba
     cdc:	4b4c435f 	blmi	1311a60 <__end__+0x2f5a40>
     ce0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     ce4:	6b6c635f 	blvs	1b19a68 <__end__+0xafda48>
     ce8:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     cec:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     cf0:	616d5f74 	smcvs	54772	; 0xd5f4
     cf4:	705f6e69 	subsvc	r6, pc, r9, ror #28
     cf8:	61006c6c 	tstvs	r0, ip, ror #24
     cfc:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     d00:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     d04:	5f716572 	svcpl	0x00716572
     d08:	5f746567 	svcpl	0x00746567
     d0c:	3163736f 	cmncc	r3, pc, ror #6
     d10:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     d14:	4b4c435f 	blmi	1311a98 <__end__+0x2f5a78>
     d18:	414d455f 	cmpmi	sp, pc, asr r5
     d1c:	41003043 	tstmi	r0, r3, asr #32
     d20:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     d24:	455f4b4c 	ldrbmi	r4, [pc, #-2892]	; 1e0 <__core1_vectors-0xfffe20>
     d28:	3143414d 	cmpcc	r3, sp, asr #2
     d2c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     d30:	4b4c435f 	blmi	1311ab4 <__end__+0x2f5a94>
     d34:	414d455f 	cmpmi	sp, pc, asr r5
     d38:	61003243 	tstvs	r0, r3, asr #4
     d3c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     d40:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     d44:	5f716572 	svcpl	0x00716572
     d48:	5f746567 	svcpl	0x00746567
     d4c:	705f7363 	subsvc	r7, pc, r3, ror #6
     d50:	00676264 	rsbeq	r6, r7, r4, ror #4
     d54:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
     d58:	735f6e65 	cmpvc	pc, #1616	; 0x650
     d5c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     d60:	6f687300 	svcvs	0x00687300
     d64:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     d68:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
     d6c:	6964636f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     d70:	73635f76 	cmnvc	r3, #472	; 0x1d8
     d74:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
     d78:	6b6c6365 	blvs	1b19b14 <__end__+0xafdaf4>
     d7c:	746e6300 	strbtvc	r6, [lr], #-768	; 0xfffffd00
     d80:	6c633372 	stclvs	3, cr3, [r3], #-456	; 0xfffffe38
     d84:	72735f6b 	rsbsvc	r5, r3, #428	; 0x1ac
     d88:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
     d8c:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
     d90:	6100745f 	tstvs	r0, pc, asr r4
     d94:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     d98:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     d9c:	5f716572 	svcpl	0x00716572
     da0:	5f746567 	svcpl	0x00746567
     da4:	5f75706d 	svcpl	0x0075706d
     da8:	69726570 	ldmdbvs	r2!, {r4, r5, r6, r8, sl, sp, lr}^
     dac:	63006870 	movwvs	r6, #2160	; 0x870
     db0:	3272746e 	rsbscc	r7, r2, #1845493760	; 0x6e000000
     db4:	5f6b6c63 	svcpl	0x006b6c63
     db8:	00746e63 	rsbseq	r6, r4, r3, ror #28
     dbc:	6f627573 	svcvs	0x00627573
     dc0:	72617470 	rsbvc	r7, r1, #112, 8	; 0x70000000
     dc4:	4c410067 	mcrrmi	0, 6, r0, r1, cr7
     dc8:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     dcc:	44535f4b 	ldrbmi	r5, [r3], #-3915	; 0xfffff0b5
     dd0:	00434d4d 	subeq	r4, r3, sp, asr #26
     dd4:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
     dd8:	73657079 	cmnvc	r5, #121	; 0x79
     ddc:	72657000 	rsbvc	r7, r5, #0
     de0:	006c6c70 	rsbeq	r6, ip, r0, ror ip
     de4:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     de8:	6165795f 	cmnvs	r5, pc, asr r9
     dec:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
     df0:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     df4:	6c5f004b 	mrrcvs	0, 4, r0, pc, cr11	; <UNPREDICTABLE>
     df8:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
     dfc:	5f00657a 	svcpl	0x0000657a
     e00:	00636e69 	rsbeq	r6, r3, r9, ror #28
     e04:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     e08:	735f5f00 	cmpvc	pc, #0, 30
     e0c:	00667562 	rsbeq	r7, r6, r2, ror #10
     e10:	5f73695f 	svcpl	0x0073695f
     e14:	00617863 	rsbeq	r7, r1, r3, ror #16
     e18:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     e1c:	43006674 	movwmi	r6, #1652	; 0x674
     e20:	4b434f4c 	blmi	10d4b58 <__end__+0xb8b38>
     e24:	554f535f 	strbpl	r5, [pc, #-863]	; acd <__core1_vectors-0xfff533>
     e28:	5f454352 	svcpl	0x00454352
     e2c:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     e30:	63004749 	movwvs	r4, #1865	; 0x749
     e34:	3172746e 	cmncc	r2, lr, ror #8
     e38:	6b6c6335 	blvs	1b19b14 <__end__+0xafdaf4>
     e3c:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
     e40:	6f6c5f00 	svcvs	0x006c5f00
     e44:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     e48:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; ffffff50 <__shm_end__+0xbfffff50>
     e4c:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
     e50:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     e54:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
     e58:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     e5c:	4b4c435f 	blmi	1311be0 <__end__+0x2f5bc0>
     e60:	4632535f 			; <UNDEFINED> instruction: 0x4632535f
     e64:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0xfffffaa1
     e68:	6e003052 	mcrvs	0, 0, r3, cr0, cr2, {2}
     e6c:	6964636f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     e70:	73635f76 	cmnvc	r3, #472	; 0x1d8
     e74:	67626470 			; <UNDEFINED> instruction: 0x67626470
     e78:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     e7c:	5f544c41 	svcpl	0x00544c41
     e80:	5f4b4c43 	svcpl	0x004b4c43
     e84:	4d5f344c 	cfldrdmi	mvd3, [pc, #-304]	; d5c <__core1_vectors-0xfff2a4>
     e88:	004e4941 	subeq	r4, lr, r1, asr #18
     e8c:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     e90:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     e94:	4b4c435f 	blmi	1311c18 <__end__+0x2f5bf8>
     e98:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     e9c:	6873004d 	ldmdavs	r3!, {r0, r2, r3, r6}^
     ea0:	2074726f 	rsbscs	r7, r4, pc, ror #4
     ea4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     ea8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     eac:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     eb0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; eb8 <__core1_vectors-0xfff148>
     eb4:	6f685f6d 	svcvs	0x00685f6d
     eb8:	63007275 	movwvs	r7, #629	; 0x275
     ebc:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
     ec0:	63736f74 	cmnvs	r3, #116, 30	; 0x1d0
     ec4:	5f73685f 	svcpl	0x0073685f
     ec8:	32766964 	rsbscc	r6, r6, #100, 18	; 0x190000
     ecc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     ed0:	5450475f 	ldrbpl	r4, [r0], #-1887	; 0xfffff8a1
     ed4:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     ed8:	655f5245 	ldrbvs	r5, [pc, #-581]	; c9b <__core1_vectors-0xfff365>
     edc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     ee0:	6b6c635f 	blvs	1b19c64 <__end__+0xafdc44>
     ee4:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     ee8:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     eec:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
     ef0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     ef4:	73695f6b 	cmnvc	r9, #428	; 0x1ac
     ef8:	616e655f 	cmnvs	lr, pc, asr r5
     efc:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
     f00:	626d5f00 	rsbvs	r5, sp, #0, 30
     f04:	6f747273 	svcvs	0x00747273
     f08:	5f736377 	svcpl	0x00736377
     f0c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     f10:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     f14:	5f00656d 	svcpl	0x0000656d
     f18:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     f1c:	6d5f656c 	cfldr64vs	mvdx6, [pc, #-432]	; d74 <__core1_vectors-0xfff28c>
     f20:	006b7361 	rsbeq	r7, fp, r1, ror #6
     f24:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     f28:	6b6c6339 	blvs	1b19c14 <__end__+0xafdbf4>
     f2c:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
     f30:	6f637600 	svcvs	0x00637600
     f34:	756e5f31 	strbvc	r5, [lr, #-3889]!	; 0xfffff0cf
     f38:	0072656d 	rsbseq	r6, r2, sp, ror #10
     f3c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     f40:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     f44:	73677261 	cmnvc	r7, #268435462	; 0x10000006
     f48:	63727300 	cmnvs	r2, #0, 6
     f4c:	5f6e695f 	svcpl	0x006e695f
     f50:	6e69616d 	powvsez	f6, f1, #5.0
     f54:	745f5f00 	ldrbvc	r5, [pc], #-3840	; f5c <__core1_vectors-0xfff0a4>
     f58:	73695f6d 	cmnvc	r9, #436	; 0x1b4
     f5c:	00747364 	rsbseq	r7, r4, r4, ror #6
     f60:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     f64:	6b6c6338 	blvs	1b19c4c <__end__+0xafdc2c>
     f68:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
     f6c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     f70:	4b4c435f 	blmi	1311cf4 <__end__+0x2f5cd4>
     f74:	5f334c5f 	svcpl	0x00334c5f
     f78:	4e49414d 	dvfmiem	f4, f1, #5.0
     f7c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     f80:	4b4c435f 	blmi	1311d04 <__end__+0x2f5ce4>
     f84:	4632535f 			; <UNDEFINED> instruction: 0x4632535f
     f88:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0xfffffaa1
     f8c:	5f003152 	svcpl	0x00003152
     f90:	5f6d745f 	svcpl	0x006d745f
     f94:	006e696d 	rsbeq	r6, lr, sp, ror #18
     f98:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     f9c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     fa0:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     fa4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     fa8:	4b4c435f 	blmi	1311d2c <__end__+0x2f5d0c>
     fac:	55504d5f 	ldrbpl	r4, [r0, #-3423]	; 0xfffff2a1
     fb0:	5245505f 	subpl	r5, r5, #95	; 0x5f
     fb4:	00485049 	subeq	r5, r8, r9, asr #32
     fb8:	5f746c61 	svcpl	0x00746c61
     fbc:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
     fc0:	61625f30 	cmnvs	r2, r0, lsr pc
     fc4:	61726475 	cmnvs	r2, r5, ror r4
     fc8:	675f6574 			; <UNDEFINED> instruction: 0x675f6574
     fcc:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
     fd0:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
     fd4:	00657461 	rsbeq	r7, r5, r1, ror #8
     fd8:	5f746c61 	svcpl	0x00746c61
     fdc:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
     fe0:	69645f30 	stmdbvs	r4!, {r4, r5, r8, r9, sl, fp, ip, lr}^
     fe4:	6f736976 	svcvs	0x00736976
     fe8:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xfffff08e
     fec:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
     ff0:	36315f74 	shsub16cc	r5, r1, r4
     ff4:	5f303535 	svcpl	0x00303535
     ff8:	6f666966 	svcvs	0x00666966
     ffc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1000:	745f7261 	ldrbvc	r7, [pc], #-609	; 1008 <__core1_vectors-0xffeff8>
    1004:	4c410078 	mcrrmi	0, 7, r0, r1, cr8
    1008:	36315f54 	shsaxcc	r5, r1, r4
    100c:	5f303535 	svcpl	0x00303535
    1010:	4f464946 	svcmi	0x00464946
    1014:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1018:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    101c:	5f58545f 	svcpl	0x0058545f
    1020:	54504d45 	ldrbpl	r4, [r0], #-3397	; 0xfffff2bb
    1024:	6c610059 	stclvs	0, cr0, [r1], #-356	; 0xfffffe9c
    1028:	36315f74 	shsub16cc	r5, r1, r4
    102c:	5f303535 	svcpl	0x00303535
    1030:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
    1034:	6b636162 	blvs	18d95c4 <__end__+0x8bd5a4>
    1038:	616e655f 	cmnvs	lr, pc, asr r5
    103c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1040:	5f544c41 	svcpl	0x00544c41
    1044:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1048:	41425f30 	cmpmi	r2, r0, lsr pc
    104c:	41524455 	cmpmi	r2, r5, asr r4
    1050:	315f4554 	cmpcc	pc, r4, asr r5	; <UNPREDICTABLE>
    1054:	30303434 	eorscc	r3, r0, r4, lsr r4
    1058:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    105c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1060:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    1064:	5f6f6669 	svcpl	0x006f6669
    1068:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    106c:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    1070:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1074:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1078:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    107c:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1080:	645f746e 	ldrbvs	r7, [pc], #-1134	; 1088 <__core1_vectors-0xffef78>
    1084:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1088:	745f656c 	ldrbvc	r6, [pc], #-1388	; 1090 <__core1_vectors-0xffef70>
    108c:	4c410078 	mcrrmi	0, 7, r0, r1, cr8
    1090:	36315f54 	shsaxcc	r5, r1, r4
    1094:	5f303535 	svcpl	0x00303535
    1098:	4f464946 	svcmi	0x00464946
    109c:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    10a0:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    10a4:	5f58545f 	svcpl	0x0058545f
    10a8:	4f4d4c41 	svcmi	0x004d4c41
    10ac:	455f5453 	ldrbmi	r5, [pc, #-1107]	; c61 <__core1_vectors-0xfff39f>
    10b0:	5954504d 	ldmdbpl	r4, {r0, r2, r3, r6, ip, lr}^
    10b4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    10b8:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    10bc:	425f3035 	subsmi	r3, pc, #53	; 0x35
    10c0:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    10c4:	5f455441 	svcpl	0x00455441
    10c8:	30303633 	eorscc	r3, r0, r3, lsr r6
    10cc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    10d0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    10d4:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    10d8:	5f6f6669 	svcpl	0x006f6669
    10dc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    10e0:	61735f65 	cmnvs	r3, r5, ror #30
    10e4:	61006566 	tstvs	r0, r6, ror #10
    10e8:	315f746c 	cmpcc	pc, ip, ror #8
    10ec:	30353536 	eorscc	r3, r5, r6, lsr r5
    10f0:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    10f4:	656c5f6f 	strbvs	r5, [ip, #-3951]!	; 0xfffff091
    10f8:	5f6c6576 	svcpl	0x006c6576
    10fc:	5f746567 	svcpl	0x00746567
    1100:	61007872 	tstvs	r0, r2, ror r8
    1104:	00726464 	rsbseq	r6, r2, r4, ror #8
    1108:	5f544c41 	svcpl	0x00544c41
    110c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1110:	54535f30 	ldrbpl	r5, [r3], #-3888	; 0xfffff0d0
    1114:	4942504f 	stmdbmi	r2, {r0, r1, r2, r3, r6, ip, lr}^
    1118:	315f5354 	cmpcc	pc, r4, asr r3	; <UNPREDICTABLE>
    111c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1120:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1124:	535f3035 	cmppl	pc, #53	; 0x35
    1128:	42504f54 	subsmi	r4, r0, #84, 30	; 0x150
    112c:	5f535449 	svcpl	0x00535449
    1130:	4c410032 	mcrrmi	0, 3, r0, r1, cr2
    1134:	36315f54 	shsaxcc	r5, r1, r4
    1138:	5f303535 	svcpl	0x00303535
    113c:	4f464946 	svcmi	0x00464946
    1140:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1144:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    1148:	5f58545f 	svcpl	0x0058545f
    114c:	52415551 	subpl	r5, r1, #339738624	; 0x14400000
    1150:	5f524554 	svcpl	0x00524554
    1154:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
    1158:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    115c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1160:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    1164:	5f6f6669 	svcpl	0x006f6669
    1168:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    116c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1170:	0078725f 	rsbseq	r7, r8, pc, asr r2
    1174:	5f746c61 	svcpl	0x00746c61
    1178:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    117c:	72775f30 	rsbsvc	r5, r7, #48, 30	; 0xc0
    1180:	00657469 	rsbeq	r7, r5, r9, ror #8
    1184:	5f746c61 	svcpl	0x00746c61
    1188:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    118c:	6c665f30 	stclvs	15, cr5, [r6], #-192	; 0xffffff40
    1190:	6f63776f 	svcvs	0x0063776f
    1194:	6f72746e 	svcvs	0x0072746e
    1198:	69645f6c 	stmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    119c:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    11a0:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    11a4:	36315f74 	shsub16cc	r5, r1, r4
    11a8:	5f303535 	svcpl	0x00303535
    11ac:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    11b0:	6174735f 	cmnvs	r4, pc, asr r3
    11b4:	5f737574 	svcpl	0x00737574
    11b8:	00746567 	rsbseq	r6, r4, r7, ror #10
    11bc:	5f746c61 	svcpl	0x00746c61
    11c0:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    11c4:	6f6d5f30 	svcvs	0x006d5f30
    11c8:	5f6d6564 	svcpl	0x006d6564
    11cc:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    11d0:	645f656c 	ldrbvs	r6, [pc], #-1388	; 11d8 <__core1_vectors-0xffee28>
    11d4:	61007274 	tstvs	r0, r4, ror r2
    11d8:	725f746c 	subsvc	r7, pc, #108, 8	; 0x6c000000
    11dc:	5f646165 	svcpl	0x00646165
    11e0:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    11e4:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    11e8:	00726570 	rsbseq	r6, r2, r0, ror r5
    11ec:	5f746c61 	svcpl	0x00746c61
    11f0:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    11f4:	6e695f30 	mcrvs	15, 3, r5, cr9, cr0, {1}
    11f8:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
    11fc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1200:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1204:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1208:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    120c:	495f3035 	ldmdbmi	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1210:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    1214:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    1218:	4f4d5f53 	svcmi	0x004d5f53
    121c:	004d4544 	subeq	r4, sp, r4, asr #10
    1220:	5f746c61 	svcpl	0x00746c61
    1224:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1228:	6f6d5f30 	svcvs	0x006d5f30
    122c:	5f6d6564 	svcpl	0x006d6564
    1230:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    1234:	6f5f656c 	svcvs	0x005f656c
    1238:	00317475 	eorseq	r7, r1, r5, ror r4
    123c:	5f746c61 	svcpl	0x00746c61
    1240:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1244:	6f6d5f30 	svcvs	0x006d5f30
    1248:	5f6d6564 	svcpl	0x006d6564
    124c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    1250:	6f5f656c 	svcvs	0x005f656c
    1254:	00327475 	eorseq	r7, r2, r5, ror r4
    1258:	5f746c61 	svcpl	0x00746c61
    125c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1260:	65695f30 	strbvs	r5, [r9, #-3888]!	; 0xfffff0d0
    1264:	616d5f72 	smcvs	54770	; 0xd5f2
    1268:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
    126c:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1270:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    1274:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    1278:	36315f54 	shsaxcc	r5, r1, r4
    127c:	5f303535 	svcpl	0x00303535
    1280:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    1284:	53544942 	cmppl	r4, #1081344	; 0x108000
    1288:	6100655f 	tstvs	r0, pc, asr r5
    128c:	315f746c 	cmpcc	pc, ip, ror #8
    1290:	30353536 	eorscc	r3, r5, r6, lsr r5
    1294:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1298:	616e655f 	cmnvs	lr, pc, asr r5
    129c:	5f656c62 	svcpl	0x00656c62
    12a0:	61007874 	tstvs	r0, r4, ror r8
    12a4:	315f746c 	cmpcc	pc, ip, ror #8
    12a8:	30353536 	eorscc	r3, r5, r6, lsr r5
    12ac:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    12b0:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    12b4:	36315f74 	shsub16cc	r5, r1, r4
    12b8:	5f303535 	svcpl	0x00303535
    12bc:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    12c0:	6572625f 	ldrbvs	r6, [r2, #-607]!	; 0xfffffda1
    12c4:	645f6b61 	ldrbvs	r6, [pc], #-2913	; 12cc <__core1_vectors-0xffed34>
    12c8:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    12cc:	6100656c 	tstvs	r0, ip, ror #10
    12d0:	315f746c 	cmpcc	pc, ip, ror #8
    12d4:	30353536 	eorscc	r3, r5, r6, lsr r5
    12d8:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    12dc:	69735f6f 	ldmdbvs	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    12e0:	675f657a 			; <UNDEFINED> instruction: 0x675f657a
    12e4:	745f7465 	ldrbvc	r7, [pc], #-1125	; 12ec <__core1_vectors-0xffed14>
    12e8:	4c410078 	mcrrmi	0, 7, r0, r1, cr8
    12ec:	36315f54 	shsaxcc	r5, r1, r4
    12f0:	5f303535 	svcpl	0x00303535
    12f4:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    12f8:	53544942 	cmppl	r4, #1081344	; 0x108000
    12fc:	4100745f 	tstmi	r0, pc, asr r4
    1300:	315f544c 	cmpcc	pc, ip, asr #8
    1304:	30353536 	eorscc	r3, r5, r6, lsr r5
    1308:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    130c:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1310:	30355f45 	eorscc	r5, r5, r5, asr #30
    1314:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1318:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    131c:	465f3035 			; <UNDEFINED> instruction: 0x465f3035
    1320:	5f4f4649 	svcpl	0x004f4649
    1324:	47495254 	smlsldmi	r5, r9, r4, r2
    1328:	5f524547 	svcpl	0x00524547
    132c:	485f5854 	ldmdami	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
    1330:	5f464c41 	svcpl	0x00464c41
    1334:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
    1338:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    133c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1340:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1344:	6d5f7265 	lfmvs	f7, 2, [pc, #-404]	; 11b8 <__core1_vectors-0xffee48>
    1348:	5f6b7361 	svcpl	0x006b7361
    134c:	5f726c63 	svcpl	0x00726c63
    1350:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1354:	41007265 	tstmi	r0, r5, ror #4
    1358:	315f544c 	cmpcc	pc, ip, asr #8
    135c:	30353536 	eorscc	r3, r5, r6, lsr r5
    1360:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
    1364:	52545f4f 	subspl	r5, r4, #316	; 0x13c
    1368:	45474749 	strbmi	r4, [r7, #-1865]	; 0xfffff8b7
    136c:	58525f52 	ldmdapl	r2, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1370:	4155515f 	cmpmi	r5, pc, asr r1
    1374:	52455452 	subpl	r5, r5, #1375731712	; 0x52000000
    1378:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
    137c:	6c61004c 	stclvs	0, cr0, [r1], #-304	; 0xfffffed0
    1380:	36315f74 	shsub16cc	r5, r1, r4
    1384:	5f303535 	svcpl	0x00303535
    1388:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    138c:	69645f6d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1390:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1394:	756f5f65 	strbvc	r5, [pc, #-3941]!	; 437 <__core1_vectors-0xfffbc9>
    1398:	61003174 	tstvs	r0, r4, ror r1
    139c:	315f746c 	cmpcc	pc, ip, ror #8
    13a0:	30353536 	eorscc	r3, r5, r6, lsr r5
    13a4:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 13ac <__core1_vectors-0xffec54>
    13a8:	645f6d65 	ldrbvs	r6, [pc], #-3429	; 13b0 <__core1_vectors-0xffec50>
    13ac:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    13b0:	6f5f656c 	svcvs	0x005f656c
    13b4:	00327475 	eorseq	r7, r2, r5, ror r4
    13b8:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    13bc:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    13c0:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
    13c4:	2f72676d 	svccs	0x0072676d
    13c8:	5f746c61 	svcpl	0x00746c61
    13cc:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    13d0:	61755f30 	cmnvs	r5, r0, lsr pc
    13d4:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
    13d8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    13dc:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    13e0:	445f3035 	ldrbmi	r3, [pc], #-53	; 13e8 <__core1_vectors-0xffec18>
    13e4:	43495645 	movtmi	r5, #38469	; 0x9645
    13e8:	4c415f45 	mcrrmi	15, 4, r5, r1, cr5
    13ec:	41524554 	cmpmi	r2, r4, asr r5
    13f0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    13f4:	555f3035 	ldrbpl	r3, [pc, #-53]	; 13c7 <__core1_vectors-0xffec39>
    13f8:	00545241 	subseq	r5, r4, r1, asr #4
    13fc:	5f544c41 	svcpl	0x00544c41
    1400:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1404:	41445f30 	cmpmi	r4, r0, lsr pc
    1408:	49424154 	stmdbmi	r2, {r2, r4, r6, r8, lr}^
    140c:	355f5354 	ldrbcc	r5, [pc, #-852]	; 10c0 <__core1_vectors-0xffef40>
    1410:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1414:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1418:	445f3035 	ldrbmi	r3, [pc], #-53	; 1420 <__core1_vectors-0xffebe0>
    141c:	42415441 	submi	r5, r1, #1090519040	; 0x41000000
    1420:	5f535449 	svcpl	0x00535449
    1424:	4c410036 	mcrrmi	0, 3, r0, r1, cr6
    1428:	36315f54 	shsaxcc	r5, r1, r4
    142c:	5f303535 	svcpl	0x00303535
    1430:	41544144 	cmpmi	r4, r4, asr #2
    1434:	53544942 	cmppl	r4, #1081344	; 0x108000
    1438:	4100375f 	tstmi	r0, pc, asr r7
    143c:	315f544c 	cmpcc	pc, ip, asr #8
    1440:	30353536 	eorscc	r3, r5, r6, lsr r5
    1444:	5441445f 	strbpl	r4, [r1], #-1119	; 0xfffffba1
    1448:	54494241 	strbpl	r4, [r9], #-577	; 0xfffffdbf
    144c:	00385f53 	eorseq	r5, r8, r3, asr pc
    1450:	5f544c41 	svcpl	0x00544c41
    1454:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1458:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    145c:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 1464 <__core1_vectors-0xffeb9c>
    1460:	47474952 	smlsldmi	r4, r7, r2, r9
    1464:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
    1468:	00745f58 	rsbseq	r5, r4, r8, asr pc
    146c:	5f746c61 	svcpl	0x00746c61
    1470:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1474:	6c665f30 	stclvs	15, cr5, [r6], #-192	; 0xffffff40
    1478:	6f63776f 	svcvs	0x0063776f
    147c:	6f72746e 	svcvs	0x0072746e
    1480:	6e655f6c 	cdpvs	15, 6, cr5, cr5, cr12, {3}
    1484:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1488:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    148c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1490:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    1494:	5f6f6669 	svcpl	0x006f6669
    1498:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0xfffffa94
    149c:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
    14a0:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    14a4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    14a8:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    14ac:	6d5f3035 	ldclvs	0, cr3, [pc, #-212]	; 13e0 <__core1_vectors-0xffec20>
    14b0:	6d65646f 	cfstrdvs	mvd6, [r5, #-444]!	; 0xfffffe44
    14b4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    14b8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    14bc:	7374725f 	cmnvc	r4, #-268435451	; 0xf0000005
    14c0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    14c4:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    14c8:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    14cc:	5f6f6669 	svcpl	0x006f6669
    14d0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    14d4:	4100656c 	tstmi	r0, ip, ror #10
    14d8:	315f544c 	cmpcc	pc, ip, asr #8
    14dc:	30353536 	eorscc	r3, r5, r6, lsr r5
    14e0:	5441445f 	strbpl	r4, [r1], #-1119	; 0xfffffba1
    14e4:	54494241 	strbpl	r4, [r9], #-577	; 0xfffffdbf
    14e8:	00655f53 	rsbeq	r5, r5, r3, asr pc
    14ec:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0xfffffa94
    14f0:	6c63006c 	stclvs	0, cr0, [r3], #-432	; 0xfffffe50
    14f4:	5f6b636f 	svcpl	0x006b636f
    14f8:	71657266 	cmnvc	r5, r6, ror #4
    14fc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1500:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1504:	6c5f3035 	mrrcvs	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    1508:	5f656e69 	svcpl	0x00656e69
    150c:	61657262 	cmnvs	r5, r2, ror #4
    1510:	6e655f6b 	cdpvs	15, 6, cr5, cr5, cr11, {3}
    1514:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1518:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    151c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1520:	445f3035 	ldrbmi	r3, [pc], #-53	; 1528 <__core1_vectors-0xffead8>
    1524:	42415441 	submi	r5, r1, #1090519040	; 0x41000000
    1528:	5f535449 	svcpl	0x00535449
    152c:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    1530:	36315f74 	shsub16cc	r5, r1, r4
    1534:	5f303535 	svcpl	0x00303535
    1538:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    153c:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
    1540:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1544:	7374725f 	cmnvc	r4, #-268435451	; 0xf0000005
    1548:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    154c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1550:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    1554:	5f6f6669 	svcpl	0x006f6669
    1558:	61656c63 	cmnvs	r5, r3, ror #24
    155c:	78725f72 	ldmdavc	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1560:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1564:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1568:	425f3035 	subsmi	r3, pc, #53	; 0x35
    156c:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1570:	5f455441 	svcpl	0x00455441
    1574:	30303237 	eorscc	r3, r0, r7, lsr r2
    1578:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    157c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1580:	425f3035 	subsmi	r3, pc, #53	; 0x35
    1584:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1588:	5f455441 	svcpl	0x00455441
    158c:	30303639 	eorscc	r3, r0, r9, lsr r6
    1590:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1594:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1598:	505f3035 	subspl	r3, pc, r5, lsr r0	; <UNPREDICTABLE>
    159c:	54495241 	strbpl	r5, [r9], #-577	; 0xfffffdbf
    15a0:	49445f59 	stmdbmi	r4, {r0, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    15a4:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
    15a8:	74690045 	strbtvc	r0, [r9], #-69	; 0xffffffbb
    15ac:	41006d65 	tstmi	r0, r5, ror #26
    15b0:	315f544c 	cmpcc	pc, ip, asr #8
    15b4:	30353536 	eorscc	r3, r5, r6, lsr r5
    15b8:	5645445f 			; <UNDEFINED> instruction: 0x5645445f
    15bc:	5f454349 	svcpl	0x00454349
    15c0:	46434f53 			; <UNDEFINED> instruction: 0x46434f53
    15c4:	5f414750 	svcpl	0x00414750
    15c8:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    15cc:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
    15d0:	36315f54 	shsaxcc	r5, r1, r4
    15d4:	5f303535 	svcpl	0x00303535
    15d8:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    15dc:	535f4543 	cmppl	pc, #281018368	; 0x10c00000
    15e0:	5046434f 	subpl	r4, r6, pc, asr #6
    15e4:	555f4147 	ldrbpl	r4, [pc, #-327]	; 14a5 <__core1_vectors-0xffeb5b>
    15e8:	31545241 	cmpcc	r4, r1, asr #4
    15ec:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    15f0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    15f4:	425f3035 	subsmi	r3, pc, #53	; 0x35
    15f8:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    15fc:	5f455441 	svcpl	0x00455441
    1600:	30303231 	eorscc	r3, r0, r1, lsr r2
    1604:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1608:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    160c:	495f3035 	ldmdbmi	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1610:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    1614:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    1618:	4f4e5f53 	svcmi	0x004e5f53
    161c:	6100454e 	tstvs	r0, lr, asr #10
    1620:	315f746c 	cmpcc	pc, ip, ror #8
    1624:	30353536 	eorscc	r3, r5, r6, lsr r5
    1628:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    162c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1630:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1634:	6e696c5f 	mcrvs	12, 3, r6, cr9, cr15, {2}
    1638:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    163c:	36315f54 	shsaxcc	r5, r1, r4
    1640:	5f303535 	svcpl	0x00303535
    1644:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1648:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    164c:	3030365f 	eorscc	r3, r0, pc, asr r6
    1650:	72617000 	rsbvc	r7, r1, #0
    1654:	00797469 	rsbseq	r7, r9, r9, ror #8
    1658:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    165c:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1660:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1664:	5f544c41 	svcpl	0x00544c41
    1668:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    166c:	41505f30 	cmpmi	r0, r0, lsr pc
    1670:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    1674:	44444f5f 	strbmi	r4, [r4], #-3935	; 0xfffff0a1
    1678:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    167c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1680:	6d5f3035 	ldclvs	0, cr3, [pc, #-212]	; 15b4 <__core1_vectors-0xffea4c>
    1684:	6d65646f 	cfstrdvs	mvd6, [r5, #-444]!	; 0xfffffe44
    1688:	6174735f 	cmnvs	r4, pc, asr r3
    168c:	5f737574 	svcpl	0x00737574
    1690:	00746567 	rsbseq	r6, r4, r7, ror #10
    1694:	5f544c41 	svcpl	0x00544c41
    1698:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    169c:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    16a0:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 16a8 <__core1_vectors-0xffe958>
    16a4:	47474952 	smlsldmi	r4, r7, r2, r9
    16a8:	545f5245 	ldrbpl	r5, [pc], #-581	; 16b0 <__core1_vectors-0xffe950>
    16ac:	00655f58 	rsbeq	r5, r5, r8, asr pc
    16b0:	5f544c41 	svcpl	0x00544c41
    16b4:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    16b8:	41425f30 	cmpmi	r2, r0, lsr pc
    16bc:	41524455 	cmpmi	r2, r5, asr r4
    16c0:	375f4554 			; <UNDEFINED> instruction: 0x375f4554
    16c4:	6c610035 	stclvs	0, cr0, [r1], #-212	; 0xffffff2c
    16c8:	36315f74 	shsub16cc	r5, r1, r4
    16cc:	5f303535 	svcpl	0x00303535
    16d0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    16d4:	69645f65 	stmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    16d8:	6f736976 	svcvs	0x00736976
    16dc:	65685f72 	strbvs	r5, [r8, #-3954]!	; 0xfffff08e
    16e0:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
    16e4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    16e8:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    16ec:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    16f0:	5f6f6669 	svcpl	0x006f6669
    16f4:	67697274 			; <UNDEFINED> instruction: 0x67697274
    16f8:	5f726567 	svcpl	0x00726567
    16fc:	5f746573 	svcpl	0x00746573
    1700:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
    1704:	73697669 	cmnvc	r9, #110100480	; 0x6900000
    1708:	4100726f 	tstmi	r0, pc, ror #4
    170c:	315f544c 	cmpcc	pc, ip, asr #8
    1710:	30353536 	eorscc	r3, r5, r6, lsr r5
    1714:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
    1718:	52545f4f 	subspl	r5, r4, #316	; 0x13c
    171c:	45474749 	strbmi	r4, [r7, #-1865]	; 0xfffff8b7
    1720:	58545f52 	ldmdapl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1724:	6100745f 	tstvs	r0, pc, asr r4
    1728:	315f746c 	cmpcc	pc, ip, ror #8
    172c:	30353536 	eorscc	r3, r5, r6, lsr r5
    1730:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1734:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1738:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    173c:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 1744 <__core1_vectors-0xffe8bc>
    1740:	41006d65 	tstmi	r0, r5, ror #26
    1744:	315f544c 	cmpcc	pc, ip, asr #8
    1748:	30353536 	eorscc	r3, r5, r6, lsr r5
    174c:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1750:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1754:	34325f45 	ldrtcc	r5, [r2], #-3909	; 0xfffff0bb
    1758:	61003030 	tstvs	r0, r0, lsr r0
    175c:	315f746c 	cmpcc	pc, ip, ror #8
    1760:	30353536 	eorscc	r3, r5, r6, lsr r5
    1764:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    1768:	69645f6f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    176c:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1770:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    1774:	36315f54 	shsaxcc	r5, r1, r4
    1778:	5f303535 	svcpl	0x00303535
    177c:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1780:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    1784:	4100655f 	tstmi	r0, pc, asr r5
    1788:	315f544c 	cmpcc	pc, ip, asr #8
    178c:	30353536 	eorscc	r3, r5, r6, lsr r5
    1790:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1794:	4154535f 	cmpmi	r4, pc, asr r3
    1798:	5f535554 	svcpl	0x00535554
    179c:	445f5852 	ldrbmi	r5, [pc], #-2130	; 17a4 <__core1_vectors-0xffe85c>
    17a0:	00415441 	subeq	r5, r1, r1, asr #8
    17a4:	5f746c61 	svcpl	0x00746c61
    17a8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    17ac:	69665f30 	stmdbvs	r6!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    17b0:	745f6f66 	ldrbvc	r6, [pc], #-3942	; 17b8 <__core1_vectors-0xffe848>
    17b4:	67676972 			; <UNDEFINED> instruction: 0x67676972
    17b8:	735f7265 	cmpvc	pc, #1342177286	; 0x50000006
    17bc:	745f7465 	ldrbvc	r7, [pc], #-1125	; 17c4 <__core1_vectors-0xffe83c>
    17c0:	6c610078 	stclvs	0, cr0, [r1], #-480	; 0xfffffe20
    17c4:	36315f74 	shsub16cc	r5, r1, r4
    17c8:	5f303535 	svcpl	0x00303535
    17cc:	6f666966 	svcvs	0x00666966
    17d0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    17d4:	615f7261 	cmpvs	pc, r1, ror #4
    17d8:	41006c6c 	tstmi	r0, ip, ror #24
    17dc:	315f544c 	cmpcc	pc, ip, asr #8
    17e0:	30353536 	eorscc	r3, r5, r6, lsr r5
    17e4:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    17e8:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    17ec:	38345f45 	ldmdacc	r4!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    17f0:	61003030 	tstvs	r0, r0, lsr r0
    17f4:	315f746c 	cmpcc	pc, ip, ror #8
    17f8:	30353536 	eorscc	r3, r5, r6, lsr r5
    17fc:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1800:	616e655f 	cmnvs	lr, pc, asr r5
    1804:	5f656c62 	svcpl	0x00656c62
    1808:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    180c:	425f006d 	subsmi	r0, pc, #109	; 0x6d
    1810:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
    1814:	5f746c61 	svcpl	0x00746c61
    1818:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    181c:	65725f30 	ldrbvs	r5, [r2, #-3888]!	; 0xfffff0d0
    1820:	00746573 	rsbseq	r6, r4, r3, ror r5
    1824:	5f746c61 	svcpl	0x00746c61
    1828:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    182c:	6f6c5f30 	svcvs	0x006c5f30
    1830:	6162706f 	cmnvs	r2, pc, rrx
    1834:	645f6b63 	ldrbvs	r6, [pc], #-2915	; 183c <__core1_vectors-0xffe7c4>
    1838:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    183c:	6100656c 	tstvs	r0, ip, ror #10
    1840:	315f746c 	cmpcc	pc, ip, ror #8
    1844:	30353536 	eorscc	r3, r5, r6, lsr r5
    1848:	696e755f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    184c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1850:	5f746c61 	svcpl	0x00746c61
    1854:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1858:	69665f30 	stmdbvs	r6!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    185c:	775f6f66 	ldrbvc	r6, [pc, -r6, ror #30]
    1860:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1864:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1868:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    186c:	425f3035 	subsmi	r3, pc, #53	; 0x35
    1870:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1874:	5f455441 	svcpl	0x00455441
    1878:	30383832 	eorscc	r3, r8, r2, lsr r8
    187c:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
    1880:	36315f54 	shsaxcc	r5, r1, r4
    1884:	5f303535 	svcpl	0x00303535
    1888:	4f464946 	svcmi	0x00464946
    188c:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1890:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    1894:	5f58525f 	svcpl	0x0058525f
    1898:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    189c:	36315f74 	shsub16cc	r5, r1, r4
    18a0:	5f303535 	svcpl	0x00303535
    18a4:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    18a8:	69645f6d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    18ac:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    18b0:	74645f65 	strbtvc	r5, [r4], #-3941	; 0xfffff09b
    18b4:	6c610072 	stclvs	0, cr0, [r1], #-456	; 0xfffffe38
    18b8:	36315f74 	shsub16cc	r5, r1, r4
    18bc:	5f303535 	svcpl	0x00303535
    18c0:	5f72636d 	svcpl	0x0072636d
    18c4:	6b73616d 	blvs	1cd9e80 <__end__+0xcbde60>
    18c8:	726c635f 	rsbvc	r6, ip, #2080374785	; 0x7c000001
    18cc:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    18d0:	00726570 	rsbseq	r6, r2, r0, ror r5
    18d4:	5f746c61 	svcpl	0x00746c61
    18d8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    18dc:	6e695f30 	mcrvs	15, 3, r5, cr9, cr0, {1}
    18e0:	69645f74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    18e4:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    18e8:	6c615f65 	stclvs	15, cr5, [r1], #-404	; 0xfffffe6c
    18ec:	6c61006c 	stclvs	0, cr0, [r1], #-432	; 0xfffffe50
    18f0:	36315f74 	shsub16cc	r5, r1, r4
    18f4:	5f303535 	svcpl	0x00303535
    18f8:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    18fc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1900:	5f676966 	svcpl	0x00676966
    1904:	00746573 	rsbseq	r6, r4, r3, ror r5
    1908:	5f746c61 	svcpl	0x00746c61
    190c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1910:	636d5f30 	cmnvs	sp, #48, 30	; 0xc0
    1914:	616d5f72 	smcvs	54770	; 0xd5f2
    1918:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
    191c:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1920:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    1924:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    1928:	36315f54 	shsaxcc	r5, r1, r4
    192c:	5f303535 	svcpl	0x00303535
    1930:	5f544e49 	svcpl	0x00544e49
    1934:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    1938:	4c5f5355 	mrrcmi	3, 5, r5, pc, cr5	; <UNPREDICTABLE>
    193c:	00454e49 	subeq	r4, r5, r9, asr #28
    1940:	5f544c41 	svcpl	0x00544c41
    1944:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1948:	4e495f30 	mcrmi	15, 2, r5, cr9, cr0, {1}
    194c:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xfffff0ac
    1950:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    1954:	5f58545f 	svcpl	0x0058545f
    1958:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
    195c:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    1960:	00726566 	rsbseq	r6, r2, r6, ror #10
    1964:	5f544c41 	svcpl	0x00544c41
    1968:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    196c:	41425f30 	cmpmi	r2, r0, lsr pc
    1970:	41524455 	cmpmi	r2, r5, asr r4
    1974:	315f4554 	cmpcc	pc, r4, asr r5	; <UNPREDICTABLE>
    1978:	30323531 	eorscc	r3, r2, r1, lsr r5
    197c:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    1980:	36315f74 	shsub16cc	r5, r1, r4
    1984:	5f303535 	svcpl	0x00303535
    1988:	5f746e69 	svcpl	0x00746e69
    198c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    1990:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
    1994:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1998:	5f746c61 	svcpl	0x00746c61
    199c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    19a0:	6e655f30 	mcrvs	15, 3, r5, cr5, cr0, {1}
    19a4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    19a8:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    19ac:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    19b0:	725f3035 	subsvc	r3, pc, #53	; 0x35
    19b4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    19b8:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    19bc:	00726570 	rsbseq	r6, r2, r0, ror r5
    19c0:	5f544c41 	svcpl	0x00544c41
    19c4:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    19c8:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    19cc:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 19d4 <__core1_vectors-0xffe62c>
    19d0:	47474952 	smlsldmi	r4, r7, r2, r9
    19d4:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
    19d8:	41485f58 	cmpmi	r8, r8, asr pc
    19dc:	465f464c 	ldrbmi	r4, [pc], -ip, asr #12
    19e0:	004c4c55 	subeq	r4, ip, r5, asr ip
    19e4:	5f544c41 	svcpl	0x00544c41
    19e8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    19ec:	41425f30 	cmpmi	r2, r0, lsr pc
    19f0:	41524455 	cmpmi	r2, r5, asr r4
    19f4:	395f4554 	ldmdbcc	pc, {r2, r4, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    19f8:	73003030 	movwvc	r3, #48	; 0x30
    19fc:	616d7465 	cmnvs	sp, r5, ror #8
    1a00:	61006b73 	tstvs	r0, r3, ror fp
    1a04:	315f746c 	cmpcc	pc, ip, ror #8
    1a08:	30353536 	eorscc	r3, r5, r6, lsr r5
    1a0c:	7561625f 	strbvc	r6, [r1, #-607]!	; 0xfffffda1
    1a10:	74617264 	strbtvc	r7, [r1], #-612	; 0xfffffd9c
    1a14:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xfffff09b
    1a18:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    1a1c:	36315f54 	shsaxcc	r5, r1, r4
    1a20:	5f303535 	svcpl	0x00303535
    1a24:	49524150 	ldmdbmi	r2, {r4, r6, r8, lr}^
    1a28:	455f5954 	ldrbmi	r5, [pc, #-2388]	; 10dc <__core1_vectors-0xffef24>
    1a2c:	004e4556 	subeq	r4, lr, r6, asr r5
    1a30:	5f544c41 	svcpl	0x00544c41
    1a34:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1a38:	41505f30 	cmpmi	r0, r0, lsr pc
    1a3c:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    1a40:	4100655f 	tstmi	r0, pc, asr r5
    1a44:	315f544c 	cmpcc	pc, ip, asr #8
    1a48:	30353536 	eorscc	r3, r5, r6, lsr r5
    1a4c:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
    1a50:	52545f4f 	subspl	r5, r4, #316	; 0x13c
    1a54:	45474749 	strbmi	r4, [r7, #-1865]	; 0xfffff8b7
    1a58:	58525f52 	ldmdapl	r2, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1a5c:	594e415f 	stmdbpl	lr, {r0, r1, r2, r3, r4, r6, r8, lr}^
    1a60:	6f747300 	svcvs	0x00747300
    1a64:	74696270 	strbtvc	r6, [r9], #-624	; 0xfffffd90
    1a68:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
    1a6c:	36315f54 	shsaxcc	r5, r1, r4
    1a70:	5f303535 	svcpl	0x00303535
    1a74:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1a78:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    1a7c:	3239315f 	eorscc	r3, r9, #-1073741801	; 0xc0000017
    1a80:	41003030 	tstmi	r0, r0, lsr r0
    1a84:	315f544c 	cmpcc	pc, ip, asr #8
    1a88:	30353536 	eorscc	r3, r5, r6, lsr r5
    1a8c:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1a90:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1a94:	38335f45 	ldmdacc	r3!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    1a98:	00303034 	eorseq	r3, r0, r4, lsr r0
    1a9c:	5f746c61 	svcpl	0x00746c61
    1aa0:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1aa4:	69645f30 	stmdbvs	r4!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    1aa8:	6f736976 	svcvs	0x00736976
    1aac:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
    1ab0:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    1ab4:	36315f54 	shsaxcc	r5, r1, r4
    1ab8:	5f303535 	svcpl	0x00303535
    1abc:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1ac0:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    1ac4:	3637355f 			; <UNDEFINED> instruction: 0x3637355f
    1ac8:	61003030 	tstvs	r0, r0, lsr r0
    1acc:	315f746c 	cmpcc	pc, ip, ror #8
    1ad0:	30353536 	eorscc	r3, r5, r6, lsr r5
    1ad4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1ad8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1adc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ae0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1ae4:	445f3035 	ldrbmi	r3, [pc], #-53	; 1aec <__core1_vectors-0xffe514>
    1ae8:	43495645 	movtmi	r5, #38469	; 0x9645
    1aec:	00655f45 	rsbeq	r5, r5, r5, asr #30
    1af0:	61746164 	cmnvs	r4, r4, ror #2
    1af4:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1af8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1afc:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1b00:	505f3035 	subspl	r3, pc, r5, lsr r0	; <UNPREDICTABLE>
    1b04:	54495241 	strbpl	r5, [r9], #-577	; 0xfffffdbf
    1b08:	00745f59 	rsbseq	r5, r4, r9, asr pc
    1b0c:	5f544c41 	svcpl	0x00544c41
    1b10:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1b14:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    1b18:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 1b20 <__core1_vectors-0xffe4e0>
    1b1c:	47474952 	smlsldmi	r4, r7, r2, r9
    1b20:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
    1b24:	4c415f58 	mcrrmi	15, 5, r5, r1, cr8
    1b28:	54534f4d 	ldrbpl	r4, [r3], #-3917	; 0xfffff0b3
    1b2c:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
    1b30:	4c41004c 	mcrrmi	0, 4, r0, r1, cr12
    1b34:	36315f54 	shsaxcc	r5, r1, r4
    1b38:	5f303535 	svcpl	0x00303535
    1b3c:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1b40:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    1b44:	3030335f 	eorscc	r3, r0, pc, asr r3
    1b48:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1b4c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1b50:	495f3035 	ldmdbmi	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1b54:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    1b58:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    1b5c:	00655f53 	rsbeq	r5, r5, r3, asr pc
    1b60:	5f544c41 	svcpl	0x00544c41
    1b64:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1b68:	45445f30 	strbmi	r5, [r4, #-3888]	; 0xfffff0d0
    1b6c:	45434956 	strbmi	r4, [r3, #-2390]	; 0xfffff6aa
    1b70:	4100745f 	tstmi	r0, pc, asr r4
    1b74:	315f544c 	cmpcc	pc, ip, asr #8
    1b78:	30353536 	eorscc	r3, r5, r6, lsr r5
    1b7c:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1b80:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1b84:	35315f45 	ldrcc	r5, [r1, #-3909]!	; 0xfffff0bb
    1b88:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
    1b8c:	36315f54 	shsaxcc	r5, r1, r4
    1b90:	5f303535 	svcpl	0x00303535
    1b94:	444e4148 	strbmi	r4, [lr], #-328	; 0xfffffeb8
    1b98:	735f454c 	cmpvc	pc, #76, 10	; 0x13000000
    1b9c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ba0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1ba4:	485f3035 	ldmdami	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1ba8:	4c444e41 	mcrrmi	14, 4, r4, r4, cr1
    1bac:	00745f45 	rsbseq	r5, r4, r5, asr #30
    1bb0:	5f544c41 	svcpl	0x00544c41
    1bb4:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1bb8:	4e495f30 	mcrmi	15, 2, r5, cr9, cr0, {1}
    1bbc:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xfffff0ac
    1bc0:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    1bc4:	4100745f 	tstmi	r0, pc, asr r4
    1bc8:	315f544c 	cmpcc	pc, ip, asr #8
    1bcc:	30353536 	eorscc	r3, r5, r6, lsr r5
    1bd0:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1bd4:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1bd8:	38315f45 	ldmdacc	r1!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    1bdc:	61003030 	tstvs	r0, r0, lsr r0
    1be0:	315f746c 	cmpcc	pc, ip, ror #8
    1be4:	30353536 	eorscc	r3, r5, r6, lsr r5
    1be8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1bec:	616e655f 	cmnvs	lr, pc, asr r5
    1bf0:	5f656c62 	svcpl	0x00656c62
    1bf4:	41007872 	tstmi	r0, r2, ror r8
    1bf8:	315f544c 	cmpcc	pc, ip, asr #8
    1bfc:	30353536 	eorscc	r3, r5, r6, lsr r5
    1c00:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1c04:	4154535f 	cmpmi	r4, pc, asr r3
    1c08:	5f535554 	svcpl	0x00535554
    1c0c:	545f5852 	ldrbpl	r5, [pc], #-2130	; 1c14 <__core1_vectors-0xffe3ec>
    1c10:	4f454d49 	svcmi	0x00454d49
    1c14:	61005455 	tstvs	r0, r5, asr r4
    1c18:	315f746c 	cmpcc	pc, ip, ror #8
    1c1c:	30353536 	eorscc	r3, r5, r6, lsr r5
    1c20:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1c24:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1c28:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1c2c:	0078725f 	rsbseq	r7, r8, pc, asr r2
    1c30:	5f746c61 	svcpl	0x00746c61
    1c34:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1c38:	65725f30 	ldrbvs	r5, [r2, #-3888]!	; 0xfffff0d0
    1c3c:	41006461 	tstmi	r0, r1, ror #8
    1c40:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1b18 <__core1_vectors-0xffe4e8>
    1c44:	415f554d 	cmpmi	pc, sp, asr #10
    1c48:	5f525454 	svcpl	0x00525454
    1c4c:	575f4257 			; <UNDEFINED> instruction: 0x575f4257
    1c50:	4c410054 	mcrrmi	0, 5, r0, r1, cr4
    1c54:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    1c58:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    1c5c:	575f5254 			; <UNDEFINED> instruction: 0x575f5254
    1c60:	74740054 	ldrbtvc	r0, [r4], #-84	; 0xffffffac
    1c64:	645f3162 	ldrbvs	r3, [pc], #-354	; 1c6c <__core1_vectors-0xffe394>
    1c68:	00637365 	rsbeq	r7, r3, r5, ror #6
    1c6c:	6c746373 	ldclvs	3, cr6, [r4], #-460	; 0xfffffe34
    1c70:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
    1c74:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xfffff08c
    1c78:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
    1c7c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1c80:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    1c84:	6274745f 	rsbsvs	r7, r4, #1593835520	; 0x5f000000
    1c88:	6e695f32 	mcrvs	15, 3, r5, cr9, cr2, {1}
    1c8c:	61007469 	tstvs	r0, r9, ror #8
    1c90:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1ae8 <__core1_vectors-0xffe518>
    1c94:	545f756d 	ldrbpl	r7, [pc], #-1389	; 1c9c <__core1_vectors-0xffe364>
    1c98:	31524254 	cmpcc	r2, r4, asr r2
    1c9c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1ca0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ca4:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1ca8:	5f50415f 	svcpl	0x0050415f
    1cac:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
    1cb0:	4343415f 	movtmi	r4, #12639	; 0x315f
    1cb4:	00535345 	subseq	r5, r3, r5, asr #6
    1cb8:	5f544c41 	svcpl	0x00544c41
    1cbc:	5f554d4d 	svcpl	0x00554d4d
    1cc0:	5f504144 	svcpl	0x00504144
    1cc4:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    1cc8:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    1ccc:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    1cd0:	4e5f5254 	mrcmi	2, 2, r5, cr15, cr4, {2}
    1cd4:	42575f43 	subsmi	r5, r7, #268	; 0x10c
    1cd8:	4c410041 	mcrrmi	0, 4, r0, r1, cr1
    1cdc:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    1ce0:	41445f55 	cmpmi	r4, r5, asr pc
    1ce4:	00745f50 	rsbseq	r5, r4, r0, asr pc
    1ce8:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    1cec:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1cf0:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
    1cf4:	2f72676d 	svccs	0x0072676d
    1cf8:	5f746c61 	svcpl	0x00746c61
    1cfc:	2e756d6d 	cdpcs	13, 7, cr6, cr5, cr13, {3}
    1d00:	6c610063 	stclvs	0, cr0, [r1], #-396	; 0xfffffe74
    1d04:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1d08:	61765f75 	cmnvs	r6, r5, ror pc
    1d0c:	6170735f 	cmnvs	r0, pc, asr r3
    1d10:	655f6563 	ldrbvs	r6, [pc, #-1379]	; 17b5 <__core1_vectors-0xffe84b>
    1d14:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1d18:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    1d1c:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1d20:	61765f75 	cmnvs	r6, r5, ror pc
    1d24:	6170735f 	cmnvs	r0, pc, asr r3
    1d28:	675f6563 	ldrbvs	r6, [pc, -r3, ror #10]
    1d2c:	735f6e65 	cmpvc	pc, #1616	; 0x650
    1d30:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    1d34:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
    1d38:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1d3c:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1d40:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1d44:	42575f52 	subsmi	r5, r7, #328	; 0x148
    1d48:	42575f41 	subsmi	r5, r7, #260	; 0x104
    1d4c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1d50:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1d54:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1d58:	42575f52 	subsmi	r5, r7, #328	; 0x148
    1d5c:	54575f41 	ldrbpl	r5, [r7], #-3905	; 0xfffff0bf
    1d60:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1d64:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1d68:	5041445f 	subpl	r4, r1, pc, asr r4
    1d6c:	494c435f 	stmdbmi	ip, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    1d70:	00544e45 	subseq	r4, r4, r5, asr #28
    1d74:	72627474 	rsbvc	r7, r2, #116, 8	; 0x74000000
    1d78:	65675f30 	strbvs	r5, [r7, #-3888]!	; 0xfffff0d0
    1d7c:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xfffff08c
    1d80:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
    1d84:	67657300 	strbvs	r7, [r5, -r0, lsl #6]!
    1d88:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1d8c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1d90:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    1d94:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    1d98:	735f3052 	cmpvc	pc, #82	; 0x52
    1d9c:	61007465 	tstvs	r0, r5, ror #8
    1da0:	00646973 	rsbeq	r6, r4, r3, ror r9
    1da4:	5f746c61 	svcpl	0x00746c61
    1da8:	5f756d6d 	svcpl	0x00756d6d
    1dac:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
    1db0:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    1db4:	6f74735f 	svcvs	0x0074735f
    1db8:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    1dbc:	7165725f 	cmnvc	r5, pc, asr r2
    1dc0:	65726975 	ldrbvs	r6, [r2, #-2421]!	; 0xfffff68b
    1dc4:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
    1dc8:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    1dcc:	74006c61 	strvc	r6, [r0], #-3169	; 0xfffff39f
    1dd0:	72636274 	rsbvc	r6, r3, #116, 4	; 0x40000007
    1dd4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1dd8:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    1ddc:	00726570 	rsbseq	r6, r2, r0, ror r5
    1de0:	6c676573 	cfstr64vs	mvdx6, [r7], #-460	; 0xfffffe34
    1de4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1de8:	74740068 	ldrbtvc	r0, [r4], #-104	; 0xffffff98
    1dec:	5f726362 	svcpl	0x00726362
    1df0:	5f746567 	svcpl	0x00746567
    1df4:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1df8:	41007265 	tstmi	r0, r5, ror #4
    1dfc:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1cd4 <__core1_vectors-0xffe32c>
    1e00:	545f554d 	ldrbpl	r5, [pc], #-1357	; 1e08 <__core1_vectors-0xffe1f8>
    1e04:	535f4254 	cmppl	pc, #84, 4	; 0x40000005
    1e08:	4148535f 	cmpmi	r8, pc, asr r3
    1e0c:	42414552 	submi	r4, r1, #343932928	; 0x14800000
    1e10:	4100454c 	tstmi	r0, ip, asr #10
    1e14:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1cec <__core1_vectors-0xffe314>
    1e18:	545f554d 	ldrbpl	r5, [pc], #-1357	; 1e20 <__core1_vectors-0xffe1e0>
    1e1c:	535f4254 	cmppl	pc, #84, 4	; 0x40000005
    1e20:	7300655f 	movwvc	r6, #1375	; 0x55f
    1e24:	726c7463 	rsbvc	r7, ip, #1660944384	; 0x63000000
    1e28:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1e2c:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    1e30:	00726570 	rsbseq	r6, r2, r0, ror r5
    1e34:	5f746c61 	svcpl	0x00746c61
    1e38:	5f756d6d 	svcpl	0x00756d6d
    1e3c:	52434144 	subpl	r4, r3, #68, 2
    1e40:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1e44:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1e48:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1e4c:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    1e50:	745f535f 	ldrbvc	r5, [pc], #-863	; 1e58 <__core1_vectors-0xffe1a8>
    1e54:	6f727000 	svcvs	0x00727000
    1e58:	00646963 	rsbeq	r6, r4, r3, ror #18
    1e5c:	5f6d756e 	svcpl	0x006d756e
    1e60:	5f6d656d 	svcpl	0x006d656d
    1e64:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1e68:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    1e6c:	5f544c41 	svcpl	0x00544c41
    1e70:	5f554d4d 	svcpl	0x00554d4d
    1e74:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    1e78:	5f434e5f 	svcpl	0x00434e5f
    1e7c:	6100434e 	tstvs	r0, lr, asr #6
    1e80:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1cd8 <__core1_vectors-0xffe328>
    1e84:	545f756d 	ldrbpl	r7, [pc], #-1389	; 1e8c <__core1_vectors-0xffe174>
    1e88:	52434254 	subpl	r4, r3, #84, 4	; 0x40000005
    1e8c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1e90:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1e94:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1e98:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1e9c:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xfffff0ae
    1ea0:	474e4f52 	smlsldmi	r4, lr, r2, pc	; <UNPREDICTABLE>
    1ea4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ea8:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1eac:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1eb0:	45445f52 	strbmi	r5, [r4, #-3922]	; 0xfffff0ae
    1eb4:	45434956 	strbmi	r4, [r3, #-2390]	; 0xfffff6aa
    1eb8:	00534e5f 	subseq	r4, r3, pc, asr lr
    1ebc:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    1ec0:	6c610079 	stclvs	0, cr0, [r1], #-484	; 0xfffffe1c
    1ec4:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1ec8:	61765f75 	cmnvs	r6, r5, ror pc
    1ecc:	5f6f745f 	svcpl	0x006f745f
    1ed0:	635f6170 	cmpvs	pc, #112, 2
    1ed4:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
    1ed8:	5f656373 	svcpl	0x00656373
    1edc:	69676562 	stmdbvs	r7!, {r1, r5, r6, r8, sl, sp, lr}^
    1ee0:	6e65006e 	cdpvs	0, 6, cr0, cr5, cr14, {3}
    1ee4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1ee8:	6274745f 	rsbsvs	r7, r4, #1593835520	; 0x5f000000
    1eec:	775f3072 			; <UNDEFINED> instruction: 0x775f3072
    1ef0:	006b6c61 	rsbeq	r6, fp, r1, ror #24
    1ef4:	5f627474 	svcpl	0x00627474
    1ef8:	6f6c6c61 	svcvs	0x006c6c61
    1efc:	6f635f63 	svcvs	0x00635f63
    1f00:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1f04:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    1f08:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1f0c:	74745f75 	ldrbtvc	r5, [r4], #-3957	; 0xfffff08b
    1f10:	645f3162 	ldrbvs	r3, [pc], #-354	; 1f18 <__core1_vectors-0xffe0e8>
    1f14:	5f637365 	svcpl	0x00637365
    1f18:	00746573 	rsbseq	r6, r4, r3, ror r5
    1f1c:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    1f20:	64007461 	strvs	r7, [r0], #-1121	; 0xfffffb9f
    1f24:	00726361 	rsbseq	r6, r2, r1, ror #6
    1f28:	5f746c61 	svcpl	0x00746c61
    1f2c:	5f756d6d 	svcpl	0x00756d6d
    1f30:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
    1f34:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    1f38:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    1f3c:	6761705f 			; <UNDEFINED> instruction: 0x6761705f
    1f40:	62617465 	rsbvs	r7, r1, #1694498816	; 0x65000000
    1f44:	4100656c 	tstmi	r0, ip, ror #10
    1f48:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1e20 <__core1_vectors-0xffe1e0>
    1f4c:	415f554d 	cmpmi	pc, sp, asr #10
    1f50:	5f525454 	svcpl	0x00525454
    1f54:	5f414257 	svcpl	0x00414257
    1f58:	00414257 	subeq	r4, r1, r7, asr r2
    1f5c:	5f746c61 	svcpl	0x00746c61
    1f60:	5f756d6d 	svcpl	0x00756d6d
    1f64:	745f6176 	ldrbvc	r6, [pc], #-374	; 1f6c <__core1_vectors-0xffe094>
    1f68:	61705f6f 	cmnvs	r0, pc, ror #30
    1f6c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1f70:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    1f74:	5f61765f 	svcpl	0x0061765f
    1f78:	63617073 	cmnvs	r1, #115	; 0x73
    1f7c:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    1f80:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    1f84:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
    1f88:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    1f8c:	64006465 	strvs	r6, [r0], #-1125	; 0xfffffb9b
    1f90:	5f726361 	svcpl	0x00726361
    1f94:	5f746573 	svcpl	0x00746573
    1f98:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1f9c:	41007265 	tstmi	r0, r5, ror #4
    1fa0:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1e78 <__core1_vectors-0xffe188>
    1fa4:	415f554d 	cmpmi	pc, sp, asr #10
    1fa8:	5f525454 	svcpl	0x00525454
    1fac:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    1fb0:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    1fb4:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    1fb8:	575f5254 			; <UNDEFINED> instruction: 0x575f5254
    1fbc:	42575f54 	subsmi	r5, r7, #84, 30	; 0x150
    1fc0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1fc4:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    1fc8:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    1fcc:	675f3052 			; <UNDEFINED> instruction: 0x675f3052
    1fd0:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
    1fd4:	00727366 	rsbseq	r7, r2, r6, ror #6
    1fd8:	5f544c41 	svcpl	0x00544c41
    1fdc:	5f554d4d 	svcpl	0x00554d4d
    1fe0:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    1fe4:	6100745f 	tstvs	r0, pc, asr r4
    1fe8:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1e40 <__core1_vectors-0xffe1c0>
    1fec:	745f756d 	ldrbvc	r7, [pc], #-1389	; 1ff4 <__core1_vectors-0xffe00c>
    1ff0:	5f316274 	svcpl	0x00316274
    1ff4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1ff8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ffc:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    2000:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    2004:	54575f52 	ldrbpl	r5, [r7], #-3922	; 0xfffff0ae
    2008:	0054575f 	subseq	r5, r4, pc, asr r7
    200c:	5f544c41 	svcpl	0x00544c41
    2010:	5f554d4d 	svcpl	0x00554d4d
    2014:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    2018:	5f42575f 	svcpl	0x0042575f
    201c:	41004257 	tstmi	r0, r7, asr r2
    2020:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1ef8 <__core1_vectors-0xffe108>
    2024:	415f554d 	cmpmi	pc, sp, asr #10
    2028:	5f525454 	svcpl	0x00525454
    202c:	4e5f4257 	mrcmi	2, 2, r4, cr15, cr7, {2}
    2030:	4c410043 	mcrrmi	0, 4, r0, r1, cr3
    2034:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2038:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    203c:	4e5f5254 	mrcmi	2, 2, r5, cr15, cr4, {2}
    2040:	4c410043 	mcrrmi	0, 4, r0, r1, cr3
    2044:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2048:	50415f55 	subpl	r5, r1, r5, asr pc
    204c:	4952505f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, ip, lr}^
    2050:	43415f56 	movtmi	r5, #8022	; 0x1f56
    2054:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    2058:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    205c:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2060:	5f61765f 	svcpl	0x0061765f
    2064:	63617073 	cmnvs	r1, #115	; 0x73
    2068:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    206c:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    2070:	6f697463 	svcvs	0x00697463
    2074:	4c41006e 	mcrrmi	0, 6, r0, r1, cr14
    2078:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    207c:	41445f55 	cmpmi	r4, r5, asr pc
    2080:	414d5f50 	cmpmi	sp, r0, asr pc
    2084:	4547414e 	strbmi	r4, [r7, #-334]	; 0xfffffeb2
    2088:	6c610052 	stclvs	0, cr0, [r1], #-328	; 0xfffffeb8
    208c:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    2090:	6e755f75 	mrcvs	15, 3, r5, cr5, cr5, {3}
    2094:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    2098:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    209c:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    20a0:	626c745f 	rsbvs	r7, ip, #1593835520	; 0x5f000000
    20a4:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    20a8:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
    20ac:	5f657461 	svcpl	0x00657461
    20b0:	41007369 	tstmi	r0, r9, ror #6
    20b4:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1f8c <__core1_vectors-0xffe074>
    20b8:	415f554d 	cmpmi	pc, sp, asr #10
    20bc:	5f525454 	svcpl	0x00525454
    20c0:	5f414257 	svcpl	0x00414257
    20c4:	6500434e 	strvs	r4, [r0, #-846]	; 0xfffffcb2
    20c8:	75636578 	strbvc	r6, [r3, #-1400]!	; 0xfffffa88
    20cc:	61006574 	tstvs	r0, r4, ror r5
    20d0:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1f28 <__core1_vectors-0xffe0d8>
    20d4:	765f756d 	ldrbvc	r7, [pc], -sp, ror #10
    20d8:	70735f61 	rsbsvc	r5, r3, r1, ror #30
    20dc:	5f656361 	svcpl	0x00656361
    20e0:	5f6e6567 	svcpl	0x006e6567
    20e4:	65707573 	ldrbvs	r7, [r0, #-1395]!	; 0xfffffa8d
    20e8:	63657372 	cmnvs	r5, #-939524095	; 0xc8000001
    20ec:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    20f0:	6c756e00 	ldclvs	14, cr6, [r5], #-0
    20f4:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    20f8:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    20fc:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    2100:	706f6e67 	rsbvc	r6, pc, r7, ror #28
    2104:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    2108:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    210c:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    2110:	534e5f42 	movtpl	r5, #61250	; 0xef42
    2114:	4e4f4e5f 	mcrmi	14, 2, r4, cr15, cr15, {2}
    2118:	4345535f 	movtmi	r5, #21343	; 0x535f
    211c:	00455255 	subeq	r5, r5, r5, asr r2
    2120:	5f746c61 	svcpl	0x00746c61
    2124:	5f756d6d 	svcpl	0x00756d6d
    2128:	32627474 	rsbcc	r7, r2, #116, 8	; 0x74000000
    212c:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    2130:	65735f63 	ldrbvs	r5, [r3, #-3939]!	; 0xfffff09d
    2134:	6f630074 	svcvs	0x00630074
    2138:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    213c:	72646974 	rsbvc	r6, r4, #116, 18	; 0x1d0000
    2140:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2144:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    2148:	00726570 	rsbseq	r6, r2, r0, ror r5
    214c:	616d6f64 	cmnvs	sp, r4, ror #30
    2150:	615f6e69 	cmpvs	pc, r9, ror #28
    2154:	4c410070 	mcrrmi	0, 7, r0, r1, cr0
    2158:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    215c:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    2160:	575f5254 			; <UNDEFINED> instruction: 0x575f5254
    2164:	42575f54 	subsmi	r5, r7, #84, 30	; 0x150
    2168:	72760041 	rsbsvc	r0, r6, #65	; 0x41
    216c:	6f696765 	svcvs	0x00696765
    2170:	6c61006e 	stclvs	0, cr0, [r1], #-440	; 0xfffffe48
    2174:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    2178:	61765f75 	cmnvs	r6, r5, ror pc
    217c:	5f6f745f 	svcpl	0x006f745f
    2180:	635f6170 	cmpvs	pc, #112, 2
    2184:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
    2188:	5f656373 	svcpl	0x00656373
    218c:	00646e65 	rsbeq	r6, r4, r5, ror #28
    2190:	5f746c61 	svcpl	0x00746c61
    2194:	5f756d6d 	svcpl	0x00756d6d
    2198:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    219c:	4100656c 	tstmi	r0, ip, ror #10
    21a0:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2078 <__core1_vectors-0xffdf88>
    21a4:	415f554d 	cmpmi	pc, sp, asr #10
    21a8:	45525f50 	ldrbmi	r5, [r2, #-3920]	; 0xfffff0b0
    21ac:	4f5f4441 	svcmi	0x005f4441
    21b0:	00594c4e 	subseq	r4, r9, lr, asr #24
    21b4:	616c6572 	smcvs	50770	; 0xc652
    21b8:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    21bc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    21c0:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    21c4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    21c8:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    21cc:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    21d0:	50415f55 	subpl	r5, r1, r5, asr pc
    21d4:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0xfffffaa1
    21d8:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    21dc:	4f5f4441 	svcmi	0x005f4441
    21e0:	00594c4e 	subseq	r4, r9, lr, asr #24
    21e4:	65636361 	strbvs	r6, [r3, #-865]!	; 0xfffffc9f
    21e8:	41007373 	tstmi	r0, r3, ror r3
    21ec:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 20c4 <__core1_vectors-0xffdf3c>
    21f0:	415f554d 	cmpmi	pc, sp, asr #10
    21f4:	5f525454 	svcpl	0x00525454
    21f8:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    21fc:	61004543 	tstvs	r0, r3, asr #10
    2200:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 2058 <__core1_vectors-0xffdfa8>
    2204:	765f756d 	ldrbvc	r7, [pc], -sp, ror #10
    2208:	70735f61 	rsbsvc	r5, r3, r1, ror #30
    220c:	5f656361 	svcpl	0x00656361
    2210:	5f6e6567 	svcpl	0x006e6567
    2214:	6772616c 	ldrbvs	r6, [r2, -ip, ror #2]!
    2218:	67617065 	strbvs	r7, [r1, -r5, rrx]!
    221c:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    2220:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2224:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    2228:	534e5f42 	movtpl	r5, #61250	; 0xef42
    222c:	4345535f 	movtmi	r5, #21343	; 0x535f
    2230:	00455255 	subeq	r5, r5, r5, asr r2
    2234:	5f544c41 	svcpl	0x00544c41
    2238:	5f554d4d 	svcpl	0x00554d4d
    223c:	5f425454 	svcpl	0x00425454
    2240:	655f4e58 	ldrbvs	r4, [pc, #-3672]	; 13f0 <__core1_vectors-0xffec10>
    2244:	62747400 	rsbsvs	r7, r4, #0, 8
    2248:	735f3072 	cmpvc	pc, #114	; 0x72
    224c:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2250:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    2254:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    2258:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    225c:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    2260:	4e585f42 	cdpmi	15, 5, cr5, cr8, cr2, {2}
    2264:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
    2268:	31726274 	cmncc	r2, r4, ror r2
    226c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    2270:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    2274:	00726570 	rsbseq	r6, r2, r0, ror r5
    2278:	72616873 	rsbvc	r6, r1, #7536640	; 0x730000
    227c:	6c626165 	stfvse	f6, [r2], #-404	; 0xfffffe6c
    2280:	68740065 	ldmdavs	r4!, {r0, r2, r5, r6}^
    2284:	65737369 	ldrbvs	r7, [r3, #-873]!	; 0xfffffc97
    2288:	00617067 	rsbeq	r7, r1, r7, rrx
    228c:	6f6c6c61 	svcvs	0x006c6c61
    2290:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    2294:	4c410064 	mcrrmi	0, 6, r0, r1, cr4
    2298:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    229c:	50415f55 	subpl	r5, r1, r5, asr pc
    22a0:	5f4f4e5f 	svcpl	0x004f4e5f
    22a4:	45434341 	strbmi	r4, [r3, #-833]	; 0xfffffcbf
    22a8:	74005353 	strvc	r5, [r0], #-851	; 0xfffffcad
    22ac:	73736968 	cmnvc	r3, #104, 18	; 0x1a0000
    22b0:	69736765 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, sp, lr}^
    22b4:	6300657a 	movwvs	r6, #1402	; 0x57a
    22b8:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
    22bc:	64697478 	strbtvs	r7, [r9], #-1144	; 0xfffffb88
    22c0:	74740072 	ldrbtvc	r0, [r4], #-114	; 0xffffff8e
    22c4:	00307262 	eorseq	r7, r0, r2, ror #4
    22c8:	72627474 	rsbvc	r7, r2, #116, 8	; 0x74000000
    22cc:	6c610031 	stclvs	0, cr0, [r1], #-196	; 0xffffff3c
    22d0:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    22d4:	69645f75 	stmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    22d8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    22dc:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    22e0:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    22e4:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    22e8:	4e585f42 	cdpmi	15, 5, cr5, cr8, cr2, {2}
    22ec:	5349445f 	movtpl	r4, #37983	; 0x945f
    22f0:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
    22f4:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
    22f8:	67657374 			; <UNDEFINED> instruction: 0x67657374
    22fc:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    2300:	69747000 	ldmdbvs	r4!, {ip, sp, lr}^
    2304:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2308:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    230c:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    2310:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    2314:	41465f52 	cmpmi	r6, r2, asr pc
    2318:	00544c55 	subseq	r4, r4, r5, asr ip
    231c:	5f544c41 	svcpl	0x00544c41
    2320:	5f554d4d 	svcpl	0x00554d4d
    2324:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    2328:	4142575f 	cmpmi	r2, pc, asr r7
    232c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
    2330:	72747074 	rsbsvc	r7, r4, #116	; 0x74
    2334:	4100745f 	tstmi	r0, pc, asr r4
    2338:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2210 <__core1_vectors-0xffddf0>
    233c:	445f554d 	ldrbmi	r5, [pc], #-1357	; 2344 <__core1_vectors-0xffdcbc>
    2340:	4e5f5041 	cdpmi	0, 5, cr5, cr15, cr1, {2}
    2344:	43415f4f 	movtmi	r5, #8015	; 0x1f4f
    2348:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    234c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2350:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    2354:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    2358:	54575f52 	ldrbpl	r5, [r7], #-3922	; 0xfffff0ae
    235c:	00434e5f 	subeq	r4, r3, pc, asr lr
    2360:	5f746c61 	svcpl	0x00746c61
    2364:	5f756d6d 	svcpl	0x00756d6d
    2368:	52425454 	subpl	r5, r2, #84, 8	; 0x54000000
    236c:	65735f31 	ldrbvs	r5, [r3, #-3889]!	; 0xfffff0cf
    2370:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
    2374:	69727563 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    2378:	74007974 	strvc	r7, [r0], #-2420	; 0xfffff68c
    237c:	31726274 	cmncc	r2, r4, ror r2
    2380:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2384:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    2388:	00726570 	rsbseq	r6, r2, r0, ror r5
    238c:	5f544c41 	svcpl	0x00544c41
    2390:	5f554d4d 	svcpl	0x00554d4d
    2394:	5f425454 	svcpl	0x00425454
    2398:	4f4e5f53 	svcmi	0x004e5f53
    239c:	48535f4e 	ldmdami	r3, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    23a0:	41455241 	cmpmi	r5, r1, asr #4
    23a4:	00454c42 	subeq	r4, r5, r2, asr #24
    23a8:	5f544c41 	svcpl	0x00544c41
    23ac:	5f554d4d 	svcpl	0x00554d4d
    23b0:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    23b4:	5f434e5f 	svcpl	0x00434e5f
    23b8:	6d004257 	sfmvs	f4, 4, [r0, #-348]	; 0xfffffea4
    23bc:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    23c0:	74740079 	ldrbtvc	r0, [r4], #-121	; 0xffffff87
    23c4:	00726362 	rsbseq	r6, r2, r2, ror #6
    23c8:	5f544c41 	svcpl	0x00544c41
    23cc:	5f554d4d 	svcpl	0x00554d4d
    23d0:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    23d4:	5f434e5f 	svcpl	0x00434e5f
    23d8:	63005457 	movwvs	r5, #1111	; 0x457
    23dc:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
    23e0:	00656373 	rsbeq	r6, r5, r3, ror r3
    23e4:	5f544c41 	svcpl	0x00544c41
    23e8:	5f554d4d 	svcpl	0x00554d4d
    23ec:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    23f0:	5f42575f 	svcpl	0x0042575f
    23f4:	00414257 	subeq	r4, r1, r7, asr r2
    23f8:	5f544c41 	svcpl	0x00544c41
    23fc:	5f554d4d 	svcpl	0x00554d4d
    2400:	5f425454 	svcpl	0x00425454
    2404:	655f534e 	ldrbvs	r5, [pc, #-846]	; 20be <__core1_vectors-0xffdf42>
    2408:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    240c:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2410:	5f61765f 	svcpl	0x0061765f
    2414:	63617073 	cmnvs	r1, #115	; 0x73
    2418:	72635f65 	rsbvc	r5, r3, #404	; 0x194
    241c:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    2420:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    2424:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    2428:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    242c:	5f544c41 	svcpl	0x00544c41
    2430:	5f554d4d 	svcpl	0x00554d4d
    2434:	5f425454 	svcpl	0x00425454
    2438:	745f534e 	ldrbvc	r5, [pc], #-846	; 2440 <__core1_vectors-0xffdbc0>
    243c:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
    2440:	75626972 	strbvc	r6, [r2, #-2418]!	; 0xfffff68e
    2444:	00736574 	rsbseq	r6, r3, r4, ror r5
    2448:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    244c:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    2450:	69775f72 	ldmdbvs	r7!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2454:	00687464 	rsbeq	r7, r8, r4, ror #8
    2458:	5f544c41 	svcpl	0x00544c41
    245c:	5f554d4d 	svcpl	0x00554d4d
    2460:	655f5041 	ldrbvs	r5, [pc, #-65]	; 2427 <__core1_vectors-0xffdbd9>
    2464:	62747400 	rsbsvs	r7, r4, #0, 8
    2468:	6e5f7263 	cdpvs	2, 5, cr7, cr15, cr3, {3}
    246c:	62747400 	rsbsvs	r7, r4, #0, 8
    2470:	74740031 	ldrbtvc	r0, [r4], #-49	; 0xffffffcf
    2474:	41003262 	tstmi	r0, r2, ror #4
    2478:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2350 <__core1_vectors-0xffdcb0>
    247c:	415f554d 	cmpmi	pc, sp, asr #10
    2480:	00745f50 	rsbseq	r5, r4, r0, asr pc
    2484:	73716572 	cmnvc	r1, #478150656	; 0x1c800000
    2488:	00657a69 	rsbeq	r7, r5, r9, ror #20
    248c:	5f746c61 	svcpl	0x00746c61
    2490:	67657276 			; <UNDEFINED> instruction: 0x67657276
    2494:	5f6e6f69 	svcpl	0x006e6f69
    2498:	6b72616d 	blvs	1c9aa54 <__end__+0xc7ea34>
    249c:	6761705f 			; <UNDEFINED> instruction: 0x6761705f
    24a0:	62617465 	rsbvs	r7, r1, #1694498816	; 0x65000000
    24a4:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
    24a8:	655f6d75 	ldrbvs	r6, [pc, #-3445]	; 173b <__core1_vectors-0xffe8c5>
    24ac:	006d656c 	rsbeq	r6, sp, ip, ror #10
    24b0:	5f544c41 	svcpl	0x00544c41
    24b4:	5f554d4d 	svcpl	0x00554d4d
    24b8:	505f5041 	subspl	r5, pc, r1, asr #32
    24bc:	5f564952 	svcpl	0x00564952
    24c0:	44414552 	strbmi	r4, [r1], #-1362	; 0xfffffaae
    24c4:	4c4e4f5f 	mcrrmi	15, 5, r4, lr, cr15
    24c8:	4c410059 	mcrrmi	0, 5, r0, r1, cr9
    24cc:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    24d0:	454d5f55 	strbmi	r5, [sp, #-3925]	; 0xfffff0ab
    24d4:	45525f4d 	ldrbmi	r5, [r2, #-3917]	; 0xfffff0b3
    24d8:	4e4f4947 	vmlsmi.f16	s9, s30, s14	; <UNPREDICTABLE>
    24dc:	4100735f 	tstmi	r0, pc, asr r3
    24e0:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 23b8 <__core1_vectors-0xffdc48>
    24e4:	4d5f554d 	cfldr64mi	mvdx5, [pc, #-308]	; 23b8 <__core1_vectors-0xffdc48>
    24e8:	525f4d45 	subspl	r4, pc, #4416	; 0x1140
    24ec:	4f494745 	svcmi	0x00494745
    24f0:	00745f4e 	rsbseq	r5, r4, lr, asr #30
    24f4:	5f746c61 	svcpl	0x00746c61
    24f8:	5f756d6d 	svcpl	0x00756d6d
    24fc:	544e4f43 	strbpl	r4, [lr], #-3907	; 0xfffff0bd
    2500:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2504:	735f5244 	cmpvc	pc, #68, 4	; 0x40000004
    2508:	61007465 	tstvs	r0, r5, ror #8
    250c:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 2364 <__core1_vectors-0xffdc9c>
    2510:	745f756d 	ldrbvc	r7, [pc], #-1389	; 2518 <__core1_vectors-0xffdae8>
    2514:	615f6274 	cmpvs	pc, r4, ror r2	; <UNPREDICTABLE>
    2518:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    251c:	4100745f 	tstmi	r0, pc, asr r4
    2520:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 23f8 <__core1_vectors-0xffdc08>
    2524:	565f554d 	ldrbpl	r5, [pc], -sp, asr #10
    2528:	4f545f41 	svcmi	0x00545f41
    252c:	5f41505f 	svcpl	0x0041505f
    2530:	4c414f43 	mcrrmi	15, 4, r4, r1, cr3
    2534:	45435345 	strbmi	r5, [r3, #-837]	; 0xfffffcbb
    2538:	4100735f 	tstmi	r0, pc, asr r3
    253c:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2414 <__core1_vectors-0xffdbec>
    2540:	565f554d 	ldrbpl	r5, [pc], -sp, asr #10
    2544:	4f545f41 	svcmi	0x00545f41
    2548:	5f41505f 	svcpl	0x0041505f
    254c:	4c414f43 	mcrrmi	15, 4, r4, r1, cr3
    2550:	45435345 	strbmi	r5, [r3, #-837]	; 0xfffffcbb
    2554:	6100745f 	tstvs	r0, pc, asr r4
    2558:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 23b0 <__core1_vectors-0xffdc50>
    255c:	745f756d 	ldrbvc	r7, [pc], #-1389	; 2564 <__core1_vectors-0xffda9c>
    2560:	695f626c 	ldmdbvs	pc, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    2564:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    2568:	74616469 	strbtvc	r6, [r1], #-1129	; 0xfffffb97
    256c:	656e0065 	strbvs	r0, [lr, #-101]!	; 0xffffff9b
    2570:	65737478 	ldrbvs	r7, [r3, #-1144]!	; 0xfffffb88
    2574:	00617067 	rsbeq	r7, r1, r7, rrx
    2578:	5f746c61 	svcpl	0x00746c61
    257c:	5f756d6d 	svcpl	0x00756d6d
    2580:	745f6176 	ldrbvc	r6, [pc], #-374	; 2588 <__core1_vectors-0xffda78>
    2584:	61705f6f 	cmnvs	r0, pc, ror #30
    2588:	616f635f 	cmnvs	pc, pc, asr r3	; <UNPREDICTABLE>
    258c:	6373656c 	cmnvs	r3, #108, 10	; 0x1b000000
    2590:	656e5f65 	strbvs	r5, [lr, #-3941]!	; 0xfffff09b
    2594:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
    2598:	615f6274 	cmpvs	pc, r4, ror r2	; <UNPREDICTABLE>
    259c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    25a0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    25a4:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    25a8:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    25ac:	5f4e585f 	svcpl	0x004e585f
    25b0:	42414e45 	submi	r4, r1, #1104	; 0x450
    25b4:	4100454c 	tstmi	r0, ip, asr #10
    25b8:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2490 <__core1_vectors-0xffdb70>
    25bc:	415f554d 	cmpmi	pc, sp, asr #10
    25c0:	5f525454 	svcpl	0x00525454
    25c4:	41004257 	tstmi	r0, r7, asr r2
    25c8:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 24a0 <__core1_vectors-0xffdb60>
    25cc:	445f554d 	ldrbmi	r5, [pc], #-1357	; 25d4 <__core1_vectors-0xffda2c>
    25d0:	525f5041 	subspl	r5, pc, #65	; 0x41
    25d4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    25d8:	00444556 	subeq	r4, r4, r6, asr r5
    25dc:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    25e0:	745f656c 	ldrbvc	r6, [pc], #-1388	; 25e8 <__core1_vectors-0xffda18>
    25e4:	31726274 	cmncc	r2, r4, ror r2
    25e8:	6c61775f 	stclvs	7, cr7, [r1], #-380	; 0xfffffe84
    25ec:	656c006b 	strbvs	r0, [ip, #-107]!	; 0xffffff95
    25f0:	68636461 	stmdavs	r3!, {r0, r5, r6, sl, sp, lr}^
    25f4:	00327261 	eorseq	r7, r2, r1, ror #4
    25f8:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    25fc:	7473006f 	ldrbtvc	r0, [r3], #-111	; 0xffffff91
    2600:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    2604:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    2608:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0xffffffa1
    260c:	63700063 	cmnvs	r0, #99	; 0x63
    2610:	00726168 	rsbseq	r6, r2, r8, ror #2
    2614:	6461656c 	strbtvs	r6, [r1], #-1388	; 0xfffffa94
    2618:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    261c:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    2620:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    2624:	73007473 	movwvc	r7, #1139	; 0x473
    2628:	72616774 	rsbvc	r6, r1, #116, 14	; 0x1d00000
    262c:	75700067 	ldrbvc	r0, [r0, #-103]!	; 0xffffff99
    2630:	665f6374 			; <UNDEFINED> instruction: 0x665f6374
    2634:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
    2638:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    263c:	5f786568 	svcpl	0x00786568
    2640:	615f6f74 	cmpvs	pc, r4, ror pc	; <UNPREDICTABLE>
    2644:	61006373 	tstvs	r0, r3, ror r3
    2648:	705f746c 	subsvc	r7, pc, ip, ror #8
    264c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    2650:	65670066 	strbvs	r0, [r7, #-102]!	; 0xffffff9a
    2654:	63656474 	cmnvs	r5, #116, 8	; 0x74000000
    2658:	6c776800 	ldclvs	8, cr6, [r7], #-0
    265c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2660:	752f6372 	strvc	r6, [pc, #-882]!	; 22f6 <__core1_vectors-0xffdd0a>
    2664:	736c6974 	cmnvc	ip, #116, 18	; 0x1d0000
    2668:	746c612f 	strbtvc	r6, [ip], #-303	; 0xfffffed1
    266c:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2670:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    2674:	75700063 	ldrbvc	r0, [r0, #-99]!	; 0xffffff9d
    2678:	61007374 	tstvs	r0, r4, ror r3
    267c:	765f746c 	ldrbvc	r7, [pc], -ip, ror #8
    2680:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    2684:	0066746e 	rsbeq	r7, r6, lr, ror #8
    2688:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
    268c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    2690:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
    2694:	5f63756e 	svcpl	0x0063756e
    2698:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
    269c:	00747369 	rsbseq	r7, r4, r9, ror #6
    26a0:	5f746e69 	svcpl	0x00746e69
    26a4:	615f6f74 	cmpvs	pc, r4, ror pc	; <UNPREDICTABLE>
    26a8:	41006373 	tstmi	r0, r3, ror r3
    26ac:	505f544c 	subspl	r5, pc, ip, asr #8
    26b0:	544e4952 	strbpl	r4, [lr], #-2386	; 0xfffff6ae
    26b4:	454d5f46 	strbmi	r5, [sp, #-3910]	; 0xfffff0ba
    26b8:	4e495f4d 	cdpmi	15, 4, cr5, cr9, cr13, {2}
    26bc:	735f4f46 	cmpvc	pc, #280	; 0x118
    26c0:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
    26c4:	00737469 	rsbseq	r7, r3, r9, ror #8
    26c8:	7078616d 	rsbsvc	r6, r8, sp, ror #2
    26cc:	74007274 	strvc	r7, [r0], #-628	; 0xfffffd8c
    26d0:	7274706f 	rsbsvc	r7, r4, #111	; 0x6f
    26d4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    26d8:	706e735f 	rsbvc	r7, lr, pc, asr r3
    26dc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    26e0:	72700066 	rsbsvc	r0, r0, #102	; 0x66
    26e4:	61746e69 	cmnvs	r4, r9, ror #28
    26e8:	66006772 			; <UNDEFINED> instruction: 0x66006772
    26ec:	0067616c 	rsbeq	r6, r7, ip, ror #2
    26f0:	69727766 	ldmdbvs	r2!, {r1, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    26f4:	70006574 	andvc	r6, r0, r4, ror r5
    26f8:	69636572 	stmdbvs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    26fc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    2700:	635f6300 	cmpvs	pc, #0, 6
    2704:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2708:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
    270c:	61767469 	cmnvs	r6, r9, ror #8
    2710:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2714:	70615f5f 	rsbvc	r5, r1, pc, asr pc
    2718:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    271c:	73007265 	movwvc	r7, #613	; 0x265
    2720:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2724:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2728:	6f630074 	svcvs	0x00630074
    272c:	32746e75 	rsbscc	r6, r4, #1872	; 0x750
    2730:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    2734:	73690074 	cmnvc	r9, #116	; 0x74
    2738:	00746e69 	rsbseq	r6, r4, r9, ror #28
    273c:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    2740:	6f6d6874 	svcvs	0x006d6874
    2744:	6c610064 	stclvs	0, cr0, [r1], #-400	; 0xfffffe70
    2748:	70735f74 	rsbsvc	r5, r3, r4, ror pc
    274c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    2750:	736f0066 	cmnvc	pc, #102	; 0x66
    2754:	70006774 	andvc	r6, r0, r4, ror r7
    2758:	006d656d 	rsbeq	r6, sp, sp, ror #10
    275c:	63657073 	cmnvs	r5, #115	; 0x73
    2760:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
    2764:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    2768:	52505f54 	subspl	r5, r0, #84, 30	; 0x150
    276c:	46544e49 	ldrbmi	r4, [r4], -r9, asr #28
    2770:	4d454d5f 	stclmi	13, cr4, [r5, #-380]	; 0xfffffe84
    2774:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
    2778:	00745f4f 	rsbseq	r5, r4, pc, asr #30
    277c:	7261556d 	rsbvc	r5, r1, #457179136	; 0x1b400000
    2780:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    2784:	36315f54 	shsaxcc	r5, r1, r4
    2788:	5f303535 	svcpl	0x00303535
    278c:	454e494c 	strbmi	r4, [lr, #-2380]	; 0xfffff6b4
    2790:	4154535f 	cmpmi	r4, pc, asr r3
    2794:	5f535554 	svcpl	0x00535554
    2798:	4100454f 	tstmi	r0, pc, asr #10
    279c:	315f544c 	cmpcc	pc, ip, asr #8
    27a0:	30353536 	eorscc	r3, r5, r6, lsr r5
    27a4:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    27a8:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xfffff0bb
    27ac:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    27b0:	0045505f 	subeq	r5, r5, pc, asr r0
    27b4:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    27b8:	6174735f 	cmnvs	r4, pc, asr r3
    27bc:	00737574 	rsbseq	r7, r3, r4, ror r5
    27c0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    27c4:	6f666e49 	svcvs	0x00666e49
    27c8:	726f7000 	rsbvc	r7, pc, #0
    27cc:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    27d0:	75006f66 	strvc	r6, [r0, #-3942]	; 0xfffff09a
    27d4:	5f747261 	svcpl	0x00747261
    27d8:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
    27dc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    27e0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    27e4:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    27e8:	5f454e49 	svcpl	0x00454e49
    27ec:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    27f0:	425f5355 	subsmi	r5, pc, #1409286145	; 0x54000001
    27f4:	6e690049 	cdpvs	0, 6, cr0, cr9, cr9, {2}
    27f8:	755f7469 	ldrbvc	r7, [pc, #-1129]	; 2397 <__core1_vectors-0xffdc69>
    27fc:	00747261 	rsbseq	r7, r4, r1, ror #4
    2800:	5f544c41 	svcpl	0x00544c41
    2804:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    2808:	494c5f30 	stmdbmi	ip, {r4, r5, r8, r9, sl, fp, ip, lr}^
    280c:	535f454e 	cmppl	pc, #327155712	; 0x13800000
    2810:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    2814:	45545f53 	ldrbmi	r5, [r4, #-3923]	; 0xfffff0ad
    2818:	4100544d 	tstmi	r0, sp, asr #8
    281c:	315f544c 	cmpcc	pc, ip, asr #8
    2820:	30353536 	eorscc	r3, r5, r6, lsr r5
    2824:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2828:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xfffff0bb
    282c:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    2830:	0052445f 	subseq	r4, r2, pc, asr r4
    2834:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    2838:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    283c:	6f697461 	svcvs	0x00697461
    2840:	7768006e 	strbvc	r0, [r8, -lr, rrx]!
    2844:	2f62696c 	svccs	0x0062696c
    2848:	2f637273 	svccs	0x00637273
    284c:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
    2850:	6c612f73 	stclvs	15, cr2, [r1], #-460	; 0xfffffe34
    2854:	32705f74 	rsbscc	r5, r0, #116, 30	; 0x1d0
    2858:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    285c:	7000632e 	andvc	r6, r0, lr, lsr #6
    2860:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    2864:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
    2868:	5f316d72 	svcpl	0x00316d72
    286c:	6f666e69 	svcvs	0x00666e69
    2870:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2874:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    2878:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    287c:	5f454e49 	svcpl	0x00454e49
    2880:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    2884:	465f5355 			; <UNDEFINED> instruction: 0x465f5355
    2888:	4c410045 	mcrrmi	0, 4, r0, r1, cr5
    288c:	36315f54 	shsaxcc	r5, r1, r4
    2890:	5f303535 	svcpl	0x00303535
    2894:	454e494c 	strbmi	r4, [lr, #-2380]	; 0xfffff6b4
    2898:	4154535f 	cmpmi	r4, pc, asr r3
    289c:	5f535554 	svcpl	0x00535554
    28a0:	41550065 	cmpmi	r5, r5, rrx
    28a4:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    28a8:	5f4f464e 	svcpl	0x004f464e
    28ac:	41550073 	cmpmi	r5, r3, ror r0
    28b0:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    28b4:	5f4f464e 	svcpl	0x004f464e
    28b8:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    28bc:	6f6c5f74 	svcvs	0x006c5f74
    28c0:	6f645f67 	svcvs	0x00645f67
    28c4:	7500656e 	strvc	r6, [r0, #-1390]	; 0xfffffa92
    28c8:	5f747261 	svcpl	0x00747261
    28cc:	69004449 	stmdbvs	r0, {r0, r3, r6, sl, lr}
    28d0:	5f74696e 	svcpl	0x0074696e
    28d4:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xfffff09c
    28d8:	72657400 	rsbvc	r7, r5, #0, 8
    28dc:	695f306d 	ldmdbvs	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
    28e0:	006f666e 	rsbeq	r6, pc, lr, ror #12
    28e4:	5f544c41 	svcpl	0x00544c41
    28e8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    28ec:	494c5f30 	stmdbmi	ip, {r4, r5, r8, r9, sl, fp, ip, lr}^
    28f0:	535f454e 	cmppl	pc, #327155712	; 0x13800000
    28f4:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    28f8:	48545f53 	ldmdami	r4, {r0, r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    28fc:	41004552 	tstmi	r0, r2, asr r5
    2900:	315f544c 	cmpcc	pc, ip, asr #8
    2904:	30353536 	eorscc	r3, r5, r6, lsr r5
    2908:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    290c:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xfffff0bb
    2910:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    2914:	4546525f 	strbmi	r5, [r6, #-607]	; 0xfffffda1
    2918:	635f6700 	cmpvs	pc, #0, 14
    291c:	5f66656f 	svcpl	0x0066656f
    2920:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2924:	625f6564 	subsvs	r6, pc, #100, 10	; 0x19000000
    2928:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    292c:	635f6700 	cmpvs	pc, #0, 14
    2930:	6e6e6168 	powvsez	f6, f6, #0.0
    2934:	73006c65 	movwvc	r6, #3173	; 0xc65
    2938:	635f6d68 	cmpvs	pc, #104, 26	; 0x1a00
    293c:	5f6c7274 	svcpl	0x006c7274
    2940:	765f0074 			; <UNDEFINED> instruction: 0x765f0074
    2944:	6f746365 	svcvs	0x00746365
    2948:	74007372 	strvc	r7, [r0], #-882	; 0xfffffc8e
    294c:	5f676972 	svcpl	0x00676972
    2950:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2954:	6f630074 	svcvs	0x00630074
    2958:	5f306572 	svcpl	0x00306572
    295c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    2960:	6f630079 	svcvs	0x00630079
    2964:	5f316572 	svcpl	0x00316572
    2968:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    296c:	6f6c0079 	svcvs	0x006c0079
    2970:	61745f67 	cmnvs	r4, r7, ror #30
    2974:	63006c69 	movwvs	r6, #3177	; 0xc69
    2978:	3165726f 	cmncc	r5, pc, ror #4
    297c:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    2980:	6572006e 	ldrbvs	r0, [r2, #-110]!	; 0xffffff92
    2984:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2988:	73006465 	movwvc	r6, #1125	; 0x465
    298c:	765f7465 	ldrbvc	r7, [pc], -r5, ror #8
    2990:	00726162 	rsbseq	r6, r2, r2, ror #2
    2994:	75705f67 	ldrbvc	r5, [r0, #-3943]!	; 0xfffff099
    2998:	5f65736c 	svcpl	0x0065736c
    299c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    29a0:	625f6564 	subsvs	r6, pc, #100, 10	; 0x19000000
    29a4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    29a8:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 29b0 <__core1_vectors-0xffd650>
    29ac:	5f617461 	svcpl	0x00617461
    29b0:	5f646e65 	svcpl	0x00646e65
    29b4:	5f5f005f 	svcpl	0x005f005f
    29b8:	5f737362 	svcpl	0x00737362
    29bc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    29c0:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
    29c4:	73625f5f 	cmnvc	r2, #380	; 0x17c
    29c8:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
    29cc:	005f5f64 	subseq	r5, pc, r4, ror #30
    29d0:	75705f67 	ldrbvc	r5, [r0, #-3943]!	; 0xfffff099
    29d4:	5f65736c 	svcpl	0x0065736c
    29d8:	72696170 	rsbvc	r6, r9, #112, 2
    29dc:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
    29e0:	5f007365 	svcpl	0x00007365
    29e4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    29e8:	74735f61 	ldrbtvc	r5, [r3], #-3937	; 0xfffff09f
    29ec:	5f747261 	svcpl	0x00747261
    29f0:	5f5f005f 	svcpl	0x005f005f
    29f4:	61746164 	cmnvs	r4, r4, ror #2
    29f8:	616f6c5f 	cmnvs	pc, pc, asr ip	; <UNPREDICTABLE>
    29fc:	005f5f64 	subseq	r5, pc, r4, ror #30
    2a00:	6967616d 	stmdbvs	r7!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2a04:	5f670063 	svcpl	0x00670063
    2a08:	66656f63 	strbtvs	r6, [r5], -r3, ror #30
    2a0c:	756f635f 	strbvc	r6, [pc, #-863]!	; 26b5 <__core1_vectors-0xffd94b>
    2a10:	7300746e 	movwvc	r7, #1134	; 0x46e
    2a14:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    2a18:	3165726f 	cmncc	r5, pc, ror #4
    2a1c:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2a20:	6d5f3165 	ldfvse	f3, [pc, #-404]	; 2894 <__core1_vectors-0xffd76c>
    2a24:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
    2a28:	5f670063 	svcpl	0x00670063
    2a2c:	66656f63 	strbtvs	r6, [r5], -r3, ror #30
    2a30:	6961705f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2a34:	79625f72 	stmdbvc	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2a38:	00736574 	rsbseq	r6, r3, r4, ror r5
    2a3c:	5f676f6c 	svcpl	0x00676f6c
    2a40:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
    2a44:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
    2a48:	745f3874 	ldrbvc	r3, [pc], #-2164	; 2a50 <__core1_vectors-0xffd5b0>
    2a4c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    2a50:	61645f74 	smcvs	17908	; 0x45f4
    2a54:	7a006174 	bvc	1b02c <__core1_vectors-0xfe4fd4>
    2a58:	5f6f7265 	svcpl	0x006f7265
    2a5c:	00737362 	rsbseq	r7, r3, r2, ror #6
    2a60:	75705f67 	ldrbvc	r5, [r0, #-3943]!	; 0xfffff099
    2a64:	5f65736c 	svcpl	0x0065736c
    2a68:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2a6c:	6f630074 	svcvs	0x00630074
    2a70:	5f316572 	svcpl	0x00316572
    2a74:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    2a78:	5f707574 	svcpl	0x00707574
    2a7c:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
    2a80:	735f5f00 	cmpvc	pc, #0, 30
    2a84:	6b636174 	blvs	18db05c <__end__+0x8bf03c>
    2a88:	706f745f 	rsbvc	r7, pc, pc, asr r4	; <UNPREDICTABLE>
    2a8c:	73005f5f 	movwvc	r5, #3935	; 0xf5f
    2a90:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    2a94:	3165726f 	cmncc	r5, pc, ror #4
    2a98:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2a9c:	735f3165 	cmpvc	pc, #1073741849	; 0x40000019
    2aa0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2aa4:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    2aa8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    2aac:	5f747261 	svcpl	0x00747261
    2ab0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2ab4:	656d0031 	strbvs	r0, [sp, #-49]!	; 0xffffffcf
    2ab8:	766f6d6d 	strbtvc	r6, [pc], -sp, ror #26
    2abc:	656d0065 	strbvs	r0, [sp, #-101]!	; 0xffffff9b
    2ac0:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    2ac4:	72707600 	rsbsvc	r7, r0, #0, 12
    2ac8:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    2acc:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    2ad0:	00746573 	rsbseq	r6, r4, r3, ror r5
    2ad4:	2f637273 	svccs	0x00637273
    2ad8:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2adc:	696c2f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, sp}^
    2ae0:	6d5f6362 	ldclvs	3, cr6, [pc, #-392]	; 2960 <__core1_vectors-0xffd6a0>
    2ae4:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    2ae8:	63727300 	cmnvs	r2, #0, 6
    2aec:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2af0:	632f3165 			; <UNDEFINED> instruction: 0x632f3165
    2af4:	3165726f 	cmncc	r5, pc, ror #4
    2af8:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    2afc:	735f7864 	cmpvc	pc, #100, 16	; 0x640000
    2b00:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    2b04:	4e470053 	mcrmi	0, 2, r0, cr7, cr3, {2}
    2b08:	53412055 	movtpl	r2, #4181	; 0x1055
    2b0c:	332e3220 			; <UNDEFINED> instruction: 0x332e3220
    2b10:	72730034 	rsbsvc	r0, r3, #52	; 0x34
    2b14:	6f632f63 	svcvs	0x00632f63
    2b18:	2f316572 	svccs	0x00316572
    2b1c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2b20:	65765f31 	ldrbvs	r5, [r6, #-3889]!	; 0xfffff0cf
    2b24:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    2b28:	00532e73 	subseq	r2, r3, r3, ror lr
    2b2c:	5f554353 	svcpl	0x00554353
    2b30:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
    2b34:	615f6700 	cmpvs	pc, r0, lsl #14
    2b38:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    2b3c:	645f6f69 	ldrbvs	r6, [pc], #-3945	; 2b44 <__core1_vectors-0xffd4bc>
    2b40:	00617461 	rsbeq	r7, r1, r1, ror #8
    2b44:	5f6d7261 	svcpl	0x006d7261
    2b48:	635f6d6d 	cmpvs	pc, #6976	; 0x1b40
    2b4c:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
    2b50:	5f396100 	svcpl	0x00396100
    2b54:	696e6173 	stmdbvs	lr!, {r0, r1, r4, r5, r6, r8, sp, lr}^
    2b58:	657a6974 	ldrbvs	r6, [sl, #-2420]!	; 0xfffff68c
    2b5c:	6665625f 			; <UNDEFINED> instruction: 0x6665625f
    2b60:	5f65726f 	svcpl	0x0065726f
    2b64:	00756d6d 	rsbseq	r6, r5, sp, ror #26
    2b68:	5f756d6d 	svcpl	0x00756d6d
    2b6c:	73006e6f 	movwvc	r6, #3695	; 0xe6f
    2b70:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2b74:	7875615f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
    2b78:	6f6f705f 	svcvs	0x006f705f
    2b7c:	324c006c 	subcc	r0, ip, #108	; 0x6c
    2b80:	54435f43 	strbpl	r5, [r3], #-3907	; 0xfffff0bd
    2b84:	67004c52 	smlsdvs	r0, r2, ip, r4
    2b88:	6e61625f 	mcrvs	2, 3, r6, cr1, cr15, {2}
    2b8c:	75705f6b 	ldrbvc	r5, [r0, #-3947]!	; 0xfffff095
    2b90:	5f65736c 	svcpl	0x0065736c
    2b94:	006c6573 	rsbeq	r6, ip, r3, ror r5
    2b98:	5f544c41 	svcpl	0x00544c41
    2b9c:	44495242 	strbmi	r5, [r9], #-578	; 0xfffffdbe
    2ba0:	485f4547 	ldmdami	pc, {r0, r1, r2, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    2ba4:	6c004632 	stcvs	6, cr4, [r0], {50}	; 0x32
    2ba8:	5f656e69 	svcpl	0x00656e69
    2bac:	66696873 			; <UNDEFINED> instruction: 0x66696873
    2bb0:	6d6d0074 	stclvs	0, cr0, [sp, #-464]!	; 0xfffffe30
    2bb4:	6f705f75 	svcvs	0x00705f75
    2bb8:	745f6c6f 	ldrbvc	r6, [pc], #-3183	; 2bc0 <__core1_vectors-0xffd440>
    2bbc:	615f6700 	cmpvs	pc, r0, lsl #14
    2bc0:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2a00 <__core1_vectors-0xffd600>
    2bc4:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2bc8:	645f3361 	ldrbvs	r3, [pc], #-865	; 2bd0 <__core1_vectors-0xffd430>
    2bcc:	00637365 	rsbeq	r7, r3, r5, ror #6
    2bd0:	5f756d6d 	svcpl	0x00756d6d
    2bd4:	5f787561 	svcpl	0x00787561
    2bd8:	6f6c6c61 	svcvs	0x006c6c61
    2bdc:	72610063 	rsbvc	r0, r1, #99	; 0x63
    2be0:	61635f6d 	cmnvs	r3, sp, ror #30
    2be4:	5f656863 	svcpl	0x00656863
    2be8:	706d7564 	rsbvc	r7, sp, r4, ror #10
    2bec:	6174735f 	cmnvs	r4, pc, asr r3
    2bf0:	00737574 	rsbseq	r7, r3, r4, ror r5
    2bf4:	5f6d7261 	svcpl	0x006d7261
    2bf8:	63616369 	cmnvs	r1, #-1543503871	; 0xa4000001
    2bfc:	695f6568 	ldmdbvs	pc, {r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    2c00:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    2c04:	74616469 	strbtvc	r6, [r1], #-1129	; 0xfffffb97
    2c08:	6c615f65 	stclvs	15, cr5, [r1], #-404	; 0xfffffe6c
    2c0c:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    2c10:	326c5f6d 	rsbcc	r5, ip, #436	; 0x1b4
    2c14:	5f73695f 	svcpl	0x0073695f
    2c18:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    2c1c:	0064656c 	rsbeq	r6, r4, ip, ror #10
    2c20:	5f6d7261 	svcpl	0x006d7261
    2c24:	685f6d6d 	ldmdavs	pc, {r0, r2, r3, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    2c28:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    2c2c:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    2c30:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    2c34:	6e6f5f65 	cdpvs	15, 6, cr5, cr15, cr5, {3}
    2c38:	615f6700 	cmpvs	pc, r0, lsl #14
    2c3c:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2a7c <__core1_vectors-0xffd584>
    2c40:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2c44:	635f3361 	cmpvs	pc, #-2080374783	; 0x84000001
    2c48:	61007273 	tstvs	r0, r3, ror r2
    2c4c:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2a8c <__core1_vectors-0xffd574>
    2c50:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    2c54:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    2c58:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
    2c5c:	00796461 	rsbseq	r6, r9, r1, ror #8
    2c60:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    2c64:	7874635f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    2c68:	745f7300 	ldrbvc	r7, [pc], #-768	; 2c70 <__core1_vectors-0xffd390>
    2c6c:	735f6274 	cmpvc	pc, #116, 4	; 0x40000007
    2c70:	61726f74 	cmnvs	r2, r4, ror pc
    2c74:	41006567 	tstmi	r0, r7, ror #10
    2c78:	425f544c 	subsmi	r5, pc, #76, 8	; 0x4c000000
    2c7c:	47444952 	smlsldmi	r4, r4, r2, r9	; <UNPREDICTABLE>
    2c80:	32465f45 	subcc	r5, r6, #276	; 0x114
    2c84:	5f670048 	svcpl	0x00670048
    2c88:	5f6d7261 	svcpl	0x006d7261
    2c8c:	6467736d 	strbtvs	r7, [r7], #-877	; 0xfffffc93
    2c90:	5f30616d 	svcpl	0x0030616d
    2c94:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
    2c98:	615f6700 	cmpvs	pc, r0, lsl #14
    2c9c:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2adc <__core1_vectors-0xffd524>
    2ca0:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2ca4:	635f3061 	cmpvs	pc, #97	; 0x61
    2ca8:	41007273 	tstmi	r0, r3, ror r2
    2cac:	425f544c 	subsmi	r5, pc, #76, 8	; 0x4c000000
    2cb0:	47444952 	smlsldmi	r4, r4, r2, r9	; <UNPREDICTABLE>
    2cb4:	32465f45 	subcc	r5, r6, #276	; 0x114
    2cb8:	72610053 	rsbvc	r0, r1, #83	; 0x53
    2cbc:	61635f6d 	cmnvs	r3, sp, ror #30
    2cc0:	5f656863 	svcpl	0x00656863
    2cc4:	5f746567 	svcpl	0x00746567
    2cc8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2ccc:	41007375 	tstmi	r0, r5, ror r3
    2cd0:	425f544c 	subsmi	r5, pc, #76, 8	; 0x4c000000
    2cd4:	47444952 	smlsldmi	r4, r4, r2, r9	; <UNPREDICTABLE>
    2cd8:	574c5f45 	strbpl	r5, [ip, -r5, asr #30]
    2cdc:	00463248 	subeq	r3, r6, r8, asr #4
    2ce0:	72615f67 	rsbvc	r5, r1, #412	; 0x19c
    2ce4:	32665f6d 	rsbcc	r5, r6, #436	; 0x1b4
    2ce8:	72695f68 	rsbvc	r5, r9, #104, 30	; 0x1a0
    2cec:	655f3071 	ldrbvs	r3, [pc, #-113]	; 2c83 <__core1_vectors-0xffd37d>
    2cf0:	7261006e 	rsbvc	r0, r1, #110	; 0x6e
    2cf4:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    2cf8:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    2cfc:	726c7463 	rsbvc	r7, ip, #1660944384	; 0x63000000
    2d00:	615f6700 	cmpvs	pc, r0, lsl #14
    2d04:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2b44 <__core1_vectors-0xffd4bc>
    2d08:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2d0c:	645f3161 	ldrbvs	r3, [pc], #-353	; 2d14 <__core1_vectors-0xffd2ec>
    2d10:	00637365 	rsbeq	r7, r3, r5, ror #6
    2d14:	6c746361 	ldclvs	3, cr6, [r4], #-388	; 0xfffffe7c
    2d18:	70620072 	rsbvc	r0, r2, r2, ror r0
    2d1c:	006e6f5f 	rsbeq	r6, lr, pc, asr pc
    2d20:	6f72657a 	svcvs	0x0072657a
    2d24:	615f6700 	cmpvs	pc, r0, lsl #14
    2d28:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2b68 <__core1_vectors-0xffd498>
    2d2c:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2d30:	645f3261 	ldrbvs	r3, [pc], #-609	; 2d38 <__core1_vectors-0xffd2c8>
    2d34:	00637365 	rsbeq	r7, r3, r5, ror #6
    2d38:	2f637273 	svccs	0x00637273
    2d3c:	5f6d7261 	svcpl	0x006d7261
    2d40:	5f6d656d 	svcpl	0x006d656d
    2d44:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2d48:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
    2d4c:	5f670063 	svcpl	0x00670063
    2d50:	64697262 	strbtvs	r7, [r9], #-610	; 0xfffffd9e
    2d54:	725f6567 	subsvc	r6, pc, #432013312	; 0x19c00000
    2d58:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    2d5c:	6d726100 	ldfvse	f6, [r2, #-0]
    2d60:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2d64:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2d68:	635f7075 	cmpvs	pc, #117	; 0x75
    2d6c:	3165726f 	cmncc	r5, pc, ror #4
    2d70:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    2d74:	72610073 	rsbvc	r0, r1, #115	; 0x73
    2d78:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
    2d7c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2d80:	706d735f 	rsbvc	r7, sp, pc, asr r3
    2d84:	646e615f 	strbtvs	r6, [lr], #-351	; 0xfffffea1
    2d88:	7563735f 	strbvc	r7, [r3, #-863]!	; 0xfffffca1
    2d8c:	73636300 	cmnvc	r3, #0, 6
    2d90:	00726469 	rsbseq	r6, r2, r9, ror #8
    2d94:	73796177 	cmnvc	r9, #-1073741795	; 0xc000001d
    2d98:	615f6700 	cmpvs	pc, r0, lsl #14
    2d9c:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2bdc <__core1_vectors-0xffd424>
    2da0:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2da4:	635f3261 	cmpvs	pc, #268435462	; 0x10000006
    2da8:	63007273 	movwvs	r7, #627	; 0x273
    2dac:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    2db0:	61765f65 	cmnvs	r6, r5, ror #30
    2db4:	6170735f 	cmnvs	r0, pc, asr r3
    2db8:	635f6563 	cmpvs	pc, #415236096	; 0x18c00000
    2dbc:	3165726f 	cmncc	r5, pc, ror #4
    2dc0:	7264645f 	rsbvc	r6, r4, #1593835520	; 0x5f000000
    2dc4:	6d726100 	ldfvse	f6, [r2, #-0]
    2dc8:	5f6d6d5f 	svcpl	0x006d6d5f
    2dcc:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    2dd0:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
    2dd4:	5f6e6f69 	svcpl	0x006e6f69
    2dd8:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2ddc:	72610074 	rsbvc	r0, r1, #116	; 0x74
    2de0:	6d6d5f6d 	stclvs	15, cr5, [sp, #-436]!	; 0xfffffe4c
    2de4:	65735f75 	ldrbvs	r5, [r3, #-3957]!	; 0xfffff08b
    2de8:	5f707574 	svcpl	0x00707574
    2dec:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2df0:	72610030 	rsbvc	r0, r1, #48	; 0x30
    2df4:	65735f6d 	ldrbvs	r5, [r3, #-3949]!	; 0xfffff093
    2df8:	61635f74 	smcvs	13812	; 0x35f4
    2dfc:	5f656863 	svcpl	0x00656863
    2e00:	73746962 	cmnvc	r4, #1605632	; 0x188000
    2e04:	6d726100 	ldfvse	f6, [r2, #-0]
    2e08:	6163645f 	cmnvs	r3, pc, asr r4
    2e0c:	5f656863 	svcpl	0x00656863
    2e10:	61656c63 	cmnvs	r5, r3, ror #24
    2e14:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
    2e18:	696c6176 	stmdbvs	ip!, {r1, r2, r4, r5, r6, r8, sp, lr}^
    2e1c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    2e20:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    2e24:	615f6700 	cmpvs	pc, r0, lsl #14
    2e28:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    2e2c:	635f6672 	cmpvs	pc, #119537664	; 0x7200000
    2e30:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2e34:	67007265 	strvs	r7, [r0, -r5, ror #4]
    2e38:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2e3c:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    2e40:	34616d64 	strbtcc	r6, [r1], #-3428	; 0xfffff29c
    2e44:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    2e48:	656e0063 	strbvs	r0, [lr, #-99]!	; 0xffffff9d
    2e4c:	74006465 	strvc	r6, [r0], #-1125	; 0xfffffb9b
    2e50:	6f5f6274 	svcvs	0x005f6274
    2e54:	67007475 	smlsdxvs	r0, r5, r4, r7
    2e58:	6e61625f 	mcrvs	2, 3, r6, cr1, cr15, {2}
    2e5c:	6f635f6b 	svcvs	0x00635f6b
    2e60:	735f6665 	cmpvc	pc, #105906176	; 0x6500000
    2e64:	73006c65 	movwvc	r6, #3173	; 0xc65
    2e68:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2e6c:	6f6f705f 	svcvs	0x006f705f
    2e70:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    2e74:	61635f6d 	cmnvs	r3, sp, ror #30
    2e78:	5f656863 	svcpl	0x00656863
    2e7c:	5f746573 	svcpl	0x00746573
    2e80:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    2e84:	0064656c 	rsbeq	r6, r4, ip, ror #10
    2e88:	6469706d 	strbtvs	r7, [r9], #-109	; 0xffffff93
    2e8c:	63640072 	cmnvs	r4, #114	; 0x72
    2e90:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
    2e94:	006e6f5f 	rsbeq	r6, lr, pc, asr pc
    2e98:	5f544c41 	svcpl	0x00544c41
    2e9c:	44495242 	strbmi	r5, [r9], #-578	; 0xfffffdbe
    2ea0:	655f4547 	ldrbvs	r4, [pc, #-1351]	; 2961 <__core1_vectors-0xffd69f>
    2ea4:	615f6700 	cmpvs	pc, r0, lsl #14
    2ea8:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2ce8 <__core1_vectors-0xffd318>
    2eac:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2eb0:	635f3461 	cmpvs	pc, #1627389952	; 0x61000000
    2eb4:	63007273 	movwvs	r7, #627	; 0x273
    2eb8:	6c657373 	stclvs	3, cr7, [r5], #-460	; 0xfffffe34
    2ebc:	5f670072 	svcpl	0x00670072
    2ec0:	5f6d7261 	svcpl	0x006d7261
    2ec4:	6467736d 	strbtvs	r7, [r7], #-877	; 0xfffffc93
    2ec8:	5f31616d 	svcpl	0x0031616d
    2ecc:	00727363 	rsbseq	r7, r2, r3, ror #6
    2ed0:	7961645f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
    2ed4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    2ed8:	706f0074 	rsbvc	r0, pc, r4, ror r0	; <UNPREDICTABLE>
    2edc:	74706f74 	ldrbtvc	r6, [r0], #-3956	; 0xfffff08c
    2ee0:	5f747300 	svcpl	0x00747300
    2ee4:	736b6c62 	cmnvc	fp, #25088	; 0x6200
    2ee8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2eec:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    2ef0:	5f323374 	svcpl	0x00323374
    2ef4:	5f5f0074 	svcpl	0x005f0074
    2ef8:	6e696c6e 	cdpvs	12, 6, cr6, cr9, cr14, {3}
    2efc:	00745f6b 	rsbseq	r5, r4, fp, ror #30
    2f00:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2f04:	72656e5f 	rsbvc	r6, r5, #1520	; 0x5f0
    2f08:	61750072 	cmnvs	r5, r2, ror r0
    2f0c:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
    2f10:	6f696474 	svcvs	0x00696474
    2f14:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    2f18:	685f6574 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    2f1c:	32337865 	eorscc	r7, r3, #6619136	; 0x650000
    2f20:	5f747300 	svcpl	0x00747300
    2f24:	72617073 	rsbvc	r7, r1, #115	; 0x73
    2f28:	73003465 	movwvc	r3, #1125	; 0x465
    2f2c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    2f30:	5f003174 	svcpl	0x00003174
    2f34:	6f6e695f 	svcvs	0x006e695f
    2f38:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
    2f3c:	5f707334 	svcpl	0x00707334
    2f40:	755f7a68 	ldrbvc	r7, [pc, #-2664]	; 24e0 <__core1_vectors-0xffdb20>
    2f44:	6f003233 	svcvs	0x00003233
    2f48:	72657470 	rsbvc	r7, r5, #112, 8	; 0x70000000
    2f4c:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
    2f50:	6f6c625f 	svcvs	0x006c625f
    2f54:	00736b63 	rsbseq	r6, r3, r3, ror #22
    2f58:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    2f5c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    2f60:	775f6f69 	ldrbvc	r6, [pc, -r9, ror #30]
    2f64:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    2f68:	7761725f 			; <UNDEFINED> instruction: 0x7761725f
    2f6c:	5f747300 	svcpl	0x00747300
    2f70:	00766564 	rsbseq	r6, r6, r4, ror #10
    2f74:	6e5f7674 	mrcvs	6, 2, r7, cr15, cr4, {3}
    2f78:	00636573 	rsbeq	r6, r3, r3, ror r5
    2f7c:	6f6d5f5f 	svcvs	0x006d5f5f
    2f80:	745f6564 	ldrbvc	r6, [pc], #-1380	; 2f88 <__core1_vectors-0xffd078>
    2f84:	74706f00 	ldrbtvc	r6, [r0], #-3840	; 0xfffff100
    2f88:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    2f8c:	61750074 	cmnvs	r5, r4, ror r0
    2f90:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
    2f94:	6f696474 	svcvs	0x00696474
    2f98:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2f9c:	6c72635f 	ldclvs	3, cr6, [r2], #-380	; 0xfffffe84
    2fa0:	74730066 	ldrbtvc	r0, [r3], #-102	; 0xffffff9a
    2fa4:	6469675f 	strbtvs	r6, [r9], #-1887	; 0xfffff8a1
    2fa8:	5f747300 	svcpl	0x00747300
    2fac:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    2fb0:	75616200 	strbvc	r6, [r1, #-512]!	; 0xfffffe00
    2fb4:	74730064 	ldrbtvc	r0, [r3], #-100	; 0xffffff9c
    2fb8:	696c6e5f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    2fbc:	5f006b6e 	svcpl	0x00006b6e
    2fc0:	616e7a74 	smcvs	59300	; 0xe7a4
    2fc4:	7400656d 	strvc	r6, [r0], #-1389	; 0xfffffa93
    2fc8:	73656d69 	cmnvc	r5, #6720	; 0x1a40
    2fcc:	00636570 	rsbeq	r6, r3, r0, ror r5
    2fd0:	755f7473 	ldrbvc	r7, [pc, #-1139]	; 2b65 <__core1_vectors-0xffd49b>
    2fd4:	65006469 	strvs	r6, [r0, #-1129]	; 0xfffffb97
    2fd8:	7269766e 	rsbvc	r7, r9, #115343360	; 0x6e00000
    2fdc:	74006e6f 	strvc	r6, [r0], #-3695	; 0xfffff191
    2fe0:	5f656d69 	svcpl	0x00656d69
    2fe4:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    2fe8:	6f6e695f 	svcvs	0x006e695f
    2fec:	69745f00 	ldmdbvs	r4!, {r8, r9, sl, fp, ip, lr}^
    2ff0:	6f7a656d 	svcvs	0x007a656d
    2ff4:	5f00656e 	svcpl	0x0000656e
    2ff8:	6565736c 	strbvs	r7, [r5, #-876]!	; 0xfffffc94
    2ffc:	5f5f006b 	svcpl	0x005f006b
    3000:	5f766564 	svcpl	0x00766564
    3004:	695f0074 	ldmdbvs	pc, {r2, r4, r5, r6}^	; <UNPREDICTABLE>
    3008:	74746173 	ldrbtvc	r6, [r4], #-371	; 0xfffffe8d
    300c:	706f0079 	rsbvc	r0, pc, r9, ror r0	; <UNPREDICTABLE>
    3010:	646e6974 	strbtvs	r6, [lr], #-2420	; 0xfffff68c
    3014:	635f7300 	cmpvs	pc, #0, 6
    3018:	00666c72 	rsbeq	r6, r6, r2, ror ip
    301c:	6262696e 	rsbvs	r6, r2, #1802240	; 0x1b8000
    3020:	7500656c 	strvc	r6, [r0, #-1388]	; 0xfffffa94
    3024:	5f747261 	svcpl	0x00747261
    3028:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    302c:	72775f6f 	rsbsvc	r5, r7, #444	; 0x1bc
    3030:	5f657469 	svcpl	0x00657469
    3034:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3038:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
    303c:	745f6469 	ldrbvc	r6, [pc], #-1129	; 3044 <__core1_vectors-0xffcfbc>
    3040:	63727300 	cmnvs	r2, #0, 6
    3044:	7261752f 	rsbvc	r7, r1, #197132288	; 0xbc00000
    3048:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
    304c:	2e6f6964 	vnmulcs.f16	s13, s30, s9	; <UNPREDICTABLE>
    3050:	5f5f0063 	svcpl	0x005f0063
    3054:	5f746e69 	svcpl	0x00746e69
    3058:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    305c:	5f343674 	svcpl	0x00343674
    3060:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    3064:	69746d5f 	ldmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    3068:	6175006d 	cmnvs	r5, sp, rrx
    306c:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
    3070:	6f696474 	svcvs	0x00696474
    3074:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    3078:	735f6574 	cmpvc	pc, #116, 10	; 0x1d000000
    307c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    3080:	5f5f0067 	svcpl	0x005f0067
    3084:	736b6c62 	cmnvc	fp, #25088	; 0x6200
    3088:	5f657a69 	svcpl	0x00657a69
    308c:	656c0074 	strbvs	r0, [ip, #-116]!	; 0xffffff8c
    3090:	5f007466 	svcpl	0x00007466
    3094:	6469755f 	strbtvs	r7, [r9], #-1375	; 0xfffffaa1
    3098:	5f00745f 	svcpl	0x0000745f
    309c:	61747366 	cmnvs	r4, r6, ror #6
    30a0:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    30a4:	6974615f 	ldmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
    30a8:	6175006d 	cmnvs	r5, sp, rrx
    30ac:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
    30b0:	6f696474 	svcvs	0x00696474
    30b4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    30b8:	61755f74 	cmnvs	r5, r4, ror pc
    30bc:	00317472 	eorseq	r7, r1, r2, ror r4
    30c0:	735f7674 	cmpvc	pc, #116, 12	; 0x7400000
    30c4:	77006365 	strvc	r6, [r0, -r5, ror #6]
    30c8:	636e6568 	cmnvs	lr, #104, 10	; 0x1a000000
    30cc:	5f5f0065 	svcpl	0x005f0065
    30d0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    30d4:	745f3233 	ldrbvc	r3, [pc], #-563	; 30dc <__core1_vectors-0xffcf24>
    30d8:	5f747300 	svcpl	0x00747300
    30dc:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    30e0:	6f5f5f00 	svcvs	0x005f5f00
    30e4:	745f6666 	ldrbvc	r6, [pc], #-1638	; 30ec <__core1_vectors-0xffcf14>
    30e8:	5f747300 	svcpl	0x00747300
    30ec:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
    30f0:	79735f00 	ldmdbvc	r3!, {r8, r9, sl, fp, ip, lr}^
    30f4:	72655f73 	rsbvc	r5, r5, #460	; 0x1cc
    30f8:	73696c72 	cmnvc	r9, #29184	; 0x7200
    30fc:	5f5f0074 	svcpl	0x005f0074
    3100:	636b6c62 	cmnvs	fp, #25088	; 0x6200
    3104:	745f746e 	ldrbvc	r7, [pc], #-1134	; 310c <__core1_vectors-0xffcef4>
    3108:	5f747300 	svcpl	0x00747300
    310c:	76656472 			; <UNDEFINED> instruction: 0x76656472
    3110:	2f2e2e00 	svccs	0x002e2e00
    3114:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3118:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    311c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    3120:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    3124:	2f676966 	svccs	0x00676966
    3128:	2f6d7261 	svccs	0x006d7261
    312c:	3162696c 	cmncc	r2, ip, ror #18
    3130:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    3134:	00532e73 	subseq	r2, r3, r3, ror lr
    3138:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    313c:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    3140:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    3144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    314c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3150:	396c472d 	stmdbcc	ip!, {r0, r2, r3, r5, r8, r9, sl, lr}^
    3154:	2f39546b 	svccs	0x0039546b
    3158:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    315c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3160:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    3164:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3168:	2d392d69 	ldccs	13, cr2, [r9, #-420]!	; 0xfffffe5c
    316c:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    3170:	2f34712d 	svccs	0x0034712d
    3174:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    3178:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    317c:	6f6e2d6d 	svcvs	0x006e2d6d
    3180:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3184:	2f696261 	svccs	0x00696261
    3188:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    318c:	2e006363 	cdpcs	3, 0, cr6, cr0, cr3, {3}
    3190:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3194:	2f2e2e2f 	svccs	0x002e2e2f
    3198:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    319c:	632f6363 			; <UNDEFINED> instruction: 0x632f6363
    31a0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    31a4:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
    31a8:	70622f6d 	rsbvc	r2, r2, sp, ror #30
    31ac:	2e696261 	cdpcs	2, 6, cr6, cr9, cr1, {3}
    31b0:	73690053 	cmnvc	r9, #83	; 0x53
    31b4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    31b8:	70665f74 	rsbvc	r5, r6, r4, ror pc
    31bc:	6c62645f 	cfstrdvs	mvd6, [r2], #-380	; 0xfffffe84
    31c0:	6d726100 	ldfvse	f6, [r2, #-0]
    31c4:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    31c8:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    31cc:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    31d0:	52415400 	subpl	r5, r1, #0, 8
    31d4:	5f544547 	svcpl	0x00544547
    31d8:	5f555043 	svcpl	0x00555043
    31dc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    31e0:	326d7865 	rsbcc	r7, sp, #6619136	; 0x650000
    31e4:	52410033 	subpl	r0, r1, #51	; 0x33
    31e8:	51455f4d 	cmppl	r5, sp, asr #30
    31ec:	52415400 	subpl	r5, r1, #0, 8
    31f0:	5f544547 	svcpl	0x00544547
    31f4:	5f555043 	svcpl	0x00555043
    31f8:	316d7261 	cmncc	sp, r1, ror #4
    31fc:	74363531 	ldrtvc	r3, [r6], #-1329	; 0xfffffacf
    3200:	00736632 	rsbseq	r6, r3, r2, lsr r6
    3204:	5f617369 	svcpl	0x00617369
    3208:	5f746962 	svcpl	0x00746962
    320c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    3210:	44550062 	ldrbmi	r0, [r5], #-98	; 0xffffff9e
    3214:	70797449 	rsbsvc	r7, r9, r9, asr #8
    3218:	41540065 	cmpmi	r4, r5, rrx
    321c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3220:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3224:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3228:	61786574 	cmnvs	r8, r4, ror r5
    322c:	6f633735 	svcvs	0x00633735
    3230:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3234:	00333561 	eorseq	r3, r3, r1, ror #10
    3238:	64755f5f 	ldrbtvs	r5, [r5], #-3935	; 0xfffff0a1
    323c:	6f6d7669 	svcvs	0x006d7669
    3240:	34696464 	strbtcc	r6, [r9], #-1124	; 0xfffffb9c
    3244:	53414200 	movtpl	r4, #4608	; 0x1200
    3248:	52415f45 	subpl	r5, r1, #276	; 0x114
    324c:	385f4843 	ldmdacc	pc, {r0, r1, r6, fp, lr}^	; <UNPREDICTABLE>
    3250:	41425f4d 	cmpmi	r2, sp, asr #30
    3254:	54004553 	strpl	r4, [r0], #-1363	; 0xfffffaad
    3258:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    325c:	50435f54 	subpl	r5, r3, r4, asr pc
    3260:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    3264:	3031386d 	eorscc	r3, r1, sp, ror #16
    3268:	52415400 	subpl	r5, r1, #0, 8
    326c:	5f544547 	svcpl	0x00544547
    3270:	5f555043 	svcpl	0x00555043
    3274:	6e656778 	mcrvs	7, 3, r6, cr5, cr8, {3}
    3278:	41003165 	tstmi	r0, r5, ror #2
    327c:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    3280:	415f5343 	cmpmi	pc, r3, asr #6
    3284:	53435041 	movtpl	r5, #12353	; 0x3041
    3288:	4d57495f 	vldrmi.16	s9, [r7, #-190]	; 0xffffff42	; <UNPREDICTABLE>
    328c:	0054584d 	subseq	r5, r4, sp, asr #16
    3290:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    3294:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    3298:	00305f48 	eorseq	r5, r0, r8, asr #30
    329c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    32a0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    32a4:	00325f48 	eorseq	r5, r2, r8, asr #30
    32a8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    32ac:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    32b0:	00335f48 	eorseq	r5, r3, r8, asr #30
    32b4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    32b8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    32bc:	00345f48 	eorseq	r5, r4, r8, asr #30
    32c0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    32c4:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    32c8:	00365f48 	eorseq	r5, r6, r8, asr #30
    32cc:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    32d0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    32d4:	00375f48 	eorseq	r5, r7, r8, asr #30
    32d8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    32dc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    32e0:	785f5550 	ldmdavc	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
    32e4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    32e8:	73690065 	cmnvc	r9, #101	; 0x65
    32ec:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    32f0:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
    32f4:	65726465 	ldrbvs	r6, [r2, #-1125]!	; 0xfffffb9b
    32f8:	41540073 	cmpmi	r4, r3, ror r0
    32fc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3300:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3304:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3308:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    330c:	55003333 	strpl	r3, [r0, #-819]	; 0xfffffccd
    3310:	79744953 	ldmdbvc	r4!, {r0, r1, r4, r6, r8, fp, lr}^
    3314:	54006570 	strpl	r6, [r0], #-1392	; 0xfffffa90
    3318:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    331c:	50435f54 	subpl	r5, r3, r4, asr pc
    3320:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    3324:	6474376d 	ldrbtvs	r3, [r4], #-1901	; 0xfffff893
    3328:	6900696d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, fp, sp, lr}
    332c:	6e5f6173 	mrcvs	1, 2, r6, cr15, cr3, {3}
    3330:	7469626f 	strbtvc	r6, [r9], #-623	; 0xfffffd91
    3334:	52415400 	subpl	r5, r1, #0, 8
    3338:	5f544547 	svcpl	0x00544547
    333c:	5f555043 	svcpl	0x00555043
    3340:	316d7261 	cmncc	sp, r1, ror #4
    3344:	6a363731 	bvs	d91010 <__core1_vectors-0x26eff0>
    3348:	0073667a 	rsbseq	r6, r3, sl, ror r6
    334c:	5f4d5241 	svcpl	0x004d5241
    3350:	5f534350 	svcpl	0x00534350
    3354:	4e4b4e55 	mcrmi	14, 2, r4, cr11, cr5, {2}
    3358:	004e574f 	subeq	r5, lr, pc, asr #14
    335c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3360:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3364:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    3368:	65396d72 	ldrvs	r6, [r9, #-3442]!	; 0xfffff28e
    336c:	53414200 	movtpl	r4, #4608	; 0x1200
    3370:	52415f45 	subpl	r5, r1, #276	; 0x114
    3374:	355f4843 	ldrbcc	r4, [pc, #-2115]	; 2b39 <__core1_vectors-0xffd4c7>
    3378:	004a4554 	subeq	r4, sl, r4, asr r5
    337c:	5f6d7261 	svcpl	0x006d7261
    3380:	73666363 	cmnvc	r6, #-1946157055	; 0x8c000001
    3384:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
    3388:	00657461 	rsbeq	r7, r5, r1, ror #8
    338c:	5f6d7261 	svcpl	0x006d7261
    3390:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3394:	00657435 	rsbeq	r7, r5, r5, lsr r4
    3398:	70736e75 	rsbsvc	r6, r3, r5, ror lr
    339c:	735f6365 	cmpvc	pc, #-1811939327	; 0x94000001
    33a0:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    33a4:	69007367 	stmdbvs	r0, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    33a8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    33ac:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    33b0:	5f006365 	svcpl	0x00006365
    33b4:	7a6c635f 	bvc	1b1c138 <__end__+0xb00118>
    33b8:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    33bc:	4d524100 	ldfmie	f4, [r2, #-0]
    33c0:	0043565f 	subeq	r5, r3, pc, asr r6
    33c4:	5f6d7261 	svcpl	0x006d7261
    33c8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    33cc:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    33d0:	00656c61 	rsbeq	r6, r5, r1, ror #24
    33d4:	5f4d5241 	svcpl	0x004d5241
    33d8:	4100454c 	tstmi	r0, ip, asr #10
    33dc:	565f4d52 			; <UNDEFINED> instruction: 0x565f4d52
    33e0:	52410053 	subpl	r0, r1, #83	; 0x53
    33e4:	45475f4d 	strbmi	r5, [r7, #-3917]	; 0xfffff0b3
    33e8:	6d726100 	ldfvse	f6, [r2, #-0]
    33ec:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    33f0:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    33f4:	676e6f72 			; <UNDEFINED> instruction: 0x676e6f72
    33f8:	006d7261 	rsbeq	r7, sp, r1, ror #4
    33fc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    3400:	2078656c 	rsbscs	r6, r8, ip, ror #10
    3404:	616f6c66 	cmnvs	pc, r6, ror #24
    3408:	41540074 	cmpmi	r4, r4, ror r0
    340c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3410:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3414:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3418:	61786574 	cmnvs	r8, r4, ror r5
    341c:	54003531 	strpl	r3, [r0], #-1329	; 0xfffffacf
    3420:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3424:	50435f54 	subpl	r5, r3, r4, asr pc
    3428:	61665f55 	cmnvs	r6, r5, asr pc
    342c:	74363237 	ldrtvc	r3, [r6], #-567	; 0xfffffdc9
    3430:	41540065 	cmpmi	r4, r5, rrx
    3434:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3438:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    343c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3440:	61786574 	cmnvs	r8, r4, ror r5
    3444:	41003731 	tstmi	r0, r1, lsr r7
    3448:	475f4d52 			; <UNDEFINED> instruction: 0x475f4d52
    344c:	41540054 	cmpmi	r4, r4, asr r0
    3450:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3454:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3458:	6f656e5f 	svcvs	0x00656e5f
    345c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    3460:	00316e65 	eorseq	r6, r1, r5, ror #28
    3464:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3468:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    346c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3470:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3474:	66347278 			; <UNDEFINED> instruction: 0x66347278
    3478:	53414200 	movtpl	r4, #4608	; 0x1200
    347c:	52415f45 	subpl	r5, r1, #276	; 0x114
    3480:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    3484:	54004d45 	strpl	r4, [r0], #-3397	; 0xfffff2bb
    3488:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    348c:	50435f54 	subpl	r5, r3, r4, asr pc
    3490:	6f635f55 	svcvs	0x00635f55
    3494:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3498:	00323161 	eorseq	r3, r2, r1, ror #2
    349c:	68736168 	ldmdavs	r3!, {r3, r5, r6, r8, sp, lr}^
    34a0:	5f6c6176 	svcpl	0x006c6176
    34a4:	41420074 	hvcmi	8196	; 0x2004
    34a8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    34ac:	5f484352 	svcpl	0x00484352
    34b0:	005a4b36 	subseq	r4, sl, r6, lsr fp
    34b4:	5f617369 	svcpl	0x00617369
    34b8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    34bc:	6d726100 	ldfvse	f6, [r2, #-0]
    34c0:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    34c4:	72615f68 	rsbvc	r5, r1, #104, 30	; 0x1a0
    34c8:	77685f6d 	strbvc	r5, [r8, -sp, ror #30]!
    34cc:	00766964 	rsbseq	r6, r6, r4, ror #18
    34d0:	5f6d7261 	svcpl	0x006d7261
    34d4:	5f757066 	svcpl	0x00757066
    34d8:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
    34dc:	61736900 	cmnvs	r3, r0, lsl #18
    34e0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    34e4:	3170665f 	cmncc	r0, pc, asr r6
    34e8:	52410036 	subpl	r0, r1, #54	; 0x36
    34ec:	49485f4d 	stmdbmi	r8, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    34f0:	61736900 	cmnvs	r3, r0, lsl #18
    34f4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    34f8:	6964615f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
    34fc:	41540076 	cmpmi	r4, r6, ror r0
    3500:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3504:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3508:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    350c:	36333131 			; <UNDEFINED> instruction: 0x36333131
    3510:	5400736a 	strpl	r7, [r0], #-874	; 0xfffffc96
    3514:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3518:	50435f54 	subpl	r5, r3, r4, asr pc
    351c:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    3520:	5400386d 	strpl	r3, [r0], #-2157	; 0xfffff793
    3524:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3528:	50435f54 	subpl	r5, r3, r4, asr pc
    352c:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    3530:	5400396d 	strpl	r3, [r0], #-2413	; 0xfffff693
    3534:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3538:	50435f54 	subpl	r5, r3, r4, asr pc
    353c:	61665f55 	cmnvs	r6, r5, asr pc
    3540:	00363236 	eorseq	r3, r6, r6, lsr r2
    3544:	5f6d7261 	svcpl	0x006d7261
    3548:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    354c:	736d635f 	cmnvc	sp, #2080374785	; 0x7c000001
    3550:	41540065 	cmpmi	r4, r5, rrx
    3554:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3558:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    355c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3560:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    3564:	41540034 	cmpmi	r4, r4, lsr r0
    3568:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    356c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3570:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3574:	00653031 	rsbeq	r3, r5, r1, lsr r0
    3578:	47524154 			; <UNDEFINED> instruction: 0x47524154
    357c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3580:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3584:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3588:	00376d78 	eorseq	r6, r7, r8, ror sp
    358c:	5f617369 	svcpl	0x00617369
    3590:	5f746962 	svcpl	0x00746962
    3594:	35767066 	ldrbcc	r7, [r6, #-102]!	; 0xffffff9a
    3598:	6d726100 	ldfvse	f6, [r2, #-0]
    359c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    35a0:	6f635f64 	svcvs	0x00635f64
    35a4:	41006564 	tstmi	r0, r4, ror #10
    35a8:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    35ac:	415f5343 	cmpmi	pc, r3, asr #6
    35b0:	53435041 	movtpl	r5, #12353	; 0x3041
    35b4:	61736900 	cmnvs	r3, r0, lsl #18
    35b8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    35bc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    35c0:	325f3876 	subscc	r3, pc, #7733248	; 0x760000
    35c4:	53414200 	movtpl	r4, #4608	; 0x1200
    35c8:	52415f45 	subpl	r5, r1, #276	; 0x114
    35cc:	335f4843 	cmpcc	pc, #4390912	; 0x430000
    35d0:	4154004d 	cmpmi	r4, sp, asr #32
    35d4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    35d8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    35dc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    35e0:	61786574 	cmnvs	r8, r4, ror r5
    35e4:	6f633731 	svcvs	0x00633731
    35e8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    35ec:	54003761 	strpl	r3, [r0], #-1889	; 0xfffff89f
    35f0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    35f4:	50435f54 	subpl	r5, r3, r4, asr pc
    35f8:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    35fc:	3031376d 	eorscc	r3, r1, sp, ror #14
    3600:	72610074 	rsbvc	r0, r1, #116	; 0x74
    3604:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3608:	695f6863 	ldmdbvs	pc, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    360c:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    3610:	69003274 	stmdbvs	r0, {r2, r4, r5, r6, r9, ip, sp}
    3614:	6e5f6173 	mrcvs	1, 2, r6, cr15, cr3, {3}
    3618:	625f6d75 	subsvs	r6, pc, #7488	; 0x1d40
    361c:	00737469 	rsbseq	r7, r3, r9, ror #8
    3620:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3624:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3628:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    362c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3630:	70306d78 	eorsvc	r6, r0, r8, ror sp
    3634:	7373756c 	cmnvc	r3, #108, 10	; 0x1b000000
    3638:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    363c:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    3640:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    3644:	52415400 	subpl	r5, r1, #0, 8
    3648:	5f544547 	svcpl	0x00544547
    364c:	5f555043 	svcpl	0x00555043
    3650:	6e797865 	cdpvs	8, 7, cr7, cr9, cr5, {3}
    3654:	316d736f 	cmncc	sp, pc, ror #6
    3658:	52415400 	subpl	r5, r1, #0, 8
    365c:	5f544547 	svcpl	0x00544547
    3660:	5f555043 	svcpl	0x00555043
    3664:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3668:	35727865 	ldrbcc	r7, [r2, #-2149]!	; 0xfffff79b
    366c:	73690032 	cmnvc	r9, #50	; 0x32
    3670:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3674:	64745f74 	ldrbtvs	r5, [r4], #-3956	; 0xfffff08c
    3678:	70007669 	andvc	r7, r0, r9, ror #12
    367c:	65666572 	strbvs	r6, [r6, #-1394]!	; 0xfffffa8e
    3680:	656e5f72 	strbvs	r5, [lr, #-3954]!	; 0xfffff08e
    3684:	665f6e6f 	ldrbvs	r6, [pc], -pc, ror #28
    3688:	365f726f 	ldrbcc	r7, [pc], -pc, ror #4
    368c:	74696234 	strbtvc	r6, [r9], #-564	; 0xfffffdcc
    3690:	73690073 	cmnvc	r9, #115	; 0x73
    3694:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3698:	70665f74 	rsbvc	r5, r6, r4, ror pc
    369c:	6d663631 	stclvs	6, cr3, [r6, #-196]!	; 0xffffff3c
    36a0:	4154006c 	cmpmi	r4, ip, rrx
    36a4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    36a8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    36ac:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    36b0:	61786574 	cmnvs	r8, r4, ror r5
    36b4:	54003233 	strpl	r3, [r0], #-563	; 0xfffffdcd
    36b8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    36bc:	50435f54 	subpl	r5, r3, r4, asr pc
    36c0:	6f635f55 	svcvs	0x00635f55
    36c4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    36c8:	00353361 	eorseq	r3, r5, r1, ror #6
    36cc:	5f617369 	svcpl	0x00617369
    36d0:	5f746962 	svcpl	0x00746962
    36d4:	36317066 	ldrtcc	r7, [r1], -r6, rrx
    36d8:	766e6f63 	strbtvc	r6, [lr], -r3, ror #30
    36dc:	736e7500 	cmnvc	lr, #0, 10
    36e0:	76636570 			; <UNDEFINED> instruction: 0x76636570
    36e4:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    36e8:	73676e69 	cmnvc	r7, #1680	; 0x690
    36ec:	52415400 	subpl	r5, r1, #0, 8
    36f0:	5f544547 	svcpl	0x00544547
    36f4:	5f555043 	svcpl	0x00555043
    36f8:	316d7261 	cmncc	sp, r1, ror #4
    36fc:	74363531 	ldrtvc	r3, [r6], #-1329	; 0xfffffacf
    3700:	54007332 	strpl	r7, [r0], #-818	; 0xfffffcce
    3704:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3708:	50435f54 	subpl	r5, r3, r4, asr pc
    370c:	6f635f55 	svcvs	0x00635f55
    3710:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3714:	63353761 	teqvs	r5, #25427968	; 0x1840000
    3718:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    371c:	35356178 	ldrcc	r6, [r5, #-376]!	; 0xfffffe88
    3720:	52415400 	subpl	r5, r1, #0, 8
    3724:	5f544547 	svcpl	0x00544547
    3728:	5f555043 	svcpl	0x00555043
    372c:	30366166 	eorscc	r6, r6, r6, ror #2
    3730:	00657436 	rsbeq	r7, r5, r6, lsr r4
    3734:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3738:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    373c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    3740:	32396d72 	eorscc	r6, r9, #7296	; 0x1c80
    3744:	736a6536 	cmnvc	sl, #226492416	; 0xd800000
    3748:	53414200 	movtpl	r4, #4608	; 0x1200
    374c:	52415f45 	subpl	r5, r1, #276	; 0x114
    3750:	345f4843 	ldrbcc	r4, [pc], #-2115	; 3758 <__core1_vectors-0xffc8a8>
    3754:	73690054 	cmnvc	r9, #84	; 0x54
    3758:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    375c:	72635f74 	rsbvc	r5, r3, #116, 30	; 0x1d0
    3760:	6f747079 	svcvs	0x00747079
    3764:	6d726100 	ldfvse	f6, [r2, #-0]
    3768:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    376c:	6e695f73 	mcrvs	15, 3, r5, cr9, cr3, {3}
    3770:	7165735f 	cmnvc	r5, pc, asr r3
    3774:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    3778:	73690065 	cmnvc	r9, #101	; 0x65
    377c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3780:	62735f74 	rsbsvs	r5, r3, #116, 30	; 0x1d0
    3784:	53414200 	movtpl	r4, #4608	; 0x1200
    3788:	52415f45 	subpl	r5, r1, #276	; 0x114
    378c:	355f4843 	ldrbcc	r4, [pc, #-2115]	; 2f51 <__core1_vectors-0xffd0af>
    3790:	69004554 	stmdbvs	r0, {r2, r4, r6, r8, sl, lr}
    3794:	665f6173 			; <UNDEFINED> instruction: 0x665f6173
    3798:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0xfffffe9b
    379c:	69006572 	stmdbvs	r0, {r1, r4, r5, r6, r8, sl, sp, lr}
    37a0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    37a4:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    37a8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    37ac:	006c756d 	rsbeq	r7, ip, sp, ror #10
    37b0:	5f6d7261 	svcpl	0x006d7261
    37b4:	676e616c 	strbvs	r6, [lr, -ip, ror #2]!
    37b8:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    37bc:	5f747570 	svcpl	0x00747570
    37c0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
    37c4:	615f7463 	cmpvs	pc, r3, ror #8
    37c8:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
    37cc:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
    37d0:	6f685f73 	svcvs	0x00685f73
    37d4:	69006b6f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r8, r9, fp, sp, lr}
    37d8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    37dc:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    37e0:	33645f70 	cmncc	r4, #112, 30	; 0x1c0
    37e4:	52410032 	subpl	r0, r1, #50	; 0x32
    37e8:	454e5f4d 	strbmi	r5, [lr, #-3917]	; 0xfffff0b3
    37ec:	61736900 	cmnvs	r3, r0, lsl #18
    37f0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    37f4:	3865625f 	stmdacc	r5!, {r0, r1, r2, r3, r4, r6, r9, sp, lr}^
    37f8:	52415400 	subpl	r5, r1, #0, 8
    37fc:	5f544547 	svcpl	0x00544547
    3800:	5f555043 	svcpl	0x00555043
    3804:	316d7261 	cmncc	sp, r1, ror #4
    3808:	6a363731 	bvs	d914d4 <__core1_vectors-0x26eb2c>
    380c:	7000737a 	andvc	r7, r0, sl, ror r3
    3810:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
    3814:	726f7373 	rsbvc	r7, pc, #-872415231	; 0xcc000001
    3818:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    381c:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    3820:	70665f6c 	rsbvc	r5, r6, ip, ror #30
    3824:	61007375 	tstvs	r0, r5, ror r3
    3828:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    382c:	42007363 	andmi	r7, r0, #-1946157055	; 0x8c000001
    3830:	5f455341 	svcpl	0x00455341
    3834:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3838:	0054355f 	subseq	r3, r4, pc, asr r5
    383c:	5f6d7261 	svcpl	0x006d7261
    3840:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3844:	54007434 	strpl	r7, [r0], #-1076	; 0xfffffbcc
    3848:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    384c:	50435f54 	subpl	r5, r3, r4, asr pc
    3850:	6f635f55 	svcvs	0x00635f55
    3854:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3858:	63363761 	teqvs	r6, #25427968	; 0x1840000
    385c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3860:	35356178 	ldrcc	r6, [r5, #-376]!	; 0xfffffe88
    3864:	6d726100 	ldfvse	f6, [r2, #-0]
    3868:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    386c:	62775f65 	rsbsvs	r5, r7, #404	; 0x194
    3870:	68006675 	stmdavs	r0, {r0, r2, r4, r5, r6, r9, sl, sp, lr}
    3874:	5f626174 	svcpl	0x00626174
    3878:	68736168 	ldmdavs	r3!, {r3, r5, r6, r8, sp, lr}^
    387c:	61736900 	cmnvs	r3, r0, lsl #18
    3880:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3884:	6975715f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
    3888:	6e5f6b72 	vmovvs.s8	r6, d15[3]
    388c:	6f765f6f 	svcvs	0x00765f6f
    3890:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    3894:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
    3898:	41540065 	cmpmi	r4, r5, rrx
    389c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    38a0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    38a4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    38a8:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    38ac:	41540030 	cmpmi	r4, r0, lsr r0
    38b0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    38b4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    38b8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    38bc:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    38c0:	41540031 	cmpmi	r4, r1, lsr r0
    38c4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    38c8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    38cc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    38d0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    38d4:	73690033 	cmnvc	r9, #51	; 0x33
    38d8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    38dc:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    38e0:	5f38766d 	svcpl	0x0038766d
    38e4:	72610031 	rsbvc	r0, r1, #49	; 0x31
    38e8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    38ec:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    38f0:	00656d61 	rsbeq	r6, r5, r1, ror #26
    38f4:	5f617369 	svcpl	0x00617369
    38f8:	5f746962 	svcpl	0x00746962
    38fc:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3900:	00335f38 	eorseq	r5, r3, r8, lsr pc
    3904:	5f617369 	svcpl	0x00617369
    3908:	5f746962 	svcpl	0x00746962
    390c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3910:	00345f38 	eorseq	r5, r4, r8, lsr pc
    3914:	5f617369 	svcpl	0x00617369
    3918:	5f746962 	svcpl	0x00746962
    391c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3920:	00355f38 	eorseq	r5, r5, r8, lsr pc
    3924:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3928:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    392c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3930:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3934:	33356178 	teqcc	r5, #120, 2
    3938:	52415400 	subpl	r5, r1, #0, 8
    393c:	5f544547 	svcpl	0x00544547
    3940:	5f555043 	svcpl	0x00555043
    3944:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3948:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    394c:	41540035 	cmpmi	r4, r5, lsr r0
    3950:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3954:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3958:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    395c:	61786574 	cmnvs	r8, r4, ror r5
    3960:	54003735 	strpl	r3, [r0], #-1845	; 0xfffff8cb
    3964:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3968:	50435f54 	subpl	r5, r3, r4, asr pc
    396c:	706d5f55 	rsbvc	r5, sp, r5, asr pc
    3970:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    3974:	61736900 	cmnvs	r3, r0, lsl #18
    3978:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    397c:	7066765f 	rsbvc	r7, r6, pc, asr r6
    3980:	54003276 	strpl	r3, [r0], #-630	; 0xfffffd8a
    3984:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3988:	50435f54 	subpl	r5, r3, r4, asr pc
    398c:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    3990:	6f6e5f6d 	svcvs	0x006e5f6d
    3994:	6100656e 	tstvs	r0, lr, ror #10
    3998:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    399c:	5f686372 	svcpl	0x00686372
    39a0:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    39a4:	52415400 	subpl	r5, r1, #0, 8
    39a8:	5f544547 	svcpl	0x00544547
    39ac:	5f555043 	svcpl	0x00555043
    39b0:	316d7261 	cmncc	sp, r1, ror #4
    39b4:	65363230 	ldrvs	r3, [r6, #-560]!	; 0xfffffdd0
    39b8:	4200736a 	andmi	r7, r0, #-1476395007	; 0xa8000001
    39bc:	5f455341 	svcpl	0x00455341
    39c0:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    39c4:	004a365f 	subeq	r3, sl, pc, asr r6
    39c8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    39cc:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    39d0:	4b365f48 	blmi	d9b6f8 <__core1_vectors-0x264908>
    39d4:	53414200 	movtpl	r4, #4608	; 0x1200
    39d8:	52415f45 	subpl	r5, r1, #276	; 0x114
    39dc:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    39e0:	7369004d 	cmnvc	r9, #77	; 0x4d
    39e4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    39e8:	77695f74 			; <UNDEFINED> instruction: 0x77695f74
    39ec:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    39f0:	52415400 	subpl	r5, r1, #0, 8
    39f4:	5f544547 	svcpl	0x00544547
    39f8:	5f555043 	svcpl	0x00555043
    39fc:	316d7261 	cmncc	sp, r1, ror #4
    3a00:	6a363331 	bvs	d906cc <__core1_vectors-0x26f934>
    3a04:	41007366 	tstmi	r0, r6, ror #6
    3a08:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    3a0c:	52410053 	subpl	r0, r1, #83	; 0x53
    3a10:	544c5f4d 	strbpl	r5, [ip], #-3917	; 0xfffff0b3
    3a14:	53414200 	movtpl	r4, #4608	; 0x1200
    3a18:	52415f45 	subpl	r5, r1, #276	; 0x114
    3a1c:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    3a20:	5241005a 	subpl	r0, r1, #90	; 0x5a
    3a24:	43505f4d 	cmpmi	r0, #308	; 0x134
    3a28:	41415f53 	cmpmi	r1, r3, asr pc
    3a2c:	5f534350 	svcpl	0x00534350
    3a30:	00504656 	subseq	r4, r0, r6, asr r6
    3a34:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3a38:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3a3c:	695f5550 	ldmdbvs	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
    3a40:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    3a44:	69003274 	stmdbvs	r0, {r2, r4, r5, r6, r9, ip, sp}
    3a48:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3a4c:	6e5f7469 	cdpvs	4, 5, cr7, cr15, cr9, {3}
    3a50:	006e6f65 	rsbeq	r6, lr, r5, ror #30
    3a54:	5f6d7261 	svcpl	0x006d7261
    3a58:	5f757066 	svcpl	0x00757066
    3a5c:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    3a60:	61736900 	cmnvs	r3, r0, lsl #18
    3a64:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3a68:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3a6c:	6d653776 	stclvs	7, cr3, [r5, #-472]!	; 0xfffffe28
    3a70:	52415400 	subpl	r5, r1, #0, 8
    3a74:	5f544547 	svcpl	0x00544547
    3a78:	5f555043 	svcpl	0x00555043
    3a7c:	32366166 	eorscc	r6, r6, #-2147483623	; 0x80000019
    3a80:	00657436 	rsbeq	r7, r5, r6, lsr r4
    3a84:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3a88:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3a8c:	6d5f5550 	cfldr64vs	mvdx5, [pc, #-320]	; 3954 <__core1_vectors-0xffc6ac>
    3a90:	65767261 	ldrbvs	r7, [r6, #-609]!	; 0xfffffd9f
    3a94:	705f6c6c 	subsvc	r6, pc, ip, ror #24
    3a98:	6800346a 	stmdavs	r0, {r1, r3, r5, r6, sl, ip, sp}
    3a9c:	5f626174 	svcpl	0x00626174
    3aa0:	68736168 	ldmdavs	r3!, {r3, r5, r6, r8, sp, lr}^
    3aa4:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3aa8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    3aac:	6d726100 	ldfvse	f6, [r2, #-0]
    3ab0:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    3ab4:	6f635f65 	svcvs	0x00635f65
    3ab8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3abc:	0039615f 	eorseq	r6, r9, pc, asr r1
    3ac0:	5f617369 	svcpl	0x00617369
    3ac4:	5f746962 	svcpl	0x00746962
    3ac8:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    3acc:	00327478 	eorseq	r7, r2, r8, ror r4
    3ad0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3ad4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3ad8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3adc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3ae0:	32376178 	eorscc	r6, r7, #120, 2
    3ae4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3ae8:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    3aec:	73690033 	cmnvc	r9, #51	; 0x33
    3af0:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3af4:	68745f74 	ldmdavs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3af8:	32626d75 	rsbcc	r6, r2, #7488	; 0x1d40
    3afc:	53414200 	movtpl	r4, #4608	; 0x1200
    3b00:	52415f45 	subpl	r5, r1, #276	; 0x114
    3b04:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    3b08:	73690041 	cmnvc	r9, #65	; 0x41
    3b0c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3b10:	6f645f74 	svcvs	0x00645f74
    3b14:	6f727074 	svcvs	0x00727074
    3b18:	72610064 	rsbvc	r0, r1, #100	; 0x64
    3b1c:	70665f6d 	rsbvc	r5, r6, sp, ror #30
    3b20:	745f3631 	ldrbvc	r3, [pc], #-1585	; 3b28 <__core1_vectors-0xffc4d8>
    3b24:	5f657079 	svcpl	0x00657079
    3b28:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    3b2c:	4d524100 	ldfmie	f4, [r2, #-0]
    3b30:	00494d5f 	subeq	r4, r9, pc, asr sp
    3b34:	5f6d7261 	svcpl	0x006d7261
    3b38:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3b3c:	61006b36 	tstvs	r0, r6, lsr fp
    3b40:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    3b44:	36686372 			; <UNDEFINED> instruction: 0x36686372
    3b48:	4142006d 	cmpmi	r2, sp, rrx
    3b4c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3b50:	5f484352 	svcpl	0x00484352
    3b54:	5f005237 	svcpl	0x00005237
    3b58:	706f705f 	rsbvc	r7, pc, pc, asr r0	; <UNPREDICTABLE>
    3b5c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    3b60:	61745f74 	cmnvs	r4, r4, ror pc
    3b64:	73690062 	cmnvc	r9, #98	; 0x62
    3b68:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3b6c:	6d635f74 	stclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    3b70:	54006573 	strpl	r6, [r0], #-1395	; 0xfffffa8d
    3b74:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3b78:	50435f54 	subpl	r5, r3, r4, asr pc
    3b7c:	6f635f55 	svcvs	0x00635f55
    3b80:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3b84:	00333761 	eorseq	r3, r3, r1, ror #14
    3b88:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3b8c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3b90:	675f5550 			; <UNDEFINED> instruction: 0x675f5550
    3b94:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    3b98:	37766369 	ldrbcc	r6, [r6, -r9, ror #6]!
    3b9c:	41540061 	cmpmi	r4, r1, rrx
    3ba0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3ba4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3ba8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3bac:	61786574 	cmnvs	r8, r4, ror r5
    3bb0:	61003637 	tstvs	r0, r7, lsr r6
    3bb4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    3bb8:	5f686372 	svcpl	0x00686372
    3bbc:	765f6f6e 	ldrbvc	r6, [pc], -lr, ror #30
    3bc0:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    3bc4:	5f656c69 	svcpl	0x00656c69
    3bc8:	42006563 	andmi	r6, r0, #415236096	; 0x18c00000
    3bcc:	5f455341 	svcpl	0x00455341
    3bd0:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3bd4:	0041385f 	subeq	r3, r1, pc, asr r8
    3bd8:	5f617369 	svcpl	0x00617369
    3bdc:	5f746962 	svcpl	0x00746962
    3be0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3be4:	42007435 	andmi	r7, r0, #889192448	; 0x35000000
    3be8:	5f455341 	svcpl	0x00455341
    3bec:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3bf0:	0052385f 	subseq	r3, r2, pc, asr r8
    3bf4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3bf8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3bfc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3c00:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3c04:	33376178 	teqcc	r7, #120, 2
    3c08:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3c0c:	33617865 	cmncc	r1, #6619136	; 0x650000
    3c10:	52410035 	subpl	r0, r1, #53	; 0x35
    3c14:	564e5f4d 	strbpl	r5, [lr], -sp, asr #30
    3c18:	6d726100 	ldfvse	f6, [r2, #-0]
    3c1c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    3c20:	61003468 	tstvs	r0, r8, ror #8
    3c24:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    3c28:	36686372 			; <UNDEFINED> instruction: 0x36686372
    3c2c:	6d726100 	ldfvse	f6, [r2, #-0]
    3c30:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    3c34:	61003768 	tstvs	r0, r8, ror #14
    3c38:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    3c3c:	38686372 	stmdacc	r8!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    3c40:	6d726100 	ldfvse	f6, [r2, #-0]
    3c44:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    3c48:	73785f65 	cmnvc	r8, #404	; 0x194
    3c4c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    3c50:	6b616d00 	blvs	185f058 <__end__+0x843038>
    3c54:	5f676e69 	svcpl	0x00676e69
    3c58:	736e6f63 	cmnvc	lr, #396	; 0x18c
    3c5c:	61745f74 	cmnvs	r4, r4, ror pc
    3c60:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3c64:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    3c68:	61635f62 	cmnvs	r3, r2, ror #30
    3c6c:	765f6c6c 	ldrbvc	r6, [pc], -ip, ror #24
    3c70:	6c5f6169 	ldfvse	f6, [pc], {105}	; 0x69
    3c74:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
    3c78:	61736900 	cmnvs	r3, r0, lsl #18
    3c7c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3c80:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3c84:	006b3676 	rsbeq	r3, fp, r6, ror r6
    3c88:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3c8c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3c90:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3c94:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3c98:	00376178 	eorseq	r6, r7, r8, ror r1
    3c9c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3ca0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3ca4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3ca8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3cac:	00386178 	eorseq	r6, r8, r8, ror r1
    3cb0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3cb4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3cb8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3cbc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3cc0:	00396178 	eorseq	r6, r9, r8, ror r1
    3cc4:	5f4d5241 	svcpl	0x004d5241
    3cc8:	5f534350 	svcpl	0x00534350
    3ccc:	53435041 	movtpl	r5, #12353	; 0x3041
    3cd0:	4d524100 	ldfmie	f4, [r2, #-0]
    3cd4:	5343505f 	movtpl	r5, #12383	; 0x305f
    3cd8:	5054415f 	subspl	r4, r4, pc, asr r1
    3cdc:	63005343 	movwvs	r5, #835	; 0x343
    3ce0:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    3ce4:	64207865 	strtvs	r7, [r0], #-2149	; 0xfffff79b
    3ce8:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    3cec:	41540065 	cmpmi	r4, r5, rrx
    3cf0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3cf4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3cf8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3cfc:	61786574 	cmnvs	r8, r4, ror r5
    3d00:	6f633337 	svcvs	0x00633337
    3d04:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3d08:	00333561 	eorseq	r3, r3, r1, ror #10
    3d0c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3d10:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3d14:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3d18:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3d1c:	70306d78 	eorsvc	r6, r0, r8, ror sp
    3d20:	0073756c 	rsbseq	r7, r3, ip, ror #10
    3d24:	5f6d7261 	svcpl	0x006d7261
    3d28:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    3d2c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3d30:	785f7469 	ldmdavc	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3d34:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    3d38:	645f0065 	ldrbvs	r0, [pc], #-101	; 3d40 <__core1_vectors-0xffc2c0>
    3d3c:	5f746e6f 	svcpl	0x00746e6f
    3d40:	5f657375 	svcpl	0x00657375
    3d44:	65657274 	strbvs	r7, [r5, #-628]!	; 0xfffffd8c
    3d48:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    3d4c:	54005f65 	strpl	r5, [r0], #-3941	; 0xfffff09b
    3d50:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3d54:	50435f54 	subpl	r5, r3, r4, asr pc
    3d58:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    3d5c:	7430316d 	ldrtvc	r3, [r0], #-365	; 0xfffffe93
    3d60:	00696d64 	rsbeq	r6, r9, r4, ror #26
    3d64:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3d68:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3d6c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3d70:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3d74:	00356178 	eorseq	r6, r5, r8, ror r1
    3d78:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    3d7c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    3d80:	65746968 	ldrbvs	r6, [r4, #-2408]!	; 0xfffff698
    3d84:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    3d88:	72610065 	rsbvc	r0, r1, #101	; 0x65
    3d8c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3d90:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    3d94:	54006372 	strpl	r6, [r0], #-882	; 0xfffffc8e
    3d98:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3d9c:	50435f54 	subpl	r5, r3, r4, asr pc
    3da0:	6f635f55 	svcvs	0x00635f55
    3da4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3da8:	6d73316d 	ldfvse	f3, [r3, #-436]!	; 0xfffffe4c
    3dac:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    3db0:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    3db4:	00796c70 	rsbseq	r6, r9, r0, ror ip
    3db8:	20554e47 	subscs	r4, r5, r7, asr #28
    3dbc:	20373143 	eorscs	r3, r7, r3, asr #2
    3dc0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3dc4:	30322031 	eorscc	r2, r2, r1, lsr r0
    3dc8:	30313931 	eorscc	r3, r1, r1, lsr r9
    3dcc:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
    3dd0:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    3dd4:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    3dd8:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
    3ddc:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
    3de0:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
    3de4:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
    3de8:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
    3dec:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    3df0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    3df4:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
    3df8:	205d3939 	subscs	r3, sp, r9, lsr r9
    3dfc:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
    3e00:	72613d75 	rsbvc	r3, r1, #7488	; 0x1d40
    3e04:	6474376d 	ldrbtvs	r3, [r4], #-1901	; 0xfffff893
    3e08:	2d20696d 			; <UNDEFINED> instruction: 0x2d20696d
    3e0c:	6f6c666d 	svcvs	0x006c666d
    3e10:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    3e14:	733d6962 	teqvc	sp, #1605632	; 0x188000
    3e18:	2074666f 	rsbscs	r6, r4, pc, ror #12
    3e1c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    3e20:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
    3e24:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3e28:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    3e2c:	20743476 	rsbscs	r3, r4, r6, ror r4
    3e30:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    3e34:	672d2067 	strvs	r2, [sp, -r7, rrx]!
    3e38:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    3e3c:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    3e40:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    3e44:	62662d20 	rsbvs	r2, r6, #32, 26	; 0x800
    3e48:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    3e4c:	2d676e69 	stclcs	14, cr6, [r7, #-420]!	; 0xfffffe5c
    3e50:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    3e54:	2d206363 	stccs	3, cr6, [r0, #-396]!	; 0xfffffe74
    3e58:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 3cc8 <__core1_vectors-0xffc338>
    3e5c:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    3e60:	72702d6b 	rsbsvc	r2, r0, #6848	; 0x1ac0
    3e64:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    3e68:	20726f74 	rsbscs	r6, r2, r4, ror pc
    3e6c:	6f6e662d 	svcvs	0x006e662d
    3e70:	6c6e692d 			; <UNDEFINED> instruction: 0x6c6e692d
    3e74:	20656e69 	rsbcs	r6, r5, r9, ror #28
    3e78:	7865662d 	stmdavc	r5!, {r0, r2, r3, r5, r9, sl, sp, lr}^
    3e7c:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0xfffffa9d
    3e80:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    3e84:	76662d20 	strbtvc	r2, [r6], -r0, lsr #26
    3e88:	62697369 	rsbvs	r7, r9, #-1543503871	; 0xa4000001
    3e8c:	74696c69 	strbtvc	r6, [r9], #-3177	; 0xfffff397
    3e90:	69683d79 	stmdbvs	r8!, {r0, r3, r4, r5, r6, r8, sl, fp, ip, sp}^
    3e94:	6e656464 	cdpvs	4, 6, cr6, cr5, cr4, {3}
    3e98:	6d726100 	ldfvse	f6, [r2, #-0]
    3e9c:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
    3ea0:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    3ea4:	0063635f 	rsbeq	r6, r3, pc, asr r3
    3ea8:	5f617369 	svcpl	0x00617369
    3eac:	5f746962 	svcpl	0x00746962
    3eb0:	33637263 	cmncc	r3, #805306374	; 0x30000006
    3eb4:	52410032 	subpl	r0, r1, #50	; 0x32
    3eb8:	4c505f4d 	mrrcmi	15, 4, r5, r0, cr13
    3ebc:	61736900 	cmnvs	r3, r0, lsl #18
    3ec0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3ec4:	7066765f 	rsbvc	r7, r6, pc, asr r6
    3ec8:	69003376 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, r9, ip, sp}
    3ecc:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3ed0:	765f7469 	ldrbvc	r7, [pc], -r9, ror #8
    3ed4:	34767066 	ldrbtcc	r7, [r6], #-102	; 0xffffff9a
    3ed8:	53414200 	movtpl	r4, #4608	; 0x1200
    3edc:	52415f45 	subpl	r5, r1, #276	; 0x114
    3ee0:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    3ee4:	42003254 	andmi	r3, r0, #84, 4	; 0x40000005
    3ee8:	5f455341 	svcpl	0x00455341
    3eec:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3ef0:	5f4d385f 	svcpl	0x004d385f
    3ef4:	4e49414d 	dvfmiem	f4, f1, #5.0
    3ef8:	52415400 	subpl	r5, r1, #0, 8
    3efc:	5f544547 	svcpl	0x00544547
    3f00:	5f555043 	svcpl	0x00555043
    3f04:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    3f08:	696d6474 	stmdbvs	sp!, {r2, r4, r5, r6, sl, sp, lr}^
    3f0c:	4d524100 	ldfmie	f4, [r2, #-0]
    3f10:	004c415f 	subeq	r4, ip, pc, asr r1
    3f14:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    3f18:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    3f1c:	4d375f48 	ldcmi	15, cr5, [r7, #-288]!	; 0xfffffee0
    3f20:	6d726100 	ldfvse	f6, [r2, #-0]
    3f24:	7261745f 	rsbvc	r7, r1, #1593835520	; 0x5f000000
    3f28:	5f746567 	svcpl	0x00746567
    3f2c:	6562616c 	strbvs	r6, [r2, #-364]!	; 0xfffffe94
    3f30:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    3f34:	61745f6d 	cmnvs	r4, sp, ror #30
    3f38:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    3f3c:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    3f40:	4154006e 	cmpmi	r4, lr, rrx
    3f44:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3f48:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3f4c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3f50:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    3f54:	41540034 	cmpmi	r4, r4, lsr r0
    3f58:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3f5c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3f60:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3f64:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    3f68:	41540035 	cmpmi	r4, r5, lsr r0
    3f6c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3f70:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3f74:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3f78:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    3f7c:	41540037 	cmpmi	r4, r7, lsr r0
    3f80:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3f84:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3f88:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3f8c:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    3f90:	73690038 	cmnvc	r9, #56	; 0x38
    3f94:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3f98:	706c5f74 	rsbvc	r5, ip, r4, ror pc
    3f9c:	69006561 	stmdbvs	r0, {r0, r5, r6, r8, sl, sp, lr}
    3fa0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3fa4:	715f7469 	cmpvc	pc, r9, ror #8
    3fa8:	6b726975 	blvs	1c9e584 <__end__+0xc82564>
    3fac:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3fb0:	7a6b3676 	bvc	1ad1990 <__end__+0xab5970>
    3fb4:	61736900 	cmnvs	r3, r0, lsl #18
    3fb8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3fbc:	746f6e5f 	strbtvc	r6, [pc], #-3679	; 3fc4 <__core1_vectors-0xffc03c>
    3fc0:	7369006d 	cmnvc	r9, #109	; 0x6d
    3fc4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3fc8:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    3fcc:	0034766d 	eorseq	r7, r4, sp, ror #12
    3fd0:	5f617369 	svcpl	0x00617369
    3fd4:	5f746962 	svcpl	0x00746962
    3fd8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3fdc:	73690036 	cmnvc	r9, #54	; 0x36
    3fe0:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3fe4:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    3fe8:	0037766d 	eorseq	r7, r7, sp, ror #12
    3fec:	5f617369 	svcpl	0x00617369
    3ff0:	5f746962 	svcpl	0x00746962
    3ff4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3ff8:	645f0038 	ldrbvs	r0, [pc], #-56	; 4000 <__core1_vectors-0xffc000>
    3ffc:	5f746e6f 	svcpl	0x00746e6f
    4000:	5f657375 	svcpl	0x00657375
    4004:	5f787472 	svcpl	0x00787472
    4008:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
    400c:	5155005f 	cmppl	r5, pc, asr r0
    4010:	70797449 	rsbsvc	r7, r9, r9, asr #8
    4014:	73690065 	cmnvc	r9, #101	; 0x65
    4018:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    401c:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    4020:	7435766d 	ldrtvc	r7, [r5], #-1645	; 0xfffff993
    4024:	72610065 	rsbvc	r0, r1, #101	; 0x65
    4028:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    402c:	6100656e 	tstvs	r0, lr, ror #10
    4030:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    4034:	695f7070 	ldmdbvs	pc, {r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    4038:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    403c:	6b726f77 	blvs	1c9fe20 <__end__+0xc83e00>
    4040:	52415400 	subpl	r5, r1, #0, 8
    4044:	5f544547 	svcpl	0x00544547
    4048:	5f555043 	svcpl	0x00555043
    404c:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4050:	00743032 	rsbseq	r3, r4, r2, lsr r0
    4054:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    4058:	0071655f 	rsbseq	r6, r1, pc, asr r5
    405c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4060:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4064:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4068:	36323561 	ldrtcc	r3, [r2], -r1, ror #10
    406c:	6d726100 	ldfvse	f6, [r2, #-0]
    4070:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4074:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4078:	5f626d75 	svcpl	0x00626d75
    407c:	69647768 	stmdbvs	r4!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    4080:	74680076 	strbtvc	r0, [r8], #-118	; 0xffffff8a
    4084:	655f6261 	ldrbvs	r6, [pc, #-609]	; 3e2b <__core1_vectors-0xffc1d5>
    4088:	6f705f71 	svcvs	0x00705f71
    408c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    4090:	72610072 	rsbvc	r0, r1, #114	; 0x72
    4094:	69705f6d 	ldmdbvs	r0!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4098:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
    409c:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    40a0:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    40a4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    40a8:	50435f54 	subpl	r5, r3, r4, asr pc
    40ac:	6f635f55 	svcvs	0x00635f55
    40b0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    40b4:	6d73306d 	ldclvs	0, cr3, [r3, #-436]!	; 0xfffffe4c
    40b8:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    40bc:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    40c0:	00796c70 	rsbseq	r6, r9, r0, ror ip
    40c4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    40c8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    40cc:	6d5f5550 	cfldr64vs	mvdx5, [pc, #-320]	; 3f94 <__core1_vectors-0xffc06c>
    40d0:	726f6370 	rsbvc	r6, pc, #112, 6	; 0xc0000001
    40d4:	766f6e65 	strbtvc	r6, [pc], -r5, ror #28
    40d8:	69007066 	stmdbvs	r0, {r1, r2, r5, r6, ip, sp, lr}
    40dc:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    40e0:	715f7469 	cmpvc	pc, r9, ror #8
    40e4:	6b726975 	blvs	1c9e6c0 <__end__+0xc826a0>
    40e8:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    40ec:	72646c5f 	rsbvc	r6, r4, #24320	; 0x5f00
    40f0:	52410064 	subpl	r0, r1, #100	; 0x64
    40f4:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    40f8:	6d726100 	ldfvse	f6, [r2, #-0]
    40fc:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4100:	325f3868 	subscc	r3, pc, #104, 16	; 0x680000
    4104:	6d726100 	ldfvse	f6, [r2, #-0]
    4108:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    410c:	335f3868 	cmpcc	pc, #104, 16	; 0x680000
    4110:	6d726100 	ldfvse	f6, [r2, #-0]
    4114:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4118:	345f3868 	ldrbcc	r3, [pc], #-2152	; 4120 <__core1_vectors-0xffbee0>
    411c:	52415400 	subpl	r5, r1, #0, 8
    4120:	5f544547 	svcpl	0x00544547
    4124:	5f555043 	svcpl	0x00555043
    4128:	36706d66 	ldrbtcc	r6, [r0], -r6, ror #26
    412c:	41003632 	tstmi	r0, r2, lsr r6
    4130:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    4134:	72610053 	rsbvc	r0, r1, #83	; 0x53
    4138:	70665f6d 	rsbvc	r5, r6, sp, ror #30
    413c:	695f3631 	ldmdbvs	pc, {r0, r4, r5, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    4140:	0074736e 	rsbseq	r7, r4, lr, ror #6
    4144:	5f6d7261 	svcpl	0x006d7261
    4148:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    414c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4150:	41540068 	cmpmi	r4, r8, rrx
    4154:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4158:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    415c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4160:	61786574 	cmnvs	r8, r4, ror r5
    4164:	6f633531 	svcvs	0x00633531
    4168:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    416c:	2e003761 	cdpcs	7, 0, cr3, cr0, cr1, {3}
    4170:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4174:	2f2e2e2f 	svccs	0x002e2e2f
    4178:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    417c:	6c2f6363 	stcvs	3, cr6, [pc], #-396	; 3ff8 <__core1_vectors-0xffc008>
    4180:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    4184:	632e3263 			; <UNDEFINED> instruction: 0x632e3263
    4188:	6d726100 	ldfvse	f6, [r2, #-0]
    418c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4190:	6d653768 	stclvs	7, cr3, [r5, #-416]!	; 0xfffffe60
    4194:	52415400 	subpl	r5, r1, #0, 8
    4198:	5f544547 	svcpl	0x00544547
    419c:	5f555043 	svcpl	0x00555043
    41a0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    41a4:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    41a8:	72610032 	rsbvc	r0, r1, #50	; 0x32
    41ac:	63705f6d 	cmnvs	r0, #436	; 0x1b4
    41b0:	65645f73 	strbvs	r5, [r4, #-3955]!	; 0xfffff08d
    41b4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    41b8:	52410074 	subpl	r0, r1, #116	; 0x74
    41bc:	43505f4d 	cmpmi	r0, #308	; 0x134
    41c0:	41415f53 	cmpmi	r1, r3, asr pc
    41c4:	5f534350 	svcpl	0x00534350
    41c8:	41434f4c 	cmpmi	r3, ip, asr #30
    41cc:	4154004c 	cmpmi	r4, ip, asr #32
    41d0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    41d4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    41d8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    41dc:	61786574 	cmnvs	r8, r4, ror r5
    41e0:	54003537 	strpl	r3, [r0], #-1335	; 0xfffffac9
    41e4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    41e8:	50435f54 	subpl	r5, r3, r4, asr pc
    41ec:	74735f55 	ldrbtvc	r5, [r3], #-3925	; 0xfffff0ab
    41f0:	676e6f72 			; <UNDEFINED> instruction: 0x676e6f72
    41f4:	006d7261 	rsbeq	r7, sp, r1, ror #4
    41f8:	5f6d7261 	svcpl	0x006d7261
    41fc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4200:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    4204:	0031626d 	eorseq	r6, r1, sp, ror #4
    4208:	5f6d7261 	svcpl	0x006d7261
    420c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4210:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    4214:	0032626d 	eorseq	r6, r2, sp, ror #4
    4218:	47524154 			; <UNDEFINED> instruction: 0x47524154
    421c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4220:	695f5550 	ldmdbvs	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
    4224:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4228:	72610074 	rsbvc	r0, r1, #116	; 0x74
    422c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4230:	74356863 	ldrtvc	r6, [r5], #-2147	; 0xfffff79d
    4234:	61736900 	cmnvs	r3, r0, lsl #18
    4238:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    423c:	00706d5f 	rsbseq	r6, r0, pc, asr sp
    4240:	5f6d7261 	svcpl	0x006d7261
    4244:	735f646c 	cmpvc	pc, #108, 8	; 0x6c000000
    4248:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    424c:	6d726100 	ldfvse	f6, [r2, #-0]
    4250:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4254:	315f3868 	cmpcc	pc, r8, ror #16
	...

Disassembly of section .comment:

00000000 <.comment>:
{
   0:	3a434347 	bcc	10d0d24 <__end__+0xb4d04>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
    ALT_PRINTF("\n");
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  40:	6172622d 	cmnvs	r2, sp, lsr #4
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
{
   0:	00003441 	andeq	r3, r0, r1, asr #8
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000002a 	andeq	r0, r0, sl, lsr #32
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	412d3705 			; <UNDEFINED> instruction: 0x412d3705
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
    ALT_PRINTF("\n");
  18:	09010841 	stmdbeq	r1, {r0, r6, fp}
  1c:	0c030a02 			; <UNDEFINED> instruction: 0x0c030a02
  20:	14041201 	strne	r1, [r4], #-513	; 0xfffffdff
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__core1_vectors-0xfb9fc4>
  2c:	22061e01 	andcs	r1, r6, #1, 28
  30:	44012a01 	strmi	r2, [r1], #-2561	; 0xfffff5ff
  34:	Address 0x0000000000000034 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
{
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
    ALT_PRINTF("\n");
      1c:	00000098 	muleq	r0, r8, r0
      20:	8b040e42 	blhi	103930 <__core1_vectors-0xefc6d0>
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	0b0d4201 	bleq	350830 <__core1_vectors-0xcaf7d0>
      28:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
      2c:	000ecb42 	andeq	ip, lr, r2, asr #22
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	010000dc 	ldrdeq	r0, [r0, -ip]
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	00000038 	andeq	r0, r0, r8, lsr r0
      40:	8b040e42 	blhi	103950 <__core1_vectors-0xefc6b0>
      44:	0b0d4201 	bleq	350850 <__core1_vectors-0xcaf7b0>
      48:	420d0d54 	andmi	r0, sp, #84, 26	; 0x1500
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	00000ecb 	andeq	r0, r0, fp, asr #29
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	01000114 	tsteq	r0, r4, lsl r1
      5c:	00000054 	andeq	r0, r0, r4, asr r0
      60:	8b040e42 	blhi	103970 <__core1_vectors-0xefc690>
      64:	0b0d4201 	bleq	350870 <__core1_vectors-0xcaf790>
      68:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
      6c:	00000ecb 	andeq	r0, r0, fp, asr #29
}
      70:	0000001c 	andeq	r0, r0, ip, lsl r0
      74:	00000000 	andeq	r0, r0, r0
      78:	01000168 	tsteq	r0, r8, ror #2
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	00000054 	andeq	r0, r0, r4, asr r0
      80:	8b040e42 	blhi	103990 <__core1_vectors-0xefc670>
      84:	0b0d4201 	bleq	350890 <__core1_vectors-0xcaf770>
      88:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
      8c:	00000ecb 	andeq	r0, r0, fp, asr #29
      90:	0000001c 	andeq	r0, r0, ip, lsl r0
      *(pmem->toptr)=0;
      94:	00000000 	andeq	r0, r0, r0
      98:	010001bc 			; <UNDEFINED> instruction: 0x010001bc
      9c:	00000158 	andeq	r0, r0, r8, asr r1
      a0:	8b080e42 	blhi	2039b0 <__core1_vectors-0xdfc650>
}
      a4:	42018e02 	andmi	r8, r1, #2, 28
      a8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
      ac:	080d0ca6 	stmdaeq	sp, {r1, r2, r5, r7, sl, fp}
      b0:	0000001c 	andeq	r0, r0, ip, lsl r0
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	00000000 	andeq	r0, r0, r0
      b8:	01000314 	tsteq	r0, r4, lsl r3
        break;
      bc:	00000190 	muleq	r0, r0, r1
    return ALT_E_SUCCESS;
      c0:	8b080e42 	blhi	2039d0 <__core1_vectors-0xdfc630>
      c4:	42018e02 	andmi	r8, r1, #2, 28
        return ALT_E_ERROR;
      c8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
}
      cc:	080d0cc2 	stmdaeq	sp, {r1, r6, r7, sl, fp}
      d0:	00000020 	andeq	r0, r0, r0, lsr #32
      d4:	00000000 	andeq	r0, r0, r0
      d8:	010004a4 	smlatbeq	r0, r4, r4, r0
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	00000220 	andeq	r0, r0, r0, lsr #4
      e0:	8b080e42 	blhi	2039f0 <__core1_vectors-0xdfc610>
      e4:	42018e02 	andmi	r8, r1, #2, 28
      e8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
      ec:	0d0c010a 	stfeqs	f0, [ip, #-40]	; 0xffffffd8
      f0:	00000008 	andeq	r0, r0, r8
    return dst;
      f4:	0000001c 	andeq	r0, r0, ip, lsl r0
}
      f8:	00000000 	andeq	r0, r0, r0
      fc:	010006c4 	smlabteq	r0, r4, r6, r0
     100:	0000006c 	andeq	r0, r0, ip, rrx
     104:	8b080e42 	blhi	203a14 <__core1_vectors-0xdfc5ec>
        return (int)cnt;
     108:	42018e02 	andmi	r8, r1, #2, 28
     10c:	70040b0c 	andvc	r0, r4, ip, lsl #22
    errno = ENOSYS;
     110:	00080d0c 	andeq	r0, r8, ip, lsl #26
     114:	0000001c 	andeq	r0, r0, ip, lsl r0
     118:	00000000 	andeq	r0, r0, r0
     11c:	01000730 	tsteq	r0, r0, lsr r7
    return -1;
     120:	00000040 	andeq	r0, r0, r0, asr #32
}
     124:	8b080e42 	blhi	203a34 <__core1_vectors-0xdfc5cc>
     128:	42018e02 	andmi	r8, r1, #2, 28
     12c:	5a040b0c 	bpl	102d64 <__core1_vectors-0xefd29c>
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     130:	00080d0c 	andeq	r0, r8, ip, lsl #26
     134:	0000001c 	andeq	r0, r0, ip, lsl r0
     138:	00000000 	andeq	r0, r0, r0
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	01000770 	tsteq	r0, r0, ror r7
     140:	00000040 	andeq	r0, r0, r0, asr #32
     144:	8b080e42 	blhi	203a54 <__core1_vectors-0xdfc5ac>
     148:	42018e02 	andmi	r8, r1, #2, 28
     14c:	5a040b0c 	bpl	102d84 <__core1_vectors-0xefd27c>
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	00080d0c 	andeq	r0, r8, ip, lsl #26
     154:	0000001c 	andeq	r0, r0, ip, lsl r0
     158:	00000000 	andeq	r0, r0, r0
     15c:	010007b0 			; <UNDEFINED> instruction: 0x010007b0
     160:	0000006c 	andeq	r0, r0, ip, rrx
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	8b080e42 	blhi	203a74 <__core1_vectors-0xdfc58c>
     168:	42018e02 	andmi	r8, r1, #2, 28
     16c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     170:	00080d0c 	andeq	r0, r8, ip, lsl #26
     174:	0000001c 	andeq	r0, r0, ip, lsl r0
    return ALT_E_SUCCESS;
     178:	00000000 	andeq	r0, r0, r0
}
     17c:	0100081c 	tsteq	r0, ip, lsl r8
     180:	00000040 	andeq	r0, r0, r0, asr #32
     184:	8b080e42 	blhi	203a94 <__core1_vectors-0xdfc56c>
    while (coalesce->size)
     188:	42018e02 	andmi	r8, r1, #2, 28
     18c:	5a040b0c 	bpl	102dc4 <__core1_vectors-0xefd23c>
            break;
     190:	00080d0c 	andeq	r0, r8, ip, lsl #26
    *segpa   = thissegpa;
     194:	0000001c 	andeq	r0, r0, ip, lsl r0
     198:	00000000 	andeq	r0, r0, r0
     19c:	0100085c 	tsteq	r0, ip, asr r8
    *segsize = thissegsize;
     1a0:	00000068 	andeq	r0, r0, r8, rrx
     1a4:	8b080e42 	blhi	203ab4 <__core1_vectors-0xdfc54c>
     1a8:	42018e02 	andmi	r8, r1, #2, 28
    return ALT_E_SUCCESS;
     1ac:	6e040b0c 	vmlavs.f64	d0, d4, d12
}
     1b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b8:	00000000 	andeq	r0, r0, r0
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	010008c4 	smlabteq	r0, r4, r8, r0
     1c0:	0000006c 	andeq	r0, r0, ip, rrx
     1c4:	8b080e42 	blhi	203ad4 <__core1_vectors-0xdfc52c>
     1c8:	42018e02 	andmi	r8, r1, #2, 28
     1cc:	70040b0c 	andvc	r0, r4, ip, lsl #22
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	01000930 	tsteq	r0, r0, lsr r9
     1e0:	0000006c 	andeq	r0, r0, ip, rrx
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	8b080e42 	blhi	203af4 <__core1_vectors-0xdfc50c>
     1e8:	42018e02 	andmi	r8, r1, #2, 28
     1ec:	70040b0c 	andvc	r0, r4, ip, lsl #22
     1f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
     200:	0000006c 	andeq	r0, r0, ip, rrx
     204:	8b080e42 	blhi	203b14 <__core1_vectors-0xdfc4ec>
     208:	42018e02 	andmi	r8, r1, #2, 28
     20c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     210:	00080d0c 	andeq	r0, r8, ip, lsl #26
        clkStep += clk100;
     214:	0000001c 	andeq	r0, r0, ip, lsl r0
     218:	00000000 	andeq	r0, r0, r0
     21c:	01000a08 	tsteq	r0, r8, lsl #20
     220:	0000006c 	andeq	r0, r0, ip, rrx
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	8b080e42 	blhi	203b34 <__core1_vectors-0xdfc4cc>
     228:	42018e02 	andmi	r8, r1, #2, 28
     22c:	70040b0c 	andvc	r0, r4, ip, lsl #22
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	00080d0c 	andeq	r0, r8, ip, lsl #26
     234:	0000001c 	andeq	r0, r0, ip, lsl r0
     238:	00000000 	andeq	r0, r0, r0
     23c:	01000a74 	tsteq	r0, r4, ror sl
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	0000006c 	andeq	r0, r0, ip, rrx
     244:	8b080e42 	blhi	203b54 <__core1_vectors-0xdfc4ac>
     248:	42018e02 	andmi	r8, r1, #2, 28
     24c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     250:	00080d0c 	andeq	r0, r8, ip, lsl #26
     254:	0000001c 	andeq	r0, r0, ip, lsl r0
     258:	00000000 	andeq	r0, r0, r0
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	01000ae0 	smlatteq	r0, r0, sl, r0
     260:	0000006c 	andeq	r0, r0, ip, rrx
     264:	8b080e42 	blhi	203b74 <__core1_vectors-0xdfc48c>
     268:	42018e02 	andmi	r8, r1, #2, 28
     26c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     270:	00080d0c 	andeq	r0, r8, ip, lsl #26
     274:	0000001c 	andeq	r0, r0, ip, lsl r0
     278:	00000000 	andeq	r0, r0, r0
     27c:	01000b4c 	tsteq	r0, ip, asr #22
     280:	000000dc 	ldrdeq	r0, [r0], -ip
     284:	8b080e42 	blhi	203b94 <__core1_vectors-0xdfc46c>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	42018e02 	andmi	r8, r1, #2, 28
     28c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     290:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	0000001c 	andeq	r0, r0, ip, lsl r0
     298:	00000000 	andeq	r0, r0, r0
     29c:	01000c28 	tsteq	r0, r8, lsr #24
     2a0:	00000030 	andeq	r0, r0, r0, lsr r0
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	8b080e42 	blhi	203bb4 <__core1_vectors-0xdfc44c>
     2a8:	42018e02 	andmi	r8, r1, #2, 28
     2ac:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
     2b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2b8:	00000000 	andeq	r0, r0, r0
     2bc:	01000c58 	tsteq	r0, r8, asr ip
     2c0:	00000030 	andeq	r0, r0, r0, lsr r0
     2c4:	8b080e42 	blhi	203bd4 <__core1_vectors-0xdfc42c>
     2c8:	42018e02 	andmi	r8, r1, #2, 28
     2cc:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2d8:	00000000 	andeq	r0, r0, r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	01000c88 	smlabbeq	r0, r8, ip, r0
     2e0:	00000030 	andeq	r0, r0, r0, lsr r0
     2e4:	8b080e42 	blhi	203bf4 <__core1_vectors-0xdfc40c>
     2e8:	42018e02 	andmi	r8, r1, #2, 28
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
     2f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f8:	00000000 	andeq	r0, r0, r0
     2fc:	01000cb8 			; <UNDEFINED> instruction: 0x01000cb8
     300:	00000068 	andeq	r0, r0, r8, rrx
     304:	8b080e42 	blhi	203c14 <__core1_vectors-0xdfc3ec>
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	42018e02 	andmi	r8, r1, #2, 28
     30c:	6e040b0c 	vmlavs.f64	d0, d4, d12
     310:	00080d0c 	andeq	r0, r8, ip, lsl #26
     314:	0000001c 	andeq	r0, r0, ip, lsl r0
     318:	00000000 	andeq	r0, r0, r0
     31c:	01000d20 	tsteq	r0, r0, lsr #26
     320:	000000a4 	andeq	r0, r0, r4, lsr #1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	8b080e42 	blhi	203c34 <__core1_vectors-0xdfc3cc>
     328:	42018e02 	andmi	r8, r1, #2, 28
     32c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
     334:	0000001c 	andeq	r0, r0, ip, lsl r0
     338:	00000000 	andeq	r0, r0, r0
     33c:	01000dc4 	smlabteq	r0, r4, sp, r0
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	00000068 	andeq	r0, r0, r8, rrx
     344:	8b080e42 	blhi	203c54 <__core1_vectors-0xdfc3ac>
     348:	42018e02 	andmi	r8, r1, #2, 28
     34c:	6e040b0c 	vmlavs.f64	d0, d4, d12
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	00080d0c 	andeq	r0, r8, ip, lsl #26
     354:	0000001c 	andeq	r0, r0, ip, lsl r0
     358:	00000000 	andeq	r0, r0, r0
     35c:	01000e2c 	tsteq	r0, ip, lsr #28
     360:	00000028 	andeq	r0, r0, r8, lsr #32
     364:	8b080e42 	blhi	203c74 <__core1_vectors-0xdfc38c>
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	42018e02 	andmi	r8, r1, #2, 28
     36c:	4e040b0c 	vmlami.f64	d0, d4, d12
     370:	00080d0c 	andeq	r0, r8, ip, lsl #26
     374:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     380:	0000005c 	andeq	r0, r0, ip, asr r0
     384:	8b080e42 	blhi	203c94 <__core1_vectors-0xdfc36c>
     388:	42018e02 	andmi	r8, r1, #2, 28
     38c:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	00080d0c 	andeq	r0, r8, ip, lsl #26
     394:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     3a0:	0000005c 	andeq	r0, r0, ip, asr r0
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	8b080e42 	blhi	203cb4 <__core1_vectors-0xdfc34c>
     3a8:	42018e02 	andmi	r8, r1, #2, 28
     3ac:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
     3b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	01000e54 	tsteq	r0, r4, asr lr
     3c0:	00000068 	andeq	r0, r0, r8, rrx
     3c4:	8b080e42 	blhi	203cd4 <__core1_vectors-0xdfc32c>
     3c8:	42018e02 	andmi	r8, r1, #2, 28
     3cc:	6e040b0c 	vmlavs.f64	d0, d4, d12
     3d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d8:	00000000 	andeq	r0, r0, r0
     3dc:	01000ebc 			; <UNDEFINED> instruction: 0x01000ebc
     3e0:	00000068 	andeq	r0, r0, r8, rrx
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	8b080e42 	blhi	203cf4 <__core1_vectors-0xdfc30c>
     3e8:	42018e02 	andmi	r8, r1, #2, 28
     3ec:	6e040b0c 	vmlavs.f64	d0, d4, d12
     3f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	01000f24 	tsteq	r0, r4, lsr #30
     400:	00000068 	andeq	r0, r0, r8, rrx
     404:	8b080e42 	blhi	203d14 <__core1_vectors-0xdfc2ec>
     408:	42018e02 	andmi	r8, r1, #2, 28
     40c:	6e040b0c 	vmlavs.f64	d0, d4, d12
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	00080d0c 	andeq	r0, r8, ip, lsl #26
     414:	00000020 	andeq	r0, r0, r0, lsr #32
     418:	00000000 	andeq	r0, r0, r0
     41c:	01000f8c 	smlabbeq	r0, ip, pc, r0	; <UNPREDICTABLE>
     420:	0000023c 	andeq	r0, r0, ip, lsr r2
     424:	8b080e42 	blhi	203d34 <__core1_vectors-0xdfc2cc>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	42018e02 	andmi	r8, r1, #2, 28
     42c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     430:	0d0c0118 	stfeqs	f0, [ip, #-96]	; 0xffffffa0
     434:	00000008 	andeq	r0, r0, r8
     438:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     444:	00000034 	andeq	r0, r0, r4, lsr r0
     448:	8b040e42 	blhi	103d58 <__core1_vectors-0xefc2a8>
     44c:	0b0d4201 	bleq	350c58 <__core1_vectors-0xcaf3a8>
     450:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     454:	00000ecb 	andeq	r0, r0, fp, asr #29
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     464:	00000264 	andeq	r0, r0, r4, ror #4
     468:	8b080e42 	blhi	203d78 <__core1_vectors-0xdfc288>
     46c:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     474:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     478:	00000008 	andeq	r0, r0, r8
     47c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	00000034 	andeq	r0, r0, r4, lsr r0
     48c:	8b040e42 	blhi	103d9c <__core1_vectors-0xefc264>
     490:	0b0d4201 	bleq	350c9c <__core1_vectors-0xcaf364>
     494:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     498:	00000ecb 	andeq	r0, r0, fp, asr #29
     49c:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     4a8:	00000264 	andeq	r0, r0, r4, ror #4
     4ac:	8b080e42 	blhi	203dbc <__core1_vectors-0xdfc244>
     4b0:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     4b8:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     4bc:	00000008 	andeq	r0, r0, r8
     4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c4:	00000000 	andeq	r0, r0, r0
     4c8:	010011c8 	smlabteq	r0, r8, r1, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	00000048 	andeq	r0, r0, r8, asr #32
     4d0:	8b040e42 	blhi	103de0 <__core1_vectors-0xefc220>
     4d4:	0b0d4201 	bleq	350ce0 <__core1_vectors-0xcaf320>
     4d8:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     4dc:	00000ecb 	andeq	r0, r0, fp, asr #29
     4e0:	00000020 	andeq	r0, r0, r0, lsr #32
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	01001210 	tsteq	r0, r0, lsl r2
     4ec:	00000264 	andeq	r0, r0, r4, ror #4
     4f0:	8b080e42 	blhi	203e00 <__core1_vectors-0xdfc200>
     4f4:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     4fc:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     500:	00000008 	andeq	r0, r0, r8
     504:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     514:	8b080e42 	blhi	203e24 <__core1_vectors-0xdfc1dc>
     518:	42018e02 	andmi	r8, r1, #2, 28
     51c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     520:	0d0c0472 	cfstrseq	mvf0, [ip, #-456]	; 0xfffffe38
     524:	00000008 	andeq	r0, r0, r8
     528:	0000000c 	andeq	r0, r0, ip
     52c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     530:	7c020001 	stcvc	0, cr0, [r2], {1}
     534:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     538:	0000001c 	andeq	r0, r0, ip, lsl r0
     53c:	00000528 	andeq	r0, r0, r8, lsr #10
     540:	01001474 	tsteq	r0, r4, ror r4
     544:	00000028 	andeq	r0, r0, r8, lsr #32
     548:	8b040e42 	blhi	103e58 <__core1_vectors-0xefc1a8>
     54c:	0b0d4201 	bleq	350d58 <__core1_vectors-0xcaf2a8>
     550:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
     554:	00000ecb 	andeq	r0, r0, fp, asr #29
     558:	0000001c 	andeq	r0, r0, ip, lsl r0
     55c:	00000528 	andeq	r0, r0, r8, lsr #10
     560:	0100149c 			; <UNDEFINED> instruction: 0x0100149c
     564:	00000120 	andeq	r0, r0, r0, lsr #2
     568:	8b040e42 	blhi	103e78 <__core1_vectors-0xefc188>
     56c:	0b0d4201 	bleq	350d78 <__core1_vectors-0xcaf288>
     570:	0d0d8802 	stceq	8, cr8, [sp, #-8]
     574:	000ecb42 	andeq	ip, lr, r2, asr #22
     578:	0000001c 	andeq	r0, r0, ip, lsl r0
     57c:	00000528 	andeq	r0, r0, r8, lsr #10
     580:	010015bc 			; <UNDEFINED> instruction: 0x010015bc
     584:	00000158 	andeq	r0, r0, r8, asr r1
     588:	8b080e42 	blhi	203e98 <__core1_vectors-0xdfc168>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	42018e02 	andmi	r8, r1, #2, 28
     590:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     594:	080d0ca6 	stmdaeq	sp, {r1, r2, r5, r7, sl, fp}
     598:	0000001c 	andeq	r0, r0, ip, lsl r0
     59c:	00000528 	andeq	r0, r0, r8, lsr #10
     5a0:	01001714 	tsteq	r0, r4, lsl r7
     5a4:	0000015c 	andeq	r0, r0, ip, asr r1
     5a8:	8b080e42 	blhi	203eb8 <__core1_vectors-0xdfc148>
     5ac:	42018e02 	andmi	r8, r1, #2, 28
     5b0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5b4:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5bc:	00000528 	andeq	r0, r0, r8, lsr #10
     5c0:	00000000 	andeq	r0, r0, r0
     5c4:	00000090 	muleq	r0, r0, r0
     5c8:	8b080e42 	blhi	203ed8 <__core1_vectors-0xdfc128>
     5cc:	42018e02 	andmi	r8, r1, #2, 28
     5d0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5d4:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5dc:	00000528 	andeq	r0, r0, r8, lsr #10
     5e0:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     5e8:	8b080e42 	blhi	203ef8 <__core1_vectors-0xdfc108>
     5ec:	42018e02 	andmi	r8, r1, #2, 28
     5f0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     5f4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5fc:	00000528 	andeq	r0, r0, r8, lsr #10
     600:	01001870 	tsteq	r0, r0, ror r8
     604:	00000048 	andeq	r0, r0, r8, asr #32
     608:	8b080e42 	blhi	203f18 <__core1_vectors-0xdfc0e8>
     60c:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	5e040b0c 	vmlapl.f64	d0, d4, d12
     614:	00080d0c 	andeq	r0, r8, ip, lsl #26
     618:	0000001c 	andeq	r0, r0, ip, lsl r0
     61c:	00000528 	andeq	r0, r0, r8, lsr #10
     620:	00000000 	andeq	r0, r0, r0
     624:	0000002c 	andeq	r0, r0, ip, lsr #32
     628:	8b080e42 	blhi	203f38 <__core1_vectors-0xdfc0c8>
     62c:	42018e02 	andmi	r8, r1, #2, 28
     630:	50040b0c 	andpl	r0, r4, ip, lsl #22
     634:	00080d0c 	andeq	r0, r8, ip, lsl #26
     638:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	00000528 	andeq	r0, r0, r8, lsr #10
     640:	00000000 	andeq	r0, r0, r0
     644:	000000a4 	andeq	r0, r0, r4, lsr #1
     648:	8b040e42 	blhi	103f58 <__core1_vectors-0xefc0a8>
     64c:	0b0d4201 	bleq	350e58 <__core1_vectors-0xcaf1a8>
     650:	0d0d4a02 	vstreq	s8, [sp, #-8]
     654:	000ecb42 	andeq	ip, lr, r2, asr #22
     658:	0000001c 	andeq	r0, r0, ip, lsl r0
     65c:	00000528 	andeq	r0, r0, r8, lsr #10
     660:	00000000 	andeq	r0, r0, r0
     664:	000000a0 	andeq	r0, r0, r0, lsr #1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	8b040e42 	blhi	103f78 <__core1_vectors-0xefc088>
     66c:	0b0d4201 	bleq	350e78 <__core1_vectors-0xcaf188>
     670:	0d0d4802 	stceq	8, cr4, [sp, #-8]
     674:	000ecb42 	andeq	ip, lr, r2, asr #22
     678:	0000001c 	andeq	r0, r0, ip, lsl r0
     67c:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	010018b8 			; <UNDEFINED> instruction: 0x010018b8
     684:	00000080 	andeq	r0, r0, r0, lsl #1
     688:	8b040e42 	blhi	103f98 <__core1_vectors-0xefc068>
     68c:	0b0d4201 	bleq	350e98 <__core1_vectors-0xcaf168>
     690:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     694:	00000ecb 	andeq	r0, r0, fp, asr #29
     698:	0000001c 	andeq	r0, r0, ip, lsl r0
     69c:	00000528 	andeq	r0, r0, r8, lsr #10
     6a0:	01001938 	tsteq	r0, r8, lsr r9
     6a4:	00000080 	andeq	r0, r0, r0, lsl #1
     6a8:	8b040e42 	blhi	103fb8 <__core1_vectors-0xefc048>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	0b0d4201 	bleq	350eb8 <__core1_vectors-0xcaf148>
     6b0:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     6b4:	00000ecb 	andeq	r0, r0, fp, asr #29
     6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6bc:	00000528 	andeq	r0, r0, r8, lsr #10
     6c0:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	000000d8 	ldrdeq	r0, [r0], -r8
     6c8:	8b040e42 	blhi	103fd8 <__core1_vectors-0xefc028>
     6cc:	0b0d4201 	bleq	350ed8 <__core1_vectors-0xcaf128>
     6d0:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
     6d4:	000ecb42 	andeq	ip, lr, r2, asr #22
     6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6dc:	00000528 	andeq	r0, r0, r8, lsr #10
     6e0:	010019b8 			; <UNDEFINED> instruction: 0x010019b8
     6e4:	00000104 	andeq	r0, r0, r4, lsl #2
     6e8:	8b040e42 	blhi	103ff8 <__core1_vectors-0xefc008>
     6ec:	0b0d4201 	bleq	350ef8 <__core1_vectors-0xcaf108>
     6f0:	0d0d7a02 	vstreq	s14, [sp, #-8]
     6f4:	000ecb42 	andeq	ip, lr, r2, asr #22
     6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6fc:	00000528 	andeq	r0, r0, r8, lsr #10
     700:	01001abc 			; <UNDEFINED> instruction: 0x01001abc
     704:	0000003c 	andeq	r0, r0, ip, lsr r0
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	8b080e42 	blhi	204018 <__core1_vectors-0xdfbfe8>
     70c:	42018e02 	andmi	r8, r1, #2, 28
     710:	58040b0c 	stmdapl	r4, {r2, r3, r8, r9, fp}
     714:	00080d0c 	andeq	r0, r8, ip, lsl #26
     718:	0000001c 	andeq	r0, r0, ip, lsl r0
     71c:	00000528 	andeq	r0, r0, r8, lsr #10
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	00000000 	andeq	r0, r0, r0
     724:	000000a8 	andeq	r0, r0, r8, lsr #1
     728:	8b040e42 	blhi	104038 <__core1_vectors-0xefbfc8>
     72c:	0b0d4201 	bleq	350f38 <__core1_vectors-0xcaf0c8>
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     734:	000ecb42 	andeq	ip, lr, r2, asr #22
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	0000001c 	andeq	r0, r0, ip, lsl r0
     73c:	00000528 	andeq	r0, r0, r8, lsr #10
     740:	00000000 	andeq	r0, r0, r0
     744:	000000a8 	andeq	r0, r0, r8, lsr #1
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	8b040e42 	blhi	104058 <__core1_vectors-0xefbfa8>
     74c:	0b0d4201 	bleq	350f58 <__core1_vectors-0xcaf0a8>
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     754:	000ecb42 	andeq	ip, lr, r2, asr #22
     758:	0000001c 	andeq	r0, r0, ip, lsl r0
     75c:	00000528 	andeq	r0, r0, r8, lsr #10
     760:	00000000 	andeq	r0, r0, r0
     764:	000000a8 	andeq	r0, r0, r8, lsr #1
     768:	8b040e42 	blhi	104078 <__core1_vectors-0xefbf88>
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	0b0d4201 	bleq	350f78 <__core1_vectors-0xcaf088>
     770:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     774:	000ecb42 	andeq	ip, lr, r2, asr #22
     778:	0000001c 	andeq	r0, r0, ip, lsl r0
     77c:	00000528 	andeq	r0, r0, r8, lsr #10
     780:	00000000 	andeq	r0, r0, r0
     784:	000000a8 	andeq	r0, r0, r8, lsr #1
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	8b040e42 	blhi	104098 <__core1_vectors-0xefbf68>
     78c:	0b0d4201 	bleq	350f98 <__core1_vectors-0xcaf068>
     790:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     794:	000ecb42 	andeq	ip, lr, r2, asr #22
     798:	0000001c 	andeq	r0, r0, ip, lsl r0
     79c:	00000528 	andeq	r0, r0, r8, lsr #10
     7a0:	00000000 	andeq	r0, r0, r0
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	000000a8 	andeq	r0, r0, r8, lsr #1
     7a8:	8b040e42 	blhi	1040b8 <__core1_vectors-0xefbf48>
     7ac:	0b0d4201 	bleq	350fb8 <__core1_vectors-0xcaf048>
     7b0:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     7b4:	000ecb42 	andeq	ip, lr, r2, asr #22
     7b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7bc:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	0000009c 	muleq	r0, ip, r0
     7c8:	8b040e42 	blhi	1040d8 <__core1_vectors-0xefbf28>
     7cc:	0b0d4201 	bleq	350fd8 <__core1_vectors-0xcaf028>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	0d0d4602 	stceq	6, cr4, [sp, #-8]
     7d4:	000ecb42 	andeq	ip, lr, r2, asr #22
     7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	00000528 	andeq	r0, r0, r8, lsr #10
     7e0:	00000000 	andeq	r0, r0, r0
     7e4:	0000009c 	muleq	r0, ip, r0
     7e8:	8b040e42 	blhi	1040f8 <__core1_vectors-0xefbf08>
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	0b0d4201 	bleq	350ff8 <__core1_vectors-0xcaf008>
     7f0:	0d0d4602 	stceq	6, cr4, [sp, #-8]
     7f4:	000ecb42 	andeq	ip, lr, r2, asr #22
     7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	00000528 	andeq	r0, r0, r8, lsr #10
     800:	00000000 	andeq	r0, r0, r0
     804:	000000dc 	ldrdeq	r0, [r0], -ip
     808:	8b040e42 	blhi	104118 <__core1_vectors-0xefbee8>
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	0b0d4201 	bleq	351018 <__core1_vectors-0xcaefe8>
     810:	0d0d6602 	stceq	6, cr6, [sp, #-8]
     814:	000ecb42 	andeq	ip, lr, r2, asr #22
     818:	0000001c 	andeq	r0, r0, ip, lsl r0
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	00000528 	andeq	r0, r0, r8, lsr #10
     820:	00000000 	andeq	r0, r0, r0
     824:	000000dc 	ldrdeq	r0, [r0], -ip
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	8b040e42 	blhi	104138 <__core1_vectors-0xefbec8>
     82c:	0b0d4201 	bleq	351038 <__core1_vectors-0xcaefc8>
     830:	0d0d6602 	stceq	6, cr6, [sp, #-8]
     834:	000ecb42 	andeq	ip, lr, r2, asr #22
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	0000001c 	andeq	r0, r0, ip, lsl r0
     83c:	00000528 	andeq	r0, r0, r8, lsr #10
     840:	00000000 	andeq	r0, r0, r0
     844:	0000005c 	andeq	r0, r0, ip, asr r0
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	8b080e42 	blhi	204158 <__core1_vectors-0xdfbea8>
     84c:	42018e02 	andmi	r8, r1, #2, 28
     850:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
     854:	00080d0c 	andeq	r0, r8, ip, lsl #26
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	0000001c 	andeq	r0, r0, ip, lsl r0
     85c:	00000528 	andeq	r0, r0, r8, lsr #10
     860:	01001af8 	strdeq	r1, [r0, -r8]
     864:	00000074 	andeq	r0, r0, r4, ror r0
     868:	8b080e42 	blhi	204178 <__core1_vectors-0xdfbe88>
     86c:	42018e02 	andmi	r8, r1, #2, 28
     870:	74040b0c 	strvc	r0, [r4], #-2828	; 0xfffff4f4
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	00080d0c 	andeq	r0, r8, ip, lsl #26
     878:	0000001c 	andeq	r0, r0, ip, lsl r0
     87c:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	00000000 	andeq	r0, r0, r0
     884:	0000003c 	andeq	r0, r0, ip, lsr r0
     888:	8b040e42 	blhi	104198 <__core1_vectors-0xefbe68>
     88c:	0b0d4201 	bleq	351098 <__core1_vectors-0xcaef68>
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	420d0d56 	andmi	r0, sp, #5504	; 0x1580
     894:	00000ecb 	andeq	r0, r0, fp, asr #29
     898:	0000001c 	andeq	r0, r0, ip, lsl r0
     89c:	00000528 	andeq	r0, r0, r8, lsr #10
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	01001b6c 	tsteq	r0, ip, ror #22
     8a4:	00000078 	andeq	r0, r0, r8, ror r0
     8a8:	8b040e42 	blhi	1041b8 <__core1_vectors-0xefbe48>
     8ac:	0b0d4201 	bleq	3510b8 <__core1_vectors-0xcaef48>
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     8b4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8bc:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	00000080 	andeq	r0, r0, r0, lsl #1
     8c8:	8b040e42 	blhi	1041d8 <__core1_vectors-0xefbe28>
     8cc:	0b0d4201 	bleq	3510d8 <__core1_vectors-0xcaef28>
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     8d4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8dc:	00000528 	andeq	r0, r0, r8, lsr #10
    return ALT_E_SUCCESS;
     8e0:	01001be4 	smlatteq	r0, r4, fp, r1
}
     8e4:	00000084 	andeq	r0, r0, r4, lsl #1
     8e8:	8b040e42 	blhi	1041f8 <__core1_vectors-0xefbe08>
     8ec:	0b0d4201 	bleq	3510f8 <__core1_vectors-0xcaef08>
     8f0:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
     8f4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8fc:	00000528 	andeq	r0, r0, r8, lsr #10
     900:	00000000 	andeq	r0, r0, r0
     904:	0000002c 	andeq	r0, r0, ip, lsr #32
     908:	8b080e42 	blhi	204218 <__core1_vectors-0xdfbde8>
     90c:	42018e02 	andmi	r8, r1, #2, 28
     910:	50040b0c 	andpl	r0, r4, ip, lsl #22
     914:	00080d0c 	andeq	r0, r8, ip, lsl #26
     918:	0000001c 	andeq	r0, r0, ip, lsl r0
     91c:	00000528 	andeq	r0, r0, r8, lsr #10
     920:	00000000 	andeq	r0, r0, r0
     924:	0000002c 	andeq	r0, r0, ip, lsr #32
     928:	8b080e42 	blhi	204238 <__core1_vectors-0xdfbdc8>
     92c:	42018e02 	andmi	r8, r1, #2, 28
     930:	50040b0c 	andpl	r0, r4, ip, lsl #22
     934:	00080d0c 	andeq	r0, r8, ip, lsl #26
     938:	0000001c 	andeq	r0, r0, ip, lsl r0
     93c:	00000528 	andeq	r0, r0, r8, lsr #10
     940:	00000000 	andeq	r0, r0, r0
     944:	0000002c 	andeq	r0, r0, ip, lsr #32
     948:	8b080e42 	blhi	204258 <__core1_vectors-0xdfbda8>
     94c:	42018e02 	andmi	r8, r1, #2, 28
     950:	50040b0c 	andpl	r0, r4, ip, lsl #22
     954:	00080d0c 	andeq	r0, r8, ip, lsl #26
     958:	0000001c 	andeq	r0, r0, ip, lsl r0
     95c:	00000528 	andeq	r0, r0, r8, lsr #10
     960:	00000000 	andeq	r0, r0, r0
     964:	0000002c 	andeq	r0, r0, ip, lsr #32
     968:	8b080e42 	blhi	204278 <__core1_vectors-0xdfbd88>
     96c:	42018e02 	andmi	r8, r1, #2, 28
     970:	50040b0c 	andpl	r0, r4, ip, lsl #22
     974:	00080d0c 	andeq	r0, r8, ip, lsl #26
     978:	0000001c 	andeq	r0, r0, ip, lsl r0
     97c:	00000528 	andeq	r0, r0, r8, lsr #10
     980:	00000000 	andeq	r0, r0, r0
     984:	0000002c 	andeq	r0, r0, ip, lsr #32
     988:	8b080e42 	blhi	204298 <__core1_vectors-0xdfbd68>
     98c:	42018e02 	andmi	r8, r1, #2, 28
     990:	50040b0c 	andpl	r0, r4, ip, lsl #22
     994:	00080d0c 	andeq	r0, r8, ip, lsl #26
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
     99c:	00000528 	andeq	r0, r0, r8, lsr #10
     9a0:	00000000 	andeq	r0, r0, r0
     9a4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9a8:	8b080e42 	blhi	2042b8 <__core1_vectors-0xdfbd48>
     9ac:	42018e02 	andmi	r8, r1, #2, 28
     9b0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     9b4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9bc:	00000528 	andeq	r0, r0, r8, lsr #10
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9c8:	8b080e42 	blhi	2042d8 <__core1_vectors-0xdfbd28>
     9cc:	42018e02 	andmi	r8, r1, #2, 28
     9d0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     9d4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9dc:	00000528 	andeq	r0, r0, r8, lsr #10
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9e8:	8b080e42 	blhi	2042f8 <__core1_vectors-0xdfbd08>
     9ec:	42018e02 	andmi	r8, r1, #2, 28
     9f0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     9f4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9fc:	00000528 	andeq	r0, r0, r8, lsr #10
     a00:	01001c68 	tsteq	r0, r8, ror #24
     a04:	0000002c 	andeq	r0, r0, ip, lsr #32
     a08:	8b080e42 	blhi	204318 <__core1_vectors-0xdfbce8>
     a0c:	42018e02 	andmi	r8, r1, #2, 28
     a10:	50040b0c 	andpl	r0, r4, ip, lsl #22
     a14:	00080d0c 	andeq	r0, r8, ip, lsl #26
     a18:	0000001c 	andeq	r0, r0, ip, lsl r0
     a1c:	00000528 	andeq	r0, r0, r8, lsr #10
     a20:	00000000 	andeq	r0, r0, r0
     a24:	0000007c 	andeq	r0, r0, ip, ror r0
     a28:	8b040e42 	blhi	104338 <__core1_vectors-0xefbcc8>
     a2c:	0b0d4201 	bleq	351238 <__core1_vectors-0xcaedc8>
     a30:	420d0d76 	andmi	r0, sp, #7552	; 0x1d80
     a34:	00000ecb 	andeq	r0, r0, fp, asr #29
     a38:	0000001c 	andeq	r0, r0, ip, lsl r0
     a3c:	00000528 	andeq	r0, r0, r8, lsr #10
     a40:	01001c94 			; <UNDEFINED> instruction: 0x01001c94
     a44:	00000154 	andeq	r0, r0, r4, asr r1
     a48:	8b040e42 	blhi	104358 <__core1_vectors-0xefbca8>
     a4c:	0b0d4201 	bleq	351258 <__core1_vectors-0xcaeda8>
     a50:	0d0da202 	sfmeq	f2, 1, [sp, #-8]
     a54:	000ecb42 	andeq	ip, lr, r2, asr #22
     a58:	0000001c 	andeq	r0, r0, ip, lsl r0
     a5c:	00000528 	andeq	r0, r0, r8, lsr #10
     a60:	00000000 	andeq	r0, r0, r0
     a64:	00000078 	andeq	r0, r0, r8, ror r0
     a68:	8b040e42 	blhi	104378 <__core1_vectors-0xefbc88>
     a6c:	0b0d4201 	bleq	351278 <__core1_vectors-0xcaed88>
     a70:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     a74:	00000ecb 	andeq	r0, r0, fp, asr #29
     a78:	0000001c 	andeq	r0, r0, ip, lsl r0
     a7c:	00000528 	andeq	r0, r0, r8, lsr #10
     a80:	00000000 	andeq	r0, r0, r0
     a84:	00000078 	andeq	r0, r0, r8, ror r0
     a88:	8b040e42 	blhi	104398 <__core1_vectors-0xefbc68>
     a8c:	0b0d4201 	bleq	351298 <__core1_vectors-0xcaed68>
     a90:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     a94:	00000ecb 	andeq	r0, r0, fp, asr #29
     a98:	0000001c 	andeq	r0, r0, ip, lsl r0
     a9c:	00000528 	andeq	r0, r0, r8, lsr #10
     aa0:	00000000 	andeq	r0, r0, r0
     aa4:	0000006c 	andeq	r0, r0, ip, rrx
     aa8:	8b040e42 	blhi	1043b8 <__core1_vectors-0xefbc48>
     aac:	0b0d4201 	bleq	3512b8 <__core1_vectors-0xcaed48>
     ab0:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
     ab4:	00000ecb 	andeq	r0, r0, fp, asr #29
     ab8:	0000001c 	andeq	r0, r0, ip, lsl r0
     abc:	00000528 	andeq	r0, r0, r8, lsr #10
     ac0:	01001de8 	smlatteq	r0, r8, sp, r1
     ac4:	00000080 	andeq	r0, r0, r0, lsl #1
     ac8:	8b040e42 	blhi	1043d8 <__core1_vectors-0xefbc28>
     acc:	0b0d4201 	bleq	3512d8 <__core1_vectors-0xcaed28>
     ad0:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     ad4:	00000ecb 	andeq	r0, r0, fp, asr #29
     ad8:	0000001c 	andeq	r0, r0, ip, lsl r0
     adc:	00000528 	andeq	r0, r0, r8, lsr #10
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	00000084 	andeq	r0, r0, r4, lsl #1
     ae8:	8b040e42 	blhi	1043f8 <__core1_vectors-0xefbc08>
     aec:	0b0d4201 	bleq	3512f8 <__core1_vectors-0xcaed08>
     af0:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
     af4:	00000ecb 	andeq	r0, r0, fp, asr #29
     af8:	0000001c 	andeq	r0, r0, ip, lsl r0
     afc:	00000528 	andeq	r0, r0, r8, lsr #10
     b00:	00000000 	andeq	r0, r0, r0
     b04:	00000080 	andeq	r0, r0, r0, lsl #1
     b08:	8b080e42 	blhi	204418 <__core1_vectors-0xdfbbe8>
     b0c:	42018e02 	andmi	r8, r1, #2, 28
     b10:	7a040b0c 	bvc	103748 <__core1_vectors-0xefc8b8>
     b14:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b18:	0000001c 	andeq	r0, r0, ip, lsl r0
     b1c:	00000528 	andeq	r0, r0, r8, lsr #10
     b20:	00000000 	andeq	r0, r0, r0
     b24:	0000002c 	andeq	r0, r0, ip, lsr #32
     b28:	8b080e42 	blhi	204438 <__core1_vectors-0xdfbbc8>
     b2c:	42018e02 	andmi	r8, r1, #2, 28
     b30:	50040b0c 	andpl	r0, r4, ip, lsl #22
     b34:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b38:	0000001c 	andeq	r0, r0, ip, lsl r0
     b3c:	00000528 	andeq	r0, r0, r8, lsr #10
     b40:	00000000 	andeq	r0, r0, r0
     b44:	00000044 	andeq	r0, r0, r4, asr #32
     b48:	8b080e42 	blhi	204458 <__core1_vectors-0xdfbba8>
     b4c:	42018e02 	andmi	r8, r1, #2, 28
     b50:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
     b54:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b58:	0000001c 	andeq	r0, r0, ip, lsl r0
     b5c:	00000528 	andeq	r0, r0, r8, lsr #10
     b60:	00000000 	andeq	r0, r0, r0
     b64:	0000002c 	andeq	r0, r0, ip, lsr #32
     b68:	8b080e42 	blhi	204478 <__core1_vectors-0xdfbb88>
     b6c:	42018e02 	andmi	r8, r1, #2, 28
     b70:	50040b0c 	andpl	r0, r4, ip, lsl #22
     b74:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b78:	0000001c 	andeq	r0, r0, ip, lsl r0
     b7c:	00000528 	andeq	r0, r0, r8, lsr #10
     b80:	00000000 	andeq	r0, r0, r0
     b84:	0000002c 	andeq	r0, r0, ip, lsr #32
     b88:	8b080e42 	blhi	204498 <__core1_vectors-0xdfbb68>
     b8c:	42018e02 	andmi	r8, r1, #2, 28
     b90:	50040b0c 	andpl	r0, r4, ip, lsl #22
     b94:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b98:	0000001c 	andeq	r0, r0, ip, lsl r0
     b9c:	00000528 	andeq	r0, r0, r8, lsr #10
     ba0:	00000000 	andeq	r0, r0, r0
     ba4:	0000002c 	andeq	r0, r0, ip, lsr #32
     ba8:	8b080e42 	blhi	2044b8 <__core1_vectors-0xdfbb48>
     bac:	42018e02 	andmi	r8, r1, #2, 28
     bb0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     bb4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     bb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bbc:	00000528 	andeq	r0, r0, r8, lsr #10
     bc0:	00000000 	andeq	r0, r0, r0
     bc4:	0000002c 	andeq	r0, r0, ip, lsr #32
     bc8:	8b080e42 	blhi	2044d8 <__core1_vectors-0xdfbb28>
     bcc:	42018e02 	andmi	r8, r1, #2, 28
     bd0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     bd4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     bd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bdc:	00000528 	andeq	r0, r0, r8, lsr #10
     be0:	00000000 	andeq	r0, r0, r0
     be4:	0000002c 	andeq	r0, r0, ip, lsr #32
     be8:	8b080e42 	blhi	2044f8 <__core1_vectors-0xdfbb08>
     bec:	42018e02 	andmi	r8, r1, #2, 28
     bf0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     bf4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     bf8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bfc:	00000528 	andeq	r0, r0, r8, lsr #10
     c00:	01001e68 	tsteq	r0, r8, ror #28
     c04:	0000002c 	andeq	r0, r0, ip, lsr #32
     c08:	8b080e42 	blhi	204518 <__core1_vectors-0xdfbae8>
     c0c:	42018e02 	andmi	r8, r1, #2, 28
     c10:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c14:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c18:	0000001c 	andeq	r0, r0, ip, lsl r0
     c1c:	00000528 	andeq	r0, r0, r8, lsr #10
     c20:	00000000 	andeq	r0, r0, r0
     c24:	0000002c 	andeq	r0, r0, ip, lsr #32
     c28:	8b080e42 	blhi	204538 <__core1_vectors-0xdfbac8>
     c2c:	42018e02 	andmi	r8, r1, #2, 28
     c30:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c34:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c38:	0000001c 	andeq	r0, r0, ip, lsl r0
     c3c:	00000528 	andeq	r0, r0, r8, lsr #10
     c40:	01001e94 			; <UNDEFINED> instruction: 0x01001e94
     c44:	0000002c 	andeq	r0, r0, ip, lsr #32
     c48:	8b080e42 	blhi	204558 <__core1_vectors-0xdfbaa8>
     c4c:	42018e02 	andmi	r8, r1, #2, 28
     c50:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c54:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c58:	0000001c 	andeq	r0, r0, ip, lsl r0
     c5c:	00000528 	andeq	r0, r0, r8, lsr #10
     c60:	00000000 	andeq	r0, r0, r0
     c64:	0000002c 	andeq	r0, r0, ip, lsr #32
     c68:	8b080e42 	blhi	204578 <__core1_vectors-0xdfba88>
     c6c:	42018e02 	andmi	r8, r1, #2, 28
     c70:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c74:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c78:	0000001c 	andeq	r0, r0, ip, lsl r0
     c7c:	00000528 	andeq	r0, r0, r8, lsr #10
     c80:	00000000 	andeq	r0, r0, r0
     c84:	0000006c 	andeq	r0, r0, ip, rrx
     c88:	8b040e42 	blhi	104598 <__core1_vectors-0xefba68>
     c8c:	0b0d4201 	bleq	351498 <__core1_vectors-0xcaeb68>
     c90:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
     c94:	00000ecb 	andeq	r0, r0, fp, asr #29
     c98:	0000000c 	andeq	r0, r0, ip
     c9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ca0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ca4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ca8:	00000030 	andeq	r0, r0, r0, lsr r0
     cac:	00000c98 	muleq	r0, r8, ip
     cb0:	01001ec0 	smlabteq	r0, r0, lr, r1
     cb4:	00000024 	andeq	r0, r0, r4, lsr #32
     cb8:	80100e42 	andshi	r0, r0, r2, asr #28
     cbc:	82038104 	andhi	r8, r3, #4, 2
     cc0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     cc4:	058b140e 	streq	r1, [fp, #1038]	; 0x40e
     cc8:	460b0d42 	strmi	r0, [fp], -r2, asr #26
     ccc:	cb420d0d 	blgt	1084108 <__end__+0x680e8>
     cd0:	c342100e 	movtgt	r1, #8206	; 0x200e
     cd4:	0ec0c1c2 	acseqdm	f4, f2
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ce0:	00000c98 	muleq	r0, r8, ip
     ce4:	01001ee4 	smlatteq	r0, r4, lr, r1
     ce8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cec:	8b040e42 	blhi	1045fc <__core1_vectors-0xefba04>
     cf0:	0b0d4201 	bleq	3514fc <__core1_vectors-0xcaeb04>
     cf4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     cf8:	00000ecb 	andeq	r0, r0, fp, asr #29
     cfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     d00:	00000c98 	muleq	r0, r8, ip
     d04:	00000000 	andeq	r0, r0, r0
     d08:	0000001c 	andeq	r0, r0, ip, lsl r0
     d0c:	8b040e42 	blhi	10461c <__core1_vectors-0xefb9e4>
     d10:	0b0d4201 	bleq	35151c <__core1_vectors-0xcaeae4>
     d14:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     d18:	00000ecb 	andeq	r0, r0, fp, asr #29
     d1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d20:	00000c98 	muleq	r0, r8, ip
     d24:	01001f00 	tsteq	r0, r0, lsl #30
     d28:	0000008c 	andeq	r0, r0, ip, lsl #1
     d2c:	8b080e42 	blhi	20463c <__core1_vectors-0xdfb9c4>
     d30:	42018e02 	andmi	r8, r1, #2, 28
     d34:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     d38:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
     d3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d40:	00000c98 	muleq	r0, r8, ip
     d44:	00000000 	andeq	r0, r0, r0
     d48:	00000150 	andeq	r0, r0, r0, asr r1
     d4c:	8b040e42 	blhi	10465c <__core1_vectors-0xefb9a4>
     d50:	0b0d4201 	bleq	35155c <__core1_vectors-0xcaeaa4>
     d54:	0d0da002 	stceq	0, cr10, [sp, #-8]
     d58:	000ecb42 	andeq	ip, lr, r2, asr #22
     d5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d60:	00000c98 	muleq	r0, r8, ip
     d64:	00000000 	andeq	r0, r0, r0
     d68:	00000168 	andeq	r0, r0, r8, ror #2
     d6c:	8b040e42 	blhi	10467c <__core1_vectors-0xefb984>
     d70:	0b0d4201 	bleq	35157c <__core1_vectors-0xcaea84>
     d74:	0d0dac02 	stceq	12, cr10, [sp, #-8]
     d78:	000ecb42 	andeq	ip, lr, r2, asr #22
     d7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d80:	00000c98 	muleq	r0, r8, ip
     d84:	00000000 	andeq	r0, r0, r0
     d88:	00000068 	andeq	r0, r0, r8, rrx
     d8c:	8b080e42 	blhi	20469c <__core1_vectors-0xdfb964>
     d90:	42018e02 	andmi	r8, r1, #2, 28
     d94:	6e040b0c 	vmlavs.f64	d0, d4, d12
     d98:	00080d0c 	andeq	r0, r8, ip, lsl #26
     d9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     da0:	00000c98 	muleq	r0, r8, ip
     da4:	01001f8c 	smlabbeq	r0, ip, pc, r1	; <UNPREDICTABLE>
     da8:	00000050 	andeq	r0, r0, r0, asr r0
     dac:	8b080e42 	blhi	2046bc <__core1_vectors-0xdfb944>
     db0:	42018e02 	andmi	r8, r1, #2, 28
     db4:	62040b0c 	andvs	r0, r4, #12, 22	; 0x3000
     db8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     dbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     dc0:	00000c98 	muleq	r0, r8, ip
     dc4:	00000000 	andeq	r0, r0, r0
     dc8:	00000074 	andeq	r0, r0, r4, ror r0
     dcc:	8b040e42 	blhi	1046dc <__core1_vectors-0xefb924>
     dd0:	0b0d4201 	bleq	3515dc <__core1_vectors-0xcaea24>
     dd4:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
     dd8:	00000ecb 	andeq	r0, r0, fp, asr #29
     ddc:	0000001c 	andeq	r0, r0, ip, lsl r0
     de0:	00000c98 	muleq	r0, r8, ip
     de4:	01001fdc 	ldrdeq	r1, [r0, -ip]
     de8:	000000e0 	andeq	r0, r0, r0, ror #1
     dec:	8b040e42 	blhi	1046fc <__core1_vectors-0xefb904>
     df0:	0b0d4201 	bleq	3515fc <__core1_vectors-0xcaea04>
     df4:	0d0d6802 	stceq	8, cr6, [sp, #-8]
     df8:	000ecb42 	andeq	ip, lr, r2, asr #22
     dfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     e00:	00000c98 	muleq	r0, r8, ip
     e04:	00000000 	andeq	r0, r0, r0
     e08:	00000038 	andeq	r0, r0, r8, lsr r0
     e0c:	8b040e42 	blhi	10471c <__core1_vectors-0xefb8e4>
     e10:	0b0d4201 	bleq	35161c <__core1_vectors-0xcae9e4>
     e14:	420d0d54 	andmi	r0, sp, #84, 26	; 0x1500
     e18:	00000ecb 	andeq	r0, r0, fp, asr #29
     e1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e20:	00000c98 	muleq	r0, r8, ip
     e24:	00000000 	andeq	r0, r0, r0
     e28:	0000007c 	andeq	r0, r0, ip, ror r0
     e2c:	8b040e42 	blhi	10473c <__core1_vectors-0xefb8c4>
     e30:	0b0d4201 	bleq	35163c <__core1_vectors-0xcae9c4>
     e34:	420d0d76 	andmi	r0, sp, #7552	; 0x1d80
     e38:	00000ecb 	andeq	r0, r0, fp, asr #29
     e3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e40:	00000c98 	muleq	r0, r8, ip
     e44:	010020bc 	strheq	r2, [r0, -ip]
     e48:	000000b4 	strheq	r0, [r0], -r4
     e4c:	8b040e42 	blhi	10475c <__core1_vectors-0xefb8a4>
     e50:	0b0d4201 	bleq	35165c <__core1_vectors-0xcae9a4>
     e54:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
     e58:	000ecb42 	andeq	ip, lr, r2, asr #22
     e5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e60:	00000c98 	muleq	r0, r8, ip
     e64:	01002170 	tsteq	r0, r0, ror r1
     e68:	000000e0 	andeq	r0, r0, r0, ror #1
     e6c:	8b040e42 	blhi	10477c <__core1_vectors-0xefb884>
     e70:	0b0d4201 	bleq	35167c <__core1_vectors-0xcae984>
     e74:	0d0d6802 	stceq	8, cr6, [sp, #-8]
     e78:	000ecb42 	andeq	ip, lr, r2, asr #22
     e7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e80:	00000c98 	muleq	r0, r8, ip
     e84:	00000000 	andeq	r0, r0, r0
     e88:	00000078 	andeq	r0, r0, r8, ror r0
     e8c:	8b040e42 	blhi	10479c <__core1_vectors-0xefb864>
     e90:	0b0d4201 	bleq	35169c <__core1_vectors-0xcae964>
     e94:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     e98:	00000ecb 	andeq	r0, r0, fp, asr #29
     e9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     ea0:	00000c98 	muleq	r0, r8, ip
     ea4:	01002250 	tsteq	r0, r0, asr r2
     ea8:	00000034 	andeq	r0, r0, r4, lsr r0
     eac:	8b040e42 	blhi	1047bc <__core1_vectors-0xefb844>
     eb0:	0b0d4201 	bleq	3516bc <__core1_vectors-0xcae944>
     eb4:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     eb8:	00000ecb 	andeq	r0, r0, fp, asr #29
     ebc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ec0:	00000c98 	muleq	r0, r8, ip
     ec4:	00000000 	andeq	r0, r0, r0
     ec8:	00000034 	andeq	r0, r0, r4, lsr r0
     ecc:	8b040e42 	blhi	1047dc <__core1_vectors-0xefb824>
     ed0:	0b0d4201 	bleq	3516dc <__core1_vectors-0xcae924>
     ed4:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     ed8:	00000ecb 	andeq	r0, r0, fp, asr #29
     edc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ee0:	00000c98 	muleq	r0, r8, ip
     ee4:	01002284 	smlabbeq	r0, r4, r2, r2
     ee8:	00000068 	andeq	r0, r0, r8, rrx
     eec:	8b040e42 	blhi	1047fc <__core1_vectors-0xefb804>
     ef0:	0b0d4201 	bleq	3516fc <__core1_vectors-0xcae904>
     ef4:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
     ef8:	00000ecb 	andeq	r0, r0, fp, asr #29
     efc:	00000020 	andeq	r0, r0, r0, lsr #32
     f00:	00000c98 	muleq	r0, r8, ip
     f04:	010022ec 	smlatteq	r0, ip, r2, r2
     f08:	00000328 	andeq	r0, r0, r8, lsr #6
     f0c:	8b080e42 	blhi	20481c <__core1_vectors-0xdfb7e4>
     f10:	42018e02 	andmi	r8, r1, #2, 28
     f14:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     f18:	0d0c018e 	stfeqs	f0, [ip, #-568]	; 0xfffffdc8
     f1c:	00000008 	andeq	r0, r0, r8
     f20:	0000001c 	andeq	r0, r0, ip, lsl r0
     f24:	00000c98 	muleq	r0, r8, ip
     f28:	01002614 	tsteq	r0, r4, lsl r6
     f2c:	00000068 	andeq	r0, r0, r8, rrx
     f30:	8b080e42 	blhi	204840 <__core1_vectors-0xdfb7c0>
     f34:	42018e02 	andmi	r8, r1, #2, 28
     f38:	6e040b0c 	vmlavs.f64	d0, d4, d12
     f3c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     f40:	0000001c 	andeq	r0, r0, ip, lsl r0
     f44:	00000c98 	muleq	r0, r8, ip
     f48:	0100267c 	tsteq	r0, ip, ror r6
     f4c:	00000060 	andeq	r0, r0, r0, rrx
     f50:	8b040e42 	blhi	104860 <__core1_vectors-0xefb7a0>
     f54:	0b0d4201 	bleq	351760 <__core1_vectors-0xcae8a0>
     f58:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     f5c:	00000ecb 	andeq	r0, r0, fp, asr #29
     f60:	0000001c 	andeq	r0, r0, ip, lsl r0
     f64:	00000c98 	muleq	r0, r8, ip
     f68:	010026dc 	ldrdeq	r2, [r0, -ip]
     f6c:	00000124 	andeq	r0, r0, r4, lsr #2
     f70:	8b040e42 	blhi	104880 <__core1_vectors-0xefb780>
     f74:	0b0d4201 	bleq	351780 <__core1_vectors-0xcae880>
     f78:	0d0d8a02 	vstreq	s16, [sp, #-8]
     f7c:	000ecb42 	andeq	ip, lr, r2, asr #22
     f80:	0000001c 	andeq	r0, r0, ip, lsl r0
     f84:	00000c98 	muleq	r0, r8, ip
     f88:	01002800 	tsteq	r0, r0, lsl #16
     f8c:	00000124 	andeq	r0, r0, r4, lsr #2
     f90:	8b040e42 	blhi	1048a0 <__core1_vectors-0xefb760>
     f94:	0b0d4201 	bleq	3517a0 <__core1_vectors-0xcae860>
     f98:	0d0d8a02 	vstreq	s16, [sp, #-8]
     f9c:	000ecb42 	andeq	ip, lr, r2, asr #22
     fa0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fa4:	00000c98 	muleq	r0, r8, ip
     fa8:	01002924 	tsteq	r0, r4, lsr #18
     fac:	0000010c 	andeq	r0, r0, ip, lsl #2
     fb0:	8b040e42 	blhi	1048c0 <__core1_vectors-0xefb740>
     fb4:	0b0d4201 	bleq	3517c0 <__core1_vectors-0xcae840>
     fb8:	0d0d7e02 	stceq	14, cr7, [sp, #-8]
     fbc:	000ecb42 	andeq	ip, lr, r2, asr #22
     fc0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fc4:	00000c98 	muleq	r0, r8, ip
     fc8:	01002a30 	tsteq	r0, r0, lsr sl
     fcc:	00000110 	andeq	r0, r0, r0, lsl r1
     fd0:	8b040e42 	blhi	1048e0 <__core1_vectors-0xefb720>
     fd4:	0b0d4201 	bleq	3517e0 <__core1_vectors-0xcae820>
     fd8:	0d0d8002 	stceq	0, cr8, [sp, #-8]
     fdc:	000ecb42 	andeq	ip, lr, r2, asr #22
     fe0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fe4:	00000c98 	muleq	r0, r8, ip
     fe8:	01002b40 	tsteq	r0, r0, asr #22
     fec:	00000048 	andeq	r0, r0, r8, asr #32
     ff0:	8b080e42 	blhi	204900 <__core1_vectors-0xdfb700>
     ff4:	42018e02 	andmi	r8, r1, #2, 28
     ff8:	5e040b0c 	vmlapl.f64	d0, d4, d12
     ffc:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1000:	00000020 	andeq	r0, r0, r0, lsr #32
    1004:	00000c98 	muleq	r0, r8, ip
    1008:	01002b88 	smlabbeq	r0, r8, fp, r2
    100c:	00000dd8 	ldrdeq	r0, [r0], -r8
    1010:	8b080e42 	blhi	204920 <__core1_vectors-0xdfb6e0>
    1014:	42018e02 	andmi	r8, r1, #2, 28
    1018:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    101c:	0d0c06e6 	stceq	6, cr0, [ip, #-920]	; 0xfffffc68
    1020:	00000008 	andeq	r0, r0, r8
    1024:	0000001c 	andeq	r0, r0, ip, lsl r0
    1028:	00000c98 	muleq	r0, r8, ip
    102c:	01003960 	tsteq	r0, r0, ror #18
    1030:	0000013c 	andeq	r0, r0, ip, lsr r1
    1034:	8b080e42 	blhi	204944 <__core1_vectors-0xdfb6bc>
    1038:	42018e02 	andmi	r8, r1, #2, 28
    103c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1040:	080d0c98 	stmdaeq	sp, {r3, r4, r7, sl, fp}
    1044:	0000001c 	andeq	r0, r0, ip, lsl r0
    1048:	00000c98 	muleq	r0, r8, ip
    104c:	00000000 	andeq	r0, r0, r0
    1050:	00000184 	andeq	r0, r0, r4, lsl #3
    1054:	8b080e42 	blhi	204964 <__core1_vectors-0xdfb69c>
    1058:	42018e02 	andmi	r8, r1, #2, 28
    105c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1060:	080d0cbc 	stmdaeq	sp, {r2, r3, r4, r5, r7, sl, fp}
    1064:	0000001c 	andeq	r0, r0, ip, lsl r0
    1068:	00000c98 	muleq	r0, r8, ip
    106c:	00000000 	andeq	r0, r0, r0
    1070:	000000e0 	andeq	r0, r0, r0, ror #1
    1074:	8b080e42 	blhi	204984 <__core1_vectors-0xdfb67c>
    1078:	42018e02 	andmi	r8, r1, #2, 28
    107c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1080:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
    1084:	0000001c 	andeq	r0, r0, ip, lsl r0
    1088:	00000c98 	muleq	r0, r8, ip
    108c:	00000000 	andeq	r0, r0, r0
    1090:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1094:	8b080e42 	blhi	2049a4 <__core1_vectors-0xdfb65c>
    1098:	42018e02 	andmi	r8, r1, #2, 28
    109c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    10a0:	080d0cd8 	stmdaeq	sp, {r3, r4, r6, r7, sl, fp}
    10a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10a8:	00000c98 	muleq	r0, r8, ip
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	00000044 	andeq	r0, r0, r4, asr #32
    10b4:	8b080e42 	blhi	2049c4 <__core1_vectors-0xdfb63c>
    10b8:	42018e02 	andmi	r8, r1, #2, 28
    10bc:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
    10c0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    10d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10d8:	000010c4 	andeq	r1, r0, r4, asr #1
    10dc:	00000000 	andeq	r0, r0, r0
    10e0:	00000030 	andeq	r0, r0, r0, lsr r0
    10e4:	8b080e42 	blhi	2049f4 <__core1_vectors-0xdfb60c>
    10e8:	42018e02 	andmi	r8, r1, #2, 28
    10ec:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
    10f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    10f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10f8:	000010c4 	andeq	r1, r0, r4, asr #1
    10fc:	00000000 	andeq	r0, r0, r0
    1100:	00000090 	muleq	r0, r0, r0
    1104:	8b080e42 	blhi	204a14 <__core1_vectors-0xdfb5ec>
    1108:	42018e02 	andmi	r8, r1, #2, 28
    110c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1110:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
    1114:	0000001c 	andeq	r0, r0, ip, lsl r0
    1118:	000010c4 	andeq	r1, r0, r4, asr #1
    111c:	00000000 	andeq	r0, r0, r0
    1120:	000000b4 	strheq	r0, [r0], -r4
    1124:	8b040e42 	blhi	104a34 <__core1_vectors-0xefb5cc>
    1128:	0b0d4201 	bleq	351934 <__core1_vectors-0xcae6cc>
    112c:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
    1130:	000ecb42 	andeq	ip, lr, r2, asr #22
    1134:	0000002c 	andeq	r0, r0, ip, lsr #32
    1138:	000010c4 	andeq	r1, r0, r4, asr #1
    113c:	00000000 	andeq	r0, r0, r0
    1140:	00000078 	andeq	r0, r0, r8, ror r0
    1144:	82080e42 	andhi	r0, r8, #1056	; 0x420
    1148:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
    114c:	048b100e 	streq	r1, [fp], #14
    1150:	0c42038e 	mcrreq	3, 8, r0, r2, cr14
    1154:	0c700c0b 	ldcleq	12, cr0, [r0], #-44	; 0xffffffd4
    1158:	ce42100d 	cdpgt	0, 4, cr1, cr2, cr13, {0}
    115c:	42080ecb 	andmi	r0, r8, #3248	; 0xcb0
    1160:	000ec2c3 	andeq	ip, lr, r3, asr #5
    1164:	00000030 	andeq	r0, r0, r0, lsr r0
    1168:	000010c4 	andeq	r1, r0, r4, asr #1
    116c:	00000000 	andeq	r0, r0, r0
    1170:	00000068 	andeq	r0, r0, r8, rrx
    1174:	810c0e42 	tsthi	ip, r2, asr #28
    1178:	83028203 	movwhi	r8, #8707	; 0x2203
    117c:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
    1180:	048e058b 	streq	r0, [lr], #1419	; 0x58b
    1184:	100b0c42 	andne	r0, fp, r2, asr #24
    1188:	140d0c68 	strne	r0, [sp], #-3176	; 0xfffff398
    118c:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
    1190:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
    1194:	00000ec1 	andeq	r0, r0, r1, asr #29
    1198:	00000034 	andeq	r0, r0, r4, lsr r0
    119c:	000010c4 	andeq	r1, r0, r4, asr #1
    11a0:	00000000 	andeq	r0, r0, r0
    11a4:	00000050 	andeq	r0, r0, r0, asr r0
    11a8:	80100e42 	andshi	r0, r0, r2, asr #28
    11ac:	82038104 	andhi	r8, r3, #4, 2
    11b0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
    11b4:	068b180e 	streq	r1, [fp], lr, lsl #16
    11b8:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
    11bc:	0c5c140b 	cfldrdeq	mvd1, [ip], {11}
    11c0:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
    11c4:	42100ecb 	andsmi	r0, r0, #3248	; 0xcb0
    11c8:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
    11cc:	0000000e 	andeq	r0, r0, lr
    11d0:	00000030 	andeq	r0, r0, r0, lsr r0
    11d4:	000010c4 	andeq	r1, r0, r4, asr #1
    11d8:	00000000 	andeq	r0, r0, r0
    11dc:	00000048 	andeq	r0, r0, r8, asr #32
    11e0:	810c0e42 	tsthi	ip, r2, asr #28
    11e4:	83028203 	movwhi	r8, #8707	; 0x2203
    11e8:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
    11ec:	048e058b 	streq	r0, [lr], #1419	; 0x58b
    11f0:	100b0c42 	andne	r0, fp, r2, asr #24
    11f4:	140d0c58 	strne	r0, [sp], #-3160	; 0xfffff3a8
    11f8:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
    11fc:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
    1200:	00000ec1 	andeq	r0, r0, r1, asr #29
    1204:	0000001c 	andeq	r0, r0, ip, lsl r0
    1208:	000010c4 	andeq	r1, r0, r4, asr #1
    120c:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
    1210:	0000006c 	andeq	r0, r0, ip, rrx
    1214:	8b080e42 	blhi	204b24 <__core1_vectors-0xdfb4dc>
    1218:	42018e02 	andmi	r8, r1, #2, 28
    121c:	70040b0c 	andvc	r0, r4, ip, lsl #22
    1220:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1224:	0000001c 	andeq	r0, r0, ip, lsl r0
    1228:	000010c4 	andeq	r1, r0, r4, asr #1
    122c:	01003b08 	tsteq	r0, r8, lsl #22
    1230:	00000058 	andeq	r0, r0, r8, asr r0
    1234:	8b040e42 	blhi	104b44 <__core1_vectors-0xefb4bc>
    1238:	0b0d4201 	bleq	351a44 <__core1_vectors-0xcae5bc>
    123c:	420d0d64 	andmi	r0, sp, #100, 26	; 0x1900
    1240:	00000ecb 	andeq	r0, r0, fp, asr #29
    1244:	0000001c 	andeq	r0, r0, ip, lsl r0
    1248:	000010c4 	andeq	r1, r0, r4, asr #1
    124c:	01003b60 	tsteq	r0, r0, ror #22
    1250:	00000098 	muleq	r0, r8, r0
    1254:	8b080e42 	blhi	204b64 <__core1_vectors-0xdfb49c>
    1258:	42018e02 	andmi	r8, r1, #2, 28
    125c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1260:	080d0c46 	stmdaeq	sp, {r1, r2, r6, sl, fp}
    1264:	0000001c 	andeq	r0, r0, ip, lsl r0
    1268:	000010c4 	andeq	r1, r0, r4, asr #1
    126c:	01003bf8 	strdeq	r3, [r0, -r8]
    1270:	0000013c 	andeq	r0, r0, ip, lsr r1
    1274:	8b080e42 	blhi	204b84 <__core1_vectors-0xdfb47c>
    1278:	42018e02 	andmi	r8, r1, #2, 28
    127c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1280:	080d0c98 	stmdaeq	sp, {r3, r4, r7, sl, fp}
    1284:	0000001c 	andeq	r0, r0, ip, lsl r0
    1288:	000010c4 	andeq	r1, r0, r4, asr #1
    128c:	01003d34 	tsteq	r0, r4, lsr sp
    1290:	00000178 	andeq	r0, r0, r8, ror r1
    1294:	8b040e42 	blhi	104ba4 <__core1_vectors-0xefb45c>
    1298:	0b0d4201 	bleq	351aa4 <__core1_vectors-0xcae55c>
    129c:	0d0db402 	cfstrseq	mvf11, [sp, #-8]
    12a0:	000ecb42 	andeq	ip, lr, r2, asr #22
    12a4:	00000020 	andeq	r0, r0, r0, lsr #32
    12a8:	000010c4 	andeq	r1, r0, r4, asr #1
    12ac:	01003eac 	smlatbeq	r0, ip, lr, r3
    12b0:	0000081c 	andeq	r0, r0, ip, lsl r8
    12b4:	8b080e42 	blhi	204bc4 <__core1_vectors-0xdfb43c>
    12b8:	42018e02 	andmi	r8, r1, #2, 28
    12bc:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    12c0:	0d0c0408 	cfstrseq	mvf0, [ip, #-32]	; 0xffffffe0
    12c4:	00000008 	andeq	r0, r0, r8
    12c8:	00000020 	andeq	r0, r0, r0, lsr #32
    12cc:	000010c4 	andeq	r1, r0, r4, asr #1
    12d0:	010046c8 	smlabteq	r0, r8, r6, r4
    12d4:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    12d8:	8b080e42 	blhi	204be8 <__core1_vectors-0xdfb418>
    12dc:	42018e02 	andmi	r8, r1, #2, 28
    12e0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    12e4:	0d0c0154 	stfeqs	f0, [ip, #-336]	; 0xfffffeb0
    12e8:	00000008 	andeq	r0, r0, r8
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    12f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1300:	000012ec 	andeq	r1, r0, ip, ror #5
    1304:	0100497c 	tsteq	r0, ip, ror r9
    1308:	00000080 	andeq	r0, r0, r0, lsl #1
    130c:	8b080e42 	blhi	204c1c <__core1_vectors-0xdfb3e4>
    1310:	42018e02 	andmi	r8, r1, #2, 28
    1314:	7a040b0c 	bvc	103f4c <__core1_vectors-0xefc0b4>
    1318:	00080d0c 	andeq	r0, r8, ip, lsl #26
    131c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1320:	000012ec 	andeq	r1, r0, ip, ror #5
    1324:	010049fc 	strdeq	r4, [r0, -ip]
    1328:	000000d8 	ldrdeq	r0, [r0], -r8
    132c:	8b080e42 	blhi	204c3c <__core1_vectors-0xdfb3c4>
    1330:	42018e02 	andmi	r8, r1, #2, 28
    1334:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1338:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
    133c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1340:	000012ec 	andeq	r1, r0, ip, ror #5
    1344:	00000000 	andeq	r0, r0, r0
    1348:	0000007c 	andeq	r0, r0, ip, ror r0
    134c:	8b080e42 	blhi	204c5c <__core1_vectors-0xdfb3a4>
    1350:	42018e02 	andmi	r8, r1, #2, 28
    1354:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
    1358:	00080d0c 	andeq	r0, r8, ip, lsl #26
    135c:	0000000c 	andeq	r0, r0, ip
    1360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1364:	7c020001 	stcvc	0, cr0, [r2], {1}
    1368:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    136c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1370:	0000135c 	andeq	r1, r0, ip, asr r3
    1374:	01004ad4 	ldrdeq	r4, [r0, -r4]
    1378:	00000078 	andeq	r0, r0, r8, ror r0
    137c:	8b040e42 	blhi	104c8c <__core1_vectors-0xefb374>
    1380:	0b0d4201 	bleq	351b8c <__core1_vectors-0xcae474>
    1384:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
    1388:	00000ecb 	andeq	r0, r0, fp, asr #29
    138c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1390:	0000135c 	andeq	r1, r0, ip, asr r3
    1394:	01004b4c 	tsteq	r0, ip, asr #22
    1398:	0000005c 	andeq	r0, r0, ip, asr r0
    139c:	8b040e42 	blhi	104cac <__core1_vectors-0xefb354>
    13a0:	0b0d4201 	bleq	351bac <__core1_vectors-0xcae454>
    13a4:	420d0d66 	andmi	r0, sp, #6528	; 0x1980
    13a8:	00000ecb 	andeq	r0, r0, fp, asr #29
    13ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    13b0:	0000135c 	andeq	r1, r0, ip, asr r3
    13b4:	01004ba8 	smlatbeq	r0, r8, fp, r4
    13b8:	0000002c 	andeq	r0, r0, ip, lsr #32
    13bc:	8b040e42 	blhi	104ccc <__core1_vectors-0xefb334>
    13c0:	0b0d4201 	bleq	351bcc <__core1_vectors-0xcae434>
    13c4:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
    13c8:	00000ecb 	andeq	r0, r0, fp, asr #29
    13cc:	00000018 	andeq	r0, r0, r8, lsl r0
    13d0:	0000135c 	andeq	r1, r0, ip, asr r3
    13d4:	01004bd4 	ldrdeq	r4, [r0, -r4]
    13d8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    13dc:	8b080e42 	blhi	204cec <__core1_vectors-0xdfb314>
    13e0:	42018e02 	andmi	r8, r1, #2, 28
    13e4:	00040b0c 	andeq	r0, r4, ip, lsl #22
    13e8:	0000000c 	andeq	r0, r0, ip
    13ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13f0:	7c020001 	stcvc	0, cr0, [r2], {1}
    13f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13f8:	00000018 	andeq	r0, r0, r8, lsl r0
    13fc:	000013e8 	andeq	r1, r0, r8, ror #7
    1400:	01000020 	tsteq	r0, r0, lsr #32
    1404:	000000a8 	andeq	r0, r0, r8, lsr #1
    1408:	8b080e42 	blhi	204d18 <__core1_vectors-0xdfb2e8>
    140c:	42018e02 	andmi	r8, r1, #2, 28
    1410:	00040b0c 	andeq	r0, r4, ip, lsl #22
    1414:	0000000c 	andeq	r0, r0, ip
    1418:	000013e8 	andeq	r1, r0, r8, ror #7
    141c:	010000c8 	smlabteq	r0, r8, r0, r0
    1420:	0000000c 	andeq	r0, r0, ip
    1424:	0000000c 	andeq	r0, r0, ip
    1428:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    142c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1430:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1434:	0000001c 	andeq	r0, r0, ip, lsl r0
    1438:	00001424 	andeq	r1, r0, r4, lsr #8
    143c:	01004ca4 	smlatbeq	r0, r4, ip, r4
    1440:	00000074 	andeq	r0, r0, r4, ror r0
    1444:	8b040e42 	blhi	104d54 <__core1_vectors-0xefb2ac>
    1448:	0b0d4201 	bleq	351c54 <__core1_vectors-0xcae3ac>
    144c:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
    1450:	00000ecb 	andeq	r0, r0, fp, asr #29
    1454:	0000001c 	andeq	r0, r0, ip, lsl r0
    1458:	00001424 	andeq	r1, r0, r4, lsr #8
    145c:	01004d18 	tsteq	r0, r8, lsl sp
    1460:	00000084 	andeq	r0, r0, r4, lsl #1
    1464:	8b040e42 	blhi	104d74 <__core1_vectors-0xefb28c>
    1468:	0b0d4201 	bleq	351c74 <__core1_vectors-0xcae38c>
    146c:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
    1470:	00000ecb 	andeq	r0, r0, fp, asr #29
    1474:	0000001c 	andeq	r0, r0, ip, lsl r0
    1478:	00001424 	andeq	r1, r0, r4, lsr #8
    147c:	00000000 	andeq	r0, r0, r0
    1480:	00000108 	andeq	r0, r0, r8, lsl #2
    1484:	8b040e42 	blhi	104d94 <__core1_vectors-0xefb26c>
    1488:	0b0d4201 	bleq	351c94 <__core1_vectors-0xcae36c>
    148c:	0d0d7c02 	stceq	12, cr7, [sp, #-8]
    1490:	000ecb42 	andeq	ip, lr, r2, asr #22
    1494:	0000001c 	andeq	r0, r0, ip, lsl r0
    1498:	00001424 	andeq	r1, r0, r4, lsr #8
    149c:	00000000 	andeq	r0, r0, r0
    14a0:	00000040 	andeq	r0, r0, r0, asr #32
    14a4:	8b080e42 	blhi	204db4 <__core1_vectors-0xdfb24c>
    14a8:	42018e02 	andmi	r8, r1, #2, 28
    14ac:	5a040b0c 	bpl	1040e4 <__core1_vectors-0xefbf1c>
    14b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    14b4:	00000034 	andeq	r0, r0, r4, lsr r0
    14b8:	00001424 	andeq	r1, r0, r4, lsr #8
    14bc:	01004d9c 			; <UNDEFINED> instruction: 0x01004d9c
    14c0:	00000050 	andeq	r0, r0, r0, asr r0
    14c4:	80100e42 	andshi	r0, r0, r2, asr #28
    14c8:	82038104 	andhi	r8, r3, #4, 2
    14cc:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
    14d0:	068b180e 	streq	r1, [fp], lr, lsl #16
    14d4:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
    14d8:	0c5c140b 	cfldrdeq	mvd1, [ip], {11}
    14dc:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
    14e0:	42100ecb 	andsmi	r0, r0, #3248	; 0xcb0
    14e4:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
    14e8:	0000000e 	andeq	r0, r0, lr
    14ec:	0000000c 	andeq	r0, r0, ip
    14f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    14f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1500:	000014ec 	andeq	r1, r0, ip, ror #9
    1504:	01004dec 	smlatteq	r0, ip, sp, r4
    1508:	0000001c 	andeq	r0, r0, ip, lsl r0
    150c:	8b040e42 	blhi	104e1c <__core1_vectors-0xefb1e4>
    1510:	0b0d4201 	bleq	351d1c <__core1_vectors-0xcae2e4>
    1514:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
    1518:	00000ecb 	andeq	r0, r0, fp, asr #29
    151c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1520:	000014ec 	andeq	r1, r0, ip, ror #9
    1524:	01004e08 	tsteq	r0, r8, lsl #28
    1528:	0000001c 	andeq	r0, r0, ip, lsl r0
    152c:	8b040e42 	blhi	104e3c <__core1_vectors-0xefb1c4>
    1530:	0b0d4201 	bleq	351d3c <__core1_vectors-0xcae2c4>
    1534:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
    1538:	00000ecb 	andeq	r0, r0, fp, asr #29
    153c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1540:	000014ec 	andeq	r1, r0, ip, ror #9
    1544:	01004e24 	tsteq	r0, r4, lsr #28
    1548:	00000054 	andeq	r0, r0, r4, asr r0
    154c:	8b040e42 	blhi	104e5c <__core1_vectors-0xefb1a4>
    1550:	0b0d4201 	bleq	351d5c <__core1_vectors-0xcae2a4>
    1554:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
    1558:	00000ecb 	andeq	r0, r0, fp, asr #29
    155c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1560:	000014ec 	andeq	r1, r0, ip, ror #9
    1564:	01004e78 	tsteq	r0, r8, ror lr
    1568:	0000008c 	andeq	r0, r0, ip, lsl #1
    156c:	8b080e42 	blhi	204e7c <__core1_vectors-0xdfb184>
    1570:	42018e02 	andmi	r8, r1, #2, 28
    1574:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1578:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
    157c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1580:	000014ec 	andeq	r1, r0, ip, ror #9
    1584:	01004f04 	tsteq	r0, r4, lsl #30
    1588:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    158c:	8b040e42 	blhi	104e9c <__core1_vectors-0xefb164>
    1590:	0b0d4201 	bleq	351d9c <__core1_vectors-0xcae264>
    1594:	0d0d6002 	stceq	0, cr6, [sp, #-8]
    1598:	000ecb42 	andeq	ip, lr, r2, asr #22
    159c:	0000001c 	andeq	r0, r0, ip, lsl r0
    15a0:	000014ec 	andeq	r1, r0, ip, ror #9
    15a4:	01004fd4 	ldrdeq	r4, [r0, -r4]
    15a8:	00000118 	andeq	r0, r0, r8, lsl r1
    15ac:	8b080e42 	blhi	204ebc <__core1_vectors-0xdfb144>
    15b0:	42018e02 	andmi	r8, r1, #2, 28
    15b4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    15b8:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
    15bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    15c0:	000014ec 	andeq	r1, r0, ip, ror #9
    15c4:	00000000 	andeq	r0, r0, r0
    15c8:	0000005c 	andeq	r0, r0, ip, asr r0
    15cc:	8b040e42 	blhi	104edc <__core1_vectors-0xefb124>
    15d0:	0b0d4201 	bleq	351ddc <__core1_vectors-0xcae224>
    15d4:	420d0d66 	andmi	r0, sp, #6528	; 0x1980
    15d8:	00000ecb 	andeq	r0, r0, fp, asr #29
    15dc:	0000001c 	andeq	r0, r0, ip, lsl r0
    15e0:	000014ec 	andeq	r1, r0, ip, ror #9
    15e4:	010050ec 	smlatteq	r0, ip, r0, r5
    15e8:	0000003c 	andeq	r0, r0, ip, lsr r0
    15ec:	8b080e42 	blhi	204efc <__core1_vectors-0xdfb104>
    15f0:	42018e02 	andmi	r8, r1, #2, 28
    15f4:	58040b0c 	stmdapl	r4, {r2, r3, r8, r9, fp}
    15f8:	00080d0c 	andeq	r0, r8, ip, lsl #26
    15fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1600:	000014ec 	andeq	r1, r0, ip, ror #9
    1604:	00000000 	andeq	r0, r0, r0
    1608:	00000030 	andeq	r0, r0, r0, lsr r0
    160c:	8b080e42 	blhi	204f1c <__core1_vectors-0xdfb0e4>
    1610:	42018e02 	andmi	r8, r1, #2, 28
    1614:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
    1618:	00080d0c 	andeq	r0, r8, ip, lsl #26
    161c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1620:	000014ec 	andeq	r1, r0, ip, ror #9
    1624:	00000000 	andeq	r0, r0, r0
    1628:	000000dc 	ldrdeq	r0, [r0], -ip
    162c:	8b080e42 	blhi	204f3c <__core1_vectors-0xdfb0c4>
    1630:	42018e02 	andmi	r8, r1, #2, 28
    1634:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1638:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
    163c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1640:	000014ec 	andeq	r1, r0, ip, ror #9
    1644:	00000000 	andeq	r0, r0, r0
    1648:	00000090 	muleq	r0, r0, r0
    164c:	8b080e42 	blhi	204f5c <__core1_vectors-0xdfb0a4>
    1650:	42018e02 	andmi	r8, r1, #2, 28
    1654:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1658:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
    165c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1660:	000014ec 	andeq	r1, r0, ip, ror #9
    1664:	00000000 	andeq	r0, r0, r0
    1668:	00000084 	andeq	r0, r0, r4, lsl #1
    166c:	8b080e42 	blhi	204f7c <__core1_vectors-0xdfb084>
    1670:	42018e02 	andmi	r8, r1, #2, 28
    1674:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
    1678:	00080d0c 	andeq	r0, r8, ip, lsl #26
    167c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1680:	000014ec 	andeq	r1, r0, ip, ror #9
    1684:	00000000 	andeq	r0, r0, r0
    1688:	00000028 	andeq	r0, r0, r8, lsr #32
    168c:	8b040e42 	blhi	104f9c <__core1_vectors-0xefb064>
    1690:	0b0d4201 	bleq	351e9c <__core1_vectors-0xcae164>
    1694:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
    1698:	00000ecb 	andeq	r0, r0, fp, asr #29
    169c:	0000001c 	andeq	r0, r0, ip, lsl r0
    16a0:	000014ec 	andeq	r1, r0, ip, ror #9
    16a4:	00000000 	andeq	r0, r0, r0
    16a8:	000000ec 	andeq	r0, r0, ip, ror #1
    16ac:	8b080e42 	blhi	204fbc <__core1_vectors-0xdfb044>
    16b0:	42018e02 	andmi	r8, r1, #2, 28
    16b4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    16b8:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
    16bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    16c0:	000014ec 	andeq	r1, r0, ip, ror #9
    16c4:	00000000 	andeq	r0, r0, r0
    16c8:	0000006c 	andeq	r0, r0, ip, rrx
    16cc:	8b080e42 	blhi	204fdc <__core1_vectors-0xdfb024>
    16d0:	42018e02 	andmi	r8, r1, #2, 28
    16d4:	70040b0c 	andvc	r0, r4, ip, lsl #22
    16d8:	00080d0c 	andeq	r0, r8, ip, lsl #26
    16dc:	0000001c 	andeq	r0, r0, ip, lsl r0
    16e0:	000014ec 	andeq	r1, r0, ip, ror #9
    16e4:	00000000 	andeq	r0, r0, r0
    16e8:	00000044 	andeq	r0, r0, r4, asr #32
    16ec:	8b040e42 	blhi	104ffc <__core1_vectors-0xefb004>
    16f0:	0b0d4201 	bleq	351efc <__core1_vectors-0xcae104>
    16f4:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
    16f8:	00000ecb 	andeq	r0, r0, fp, asr #29
    16fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1700:	000014ec 	andeq	r1, r0, ip, ror #9
    1704:	00000000 	andeq	r0, r0, r0
    1708:	00000088 	andeq	r0, r0, r8, lsl #1
    170c:	8b040e42 	blhi	10501c <__core1_vectors-0xefafe4>
    1710:	0b0d4201 	bleq	351f1c <__core1_vectors-0xcae0e4>
    1714:	420d0d7c 	andmi	r0, sp, #124, 26	; 0x1f00
    1718:	00000ecb 	andeq	r0, r0, fp, asr #29
    171c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1720:	000014ec 	andeq	r1, r0, ip, ror #9
    1724:	00000000 	andeq	r0, r0, r0
    1728:	0000006c 	andeq	r0, r0, ip, rrx
    172c:	8b080e42 	blhi	20503c <__core1_vectors-0xdfafc4>
    1730:	42018e02 	andmi	r8, r1, #2, 28
    1734:	70040b0c 	andvc	r0, r4, ip, lsl #22
    1738:	00080d0c 	andeq	r0, r8, ip, lsl #26
    173c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1740:	000014ec 	andeq	r1, r0, ip, ror #9
    1744:	00000000 	andeq	r0, r0, r0
    1748:	00000188 	andeq	r0, r0, r8, lsl #3
    174c:	8b080e42 	blhi	20505c <__core1_vectors-0xdfafa4>
    1750:	42018e02 	andmi	r8, r1, #2, 28
    1754:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1758:	080d0cbe 	stmdaeq	sp, {r1, r2, r3, r4, r5, r7, sl, fp}
    175c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1760:	000014ec 	andeq	r1, r0, ip, ror #9
    1764:	00000000 	andeq	r0, r0, r0
    1768:	000000ac 	andeq	r0, r0, ip, lsr #1
    176c:	8b040e42 	blhi	10507c <__core1_vectors-0xefaf84>
    1770:	0b0d4201 	bleq	351f7c <__core1_vectors-0xcae084>
    1774:	0d0d4e02 	stceq	14, cr4, [sp, #-8]
    1778:	000ecb42 	andeq	ip, lr, r2, asr #22
    177c:	0000000c 	andeq	r0, r0, ip
    1780:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1784:	7c020001 	stcvc	0, cr0, [r2], {1}
    1788:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    178c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1790:	0000177c 	andeq	r1, r0, ip, ror r7
    1794:	01005128 	tsteq	r0, r8, lsr #2
    1798:	000000d8 	ldrdeq	r0, [r0], -r8
    179c:	8b080e42 	blhi	2050ac <__core1_vectors-0xdfaf54>
    17a0:	42018e02 	andmi	r8, r1, #2, 28
    17a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    17a8:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
    17ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    17b0:	0000177c 	andeq	r1, r0, ip, ror r7
    17b4:	00000000 	andeq	r0, r0, r0
    17b8:	00000044 	andeq	r0, r0, r4, asr #32
    17bc:	8b040e42 	blhi	1050cc <__core1_vectors-0xefaf34>
    17c0:	0b0d4201 	bleq	351fcc <__core1_vectors-0xcae034>
    17c4:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
    17c8:	00000ecb 	andeq	r0, r0, fp, asr #29
    17cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    17d0:	0000177c 	andeq	r1, r0, ip, ror r7
    17d4:	01005200 	mrseq	r5, R8_usr
    17d8:	0000003c 	andeq	r0, r0, ip, lsr r0
    17dc:	8b080e42 	blhi	2050ec <__core1_vectors-0xdfaf14>
    17e0:	42018e02 	andmi	r8, r1, #2, 28
    17e4:	58040b0c 	stmdapl	r4, {r2, r3, r8, r9, fp}
    17e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
    17ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    17f0:	0000177c 	andeq	r1, r0, ip, ror r7
    17f4:	0100523c 	tsteq	r0, ip, lsr r2
    17f8:	00000070 	andeq	r0, r0, r0, ror r0
    17fc:	8b080e42 	blhi	20510c <__core1_vectors-0xdfaef4>
    1800:	42018e02 	andmi	r8, r1, #2, 28
    1804:	72040b0c 	andvc	r0, r4, #12, 22	; 0x3000
    1808:	00080d0c 	andeq	r0, r8, ip, lsl #26
    180c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1810:	0000177c 	andeq	r1, r0, ip, ror r7
    1814:	00000000 	andeq	r0, r0, r0
    1818:	00000064 	andeq	r0, r0, r4, rrx
    181c:	8b080e42 	blhi	20512c <__core1_vectors-0xdfaed4>
    1820:	42018e02 	andmi	r8, r1, #2, 28
    1824:	6c040b0c 			; <UNDEFINED> instruction: 0x6c040b0c
    1828:	00080d0c 	andeq	r0, r8, ip, lsl #26
    182c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1830:	0000177c 	andeq	r1, r0, ip, ror r7
    1834:	010052ac 	smlatbeq	r0, ip, r2, r5
    1838:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    183c:	8b080e42 	blhi	20514c <__core1_vectors-0xdfaeb4>
    1840:	42018e02 	andmi	r8, r1, #2, 28
    1844:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1848:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
    184c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1850:	0000177c 	andeq	r1, r0, ip, ror r7
    1854:	00000000 	andeq	r0, r0, r0
    1858:	00000130 	andeq	r0, r0, r0, lsr r1
    185c:	8b080e42 	blhi	20516c <__core1_vectors-0xdfae94>
    1860:	42018e02 	andmi	r8, r1, #2, 28
    1864:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1868:	080d0c92 	stmdaeq	sp, {r1, r4, r7, sl, fp}
    186c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1870:	0000177c 	andeq	r1, r0, ip, ror r7
    1874:	00000000 	andeq	r0, r0, r0
    1878:	000000b4 	strheq	r0, [r0], -r4
    187c:	8b080e42 	blhi	20518c <__core1_vectors-0xdfae74>
    1880:	42018e02 	andmi	r8, r1, #2, 28
    1884:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1888:	080d0c54 	stmdaeq	sp, {r2, r4, r6, sl, fp}
    188c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1890:	0000177c 	andeq	r1, r0, ip, ror r7
    1894:	00000000 	andeq	r0, r0, r0
    1898:	00000024 	andeq	r0, r0, r4, lsr #32
    189c:	8b040e42 	blhi	1051ac <__core1_vectors-0xefae54>
    18a0:	0b0d4201 	bleq	3520ac <__core1_vectors-0xcadf54>
    18a4:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
    18a8:	00000ecb 	andeq	r0, r0, fp, asr #29
    18ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    18b0:	0000177c 	andeq	r1, r0, ip, ror r7
    18b4:	00000000 	andeq	r0, r0, r0
    18b8:	00000034 	andeq	r0, r0, r4, lsr r0
    18bc:	8b040e42 	blhi	1051cc <__core1_vectors-0xefae34>
    18c0:	0b0d4201 	bleq	3520cc <__core1_vectors-0xcadf34>
    18c4:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
    18c8:	00000ecb 	andeq	r0, r0, fp, asr #29
    18cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    18d0:	0000177c 	andeq	r1, r0, ip, ror r7
    18d4:	00000000 	andeq	r0, r0, r0
    18d8:	00000050 	andeq	r0, r0, r0, asr r0
    18dc:	8b040e42 	blhi	1051ec <__core1_vectors-0xefae14>
    18e0:	0b0d4201 	bleq	3520ec <__core1_vectors-0xcadf14>
    18e4:	420d0d60 	andmi	r0, sp, #96, 26	; 0x1800
    18e8:	00000ecb 	andeq	r0, r0, fp, asr #29
    18ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    18f0:	0000177c 	andeq	r1, r0, ip, ror r7
    18f4:	00000000 	andeq	r0, r0, r0
    18f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    18fc:	8b040e42 	blhi	10520c <__core1_vectors-0xefadf4>
    1900:	0b0d4201 	bleq	35210c <__core1_vectors-0xcadef4>
    1904:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
    1908:	00000ecb 	andeq	r0, r0, fp, asr #29
    190c:	0000000c 	andeq	r0, r0, ip
    1910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1914:	7c010001 	stcvc	0, cr0, [r1], {1}
    1918:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    191c:	0000000c 	andeq	r0, r0, ip
    1920:	0000190c 	andeq	r1, r0, ip, lsl #18
    1924:	0100535c 	tsteq	r0, ip, asr r3
    1928:	000000f4 	strdeq	r0, [r0], -r4
    192c:	0000000c 	andeq	r0, r0, ip
    1930:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1934:	7c020001 	stcvc	0, cr0, [r2], {1}
    1938:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    193c:	00000018 	andeq	r0, r0, r8, lsl r0
    1940:	0000192c 	andeq	r1, r0, ip, lsr #18
    1944:	01005474 	tsteq	r0, r4, ror r4
    1948:	0000003c 	andeq	r0, r0, ip, lsr r0
    194c:	8e100e54 	mrchi	14, 0, r0, cr0, cr4, {2}
    1950:	0ece4803 	cdpeq	8, 12, cr4, cr14, cr3, {0}
    1954:	00000010 	andeq	r0, r0, r0, lsl r0
    1958:	0000000c 	andeq	r0, r0, ip
    195c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1960:	7c020001 	stcvc	0, cr0, [r2], {1}
    1964:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1968:	0000002c 	andeq	r0, r0, ip, lsr #32
    196c:	00001958 	andeq	r1, r0, r8, asr r9
    1970:	010054b0 			; <UNDEFINED> instruction: 0x010054b0
    1974:	00000130 	andeq	r0, r0, r0, lsr r1
    1978:	84200e46 	strthi	r0, [r0], #-3654	; 0xfffff1ba
    197c:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1980:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1984:	8a038904 	bhi	e3d9c <__core1_vectors-0xf1c264>
    1988:	02018e02 	andeq	r8, r1, #2, 28
    198c:	c9cace90 	stmibgt	sl, {r4, r7, r9, sl, fp, lr, pc}^
    1990:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
    1994:	00000ec4 	andeq	r0, r0, r4, asr #29

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	...
{
   8:	00000014 	andeq	r0, r0, r4, lsl r0
   c:	93500006 	cmpls	r0, #6
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	04935104 	ldreq	r5, [r3], #260	; 0x104
  14:	00000014 	andeq	r0, r0, r4, lsl r0
    ALT_PRINTF("\n");
  18:	00000130 	andeq	r0, r0, r0, lsr r1
  1c:	03f30006 	mvnseq	r0, #6
  20:	9f2500f5 	svcls	0x002500f5
	...
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  34:	00000037 	andeq	r0, r0, r7, lsr r0
  38:	93520006 	cmpls	r2, #6
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	04935304 	ldreq	r5, [r3], #772	; 0x304
  40:	00000037 	andeq	r0, r0, r7, lsr r0
  44:	00000130 	andeq	r0, r0, r0, lsr r1
  48:	03f30006 	mvnseq	r0, #6
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	9f2502f5 	svcls	0x002502f5
	...
  58:	00000002 	andeq	r0, r0, r2
	...
  64:	00000090 	muleq	r0, r0, r0
  68:	089e000a 	ldmeq	lr, {r1, r3}
	...
}
  74:	00000090 	muleq	r0, r0, r0
  78:	000000f8 	strdeq	r0, [r0], -r8
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
  7c:	93500006 	cmpls	r0, #6
  80:	04935104 	ldreq	r5, [r3], #260	; 0x104
  84:	00000104 	andeq	r0, r0, r4, lsl #2
  88:	00000118 	andeq	r0, r0, r8, lsl r1
  8c:	93500006 	cmpls	r0, #6
  90:	04935104 	ldreq	r5, [r3], #260	; 0x104
      *(pmem->toptr)=0;
  94:	00000120 	andeq	r0, r0, r0, lsr #2
  98:	00000130 	andeq	r0, r0, r0, lsr r1
  9c:	93500006 	cmpls	r0, #6
  a0:	04935104 	ldreq	r5, [r3], #260	; 0x104
	...
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
  b4:	00180000 	andseq	r0, r8, r0
  b8:	00800000 	addeq	r0, r0, r0
        break;
  bc:	00060000 	andeq	r0, r6, r0
    return ALT_E_SUCCESS;
  c0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  c4:	008c0493 	umulleq	r0, ip, r3, r4
        return ALT_E_ERROR;
  c8:	00c00000 	sbceq	r0, r0, r0
}
  cc:	00060000 	andeq	r0, r6, r0
  d0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  d4:	00c40493 	smulleq	r0, r4, r3, r4
  d8:	00dc0000 	sbcseq	r0, ip, r0
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  dc:	00060000 	andeq	r0, r6, r0
  e0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  e4:	00e00493 	smlaleq	r0, r0, r3, r4	; <UNPREDICTABLE>
  e8:	00fc0000 	rscseq	r0, ip, r0
  ec:	00060000 	andeq	r0, r6, r0
  f0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
    return dst;
  f4:	01080493 			; <UNDEFINED> instruction: 0x01080493
}
  f8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
  fc:	00060000 	andeq	r0, r6, r0
 100:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
 104:	00000493 	muleq	r0, r3, r4
	...
    errno = ENOSYS;
 110:	00680000 	rsbeq	r0, r8, r0
 114:	00a80000 	adceq	r0, r8, r0
 118:	00060000 	andeq	r0, r6, r0
 11c:	53049352 	movwpl	r9, #17234	; 0x4352
    return -1;
 120:	00a80493 	umlaleq	r0, r8, r3, r4
}
 124:	01200000 			; <UNDEFINED> instruction: 0x01200000
 128:	00060000 	andeq	r0, r6, r0
 12c:	57049356 	smlsdpl	r4, r6, r3, r9
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 130:	00000493 	muleq	r0, r3, r4
	...
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	00400000 	subeq	r0, r0, r0
 140:	00440000 	subeq	r0, r4, r0
 144:	00010000 	andeq	r0, r1, r0
 148:	00004450 	andeq	r4, r0, r0, asr r4
 14c:	00005000 	andeq	r5, r0, r0
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 150:	59000100 	stmdbpl	r0, {r8}
	...
 15c:	00480000 	subeq	r0, r8, r0
 160:	00700000 	rsbseq	r0, r0, r0
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	00010000 	andeq	r0, r1, r0
 168:	00000050 	andeq	r0, r0, r0, asr r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	01010100 	mrseq	r0, (UNDEF: 17)
 174:	01010000 	mrseq	r0, (UNDEF: 1)
    return ALT_E_SUCCESS;
 178:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
}
 17c:	c4000000 	strgt	r0, [r0], #-0
 180:	01000000 	mrseq	r0, (UNDEF: 0)
 184:	00c45e00 	sbceq	r5, r4, r0, lsl #28
    while (coalesce->size)
 188:	00c80000 	sbceq	r0, r8, r0
 18c:	00030000 	andeq	r0, r3, r0
            break;
 190:	c89f7f7e 	ldmgt	pc, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    *segpa   = thissegpa;
 194:	e0000000 	and	r0, r0, r0
 198:	01000000 	mrseq	r0, (UNDEF: 0)
 19c:	00e05e00 	rsceq	r5, r0, r0, lsl #28
    *segsize = thissegsize;
 1a0:	00e40000 	rsceq	r0, r4, r0
 1a4:	00030000 	andeq	r0, r3, r0
 1a8:	e49f7f7e 	ldr	r7, [pc], #3966	; 1b0 <__core1_vectors-0xfffe50>
    return ALT_E_SUCCESS;
 1ac:	20000000 	andcs	r0, r0, r0
}
 1b0:	01000001 	tsteq	r0, r1
 1b4:	00005e00 	andeq	r5, r0, r0, lsl #28
	...
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
 1c0:	004c0000 	subeq	r0, ip, r0
 1c4:	01140000 	tsteq	r4, r0
 1c8:	00010000 	andeq	r0, r1, r0
 1cc:	0001145c 	andeq	r1, r1, ip, asr r4
    clkStep = 9 * clk100; /* 900MHz */
 1d0:	00012000 	andeq	r2, r1, r0
 1d4:	79000300 	stmdbvc	r0, {r8, r9}
 1d8:	00009f20 	andeq	r9, r0, r0, lsr #30
 1dc:	00000000 	andeq	r0, r0, r0
	...


app_core1.axf:     file format elf32-littlearm


Disassembly of section .text:

01000000 <__core1_unwind_stub>:
    .global __core1_unwind_stub
    .type   __core1_unwind_stub, %function
    .hidden __core1_unwind_stub
__core1_unwind_stub:
    .fnstart
    bx      lr
 1000000:	e12fff1e 	bx	lr

01000004 <alt_clk_freq_get_osc1>:
}



ALT_STATUS_CODE alt_clk_freq_get_osc1(alt_freq_t *pfreq)
{
 1000004:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000008:	e28db000 	add	fp, sp, #0
 100000c:	e24dd00c 	sub	sp, sp, #12
 1000010:	e50b0008 	str	r0, [fp, #-8]
    *pfreq = (uint64_t) osc1_clock;
 1000014:	e30536e4 	movw	r3, #22244	; 0x56e4
 1000018:	e3403100 	movt	r3, #256	; 0x100
 100001c:	e5932000 	ldr	r2, [r3]
 1000020:	e51b3008 	ldr	r3, [fp, #-8]
 1000024:	e5832000 	str	r2, [r3]
    return ALT_E_SUCCESS;
 1000028:	e3a03000 	mov	r3, #0
}
 100002c:	e1a00003 	mov	r0, r3
 1000030:	e28bd000 	add	sp, fp, #0
 1000034:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000038:	e12fff1e 	bx	lr

0100003c <alt_clk_freq_get_cb_intosc_hs_div2_clk>:

ALT_STATUS_CODE alt_clk_freq_get_cb_intosc_hs_div2_clk(alt_freq_t *pfreq)
{
 100003c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000040:	e28db000 	add	fp, sp, #0
 1000044:	e24dd00c 	sub	sp, sp, #12
 1000048:	e50b0008 	str	r0, [fp, #-8]
    if(cb_intosc_hs_div2)
 100004c:	e3083000 	movw	r3, #32768	; 0x8000
 1000050:	e3403100 	movt	r3, #256	; 0x100
 1000054:	e5933000 	ldr	r3, [r3]
 1000058:	e3530000 	cmp	r3, #0
 100005c:	0a000006 	beq	100007c <alt_clk_freq_get_cb_intosc_hs_div2_clk+0x40>
    {
        *pfreq = cb_intosc_hs_div2;
 1000060:	e3083000 	movw	r3, #32768	; 0x8000
 1000064:	e3403100 	movt	r3, #256	; 0x100
 1000068:	e5932000 	ldr	r2, [r3]
 100006c:	e51b3008 	ldr	r3, [fp, #-8]
 1000070:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
 1000074:	e3a03000 	mov	r3, #0
 1000078:	ea000000 	b	1000080 <alt_clk_freq_get_cb_intosc_hs_div2_clk+0x44>
    }
    return ALT_E_ERROR;
 100007c:	e3e03000 	mvn	r3, #0
}
 1000080:	e1a00003 	mov	r0, r3
 1000084:	e28bd000 	add	sp, fp, #0
 1000088:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100008c:	e12fff1e 	bx	lr

01000090 <alt_clk_freq_get_f2s_free_clk>:

ALT_STATUS_CODE alt_clk_freq_get_f2s_free_clk(alt_freq_t *pfreq)
{
 1000090:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000094:	e28db000 	add	fp, sp, #0
 1000098:	e24dd00c 	sub	sp, sp, #12
 100009c:	e50b0008 	str	r0, [fp, #-8]
    if(f2s_free_clk)
 10000a0:	e3083004 	movw	r3, #32772	; 0x8004
 10000a4:	e3403100 	movt	r3, #256	; 0x100
 10000a8:	e5933000 	ldr	r3, [r3]
 10000ac:	e3530000 	cmp	r3, #0
 10000b0:	0a000006 	beq	10000d0 <alt_clk_freq_get_f2s_free_clk+0x40>
    {
        *pfreq = f2s_free_clk;
 10000b4:	e3083004 	movw	r3, #32772	; 0x8004
 10000b8:	e3403100 	movt	r3, #256	; 0x100
 10000bc:	e5932000 	ldr	r2, [r3]
 10000c0:	e51b3008 	ldr	r3, [fp, #-8]
 10000c4:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
 10000c8:	e3a03000 	mov	r3, #0
 10000cc:	ea000000 	b	10000d4 <alt_clk_freq_get_f2s_free_clk+0x44>
    }
    return ALT_E_ERROR;
 10000d0:	e3e03000 	mvn	r3, #0
}
 10000d4:	e1a00003 	mov	r0, r3
 10000d8:	e28bd000 	add	sp, fp, #0
 10000dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10000e0:	e12fff1e 	bx	lr

010000e4 <alt_clk_freq_get_main_pll>:

/***************************************************************
                Functions to retreive frequencies of devices
***************************************************************/
ALT_STATUS_CODE alt_clk_freq_get_main_pll(alt_freq_t *pfreq)
{
 10000e4:	e92d4800 	push	{fp, lr}
 10000e8:	e28db004 	add	fp, sp, #4
 10000ec:	e24dd020 	sub	sp, sp, #32
 10000f0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   ALT_STATUS_CODE ret = ALT_E_SUCCESS;
 10000f4:	e3a03000 	mov	r3, #0
 10000f8:	e50b3008 	str	r3, [fp, #-8]
   alt_freq_t freq;
   uint32_t vco1;
   /* Note - we don't check that we're locked */

   /* Step 1 - what is the clock source freq? */
   uint32_t vco0 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
 10000fc:	e3043040 	movw	r3, #16448	; 0x4040
 1000100:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000104:	e5933000 	ldr	r3, [r3]
 1000108:	e50b300c 	str	r3, [fp, #-12]
   switch(ALT_CLKMGR_MAINPLL_VCO0_PSRC_GET(vco0))
 100010c:	e51b300c 	ldr	r3, [fp, #-12]
 1000110:	e1a03423 	lsr	r3, r3, #8
 1000114:	e2033003 	and	r3, r3, #3
 1000118:	e3530002 	cmp	r3, #2
 100011c:	0a000010 	beq	1000164 <alt_clk_freq_get_main_pll+0x80>
 1000120:	e3530002 	cmp	r3, #2
 1000124:	8a000013 	bhi	1000178 <alt_clk_freq_get_main_pll+0x94>
 1000128:	e3530000 	cmp	r3, #0
 100012c:	0a000002 	beq	100013c <alt_clk_freq_get_main_pll+0x58>
 1000130:	e3530001 	cmp	r3, #1
 1000134:	0a000005 	beq	1000150 <alt_clk_freq_get_main_pll+0x6c>
 1000138:	ea00000e 	b	1000178 <alt_clk_freq_get_main_pll+0x94>
   {
       case ALT_CLKMGR_MAINPLL_VCO0_PSRC_E_EOSC1:
           ret = alt_clk_freq_get_osc1(&freq);
 100013c:	e24b301c 	sub	r3, fp, #28
 1000140:	e1a00003 	mov	r0, r3
 1000144:	ebffffae 	bl	1000004 <alt_clk_freq_get_osc1>
 1000148:	e50b0008 	str	r0, [fp, #-8]
           break;
 100014c:	ea00000b 	b	1000180 <alt_clk_freq_get_main_pll+0x9c>
       case ALT_CLKMGR_MAINPLL_VCO0_PSRC_E_INTOSC:
           ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(&freq);
 1000150:	e24b301c 	sub	r3, fp, #28
 1000154:	e1a00003 	mov	r0, r3
 1000158:	ebffffb7 	bl	100003c <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 100015c:	e50b0008 	str	r0, [fp, #-8]
           break;
 1000160:	ea000006 	b	1000180 <alt_clk_freq_get_main_pll+0x9c>
       case ALT_CLKMGR_MAINPLL_VCO0_PSRC_E_F2S:/* f2s_free */
           ret = alt_clk_freq_get_f2s_free_clk(&freq);
 1000164:	e24b301c 	sub	r3, fp, #28
 1000168:	e1a00003 	mov	r0, r3
 100016c:	ebffffc7 	bl	1000090 <alt_clk_freq_get_f2s_free_clk>
 1000170:	e50b0008 	str	r0, [fp, #-8]
           break;
 1000174:	ea000001 	b	1000180 <alt_clk_freq_get_main_pll+0x9c>
       default:
           return ALT_E_ERROR;
 1000178:	e3e03000 	mvn	r3, #0
 100017c:	ea00002b 	b	1000230 <alt_clk_freq_get_main_pll+0x14c>
   }

   if(ret != ALT_E_SUCCESS)
 1000180:	e51b3008 	ldr	r3, [fp, #-8]
 1000184:	e3530000 	cmp	r3, #0
 1000188:	0a000001 	beq	1000194 <alt_clk_freq_get_main_pll+0xb0>
       return ret;
 100018c:	e51b3008 	ldr	r3, [fp, #-8]
 1000190:	ea000026 	b	1000230 <alt_clk_freq_get_main_pll+0x14c>
   freq64 = freq;
 1000194:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000198:	e1a02003 	mov	r2, r3
 100019c:	e3a03000 	mov	r3, #0
 10001a0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   /* Step 2 - scale according to num/denom */
   vco1 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR);
 10001a4:	e3043044 	movw	r3, #16452	; 0x4044
 10001a8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10001ac:	e5933000 	ldr	r3, [r3]
 10001b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   freq64 *= (ALT_CLKMGR_MAINPLL_VCO1_NUMER_GET(vco1) + 1);
 10001b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10001b8:	e7ec3053 	ubfx	r3, r3, #0, #13
 10001bc:	e2833001 	add	r3, r3, #1
 10001c0:	e1a02003 	mov	r2, r3
 10001c4:	e3a03000 	mov	r3, #0
 10001c8:	e51b1010 	ldr	r1, [fp, #-16]
 10001cc:	e0000192 	mul	r0, r2, r1
 10001d0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 10001d4:	e0010193 	mul	r1, r3, r1
 10001d8:	e0801001 	add	r1, r0, r1
 10001dc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10001e0:	e0832290 	umull	r2, r3, r0, r2
 10001e4:	e0811003 	add	r1, r1, r3
 10001e8:	e1a03001 	mov	r3, r1
 10001ec:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
 10001f0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
   freq64 /= (ALT_CLKMGR_MAINPLL_VCO1_DENOM_GET(vco1) + 1);
 10001f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10001f8:	e1a03823 	lsr	r3, r3, #16
 10001fc:	e203303f 	and	r3, r3, #63	; 0x3f
 1000200:	e2833001 	add	r3, r3, #1
 1000204:	e1a02003 	mov	r2, r3
 1000208:	e3a03000 	mov	r3, #0
 100020c:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 1000210:	eb0013f0 	bl	10051d8 <__aeabi_uldivmod>
 1000214:	e1a02000 	mov	r2, r0
 1000218:	e1a03001 	mov	r3, r1
 100021c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   *pfreq = (alt_freq_t) freq64;
 1000220:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1000224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1000228:	e5832000 	str	r2, [r3]
   return ALT_E_SUCCESS;
 100022c:	e3a03000 	mov	r3, #0
}
 1000230:	e1a00003 	mov	r0, r3
 1000234:	e24bd004 	sub	sp, fp, #4
 1000238:	e8bd8800 	pop	{fp, pc}

0100023c <alt_clk_freq_get_peri_pll>:

ALT_STATUS_CODE alt_clk_freq_get_peri_pll(alt_freq_t *pfreq)
{
 100023c:	e92d4800 	push	{fp, lr}
 1000240:	e28db004 	add	fp, sp, #4
 1000244:	e24dd020 	sub	sp, sp, #32
 1000248:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   ALT_STATUS_CODE ret = ALT_E_SUCCESS;
 100024c:	e3a03000 	mov	r3, #0
 1000250:	e50b3008 	str	r3, [fp, #-8]
   uint64_t freq64;
   alt_freq_t freq = 0;
 1000254:	e3a03000 	mov	r3, #0
 1000258:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   uint32_t vco1;

   /* Note - we don't check that we're locked */

   /* Step 1 - what is the clock source freq? */
   uint32_t vco0 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
 100025c:	e30430c0 	movw	r3, #16576	; 0x40c0
 1000260:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000264:	e5933000 	ldr	r3, [r3]
 1000268:	e50b300c 	str	r3, [fp, #-12]
   switch(ALT_CLKMGR_PERPLL_VCO0_PSRC_GET(vco0))
 100026c:	e51b300c 	ldr	r3, [fp, #-12]
 1000270:	e1a03423 	lsr	r3, r3, #8
 1000274:	e2033003 	and	r3, r3, #3
 1000278:	e3530003 	cmp	r3, #3
 100027c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1000280:	ea000020 	b	1000308 <alt_clk_freq_get_peri_pll+0xcc>
 1000284:	01000294 			; <UNDEFINED> instruction: 0x01000294
 1000288:	010002e0 	smlatteq	r0, r0, r2, r0
 100028c:	010002f4 	strdeq	r0, [r0, -r4]
 1000290:	010002a8 	smlatbeq	r0, r8, r2, r0
   {
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_EOSC1:
           ret = alt_clk_freq_get_osc1(&freq);
 1000294:	e24b301c 	sub	r3, fp, #28
 1000298:	e1a00003 	mov	r0, r3
 100029c:	ebffff58 	bl	1000004 <alt_clk_freq_get_osc1>
 10002a0:	e50b0008 	str	r0, [fp, #-8]
           break;
 10002a4:	ea000019 	b	1000310 <alt_clk_freq_get_peri_pll+0xd4>
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_MAIN:
           alt_clk_freq_get_main_pll(&freq);
 10002a8:	e24b301c 	sub	r3, fp, #28
 10002ac:	e1a00003 	mov	r0, r3
 10002b0:	ebffff8b 	bl	10000e4 <alt_clk_freq_get_main_pll>
           /* There is no bypass for c15 to check for */
           freq /= (1 + alt_read_word(ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR));
 10002b4:	e304309c 	movw	r3, #16540	; 0x409c
 10002b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10002bc:	e5933000 	ldr	r3, [r3]
 10002c0:	e2832001 	add	r2, r3, #1
 10002c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10002c8:	e1a01002 	mov	r1, r2
 10002cc:	e1a00003 	mov	r0, r3
 10002d0:	eb00137a 	bl	10050c0 <__udivsi3>
 10002d4:	e1a03000 	mov	r3, r0
 10002d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
           break;
 10002dc:	ea00000b 	b	1000310 <alt_clk_freq_get_peri_pll+0xd4>
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_INTOSC:
           ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(&freq);
 10002e0:	e24b301c 	sub	r3, fp, #28
 10002e4:	e1a00003 	mov	r0, r3
 10002e8:	ebffff53 	bl	100003c <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 10002ec:	e50b0008 	str	r0, [fp, #-8]
           break;
 10002f0:	ea000006 	b	1000310 <alt_clk_freq_get_peri_pll+0xd4>
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_F2S:/* f2s_free */
           ret = alt_clk_freq_get_f2s_free_clk(&freq);
 10002f4:	e24b301c 	sub	r3, fp, #28
 10002f8:	e1a00003 	mov	r0, r3
 10002fc:	ebffff63 	bl	1000090 <alt_clk_freq_get_f2s_free_clk>
 1000300:	e50b0008 	str	r0, [fp, #-8]
           break;
 1000304:	ea000001 	b	1000310 <alt_clk_freq_get_peri_pll+0xd4>
       default:
           return ALT_E_ERROR;
 1000308:	e3e03000 	mvn	r3, #0
 100030c:	ea00002b 	b	10003c0 <alt_clk_freq_get_peri_pll+0x184>
   }

   if(ret != ALT_E_SUCCESS)
 1000310:	e51b3008 	ldr	r3, [fp, #-8]
 1000314:	e3530000 	cmp	r3, #0
 1000318:	0a000001 	beq	1000324 <alt_clk_freq_get_peri_pll+0xe8>
       return ret;
 100031c:	e51b3008 	ldr	r3, [fp, #-8]
 1000320:	ea000026 	b	10003c0 <alt_clk_freq_get_peri_pll+0x184>
   freq64 = freq;
 1000324:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000328:	e1a02003 	mov	r2, r3
 100032c:	e3a03000 	mov	r3, #0
 1000330:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   /* Step 2 - scale according to num/denom */
   vco1 = alt_read_word(ALT_CLKMGR_PERPLL_VCO1_ADDR);
 1000334:	e30430c4 	movw	r3, #16580	; 0x40c4
 1000338:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100033c:	e5933000 	ldr	r3, [r3]
 1000340:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   freq64 *= (ALT_CLKMGR_PERPLL_VCO1_NUMER_GET(vco1) + 1);
 1000344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000348:	e7ec3053 	ubfx	r3, r3, #0, #13
 100034c:	e2833001 	add	r3, r3, #1
 1000350:	e1a02003 	mov	r2, r3
 1000354:	e3a03000 	mov	r3, #0
 1000358:	e51b1010 	ldr	r1, [fp, #-16]
 100035c:	e0000192 	mul	r0, r2, r1
 1000360:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 1000364:	e0010193 	mul	r1, r3, r1
 1000368:	e0801001 	add	r1, r0, r1
 100036c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000370:	e0832290 	umull	r2, r3, r0, r2
 1000374:	e0811003 	add	r1, r1, r3
 1000378:	e1a03001 	mov	r3, r1
 100037c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
 1000380:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
   freq64 /= (ALT_CLKMGR_PERPLL_VCO1_DENOM_GET(vco1) + 1);
 1000384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000388:	e1a03823 	lsr	r3, r3, #16
 100038c:	e203303f 	and	r3, r3, #63	; 0x3f
 1000390:	e2833001 	add	r3, r3, #1
 1000394:	e1a02003 	mov	r2, r3
 1000398:	e3a03000 	mov	r3, #0
 100039c:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 10003a0:	eb00138c 	bl	10051d8 <__aeabi_uldivmod>
 10003a4:	e1a02000 	mov	r2, r0
 10003a8:	e1a03001 	mov	r3, r1
 10003ac:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   *pfreq = (alt_freq_t) freq64;
 10003b0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 10003b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10003b8:	e5832000 	str	r2, [r3]
   return ALT_E_SUCCESS;
 10003bc:	e3a03000 	mov	r3, #0
}
 10003c0:	e1a00003 	mov	r0, r3
 10003c4:	e24bd004 	sub	sp, fp, #4
 10003c8:	e8bd8800 	pop	{fp, pc}

010003cc <alt_clk_freq_get_device>:
                                      uint32_t *src_register,
                                      uint32_t *_pll_reg,
                                      uint32_t pll_shift,
                                      uint32_t *_main_reg,
                                      uint32_t main_shift)
{
 10003cc:	e92d4800 	push	{fp, lr}
 10003d0:	e28db004 	add	fp, sp, #4
 10003d4:	e24dd020 	sub	sp, sp, #32
 10003d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 10003dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 10003e0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 10003e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    alt_freq_t freq;
    uint32_t temp;
    ALT_STATUS_CODE ret;

    if(src_in_main)
 10003e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10003ec:	e3530000 	cmp	r3, #0
 10003f0:	0a000004 	beq	1000408 <alt_clk_freq_get_device+0x3c>
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
 10003f4:	e3043048 	movw	r3, #16456	; 0x4048
 10003f8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10003fc:	e5933000 	ldr	r3, [r3]
 1000400:	e50b3008 	str	r3, [fp, #-8]
 1000404:	ea000003 	b	1000418 <alt_clk_freq_get_device+0x4c>
    else
        temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
 1000408:	e30430c8 	movw	r3, #16584	; 0x40c8
 100040c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000410:	e5933000 	ldr	r3, [r3]
 1000414:	e50b3008 	str	r3, [fp, #-8]

    if((_enable_mask != 0) &&
 1000418:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100041c:	e3530000 	cmp	r3, #0
 1000420:	0a000009 	beq	100044c <alt_clk_freq_get_device+0x80>
       (0 == (_enable_mask & temp)))
 1000424:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 1000428:	e51b3008 	ldr	r3, [fp, #-8]
 100042c:	e0033002 	and	r3, r3, r2
    if((_enable_mask != 0) &&
 1000430:	e3530000 	cmp	r3, #0
 1000434:	1a000004 	bne	100044c <alt_clk_freq_get_device+0x80>
    {
        *pfreq = 0;/* device disabled */
 1000438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100043c:	e3a02000 	mov	r2, #0
 1000440:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
 1000444:	e3a03000 	mov	r3, #0
 1000448:	ea000064 	b	10005e0 <alt_clk_freq_get_device+0x214>
    }

    if(src_in_main)
 100044c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000450:	e3530000 	cmp	r3, #0
 1000454:	0a000004 	beq	100046c <alt_clk_freq_get_device+0xa0>
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_BYPASS_ADDR);
 1000458:	e3043054 	movw	r3, #16468	; 0x4054
 100045c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000460:	e5933000 	ldr	r3, [r3]
 1000464:	e50b3008 	str	r3, [fp, #-8]
 1000468:	ea000003 	b	100047c <alt_clk_freq_get_device+0xb0>
    else
        temp = alt_read_word(ALT_CLKMGR_PERPLL_BYPASS_ADDR);
 100046c:	e30430d4 	movw	r3, #16596	; 0x40d4
 1000470:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000474:	e5933000 	ldr	r3, [r3]
 1000478:	e50b3008 	str	r3, [fp, #-8]

    if(temp & _bypass_mask)
 100047c:	e51b2008 	ldr	r2, [fp, #-8]
 1000480:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1000484:	e0033002 	and	r3, r3, r2
 1000488:	e3530000 	cmp	r3, #0
 100048c:	0a000003 	beq	10004a0 <alt_clk_freq_get_device+0xd4>
    {
        return alt_clk_freq_get_osc1(pfreq);
 1000490:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1000494:	ebfffeda 	bl	1000004 <alt_clk_freq_get_osc1>
 1000498:	e1a03000 	mov	r3, r0
 100049c:	ea00004f 	b	10005e0 <alt_clk_freq_get_device+0x214>
    }
    switch(ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_GET(alt_read_word(src_register)))
 10004a0:	e59b3004 	ldr	r3, [fp, #4]
 10004a4:	e5933000 	ldr	r3, [r3]
 10004a8:	e1a03823 	lsr	r3, r3, #16
 10004ac:	e2033007 	and	r3, r3, #7
 10004b0:	e3530004 	cmp	r3, #4
 10004b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 10004b8:	ea000045 	b	10005d4 <alt_clk_freq_get_device+0x208>
 10004bc:	010004e0 	smlatteq	r0, r0, r4, r0
 10004c0:	01000548 	tsteq	r0, r8, asr #10
 10004c4:	010004d0 	ldrdeq	r0, [r0, -r0]
 10004c8:	010005b0 			; <UNDEFINED> instruction: 0x010005b0
 10004cc:	010005c4 	smlabteq	r0, r4, r5, r0
    {
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_OSC1:
            return alt_clk_freq_get_osc1(pfreq);
 10004d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10004d4:	ebfffeca 	bl	1000004 <alt_clk_freq_get_osc1>
 10004d8:	e1a03000 	mov	r3, r0
 10004dc:	ea00003f 	b	10005e0 <alt_clk_freq_get_device+0x214>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_MAIN:
            ret = alt_clk_freq_get_main_pll(&freq);
 10004e0:	e24b3010 	sub	r3, fp, #16
 10004e4:	e1a00003 	mov	r0, r3
 10004e8:	ebfffefd 	bl	10000e4 <alt_clk_freq_get_main_pll>
 10004ec:	e50b000c 	str	r0, [fp, #-12]
            if(ret != ALT_E_SUCCESS)
 10004f0:	e51b300c 	ldr	r3, [fp, #-12]
 10004f4:	e3530000 	cmp	r3, #0
 10004f8:	0a000001 	beq	1000504 <alt_clk_freq_get_device+0x138>
                return ret;
 10004fc:	e51b300c 	ldr	r3, [fp, #-12]
 1000500:	ea000036 	b	10005e0 <alt_clk_freq_get_device+0x214>
            temp = alt_read_word(_main_reg)>>main_shift;
 1000504:	e59b3010 	ldr	r3, [fp, #16]
 1000508:	e5932000 	ldr	r2, [r3]
 100050c:	e59b3014 	ldr	r3, [fp, #20]
 1000510:	e1a03332 	lsr	r3, r2, r3
 1000514:	e50b3008 	str	r3, [fp, #-8]
            *pfreq = freq/(1 + ALT_CLKMGR_MAINPLL_CNTR2CLK_CNT_GET(temp));
 1000518:	e51b2010 	ldr	r2, [fp, #-16]
 100051c:	e51b3008 	ldr	r3, [fp, #-8]
 1000520:	e7ea3053 	ubfx	r3, r3, #0, #11
 1000524:	e2833001 	add	r3, r3, #1
 1000528:	e1a01003 	mov	r1, r3
 100052c:	e1a00002 	mov	r0, r2
 1000530:	eb0012e2 	bl	10050c0 <__udivsi3>
 1000534:	e1a03000 	mov	r3, r0
 1000538:	e1a02003 	mov	r2, r3
 100053c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000540:	e5832000 	str	r2, [r3]
            break;
 1000544:	ea000024 	b	10005dc <alt_clk_freq_get_device+0x210>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_PERI:
            ret = alt_clk_freq_get_peri_pll(&freq);
 1000548:	e24b3010 	sub	r3, fp, #16
 100054c:	e1a00003 	mov	r0, r3
 1000550:	ebffff39 	bl	100023c <alt_clk_freq_get_peri_pll>
 1000554:	e50b000c 	str	r0, [fp, #-12]
            if(ret != ALT_E_SUCCESS)
 1000558:	e51b300c 	ldr	r3, [fp, #-12]
 100055c:	e3530000 	cmp	r3, #0
 1000560:	0a000001 	beq	100056c <alt_clk_freq_get_device+0x1a0>
                return ret;
 1000564:	e51b300c 	ldr	r3, [fp, #-12]
 1000568:	ea00001c 	b	10005e0 <alt_clk_freq_get_device+0x214>
            temp = alt_read_word(_pll_reg)>>pll_shift;
 100056c:	e59b3008 	ldr	r3, [fp, #8]
 1000570:	e5932000 	ldr	r2, [r3]
 1000574:	e59b300c 	ldr	r3, [fp, #12]
 1000578:	e1a03332 	lsr	r3, r2, r3
 100057c:	e50b3008 	str	r3, [fp, #-8]
            *pfreq = freq/(1 + ALT_CLKMGR_PERPLL_CNTR2CLK_CNT_GET(temp));
 1000580:	e51b2010 	ldr	r2, [fp, #-16]
 1000584:	e51b3008 	ldr	r3, [fp, #-8]
 1000588:	e7ea3053 	ubfx	r3, r3, #0, #11
 100058c:	e2833001 	add	r3, r3, #1
 1000590:	e1a01003 	mov	r1, r3
 1000594:	e1a00002 	mov	r0, r2
 1000598:	eb0012c8 	bl	10050c0 <__udivsi3>
 100059c:	e1a03000 	mov	r3, r0
 10005a0:	e1a02003 	mov	r2, r3
 10005a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10005a8:	e5832000 	str	r2, [r3]
            break;
 10005ac:	ea00000a 	b	10005dc <alt_clk_freq_get_device+0x210>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_INTOSC:
            ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(&freq);
 10005b0:	e24b3010 	sub	r3, fp, #16
 10005b4:	e1a00003 	mov	r0, r3
 10005b8:	ebfffe9f 	bl	100003c <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 10005bc:	e50b000c 	str	r0, [fp, #-12]
            break;
 10005c0:	ea000005 	b	10005dc <alt_clk_freq_get_device+0x210>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_FPGA:
            alt_clk_freq_get_f2s_free_clk(&freq);
 10005c4:	e24b3010 	sub	r3, fp, #16
 10005c8:	e1a00003 	mov	r0, r3
 10005cc:	ebfffeaf 	bl	1000090 <alt_clk_freq_get_f2s_free_clk>
            /* This value has to come from quartus */
            break;
 10005d0:	ea000001 	b	10005dc <alt_clk_freq_get_device+0x210>
        default:
           return ALT_E_ERROR;
 10005d4:	e3e03000 	mvn	r3, #0
 10005d8:	ea000000 	b	10005e0 <alt_clk_freq_get_device+0x214>
    }
    return ALT_E_SUCCESS;
 10005dc:	e3a03000 	mov	r3, #0
}
 10005e0:	e1a00003 	mov	r0, r3
 10005e4:	e24bd004 	sub	sp, fp, #4
 10005e8:	e8bd8800 	pop	{fp, pc}

010005ec <alt_clk_freq_get_mpu>:

ALT_STATUS_CODE alt_clk_freq_get_mpu(alt_freq_t *pfreq)
{
 10005ec:	e92d4800 	push	{fp, lr}
 10005f0:	e28db004 	add	fp, sp, #4
 10005f4:	e24dd028 	sub	sp, sp, #40	; 0x28
 10005f8:	e50b0010 	str	r0, [fp, #-16]
    /* Step 1 - check the mainpllgrp.mpuclk->src for source
    // Step 2 - check bypass */

    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_device(pfreq,
 10005fc:	e3a03000 	mov	r3, #0
 1000600:	e58d3010 	str	r3, [sp, #16]
 1000604:	e3043140 	movw	r3, #16704	; 0x4140
 1000608:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100060c:	e58d300c 	str	r3, [sp, #12]
 1000610:	e3a03010 	mov	r3, #16
 1000614:	e58d3008 	str	r3, [sp, #8]
 1000618:	e3043140 	movw	r3, #16704	; 0x4140
 100061c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000620:	e58d3004 	str	r3, [sp, #4]
 1000624:	e3043060 	movw	r3, #16480	; 0x4060
 1000628:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100062c:	e58d3000 	str	r3, [sp]
 1000630:	e3a03001 	mov	r3, #1
 1000634:	e3a02001 	mov	r2, #1
 1000638:	e3a01001 	mov	r1, #1
 100063c:	e51b0010 	ldr	r0, [fp, #-16]
 1000640:	ebffff61 	bl	10003cc <alt_clk_freq_get_device>
 1000644:	e50b0008 	str	r0, [fp, #-8]
        ALT_CLKMGR_MAINPLL_EN_MPUCLKEN_SET_MSK,
        ALT_CLKMGR_MAINPLL_BYPASS_MPU_SET_MSK,
        ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
        ALT_CLKMGR_ALTERA_ADDR, ALT_CLKMGR_NOCCLK_PERICNT_LSB, /* No ALT_CLKMGR_MPUCLK_PERICNT_LSB defined*/
        ALT_CLKMGR_ALTERA_ADDR, 0);
    return ret;
 1000648:	e51b3008 	ldr	r3, [fp, #-8]
}
 100064c:	e1a00003 	mov	r0, r3
 1000650:	e24bd004 	sub	sp, fp, #4
 1000654:	e8bd8800 	pop	{fp, pc}

01000658 <alt_clk_freq_get_mpu_periph>:

ALT_STATUS_CODE alt_clk_freq_get_mpu_periph(alt_freq_t *pfreq)
{
 1000658:	e92d4800 	push	{fp, lr}
 100065c:	e28db004 	add	fp, sp, #4
 1000660:	e24dd010 	sub	sp, sp, #16
 1000664:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_mpu(pfreq);
 1000668:	e51b0010 	ldr	r0, [fp, #-16]
 100066c:	ebffffde 	bl	10005ec <alt_clk_freq_get_mpu>
 1000670:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=4;
 1000674:	e51b3010 	ldr	r3, [fp, #-16]
 1000678:	e5933000 	ldr	r3, [r3]
 100067c:	e1a02123 	lsr	r2, r3, #2
 1000680:	e51b3010 	ldr	r3, [fp, #-16]
 1000684:	e5832000 	str	r2, [r3]
    return ret;
 1000688:	e51b3008 	ldr	r3, [fp, #-8]
}
 100068c:	e1a00003 	mov	r0, r3
 1000690:	e24bd004 	sub	sp, fp, #4
 1000694:	e8bd8800 	pop	{fp, pc}

01000698 <alt_clk_freq_get_mpu_l2ram>:

ALT_STATUS_CODE alt_clk_freq_get_mpu_l2ram(alt_freq_t *pfreq)
{
 1000698:	e92d4800 	push	{fp, lr}
 100069c:	e28db004 	add	fp, sp, #4
 10006a0:	e24dd010 	sub	sp, sp, #16
 10006a4:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_mpu(pfreq);
 10006a8:	e51b0010 	ldr	r0, [fp, #-16]
 10006ac:	ebffffce 	bl	10005ec <alt_clk_freq_get_mpu>
 10006b0:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=2;
 10006b4:	e51b3010 	ldr	r3, [fp, #-16]
 10006b8:	e5933000 	ldr	r3, [r3]
 10006bc:	e1a020a3 	lsr	r2, r3, #1
 10006c0:	e51b3010 	ldr	r3, [fp, #-16]
 10006c4:	e5832000 	str	r2, [r3]
    return ret;
 10006c8:	e51b3008 	ldr	r3, [fp, #-8]
}
 10006cc:	e1a00003 	mov	r0, r3
 10006d0:	e24bd004 	sub	sp, fp, #4
 10006d4:	e8bd8800 	pop	{fp, pc}

010006d8 <alt_clk_freq_get_l3_main_free>:

/* Same as noc_clock */
ALT_STATUS_CODE alt_clk_freq_get_l3_main_free(alt_freq_t *pfreq)
{
 10006d8:	e92d4800 	push	{fp, lr}
 10006dc:	e28db004 	add	fp, sp, #4
 10006e0:	e24dd028 	sub	sp, sp, #40	; 0x28
 10006e4:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_device(pfreq,
 10006e8:	e3a03000 	mov	r3, #0
 10006ec:	e58d3010 	str	r3, [sp, #16]
 10006f0:	e3043144 	movw	r3, #16708	; 0x4144
 10006f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10006f8:	e58d300c 	str	r3, [sp, #12]
 10006fc:	e3a03010 	mov	r3, #16
 1000700:	e58d3008 	str	r3, [sp, #8]
 1000704:	e3043144 	movw	r3, #16708	; 0x4144
 1000708:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100070c:	e58d3004 	str	r3, [sp, #4]
 1000710:	e3043064 	movw	r3, #16484	; 0x4064
 1000714:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000718:	e58d3000 	str	r3, [sp]
 100071c:	e3a03002 	mov	r3, #2
 1000720:	e3a02000 	mov	r2, #0
 1000724:	e3a01001 	mov	r1, #1
 1000728:	e51b0010 	ldr	r0, [fp, #-16]
 100072c:	ebffff26 	bl	10003cc <alt_clk_freq_get_device>
 1000730:	e50b0008 	str	r0, [fp, #-8]
        ALT_CLKMGR_MAINPLL_BYPASS_NOC_SET_MSK,
        ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
        ALT_CLKMGR_NOCCLK_ADDR, ALT_CLKMGR_NOCCLK_PERICNT_LSB,
        ALT_CLKMGR_NOCCLK_ADDR, 0
        );
    return ret;
 1000734:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000738:	e1a00003 	mov	r0, r3
 100073c:	e24bd004 	sub	sp, fp, #4
 1000740:	e8bd8800 	pop	{fp, pc}

01000744 <alt_clk_freq_get_l4_sys_free>:

ALT_STATUS_CODE alt_clk_freq_get_l4_sys_free(alt_freq_t *pfreq)
{
 1000744:	e92d4800 	push	{fp, lr}
 1000748:	e28db004 	add	fp, sp, #4
 100074c:	e24dd010 	sub	sp, sp, #16
 1000750:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 1000754:	e51b0010 	ldr	r0, [fp, #-16]
 1000758:	ebffffde 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 100075c:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=4;
 1000760:	e51b3010 	ldr	r3, [fp, #-16]
 1000764:	e5933000 	ldr	r3, [r3]
 1000768:	e1a02123 	lsr	r2, r3, #2
 100076c:	e51b3010 	ldr	r3, [fp, #-16]
 1000770:	e5832000 	str	r2, [r3]
    return ret;
 1000774:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000778:	e1a00003 	mov	r0, r3
 100077c:	e24bd004 	sub	sp, fp, #4
 1000780:	e8bd8800 	pop	{fp, pc}

01000784 <alt_clk_freq_get_l4_main>:

ALT_STATUS_CODE alt_clk_freq_get_l4_main(alt_freq_t *pfreq)
{
 1000784:	e92d4800 	push	{fp, lr}
 1000788:	e28db004 	add	fp, sp, #4
 100078c:	e24dd010 	sub	sp, sp, #16
 1000790:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE 
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 1000794:	e51b0010 	ldr	r0, [fp, #-16]
 1000798:	ebffffce 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 100079c:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_L4MAINCLK_GET(
 10007a0:	e30430a8 	movw	r3, #16552	; 0x40a8
 10007a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10007a8:	e5933000 	ldr	r3, [r3]
 10007ac:	e2033003 	and	r3, r3, #3
 10007b0:	e3a02001 	mov	r2, #1
 10007b4:	e1a02312 	lsl	r2, r2, r3
 10007b8:	e51b3010 	ldr	r3, [fp, #-16]
 10007bc:	e5933000 	ldr	r3, [r3]
 10007c0:	e1a01002 	mov	r1, r2
 10007c4:	e1a00003 	mov	r0, r3
 10007c8:	eb00123c 	bl	10050c0 <__udivsi3>
 10007cc:	e1a03000 	mov	r3, r0
 10007d0:	e1a02003 	mov	r2, r3
 10007d4:	e51b3010 	ldr	r3, [fp, #-16]
 10007d8:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 10007dc:	e51b3008 	ldr	r3, [fp, #-8]
}
 10007e0:	e1a00003 	mov	r0, r3
 10007e4:	e24bd004 	sub	sp, fp, #4
 10007e8:	e8bd8800 	pop	{fp, pc}

010007ec <alt_clk_freq_get_l4_mp>:

ALT_STATUS_CODE alt_clk_freq_get_l4_mp(alt_freq_t *pfreq)
{
 10007ec:	e92d4800 	push	{fp, lr}
 10007f0:	e28db004 	add	fp, sp, #4
 10007f4:	e24dd010 	sub	sp, sp, #16
 10007f8:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 10007fc:	e51b0010 	ldr	r0, [fp, #-16]
 1000800:	ebffffb4 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 1000804:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_L4MPCLK_GET(
 1000808:	e30430a8 	movw	r3, #16552	; 0x40a8
 100080c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000810:	e5933000 	ldr	r3, [r3]
 1000814:	e1a03423 	lsr	r3, r3, #8
 1000818:	e2033003 	and	r3, r3, #3
 100081c:	e3a02001 	mov	r2, #1
 1000820:	e1a02312 	lsl	r2, r2, r3
 1000824:	e51b3010 	ldr	r3, [fp, #-16]
 1000828:	e5933000 	ldr	r3, [r3]
 100082c:	e1a01002 	mov	r1, r2
 1000830:	e1a00003 	mov	r0, r3
 1000834:	eb001221 	bl	10050c0 <__udivsi3>
 1000838:	e1a03000 	mov	r3, r0
 100083c:	e1a02003 	mov	r2, r3
 1000840:	e51b3010 	ldr	r3, [fp, #-16]
 1000844:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 1000848:	e51b3008 	ldr	r3, [fp, #-8]
}
 100084c:	e1a00003 	mov	r0, r3
 1000850:	e24bd004 	sub	sp, fp, #4
 1000854:	e8bd8800 	pop	{fp, pc}

01000858 <alt_clk_freq_get_l4_sp>:

ALT_STATUS_CODE alt_clk_freq_get_l4_sp(alt_freq_t *pfreq)
{
 1000858:	e92d4800 	push	{fp, lr}
 100085c:	e28db004 	add	fp, sp, #4
 1000860:	e24dd010 	sub	sp, sp, #16
 1000864:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 1000868:	e51b0010 	ldr	r0, [fp, #-16]
 100086c:	ebffff99 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 1000870:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_L4SPCLK_GET(
 1000874:	e30430a8 	movw	r3, #16552	; 0x40a8
 1000878:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100087c:	e5933000 	ldr	r3, [r3]
 1000880:	e1a03823 	lsr	r3, r3, #16
 1000884:	e2033003 	and	r3, r3, #3
 1000888:	e3a02001 	mov	r2, #1
 100088c:	e1a02312 	lsl	r2, r2, r3
 1000890:	e51b3010 	ldr	r3, [fp, #-16]
 1000894:	e5933000 	ldr	r3, [r3]
 1000898:	e1a01002 	mov	r1, r2
 100089c:	e1a00003 	mov	r0, r3
 10008a0:	eb001206 	bl	10050c0 <__udivsi3>
 10008a4:	e1a03000 	mov	r3, r0
 10008a8:	e1a02003 	mov	r2, r3
 10008ac:	e51b3010 	ldr	r3, [fp, #-16]
 10008b0:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 10008b4:	e51b3008 	ldr	r3, [fp, #-8]
}
 10008b8:	e1a00003 	mov	r0, r3
 10008bc:	e24bd004 	sub	sp, fp, #4
 10008c0:	e8bd8800 	pop	{fp, pc}

010008c4 <alt_clk_freq_get_cs_timer>:

ALT_STATUS_CODE alt_clk_freq_get_cs_timer(alt_freq_t *pfreq)
{
 10008c4:	e92d4800 	push	{fp, lr}
 10008c8:	e28db004 	add	fp, sp, #4
 10008cc:	e24dd010 	sub	sp, sp, #16
 10008d0:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 10008d4:	e51b0010 	ldr	r0, [fp, #-16]
 10008d8:	ebffff7e 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 10008dc:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSATCLK_GET(
 10008e0:	e30430a8 	movw	r3, #16552	; 0x40a8
 10008e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10008e8:	e5933000 	ldr	r3, [r3]
 10008ec:	e1a03c23 	lsr	r3, r3, #24
 10008f0:	e2033003 	and	r3, r3, #3
 10008f4:	e3a02001 	mov	r2, #1
 10008f8:	e1a02312 	lsl	r2, r2, r3
 10008fc:	e51b3010 	ldr	r3, [fp, #-16]
 1000900:	e5933000 	ldr	r3, [r3]
 1000904:	e1a01002 	mov	r1, r2
 1000908:	e1a00003 	mov	r0, r3
 100090c:	eb0011eb 	bl	10050c0 <__udivsi3>
 1000910:	e1a03000 	mov	r3, r0
 1000914:	e1a02003 	mov	r2, r3
 1000918:	e51b3010 	ldr	r3, [fp, #-16]
 100091c:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 1000920:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000924:	e1a00003 	mov	r0, r3
 1000928:	e24bd004 	sub	sp, fp, #4
 100092c:	e8bd8800 	pop	{fp, pc}

01000930 <alt_clk_freq_get_cs_at>:

ALT_STATUS_CODE alt_clk_freq_get_cs_at(alt_freq_t *pfreq)
{
 1000930:	e92d4800 	push	{fp, lr}
 1000934:	e28db004 	add	fp, sp, #4
 1000938:	e24dd010 	sub	sp, sp, #16
 100093c:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 1000940:	e51b0010 	ldr	r0, [fp, #-16]
 1000944:	ebffff63 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 1000948:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSATCLK_GET(
 100094c:	e30430a8 	movw	r3, #16552	; 0x40a8
 1000950:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000954:	e5933000 	ldr	r3, [r3]
 1000958:	e1a03c23 	lsr	r3, r3, #24
 100095c:	e2033003 	and	r3, r3, #3
 1000960:	e3a02001 	mov	r2, #1
 1000964:	e1a02312 	lsl	r2, r2, r3
 1000968:	e51b3010 	ldr	r3, [fp, #-16]
 100096c:	e5933000 	ldr	r3, [r3]
 1000970:	e1a01002 	mov	r1, r2
 1000974:	e1a00003 	mov	r0, r3
 1000978:	eb0011d0 	bl	10050c0 <__udivsi3>
 100097c:	e1a03000 	mov	r3, r0
 1000980:	e1a02003 	mov	r2, r3
 1000984:	e51b3010 	ldr	r3, [fp, #-16]
 1000988:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 100098c:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000990:	e1a00003 	mov	r0, r3
 1000994:	e24bd004 	sub	sp, fp, #4
 1000998:	e8bd8800 	pop	{fp, pc}

0100099c <alt_clk_freq_get_cs_pdbg>:

ALT_STATUS_CODE alt_clk_freq_get_cs_pdbg(alt_freq_t *pfreq)
{
 100099c:	e92d4800 	push	{fp, lr}
 10009a0:	e28db004 	add	fp, sp, #4
 10009a4:	e24dd010 	sub	sp, sp, #16
 10009a8:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_cs_timer(pfreq);
 10009ac:	e51b0010 	ldr	r0, [fp, #-16]
 10009b0:	ebffffc3 	bl	10008c4 <alt_clk_freq_get_cs_timer>
 10009b4:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSPDBGCLK_GET(
 10009b8:	e30430a8 	movw	r3, #16552	; 0x40a8
 10009bc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10009c0:	e5933000 	ldr	r3, [r3]
 10009c4:	e1a03e23 	lsr	r3, r3, #28
 10009c8:	e2033001 	and	r3, r3, #1
 10009cc:	e3a02001 	mov	r2, #1
 10009d0:	e1a02312 	lsl	r2, r2, r3
 10009d4:	e51b3010 	ldr	r3, [fp, #-16]
 10009d8:	e5933000 	ldr	r3, [r3]
 10009dc:	e1a01002 	mov	r1, r2
 10009e0:	e1a00003 	mov	r0, r3
 10009e4:	eb0011b5 	bl	10050c0 <__udivsi3>
 10009e8:	e1a03000 	mov	r3, r0
 10009ec:	e1a02003 	mov	r2, r3
 10009f0:	e51b3010 	ldr	r3, [fp, #-16]
 10009f4:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 10009f8:	e51b3008 	ldr	r3, [fp, #-8]
}
 10009fc:	e1a00003 	mov	r0, r3
 1000a00:	e24bd004 	sub	sp, fp, #4
 1000a04:	e8bd8800 	pop	{fp, pc}

01000a08 <alt_clk_freq_get_cs_trace>:

ALT_STATUS_CODE alt_clk_freq_get_cs_trace(alt_freq_t *pfreq)
{
 1000a08:	e92d4800 	push	{fp, lr}
 1000a0c:	e28db004 	add	fp, sp, #4
 1000a10:	e24dd010 	sub	sp, sp, #16
 1000a14:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_cs_timer(pfreq);
 1000a18:	e51b0010 	ldr	r0, [fp, #-16]
 1000a1c:	ebffffa8 	bl	10008c4 <alt_clk_freq_get_cs_timer>
 1000a20:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSTRACECLK_GET(
 1000a24:	e30430a8 	movw	r3, #16552	; 0x40a8
 1000a28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000a2c:	e5933000 	ldr	r3, [r3]
 1000a30:	e1a03d23 	lsr	r3, r3, #26
 1000a34:	e2033003 	and	r3, r3, #3
 1000a38:	e3a02001 	mov	r2, #1
 1000a3c:	e1a02312 	lsl	r2, r2, r3
 1000a40:	e51b3010 	ldr	r3, [fp, #-16]
 1000a44:	e5933000 	ldr	r3, [r3]
 1000a48:	e1a01002 	mov	r1, r2
 1000a4c:	e1a00003 	mov	r0, r3
 1000a50:	eb00119a 	bl	10050c0 <__udivsi3>
 1000a54:	e1a03000 	mov	r3, r0
 1000a58:	e1a02003 	mov	r2, r3
 1000a5c:	e51b3010 	ldr	r3, [fp, #-16]
 1000a60:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 1000a64:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000a68:	e1a00003 	mov	r0, r3
 1000a6c:	e24bd004 	sub	sp, fp, #4
 1000a70:	e8bd8800 	pop	{fp, pc}

01000a74 <alt_clk_freq_get_emac01>:
********************************************************************/

static ALT_STATUS_CODE alt_clk_freq_get_emac01(alt_freq_t *pfreq,
                                      uint32_t enable_mask,
                                      uint32_t select_mask)
{
 1000a74:	e92d4800 	push	{fp, lr}
 1000a78:	e28db004 	add	fp, sp, #4
 1000a7c:	e24dd028 	sub	sp, sp, #40	; 0x28
 1000a80:	e50b0008 	str	r0, [fp, #-8]
 1000a84:	e50b100c 	str	r1, [fp, #-12]
 1000a88:	e50b2010 	str	r2, [fp, #-16]
    /* Step 1 - Check emac0_en */

    if(alt_read_word(ALT_CLKMGR_PERPLL_EMACCTL_ADDR) & select_mask)
 1000a8c:	e3043128 	movw	r3, #16680	; 0x4128
 1000a90:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000a94:	e5932000 	ldr	r2, [r3]
 1000a98:	e51b3010 	ldr	r3, [fp, #-16]
 1000a9c:	e0033002 	and	r3, r3, r2
 1000aa0:	e3530000 	cmp	r3, #0
 1000aa4:	0a000013 	beq	1000af8 <alt_clk_freq_get_emac01+0x84>
    { /* EmacB */
        return alt_clk_freq_get_device(pfreq,
 1000aa8:	e3a03000 	mov	r3, #0
 1000aac:	e58d3010 	str	r3, [sp, #16]
 1000ab0:	e304306c 	movw	r3, #16492	; 0x406c
 1000ab4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000ab8:	e58d300c 	str	r3, [sp, #12]
 1000abc:	e3a03000 	mov	r3, #0
 1000ac0:	e58d3008 	str	r3, [sp, #8]
 1000ac4:	e30430ec 	movw	r3, #16620	; 0x40ec
 1000ac8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000acc:	e58d3004 	str	r3, [sp, #4]
 1000ad0:	e30430ec 	movw	r3, #16620	; 0x40ec
 1000ad4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000ad8:	e58d3000 	str	r3, [sp]
 1000adc:	e3a03002 	mov	r3, #2
 1000ae0:	e51b200c 	ldr	r2, [fp, #-12]
 1000ae4:	e3a01000 	mov	r1, #0
 1000ae8:	e51b0008 	ldr	r0, [fp, #-8]
 1000aec:	ebfffe36 	bl	10003cc <alt_clk_freq_get_device>
 1000af0:	e1a03000 	mov	r3, r0
 1000af4:	ea000012 	b	1000b44 <alt_clk_freq_get_emac01+0xd0>
                   ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR, 0
                   );
    }
    else
    { /* EmacA */
        return alt_clk_freq_get_device(pfreq,
 1000af8:	e3a03000 	mov	r3, #0
 1000afc:	e58d3010 	str	r3, [sp, #16]
 1000b00:	e3043068 	movw	r3, #16488	; 0x4068
 1000b04:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000b08:	e58d300c 	str	r3, [sp, #12]
 1000b0c:	e3a03000 	mov	r3, #0
 1000b10:	e58d3008 	str	r3, [sp, #8]
 1000b14:	e30430e8 	movw	r3, #16616	; 0x40e8
 1000b18:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000b1c:	e58d3004 	str	r3, [sp, #4]
 1000b20:	e30430e8 	movw	r3, #16616	; 0x40e8
 1000b24:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000b28:	e58d3000 	str	r3, [sp]
 1000b2c:	e3a03001 	mov	r3, #1
 1000b30:	e51b200c 	ldr	r2, [fp, #-12]
 1000b34:	e3a01000 	mov	r1, #0
 1000b38:	e51b0008 	ldr	r0, [fp, #-8]
 1000b3c:	ebfffe22 	bl	10003cc <alt_clk_freq_get_device>
 1000b40:	e1a03000 	mov	r3, r0
                   ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
                   ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR, 0,
                   ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR, 0
                   );
    }
}
 1000b44:	e1a00003 	mov	r0, r3
 1000b48:	e24bd004 	sub	sp, fp, #4
 1000b4c:	e8bd8800 	pop	{fp, pc}

01000b50 <alt_clk_freq_get_emac0>:


ALT_STATUS_CODE alt_clk_freq_get_emac0(alt_freq_t *pfreq)
{
 1000b50:	e92d4800 	push	{fp, lr}
 1000b54:	e28db004 	add	fp, sp, #4
 1000b58:	e24dd008 	sub	sp, sp, #8
 1000b5c:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_emac01(pfreq,
 1000b60:	e3a02301 	mov	r2, #67108864	; 0x4000000
 1000b64:	e3a01001 	mov	r1, #1
 1000b68:	e51b0008 	ldr	r0, [fp, #-8]
 1000b6c:	ebffffc0 	bl	1000a74 <alt_clk_freq_get_emac01>
 1000b70:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_EN_EMAC0EN_SET_MSK,
        ALT_CLKMGR_PERPLL_EMACCTL_EMAC0SEL_SET_MSK);
}
 1000b74:	e1a00003 	mov	r0, r3
 1000b78:	e24bd004 	sub	sp, fp, #4
 1000b7c:	e8bd8800 	pop	{fp, pc}

01000b80 <alt_clk_freq_get_emac1>:

ALT_STATUS_CODE alt_clk_freq_get_emac1(alt_freq_t *pfreq)
{
 1000b80:	e92d4800 	push	{fp, lr}
 1000b84:	e28db004 	add	fp, sp, #4
 1000b88:	e24dd008 	sub	sp, sp, #8
 1000b8c:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_emac01(pfreq,
 1000b90:	e3a02302 	mov	r2, #134217728	; 0x8000000
 1000b94:	e3a01002 	mov	r1, #2
 1000b98:	e51b0008 	ldr	r0, [fp, #-8]
 1000b9c:	ebffffb4 	bl	1000a74 <alt_clk_freq_get_emac01>
 1000ba0:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_EN_EMAC1EN_SET_MSK,
        ALT_CLKMGR_PERPLL_EMACCTL_EMAC1SEL_SET_MSK);
}
 1000ba4:	e1a00003 	mov	r0, r3
 1000ba8:	e24bd004 	sub	sp, fp, #4
 1000bac:	e8bd8800 	pop	{fp, pc}

01000bb0 <alt_clk_freq_get_emac2>:

ALT_STATUS_CODE alt_clk_freq_get_emac2(alt_freq_t *pfreq)
{
 1000bb0:	e92d4800 	push	{fp, lr}
 1000bb4:	e28db004 	add	fp, sp, #4
 1000bb8:	e24dd008 	sub	sp, sp, #8
 1000bbc:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_emac01(pfreq,
 1000bc0:	e3a02201 	mov	r2, #268435456	; 0x10000000
 1000bc4:	e3a01004 	mov	r1, #4
 1000bc8:	e51b0008 	ldr	r0, [fp, #-8]
 1000bcc:	ebffffa8 	bl	1000a74 <alt_clk_freq_get_emac01>
 1000bd0:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_EN_EMAC2EN_SET_MSK,
        ALT_CLKMGR_PERPLL_EMACCTL_EMAC2SEL_SET_MSK);
}
 1000bd4:	e1a00003 	mov	r0, r3
 1000bd8:	e24bd004 	sub	sp, fp, #4
 1000bdc:	e8bd8800 	pop	{fp, pc}

01000be0 <alt_clk_freq_get_emac_ptp>:

ALT_STATUS_CODE alt_clk_freq_get_emac_ptp(alt_freq_t *pfreq)
{
 1000be0:	e92d4800 	push	{fp, lr}
 1000be4:	e28db004 	add	fp, sp, #4
 1000be8:	e24dd020 	sub	sp, sp, #32
 1000bec:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000bf0:	e3a03000 	mov	r3, #0
 1000bf4:	e58d3010 	str	r3, [sp, #16]
 1000bf8:	e3043070 	movw	r3, #16496	; 0x4070
 1000bfc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c00:	e58d300c 	str	r3, [sp, #12]
 1000c04:	e3a03000 	mov	r3, #0
 1000c08:	e58d3008 	str	r3, [sp, #8]
 1000c0c:	e30430f0 	movw	r3, #16624	; 0x40f0
 1000c10:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c14:	e58d3004 	str	r3, [sp, #4]
 1000c18:	e30430f0 	movw	r3, #16624	; 0x40f0
 1000c1c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c20:	e58d3000 	str	r3, [sp]
 1000c24:	e3a03004 	mov	r3, #4
 1000c28:	e3a02008 	mov	r2, #8
 1000c2c:	e3a01000 	mov	r1, #0
 1000c30:	e51b0008 	ldr	r0, [fp, #-8]
 1000c34:	ebfffde4 	bl	10003cc <alt_clk_freq_get_device>
 1000c38:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_BYPASS_EMACPTP_SET_MSK,
        ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR, 0
        );
}
 1000c3c:	e1a00003 	mov	r0, r3
 1000c40:	e24bd004 	sub	sp, fp, #4
 1000c44:	e8bd8800 	pop	{fp, pc}

01000c48 <alt_clk_freq_get_gpio>:

ALT_STATUS_CODE alt_clk_freq_get_gpio(alt_freq_t *pfreq)
{
 1000c48:	e92d4800 	push	{fp, lr}
 1000c4c:	e28db004 	add	fp, sp, #4
 1000c50:	e24dd028 	sub	sp, sp, #40	; 0x28
 1000c54:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_device(pfreq,
 1000c58:	e3a03000 	mov	r3, #0
 1000c5c:	e58d3010 	str	r3, [sp, #16]
 1000c60:	e3043074 	movw	r3, #16500	; 0x4074
 1000c64:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c68:	e58d300c 	str	r3, [sp, #12]
 1000c6c:	e3a03000 	mov	r3, #0
 1000c70:	e58d3008 	str	r3, [sp, #8]
 1000c74:	e30430f4 	movw	r3, #16628	; 0x40f4
 1000c78:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c7c:	e58d3004 	str	r3, [sp, #4]
 1000c80:	e30430f4 	movw	r3, #16628	; 0x40f4
 1000c84:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c88:	e58d3000 	str	r3, [sp]
 1000c8c:	e3a03008 	mov	r3, #8
 1000c90:	e3a02010 	mov	r2, #16
 1000c94:	e3a01000 	mov	r1, #0
 1000c98:	e51b0010 	ldr	r0, [fp, #-16]
 1000c9c:	ebfffdca 	bl	10003cc <alt_clk_freq_get_device>
 1000ca0:	e50b0008 	str	r0, [fp, #-8]
        ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR, 0
        );
   /* GPIO has an extra external divider */
   *pfreq/=(1 + ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_GET(
 1000ca4:	e304312c 	movw	r3, #16684	; 0x412c
 1000ca8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000cac:	e5933000 	ldr	r3, [r3]
 1000cb0:	e6ff3073 	uxth	r3, r3
 1000cb4:	e2832001 	add	r2, r3, #1
 1000cb8:	e51b3010 	ldr	r3, [fp, #-16]
 1000cbc:	e5933000 	ldr	r3, [r3]
 1000cc0:	e1a01002 	mov	r1, r2
 1000cc4:	e1a00003 	mov	r0, r3
 1000cc8:	eb0010fc 	bl	10050c0 <__udivsi3>
 1000ccc:	e1a03000 	mov	r3, r0
 1000cd0:	e1a02003 	mov	r2, r3
 1000cd4:	e51b3010 	ldr	r3, [fp, #-16]
 1000cd8:	e5832000 	str	r2, [r3]
               alt_read_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR)));
   return ret;
 1000cdc:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000ce0:	e1a00003 	mov	r0, r3
 1000ce4:	e24bd004 	sub	sp, fp, #4
 1000ce8:	e8bd8800 	pop	{fp, pc}

01000cec <alt_clk_freq_get_sdmmc>:

ALT_STATUS_CODE alt_clk_freq_get_sdmmc(alt_freq_t *pfreq)
{
 1000cec:	e92d4800 	push	{fp, lr}
 1000cf0:	e28db004 	add	fp, sp, #4
 1000cf4:	e24dd020 	sub	sp, sp, #32
 1000cf8:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000cfc:	e3a03000 	mov	r3, #0
 1000d00:	e58d3010 	str	r3, [sp, #16]
 1000d04:	e3043078 	movw	r3, #16504	; 0x4078
 1000d08:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d0c:	e58d300c 	str	r3, [sp, #12]
 1000d10:	e3a03000 	mov	r3, #0
 1000d14:	e58d3008 	str	r3, [sp, #8]
 1000d18:	e30430f8 	movw	r3, #16632	; 0x40f8
 1000d1c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d20:	e58d3004 	str	r3, [sp, #4]
 1000d24:	e30430f8 	movw	r3, #16632	; 0x40f8
 1000d28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d2c:	e58d3000 	str	r3, [sp]
 1000d30:	e3a03010 	mov	r3, #16
 1000d34:	e3a02020 	mov	r2, #32
 1000d38:	e3a01000 	mov	r1, #0
 1000d3c:	e51b0008 	ldr	r0, [fp, #-8]
 1000d40:	ebfffda1 	bl	10003cc <alt_clk_freq_get_device>
 1000d44:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_BYPASS_SDMMC_SET_MSK,
        ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR, 0
        );
}
 1000d48:	e1a00003 	mov	r0, r3
 1000d4c:	e24bd004 	sub	sp, fp, #4
 1000d50:	e8bd8800 	pop	{fp, pc}

01000d54 <alt_clk_freq_get_qspi>:

ALT_STATUS_CODE alt_clk_freq_get_qspi(alt_freq_t *pfreq)
{
 1000d54:	e92d4800 	push	{fp, lr}
 1000d58:	e28db004 	add	fp, sp, #4
 1000d5c:	e24dd008 	sub	sp, sp, #8
 1000d60:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_l4_main(pfreq);
 1000d64:	e51b0008 	ldr	r0, [fp, #-8]
 1000d68:	ebfffe85 	bl	1000784 <alt_clk_freq_get_l4_main>
 1000d6c:	e1a03000 	mov	r3, r0
}
 1000d70:	e1a00003 	mov	r0, r3
 1000d74:	e24bd004 	sub	sp, fp, #4
 1000d78:	e8bd8800 	pop	{fp, pc}

01000d7c <alt_clk_freq_get_s2f_user0>:
    *pfreq/=alt_read_word(ALT_SPIM1_BAUDR_ADDR);
    return ret;
}

ALT_STATUS_CODE alt_clk_freq_get_s2f_user0(alt_freq_t *pfreq)
{
 1000d7c:	e92d4800 	push	{fp, lr}
 1000d80:	e28db004 	add	fp, sp, #4
 1000d84:	e24dd020 	sub	sp, sp, #32
 1000d88:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000d8c:	e3a03000 	mov	r3, #0
 1000d90:	e58d3010 	str	r3, [sp, #16]
 1000d94:	e304307c 	movw	r3, #16508	; 0x407c
 1000d98:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d9c:	e58d300c 	str	r3, [sp, #12]
 1000da0:	e3a03000 	mov	r3, #0
 1000da4:	e58d3008 	str	r3, [sp, #8]
 1000da8:	e30430fc 	movw	r3, #16636	; 0x40fc
 1000dac:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000db0:	e58d3004 	str	r3, [sp, #4]
 1000db4:	e304307c 	movw	r3, #16508	; 0x407c
 1000db8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000dbc:	e58d3000 	str	r3, [sp]
 1000dc0:	e3a03004 	mov	r3, #4
 1000dc4:	e3a02040 	mov	r2, #64	; 0x40
 1000dc8:	e3a01001 	mov	r1, #1
 1000dcc:	e51b0008 	ldr	r0, [fp, #-8]
 1000dd0:	ebfffd7d 	bl	10003cc <alt_clk_freq_get_device>
 1000dd4:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_MAINPLL_BYPASS_S2FUSER0_SET_MSK,
        ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR, 0
        );
}
 1000dd8:	e1a00003 	mov	r0, r3
 1000ddc:	e24bd004 	sub	sp, fp, #4
 1000de0:	e8bd8800 	pop	{fp, pc}

01000de4 <alt_clk_freq_get_s2f_user1>:

ALT_STATUS_CODE alt_clk_freq_get_s2f_user1(alt_freq_t *pfreq)
{
 1000de4:	e92d4800 	push	{fp, lr}
 1000de8:	e28db004 	add	fp, sp, #4
 1000dec:	e24dd020 	sub	sp, sp, #32
 1000df0:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000df4:	e3a03000 	mov	r3, #0
 1000df8:	e58d3010 	str	r3, [sp, #16]
 1000dfc:	e3043080 	movw	r3, #16512	; 0x4080
 1000e00:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e04:	e58d300c 	str	r3, [sp, #12]
 1000e08:	e3a03000 	mov	r3, #0
 1000e0c:	e58d3008 	str	r3, [sp, #8]
 1000e10:	e3a03c41 	mov	r3, #16640	; 0x4100
 1000e14:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e18:	e58d3004 	str	r3, [sp, #4]
 1000e1c:	e3a03c41 	mov	r3, #16640	; 0x4100
 1000e20:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e24:	e58d3000 	str	r3, [sp]
 1000e28:	e3a03020 	mov	r3, #32
 1000e2c:	e3a02040 	mov	r2, #64	; 0x40
 1000e30:	e3a01000 	mov	r1, #0
 1000e34:	e51b0008 	ldr	r0, [fp, #-8]
 1000e38:	ebfffd63 	bl	10003cc <alt_clk_freq_get_device>
 1000e3c:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_BYPASS_S2FUSER1_SET_MSK,
        ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR, 0
        );
}
 1000e40:	e1a00003 	mov	r0, r3
 1000e44:	e24bd004 	sub	sp, fp, #4
 1000e48:	e8bd8800 	pop	{fp, pc}

01000e4c <alt_clk_freq_get_hmc>:

ALT_STATUS_CODE alt_clk_freq_get_hmc(alt_freq_t *pfreq)
{
 1000e4c:	e92d4800 	push	{fp, lr}
 1000e50:	e28db004 	add	fp, sp, #4
 1000e54:	e24dd020 	sub	sp, sp, #32
 1000e58:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000e5c:	e3a03000 	mov	r3, #0
 1000e60:	e58d3010 	str	r3, [sp, #16]
 1000e64:	e3043084 	movw	r3, #16516	; 0x4084
 1000e68:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e6c:	e58d300c 	str	r3, [sp, #12]
 1000e70:	e3a03000 	mov	r3, #0
 1000e74:	e58d3008 	str	r3, [sp, #8]
 1000e78:	e3043104 	movw	r3, #16644	; 0x4104
 1000e7c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e80:	e58d3004 	str	r3, [sp, #4]
 1000e84:	e3043084 	movw	r3, #16516	; 0x4084
 1000e88:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e8c:	e58d3000 	str	r3, [sp]
 1000e90:	e3a03008 	mov	r3, #8
 1000e94:	e3a02000 	mov	r2, #0
 1000e98:	e3a01001 	mov	r1, #1
 1000e9c:	e51b0008 	ldr	r0, [fp, #-8]
 1000ea0:	ebfffd49 	bl	10003cc <alt_clk_freq_get_device>
 1000ea4:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_MAINPLL_BYPASS_HMCPLLREF_SET_MSK,
        ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR, 0
        );
}
 1000ea8:	e1a00003 	mov	r0, r3
 1000eac:	e24bd004 	sub	sp, fp, #4
 1000eb0:	e8bd8800 	pop	{fp, pc}

01000eb4 <alt_clk_freq_get>:

/*
// alt_clk_freq_get() returns the output frequency of the specified clock.
*/
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
 1000eb4:	e92d4800 	push	{fp, lr}
 1000eb8:	e28db004 	add	fp, sp, #4
 1000ebc:	e24dd010 	sub	sp, sp, #16
 1000ec0:	e1a03000 	mov	r3, r0
 1000ec4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 1000ec8:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE ret = ALT_E_SUCCESS; /*SALT_E_BAD_ARG;*/
 1000ecc:	e3a03000 	mov	r3, #0
 1000ed0:	e50b3008 	str	r3, [fp, #-8]

    if (freq == NULL)
 1000ed4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1000ed8:	e3530000 	cmp	r3, #0
 1000edc:	1a000001 	bne	1000ee8 <alt_clk_freq_get+0x34>
    {
        return ret;
 1000ee0:	e51b3008 	ldr	r3, [fp, #-8]
 1000ee4:	ea00007e 	b	10010e4 <alt_clk_freq_get+0x230>
    }

    switch (clk)
 1000ee8:	e55b300d 	ldrb	r3, [fp, #-13]
 1000eec:	e353001d 	cmp	r3, #29
 1000ef0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1000ef4:	ea000076 	b	10010d4 <alt_clk_freq_get+0x220>
 1000ef8:	01000f70 	tsteq	r0, r0, ror pc
 1000efc:	01000f80 	smlabbeq	r0, r0, pc, r0	; <UNPREDICTABLE>
 1000f00:	01000f90 			; <UNDEFINED> instruction: 0x01000f90
 1000f04:	01000fa0 	smlatbeq	r0, r0, pc, r0	; <UNPREDICTABLE>
 1000f08:	01000fb0 			; <UNDEFINED> instruction: 0x01000fb0
 1000f0c:	01000fc0 	smlabteq	r0, r0, pc, r0	; <UNPREDICTABLE>
 1000f10:	01000fd0 	ldrdeq	r0, [r0, -r0]
 1000f14:	01000fe0 	smlatteq	r0, r0, pc, r0	; <UNPREDICTABLE>
 1000f18:	01000ff0 	strdeq	r0, [r0, -r0]
 1000f1c:	01000ffc 	strdeq	r0, [r0, -ip]
 1000f20:	01001008 	tsteq	r0, r8
 1000f24:	01001014 	tsteq	r0, r4, lsl r0
 1000f28:	01001020 	tsteq	r0, r0, lsr #32
 1000f2c:	0100102c 	tsteq	r0, ip, lsr #32
 1000f30:	01001038 	tsteq	r0, r8, lsr r0
 1000f34:	01001044 	tsteq	r0, r4, asr #32
 1000f38:	01001050 	qaddeq	r1, r0, r0
 1000f3c:	0100105c 	qaddeq	r1, ip, r0
 1000f40:	01001068 	tsteq	r0, r8, rrx
 1000f44:	01001074 	tsteq	r0, r4, ror r0
 1000f48:	01001080 	smlabbeq	r0, r0, r0, r1
 1000f4c:	0100108c 	smlabbeq	r0, ip, r0, r1
 1000f50:	01001098 	swpeq	r1, r8, [r0]
 1000f54:	010010a4 	smlatbeq	r0, r4, r0, r1
 1000f58:	010010b0 	strheq	r1, [r0, -r0]
 1000f5c:	010010bc 	strheq	r1, [r0, -ip]
 1000f60:	010010d4 	ldrdeq	r1, [r0, -r4]
 1000f64:	010010d4 	ldrdeq	r1, [r0, -r4]
 1000f68:	010010d4 	ldrdeq	r1, [r0, -r4]
 1000f6c:	010010c8 	smlabteq	r0, r8, r0, r1
    {
        /* External Inputs */
    case ALT_CLK_OSC1:
        ret = alt_clk_freq_get_osc1(freq);
 1000f70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000f74:	ebfffc22 	bl	1000004 <alt_clk_freq_get_osc1>
 1000f78:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000f7c:	ea000057 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_F2S_FREE_CLK:
        ret = alt_clk_freq_get_f2s_free_clk(freq);
 1000f80:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000f84:	ebfffc41 	bl	1000090 <alt_clk_freq_get_f2s_free_clk>
 1000f88:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000f8c:	ea000053 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_INTOSC_HS_DIV2:
        ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(freq);
 1000f90:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000f94:	ebfffc28 	bl	100003c <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 1000f98:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000f9c:	ea00004f 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MAIN_PLL:
        ret = alt_clk_freq_get_main_pll(freq);
 1000fa0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000fa4:	ebfffc4e 	bl	10000e4 <alt_clk_freq_get_main_pll>
 1000fa8:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000fac:	ea00004b 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_PERIPHERAL_PLL:
        ret = alt_clk_freq_get_peri_pll(freq);
 1000fb0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000fb4:	ebfffca0 	bl	100023c <alt_clk_freq_get_peri_pll>
 1000fb8:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000fbc:	ea000047 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MPU:
        ret = alt_clk_freq_get_mpu(freq);
 1000fc0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000fc4:	ebfffd88 	bl	10005ec <alt_clk_freq_get_mpu>
 1000fc8:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000fcc:	ea000043 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MPU_PERIPH:
        ret = alt_clk_freq_get_mpu_periph(freq);
 1000fd0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000fd4:	ebfffd9f 	bl	1000658 <alt_clk_freq_get_mpu_periph>
 1000fd8:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000fdc:	ea00003f 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MPU_L2_RAM:
        ret = alt_clk_freq_get_mpu_l2ram(freq);
 1000fe0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000fe4:	ebfffdab 	bl	1000698 <alt_clk_freq_get_mpu_l2ram>
 1000fe8:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000fec:	ea00003b 	b	10010e0 <alt_clk_freq_get+0x22c>

    case ALT_CLK_L3_MAIN:
        alt_clk_freq_get_l3_main_free(freq);
 1000ff0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000ff4:	ebfffdb7 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
        break;
 1000ff8:	ea000038 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_SYS_FREE:
        alt_clk_freq_get_l4_sys_free(freq);
 1000ffc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001000:	ebfffdcf 	bl	1000744 <alt_clk_freq_get_l4_sys_free>
        break;
 1001004:	ea000035 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_MAIN:
        alt_clk_freq_get_l4_main(freq);
 1001008:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100100c:	ebfffddc 	bl	1000784 <alt_clk_freq_get_l4_main>
        break;
 1001010:	ea000032 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_MP:
        alt_clk_freq_get_l4_mp(freq);
 1001014:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001018:	ebfffdf3 	bl	10007ec <alt_clk_freq_get_l4_mp>
        break;
 100101c:	ea00002f 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_SP:
        alt_clk_freq_get_l4_sp(freq);
 1001020:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001024:	ebfffe0b 	bl	1000858 <alt_clk_freq_get_l4_sp>
        break;
 1001028:	ea00002c 	b	10010e0 <alt_clk_freq_get+0x22c>

    case ALT_CLK_CS_TIMER:
        alt_clk_freq_get_cs_timer(freq);
 100102c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001030:	ebfffe23 	bl	10008c4 <alt_clk_freq_get_cs_timer>
        break;
 1001034:	ea000029 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_CS_AT:
        alt_clk_freq_get_cs_at(freq);
 1001038:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100103c:	ebfffe3b 	bl	1000930 <alt_clk_freq_get_cs_at>
        break;
 1001040:	ea000026 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_CS_PDBG:
        alt_clk_freq_get_cs_pdbg(freq);
 1001044:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001048:	ebfffe53 	bl	100099c <alt_clk_freq_get_cs_pdbg>
        break;
 100104c:	ea000023 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_CS_TRACE:
        alt_clk_freq_get_cs_trace(freq);
 1001050:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001054:	ebfffe6b 	bl	1000a08 <alt_clk_freq_get_cs_trace>
        break;
 1001058:	ea000020 	b	10010e0 <alt_clk_freq_get+0x22c>

    case ALT_CLK_S2F_USER0:
        alt_clk_freq_get_s2f_user0(freq);
 100105c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001060:	ebffff45 	bl	1000d7c <alt_clk_freq_get_s2f_user0>
        break;
 1001064:	ea00001d 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_S2F_USER1:
        alt_clk_freq_get_s2f_user1(freq);
 1001068:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100106c:	ebffff5c 	bl	1000de4 <alt_clk_freq_get_s2f_user1>
        break;
 1001070:	ea00001a 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_HMC_PLL_REF:
        alt_clk_freq_get_hmc(freq);
 1001074:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001078:	ebffff73 	bl	1000e4c <alt_clk_freq_get_hmc>
        break;
 100107c:	ea000017 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC0:
        alt_clk_freq_get_emac0(freq);
 1001080:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001084:	ebfffeb1 	bl	1000b50 <alt_clk_freq_get_emac0>
        break;
 1001088:	ea000014 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC1:
        alt_clk_freq_get_emac1(freq);
 100108c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001090:	ebfffeba 	bl	1000b80 <alt_clk_freq_get_emac1>
        break;
 1001094:	ea000011 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC2:
        alt_clk_freq_get_emac2(freq);
 1001098:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100109c:	ebfffec3 	bl	1000bb0 <alt_clk_freq_get_emac2>
        break;
 10010a0:	ea00000e 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC_PTP:
        alt_clk_freq_get_emac_ptp(freq);
 10010a4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010a8:	ebfffecc 	bl	1000be0 <alt_clk_freq_get_emac_ptp>
        break;
 10010ac:	ea00000b 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_GPIO:
        alt_clk_freq_get_gpio(freq);
 10010b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010b4:	ebfffee3 	bl	1000c48 <alt_clk_freq_get_gpio>
        break;
 10010b8:	ea000008 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_SDMMC:
        alt_clk_freq_get_sdmmc(freq);
 10010bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010c0:	ebffff09 	bl	1000cec <alt_clk_freq_get_sdmmc>
        break;
 10010c4:	ea000005 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_QSPI:
        alt_clk_freq_get_qspi(freq);
 10010c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010cc:	ebffff20 	bl	1000d54 <alt_clk_freq_get_qspi>
        break;
 10010d0:	ea000002 	b	10010e0 <alt_clk_freq_get+0x22c>
    default:
        ret = ALT_E_BAD_ARG;
 10010d4:	e3e03008 	mvn	r3, #8
 10010d8:	e50b3008 	str	r3, [fp, #-8]
        break;
 10010dc:	e320f000 	nop	{0}

    }   /* end of switch-case construct */

    return ret;
 10010e0:	e51b3008 	ldr	r3, [fp, #-8]
}
 10010e4:	e1a00003 	mov	r0, r3
 10010e8:	e24bd004 	sub	sp, fp, #4
 10010ec:	e8bd8800 	pop	{fp, pc}

010010f0 <alt_clk_is_enabled_helper>:
        return ALT_E_BAD_ARG;
    }   /* end of switch-case construct */
}

static __inline ALT_STATUS_CODE alt_clk_is_enabled_helper(void *reg, uint32_t mask)
{
 10010f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10010f4:	e28db000 	add	fp, sp, #0
 10010f8:	e24dd00c 	sub	sp, sp, #12
 10010fc:	e50b0008 	str	r0, [fp, #-8]
 1001100:	e50b100c 	str	r1, [fp, #-12]
  if(mask & alt_read_word( reg ))
 1001104:	e51b3008 	ldr	r3, [fp, #-8]
 1001108:	e5932000 	ldr	r2, [r3]
 100110c:	e51b300c 	ldr	r3, [fp, #-12]
 1001110:	e0033002 	and	r3, r3, r2
 1001114:	e3530000 	cmp	r3, #0
 1001118:	0a000001 	beq	1001124 <alt_clk_is_enabled_helper+0x34>
      return ALT_E_TRUE;
 100111c:	e3a03001 	mov	r3, #1
 1001120:	ea000000 	b	1001128 <alt_clk_is_enabled_helper+0x38>
  else
      return ALT_E_FALSE;
 1001124:	e3a03000 	mov	r3, #0
}
 1001128:	e1a00003 	mov	r0, r3
 100112c:	e28bd000 	add	sp, fp, #0
 1001130:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001134:	e12fff1e 	bx	lr

01001138 <alt_clk_is_enabled>:

ALT_STATUS_CODE alt_clk_is_enabled(ALT_CLK_t clk)
{
 1001138:	e92d4800 	push	{fp, lr}
 100113c:	e28db004 	add	fp, sp, #4
 1001140:	e24dd008 	sub	sp, sp, #8
 1001144:	e1a03000 	mov	r3, r0
 1001148:	e54b3005 	strb	r3, [fp, #-5]
    switch (clk)
 100114c:	e55b3005 	ldrb	r3, [fp, #-5]
 1001150:	e2433005 	sub	r3, r3, #5
 1001154:	e3530018 	cmp	r3, #24
 1001158:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 100115c:	ea00008a 	b	100138c <alt_clk_is_enabled+0x254>
 1001160:	010011c4 	smlabteq	r0, r4, r1, r1
 1001164:	0100138c 	smlabbeq	r0, ip, r3, r1
 1001168:	0100138c 	smlabbeq	r0, ip, r3, r1
 100116c:	0100138c 	smlabbeq	r0, ip, r3, r1
 1001170:	0100138c 	smlabbeq	r0, ip, r3, r1
 1001174:	010011dc 	ldrdeq	r1, [r0, -ip]
 1001178:	010011f4 	strdeq	r1, [r0, -r4]
 100117c:	0100120c 	tsteq	r0, ip, lsl #4
 1001180:	01001224 	tsteq	r0, r4, lsr #4
 1001184:	0100123c 	tsteq	r0, ip, lsr r2
 1001188:	0100138c 	smlabbeq	r0, ip, r3, r1
 100118c:	0100138c 	smlabbeq	r0, ip, r3, r1
 1001190:	01001254 	tsteq	r0, r4, asr r2
 1001194:	0100126c 	tsteq	r0, ip, ror #4
 1001198:	01001284 	smlabbeq	r0, r4, r2, r1
 100119c:	0100129c 			; <UNDEFINED> instruction: 0x0100129c
 10011a0:	010012b4 			; <UNDEFINED> instruction: 0x010012b4
 10011a4:	010012cc 	smlabteq	r0, ip, r2, r1
 10011a8:	010012e4 	smlatteq	r0, r4, r2, r1
 10011ac:	010012fc 	strdeq	r1, [r0, -ip]
 10011b0:	01001314 	tsteq	r0, r4, lsl r3
 10011b4:	0100132c 	tsteq	r0, ip, lsr #6
 10011b8:	01001344 	tsteq	r0, r4, asr #6
 10011bc:	0100135c 	tsteq	r0, ip, asr r3
 10011c0:	01001374 	tsteq	r0, r4, ror r3
    {
        /* External Inputs */
    case ALT_CLK_MPU:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_MPUCLKEN_SET_MSK);
 10011c4:	e3a01001 	mov	r1, #1
 10011c8:	e3040048 	movw	r0, #16456	; 0x4048
 10011cc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10011d0:	ebffffc6 	bl	10010f0 <alt_clk_is_enabled_helper>
 10011d4:	e1a03000 	mov	r3, r0
 10011d8:	ea00006c 	b	1001390 <alt_clk_is_enabled+0x258>

    case ALT_CLK_L4_MAIN:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLKEN_SET_MSK);
 10011dc:	e3a01002 	mov	r1, #2
 10011e0:	e3040048 	movw	r0, #16456	; 0x4048
 10011e4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10011e8:	ebffffc0 	bl	10010f0 <alt_clk_is_enabled_helper>
 10011ec:	e1a03000 	mov	r3, r0
 10011f0:	ea000066 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_L4_MP:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLKEN_SET_MSK);
 10011f4:	e3a01004 	mov	r1, #4
 10011f8:	e3040048 	movw	r0, #16456	; 0x4048
 10011fc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001200:	ebffffba 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001204:	e1a03000 	mov	r3, r0
 1001208:	ea000060 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_L4_SP:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLKEN_SET_MSK);
 100120c:	e3a01008 	mov	r1, #8
 1001210:	e3040048 	movw	r0, #16456	; 0x4048
 1001214:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001218:	ebffffb4 	bl	10010f0 <alt_clk_is_enabled_helper>
 100121c:	e1a03000 	mov	r3, r0
 1001220:	ea00005a 	b	1001390 <alt_clk_is_enabled+0x258>

    case ALT_CLK_CS_TIMER:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CSTMRCLKEN_SET_MSK);
 1001224:	e3a01020 	mov	r1, #32
 1001228:	e3040048 	movw	r0, #16456	; 0x4048
 100122c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001230:	ebffffae 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001234:	e1a03000 	mov	r3, r0
 1001238:	ea000054 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_CS_AT:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CSCLKEN_SET_MSK);
 100123c:	e3a01010 	mov	r1, #16
 1001240:	e3040048 	movw	r0, #16456	; 0x4048
 1001244:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001248:	ebffffa8 	bl	10010f0 <alt_clk_is_enabled_helper>
 100124c:	e1a03000 	mov	r3, r0
 1001250:	ea00004e 	b	1001390 <alt_clk_is_enabled+0x258>

    case ALT_CLK_S2F_USER0:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLKEN_SET_MSK);
 1001254:	e3a01040 	mov	r1, #64	; 0x40
 1001258:	e3040048 	movw	r0, #16456	; 0x4048
 100125c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001260:	ebffffa2 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001264:	e1a03000 	mov	r3, r0
 1001268:	ea000048 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_S2F_USER1:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLKEN_SET_MSK);
 100126c:	e3a01040 	mov	r1, #64	; 0x40
 1001270:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001274:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001278:	ebffff9c 	bl	10010f0 <alt_clk_is_enabled_helper>
 100127c:	e1a03000 	mov	r3, r0
 1001280:	ea000042 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_HMC_PLL_REF:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_HMCPLLREFCLKEN_SET_MSK);
 1001284:	e3a01080 	mov	r1, #128	; 0x80
 1001288:	e3040048 	movw	r0, #16456	; 0x4048
 100128c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001290:	ebffff96 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001294:	e1a03000 	mov	r3, r0
 1001298:	ea00003c 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC0:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0EN_SET_MSK);
 100129c:	e3a01001 	mov	r1, #1
 10012a0:	e30400c8 	movw	r0, #16584	; 0x40c8
 10012a4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012a8:	ebffff90 	bl	10010f0 <alt_clk_is_enabled_helper>
 10012ac:	e1a03000 	mov	r3, r0
 10012b0:	ea000036 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC1:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1EN_SET_MSK);
 10012b4:	e3a01002 	mov	r1, #2
 10012b8:	e30400c8 	movw	r0, #16584	; 0x40c8
 10012bc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012c0:	ebffff8a 	bl	10010f0 <alt_clk_is_enabled_helper>
 10012c4:	e1a03000 	mov	r3, r0
 10012c8:	ea000030 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC2:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC2EN_SET_MSK);
 10012cc:	e3a01004 	mov	r1, #4
 10012d0:	e30400c8 	movw	r0, #16584	; 0x40c8
 10012d4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012d8:	ebffff84 	bl	10010f0 <alt_clk_is_enabled_helper>
 10012dc:	e1a03000 	mov	r3, r0
 10012e0:	ea00002a 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC_PTP:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMACPTPEN_SET_MSK);
 10012e4:	e3a01008 	mov	r1, #8
 10012e8:	e30400c8 	movw	r0, #16584	; 0x40c8
 10012ec:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012f0:	ebffff7e 	bl	10010f0 <alt_clk_is_enabled_helper>
 10012f4:	e1a03000 	mov	r3, r0
 10012f8:	ea000024 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_GPIO:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIODBEN_SET_MSK);
 10012fc:	e3a01010 	mov	r1, #16
 1001300:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001304:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001308:	ebffff78 	bl	10010f0 <alt_clk_is_enabled_helper>
 100130c:	e1a03000 	mov	r3, r0
 1001310:	ea00001e 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_SDMMC:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLKEN_SET_MSK);
 1001314:	e3a01020 	mov	r1, #32
 1001318:	e30400c8 	movw	r0, #16584	; 0x40c8
 100131c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001320:	ebffff72 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001324:	e1a03000 	mov	r3, r0
 1001328:	ea000018 	b	1001390 <alt_clk_is_enabled+0x258>

    case ALT_CLK_USB:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_USBCLKEN_SET_MSK);
 100132c:	e3a01c01 	mov	r1, #256	; 0x100
 1001330:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001334:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001338:	ebffff6c 	bl	10010f0 <alt_clk_is_enabled_helper>
 100133c:	e1a03000 	mov	r3, r0
 1001340:	ea000012 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_SPIM:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLKEN_SET_MSK);
 1001344:	e3a01c02 	mov	r1, #512	; 0x200
 1001348:	e30400c8 	movw	r0, #16584	; 0x40c8
 100134c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001350:	ebffff66 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001354:	e1a03000 	mov	r3, r0
 1001358:	ea00000c 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_NAND:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLKEN_SET_MSK);
 100135c:	e3a01b01 	mov	r1, #1024	; 0x400
 1001360:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001364:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001368:	ebffff60 	bl	10010f0 <alt_clk_is_enabled_helper>
 100136c:	e1a03000 	mov	r3, r0
 1001370:	ea000006 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_QSPI:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLKEN_SET_MSK);
 1001374:	e3a01b02 	mov	r1, #2048	; 0x800
 1001378:	e30400c8 	movw	r0, #16584	; 0x40c8
 100137c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001380:	ebffff5a 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001384:	e1a03000 	mov	r3, r0
 1001388:	ea000000 	b	1001390 <alt_clk_is_enabled+0x258>
    default:
        return ALT_E_BAD_ARG;
 100138c:	e3e03008 	mvn	r3, #8
    }   /* end of switch-case construct */
}
 1001390:	e1a00003 	mov	r0, r3
 1001394:	e24bd004 	sub	sp, fp, #4
 1001398:	e8bd8800 	pop	{fp, pc}

0100139c <alt_read_word_helper>:
// resolves to "*(volatile uint32_t *)src". As there is no assignment, this
// could potentially be optimized away. With the helper, the actual register
// read should occur and be returned (and subsequently discarded).
*/
static __inline uint32_t alt_read_word_helper(const void * addr)
{
 100139c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10013a0:	e28db000 	add	fp, sp, #0
 10013a4:	e24dd00c 	sub	sp, sp, #12
 10013a8:	e50b0008 	str	r0, [fp, #-8]
    return alt_read_word(addr);
 10013ac:	e51b3008 	ldr	r3, [fp, #-8]
 10013b0:	e5933000 	ldr	r3, [r3]
}
 10013b4:	e1a00003 	mov	r0, r3
 10013b8:	e28bd000 	add	sp, fp, #0
 10013bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10013c0:	e12fff1e 	bx	lr

010013c4 <alt_16550_write_divisor_helper>:
/*
// Helper function write the divisor in hardware.
*/
static ALT_STATUS_CODE alt_16550_write_divisor_helper(ALT_16550_HANDLE_t * handle,
                                                      uint32_t divisor)
{
 10013c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10013c8:	e28db000 	add	fp, sp, #0
 10013cc:	e24dd00c 	sub	sp, sp, #12
 10013d0:	e50b0008 	str	r0, [fp, #-8]
 10013d4:	e50b100c 	str	r1, [fp, #-12]
    /* Validate the divisor parameter. */
    if (divisor > 0xffff)
 10013d8:	e51b300c 	ldr	r3, [fp, #-12]
 10013dc:	e3530801 	cmp	r3, #65536	; 0x10000
 10013e0:	3a000001 	bcc	10013ec <alt_16550_write_divisor_helper+0x28>
    {
        /* This should never happen as it is verified in divisor_set. */
        return ALT_E_ERROR;
 10013e4:	e3e03000 	mvn	r3, #0
 10013e8:	ea000039 	b	10014d4 <alt_16550_write_divisor_helper+0x110>
    }

    switch (handle->device)
 10013ec:	e51b3008 	ldr	r3, [fp, #-8]
 10013f0:	e1d330b0 	ldrh	r3, [r3]
 10013f4:	e3530001 	cmp	r3, #1
 10013f8:	ca000002 	bgt	1001408 <alt_16550_write_divisor_helper+0x44>
 10013fc:	e3530000 	cmp	r3, #0
 1001400:	aa000002 	bge	1001410 <alt_16550_write_divisor_helper+0x4c>
 1001404:	ea000024 	b	100149c <alt_16550_write_divisor_helper+0xd8>
 1001408:	e3530c01 	cmp	r3, #256	; 0x100
 100140c:	1a000022 	bne	100149c <alt_16550_write_divisor_helper+0xd8>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Set LCR::DLAB (Line Control Register :: Divisor Latch Access Bit) */
        alt_setbits_word(ALT_UART_LCR_ADDR(handle->location), ALT_UART_LCR_DLAB_SET_MSK);
 1001410:	e51b3008 	ldr	r3, [fp, #-8]
 1001414:	e5933004 	ldr	r3, [r3, #4]
 1001418:	e283300c 	add	r3, r3, #12
 100141c:	e5932000 	ldr	r2, [r3]
 1001420:	e51b3008 	ldr	r3, [fp, #-8]
 1001424:	e5933004 	ldr	r3, [r3, #4]
 1001428:	e283300c 	add	r3, r3, #12
 100142c:	e3822080 	orr	r2, r2, #128	; 0x80
 1001430:	e5832000 	str	r2, [r3]

        /* Write DLL (Divisor Latch Low). */
        alt_write_word(ALT_UART_RBR_THR_DLL_ADDR(handle->location), ALT_UART_RBR_THR_DLL_VALUE_SET(divisor));
 1001434:	e51b3008 	ldr	r3, [fp, #-8]
 1001438:	e5933004 	ldr	r3, [r3, #4]
 100143c:	e51b200c 	ldr	r2, [fp, #-12]
 1001440:	e6ef2072 	uxtb	r2, r2
 1001444:	e5832000 	str	r2, [r3]

        /* Write DLH (Divisor Latch High). */
        alt_write_word(ALT_UART_IER_DLH_ADDR(handle->location), ALT_UART_IER_DLH_VALUE_SET(divisor >> 8));
 1001448:	e51b300c 	ldr	r3, [fp, #-12]
 100144c:	e1a02423 	lsr	r2, r3, #8
 1001450:	e51b3008 	ldr	r3, [fp, #-8]
 1001454:	e5933004 	ldr	r3, [r3, #4]
 1001458:	e2833004 	add	r3, r3, #4
 100145c:	e6ef2072 	uxtb	r2, r2
 1001460:	e5832000 	str	r2, [r3]

        /* Clear LCR::DLAB (Line Control Register :: Divisor Latch Access Bit) */
        alt_clrbits_word(ALT_UART_LCR_ADDR(handle->location), ALT_UART_LCR_DLAB_SET_MSK);
 1001464:	e51b3008 	ldr	r3, [fp, #-8]
 1001468:	e5933004 	ldr	r3, [r3, #4]
 100146c:	e283300c 	add	r3, r3, #12
 1001470:	e5932000 	ldr	r2, [r3]
 1001474:	e51b3008 	ldr	r3, [fp, #-8]
 1001478:	e5933004 	ldr	r3, [r3, #4]
 100147c:	e283300c 	add	r3, r3, #12
 1001480:	e3c22080 	bic	r2, r2, #128	; 0x80
 1001484:	e5832000 	str	r2, [r3]

        break;
 1001488:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    /* Update the enabled state in the handle data. */
    if (divisor != 0)
 100148c:	e51b300c 	ldr	r3, [fp, #-12]
 1001490:	e3530000 	cmp	r3, #0
 1001494:	0a000008 	beq	10014bc <alt_16550_write_divisor_helper+0xf8>
 1001498:	ea000001 	b	10014a4 <alt_16550_write_divisor_helper+0xe0>
        return ALT_E_ERROR;
 100149c:	e3e03000 	mvn	r3, #0
 10014a0:	ea00000b 	b	10014d4 <alt_16550_write_divisor_helper+0x110>
    {
        handle->data |= ALT_16550_HANDLE_DATA_UART_ENABLED_MSK;
 10014a4:	e51b3008 	ldr	r3, [fp, #-8]
 10014a8:	e593300c 	ldr	r3, [r3, #12]
 10014ac:	e3832102 	orr	r2, r3, #-2147483648	; 0x80000000
 10014b0:	e51b3008 	ldr	r3, [fp, #-8]
 10014b4:	e583200c 	str	r2, [r3, #12]
 10014b8:	ea000004 	b	10014d0 <alt_16550_write_divisor_helper+0x10c>
    }
    else
    {
        handle->data &= ~ALT_16550_HANDLE_DATA_UART_ENABLED_MSK;
 10014bc:	e51b3008 	ldr	r3, [fp, #-8]
 10014c0:	e593300c 	ldr	r3, [r3, #12]
 10014c4:	e3c32102 	bic	r2, r3, #-2147483648	; 0x80000000
 10014c8:	e51b3008 	ldr	r3, [fp, #-8]
 10014cc:	e583200c 	str	r2, [r3, #12]
    }

    return ALT_E_SUCCESS;
 10014d0:	e3a03000 	mov	r3, #0
}
 10014d4:	e1a00003 	mov	r0, r3
 10014d8:	e28bd000 	add	sp, fp, #0
 10014dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10014e0:	e12fff1e 	bx	lr

010014e4 <alt_16550_reset_helper>:

/*
// Helper function to reset the UART.
*/
static ALT_STATUS_CODE alt_16550_reset_helper(ALT_16550_HANDLE_t * handle, bool enable_init)
{
 10014e4:	e92d4800 	push	{fp, lr}
 10014e8:	e28db004 	add	fp, sp, #4
 10014ec:	e24dd010 	sub	sp, sp, #16
 10014f0:	e50b0010 	str	r0, [fp, #-16]
 10014f4:	e1a03001 	mov	r3, r1
 10014f8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    switch (handle->device)
 10014fc:	e51b3010 	ldr	r3, [fp, #-16]
 1001500:	e1d330b0 	ldrh	r3, [r3]
 1001504:	e3530001 	cmp	r3, #1
 1001508:	ca000002 	bgt	1001518 <alt_16550_reset_helper+0x34>
 100150c:	e3530000 	cmp	r3, #0
 1001510:	aa000003 	bge	1001524 <alt_16550_reset_helper+0x40>
 1001514:	ea00001a 	b	1001584 <alt_16550_reset_helper+0xa0>
 1001518:	e3530c01 	cmp	r3, #256	; 0x100
 100151c:	0a00000b 	beq	1001550 <alt_16550_reset_helper+0x6c>
 1001520:	ea000017 	b	1001584 <alt_16550_reset_helper+0xa0>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
        /* Write SRR::UR (Shadow Reset Register :: UART Reset) */
        alt_write_word(ALT_UART_SRR_ADDR(handle->location), ALT_UART_SRR_UR_SET_MSK);
 1001524:	e51b3010 	ldr	r3, [fp, #-16]
 1001528:	e5933004 	ldr	r3, [r3, #4]
 100152c:	e2833088 	add	r3, r3, #136	; 0x88
 1001530:	e3a02001 	mov	r2, #1
 1001534:	e5832000 	str	r2, [r3]

        /* Read the MSR to work around case:119085. */
        alt_read_word_helper(ALT_UART_MSR_ADDR(handle->location));
 1001538:	e51b3010 	ldr	r3, [fp, #-16]
 100153c:	e5933004 	ldr	r3, [r3, #4]
 1001540:	e2833018 	add	r3, r3, #24
 1001544:	e1a00003 	mov	r0, r3
 1001548:	ebffff93 	bl	100139c <alt_read_word_helper>
        break;
 100154c:	ea00000e 	b	100158c <alt_16550_reset_helper+0xa8>

    case ALT_16550_DEVICE_ALTERA_16550_UART:
        alt_16550_write_divisor_helper(handle, 0); /* Disable UART */
 1001550:	e3a01000 	mov	r1, #0
 1001554:	e51b0010 	ldr	r0, [fp, #-16]
 1001558:	ebffff99 	bl	10013c4 <alt_16550_write_divisor_helper>
        alt_16550_int_disable_all(handle);         /* Disable interrupts */
 100155c:	e51b0010 	ldr	r0, [fp, #-16]
 1001560:	eb00017b 	bl	1001b54 <alt_16550_int_disable_all>
        alt_16550_fifo_disable(handle);            /* Disable FIFOs */
 1001564:	e51b0010 	ldr	r0, [fp, #-16]
 1001568:	eb0000bc 	bl	1001860 <alt_16550_fifo_disable>
        alt_write_word(ALT_UART_MCR_ADDR(handle->location), 0); /* 0 -> MCR (AFCE, LP, OUT2, OUT1, RTS, DTR) */
 100156c:	e51b3010 	ldr	r3, [fp, #-16]
 1001570:	e5933004 	ldr	r3, [r3, #4]
 1001574:	e2833010 	add	r3, r3, #16
 1001578:	e3a02000 	mov	r2, #0
 100157c:	e5832000 	str	r2, [r3]
        break;
 1001580:	ea000001 	b	100158c <alt_16550_reset_helper+0xa8>

    default:
        return ALT_E_ERROR;
 1001584:	e3e03000 	mvn	r3, #0
 1001588:	ea000028 	b	1001630 <alt_16550_reset_helper+0x14c>
    }

    /* If we are initializing (as opposed to just uninitializing) */
    if (enable_init)
 100158c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1001590:	e3530000 	cmp	r3, #0
 1001594:	0a000024 	beq	100162c <alt_16550_reset_helper+0x148>
    {
        ALT_STATUS_CODE status;
        uint32_t divisor;

        /* Set bit IER::PTIME (Interrupt Enable Register :: Programmable THRE Mode Enable) */
        alt_setbits_word(ALT_UART_IER_DLH_ADDR(handle->location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
 1001598:	e51b3010 	ldr	r3, [fp, #-16]
 100159c:	e5933004 	ldr	r3, [r3, #4]
 10015a0:	e2833004 	add	r3, r3, #4
 10015a4:	e5932000 	ldr	r2, [r3]
 10015a8:	e51b3010 	ldr	r3, [fp, #-16]
 10015ac:	e5933004 	ldr	r3, [r3, #4]
 10015b0:	e2833004 	add	r3, r3, #4
 10015b4:	e3822080 	orr	r2, r2, #128	; 0x80
 10015b8:	e5832000 	str	r2, [r3]

        /* Set the line configuration to use 8-N-1. */
        status = alt_16550_line_config_set(handle, ALT_16550_DATABITS_8,
 10015bc:	e3a03000 	mov	r3, #0
 10015c0:	e3a02000 	mov	r2, #0
 10015c4:	e3a01003 	mov	r1, #3
 10015c8:	e51b0010 	ldr	r0, [fp, #-16]
 10015cc:	eb00016b 	bl	1001b80 <alt_16550_line_config_set>
 10015d0:	e50b0008 	str	r0, [fp, #-8]
                                                   ALT_16550_PARITY_DISABLE,
                                                   ALT_16550_STOPBITS_1);
        if (status != ALT_E_SUCCESS)
 10015d4:	e51b3008 	ldr	r3, [fp, #-8]
 10015d8:	e3530000 	cmp	r3, #0
 10015dc:	0a000001 	beq	10015e8 <alt_16550_reset_helper+0x104>
        {
            return status;
 10015e0:	e51b3008 	ldr	r3, [fp, #-8]
 10015e4:	ea000011 	b	1001630 <alt_16550_reset_helper+0x14c>
        }

        divisor = ALT_16550_HANDLE_DATA_DIVISOR_VALUE_GET(handle->data);
 10015e8:	e51b3010 	ldr	r3, [fp, #-16]
 10015ec:	e593300c 	ldr	r3, [r3, #12]
 10015f0:	e6ff3073 	uxth	r3, r3
 10015f4:	e50b300c 	str	r3, [fp, #-12]
        if (divisor == 0)
 10015f8:	e51b300c 	ldr	r3, [fp, #-12]
 10015fc:	e3530000 	cmp	r3, #0
 1001600:	1a000009 	bne	100162c <alt_16550_reset_helper+0x148>
        {
            status = alt_16550_baudrate_set(handle, DEFAULT_BAUD);
 1001604:	e3a01cc2 	mov	r1, #49664	; 0xc200
 1001608:	e3401001 	movt	r1, #1
 100160c:	e51b0010 	ldr	r0, [fp, #-16]
 1001610:	eb0000f3 	bl	10019e4 <alt_16550_baudrate_set>
 1001614:	e50b0008 	str	r0, [fp, #-8]
            if (status != ALT_E_SUCCESS)
 1001618:	e51b3008 	ldr	r3, [fp, #-8]
 100161c:	e3530000 	cmp	r3, #0
 1001620:	0a000001 	beq	100162c <alt_16550_reset_helper+0x148>
            {
                return status;
 1001624:	e51b3008 	ldr	r3, [fp, #-8]
 1001628:	ea000000 	b	1001630 <alt_16550_reset_helper+0x14c>
            }
        }
    }

    return ALT_E_SUCCESS;
 100162c:	e3a03000 	mov	r3, #0
}
 1001630:	e1a00003 	mov	r0, r3
 1001634:	e24bd004 	sub	sp, fp, #4
 1001638:	e8bd8800 	pop	{fp, pc}

0100163c <alt_16550_init>:

ALT_STATUS_CODE alt_16550_init(ALT_16550_DEVICE_t device,
                               void * location,
                               alt_freq_t clock_freq,
                               ALT_16550_HANDLE_t * handle)
{
 100163c:	e92d4800 	push	{fp, lr}
 1001640:	e28db004 	add	fp, sp, #4
 1001644:	e24dd018 	sub	sp, sp, #24
 1001648:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 100164c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 1001650:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 1001654:	e1a03000 	mov	r3, r0
 1001658:	e14b30be 	strh	r3, [fp, #-14]
    handle->device = device;
 100165c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001660:	e15b20be 	ldrh	r2, [fp, #-14]
 1001664:	e1c320b0 	strh	r2, [r3]
    handle->data   = 0;
 1001668:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100166c:	e3a02000 	mov	r2, #0
 1001670:	e583200c 	str	r2, [r3, #12]
    handle->fcr    = 0;
 1001674:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001678:	e3a02000 	mov	r2, #0
 100167c:	e5832010 	str	r2, [r3, #16]

    switch (device)
 1001680:	e15b30be 	ldrh	r3, [fp, #-14]
 1001684:	e3530001 	cmp	r3, #1
 1001688:	ca000002 	bgt	1001698 <alt_16550_init+0x5c>
 100168c:	e3530000 	cmp	r3, #0
 1001690:	aa000003 	bge	10016a4 <alt_16550_init+0x68>
 1001694:	ea000036 	b	1001774 <alt_16550_init+0x138>
 1001698:	e3530c01 	cmp	r3, #256	; 0x100
 100169c:	0a00002d 	beq	1001758 <alt_16550_init+0x11c>
 10016a0:	ea000033 	b	1001774 <alt_16550_init+0x138>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
        /* The ALT_CLK_L4_SP is required for all SoCFPGA UARTs. Check that it's enabled. */
        if (alt_clk_is_enabled(ALT_CLK_L4_SP) != ALT_E_TRUE)
 10016a4:	e3a0000c 	mov	r0, #12
 10016a8:	ebfffea2 	bl	1001138 <alt_clk_is_enabled>
 10016ac:	e1a03000 	mov	r3, r0
 10016b0:	e3530001 	cmp	r3, #1
 10016b4:	0a000001 	beq	10016c0 <alt_16550_init+0x84>
        {
            return ALT_E_BAD_CLK;
 10016b8:	e3e0300d 	mvn	r3, #13
 10016bc:	ea000032 	b	100178c <alt_16550_init+0x150>
            ALT_STATUS_CODE status;
            #ifdef soc_cv_av
                uint32_t ucr;
            #endif

            status = alt_clk_freq_get(ALT_CLK_L4_SP, &handle->clock_freq);
 10016c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10016c4:	e2833008 	add	r3, r3, #8
 10016c8:	e1a01003 	mov	r1, r3
 10016cc:	e3a0000c 	mov	r0, #12
 10016d0:	ebfffdf7 	bl	1000eb4 <alt_clk_freq_get>
 10016d4:	e50b0008 	str	r0, [fp, #-8]
            if (status != ALT_E_SUCCESS)
 10016d8:	e51b3008 	ldr	r3, [fp, #-8]
 10016dc:	e3530000 	cmp	r3, #0
 10016e0:	0a000001 	beq	10016ec <alt_16550_init+0xb0>
            {
                return status;
 10016e4:	e51b3008 	ldr	r3, [fp, #-8]
 10016e8:	ea000027 	b	100178c <alt_16550_init+0x150>
            }

            if (device == ALT_16550_DEVICE_SOCFPGA_UART0)
 10016ec:	e15b30be 	ldrh	r3, [fp, #-14]
 10016f0:	e3530000 	cmp	r3, #0
 10016f4:	1a00000b 	bne	1001728 <alt_16550_init+0xec>
            {
                handle->location = ALT_UART0_ADDR;
 10016f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 10016fc:	e3a03a02 	mov	r3, #8192	; 0x2000
 1001700:	e34f3fc0 	movt	r3, #65472	; 0xffc0
 1001704:	e5823004 	str	r3, [r2, #4]

                /* Bring UART0 out of reset. */
#ifdef soc_cv_av
                alt_clrbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_UART0_SET_MSK);
#else
                alt_clrbits_word(ALT_RSTMGR_PER1MODRST_ADDR, ALT_RSTMGR_PER1MODRST_UART0_SET_MSK);
 1001708:	e3053028 	movw	r3, #20520	; 0x5028
 100170c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1001710:	e5932000 	ldr	r2, [r3]
 1001714:	e3053028 	movw	r3, #20520	; 0x5028
 1001718:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100171c:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 1001720:	e5832000 	str	r2, [r3]
            {
                return ALT_E_ERROR;
            }
#endif
        }
        break;
 1001724:	ea000014 	b	100177c <alt_16550_init+0x140>
                handle->location = ALT_UART1_ADDR;
 1001728:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 100172c:	e3a03c21 	mov	r3, #8448	; 0x2100
 1001730:	e34f3fc0 	movt	r3, #65472	; 0xffc0
 1001734:	e5823004 	str	r3, [r2, #4]
                alt_clrbits_word(ALT_RSTMGR_PER1MODRST_ADDR, ALT_RSTMGR_PER1MODRST_UART1_SET_MSK);
 1001738:	e3053028 	movw	r3, #20520	; 0x5028
 100173c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1001740:	e5932000 	ldr	r2, [r3]
 1001744:	e3053028 	movw	r3, #20520	; 0x5028
 1001748:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100174c:	e3c22802 	bic	r2, r2, #131072	; 0x20000
 1001750:	e5832000 	str	r2, [r3]
        break;
 1001754:	ea000008 	b	100177c <alt_16550_init+0x140>
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        handle->location   = location;
 1001758:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100175c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1001760:	e5832004 	str	r2, [r3, #4]
        handle->clock_freq = clock_freq;
 1001764:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001768:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 100176c:	e5832008 	str	r2, [r3, #8]
        break;
 1001770:	ea000001 	b	100177c <alt_16550_init+0x140>
    default:
        return ALT_E_BAD_ARG;
 1001774:	e3e03008 	mvn	r3, #8
 1001778:	ea000003 	b	100178c <alt_16550_init+0x150>
    }

    return alt_16550_reset_helper(handle, true);
 100177c:	e3a01001 	mov	r1, #1
 1001780:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 1001784:	ebffff56 	bl	10014e4 <alt_16550_reset_helper>
 1001788:	e1a03000 	mov	r3, r0
}
 100178c:	e1a00003 	mov	r0, r3
 1001790:	e24bd004 	sub	sp, fp, #4
 1001794:	e8bd8800 	pop	{fp, pc}

01001798 <alt_16550_enable>:
{
    return alt_16550_reset_helper(handle, true);
}

ALT_STATUS_CODE alt_16550_enable(ALT_16550_HANDLE_t * handle)
{
 1001798:	e92d4800 	push	{fp, lr}
 100179c:	e28db004 	add	fp, sp, #4
 10017a0:	e24dd008 	sub	sp, sp, #8
 10017a4:	e50b0008 	str	r0, [fp, #-8]
    /* Enable Terminal*/
  alt_16550_modem_enable_dtr(handle);
 10017a8:	e51b0008 	ldr	r0, [fp, #-8]
 10017ac:	eb000173 	bl	1001d80 <alt_16550_modem_enable_dtr>
  alt_16550_modem_enable_rts(handle);
 10017b0:	e51b0008 	ldr	r0, [fp, #-8]
 10017b4:	eb000166 	bl	1001d54 <alt_16550_modem_enable_rts>

    /* Write the divisor cached in the handle data to the divisor registers. */
    /* This will effectively enable the UART. */
    return alt_16550_write_divisor_helper(handle,
                                          ALT_16550_HANDLE_DATA_DIVISOR_VALUE_GET(handle->data));
 10017b8:	e51b3008 	ldr	r3, [fp, #-8]
 10017bc:	e593300c 	ldr	r3, [r3, #12]
    return alt_16550_write_divisor_helper(handle,
 10017c0:	e6ff3073 	uxth	r3, r3
 10017c4:	e1a01003 	mov	r1, r3
 10017c8:	e51b0008 	ldr	r0, [fp, #-8]
 10017cc:	ebfffefc 	bl	10013c4 <alt_16550_write_divisor_helper>
 10017d0:	e1a03000 	mov	r3, r0

}
 10017d4:	e1a00003 	mov	r0, r3
 10017d8:	e24bd004 	sub	sp, fp, #4
 10017dc:	e8bd8800 	pop	{fp, pc}

010017e0 <alt_16550_fifo_enable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_16550_fifo_enable(ALT_16550_HANDLE_t * handle)
{
 10017e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10017e4:	e28db000 	add	fp, sp, #0
 10017e8:	e24dd00c 	sub	sp, sp, #12
 10017ec:	e50b0008 	str	r0, [fp, #-8]
    switch (handle->device)
 10017f0:	e51b3008 	ldr	r3, [fp, #-8]
 10017f4:	e1d330b0 	ldrh	r3, [r3]
 10017f8:	e3530001 	cmp	r3, #1
 10017fc:	ca000002 	bgt	100180c <alt_16550_fifo_enable+0x2c>
 1001800:	e3530000 	cmp	r3, #0
 1001804:	aa000002 	bge	1001814 <alt_16550_fifo_enable+0x34>
 1001808:	ea00000f 	b	100184c <alt_16550_fifo_enable+0x6c>
 100180c:	e3530c01 	cmp	r3, #256	; 0x100
 1001810:	1a00000d 	bne	100184c <alt_16550_fifo_enable+0x6c>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Set FCR::FIFOE (FIFO Control Register :: FIFO Enable) bit. */
        handle->fcr |= ALT_UART_FCR_FIFOE_SET_MSK | ALT_UART_FCR_RFIFOR_SET_MSK | ALT_UART_FCR_XFIFOR_SET_MSK;
 1001814:	e51b3008 	ldr	r3, [fp, #-8]
 1001818:	e5933010 	ldr	r3, [r3, #16]
 100181c:	e3832007 	orr	r2, r3, #7
 1001820:	e51b3008 	ldr	r3, [fp, #-8]
 1001824:	e5832010 	str	r2, [r3, #16]
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
 1001828:	e51b3008 	ldr	r3, [fp, #-8]
 100182c:	e5933004 	ldr	r3, [r3, #4]
 1001830:	e2833008 	add	r3, r3, #8
 1001834:	e51b2008 	ldr	r2, [fp, #-8]
 1001838:	e5922010 	ldr	r2, [r2, #16]
 100183c:	e5832000 	str	r2, [r3]
        break;
 1001840:	e320f000 	nop	{0}
        return ALT_E_ERROR;
    }

    /* No need to reset / clear the FIFOs. This is done automatically when */
    /* FCR::FIFOE is changed. */
    return ALT_E_SUCCESS;
 1001844:	e3a03000 	mov	r3, #0
 1001848:	ea000000 	b	1001850 <alt_16550_fifo_enable+0x70>
        return ALT_E_ERROR;
 100184c:	e3e03000 	mvn	r3, #0
}
 1001850:	e1a00003 	mov	r0, r3
 1001854:	e28bd000 	add	sp, fp, #0
 1001858:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100185c:	e12fff1e 	bx	lr

01001860 <alt_16550_fifo_disable>:

ALT_STATUS_CODE alt_16550_fifo_disable(ALT_16550_HANDLE_t * handle)
{
 1001860:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001864:	e28db000 	add	fp, sp, #0
 1001868:	e24dd00c 	sub	sp, sp, #12
 100186c:	e50b0008 	str	r0, [fp, #-8]
    switch (handle->device)
 1001870:	e51b3008 	ldr	r3, [fp, #-8]
 1001874:	e1d330b0 	ldrh	r3, [r3]
 1001878:	e3530001 	cmp	r3, #1
 100187c:	ca000002 	bgt	100188c <alt_16550_fifo_disable+0x2c>
 1001880:	e3530000 	cmp	r3, #0
 1001884:	aa000002 	bge	1001894 <alt_16550_fifo_disable+0x34>
 1001888:	ea00000f 	b	10018cc <alt_16550_fifo_disable+0x6c>
 100188c:	e3530c01 	cmp	r3, #256	; 0x100
 1001890:	1a00000d 	bne	10018cc <alt_16550_fifo_disable+0x6c>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Clear FCR::FIFOE (FIFO Control Register :: FIFO Enable) bit. */
        handle->fcr &= ~ALT_UART_FCR_FIFOE_SET_MSK;
 1001894:	e51b3008 	ldr	r3, [fp, #-8]
 1001898:	e5933010 	ldr	r3, [r3, #16]
 100189c:	e3c32001 	bic	r2, r3, #1
 10018a0:	e51b3008 	ldr	r3, [fp, #-8]
 10018a4:	e5832010 	str	r2, [r3, #16]
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
 10018a8:	e51b3008 	ldr	r3, [fp, #-8]
 10018ac:	e5933004 	ldr	r3, [r3, #4]
 10018b0:	e2833008 	add	r3, r3, #8
 10018b4:	e51b2008 	ldr	r2, [fp, #-8]
 10018b8:	e5922010 	ldr	r2, [r2, #16]
 10018bc:	e5832000 	str	r2, [r3]
        break;
 10018c0:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 10018c4:	e3a03000 	mov	r3, #0
 10018c8:	ea000000 	b	10018d0 <alt_16550_fifo_disable+0x70>
        return ALT_E_ERROR;
 10018cc:	e3e03000 	mvn	r3, #0
}
 10018d0:	e1a00003 	mov	r0, r3
 10018d4:	e28bd000 	add	sp, fp, #0
 10018d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10018dc:	e12fff1e 	bx	lr

010018e0 <alt_16550_fifo_write_safe>:

ALT_STATUS_CODE alt_16550_fifo_write_safe(ALT_16550_HANDLE_t * handle,
                                     const char * buffer,
                                     size_t count,
                                     bool safe)
{
 10018e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10018e4:	e28db000 	add	fp, sp, #0
 10018e8:	e24dd01c 	sub	sp, sp, #28
 10018ec:	e50b0010 	str	r0, [fp, #-16]
 10018f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 10018f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 10018f8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    size_t i;
    /* Verify that the UART is enabled */
    if (!(handle->data & ALT_16550_HANDLE_DATA_UART_ENABLED_MSK))
 10018fc:	e51b3010 	ldr	r3, [fp, #-16]
 1001900:	e593300c 	ldr	r3, [r3, #12]
 1001904:	e3530000 	cmp	r3, #0
 1001908:	ba000001 	blt	1001914 <alt_16550_fifo_write_safe+0x34>
    {
        return ALT_E_ERROR;
 100190c:	e3e03000 	mvn	r3, #0
 1001910:	ea00002f 	b	10019d4 <alt_16550_fifo_write_safe+0xf4>
    }

    /* Verify that the FIFO is enabled */
    if (!(handle->fcr & ALT_UART_FCR_FIFOE_SET_MSK))
 1001914:	e51b3010 	ldr	r3, [fp, #-16]
 1001918:	e5933010 	ldr	r3, [r3, #16]
 100191c:	e2033001 	and	r3, r3, #1
 1001920:	e3530000 	cmp	r3, #0
 1001924:	1a000001 	bne	1001930 <alt_16550_fifo_write_safe+0x50>
    {
        return ALT_E_ERROR;
 1001928:	e3e03000 	mvn	r3, #0
 100192c:	ea000028 	b	10019d4 <alt_16550_fifo_write_safe+0xf4>
    }

    switch (handle->device)
 1001930:	e51b3010 	ldr	r3, [fp, #-16]
 1001934:	e1d330b0 	ldrh	r3, [r3]
 1001938:	e3530001 	cmp	r3, #1
 100193c:	ca000002 	bgt	100194c <alt_16550_fifo_write_safe+0x6c>
 1001940:	e3530000 	cmp	r3, #0
 1001944:	aa000002 	bge	1001954 <alt_16550_fifo_write_safe+0x74>
 1001948:	ea00001e 	b	10019c8 <alt_16550_fifo_write_safe+0xe8>
 100194c:	e3530c01 	cmp	r3, #256	; 0x100
 1001950:	1a00001c 	bne	10019c8 <alt_16550_fifo_write_safe+0xe8>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Write the buffer into the THR (Transmit Holding Register) */
        for (i = 0; i < count; ++i)
 1001954:	e3a03000 	mov	r3, #0
 1001958:	e50b3008 	str	r3, [fp, #-8]
 100195c:	ea000014 	b	10019b4 <alt_16550_fifo_write_safe+0xd4>
        {
            if (safe)
 1001960:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 1001964:	e3530000 	cmp	r3, #0
 1001968:	0a000007 	beq	100198c <alt_16550_fifo_write_safe+0xac>
                while (ALT_UART_LSR_THRE_GET(alt_read_word(ALT_UART_LSR_ADDR(handle->location))))
 100196c:	e320f000 	nop	{0}
 1001970:	e51b3010 	ldr	r3, [fp, #-16]
 1001974:	e5933004 	ldr	r3, [r3, #4]
 1001978:	e2833014 	add	r3, r3, #20
 100197c:	e5933000 	ldr	r3, [r3]
 1001980:	e2033020 	and	r3, r3, #32
 1001984:	e3530000 	cmp	r3, #0
 1001988:	1afffff8 	bne	1001970 <alt_16550_fifo_write_safe+0x90>
                    ; /* Spin waiting for space */
            alt_write_word(ALT_UART_RBR_THR_DLL_ADDR(handle->location), buffer[i]);
 100198c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1001990:	e51b3008 	ldr	r3, [fp, #-8]
 1001994:	e0823003 	add	r3, r2, r3
 1001998:	e5d32000 	ldrb	r2, [r3]
 100199c:	e51b3010 	ldr	r3, [fp, #-16]
 10019a0:	e5933004 	ldr	r3, [r3, #4]
 10019a4:	e5832000 	str	r2, [r3]
        for (i = 0; i < count; ++i)
 10019a8:	e51b3008 	ldr	r3, [fp, #-8]
 10019ac:	e2833001 	add	r3, r3, #1
 10019b0:	e50b3008 	str	r3, [fp, #-8]
 10019b4:	e51b2008 	ldr	r2, [fp, #-8]
 10019b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10019bc:	e1520003 	cmp	r2, r3
 10019c0:	3affffe6 	bcc	1001960 <alt_16550_fifo_write_safe+0x80>
        }
        break;
 10019c4:	ea000001 	b	10019d0 <alt_16550_fifo_write_safe+0xf0>
    default:
        return ALT_E_ERROR;
 10019c8:	e3e03000 	mvn	r3, #0
 10019cc:	ea000000 	b	10019d4 <alt_16550_fifo_write_safe+0xf4>
    }

    return ALT_E_SUCCESS;
 10019d0:	e3a03000 	mov	r3, #0
}
 10019d4:	e1a00003 	mov	r0, r3
 10019d8:	e28bd000 	add	sp, fp, #0
 10019dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10019e0:	e12fff1e 	bx	lr

010019e4 <alt_16550_baudrate_set>:
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_16550_baudrate_set(ALT_16550_HANDLE_t * handle,
                                       uint32_t baudrate)
{
 10019e4:	e92d4800 	push	{fp, lr}
 10019e8:	e28db004 	add	fp, sp, #4
 10019ec:	e24dd010 	sub	sp, sp, #16
 10019f0:	e50b0010 	str	r0, [fp, #-16]
 10019f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t divisor;
    if (baudrate == 0)
 10019f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10019fc:	e3530000 	cmp	r3, #0
 1001a00:	1a000001 	bne	1001a0c <alt_16550_baudrate_set+0x28>
    {
        return ALT_E_ARG_RANGE;
 1001a04:	e3e03007 	mvn	r3, #7
 1001a08:	ea00000f 	b	1001a4c <alt_16550_baudrate_set+0x68>
    // => baudrate * 16 * divisor = clock
    // => divisor = clock / (baudrate * 16)
    // => divisor = (clock / 16) / baudrate */

    /* Add half of the denominator to address rounding errors. */
    divisor = ((handle->clock_freq + (8 * baudrate)) / (16 * baudrate));
 1001a0c:	e51b3010 	ldr	r3, [fp, #-16]
 1001a10:	e5932008 	ldr	r2, [r3, #8]
 1001a14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001a18:	e1a03183 	lsl	r3, r3, #3
 1001a1c:	e0822003 	add	r2, r2, r3
 1001a20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001a24:	e1a03203 	lsl	r3, r3, #4
 1001a28:	e1a01003 	mov	r1, r3
 1001a2c:	e1a00002 	mov	r0, r2
 1001a30:	eb000da2 	bl	10050c0 <__udivsi3>
 1001a34:	e1a03000 	mov	r3, r0
 1001a38:	e50b3008 	str	r3, [fp, #-8]

    /* Check for divisor range is in alt_16550_divisor_set(). */
    return alt_16550_divisor_set(handle, divisor);
 1001a3c:	e51b1008 	ldr	r1, [fp, #-8]
 1001a40:	e51b0010 	ldr	r0, [fp, #-16]
 1001a44:	eb000003 	bl	1001a58 <alt_16550_divisor_set>
 1001a48:	e1a03000 	mov	r3, r0
}
 1001a4c:	e1a00003 	mov	r0, r3
 1001a50:	e24bd004 	sub	sp, fp, #4
 1001a54:	e8bd8800 	pop	{fp, pc}

01001a58 <alt_16550_divisor_set>:
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_16550_divisor_set(ALT_16550_HANDLE_t * handle,
                                      uint32_t divisor)
{
 1001a58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001a5c:	e28db000 	add	fp, sp, #0
 1001a60:	e24dd00c 	sub	sp, sp, #12
 1001a64:	e50b0008 	str	r0, [fp, #-8]
 1001a68:	e50b100c 	str	r1, [fp, #-12]
    /* Verify divisor value is in range. */
    if ((divisor > 0xffff) || (divisor == 0))
 1001a6c:	e51b300c 	ldr	r3, [fp, #-12]
 1001a70:	e3530801 	cmp	r3, #65536	; 0x10000
 1001a74:	2a000002 	bcs	1001a84 <alt_16550_divisor_set+0x2c>
 1001a78:	e51b300c 	ldr	r3, [fp, #-12]
 1001a7c:	e3530000 	cmp	r3, #0
 1001a80:	1a000001 	bne	1001a8c <alt_16550_divisor_set+0x34>
    {
        return ALT_E_ARG_RANGE;
 1001a84:	e3e03007 	mvn	r3, #7
 1001a88:	ea00000c 	b	1001ac0 <alt_16550_divisor_set+0x68>
    }

    /* Set the divisor portion of the handle data. */
    handle->data &= ~(0xffff);
 1001a8c:	e51b3008 	ldr	r3, [fp, #-8]
 1001a90:	e593300c 	ldr	r3, [r3, #12]
 1001a94:	e1a03823 	lsr	r3, r3, #16
 1001a98:	e1a03803 	lsl	r3, r3, #16
 1001a9c:	e51b2008 	ldr	r2, [fp, #-8]
 1001aa0:	e582300c 	str	r3, [r2, #12]
    handle->data |= divisor;
 1001aa4:	e51b3008 	ldr	r3, [fp, #-8]
 1001aa8:	e593200c 	ldr	r2, [r3, #12]
 1001aac:	e51b300c 	ldr	r3, [fp, #-12]
 1001ab0:	e1822003 	orr	r2, r2, r3
 1001ab4:	e51b3008 	ldr	r3, [fp, #-8]
 1001ab8:	e583200c 	str	r2, [r3, #12]

    /* Even if the UART is enabled, don't do anything. It is documented that */
    /* the change will take effect when the UART move to the enabled state. */

    return ALT_E_SUCCESS;
 1001abc:	e3a03000 	mov	r3, #0
}
 1001ac0:	e1a00003 	mov	r0, r3
 1001ac4:	e28bd000 	add	sp, fp, #0
 1001ac8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001acc:	e12fff1e 	bx	lr

01001ad0 <alt_16550_ier_mask_clr_helper>:

    return ALT_E_SUCCESS;
}

static ALT_STATUS_CODE alt_16550_ier_mask_clr_helper(ALT_16550_HANDLE_t * handle, uint32_t setmask)
{
 1001ad0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001ad4:	e28db000 	add	fp, sp, #0
 1001ad8:	e24dd00c 	sub	sp, sp, #12
 1001adc:	e50b0008 	str	r0, [fp, #-8]
 1001ae0:	e50b100c 	str	r1, [fp, #-12]
    switch (handle->device)
 1001ae4:	e51b3008 	ldr	r3, [fp, #-8]
 1001ae8:	e1d330b0 	ldrh	r3, [r3]
 1001aec:	e3530001 	cmp	r3, #1
 1001af0:	ca000002 	bgt	1001b00 <alt_16550_ier_mask_clr_helper+0x30>
 1001af4:	e3530000 	cmp	r3, #0
 1001af8:	aa000002 	bge	1001b08 <alt_16550_ier_mask_clr_helper+0x38>
 1001afc:	ea00000f 	b	1001b40 <alt_16550_ier_mask_clr_helper+0x70>
 1001b00:	e3530c01 	cmp	r3, #256	; 0x100
 1001b04:	1a00000d 	bne	1001b40 <alt_16550_ier_mask_clr_helper+0x70>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Clear bit in IER (Interrupt Enable Register) */
        alt_clrbits_word(ALT_UART_IER_DLH_ADDR(handle->location), setmask);
 1001b08:	e51b3008 	ldr	r3, [fp, #-8]
 1001b0c:	e5933004 	ldr	r3, [r3, #4]
 1001b10:	e2833004 	add	r3, r3, #4
 1001b14:	e5931000 	ldr	r1, [r3]
 1001b18:	e51b300c 	ldr	r3, [fp, #-12]
 1001b1c:	e1e02003 	mvn	r2, r3
 1001b20:	e51b3008 	ldr	r3, [fp, #-8]
 1001b24:	e5933004 	ldr	r3, [r3, #4]
 1001b28:	e2833004 	add	r3, r3, #4
 1001b2c:	e0022001 	and	r2, r2, r1
 1001b30:	e5832000 	str	r2, [r3]
        break;
 1001b34:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 1001b38:	e3a03000 	mov	r3, #0
 1001b3c:	ea000000 	b	1001b44 <alt_16550_ier_mask_clr_helper+0x74>
        return ALT_E_ERROR;
 1001b40:	e3e03000 	mvn	r3, #0
}
 1001b44:	e1a00003 	mov	r0, r3
 1001b48:	e28bd000 	add	sp, fp, #0
 1001b4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001b50:	e12fff1e 	bx	lr

01001b54 <alt_16550_int_disable_all>:
    /* Clear the IER::EDSSI (Interrupt Enable Register :: Enable Modem Status Interrupt) bit. */
    return alt_16550_ier_mask_clr_helper(handle, ALT_UART_IER_DLH_EDSSI_DHL3_SET_MSK);
}

ALT_STATUS_CODE alt_16550_int_disable_all(ALT_16550_HANDLE_t * handle)
{
 1001b54:	e92d4800 	push	{fp, lr}
 1001b58:	e28db004 	add	fp, sp, #4
 1001b5c:	e24dd008 	sub	sp, sp, #8
 1001b60:	e50b0008 	str	r0, [fp, #-8]
    /* Clear the IER::(ERBFI | ETBEI | ELSI | EDSSI)
    //   (Interrupt Enable Register :: (Enable Receive Buffer Full Interrupt   |
    //                                  Enable Transmit Buffer Empty Interrupt |
    //                                  Enable Line Status Interrupt           |
    //                                  Enable Modem Status Interrupt)) bits   */
    return alt_16550_ier_mask_clr_helper(handle, ALT_UART_IER_DLH_ERBFI_DLH0_SET_MSK |
 1001b64:	e3a0100f 	mov	r1, #15
 1001b68:	e51b0008 	ldr	r0, [fp, #-8]
 1001b6c:	ebffffd7 	bl	1001ad0 <alt_16550_ier_mask_clr_helper>
 1001b70:	e1a03000 	mov	r3, r0
                                                 ALT_UART_IER_DLH_ETBEI_DLH1_SET_MSK |
                                                 ALT_UART_IER_DLH_ELSI_DHL2_SET_MSK  |
                                                 ALT_UART_IER_DLH_EDSSI_DHL3_SET_MSK);
}
 1001b74:	e1a00003 	mov	r0, r3
 1001b78:	e24bd004 	sub	sp, fp, #4
 1001b7c:	e8bd8800 	pop	{fp, pc}

01001b80 <alt_16550_line_config_set>:

ALT_STATUS_CODE alt_16550_line_config_set(ALT_16550_HANDLE_t * handle,
                                          ALT_16550_DATABITS_t databits,
                                          ALT_16550_PARITY_t parity,
                                          ALT_16550_STOPBITS_t stopbits)
{
 1001b80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001b84:	e28db000 	add	fp, sp, #0
 1001b88:	e24dd014 	sub	sp, sp, #20
 1001b8c:	e50b0010 	str	r0, [fp, #-16]
 1001b90:	e1a00001 	mov	r0, r1
 1001b94:	e1a01002 	mov	r1, r2
 1001b98:	e1a02003 	mov	r2, r3
 1001b9c:	e1a03000 	mov	r3, r0
 1001ba0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 1001ba4:	e1a03001 	mov	r3, r1
 1001ba8:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
 1001bac:	e1a03002 	mov	r3, r2
 1001bb0:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    /* LCR (Line Control Register) cache. */
    uint32_t lcr = 0;
 1001bb4:	e3a03000 	mov	r3, #0
 1001bb8:	e50b3008 	str	r3, [fp, #-8]

    /* Validate the databits parameter. */
    switch (databits)
 1001bbc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1001bc0:	e3530003 	cmp	r3, #3
 1001bc4:	9a000001 	bls	1001bd0 <alt_16550_line_config_set+0x50>
    case ALT_16550_DATABITS_6:
    case ALT_16550_DATABITS_7:
    case ALT_16550_DATABITS_8:
        break;
    default:
        return ALT_E_ERROR;
 1001bc8:	e3e03000 	mvn	r3, #0
 1001bcc:	ea00003c 	b	1001cc4 <alt_16550_line_config_set+0x144>
        break;
 1001bd0:	e320f000 	nop	{0}
    }

    /* Validate the parity parameter. */
    switch (parity)
 1001bd4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 1001bd8:	e3530002 	cmp	r3, #2
 1001bdc:	9a000001 	bls	1001be8 <alt_16550_line_config_set+0x68>
    case ALT_16550_PARITY_DISABLE:
    case ALT_16550_PARITY_ODD:
    case ALT_16550_PARITY_EVEN:
        break;
    default:
        return ALT_E_ERROR;
 1001be0:	e3e03000 	mvn	r3, #0
 1001be4:	ea000036 	b	1001cc4 <alt_16550_line_config_set+0x144>
        break;
 1001be8:	e320f000 	nop	{0}
    }

    /* Validate the stopbits parameter. */
    switch (stopbits)
 1001bec:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 1001bf0:	e3530001 	cmp	r3, #1
 1001bf4:	9a000001 	bls	1001c00 <alt_16550_line_config_set+0x80>
    {
    case ALT_16550_STOPBITS_1:
    case ALT_16550_STOPBITS_2:
        break;
    default:
        return ALT_E_ERROR;
 1001bf8:	e3e03000 	mvn	r3, #0
 1001bfc:	ea000030 	b	1001cc4 <alt_16550_line_config_set+0x144>
        break;
 1001c00:	e320f000 	nop	{0}
    }

    switch (handle->device)
 1001c04:	e51b3010 	ldr	r3, [fp, #-16]
 1001c08:	e1d330b0 	ldrh	r3, [r3]
 1001c0c:	e3530001 	cmp	r3, #1
 1001c10:	ca000002 	bgt	1001c20 <alt_16550_line_config_set+0xa0>
 1001c14:	e3530000 	cmp	r3, #0
 1001c18:	aa000002 	bge	1001c28 <alt_16550_line_config_set+0xa8>
 1001c1c:	ea000027 	b	1001cc0 <alt_16550_line_config_set+0x140>
 1001c20:	e3530c01 	cmp	r3, #256	; 0x100
 1001c24:	1a000025 	bne	1001cc0 <alt_16550_line_config_set+0x140>
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:

        /* Configure the number of databits */
        lcr |= ALT_UART_LCR_DLS_SET(databits);
 1001c28:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1001c2c:	e2033003 	and	r3, r3, #3
 1001c30:	e51b2008 	ldr	r2, [fp, #-8]
 1001c34:	e1823003 	orr	r3, r2, r3
 1001c38:	e50b3008 	str	r3, [fp, #-8]

        /* Configure the number of stopbits */
        lcr |= ALT_UART_LCR_STOP_SET(stopbits);
 1001c3c:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 1001c40:	e1a03103 	lsl	r3, r3, #2
 1001c44:	e2033004 	and	r3, r3, #4
 1001c48:	e51b2008 	ldr	r2, [fp, #-8]
 1001c4c:	e1823003 	orr	r3, r2, r3
 1001c50:	e50b3008 	str	r3, [fp, #-8]

        /* Configure the parity */
        if (parity != ALT_16550_PARITY_DISABLE)
 1001c54:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 1001c58:	e3530000 	cmp	r3, #0
 1001c5c:	0a000008 	beq	1001c84 <alt_16550_line_config_set+0x104>
        {
            /* Enable parity in LCR */
            lcr |= ALT_UART_LCR_PEN_SET_MSK;
 1001c60:	e51b3008 	ldr	r3, [fp, #-8]
 1001c64:	e3833008 	orr	r3, r3, #8
 1001c68:	e50b3008 	str	r3, [fp, #-8]

            if (parity == ALT_16550_PARITY_EVEN)
 1001c6c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 1001c70:	e3530002 	cmp	r3, #2
 1001c74:	1a000002 	bne	1001c84 <alt_16550_line_config_set+0x104>
            {
                /* Enable even parity in LCR; otherwise it's odd parity. */
                lcr |= ALT_UART_LCR_EPS_SET_MSK;
 1001c78:	e51b3008 	ldr	r3, [fp, #-8]
 1001c7c:	e3833010 	orr	r3, r3, #16
 1001c80:	e50b3008 	str	r3, [fp, #-8]
            }
        }

        /* Update LCR (Line Control Register) */
        alt_replbits_word(ALT_UART_LCR_ADDR(handle->location),
 1001c84:	e51b3010 	ldr	r3, [fp, #-16]
 1001c88:	e5933004 	ldr	r3, [r3, #4]
 1001c8c:	e283300c 	add	r3, r3, #12
 1001c90:	e5933000 	ldr	r3, [r3]
 1001c94:	e3c3101f 	bic	r1, r3, #31
 1001c98:	e51b3008 	ldr	r3, [fp, #-8]
 1001c9c:	e203201f 	and	r2, r3, #31
 1001ca0:	e51b3010 	ldr	r3, [fp, #-16]
 1001ca4:	e5933004 	ldr	r3, [r3, #4]
 1001ca8:	e283300c 	add	r3, r3, #12
 1001cac:	e1812002 	orr	r2, r1, r2
 1001cb0:	e5832000 	str	r2, [r3]
                        | ALT_UART_LCR_STOP_SET_MSK
                        | ALT_UART_LCR_PEN_SET_MSK
                        | ALT_UART_LCR_EPS_SET_MSK,
                        lcr);

        break;
 1001cb4:	e320f000 	nop	{0}

    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 1001cb8:	e3a03000 	mov	r3, #0
 1001cbc:	ea000000 	b	1001cc4 <alt_16550_line_config_set+0x144>
        return ALT_E_ERROR;
 1001cc0:	e3e03000 	mvn	r3, #0
}
 1001cc4:	e1a00003 	mov	r0, r3
 1001cc8:	e28bd000 	add	sp, fp, #0
 1001ccc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001cd0:	e12fff1e 	bx	lr

01001cd4 <alt_16550_mcr_mask_set_helper>:
    return ALT_E_SUCCESS;
}

static ALT_STATUS_CODE alt_16550_mcr_mask_set_helper(ALT_16550_HANDLE_t * handle,
                                                     uint32_t setmask)
{
 1001cd4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001cd8:	e28db000 	add	fp, sp, #0
 1001cdc:	e24dd00c 	sub	sp, sp, #12
 1001ce0:	e50b0008 	str	r0, [fp, #-8]
 1001ce4:	e50b100c 	str	r1, [fp, #-12]
    switch (handle->device)
 1001ce8:	e51b3008 	ldr	r3, [fp, #-8]
 1001cec:	e1d330b0 	ldrh	r3, [r3]
 1001cf0:	e3530001 	cmp	r3, #1
 1001cf4:	ca000002 	bgt	1001d04 <alt_16550_mcr_mask_set_helper+0x30>
 1001cf8:	e3530000 	cmp	r3, #0
 1001cfc:	aa000002 	bge	1001d0c <alt_16550_mcr_mask_set_helper+0x38>
 1001d00:	ea00000e 	b	1001d40 <alt_16550_mcr_mask_set_helper+0x6c>
 1001d04:	e3530c01 	cmp	r3, #256	; 0x100
 1001d08:	1a00000c 	bne	1001d40 <alt_16550_mcr_mask_set_helper+0x6c>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Set the bit in MCR (Modem Control Register). */
        alt_setbits_word(ALT_UART_MCR_ADDR(handle->location), setmask);
 1001d0c:	e51b3008 	ldr	r3, [fp, #-8]
 1001d10:	e5933004 	ldr	r3, [r3, #4]
 1001d14:	e2833010 	add	r3, r3, #16
 1001d18:	e5931000 	ldr	r1, [r3]
 1001d1c:	e51b3008 	ldr	r3, [fp, #-8]
 1001d20:	e5933004 	ldr	r3, [r3, #4]
 1001d24:	e2833010 	add	r3, r3, #16
 1001d28:	e51b200c 	ldr	r2, [fp, #-12]
 1001d2c:	e1812002 	orr	r2, r1, r2
 1001d30:	e5832000 	str	r2, [r3]
        break;
 1001d34:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 1001d38:	e3a03000 	mov	r3, #0
 1001d3c:	ea000000 	b	1001d44 <alt_16550_mcr_mask_set_helper+0x70>
        return ALT_E_ERROR;
 1001d40:	e3e03000 	mvn	r3, #0
}
 1001d44:	e1a00003 	mov	r0, r3
 1001d48:	e28bd000 	add	sp, fp, #0
 1001d4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001d50:	e12fff1e 	bx	lr

01001d54 <alt_16550_modem_enable_rts>:
    /* Clear MCR::Out2 (Modem Control Register :: Out2) bit. */
    return alt_16550_mcr_mask_clr_helper(handle, ALT_UART_MCR_OUT2_SET_MSK);
}

ALT_STATUS_CODE alt_16550_modem_enable_rts(ALT_16550_HANDLE_t * handle)
{
 1001d54:	e92d4800 	push	{fp, lr}
 1001d58:	e28db004 	add	fp, sp, #4
 1001d5c:	e24dd008 	sub	sp, sp, #8
 1001d60:	e50b0008 	str	r0, [fp, #-8]
    /* Set MCR::RTS (Modem Control Register :: Request To Send) bit. */
    return alt_16550_mcr_mask_set_helper(handle, ALT_UART_MCR_RTS_SET_MSK);
 1001d64:	e3a01002 	mov	r1, #2
 1001d68:	e51b0008 	ldr	r0, [fp, #-8]
 1001d6c:	ebffffd8 	bl	1001cd4 <alt_16550_mcr_mask_set_helper>
 1001d70:	e1a03000 	mov	r3, r0
}
 1001d74:	e1a00003 	mov	r0, r3
 1001d78:	e24bd004 	sub	sp, fp, #4
 1001d7c:	e8bd8800 	pop	{fp, pc}

01001d80 <alt_16550_modem_enable_dtr>:
    /* Clear MCR::RTS (Modem Control Register :: Request To Send) bit. */
    return alt_16550_mcr_mask_clr_helper(handle, ALT_UART_MCR_RTS_SET_MSK);
}

ALT_STATUS_CODE alt_16550_modem_enable_dtr(ALT_16550_HANDLE_t * handle)
{
 1001d80:	e92d4800 	push	{fp, lr}
 1001d84:	e28db004 	add	fp, sp, #4
 1001d88:	e24dd008 	sub	sp, sp, #8
 1001d8c:	e50b0008 	str	r0, [fp, #-8]
    /* Set MCR::DTR (Modem Control Register :: Data Terminal Ready) bit. */
    return alt_16550_mcr_mask_set_helper(handle, ALT_UART_MCR_DTR_SET_MSK);
 1001d90:	e3a01001 	mov	r1, #1
 1001d94:	e51b0008 	ldr	r0, [fp, #-8]
 1001d98:	ebffffcd 	bl	1001cd4 <alt_16550_mcr_mask_set_helper>
 1001d9c:	e1a03000 	mov	r3, r0
}
 1001da0:	e1a00003 	mov	r0, r3
 1001da4:	e24bd004 	sub	sp, fp, #4
 1001da8:	e8bd8800 	pop	{fp, pc}

01001dac <null_printf>:
#endif

extern FILE *term0;
extern FILE *term1;

static __inline int null_printf(__attribute__ ((unused))const char *format, ...){return 0;}
 1001dac:	e92d000f 	push	{r0, r1, r2, r3}
 1001db0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001db4:	e28db000 	add	fp, sp, #0
 1001db8:	e3a03000 	mov	r3, #0
 1001dbc:	e1a00003 	mov	r0, r3
 1001dc0:	e28bd000 	add	sp, fp, #0
 1001dc4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001dc8:	e28dd010 	add	sp, sp, #16
 1001dcc:	e12fff1e 	bx	lr

01001dd0 <alt_mmu_init>:
    __asm("MCR p15, 0, %0,       c2, c0, 1" : : "r" (ttbr1));
#endif
}

ALT_STATUS_CODE alt_mmu_init(void)
{
 1001dd0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001dd4:	e28db000 	add	fp, sp, #0
    return ALT_E_SUCCESS;
 1001dd8:	e3a03000 	mov	r3, #0
}
 1001ddc:	e1a00003 	mov	r0, r3
 1001de0:	e28bd000 	add	sp, fp, #0
 1001de4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001de8:	e12fff1e 	bx	lr

01001dec <alt_mmu_ttb1_init>:
{
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_ttb1_init(uint32_t* ttb1)
{
 1001dec:	e92d4800 	push	{fp, lr}
 1001df0:	e28db004 	add	fp, sp, #4
 1001df4:	e24dd018 	sub	sp, sp, #24
 1001df8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
 1001dfc:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
 1001e00:	e50b3010 	str	r3, [fp, #-16]
    return ttbcr;
 1001e04:	e51b3010 	ldr	r3, [fp, #-16]
    uint32_t ttbcr = ttbcr_get_helper();
 1001e08:	e50b3008 	str	r3, [fp, #-8]
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
 1001e0c:	e51b3008 	ldr	r3, [fp, #-8]
 1001e10:	e2033007 	and	r3, r3, #7
 1001e14:	e50b300c 	str	r3, [fp, #-12]

    /* Verify ttb1 buffer alignment. */
    if ((uintptr_t)ttb1 & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
 1001e18:	e51b300c 	ldr	r3, [fp, #-12]
 1001e1c:	e2833012 	add	r3, r3, #18
 1001e20:	e3a02001 	mov	r2, #1
 1001e24:	e1a03312 	lsl	r3, r2, r3
 1001e28:	e2432001 	sub	r2, r3, #1
 1001e2c:	e51b300c 	ldr	r3, [fp, #-12]
 1001e30:	e263300e 	rsb	r3, r3, #14
 1001e34:	e1a03312 	lsl	r3, r2, r3
 1001e38:	e1e03003 	mvn	r3, r3
 1001e3c:	e1a02003 	mov	r2, r3
 1001e40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001e44:	e0033002 	and	r3, r3, r2
 1001e48:	e3530000 	cmp	r3, #0
 1001e4c:	0a000001 	beq	1001e58 <alt_mmu_ttb1_init+0x6c>
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
 1001e50:	e3e03008 	mvn	r3, #8
 1001e54:	ea000004 	b	1001e6c <alt_mmu_ttb1_init+0x80>

    /* The TTB1 size really depends on TTBCR.N value and if it will be used for
     / TTBR0 or TTBR1. The documentation just states that it should be 16 KiB.
     / See ARMv7-A,R, section B3.5.4. */

    memset(ttb1, 0, ALT_MMU_TTB1_SIZE);
 1001e58:	e3a02901 	mov	r2, #16384	; 0x4000
 1001e5c:	e3a01000 	mov	r1, #0
 1001e60:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1001e64:	eb000b52 	bl	1004bb4 <memset>

    return ALT_E_SUCCESS;
 1001e68:	e3a03000 	mov	r3, #0
}
 1001e6c:	e1a00003 	mov	r0, r3
 1001e70:	e24bd004 	sub	sp, fp, #4
 1001e74:	e8bd8800 	pop	{fp, pc}

01001e78 <alt_mmu_enable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_enable(void)
{
 1001e78:	e92d4800 	push	{fp, lr}
 1001e7c:	e28db004 	add	fp, sp, #4
 1001e80:	e24dd010 	sub	sp, sp, #16
    uint32_t sctlr;
    alt_mmu_tlb_invalidate();
 1001e84:	eb0000ac 	bl	100213c <alt_mmu_tlb_invalidate>
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
 1001e88:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
 1001e8c:	e50b3010 	str	r3, [fp, #-16]
    return sctlr;
 1001e90:	e51b3010 	ldr	r3, [fp, #-16]

    sctlr = sctlr_get_helper();
 1001e94:	e50b3008 	str	r3, [fp, #-8]
    sctlr |= ALT_CPU_SCTLR_M_SET_MSK;
 1001e98:	e51b3008 	ldr	r3, [fp, #-8]
 1001e9c:	e3833001 	orr	r3, r3, #1
 1001ea0:	e50b3008 	str	r3, [fp, #-8]
 1001ea4:	e51b3008 	ldr	r3, [fp, #-8]
 1001ea8:	e50b300c 	str	r3, [fp, #-12]
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
 1001eac:	e51b300c 	ldr	r3, [fp, #-12]
 1001eb0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1001eb4:	e320f000 	nop	{0}
    sctlr_set_helper(sctlr);

    return ALT_E_SUCCESS;
 1001eb8:	e3a03000 	mov	r3, #0
}
 1001ebc:	e1a00003 	mov	r0, r3
 1001ec0:	e24bd004 	sub	sp, fp, #4
 1001ec4:	e8bd8800 	pop	{fp, pc}

01001ec8 <alt_mmu_TTBR0_set>:

    return (void *)(ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n) & ttbr0);
}

ALT_STATUS_CODE alt_mmu_TTBR0_set(const void* addr)
{
 1001ec8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001ecc:	e28db000 	add	fp, sp, #0
 1001ed0:	e24dd024 	sub	sp, sp, #36	; 0x24
 1001ed4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
 1001ed8:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
 1001edc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return ttbcr;
 1001ee0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    uint32_t ttbcr = ttbcr_get_helper();
 1001ee4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
 1001ee8:	e51b3008 	ldr	r3, [fp, #-8]
 1001eec:	e2033007 	and	r3, r3, #7
 1001ef0:	e50b300c 	str	r3, [fp, #-12]
    uint32_t ttbr0; 

    if ((uintptr_t)addr & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
 1001ef4:	e51b300c 	ldr	r3, [fp, #-12]
 1001ef8:	e2833012 	add	r3, r3, #18
 1001efc:	e3a02001 	mov	r2, #1
 1001f00:	e1a03312 	lsl	r3, r2, r3
 1001f04:	e2432001 	sub	r2, r3, #1
 1001f08:	e51b300c 	ldr	r3, [fp, #-12]
 1001f0c:	e263300e 	rsb	r3, r3, #14
 1001f10:	e1a03312 	lsl	r3, r2, r3
 1001f14:	e1e03003 	mvn	r3, r3
 1001f18:	e1a02003 	mov	r2, r3
 1001f1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001f20:	e0033002 	and	r3, r3, r2
 1001f24:	e3530000 	cmp	r3, #0
 1001f28:	0a000001 	beq	1001f34 <alt_mmu_TTBR0_set+0x6c>
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
 1001f2c:	e3e03008 	mvn	r3, #8
 1001f30:	ea000018 	b	1001f98 <alt_mmu_TTBR0_set+0xd0>
    }

    /* The Translation table must reside in Normal Memory, so pick the most
     / performant attributes. */
    ttbr0 =   ALT_CPU_TTBR0_RGN_WBA   /* Translation table is WBA for outer cacheability */
 1001f34:	e3a03048 	mov	r3, #72	; 0x48
 1001f38:	e50b3010 	str	r3, [fp, #-16]
              | ALT_CPU_TTBR0_IRGN_WBA; /* Translation table is WBA for inner cacheability */
    ttbr0 &= ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n);
 1001f3c:	e51b300c 	ldr	r3, [fp, #-12]
 1001f40:	e2833012 	add	r3, r3, #18
 1001f44:	e3a02001 	mov	r2, #1
 1001f48:	e1a03312 	lsl	r3, r2, r3
 1001f4c:	e2432001 	sub	r2, r3, #1
 1001f50:	e51b300c 	ldr	r3, [fp, #-12]
 1001f54:	e263300e 	rsb	r3, r3, #14
 1001f58:	e1a03312 	lsl	r3, r2, r3
 1001f5c:	e1e03003 	mvn	r3, r3
 1001f60:	e1a02003 	mov	r2, r3
 1001f64:	e51b3010 	ldr	r3, [fp, #-16]
 1001f68:	e0033002 	and	r3, r3, r2
 1001f6c:	e50b3010 	str	r3, [fp, #-16]
    ttbr0 |= (uint32_t)addr;
 1001f70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001f74:	e51b2010 	ldr	r2, [fp, #-16]
 1001f78:	e1823003 	orr	r3, r2, r3
 1001f7c:	e50b3010 	str	r3, [fp, #-16]
 1001f80:	e51b3010 	ldr	r3, [fp, #-16]
 1001f84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    __asm("MCR p15, 0, %0,       c2, c0, 0" : : "r" (ttbr0));
 1001f88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001f8c:	ee023f10 	mcr	15, 0, r3, cr2, cr0, {0}
}
 1001f90:	e320f000 	nop	{0}

    ttbr0_set_helper(ttbr0);

    return ALT_E_SUCCESS;
 1001f94:	e3a03000 	mov	r3, #0
}
 1001f98:	e1a00003 	mov	r0, r3
 1001f9c:	e28bd000 	add	sp, fp, #0
 1001fa0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001fa4:	e12fff1e 	bx	lr

01001fa8 <alt_mmu_TTBCR_set>:
}

ALT_STATUS_CODE alt_mmu_TTBCR_set(const bool enable_ttbr0_walk,
                                  const bool enable_ttbr1_walk,
                                  const uint32_t base_addr_width)
{
 1001fa8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001fac:	e28db000 	add	fp, sp, #0
 1001fb0:	e24dd014 	sub	sp, sp, #20
 1001fb4:	e1a03000 	mov	r3, r0
 1001fb8:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
 1001fbc:	e54b300d 	strb	r3, [fp, #-13]
 1001fc0:	e1a03001 	mov	r3, r1
 1001fc4:	e54b300e 	strb	r3, [fp, #-14]
    uint32_t ttbcr = 0;
 1001fc8:	e3a03000 	mov	r3, #0
 1001fcc:	e50b3008 	str	r3, [fp, #-8]

    if (!enable_ttbr0_walk)
 1001fd0:	e55b300d 	ldrb	r3, [fp, #-13]
 1001fd4:	e2233001 	eor	r3, r3, #1
 1001fd8:	e6ef3073 	uxtb	r3, r3
 1001fdc:	e3530000 	cmp	r3, #0
 1001fe0:	0a000002 	beq	1001ff0 <alt_mmu_TTBCR_set+0x48>
    {
        ttbcr |= ALT_CPU_TTBCR_PD0_SET_MSK;
 1001fe4:	e51b3008 	ldr	r3, [fp, #-8]
 1001fe8:	e3833010 	orr	r3, r3, #16
 1001fec:	e50b3008 	str	r3, [fp, #-8]
    }

    if (!enable_ttbr1_walk)
 1001ff0:	e55b300e 	ldrb	r3, [fp, #-14]
 1001ff4:	e2233001 	eor	r3, r3, #1
 1001ff8:	e6ef3073 	uxtb	r3, r3
 1001ffc:	e3530000 	cmp	r3, #0
 1002000:	0a000002 	beq	1002010 <alt_mmu_TTBCR_set+0x68>
    {
        ttbcr |= ALT_CPU_TTBCR_PD1_SET_MSK;
 1002004:	e51b3008 	ldr	r3, [fp, #-8]
 1002008:	e3833020 	orr	r3, r3, #32
 100200c:	e50b3008 	str	r3, [fp, #-8]
    }

    if (base_addr_width > 7)
 1002010:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002014:	e3530007 	cmp	r3, #7
 1002018:	9a000001 	bls	1002024 <alt_mmu_TTBCR_set+0x7c>
    {
        return ALT_E_BAD_ARG;
 100201c:	e3e03008 	mvn	r3, #8
 1002020:	ea000009 	b	100204c <alt_mmu_TTBCR_set+0xa4>
    }

    ttbcr |= base_addr_width;
 1002024:	e51b2008 	ldr	r2, [fp, #-8]
 1002028:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100202c:	e1823003 	orr	r3, r2, r3
 1002030:	e50b3008 	str	r3, [fp, #-8]
 1002034:	e51b3008 	ldr	r3, [fp, #-8]
 1002038:	e50b300c 	str	r3, [fp, #-12]
    __asm("MCR p15, 0, %0,       c2, c0, 2" : : "r" (ttbcr));
 100203c:	e51b300c 	ldr	r3, [fp, #-12]
 1002040:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
}
 1002044:	e320f000 	nop	{0}

    ttbcr_set_helper(ttbcr);

    return ALT_E_SUCCESS;
 1002048:	e3a03000 	mov	r3, #0
}
 100204c:	e1a00003 	mov	r0, r3
 1002050:	e28bd000 	add	sp, fp, #0
 1002054:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002058:	e12fff1e 	bx	lr

0100205c <alt_mmu_DACR_set>:

ALT_STATUS_CODE alt_mmu_DACR_set(const ALT_MMU_DAP_t domain_ap[],
                                 const size_t num_elem)
{
 100205c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002060:	e28db000 	add	fp, sp, #0
 1002064:	e24dd01c 	sub	sp, sp, #28
 1002068:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 100206c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t dacr = 0;
 1002070:	e3a03000 	mov	r3, #0
 1002074:	e50b3008 	str	r3, [fp, #-8]
    uint32_t i;

    if (num_elem > 16)
 1002078:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100207c:	e3530010 	cmp	r3, #16
 1002080:	9a000001 	bls	100208c <alt_mmu_DACR_set+0x30>
    {
        return ALT_E_BAD_ARG;
 1002084:	e3e03008 	mvn	r3, #8
 1002088:	ea000027 	b	100212c <alt_mmu_DACR_set+0xd0>
    }

    for (i = 0; i < num_elem; ++i)
 100208c:	e3a03000 	mov	r3, #0
 1002090:	e50b300c 	str	r3, [fp, #-12]
 1002094:	ea00001a 	b	1002104 <alt_mmu_DACR_set+0xa8>
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
 1002098:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 100209c:	e51b300c 	ldr	r3, [fp, #-12]
 10020a0:	e0823003 	add	r3, r2, r3
 10020a4:	e5d33000 	ldrb	r3, [r3]
 10020a8:	e54b300d 	strb	r3, [fp, #-13]

        switch (ap)
 10020ac:	e55b300d 	ldrb	r3, [fp, #-13]
 10020b0:	e3530001 	cmp	r3, #1
 10020b4:	ca000002 	bgt	10020c4 <alt_mmu_DACR_set+0x68>
 10020b8:	e3530000 	cmp	r3, #0
 10020bc:	aa000002 	bge	10020cc <alt_mmu_DACR_set+0x70>
 10020c0:	ea00000a 	b	10020f0 <alt_mmu_DACR_set+0x94>
 10020c4:	e3530003 	cmp	r3, #3
 10020c8:	1a000008 	bne	10020f0 <alt_mmu_DACR_set+0x94>
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
 10020cc:	e55b200d 	ldrb	r2, [fp, #-13]
 10020d0:	e51b300c 	ldr	r3, [fp, #-12]
 10020d4:	e1a03083 	lsl	r3, r3, #1
 10020d8:	e1a03312 	lsl	r3, r2, r3
 10020dc:	e1a02003 	mov	r2, r3
 10020e0:	e51b3008 	ldr	r3, [fp, #-8]
 10020e4:	e1833002 	orr	r3, r3, r2
 10020e8:	e50b3008 	str	r3, [fp, #-8]
            break;
 10020ec:	ea000001 	b	10020f8 <alt_mmu_DACR_set+0x9c>
        default:
        case ALT_MMU_DAP_RESERVED:
            return ALT_E_BAD_ARG;
 10020f0:	e3e03008 	mvn	r3, #8
 10020f4:	ea00000c 	b	100212c <alt_mmu_DACR_set+0xd0>
    for (i = 0; i < num_elem; ++i)
 10020f8:	e51b300c 	ldr	r3, [fp, #-12]
 10020fc:	e2833001 	add	r3, r3, #1
 1002100:	e50b300c 	str	r3, [fp, #-12]
 1002104:	e51b200c 	ldr	r2, [fp, #-12]
 1002108:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100210c:	e1520003 	cmp	r2, r3
 1002110:	3affffe0 	bcc	1002098 <alt_mmu_DACR_set+0x3c>
 1002114:	e51b3008 	ldr	r3, [fp, #-8]
 1002118:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    __asm("MCR p15, 0, %0,      c3, c0, 0" : : "r" (dacr));
 100211c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002120:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
}
 1002124:	e320f000 	nop	{0}
        }
    }

    dacr_set_helper(dacr);

    return ALT_E_SUCCESS;
 1002128:	e3a03000 	mov	r3, #0
}
 100212c:	e1a00003 	mov	r0, r3
 1002130:	e28bd000 	add	sp, fp, #0
 1002134:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002138:	e12fff1e 	bx	lr

0100213c <alt_mmu_tlb_invalidate>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_tlb_invalidate(void)
{
 100213c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002140:	e28db000 	add	fp, sp, #0
 1002144:	e24dd00c 	sub	sp, sp, #12
    /* Issue TLBIALL (TLB Invalidate All)
     / See ARMv7-A,R, section B4.1.135. */

    uint32_t dummy = 0;
 1002148:	e3a03000 	mov	r3, #0
 100214c:	e50b3008 	str	r3, [fp, #-8]
#if   defined(__ARMCOMPILER_VERSION)
    __asm("MCR p15, 0, %[dummy], c8, c3, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c8, c3, 0");
#else
    __asm("MCR p15, 0, %0,       c8, c3, 0" : : "r" (dummy));
 1002150:	e51b3008 	ldr	r3, [fp, #-8]
 1002154:	ee083f13 	mcr	15, 0, r3, cr8, cr3, {0}
#endif

    /* Ensure all TLB maintenance operations complete before returning. */
    __asm("dsb");
 1002158:	f57ff04f 	dsb	sy

    return ALT_E_SUCCESS;
 100215c:	e3a03000 	mov	r3, #0
}
 1002160:	e1a00003 	mov	r0, r3
 1002164:	e28bd000 	add	sp, fp, #0
 1002168:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100216c:	e12fff1e 	bx	lr

01002170 <alt_vregion_mark_pagetable>:
#define ALT_VREGION_1MIB         (2)                              /* 2 */
#define ALT_VREGION_PAGETABLE_S  ((int)ALT_MMU_TTB_NS_SECURE)     /* 0 */
#define ALT_VREGION_PAGETABLE_NS ((int)ALT_MMU_TTB_NS_NON_SECURE) /* 1 */

static ALT_STATUS_CODE alt_vregion_mark_pagetable(char * vregion, ALT_MMU_TTB_NS_t security)
{
 1002170:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002174:	e28db000 	add	fp, sp, #0
 1002178:	e24dd00c 	sub	sp, sp, #12
 100217c:	e50b0008 	str	r0, [fp, #-8]
 1002180:	e1a03001 	mov	r3, r1
 1002184:	e54b3009 	strb	r3, [fp, #-9]
    if (*vregion == ALT_VREGION_1MIB)
 1002188:	e51b3008 	ldr	r3, [fp, #-8]
 100218c:	e5d33000 	ldrb	r3, [r3]
 1002190:	e3530002 	cmp	r3, #2
 1002194:	1a000003 	bne	10021a8 <alt_vregion_mark_pagetable+0x38>
    {
        *vregion = (int)security;
 1002198:	e51b3008 	ldr	r3, [fp, #-8]
 100219c:	e55b2009 	ldrb	r2, [fp, #-9]
 10021a0:	e5c32000 	strb	r2, [r3]
 10021a4:	ea000006 	b	10021c4 <alt_vregion_mark_pagetable+0x54>
    }
    else if (*vregion != (int)security)
 10021a8:	e51b3008 	ldr	r3, [fp, #-8]
 10021ac:	e5d33000 	ldrb	r3, [r3]
 10021b0:	e55b2009 	ldrb	r2, [fp, #-9]
 10021b4:	e1520003 	cmp	r2, r3
 10021b8:	0a000001 	beq	10021c4 <alt_vregion_mark_pagetable+0x54>
    {
        return ALT_E_ERROR;
 10021bc:	e3e03000 	mvn	r3, #0
 10021c0:	ea000000 	b	10021c8 <alt_vregion_mark_pagetable+0x58>
    }

    return ALT_E_SUCCESS;
 10021c4:	e3a03000 	mov	r3, #0
}
 10021c8:	e1a00003 	mov	r0, r3
 10021cc:	e28bd000 	add	sp, fp, #0
 10021d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10021d4:	e12fff1e 	bx	lr

010021d8 <alt_mmu_va_space_storage_required_internal>:

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
                                                         const size_t num_mem_regions,
                                                         char * vregion)
{
 10021d8:	e92d4800 	push	{fp, lr}
 10021dc:	e28db004 	add	fp, sp, #4
 10021e0:	e24dd030 	sub	sp, sp, #48	; 0x30
 10021e4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
 10021e8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
 10021ec:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    size_t reqsize;
    uint32_t i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 10021f0:	e3a03000 	mov	r3, #0
 10021f4:	e50b300c 	str	r3, [fp, #-12]
 10021f8:	ea000007 	b	100221c <alt_mmu_va_space_storage_required_internal+0x44>
    {
        vregion[i] = ALT_VREGION_1MIB;
 10021fc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002200:	e51b300c 	ldr	r3, [fp, #-12]
 1002204:	e0823003 	add	r3, r2, r3
 1002208:	e3a02002 	mov	r2, #2
 100220c:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 1002210:	e51b300c 	ldr	r3, [fp, #-12]
 1002214:	e2833001 	add	r3, r3, #1
 1002218:	e50b300c 	str	r3, [fp, #-12]
 100221c:	e51b300c 	ldr	r3, [fp, #-12]
 1002220:	e3530a01 	cmp	r3, #4096	; 0x1000
 1002224:	3afffff4 	bcc	10021fc <alt_mmu_va_space_storage_required_internal+0x24>
    }

    /* For each region entry, mark the TTB1 as either fault, section, pagetable.
     * The total space required is the space required for the TTB1 (16 KiB) + pagetables * (1 KiB) */

    for (i = 0; i < num_mem_regions; ++i)
 1002228:	e3a03000 	mov	r3, #0
 100222c:	e50b300c 	str	r3, [fp, #-12]
 1002230:	ea000096 	b	1002490 <alt_mmu_va_space_storage_required_internal+0x2b8>
    {
        uintptr_t        va       = (uintptr_t)mem_regions[i].va;
 1002234:	e51b200c 	ldr	r2, [fp, #-12]
 1002238:	e1a03002 	mov	r3, r2
 100223c:	e1a03103 	lsl	r3, r3, #2
 1002240:	e0833002 	add	r3, r3, r2
 1002244:	e1a03103 	lsl	r3, r3, #2
 1002248:	e1a02003 	mov	r2, r3
 100224c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1002250:	e0833002 	add	r3, r3, r2
 1002254:	e5933000 	ldr	r3, [r3]
 1002258:	e50b3010 	str	r3, [fp, #-16]
        uintptr_t        pa       = (uintptr_t)mem_regions[i].pa;
 100225c:	e51b200c 	ldr	r2, [fp, #-12]
 1002260:	e1a03002 	mov	r3, r2
 1002264:	e1a03103 	lsl	r3, r3, #2
 1002268:	e0833002 	add	r3, r3, r2
 100226c:	e1a03103 	lsl	r3, r3, #2
 1002270:	e1a02003 	mov	r2, r3
 1002274:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1002278:	e0833002 	add	r3, r3, r2
 100227c:	e5933004 	ldr	r3, [r3, #4]
 1002280:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        uint32_t         size     = mem_regions[i].size;
 1002284:	e51b200c 	ldr	r2, [fp, #-12]
 1002288:	e1a03002 	mov	r3, r2
 100228c:	e1a03103 	lsl	r3, r3, #2
 1002290:	e0833002 	add	r3, r3, r2
 1002294:	e1a03103 	lsl	r3, r3, #2
 1002298:	e1a02003 	mov	r2, r3
 100229c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10022a0:	e0833002 	add	r3, r3, r2
 10022a4:	e5933008 	ldr	r3, [r3, #8]
 10022a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        ALT_MMU_TTB_NS_t security = mem_regions[i].security;
 10022ac:	e51b200c 	ldr	r2, [fp, #-12]
 10022b0:	e1a03002 	mov	r3, r2
 10022b4:	e1a03103 	lsl	r3, r3, #2
 10022b8:	e0833002 	add	r3, r3, r2
 10022bc:	e1a03103 	lsl	r3, r3, #2
 10022c0:	e1a02003 	mov	r2, r3
 10022c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10022c8:	e0833002 	add	r3, r3, r2
 10022cc:	e5d33010 	ldrb	r3, [r3, #16]
 10022d0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

        /* Verify [va] aligns to 4 KiB */
        if (va & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 10022d4:	e51b3010 	ldr	r3, [fp, #-16]
 10022d8:	e7eb3053 	ubfx	r3, r3, #0, #12
 10022dc:	e3530000 	cmp	r3, #0
 10022e0:	0a000001 	beq	10022ec <alt_mmu_va_space_storage_required_internal+0x114>
        {
            return 0;
 10022e4:	e3a03000 	mov	r3, #0
 10022e8:	ea000081 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Verify [pa] aligns to 4 KiB */
        if (pa & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 10022ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10022f0:	e7eb3053 	ubfx	r3, r3, #0, #12
 10022f4:	e3530000 	cmp	r3, #0
 10022f8:	0a000001 	beq	1002304 <alt_mmu_va_space_storage_required_internal+0x12c>
        {
            return 0;
 10022fc:	e3a03000 	mov	r3, #0
 1002300:	ea00007b 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Verify [size] aligns to 4 KiB */
        if (size & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 1002304:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002308:	e7eb3053 	ubfx	r3, r3, #0, #12
 100230c:	e3530000 	cmp	r3, #0
 1002310:	0a000001 	beq	100231c <alt_mmu_va_space_storage_required_internal+0x144>
        {
            return 0;
 1002314:	e3a03000 	mov	r3, #0
 1002318:	ea000075 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Mark the regions at the start of an unaligned 1 MiB as pagetable.
         * Align the [va] to 1 MiB and subtract that from the [size] left to describe. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
 100231c:	e51b3010 	ldr	r3, [fp, #-16]
 1002320:	e7f33053 	ubfx	r3, r3, #0, #20
 1002324:	e3530000 	cmp	r3, #0
 1002328:	0a000020 	beq	10023b0 <alt_mmu_va_space_storage_required_internal+0x1d8>
        {
            uint32_t segment = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
 100232c:	e51b3010 	ldr	r3, [fp, #-16]
 1002330:	e7f33053 	ubfx	r3, r3, #0, #20
 1002334:	e2633601 	rsb	r3, r3, #1048576	; 0x100000
 1002338:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 100233c:	e1520003 	cmp	r2, r3
 1002340:	31a03002 	movcc	r3, r2
 1002344:	21a03003 	movcs	r3, r3
 1002348:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

            /* Pagetables must be either S or NS. If the pagetable was
             * previously marked as something different, the regions described
             * will not be implementable. */
            if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 100234c:	e51b3010 	ldr	r3, [fp, #-16]
 1002350:	e1a03a23 	lsr	r3, r3, #20
 1002354:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002358:	e0823003 	add	r3, r2, r3
 100235c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 1002360:	e1a01002 	mov	r1, r2
 1002364:	e1a00003 	mov	r0, r3
 1002368:	ebffff80 	bl	1002170 <alt_vregion_mark_pagetable>
 100236c:	e1a03000 	mov	r3, r0
 1002370:	e3530000 	cmp	r3, #0
 1002374:	0a000001 	beq	1002380 <alt_mmu_va_space_storage_required_internal+0x1a8>
                                           security) != ALT_E_SUCCESS)
            {
                return 0;
 1002378:	e3a03000 	mov	r3, #0
 100237c:	ea00005c 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
            }

            va   += segment;
 1002380:	e51b2010 	ldr	r2, [fp, #-16]
 1002384:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002388:	e0823003 	add	r3, r2, r3
 100238c:	e50b3010 	str	r3, [fp, #-16]
            pa   += segment;
 1002390:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1002394:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002398:	e0823003 	add	r3, r2, r3
 100239c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            size -= segment;
 10023a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 10023a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10023a8:	e0423003 	sub	r3, r2, r3
 10023ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        /* Skip each 1 MiB aligned segment of size 1 MiB. These regions require
         * pagetable if the PA is not 1 MiB aligned. */

        /* [pa] is not used after this point. */

        if (pa & (ALT_MMU_SECTION_SIZE - 1))
 10023b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10023b4:	e7f33053 	ubfx	r3, r3, #0, #20
 10023b8:	e3530000 	cmp	r3, #0
 10023bc:	0a00001d 	beq	1002438 <alt_mmu_va_space_storage_required_internal+0x260>
        {
            /* PA is not 1 MiB aligned. Everything must use pagetables. */

            while (size >= ALT_MMU_SECTION_SIZE)
 10023c0:	ea000012 	b	1002410 <alt_mmu_va_space_storage_required_internal+0x238>
            {
                /* Pagetables must be either S or NS. If the pagetable was
                 * previously marked as something different, the regions described
                 * will not be implementable. */
                if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 10023c4:	e51b3010 	ldr	r3, [fp, #-16]
 10023c8:	e1a03a23 	lsr	r3, r3, #20
 10023cc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 10023d0:	e0823003 	add	r3, r2, r3
 10023d4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 10023d8:	e1a01002 	mov	r1, r2
 10023dc:	e1a00003 	mov	r0, r3
 10023e0:	ebffff62 	bl	1002170 <alt_vregion_mark_pagetable>
 10023e4:	e1a03000 	mov	r3, r0
 10023e8:	e3530000 	cmp	r3, #0
 10023ec:	0a000001 	beq	10023f8 <alt_mmu_va_space_storage_required_internal+0x220>
                                               security) != ALT_E_SUCCESS)
                {
                    return 0;
 10023f0:	e3a03000 	mov	r3, #0
 10023f4:	ea00003e 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
                }

                va   += ALT_MMU_SECTION_SIZE;
 10023f8:	e51b3010 	ldr	r3, [fp, #-16]
 10023fc:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1002400:	e50b3010 	str	r3, [fp, #-16]
                /* pa   += ALT_MMU_SECTION_SIZE; */
                size -= ALT_MMU_SECTION_SIZE;
 1002404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002408:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 100240c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            while (size >= ALT_MMU_SECTION_SIZE)
 1002410:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002414:	e3530601 	cmp	r3, #1048576	; 0x100000
 1002418:	2affffe9 	bcs	10023c4 <alt_mmu_va_space_storage_required_internal+0x1ec>
 100241c:	ea000008 	b	1002444 <alt_mmu_va_space_storage_required_internal+0x26c>
        {
            /* PA is 1 MiB aligned. Sections or supersections can be used. */

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                va   += ALT_MMU_SECTION_SIZE;
 1002420:	e51b3010 	ldr	r3, [fp, #-16]
 1002424:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1002428:	e50b3010 	str	r3, [fp, #-16]
                /* pa   += ALT_MMU_SECTION_SIZE; */
                size -= ALT_MMU_SECTION_SIZE;
 100242c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002430:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1002434:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            while (size >= ALT_MMU_SECTION_SIZE)
 1002438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100243c:	e3530601 	cmp	r3, #1048576	; 0x100000
 1002440:	2afffff6 	bcs	1002420 <alt_mmu_va_space_storage_required_internal+0x248>
            }
        }

        /* The remainder should be a 1 MiB aligned segment of less than 1 MiB. Mark that region as pagetable. */
        if (size)
 1002444:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002448:	e3530000 	cmp	r3, #0
 100244c:	0a00000c 	beq	1002484 <alt_mmu_va_space_storage_required_internal+0x2ac>
        {
            /* Pagetables must be either S or NS. If the pagetable was
             * previously marked as something different, the regions described
             * will not be implementable. */
            if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 1002450:	e51b3010 	ldr	r3, [fp, #-16]
 1002454:	e1a03a23 	lsr	r3, r3, #20
 1002458:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 100245c:	e0823003 	add	r3, r2, r3
 1002460:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 1002464:	e1a01002 	mov	r1, r2
 1002468:	e1a00003 	mov	r0, r3
 100246c:	ebffff3f 	bl	1002170 <alt_vregion_mark_pagetable>
 1002470:	e1a03000 	mov	r3, r0
 1002474:	e3530000 	cmp	r3, #0
 1002478:	0a000001 	beq	1002484 <alt_mmu_va_space_storage_required_internal+0x2ac>
                                           security) != ALT_E_SUCCESS)
            {
                return 0;
 100247c:	e3a03000 	mov	r3, #0
 1002480:	ea00001b 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
    for (i = 0; i < num_mem_regions; ++i)
 1002484:	e51b300c 	ldr	r3, [fp, #-12]
 1002488:	e2833001 	add	r3, r3, #1
 100248c:	e50b300c 	str	r3, [fp, #-12]
 1002490:	e51b200c 	ldr	r2, [fp, #-12]
 1002494:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 1002498:	e1520003 	cmp	r2, r3
 100249c:	3affff64 	bcc	1002234 <alt_mmu_va_space_storage_required_internal+0x5c>
            }
        }
    }

    /* Calculate the size as 16 KiB (TTB1) + 1 KiB * (TTB2 or the number of pagetables) */
    reqsize = ALT_MMU_TTB1_SIZE;
 10024a0:	e3a03901 	mov	r3, #16384	; 0x4000
 10024a4:	e50b3008 	str	r3, [fp, #-8]

    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 10024a8:	e3a03000 	mov	r3, #0
 10024ac:	e50b300c 	str	r3, [fp, #-12]
 10024b0:	ea00000b 	b	10024e4 <alt_mmu_va_space_storage_required_internal+0x30c>
    {
        if (vregion[i] != ALT_VREGION_1MIB)
 10024b4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 10024b8:	e51b300c 	ldr	r3, [fp, #-12]
 10024bc:	e0823003 	add	r3, r2, r3
 10024c0:	e5d33000 	ldrb	r3, [r3]
 10024c4:	e3530002 	cmp	r3, #2
 10024c8:	0a000002 	beq	10024d8 <alt_mmu_va_space_storage_required_internal+0x300>
        {
            reqsize += ALT_MMU_TTB2_SIZE;
 10024cc:	e51b3008 	ldr	r3, [fp, #-8]
 10024d0:	e2833b01 	add	r3, r3, #1024	; 0x400
 10024d4:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 10024d8:	e51b300c 	ldr	r3, [fp, #-12]
 10024dc:	e2833001 	add	r3, r3, #1
 10024e0:	e50b300c 	str	r3, [fp, #-12]
 10024e4:	e51b300c 	ldr	r3, [fp, #-12]
 10024e8:	e3530a01 	cmp	r3, #4096	; 0x1000
 10024ec:	3afffff0 	bcc	10024b4 <alt_mmu_va_space_storage_required_internal+0x2dc>
        }
    }

    return reqsize;
 10024f0:	e51b3008 	ldr	r3, [fp, #-8]
}
 10024f4:	e1a00003 	mov	r0, r3
 10024f8:	e24bd004 	sub	sp, fp, #4
 10024fc:	e8bd8800 	pop	{fp, pc}

01002500 <alt_mmu_va_space_storage_required>:

size_t alt_mmu_va_space_storage_required(const ALT_MMU_MEM_REGION_t* mem_regions,
                                         const size_t num_mem_regions)
{
 1002500:	e92d4800 	push	{fp, lr}
 1002504:	e28db004 	add	fp, sp, #4
 1002508:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100250c:	e24dd008 	sub	sp, sp, #8
 1002510:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002514:	e2433004 	sub	r3, r3, #4
 1002518:	e5030004 	str	r0, [r3, #-4]
 100251c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002520:	e2433004 	sub	r3, r3, #4
 1002524:	e5031008 	str	r1, [r3, #-8]
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    return alt_mmu_va_space_storage_required_internal(mem_regions,
 1002528:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 100252c:	e2433004 	sub	r3, r3, #4
 1002530:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002534:	e2422004 	sub	r2, r2, #4
 1002538:	e1a01002 	mov	r1, r2
 100253c:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002540:	e2422004 	sub	r2, r2, #4
 1002544:	e1a00002 	mov	r0, r2
 1002548:	e1a02003 	mov	r2, r3
 100254c:	e5111008 	ldr	r1, [r1, #-8]
 1002550:	e5100004 	ldr	r0, [r0, #-4]
 1002554:	ebffff1f 	bl	10021d8 <alt_mmu_va_space_storage_required_internal>
 1002558:	e1a03000 	mov	r3, r0
                                                      num_mem_regions,
                                                      vregion);
}
 100255c:	e1a00003 	mov	r0, r3
 1002560:	e24bd004 	sub	sp, fp, #4
 1002564:	e8bd8800 	pop	{fp, pc}

01002568 <alt_mmu_va_space_gen_pagetable>:

static __inline uint32_t alt_mmu_va_space_gen_pagetable(uintptr_t pagetable,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 1002568:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 100256c:	e28db000 	add	fp, sp, #0
 1002570:	e24dd00c 	sub	sp, sp, #12
 1002574:	e50b0008 	str	r0, [fp, #-8]
 1002578:	e50b100c 	str	r1, [fp, #-12]
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 100257c:	e51b300c 	ldr	r3, [fp, #-12]
 1002580:	e5d3300d 	ldrb	r3, [r3, #13]
 1002584:	e35300ff 	cmp	r3, #255	; 0xff
 1002588:	1a000001 	bne	1002594 <alt_mmu_va_space_gen_pagetable+0x2c>
    {
        return 0;
 100258c:	e3a03000 	mov	r3, #0
 1002590:	ea000008 	b	10025b8 <alt_mmu_va_space_gen_pagetable+0x50>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x1)
        | ALT_MMU_TTB1_PAGE_TBL_NS_SET(mem->security)
 1002594:	e51b300c 	ldr	r3, [fp, #-12]
 1002598:	e5d33010 	ldrb	r3, [r3, #16]
 100259c:	e1a03183 	lsl	r3, r3, #3
        | ALT_MMU_TTB1_PAGE_TBL_DOMAIN_SET(0)
        | ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_SET(pagetable >> 10);
 10025a0:	e2032008 	and	r2, r3, #8
 10025a4:	e51b3008 	ldr	r3, [fp, #-8]
 10025a8:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10025ac:	e3c33003 	bic	r3, r3, #3
 10025b0:	e1823003 	orr	r3, r2, r3
 10025b4:	e3833001 	orr	r3, r3, #1
}
 10025b8:	e1a00003 	mov	r0, r3
 10025bc:	e28bd000 	add	sp, fp, #0
 10025c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10025c4:	e12fff1e 	bx	lr

010025c8 <alt_mmu_va_space_gen_section>:

static __inline uint32_t alt_mmu_va_space_gen_section(uintptr_t pa,
                                                    const ALT_MMU_MEM_REGION_t * mem)
{
 10025c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10025cc:	e28db000 	add	fp, sp, #0
 10025d0:	e24dd01c 	sub	sp, sp, #28
 10025d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 10025d8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 10025dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10025e0:	e5d3300d 	ldrb	r3, [r3, #13]
 10025e4:	e1a03223 	lsr	r3, r3, #4
 10025e8:	e6ef3073 	uxtb	r3, r3
 10025ec:	e2033007 	and	r3, r3, #7
 10025f0:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 10025f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10025f8:	e5d3300d 	ldrb	r3, [r3, #13]
 10025fc:	e1a030a3 	lsr	r3, r3, #1
 1002600:	e6ef3073 	uxtb	r3, r3
 1002604:	e2033001 	and	r3, r3, #1
 1002608:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 100260c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002610:	e5d3300d 	ldrb	r3, [r3, #13]
 1002614:	e2033001 	and	r3, r3, #1
 1002618:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 100261c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002620:	e5d3300d 	ldrb	r3, [r3, #13]
 1002624:	e35300ff 	cmp	r3, #255	; 0xff
 1002628:	1a000001 	bne	1002634 <alt_mmu_va_space_gen_section+0x6c>
    {
        return 0;
 100262c:	e3a03000 	mov	r3, #0
 1002630:	ea000029 	b	10026dc <alt_mmu_va_space_gen_section+0x114>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
 1002634:	e51b3010 	ldr	r3, [fp, #-16]
 1002638:	e1a03103 	lsl	r3, r3, #2
 100263c:	e2033004 	and	r3, r3, #4
 1002640:	e3832002 	orr	r2, r3, #2
        | ALT_MMU_TTB1_SECTION_C_SET(c)
 1002644:	e51b300c 	ldr	r3, [fp, #-12]
 1002648:	e1a03183 	lsl	r3, r3, #3
 100264c:	e2033008 	and	r3, r3, #8
 1002650:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
 1002654:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002658:	e5d3300f 	ldrb	r3, [r3, #15]
 100265c:	e1a03203 	lsl	r3, r3, #4
 1002660:	e2033010 	and	r3, r3, #16
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
 1002664:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
 1002668:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100266c:	e5d3300c 	ldrb	r3, [r3, #12]
 1002670:	e1a03683 	lsl	r3, r3, #13
 1002674:	e2031902 	and	r1, r3, #32768	; 0x8000
 1002678:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100267c:	e5d3300c 	ldrb	r3, [r3, #12]
 1002680:	e1a03503 	lsl	r3, r3, #10
 1002684:	e2033b03 	and	r3, r3, #3072	; 0xc00
 1002688:	e1813003 	orr	r3, r1, r3
 100268c:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
 1002690:	e51b3008 	ldr	r3, [fp, #-8]
 1002694:	e1a03603 	lsl	r3, r3, #12
 1002698:	e2033a07 	and	r3, r3, #28672	; 0x7000
 100269c:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
 10026a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10026a4:	e5d3300e 	ldrb	r3, [r3, #14]
 10026a8:	e1a03803 	lsl	r3, r3, #16
 10026ac:	e2033801 	and	r3, r3, #65536	; 0x10000
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
 10026b0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
 10026b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10026b8:	e5d33010 	ldrb	r3, [r3, #16]
 10026bc:	e1a03983 	lsl	r3, r3, #19
 10026c0:	e2033702 	and	r3, r3, #524288	; 0x80000
 10026c4:	e1823003 	orr	r3, r2, r3
 10026c8:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB1_SECTION_BASE_ADDR_SET(pa >> 20);
 10026cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10026d0:	e1a03a23 	lsr	r3, r3, #20
 10026d4:	e1a03a03 	lsl	r3, r3, #20
 10026d8:	e1823003 	orr	r3, r2, r3
}
 10026dc:	e1a00003 	mov	r0, r3
 10026e0:	e28bd000 	add	sp, fp, #0
 10026e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10026e8:	e12fff1e 	bx	lr

010026ec <alt_mmu_va_space_gen_supersection>:

static __inline uint32_t alt_mmu_va_space_gen_supersection(uintptr_t pa,
                                                         const ALT_MMU_MEM_REGION_t * mem)
{
 10026ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10026f0:	e28db000 	add	fp, sp, #0
 10026f4:	e24dd01c 	sub	sp, sp, #28
 10026f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 10026fc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1002700:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002704:	e5d3300d 	ldrb	r3, [r3, #13]
 1002708:	e1a03223 	lsr	r3, r3, #4
 100270c:	e6ef3073 	uxtb	r3, r3
 1002710:	e2033007 	and	r3, r3, #7
 1002714:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 1002718:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100271c:	e5d3300d 	ldrb	r3, [r3, #13]
 1002720:	e1a030a3 	lsr	r3, r3, #1
 1002724:	e6ef3073 	uxtb	r3, r3
 1002728:	e2033001 	and	r3, r3, #1
 100272c:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1002730:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002734:	e5d3300d 	ldrb	r3, [r3, #13]
 1002738:	e2033001 	and	r3, r3, #1
 100273c:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002740:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002744:	e5d3300d 	ldrb	r3, [r3, #13]
 1002748:	e35300ff 	cmp	r3, #255	; 0xff
 100274c:	1a000001 	bne	1002758 <alt_mmu_va_space_gen_supersection+0x6c>
    {
        return 0;
 1002750:	e3a03000 	mov	r3, #0
 1002754:	ea000029 	b	1002800 <alt_mmu_va_space_gen_supersection+0x114>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
 1002758:	e51b3010 	ldr	r3, [fp, #-16]
 100275c:	e1a03103 	lsl	r3, r3, #2
 1002760:	e2033004 	and	r3, r3, #4
 1002764:	e3833701 	orr	r3, r3, #262144	; 0x40000
 1002768:	e3833002 	orr	r3, r3, #2
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
 100276c:	e51b200c 	ldr	r2, [fp, #-12]
 1002770:	e1a02182 	lsl	r2, r2, #3
 1002774:	e2022008 	and	r2, r2, #8
 1002778:	e1832002 	orr	r2, r3, r2
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
 100277c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002780:	e5d3300f 	ldrb	r3, [r3, #15]
 1002784:	e1a03203 	lsl	r3, r3, #4
 1002788:	e2033010 	and	r3, r3, #16
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
 100278c:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
 1002790:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002794:	e5d3300c 	ldrb	r3, [r3, #12]
 1002798:	e1a03683 	lsl	r3, r3, #13
 100279c:	e2031902 	and	r1, r3, #32768	; 0x8000
 10027a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10027a4:	e5d3300c 	ldrb	r3, [r3, #12]
 10027a8:	e1a03503 	lsl	r3, r3, #10
 10027ac:	e2033b03 	and	r3, r3, #3072	; 0xc00
 10027b0:	e1813003 	orr	r3, r1, r3
 10027b4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
 10027b8:	e51b3008 	ldr	r3, [fp, #-8]
 10027bc:	e1a03603 	lsl	r3, r3, #12
 10027c0:	e2033a07 	and	r3, r3, #28672	; 0x7000
 10027c4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
 10027c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10027cc:	e5d3300e 	ldrb	r3, [r3, #14]
 10027d0:	e1a03803 	lsl	r3, r3, #16
 10027d4:	e2033801 	and	r3, r3, #65536	; 0x10000
        | ALT_MMU_TTB1_SUPERSECTION_NG_SET(0)
 10027d8:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_NS_SET(mem->security)
 10027dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10027e0:	e5d33010 	ldrb	r3, [r3, #16]
 10027e4:	e1a03983 	lsl	r3, r3, #19
 10027e8:	e2033702 	and	r3, r3, #524288	; 0x80000
 10027ec:	e1823003 	orr	r3, r2, r3
 10027f0:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_BASE_ADDR_SET(pa >> 24);
 10027f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10027f8:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
 10027fc:	e1823003 	orr	r3, r2, r3
}
 1002800:	e1a00003 	mov	r0, r3
 1002804:	e28bd000 	add	sp, fp, #0
 1002808:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100280c:	e12fff1e 	bx	lr

01002810 <alt_mmu_va_space_gen_smallpage>:

static __inline uint32_t alt_mmu_va_space_gen_smallpage(uintptr_t pa,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 1002810:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002814:	e28db000 	add	fp, sp, #0
 1002818:	e24dd01c 	sub	sp, sp, #28
 100281c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1002820:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1002824:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002828:	e5d3300d 	ldrb	r3, [r3, #13]
 100282c:	e1a03223 	lsr	r3, r3, #4
 1002830:	e6ef3073 	uxtb	r3, r3
 1002834:	e2033007 	and	r3, r3, #7
 1002838:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 100283c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002840:	e5d3300d 	ldrb	r3, [r3, #13]
 1002844:	e1a030a3 	lsr	r3, r3, #1
 1002848:	e6ef3073 	uxtb	r3, r3
 100284c:	e2033001 	and	r3, r3, #1
 1002850:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1002854:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002858:	e5d3300d 	ldrb	r3, [r3, #13]
 100285c:	e2033001 	and	r3, r3, #1
 1002860:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002864:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002868:	e5d3300d 	ldrb	r3, [r3, #13]
 100286c:	e35300ff 	cmp	r3, #255	; 0xff
 1002870:	1a000001 	bne	100287c <alt_mmu_va_space_gen_smallpage+0x6c>
    {
        return 0;
 1002874:	e3a03000 	mov	r3, #0
 1002878:	ea000023 	b	100290c <alt_mmu_va_space_gen_smallpage+0xfc>

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
 100287c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002880:	e5d3300f 	ldrb	r3, [r3, #15]
 1002884:	e2033001 	and	r3, r3, #1
 1002888:	e3832002 	orr	r2, r3, #2
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
 100288c:	e51b3010 	ldr	r3, [fp, #-16]
 1002890:	e1a03103 	lsl	r3, r3, #2
 1002894:	e2033004 	and	r3, r3, #4
 1002898:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
 100289c:	e51b300c 	ldr	r3, [fp, #-12]
 10028a0:	e1a03183 	lsl	r3, r3, #3
 10028a4:	e2033008 	and	r3, r3, #8
 10028a8:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
 10028ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10028b0:	e5d3300c 	ldrb	r3, [r3, #12]
 10028b4:	e1a03383 	lsl	r3, r3, #7
 10028b8:	e2031c02 	and	r1, r3, #512	; 0x200
 10028bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10028c0:	e5d3300c 	ldrb	r3, [r3, #12]
 10028c4:	e1a03203 	lsl	r3, r3, #4
 10028c8:	e2033030 	and	r3, r3, #48	; 0x30
 10028cc:	e1813003 	orr	r3, r1, r3
 10028d0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
 10028d4:	e51b3008 	ldr	r3, [fp, #-8]
 10028d8:	e1a03303 	lsl	r3, r3, #6
 10028dc:	e2033d07 	and	r3, r3, #448	; 0x1c0
 10028e0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
 10028e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10028e8:	e5d3300e 	ldrb	r3, [r3, #14]
 10028ec:	e1a03503 	lsl	r3, r3, #10
 10028f0:	e2033b01 	and	r3, r3, #1024	; 0x400
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
 10028f4:	e1823003 	orr	r3, r2, r3
 10028f8:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
 10028fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002900:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
 1002904:	e3c3300f 	bic	r3, r3, #15
 1002908:	e1823003 	orr	r3, r2, r3
}
 100290c:	e1a00003 	mov	r0, r3
 1002910:	e28bd000 	add	sp, fp, #0
 1002914:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002918:	e12fff1e 	bx	lr

0100291c <alt_mmu_va_space_gen_largepage>:

static __inline uint32_t alt_mmu_va_space_gen_largepage(uintptr_t pa,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 100291c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002920:	e28db000 	add	fp, sp, #0
 1002924:	e24dd01c 	sub	sp, sp, #28
 1002928:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 100292c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1002930:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002934:	e5d3300d 	ldrb	r3, [r3, #13]
 1002938:	e1a03223 	lsr	r3, r3, #4
 100293c:	e6ef3073 	uxtb	r3, r3
 1002940:	e2033007 	and	r3, r3, #7
 1002944:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 1002948:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100294c:	e5d3300d 	ldrb	r3, [r3, #13]
 1002950:	e1a030a3 	lsr	r3, r3, #1
 1002954:	e6ef3073 	uxtb	r3, r3
 1002958:	e2033001 	and	r3, r3, #1
 100295c:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1002960:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002964:	e5d3300d 	ldrb	r3, [r3, #13]
 1002968:	e2033001 	and	r3, r3, #1
 100296c:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002970:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002974:	e5d3300d 	ldrb	r3, [r3, #13]
 1002978:	e35300ff 	cmp	r3, #255	; 0xff
 100297c:	1a000001 	bne	1002988 <alt_mmu_va_space_gen_largepage+0x6c>
    {
        return 0;
 1002980:	e3a03000 	mov	r3, #0
 1002984:	ea000024 	b	1002a1c <alt_mmu_va_space_gen_largepage+0x100>

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
 1002988:	e51b3010 	ldr	r3, [fp, #-16]
 100298c:	e1a03103 	lsl	r3, r3, #2
 1002990:	e2033004 	and	r3, r3, #4
 1002994:	e3832001 	orr	r2, r3, #1
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
 1002998:	e51b300c 	ldr	r3, [fp, #-12]
 100299c:	e1a03183 	lsl	r3, r3, #3
 10029a0:	e2033008 	and	r3, r3, #8
 10029a4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
 10029a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029ac:	e5d3300c 	ldrb	r3, [r3, #12]
 10029b0:	e1a03383 	lsl	r3, r3, #7
 10029b4:	e2031c02 	and	r1, r3, #512	; 0x200
 10029b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029bc:	e5d3300c 	ldrb	r3, [r3, #12]
 10029c0:	e1a03203 	lsl	r3, r3, #4
 10029c4:	e2033030 	and	r3, r3, #48	; 0x30
 10029c8:	e1813003 	orr	r3, r1, r3
 10029cc:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
 10029d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029d4:	e5d3300e 	ldrb	r3, [r3, #14]
 10029d8:	e1a03503 	lsl	r3, r3, #10
 10029dc:	e2033b01 	and	r3, r3, #1024	; 0x400
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
 10029e0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
 10029e4:	e51b3008 	ldr	r3, [fp, #-8]
 10029e8:	e1a03603 	lsl	r3, r3, #12
 10029ec:	e2033a07 	and	r3, r3, #28672	; 0x7000
 10029f0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
 10029f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029f8:	e5d3300f 	ldrb	r3, [r3, #15]
 10029fc:	e1a03783 	lsl	r3, r3, #15
 1002a00:	e6ff3073 	uxth	r3, r3
 1002a04:	e1823003 	orr	r3, r2, r3
 1002a08:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_BASE_ADDR_SET(pa >> 16);
 1002a0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002a10:	e1a03823 	lsr	r3, r3, #16
 1002a14:	e1a03803 	lsl	r3, r3, #16
 1002a18:	e1823003 	orr	r3, r2, r3
}
 1002a1c:	e1a00003 	mov	r0, r3
 1002a20:	e28bd000 	add	sp, fp, #0
 1002a24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002a28:	e12fff1e 	bx	lr

01002a2c <alt_mmu_ttb2_init>:

static ALT_STATUS_CODE alt_mmu_ttb2_init(uint32_t * ttb2)
{
 1002a2c:	e92d4800 	push	{fp, lr}
 1002a30:	e28db004 	add	fp, sp, #4
 1002a34:	e24dd008 	sub	sp, sp, #8
 1002a38:	e50b0008 	str	r0, [fp, #-8]
    /* For TTB2 (page tables), the page table base address in TTB1 is
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    if ((uintptr_t)ttb2 & ((1 << 10) - 1))
 1002a3c:	e51b3008 	ldr	r3, [fp, #-8]
 1002a40:	e7e93053 	ubfx	r3, r3, #0, #10
 1002a44:	e3530000 	cmp	r3, #0
 1002a48:	0a000001 	beq	1002a54 <alt_mmu_ttb2_init+0x28>
    {
        return ALT_E_BAD_ARG;
 1002a4c:	e3e03008 	mvn	r3, #8
 1002a50:	ea000004 	b	1002a68 <alt_mmu_ttb2_init+0x3c>
    }

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
 1002a54:	e3a02b01 	mov	r2, #1024	; 0x400
 1002a58:	e3a01000 	mov	r1, #0
 1002a5c:	e51b0008 	ldr	r0, [fp, #-8]
 1002a60:	eb000853 	bl	1004bb4 <memset>
    return ALT_E_SUCCESS;
 1002a64:	e3a03000 	mov	r3, #0
}
 1002a68:	e1a00003 	mov	r0, r3
 1002a6c:	e24bd004 	sub	sp, fp, #4
 1002a70:	e8bd8800 	pop	{fp, pc}

01002a74 <alt_mmu_va_space_create>:
ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
                                        const ALT_MMU_MEM_REGION_t* mem_regions,
                                        const size_t num_mem_regions,
                                        alt_mmu_ttb_alloc_t ttb_alloc,
                                        void * ttb_alloc_context)
{
 1002a74:	e92d4800 	push	{fp, lr}
 1002a78:	e28db004 	add	fp, sp, #4
 1002a7c:	e24ddd43 	sub	sp, sp, #4288	; 0x10c0
 1002a80:	e24bca01 	sub	ip, fp, #4096	; 0x1000
 1002a84:	e24cc004 	sub	ip, ip, #4
 1002a88:	e50c00b4 	str	r0, [ip, #-180]	; 0xffffff4c
 1002a8c:	e24b0a01 	sub	r0, fp, #4096	; 0x1000
 1002a90:	e2400004 	sub	r0, r0, #4
 1002a94:	e50010b8 	str	r1, [r0, #-184]	; 0xffffff48
 1002a98:	e24b1a01 	sub	r1, fp, #4096	; 0x1000
 1002a9c:	e2411004 	sub	r1, r1, #4
 1002aa0:	e50120bc 	str	r2, [r1, #-188]	; 0xffffff44
 1002aa4:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002aa8:	e2422004 	sub	r2, r2, #4
 1002aac:	e50230c0 	str	r3, [r2, #-192]	; 0xffffff40
    int k;
    size_t i;
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    size_t reqsize = alt_mmu_va_space_storage_required_internal(mem_regions,
 1002ab0:	e24b3d42 	sub	r3, fp, #4224	; 0x1080
 1002ab4:	e2433004 	sub	r3, r3, #4
 1002ab8:	e243300c 	sub	r3, r3, #12
 1002abc:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002ac0:	e2422004 	sub	r2, r2, #4
 1002ac4:	e1a01002 	mov	r1, r2
 1002ac8:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002acc:	e2422004 	sub	r2, r2, #4
 1002ad0:	e1a00002 	mov	r0, r2
 1002ad4:	e1a02003 	mov	r2, r3
 1002ad8:	e51110bc 	ldr	r1, [r1, #-188]	; 0xffffff44
 1002adc:	e51000b8 	ldr	r0, [r0, #-184]	; 0xffffff48
 1002ae0:	ebfffdbc 	bl	10021d8 <alt_mmu_va_space_storage_required_internal>
 1002ae4:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
                                                                num_mem_regions,
                                                                vregion);
    char * memory;
    size_t allocated = 0;
 1002ae8:	e3a03000 	mov	r3, #0
 1002aec:	e50b3010 	str	r3, [fp, #-16]
    if (reqsize == 0)
 1002af0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 1002af4:	e3530000 	cmp	r3, #0
 1002af8:	1a000001 	bne	1002b04 <alt_mmu_va_space_create+0x90>
    {
        return ALT_E_ERROR;
 1002afc:	e3e03000 	mvn	r3, #0
 1002b00:	ea00034e 	b	1003840 <alt_mmu_va_space_create+0xdcc>
    }

    memory    = ttb_alloc(reqsize, ttb_alloc_context);
 1002b04:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002b08:	e2433004 	sub	r3, r3, #4
 1002b0c:	e51330c0 	ldr	r3, [r3, #-192]	; 0xffffff40
 1002b10:	e59b1004 	ldr	r1, [fp, #4]
 1002b14:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1002b18:	e12fff33 	blx	r3
 1002b1c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0

    /* Verify allocation */

    if (memory == NULL)
 1002b20:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1002b24:	e3530000 	cmp	r3, #0
 1002b28:	1a000001 	bne	1002b34 <alt_mmu_va_space_create+0xc0>
    {
        return ALT_E_ERROR;
 1002b2c:	e3e03000 	mvn	r3, #0
 1002b30:	ea000342 	b	1003840 <alt_mmu_va_space_create+0xdcc>
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    /* The stricter of the two alignment is 16 KiB. */

    if ((uintptr_t)memory & ((1 << 14) - 1))
 1002b34:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1002b38:	e7ed3053 	ubfx	r3, r3, #0, #14
 1002b3c:	e3530000 	cmp	r3, #0
 1002b40:	0a000001 	beq	1002b4c <alt_mmu_va_space_create+0xd8>
    {
        return ALT_E_BAD_ARG;
 1002b44:	e3e03008 	mvn	r3, #8
 1002b48:	ea00033c 	b	1003840 <alt_mmu_va_space_create+0xdcc>
    }

    /* "allocate" space for the TTB1. */
    if (allocated + ALT_MMU_TTB1_SIZE > reqsize)
 1002b4c:	e51b3010 	ldr	r3, [fp, #-16]
 1002b50:	e2833901 	add	r3, r3, #16384	; 0x4000
 1002b54:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1002b58:	e1520003 	cmp	r2, r3
 1002b5c:	2a000001 	bcs	1002b68 <alt_mmu_va_space_create+0xf4>
    {
        return ALT_E_ERROR;
 1002b60:	e3e03000 	mvn	r3, #0
 1002b64:	ea000335 	b	1003840 <alt_mmu_va_space_create+0xdcc>
    }
    *ttb1 = (uint32_t *)memory;
 1002b68:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002b6c:	e2433004 	sub	r3, r3, #4
 1002b70:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002b74:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002b78:	e5832000 	str	r2, [r3]
    allocated += ALT_MMU_TTB1_SIZE;
 1002b7c:	e51b3010 	ldr	r3, [fp, #-16]
 1002b80:	e2833901 	add	r3, r3, #16384	; 0x4000
 1002b84:	e50b3010 	str	r3, [fp, #-16]

    if (alt_mmu_ttb1_init(*ttb1) != ALT_E_SUCCESS)
 1002b88:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002b8c:	e2433004 	sub	r3, r3, #4
 1002b90:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002b94:	e5933000 	ldr	r3, [r3]
 1002b98:	e1a00003 	mov	r0, r3
 1002b9c:	ebfffc92 	bl	1001dec <alt_mmu_ttb1_init>
 1002ba0:	e1a03000 	mov	r3, r0
 1002ba4:	e3530000 	cmp	r3, #0
 1002ba8:	0a000001 	beq	1002bb4 <alt_mmu_va_space_create+0x140>
    {
        return ALT_E_ERROR;
 1002bac:	e3e03000 	mvn	r3, #0
 1002bb0:	ea000322 	b	1003840 <alt_mmu_va_space_create+0xdcc>
    }

    /* "allocate" space for each pagetable in [vregion] */
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
 1002bb4:	e3a03000 	mov	r3, #0
 1002bb8:	e50b3008 	str	r3, [fp, #-8]
 1002bbc:	ea00003a 	b	1002cac <alt_mmu_va_space_create+0x238>
    {
        if (vregion[k] != ALT_VREGION_1MIB)
 1002bc0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002bc4:	e2433004 	sub	r3, r3, #4
 1002bc8:	e1a02003 	mov	r2, r3
 1002bcc:	e51b3008 	ldr	r3, [fp, #-8]
 1002bd0:	e0823003 	add	r3, r2, r3
 1002bd4:	e243308c 	sub	r3, r3, #140	; 0x8c
 1002bd8:	e5d33000 	ldrb	r3, [r3]
 1002bdc:	e3530002 	cmp	r3, #2
 1002be0:	0a00002e 	beq	1002ca0 <alt_mmu_va_space_create+0x22c>
        {
            uint32_t desc;
            ALT_MMU_MEM_REGION_t mem_region;
            uint32_t * pagetable = (uint32_t *)(memory + allocated);
 1002be4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002be8:	e51b3010 	ldr	r3, [fp, #-16]
 1002bec:	e0823003 	add	r3, r2, r3
 1002bf0:	e50b308c 	str	r3, [fp, #-140]	; 0xffffff74
            if (allocated + ALT_MMU_TTB2_SIZE > reqsize)
 1002bf4:	e51b3010 	ldr	r3, [fp, #-16]
 1002bf8:	e2833b01 	add	r3, r3, #1024	; 0x400
 1002bfc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1002c00:	e1520003 	cmp	r2, r3
 1002c04:	2a000001 	bcs	1002c10 <alt_mmu_va_space_create+0x19c>
            {
                return ALT_E_ERROR;
 1002c08:	e3e03000 	mvn	r3, #0
 1002c0c:	ea00030b 	b	1003840 <alt_mmu_va_space_create+0xdcc>
            }
            allocated += ALT_MMU_TTB2_SIZE;
 1002c10:	e51b3010 	ldr	r3, [fp, #-16]
 1002c14:	e2833b01 	add	r3, r3, #1024	; 0x400
 1002c18:	e50b3010 	str	r3, [fp, #-16]
            alt_mmu_ttb2_init(pagetable);
 1002c1c:	e51b008c 	ldr	r0, [fp, #-140]	; 0xffffff74
 1002c20:	ebffff81 	bl	1002a2c <alt_mmu_ttb2_init>

            mem_region.attributes = ALT_MMU_ATTR_STRONG; /* Any non-FAULT will work. */
 1002c24:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002c28:	e2433004 	sub	r3, r3, #4
 1002c2c:	e3a02000 	mov	r2, #0
 1002c30:	e5432093 	strb	r2, [r3, #-147]	; 0xffffff6d
            mem_region.security   = (ALT_MMU_TTB_NS_t)vregion[k];
 1002c34:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002c38:	e2433004 	sub	r3, r3, #4
 1002c3c:	e1a02003 	mov	r2, r3
 1002c40:	e51b3008 	ldr	r3, [fp, #-8]
 1002c44:	e0823003 	add	r3, r2, r3
 1002c48:	e243308c 	sub	r3, r3, #140	; 0x8c
 1002c4c:	e5d32000 	ldrb	r2, [r3]
 1002c50:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002c54:	e2433004 	sub	r3, r3, #4
 1002c58:	e5432090 	strb	r2, [r3, #-144]	; 0xffffff70
            desc = alt_mmu_va_space_gen_pagetable((uintptr_t)pagetable, &mem_region);
 1002c5c:	e51b208c 	ldr	r2, [fp, #-140]	; 0xffffff74
 1002c60:	e24b3d42 	sub	r3, fp, #4224	; 0x1080
 1002c64:	e2433004 	sub	r3, r3, #4
 1002c68:	e2433020 	sub	r3, r3, #32
 1002c6c:	e1a01003 	mov	r1, r3
 1002c70:	e1a00002 	mov	r0, r2
 1002c74:	ebfffe3b 	bl	1002568 <alt_mmu_va_space_gen_pagetable>
 1002c78:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70

            (*ttb1)[k] = desc;
 1002c7c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002c80:	e2433004 	sub	r3, r3, #4
 1002c84:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002c88:	e5932000 	ldr	r2, [r3]
 1002c8c:	e51b3008 	ldr	r3, [fp, #-8]
 1002c90:	e1a03103 	lsl	r3, r3, #2
 1002c94:	e0823003 	add	r3, r2, r3
 1002c98:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
 1002c9c:	e5832000 	str	r2, [r3]
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
 1002ca0:	e51b3008 	ldr	r3, [fp, #-8]
 1002ca4:	e2833001 	add	r3, r3, #1
 1002ca8:	e50b3008 	str	r3, [fp, #-8]
 1002cac:	e51b3008 	ldr	r3, [fp, #-8]
 1002cb0:	e3530a01 	cmp	r3, #4096	; 0x1000
 1002cb4:	baffffc1 	blt	1002bc0 <alt_mmu_va_space_create+0x14c>
    }

    /* The allocated size should match the requested size. If not, this means
     * that the regions descriptor changed between calling
     * alt_mmu_va_space_storage_required() and alt_mmu_va_space_create(). */
    if (reqsize != allocated)
 1002cb8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1002cbc:	e51b3010 	ldr	r3, [fp, #-16]
 1002cc0:	e1520003 	cmp	r2, r3
 1002cc4:	0a000001 	beq	1002cd0 <alt_mmu_va_space_create+0x25c>
    {
        return ALT_E_ERROR;
 1002cc8:	e3e03000 	mvn	r3, #0
 1002ccc:	ea0002db 	b	1003840 <alt_mmu_va_space_create+0xdcc>
    }

    /* Iterate through all region descriptors */

    for (i = 0; i < num_mem_regions; ++i)
 1002cd0:	e3a03000 	mov	r3, #0
 1002cd4:	e50b300c 	str	r3, [fp, #-12]
 1002cd8:	ea0002d1 	b	1003824 <alt_mmu_va_space_create+0xdb0>
    {
        uintptr_t va   = (uintptr_t)mem_regions[i].va;
 1002cdc:	e51b200c 	ldr	r2, [fp, #-12]
 1002ce0:	e1a03002 	mov	r3, r2
 1002ce4:	e1a03103 	lsl	r3, r3, #2
 1002ce8:	e0833002 	add	r3, r3, r2
 1002cec:	e1a03103 	lsl	r3, r3, #2
 1002cf0:	e1a02003 	mov	r2, r3
 1002cf4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002cf8:	e2433004 	sub	r3, r3, #4
 1002cfc:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002d00:	e0833002 	add	r3, r3, r2
 1002d04:	e5933000 	ldr	r3, [r3]
 1002d08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        uintptr_t pa   = (uintptr_t)mem_regions[i].pa;
 1002d0c:	e51b200c 	ldr	r2, [fp, #-12]
 1002d10:	e1a03002 	mov	r3, r2
 1002d14:	e1a03103 	lsl	r3, r3, #2
 1002d18:	e0833002 	add	r3, r3, r2
 1002d1c:	e1a03103 	lsl	r3, r3, #2
 1002d20:	e1a02003 	mov	r2, r3
 1002d24:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002d28:	e2433004 	sub	r3, r3, #4
 1002d2c:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002d30:	e0833002 	add	r3, r3, r2
 1002d34:	e5933004 	ldr	r3, [r3, #4]
 1002d38:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        uint32_t  size = mem_regions[i].size;
 1002d3c:	e51b200c 	ldr	r2, [fp, #-12]
 1002d40:	e1a03002 	mov	r3, r2
 1002d44:	e1a03103 	lsl	r3, r3, #2
 1002d48:	e0833002 	add	r3, r3, r2
 1002d4c:	e1a03103 	lsl	r3, r3, #2
 1002d50:	e1a02003 	mov	r2, r3
 1002d54:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002d58:	e2433004 	sub	r3, r3, #4
 1002d5c:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002d60:	e0833002 	add	r3, r3, r2
 1002d64:	e5933008 	ldr	r3, [r3, #8]
 1002d68:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        uint32_t j;

        /* Determine the va/pa relative alignment: 4 KiB, 64 KiB, 1 MiB, 16 MiB */

        uint32_t alignopt[] =
 1002d6c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002d70:	e2433004 	sub	r3, r3, #4
 1002d74:	e1a02003 	mov	r2, r3
 1002d78:	e30533e4 	movw	r3, #21476	; 0x53e4
 1002d7c:	e3403100 	movt	r3, #256	; 0x100
 1002d80:	e242c0ac 	sub	ip, r2, #172	; 0xac
 1002d84:	e8930007 	ldm	r3, {r0, r1, r2}
 1002d88:	e88c0007 	stm	ip, {r0, r1, r2}
            ALT_MMU_SECTION_SIZE,
            ALT_MMU_LARGE_PAGE_SIZE
        };

        /* Relative alignment of [va] and [pa]. */
        uint32_t relalign = ALT_MMU_SMALL_PAGE_SIZE;
 1002d8c:	e3a03a01 	mov	r3, #4096	; 0x1000
 1002d90:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

        for (j = 0; j < ARRAY_COUNT(alignopt); ++j)
 1002d94:	e3a03000 	mov	r3, #0
 1002d98:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1002d9c:	ea000019 	b	1002e08 <alt_mmu_va_space_create+0x394>
        {
            if ( (va & (alignopt[j] - 1)) ==
 1002da0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1002da4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002da8:	e0222003 	eor	r2, r2, r3
 1002dac:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002db0:	e2433004 	sub	r3, r3, #4
 1002db4:	e1a01003 	mov	r1, r3
 1002db8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002dbc:	e1a03103 	lsl	r3, r3, #2
 1002dc0:	e0813003 	add	r3, r1, r3
 1002dc4:	e51330ac 	ldr	r3, [r3, #-172]	; 0xffffff54
 1002dc8:	e2433001 	sub	r3, r3, #1
 1002dcc:	e0033002 	and	r3, r3, r2
 1002dd0:	e3530000 	cmp	r3, #0
 1002dd4:	1a000008 	bne	1002dfc <alt_mmu_va_space_create+0x388>
                 (pa & (alignopt[j] - 1)) )
            {
                relalign = alignopt[j];
 1002dd8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002ddc:	e2433004 	sub	r3, r3, #4
 1002de0:	e1a02003 	mov	r2, r3
 1002de4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002de8:	e1a03103 	lsl	r3, r3, #2
 1002dec:	e0823003 	add	r3, r2, r3
 1002df0:	e51330ac 	ldr	r3, [r3, #-172]	; 0xffffff54
 1002df4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                break;
 1002df8:	ea000005 	b	1002e14 <alt_mmu_va_space_create+0x3a0>
        for (j = 0; j < ARRAY_COUNT(alignopt); ++j)
 1002dfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002e00:	e2833001 	add	r3, r3, #1
 1002e04:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1002e08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002e0c:	e3530002 	cmp	r3, #2
 1002e10:	9affffe2 	bls	1002da0 <alt_mmu_va_space_create+0x32c>
        }

        /* Page the 1 MiB unaligned segment of [va]. Areas requiring page tables
         * should already have those page tables created previously in this
         * function. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
 1002e14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002e18:	e7f33053 	ubfx	r3, r3, #0, #20
 1002e1c:	e3530000 	cmp	r3, #0
 1002e20:	0a00010f 	beq	1003264 <alt_mmu_va_space_create+0x7f0>
        {
            /* This is the size of the memory segment after paging which will cause the [va] to align to a 1 MiB,
             * or up to the size of the region being processed, whichever is smaller. */
            uint32_t segsize = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
 1002e24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002e28:	e7f33053 	ubfx	r3, r3, #0, #20
 1002e2c:	e2633601 	rsb	r3, r3, #1048576	; 0x100000
 1002e30:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 1002e34:	e1520003 	cmp	r2, r3
 1002e38:	31a03002 	movcc	r3, r2
 1002e3c:	21a03003 	movcs	r3, r3
 1002e40:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
 1002e44:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1002e48:	e3530801 	cmp	r3, #65536	; 0x10000
 1002e4c:	3a000101 	bcc	1003258 <alt_mmu_va_space_create+0x7e4>
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
 1002e50:	ea000038 	b	1002f38 <alt_mmu_va_space_create+0x4c4>
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1002e54:	e51b200c 	ldr	r2, [fp, #-12]
 1002e58:	e1a03002 	mov	r3, r2
 1002e5c:	e1a03103 	lsl	r3, r3, #2
 1002e60:	e0833002 	add	r3, r3, r2
 1002e64:	e1a03103 	lsl	r3, r3, #2
 1002e68:	e1a02003 	mov	r2, r3
 1002e6c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002e70:	e2433004 	sub	r3, r3, #4
 1002e74:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002e78:	e0833002 	add	r3, r3, r2
 1002e7c:	e1a01003 	mov	r1, r3
 1002e80:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1002e84:	ebfffe61 	bl	1002810 <alt_mmu_va_space_gen_smallpage>
 1002e88:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1002e8c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002e90:	e2433004 	sub	r3, r3, #4
 1002e94:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002e98:	e5932000 	ldr	r2, [r3]
 1002e9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002ea0:	e1a03a23 	lsr	r3, r3, #20
 1002ea4:	e1a03103 	lsl	r3, r3, #2
 1002ea8:	e0823003 	add	r3, r2, r3
 1002eac:	e5933000 	ldr	r3, [r3]
 1002eb0:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1002eb4:	e3c33003 	bic	r3, r3, #3
 1002eb8:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1002ebc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002ec0:	e1a03623 	lsr	r3, r3, #12
 1002ec4:	e6ef3073 	uxtb	r3, r3
 1002ec8:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8

                    /* Detect if an existing non-fault region has already been created.
                     * We cannot detect if a fault region is requested and a region description is already a fault,
                     * which it is by default. */
                    if (pagetable[ptindex] != 0)
 1002ecc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
 1002ed0:	e1a03103 	lsl	r3, r3, #2
 1002ed4:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
 1002ed8:	e0823003 	add	r3, r2, r3
 1002edc:	e5933000 	ldr	r3, [r3]
 1002ee0:	e3530000 	cmp	r3, #0
 1002ee4:	0a000001 	beq	1002ef0 <alt_mmu_va_space_create+0x47c>
                    {
                        return ALT_E_ERROR;
 1002ee8:	e3e03000 	mvn	r3, #0
 1002eec:	ea000253 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 1002ef0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
 1002ef4:	e1a03103 	lsl	r3, r3, #2
 1002ef8:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
 1002efc:	e0823003 	add	r3, r2, r3
 1002f00:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
 1002f04:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 1002f08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002f0c:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1002f10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 1002f14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002f18:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1002f1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 1002f20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1002f24:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1002f28:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 1002f2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002f30:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1002f34:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
 1002f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002f3c:	e6ff3073 	uxth	r3, r3
 1002f40:	e3530000 	cmp	r3, #0
 1002f44:	0a000049 	beq	1003070 <alt_mmu_va_space_create+0x5fc>
 1002f48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1002f4c:	e3530a01 	cmp	r3, #4096	; 0x1000
 1002f50:	2affffbf 	bcs	1002e54 <alt_mmu_va_space_create+0x3e0>
                }

                /* Use large pages for the rest of the 64 KiB aligned areas. */
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
 1002f54:	ea000045 	b	1003070 <alt_mmu_va_space_create+0x5fc>
                {
                    uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);
 1002f58:	e51b200c 	ldr	r2, [fp, #-12]
 1002f5c:	e1a03002 	mov	r3, r2
 1002f60:	e1a03103 	lsl	r3, r3, #2
 1002f64:	e0833002 	add	r3, r3, r2
 1002f68:	e1a03103 	lsl	r3, r3, #2
 1002f6c:	e1a02003 	mov	r2, r3
 1002f70:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002f74:	e2433004 	sub	r3, r3, #4
 1002f78:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002f7c:	e0833002 	add	r3, r3, r2
 1002f80:	e1a01003 	mov	r1, r3
 1002f84:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1002f88:	ebfffe63 	bl	100291c <alt_mmu_va_space_gen_largepage>
 1002f8c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1002f90:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002f94:	e2433004 	sub	r3, r3, #4
 1002f98:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002f9c:	e5932000 	ldr	r2, [r3]
 1002fa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002fa4:	e1a03a23 	lsr	r3, r3, #20
 1002fa8:	e1a03103 	lsl	r3, r3, #2
 1002fac:	e0823003 	add	r3, r2, r3
 1002fb0:	e5933000 	ldr	r3, [r3]
 1002fb4:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1002fb8:	e3c33003 	bic	r3, r3, #3
 1002fbc:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1002fc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002fc4:	e1a03623 	lsr	r3, r3, #12
 1002fc8:	e6ef3073 	uxtb	r3, r3
 1002fcc:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0

                    for (j = 0; j < 16; ++j)
 1002fd0:	e3a03000 	mov	r3, #0
 1002fd4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1002fd8:	ea000015 	b	1003034 <alt_mmu_va_space_create+0x5c0>
                    {
                        if (pagetable[ptindex + j] != 0)
 1002fdc:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
 1002fe0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002fe4:	e0823003 	add	r3, r2, r3
 1002fe8:	e1a03103 	lsl	r3, r3, #2
 1002fec:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
 1002ff0:	e0823003 	add	r3, r2, r3
 1002ff4:	e5933000 	ldr	r3, [r3]
 1002ff8:	e3530000 	cmp	r3, #0
 1002ffc:	0a000001 	beq	1003008 <alt_mmu_va_space_create+0x594>
                        {
                            return ALT_E_ERROR;
 1003000:	e3e03000 	mvn	r3, #0
 1003004:	ea00020d 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                        }

                        pagetable[ptindex + j] = desc;
 1003008:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
 100300c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003010:	e0823003 	add	r3, r2, r3
 1003014:	e1a03103 	lsl	r3, r3, #2
 1003018:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
 100301c:	e0823003 	add	r3, r2, r3
 1003020:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1003024:	e5832000 	str	r2, [r3]
                    for (j = 0; j < 16; ++j)
 1003028:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100302c:	e2833001 	add	r3, r3, #1
 1003030:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003034:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003038:	e353000f 	cmp	r3, #15
 100303c:	9affffe6 	bls	1002fdc <alt_mmu_va_space_create+0x568>
                    }

                    va      += ALT_MMU_LARGE_PAGE_SIZE;
 1003040:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003044:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003048:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_LARGE_PAGE_SIZE;
 100304c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003050:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003054:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_LARGE_PAGE_SIZE;
 1003058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 100305c:	e2433801 	sub	r3, r3, #65536	; 0x10000
 1003060:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
 1003064:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003068:	e2433801 	sub	r3, r3, #65536	; 0x10000
 100306c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
 1003070:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003074:	e3530801 	cmp	r3, #65536	; 0x10000
 1003078:	2affffb6 	bcs	1002f58 <alt_mmu_va_space_create+0x4e4>
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 100307c:	ea000038 	b	1003164 <alt_mmu_va_space_create+0x6f0>
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1003080:	e51b200c 	ldr	r2, [fp, #-12]
 1003084:	e1a03002 	mov	r3, r2
 1003088:	e1a03103 	lsl	r3, r3, #2
 100308c:	e0833002 	add	r3, r3, r2
 1003090:	e1a03103 	lsl	r3, r3, #2
 1003094:	e1a02003 	mov	r2, r3
 1003098:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 100309c:	e2433004 	sub	r3, r3, #4
 10030a0:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10030a4:	e0833002 	add	r3, r3, r2
 10030a8:	e1a01003 	mov	r1, r3
 10030ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10030b0:	ebfffdd6 	bl	1002810 <alt_mmu_va_space_gen_smallpage>
 10030b4:	e50b004c 	str	r0, [fp, #-76]	; 0xffffffb4

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10030b8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10030bc:	e2433004 	sub	r3, r3, #4
 10030c0:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10030c4:	e5932000 	ldr	r2, [r3]
 10030c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10030cc:	e1a03a23 	lsr	r3, r3, #20
 10030d0:	e1a03103 	lsl	r3, r3, #2
 10030d4:	e0823003 	add	r3, r2, r3
 10030d8:	e5933000 	ldr	r3, [r3]
 10030dc:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10030e0:	e3c33003 	bic	r3, r3, #3
 10030e4:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 10030e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10030ec:	e1a03623 	lsr	r3, r3, #12
 10030f0:	e6ef3073 	uxtb	r3, r3
 10030f4:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac

                    if (pagetable[ptindex] != 0)
 10030f8:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
 10030fc:	e1a03103 	lsl	r3, r3, #2
 1003100:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
 1003104:	e0823003 	add	r3, r2, r3
 1003108:	e5933000 	ldr	r3, [r3]
 100310c:	e3530000 	cmp	r3, #0
 1003110:	0a000001 	beq	100311c <alt_mmu_va_space_create+0x6a8>
                    {
                        return ALT_E_ERROR;
 1003114:	e3e03000 	mvn	r3, #0
 1003118:	ea0001c8 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 100311c:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
 1003120:	e1a03103 	lsl	r3, r3, #2
 1003124:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
 1003128:	e0823003 	add	r3, r2, r3
 100312c:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
 1003130:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 1003134:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003138:	e2833a01 	add	r3, r3, #4096	; 0x1000
 100313c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 1003140:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003144:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003148:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 100314c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003150:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003154:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 1003158:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100315c:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003160:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 1003164:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003168:	e3530a01 	cmp	r3, #4096	; 0x1000
 100316c:	2affffc3 	bcs	1003080 <alt_mmu_va_space_create+0x60c>
 1003170:	ea00003b 	b	1003264 <alt_mmu_va_space_create+0x7f0>
            else
            {
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1003174:	e51b200c 	ldr	r2, [fp, #-12]
 1003178:	e1a03002 	mov	r3, r2
 100317c:	e1a03103 	lsl	r3, r3, #2
 1003180:	e0833002 	add	r3, r3, r2
 1003184:	e1a03103 	lsl	r3, r3, #2
 1003188:	e1a02003 	mov	r2, r3
 100318c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003190:	e2433004 	sub	r3, r3, #4
 1003194:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1003198:	e0833002 	add	r3, r3, r2
 100319c:	e1a01003 	mov	r1, r3
 10031a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10031a4:	ebfffd99 	bl	1002810 <alt_mmu_va_space_gen_smallpage>
 10031a8:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10031ac:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10031b0:	e2433004 	sub	r3, r3, #4
 10031b4:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10031b8:	e5932000 	ldr	r2, [r3]
 10031bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10031c0:	e1a03a23 	lsr	r3, r3, #20
 10031c4:	e1a03103 	lsl	r3, r3, #2
 10031c8:	e0823003 	add	r3, r2, r3
 10031cc:	e5933000 	ldr	r3, [r3]
 10031d0:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10031d4:	e3c33003 	bic	r3, r3, #3
 10031d8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 10031dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10031e0:	e1a03623 	lsr	r3, r3, #12
 10031e4:	e6ef3073 	uxtb	r3, r3
 10031e8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

                    if (pagetable[ptindex] != 0)
 10031ec:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 10031f0:	e1a03103 	lsl	r3, r3, #2
 10031f4:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 10031f8:	e0823003 	add	r3, r2, r3
 10031fc:	e5933000 	ldr	r3, [r3]
 1003200:	e3530000 	cmp	r3, #0
 1003204:	0a000001 	beq	1003210 <alt_mmu_va_space_create+0x79c>
                    {
                        return ALT_E_ERROR;
 1003208:	e3e03000 	mvn	r3, #0
 100320c:	ea00018b 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 1003210:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 1003214:	e1a03103 	lsl	r3, r3, #2
 1003218:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 100321c:	e0823003 	add	r3, r2, r3
 1003220:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
 1003224:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 1003228:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100322c:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003230:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 1003234:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003238:	e2833a01 	add	r3, r3, #4096	; 0x1000
 100323c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 1003240:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003244:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003248:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 100324c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003250:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003254:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 1003258:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 100325c:	e3530a01 	cmp	r3, #4096	; 0x1000
 1003260:	2affffc3 	bcs	1003174 <alt_mmu_va_space_create+0x700>
        /* If [va] and [pa] are relatively 1 MiB aligned and the size remaining
         * to be described is greater than 1 MiB, use sections. */

        /* Otherwise use pagetables for everything remaining. */

        if (   (relalign >= ALT_MMU_SUPERSECTION_SIZE)
 1003264:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1003268:	e3530401 	cmp	r3, #16777216	; 0x1000000
 100326c:	3a0000aa 	bcc	100351c <alt_mmu_va_space_create+0xaa8>
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
 1003270:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003274:	e3530401 	cmp	r3, #16777216	; 0x1000000
 1003278:	3a0000a7 	bcc	100351c <alt_mmu_va_space_create+0xaa8>
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
 100327c:	ea00002d 	b	1003338 <alt_mmu_va_space_create+0x8c4>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 1003280:	e51b200c 	ldr	r2, [fp, #-12]
 1003284:	e1a03002 	mov	r3, r2
 1003288:	e1a03103 	lsl	r3, r3, #2
 100328c:	e0833002 	add	r3, r3, r2
 1003290:	e1a03103 	lsl	r3, r3, #2
 1003294:	e1a02003 	mov	r2, r3
 1003298:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 100329c:	e2433004 	sub	r3, r3, #4
 10032a0:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10032a4:	e0833002 	add	r3, r3, r2
 10032a8:	e1a01003 	mov	r1, r3
 10032ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10032b0:	ebfffcc4 	bl	10025c8 <alt_mmu_va_space_gen_section>
 10032b4:	e50b0064 	str	r0, [fp, #-100]	; 0xffffff9c

                if ((*ttb1)[va >> 20] != 0)
 10032b8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10032bc:	e2433004 	sub	r3, r3, #4
 10032c0:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10032c4:	e5932000 	ldr	r2, [r3]
 10032c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10032cc:	e1a03a23 	lsr	r3, r3, #20
 10032d0:	e1a03103 	lsl	r3, r3, #2
 10032d4:	e0823003 	add	r3, r2, r3
 10032d8:	e5933000 	ldr	r3, [r3]
 10032dc:	e3530000 	cmp	r3, #0
 10032e0:	0a000001 	beq	10032ec <alt_mmu_va_space_create+0x878>
                {
                    return ALT_E_ERROR;
 10032e4:	e3e03000 	mvn	r3, #0
 10032e8:	ea000154 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 10032ec:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10032f0:	e2433004 	sub	r3, r3, #4
 10032f4:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10032f8:	e5932000 	ldr	r2, [r3]
 10032fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003300:	e1a03a23 	lsr	r3, r3, #20
 1003304:	e1a03103 	lsl	r3, r3, #2
 1003308:	e0823003 	add	r3, r2, r3
 100330c:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
 1003310:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 1003314:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003318:	e2833601 	add	r3, r3, #1048576	; 0x100000
 100331c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 1003320:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003324:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1003328:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 100332c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003330:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1003334:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
 1003338:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100333c:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 1003340:	e3530000 	cmp	r3, #0
 1003344:	0a00003e 	beq	1003444 <alt_mmu_va_space_create+0x9d0>
 1003348:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100334c:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003350:	2affffca 	bcs	1003280 <alt_mmu_va_space_create+0x80c>
            }

            /* Use supersections for the 16 MiB aligned areas */
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
 1003354:	ea00003a 	b	1003444 <alt_mmu_va_space_create+0x9d0>
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);
 1003358:	e51b200c 	ldr	r2, [fp, #-12]
 100335c:	e1a03002 	mov	r3, r2
 1003360:	e1a03103 	lsl	r3, r3, #2
 1003364:	e0833002 	add	r3, r3, r2
 1003368:	e1a03103 	lsl	r3, r3, #2
 100336c:	e1a02003 	mov	r2, r3
 1003370:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003374:	e2433004 	sub	r3, r3, #4
 1003378:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 100337c:	e0833002 	add	r3, r3, r2
 1003380:	e1a01003 	mov	r1, r3
 1003384:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003388:	ebfffcd7 	bl	10026ec <alt_mmu_va_space_gen_supersection>
 100338c:	e50b006c 	str	r0, [fp, #-108]	; 0xffffff94

                for (j = 0; j < 16; ++j)
 1003390:	e3a03000 	mov	r3, #0
 1003394:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003398:	ea00001d 	b	1003414 <alt_mmu_va_space_create+0x9a0>
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
 100339c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10033a0:	e2433004 	sub	r3, r3, #4
 10033a4:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10033a8:	e5932000 	ldr	r2, [r3]
 10033ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10033b0:	e1a01a23 	lsr	r1, r3, #20
 10033b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10033b8:	e0813003 	add	r3, r1, r3
 10033bc:	e1a03103 	lsl	r3, r3, #2
 10033c0:	e0823003 	add	r3, r2, r3
 10033c4:	e5933000 	ldr	r3, [r3]
 10033c8:	e3530000 	cmp	r3, #0
 10033cc:	0a000001 	beq	10033d8 <alt_mmu_va_space_create+0x964>
                    {
                        return ALT_E_ERROR;
 10033d0:	e3e03000 	mvn	r3, #0
 10033d4:	ea000119 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
 10033d8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10033dc:	e2433004 	sub	r3, r3, #4
 10033e0:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10033e4:	e5932000 	ldr	r2, [r3]
 10033e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10033ec:	e1a01a23 	lsr	r1, r3, #20
 10033f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10033f4:	e0813003 	add	r3, r1, r3
 10033f8:	e1a03103 	lsl	r3, r3, #2
 10033fc:	e0823003 	add	r3, r2, r3
 1003400:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
 1003404:	e5832000 	str	r2, [r3]
                for (j = 0; j < 16; ++j)
 1003408:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100340c:	e2833001 	add	r3, r3, #1
 1003410:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003414:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003418:	e353000f 	cmp	r3, #15
 100341c:	9affffde 	bls	100339c <alt_mmu_va_space_create+0x928>
                }

                va   += ALT_MMU_SUPERSECTION_SIZE;
 1003420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003424:	e2833401 	add	r3, r3, #16777216	; 0x1000000
 1003428:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SUPERSECTION_SIZE;
 100342c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003430:	e2833401 	add	r3, r3, #16777216	; 0x1000000
 1003434:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SUPERSECTION_SIZE;
 1003438:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100343c:	e28334ff 	add	r3, r3, #-16777216	; 0xff000000
 1003440:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
 1003444:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003448:	e3530401 	cmp	r3, #16777216	; 0x1000000
 100344c:	2affffc1 	bcs	1003358 <alt_mmu_va_space_create+0x8e4>
            }

            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
 1003450:	ea00002d 	b	100350c <alt_mmu_va_space_create+0xa98>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 1003454:	e51b200c 	ldr	r2, [fp, #-12]
 1003458:	e1a03002 	mov	r3, r2
 100345c:	e1a03103 	lsl	r3, r3, #2
 1003460:	e0833002 	add	r3, r3, r2
 1003464:	e1a03103 	lsl	r3, r3, #2
 1003468:	e1a02003 	mov	r2, r3
 100346c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003470:	e2433004 	sub	r3, r3, #4
 1003474:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1003478:	e0833002 	add	r3, r3, r2
 100347c:	e1a01003 	mov	r1, r3
 1003480:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003484:	ebfffc4f 	bl	10025c8 <alt_mmu_va_space_gen_section>
 1003488:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98

                if ((*ttb1)[va >> 20] != 0)
 100348c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003490:	e2433004 	sub	r3, r3, #4
 1003494:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1003498:	e5932000 	ldr	r2, [r3]
 100349c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10034a0:	e1a03a23 	lsr	r3, r3, #20
 10034a4:	e1a03103 	lsl	r3, r3, #2
 10034a8:	e0823003 	add	r3, r2, r3
 10034ac:	e5933000 	ldr	r3, [r3]
 10034b0:	e3530000 	cmp	r3, #0
 10034b4:	0a000001 	beq	10034c0 <alt_mmu_va_space_create+0xa4c>
                {
                    return ALT_E_ERROR;
 10034b8:	e3e03000 	mvn	r3, #0
 10034bc:	ea0000df 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 10034c0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10034c4:	e2433004 	sub	r3, r3, #4
 10034c8:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10034cc:	e5932000 	ldr	r2, [r3]
 10034d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10034d4:	e1a03a23 	lsr	r3, r3, #20
 10034d8:	e1a03103 	lsl	r3, r3, #2
 10034dc:	e0823003 	add	r3, r2, r3
 10034e0:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
 10034e4:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 10034e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10034ec:	e2833601 	add	r3, r3, #1048576	; 0x100000
 10034f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 10034f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10034f8:	e2833601 	add	r3, r3, #1048576	; 0x100000
 10034fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 1003500:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003504:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1003508:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SECTION_SIZE)
 100350c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003510:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003514:	2affffce 	bcs	1003454 <alt_mmu_va_space_create+0x9e0>
        if (   (relalign >= ALT_MMU_SUPERSECTION_SIZE)
 1003518:	ea000037 	b	10035fc <alt_mmu_va_space_create+0xb88>
            }
        }
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
 100351c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1003520:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003524:	3a000034 	bcc	10035fc <alt_mmu_va_space_create+0xb88>
                 && (size     >= ALT_MMU_SECTION_SIZE))
 1003528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100352c:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003530:	3a000031 	bcc	10035fc <alt_mmu_va_space_create+0xb88>
        {
            /* No supersection possible. Use regular sections only. */

            while (size >= ALT_MMU_SECTION_SIZE)
 1003534:	ea00002d 	b	10035f0 <alt_mmu_va_space_create+0xb7c>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 1003538:	e51b200c 	ldr	r2, [fp, #-12]
 100353c:	e1a03002 	mov	r3, r2
 1003540:	e1a03103 	lsl	r3, r3, #2
 1003544:	e0833002 	add	r3, r3, r2
 1003548:	e1a03103 	lsl	r3, r3, #2
 100354c:	e1a02003 	mov	r2, r3
 1003550:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003554:	e2433004 	sub	r3, r3, #4
 1003558:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 100355c:	e0833002 	add	r3, r3, r2
 1003560:	e1a01003 	mov	r1, r3
 1003564:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003568:	ebfffc16 	bl	10025c8 <alt_mmu_va_space_gen_section>
 100356c:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90

                if ((*ttb1)[va >> 20] != 0)
 1003570:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003574:	e2433004 	sub	r3, r3, #4
 1003578:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 100357c:	e5932000 	ldr	r2, [r3]
 1003580:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003584:	e1a03a23 	lsr	r3, r3, #20
 1003588:	e1a03103 	lsl	r3, r3, #2
 100358c:	e0823003 	add	r3, r2, r3
 1003590:	e5933000 	ldr	r3, [r3]
 1003594:	e3530000 	cmp	r3, #0
 1003598:	0a000001 	beq	10035a4 <alt_mmu_va_space_create+0xb30>
                {
                    return ALT_E_ERROR;
 100359c:	e3e03000 	mvn	r3, #0
 10035a0:	ea0000a6 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 10035a4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10035a8:	e2433004 	sub	r3, r3, #4
 10035ac:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10035b0:	e5932000 	ldr	r2, [r3]
 10035b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10035b8:	e1a03a23 	lsr	r3, r3, #20
 10035bc:	e1a03103 	lsl	r3, r3, #2
 10035c0:	e0823003 	add	r3, r2, r3
 10035c4:	e51b2070 	ldr	r2, [fp, #-112]	; 0xffffff90
 10035c8:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 10035cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10035d0:	e2833601 	add	r3, r3, #1048576	; 0x100000
 10035d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 10035d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10035dc:	e2833601 	add	r3, r3, #1048576	; 0x100000
 10035e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 10035e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10035e8:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 10035ec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SECTION_SIZE)
 10035f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10035f4:	e3530601 	cmp	r3, #1048576	; 0x100000
 10035f8:	2affffce 	bcs	1003538 <alt_mmu_va_space_create+0xac4>

        /* The remainder should be [va] 1 MiB aligned segment not able to use
         * sections or supersections. Mark that region as pagetable. */

        /* Use large pages if it is suitable. */
        if ((relalign >= ALT_MMU_LARGE_PAGE_SIZE) && (size >= ALT_MMU_LARGE_PAGE_SIZE))
 10035fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1003600:	e3530801 	cmp	r3, #65536	; 0x10000
 1003604:	3a000080 	bcc	100380c <alt_mmu_va_space_create+0xd98>
 1003608:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100360c:	e3530801 	cmp	r3, #65536	; 0x10000
 1003610:	3a00007d 	bcc	100380c <alt_mmu_va_space_create+0xd98>
        {
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
 1003614:	ea000042 	b	1003724 <alt_mmu_va_space_create+0xcb0>
            {
                uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);
 1003618:	e51b200c 	ldr	r2, [fp, #-12]
 100361c:	e1a03002 	mov	r3, r2
 1003620:	e1a03103 	lsl	r3, r3, #2
 1003624:	e0833002 	add	r3, r3, r2
 1003628:	e1a03103 	lsl	r3, r3, #2
 100362c:	e1a02003 	mov	r2, r3
 1003630:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003634:	e2433004 	sub	r3, r3, #4
 1003638:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 100363c:	e0833002 	add	r3, r3, r2
 1003640:	e1a01003 	mov	r1, r3
 1003644:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003648:	ebfffcb3 	bl	100291c <alt_mmu_va_space_gen_largepage>
 100364c:	e50b0074 	str	r0, [fp, #-116]	; 0xffffff8c

                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1003650:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003654:	e2433004 	sub	r3, r3, #4
 1003658:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 100365c:	e5932000 	ldr	r2, [r3]
 1003660:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003664:	e1a03a23 	lsr	r3, r3, #20
 1003668:	e1a03103 	lsl	r3, r3, #2
 100366c:	e0823003 	add	r3, r2, r3
 1003670:	e5933000 	ldr	r3, [r3]
 1003674:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1003678:	e3c33003 	bic	r3, r3, #3
 100367c:	e50b3078 	str	r3, [fp, #-120]	; 0xffffff88
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1003680:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003684:	e1a03623 	lsr	r3, r3, #12
 1003688:	e6ef3073 	uxtb	r3, r3
 100368c:	e50b307c 	str	r3, [fp, #-124]	; 0xffffff84

                for (j = 0; j < 16; ++j)
 1003690:	e3a03000 	mov	r3, #0
 1003694:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003698:	ea000015 	b	10036f4 <alt_mmu_va_space_create+0xc80>
                {
                    if (pagetable[ptindex + j] != 0)
 100369c:	e51b207c 	ldr	r2, [fp, #-124]	; 0xffffff84
 10036a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10036a4:	e0823003 	add	r3, r2, r3
 10036a8:	e1a03103 	lsl	r3, r3, #2
 10036ac:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
 10036b0:	e0823003 	add	r3, r2, r3
 10036b4:	e5933000 	ldr	r3, [r3]
 10036b8:	e3530000 	cmp	r3, #0
 10036bc:	0a000001 	beq	10036c8 <alt_mmu_va_space_create+0xc54>
                    {
                        return ALT_E_ERROR;
 10036c0:	e3e03000 	mvn	r3, #0
 10036c4:	ea00005d 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex + j] = desc;
 10036c8:	e51b207c 	ldr	r2, [fp, #-124]	; 0xffffff84
 10036cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10036d0:	e0823003 	add	r3, r2, r3
 10036d4:	e1a03103 	lsl	r3, r3, #2
 10036d8:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
 10036dc:	e0823003 	add	r3, r2, r3
 10036e0:	e51b2074 	ldr	r2, [fp, #-116]	; 0xffffff8c
 10036e4:	e5832000 	str	r2, [r3]
                for (j = 0; j < 16; ++j)
 10036e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10036ec:	e2833001 	add	r3, r3, #1
 10036f0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 10036f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10036f8:	e353000f 	cmp	r3, #15
 10036fc:	9affffe6 	bls	100369c <alt_mmu_va_space_create+0xc28>
                }

                va   += ALT_MMU_LARGE_PAGE_SIZE;
 1003700:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003704:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003708:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
 100370c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003710:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003714:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_LARGE_PAGE_SIZE;
 1003718:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100371c:	e2433801 	sub	r3, r3, #65536	; 0x10000
 1003720:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
 1003724:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003728:	e3530801 	cmp	r3, #65536	; 0x10000
 100372c:	2affffb9 	bcs	1003618 <alt_mmu_va_space_create+0xba4>
            }
        }

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
 1003730:	ea000035 	b	100380c <alt_mmu_va_space_create+0xd98>
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1003734:	e51b200c 	ldr	r2, [fp, #-12]
 1003738:	e1a03002 	mov	r3, r2
 100373c:	e1a03103 	lsl	r3, r3, #2
 1003740:	e0833002 	add	r3, r3, r2
 1003744:	e1a03103 	lsl	r3, r3, #2
 1003748:	e1a02003 	mov	r2, r3
 100374c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003750:	e2433004 	sub	r3, r3, #4
 1003754:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1003758:	e0833002 	add	r3, r3, r2
 100375c:	e1a01003 	mov	r1, r3
 1003760:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003764:	ebfffc29 	bl	1002810 <alt_mmu_va_space_gen_smallpage>
 1003768:	e50b0080 	str	r0, [fp, #-128]	; 0xffffff80

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 100376c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003770:	e2433004 	sub	r3, r3, #4
 1003774:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1003778:	e5932000 	ldr	r2, [r3]
 100377c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003780:	e1a03a23 	lsr	r3, r3, #20
 1003784:	e1a03103 	lsl	r3, r3, #2
 1003788:	e0823003 	add	r3, r2, r3
 100378c:	e5933000 	ldr	r3, [r3]
 1003790:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1003794:	e3c33003 	bic	r3, r3, #3
 1003798:	e50b3084 	str	r3, [fp, #-132]	; 0xffffff7c
            uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 100379c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10037a0:	e1a03623 	lsr	r3, r3, #12
 10037a4:	e6ef3073 	uxtb	r3, r3
 10037a8:	e50b3088 	str	r3, [fp, #-136]	; 0xffffff78

            if (pagetable[ptindex] != 0)
 10037ac:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
 10037b0:	e1a03103 	lsl	r3, r3, #2
 10037b4:	e51b2084 	ldr	r2, [fp, #-132]	; 0xffffff7c
 10037b8:	e0823003 	add	r3, r2, r3
 10037bc:	e5933000 	ldr	r3, [r3]
 10037c0:	e3530000 	cmp	r3, #0
 10037c4:	0a000001 	beq	10037d0 <alt_mmu_va_space_create+0xd5c>
            {
                return ALT_E_ERROR;
 10037c8:	e3e03000 	mvn	r3, #0
 10037cc:	ea00001b 	b	1003840 <alt_mmu_va_space_create+0xdcc>
            }

            pagetable[ptindex] = desc;
 10037d0:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
 10037d4:	e1a03103 	lsl	r3, r3, #2
 10037d8:	e51b2084 	ldr	r2, [fp, #-132]	; 0xffffff7c
 10037dc:	e0823003 	add	r3, r2, r3
 10037e0:	e51b2080 	ldr	r2, [fp, #-128]	; 0xffffff80
 10037e4:	e5832000 	str	r2, [r3]

            va   += ALT_MMU_SMALL_PAGE_SIZE;
 10037e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10037ec:	e2833a01 	add	r3, r3, #4096	; 0x1000
 10037f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            pa   += ALT_MMU_SMALL_PAGE_SIZE;
 10037f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10037f8:	e2833a01 	add	r3, r3, #4096	; 0x1000
 10037fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            size -= ALT_MMU_SMALL_PAGE_SIZE;
 1003800:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003804:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003808:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
 100380c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003810:	e3530a01 	cmp	r3, #4096	; 0x1000
 1003814:	2affffc6 	bcs	1003734 <alt_mmu_va_space_create+0xcc0>
    for (i = 0; i < num_mem_regions; ++i)
 1003818:	e51b300c 	ldr	r3, [fp, #-12]
 100381c:	e2833001 	add	r3, r3, #1
 1003820:	e50b300c 	str	r3, [fp, #-12]
 1003824:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003828:	e2433004 	sub	r3, r3, #4
 100382c:	e51b200c 	ldr	r2, [fp, #-12]
 1003830:	e51330bc 	ldr	r3, [r3, #-188]	; 0xffffff44
 1003834:	e1520003 	cmp	r2, r3
 1003838:	3afffd27 	bcc	1002cdc <alt_mmu_va_space_create+0x268>
        }

    } /* for (size_t i = 0; i < num_mem_regions; ++i) */

    return ALT_E_SUCCESS;
 100383c:	e3a03000 	mov	r3, #0
}
 1003840:	e1a00003 	mov	r0, r3
 1003844:	e24bd004 	sub	sp, fp, #4
 1003848:	e8bd8800 	pop	{fp, pc}

0100384c <alt_mmu_va_space_enable>:

ALT_STATUS_CODE alt_mmu_va_space_enable(const uint32_t * ttb1)
{
 100384c:	e92d4800 	push	{fp, lr}
 1003850:	e28db004 	add	fp, sp, #4
 1003854:	e24dd020 	sub	sp, sp, #32
 1003858:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
 100385c:	e3a03000 	mov	r3, #0
 1003860:	e50b3008 	str	r3, [fp, #-8]

    /* Set TTBCR to use N=0 */
    if (status == ALT_E_SUCCESS)
 1003864:	e51b3008 	ldr	r3, [fp, #-8]
 1003868:	e3530000 	cmp	r3, #0
 100386c:	1a00000b 	bne	10038a0 <alt_mmu_va_space_enable+0x54>
    {
        status = alt_mmu_TTBCR_set(true,
 1003870:	e3a02000 	mov	r2, #0
 1003874:	e3a01001 	mov	r1, #1
 1003878:	e3a00001 	mov	r0, #1
 100387c:	ebfff9c9 	bl	1001fa8 <alt_mmu_TTBCR_set>
 1003880:	e50b0008 	str	r0, [fp, #-8]
                                   true,
                                   0);
        if (status != ALT_E_SUCCESS)
 1003884:	e51b3008 	ldr	r3, [fp, #-8]
 1003888:	e3530000 	cmp	r3, #0
 100388c:	0a000003 	beq	10038a0 <alt_mmu_va_space_enable+0x54>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1003890:	e3a01d15 	mov	r1, #1344	; 0x540
 1003894:	e30503f0 	movw	r0, #21488	; 0x53f0
 1003898:	e3400100 	movt	r0, #256	; 0x100
 100389c:	ebfff942 	bl	1001dac <null_printf>
        }
    }

    /* Set TTBR0 to use ttb1 */

    if (status == ALT_E_SUCCESS)
 10038a0:	e51b3008 	ldr	r3, [fp, #-8]
 10038a4:	e3530000 	cmp	r3, #0
 10038a8:	1a000009 	bne	10038d4 <alt_mmu_va_space_enable+0x88>
    {
        status = alt_mmu_TTBR0_set(ttb1);
 10038ac:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 10038b0:	ebfff984 	bl	1001ec8 <alt_mmu_TTBR0_set>
 10038b4:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 10038b8:	e51b3008 	ldr	r3, [fp, #-8]
 10038bc:	e3530000 	cmp	r3, #0
 10038c0:	0a000003 	beq	10038d4 <alt_mmu_va_space_enable+0x88>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 10038c4:	e300154b 	movw	r1, #1355	; 0x54b
 10038c8:	e30503f0 	movw	r0, #21488	; 0x53f0
 10038cc:	e3400100 	movt	r0, #256	; 0x100
 10038d0:	ebfff935 	bl	1001dac <null_printf>
        }
    }

    /* Configure DACRs to be client domain. */

    if (status == ALT_E_SUCCESS)
 10038d4:	e51b3008 	ldr	r3, [fp, #-8]
 10038d8:	e3530000 	cmp	r3, #0
 10038dc:	1a000019 	bne	1003948 <alt_mmu_va_space_enable+0xfc>
    {
        int i;
        ALT_MMU_DAP_t domain_ap[16];
        for (i = 0; i < 16; ++i)
 10038e0:	e3a03000 	mov	r3, #0
 10038e4:	e50b300c 	str	r3, [fp, #-12]
 10038e8:	ea000007 	b	100390c <alt_mmu_va_space_enable+0xc0>
        {
            domain_ap[i] = ALT_MMU_DAP_CLIENT;
 10038ec:	e24b201c 	sub	r2, fp, #28
 10038f0:	e51b300c 	ldr	r3, [fp, #-12]
 10038f4:	e0823003 	add	r3, r2, r3
 10038f8:	e3a02001 	mov	r2, #1
 10038fc:	e5c32000 	strb	r2, [r3]
        for (i = 0; i < 16; ++i)
 1003900:	e51b300c 	ldr	r3, [fp, #-12]
 1003904:	e2833001 	add	r3, r3, #1
 1003908:	e50b300c 	str	r3, [fp, #-12]
 100390c:	e51b300c 	ldr	r3, [fp, #-12]
 1003910:	e353000f 	cmp	r3, #15
 1003914:	dafffff4 	ble	10038ec <alt_mmu_va_space_enable+0xa0>
        }

        status = alt_mmu_DACR_set(domain_ap, 16);
 1003918:	e24b301c 	sub	r3, fp, #28
 100391c:	e3a01010 	mov	r1, #16
 1003920:	e1a00003 	mov	r0, r3
 1003924:	ebfff9cc 	bl	100205c <alt_mmu_DACR_set>
 1003928:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 100392c:	e51b3008 	ldr	r3, [fp, #-8]
 1003930:	e3530000 	cmp	r3, #0
 1003934:	0a000003 	beq	1003948 <alt_mmu_va_space_enable+0xfc>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1003938:	e300155d 	movw	r1, #1373	; 0x55d
 100393c:	e30503f0 	movw	r0, #21488	; 0x53f0
 1003940:	e3400100 	movt	r0, #256	; 0x100
 1003944:	ebfff918 	bl	1001dac <null_printf>
        }
    }

    /* Enable MMU (implicitly invalidates TLBs) */

    if (status == ALT_E_SUCCESS)
 1003948:	e51b3008 	ldr	r3, [fp, #-8]
 100394c:	e3530000 	cmp	r3, #0
 1003950:	1a000008 	bne	1003978 <alt_mmu_va_space_enable+0x12c>
    {
        status = alt_mmu_enable();
 1003954:	ebfff947 	bl	1001e78 <alt_mmu_enable>
 1003958:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 100395c:	e51b3008 	ldr	r3, [fp, #-8]
 1003960:	e3530000 	cmp	r3, #0
 1003964:	0a000003 	beq	1003978 <alt_mmu_va_space_enable+0x12c>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1003968:	e3001568 	movw	r1, #1384	; 0x568
 100396c:	e30503f0 	movw	r0, #21488	; 0x53f0
 1003970:	e3400100 	movt	r0, #256	; 0x100
 1003974:	ebfff90c 	bl	1001dac <null_printf>
        }
    }

    return status;
 1003978:	e51b3008 	ldr	r3, [fp, #-8]
}
 100397c:	e1a00003 	mov	r0, r3
 1003980:	e24bd004 	sub	sp, fp, #4
 1003984:	e8bd8800 	pop	{fp, pc}

01003988 <alt_printf>:
}

#ifndef PRINTF_HOST
extern FILE *DEFAULT_TERM;
int alt_printf(const char *format, ...)
{
 1003988:	e92d000f 	push	{r0, r1, r2, r3}
 100398c:	e92d4800 	push	{fp, lr}
 1003990:	e28db004 	add	fp, sp, #4
 1003994:	e24dd008 	sub	sp, sp, #8
    int rc;
 
    va_list args;
    va_start( args, format );
 1003998:	e28b3008 	add	r3, fp, #8
 100399c:	e50b300c 	str	r3, [fp, #-12]
    rc=alt_vfprintf(DEFAULT_TERM, format, args);
 10039a0:	e3053708 	movw	r3, #22280	; 0x5708
 10039a4:	e3403100 	movt	r3, #256	; 0x100
 10039a8:	e5933000 	ldr	r3, [r3]
 10039ac:	e51b200c 	ldr	r2, [fp, #-12]
 10039b0:	e59b1004 	ldr	r1, [fp, #4]
 10039b4:	e1a00003 	mov	r0, r3
 10039b8:	eb000311 	bl	1004604 <alt_vfprintf>
 10039bc:	e50b0008 	str	r0, [fp, #-8]
    va_end(args);
 
    return rc;
 10039c0:	e51b3008 	ldr	r3, [fp, #-8]
}
 10039c4:	e1a00003 	mov	r0, r3
 10039c8:	e24bd004 	sub	sp, fp, #4
 10039cc:	e8bd4800 	pop	{fp, lr}
 10039d0:	e28dd010 	add	sp, sp, #16
 10039d4:	e12fff1e 	bx	lr

010039d8 <cput>:
    * @param pinfo            ALT_PRINTF_MEM_INFO_t structure
    * @param count            var to keep track of characters written
    * @return                 None 
    */
static void cput(ALT_PRINTF_MEM_INFO_t *pinfo, int * count, char c)
{
 10039d8:	e92d4800 	push	{fp, lr}
 10039dc:	e28db004 	add	fp, sp, #4
 10039e0:	e24dd010 	sub	sp, sp, #16
 10039e4:	e50b0008 	str	r0, [fp, #-8]
 10039e8:	e50b100c 	str	r1, [fp, #-12]
 10039ec:	e1a03002 	mov	r3, r2
 10039f0:	e54b300d 	strb	r3, [fp, #-13]
    if (pinfo!=NULL) 
 10039f4:	e51b3008 	ldr	r3, [fp, #-8]
 10039f8:	e3530000 	cmp	r3, #0
 10039fc:	0a000005 	beq	1003a18 <cput+0x40>
    {
      pinfo->putc_function(c,(FILE *)pinfo);
 1003a00:	e51b3008 	ldr	r3, [fp, #-8]
 1003a04:	e5933000 	ldr	r3, [r3]
 1003a08:	e55b200d 	ldrb	r2, [fp, #-13]
 1003a0c:	e51b1008 	ldr	r1, [fp, #-8]
 1003a10:	e1a00002 	mov	r0, r2
 1003a14:	e12fff33 	blx	r3
    }
    if (c!=0) *count+=1;
 1003a18:	e55b300d 	ldrb	r3, [fp, #-13]
 1003a1c:	e3530000 	cmp	r3, #0
 1003a20:	0a000004 	beq	1003a38 <cput+0x60>
 1003a24:	e51b300c 	ldr	r3, [fp, #-12]
 1003a28:	e5933000 	ldr	r3, [r3]
 1003a2c:	e2832001 	add	r2, r3, #1
 1003a30:	e51b300c 	ldr	r3, [fp, #-12]
 1003a34:	e5832000 	str	r2, [r3]
}
 1003a38:	e320f000 	nop	{0}
 1003a3c:	e24bd004 	sub	sp, fp, #4
 1003a40:	e8bd8800 	pop	{fp, pc}

01003a44 <nextchar>:
    * @API Type:              Internal
    * @param index            index of character to return
    * @return                 next character from format string 
    */
static char nextchar(const char *format,int * index)
{
 1003a44:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1003a48:	e28db000 	add	fp, sp, #0
 1003a4c:	e24dd014 	sub	sp, sp, #20
 1003a50:	e50b0010 	str	r0, [fp, #-16]
 1003a54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    char c;
    
    c  = *(format + *index);
 1003a58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003a5c:	e5933000 	ldr	r3, [r3]
 1003a60:	e1a02003 	mov	r2, r3
 1003a64:	e51b3010 	ldr	r3, [fp, #-16]
 1003a68:	e0833002 	add	r3, r3, r2
 1003a6c:	e5d33000 	ldrb	r3, [r3]
 1003a70:	e54b3005 	strb	r3, [fp, #-5]
    *index+=1;
 1003a74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003a78:	e5933000 	ldr	r3, [r3]
 1003a7c:	e2832001 	add	r2, r3, #1
 1003a80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003a84:	e5832000 	str	r2, [r3]
    
    return c;
 1003a88:	e55b3005 	ldrb	r3, [fp, #-5]
}
 1003a8c:	e1a00003 	mov	r0, r3
 1003a90:	e28bd000 	add	sp, fp, #0
 1003a94:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1003a98:	e12fff1e 	bx	lr

01003a9c <getdec>:
    * @param val              decimal value returned
    * @param c                current character pointed to be index
    * @return                 next character after decimal string 
    */
static char getdec(const char *format,int * index, int * val, char c)
{ 
 1003a9c:	e92d4800 	push	{fp, lr}
 1003aa0:	e28db004 	add	fp, sp, #4
 1003aa4:	e24dd010 	sub	sp, sp, #16
 1003aa8:	e50b0008 	str	r0, [fp, #-8]
 1003aac:	e50b100c 	str	r1, [fp, #-12]
 1003ab0:	e50b2010 	str	r2, [fp, #-16]
 1003ab4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   *val=0;
 1003ab8:	e51b3010 	ldr	r3, [fp, #-16]
 1003abc:	e3a02000 	mov	r2, #0
 1003ac0:	e5832000 	str	r2, [r3]
   while ((c >= '0') && (c <='9'))
 1003ac4:	ea000010 	b	1003b0c <getdec+0x70>
   {
     *val=*val * 10 + (c - '0');
 1003ac8:	e51b3010 	ldr	r3, [fp, #-16]
 1003acc:	e5932000 	ldr	r2, [r3]
 1003ad0:	e1a03002 	mov	r3, r2
 1003ad4:	e1a03103 	lsl	r3, r3, #2
 1003ad8:	e0833002 	add	r3, r3, r2
 1003adc:	e1a03083 	lsl	r3, r3, #1
 1003ae0:	e1a02003 	mov	r2, r3
 1003ae4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1003ae8:	e2433030 	sub	r3, r3, #48	; 0x30
 1003aec:	e0822003 	add	r2, r2, r3
 1003af0:	e51b3010 	ldr	r3, [fp, #-16]
 1003af4:	e5832000 	str	r2, [r3]
     c = nextchar(format,index);
 1003af8:	e51b100c 	ldr	r1, [fp, #-12]
 1003afc:	e51b0008 	ldr	r0, [fp, #-8]
 1003b00:	ebffffcf 	bl	1003a44 <nextchar>
 1003b04:	e1a03000 	mov	r3, r0
 1003b08:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   while ((c >= '0') && (c <='9'))
 1003b0c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1003b10:	e353002f 	cmp	r3, #47	; 0x2f
 1003b14:	9a000002 	bls	1003b24 <getdec+0x88>
 1003b18:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1003b1c:	e3530039 	cmp	r3, #57	; 0x39
 1003b20:	9affffe8 	bls	1003ac8 <getdec+0x2c>
   }  
   
   return c;
 1003b24:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
}
 1003b28:	e1a00003 	mov	r0, r3
 1003b2c:	e24bd004 	sub	sp, fp, #4
 1003b30:	e8bd8800 	pop	{fp, pc}

01003b34 <int_to_asc>:
    * @param stg              string to be returned. must be at least 21 bytes.
    * @param isint            if 1 indicates val is signed, otherwise unsigned
    * @return                 number of characters in string 
    */
static int int_to_asc(int64_t val,char * stg,int isint)
{
 1003b34:	e92d4800 	push	{fp, lr}
 1003b38:	e28db004 	add	fp, sp, #4
 1003b3c:	e24dd018 	sub	sp, sp, #24
 1003b40:	e14b01f4 	strd	r0, [fp, #-20]	; 0xffffffec
 1003b44:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 1003b48:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int count=20,i=0;
 1003b4c:	e3a03014 	mov	r3, #20
 1003b50:	e50b3008 	str	r3, [fp, #-8]
 1003b54:	e3a03000 	mov	r3, #0
 1003b58:	e50b300c 	str	r3, [fp, #-12]
    
    if (isint && (val < 0)) 
 1003b5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003b60:	e3530000 	cmp	r3, #0
 1003b64:	0a00001d 	beq	1003be0 <int_to_asc+0xac>
 1003b68:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
 1003b6c:	e3520000 	cmp	r2, #0
 1003b70:	e2d33000 	sbcs	r3, r3, #0
 1003b74:	aa000019 	bge	1003be0 <int_to_asc+0xac>
    {
      val = ~val + 1;
 1003b78:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
 1003b7c:	e2722000 	rsbs	r2, r2, #0
 1003b80:	e2e33000 	rsc	r3, r3, #0
 1003b84:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
    }
    
    while ((uint64_t)val > 0)
 1003b88:	ea000014 	b	1003be0 <int_to_asc+0xac>
    {
      stg[count]='0' + ((uint64_t)val%10);
 1003b8c:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 1003b90:	e3a0200a 	mov	r2, #10
 1003b94:	e3a03000 	mov	r3, #0
 1003b98:	eb00058e 	bl	10051d8 <__aeabi_uldivmod>
 1003b9c:	e6ef2072 	uxtb	r2, r2
 1003ba0:	e51b3008 	ldr	r3, [fp, #-8]
 1003ba4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 1003ba8:	e0813003 	add	r3, r1, r3
 1003bac:	e2822030 	add	r2, r2, #48	; 0x30
 1003bb0:	e6ef2072 	uxtb	r2, r2
 1003bb4:	e5c32000 	strb	r2, [r3]
      val=(uint64_t)val/10;
 1003bb8:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 1003bbc:	e3a0200a 	mov	r2, #10
 1003bc0:	e3a03000 	mov	r3, #0
 1003bc4:	eb000583 	bl	10051d8 <__aeabi_uldivmod>
 1003bc8:	e1a02000 	mov	r2, r0
 1003bcc:	e1a03001 	mov	r3, r1
 1003bd0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
      count--;
 1003bd4:	e51b3008 	ldr	r3, [fp, #-8]
 1003bd8:	e2433001 	sub	r3, r3, #1
 1003bdc:	e50b3008 	str	r3, [fp, #-8]
    while ((uint64_t)val > 0)
 1003be0:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
 1003be4:	e1923003 	orrs	r3, r2, r3
 1003be8:	1affffe7 	bne	1003b8c <int_to_asc+0x58>
    }
    for (i=0;i<(20-count);i++)
 1003bec:	e3a03000 	mov	r3, #0
 1003bf0:	e50b300c 	str	r3, [fp, #-12]
 1003bf4:	ea00000e 	b	1003c34 <int_to_asc+0x100>
    {
      stg[i]=stg[ count + 1 + i];
 1003bf8:	e51b3008 	ldr	r3, [fp, #-8]
 1003bfc:	e2832001 	add	r2, r3, #1
 1003c00:	e51b300c 	ldr	r3, [fp, #-12]
 1003c04:	e0823003 	add	r3, r2, r3
 1003c08:	e1a02003 	mov	r2, r3
 1003c0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003c10:	e0832002 	add	r2, r3, r2
 1003c14:	e51b300c 	ldr	r3, [fp, #-12]
 1003c18:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 1003c1c:	e0813003 	add	r3, r1, r3
 1003c20:	e5d22000 	ldrb	r2, [r2]
 1003c24:	e5c32000 	strb	r2, [r3]
    for (i=0;i<(20-count);i++)
 1003c28:	e51b300c 	ldr	r3, [fp, #-12]
 1003c2c:	e2833001 	add	r3, r3, #1
 1003c30:	e50b300c 	str	r3, [fp, #-12]
 1003c34:	e51b3008 	ldr	r3, [fp, #-8]
 1003c38:	e2633014 	rsb	r3, r3, #20
 1003c3c:	e51b200c 	ldr	r2, [fp, #-12]
 1003c40:	e1520003 	cmp	r2, r3
 1003c44:	baffffeb 	blt	1003bf8 <int_to_asc+0xc4>
    }
    stg[i]=0;
 1003c48:	e51b300c 	ldr	r3, [fp, #-12]
 1003c4c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 1003c50:	e0823003 	add	r3, r2, r3
 1003c54:	e3a02000 	mov	r2, #0
 1003c58:	e5c32000 	strb	r2, [r3]
    
    return (20-count);
 1003c5c:	e51b3008 	ldr	r3, [fp, #-8]
 1003c60:	e2633014 	rsb	r3, r3, #20
}     
 1003c64:	e1a00003 	mov	r0, r3
 1003c68:	e24bd004 	sub	sp, fp, #4
 1003c6c:	e8bd8800 	pop	{fp, pc}

01003c70 <hex_to_asc>:
    * @param lengthmod        printf lengthmod format string specifier
    
    * @return                 number of characters in string 
    */
static int hex_to_asc(int64_t val,char * stg,char specifier,int lengthmod)
{
 1003c70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1003c74:	e28db000 	add	fp, sp, #0
 1003c78:	e24dd02c 	sub	sp, sp, #44	; 0x2c
 1003c7c:	e14b02f4 	strd	r0, [fp, #-36]	; 0xffffffdc
 1003c80:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
 1003c84:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
    int count=0,count2=0,startcount=0;  
 1003c88:	e3a03000 	mov	r3, #0
 1003c8c:	e50b3008 	str	r3, [fp, #-8]
 1003c90:	e3a03000 	mov	r3, #0
 1003c94:	e50b300c 	str	r3, [fp, #-12]
 1003c98:	e3a03000 	mov	r3, #0
 1003c9c:	e50b3010 	str	r3, [fp, #-16]
    int digits=8,digitvalue;
 1003ca0:	e3a03008 	mov	r3, #8
 1003ca4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
       
    if (specifier=='p') specifier='x';   
 1003ca8:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 1003cac:	e3530070 	cmp	r3, #112	; 0x70
 1003cb0:	1a000001 	bne	1003cbc <hex_to_asc+0x4c>
 1003cb4:	e3a03078 	mov	r3, #120	; 0x78
 1003cb8:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
    if (lengthmod==2)
 1003cbc:	e59b3004 	ldr	r3, [fp, #4]
 1003cc0:	e3530002 	cmp	r3, #2
 1003cc4:	1a000039 	bne	1003db0 <hex_to_asc+0x140>
    {
      digits=16;
 1003cc8:	e3a03010 	mov	r3, #16
 1003ccc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    while (count2 < digits)
 1003cd0:	ea000036 	b	1003db0 <hex_to_asc+0x140>
    {
      digitvalue=(int)(val>>((digits-count2)*4-4)) & 0xf;
 1003cd4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1003cd8:	e51b300c 	ldr	r3, [fp, #-12]
 1003cdc:	e0423003 	sub	r3, r2, r3
 1003ce0:	e2433001 	sub	r3, r3, #1
 1003ce4:	e1a01103 	lsl	r1, r3, #2
 1003ce8:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 1003cec:	e2610020 	rsb	r0, r1, #32
 1003cf0:	e251c020 	subs	ip, r1, #32
 1003cf4:	e1a02132 	lsr	r2, r2, r1
 1003cf8:	e1822013 	orr	r2, r2, r3, lsl r0
 1003cfc:	4a000000 	bmi	1003d04 <hex_to_asc+0x94>
 1003d00:	e1822c53 	orr	r2, r2, r3, asr ip
 1003d04:	e1a03153 	asr	r3, r3, r1
 1003d08:	e1a03002 	mov	r3, r2
 1003d0c:	e203300f 	and	r3, r3, #15
 1003d10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      stg[count]='0' + digitvalue;
 1003d14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003d18:	e6ef2073 	uxtb	r2, r3
 1003d1c:	e51b3008 	ldr	r3, [fp, #-8]
 1003d20:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 1003d24:	e0813003 	add	r3, r1, r3
 1003d28:	e2822030 	add	r2, r2, #48	; 0x30
 1003d2c:	e6ef2072 	uxtb	r2, r2
 1003d30:	e5c32000 	strb	r2, [r3]
      if (digitvalue > 9)
 1003d34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003d38:	e3530009 	cmp	r3, #9
 1003d3c:	da00000a 	ble	1003d6c <hex_to_asc+0xfc>
      {
        stg[count] = 'A' + (digitvalue - 10) + specifier - 'X';
 1003d40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003d44:	e6ef2073 	uxtb	r2, r3
 1003d48:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 1003d4c:	e0823003 	add	r3, r2, r3
 1003d50:	e6ef2073 	uxtb	r2, r3
 1003d54:	e51b3008 	ldr	r3, [fp, #-8]
 1003d58:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 1003d5c:	e0813003 	add	r3, r1, r3
 1003d60:	e2422021 	sub	r2, r2, #33	; 0x21
 1003d64:	e6ef2072 	uxtb	r2, r2
 1003d68:	e5c32000 	strb	r2, [r3]
      }
      if ((stg[count]!='0') || startcount)
 1003d6c:	e51b3008 	ldr	r3, [fp, #-8]
 1003d70:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 1003d74:	e0823003 	add	r3, r2, r3
 1003d78:	e5d33000 	ldrb	r3, [r3]
 1003d7c:	e3530030 	cmp	r3, #48	; 0x30
 1003d80:	1a000002 	bne	1003d90 <hex_to_asc+0x120>
 1003d84:	e51b3010 	ldr	r3, [fp, #-16]
 1003d88:	e3530000 	cmp	r3, #0
 1003d8c:	0a000004 	beq	1003da4 <hex_to_asc+0x134>
      {
        count+=1; 
 1003d90:	e51b3008 	ldr	r3, [fp, #-8]
 1003d94:	e2833001 	add	r3, r3, #1
 1003d98:	e50b3008 	str	r3, [fp, #-8]
        startcount=1;
 1003d9c:	e3a03001 	mov	r3, #1
 1003da0:	e50b3010 	str	r3, [fp, #-16]
      }
      count2++;
 1003da4:	e51b300c 	ldr	r3, [fp, #-12]
 1003da8:	e2833001 	add	r3, r3, #1
 1003dac:	e50b300c 	str	r3, [fp, #-12]
    while (count2 < digits)
 1003db0:	e51b200c 	ldr	r2, [fp, #-12]
 1003db4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003db8:	e1520003 	cmp	r2, r3
 1003dbc:	baffffc4 	blt	1003cd4 <hex_to_asc+0x64>
    }  
    stg[count]=0;
 1003dc0:	e51b3008 	ldr	r3, [fp, #-8]
 1003dc4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 1003dc8:	e0823003 	add	r3, r2, r3
 1003dcc:	e3a02000 	mov	r2, #0
 1003dd0:	e5c32000 	strb	r2, [r3]
            
    return count;
 1003dd4:	e51b3008 	ldr	r3, [fp, #-8]
}
 1003dd8:	e1a00003 	mov	r0, r3
 1003ddc:	e28bd000 	add	sp, fp, #0
 1003de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1003de4:	e12fff1e 	bx	lr

01003de8 <printarg>:
    * @param c_count          count of characters output
    * @param args             argument list 
    * @return                 0 for success, 1 for failure 
    */  
static int printarg(ALT_PRINTF_MEM_INFO_t *pinfo,char specifier,char flag,int width,int length,int precision,int dot,int * c_count,va_list * args)
{
 1003de8:	e92d4800 	push	{fp, lr}
 1003dec:	e28db004 	add	fp, sp, #4
 1003df0:	e24dd060 	sub	sp, sp, #96	; 0x60
 1003df4:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
 1003df8:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
 1003dfc:	e1a03001 	mov	r3, r1
 1003e00:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf
 1003e04:	e1a03002 	mov	r3, r2
 1003e08:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    char ostg[32],pad=' ',leadchar=0,leadchar2=0;
 1003e0c:	e3a03020 	mov	r3, #32
 1003e10:	e54b3005 	strb	r3, [fp, #-5]
 1003e14:	e3a03000 	mov	r3, #0
 1003e18:	e54b3006 	strb	r3, [fp, #-6]
 1003e1c:	e3a03000 	mov	r3, #0
 1003e20:	e54b3007 	strb	r3, [fp, #-7]
    int count,i,adder=0,isint=1;
 1003e24:	e3a03000 	mov	r3, #0
 1003e28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1003e2c:	e3a03001 	mov	r3, #1
 1003e30:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    int max;
    int64_t val = 0;
 1003e34:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
 1003e38:	ed4b0b09 	vstr	d16, [fp, #-36]	; 0xffffffdc
    char * stgarg = NULL;
 1003e3c:	e3a03000 	mov	r3, #0
 1003e40:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
     
    if ((specifier=='d') || (specifier=='i') || (specifier=='u') || (specifier=='x') || (specifier=='X') || (specifier=='p')) 
 1003e44:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e48:	e3530064 	cmp	r3, #100	; 0x64
 1003e4c:	0a00000e 	beq	1003e8c <printarg+0xa4>
 1003e50:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e54:	e3530069 	cmp	r3, #105	; 0x69
 1003e58:	0a00000b 	beq	1003e8c <printarg+0xa4>
 1003e5c:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e60:	e3530075 	cmp	r3, #117	; 0x75
 1003e64:	0a000008 	beq	1003e8c <printarg+0xa4>
 1003e68:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e6c:	e3530078 	cmp	r3, #120	; 0x78
 1003e70:	0a000005 	beq	1003e8c <printarg+0xa4>
 1003e74:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e78:	e3530058 	cmp	r3, #88	; 0x58
 1003e7c:	0a000002 	beq	1003e8c <printarg+0xa4>
 1003e80:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e84:	e3530070 	cmp	r3, #112	; 0x70
 1003e88:	1a000148 	bne	10043b0 <printarg+0x5c8>
    {
      if ((specifier=='u') || (specifier=='p'))
 1003e8c:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e90:	e3530075 	cmp	r3, #117	; 0x75
 1003e94:	0a000002 	beq	1003ea4 <printarg+0xbc>
 1003e98:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e9c:	e3530070 	cmp	r3, #112	; 0x70
 1003ea0:	1a000001 	bne	1003eac <printarg+0xc4>
      {
        isint=0;
 1003ea4:	e3a03000 	mov	r3, #0
 1003ea8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }
      
      if ((length==2) && isint)
 1003eac:	e59b3004 	ldr	r3, [fp, #4]
 1003eb0:	e3530002 	cmp	r3, #2
 1003eb4:	1a00000b 	bne	1003ee8 <printarg+0x100>
 1003eb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003ebc:	e3530000 	cmp	r3, #0
 1003ec0:	0a000008 	beq	1003ee8 <printarg+0x100>
      {
        val=va_arg( *args, int64_t );
 1003ec4:	e59b3014 	ldr	r3, [fp, #20]
 1003ec8:	e5933000 	ldr	r3, [r3]
 1003ecc:	e2833007 	add	r3, r3, #7
 1003ed0:	e3c33007 	bic	r3, r3, #7
 1003ed4:	e2831008 	add	r1, r3, #8
 1003ed8:	e59b2014 	ldr	r2, [fp, #20]
 1003edc:	e5821000 	str	r1, [r2]
 1003ee0:	e1c320d0 	ldrd	r2, [r3]
 1003ee4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }
      if ((length==2) && (!isint))
 1003ee8:	e59b3004 	ldr	r3, [fp, #4]
 1003eec:	e3530002 	cmp	r3, #2
 1003ef0:	1a00000b 	bne	1003f24 <printarg+0x13c>
 1003ef4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003ef8:	e3530000 	cmp	r3, #0
 1003efc:	1a000008 	bne	1003f24 <printarg+0x13c>
      {
        val=va_arg( *args, uint64_t );
 1003f00:	e59b3014 	ldr	r3, [fp, #20]
 1003f04:	e5933000 	ldr	r3, [r3]
 1003f08:	e2833007 	add	r3, r3, #7
 1003f0c:	e3c33007 	bic	r3, r3, #7
 1003f10:	e2831008 	add	r1, r3, #8
 1003f14:	e59b2014 	ldr	r2, [fp, #20]
 1003f18:	e5821000 	str	r1, [r2]
 1003f1c:	e1c320d0 	ldrd	r2, [r3]
 1003f20:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }
      if ((length!=2) && isint)
 1003f24:	e59b3004 	ldr	r3, [fp, #4]
 1003f28:	e3530002 	cmp	r3, #2
 1003f2c:	0a00000b 	beq	1003f60 <printarg+0x178>
 1003f30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003f34:	e3530000 	cmp	r3, #0
 1003f38:	0a000008 	beq	1003f60 <printarg+0x178>
      {
        val=(int64_t)va_arg( *args, int ); 
 1003f3c:	e59b3014 	ldr	r3, [fp, #20]
 1003f40:	e5933000 	ldr	r3, [r3]
 1003f44:	e2831004 	add	r1, r3, #4
 1003f48:	e59b2014 	ldr	r2, [fp, #20]
 1003f4c:	e5821000 	str	r1, [r2]
 1003f50:	e5933000 	ldr	r3, [r3]
 1003f54:	e1a02003 	mov	r2, r3
 1003f58:	e1a03fc2 	asr	r3, r2, #31
 1003f5c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }
      if ((length!=2) && (!isint))
 1003f60:	e59b3004 	ldr	r3, [fp, #4]
 1003f64:	e3530002 	cmp	r3, #2
 1003f68:	0a00000b 	beq	1003f9c <printarg+0x1b4>
 1003f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003f70:	e3530000 	cmp	r3, #0
 1003f74:	1a000008 	bne	1003f9c <printarg+0x1b4>
      {
        val=(int64_t)va_arg( *args, unsigned int ); 
 1003f78:	e59b3014 	ldr	r3, [fp, #20]
 1003f7c:	e5933000 	ldr	r3, [r3]
 1003f80:	e2831004 	add	r1, r3, #4
 1003f84:	e59b2014 	ldr	r2, [fp, #20]
 1003f88:	e5821000 	str	r1, [r2]
 1003f8c:	e5933000 	ldr	r3, [r3]
 1003f90:	e1a02003 	mov	r2, r3
 1003f94:	e3a03000 	mov	r3, #0
 1003f98:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }      
      
      if ((val==0) && ((precision!=0) || (dot==0)))
 1003f9c:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 1003fa0:	e1923003 	orrs	r3, r2, r3
 1003fa4:	1a00000c 	bne	1003fdc <printarg+0x1f4>
 1003fa8:	e59b3008 	ldr	r3, [fp, #8]
 1003fac:	e3530000 	cmp	r3, #0
 1003fb0:	1a000002 	bne	1003fc0 <printarg+0x1d8>
 1003fb4:	e59b300c 	ldr	r3, [fp, #12]
 1003fb8:	e3530000 	cmp	r3, #0
 1003fbc:	1a000006 	bne	1003fdc <printarg+0x1f4>
      { 
        ostg[0]='0';
 1003fc0:	e3a03030 	mov	r3, #48	; 0x30
 1003fc4:	e54b3048 	strb	r3, [fp, #-72]	; 0xffffffb8
        ostg[1]=0;
 1003fc8:	e3a03000 	mov	r3, #0
 1003fcc:	e54b3047 	strb	r3, [fp, #-71]	; 0xffffffb9
        count=1;
 1003fd0:	e3a03001 	mov	r3, #1
 1003fd4:	e50b300c 	str	r3, [fp, #-12]
 1003fd8:	ea000016 	b	1004038 <printarg+0x250>
      }      
      else 
      {
        if ((specifier=='x') || (specifier=='X') || (specifier=='p'))
 1003fdc:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003fe0:	e3530078 	cmp	r3, #120	; 0x78
 1003fe4:	0a000005 	beq	1004000 <printarg+0x218>
 1003fe8:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003fec:	e3530058 	cmp	r3, #88	; 0x58
 1003ff0:	0a000002 	beq	1004000 <printarg+0x218>
 1003ff4:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003ff8:	e3530070 	cmp	r3, #112	; 0x70
 1003ffc:	1a000008 	bne	1004024 <printarg+0x23c>
        {      
          count=hex_to_asc(val,ostg,specifier,length);
 1004000:	e55b1051 	ldrb	r1, [fp, #-81]	; 0xffffffaf
 1004004:	e24b2048 	sub	r2, fp, #72	; 0x48
 1004008:	e59b3004 	ldr	r3, [fp, #4]
 100400c:	e58d3000 	str	r3, [sp]
 1004010:	e1a03001 	mov	r3, r1
 1004014:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
 1004018:	ebffff14 	bl	1003c70 <hex_to_asc>
 100401c:	e50b000c 	str	r0, [fp, #-12]
 1004020:	ea000004 	b	1004038 <printarg+0x250>
        }
        else
        {
          count=int_to_asc(val,ostg,isint);
 1004024:	e24b2048 	sub	r2, fp, #72	; 0x48
 1004028:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100402c:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
 1004030:	ebfffebf 	bl	1003b34 <int_to_asc>
 1004034:	e50b000c 	str	r0, [fp, #-12]
        }
      }
      if ((specifier=='x') || (specifier=='X') || (specifier=='p'))
 1004038:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 100403c:	e3530078 	cmp	r3, #120	; 0x78
 1004040:	0a000005 	beq	100405c <printarg+0x274>
 1004044:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004048:	e3530058 	cmp	r3, #88	; 0x58
 100404c:	0a000002 	beq	100405c <printarg+0x274>
 1004050:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004054:	e3530070 	cmp	r3, #112	; 0x70
 1004058:	1a000020 	bne	10040e0 <printarg+0x2f8>
      {
        if (specifier=='p')
 100405c:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004060:	e3530070 	cmp	r3, #112	; 0x70
 1004064:	1a000007 	bne	1004088 <printarg+0x2a0>
        {
          leadchar='0';
 1004068:	e3a03030 	mov	r3, #48	; 0x30
 100406c:	e54b3006 	strb	r3, [fp, #-6]
          leadchar2='x';
 1004070:	e3a03078 	mov	r3, #120	; 0x78
 1004074:	e54b3007 	strb	r3, [fp, #-7]
          adder+=2;
 1004078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100407c:	e2833002 	add	r3, r3, #2
 1004080:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1004084:	ea00000c 	b	10040bc <printarg+0x2d4>
        }
        else
        {
          if  ((flag=='#') && (val!=0))
 1004088:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 100408c:	e3530023 	cmp	r3, #35	; 0x23
 1004090:	1a000009 	bne	10040bc <printarg+0x2d4>
 1004094:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 1004098:	e1923003 	orrs	r3, r2, r3
 100409c:	0a000006 	beq	10040bc <printarg+0x2d4>
          { 
            leadchar='0';
 10040a0:	e3a03030 	mov	r3, #48	; 0x30
 10040a4:	e54b3006 	strb	r3, [fp, #-6]
            leadchar2=specifier;
 10040a8:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10040ac:	e54b3007 	strb	r3, [fp, #-7]
            adder+=2;
 10040b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10040b4:	e2833002 	add	r3, r3, #2
 10040b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          }
        }        
        if ((flag=='0') && (dot==0))
 10040bc:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 10040c0:	e3530030 	cmp	r3, #48	; 0x30
 10040c4:	1a000036 	bne	10041a4 <printarg+0x3bc>
 10040c8:	e59b300c 	ldr	r3, [fp, #12]
 10040cc:	e3530000 	cmp	r3, #0
 10040d0:	1a000033 	bne	10041a4 <printarg+0x3bc>
        {
          pad='0';
 10040d4:	e3a03030 	mov	r3, #48	; 0x30
 10040d8:	e54b3005 	strb	r3, [fp, #-5]
        if ((flag=='0') && (dot==0))
 10040dc:	ea000030 	b	10041a4 <printarg+0x3bc>
        }
      }
      else
      {
        if ((val<0) && isint)
 10040e0:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 10040e4:	e3520000 	cmp	r2, #0
 10040e8:	e2d33000 	sbcs	r3, r3, #0
 10040ec:	aa000008 	bge	1004114 <printarg+0x32c>
 10040f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10040f4:	e3530000 	cmp	r3, #0
 10040f8:	0a000005 	beq	1004114 <printarg+0x32c>
        { 
          leadchar='-';
 10040fc:	e3a0302d 	mov	r3, #45	; 0x2d
 1004100:	e54b3006 	strb	r3, [fp, #-6]
          adder++;
 1004104:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004108:	e2833001 	add	r3, r3, #1
 100410c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1004110:	ea00001a 	b	1004180 <printarg+0x398>
        }    
        else if ((flag=='+') && (val>=0) && isint) 
 1004114:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004118:	e353002b 	cmp	r3, #43	; 0x2b
 100411c:	1a00000c 	bne	1004154 <printarg+0x36c>
 1004120:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 1004124:	e3520000 	cmp	r2, #0
 1004128:	e2d33000 	sbcs	r3, r3, #0
 100412c:	ba000008 	blt	1004154 <printarg+0x36c>
 1004130:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004134:	e3530000 	cmp	r3, #0
 1004138:	0a000005 	beq	1004154 <printarg+0x36c>
        { 
          leadchar='+';
 100413c:	e3a0302b 	mov	r3, #43	; 0x2b
 1004140:	e54b3006 	strb	r3, [fp, #-6]
          adder++;
 1004144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004148:	e2833001 	add	r3, r3, #1
 100414c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1004150:	ea00000a 	b	1004180 <printarg+0x398>
        }  
        else if ((flag==' ') && isint)
 1004154:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004158:	e3530020 	cmp	r3, #32
 100415c:	1a000007 	bne	1004180 <printarg+0x398>
 1004160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004164:	e3530000 	cmp	r3, #0
 1004168:	0a000004 	beq	1004180 <printarg+0x398>
        { 
          leadchar=' ';
 100416c:	e3a03020 	mov	r3, #32
 1004170:	e54b3006 	strb	r3, [fp, #-6]
          adder++;
 1004174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004178:	e2833001 	add	r3, r3, #1
 100417c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }    
      
        if ((flag=='0') && (dot==0))
 1004180:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004184:	e3530030 	cmp	r3, #48	; 0x30
 1004188:	1a000006 	bne	10041a8 <printarg+0x3c0>
 100418c:	e59b300c 	ldr	r3, [fp, #12]
 1004190:	e3530000 	cmp	r3, #0
 1004194:	1a000003 	bne	10041a8 <printarg+0x3c0>
        {
          pad='0';
 1004198:	e3a03030 	mov	r3, #48	; 0x30
 100419c:	e54b3005 	strb	r3, [fp, #-5]
 10041a0:	ea000000 	b	10041a8 <printarg+0x3c0>
        if ((flag=='0') && (dot==0))
 10041a4:	e320f000 	nop	{0}
        }
      }
      
      max=count;      
 10041a8:	e51b300c 	ldr	r3, [fp, #-12]
 10041ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      if (precision>count)
 10041b0:	e59b2008 	ldr	r2, [fp, #8]
 10041b4:	e51b300c 	ldr	r3, [fp, #-12]
 10041b8:	e1520003 	cmp	r2, r3
 10041bc:	da000001 	ble	10041c8 <printarg+0x3e0>
      {
        max=precision;     
 10041c0:	e59b3008 	ldr	r3, [fp, #8]
 10041c4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      }
      
      if ((leadchar!=0) && (pad=='0'))
 10041c8:	e55b3006 	ldrb	r3, [fp, #-6]
 10041cc:	e3530000 	cmp	r3, #0
 10041d0:	0a000007 	beq	10041f4 <printarg+0x40c>
 10041d4:	e55b3005 	ldrb	r3, [fp, #-5]
 10041d8:	e3530030 	cmp	r3, #48	; 0x30
 10041dc:	1a000004 	bne	10041f4 <printarg+0x40c>
      {
        cput(pinfo, c_count, leadchar);
 10041e0:	e55b3006 	ldrb	r3, [fp, #-6]
 10041e4:	e1a02003 	mov	r2, r3
 10041e8:	e59b1010 	ldr	r1, [fp, #16]
 10041ec:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10041f0:	ebfffdf8 	bl	10039d8 <cput>
      }
      if ((leadchar2!=0) && (pad=='0'))
 10041f4:	e55b3007 	ldrb	r3, [fp, #-7]
 10041f8:	e3530000 	cmp	r3, #0
 10041fc:	0a000007 	beq	1004220 <printarg+0x438>
 1004200:	e55b3005 	ldrb	r3, [fp, #-5]
 1004204:	e3530030 	cmp	r3, #48	; 0x30
 1004208:	1a000004 	bne	1004220 <printarg+0x438>
      {
        cput(pinfo, c_count, leadchar2); 
 100420c:	e55b3007 	ldrb	r3, [fp, #-7]
 1004210:	e1a02003 	mov	r2, r3
 1004214:	e59b1010 	ldr	r1, [fp, #16]
 1004218:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 100421c:	ebfffded 	bl	10039d8 <cput>
      }
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 1004220:	e3a03000 	mov	r3, #0
 1004224:	e50b3010 	str	r3, [fp, #-16]
 1004228:	ea000007 	b	100424c <printarg+0x464>
      {
        cput(pinfo, c_count, pad);
 100422c:	e55b3005 	ldrb	r3, [fp, #-5]
 1004230:	e1a02003 	mov	r2, r3
 1004234:	e59b1010 	ldr	r1, [fp, #16]
 1004238:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 100423c:	ebfffde5 	bl	10039d8 <cput>
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 1004240:	e51b3010 	ldr	r3, [fp, #-16]
 1004244:	e2833001 	add	r3, r3, #1
 1004248:	e50b3010 	str	r3, [fp, #-16]
 100424c:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1004250:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004254:	e0422003 	sub	r2, r2, r3
 1004258:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100425c:	e0423003 	sub	r3, r2, r3
 1004260:	e51b2010 	ldr	r2, [fp, #-16]
 1004264:	e1520003 	cmp	r2, r3
 1004268:	aa000002 	bge	1004278 <printarg+0x490>
 100426c:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004270:	e353002d 	cmp	r3, #45	; 0x2d
 1004274:	1affffec 	bne	100422c <printarg+0x444>
      }
      if ((leadchar!=0) && (pad==' '))
 1004278:	e55b3006 	ldrb	r3, [fp, #-6]
 100427c:	e3530000 	cmp	r3, #0
 1004280:	0a000007 	beq	10042a4 <printarg+0x4bc>
 1004284:	e55b3005 	ldrb	r3, [fp, #-5]
 1004288:	e3530020 	cmp	r3, #32
 100428c:	1a000004 	bne	10042a4 <printarg+0x4bc>
      {
        cput(pinfo, c_count, leadchar); 
 1004290:	e55b3006 	ldrb	r3, [fp, #-6]
 1004294:	e1a02003 	mov	r2, r3
 1004298:	e59b1010 	ldr	r1, [fp, #16]
 100429c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10042a0:	ebfffdcc 	bl	10039d8 <cput>
      }
      if ((leadchar2!=0) && (pad==' '))
 10042a4:	e55b3007 	ldrb	r3, [fp, #-7]
 10042a8:	e3530000 	cmp	r3, #0
 10042ac:	0a000007 	beq	10042d0 <printarg+0x4e8>
 10042b0:	e55b3005 	ldrb	r3, [fp, #-5]
 10042b4:	e3530020 	cmp	r3, #32
 10042b8:	1a000004 	bne	10042d0 <printarg+0x4e8>
      {
        cput(pinfo, c_count, leadchar2);   
 10042bc:	e55b3007 	ldrb	r3, [fp, #-7]
 10042c0:	e1a02003 	mov	r2, r3
 10042c4:	e59b1010 	ldr	r1, [fp, #16]
 10042c8:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10042cc:	ebfffdc1 	bl	10039d8 <cput>
      }            
      for (i=0;i<(precision-count);i++) 
 10042d0:	e3a03000 	mov	r3, #0
 10042d4:	e50b3010 	str	r3, [fp, #-16]
 10042d8:	ea000006 	b	10042f8 <printarg+0x510>
      {
        cput(pinfo, c_count, '0');
 10042dc:	e3a02030 	mov	r2, #48	; 0x30
 10042e0:	e59b1010 	ldr	r1, [fp, #16]
 10042e4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10042e8:	ebfffdba 	bl	10039d8 <cput>
      for (i=0;i<(precision-count);i++) 
 10042ec:	e51b3010 	ldr	r3, [fp, #-16]
 10042f0:	e2833001 	add	r3, r3, #1
 10042f4:	e50b3010 	str	r3, [fp, #-16]
 10042f8:	e59b2008 	ldr	r2, [fp, #8]
 10042fc:	e51b300c 	ldr	r3, [fp, #-12]
 1004300:	e0423003 	sub	r3, r2, r3
 1004304:	e51b2010 	ldr	r2, [fp, #-16]
 1004308:	e1520003 	cmp	r2, r3
 100430c:	bafffff2 	blt	10042dc <printarg+0x4f4>
      }
      for (i=0;i<count;i++)
 1004310:	e3a03000 	mov	r3, #0
 1004314:	e50b3010 	str	r3, [fp, #-16]
 1004318:	ea00000a 	b	1004348 <printarg+0x560>
      {
        cput(pinfo, c_count, ostg[i]);
 100431c:	e24b2048 	sub	r2, fp, #72	; 0x48
 1004320:	e51b3010 	ldr	r3, [fp, #-16]
 1004324:	e0823003 	add	r3, r2, r3
 1004328:	e5d33000 	ldrb	r3, [r3]
 100432c:	e1a02003 	mov	r2, r3
 1004330:	e59b1010 	ldr	r1, [fp, #16]
 1004334:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004338:	ebfffda6 	bl	10039d8 <cput>
      for (i=0;i<count;i++)
 100433c:	e51b3010 	ldr	r3, [fp, #-16]
 1004340:	e2833001 	add	r3, r3, #1
 1004344:	e50b3010 	str	r3, [fp, #-16]
 1004348:	e51b2010 	ldr	r2, [fp, #-16]
 100434c:	e51b300c 	ldr	r3, [fp, #-12]
 1004350:	e1520003 	cmp	r2, r3
 1004354:	bafffff0 	blt	100431c <printarg+0x534>
      }
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 1004358:	e3a03000 	mov	r3, #0
 100435c:	e50b3010 	str	r3, [fp, #-16]
 1004360:	ea000006 	b	1004380 <printarg+0x598>
      {
        cput(pinfo, c_count, ' ');    
 1004364:	e3a02020 	mov	r2, #32
 1004368:	e59b1010 	ldr	r1, [fp, #16]
 100436c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004370:	ebfffd98 	bl	10039d8 <cput>
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 1004374:	e51b3010 	ldr	r3, [fp, #-16]
 1004378:	e2833001 	add	r3, r3, #1
 100437c:	e50b3010 	str	r3, [fp, #-16]
 1004380:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1004384:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004388:	e0422003 	sub	r2, r2, r3
 100438c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004390:	e0423003 	sub	r3, r2, r3
 1004394:	e51b2010 	ldr	r2, [fp, #-16]
 1004398:	e1520003 	cmp	r2, r3
 100439c:	aa000091 	bge	10045e8 <printarg+0x800>
 10043a0:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 10043a4:	e353002d 	cmp	r3, #45	; 0x2d
 10043a8:	0affffed 	beq	1004364 <printarg+0x57c>
    if ((specifier=='d') || (specifier=='i') || (specifier=='u') || (specifier=='x') || (specifier=='X') || (specifier=='p')) 
 10043ac:	ea00008d 	b	10045e8 <printarg+0x800>
      }  
    }
    else if ((specifier=='s') || (specifier=='c'))
 10043b0:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10043b4:	e3530073 	cmp	r3, #115	; 0x73
 10043b8:	0a000002 	beq	10043c8 <printarg+0x5e0>
 10043bc:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10043c0:	e3530063 	cmp	r3, #99	; 0x63
 10043c4:	1a000085 	bne	10045e0 <printarg+0x7f8>
    {
      if (specifier=='c')
 10043c8:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10043cc:	e3530063 	cmp	r3, #99	; 0x63
 10043d0:	1a00000e 	bne	1004410 <printarg+0x628>
      {
        ostg[0]=va_arg( * args, int ) & 0xff;
 10043d4:	e59b3014 	ldr	r3, [fp, #20]
 10043d8:	e5933000 	ldr	r3, [r3]
 10043dc:	e2831004 	add	r1, r3, #4
 10043e0:	e59b2014 	ldr	r2, [fp, #20]
 10043e4:	e5821000 	str	r1, [r2]
 10043e8:	e5933000 	ldr	r3, [r3]
 10043ec:	e6ef3073 	uxtb	r3, r3
 10043f0:	e54b3048 	strb	r3, [fp, #-72]	; 0xffffffb8
        ostg[1]=0;
 10043f4:	e3a03000 	mov	r3, #0
 10043f8:	e54b3047 	strb	r3, [fp, #-71]	; 0xffffffb9
        count=1;
 10043fc:	e3a03001 	mov	r3, #1
 1004400:	e50b300c 	str	r3, [fp, #-12]
        dot=0;
 1004404:	e3a03000 	mov	r3, #0
 1004408:	e58b300c 	str	r3, [fp, #12]
 100440c:	ea000012 	b	100445c <printarg+0x674>
      }
      else {
        stgarg=va_arg( * args, char * ); 
 1004410:	e59b3014 	ldr	r3, [fp, #20]
 1004414:	e5933000 	ldr	r3, [r3]
 1004418:	e2831004 	add	r1, r3, #4
 100441c:	e59b2014 	ldr	r2, [fp, #20]
 1004420:	e5821000 	str	r1, [r2]
 1004424:	e5933000 	ldr	r3, [r3]
 1004428:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
        count=0;
 100442c:	e3a03000 	mov	r3, #0
 1004430:	e50b300c 	str	r3, [fp, #-12]
        while (*(stgarg+count)) 
 1004434:	ea000002 	b	1004444 <printarg+0x65c>
        {
          count++;
 1004438:	e51b300c 	ldr	r3, [fp, #-12]
 100443c:	e2833001 	add	r3, r3, #1
 1004440:	e50b300c 	str	r3, [fp, #-12]
        while (*(stgarg+count)) 
 1004444:	e51b300c 	ldr	r3, [fp, #-12]
 1004448:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 100444c:	e0823003 	add	r3, r2, r3
 1004450:	e5d33000 	ldrb	r3, [r3]
 1004454:	e3530000 	cmp	r3, #0
 1004458:	1afffff6 	bne	1004438 <printarg+0x650>
        }
      }        
       
      if (flag=='0') 
 100445c:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004460:	e3530030 	cmp	r3, #48	; 0x30
 1004464:	1a000001 	bne	1004470 <printarg+0x688>
      {
        pad='0';
 1004468:	e3a03030 	mov	r3, #48	; 0x30
 100446c:	e54b3005 	strb	r3, [fp, #-5]
      }        

      max=count;
 1004470:	e51b300c 	ldr	r3, [fp, #-12]
 1004474:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      if (dot && (precision<=count))
 1004478:	e59b300c 	ldr	r3, [fp, #12]
 100447c:	e3530000 	cmp	r3, #0
 1004480:	0a000005 	beq	100449c <printarg+0x6b4>
 1004484:	e59b2008 	ldr	r2, [fp, #8]
 1004488:	e51b300c 	ldr	r3, [fp, #-12]
 100448c:	e1520003 	cmp	r2, r3
 1004490:	ca000001 	bgt	100449c <printarg+0x6b4>
      {
        max=precision;
 1004494:	e59b3008 	ldr	r3, [fp, #8]
 1004498:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      }
      
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 100449c:	e3a03000 	mov	r3, #0
 10044a0:	e50b3010 	str	r3, [fp, #-16]
 10044a4:	ea000007 	b	10044c8 <printarg+0x6e0>
      {
         cput(pinfo, c_count, pad);
 10044a8:	e55b3005 	ldrb	r3, [fp, #-5]
 10044ac:	e1a02003 	mov	r2, r3
 10044b0:	e59b1010 	ldr	r1, [fp, #16]
 10044b4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10044b8:	ebfffd46 	bl	10039d8 <cput>
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 10044bc:	e51b3010 	ldr	r3, [fp, #-16]
 10044c0:	e2833001 	add	r3, r3, #1
 10044c4:	e50b3010 	str	r3, [fp, #-16]
 10044c8:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 10044cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10044d0:	e0422003 	sub	r2, r2, r3
 10044d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10044d8:	e0423003 	sub	r3, r2, r3
 10044dc:	e51b2010 	ldr	r2, [fp, #-16]
 10044e0:	e1520003 	cmp	r2, r3
 10044e4:	aa000002 	bge	10044f4 <printarg+0x70c>
 10044e8:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 10044ec:	e353002d 	cmp	r3, #45	; 0x2d
 10044f0:	1affffec 	bne	10044a8 <printarg+0x6c0>
      }           
       
      for (i=0;(i<count) && ((i<precision) || (dot==0));i++) 
 10044f4:	e3a03000 	mov	r3, #0
 10044f8:	e50b3010 	str	r3, [fp, #-16]
 10044fc:	ea000016 	b	100455c <printarg+0x774>
      {
        if (specifier=='c')
 1004500:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004504:	e3530063 	cmp	r3, #99	; 0x63
 1004508:	1a000008 	bne	1004530 <printarg+0x748>
        {
          cput(pinfo, c_count, ostg[i]);
 100450c:	e24b2048 	sub	r2, fp, #72	; 0x48
 1004510:	e51b3010 	ldr	r3, [fp, #-16]
 1004514:	e0823003 	add	r3, r2, r3
 1004518:	e5d33000 	ldrb	r3, [r3]
 100451c:	e1a02003 	mov	r2, r3
 1004520:	e59b1010 	ldr	r1, [fp, #16]
 1004524:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004528:	ebfffd2a 	bl	10039d8 <cput>
 100452c:	ea000007 	b	1004550 <printarg+0x768>
        }
        else
        {
          cput(pinfo, c_count, stgarg[i]);
 1004530:	e51b3010 	ldr	r3, [fp, #-16]
 1004534:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 1004538:	e0823003 	add	r3, r2, r3
 100453c:	e5d33000 	ldrb	r3, [r3]
 1004540:	e1a02003 	mov	r2, r3
 1004544:	e59b1010 	ldr	r1, [fp, #16]
 1004548:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 100454c:	ebfffd21 	bl	10039d8 <cput>
      for (i=0;(i<count) && ((i<precision) || (dot==0));i++) 
 1004550:	e51b3010 	ldr	r3, [fp, #-16]
 1004554:	e2833001 	add	r3, r3, #1
 1004558:	e50b3010 	str	r3, [fp, #-16]
 100455c:	e51b2010 	ldr	r2, [fp, #-16]
 1004560:	e51b300c 	ldr	r3, [fp, #-12]
 1004564:	e1520003 	cmp	r2, r3
 1004568:	aa000006 	bge	1004588 <printarg+0x7a0>
 100456c:	e51b2010 	ldr	r2, [fp, #-16]
 1004570:	e59b3008 	ldr	r3, [fp, #8]
 1004574:	e1520003 	cmp	r2, r3
 1004578:	baffffe0 	blt	1004500 <printarg+0x718>
 100457c:	e59b300c 	ldr	r3, [fp, #12]
 1004580:	e3530000 	cmp	r3, #0
 1004584:	0affffdd 	beq	1004500 <printarg+0x718>
        }
      }
      
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 1004588:	e3a03000 	mov	r3, #0
 100458c:	e50b3010 	str	r3, [fp, #-16]
 1004590:	ea000006 	b	10045b0 <printarg+0x7c8>
      {
        cput(pinfo, c_count, ' ');    
 1004594:	e3a02020 	mov	r2, #32
 1004598:	e59b1010 	ldr	r1, [fp, #16]
 100459c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10045a0:	ebfffd0c 	bl	10039d8 <cput>
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 10045a4:	e51b3010 	ldr	r3, [fp, #-16]
 10045a8:	e2833001 	add	r3, r3, #1
 10045ac:	e50b3010 	str	r3, [fp, #-16]
 10045b0:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 10045b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10045b8:	e0422003 	sub	r2, r2, r3
 10045bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10045c0:	e0423003 	sub	r3, r2, r3
 10045c4:	e51b2010 	ldr	r2, [fp, #-16]
 10045c8:	e1520003 	cmp	r2, r3
 10045cc:	aa000007 	bge	10045f0 <printarg+0x808>
 10045d0:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 10045d4:	e353002d 	cmp	r3, #45	; 0x2d
 10045d8:	0affffed 	beq	1004594 <printarg+0x7ac>
    else if ((specifier=='s') || (specifier=='c'))
 10045dc:	ea000003 	b	10045f0 <printarg+0x808>
      }   
    }
    else
    {
       return 1;
 10045e0:	e3a03001 	mov	r3, #1
 10045e4:	ea000003 	b	10045f8 <printarg+0x810>
    if ((specifier=='d') || (specifier=='i') || (specifier=='u') || (specifier=='x') || (specifier=='X') || (specifier=='p')) 
 10045e8:	e320f000 	nop	{0}
 10045ec:	ea000000 	b	10045f4 <printarg+0x80c>
    else if ((specifier=='s') || (specifier=='c'))
 10045f0:	e320f000 	nop	{0}
    }     
    
    return 0;
 10045f4:	e3a03000 	mov	r3, #0
}
 10045f8:	e1a00003 	mov	r0, r3
 10045fc:	e24bd004 	sub	sp, fp, #4
 1004600:	e8bd8800 	pop	{fp, pc}

01004604 <alt_vfprintf>:
    This routine parses the format string and calls the printarg routine to print the args as
    encountered.
    * @return                 #characters output for success, -1 for failure 
    */  
int alt_vfprintf(FILE *stream, const char *format, va_list args)
{
 1004604:	e92d4800 	push	{fp, lr}
 1004608:	e28db004 	add	fp, sp, #4
 100460c:	e24dd048 	sub	sp, sp, #72	; 0x48
 1004610:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
 1004614:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
 1004618:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    ALT_PRINTF_MEM_INFO_t *pinfo = (ALT_PRINTF_MEM_INFO_t *)stream;
 100461c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1004620:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int index=0,length;
 1004624:	e3a03000 	mov	r3, #0
 1004628:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    int count=0,dot;
 100462c:	e3a03000 	mov	r3, #0
 1004630:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    char c,flag;
    int width,precision;
       
    while (1)
    {
       c  = nextchar(format,&index);
 1004634:	e24b3018 	sub	r3, fp, #24
 1004638:	e1a01003 	mov	r1, r3
 100463c:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004640:	ebfffcff 	bl	1003a44 <nextchar>
 1004644:	e1a03000 	mov	r3, r0
 1004648:	e54b300d 	strb	r3, [fp, #-13]
         
       if (c=='%')
 100464c:	e55b300d 	ldrb	r3, [fp, #-13]
 1004650:	e3530025 	cmp	r3, #37	; 0x25
 1004654:	1a000089 	bne	1004880 <alt_vfprintf+0x27c>
       {
          c = nextchar(format,&index);
 1004658:	e24b3018 	sub	r3, fp, #24
 100465c:	e1a01003 	mov	r1, r3
 1004660:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004664:	ebfffcf6 	bl	1003a44 <nextchar>
 1004668:	e1a03000 	mov	r3, r0
 100466c:	e54b300d 	strb	r3, [fp, #-13]
          if (c=='%')  
 1004670:	e55b300d 	ldrb	r3, [fp, #-13]
 1004674:	e3530025 	cmp	r3, #37	; 0x25
 1004678:	1a000005 	bne	1004694 <alt_vfprintf+0x90>
          {
            cput(pinfo,&count,c);
 100467c:	e55b200d 	ldrb	r2, [fp, #-13]
 1004680:	e24b301c 	sub	r3, fp, #28
 1004684:	e1a01003 	mov	r1, r3
 1004688:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100468c:	ebfffcd1 	bl	10039d8 <cput>
            continue;
 1004690:	ea000082 	b	10048a0 <alt_vfprintf+0x29c>
          }
          
          flag=0;
 1004694:	e3a03000 	mov	r3, #0
 1004698:	e54b300e 	strb	r3, [fp, #-14]
          if ((c=='-') || (c=='+') || (c==' ') || (c=='#') || (c=='0')) 
 100469c:	e55b300d 	ldrb	r3, [fp, #-13]
 10046a0:	e353002d 	cmp	r3, #45	; 0x2d
 10046a4:	0a00000b 	beq	10046d8 <alt_vfprintf+0xd4>
 10046a8:	e55b300d 	ldrb	r3, [fp, #-13]
 10046ac:	e353002b 	cmp	r3, #43	; 0x2b
 10046b0:	0a000008 	beq	10046d8 <alt_vfprintf+0xd4>
 10046b4:	e55b300d 	ldrb	r3, [fp, #-13]
 10046b8:	e3530020 	cmp	r3, #32
 10046bc:	0a000005 	beq	10046d8 <alt_vfprintf+0xd4>
 10046c0:	e55b300d 	ldrb	r3, [fp, #-13]
 10046c4:	e3530023 	cmp	r3, #35	; 0x23
 10046c8:	0a000002 	beq	10046d8 <alt_vfprintf+0xd4>
 10046cc:	e55b300d 	ldrb	r3, [fp, #-13]
 10046d0:	e3530030 	cmp	r3, #48	; 0x30
 10046d4:	1a000007 	bne	10046f8 <alt_vfprintf+0xf4>
          {
            flag=c;
 10046d8:	e55b300d 	ldrb	r3, [fp, #-13]
 10046dc:	e54b300e 	strb	r3, [fp, #-14]
            c = nextchar(format,&index);
 10046e0:	e24b3018 	sub	r3, fp, #24
 10046e4:	e1a01003 	mov	r1, r3
 10046e8:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 10046ec:	ebfffcd4 	bl	1003a44 <nextchar>
 10046f0:	e1a03000 	mov	r3, r0
 10046f4:	e54b300d 	strb	r3, [fp, #-13]
          }
          
          width=0;
 10046f8:	e3a03000 	mov	r3, #0
 10046fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          if (c=='*')
 1004700:	e55b300d 	ldrb	r3, [fp, #-13]
 1004704:	e353002a 	cmp	r3, #42	; 0x2a
 1004708:	1a00000b 	bne	100473c <alt_vfprintf+0x138>
          {
            width=va_arg( args, int );
 100470c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1004710:	e2832004 	add	r2, r3, #4
 1004714:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
 1004718:	e5933000 	ldr	r3, [r3]
 100471c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            c = nextchar(format,&index);
 1004720:	e24b3018 	sub	r3, fp, #24
 1004724:	e1a01003 	mov	r1, r3
 1004728:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 100472c:	ebfffcc4 	bl	1003a44 <nextchar>
 1004730:	e1a03000 	mov	r3, r0
 1004734:	e54b300d 	strb	r3, [fp, #-13]
 1004738:	ea000006 	b	1004758 <alt_vfprintf+0x154>
          }
          else
          {          
            c = getdec(format,&index,&width,c);
 100473c:	e55b300d 	ldrb	r3, [fp, #-13]
 1004740:	e24b2020 	sub	r2, fp, #32
 1004744:	e24b1018 	sub	r1, fp, #24
 1004748:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 100474c:	ebfffcd2 	bl	1003a9c <getdec>
 1004750:	e1a03000 	mov	r3, r0
 1004754:	e54b300d 	strb	r3, [fp, #-13]
          }
                        
          precision=0;
 1004758:	e3a03000 	mov	r3, #0
 100475c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          dot=0;
 1004760:	e3a03000 	mov	r3, #0
 1004764:	e50b300c 	str	r3, [fp, #-12]
          if (c=='.')
 1004768:	e55b300d 	ldrb	r3, [fp, #-13]
 100476c:	e353002e 	cmp	r3, #46	; 0x2e
 1004770:	1a00001d 	bne	10047ec <alt_vfprintf+0x1e8>
          {
            dot=1;
 1004774:	e3a03001 	mov	r3, #1
 1004778:	e50b300c 	str	r3, [fp, #-12]
            c = nextchar(format,&index);
 100477c:	e24b3018 	sub	r3, fp, #24
 1004780:	e1a01003 	mov	r1, r3
 1004784:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004788:	ebfffcad 	bl	1003a44 <nextchar>
 100478c:	e1a03000 	mov	r3, r0
 1004790:	e54b300d 	strb	r3, [fp, #-13]
            if (c=='*')
 1004794:	e55b300d 	ldrb	r3, [fp, #-13]
 1004798:	e353002a 	cmp	r3, #42	; 0x2a
 100479c:	1a00000b 	bne	10047d0 <alt_vfprintf+0x1cc>
            {
              precision=va_arg( args, int );
 10047a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 10047a4:	e2832004 	add	r2, r3, #4
 10047a8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
 10047ac:	e5933000 	ldr	r3, [r3]
 10047b0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
              c = nextchar(format,&index);
 10047b4:	e24b3018 	sub	r3, fp, #24
 10047b8:	e1a01003 	mov	r1, r3
 10047bc:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 10047c0:	ebfffc9f 	bl	1003a44 <nextchar>
 10047c4:	e1a03000 	mov	r3, r0
 10047c8:	e54b300d 	strb	r3, [fp, #-13]
 10047cc:	ea000006 	b	10047ec <alt_vfprintf+0x1e8>
            }
            else
            {
              c = getdec(format,&index,&precision,c);
 10047d0:	e55b300d 	ldrb	r3, [fp, #-13]
 10047d4:	e24b2024 	sub	r2, fp, #36	; 0x24
 10047d8:	e24b1018 	sub	r1, fp, #24
 10047dc:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 10047e0:	ebfffcad 	bl	1003a9c <getdec>
 10047e4:	e1a03000 	mov	r3, r0
 10047e8:	e54b300d 	strb	r3, [fp, #-13]
            }
          }
          
          /*only l is implemented at this time*/
          length=0;
 10047ec:	e3a03000 	mov	r3, #0
 10047f0:	e50b3008 	str	r3, [fp, #-8]
          while (c=='l')
 10047f4:	ea000008 	b	100481c <alt_vfprintf+0x218>
          {
            length++;
 10047f8:	e51b3008 	ldr	r3, [fp, #-8]
 10047fc:	e2833001 	add	r3, r3, #1
 1004800:	e50b3008 	str	r3, [fp, #-8]
            c=nextchar(format,&index);
 1004804:	e24b3018 	sub	r3, fp, #24
 1004808:	e1a01003 	mov	r1, r3
 100480c:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004810:	ebfffc8b 	bl	1003a44 <nextchar>
 1004814:	e1a03000 	mov	r3, r0
 1004818:	e54b300d 	strb	r3, [fp, #-13]
          while (c=='l')
 100481c:	e55b300d 	ldrb	r3, [fp, #-13]
 1004820:	e353006c 	cmp	r3, #108	; 0x6c
 1004824:	0afffff3 	beq	10047f8 <alt_vfprintf+0x1f4>
          }
          
          if (printarg(pinfo,c,flag,width,length,precision,dot,&count,&args))
 1004828:	e51bc020 	ldr	ip, [fp, #-32]	; 0xffffffe0
 100482c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1004830:	e55b000e 	ldrb	r0, [fp, #-14]
 1004834:	e55b100d 	ldrb	r1, [fp, #-13]
 1004838:	e24b2030 	sub	r2, fp, #48	; 0x30
 100483c:	e58d2010 	str	r2, [sp, #16]
 1004840:	e24b201c 	sub	r2, fp, #28
 1004844:	e58d200c 	str	r2, [sp, #12]
 1004848:	e51b200c 	ldr	r2, [fp, #-12]
 100484c:	e58d2008 	str	r2, [sp, #8]
 1004850:	e58d3004 	str	r3, [sp, #4]
 1004854:	e51b3008 	ldr	r3, [fp, #-8]
 1004858:	e58d3000 	str	r3, [sp]
 100485c:	e1a0300c 	mov	r3, ip
 1004860:	e1a02000 	mov	r2, r0
 1004864:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1004868:	ebfffd5e 	bl	1003de8 <printarg>
 100486c:	e1a03000 	mov	r3, r0
 1004870:	e3530000 	cmp	r3, #0
 1004874:	0a000006 	beq	1004894 <alt_vfprintf+0x290>
          {
            return -1;
 1004878:	e3e03000 	mvn	r3, #0
 100487c:	ea00000a 	b	10048ac <alt_vfprintf+0x2a8>
          }            
       }
       else 
       {
         cput(pinfo,&count,c);
 1004880:	e55b200d 	ldrb	r2, [fp, #-13]
 1004884:	e24b301c 	sub	r3, fp, #28
 1004888:	e1a01003 	mov	r1, r3
 100488c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1004890:	ebfffc50 	bl	10039d8 <cput>
       }
       
       if (c==0)
 1004894:	e55b300d 	ldrb	r3, [fp, #-13]
 1004898:	e3530000 	cmp	r3, #0
 100489c:	0a000000 	beq	10048a4 <alt_vfprintf+0x2a0>
       c  = nextchar(format,&index);
 10048a0:	eaffff63 	b	1004634 <alt_vfprintf+0x30>
       {
         break;
 10048a4:	e320f000 	nop	{0}
       }
    }
    
    return count;
 10048a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
 10048ac:	e1a00003 	mov	r0, r3
 10048b0:	e24bd004 	sub	sp, fp, #4
 10048b4:	e8bd8800 	pop	{fp, pc}

010048b8 <uart_putc>:
FILE * term0 = (FILE *) &term0_info;
static UART_INFO_t term1_info = { uart_putc, 0, ALT_16550_DEVICE_SOCFPGA_UART1 };
FILE * term1 = (FILE *) &term1_info;

static void uart_putc(char pchar, FILE *info)
{
 10048b8:	e92d4800 	push	{fp, lr}
 10048bc:	e28db004 	add	fp, sp, #4
 10048c0:	e24dd010 	sub	sp, sp, #16
 10048c4:	e1a03000 	mov	r3, r0
 10048c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 10048cc:	e54b300d 	strb	r3, [fp, #-13]
  UART_INFO_t *port_info = (UART_INFO_t *) info;
 10048d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10048d4:	e50b3008 	str	r3, [fp, #-8]

  if (!port_info->init_done)
 10048d8:	e51b3008 	ldr	r3, [fp, #-8]
 10048dc:	e5933004 	ldr	r3, [r3, #4]
 10048e0:	e3530000 	cmp	r3, #0
 10048e4:	1a000004 	bne	10048fc <uart_putc+0x44>
  {
    port_info->init_done = 1;
 10048e8:	e51b3008 	ldr	r3, [fp, #-8]
 10048ec:	e3a02001 	mov	r2, #1
 10048f0:	e5832004 	str	r2, [r3, #4]
    init_uart(port_info);
 10048f4:	e51b0008 	ldr	r0, [fp, #-8]
 10048f8:	eb00000e 	bl	1004938 <init_uart>
  }

  if (pchar=='\n') uart_putc('\r', info);
 10048fc:	e55b300d 	ldrb	r3, [fp, #-13]
 1004900:	e353000a 	cmp	r3, #10
 1004904:	1a000002 	bne	1004914 <uart_putc+0x5c>
 1004908:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 100490c:	e3a0000d 	mov	r0, #13
 1004910:	ebffffe8 	bl	10048b8 <uart_putc>
  alt_16550_fifo_write_safe(&port_info->mUart, &pchar, 1, 1); 
 1004914:	e51b3008 	ldr	r3, [fp, #-8]
 1004918:	e283000c 	add	r0, r3, #12
 100491c:	e24b100d 	sub	r1, fp, #13
 1004920:	e3a03001 	mov	r3, #1
 1004924:	e3a02001 	mov	r2, #1
 1004928:	ebfff3ec 	bl	10018e0 <alt_16550_fifo_write_safe>

}
 100492c:	e320f000 	nop	{0}
 1004930:	e24bd004 	sub	sp, fp, #4
 1004934:	e8bd8800 	pop	{fp, pc}

01004938 <init_uart>:

static ALT_STATUS_CODE init_uart(UART_INFO_t *uartInfo)
{
 1004938:	e92d4800 	push	{fp, lr}
 100493c:	e28db004 	add	fp, sp, #4
 1004940:	e24dd010 	sub	sp, sp, #16
 1004944:	e50b0010 	str	r0, [fp, #-16]
    uint32_t uart_location = 0;
 1004948:	e3a03000 	mov	r3, #0
 100494c:	e50b300c 	str	r3, [fp, #-12]
    ALT_STATUS_CODE status;

    status = alt_16550_init( uartInfo->uart_ID, 
 1004950:	e51b3010 	ldr	r3, [fp, #-16]
 1004954:	e1d300b8 	ldrh	r0, [r3, #8]
 1004958:	e51b3010 	ldr	r3, [fp, #-16]
 100495c:	e283300c 	add	r3, r3, #12
 1004960:	e24b100c 	sub	r1, fp, #12
 1004964:	e3a0200c 	mov	r2, #12
 1004968:	ebfff333 	bl	100163c <alt_16550_init>
 100496c:	e50b0008 	str	r0, [fp, #-8]
                             (void *)&uart_location, 
                             ALT_CLK_L4_SP, 
                             &uartInfo->mUart);

    if (status == ALT_E_SUCCESS)
 1004970:	e51b3008 	ldr	r3, [fp, #-8]
 1004974:	e3530000 	cmp	r3, #0
 1004978:	1a000006 	bne	1004998 <init_uart+0x60>
    {   
        status = alt_16550_baudrate_set(&uartInfo->mUart, BAUD_RATE); 
 100497c:	e51b3010 	ldr	r3, [fp, #-16]
 1004980:	e283300c 	add	r3, r3, #12
 1004984:	e3a01cc2 	mov	r1, #49664	; 0xc200
 1004988:	e3401001 	movt	r1, #1
 100498c:	e1a00003 	mov	r0, r3
 1004990:	ebfff413 	bl	10019e4 <alt_16550_baudrate_set>
 1004994:	e50b0008 	str	r0, [fp, #-8]
    }

    if (status == ALT_E_SUCCESS)
 1004998:	e51b3008 	ldr	r3, [fp, #-8]
 100499c:	e3530000 	cmp	r3, #0
 10049a0:	1a000006 	bne	10049c0 <init_uart+0x88>
    {
        status = alt_16550_line_config_set(&uartInfo->mUart,  
 10049a4:	e51b3010 	ldr	r3, [fp, #-16]
 10049a8:	e283000c 	add	r0, r3, #12
 10049ac:	e3a03000 	mov	r3, #0
 10049b0:	e3a02000 	mov	r2, #0
 10049b4:	e3a01003 	mov	r1, #3
 10049b8:	ebfff470 	bl	1001b80 <alt_16550_line_config_set>
 10049bc:	e50b0008 	str	r0, [fp, #-8]
                                             ALT_16550_DATABITS_8, 
                                             ALT_16550_PARITY_DISABLE, 
                                             ALT_16550_STOPBITS_1); 
    }
    
    if (status == ALT_E_SUCCESS)
 10049c0:	e51b3008 	ldr	r3, [fp, #-8]
 10049c4:	e3530000 	cmp	r3, #0
 10049c8:	1a000004 	bne	10049e0 <init_uart+0xa8>
    {
        status = alt_16550_fifo_enable(&uartInfo->mUart);
 10049cc:	e51b3010 	ldr	r3, [fp, #-16]
 10049d0:	e283300c 	add	r3, r3, #12
 10049d4:	e1a00003 	mov	r0, r3
 10049d8:	ebfff380 	bl	10017e0 <alt_16550_fifo_enable>
 10049dc:	e50b0008 	str	r0, [fp, #-8]
    }

    if (status == ALT_E_SUCCESS)
 10049e0:	e51b3008 	ldr	r3, [fp, #-8]
 10049e4:	e3530000 	cmp	r3, #0
 10049e8:	1a000004 	bne	1004a00 <init_uart+0xc8>
    {
        status = alt_16550_enable(&uartInfo->mUart);
 10049ec:	e51b3010 	ldr	r3, [fp, #-16]
 10049f0:	e283300c 	add	r3, r3, #12
 10049f4:	e1a00003 	mov	r0, r3
 10049f8:	ebfff366 	bl	1001798 <alt_16550_enable>
 10049fc:	e50b0008 	str	r0, [fp, #-8]
    }
    return status;
 1004a00:	e51b3008 	ldr	r3, [fp, #-8]
}
 1004a04:	e1a00003 	mov	r0, r3
 1004a08:	e24bd004 	sub	sp, fp, #4
 1004a0c:	e8bd8800 	pop	{fp, pc}

01004a10 <zero_bss>:

#include "arm_mem_regions.h"
#include "shared_ipc.h"

static inline void zero_bss(void)
{
 1004a10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004a14:	e28db000 	add	fp, sp, #0
 1004a18:	e24dd00c 	sub	sp, sp, #12
    extern uint8_t __bss_start__;
    extern uint8_t __bss_end__;
    for (uint8_t *p = &__bss_start__; p < &__bss_end__; ++p) *p = 0;
 1004a1c:	e3083000 	movw	r3, #32768	; 0x8000
 1004a20:	e3403100 	movt	r3, #256	; 0x100
 1004a24:	e50b3008 	str	r3, [fp, #-8]
 1004a28:	ea000005 	b	1004a44 <zero_bss+0x34>
 1004a2c:	e51b3008 	ldr	r3, [fp, #-8]
 1004a30:	e3a02000 	mov	r2, #0
 1004a34:	e5c32000 	strb	r2, [r3]
 1004a38:	e51b3008 	ldr	r3, [fp, #-8]
 1004a3c:	e2833001 	add	r3, r3, #1
 1004a40:	e50b3008 	str	r3, [fp, #-8]
 1004a44:	e51b2008 	ldr	r2, [fp, #-8]
 1004a48:	e30c3014 	movw	r3, #49172	; 0xc014
 1004a4c:	e3403101 	movt	r3, #257	; 0x101
 1004a50:	e1520003 	cmp	r2, r3
 1004a54:	3afffff4 	bcc	1004a2c <zero_bss+0x1c>
}
 1004a58:	e320f000 	nop	{0}
 1004a5c:	e320f000 	nop	{0}
 1004a60:	e28bd000 	add	sp, fp, #0
 1004a64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004a68:	e12fff1e 	bx	lr

01004a6c <set_vbar>:

extern char _vectors;  // dichiarazione simbolo dal linker/HWLIB
static inline void set_vbar(void *addr) {
 1004a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004a70:	e28db000 	add	fp, sp, #0
 1004a74:	e24dd00c 	sub	sp, sp, #12
 1004a78:	e50b0008 	str	r0, [fp, #-8]
    __asm__ volatile ("mcr p15,0,%0,c12,c0,0" :: "r"(addr) : "memory");
 1004a7c:	e51b3008 	ldr	r3, [fp, #-8]
 1004a80:	ee0c3f10 	mcr	15, 0, r3, cr12, cr0, {0}
    __asm__ volatile ("isb");
 1004a84:	f57ff06f 	isb	sy
}
 1004a88:	e320f000 	nop	{0}
 1004a8c:	e28bd000 	add	sp, fp, #0
 1004a90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004a94:	e12fff1e 	bx	lr

01004a98 <core1_main>:

void core1_main(void)
{
 1004a98:	e92d4800 	push	{fp, lr}
 1004a9c:	e28db004 	add	fp, sp, #4
	set_vbar(&_vectors);
 1004aa0:	e3000000 	movw	r0, #0
 1004aa4:	e3400100 	movt	r0, #256	; 0x100
 1004aa8:	ebffffef 	bl	1004a6c <set_vbar>
    zero_bss();
 1004aac:	ebffffd7 	bl	1004a10 <zero_bss>

    // MMU di Core1 (crea le regioni: DDR WBWA + SHM NON-CACHEABLE + Device)
    (void)arm_mmu_setup_core1();
 1004ab0:	eb00013d 	bl	1004fac <arm_mmu_setup_core1>
    // in alternativa, re-inizializza uart1 qui)
    // Il binary di Core1 ha una propria copia di uart_stdio.c, quindi
    // deve inizializzare il relativo handle della UART prima di usare
    // printf. Reinizializzare la periferica è sicuro e consente di
    // condividere la stessa UART con Core0.
    (void)uart_stdio_init_uart1(115200);
 1004ab4:	e3a00cc2 	mov	r0, #49664	; 0xc200
 1004ab8:	e3400001 	movt	r0, #1
 1004abc:	eb000149 	bl	1004fe8 <uart_stdio_init_uart1>

    // Attendi che Core0 abbia inizializzato tutto e “aperto” l’handshake
    while (SHM_CTRL->magic != SHM_MAGIC_BOOT) { /* spin */ }
 1004ac0:	e320f000 	nop	{0}
 1004ac4:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004ac8:	e5932000 	ldr	r2, [r3]
 1004acc:	e3013dea 	movw	r3, #7658	; 0x1dea
 1004ad0:	e34c30de 	movt	r3, #49374	; 0xc0de
 1004ad4:	e1520003 	cmp	r2, r3
 1004ad8:	1afffff9 	bne	1004ac4 <core1_main+0x2c>
    while (SHM_CTRL->core0_ready != 1u)        { /* spin */ }
 1004adc:	e320f000 	nop	{0}
 1004ae0:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004ae4:	e5933004 	ldr	r3, [r3, #4]
 1004ae8:	e3530001 	cmp	r3, #1
 1004aec:	1afffffb 	bne	1004ae0 <core1_main+0x48>

    // Saluta e dichiara “ready”
    printf("\n[Core1] hello from DDR low. SHM @ 0x%08X ready.", SHM_BASE);
 1004af0:	e3a0143f 	mov	r1, #1056964608	; 0x3f000000
 1004af4:	e3050628 	movw	r0, #22056	; 0x5628
 1004af8:	e3400100 	movt	r0, #256	; 0x100
 1004afc:	ebfffba1 	bl	1003988 <alt_printf>
    SHM_CTRL->core1_ready = 1u;
 1004b00:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004b04:	e5d32008 	ldrb	r2, [r3, #8]
 1004b08:	e3a02000 	mov	r2, #0
 1004b0c:	e3822001 	orr	r2, r2, #1
 1004b10:	e5c32008 	strb	r2, [r3, #8]
 1004b14:	e5d32009 	ldrb	r2, [r3, #9]
 1004b18:	e3a02000 	mov	r2, #0
 1004b1c:	e5c32009 	strb	r2, [r3, #9]
 1004b20:	e5d3200a 	ldrb	r2, [r3, #10]
 1004b24:	e3a02000 	mov	r2, #0
 1004b28:	e5c3200a 	strb	r2, [r3, #10]
 1004b2c:	e5d3200b 	ldrb	r2, [r3, #11]
 1004b30:	e3a02000 	mov	r2, #0
 1004b34:	e5c3200b 	strb	r2, [r3, #11]
    __asm__ volatile("dmb sy" ::: "memory");
 1004b38:	f57ff05f 	dmb	sy

    // Esempio d’uso: aggiorna un contatore condiviso
    for (;;) {
        SHM_CTRL->trig_count++;
 1004b3c:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004b40:	e593200c 	ldr	r2, [r3, #12]
 1004b44:	e2822001 	add	r2, r2, #1
 1004b48:	e583200c 	str	r2, [r3, #12]
        __asm__ volatile("dmb sy" ::: "memory");
 1004b4c:	f57ff05f 	dmb	sy
        SHM_CTRL->trig_count++;
 1004b50:	eafffff9 	b	1004b3c <core1_main+0xa4>

01004b54 <core1_startup_body>:
extern unsigned long __data_start__, __data_end__, __data_load__;
extern void core1_main(void);

/* Entry linkata nel linker: ENTRY(_start_core1) */
static void __attribute__((used)) core1_startup_body(void)
{
 1004b54:	e92d4800 	push	{fp, lr}
 1004b58:	e28db004 	add	fp, sp, #4
 1004b5c:	e24dd008 	sub	sp, sp, #8

    /* azzera BSS */
    for (unsigned long *p = &__bss_start__; p < &__bss_end__; ++p) {
 1004b60:	e3083000 	movw	r3, #32768	; 0x8000
 1004b64:	e3403100 	movt	r3, #256	; 0x100
 1004b68:	e50b3008 	str	r3, [fp, #-8]
 1004b6c:	ea000005 	b	1004b88 <core1_startup_body+0x34>
        *p = 0UL;
 1004b70:	e51b3008 	ldr	r3, [fp, #-8]
 1004b74:	e3a02000 	mov	r2, #0
 1004b78:	e5832000 	str	r2, [r3]
    for (unsigned long *p = &__bss_start__; p < &__bss_end__; ++p) {
 1004b7c:	e51b3008 	ldr	r3, [fp, #-8]
 1004b80:	e2833004 	add	r3, r3, #4
 1004b84:	e50b3008 	str	r3, [fp, #-8]
 1004b88:	e51b2008 	ldr	r2, [fp, #-8]
 1004b8c:	e30c3014 	movw	r3, #49172	; 0xc014
 1004b90:	e3403101 	movt	r3, #257	; 0x101
 1004b94:	e1520003 	cmp	r2, r3
 1004b98:	3afffff4 	bcc	1004b70 <core1_startup_body+0x1c>
       // uint32_t vectors = (uint32_t)&__vectors_start__;
       // __asm__ volatile ("mcr p15,0,%0,c12,c0,0" :: "r"(vectors) : "memory");
       // __asm__ volatile("isb");
    */

    (void)core1_main();
 1004b9c:	ebffffbd 	bl	1004a98 <core1_main>

    for (;;) { /* stop */ }
 1004ba0:	eafffffe 	b	1004ba0 <core1_startup_body+0x4c>

01004ba4 <_start_core1>:

/* Entry linkata nel linker: ENTRY(_start_core1) */
void __attribute__((naked)) _start_core1(void)
{
    /* set SP in cima alla regione DDR_PRIV */
    __asm__ volatile (
 1004ba4:	e59fd004 	ldr	sp, [pc, #4]	; 1004bb0 <_start_core1+0xc>
 1004ba8:	eaffffe9 	b	1004b54 <core1_startup_body>
        "ldr sp, =__stack_top__\n\t"
        "b core1_startup_body\n\t"
        ::: "memory");
}
 1004bac:	e320f000 	nop	{0}
 1004bb0:	3f000000 	svccc	0x00000000

01004bb4 <memset>:
// src/core1/libc_min.c
#include <stddef.h>
#include <stdint.h>

void *memset(void *s, int c, size_t n)
{
 1004bb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004bb8:	e28db000 	add	fp, sp, #0
 1004bbc:	e24dd01c 	sub	sp, sp, #28
 1004bc0:	e50b0010 	str	r0, [fp, #-16]
 1004bc4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 1004bc8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint8_t *p = (uint8_t *)s;
 1004bcc:	e51b3010 	ldr	r3, [fp, #-16]
 1004bd0:	e50b300c 	str	r3, [fp, #-12]
    for (size_t i = 0; i < n; ++i) p[i] = (uint8_t)c;
 1004bd4:	e3a03000 	mov	r3, #0
 1004bd8:	e50b3008 	str	r3, [fp, #-8]
 1004bdc:	ea000008 	b	1004c04 <memset+0x50>
 1004be0:	e51b200c 	ldr	r2, [fp, #-12]
 1004be4:	e51b3008 	ldr	r3, [fp, #-8]
 1004be8:	e0823003 	add	r3, r2, r3
 1004bec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1004bf0:	e6ef2072 	uxtb	r2, r2
 1004bf4:	e5c32000 	strb	r2, [r3]
 1004bf8:	e51b3008 	ldr	r3, [fp, #-8]
 1004bfc:	e2833001 	add	r3, r3, #1
 1004c00:	e50b3008 	str	r3, [fp, #-8]
 1004c04:	e51b2008 	ldr	r2, [fp, #-8]
 1004c08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004c0c:	e1520003 	cmp	r2, r3
 1004c10:	3afffff2 	bcc	1004be0 <memset+0x2c>
    return s;
 1004c14:	e51b3010 	ldr	r3, [fp, #-16]
}
 1004c18:	e1a00003 	mov	r0, r3
 1004c1c:	e28bd000 	add	sp, fp, #0
 1004c20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004c24:	e12fff1e 	bx	lr

01004c28 <memcpy>:

void *memcpy(void *dst, const void *src, size_t n)
{
 1004c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004c2c:	e28db000 	add	fp, sp, #0
 1004c30:	e24dd024 	sub	sp, sp, #36	; 0x24
 1004c34:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1004c38:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 1004c3c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    uint8_t *d = (uint8_t *)dst;
 1004c40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004c44:	e50b300c 	str	r3, [fp, #-12]
    const uint8_t *s = (const uint8_t *)src;
 1004c48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004c4c:	e50b3010 	str	r3, [fp, #-16]
    for (size_t i = 0; i < n; ++i) d[i] = s[i];
 1004c50:	e3a03000 	mov	r3, #0
 1004c54:	e50b3008 	str	r3, [fp, #-8]
 1004c58:	ea00000a 	b	1004c88 <memcpy+0x60>
 1004c5c:	e51b2010 	ldr	r2, [fp, #-16]
 1004c60:	e51b3008 	ldr	r3, [fp, #-8]
 1004c64:	e0822003 	add	r2, r2, r3
 1004c68:	e51b100c 	ldr	r1, [fp, #-12]
 1004c6c:	e51b3008 	ldr	r3, [fp, #-8]
 1004c70:	e0813003 	add	r3, r1, r3
 1004c74:	e5d22000 	ldrb	r2, [r2]
 1004c78:	e5c32000 	strb	r2, [r3]
 1004c7c:	e51b3008 	ldr	r3, [fp, #-8]
 1004c80:	e2833001 	add	r3, r3, #1
 1004c84:	e50b3008 	str	r3, [fp, #-8]
 1004c88:	e51b2008 	ldr	r2, [fp, #-8]
 1004c8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1004c90:	e1520003 	cmp	r2, r3
 1004c94:	3afffff0 	bcc	1004c5c <memcpy+0x34>
    return dst;
 1004c98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
 1004c9c:	e1a00003 	mov	r0, r3
 1004ca0:	e28bd000 	add	sp, fp, #0
 1004ca4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004ca8:	e12fff1e 	bx	lr

01004cac <dsb>:

// ---------------------------
// Helpers CP15 / barriere
// ---------------------------
static inline void dmb(void){ __asm__ volatile("dmb sy" ::: "memory"); }
static inline void dsb(void){ __asm__ volatile("dsb sy" ::: "memory"); }
 1004cac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004cb0:	e28db000 	add	fp, sp, #0
 1004cb4:	f57ff04f 	dsb	sy
 1004cb8:	e320f000 	nop	{0}
 1004cbc:	e28bd000 	add	sp, fp, #0
 1004cc0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004cc4:	e12fff1e 	bx	lr

01004cc8 <isb>:
static inline void isb(void){ __asm__ volatile("isb" ::: "memory"); }
 1004cc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004ccc:	e28db000 	add	fp, sp, #0
 1004cd0:	f57ff06f 	isb	sy
 1004cd4:	e320f000 	nop	{0}
 1004cd8:	e28bd000 	add	sp, fp, #0
 1004cdc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004ce0:	e12fff1e 	bx	lr

01004ce4 <a9_sanitize_before_mmu>:


// Disabilita MMU/I/D/BP e invalida TLB (presume IRQ/FIQ OFF e VBAR già ok)
static inline void a9_sanitize_before_mmu(void)
{
 1004ce4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004ce8:	e28db000 	add	fp, sp, #0
 1004cec:	e24dd00c 	sub	sp, sp, #12
    // qui presumiamo già IRQ/FIQ disabilitati (cpsid if) e VBAR corretto
    uint32_t sctlr;
    __asm__ volatile("mrc p15,0,%0,c1,c0,0" : "=r"(sctlr));
 1004cf0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
 1004cf4:	e50b3008 	str	r3, [fp, #-8]

    // spegni MMU (M), D-cache (C), I-cache (I), Branch predictor (Z)
    sctlr &= ~( (1u<<0) | (1u<<2) | (1u<<12) | (1u<<11) );
 1004cf8:	e51b3008 	ldr	r3, [fp, #-8]
 1004cfc:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
 1004d00:	e3c33005 	bic	r3, r3, #5
 1004d04:	e50b3008 	str	r3, [fp, #-8]
    __asm__ volatile("mcr p15,0,%0,c1,c0,0" :: "r"(sctlr));
 1004d08:	e51b3008 	ldr	r3, [fp, #-8]
 1004d0c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    __asm__ volatile("dsb sy; isb");
 1004d10:	f57ff04f 	dsb	sy
 1004d14:	f57ff06f 	isb	sy

    // invalida TLB unificati
    __asm__ volatile("mcr p15,0,%0,c8,c7,0" :: "r"(0));
 1004d18:	e3a03000 	mov	r3, #0
 1004d1c:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    __asm__ volatile("dsb sy; isb");
 1004d20:	f57ff04f 	dsb	sy
 1004d24:	f57ff06f 	isb	sy
}
 1004d28:	e320f000 	nop	{0}
 1004d2c:	e28bd000 	add	sp, fp, #0
 1004d30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004d34:	e12fff1e 	bx	lr

01004d38 <arm_enable_smp_and_scu>:

// Abilita SMP + SCU (prima di accendere cache/MMU)
void arm_enable_smp_and_scu(void)
{
 1004d38:	e92d4800 	push	{fp, lr}
 1004d3c:	e28db004 	add	fp, sp, #4
 1004d40:	e24dd010 	sub	sp, sp, #16
    uint32_t actlr;
    __asm__ volatile("mrc p15,0,%0,c1,c0,1":"=r"(actlr));
 1004d44:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
 1004d48:	e50b3008 	str	r3, [fp, #-8]
    actlr |= (1u<<6); // ACTLR.SMP=1
 1004d4c:	e51b3008 	ldr	r3, [fp, #-8]
 1004d50:	e3833040 	orr	r3, r3, #64	; 0x40
 1004d54:	e50b3008 	str	r3, [fp, #-8]
    __asm__ volatile("mcr p15,0,%0,c1,c0,1"::"r"(actlr));
 1004d58:	e51b3008 	ldr	r3, [fp, #-8]
 1004d5c:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    dsb(); isb();
 1004d60:	ebffffd1 	bl	1004cac <dsb>
 1004d64:	ebffffd7 	bl	1004cc8 <isb>
     * prova ad accedere ai registri privati della SCU.  In tal caso occorre
     * abilitare la SCU esclusivamente dal core 0, mentre è comunque necessario
     * impostare il bit SMP sugli altri core.
    */
    uint32_t mpidr;
    __asm__ volatile("mrc p15,0,%0,c0,c0,5" : "=r"(mpidr));
 1004d68:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
 1004d6c:	e50b300c 	str	r3, [fp, #-12]
    if ((mpidr & 0x3u) == 0u) {
 1004d70:	e51b300c 	ldr	r3, [fp, #-12]
 1004d74:	e2033003 	and	r3, r3, #3
 1004d78:	e3530000 	cmp	r3, #0
 1004d7c:	1a00000d 	bne	1004db8 <arm_enable_smp_and_scu+0x80>
    	volatile uint32_t *SCU_CTRL = (volatile uint32_t *)(uintptr_t)(A9_SCU_BASE + 0x00u);
 1004d80:	e3a03903 	mov	r3, #49152	; 0xc000
 1004d84:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 1004d88:	e50b3010 	str	r3, [fp, #-16]
        uint32_t val = *SCU_CTRL;
 1004d8c:	e51b3010 	ldr	r3, [fp, #-16]
 1004d90:	e5933000 	ldr	r3, [r3]
 1004d94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        val |= 1u; // enable SCU
 1004d98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004d9c:	e3833001 	orr	r3, r3, #1
 1004da0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        *SCU_CTRL = val;
 1004da4:	e51b3010 	ldr	r3, [fp, #-16]
 1004da8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1004dac:	e5832000 	str	r2, [r3]
        dsb(); isb();
 1004db0:	ebffffbd 	bl	1004cac <dsb>
 1004db4:	ebffffc3 	bl	1004cc8 <isb>
    }
}
 1004db8:	e320f000 	nop	{0}
 1004dbc:	e24bd004 	sub	sp, fp, #4
 1004dc0:	e8bd8800 	pop	{fp, pc}

01004dc4 <mmu_aux_alloc>:
static uint8_t   s_mmu_aux_pool[64 * 1024] __attribute__((aligned(16384)));
static mmu_pool_t s_mmu_pool = { s_mmu_aux_pool, sizeof(s_mmu_aux_pool), 0 };

/* Allocatore con la FIRMA CORRETTA: (const unsigned int size, void *user_ctx) */
static void *mmu_aux_alloc(const unsigned int size, void *user_ctx)
{
 1004dc4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004dc8:	e28db000 	add	fp, sp, #0
 1004dcc:	e24dd01c 	sub	sp, sp, #28
 1004dd0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1004dd4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mmu_pool_t *pool = (mmu_pool_t *)user_ctx;
 1004dd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004ddc:	e50b3008 	str	r3, [fp, #-8]
    if (!pool) return NULL;
 1004de0:	e51b3008 	ldr	r3, [fp, #-8]
 1004de4:	e3530000 	cmp	r3, #0
 1004de8:	1a000001 	bne	1004df4 <mmu_aux_alloc+0x30>
 1004dec:	e3a03000 	mov	r3, #0
 1004df0:	ea000023 	b	1004e84 <mmu_aux_alloc+0xc0>

    /* Allineo a 16KB per richieste grandi (TTB), altrimenti 64B */
    const size_t align = (size >= 16384u) ? 16384u : 64u;
 1004df4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004df8:	e3530901 	cmp	r3, #16384	; 0x4000
 1004dfc:	3a000001 	bcc	1004e08 <mmu_aux_alloc+0x44>
 1004e00:	e3a03901 	mov	r3, #16384	; 0x4000
 1004e04:	ea000000 	b	1004e0c <mmu_aux_alloc+0x48>
 1004e08:	e3a03040 	mov	r3, #64	; 0x40
 1004e0c:	e50b300c 	str	r3, [fp, #-12]
    size_t off = (pool->off + (align - 1u)) & ~(align - 1u);
 1004e10:	e51b3008 	ldr	r3, [fp, #-8]
 1004e14:	e5932008 	ldr	r2, [r3, #8]
 1004e18:	e51b300c 	ldr	r3, [fp, #-12]
 1004e1c:	e0823003 	add	r3, r2, r3
 1004e20:	e2432001 	sub	r2, r3, #1
 1004e24:	e51b300c 	ldr	r3, [fp, #-12]
 1004e28:	e2633000 	rsb	r3, r3, #0
 1004e2c:	e0033002 	and	r3, r3, r2
 1004e30:	e50b3010 	str	r3, [fp, #-16]

    if (off + size > pool->size) return NULL;
 1004e34:	e51b2010 	ldr	r2, [fp, #-16]
 1004e38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004e3c:	e0822003 	add	r2, r2, r3
 1004e40:	e51b3008 	ldr	r3, [fp, #-8]
 1004e44:	e5933004 	ldr	r3, [r3, #4]
 1004e48:	e1520003 	cmp	r2, r3
 1004e4c:	9a000001 	bls	1004e58 <mmu_aux_alloc+0x94>
 1004e50:	e3a03000 	mov	r3, #0
 1004e54:	ea00000a 	b	1004e84 <mmu_aux_alloc+0xc0>

    void *ptr = pool->base + off;
 1004e58:	e51b3008 	ldr	r3, [fp, #-8]
 1004e5c:	e5932000 	ldr	r2, [r3]
 1004e60:	e51b3010 	ldr	r3, [fp, #-16]
 1004e64:	e0823003 	add	r3, r2, r3
 1004e68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pool->off = off + size;
 1004e6c:	e51b2010 	ldr	r2, [fp, #-16]
 1004e70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004e74:	e0822003 	add	r2, r2, r3
 1004e78:	e51b3008 	ldr	r3, [fp, #-8]
 1004e7c:	e5832008 	str	r2, [r3, #8]
    return ptr;
 1004e80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
 1004e84:	e1a00003 	mov	r0, r3
 1004e88:	e28bd000 	add	sp, fp, #0
 1004e8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004e90:	e12fff1e 	bx	lr

01004e94 <create_va_space_core1_ddr>:


// VA space per CORE1: Shared low DDR + DDR privata core1 + SHM non-cache + periferiche HPS.
static ALT_STATUS_CODE create_va_space_core1_ddr(uint32_t **ttb_out)
{
 1004e94:	e92d4800 	push	{fp, lr}
 1004e98:	e28db004 	add	fp, sp, #4
 1004e9c:	e24dd070 	sub	sp, sp, #112	; 0x70
 1004ea0:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98
    ALT_STATUS_CODE s = alt_mmu_init();
 1004ea4:	ebfff3c9 	bl	1001dd0 <alt_mmu_init>
 1004ea8:	e50b0008 	str	r0, [fp, #-8]
    if (s != ALT_E_SUCCESS) return s;
 1004eac:	e51b3008 	ldr	r3, [fp, #-8]
 1004eb0:	e3530000 	cmp	r3, #0
 1004eb4:	0a000001 	beq	1004ec0 <create_va_space_core1_ddr+0x2c>
 1004eb8:	e51b3008 	ldr	r3, [fp, #-8]
 1004ebc:	ea000037 	b	1004fa0 <create_va_space_core1_ddr+0x10c>

    s_mmu_pool.off = 0;
 1004ec0:	e305370c 	movw	r3, #22284	; 0x570c
 1004ec4:	e3403100 	movt	r3, #256	; 0x100
 1004ec8:	e3a02000 	mov	r2, #0
 1004ecc:	e5832008 	str	r2, [r3, #8]

    ALT_MMU_MEM_REGION_t regions[] = {
 1004ed0:	e305365c 	movw	r3, #22108	; 0x565c
 1004ed4:	e3403100 	movt	r3, #256	; 0x100
 1004ed8:	e24b0060 	sub	r0, fp, #96	; 0x60
 1004edc:	e1a01003 	mov	r1, r3
 1004ee0:	e3a03050 	mov	r3, #80	; 0x50
 1004ee4:	e1a02003 	mov	r2, r3
 1004ee8:	ebffff4e 	bl	1004c28 <memcpy>
            .execute    = ALT_MMU_TTB_XN_ENABLE,
            .security   = ALT_MMU_TTB_NS_SECURE
        }
    };

    size_t region_count = sizeof(regions)/sizeof(regions[0]);
 1004eec:	e3a03004 	mov	r3, #4
 1004ef0:	e50b300c 	str	r3, [fp, #-12]
    size_t need = alt_mmu_va_space_storage_required(regions, region_count);
 1004ef4:	e24b3060 	sub	r3, fp, #96	; 0x60
 1004ef8:	e51b100c 	ldr	r1, [fp, #-12]
 1004efc:	e1a00003 	mov	r0, r3
 1004f00:	ebfff57e 	bl	1002500 <alt_mmu_va_space_storage_required>
 1004f04:	e50b0010 	str	r0, [fp, #-16]
    if (need > sizeof(s_ttb_storage)) return ALT_E_BAD_ARG;
 1004f08:	e51b3010 	ldr	r3, [fp, #-16]
 1004f0c:	e3530801 	cmp	r3, #65536	; 0x10000
 1004f10:	9a000001 	bls	1004f1c <create_va_space_core1_ddr+0x88>
 1004f14:	e3e03008 	mvn	r3, #8
 1004f18:	ea000020 	b	1004fa0 <create_va_space_core1_ddr+0x10c>

    uint32_t *ttb1 = NULL;
 1004f1c:	e3a03000 	mov	r3, #0
 1004f20:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    s = alt_mmu_va_space_create(&ttb1, regions, region_count,
 1004f24:	e24b1060 	sub	r1, fp, #96	; 0x60
 1004f28:	e24b0064 	sub	r0, fp, #100	; 0x64
 1004f2c:	e305370c 	movw	r3, #22284	; 0x570c
 1004f30:	e3403100 	movt	r3, #256	; 0x100
 1004f34:	e58d3000 	str	r3, [sp]
 1004f38:	e3043dc4 	movw	r3, #19908	; 0x4dc4
 1004f3c:	e3403100 	movt	r3, #256	; 0x100
 1004f40:	e51b200c 	ldr	r2, [fp, #-12]
 1004f44:	ebfff6ca 	bl	1002a74 <alt_mmu_va_space_create>
 1004f48:	e50b0008 	str	r0, [fp, #-8]
                                /*ttb_alloc=*/mmu_aux_alloc,
                                /*ttb_alloc_user=*/&s_mmu_pool);
    if (s != ALT_E_SUCCESS) return s;
 1004f4c:	e51b3008 	ldr	r3, [fp, #-8]
 1004f50:	e3530000 	cmp	r3, #0
 1004f54:	0a000001 	beq	1004f60 <create_va_space_core1_ddr+0xcc>
 1004f58:	e51b3008 	ldr	r3, [fp, #-8]
 1004f5c:	ea00000f 	b	1004fa0 <create_va_space_core1_ddr+0x10c>

    s = alt_mmu_va_space_enable(ttb1);
 1004f60:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
 1004f64:	e1a00003 	mov	r0, r3
 1004f68:	ebfffa37 	bl	100384c <alt_mmu_va_space_enable>
 1004f6c:	e50b0008 	str	r0, [fp, #-8]
    if (s != ALT_E_SUCCESS) return s;
 1004f70:	e51b3008 	ldr	r3, [fp, #-8]
 1004f74:	e3530000 	cmp	r3, #0
 1004f78:	0a000001 	beq	1004f84 <create_va_space_core1_ddr+0xf0>
 1004f7c:	e51b3008 	ldr	r3, [fp, #-8]
 1004f80:	ea000006 	b	1004fa0 <create_va_space_core1_ddr+0x10c>

    if (ttb_out) *ttb_out = ttb1;
 1004f84:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
 1004f88:	e3530000 	cmp	r3, #0
 1004f8c:	0a000002 	beq	1004f9c <create_va_space_core1_ddr+0x108>
 1004f90:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
 1004f94:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
 1004f98:	e5832000 	str	r2, [r3]
    return ALT_E_SUCCESS;
 1004f9c:	e3a03000 	mov	r3, #0
}
 1004fa0:	e1a00003 	mov	r0, r3
 1004fa4:	e24bd004 	sub	sp, fp, #4
 1004fa8:	e8bd8800 	pop	{fp, pc}

01004fac <arm_mmu_setup_core1>:
	    return ALT_E_SUCCESS;
}

// Core1 → mappa [C1]
ALT_STATUS_CODE arm_mmu_setup_core1(void)
{
 1004fac:	e92d4800 	push	{fp, lr}
 1004fb0:	e28db004 	add	fp, sp, #4
 1004fb4:	e24dd008 	sub	sp, sp, #8
    a9_sanitize_before_mmu();
 1004fb8:	ebffff49 	bl	1004ce4 <a9_sanitize_before_mmu>
    arm_enable_smp_and_scu();
 1004fbc:	ebffff5d 	bl	1004d38 <arm_enable_smp_and_scu>

    uint32_t *ttb = NULL;
 1004fc0:	e3a03000 	mov	r3, #0
 1004fc4:	e50b300c 	str	r3, [fp, #-12]
    int s;
    s=create_va_space_core1_ddr(&ttb);
 1004fc8:	e24b300c 	sub	r3, fp, #12
 1004fcc:	e1a00003 	mov	r0, r3
 1004fd0:	ebffffaf 	bl	1004e94 <create_va_space_core1_ddr>
 1004fd4:	e50b0008 	str	r0, [fp, #-8]
    //return create_va_space_core1(&ttb);
    return s;
 1004fd8:	e51b3008 	ldr	r3, [fp, #-8]
}
 1004fdc:	e1a00003 	mov	r0, r3
 1004fe0:	e24bd004 	sub	sp, fp, #4
 1004fe4:	e8bd8800 	pop	{fp, pc}

01004fe8 <uart_stdio_init_uart1>:
/* Facoltativo: CRLF su newline (abilita se ti serve \r\n) */
void uart_stdio_set_crlf(int enable);


ALT_STATUS_CODE uart_stdio_init_uart1(uint32_t baud)
{
 1004fe8:	e92d4800 	push	{fp, lr}
 1004fec:	e28db004 	add	fp, sp, #4
 1004ff0:	e24dd010 	sub	sp, sp, #16
 1004ff4:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE st;
    uint32_t l4sp_hz_u32 = 0;
 1004ff8:	e3a03000 	mov	r3, #0
 1004ffc:	e50b300c 	str	r3, [fp, #-12]

    /* clock L4_SP (bus dei peripheral, usato dalle UART) */
    st = alt_clk_freq_get(ALT_CLK_L4_SP, &l4sp_hz_u32);
 1005000:	e24b300c 	sub	r3, fp, #12
 1005004:	e1a01003 	mov	r1, r3
 1005008:	e3a0000c 	mov	r0, #12
 100500c:	ebffefa8 	bl	1000eb4 <alt_clk_freq_get>
 1005010:	e50b0008 	str	r0, [fp, #-8]
    if (st != ALT_E_SUCCESS) return st;
 1005014:	e51b3008 	ldr	r3, [fp, #-8]
 1005018:	e3530000 	cmp	r3, #0
 100501c:	0a000001 	beq	1005028 <uart_stdio_init_uart1+0x40>
 1005020:	e51b3008 	ldr	r3, [fp, #-8]
 1005024:	ea000022 	b	10050b4 <uart_stdio_init_uart1+0xcc>

    /* init: (device, location=NULL, clock_freq, handle) */
    st = alt_16550_init(ALT_16550_DEVICE_SOCFPGA_UART1, NULL,
 1005028:	e51b200c 	ldr	r2, [fp, #-12]
 100502c:	e30c3000 	movw	r3, #49152	; 0xc000
 1005030:	e3403101 	movt	r3, #257	; 0x101
 1005034:	e3a01000 	mov	r1, #0
 1005038:	e3a00001 	mov	r0, #1
 100503c:	ebfff17e 	bl	100163c <alt_16550_init>
 1005040:	e50b0008 	str	r0, [fp, #-8]
                        (alt_freq_t)l4sp_hz_u32, &s_uart1);
    if (st != ALT_E_SUCCESS) return st;
 1005044:	e51b3008 	ldr	r3, [fp, #-8]
 1005048:	e3530000 	cmp	r3, #0
 100504c:	0a000001 	beq	1005058 <uart_stdio_init_uart1+0x70>
 1005050:	e51b3008 	ldr	r3, [fp, #-8]
 1005054:	ea000016 	b	10050b4 <uart_stdio_init_uart1+0xcc>

    /* baud: nella tua hwlib è (handle, baud) */
    st = alt_16550_baudrate_set(&s_uart1, baud);
 1005058:	e51b1010 	ldr	r1, [fp, #-16]
 100505c:	e30c0000 	movw	r0, #49152	; 0xc000
 1005060:	e3400101 	movt	r0, #257	; 0x101
 1005064:	ebfff25e 	bl	10019e4 <alt_16550_baudrate_set>
 1005068:	e50b0008 	str	r0, [fp, #-8]
    if (st != ALT_E_SUCCESS) return st;
 100506c:	e51b3008 	ldr	r3, [fp, #-8]
 1005070:	e3530000 	cmp	r3, #0
 1005074:	0a000001 	beq	1005080 <uart_stdio_init_uart1+0x98>
 1005078:	e51b3008 	ldr	r3, [fp, #-8]
 100507c:	ea00000c 	b	10050b4 <uart_stdio_init_uart1+0xcc>
       // st = alt_16550_line_config_set(&s_uart1,
       //        ALT_16550_PARITY_DISABLE, ALT_16550_DATA_BITS_8, ALT_16550_STOP_BITS_1);
       // if (st != ALT_E_SUCCESS) return st;
    */

    (void)alt_16550_fifo_enable(&s_uart1);  /* ok anche se no-op */
 1005080:	e30c0000 	movw	r0, #49152	; 0xc000
 1005084:	e3400101 	movt	r0, #257	; 0x101
 1005088:	ebfff1d4 	bl	10017e0 <alt_16550_fifo_enable>

    st = alt_16550_enable(&s_uart1);
 100508c:	e30c0000 	movw	r0, #49152	; 0xc000
 1005090:	e3400101 	movt	r0, #257	; 0x101
 1005094:	ebfff1bf 	bl	1001798 <alt_16550_enable>
 1005098:	e50b0008 	str	r0, [fp, #-8]
    if (st != ALT_E_SUCCESS) return st;
 100509c:	e51b3008 	ldr	r3, [fp, #-8]
 10050a0:	e3530000 	cmp	r3, #0
 10050a4:	0a000001 	beq	10050b0 <uart_stdio_init_uart1+0xc8>
 10050a8:	e51b3008 	ldr	r3, [fp, #-8]
 10050ac:	ea000000 	b	10050b4 <uart_stdio_init_uart1+0xcc>
    setvbuf(stdout, NULL, _IONBF, 0);
    setvbuf(stderr, NULL, _IONBF, 0);
#endif


    return ALT_E_SUCCESS;
 10050b0:	e3a03000 	mov	r3, #0
}
 10050b4:	e1a00003 	mov	r0, r3
 10050b8:	e24bd004 	sub	sp, fp, #4
 10050bc:	e8bd8800 	pop	{fp, pc}

010050c0 <__udivsi3>:
 10050c0:	e2512001 	subs	r2, r1, #1
 10050c4:	012fff1e 	bxeq	lr
 10050c8:	3a000036 	bcc	10051a8 <__udivsi3+0xe8>
 10050cc:	e1500001 	cmp	r0, r1
 10050d0:	9a000022 	bls	1005160 <__udivsi3+0xa0>
 10050d4:	e1110002 	tst	r1, r2
 10050d8:	0a000023 	beq	100516c <__udivsi3+0xac>
 10050dc:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 10050e0:	01a01181 	lsleq	r1, r1, #3
 10050e4:	03a03008 	moveq	r3, #8
 10050e8:	13a03001 	movne	r3, #1
 10050ec:	e3510201 	cmp	r1, #268435456	; 0x10000000
 10050f0:	31510000 	cmpcc	r1, r0
 10050f4:	31a01201 	lslcc	r1, r1, #4
 10050f8:	31a03203 	lslcc	r3, r3, #4
 10050fc:	3afffffa 	bcc	10050ec <__udivsi3+0x2c>
 1005100:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 1005104:	31510000 	cmpcc	r1, r0
 1005108:	31a01081 	lslcc	r1, r1, #1
 100510c:	31a03083 	lslcc	r3, r3, #1
 1005110:	3afffffa 	bcc	1005100 <__udivsi3+0x40>
 1005114:	e3a02000 	mov	r2, #0
 1005118:	e1500001 	cmp	r0, r1
 100511c:	20400001 	subcs	r0, r0, r1
 1005120:	21822003 	orrcs	r2, r2, r3
 1005124:	e15000a1 	cmp	r0, r1, lsr #1
 1005128:	204000a1 	subcs	r0, r0, r1, lsr #1
 100512c:	218220a3 	orrcs	r2, r2, r3, lsr #1
 1005130:	e1500121 	cmp	r0, r1, lsr #2
 1005134:	20400121 	subcs	r0, r0, r1, lsr #2
 1005138:	21822123 	orrcs	r2, r2, r3, lsr #2
 100513c:	e15001a1 	cmp	r0, r1, lsr #3
 1005140:	204001a1 	subcs	r0, r0, r1, lsr #3
 1005144:	218221a3 	orrcs	r2, r2, r3, lsr #3
 1005148:	e3500000 	cmp	r0, #0
 100514c:	11b03223 	lsrsne	r3, r3, #4
 1005150:	11a01221 	lsrne	r1, r1, #4
 1005154:	1affffef 	bne	1005118 <__udivsi3+0x58>
 1005158:	e1a00002 	mov	r0, r2
 100515c:	e12fff1e 	bx	lr
 1005160:	03a00001 	moveq	r0, #1
 1005164:	13a00000 	movne	r0, #0
 1005168:	e12fff1e 	bx	lr
 100516c:	e3510801 	cmp	r1, #65536	; 0x10000
 1005170:	21a01821 	lsrcs	r1, r1, #16
 1005174:	23a02010 	movcs	r2, #16
 1005178:	33a02000 	movcc	r2, #0
 100517c:	e3510c01 	cmp	r1, #256	; 0x100
 1005180:	21a01421 	lsrcs	r1, r1, #8
 1005184:	22822008 	addcs	r2, r2, #8
 1005188:	e3510010 	cmp	r1, #16
 100518c:	21a01221 	lsrcs	r1, r1, #4
 1005190:	22822004 	addcs	r2, r2, #4
 1005194:	e3510004 	cmp	r1, #4
 1005198:	82822003 	addhi	r2, r2, #3
 100519c:	908220a1 	addls	r2, r2, r1, lsr #1
 10051a0:	e1a00230 	lsr	r0, r0, r2
 10051a4:	e12fff1e 	bx	lr
 10051a8:	e3500000 	cmp	r0, #0
 10051ac:	13e00000 	mvnne	r0, #0
 10051b0:	ea000007 	b	10051d4 <__aeabi_idiv0>

010051b4 <__aeabi_uidivmod>:
 10051b4:	e3510000 	cmp	r1, #0
 10051b8:	0afffffa 	beq	10051a8 <__udivsi3+0xe8>
 10051bc:	e92d4003 	push	{r0, r1, lr}
 10051c0:	ebffffbe 	bl	10050c0 <__udivsi3>
 10051c4:	e8bd4006 	pop	{r1, r2, lr}
 10051c8:	e0030092 	mul	r3, r2, r0
 10051cc:	e0411003 	sub	r1, r1, r3
 10051d0:	e12fff1e 	bx	lr

010051d4 <__aeabi_idiv0>:
 10051d4:	e12fff1e 	bx	lr

010051d8 <__aeabi_uldivmod>:
 10051d8:	e3530000 	cmp	r3, #0
 10051dc:	03520000 	cmpeq	r2, #0
 10051e0:	1a000004 	bne	10051f8 <__aeabi_uldivmod+0x20>
 10051e4:	e3510000 	cmp	r1, #0
 10051e8:	03500000 	cmpeq	r0, #0
 10051ec:	13e01000 	mvnne	r1, #0
 10051f0:	13e00000 	mvnne	r0, #0
 10051f4:	eafffff6 	b	10051d4 <__aeabi_idiv0>
 10051f8:	e24dd008 	sub	sp, sp, #8
 10051fc:	e92d6000 	push	{sp, lr}
 1005200:	eb000003 	bl	1005214 <__udivmoddi4>
 1005204:	e59de004 	ldr	lr, [sp, #4]
 1005208:	e28dd008 	add	sp, sp, #8
 100520c:	e8bd000c 	pop	{r2, r3}
 1005210:	e12fff1e 	bx	lr

01005214 <__udivmoddi4>:
 1005214:	e1510003 	cmp	r1, r3
 1005218:	01500002 	cmpeq	r0, r2
 100521c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1005220:	e1a04000 	mov	r4, r0
 1005224:	33a00000 	movcc	r0, #0
 1005228:	e1a05001 	mov	r5, r1
 100522c:	e59d8020 	ldr	r8, [sp, #32]
 1005230:	31a01000 	movcc	r1, r0
 1005234:	3a00003e 	bcc	1005334 <__udivmoddi4+0x120>
 1005238:	e1a01003 	mov	r1, r3
 100523c:	e1a00002 	mov	r0, r2
 1005240:	e1a06002 	mov	r6, r2
 1005244:	e1a07003 	mov	r7, r3
 1005248:	eb00003d 	bl	1005344 <__clzdi2>
 100524c:	e1a01005 	mov	r1, r5
 1005250:	e1a09000 	mov	r9, r0
 1005254:	e1a00004 	mov	r0, r4
 1005258:	eb000039 	bl	1005344 <__clzdi2>
 100525c:	e049c000 	sub	ip, r9, r0
 1005260:	e24c9020 	sub	r9, ip, #32
 1005264:	e1a03c17 	lsl	r3, r7, ip
 1005268:	e1833916 	orr	r3, r3, r6, lsl r9
 100526c:	e26ca020 	rsb	sl, ip, #32
 1005270:	e1833a36 	orr	r3, r3, r6, lsr sl
 1005274:	e1550003 	cmp	r5, r3
 1005278:	e1a02c16 	lsl	r2, r6, ip
 100527c:	01540002 	cmpeq	r4, r2
 1005280:	33a00000 	movcc	r0, #0
 1005284:	31a01000 	movcc	r1, r0
 1005288:	3a000005 	bcc	10052a4 <__udivmoddi4+0x90>
 100528c:	e3a00001 	mov	r0, #1
 1005290:	e0544002 	subs	r4, r4, r2
 1005294:	e1a01910 	lsl	r1, r0, r9
 1005298:	e1811a30 	orr	r1, r1, r0, lsr sl
 100529c:	e0c55003 	sbc	r5, r5, r3
 10052a0:	e1a00c10 	lsl	r0, r0, ip
 10052a4:	e35c0000 	cmp	ip, #0
 10052a8:	0a000021 	beq	1005334 <__udivmoddi4+0x120>
 10052ac:	e1a060a2 	lsr	r6, r2, #1
 10052b0:	e1a0e00c 	mov	lr, ip
 10052b4:	e1866f83 	orr	r6, r6, r3, lsl #31
 10052b8:	e1a070a3 	lsr	r7, r3, #1
 10052bc:	ea000007 	b	10052e0 <__udivmoddi4+0xcc>
 10052c0:	e0543006 	subs	r3, r4, r6
 10052c4:	e0c52007 	sbc	r2, r5, r7
 10052c8:	e0933003 	adds	r3, r3, r3
 10052cc:	e0a22002 	adc	r2, r2, r2
 10052d0:	e2934001 	adds	r4, r3, #1
 10052d4:	e2a25000 	adc	r5, r2, #0
 10052d8:	e25ee001 	subs	lr, lr, #1
 10052dc:	0a000006 	beq	10052fc <__udivmoddi4+0xe8>
 10052e0:	e1550007 	cmp	r5, r7
 10052e4:	01540006 	cmpeq	r4, r6
 10052e8:	2afffff4 	bcs	10052c0 <__udivmoddi4+0xac>
 10052ec:	e0944004 	adds	r4, r4, r4
 10052f0:	e0a55005 	adc	r5, r5, r5
 10052f4:	e25ee001 	subs	lr, lr, #1
 10052f8:	1afffff8 	bne	10052e0 <__udivmoddi4+0xcc>
 10052fc:	e1a03c34 	lsr	r3, r4, ip
 1005300:	e1833a15 	orr	r3, r3, r5, lsl sl
 1005304:	e1833935 	orr	r3, r3, r5, lsr r9
 1005308:	e0900004 	adds	r0, r0, r4
 100530c:	e1a04003 	mov	r4, r3
 1005310:	e1a02c35 	lsr	r2, r5, ip
 1005314:	e0a11005 	adc	r1, r1, r5
 1005318:	e1a05002 	mov	r5, r2
 100531c:	e1a03c12 	lsl	r3, r2, ip
 1005320:	e1833914 	orr	r3, r3, r4, lsl r9
 1005324:	e1a0cc14 	lsl	ip, r4, ip
 1005328:	e050000c 	subs	r0, r0, ip
 100532c:	e1833a34 	orr	r3, r3, r4, lsr sl
 1005330:	e0c11003 	sbc	r1, r1, r3
 1005334:	e3580000 	cmp	r8, #0
 1005338:	18880030 	stmne	r8, {r4, r5}
 100533c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 1005340:	e12fff1e 	bx	lr

01005344 <__clzdi2>:
 1005344:	e92d4010 	push	{r4, lr}
 1005348:	e3510000 	cmp	r1, #0
 100534c:	1a000002 	bne	100535c <__clzdi2+0x18>
 1005350:	eb000005 	bl	100536c <__clzsi2>
 1005354:	e2800020 	add	r0, r0, #32
 1005358:	ea000001 	b	1005364 <__clzdi2+0x20>
 100535c:	e1a00001 	mov	r0, r1
 1005360:	eb000001 	bl	100536c <__clzsi2>
 1005364:	e8bd4010 	pop	{r4, lr}
 1005368:	e12fff1e 	bx	lr

0100536c <__clzsi2>:
 100536c:	e3a0101c 	mov	r1, #28
 1005370:	e3500801 	cmp	r0, #65536	; 0x10000
 1005374:	21a00820 	lsrcs	r0, r0, #16
 1005378:	22411010 	subcs	r1, r1, #16
 100537c:	e3500c01 	cmp	r0, #256	; 0x100
 1005380:	21a00420 	lsrcs	r0, r0, #8
 1005384:	22411008 	subcs	r1, r1, #8
 1005388:	e3500010 	cmp	r0, #16
 100538c:	21a00220 	lsrcs	r0, r0, #4
 1005390:	22411004 	subcs	r1, r1, #4
 1005394:	e28f2008 	add	r2, pc, #8
 1005398:	e7d20000 	ldrb	r0, [r2, r0]
 100539c:	e0800001 	add	r0, r0, r1
 10053a0:	e12fff1e 	bx	lr
 10053a4:	02020304 	andeq	r0, r2, #4, 6	; 0x10000000
 10053a8:	01010101 	tsteq	r1, r1, lsl #2
	...

Disassembly of section .ARM.exidx:

010053b4 <__exidx_start>:
 10053b4:	7fffac4c 	svcvc	0x00ffac4c
 10053b8:	00000001 	andeq	r0, r0, r1

Disassembly of section .rodata:

010053bc <__rodata_start__>:
 10053bc:	4e524157 	mrcmi	1, 2, r4, cr2, cr7, {2}
 10053c0:	554d4d5b 	strbpl	r4, [sp, #-3419]	; 0xfffff2a5
 10053c4:	44203a5d 	strtmi	r3, [r0], #-2653	; 0xfffff5a3
 10053c8:	20617461 	rsbcs	r7, r1, r1, ror #8
 10053cc:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
 10053d0:	74732065 	ldrbtvc	r2, [r3], #-101	; 0xffffff9b
 10053d4:	206c6c69 	rsbcs	r6, ip, r9, ror #24
 10053d8:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 10053dc:	0a2e6576 	beq	1b9e9bc <__end__+0xb8299c>
 10053e0:	00000000 	andeq	r0, r0, r0
 10053e4:	01000000 	mrseq	r0, (UNDEF: 0)
 10053e8:	00100000 	andseq	r0, r0, r0
 10053ec:	00010000 	andeq	r0, r1, r0
 10053f0:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 10053f4:	4d4d5b47 	vstrmi	d21, [sp, #-284]	; 0xfffffee4
 10053f8:	41563a55 	cmpmi	r6, r5, asr sl
 10053fc:	46203a5d 			; <UNDEFINED> instruction: 0x46203a5d
 1005400:	756c6961 	strbvc	r6, [ip, #-2401]!	; 0xfffff69f
 1005404:	6f206572 	svcvs	0x00206572
 1005408:	696c206e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, sp}^
 100540c:	2520656e 	strcs	r6, [r0, #-1390]!	; 0xfffffa92
 1005410:	000a2e64 	andeq	r2, sl, r4, ror #28
 1005414:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 1005418:	61635b47 	cmnvs	r3, r7, asr #22
 100541c:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 1005420:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 1005424:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 1005428:	6146203a 	cmpvs	r6, sl, lsr r0
 100542c:	20746c75 	rsbscs	r6, r4, r5, ror ip
 1005430:	65746564 	ldrbvs	r6, [r4, #-1380]!	; 0xfffffa9c
 1005434:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 1005438:	4644202e 	strbmi	r2, [r4], -lr, lsr #32
 100543c:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	; 0xfffffeb4
 1005440:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 1005444:	0a2e786c 	beq	1ba35fc <__end__+0xb875dc>
 1005448:	00000000 	andeq	r0, r0, r0
 100544c:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 1005450:	61635b47 	cmnvs	r3, r7, asr #22
 1005454:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 1005458:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 100545c:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 1005460:	6170203a 	cmnvs	r0, sl, lsr r0
 1005464:	5d53535b 	ldclpl	3, cr5, [r3, #-364]	; 0xfffffe94
 1005468:	30203d20 	eorcc	r3, r0, r0, lsr #26
 100546c:	3b782578 	blcc	2e0ea54 <__end__+0x1df2a34>
 1005470:	66666f20 	strbtvs	r6, [r6], -r0, lsr #30
 1005474:	20746573 	rsbscs	r6, r4, r3, ror r5
 1005478:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 100547c:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 1005480:	0000000a 	andeq	r0, r0, sl
 1005484:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 1005488:	61635b47 	cmnvs	r3, r7, asr #22
 100548c:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 1005490:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 1005494:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 1005498:	6170203a 	cmnvs	r0, sl, lsr r0
 100549c:	6761705b 			; <UNDEFINED> instruction: 0x6761705b
 10054a0:	3d205d65 	stccc	13, cr5, [r0, #-404]!	; 0xfffffe6c
 10054a4:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 10054a8:	6f203b78 	svcvs	0x00203b78
 10054ac:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
 10054b0:	203d2074 	eorscs	r2, sp, r4, ror r0
 10054b4:	6c257830 	stcvs	8, cr7, [r5], #-192	; 0xffffff40
 10054b8:	000a2e78 	andeq	r2, sl, r8, ror lr
 10054bc:	5b554d4d 	blpl	25589f8 <__end__+0x153c9d8>
 10054c0:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 10054c4:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 10054c8:	62203a5d 	eorvs	r3, r0, #380928	; 0x5d000
 10054cc:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
 10054d0:	203a2928 	eorscs	r2, sl, r8, lsr #18
 10054d4:	61766e49 	cmnvs	r6, r9, asr #28
 10054d8:	2064696c 	rsbcs	r6, r4, ip, ror #18
 10054dc:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
 10054e0:	74616c73 	strbtvc	r6, [r1], #-3187	; 0xfffff38d
 10054e4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 10054e8:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
 10054ec:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
 10054f0:	0000000a 	andeq	r0, r0, sl
 10054f4:	5b554d4d 	blpl	2558a30 <__end__+0x153ca10>
 10054f8:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 10054fc:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1005500:	62203a5d 	eorvs	r3, r0, #380928	; 0x5d000
 1005504:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
 1005508:	203a2928 	eorscs	r2, sl, r8, lsr #18
 100550c:	74204156 	strtvc	r4, [r0], #-342	; 0xfffffeaa
 1005510:	4150206f 	cmpmi	r0, pc, rrx
 1005514:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
 1005518:	6620726f 	strtvs	r7, [r0], -pc, ror #4
 100551c:	2520726f 	strcs	r7, [r0, #-623]!	; 0xfffffd91
 1005520:	44202e70 	strtmi	r2, [r0], #-3696	; 0xfffff190
 1005524:	20525346 	subscs	r5, r2, r6, asr #6
 1005528:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 100552c:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 1005530:	0000000a 	andeq	r0, r0, sl
 1005534:	5b554d4d 	blpl	2558a70 <__end__+0x153ca50>
 1005538:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 100553c:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1005540:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 1005544:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 1005548:	54203a29 	strtpl	r3, [r0], #-2601	; 0xfffff5d7
 100554c:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
 1005550:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
 1005554:	61206e6f 			; <UNDEFINED> instruction: 0x61206e6f
 1005558:	6165726c 	cmnvs	r5, ip, ror #4
 100555c:	63207964 			; <UNDEFINED> instruction: 0x63207964
 1005560:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
 1005564:	64657465 	strbtvs	r7, [r5], #-1125	; 0xfffffb9b
 1005568:	00000a2e 	andeq	r0, r0, lr, lsr #20
 100556c:	5b554d4d 	blpl	2558aa8 <__end__+0x153ca88>
 1005570:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1005574:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1005578:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 100557c:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 1005580:	56203a29 	strtpl	r3, [r0], -r9, lsr #20
 1005584:	6f742041 	svcvs	0x00742041
 1005588:	20415020 	subcs	r5, r1, r0, lsr #32
 100558c:	6f727265 	svcvs	0x00727265
 1005590:	6f662072 	svcvs	0x00662072
 1005594:	70252072 	eorvc	r2, r5, r2, ror r0
 1005598:	4644202e 	strbmi	r2, [r4], -lr, lsr #32
 100559c:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	; 0xfffffeb4
 10055a0:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 10055a4:	0a2e786c 	beq	1ba375c <__end__+0xb8773c>
 10055a8:	00000000 	andeq	r0, r0, r0
 10055ac:	5b554d4d 	blpl	2558ae8 <__end__+0x153cac8>
 10055b0:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 10055b4:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 10055b8:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 10055bc:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 10055c0:	43203a29 			; <UNDEFINED> instruction: 0x43203a29
 10055c4:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
 10055c8:	64656373 	strbtvs	r6, [r5], #-883	; 0xfffffc8d
 10055cc:	78656e20 	stmdavc	r5!, {r5, r9, sl, fp, sp, lr}^
 10055d0:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 10055d4:	6e656d67 	cdpvs	13, 6, cr6, cr5, cr7, {3}
 10055d8:	4e202e74 	mcrmi	14, 1, r2, cr0, cr4, {3}
 10055dc:	73207765 			; <UNDEFINED> instruction: 0x73207765
 10055e0:	20657a69 	rsbcs	r7, r5, r9, ror #20
 10055e4:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 10055e8:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 10055ec:	0000000a 	andeq	r0, r0, sl
 10055f0:	5b554d4d 	blpl	2558b2c <__end__+0x153cb0c>
 10055f4:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 10055f8:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 10055fc:	65203a5d 	strvs	r3, [r0, #-2653]!	; 0xfffff5a3
 1005600:	2928646e 	stmdbcs	r8!, {r1, r2, r3, r5, r6, sl, sp, lr}
 1005604:	7254203a 	subsvc	r2, r4, #58	; 0x3a
 1005608:	6c736e61 	ldclvs	14, cr6, [r3], #-388	; 0xfffffe7c
 100560c:	6f697461 	svcvs	0x00697461
 1005610:	7270206e 	rsbsvc	r2, r0, #110	; 0x6e
 1005614:	6572676f 	ldrbvs	r6, [r2, #-1903]!	; 0xfffff891
 1005618:	75207373 	strvc	r7, [r0, #-883]!	; 0xfffffc8d
 100561c:	6d6f636e 	stclvs	3, cr6, [pc, #-440]!	; 100546c <__rodata_start__+0xb0>
 1005620:	74656c70 	strbtvc	r6, [r5], #-3184	; 0xfffff390
 1005624:	000a2e65 	andeq	r2, sl, r5, ror #28
 1005628:	6f435b0a 	svcvs	0x00435b0a
 100562c:	5d316572 	cfldr32pl	mvfx6, [r1, #-456]!	; 0xfffffe38
 1005630:	6c656820 	stclvs	8, cr6, [r5], #-128	; 0xffffff80
 1005634:	66206f6c 	strtvs	r6, [r0], -ip, ror #30
 1005638:	206d6f72 	rsbcs	r6, sp, r2, ror pc
 100563c:	20524444 	subscs	r4, r2, r4, asr #8
 1005640:	2e776f6c 	cdpcs	15, 7, cr6, cr7, cr12, {3}
 1005644:	4d485320 	stclmi	3, cr5, [r8, #-128]	; 0xffffff80
 1005648:	30204020 	eorcc	r4, r0, r0, lsr #32
 100564c:	38302578 	ldmdacc	r0!, {r3, r4, r5, r6, r8, sl, sp}
 1005650:	65722058 	ldrbvs	r2, [r2, #-88]!	; 0xffffffa8
 1005654:	2e796461 	cdpcs	4, 7, cr6, cr9, cr1, {3}
	...
 1005664:	01000000 	mrseq	r0, (UNDEF: 0)
 1005668:	00011303 	andeq	r1, r1, r3, lsl #6
 100566c:	00000000 	andeq	r0, r0, r0
 1005670:	01000000 	mrseq	r0, (UNDEF: 0)
 1005674:	01000000 	mrseq	r0, (UNDEF: 0)
 1005678:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 100567c:	00001303 	andeq	r1, r0, r3, lsl #6
 1005680:	00000000 	andeq	r0, r0, r0
 1005684:	3f000000 	svccc	0x00000000
 1005688:	3f000000 	svccc	0x00000000
 100568c:	01000000 	mrseq	r0, (UNDEF: 0)
 1005690:	00010103 	andeq	r0, r1, r3, lsl #2
 1005694:	00000000 	andeq	r0, r0, r0
 1005698:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 100569c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 10056a0:	01000000 	mrseq	r0, (UNDEF: 0)
 10056a4:	01010103 	tsteq	r1, r3, lsl #2
 10056a8:	00000000 	andeq	r0, r0, r0
 10056ac:	6361430a 	cmnvs	r1, #671088640	; 0x28000000
 10056b0:	53206568 			; <UNDEFINED> instruction: 0x53206568
 10056b4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 10056b8:	53203a73 			; <UNDEFINED> instruction: 0x53203a73
 10056bc:	524c5443 	subpl	r5, ip, #1124073472	; 0x43000000
 10056c0:	2578303d 	ldrbcs	r3, [r8, #-61]!	; 0xffffffc3
 10056c4:	586c3830 	stmdapl	ip!, {r4, r5, fp, ip, sp}^
 10056c8:	4d4d2020 	stclmi	0, cr2, [sp, #-128]	; 0xffffff80
 10056cc:	75253a55 	strvc	r3, [r5, #-2645]!	; 0xfffff5ab
 10056d0:	3a492020 	bcc	224d758 <__end__+0x1231738>
 10056d4:	20207525 	eorcs	r7, r0, r5, lsr #10
 10056d8:	75253a44 	strvc	r3, [r5, #-2628]!	; 0xfffff5bc
 10056dc:	50422020 	subpl	r2, r2, r0, lsr #32
 10056e0:	0075253a 	rsbseq	r2, r5, sl, lsr r5

Disassembly of section .data:

010056e4 <osc1_clock>:
 10056e4:	017d7840 	cmneq	sp, r0, asr #16

010056e8 <term1_info>:
static UART_INFO_t term1_info = { uart_putc, 0, ALT_16550_DEVICE_SOCFPGA_UART1 };
 10056e8:	010048b8 			; <UNDEFINED> instruction: 0x010048b8
 10056ec:	00000000 	andeq	r0, r0, r0
 10056f0:	00000001 	andeq	r0, r0, r1
	...

01005708 <term1>:
 1005708:	010056e8 	smlatteq	r0, r8, r6, r5

0100570c <s_mmu_pool>:
static mmu_pool_t s_mmu_pool = { s_mmu_aux_pool, sizeof(s_mmu_aux_pool), 0 };
 100570c:	0100c000 	mrseq	ip, (UNDEF: 0)
 1005710:	00010000 	andeq	r0, r1, r0
 1005714:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

01008000 <cb_intosc_hs_div2>:
 1008000:	00000000 	andeq	r0, r0, r0

01008004 <f2s_free_clk>:
	...

0100c000 <s_mmu_aux_pool>:
	...

0101c000 <s_uart1>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:

void alt_log_done(FILE *op)
{
       0:	000017e2 	andeq	r1, r0, r2, ror #15
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000003a 	andeq	r0, r0, sl, lsr r0
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	0004980c 	andeq	r9, r4, ip, lsl #16
      14:	000bd000 	andeq	sp, fp, r0
	...

    /* Ensure that the TX FIFO is empty. */

    do
    {
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000402 	andeq	r0, r0, r2, lsl #8
      2c:	61050202 	tstvs	r5, r2, lsl #4
      30:	0300000d 	movweq	r0, #13
      34:	00002ec2 	andeq	r2, r0, r2, asr #29
      38:	3f182802 	svccc	0x00182802
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	02000000 	andeq	r0, r0, #0
      40:	080a0504 	stmdaeq	sl, {r2, r8, sl}
      44:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      48:	00080505 	andeq	r0, r8, r5, lsl #10

    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	00000400 	andeq	r0, r0, r0, lsl #8
      54:	9e070202 	cdpls	2, 0, cr0, cr7, cr2, {0}
      58:	0300000e 	movweq	r0, #14
      5c:	00003043 	andeq	r3, r0, r3, asr #32
      60:	67193402 	ldrvs	r3, [r9, -r2, lsl #8]
      64:	02000000 	andeq	r0, r0, #0
      68:	0b400704 	bleq	1001c80 <alt_16550_line_config_set+0x100>
      6c:	8a030000 	bhi	c0074 <__core1_unwind_stub-0xf3ff8c>

    /* Leave the UARTs enabled.
     * Many subsequent stages expect the UART to be already setup by preloader. */
}
      70:	0200000d 	andeq	r0, r0, #13
      74:	007a1937 	rsbseq	r1, sl, r7, lsr r9
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	000b3b07 	andeq	r3, fp, r7, lsl #22
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	45070402 	strmi	r0, [r7, #-1026]	; 0xfffffbfe
      8c:	0200000b 	andeq	r0, r0, #11
      90:	0a9d0408 	beq	fe7410b8 <__shm_end__+0xbe7410b8>
      *(pmem->toptr)=0;
      94:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
      98:	0300000c 	movweq	r0, #12
      9c:	8817015e 	ldmdahi	r7, {r1, r2, r3, r4, r6, r8}
      a0:	03000000 	movweq	r0, #0
}
      a4:	00003055 	andeq	r3, r0, r5, asr r0
      a8:	3f0e2e04 	svccc	0x000e2e04
      ac:	03000000 	movweq	r0, #0
      b0:	00000add 	ldrdeq	r0, [r0], -sp
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	3f0e7404 	svccc	0x000e7404
      b8:	06000000 	streq	r0, [r0], -r0
        break;
      bc:	03a50404 			; <UNDEFINED> instruction: 0x03a50404
    return ALT_E_SUCCESS;
      c0:	000000dd 	ldrdeq	r0, [r0], -sp
      c4:	00023a07 	andeq	r3, r2, r7, lsl #20
        return ALT_E_ERROR;
      c8:	0ca70400 	cfstrseq	mvf0, [r7]
}
      cc:	00000096 	muleq	r0, r6, r0
      d0:	000ae507 	andeq	lr, sl, r7, lsl #10
      d4:	13a80400 			; <UNDEFINED> instruction: 0x13a80400
      d8:	000000dd 	ldrdeq	r0, [r0], -sp
    const uint8_t *s = (const uint8_t *)src;
    if (d == s || n == 0) return dst;
    if (d < s) {
        for (size_t i = 0; i < n; ++i) d[i] = s[i];
    } else {
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	004d0800 	subeq	r0, sp, r0, lsl #16
      e0:	00ed0000 	rsceq	r0, sp, r0
      e4:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
      e8:	03000000 	movweq	r0, #0
      ec:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
      f0:	011109a2 	tsteq	r1, r2, lsr #19
    }
    return dst;
      f4:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
}
      f8:	0400000a 	streq	r0, [r0], #-10
      fc:	008107a4 	addeq	r0, r1, r4, lsr #15
     100:	0b000000 	bleq	108 <__core1_unwind_stub-0xfffef8>
     104:	0000000b 	andeq	r0, r0, fp
            if (alt_16550_fifo_write(&s_uart1, &ch, 1) != ALT_E_SUCCESS) {
                errno = EIO; return -1;
            }
            --left;
        }
        return (int)cnt;
     108:	bb05a904 	bllt	16a520 <__core1_unwind_stub-0xe95ae0>
     10c:	04000000 	streq	r0, [r0], #-0
    }
    errno = ENOSYS;
     110:	0c200300 	stceq	3, cr0, [r0], #-0
     114:	aa040000 	bge	10011c <__core1_unwind_stub-0xeffee4>
     118:	0000ed03 	andeq	lr, r0, r3, lsl #26
     11c:	03040c00 	movweq	r0, #19456	; 0x4c00
    return -1;
     120:	00000e49 	andeq	r0, r0, r9, asr #28
}
     124:	67191605 	ldrvs	r1, [r9, -r5, lsl #12]
     128:	03000000 	movweq	r0, #0
     12c:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
    g_arm_msgdma1_desc = (volatile uint32_t*)(uintptr_t) MSGDMA1_DESC_BASE;
    g_arm_msgdma2_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA2_CSR_BASE;
    g_arm_msgdma2_desc = (volatile uint32_t*)(uintptr_t) MSGDMA2_DESC_BASE;
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     130:	810d0c06 	tsthi	sp, r6, lsl #24
     134:	03000000 	movweq	r0, #0
     138:	00000bc7 	andeq	r0, r0, r7, asr #23
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	2b1b2305 	blcs	6c8d58 <__core1_unwind_stub-0x9372a8>
     140:	0d000001 	stceq	0, cr0, [r0, #-4]
     144:	00000708 	andeq	r0, r0, r8, lsl #14
     148:	08340518 	ldmdaeq	r4!, {r3, r4, r8, sl}
     14c:	0000019d 	muleq	r0, sp, r1
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	000a340b 	andeq	r3, sl, fp, lsl #8
     154:	13360500 	teqne	r6, #0, 10
     158:	0000019d 	muleq	r0, sp, r1
     15c:	6b5f0e00 	blvs	17c3964 <__end__+0x7a7944>
     160:	07370500 	ldreq	r0, [r7, -r0, lsl #10]!
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	00000081 	andeq	r0, r0, r1, lsl #1
     168:	07610b04 	strbeq	r0, [r1, -r4, lsl #22]!
     16c:	37050000 	strcc	r0, [r5, -r0]
     170:	0000810b 	andeq	r8, r0, fp, lsl #2
     174:	bf0b0800 	svclt	0x000b0800

    return ALT_E_SUCCESS;
     178:	05000008 	streq	r0, [r0, #-8]
}
     17c:	00811437 	addeq	r1, r1, r7, lsr r4
     180:	0b0c0000 	bleq	300188 <__core1_unwind_stub-0xcffe78>
     184:	00000601 	andeq	r0, r0, r1, lsl #12
    }

    coalesce->va   += thissegsize;
    coalesce->size -= thissegsize;

    while (coalesce->size)
     188:	811b3705 	tsthi	fp, r5, lsl #14
     18c:	10000000 	andne	r0, r0, r0
            dprintf("MMU[coalesce]: next(): Coalesced next segment. New size = 0x%" PRIx32 ".\n", thissegsize);
        }
        else
        {
            /* Cannot coalesce. */
            break;
     190:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
        }
    }

    *segpa   = thissegpa;
     194:	a30b3805 	movwge	r3, #47109	; 0xb805
     198:	14000001 	strne	r0, [r0], #-1
     19c:	43040f00 	movwmi	r0, #20224	; 0x4f00
    *segsize = thissegsize;
     1a0:	08000001 	stmdaeq	r0, {r0}
     1a4:	0000011f 	andeq	r0, r0, pc, lsl r1
     1a8:	000001b3 			; <UNDEFINED> instruction: 0x000001b3

    return ALT_E_SUCCESS;
     1ac:	00008809 	andeq	r8, r0, r9, lsl #16
}
     1b0:	0d000000 	stceq	0, cr0, [r0, #-0]
     1b4:	00000140 	andeq	r0, r0, r0, asr #2
     1b8:	083c0524 	ldmdaeq	ip!, {r2, r5, r8, sl}
        overflow. Finally, we divide by 65536, giving us the numerator value that would result
        in 1200 MHz. If we exceed that, then we need to ramp up
  */
  clk100 = (3200000000u / (osc1_clock>>11)) * (1 + cfg->mainpll.vco1_denom ) * 2; /* /32k */

  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	00000236 	andeq	r0, r0, r6, lsr r2
     1c0:	00015c0b 	andeq	r5, r1, fp, lsl #24
     1c4:	093e0500 	ldmdbeq	lr!, {r8, sl}
     1c8:	00000081 	andeq	r0, r0, r1, lsl #1
     1cc:	0f8f0b00 	svceq	0x008f0b00
  {
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	3f050000 	svccc	0x00050000
     1d4:	00008109 	andeq	r8, r0, r9, lsl #2
     1d8:	b10b0400 	tstlt	fp, r0, lsl #8
     1dc:	0500000e 	streq	r0, [r0, #-14]
     1e0:	00810940 	addeq	r0, r1, r0, asr #18
    do
    {
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	0b080000 	bleq	2001ec <__core1_unwind_stub-0xdffe14>
     1e8:	000009fb 	strdeq	r0, [r0], -fp
     1ec:	81094105 	tsthi	r9, r5, lsl #2
     1f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     1f4:	00038c0b 	andeq	r8, r3, fp, lsl #24
     1f8:	09420500 	stmdbeq	r2, {r8, sl}^
     1fc:	00000081 	andeq	r0, r0, r1, lsl #1
     200:	0de40b10 			; <UNDEFINED> instruction: 0x0de40b10
     204:	43050000 	movwmi	r0, #20480	; 0x5000
     208:	00008109 	andeq	r8, r0, r9, lsl #2
     20c:	7b0b1400 	blvc	2c5214 <__core1_unwind_stub-0xd3adec>
     210:	0500000a 	streq	r0, [r0, #-10]
                     ALT_CLKMGR_MAINPLL_VCO1_DENOM_SET(cfg->mainpll.vco1_denom) |
                     ALT_CLKMGR_MAINPLL_VCO1_NUMER_SET((clkStep>>16) - 1));
        clkStep += clk100;
     214:	00810944 	addeq	r0, r1, r4, asr #18
     218:	0b180000 	bleq	600220 <__core1_unwind_stub-0x9ffde0>
     21c:	00000aa9 	andeq	r0, r0, r9, lsr #21
     220:	81094505 	tsthi	r9, r5, lsl #10
        /* sleep 5 ms for voltages to return to level */
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	1c000000 	stcne	0, cr0, [r0], {-0}
     228:	000f550b 	andeq	r5, pc, fp, lsl #10
     22c:	09460500 	stmdbeq	r6, {r8, sl}^
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	00000081 	andeq	r0, r0, r1, lsl #1
     234:	63100020 	tstvs	r0, #32
     238:	08000002 	stmdaeq	r0, {r1}
     23c:	084f0501 	stmdaeq	pc, {r0, r8, sl}^	; <UNPREDICTABLE>
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	0000027b 	andeq	r0, r0, fp, ror r2
     244:	000f410b 	andeq	r4, pc, fp, lsl #2
     248:	0a500500 	beq	1401650 <__end__+0x3e5630>
     24c:	0000027b 	andeq	r0, r0, fp, ror r2
     250:	0b660b00 	bleq	1982e58 <__end__+0x966e38>
     254:	51050000 	mrspl	r0, (UNDEF: 5)
     258:	00027b09 	andeq	r7, r2, r9, lsl #22
  }
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	d4118000 	ldrle	r8, [r1], #-0
     260:	0500000d 	streq	r0, [r0, #-13]
     264:	011f0a53 	tsteq	pc, r3, asr sl	; <UNPREDICTABLE>
     268:	01000000 	mrseq	r0, (UNDEF: 0)
     26c:	000e1011 	andeq	r1, lr, r1, lsl r0
     270:	0a560500 	beq	1581678 <__end__+0x565658>
     274:	0000011f 	andeq	r0, r0, pc, lsl r1
     278:	08000104 	stmdaeq	r0, {r2, r8}
     27c:	0000011d 	andeq	r0, r0, sp, lsl r1
     280:	0000028b 	andeq	r0, r0, fp, lsl #5
     284:	00008809 	andeq	r8, r0, r9, lsl #16
                   ALT_CLKMGR_MAINPLL_VCO1_DENOM_SET(cfg->mainpll.vco1_denom) |
                   ALT_CLKMGR_MAINPLL_VCO1_NUMER_SET(cfg->mainpll.vco1_numer));

  /* sleep 5 ms for voltages to return to level */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	10001f00 	andne	r1, r0, r0, lsl #30
     28c:	00000a54 	andeq	r0, r0, r4, asr sl
     290:	62050190 	andvs	r0, r5, #144, 2	; 0x24
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	0002ce08 	andeq	ip, r2, r8, lsl #28
     298:	0a340b00 	beq	d02ea0 <__core1_unwind_stub-0x2fd160>
     29c:	63050000 	movwvs	r0, #20480	; 0x5000
     2a0:	0002ce12 	andeq	ip, r2, r2, lsl lr

  /* vco1 of perpllgrp */
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	040b0000 	streq	r0, [fp], #-0
     2a8:	0500000e 	streq	r0, [r0, #-14]
     2ac:	00810664 	addeq	r0, r1, r4, ror #12
     2b0:	0b040000 	bleq	1002b8 <__core1_unwind_stub-0xeffd48>
     2b4:	00000493 	muleq	r0, r3, r4
     2b8:	d4096605 	strle	r6, [r9], #-1541	; 0xfffff9fb
     2bc:	08000002 	stmdaeq	r0, {r1}
     2c0:	0002630b 	andeq	r6, r2, fp, lsl #6
     2c4:	1e670500 	cdpne	5, 6, cr0, cr7, cr0, {0}
     2c8:	00000236 	andeq	r0, r0, r6, lsr r2
     2cc:	040f0088 	streq	r0, [pc], #-136	; 2d4 <__core1_unwind_stub-0xfffd2c>
                   ALT_CLKMGR_PERPLL_VCO1_DENOM_SET(cfg->perpll.vco1_denom) |
                   ALT_CLKMGR_PERPLL_VCO1_NUMER_SET(cfg->perpll.vco1_numer));

  /* #############################################################
     Give enough time for software-managed clock to be reset    */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	0000028b 	andeq	r0, r0, fp, lsl #5
     2d4:	0002e408 	andeq	lr, r2, r8, lsl #8
     2d8:	0002e400 	andeq	lr, r2, r0, lsl #8
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	00880900 	addeq	r0, r8, r0, lsl #18
     2e0:	001f0000 	andseq	r0, pc, r0
     2e4:	02ea040f 	rsceq	r0, sl, #251658240	; 0xf000000
     2e8:	0d120000 	ldceq	0, cr0, [r2, #-0]

  /* ############################################################# */

  /* Power up Bandgap and Analog Circuitry */
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	00000e09 	andeq	r0, r0, r9, lsl #28
     2f0:	087a0508 	ldmdaeq	sl!, {r3, r8, sl}^
     2f4:	00000313 	andeq	r0, r0, r3, lsl r3
     2f8:	000ba50b 	andeq	sl, fp, fp, lsl #10
     2fc:	117b0500 	cmnne	fp, r0, lsl #10
     300:	00000313 	andeq	r0, r0, r3, lsl r3
     304:	304e0b00 	subcc	r0, lr, r0, lsl #22
             ALT_CLKMGR_MAINPLL_VCO0_PWRDN_SET_MSK |
             ALT_CLKMGR_MAINPLL_VCO0_BGPWRDN_SET_MSK);
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	7c050000 	stcvc	0, cr0, [r5], {-0}
     30c:	00008106 	andeq	r8, r0, r6, lsl #2
     310:	0f000400 	svceq	0x00000400
     314:	00004d04 	andeq	r4, r0, r4, lsl #26
     318:	06810d00 	streq	r0, [r1], r0, lsl #26
     31c:	05680000 	strbeq	r0, [r8, #-0]!
     320:	045c08ba 	ldrbeq	r0, [ip], #-2234	; 0xfffff746
             ALT_CLKMGR_PERPLL_VCO0_PWRDN_SET_MSK |
             ALT_CLKMGR_PERPLL_VCO0_BGPWRDN_SET_MSK);

  /* #############################################################
     Give enough time for Bandgap and Analog Circuitry to power up */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	5f0e0000 	svcpl	0x000e0000
     328:	bb050070 	bllt	1404f0 <__core1_unwind_stub-0xebfb10>
     32c:	00031312 	andeq	r1, r3, r2, lsl r3
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	5f0e0000 	svcpl	0x000e0000
     334:	bc050072 	stclt	0, cr0, [r5], {114}	; 0x72
     338:	00008107 	andeq	r8, r0, r7, lsl #2
     33c:	5f0e0400 	svcpl	0x000e0400
   / Software should simulateously update the 'Enable' bit and the 'External Regulator Input Select'
   / in the same write access to the VCO register.
   / When the 'Enable' bit is clear, the 'External Regulator Input Select' should be set, and vice versa.
   / mainpllgrp 
  */
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	bd050077 	stclt	0, cr0, [r5, #-476]	; 0xfffffe24
     344:	00008107 	andeq	r8, r0, r7, lsl #2
     348:	3a0b0800 	bcc	2c2350 <__core1_unwind_stub-0xd3dcb0>
     34c:	0500000a 	streq	r0, [r0, #-10]
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	002c09be 	strhteq	r0, [ip], -lr
     354:	0b0c0000 	bleq	30035c <__core1_unwind_stub-0xcffca4>
     358:	0000025d 	andeq	r0, r0, sp, asr r2
     35c:	2c09bf05 	stccs	15, cr11, [r9], {5}
     360:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     364:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
                (data32 & ~ALT_CLKMGR_MAINPLL_VCO0_REGEXTSEL_SET_MSK)
                 | ALT_CLKMGR_MAINPLL_VCO0_EN_SET_MSK);

  /* perpllgrp */
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	11c00500 	bicne	r0, r0, r0, lsl #10
     36c:	000002eb 	andeq	r0, r0, fp, ror #5
     370:	0df60b10 			; <UNDEFINED> instruction: 0x0df60b10
     374:	c1050000 	mrsgt	r0, (UNDEF: 5)
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	00008107 	andeq	r8, r0, r7, lsl #2
     37c:	e40b1800 	str	r1, [fp], #-2048	; 0xfffff800
     380:	05000005 	streq	r0, [r0, #-5]
     384:	011d0ac8 	tsteq	sp, r8, asr #21
     388:	0b1c0000 	bleq	700390 <__core1_unwind_stub-0x8ffc70>
     38c:	00001c39 	andeq	r1, r0, r9, lsr ip
                 (data32 & ~ALT_CLKMGR_PERPLL_VCO0_REGEXTSEL_SET_MSK)
                 | ALT_CLKMGR_PERPLL_VCO0_EN_SET_MSK);

  /* alteragrp.nocclk */
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	e01dca05 	ands	ip, sp, r5, lsl #20
     394:	20000005 	andcs	r0, r0, r5
     398:	00117d0b 	andseq	r7, r1, fp, lsl #26
     39c:	1dcc0500 	cfstr64ne	mvdx0, [ip]
     3a0:	0000060a 	andeq	r0, r0, sl, lsl #12
               cfg->alteragrp.mpuclk);
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	0ac60b24 	beq	ff18303c <__shm_end__+0xbf18303c>
     3a8:	cf050000 	svcgt	0x00050000
     3ac:	00062e0d 	andeq	r2, r6, sp, lsl #28
     3b0:	1e0b2800 	cdpne	8, 0, cr2, cr11, cr0, {0}
     3b4:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
               cfg->alteragrp.nocclk);

  /* Main PLL Clock Source and Counters/Divider
     ------------------------------------------
     mainpll.c0 - pll0_mpu_base_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	064809d0 			; <UNDEFINED> instruction: 0x064809d0
     3bc:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
     3c0:	0062755f 	rsbeq	r7, r2, pc, asr r5
     3c4:	eb11d305 	bl	474fe0 <__core1_unwind_stub-0xb8b020>
     3c8:	30000002 	andcc	r0, r0, r2
     3cc:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
     3d0:	12d40500 	sbcsne	r0, r4, #0, 10
     3d4:	00000313 	andeq	r0, r0, r3, lsl r3
     3d8:	755f0e38 	ldrbvc	r0, [pc, #-3640]	; fffff5a8 <__shm_end__+0xbffff5a8>
     3dc:	d5050072 	strle	r0, [r5, #-114]	; 0xffffff8e
     3e0:	00008107 	andeq	r8, r0, r7, lsl #2
               ALT_CLKMGR_MAINPLL_MPUCLK_CNT_SET(cfg->mainpll.mpuclk_cnt) |
               ALT_CLKMGR_MAINPLL_MPUCLK_SRC_SET(cfg->mainpll.mpuclk_src));
  /* mainpll.c1 - pll0_noc _base_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	0a0b3c00 	beq	2cf3ec <__core1_unwind_stub-0xd30c14>
     3e8:	0500000a 	streq	r0, [r0, #-10]
     3ec:	064e11d8 			; <UNDEFINED> instruction: 0x064e11d8
     3f0:	0b400000 	bleq	10003f8 <alt_clk_freq_get_device+0x2c>
     3f4:	00000156 	andeq	r0, r0, r6, asr r1
     3f8:	5e11d905 	vnmlspl.f16	s26, s2, s10	; <UNPREDICTABLE>
     3fc:	43000006 	movwmi	r0, #6
     400:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
     404:	11dc0500 	bicsne	r0, ip, r0, lsl #10
     408:	000002eb 	andeq	r0, r0, fp, ror #5
     40c:	2eb70b44 	vrintxcs.f64	d0, d4
               ALT_CLKMGR_MAINPLL_NOCCLK_CNT_SET(cfg->mainpll.nocclk_cnt) |
               ALT_CLKMGR_MAINPLL_NOCCLK_SRC_SET(cfg->mainpll.nocclk_src));
  /* mainpll.c2 - pll0_emaca_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	df050000 	svcle	0x00050000
     414:	00008107 	andeq	r8, r0, r7, lsl #2
     418:	270b4c00 	strcs	r4, [fp, -r0, lsl #24]
     41c:	05000006 	streq	r0, [r0, #-6]
     420:	00a30ae0 	adceq	r0, r3, r0, ror #21
     424:	0b500000 	bleq	140042c <__end__+0x3e440c>
               ALT_CLKMGR_MAINPLL_CNTR2CLK_CNT_SET(cfg->mainpll.cntr2clk_cnt));
  /* mainpll.c3 - pll0_emacb_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	00002b12 	andeq	r2, r0, r2, lsl fp
     42c:	7a12e305 	bvc	4b9048 <__core1_unwind_stub-0xb46fb8>
     430:	54000004 	strpl	r0, [r0], #-4
     434:	0001ab0b 	andeq	sl, r1, fp, lsl #22
     438:	0ce70500 	cfstr64eq	mvdx0, [r7]
     43c:	00000137 	andeq	r0, r0, r7, lsr r1
               ALT_CLKMGR_MAINPLL_CNTR3CLK_CNT_SET(cfg->mainpll.cntr3clk_cnt));
  /* mainpll.c4 - pll0_emac_ptp_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	0a260b58 	beq	9831a8 <__core1_unwind_stub-0x67ce58>
     444:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
     448:	0001110e 	andeq	r1, r1, lr, lsl #2
     44c:	940b5c00 	strls	r5, [fp], #-3072	; 0xfffff400
     450:	05000006 	streq	r0, [r0, #-6]
     454:	008109ea 	addeq	r0, r1, sl, ror #19
               ALT_CLKMGR_MAINPLL_CNTR4CLK_CNT_SET(cfg->mainpll.cntr4clk_cnt));
  /* mainpll.c5 - pll0_gpio_db_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	00640000 	rsbeq	r0, r4, r0
     45c:	00008113 	andeq	r8, r0, r3, lsl r1
     460:	00047a00 	andeq	r7, r4, r0, lsl #20
     464:	047a1400 	ldrbteq	r1, [sl], #-1024	; 0xfffffc00
     468:	1d140000 	ldcne	0, cr0, [r4, #-0]
     46c:	14000001 	strne	r0, [r0], #-1
               ALT_CLKMGR_MAINPLL_CNTR5CLK_CNT_SET(cfg->mainpll.cntr5clk_cnt));
  /* mainpll.c6 - pll0_sdmmc_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	000005ce 	andeq	r0, r0, lr, asr #11
     474:	00008114 	andeq	r8, r0, r4, lsl r1
     478:	040f0000 	streq	r0, [pc], #-0	; 480 <__core1_unwind_stub-0xfffb80>
     47c:	00000485 	andeq	r0, r0, r5, lsl #9
     480:	00047a15 	andeq	r7, r4, r5, lsl sl
     484:	04461600 	strbeq	r1, [r6], #-1536	; 0xfffffa00
               ALT_CLKMGR_MAINPLL_CNTR6CLK_CNT_SET(cfg->mainpll.cntr6clk_cnt));
  /* mainpll.c7 - pll0_h2f_user0_clk (A.K.A. s2f_user0_clk) */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	04280000 	strteq	r0, [r8], #-0
     48c:	08026505 	stmdaeq	r2, {r0, r2, r8, sl, sp, lr}
     490:	000005ce 	andeq	r0, r0, lr, asr #11
     494:	00099217 	andeq	r9, r9, r7, lsl r2
     498:	02670500 	rsbeq	r0, r7, #0, 10
     49c:	00008107 	andeq	r8, r0, r7, lsl #2
     4a0:	22170000 	andscs	r0, r7, #0
     4a4:	05000005 	streq	r0, [r0, #-5]
     4a8:	ba0b026c 	blt	2c0e60 <__core1_unwind_stub-0xd3f1a0>
     4ac:	04000006 	streq	r0, [r0], #-6
     4b0:	000b8717 	andeq	r8, fp, r7, lsl r7
               ALT_CLKMGR_MAINPLL_CNTR7CLK_CNT_SET(cfg->mainpll.cntr7clk_cnt) |
               ALT_CLKMGR_MAINPLL_CNTR7CLK_SRC_SET(cfg->mainpll.cntr7clk_src));
  /* mainpll.c8 - pll0_h2f_user1_clk (A.K.A. s2f_user1_clk) */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	026c0500 	rsbeq	r0, ip, #0, 10
     4b8:	0006ba14 	andeq	fp, r6, r4, lsl sl
     4bc:	10170800 	andsne	r0, r7, r0, lsl #16
     4c0:	0500000a 	streq	r0, [r0, #-10]
     4c4:	ba1e026c 	blt	780e7c <__core1_unwind_stub-0x87f184>
     4c8:	0c000006 	stceq	0, cr0, [r0], {6}
               ALT_CLKMGR_MAINPLL_CNTR8CLK_CNT_SET(cfg->mainpll.cntr8clk_cnt));
  /* mainpll.c9 - pll0_hmc_pll_ref_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	000dff17 	andeq	pc, sp, r7, lsl pc	; <UNPREDICTABLE>
     4d0:	026e0500 	rsbeq	r0, lr, #0, 10
     4d4:	00008108 	andeq	r8, r0, r8, lsl #2
     4d8:	fa171000 	blx	5c44e0 <__core1_unwind_stub-0xa3bb20>
     4dc:	05000007 	streq	r0, [r0, #-7]
     4e0:	ba08026f 	blt	200ea4 <__core1_unwind_stub-0xdff15c>
     4e4:	14000008 	strne	r0, [r0], #-8
     4e8:	00042d17 	andeq	r2, r4, r7, lsl sp
     4ec:	02720500 	rsbseq	r0, r2, #0, 10
     4f0:	00008107 	andeq	r8, r0, r7, lsl #2
     4f4:	41173000 	tstmi	r7, r0
               ALT_CLKMGR_MAINPLL_CNTR9CLK_CNT_SET(cfg->mainpll.cntr9clk_cnt) |
               ALT_CLKMGR_MAINPLL_CNTR9CLK_SRC_SET(cfg->mainpll.cntr9clk_src));
  /* mainpll.c15 - periph_ref_clk
   * Comment out because C15 input for PLL1 is not supported (2014.12.15 A10_5v4.PDF) */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	0500000e 	streq	r0, [r0, #-14]
     4fc:	cf160273 	svcgt	0x00160273
     500:	34000008 	strcc	r0, [r0], #-8
     504:	00068917 	andeq	r8, r6, r7, lsl r9
     508:	02750500 	rsbseq	r0, r5, #0, 10
     50c:	00008107 	andeq	r8, r0, r7, lsl #2
               ALT_CLKMGR_MAINPLL_CNTR15CLK_CNT_SET(cfg->mainpll.cntr15clk_cnt));
  /*mainpll's NoC Clocks's divider */
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	7d173800 	ldcvc	8, cr3, [r7, #-0]
     514:	05000007 	streq	r0, [r0, #-7]
     518:	e00a0277 	and	r0, sl, r7, ror r2
     51c:	3c000008 	stccc	0, cr0, [r0], {8}
     520:	000e5117 	andeq	r5, lr, r7, lsl r1
     524:	027a0500 	rsbseq	r0, sl, #0, 10
     528:	00019d13 	andeq	r9, r1, r3, lsl sp
     52c:	f1174000 			; <UNDEFINED> instruction: 0xf1174000
     530:	05000002 	streq	r0, [r0, #-2]
     534:	8107027b 	tsthi	r7, fp, ror r2
     538:	44000000 	strmi	r0, [r0], #-0
     53c:	00066f17 	andeq	r6, r6, r7, lsl pc
     540:	027c0500 	rsbseq	r0, ip, #0, 10
     544:	00019d13 	andeq	r9, r1, r3, lsl sp
     548:	a9174800 	ldmdbge	r7, {fp, lr}
     54c:	05000008 	streq	r0, [r0, #-8]
     550:	e614027d 			; <UNDEFINED> instruction: 0xe614027d
     554:	4c000008 	stcmi	0, cr0, [r0], {8}
     558:	00011017 	andeq	r1, r1, r7, lsl r0
     55c:	02800500 	addeq	r0, r0, #0, 10
     560:	00008107 	andeq	r8, r0, r7, lsl #2
     564:	2f175000 	svccs	0x00175000
     568:	05000006 	streq	r0, [r0, #-6]
     56c:	ce090281 	cdpgt	2, 0, cr0, cr9, cr1, {4}
     570:	54000005 	strpl	r0, [r0], #-5
     574:	000a0517 	andeq	r0, sl, r7, lsl r5
     578:	02a40500 	adceq	r0, r4, #0, 10
     57c:	00089507 	andeq	r9, r8, r7, lsl #10
     580:	54185800 	ldrpl	r5, [r8], #-2048	; 0xfffff800
     584:	0500000a 	streq	r0, [r0, #-10]
     588:	ce1302a8 	cdpgt	2, 1, cr0, cr3, cr8, {5}

  /* Peripheral PLL Clock Source and Counters/Divider
     ------------------------------------------------
     perpll.c2 - pll1_emaca_clk 
  */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	48000002 	stmdami	r0, {r1}
     590:	07871801 	streq	r1, [r7, r1, lsl #16]
     594:	a9050000 	stmdbge	r5, {}	; <UNPREDICTABLE>
     598:	028b1202 	addeq	r1, fp, #536870912	; 0x20000000
     59c:	014c0000 	mrseq	r0, (UNDEF: 76)
     5a0:	00061d18 	andeq	r1, r6, r8, lsl sp
     5a4:	02ad0500 	adceq	r0, sp, #0, 10
     5a8:	0008f70c 	andeq	pc, r8, ip, lsl #14
     5ac:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
     5b0:	00000834 	andeq	r0, r0, r4, lsr r8
     5b4:	1002b205 	andne	fp, r2, r5, lsl #4
               ALT_CLKMGR_PERPLL_CNTR2CLK_CNT_SET(cfg->perpll.cntr2clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_SET(cfg->perpll.cntr2clk_src));
  /* perpll.c3 - pll1_emacb_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0000067b 	andeq	r0, r0, fp, ror r6
     5bc:	131802e0 	tstne	r8, #224, 4
     5c0:	05000000 	streq	r0, [r0, #-0]
     5c4:	030a02b4 	movweq	r0, #41652	; 0xa2b4
     5c8:	ec000009 	stc	0, cr0, [r0], {9}
     5cc:	040f0002 	streq	r0, [pc], #-2	; 5d4 <__core1_unwind_stub-0xfffa2c>
     5d0:	000005d4 	ldrdeq	r0, [r0], -r4
     5d4:	09080102 	stmdbeq	r8, {r1, r8}
     5d8:	15000004 	strne	r0, [r0, #-4]
     5dc:	000005d4 	ldrdeq	r0, [r0], -r4
     5e0:	045c040f 	ldrbeq	r0, [ip], #-1039	; 0xfffffbf1
               ALT_CLKMGR_PERPLL_CNTR3CLK_CNT_SET(cfg->perpll.cntr3clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR3CLK_SRC_SET(cfg->perpll.cntr3clk_src));
  /* perpll.c4 - pll1_emac_ptp_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	81130000 	tsthi	r3, r0
     5e8:	04000000 	streq	r0, [r0], #-0
     5ec:	14000006 	strne	r0, [r0], #-6
     5f0:	0000047a 	andeq	r0, r0, sl, ror r4
     5f4:	00011d14 	andeq	r1, r1, r4, lsl sp
     5f8:	06041400 	streq	r1, [r4], -r0, lsl #8
     5fc:	81140000 	tsthi	r4, r0
     600:	00000000 	andeq	r0, r0, r0
     604:	05db040f 	ldrbeq	r0, [fp, #1039]	; 0x40f
     608:	040f0000 	streq	r0, [pc], #-0	; 610 <__core1_unwind_stub-0xfff9f0>
     60c:	000005e6 	andeq	r0, r0, r6, ror #11
               ALT_CLKMGR_PERPLL_CNTR4CLK_CNT_SET(cfg->perpll.cntr4clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR4CLK_SRC_SET(cfg->perpll.cntr4clk_src));
  /* perpll.c5 - pll1_gpio_db_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	0000af13 	andeq	sl, r0, r3, lsl pc
     614:	00062e00 	andeq	r2, r6, r0, lsl #28
     618:	047a1400 	ldrbteq	r1, [sl], #-1024	; 0xfffffc00
     61c:	1d140000 	ldcne	0, cr0, [r4, #-0]
     620:	14000001 	strne	r0, [r0], #-1
     624:	000000af 	andeq	r0, r0, pc, lsr #1
     628:	00008114 	andeq	r8, r0, r4, lsl r1
     62c:	040f0000 	streq	r0, [pc], #-0	; 634 <__core1_unwind_stub-0xfff9cc>
     630:	00000610 	andeq	r0, r0, r0, lsl r6
     634:	00008113 	andeq	r8, r0, r3, lsl r1
     638:	00064800 	andeq	r4, r6, r0, lsl #16
               ALT_CLKMGR_PERPLL_CNTR5CLK_CNT_SET(cfg->perpll.cntr5clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR5CLK_SRC_SET(cfg->perpll.cntr5clk_src));
  /* perpll.c6 - pll1_sdmmc_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	047a1400 	ldrbteq	r1, [sl], #-1024	; 0xfffffc00
     640:	1d140000 	ldcne	0, cr0, [r4, #-0]
     644:	00000001 	andeq	r0, r0, r1
     648:	0634040f 	ldrteq	r0, [r4], -pc, lsl #8
     64c:	4d080000 	stcmi	0, cr0, [r8, #-0]
     650:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
     654:	09000006 	stmdbeq	r0, {r1, r2}
     658:	00000088 	andeq	r0, r0, r8, lsl #1
     65c:	4d080002 	stcmi	0, cr0, [r8, #-8]
     660:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     664:	09000006 	stmdbeq	r0, {r1, r2}
               ALT_CLKMGR_PERPLL_CNTR6CLK_CNT_SET(cfg->perpll.cntr6clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR6CLK_SRC_SET(cfg->perpll.cntr6clk_src));
  /* perpll.c7 - pll1_h2f_user0_clk (A.K.A. s2f_user0_clk) */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	00000088 	andeq	r0, r0, r8, lsl #1
     66c:	12050000 	andne	r0, r5, #0
     670:	0500000c 	streq	r0, [r0, #-12]
     674:	191a0124 	ldmdbne	sl, {r2, r5, r8}
     678:	19000003 	stmdbne	r0, {r0, r1}
     67c:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
               ALT_CLKMGR_PERPLL_CNTR7CLK_CNT_SET(cfg->perpll.cntr7clk_cnt));
  /* perpll.c8 - pll1_h2f_user1_clk (A.K.A. s2f_user1_clk) */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	0128050c 			; <UNDEFINED> instruction: 0x0128050c
     684:	0006b408 	andeq	fp, r6, r8, lsl #8
     688:	0a341700 	beq	d06290 <__core1_unwind_stub-0x2f9d70>
     68c:	2a050000 	bcs	140694 <__core1_unwind_stub-0xebf96c>
     690:	06b41101 	ldrteq	r1, [r4], r1, lsl #2
     694:	17000000 	strne	r0, [r0, -r0]
     698:	0000082d 	andeq	r0, r0, sp, lsr #16
     69c:	07012b05 	streq	r2, [r1, -r5, lsl #22]
     6a0:	00000081 	andeq	r0, r0, r1, lsl #1
     6a4:	08b31704 	ldmeq	r3!, {r2, r8, r9, sl, ip}
     6a8:	2c050000 	stccs	0, cr0, [r5], {-0}
               ALT_CLKMGR_PERPLL_CNTR8CLK_CNT_SET(cfg->perpll.cntr8clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR8CLK_SRC_SET(cfg->perpll.cntr8clk_src));
  /* perpll.c9 - pll1_hmc_pll_ref_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	06ba0b01 	ldrteq	r0, [sl], r1, lsl #22
     6b0:	00080000 	andeq	r0, r8, r0
     6b4:	067b040f 	ldrbteq	r0, [fp], -pc, lsl #8
     6b8:	040f0000 	streq	r0, [pc], #-0	; 6c0 <__core1_unwind_stub-0xfff940>
     6bc:	0000066e 	andeq	r0, r0, lr, ror #12
     6c0:	000b7f19 	andeq	r7, fp, r9, lsl pc
               ALT_CLKMGR_PERPLL_CNTR9CLK_CNT_SET(cfg->perpll.cntr9clk_cnt));

  /* Select EMAC clock source */
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	44050e00 	strmi	r0, [r5], #-3584	; 0xfffff200
     6c8:	06f90801 	ldrbteq	r0, [r9], r1, lsl #16
     6cc:	c0170000 	andsgt	r0, r7, r0
     6d0:	0500000a 	streq	r0, [r0, #-10]
     6d4:	f9120145 			; <UNDEFINED> instruction: 0xf9120145
     6d8:	00000006 	andeq	r0, r0, r6
     6dc:	0001bf17 	andeq	fp, r1, r7, lsl pc
     6e0:	01460500 	cmpeq	r6, r0, lsl #10
     6e4:	0006f912 	andeq	pc, r6, r2, lsl r9	; <UNPREDICTABLE>
     6e8:	8c170600 	ldchi	6, cr0, [r7], {-0}
     6ec:	0500000e 	streq	r0, [r0, #-14]
     6f0:	54120147 	ldrpl	r0, [r2], #-327	; 0xfffffeb9
     6f4:	0c000000 	stceq	0, cr0, [r0], {-0}
     6f8:	00540800 	subseq	r0, r4, r0, lsl #16
     6fc:	07090000 	streq	r0, [r9, -r0]
     700:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
     704:	02000000 	andeq	r0, r0, #0
               ALT_CLKMGR_PERPLL_EMACCTL_EMAC0SEL_SET(cfg->perpll.emacctl_emac0sel) |
               ALT_CLKMGR_PERPLL_EMACCTL_EMAC1SEL_SET(cfg->perpll.emacctl_emac1sel) |
               ALT_CLKMGR_PERPLL_EMACCTL_EMAC2SEL_SET(cfg->perpll.emacctl_emac2sel));

  /* Init GPIO De-bounce Clock Divider */
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	05d01a00 	ldrbeq	r1, [r0, #2560]	; 0xa00
     70c:	1e070285 	cdpne	2, 0, cr0, cr7, cr5, {4}
     710:	17000008 	strne	r0, [r0, -r8]
     714:	000003ce 	andeq	r0, r0, lr, asr #7
     718:	18028705 	stmdane	r2, {r0, r2, r8, r9, sl, pc}
     71c:	00000088 	andeq	r0, r0, r8, lsl #1
               ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET(cfg->perpll.gpiodiv_gpiodbclk));

  /* #############################################################
     Wait until both the Main PLL and the Peripheral PLL is locked */
  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	0bab1700 	bleq	feac6328 <__shm_end__+0xbeac6328>
     724:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
     728:	05ce1202 	strbeq	r1, [lr, #514]	; 0x202
     72c:	17040000 	strne	r0, [r4, -r0]
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	0000002d 	andeq	r0, r0, sp, lsr #32
     734:	10028905 	andne	r8, r2, r5, lsl #18
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	0000081e 	andeq	r0, r0, lr, lsl r8
     73c:	03101708 	tsteq	r0, #8, 14	; 0x200000
     740:	8a050000 	bhi	140748 <__core1_unwind_stub-0xebf8b8>
     744:	01b31702 			; <UNDEFINED> instruction: 0x01b31702
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	17240000 	strne	r0, [r4, -r0]!
     74c:	00000883 	andeq	r0, r0, r3, lsl #17


  /* Now PLL is locked, but before releasing Bypass,
     All Output Counter Reset must be set and cleared by software for correct clock operation.
     mainpll - Assert 'outresetall' */
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	0f028b05 	svceq	0x00028b05
     754:	00000081 	andeq	r0, r0, r1, lsl #1
     758:	0a2f1748 	beq	bc6480 <__core1_unwind_stub-0x439b80>
     75c:	8c050000 	stchi	0, cr0, [r5], {-0}
     760:	007a2c02 	rsbseq	r2, sl, r2, lsl #24
     764:	17500000 	ldrbne	r0, [r0, -r0]
     768:	00000c76 	andeq	r0, r0, r6, ror ip
            ALT_CLKMGR_MAINPLL_VCO0_OUTRSTALL_SET_MSK);
  /* perpll - Assert 'outresetall' */
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	1a028d05 	bne	a3b88 <__core1_unwind_stub-0xf5c478>
     770:	000006c0 	andeq	r0, r0, r0, asr #13
     774:	0d541758 	ldcleq	7, cr1, [r4, #-352]	; 0xfffffea0
     778:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
     77c:	01111602 	tsteq	r1, r2, lsl #12
     780:	17680000 	strbne	r0, [r8, -r0]!
     784:	00000afa 	strdeq	r0, [r0], -sl
            ALT_CLKMGR_PERPLL_VCO0_OUTRSTALL_SET_MSK);
  /* mainpll - Deassert 'outresetall' */
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	16028f05 	strne	r8, [r2], -r5, lsl #30
     78c:	00000111 	andeq	r0, r0, r1, lsl r1
     790:	0a181770 	beq	606558 <__core1_unwind_stub-0x9f9aa8>
     794:	90050000 	andls	r0, r5, r0
     798:	01111602 	tsteq	r1, r2, lsl #12
     79c:	17780000 	ldrbne	r0, [r8, -r0]!
     7a0:	00000165 	andeq	r0, r0, r5, ror #2
             ALT_CLKMGR_MAINPLL_VCO0_OUTRSTALL_SET_MSK);
  /* perpll - Deassert 'outresetall' */
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	10029105 	andne	r9, r2, r5, lsl #2
     7a8:	0000082e 	andeq	r0, r0, lr, lsr #16
     7ac:	06e31780 	strbteq	r1, [r3], r0, lsl #15
     7b0:	92050000 	andls	r0, r5, #0
     7b4:	083e1002 	ldmdaeq	lr!, {r1, ip}
     7b8:	17880000 	strne	r0, [r8, r0]
     7bc:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
  /* Release all PLL from Bypass and then clear Clock Manager's Bootmode bit
     Note: Bypass Register has bypass, bypassS (set), bypassR (clear) */

  /* =============================================================
     Release from Bypass all mainpllgrp's clocks */
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	0f029305 	svceq	0x00029305
     7c4:	00000081 	andeq	r0, r0, r1, lsl #1
     7c8:	02e317a0 	rsceq	r1, r3, #160, 14	; 0x2800000
     7cc:	94050000 	strls	r0, [r5], #-0
  /* Immediately following writes to
     CTRL.BOOTMODE, MAINPLLGRP.BYPASS.MPU or MAINPLLGRP.BYPASS.NOC register bits
     SW should wait 0.5 usecs and then poll this BUSY bit until it is IDLE
     before proceeding with any other register writes in the Clock Manager.
  */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	01111602 	tsteq	r1, r2, lsl #12
     7d4:	17a40000 	strne	r0, [r4, r0]!
     7d8:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	16029505 	strne	r9, [r2], -r5, lsl #10
     7e0:	00000111 	andeq	r0, r0, r1, lsl r1
     7e4:	0f0117ac 	svceq	0x000117ac
     7e8:	96050000 	strls	r0, [r5], -r0

  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	01111602 	tsteq	r1, r2, lsl #12
     7f0:	17b40000 	ldrne	r0, [r4, r0]!
     7f4:	000009ec 	andeq	r0, r0, ip, ror #19
     7f8:	16029705 	strne	r9, [r2], -r5, lsl #14
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	00000111 	andeq	r0, r0, r1, lsl r1
     800:	014517bc 	strheq	r1, [r5, #-124]	; 0xffffff84
     804:	98050000 	stmdals	r5, {}	; <UNPREDICTABLE>
     808:	01111602 	tsteq	r1, r2, lsl #12
  /* ============================================================= */


  /* =============================================================
     Release from Bypass all perpllgrp's clocks */
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	17c40000 	strbne	r0, [r4, r0]
     810:	00000990 	muleq	r0, r0, r9
     814:	08029905 	stmdaeq	r2, {r0, r2, r8, fp, ip, pc}
     818:	00000081 	andeq	r0, r0, r1, lsl #1
  /* Immediately following writes to
   / CTRL.BOOTMODE, MAINPLLGRP.BYPASS.MPU or MAINPLLGRP.BYPASS.NOC register bits
   / SW should wait 0.5 usecs and then poll this BUSY bit until it is IDLE
   / before proceeding with any other register writes in the Clock Manager.
  */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	d40800cc 	strle	r0, [r8], #-204	; 0xffffff34
     820:	2e000005 	cdpcs	0, 0, cr0, cr0, cr5, {0}
     824:	09000008 	stmdbeq	r0, {r3}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	00000088 	andeq	r0, r0, r8, lsl #1
     82c:	d4080019 	strle	r0, [r8], #-25	; 0xffffffe7
     830:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
     834:	09000008 	stmdbeq	r0, {r3}

  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	00000088 	andeq	r0, r0, r8, lsl #1
     83c:	d4080007 	strle	r0, [r8], #-7
     840:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
     844:	09000008 	stmdbeq	r0, {r3}
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	00000088 	andeq	r0, r0, r8, lsl #1
     84c:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
     850:	07029e05 	streq	r9, [r2, -r5, lsl #28]
     854:	00000875 	andeq	r0, r0, r5, ror r8


  /* =============================================================
   / Clear Clock Manager's Bootmode bit 
  */
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	000e1817 	andeq	r1, lr, r7, lsl r8
     85c:	02a10500 	adceq	r0, r1, #0, 10
     860:	0008751b 	andeq	r7, r8, fp, lsl r5
     864:	48170000 	ldmdami	r7, {}	; <UNPREDICTABLE>
     868:	05000008 	streq	r0, [r0, #-8]
     86c:	851802a2 	ldrhi	r0, [r8, #-674]	; 0xfffffd5e
     870:	78000008 	stmdavc	r0, {r3}
  /* Immediately following writes to
     CTRL.BOOTMODE, MAINPLLGRP.BYPASS.MPU or MAINPLLGRP.BYPASS.NOC register bits
     SW should wait 0.5 usecs and then poll this BUSY bit until it is IDLE
     before proceeding with any other register writes in the Clock Manager.
  */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	03130800 	tsteq	r3, #0, 16
     878:	08850000 	stmeq	r5, {}	; <UNPREDICTABLE>
     87c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	1d000000 	stcne	0, cr0, [r0, #-0]
     884:	00880800 	addeq	r0, r8, r0, lsl #16
     888:	08950000 	ldmeq	r5, {}	; <UNPREDICTABLE>
     88c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>

  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	1d000000 	stcne	0, cr0, [r0, #-0]
     894:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
     898:	ba030283 	blt	c12ac <__core1_unwind_stub-0xf3ed54>
     89c:	1c000008 	stcne	0, cr0, [r0], {8}
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	00000446 	andeq	r0, r0, r6, asr #8
     8a4:	0b029a05 	bleq	a70c0 <__core1_unwind_stub-0xf58f40>
     8a8:	00000709 	andeq	r0, r0, r9, lsl #14
     8ac:	0001381c 	andeq	r3, r1, ip, lsl r8
  /* ============================================================= */

  /* Enable mainpllgrp's software-managed clock */
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	02a30500 	adceq	r0, r3, #0, 10
     8b4:	00084e0b 	andeq	r4, r8, fp, lsl #28
     8b8:	d4080000 	strle	r0, [r8], #-0
     8bc:	ca000005 	bgt	8d8 <__core1_unwind_stub-0xfff728>
               ALT_CLKMGR_MAINPLL_ENS_S2FUSER0CLKEN_SET_MSK |
               ALT_CLKMGR_MAINPLL_ENS_HMCPLLREFCLKEN_SET_MSK);

  /* Enable perpllgrp's software-managed clock */
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	09000008 	stmdbeq	r0, {r3}
     8c4:	00000088 	andeq	r0, r0, r8, lsl #1
     8c8:	001d0018 	andseq	r0, sp, r8, lsl r0
     8cc:	0f000000 	svceq	0x00000000
               ALT_CLKMGR_PERPLL_ENS_RESET);

  /* Clear all interrupt status register, loss lock and slip bits might set during configuration */
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	0008ca04 	andeq	ip, r8, r4, lsl #20
     8d4:	08e01e00 	stmiaeq	r0!, {r9, sl, fp, ip}^
     8d8:	7a140000 	bvc	5008e0 <__core1_unwind_stub-0xaff720>
     8dc:	00000004 	andeq	r0, r0, r4
               ALT_CLKMGR_CLKMGR_INTR_PERPLLRFSLIP_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_MAINPLLFBSLIP_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_PERPLLFBSLIP_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_MAINPLLACHIEVED_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_PERPLLACHIEVED_SET_MSK);
    return ALT_E_SUCCESS;
     8e0:	08d5040f 	ldmeq	r5, {r0, r1, r2, r3, sl}^
}
     8e4:	040f0000 	streq	r0, [pc], #-0	; 8ec <__core1_unwind_stub-0xfff714>
     8e8:	0000019d 	muleq	r0, sp, r1
     8ec:	0008f71e 	andeq	pc, r8, lr, lsl r7	; <UNPREDICTABLE>
     8f0:	00811400 	addeq	r1, r1, r0, lsl #8
     8f4:	0f000000 	svceq	0x00000000
     8f8:	0008fd04 	andeq	pc, r8, r4, lsl #26
     8fc:	ec040f00 	stc	15, cr0, [r4], {-0}
     900:	08000008 	stmdaeq	r0, {r3}
     904:	0000066e 	andeq	r0, r0, lr, ror #12
     908:	00000913 	andeq	r0, r0, r3, lsl r9
     90c:	00008809 	andeq	r8, r0, r9, lsl #16
     910:	1f000200 	svcne	0x00000200
     914:	00000454 	andeq	r0, r0, r4, asr r4
     918:	17033305 	strne	r3, [r3, -r5, lsl #6]
     91c:	0000047a 	andeq	r0, r0, sl, ror r4
     920:	00044d1f 	andeq	r4, r4, pc, lsl sp
     924:	03340500 	teqeq	r4, #0, 10
     928:	0004801d 	andeq	r8, r4, sp, lsl r0
     92c:	0dbc2000 	ldceq	0, cr2, [ip]
     930:	67070000 	strvs	r0, [r7, -r0]
     934:	0005ce0e 	andeq	ip, r5, lr, lsl #28
     938:	0c140300 	ldceq	3, cr0, [r4], {-0}
     93c:	42080000 	andmi	r0, r8, #0
     940:	00066e10 	andeq	r6, r6, r0, lsl lr
     944:	04d60300 	ldrbeq	r0, [r6], #768	; 0x300
     948:	41090000 	mrsmi	r0, (UNDEF: 9)
     94c:	0000331d 	andeq	r3, r0, sp, lsl r3
     950:	09450300 	stmdbeq	r5, {r8, r9}^
     954:	2a0a0000 	bcs	28095c <__core1_unwind_stub-0xd7f6a4>
     958:	00005b12 	andeq	r5, r0, r2, lsl fp
     95c:	0a0c0a00 	beq	303164 <__core1_unwind_stub-0xcfce9c>
     960:	098e092f 	stmibeq	lr, {r0, r1, r2, r3, r5, r8, fp}
     964:	c40b0000 	strgt	r0, [fp], #-0
     968:	0a000004 	beq	980 <__core1_unwind_stub-0xfff680>
     96c:	005b0d30 	subseq	r0, fp, r0, lsr sp
     970:	0b000000 	bleq	978 <__core1_unwind_stub-0xfff688>
     974:	0000050d 	andeq	r0, r0, sp, lsl #10
     978:	5b0d310a 	blpl	34cda8 <__core1_unwind_stub-0xcb3258>
     97c:	04000000 	streq	r0, [r0], #-0
     980:	0002210b 	andeq	r2, r2, fp, lsl #2
     984:	0d320a00 	vldmdbeq	r2!, {s0-s-1}
     988:	0000005b 	andeq	r0, r0, fp, asr r0
     98c:	1f030008 	svcne	0x00030008
     990:	0a00000e 	beq	9d0 <__core1_unwind_stub-0xfff630>
     994:	095d0333 	ldmdbeq	sp, {r0, r1, r4, r5, r8, r9}^
     998:	600a0000 	andvs	r0, sl, r0
     99c:	dc09380a 	stcle	8, cr3, [r9], {10}
     9a0:	0b00000a 	bleq	9d0 <__core1_unwind_stub-0xfff630>
     9a4:	000005ca 	andeq	r0, r0, sl, asr #11
     9a8:	5b0d390a 	blpl	34edd8 <__core1_unwind_stub-0xcb1228>
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	0003810b 	andeq	r8, r3, fp, lsl #2
     9b4:	0d3a0a00 	vldmdbeq	sl!, {s0-s-1}
     9b8:	0000005b 	andeq	r0, r0, fp, asr r0
     9bc:	0f310b04 	svceq	0x00310b04
     9c0:	3b0a0000 	blcc	2809c8 <__core1_unwind_stub-0xd7f638>
     9c4:	00005b0d 	andeq	r5, r0, sp, lsl #22
     9c8:	ec0b0800 	stc	8, cr0, [fp], {-0}
     9cc:	0a000008 	beq	9f4 <__core1_unwind_stub-0xfff60c>
     9d0:	005b0d3c 	subseq	r0, fp, ip, lsr sp
     9d4:	0b0c0000 	bleq	3009dc <__core1_unwind_stub-0xcff624>
     9d8:	00000cc1 	andeq	r0, r0, r1, asr #25
     9dc:	5b0d3d0a 	blpl	34fe0c <__core1_unwind_stub-0xcb01f4>
     9e0:	10000000 	andne	r0, r0, r0
     9e4:	0007280b 	andeq	r2, r7, fp, lsl #16
     9e8:	0d3e0a00 	vldmdbeq	lr!, {s0-s-1}
     9ec:	0000005b 	andeq	r0, r0, fp, asr r0
     9f0:	06370b14 			; <UNDEFINED> instruction: 0x06370b14
     9f4:	3f0a0000 	svccc	0x000a0000
     9f8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     9fc:	af0b1800 	svcge	0x000b1800
     a00:	0a00000d 	beq	a3c <__core1_unwind_stub-0xfff5c4>
     a04:	005b0d40 	subseq	r0, fp, r0, asr #26
     a08:	0b1c0000 	bleq	700a10 <__core1_unwind_stub-0x8ff5f0>
     a0c:	00000770 	andeq	r0, r0, r0, ror r7
     a10:	5b0d410a 	blpl	350e40 <__core1_unwind_stub-0xcaf1c0>
     a14:	20000000 	andcs	r0, r0, r0
     a18:	0001fb0b 	andeq	pc, r1, fp, lsl #22
     a1c:	0d420a00 	vstreq	s1, [r2, #-0]
     a20:	0000005b 	andeq	r0, r0, fp, asr r0
     a24:	016f0b24 	cmneq	pc, r4, lsr #22
     a28:	430a0000 	movwmi	r0, #40960	; 0xa000
     a2c:	00005b0d 	andeq	r5, r0, sp, lsl #22
     a30:	720b2800 	andvc	r2, fp, #0, 16
     a34:	0a00000b 	beq	a68 <__core1_unwind_stub-0xfff598>
     a38:	005b0d44 	subseq	r0, fp, r4, asr #26
     a3c:	0b2c0000 	bleq	b00a44 <__core1_unwind_stub-0x4ff5bc>
     a40:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
     a44:	5b0d450a 	blpl	351e74 <__core1_unwind_stub-0xcae18c>
     a48:	30000000 	andcc	r0, r0, r0
     a4c:	000b2e0b 	andeq	r2, fp, fp, lsl #28
     a50:	0d460a00 	vstreq	s1, [r6, #-0]
     a54:	0000005b 	andeq	r0, r0, fp, asr r0
     a58:	0f600b34 	svceq	0x00600b34
     a5c:	470a0000 	strmi	r0, [sl, -r0]
     a60:	00005b0d 	andeq	r5, r0, sp, lsl #22
     a64:	5c0b3800 	stcpl	8, cr3, [fp], {-0}
     a68:	0a00000a 	beq	a98 <__core1_unwind_stub-0xfff568>
     a6c:	005b0d48 	subseq	r0, fp, r8, asr #26
     a70:	0b3c0000 	bleq	f00a78 <__core1_unwind_stub-0xff588>
     a74:	00000f24 	andeq	r0, r0, r4, lsr #30
     a78:	5b0d490a 	blpl	352ea8 <__core1_unwind_stub-0xcad158>
     a7c:	40000000 	andmi	r0, r0, r0
     a80:	000e330b 	andeq	r3, lr, fp, lsl #6
     a84:	0d4a0a00 	vstreq	s1, [sl, #-0]
     a88:	0000005b 	andeq	r0, r0, fp, asr r0
     a8c:	0b080b44 	bleq	2037a4 <__core1_unwind_stub-0xdfc85c>
     a90:	4b0a0000 	blmi	280a98 <__core1_unwind_stub-0xd7f568>
     a94:	00005b0d 	andeq	r5, r0, sp, lsl #22
     a98:	1e0b4800 	cdpne	8, 0, cr4, cr11, cr0, {0}
     a9c:	0a000000 	beq	aa4 <__core1_unwind_stub-0xfff55c>
     aa0:	005b0d4c 	subseq	r0, fp, ip, asr #26
     aa4:	0b4c0000 	bleq	1300aac <__end__+0x2e4a8c>
     aa8:	000001d7 	ldrdeq	r0, [r0], -r7
     aac:	5b0d4d0a 	blpl	353edc <__core1_unwind_stub-0xcac124>
     ab0:	50000000 	andpl	r0, r0, r0
     ab4:	0006600b 	andeq	r6, r6, fp
     ab8:	0d4e0a00 	vstreq	s1, [lr, #-0]
     abc:	0000005b 	andeq	r0, r0, fp, asr r0
     ac0:	0d6b0b54 	vstmdbeq	fp!, {d16-<overflow reg d57>}
     ac4:	4f0a0000 	svcmi	0x000a0000
     ac8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     acc:	6b0b5800 	blvs	2d6ad4 <__core1_unwind_stub-0xd2952c>
     ad0:	0a00000e 	beq	b10 <__core1_unwind_stub-0xfff4f0>
     ad4:	005b0d50 	subseq	r0, fp, r0, asr sp
     ad8:	005c0000 	subseq	r0, ip, r0
     adc:	00064203 	andeq	r4, r6, r3, lsl #4
     ae0:	03510a00 	cmpeq	r1, #0, 20
     ae4:	0000099a 	muleq	r0, sl, r9
     ae8:	560a540a 	strpl	r5, [sl], -sl, lsl #8
     aec:	000c0309 	andeq	r0, ip, r9, lsl #6
     af0:	05ca0b00 	strbeq	r0, [sl, #2816]	; 0xb00
     af4:	570a0000 	strpl	r0, [sl, -r0]
     af8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     afc:	810b0000 	mrshi	r0, (UNDEF: 11)
     b00:	0a000003 	beq	b14 <__core1_unwind_stub-0xfff4ec>
     b04:	005b0d58 	subseq	r0, fp, r8, asr sp
     b08:	0b040000 	bleq	100b10 <__core1_unwind_stub-0xeff4f0>
     b0c:	00000f31 	andeq	r0, r0, r1, lsr pc
     b10:	5b0d590a 	blpl	356f40 <__core1_unwind_stub-0xca90c0>
     b14:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b18:	000daf0b 	andeq	sl, sp, fp, lsl #30
     b1c:	0d5a0a00 	vldreq	s1, [sl, #-0]
     b20:	0000005b 	andeq	r0, r0, fp, asr r0
     b24:	03b00b0c 	movseq	r0, #12, 22	; 0x3000
     b28:	5b0a0000 	blpl	280b30 <__core1_unwind_stub-0xd7f4d0>
     b2c:	00005b0d 	andeq	r5, r0, sp, lsl #22
     b30:	700b1000 	andvc	r1, fp, r0
     b34:	0a000007 	beq	b58 <__core1_unwind_stub-0xfff4a8>
     b38:	005b0d5c 	subseq	r0, fp, ip, asr sp
     b3c:	0b140000 	bleq	500b44 <__core1_unwind_stub-0xaff4bc>
     b40:	00000d7d 	andeq	r0, r0, sp, ror sp
     b44:	5b0d5d0a 	blpl	357f74 <__core1_unwind_stub-0xca808c>
     b48:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     b4c:	0001fb0b 	andeq	pc, r1, fp, lsl #22
     b50:	0d5e0a00 	vldreq	s1, [lr, #-0]
     b54:	0000005b 	andeq	r0, r0, fp, asr r0
     b58:	06ef0b1c 	usateq	r0, #15, ip, lsl #22
     b5c:	5f0a0000 	svcpl	0x000a0000
     b60:	00005b0d 	andeq	r5, r0, sp, lsl #22
     b64:	6f0b2000 	svcvs	0x000b2000
     b68:	0a000001 	beq	b74 <__core1_unwind_stub-0xfff48c>
     b6c:	005b0d60 	subseq	r0, fp, r0, ror #26
     b70:	0b240000 	bleq	900b78 <__core1_unwind_stub-0x6ff488>
     b74:	00000674 	andeq	r0, r0, r4, ror r6
     b78:	5b0d610a 	blpl	358fa8 <__core1_unwind_stub-0xca7058>
     b7c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     b80:	000b720b 	andeq	r7, fp, fp, lsl #4
     b84:	0d620a00 	vstmdbeq	r2!, {s1-s0}
     b88:	0000005b 	andeq	r0, r0, fp, asr r0
     b8c:	012b0b2c 			; <UNDEFINED> instruction: 0x012b0b2c
     b90:	630a0000 	movwvs	r0, #40960	; 0xa000
     b94:	00005b0d 	andeq	r5, r0, sp, lsl #22
     b98:	bd0b3000 	stclt	0, cr3, [fp, #-0]
     b9c:	0a000005 	beq	bb8 <__core1_unwind_stub-0xfff448>
     ba0:	005b0d64 	subseq	r0, fp, r4, ror #26
     ba4:	0b340000 	bleq	d00bac <__core1_unwind_stub-0x2ff454>
     ba8:	00000f60 	andeq	r0, r0, r0, ror #30
     bac:	5b0d650a 	blpl	359fdc <__core1_unwind_stub-0xca6024>
     bb0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     bb4:	0005930b 	andeq	r9, r5, fp, lsl #6
     bb8:	0d660a00 	vstmdbeq	r6!, {s1-s0}
     bbc:	0000005b 	andeq	r0, r0, fp, asr r0
     bc0:	0a5c0b3c 	beq	17038b8 <__end__+0x6e7898>
     bc4:	670a0000 	strvs	r0, [sl, -r0]
     bc8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     bcc:	6a0b4000 	bvs	2d0bd4 <__core1_unwind_stub-0xd2f42c>
     bd0:	0a000009 	beq	bfc <__core1_unwind_stub-0xfff404>
     bd4:	005b0d68 	subseq	r0, fp, r8, ror #26
     bd8:	0b440000 	bleq	1100be0 <__end__+0xe4bc0>
     bdc:	0000017c 	andeq	r0, r0, ip, ror r1
     be0:	5b0d690a 	blpl	35b010 <__core1_unwind_stub-0xca4ff0>
     be4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     be8:	0009990b 	andeq	r9, r9, fp, lsl #18
     bec:	0d6a0a00 	vstmdbeq	sl!, {s1-s0}
     bf0:	0000005b 	andeq	r0, r0, fp, asr r0
     bf4:	09da0b4c 	ldmibeq	sl, {r2, r3, r6, r8, r9, fp}^
     bf8:	6b0a0000 	blvs	280c00 <__core1_unwind_stub-0xd7f400>
     bfc:	00005b0d 	andeq	r5, r0, sp, lsl #22
     c00:	03005000 	movweq	r5, #0
     c04:	00000240 	andeq	r0, r0, r0, asr #4
     c08:	e8036c0a 	stmda	r3, {r1, r3, sl, fp, sp, lr}
     c0c:	0a00000a 	beq	c3c <__core1_unwind_stub-0xfff3c4>
     c10:	09710a08 	ldmdbeq	r1!, {r3, r9, fp}^
     c14:	00000c33 	andeq	r0, r0, r3, lsr ip
     c18:	0001b10b 	andeq	fp, r1, fp, lsl #2
     c1c:	0d720a00 	vldmdbeq	r2!, {s1-s0}
     c20:	0000005b 	andeq	r0, r0, fp, asr r0
     c24:	07690b00 	strbeq	r0, [r9, -r0, lsl #22]!
     c28:	730a0000 	movwvc	r0, #40960	; 0xa000
     c2c:	00005b0d 	andeq	r5, r0, sp, lsl #22
     c30:	03000400 	movweq	r0, #1024	; 0x400
     c34:	00000925 	andeq	r0, r0, r5, lsr #18
     c38:	0f03740a 	svceq	0x0003740a
     c3c:	0a00000c 	beq	c74 <__core1_unwind_stub-0xfff38c>
     c40:	097a0abc 	ldmdbeq	sl!, {r2, r3, r4, r5, r7, r9, fp}^
     c44:	00000c70 	andeq	r0, r0, r0, ror ip
     c48:	0005ec0b 	andeq	lr, r5, fp, lsl #24
     c4c:	247b0a00 	ldrbtcs	r0, [fp], #-2560	; 0xfffff600
     c50:	00000adc 	ldrdeq	r0, [r0], -ip
     c54:	0ddd0b00 	vldreq	d16, [sp]
     c58:	7c0a0000 	stcvc	0, cr0, [sl], {-0}
     c5c:	000c0324 	andeq	r0, ip, r4, lsr #6
     c60:	db0b6000 	blle	2d8c68 <__core1_unwind_stub-0xd27398>
     c64:	0a000003 	beq	c78 <__core1_unwind_stub-0xfff388>
     c68:	0c33247d 	cfldrseq	mvf2, [r3], #-500	; 0xfffffe0c
     c6c:	00b40000 	adcseq	r0, r4, r0
     c70:	0002fb03 	andeq	pc, r2, r3, lsl #22
     c74:	037e0a00 	cmneq	lr, #0, 20
     c78:	00000c3f 	andeq	r0, r0, pc, lsr ip
     c7c:	000dee21 	andeq	lr, sp, r1, lsr #28
     c80:	4d010700 	stcmi	7, cr0, [r1, #-0]
     c84:	0a000000 	beq	c8c <__core1_unwind_stub-0xfff374>
     c88:	0d490e8b 	stcleq	14, cr0, [r9, #-556]	; 0xfffffdd4
     c8c:	29220000 	stmdbcs	r2!, {}	; <UNPREDICTABLE>
     c90:	00000005 	andeq	r0, r0, r5
     c94:	000ccc22 	andeq	ip, ip, r2, lsr #24
     c98:	f7220100 			; <UNDEFINED> instruction: 0xf7220100
     c9c:	02000008 	andeq	r0, r0, #8
     ca0:	000acc22 	andeq	ip, sl, r2, lsr #24
     ca4:	7c220300 	stcvc	3, cr0, [r2], #-0
     ca8:	04000005 	streq	r0, [r0], #-5
     cac:	000c8f22 	andeq	r8, ip, r2, lsr #30
     cb0:	a5220500 	strge	r0, [r2, #-1280]!	; 0xfffffb00
     cb4:	0600000f 	streq	r0, [r0], -pc
     cb8:	00011822 	andeq	r1, r1, r2, lsr #16
     cbc:	6d220700 	stcvs	7, cr0, [r2, #-0]
     cc0:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
     cc4:	0007c822 	andeq	ip, r7, r2, lsr #16
     cc8:	7c220900 			; <UNDEFINED> instruction: 0x7c220900
     ccc:	0a00000e 	beq	d0c <__core1_unwind_stub-0xfff2f4>
     cd0:	00027122 	andeq	r7, r2, r2, lsr #2
     cd4:	ec220b00 			; <UNDEFINED> instruction: 0xec220b00
     cd8:	0c00000a 	stceq	0, cr0, [r0], {10}
     cdc:	00027f22 	andeq	r7, r2, r2, lsr #30
     ce0:	90220d00 	eorls	r0, r2, r0, lsl #26
     ce4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     ce8:	0005d422 	andeq	sp, r5, r2, lsr #8
     cec:	bd220f00 	stclt	15, cr0, [r2, #-0]
     cf0:	10000003 	andne	r0, r0, r3
     cf4:	000e5922 	andeq	r5, lr, r2, lsr #18
     cf8:	7d221100 	stfvcs	f1, [r2, #-0]
     cfc:	1200000f 	andne	r0, r0, #15
     d00:	000b5222 	andeq	r5, fp, r2, lsr #4
     d04:	11221300 			; <UNDEFINED> instruction: 0x11221300
     d08:	1400000d 	strne	r0, [r0], #-13
     d0c:	000d1f22 	andeq	r1, sp, r2, lsr #30
     d10:	2d221500 	cfstr32cs	mvfx1, [r2, #-0]
     d14:	1600000d 	strne	r0, [r0], -sp
     d18:	00037022 	andeq	r7, r3, r2, lsr #32
     d1c:	f4221700 	vld1.8	{d1}, [r2], r0
     d20:	18000005 	stmdane	r0, {r0, r2}
     d24:	000dc622 	andeq	ip, sp, r2, lsr #12
     d28:	fc221900 	stc2	9, cr1, [r2], #-0	; <UNPREDICTABLE>
     d2c:	1a000006 	bne	d4c <__core1_unwind_stub-0xfff2b4>
     d30:	000e9122 	andeq	r9, lr, r2, lsr #2
     d34:	df221b00 	svcle	0x00221b00
     d38:	1c000008 	stcne	0, cr0, [r0], {8}
     d3c:	000c2b22 	andeq	r2, ip, r2, lsr #22
     d40:	60221d00 	eorvs	r1, r2, r0, lsl #26
     d44:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
     d48:	05030300 	streq	r0, [r3, #-768]	; 0xfffffd00
     d4c:	ae0a0000 	cdpge	0, 0, cr0, cr10, cr0, {0}
     d50:	000c7c03 	andeq	r7, ip, r3, lsl #24
     d54:	39040f00 	stmdbcc	r4, {r8, r9, sl, fp}
     d58:	20000009 	andcs	r0, r0, r9
     d5c:	0000083c 	andeq	r0, r0, ip, lsr r8
     d60:	550e360b 	strpl	r3, [lr, #-1547]	; 0xfffff9f5
     d64:	2000000d 	andcs	r0, r0, sp
     d68:	00000842 	andeq	r0, r0, r2, asr #16
     d6c:	550e370b 	strpl	r3, [lr, #-1803]	; 0xfffff8f5
     d70:	2100000d 	tstcs	r0, sp
     d74:	00000ecd 	andeq	r0, r0, sp, asr #29
     d78:	004d0107 	subeq	r0, sp, r7, lsl #2
     d7c:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
     d80:	000db00e 	andeq	fp, sp, lr
     d84:	031f2200 	tsteq	pc, #0, 4
     d88:	22000000 	andcs	r0, r0, #0
     d8c:	00000536 	andeq	r0, r0, r6, lsr r5
     d90:	040e2201 	streq	r2, [lr], #-513	; 0xfffffdff
     d94:	22020000 	andcs	r0, r2, #0
     d98:	00000c38 	andeq	r0, r0, r8, lsr ip
     d9c:	0c4a2203 	sfmeq	f2, 2, [sl], {3}
     da0:	22040000 	andcs	r0, r4, #0
     da4:	00000336 	andeq	r0, r0, r6, lsr r3
     da8:	03462205 	movteq	r2, #25093	; 0x6205
     dac:	00060000 	andeq	r0, r6, r0
     db0:	00069c21 	andeq	r9, r6, r1, lsr #24
     db4:	4d010700 	stcmi	7, cr0, [r1, #-0]
     db8:	0c000000 	stceq	0, cr0, [r0], {-0}
     dbc:	0dcf0e8e 	stcleq	14, cr0, [pc, #568]	; ffc <__core1_unwind_stub-0xfff004>
     dc0:	60220000 	eorvs	r0, r2, r0
     dc4:	00000004 	andeq	r0, r0, r4
     dc8:	0007dc22 	andeq	sp, r7, r2, lsr #24
     dcc:	23000100 	movwcs	r0, #256	; 0x100
     dd0:	00000878 	andeq	r0, r0, r8, ror r8
     dd4:	510c4c01 	tstpl	ip, r1, lsl #24
     dd8:	05000009 	streq	r0, [r0, #-9]
     ddc:	0056e403 	subseq	lr, r6, r3, lsl #8
     de0:	0ebb2301 	cdpeq	3, 11, cr2, cr11, cr1, {0}
     de4:	4d010000 	stcmi	0, cr0, [r1, #-0]
     de8:	0009510c 	andeq	r5, r9, ip, lsl #2
     dec:	00030500 	andeq	r0, r3, r0, lsl #10
     df0:	23010080 	movwcs	r0, #4224	; 0x1080
     df4:	0000019e 	muleq	r0, lr, r1
     df8:	510c4e01 	tstpl	ip, r1, lsl #28
     dfc:	05000009 	streq	r0, [r0, #-9]
     e00:	00800403 	addeq	r0, r0, r3, lsl #8
     e04:	01c52401 	biceq	r2, r5, r1, lsl #8
     e08:	6b010000 	blvs	40e10 <__core1_unwind_stub-0xfbf1f0>
     e0c:	09450103 	stmdbeq	r5, {r0, r1, r8}^
     e10:	00000000 	andeq	r0, r0, r0
     e14:	08f00000 	ldmeq	r0!, {}^	; <UNPREDICTABLE>
     e18:	9c010000 	stcls	0, cr0, [r1], {-0}
     e1c:	00000e81 	andeq	r0, r0, r1, lsl #29
     e20:	67666325 	strbvs	r6, [r6, -r5, lsr #6]!
     e24:	036c0100 	cmneq	ip, #0, 2
     e28:	000e811a 	andeq	r8, lr, sl, lsl r1
     e2c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     e30:	0004fc26 	andeq	pc, r4, r6, lsr #24
     e34:	036d0100 	cmneq	sp, #0, 2
     e38:	000e8718 	andeq	r8, lr, r8, lsl r7
     e3c:	60910200 	addsvs	r0, r1, r0, lsl #4
     e40:	000f1227 	andeq	r1, pc, r7, lsr #4
     e44:	03700100 	cmneq	r0, #0, 2
     e48:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e4c:	70910200 	addsvc	r0, r1, r0, lsl #4
     e50:	0001b827 	andeq	fp, r1, r7, lsr #16
     e54:	03710100 	cmneq	r1, #0, 2
     e58:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e5c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     e60:	00042527 	andeq	r2, r4, r7, lsr #10
     e64:	03720100 	cmneq	r2, #0, 2
     e68:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e70:	0006c527 	andeq	ip, r6, r7, lsr #10
     e74:	03730100 	cmneq	r3, #0, 2
     e78:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e7c:	68910200 	ldmvs	r1, {r9}
     e80:	70040f00 	andvc	r0, r4, r0, lsl #30
     e84:	0f00000c 	svceq	0x0000000c
     e88:	00098e04 	andeq	r8, r9, r4, lsl #28
     e8c:	0eee2400 	cdpeq	4, 14, cr2, cr14, cr0, {0}
     e90:	31010000 	mrscc	r0, (UNDEF: 1)
     e94:	09451103 	stmdbeq	r5, {r0, r1, r8, ip}^
     e98:	11380000 	teqne	r8, r0
     e9c:	02640100 	rsbeq	r0, r4, #0, 2
     ea0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ea4:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
     ea8:	6b6c6325 	blvs	1b19b44 <__end__+0xafdb24>
     eac:	03310100 	teqeq	r1, #0, 2
     eb0:	000d492e 	andeq	r4, sp, lr, lsr #18
     eb4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     eb8:	0c5c2800 	mrrceq	8, 0, r2, ip, cr0
     ebc:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     ec0:	09452103 	stmdbeq	r5, {r0, r1, r8, sp}^
     ec4:	10f00000 	rscsne	r0, r0, r0
     ec8:	00480100 	subeq	r0, r8, r0, lsl #2
     ecc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ed0:	00000ef5 	strdeq	r0, [r0], -r5
     ed4:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
     ed8:	03290100 			; <UNDEFINED> instruction: 0x03290100
     edc:	00011d41 	andeq	r1, r1, r1, asr #26
     ee0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ee4:	000f1f26 	andeq	r1, pc, r6, lsr #30
     ee8:	03290100 			; <UNDEFINED> instruction: 0x03290100
     eec:	00005b4f 	andeq	r5, r0, pc, asr #22
     ef0:	70910200 	addsvc	r0, r1, r0, lsl #4
     ef4:	01e62400 	mvneq	r2, r0, lsl #8
     ef8:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
     efc:	09451102 	stmdbeq	r5, {r1, r8, ip}^
     f00:	00000000 	andeq	r0, r0, r0
     f04:	02640000 	rsbeq	r0, r4, #0
     f08:	9c010000 	stcls	0, cr0, [r1], {-0}
     f0c:	00000f21 	andeq	r0, r0, r1, lsr #30
     f10:	6b6c6325 	blvs	1b19bac <__end__+0xafdb8c>
     f14:	02f50100 	rscseq	r0, r5, #0, 2
     f18:	000d4930 	andeq	r4, sp, r0, lsr r9
     f1c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f20:	02c72800 	sbceq	r2, r7, #0, 16
     f24:	ef010000 	svc	0x00010000
     f28:	09452102 	stmdbeq	r5, {r1, r8, sp}^
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	00340000 	eorseq	r0, r4, r0
     f34:	9c010000 	stcls	0, cr0, [r1], {-0}
     f38:	00000f5d 	andeq	r0, r0, sp, asr pc
     f3c:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
     f40:	02ef0100 	rsceq	r0, pc, #0, 2
     f44:	00011d43 	andeq	r1, r1, r3, asr #26
     f48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f4c:	000f1f26 	andeq	r1, pc, r6, lsr #30
     f50:	02ef0100 	rsceq	r0, pc, #0, 2
     f54:	00005b51 	andeq	r5, r0, r1, asr fp
     f58:	70910200 	addsvc	r0, r1, r0, lsl #4
     f5c:	0b8f2400 	bleq	fe3c9f64 <__shm_end__+0xbe3c9f64>
     f60:	bb010000 	bllt	40f68 <__core1_unwind_stub-0xfbf098>
     f64:	09451102 	stmdbeq	r5, {r1, r8, ip}^
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	02640000 	rsbeq	r0, r4, #0
     f70:	9c010000 	stcls	0, cr0, [r1], {-0}
     f74:	00000f89 	andeq	r0, r0, r9, lsl #31
     f78:	6b6c6325 	blvs	1b19c14 <__end__+0xafdbf4>
     f7c:	02bb0100 	adcseq	r0, fp, #0, 2
     f80:	000d4931 	andeq	r4, sp, r1, lsr r9
     f84:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f88:	02aa2800 	adceq	r2, sl, #0, 16
     f8c:	b4010000 	strlt	r0, [r1], #-0
     f90:	09452102 	stmdbeq	r5, {r1, r8, sp}^
     f94:	00000000 	andeq	r0, r0, r0
     f98:	00340000 	eorseq	r0, r4, r0
     f9c:	9c010000 	stcls	0, cr0, [r1], {-0}
     fa0:	00000fc5 	andeq	r0, r0, r5, asr #31
     fa4:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
     fa8:	02b40100 	adcseq	r0, r4, #0, 2
     fac:	00011d44 	andeq	r1, r1, r4, asr #26
     fb0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fb4:	000f1f26 	andeq	r1, pc, r6, lsr #30
     fb8:	02b40100 	adcseq	r0, r4, #0, 2
     fbc:	00005b52 	andeq	r5, r0, r2, asr fp
     fc0:	70910200 	addsvc	r0, r1, r0, lsl #4
     fc4:	0edd2400 	cdpeq	4, 13, cr2, cr13, cr0, {0}
     fc8:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     fcc:	09451102 	stmdbeq	r5, {r1, r8, ip}^
     fd0:	0eb40000 	cdpeq	0, 11, cr0, cr4, cr0, {0}
     fd4:	023c0100 	eorseq	r0, ip, #0, 2
     fd8:	9c010000 	stcls	0, cr0, [r1], {-0}
     fdc:	00001011 	andeq	r1, r0, r1, lsl r0
     fe0:	6b6c6325 	blvs	1b19c7c <__end__+0xafdc5c>
     fe4:	02490100 	subeq	r0, r9, #0, 2
     fe8:	000d492c 	andeq	r4, sp, ip, lsr #18
     fec:	6f910200 	svcvs	0x00910200
     ff0:	0014f826 	andseq	pc, r4, r6, lsr #16
     ff4:	02490100 	subeq	r0, r9, #0, 2
     ff8:	0010113d 	andseq	r1, r0, sp, lsr r1
     ffc:	68910200 	ldmvs	r1, {r9}
    1000:	74657229 	strbtvc	r7, [r5], #-553	; 0xfffffdd7
    1004:	024b0100 	subeq	r0, fp, #0, 2
    1008:	00094515 	andeq	r4, r9, r5, lsl r5
    100c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1010:	51040f00 	tstpl	r4, r0, lsl #30
    1014:	24000009 	strcs	r0, [r0], #-9
    1018:	0000097b 	andeq	r0, r0, fp, ror r9
    101c:	11023901 	tstne	r2, r1, lsl #18
    1020:	00000945 	andeq	r0, r0, r5, asr #18
    1024:	01000e4c 	tsteq	r0, ip, asr #28
    1028:	00000068 	andeq	r0, r0, r8, rrx
    102c:	10439c01 	subne	r9, r3, r1, lsl #24
    1030:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1034:	01000000 	mrseq	r0, (UNDEF: 0)
    1038:	11320239 	teqne	r2, r9, lsr r2
    103c:	02000010 	andeq	r0, r0, #16
    1040:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1044:	00000395 	muleq	r0, r5, r3
    1048:	11022d01 	tstne	r2, r1, lsl #26
    104c:	00000945 	andeq	r0, r0, r5, asr #18
    1050:	01000de4 	smlatteq	r0, r4, sp, r0
    1054:	00000068 	andeq	r0, r0, r8, rrx
    1058:	106f9c01 	rsbne	r9, pc, r1, lsl #24
    105c:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1060:	01000000 	mrseq	r0, (UNDEF: 0)
    1064:	1138022d 	teqne	r8, sp, lsr #4
    1068:	02000010 	andeq	r0, r0, #16
    106c:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1070:	00000c9b 	muleq	r0, fp, ip
    1074:	11022101 	tstne	r2, r1, lsl #2
    1078:	00000945 	andeq	r0, r0, r5, asr #18
    107c:	01000d7c 	tsteq	r0, ip, ror sp
    1080:	00000068 	andeq	r0, r0, r8, rrx
    1084:	109b9c01 	addsne	r9, fp, r1, lsl #24
    1088:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    108c:	01000000 	mrseq	r0, (UNDEF: 0)
    1090:	11380221 	teqne	r8, r1, lsr #4
    1094:	02000010 	andeq	r0, r0, #16
    1098:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    109c:	00000565 	andeq	r0, r0, r5, ror #10
    10a0:	11021901 	tstne	r2, r1, lsl #18
    10a4:	00000945 	andeq	r0, r0, r5, asr #18
    10a8:	00000000 	andeq	r0, r0, r0
    10ac:	0000005c 	andeq	r0, r0, ip, asr r0
    10b0:	10d79c01 	sbcsne	r9, r7, r1, lsl #24
    10b4:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    10b8:	01000000 	mrseq	r0, (UNDEF: 0)
    10bc:	11340219 	teqne	r4, r9, lsl r2
    10c0:	02000010 	andeq	r0, r0, #16
    10c4:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    10c8:	01007465 	tsteq	r0, r5, ror #8
    10cc:	4515021b 	ldrmi	r0, [r5, #-539]	; 0xfffffde5
    10d0:	02000009 	andeq	r0, r0, #9
    10d4:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    10d8:	0000054e 	andeq	r0, r0, lr, asr #10
    10dc:	11021101 	tstne	r2, r1, lsl #2
    10e0:	00000945 	andeq	r0, r0, r5, asr #18
    10e4:	00000000 	andeq	r0, r0, r0
    10e8:	0000005c 	andeq	r0, r0, ip, asr r0
    10ec:	11139c01 	tstne	r3, r1, lsl #24
    10f0:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    10f4:	01000000 	mrseq	r0, (UNDEF: 0)
    10f8:	11340211 	teqne	r4, r1, lsl r2
    10fc:	02000010 	andeq	r0, r0, #16
    1100:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1104:	01007465 	tsteq	r0, r5, ror #8
    1108:	45150213 	ldrmi	r0, [r5, #-531]	; 0xfffffded
    110c:	02000009 	andeq	r0, r0, #9
    1110:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1114:	0000047d 	andeq	r0, r0, sp, ror r4
    1118:	11020c01 	tstne	r2, r1, lsl #24
    111c:	00000945 	andeq	r0, r0, r5, asr #18
    1120:	01000d54 	tsteq	r0, r4, asr sp
    1124:	00000028 	andeq	r0, r0, r8, lsr #32
    1128:	113f9c01 	teqne	pc, r1, lsl #24
    112c:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1130:	01000000 	mrseq	r0, (UNDEF: 0)
    1134:	1133020c 	teqne	r3, ip, lsl #4
    1138:	02000010 	andeq	r0, r0, #16
    113c:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1140:	00000892 	muleq	r0, r2, r8
    1144:	11020001 	tstne	r2, r1
    1148:	00000945 	andeq	r0, r0, r5, asr #18
    114c:	01000cec 	smlatteq	r0, ip, ip, r0
    1150:	00000068 	andeq	r0, r0, r8, rrx
    1154:	116b9c01 	cmnne	fp, r1, lsl #24
    1158:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    115c:	01000000 	mrseq	r0, (UNDEF: 0)
    1160:	11340200 	teqne	r4, r0, lsl #4
    1164:	02000010 	andeq	r0, r0, #16
    1168:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    116c:	000004e6 	andeq	r0, r0, r6, ror #9
    1170:	1101ef01 	tstne	r1, r1, lsl #30
    1174:	00000945 	andeq	r0, r0, r5, asr #18
    1178:	01000c48 	tsteq	r0, r8, asr #24
    117c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1180:	11a79c01 			; <UNDEFINED> instruction: 0x11a79c01
    1184:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1188:	01000000 	mrseq	r0, (UNDEF: 0)
    118c:	113301ef 	teqne	r3, pc, ror #3
    1190:	02000010 	andeq	r0, r0, #16
    1194:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1198:	01007465 	tsteq	r0, r5, ror #8
    119c:	451501f1 	ldrmi	r0, [r5, #-497]	; 0xfffffe0f
    11a0:	02000009 	andeq	r0, r0, #9
    11a4:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    11a8:	00000950 	andeq	r0, r0, r0, asr r9
    11ac:	1101e301 	tstne	r1, r1, lsl #6
    11b0:	00000945 	andeq	r0, r0, r5, asr #18
    11b4:	01000be0 	smlatteq	r0, r0, fp, r0
    11b8:	00000068 	andeq	r0, r0, r8, rrx
    11bc:	11d39c01 	bicsne	r9, r3, r1, lsl #24
    11c0:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    11c4:	01000000 	mrseq	r0, (UNDEF: 0)
    11c8:	113701e3 	teqne	r7, r3, ror #3
    11cc:	02000010 	andeq	r0, r0, #16
    11d0:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    11d4:	0000074a 	andeq	r0, r0, sl, asr #14
    11d8:	1101dc01 	tstne	r1, r1, lsl #24
    11dc:	00000945 	andeq	r0, r0, r5, asr #18
    11e0:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
    11e4:	00000030 	andeq	r0, r0, r0, lsr r0
    11e8:	11ff9c01 	mvnsne	r9, r1, lsl #24
    11ec:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    11f0:	01000000 	mrseq	r0, (UNDEF: 0)
    11f4:	113401dc 	teqne	r4, ip	; <illegal shifter operand>
    11f8:	02000010 	andeq	r0, r0, #16
    11fc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1200:	00000733 	andeq	r0, r0, r3, lsr r7
    1204:	1101d501 	tstne	r1, r1, lsl #10
    1208:	00000945 	andeq	r0, r0, r5, asr #18
    120c:	01000b80 	smlabbeq	r0, r0, fp, r0
    1210:	00000030 	andeq	r0, r0, r0, lsr r0
    1214:	122b9c01 	eorne	r9, fp, #256	; 0x100
    1218:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    121c:	01000000 	mrseq	r0, (UNDEF: 0)
    1220:	113401d5 	teqne	r4, r5	; <illegal shifter operand>
    1224:	02000010 	andeq	r0, r0, #16
    1228:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    122c:	000006cc 	andeq	r0, r0, ip, asr #13
    1230:	1101ce01 	tstne	r1, r1, lsl #28
    1234:	00000945 	andeq	r0, r0, r5, asr #18
    1238:	01000b50 	tsteq	r0, r0, asr fp
    123c:	00000030 	andeq	r0, r0, r0, lsr r0
    1240:	12579c01 	subsne	r9, r7, #256	; 0x100
    1244:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1248:	01000000 	mrseq	r0, (UNDEF: 0)
    124c:	113401ce 	teqne	r4, lr, asr #3
    1250:	02000010 	andeq	r0, r0, #16
    1254:	2a007491 	bcs	1e4a0 <__core1_unwind_stub-0xfe1b60>
    1258:	00000a85 	andeq	r0, r0, r5, lsl #21
    125c:	1801af01 	stmdane	r1, {r0, r8, r9, sl, fp, sp, pc}
    1260:	00000945 	andeq	r0, r0, r5, asr #18
    1264:	01000a74 	tsteq	r0, r4, ror sl
    1268:	000000dc 	ldrdeq	r0, [r0], -ip
    126c:	12a39c01 	adcne	r9, r3, #256	; 0x100
    1270:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1274:	01000000 	mrseq	r0, (UNDEF: 0)
    1278:	113c01af 	teqne	ip, pc, lsr #3
    127c:	02000010 	andeq	r0, r0, #16
    1280:	18267491 	stmdane	r6!, {r0, r4, r7, sl, ip, sp, lr}
    1284:	0100000f 	tsteq	r0, pc
    1288:	5b3001b0 	blpl	c01950 <__core1_unwind_stub-0x3fe6b0>
    128c:	02000000 	andeq	r0, r0, #0
    1290:	9e267091 	mcrls	0, 1, r7, cr6, cr1, {4}
    1294:	01000002 	tsteq	r0, r2
    1298:	5b3001b1 	blpl	c01964 <__core1_unwind_stub-0x3fe69c>
    129c:	02000000 	andeq	r0, r0, #0
    12a0:	24006c91 	strcs	r6, [r0], #-3217	; 0xfffff36f
    12a4:	000008c5 	andeq	r0, r0, r5, asr #17
    12a8:	11019401 	tstne	r1, r1, lsl #8
    12ac:	00000945 	andeq	r0, r0, r5, asr #18
    12b0:	01000a08 	tsteq	r0, r8, lsl #20
    12b4:	0000006c 	andeq	r0, r0, ip, rrx
    12b8:	12df9c01 	sbcsne	r9, pc, #256	; 0x100
    12bc:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    12c0:	01000000 	mrseq	r0, (UNDEF: 0)
    12c4:	11370194 	teqne	r7, r4	; <illegal shifter operand>
    12c8:	02000010 	andeq	r0, r0, #16
    12cc:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    12d0:	01007465 	tsteq	r0, r5, ror #8
    12d4:	45150196 	ldrmi	r0, [r5, #-406]	; 0xfffffe6a
    12d8:	02000009 	andeq	r0, r0, #9
    12dc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    12e0:	00000d3b 	andeq	r0, r0, fp, lsr sp
    12e4:	11018b01 	tstne	r1, r1, lsl #22
    12e8:	00000945 	andeq	r0, r0, r5, asr #18
    12ec:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
    12f0:	0000006c 	andeq	r0, r0, ip, rrx
    12f4:	131b9c01 	tstne	fp, #256	; 0x100
    12f8:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    12fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1300:	1136018b 	teqne	r6, fp, lsl #3
    1304:	02000010 	andeq	r0, r0, #16
    1308:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    130c:	01007465 	tsteq	r0, r5, ror #8
    1310:	4515018d 	ldrmi	r0, [r5, #-397]	; 0xfffffe73
    1314:	02000009 	andeq	r0, r0, #9
    1318:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    131c:	00000606 	andeq	r0, r0, r6, lsl #12
    1320:	11018201 	tstne	r1, r1, lsl #4
    1324:	00000945 	andeq	r0, r0, r5, asr #18
    1328:	01000930 	tsteq	r0, r0, lsr r9
    132c:	0000006c 	andeq	r0, r0, ip, rrx
    1330:	13579c01 	cmpne	r7, #256	; 0x100
    1334:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1338:	01000000 	mrseq	r0, (UNDEF: 0)
    133c:	11340182 	teqne	r4, r2, lsl #3
    1340:	02000010 	andeq	r0, r0, #16
    1344:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1348:	01007465 	tsteq	r0, r5, ror #8
    134c:	45150184 	ldrmi	r0, [r5, #-388]	; 0xfffffe7c
    1350:	02000009 	andeq	r0, r0, #9
    1354:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1358:	00000790 	muleq	r0, r0, r7
    135c:	11017901 	tstne	r1, r1, lsl #18
    1360:	00000945 	andeq	r0, r0, r5, asr #18
    1364:	010008c4 	smlabteq	r0, r4, r8, r0
    1368:	0000006c 	andeq	r0, r0, ip, rrx
    136c:	13939c01 	orrsne	r9, r3, #256	; 0x100
    1370:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1374:	01000000 	mrseq	r0, (UNDEF: 0)
    1378:	11370179 	teqne	r7, r9, ror r1
    137c:	02000010 	andeq	r0, r0, #16
    1380:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1384:	01007465 	tsteq	r0, r5, ror #8
    1388:	4515017b 	ldrmi	r0, [r5, #-379]	; 0xfffffe85
    138c:	02000009 	andeq	r0, r0, #9
    1390:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1394:	000009aa 	andeq	r0, r0, sl, lsr #19
    1398:	11017001 	tstne	r1, r1
    139c:	00000945 	andeq	r0, r0, r5, asr #18
    13a0:	01000858 	tsteq	r0, r8, asr r8
    13a4:	0000006c 	andeq	r0, r0, ip, rrx
    13a8:	13cf9c01 	bicne	r9, pc, #256	; 0x100
    13ac:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    13b0:	01000000 	mrseq	r0, (UNDEF: 0)
    13b4:	11340170 	teqne	r4, r0, ror r1
    13b8:	02000010 	andeq	r0, r0, #16
    13bc:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    13c0:	01007465 	tsteq	r0, r5, ror #8
    13c4:	45150172 	ldrmi	r0, [r5, #-370]	; 0xfffffe8e
    13c8:	02000009 	andeq	r0, r0, #9
    13cc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    13d0:	0000090e 	andeq	r0, r0, lr, lsl #18
    13d4:	11016701 	tstne	r1, r1, lsl #14
    13d8:	00000945 	andeq	r0, r0, r5, asr #18
    13dc:	010007ec 	smlatteq	r0, ip, r7, r0
    13e0:	0000006c 	andeq	r0, r0, ip, rrx
    13e4:	140b9c01 	strne	r9, [fp], #-3073	; 0xfffff3ff
    13e8:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    13ec:	01000000 	mrseq	r0, (UNDEF: 0)
    13f0:	11340167 	teqne	r4, r7, ror #2
    13f4:	02000010 	andeq	r0, r0, #16
    13f8:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    13fc:	01007465 	tsteq	r0, r5, ror #8
    1400:	45150169 	ldrmi	r0, [r5, #-361]	; 0xfffffe97
    1404:	02000009 	andeq	r0, r0, #9
    1408:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    140c:	00000208 	andeq	r0, r0, r8, lsl #4
    1410:	11015e01 	tstne	r1, r1, lsl #28
    1414:	00000945 	andeq	r0, r0, r5, asr #18
    1418:	01000784 	smlabbeq	r0, r4, r7, r0
    141c:	00000068 	andeq	r0, r0, r8, rrx
    1420:	14479c01 	strbne	r9, [r7], #-3073	; 0xfffff3ff
    1424:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1428:	01000000 	mrseq	r0, (UNDEF: 0)
    142c:	1136015e 	teqne	r6, lr, asr r1
    1430:	02000010 	andeq	r0, r0, #16
    1434:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1438:	01007465 	tsteq	r0, r5, ror #8
    143c:	45050161 	strmi	r0, [r5, #-353]	; 0xfffffe9f
    1440:	02000009 	andeq	r0, r0, #9
    1444:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1448:	000005a0 	andeq	r0, r0, r0, lsr #11
    144c:	11015601 	tstne	r1, r1, lsl #12
    1450:	00000945 	andeq	r0, r0, r5, asr #18
    1454:	01000744 	tsteq	r0, r4, asr #14
    1458:	00000040 	andeq	r0, r0, r0, asr #32
    145c:	14839c01 	strne	r9, [r3], #3073	; 0xc01
    1460:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1464:	01000000 	mrseq	r0, (UNDEF: 0)
    1468:	113a0156 	teqne	sl, r6, asr r1
    146c:	02000010 	andeq	r0, r0, #16
    1470:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1474:	01007465 	tsteq	r0, r5, ror #8
    1478:	45150158 	ldrmi	r0, [r5, #-344]	; 0xfffffea8
    147c:	02000009 	andeq	r0, r0, #9
    1480:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1484:	000007aa 	andeq	r0, r0, sl, lsr #15
    1488:	11014801 	tstne	r1, r1, lsl #16
    148c:	00000945 	andeq	r0, r0, r5, asr #18
    1490:	010006d8 	ldrdeq	r0, [r0, -r8]
    1494:	0000006c 	andeq	r0, r0, ip, rrx
    1498:	14bf9c01 	ldrtne	r9, [pc], #3073	; 14a0 <__core1_unwind_stub-0xffeb60>
    149c:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    14a0:	01000000 	mrseq	r0, (UNDEF: 0)
    14a4:	113b0148 	teqne	fp, r8, asr #2
    14a8:	02000010 	andeq	r0, r0, #16
    14ac:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    14b0:	01007465 	tsteq	r0, r5, ror #8
    14b4:	4515014a 	ldrmi	r0, [r5, #-330]	; 0xfffffeb6
    14b8:	02000009 	andeq	r0, r0, #9
    14bc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    14c0:	000003e5 	andeq	r0, r0, r5, ror #7
    14c4:	11013f01 	tstne	r1, r1, lsl #30
    14c8:	00000945 	andeq	r0, r0, r5, asr #18
    14cc:	01000698 			; <UNDEFINED> instruction: 0x01000698
    14d0:	00000040 	andeq	r0, r0, r0, asr #32
    14d4:	14fb9c01 	ldrbtne	r9, [fp], #3073	; 0xc01
    14d8:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    14dc:	01000000 	mrseq	r0, (UNDEF: 0)
    14e0:	1138013f 	teqne	r8, pc, lsr r1
    14e4:	02000010 	andeq	r0, r0, #16
    14e8:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    14ec:	01007465 	tsteq	r0, r5, ror #8
    14f0:	45150141 	ldrmi	r0, [r5, #-321]	; 0xfffffebf
    14f4:	02000009 	andeq	r0, r0, #9
    14f8:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    14fc:	00000d93 	muleq	r0, r3, sp
    1500:	11013701 	tstne	r1, r1, lsl #14
    1504:	00000945 	andeq	r0, r0, r5, asr #18
    1508:	01000658 	tsteq	r0, r8, asr r6
    150c:	00000040 	andeq	r0, r0, r0, asr #32
    1510:	15379c01 	ldrne	r9, [r7, #-3073]!	; 0xfffff3ff
    1514:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1518:	01000000 	mrseq	r0, (UNDEF: 0)
    151c:	11390137 	teqne	r9, r7, lsr r1
    1520:	02000010 	andeq	r0, r0, #16
    1524:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1528:	01007465 	tsteq	r0, r5, ror #8
    152c:	45150139 	ldrmi	r0, [r5, #-313]	; 0xfffffec7
    1530:	02000009 	andeq	r0, r0, #9
    1534:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1538:	00000b19 	andeq	r0, r0, r9, lsl fp
    153c:	11012701 	tstne	r1, r1, lsl #14
    1540:	00000945 	andeq	r0, r0, r5, asr #18
    1544:	010005ec 	smlatteq	r0, ip, r5, r0
    1548:	0000006c 	andeq	r0, r0, ip, rrx
    154c:	15739c01 	ldrbne	r9, [r3, #-3073]!	; 0xfffff3ff
    1550:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1554:	01000000 	mrseq	r0, (UNDEF: 0)
    1558:	11320127 	teqne	r2, r7, lsr #2
    155c:	02000010 	andeq	r0, r0, #16
    1560:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1564:	01007465 	tsteq	r0, r5, ror #8
    1568:	4515012c 	ldrmi	r0, [r5, #-300]	; 0xfffffed4
    156c:	02000009 	andeq	r0, r0, #9
    1570:	2b007491 	blcs	1e7bc <__core1_unwind_stub-0xfe1844>
    1574:	00000710 	andeq	r0, r0, r0, lsl r7
    1578:	4518e501 	ldrmi	lr, [r8, #-1281]	; 0xfffffaff
    157c:	cc000009 	stcgt	0, cr0, [r0], {9}
    1580:	20010003 	andcs	r0, r1, r3
    1584:	01000002 	tsteq	r0, r2
    1588:	0016429c 	mulseq	r6, ip, r2
    158c:	00182c00 	andseq	r2, r8, r0, lsl #24
    1590:	e5010000 	str	r0, [r1, #-0]
    1594:	0010113c 	andseq	r1, r0, ip, lsr r1
    1598:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    159c:	000f492c 	andeq	r4, pc, ip, lsr #18
    15a0:	30e60100 	rsccc	r0, r6, r0, lsl #2
    15a4:	0000005b 	andeq	r0, r0, fp, asr r0
    15a8:	2c609102 	stfcsp	f1, [r0], #-8
    15ac:	00000f17 	andeq	r0, r0, r7, lsl pc
    15b0:	5b30e701 	blpl	c3b1bc <__core1_unwind_stub-0x3c4e44>
    15b4:	02000000 	andeq	r0, r0, #0
    15b8:	b32c5c91 			; <UNDEFINED> instruction: 0xb32c5c91
    15bc:	0100000a 	tsteq	r0, sl
    15c0:	005b30e8 	subseq	r3, fp, r8, ror #1
    15c4:	91020000 	mrsls	r0, (UNDEF: 2)
    15c8:	0c7b2c58 	ldcleq	12, cr2, [fp], #-352	; 0xfffffea0
    15cc:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    15d0:	00164231 	andseq	r4, r6, r1, lsr r2
    15d4:	00910200 	addseq	r0, r1, r0, lsl #4
    15d8:	000a4b2c 	andeq	r4, sl, ip, lsr #22
    15dc:	31ea0100 	mvncc	r0, r0, lsl #2
    15e0:	00001642 	andeq	r1, r0, r2, asr #12
    15e4:	2c049102 	stfcsd	f1, [r4], {2}
    15e8:	00000356 	andeq	r0, r0, r6, asr r3
    15ec:	5b30eb01 	blpl	c3c1f8 <__core1_unwind_stub-0x3c3e08>
    15f0:	02000000 	andeq	r0, r0, #0
    15f4:	712c0891 			; <UNDEFINED> instruction: 0x712c0891
    15f8:	0100000a 	tsteq	r0, sl
    15fc:	164231ec 	strbne	r3, [r2], -ip, ror #3
    1600:	91020000 	mrsls	r0, (UNDEF: 2)
    1604:	0cb62c0c 	ldceq	12, cr2, [r6], #48	; 0x30
    1608:	ed010000 	stc	0, cr0, [r1, #-0]
    160c:	00005b30 	andeq	r5, r0, r0, lsr fp
    1610:	10910200 	addsne	r0, r1, r0, lsl #4
    1614:	0014f82d 	andseq	pc, r4, sp, lsr #16
    1618:	10ef0100 	rscne	r0, pc, r0, lsl #2
    161c:	00000951 	andeq	r0, r0, r1, asr r9
    1620:	2d6c9102 	stfcsp	f1, [ip, #-8]!
    1624:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1628:	5b0ef001 	blpl	3bd634 <__core1_unwind_stub-0xc429cc>
    162c:	02000000 	andeq	r0, r0, #0
    1630:	722e7491 	eorvc	r7, lr, #-1862270976	; 0x91000000
    1634:	01007465 	tsteq	r0, r5, ror #8
    1638:	094515f1 	stmdbeq	r5, {r0, r4, r5, r6, r7, r8, sl, ip}^
    163c:	91020000 	mrsls	r0, (UNDEF: 2)
    1640:	040f0070 	streq	r0, [pc], #-112	; 1648 <__core1_unwind_stub-0xffe9b8>
    1644:	0000005b 	andeq	r0, r0, fp, asr r0
    1648:	0008132f 	andeq	r1, r8, pc, lsr #6
    164c:	11ab0100 			; <UNDEFINED> instruction: 0x11ab0100
    1650:	00000945 	andeq	r0, r0, r5, asr #18
    1654:	0100023c 	tsteq	r0, ip, lsr r2
    1658:	00000190 	muleq	r0, r0, r1
    165c:	16bd9c01 	ldrtne	r9, [sp], r1, lsl #24
    1660:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    1664:	01000000 	mrseq	r0, (UNDEF: 0)
    1668:	101137ab 	andsne	r3, r1, fp, lsr #15
    166c:	91020000 	mrsls	r0, (UNDEF: 2)
    1670:	65722e5c 	ldrbvs	r2, [r2, #-3676]!	; 0xfffff1a4
    1674:	ad010074 	stcge	0, cr0, [r1, #-464]	; 0xfffffe30
    1678:	00094514 	andeq	r4, r9, r4, lsl r5
    167c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1680:	000c192d 	andeq	r1, ip, sp, lsr #18
    1684:	0dae0100 	stfeqs	f0, [lr]
    1688:	0000006e 	andeq	r0, r0, lr, rrx
    168c:	2d689102 	stfcsp	f1, [r8, #-8]!
    1690:	000014f8 	strdeq	r1, [r0], -r8
    1694:	510faf01 	tstpl	pc, r1, lsl #30
    1698:	02000009 	andeq	r0, r0, #9
    169c:	462d6091 			; <UNDEFINED> instruction: 0x462d6091
    16a0:	0100000a 	tsteq	r0, sl
    16a4:	005b0db0 	ldrheq	r0, [fp], #-208	; 0xffffff30
    16a8:	91020000 	mrsls	r0, (UNDEF: 2)
    16ac:	0a412d64 	beq	104cc44 <__end__+0x30c24>
    16b0:	b5010000 	strlt	r0, [r1, #-0]
    16b4:	00005b0d 	andeq	r5, r0, sp, lsl #22
    16b8:	70910200 	addsvc	r0, r1, r0, lsl #4
    16bc:	0ce12f00 	stcleq	15, cr2, [r1]
    16c0:	85010000 	strhi	r0, [r1, #-0]
    16c4:	00094511 	andeq	r4, r9, r1, lsl r5
    16c8:	0000e400 	andeq	lr, r0, r0, lsl #8
    16cc:	00015801 	andeq	r5, r1, r1, lsl #16
    16d0:	329c0100 	addscc	r0, ip, #0, 2
    16d4:	2c000017 	stccs	0, cr0, [r0], {23}
    16d8:	00000018 	andeq	r0, r0, r8, lsl r0
    16dc:	11378501 	teqne	r7, r1, lsl #10
    16e0:	02000010 	andeq	r0, r0, #16
    16e4:	722e5c91 	eorvc	r5, lr, #37120	; 0x9100
    16e8:	01007465 	tsteq	r0, r5, ror #8
    16ec:	09451487 	stmdbeq	r5, {r0, r1, r2, r7, sl, ip}^
    16f0:	91020000 	mrsls	r0, (UNDEF: 2)
    16f4:	0c192d74 	ldceq	13, cr2, [r9], {116}	; 0x74
    16f8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    16fc:	00006e0d 	andeq	r6, r0, sp, lsl #28
    1700:	68910200 	ldmvs	r1, {r9}
    1704:	0014f82d 	andseq	pc, r4, sp, lsr #16
    1708:	0f890100 	svceq	0x00890100
    170c:	00000951 	andeq	r0, r0, r1, asr r9
    1710:	2d609102 	stfcsp	f1, [r0, #-8]!
    1714:	00000a46 	andeq	r0, r0, r6, asr #20
    1718:	5b0d8a01 	blpl	363f24 <__core1_unwind_stub-0xc9c0dc>
    171c:	02000000 	andeq	r0, r0, #0
    1720:	412d6491 			; <UNDEFINED> instruction: 0x412d6491
    1724:	0100000a 	tsteq	r0, sl
    1728:	005b0d8e 	subseq	r0, fp, lr, lsl #27
    172c:	91020000 	mrsls	r0, (UNDEF: 2)
    1730:	8d300070 	ldchi	0, cr0, [r0, #-448]!	; 0xfffffe40
    1734:	01000001 	tsteq	r0, r1
    1738:	09451178 	stmdbeq	r5, {r3, r4, r5, r6, r8, ip}^
    173c:	00900000 	addseq	r0, r0, r0
    1740:	00540100 	subseq	r0, r4, r0, lsl #2
    1744:	9c010000 	stcls	0, cr0, [r1], {-0}
    1748:	0000175c 	andeq	r1, r0, ip, asr r7
    174c:	0000182c 	andeq	r1, r0, ip, lsr #16
    1750:	3b780100 	blcc	1e01b58 <__end__+0xde5b38>
    1754:	00001011 	andeq	r1, r0, r1, lsl r0
    1758:	00749102 	rsbseq	r9, r4, r2, lsl #2
    175c:	00085130 	andeq	r5, r8, r0, lsr r1
    1760:	116e0100 	cmnne	lr, r0, lsl #2
    1764:	00000945 	andeq	r0, r0, r5, asr #18
    1768:	0100003c 	tsteq	r0, ip, lsr r0
    176c:	00000054 	andeq	r0, r0, r4, asr r0
    1770:	17869c01 	strne	r9, [r6, r1, lsl #24]
    1774:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    1778:	01000000 	mrseq	r0, (UNDEF: 0)
    177c:	1011446e 	andsne	r4, r1, lr, ror #8
    1780:	91020000 	mrsls	r0, (UNDEF: 2)
    1784:	fb300074 	blx	c0195e <__core1_unwind_stub-0x3fe6a2>
    1788:	0100000c 	tsteq	r0, ip
    178c:	09451168 	stmdbeq	r5, {r3, r5, r6, r8, ip}^
    1790:	00040000 	andeq	r0, r4, r0
    1794:	00380100 	eorseq	r0, r8, r0, lsl #2
    1798:	9c010000 	stcls	0, cr0, [r1], {-0}
    179c:	000017b0 			; <UNDEFINED> instruction: 0x000017b0
    17a0:	0000182c 	andeq	r1, r0, ip, lsr #16
    17a4:	33680100 	cmncc	r8, #0, 2
    17a8:	00001011 	andeq	r1, r0, r1, lsl r0
    17ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17b0:	0009c131 	andeq	ip, r9, r1, lsr r1
    17b4:	11520100 	cmpne	r2, r0, lsl #2
    17b8:	00000945 	andeq	r0, r0, r5, asr #18
    17bc:	00000000 	andeq	r0, r0, r0
    17c0:	00000098 	muleq	r0, r8, r0
    17c4:	63329c01 	teqvs	r2, #256	; 0x100
    17c8:	01006b6c 	tsteq	r0, ip, ror #22
    17cc:	0d493452 	cfstrdeq	mvd3, [r9, #-328]	; 0xfffffeb8
    17d0:	91020000 	mrsls	r0, (UNDEF: 2)
    17d4:	14f82c77 	ldrbtne	r2, [r8], #3191	; 0xc77
    17d8:	53010000 	movwpl	r0, #4096	; 0x1000
    17dc:	00095135 	andeq	r5, r9, r5, lsr r1
    17e0:	70910200 	addsvc	r0, r1, r0, lsl #4
    17e4:	11000000 	mrsne	r0, (UNDEF: 0)
    17e8:	00040000 	andeq	r0, r4, r0
    17ec:	00000338 	andeq	r0, r0, r8, lsr r3
    17f0:	003a0104 	eorseq	r0, sl, r4, lsl #2
    17f4:	b80c0000 	stmdalt	ip, {}	; <UNPREDICTABLE>
    17f8:	d0000013 	andle	r0, r0, r3, lsl r0
    17fc:	6000000b 	andvs	r0, r0, fp
    1800:	00000001 	andeq	r0, r0, r1
    1804:	81000000 	mrshi	r0, (UNDEF: 0)
    1808:	02000009 	andeq	r0, r0, #9
    180c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1810:	fa030074 	blx	c19e8 <__core1_unwind_stub-0xf3e618>
    1814:	0200002f 	andeq	r0, r0, #47	; 0x2f
    1818:	003817d1 	ldrsbteq	r1, [r8], -r1
    181c:	04040000 	streq	r0, [r4], #-0
    1820:	000b4507 	andeq	r4, fp, r7, lsl #10
    1824:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    1828:	00000805 	andeq	r0, r0, r5, lsl #16
    182c:	9d040804 	stcls	8, cr0, [r4, #-16]
    1830:	0400000a 	streq	r0, [r0], #-10
    1834:	04020601 	streq	r0, [r2], #-1537	; 0xfffff9ff
    1838:	02040000 	andeq	r0, r4, #0
    183c:	000d6105 	andeq	r6, sp, r5, lsl #2
    1840:	2ec20300 	cdpcs	3, 12, cr0, cr2, cr0, {0}
    1844:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    1848:	00006718 	andeq	r6, r0, r8, lsl r7
    184c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1850:	0000080a 	andeq	r0, r0, sl, lsl #16
    1854:	00080104 	andeq	r0, r8, r4, lsl #2
    1858:	04000004 	streq	r0, [r0], #-4
    185c:	0e9e0702 	cdpeq	7, 9, cr0, cr14, cr2, {0}
    1860:	43030000 	movwmi	r0, #12288	; 0x3000
    1864:	03000030 	movweq	r0, #48	; 0x30
    1868:	00881934 	addeq	r1, r8, r4, lsr r9
    186c:	04040000 	streq	r0, [r4], #-0
    1870:	000b4007 	andeq	r4, fp, r7
    1874:	07080400 	streq	r0, [r8, -r0, lsl #8]
    1878:	00000b3b 	andeq	r0, r0, fp, lsr fp
    187c:	0004d603 	andeq	sp, r4, r3, lsl #12
    1880:	1d410400 	cfstrdne	mvd0, [r1, #-0]
    1884:	0000005b 	andeq	r0, r0, fp, asr r0
    1888:	00094503 	andeq	r4, r9, r3, lsl #10
    188c:	122a0500 	eorne	r0, sl, #0, 10
    1890:	0000007c 	andeq	r0, r0, ip, ror r0
    1894:	000dee05 	andeq	lr, sp, r5, lsl #28
    1898:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    189c:	05000000 	streq	r0, [r0, #-0]
    18a0:	017b0e8b 	cmneq	fp, fp, lsl #29
    18a4:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
    18a8:	00000005 	andeq	r0, r0, r5
    18ac:	000ccc06 	andeq	ip, ip, r6, lsl #24
    18b0:	f7060100 			; <UNDEFINED> instruction: 0xf7060100
    18b4:	02000008 	andeq	r0, r0, #8
    18b8:	000acc06 	andeq	ip, sl, r6, lsl #24
    18bc:	7c060300 	stcvc	3, cr0, [r6], {-0}
    18c0:	04000005 	streq	r0, [r0], #-5
    18c4:	000c8f06 	andeq	r8, ip, r6, lsl #30
    18c8:	a5060500 	strge	r0, [r6, #-1280]	; 0xfffffb00
    18cc:	0600000f 	streq	r0, [r0], -pc
    18d0:	00011806 	andeq	r1, r1, r6, lsl #16
    18d4:	6d060700 	stcvs	7, cr0, [r6, #-0]
    18d8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    18dc:	0007c806 	andeq	ip, r7, r6, lsl #16
    18e0:	7c060900 			; <UNDEFINED> instruction: 0x7c060900
    18e4:	0a00000e 	beq	1924 <__core1_unwind_stub-0xffe6dc>
    18e8:	00027106 	andeq	r7, r2, r6, lsl #2
    18ec:	ec060b00 			; <UNDEFINED> instruction: 0xec060b00
    18f0:	0c00000a 	stceq	0, cr0, [r0], {10}
    18f4:	00027f06 	andeq	r7, r2, r6, lsl #30
    18f8:	90060d00 	andls	r0, r6, r0, lsl #26
    18fc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1900:	0005d406 	andeq	sp, r5, r6, lsl #8
    1904:	bd060f00 	stclt	15, cr0, [r6, #-0]
    1908:	10000003 	andne	r0, r0, r3
    190c:	000e5906 	andeq	r5, lr, r6, lsl #18
    1910:	7d061100 	stfvcs	f1, [r6, #-0]
    1914:	1200000f 	andne	r0, r0, #15
    1918:	000b5206 	andeq	r5, fp, r6, lsl #4
    191c:	11061300 	mrsne	r1, LR_und
    1920:	1400000d 	strne	r0, [r0], #-13
    1924:	000d1f06 	andeq	r1, sp, r6, lsl #30
    1928:	2d061500 	cfstr32cs	mvfx1, [r6, #-0]
    192c:	1600000d 	strne	r0, [r0], -sp
    1930:	00037006 	andeq	r7, r3, r6
    1934:	f4061700 	vst1.8	{d1}, [r6], r0
    1938:	18000005 	stmdane	r0, {r0, r2}
    193c:	000dc606 	andeq	ip, sp, r6, lsl #12
    1940:	fc061900 	stc2	9, cr1, [r6], {-0}	; <UNPREDICTABLE>
    1944:	1a000006 	bne	1964 <__core1_unwind_stub-0xffe69c>
    1948:	000e9106 	andeq	r9, lr, r6, lsl #2
    194c:	df061b00 	svcle	0x00061b00
    1950:	1c000008 	stcne	0, cr0, [r0], {8}
    1954:	000c2b06 	andeq	r2, ip, r6, lsl #22
    1958:	60061d00 	andvs	r1, r6, r0, lsl #26
    195c:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    1960:	1add0500 	bne	ff742d68 <__shm_end__+0xbf742d68>
    1964:	02070000 	andeq	r0, r7, #0
    1968:	00000075 	andeq	r0, r0, r5, ror r0
    196c:	a10e4d06 	tstge	lr, r6, lsl #26
    1970:	06000001 	streq	r0, [r0], -r1
    1974:	000015af 	andeq	r1, r0, pc, lsr #11
    1978:	15ce0600 	strbne	r0, [lr, #1536]	; 0x600
    197c:	07010000 	streq	r0, [r1, -r0]
    1980:	000013d9 	ldrdeq	r1, [r0], -r9
    1984:	03000100 	movweq	r0, #256	; 0x100
    1988:	00001b60 	andeq	r1, r0, r0, ror #22
    198c:	7b015f06 	blvc	595ac <__core1_unwind_stub-0xfa6a54>
    1990:	08000001 	stmdaeq	r0, {r0}
    1994:	00001b8a 	andeq	r1, r0, sl, lsl #23
    1998:	10660614 	rsbne	r0, r6, r4, lsl r6
    199c:	000001fc 	strdeq	r0, [r0], -ip
    19a0:	00072109 	andeq	r2, r7, r9, lsl #2
    19a4:	18680600 	stmdane	r8!, {r9, sl}^
    19a8:	000001a1 	andeq	r0, r0, r1, lsr #3
    19ac:	28390900 	ldmdacs	r9!, {r8, fp}
    19b0:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    19b4:	0001fc18 	andeq	pc, r1, r8, lsl ip	; <UNPREDICTABLE>
    19b8:	f2090400 	vshl.s8	d0, d0, d9
    19bc:	06000014 			; <UNDEFINED> instruction: 0x06000014
    19c0:	00a2186a 	adceq	r1, r2, sl, ror #16
    19c4:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    19c8:	00002b13 	andeq	r2, r0, r3, lsl fp
    19cc:	7c186b06 			; <UNDEFINED> instruction: 0x7c186b06
    19d0:	0c000000 	stceq	0, cr0, [r0], {-0}
    19d4:	7263660a 	rsbvc	r6, r3, #10485760	; 0xa00000
    19d8:	186c0600 	stmdane	ip!, {r9, sl}^
    19dc:	0000007c 	andeq	r0, r0, ip, ror r0
    19e0:	040b0010 	streq	r0, [fp], #-16
    19e4:	001b9d03 	andseq	r9, fp, r3, lsl #26
    19e8:	016e0600 	cmneq	lr, r0, lsl #12
    19ec:	000001ad 	andeq	r0, r0, sp, lsr #3
    19f0:	00187e05 	andseq	r7, r8, r5, lsl #28
    19f4:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    19f8:	06000000 	streq	r0, [r0], -r0
    19fc:	02350eff 	eorseq	r0, r5, #4080	; 0xff0
    1a00:	43060000 	movwmi	r0, #24576	; 0x6000
    1a04:	0000001a 	andeq	r0, r0, sl, lsl r0
    1a08:	00135706 	andseq	r5, r3, r6, lsl #14
    1a0c:	c0060100 	andgt	r0, r6, r0, lsl #2
    1a10:	02000019 	andeq	r0, r0, #25
    1a14:	001b0c06 	andseq	r0, fp, r6, lsl #24
    1a18:	0c000300 	stceq	3, cr0, [r0], {-0}
    1a1c:	00001450 	andeq	r1, r0, r0, asr r4
    1a20:	01011806 	tsteq	r1, r6, lsl #16
    1a24:	0000020a 	andeq	r0, r0, sl, lsl #4
    1a28:	0016940d 	andseq	r9, r6, sp, lsl #8
    1a2c:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    1a30:	06000000 	streq	r0, [r0], -r0
    1a34:	6e0e011e 	mcrvs	1, 0, r0, cr14, cr14, {0}
    1a38:	06000002 	streq	r0, [r0], -r2
    1a3c:	00001006 	andeq	r1, r0, r6
    1a40:	108e0600 	addne	r0, lr, r0, lsl #12
    1a44:	06010000 	streq	r0, [r1], -r0
    1a48:	00001132 	andeq	r1, r0, r2, lsr r1
    1a4c:	13150602 	tstne	r5, #2097152	; 0x200000
    1a50:	00030000 	andeq	r0, r3, r0
    1a54:	00170b0c 	andseq	r0, r7, ip, lsl #22
    1a58:	01360600 	teqeq	r6, r0, lsl #12
    1a5c:	00024201 	andeq	r4, r2, r1, lsl #4
    1a60:	17720d00 	ldrbne	r0, [r2, -r0, lsl #26]!
    1a64:	04070000 	streq	r0, [r7], #-0
    1a68:	00000038 	andeq	r0, r0, r8, lsr r0
    1a6c:	0e028f06 	cdpeq	15, 0, cr8, cr2, cr6, {0}
    1a70:	00000313 	andeq	r0, r0, r3, lsl r3
    1a74:	0012ff06 	andseq	pc, r2, r6, lsl #30
    1a78:	b0063200 	andlt	r3, r6, r0, lsl #4
    1a7c:	4b000016 	blmi	1adc <__core1_unwind_stub-0xffe524>
    1a80:	001b7306 	andseq	r7, fp, r6, lsl #6
    1a84:	32079600 	andcc	r9, r7, #0, 12
    1a88:	2c00001b 	stccs	0, cr0, [r0], {27}
    1a8c:	163a0701 	ldrtne	r0, [sl], -r1, lsl #14
    1a90:	02580000 	subseq	r0, r8, #0
    1a94:	0019e407 	andseq	lr, r9, r7, lsl #8
    1a98:	07038400 	streq	r8, [r3, -r0, lsl #8]
    1a9c:	000015ed 	andeq	r1, r0, sp, ror #11
    1aa0:	c70704b0 			; <UNDEFINED> instruction: 0xc70704b0
    1aa4:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    1aa8:	17430707 	strbne	r0, [r3, -r7, lsl #14]
    1aac:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    1ab0:	0010b507 	andseq	fp, r0, r7, lsl #10
    1ab4:	070e1000 	streq	r1, [lr, -r0]
    1ab8:	000017db 	ldrdeq	r1, [r0], -fp
    1abc:	610712c0 	smlabtvs	r7, r0, r2, r1
    1ac0:	20000015 	andcs	r0, r0, r5, lsl r0
    1ac4:	1579071c 	ldrbne	r0, [r9, #-1820]!	; 0xfffff8e4
    1ac8:	25800000 	strcs	r0, [r0]
    1acc:	00104007 	andseq	r4, r0, r7
    1ad0:	07384000 	ldreq	r4, [r8, -r0]!
    1ad4:	00001a6a 	andeq	r1, r0, sl, ror #20
    1ad8:	65074b00 	strvs	r4, [r7, #-2816]	; 0xfffff500
    1adc:	80000018 	andhi	r0, r0, r8, lsl r0
    1ae0:	1a830770 	bne	fe0c38a8 <__shm_end__+0xbe0c38a8>
    1ae4:	96000000 	strls	r0, [r0], -r0
    1ae8:	001ab207 	andseq	fp, sl, r7, lsl #4
    1aec:	0ee10000 	cdpeq	0, 14, cr0, cr1, cr0, {0}
    1af0:	00001964 	andeq	r1, r0, r4, ror #18
    1af4:	0001c200 	andeq	ip, r1, r0, lsl #4
    1af8:	1b490d00 	blne	1244f00 <__end__+0x228ee0>
    1afc:	01070000 	mrseq	r0, (UNDEF: 7)
    1b00:	0000006e 	andeq	r0, r0, lr, rrx
    1b04:	0e031106 	adfeqs	f1, f3, f6
    1b08:	0000034b 	andeq	r0, r0, fp, asr #6
    1b0c:	00192606 	andseq	r2, r9, r6, lsl #12
    1b10:	87060600 	strhi	r0, [r6, -r0, lsl #12]
    1b14:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    1b18:	001bf706 	andseq	pc, fp, r6, lsl #14
    1b1c:	40060c00 	andmi	r0, r6, r0, lsl #24
    1b20:	02000019 	andeq	r0, r0, #25
    1b24:	00120506 	andseq	r0, r2, r6, lsl #10
    1b28:	05060000 	streq	r0, [r6, #-0]
    1b2c:	01000016 	tsteq	r0, r6, lsl r0
    1b30:	1bb00c00 	blne	fec04b38 <__shm_end__+0xbec04b38>
    1b34:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1b38:	03130103 	tsteq	r3, #-1073741824	; 0xc0000000
    1b3c:	d70d0000 	strle	r0, [sp, -r0]
    1b40:	07000014 	smladeq	r0, r4, r0, r0
    1b44:	00006e01 	andeq	r6, r0, r1, lsl #28
    1b48:	053c0600 	ldreq	r0, [ip, #-1536]!	; 0xfffffa00
    1b4c:	0003840e 	andeq	r8, r3, lr, lsl #8
    1b50:	13fc0600 	mvnsne	r0, #0, 12
    1b54:	06000000 	streq	r0, [r0], -r0
    1b58:	00001411 	andeq	r1, r0, r1, lsl r4
    1b5c:	14260601 	strtne	r0, [r6], #-1537	; 0xfffff9ff
    1b60:	06020000 	streq	r0, [r2], -r0
    1b64:	0000143b 	andeq	r1, r0, fp, lsr r4
    1b68:	190c0003 	stmdbne	ip, {r0, r1}
    1b6c:	06000015 			; <UNDEFINED> instruction: 0x06000015
    1b70:	58010552 	stmdapl	r1, {r1, r4, r6, r8, sl}
    1b74:	0d000003 	stceq	0, cr0, [r0, #-12]
    1b78:	00001276 	andeq	r1, r0, r6, ror r2
    1b7c:	006e0107 	rsbeq	r0, lr, r7, lsl #2
    1b80:	57060000 	strpl	r0, [r6, -r0]
    1b84:	03b10e05 			; <UNDEFINED> instruction: 0x03b10e05
    1b88:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
    1b8c:	00000011 	andeq	r0, r0, r1, lsl r0
    1b90:	00111d06 	andseq	r1, r1, r6, lsl #26
    1b94:	0c000100 	stfeqs	f0, [r0], {-0}
    1b98:	000012ea 	andeq	r1, r0, sl, ror #5
    1b9c:	01056406 	tsteq	r5, r6, lsl #8
    1ba0:	00000391 	muleq	r0, r1, r3
    1ba4:	001a300d 	andseq	r3, sl, sp
    1ba8:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    1bac:	06000000 	streq	r0, [r0], -r0
    1bb0:	e40e0569 	str	r0, [lr], #-1385	; 0xfffffa97
    1bb4:	06000003 	streq	r0, [r0], -r3
    1bb8:	00001591 	muleq	r0, r1, r5
    1bbc:	16640600 	strbtne	r0, [r4], -r0, lsl #12
    1bc0:	06010000 	streq	r0, [r1], -r0
    1bc4:	00001a1a 	andeq	r1, r0, sl, lsl sl
    1bc8:	f90c0002 			; <UNDEFINED> instruction: 0xf90c0002
    1bcc:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    1bd0:	be01057c 	cfrshl64lt	mvdx1, mvdx12, r0
    1bd4:	0f000003 	svceq	0x00000003
    1bd8:	00001679 	andeq	r1, r0, r9, ror r6
    1bdc:	1104ad01 	tstne	r4, r1, lsl #26
    1be0:	00000096 	muleq	r0, r6, r0
    1be4:	00000000 	andeq	r0, r0, r0
    1be8:	0000006c 	andeq	r0, r0, ip, rrx
    1bec:	042d9c01 	strteq	r9, [sp], #-3073	; 0xfffff3ff
    1bf0:	6b100000 	blvs	401bf8 <__core1_unwind_stub-0xbfe408>
    1bf4:	0100000b 	tsteq	r0, fp
    1bf8:	2d4104ad 	cfstrdcs	mvd0, [r1, #-692]	; 0xfffffd4c
    1bfc:	02000004 	andeq	r0, r0, #4
    1c00:	b9107491 	ldmdblt	r0, {r0, r4, r7, sl, ip, sp, lr}
    1c04:	01000027 	tsteq	r0, r7, lsr #32
    1c08:	333604ae 	teqcc	r6, #-1375731712	; 0xae000000
    1c0c:	02000004 	andeq	r0, r0, #4
    1c10:	11007091 	swpne	r7, r1, [r0]
    1c14:	0001fe04 	andeq	pc, r1, r4, lsl #28
    1c18:	7c041100 	stfvcs	f1, [r4], {-0}
    1c1c:	12000000 	andne	r0, r0, #0
    1c20:	0000189a 	muleq	r0, sl, r8
    1c24:	1104a701 	tstne	r4, r1, lsl #14
    1c28:	00000096 	muleq	r0, r6, r0
    1c2c:	00000000 	andeq	r0, r0, r0
    1c30:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c34:	04659c01 	strbteq	r9, [r5], #-3073	; 0xfffff3ff
    1c38:	6b100000 	blvs	401c40 <__core1_unwind_stub-0xbfe3c0>
    1c3c:	0100000b 	tsteq	r0, fp
    1c40:	2d4204a7 	cfstrdcs	mvd0, [r2, #-668]	; 0xfffffd64
    1c44:	02000004 	andeq	r0, r0, #4
    1c48:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1c4c:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
    1c50:	1104a101 	tstne	r4, r1, lsl #2
    1c54:	00000096 	muleq	r0, r6, r0
    1c58:	01001d80 	smlabbeq	r0, r0, sp, r1
    1c5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c60:	04919c01 	ldreq	r9, [r1], #3073	; 0xc01
    1c64:	6b100000 	blvs	401c6c <__core1_unwind_stub-0xbfe394>
    1c68:	0100000b 	tsteq	r0, fp
    1c6c:	2d4104a1 	cfstrdcs	mvd0, [r1, #-644]	; 0xfffffd7c
    1c70:	02000004 	andeq	r0, r0, #4
    1c74:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1c78:	000014a5 	andeq	r1, r0, r5, lsr #9
    1c7c:	11049b01 	tstne	r4, r1, lsl #22
    1c80:	00000096 	muleq	r0, r6, r0
    1c84:	00000000 	andeq	r0, r0, r0
    1c88:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c8c:	04bd9c01 	ldrteq	r9, [sp], #3073	; 0xc01
    1c90:	6b100000 	blvs	401c98 <__core1_unwind_stub-0xbfe368>
    1c94:	0100000b 	tsteq	r0, fp
    1c98:	2d42049b 	cfstrdcs	mvd0, [r2, #-620]	; 0xfffffd94
    1c9c:	02000004 	andeq	r0, r0, #4
    1ca0:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1ca4:	0000152e 	andeq	r1, r0, lr, lsr #10
    1ca8:	11049501 	tstne	r4, r1, lsl #10
    1cac:	00000096 	muleq	r0, r6, r0
    1cb0:	01001d54 	tsteq	r0, r4, asr sp
    1cb4:	0000002c 	andeq	r0, r0, ip, lsr #32
    1cb8:	04e99c01 	strbteq	r9, [r9], #3073	; 0xc01
    1cbc:	6b100000 	blvs	401cc4 <__core1_unwind_stub-0xbfe33c>
    1cc0:	0100000b 	tsteq	r0, fp
    1cc4:	2d410495 	cfstrdcs	mvd0, [r1, #-596]	; 0xfffffdac
    1cc8:	02000004 	andeq	r0, r0, #4
    1ccc:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1cd0:	0000139b 	muleq	r0, fp, r3
    1cd4:	11048f01 	tstne	r4, r1, lsl #30
    1cd8:	00000096 	muleq	r0, r6, r0
    1cdc:	00000000 	andeq	r0, r0, r0
    1ce0:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ce4:	05159c01 	ldreq	r9, [r5, #-3073]	; 0xfffff3ff
    1ce8:	6b100000 	blvs	401cf0 <__core1_unwind_stub-0xbfe310>
    1cec:	0100000b 	tsteq	r0, fp
    1cf0:	2d43048f 	cfstrdcs	mvd0, [r3, #-572]	; 0xfffffdc4
    1cf4:	02000004 	andeq	r0, r0, #4
    1cf8:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1cfc:	0000123c 	andeq	r1, r0, ip, lsr r2
    1d00:	11048901 	tstne	r4, r1, lsl #18
    1d04:	00000096 	muleq	r0, r6, r0
    1d08:	00000000 	andeq	r0, r0, r0
    1d0c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d10:	05419c01 	strbeq	r9, [r1, #-3073]	; 0xfffff3ff
    1d14:	6b100000 	blvs	401d1c <__core1_unwind_stub-0xbfe2e4>
    1d18:	0100000b 	tsteq	r0, fp
    1d1c:	2d420489 	cfstrdcs	mvd0, [r2, #-548]	; 0xfffffddc
    1d20:	02000004 	andeq	r0, r0, #4
    1d24:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1d28:	0000137e 	andeq	r1, r0, lr, ror r3
    1d2c:	11048301 	tstne	r4, r1, lsl #6
    1d30:	00000096 	muleq	r0, r6, r0
    1d34:	00000000 	andeq	r0, r0, r0
    1d38:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d3c:	056d9c01 	strbeq	r9, [sp, #-3073]!	; 0xfffff3ff
    1d40:	6b100000 	blvs	401d48 <__core1_unwind_stub-0xbfe2b8>
    1d44:	0100000b 	tsteq	r0, fp
    1d48:	2d430483 	cfstrdcs	mvd0, [r3, #-524]	; 0xfffffdf4
    1d4c:	02000004 	andeq	r0, r0, #4
    1d50:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1d54:	00001220 	andeq	r1, r0, r0, lsr #4
    1d58:	11047d01 	tstne	r4, r1, lsl #26
    1d5c:	00000096 	muleq	r0, r6, r0
    1d60:	00000000 	andeq	r0, r0, r0
    1d64:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d68:	05999c01 	ldreq	r9, [r9, #3073]	; 0xc01
    1d6c:	6b100000 	blvs	401d74 <__core1_unwind_stub-0xbfe28c>
    1d70:	0100000b 	tsteq	r0, fp
    1d74:	2d42047d 	cfstrdcs	mvd0, [r2, #-500]	; 0xfffffe0c
    1d78:	02000004 	andeq	r0, r0, #4
    1d7c:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1d80:	00001824 	andeq	r1, r0, r4, lsr #16
    1d84:	11047701 	tstne	r4, r1, lsl #14
    1d88:	00000096 	muleq	r0, r6, r0
    1d8c:	00000000 	andeq	r0, r0, r0
    1d90:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d94:	05c59c01 	strbeq	r9, [r5, #3073]	; 0xc01
    1d98:	6b100000 	blvs	401da0 <__core1_unwind_stub-0xbfe260>
    1d9c:	0100000b 	tsteq	r0, fp
    1da0:	2d410477 	cfstrdcs	mvd0, [r1, #-476]	; 0xfffffe24
    1da4:	02000004 	andeq	r0, r0, #4
    1da8:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1dac:	00001026 	andeq	r1, r0, r6, lsr #32
    1db0:	11046b01 	tstne	r4, r1, lsl #22
    1db4:	00000096 	muleq	r0, r6, r0
    1db8:	00000000 	andeq	r0, r0, r0
    1dbc:	00000044 	andeq	r0, r0, r4, asr #32
    1dc0:	05f19c01 	ldrbeq	r9, [r1, #3073]!	; 0xc01
    1dc4:	6b100000 	blvs	401dcc <__core1_unwind_stub-0xbfe234>
    1dc8:	0100000b 	tsteq	r0, fp
    1dcc:	2d40046b 	cfstrdcs	mvd0, [r0, #-428]	; 0xfffffe54
    1dd0:	02000004 	andeq	r0, r0, #4
    1dd4:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1dd8:	00001184 	andeq	r1, r0, r4, lsl #3
    1ddc:	11046501 	tstne	r4, r1, lsl #10
    1de0:	00000096 	muleq	r0, r6, r0
    1de4:	00000000 	andeq	r0, r0, r0
    1de8:	0000002c 	andeq	r0, r0, ip, lsr #32
    1dec:	061d9c01 	ldreq	r9, [sp], -r1, lsl #24
    1df0:	6b100000 	blvs	401df8 <__core1_unwind_stub-0xbfe208>
    1df4:	0100000b 	tsteq	r0, fp
    1df8:	2d440465 	cfstrdcs	mvd0, [r4, #-404]	; 0xfffffe6c
    1dfc:	02000004 	andeq	r0, r0, #4
    1e00:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1e04:	0000146c 	andeq	r1, r0, ip, ror #8
    1e08:	11044e01 	tstne	r4, r1, lsl #28
    1e0c:	00000096 	muleq	r0, r6, r0
    1e10:	00000000 	andeq	r0, r0, r0
    1e14:	00000080 	andeq	r0, r0, r0, lsl #1
    1e18:	06639c01 	strbteq	r9, [r3], -r1, lsl #24
    1e1c:	6b100000 	blvs	401e24 <__core1_unwind_stub-0xbfe1dc>
    1e20:	0100000b 	tsteq	r0, fp
    1e24:	2d43044e 	cfstrdcs	mvd0, [r3, #-312]	; 0xfffffec8
    1e28:	02000004 	andeq	r0, r0, #4
    1e2c:	00136c91 	mulseq	r3, r1, ip
    1e30:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1e34:	14000000 	strne	r0, [r0], #-0
    1e38:	00727063 	rsbseq	r7, r2, r3, rrx
    1e3c:	12045a01 	andne	r5, r4, #4096	; 0x1000
    1e40:	0000007c 	andeq	r0, r0, ip, ror r0
    1e44:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e48:	18b61500 	ldmne	r6!, {r8, sl, ip}
    1e4c:	3d010000 	stccc	0, cr0, [r1, #-0]
    1e50:	00961804 	addseq	r1, r6, r4, lsl #16
    1e54:	00000000 	andeq	r0, r0, r0
    1e58:	00840000 	addeq	r0, r4, r0
    1e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e60:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1e64:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1e68:	043d0100 	ldrteq	r0, [sp], #-256	; 0xffffff00
    1e6c:	00042d4b 	andeq	r2, r4, fp, asr #26
    1e70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e74:	0019fb10 	andseq	pc, r9, r0, lsl fp	; <UNPREDICTABLE>
    1e78:	043d0100 	ldrteq	r0, [sp], #-256	; 0xffffff00
    1e7c:	00007c5c 	andeq	r7, r0, ip, asr ip
    1e80:	70910200 	addsvc	r0, r1, r0, lsl #4
    1e84:	19081500 	stmdbne	r8, {r8, sl, ip}
    1e88:	2b010000 	blcs	41e90 <__core1_unwind_stub-0xfbe170>
    1e8c:	00961804 	addseq	r1, r6, r4, lsl #16
    1e90:	1cd40000 	ldclne	0, cr0, [r4], {0}
    1e94:	00800100 	addeq	r0, r0, r0, lsl #2
    1e98:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e9c:	000006db 	ldrdeq	r0, [r0], -fp
    1ea0:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1ea4:	042b0100 	strteq	r0, [fp], #-256	; 0xffffff00
    1ea8:	00042d4b 	andeq	r2, r4, fp, asr #26
    1eac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1eb0:	0019fb10 	andseq	pc, r9, r0, lsl fp	; <UNPREDICTABLE>
    1eb4:	042c0100 	strteq	r0, [ip], #-256	; 0xffffff00
    1eb8:	00007c3f 	andeq	r7, r0, pc, lsr ip
    1ebc:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ec0:	11a20f00 			; <UNDEFINED> instruction: 0x11a20f00
    1ec4:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1ec8:	00961104 	addseq	r1, r6, r4, lsl #2
    1ecc:	00000000 	andeq	r0, r0, r0
    1ed0:	006c0000 	rsbeq	r0, ip, r0
    1ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ed8:	00000717 	andeq	r0, r0, r7, lsl r7
    1edc:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1ee0:	04190100 	ldreq	r0, [r9], #-256	; 0xffffff00
    1ee4:	00042d40 	andeq	r2, r4, r0, asr #26
    1ee8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1eec:	0027b910 	eoreq	fp, r7, r0, lsl r9
    1ef0:	041a0100 	ldreq	r0, [sl], #-256	; 0xffffff00
    1ef4:	00043336 	andeq	r3, r4, r6, lsr r3
    1ef8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1efc:	12b20f00 	adcsne	r0, r2, #0, 30
    1f00:	06010000 	streq	r0, [r1], -r0
    1f04:	00961104 	addseq	r1, r6, r4, lsl #2
    1f08:	00000000 	andeq	r0, r0, r0
    1f0c:	00780000 	rsbseq	r0, r8, r0
    1f10:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f14:	00000743 	andeq	r0, r0, r3, asr #14
    1f18:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1f1c:	04060100 	streq	r0, [r6], #-256	; 0xffffff00
    1f20:	00042d43 	andeq	r2, r4, r3, asr #26
    1f24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f28:	14fd0f00 	ldrbtne	r0, [sp], #3840	; 0xf00
    1f2c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    1f30:	00961103 	addseq	r1, r6, r3, lsl #2
    1f34:	00000000 	andeq	r0, r0, r0
    1f38:	00780000 	rsbseq	r0, r8, r0
    1f3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f40:	0000076f 	andeq	r0, r0, pc, ror #14
    1f44:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1f48:	03f40100 	mvnseq	r0, #0, 2
    1f4c:	00042d42 	andeq	r2, r4, r2, asr #26
    1f50:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f54:	18ee0f00 	stmiane	lr!, {r8, r9, sl, fp}^
    1f58:	a1010000 	mrsge	r0, (UNDEF: 1)
    1f5c:	00961103 	addseq	r1, r6, r3, lsl #2
    1f60:	1b800000 	blne	fe001f68 <__shm_end__+0xbe001f68>
    1f64:	01540100 	cmpeq	r4, r0, lsl #2
    1f68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f6c:	000007db 	ldrdeq	r0, [r0], -fp
    1f70:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1f74:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    1f78:	00042d40 	andeq	r2, r4, r0, asr #26
    1f7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1f80:	001af010 	andseq	pc, sl, r0, lsl r0	; <UNPREDICTABLE>
    1f84:	03a20100 			; <UNDEFINED> instruction: 0x03a20100
    1f88:	00038440 	andeq	r8, r3, r0, asr #8
    1f8c:	6b910200 	blvs	fe442794 <__shm_end__+0xbe442794>
    1f90:	00165110 	andseq	r5, r6, r0, lsl r1
    1f94:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    1f98:	0003e43e 	andeq	lr, r3, lr, lsr r4
    1f9c:	6a910200 	bvs	fe4427a4 <__shm_end__+0xbe4427a4>
    1fa0:	001a6110 	andseq	r6, sl, r0, lsl r1
    1fa4:	03a40100 			; <UNDEFINED> instruction: 0x03a40100
    1fa8:	0003b140 	andeq	fp, r3, r0, asr #2
    1fac:	69910200 	ldmibvs	r1, {r9}
    1fb0:	72636c14 	rsbvc	r6, r3, #20, 24	; 0x1400
    1fb4:	03a70100 			; <UNDEFINED> instruction: 0x03a70100
    1fb8:	00007c0e 	andeq	r7, r0, lr, lsl #24
    1fbc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fc0:	11ec0f00 	mvnne	r0, r0, lsl #30
    1fc4:	8f010000 	svchi	0x00010000
    1fc8:	00961103 	addseq	r1, r6, r3, lsl #2
    1fcc:	00000000 	andeq	r0, r0, r0
    1fd0:	007c0000 	rsbseq	r0, ip, r0
    1fd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fd8:	00000817 	andeq	r0, r0, r7, lsl r8
    1fdc:	000b6b10 	andeq	r6, fp, r0, lsl fp
    1fe0:	038f0100 	orreq	r0, pc, #0, 2
    1fe4:	00042d3f 	andeq	r2, r4, pc, lsr sp
    1fe8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fec:	0027b910 	eoreq	fp, r7, r0, lsl r9
    1ff0:	03900100 	orrseq	r0, r0, #0, 2
    1ff4:	00081743 	andeq	r1, r8, r3, asr #14
    1ff8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ffc:	4b041100 	blmi	106404 <__core1_unwind_stub-0xef9bfc>
    2000:	12000003 	andne	r0, r0, #3
    2004:	000018d4 	ldrdeq	r1, [r0], -r4
    2008:	11038201 	tstne	r3, r1, lsl #4
    200c:	00000096 	muleq	r0, r6, r0
    2010:	01001b54 	tsteq	r0, r4, asr fp
    2014:	0000002c 	andeq	r0, r0, ip, lsr #32
    2018:	08499c01 	stmdaeq	r9, {r0, sl, fp, ip, pc}^
    201c:	6b100000 	blvs	402024 <__core1_unwind_stub-0xbfdfdc>
    2020:	0100000b 	tsteq	r0, fp
    2024:	2d400382 	stclcs	3, cr0, [r0, #-520]	; 0xfffffdf8
    2028:	02000004 	andeq	r0, r0, #4
    202c:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2030:	00001727 	andeq	r1, r0, r7, lsr #14
    2034:	11037c01 	tstne	r3, r1, lsl #24
    2038:	00000096 	muleq	r0, r6, r0
    203c:	00000000 	andeq	r0, r0, r0
    2040:	0000002c 	andeq	r0, r0, ip, lsr #32
    2044:	08759c01 	ldmdaeq	r5!, {r0, sl, fp, ip, pc}^
    2048:	6b100000 	blvs	402050 <__core1_unwind_stub-0xbfdfb0>
    204c:	0100000b 	tsteq	r0, fp
    2050:	2d42037c 	stclcs	3, cr0, [r2, #-496]	; 0xfffffe10
    2054:	02000004 	andeq	r0, r0, #4
    2058:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    205c:	000017f3 	strdeq	r1, [r0], -r3
    2060:	11037601 	tstne	r3, r1, lsl #12
    2064:	00000096 	muleq	r0, r6, r0
    2068:	00000000 	andeq	r0, r0, r0
    206c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2070:	08a19c01 	stmiaeq	r1!, {r0, sl, fp, ip, pc}
    2074:	6b100000 	blvs	40207c <__core1_unwind_stub-0xbfdf84>
    2078:	0100000b 	tsteq	r0, fp
    207c:	2d410376 	stclcs	3, cr0, [r1, #-472]	; 0xfffffe28
    2080:	02000004 	andeq	r0, r0, #4
    2084:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2088:	0000161f 	andeq	r1, r0, pc, lsl r6
    208c:	11037001 	tstne	r3, r1
    2090:	00000096 	muleq	r0, r6, r0
    2094:	00000000 	andeq	r0, r0, r0
    2098:	0000002c 	andeq	r0, r0, ip, lsr #32
    209c:	08cd9c01 	stmiaeq	sp, {r0, sl, fp, ip, pc}^
    20a0:	6b100000 	blvs	4020a8 <__core1_unwind_stub-0xbfdf58>
    20a4:	0100000b 	tsteq	r0, fp
    20a8:	2d410370 	stclcs	3, cr0, [r1, #-448]	; 0xfffffe40
    20ac:	02000004 	andeq	r0, r0, #4
    20b0:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    20b4:	0000197e 	andeq	r1, r0, lr, ror r9
    20b8:	11036a01 	tstne	r3, r1, lsl #20
    20bc:	00000096 	muleq	r0, r6, r0
    20c0:	00000000 	andeq	r0, r0, r0
    20c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    20c8:	08f99c01 	ldmeq	r9!, {r0, sl, fp, ip, pc}^
    20cc:	6b100000 	blvs	4020d4 <__core1_unwind_stub-0xbfdf2c>
    20d0:	0100000b 	tsteq	r0, fp
    20d4:	2d40036a 	stclcs	3, cr0, [r0, #-424]	; 0xfffffe58
    20d8:	02000004 	andeq	r0, r0, #4
    20dc:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    20e0:	00001075 	andeq	r1, r0, r5, ror r0
    20e4:	11036401 	tstne	r3, r1, lsl #8
    20e8:	00000096 	muleq	r0, r6, r0
    20ec:	00000000 	andeq	r0, r0, r0
    20f0:	0000002c 	andeq	r0, r0, ip, lsr #32
    20f4:	09259c01 	stmdbeq	r5!, {r0, sl, fp, ip, pc}
    20f8:	6b100000 	blvs	402100 <__core1_unwind_stub-0xbfdf00>
    20fc:	0100000b 	tsteq	r0, fp
    2100:	2d3f0364 	ldccs	3, cr0, [pc, #-400]!	; 1f78 <__core1_unwind_stub-0xffe088>
    2104:	02000004 	andeq	r0, r0, #4
    2108:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    210c:	0000128b 	andeq	r1, r0, fp, lsl #5
    2110:	11035e01 	tstne	r3, r1, lsl #28
    2114:	00000096 	muleq	r0, r6, r0
    2118:	00000000 	andeq	r0, r0, r0
    211c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2120:	09519c01 	ldmdbeq	r1, {r0, sl, fp, ip, pc}^
    2124:	6b100000 	blvs	40212c <__core1_unwind_stub-0xbfded4>
    2128:	0100000b 	tsteq	r0, fp
    212c:	2d3e035e 	ldccs	3, cr0, [lr, #-376]!	; 0xfffffe88
    2130:	02000004 	andeq	r0, r0, #4
    2134:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2138:	00001c17 	andeq	r1, r0, r7, lsl ip
    213c:	11035801 	tstne	r3, r1, lsl #16
    2140:	00000096 	muleq	r0, r6, r0
    2144:	00000000 	andeq	r0, r0, r0
    2148:	0000002c 	andeq	r0, r0, ip, lsr #32
    214c:	097d9c01 	ldmdbeq	sp!, {r0, sl, fp, ip, pc}^
    2150:	6b100000 	blvs	402158 <__core1_unwind_stub-0xbfdea8>
    2154:	0100000b 	tsteq	r0, fp
    2158:	2d3f0358 	ldccs	3, cr0, [pc, #-352]!	; 2000 <__core1_unwind_stub-0xffe000>
    215c:	02000004 	andeq	r0, r0, #4
    2160:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2164:	00001bdf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    2168:	11035201 	tstne	r3, r1, lsl #4
    216c:	00000096 	muleq	r0, r6, r0
    2170:	00000000 	andeq	r0, r0, r0
    2174:	0000002c 	andeq	r0, r0, ip, lsr #32
    2178:	09a99c01 	stmibeq	r9!, {r0, sl, fp, ip, pc}
    217c:	6b100000 	blvs	402184 <__core1_unwind_stub-0xbfde7c>
    2180:	0100000b 	tsteq	r0, fp
    2184:	2d3e0352 	ldccs	3, cr0, [lr, #-328]!	; 0xfffffeb8
    2188:	02000004 	andeq	r0, r0, #4
    218c:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    2190:	00001339 	andeq	r1, r0, r9, lsr r3
    2194:	18034101 	stmdane	r3, {r0, r8, lr}
    2198:	00000096 	muleq	r0, r6, r0
    219c:	01001ad0 	ldrdeq	r1, [r0, -r0]
    21a0:	00000084 	andeq	r0, r0, r4, lsl #1
    21a4:	09e59c01 	stmibeq	r5!, {r0, sl, fp, ip, pc}^
    21a8:	6b100000 	blvs	4021b0 <__core1_unwind_stub-0xbfde50>
    21ac:	0100000b 	tsteq	r0, fp
    21b0:	2d4b0341 	stclcs	3, cr0, [fp, #-260]	; 0xfffffefc
    21b4:	02000004 	andeq	r0, r0, #4
    21b8:	fb107491 	blx	41f406 <__core1_unwind_stub-0xbe0bfa>
    21bc:	01000019 	tsteq	r0, r9, lsl r0
    21c0:	7c5c0341 	mrrcvc	3, 4, r0, ip, cr1
    21c4:	02000000 	andeq	r0, r0, #0
    21c8:	15007091 	strne	r7, [r0, #-145]	; 0xffffff6f
    21cc:	00001258 	andeq	r1, r0, r8, asr r2
    21d0:	18033001 	stmdane	r3, {r0, ip, sp}
    21d4:	00000096 	muleq	r0, r6, r0
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	00000080 	andeq	r0, r0, r0, lsl #1
    21e0:	0a219c01 	beq	8691ec <__core1_unwind_stub-0x796e14>
    21e4:	6b100000 	blvs	4021ec <__core1_unwind_stub-0xbfde14>
    21e8:	0100000b 	tsteq	r0, fp
    21ec:	2d4b0330 	stclcs	3, cr0, [fp, #-192]	; 0xffffff40
    21f0:	02000004 	andeq	r0, r0, #4
    21f4:	fb107491 	blx	41f442 <__core1_unwind_stub-0xbe0bbe>
    21f8:	01000019 	tsteq	r0, r9, lsl r0
    21fc:	7c5c0330 	mrrcvc	3, 3, r0, ip, cr0
    2200:	02000000 	andeq	r0, r0, #0
    2204:	0f007091 	svceq	0x00007091
    2208:	00001a9c 	muleq	r0, ip, sl
    220c:	11031d01 	tstne	r3, r1, lsl #26
    2210:	00000096 	muleq	r0, r6, r0
    2214:	01001a58 	tsteq	r0, r8, asr sl
    2218:	00000078 	andeq	r0, r0, r8, ror r0
    221c:	0a5d9c01 	beq	1769228 <__end__+0x74d208>
    2220:	6b100000 	blvs	402228 <__core1_unwind_stub-0xbfddd8>
    2224:	0100000b 	tsteq	r0, fp
    2228:	2d3c031d 	ldccs	3, cr0, [ip, #-116]!	; 0xffffff8c
    222c:	02000004 	andeq	r0, r0, #4
    2230:	03107491 	tsteq	r0, #-1862270976	; 0x91000000
    2234:	01000017 	tsteq	r0, r7, lsl r0
    2238:	7c30031e 	ldcvc	3, cr0, [r0], #-120	; 0xffffff88
    223c:	02000000 	andeq	r0, r0, #0
    2240:	0f007091 	svceq	0x00007091
    2244:	00000fd8 	ldrdeq	r0, [r0], -r8
    2248:	11031401 	tstne	r3, r1, lsl #8
    224c:	00000096 	muleq	r0, r6, r0
    2250:	00000000 	andeq	r0, r0, r0
    2254:	0000003c 	andeq	r0, r0, ip, lsr r0
    2258:	0a999c01 	beq	fe669264 <__shm_end__+0xbe669264>
    225c:	6b100000 	blvs	402264 <__core1_unwind_stub-0xbfdd9c>
    2260:	0100000b 	tsteq	r0, fp
    2264:	2d3c0314 	ldccs	3, cr0, [ip, #-80]!	; 0xffffffb0
    2268:	02000004 	andeq	r0, r0, #4
    226c:	03107491 	tsteq	r0, #-1862270976	; 0x91000000
    2270:	01000017 	tsteq	r0, r7, lsl r0
    2274:	33320315 	teqcc	r2, #1409286144	; 0x54000000
    2278:	02000004 	andeq	r0, r0, #4
    227c:	12007091 	andne	r7, r0, #145	; 0x91
    2280:	00001a03 	andeq	r1, r0, r3, lsl #20
    2284:	1102fe01 	tstne	r2, r1, lsl #28	; <UNPREDICTABLE>
    2288:	00000096 	muleq	r0, r6, r0
    228c:	010019e4 	smlatteq	r0, r4, r9, r1
    2290:	00000074 	andeq	r0, r0, r4, ror r0
    2294:	0ae59c01 	beq	ff9692a0 <__shm_end__+0xbf9692a0>
    2298:	6b100000 	blvs	4022a0 <__core1_unwind_stub-0xbfdd60>
    229c:	0100000b 	tsteq	r0, fp
    22a0:	2d3d02fe 	lfmcs	f0, 4, [sp, #-1016]!	; 0xfffffc08
    22a4:	02000004 	andeq	r0, r0, #4
    22a8:	cf106c91 	svcgt	0x00106c91
    22ac:	0100000f 	tsteq	r0, pc
    22b0:	7c3102ff 	lfmvc	f0, 4, [r1], #-1020	; 0xfffffc04
    22b4:	02000000 	andeq	r0, r0, #0
    22b8:	03166891 	tsteq	r6, #9502720	; 0x910000
    22bc:	01000017 	tsteq	r0, r7, lsl r0
    22c0:	7c0e0301 	stcvc	3, cr0, [lr], {1}
    22c4:	02000000 	andeq	r0, r0, #0
    22c8:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    22cc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    22d0:	1102eb01 	tstne	r2, r1, lsl #22
    22d4:	00000096 	muleq	r0, r6, r0
    22d8:	00000000 	andeq	r0, r0, r0
    22dc:	0000005c 	andeq	r0, r0, ip, asr r0
    22e0:	0b319c01 	bleq	c692ec <__core1_unwind_stub-0x396d14>
    22e4:	6b100000 	blvs	4022ec <__core1_unwind_stub-0xbfdd14>
    22e8:	0100000b 	tsteq	r0, fp
    22ec:	2d3d02eb 	lfmcs	f0, 4, [sp, #-940]!	; 0xfffffc54
    22f0:	02000004 	andeq	r0, r0, #4
    22f4:	cf106c91 	svcgt	0x00106c91
    22f8:	0100000f 	tsteq	r0, pc
    22fc:	333302ec 	teqcc	r3, #236, 4	; 0xc000000e
    2300:	02000004 	andeq	r0, r0, #4
    2304:	03166891 	tsteq	r6, #9502720	; 0x910000
    2308:	01000017 	tsteq	r0, r7, lsl r0
    230c:	7c0e02ef 	sfmvc	f0, 4, [lr], {239}	; 0xef
    2310:	02000000 	andeq	r0, r0, #0
    2314:	0f007491 	svceq	0x00007491
    2318:	000017a4 	andeq	r1, r0, r4, lsr #15
    231c:	1102c501 	tstne	r2, r1, lsl #10
    2320:	00000096 	muleq	r0, r6, r0
    2324:	00000000 	andeq	r0, r0, r0
    2328:	000000dc 	ldrdeq	r0, [r0], -ip
    232c:	0b6d9c01 	bleq	1b69338 <__end__+0xb4d318>
    2330:	6b100000 	blvs	402338 <__core1_unwind_stub-0xbfdcc8>
    2334:	0100000b 	tsteq	r0, fp
    2338:	2d4402c5 	sfmcs	f0, 2, [r4, #-788]	; 0xfffffcec
    233c:	02000004 	andeq	r0, r0, #4
    2340:	6d107491 	cfldrsvs	mvf7, [r0, #-580]	; 0xfffffdbc
    2344:	01000010 	tsteq	r0, r0, lsl r0
    2348:	6e4b02c6 	cdpvs	2, 4, cr0, cr11, cr6, {6}
    234c:	02000002 	andeq	r0, r0, #2
    2350:	0f007391 	svceq	0x00007391
    2354:	000016e5 	andeq	r1, r0, r5, ror #13
    2358:	11029f01 	tstne	r2, r1, lsl #30
    235c:	00000096 	muleq	r0, r6, r0
    2360:	00000000 	andeq	r0, r0, r0
    2364:	000000dc 	ldrdeq	r0, [r0], -ip
    2368:	0ba99c01 	bleq	fea69374 <__shm_end__+0xbea69374>
    236c:	6b100000 	blvs	402374 <__core1_unwind_stub-0xbfdc8c>
    2370:	0100000b 	tsteq	r0, fp
    2374:	2d44029f 	sfmcs	f0, 2, [r4, #-636]	; 0xfffffd84
    2378:	02000004 	andeq	r0, r0, #4
    237c:	6d107491 	cfldrsvs	mvf7, [r0, #-580]	; 0xfffffdbc
    2380:	01000010 	tsteq	r0, r0, lsl r0
    2384:	354b02a0 	strbcc	r0, [fp, #-672]	; 0xfffffd60
    2388:	02000002 	andeq	r0, r0, #2
    238c:	0f007391 	svceq	0x00007391
    2390:	00001489 	andeq	r1, r0, r9, lsl #9
    2394:	11028401 	tstne	r2, r1, lsl #8
    2398:	00000096 	muleq	r0, r6, r0
    239c:	00000000 	andeq	r0, r0, r0
    23a0:	0000009c 	muleq	r0, ip, r0
    23a4:	0be59c01 	bleq	ff9693b0 <__shm_end__+0xbf9693b0>
    23a8:	6b100000 	blvs	4023b0 <__core1_unwind_stub-0xbfdc50>
    23ac:	0100000b 	tsteq	r0, fp
    23b0:	2d420284 	sfmcs	f0, 2, [r2, #-528]	; 0xfffffdf0
    23b4:	02000004 	andeq	r0, r0, #4
    23b8:	ec107491 	cfldrs	mvf7, [r0], {145}	; 0x91
    23bc:	01000014 	tsteq	r0, r4, lsl r0
    23c0:	33380285 	teqcc	r8, #1342177288	; 0x50000008
    23c4:	02000004 	andeq	r0, r0, #4
    23c8:	0f007091 	svceq	0x00007091
    23cc:	000010e7 	andeq	r1, r0, r7, ror #1
    23d0:	11026901 	tstne	r2, r1, lsl #18
    23d4:	00000096 	muleq	r0, r6, r0
    23d8:	00000000 	andeq	r0, r0, r0
    23dc:	0000009c 	muleq	r0, ip, r0
    23e0:	0c219c01 	stceq	12, cr9, [r1], #-4
    23e4:	6b100000 	blvs	4023ec <__core1_unwind_stub-0xbfdc14>
    23e8:	0100000b 	tsteq	r0, fp
    23ec:	2d420269 	sfmcs	f0, 2, [r2, #-420]	; 0xfffffe5c
    23f0:	02000004 	andeq	r0, r0, #4
    23f4:	ec107491 	cfldrs	mvf7, [r0], {145}	; 0x91
    23f8:	01000014 	tsteq	r0, r4, lsl r0
    23fc:	3338026a 	teqcc	r8, #-1610612730	; 0xa0000006
    2400:	02000004 	andeq	r0, r0, #4
    2404:	0f007091 	svceq	0x00007091
    2408:	000012cf 	andeq	r1, r0, pc, asr #5
    240c:	11025101 	tstne	r2, r1, lsl #2
    2410:	00000096 	muleq	r0, r6, r0
    2414:	00000000 	andeq	r0, r0, r0
    2418:	000000a8 	andeq	r0, r0, r8, lsr #1
    241c:	0c5d9c01 	mrrceq	12, 0, r9, sp, cr1
    2420:	6b100000 	blvs	402428 <__core1_unwind_stub-0xbfdbd8>
    2424:	0100000b 	tsteq	r0, fp
    2428:	2d410251 	sfmcs	f0, 2, [r1, #-324]	; 0xfffffebc
    242c:	02000004 	andeq	r0, r0, #4
    2430:	4f107491 	svcmi	0x00107491
    2434:	01000030 	tsteq	r0, r0, lsr r0
    2438:	33370252 	teqcc	r7, #536870917	; 0x20000005
    243c:	02000004 	andeq	r0, r0, #4
    2440:	0f007091 	svceq	0x00007091
    2444:	00001159 	andeq	r1, r0, r9, asr r1
    2448:	11023a01 	tstne	r2, r1, lsl #20
    244c:	00000096 	muleq	r0, r6, r0
    2450:	00000000 	andeq	r0, r0, r0
    2454:	000000a8 	andeq	r0, r0, r8, lsr #1
    2458:	0c999c01 	ldceq	12, cr9, [r9], {1}
    245c:	6b100000 	blvs	402464 <__core1_unwind_stub-0xbfdb9c>
    2460:	0100000b 	tsteq	r0, fp
    2464:	2d41023a 	sfmcs	f0, 2, [r1, #-232]	; 0xffffff18
    2468:	02000004 	andeq	r0, r0, #4
    246c:	4f107491 	svcmi	0x00107491
    2470:	01000030 	tsteq	r0, r0, lsr r0
    2474:	3337023b 	teqcc	r7, #-1342177277	; 0xb0000003
    2478:	02000004 	andeq	r0, r0, #4
    247c:	0f007091 	svceq	0x00007091
    2480:	000017c2 	andeq	r1, r0, r2, asr #15
    2484:	11021c01 	tstne	r2, r1, lsl #24
    2488:	00000096 	muleq	r0, r6, r0
    248c:	00000000 	andeq	r0, r0, r0
    2490:	000000a8 	andeq	r0, r0, r8, lsr #1
    2494:	0cc59c01 	stcleq	12, cr9, [r5], {1}
    2498:	6b100000 	blvs	4024a0 <__core1_unwind_stub-0xbfdb60>
    249c:	0100000b 	tsteq	r0, fp
    24a0:	2d3f021c 	lfmcs	f0, 4, [pc, #-112]!	; 2438 <__core1_unwind_stub-0xffdbc8>
    24a4:	02000004 	andeq	r0, r0, #4
    24a8:	0f007491 	svceq	0x00007491
    24ac:	00000fee 	andeq	r0, r0, lr, ror #31
    24b0:	11020201 	tstne	r2, r1, lsl #4
    24b4:	00000096 	muleq	r0, r6, r0
    24b8:	00000000 	andeq	r0, r0, r0
    24bc:	000000a8 	andeq	r0, r0, r8, lsr #1
    24c0:	0cf19c01 	ldcleq	12, cr9, [r1], #4
    24c4:	6b100000 	blvs	4024cc <__core1_unwind_stub-0xbfdb34>
    24c8:	0100000b 	tsteq	r0, fp
    24cc:	2d3e0202 	lfmcs	f0, 4, [lr, #-8]!
    24d0:	02000004 	andeq	r0, r0, #4
    24d4:	0f007491 	svceq	0x00007491
    24d8:	00001549 	andeq	r1, r0, r9, asr #10
    24dc:	1101e801 	tstne	r1, r1, lsl #16
    24e0:	00000096 	muleq	r0, r6, r0
    24e4:	00000000 	andeq	r0, r0, r0
    24e8:	000000a8 	andeq	r0, r0, r8, lsr #1
    24ec:	0d1d9c01 	ldceq	12, cr9, [sp, #-4]
    24f0:	6b100000 	blvs	4024f8 <__core1_unwind_stub-0xbfdb08>
    24f4:	0100000b 	tsteq	r0, fp
    24f8:	2d3e01e8 	ldfcss	f0, [lr, #-928]!	; 0xfffffc60
    24fc:	02000004 	andeq	r0, r0, #4
    2500:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2504:	00001850 	andeq	r1, r0, r0, asr r8
    2508:	1101e101 	tstne	r1, r1, lsl #2
    250c:	00000096 	muleq	r0, r6, r0
    2510:	00000000 	andeq	r0, r0, r0
    2514:	0000003c 	andeq	r0, r0, ip, lsr r0
    2518:	0d699c01 	stcleq	12, cr9, [r9, #-4]!
    251c:	6b100000 	blvs	402524 <__core1_unwind_stub-0xbfdadc>
    2520:	0100000b 	tsteq	r0, fp
    2524:	2d3b01e1 	ldfcss	f0, [fp, #-900]!	; 0xfffffc7c
    2528:	02000004 	andeq	r0, r0, #4
    252c:	5d107491 	cfldrspl	mvf7, [r0, #-580]	; 0xfffffdbc
    2530:	01000019 	tsteq	r0, r9, lsl r0
    2534:	693301e2 	ldmdbvs	r3!, {r1, r5, r6, r7, r8}
    2538:	0200000d 	andeq	r0, r0, #13
    253c:	6b107091 	blvs	41e788 <__core1_unwind_stub-0xbe1878>
    2540:	0100000a 	tsteq	r0, sl
    2544:	2c2d01e3 	stfcss	f0, [sp], #-908	; 0xfffffc74
    2548:	02000000 	andeq	r0, r0, #0
    254c:	11006c91 			; <UNDEFINED> instruction: 0x11006c91
    2550:	000d7604 	andeq	r7, sp, r4, lsl #12
    2554:	08010400 	stmdaeq	r1, {sl}
    2558:	00000409 	andeq	r0, r0, r9, lsl #8
    255c:	000d6f17 	andeq	r6, sp, r7, lsl pc
    2560:	10cd0f00 	sbcne	r0, sp, r0, lsl #30
    2564:	ba010000 	blt	4256c <__core1_unwind_stub-0xfbda94>
    2568:	00961101 	addseq	r1, r6, r1, lsl #2
    256c:	18e00000 	stmiane	r0!, {}^	; <UNPREDICTABLE>
    2570:	01040100 	mrseq	r0, (UNDEF: 20)
    2574:	9c010000 	stcls	0, cr0, [r1], {-0}
    2578:	00000de5 	andeq	r0, r0, r5, ror #27
    257c:	000b6b10 	andeq	r6, fp, r0, lsl fp
    2580:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    2584:	00042d40 	andeq	r2, r4, r0, asr #26
    2588:	6c910200 	lfmvs	f0, 4, [r1], {0}
    258c:	00195d10 	andseq	r5, r9, r0, lsl sp
    2590:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
    2594:	000d6933 	andeq	r6, sp, r3, lsr r9
    2598:	68910200 	ldmvs	r1, {r9}
    259c:	000a6b10 	andeq	r6, sl, r0, lsl fp
    25a0:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    25a4:	00002c2d 	andeq	r2, r0, sp, lsr #24
    25a8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    25ac:	0010e210 	andseq	lr, r0, r0, lsl r2
    25b0:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
    25b4:	000de52b 	andeq	lr, sp, fp, lsr #10
    25b8:	63910200 	orrsvs	r0, r1, #0, 4
    25bc:	01006914 	tsteq	r0, r4, lsl r9
    25c0:	2c0c01bf 	stfcss	f0, [ip], {191}	; 0xbf
    25c4:	02000000 	andeq	r0, r0, #0
    25c8:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
    25cc:	180e0201 	stmdane	lr, {r0, r9}
    25d0:	590f0000 	stmdbpl	pc, {}	; <UNPREDICTABLE>
    25d4:	01000010 	tsteq	r0, r0, lsl r0
    25d8:	96110197 			; <UNDEFINED> instruction: 0x96110197
    25dc:	00000000 	andeq	r0, r0, r0
    25e0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    25e4:	01000000 	mrseq	r0, (UNDEF: 0)
    25e8:	000e469c 	muleq	lr, ip, r6
    25ec:	0b6b1000 	bleq	1ac65f4 <__end__+0xaaa5d4>
    25f0:	97010000 	strls	r0, [r1, -r0]
    25f4:	042d3a01 	strteq	r3, [sp], #-2561	; 0xfffff5ff
    25f8:	91020000 	mrsls	r0, (UNDEF: 2)
    25fc:	195d106c 	ldmdbne	sp, {r2, r3, r5, r6, ip}^
    2600:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2604:	0e462c01 	cdpeq	12, 4, cr2, cr6, cr1, {0}
    2608:	91020000 	mrsls	r0, (UNDEF: 2)
    260c:	0a6b1068 	beq	1ac67b4 <__end__+0xaaa794>
    2610:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2614:	002c2c01 	eoreq	r2, ip, r1, lsl #24
    2618:	91020000 	mrsls	r0, (UNDEF: 2)
    261c:	00691464 	rsbeq	r1, r9, r4, ror #8
    2620:	0c019b01 			; <UNDEFINED> instruction: 0x0c019b01
    2624:	0000002c 	andeq	r0, r0, ip, lsr #32
    2628:	00749102 	rsbseq	r9, r4, r2, lsl #2
    262c:	0d6f0411 	cfstrdeq	mvd0, [pc, #-68]!	; 25f0 <__core1_unwind_stub-0xffda10>
    2630:	5b0f0000 	blpl	3c2638 <__core1_unwind_stub-0xc3d9c8>
    2634:	01000017 	tsteq	r0, r7, lsl r0
    2638:	96110185 	ldrls	r0, [r1], -r5, lsl #3
    263c:	60000000 	andvs	r0, r0, r0
    2640:	80010018 	andhi	r0, r1, r8, lsl r0
    2644:	01000000 	mrseq	r0, (UNDEF: 0)
    2648:	000e789c 	muleq	lr, ip, r8
    264c:	0b6b1000 	bleq	1ac6654 <__end__+0xaaa634>
    2650:	85010000 	strhi	r0, [r1, #-0]
    2654:	042d3d01 	strteq	r3, [sp], #-3329	; 0xfffff2ff
    2658:	91020000 	mrsls	r0, (UNDEF: 2)
    265c:	c10f0074 	tstgt	pc, r4, ror r0	; <UNPREDICTABLE>
    2660:	01000014 	tsteq	r0, r4, lsl r0
    2664:	96110171 			; <UNDEFINED> instruction: 0x96110171
    2668:	e0000000 	and	r0, r0, r0
    266c:	80010017 	andhi	r0, r1, r7, lsl r0
    2670:	01000000 	mrseq	r0, (UNDEF: 0)
    2674:	000ea49c 	muleq	lr, ip, r4
    2678:	0b6b1000 	bleq	1ac6680 <__end__+0xaaa660>
    267c:	71010000 	mrsvc	r0, (UNDEF: 1)
    2680:	042d3c01 	strteq	r3, [sp], #-3073	; 0xfffff3ff
    2684:	91020000 	mrsls	r0, (UNDEF: 2)
    2688:	740f0074 	strvc	r0, [pc], #-116	; 2690 <__core1_unwind_stub-0xffd970>
    268c:	01000011 	tsteq	r0, r1, lsl r0
    2690:	96110153 			; <UNDEFINED> instruction: 0x96110153
    2694:	00000000 	andeq	r0, r0, r0
    2698:	a0000000 	andge	r0, r0, r0
    269c:	01000000 	mrseq	r0, (UNDEF: 0)
    26a0:	000ee09c 	muleq	lr, ip, r0
    26a4:	0b6b1000 	bleq	1ac66ac <__end__+0xaaa68c>
    26a8:	53010000 	movwpl	r0, #4096	; 0x1000
    26ac:	042d3601 	strteq	r3, [sp], #-1537	; 0xfffff9ff
    26b0:	91020000 	mrsls	r0, (UNDEF: 2)
    26b4:	15aa1074 	strne	r1, [sl, #116]!	; 0x74
    26b8:	54010000 	strpl	r0, [r1], #-0
    26bc:	0d6f2601 	stcleq	6, cr2, [pc, #-4]!	; 26c0 <__core1_unwind_stub-0xffd940>
    26c0:	91020000 	mrsls	r0, (UNDEF: 2)
    26c4:	300f0073 	andcc	r0, pc, r3, ror r0	; <UNPREDICTABLE>
    26c8:	0100001c 	tsteq	r0, ip, lsl r0
    26cc:	96110136 			; <UNDEFINED> instruction: 0x96110136
    26d0:	00000000 	andeq	r0, r0, r0
    26d4:	a4000000 	strge	r0, [r0], #-0
    26d8:	01000000 	mrseq	r0, (UNDEF: 0)
    26dc:	000f1c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    26e0:	0b6b1000 	bleq	1ac66e8 <__end__+0xaaa6c8>
    26e4:	36010000 	strcc	r0, [r1], -r0
    26e8:	042d3501 	strteq	r3, [sp], #-1281	; 0xfffffaff
    26ec:	91020000 	mrsls	r0, (UNDEF: 2)
    26f0:	15aa1074 	strne	r1, [sl, #116]!	; 0x74
    26f4:	37010000 	strcc	r0, [r1, -r0]
    26f8:	0e462701 	cdpeq	7, 4, cr2, cr6, cr1, {0}
    26fc:	91020000 	mrsls	r0, (UNDEF: 2)
    2700:	cb120070 	blgt	4828c8 <__core1_unwind_stub-0xb7d738>
    2704:	0100001a 	tsteq	r0, sl, lsl r0
    2708:	9611012f 	ldrls	r0, [r1], -pc, lsr #2
    270c:	00000000 	andeq	r0, r0, r0
    2710:	2c000000 	stccs	0, cr0, [r0], {-0}
    2714:	01000000 	mrseq	r0, (UNDEF: 0)
    2718:	000f489c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
    271c:	0b6b1000 	bleq	1ac6724 <__end__+0xaaa704>
    2720:	2f010000 	svccs	0x00010000
    2724:	042d3801 	strteq	r3, [sp], #-2049	; 0xfffff7ff
    2728:	91020000 	mrsls	r0, (UNDEF: 2)
    272c:	98120074 	ldmdals	r2, {r2, r4, r5, r6}
    2730:	01000019 	tsteq	r0, r9, lsl r0
    2734:	96110122 	ldrls	r0, [r1], -r2, lsr #2
    2738:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    273c:	48010017 	stmdami	r1, {r0, r1, r2, r4}
    2740:	01000000 	mrseq	r0, (UNDEF: 0)
    2744:	000f749c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
    2748:	0b6b1000 	bleq	1ac6750 <__end__+0xaaa730>
    274c:	22010000 	andcs	r0, r1, #0
    2750:	042d3701 	strteq	r3, [sp], #-1793	; 0xfffff8ff
    2754:	91020000 	mrsls	r0, (UNDEF: 2)
    2758:	14120074 	ldrne	r0, [r2], #-116	; 0xffffff8c
    275c:	01000018 	tsteq	r0, r8, lsl r0
    2760:	9611011d 			; <UNDEFINED> instruction: 0x9611011d
    2764:	00000000 	andeq	r0, r0, r0
    2768:	2c000000 	stccs	0, cr0, [r0], {-0}
    276c:	01000000 	mrseq	r0, (UNDEF: 0)
    2770:	000fa09c 	muleq	pc, ip, r0	; <UNPREDICTABLE>
    2774:	0b6b1000 	bleq	1ac677c <__end__+0xaaa75c>
    2778:	1d010000 	stcne	0, cr0, [r1, #-0]
    277c:	042d3601 	strteq	r3, [sp], #-1537	; 0xfffff9ff
    2780:	91020000 	mrsls	r0, (UNDEF: 2)
    2784:	3f120074 	svccc	0x00120074
    2788:	01000018 	tsteq	r0, r8, lsl r0
    278c:	96110105 	ldrls	r0, [r1], -r5, lsl #2
    2790:	00000000 	andeq	r0, r0, r0
    2794:	90000000 	andls	r0, r0, r0
    2798:	01000000 	mrseq	r0, (UNDEF: 0)
    279c:	000fcc9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    27a0:	0b6b1000 	bleq	1ac67a8 <__end__+0xaaa788>
    27a4:	05010000 	streq	r0, [r1, #-0]
    27a8:	042d3701 	strteq	r3, [sp], #-1793	; 0xfffff8ff
    27ac:	91020000 	mrsls	r0, (UNDEF: 2)
    27b0:	a3180074 	tstge	r8, #116	; 0x74
    27b4:	01000012 	tsteq	r0, r2, lsl r0
    27b8:	009611bb 			; <UNDEFINED> instruction: 0x009611bb
    27bc:	163c0000 	ldrtne	r0, [ip], -r0
    27c0:	015c0100 	cmpeq	ip, r0, lsl #2
    27c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    27c8:	00001038 	andeq	r1, r0, r8, lsr r0
    27cc:	00072119 	andeq	r2, r7, r9, lsl r1
    27d0:	33bb0100 			; <UNDEFINED> instruction: 0x33bb0100
    27d4:	000001a1 	andeq	r0, r0, r1, lsr #3
    27d8:	196e9102 	stmdbne	lr!, {r1, r8, ip, pc}^
    27dc:	00002839 	andeq	r2, r0, r9, lsr r8
    27e0:	fc27bc01 	stc2	12, cr11, [r7], #-4
    27e4:	02000001 	andeq	r0, r0, #1
    27e8:	f2196891 	vtst.16	d6, d25, d1
    27ec:	01000014 	tsteq	r0, r4, lsl r0
    27f0:	00a22bbd 	strhteq	r2, [r2], sp
    27f4:	91020000 	mrsls	r0, (UNDEF: 2)
    27f8:	0b6b1964 	bleq	1ac8d90 <__end__+0xaacd70>
    27fc:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    2800:	00042d35 	andeq	r2, r4, r5, lsr sp
    2804:	60910200 	addsvs	r0, r1, r0, lsl #4
    2808:	0001481a 	andeq	r4, r1, sl, lsl r8
    280c:	27b91b00 	ldrcs	r1, [r9, r0, lsl #22]!
    2810:	cf010000 	svcgt	0x00010000
    2814:	0000961d 	andeq	r9, r0, sp, lsl r6
    2818:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    281c:	a91c0000 	ldmdbge	ip, {}	; <UNPREDICTABLE>
    2820:	01000019 	tsteq	r0, r9, lsl r0
    2824:	00961883 	addseq	r1, r6, r3, lsl #17
    2828:	14e40000 	strbtne	r0, [r4], #0
    282c:	01580100 	cmpeq	r8, r0, lsl #2
    2830:	9c010000 	stcls	0, cr0, [r1], {-0}
    2834:	00001099 	muleq	r0, r9, r0
    2838:	000b6b19 	andeq	r6, fp, r9, lsl fp
    283c:	44830100 	strmi	r0, [r3], #256	; 0x100
    2840:	0000042d 	andeq	r0, r0, sp, lsr #8
    2844:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    2848:	00001658 	andeq	r1, r0, r8, asr r6
    284c:	e5518301 	ldrb	r8, [r1, #-769]	; 0xfffffcff
    2850:	0200000d 	andeq	r0, r0, #13
    2854:	98136b91 	ldmdals	r3, {r0, r4, r7, r8, r9, fp, sp, lr}
    2858:	94010015 	strls	r0, [r1], #-21	; 0xffffffeb
    285c:	1b000000 	blne	2864 <__core1_unwind_stub-0xffd79c>
    2860:	000027b9 			; <UNDEFINED> instruction: 0x000027b9
    2864:	96199e01 	ldrls	r9, [r9], -r1, lsl #28
    2868:	02000000 	andeq	r0, r0, #0
    286c:	031b7491 	tsteq	fp, #-1862270976	; 0x91000000
    2870:	01000017 	tsteq	r0, r7, lsl r0
    2874:	007c129f 			; <UNDEFINED> instruction: 0x007c129f
    2878:	91020000 	mrsls	r0, (UNDEF: 2)
    287c:	1d000070 	stcne	0, cr0, [r0, #-448]	; 0xfffffe40
    2880:	000016c6 	andeq	r1, r0, r6, asr #13
    2884:	96185201 	ldrls	r5, [r8], -r1, lsl #4
    2888:	c4000000 	strgt	r0, [r0], #-0
    288c:	20010013 	andcs	r0, r1, r3, lsl r0
    2890:	01000001 	tsteq	r0, r1
    2894:	0010d29c 	mulseq	r0, ip, r2
    2898:	0b6b1900 	bleq	1ac8ca0 <__end__+0xaacc80>
    289c:	52010000 	andpl	r0, r1, #0
    28a0:	00042d4c 	andeq	r2, r4, ip, asr #26
    28a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28a8:	00170319 	andseq	r0, r7, r9, lsl r3
    28ac:	40530100 	subsmi	r0, r3, r0, lsl #2
    28b0:	0000007c 	andeq	r0, r0, ip, ror r0
    28b4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    28b8:	0011d71d 	andseq	sp, r1, sp, lsl r7
    28bc:	1a4a0100 	bne	1282cc4 <__end__+0x266ca4>
    28c0:	0000007c 	andeq	r0, r0, ip, ror r0
    28c4:	0100139c 			; <UNDEFINED> instruction: 0x0100139c
    28c8:	00000028 	andeq	r0, r0, r8, lsr #32
    28cc:	10fc9c01 	rscsne	r9, ip, r1, lsl #24
    28d0:	03190000 	tsteq	r9, #0
    28d4:	01000011 	tsteq	r0, r1, lsl r0
    28d8:	10fc3c4a 	rscsne	r3, ip, sl, asr #24
    28dc:	91020000 	mrsls	r0, (UNDEF: 2)
    28e0:	04110074 	ldreq	r0, [r1], #-116	; 0xffffff8c
    28e4:	00001102 	andeq	r1, r0, r2, lsl #2
    28e8:	1cec001e 	stclne	0, cr0, [ip], #120	; 0x78
    28ec:	00040000 	andeq	r0, r4, r0
    28f0:	00000527 	andeq	r0, r0, r7, lsr #10
    28f4:	003a0104 	eorseq	r0, sl, r4, lsl #2
    28f8:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    28fc:	d000001c 	andle	r0, r0, ip, lsl r0
    2900:	5800000b 	stmdapl	r0, {r0, r1, r3}
    2904:	00000003 	andeq	r0, r0, r3
    2908:	0d000000 	stceq	0, cr0, [r0, #-0]
    290c:	02000014 	andeq	r0, r0, #20
    2910:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2914:	fa030074 	blx	c2aec <__core1_unwind_stub-0xf3d514>
    2918:	0300002f 	movweq	r0, #47	; 0x2f
    291c:	003d17d1 	ldrsbteq	r1, [sp], -r1
    2920:	2c040000 	stccs	0, cr0, [r4], {-0}
    2924:	05000000 	streq	r0, [r0, #-0]
    2928:	0b450704 	bleq	1144540 <__end__+0x128520>
    292c:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    2930:	00080505 	andeq	r0, r8, r5, lsl #10
    2934:	04080500 	streq	r0, [r8], #-1280	; 0xfffffb00
    2938:	00000a9d 	muleq	r0, sp, sl
    293c:	02060105 	andeq	r0, r6, #1073741825	; 0x40000001
    2940:	05000004 	streq	r0, [r0, #-4]
    2944:	0d610502 	cfstr64eq	mvdx0, [r1, #-8]!
    2948:	c2030000 	andgt	r0, r3, #0
    294c:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    2950:	006c1828 	rsbeq	r1, ip, r8, lsr #16
    2954:	04050000 	streq	r0, [r5], #-0
    2958:	00080a05 	andeq	r0, r8, r5, lsl #20
    295c:	08010500 	stmdaeq	r1, {r8, sl}
    2960:	00000400 	andeq	r0, r0, r0, lsl #8
    2964:	9e070205 	cdpls	2, 0, cr0, cr7, cr5, {0}
    2968:	0300000e 	movweq	r0, #14
    296c:	00003043 	andeq	r3, r0, r3, asr #32
    2970:	92193404 	andsls	r3, r9, #4, 8	; 0x4000000
    2974:	04000000 	streq	r0, [r0], #-0
    2978:	00000081 	andeq	r0, r0, r1, lsl #1
    297c:	40070405 	andmi	r0, r7, r5, lsl #8
    2980:	0500000b 	streq	r0, [r0, #-11]
    2984:	0b3b0708 	bleq	ec45ac <__core1_unwind_stub-0x13ba54>
    2988:	2d030000 	stccs	0, cr0, [r3, #-0]
    298c:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    2990:	003d1a56 	eorseq	r1, sp, r6, asr sl
    2994:	d6030000 	strle	r0, [r3], -r0
    2998:	05000004 	streq	r0, [r0, #-4]
    299c:	00601d41 	rsbeq	r1, r0, r1, asr #26
    29a0:	13060000 	movwne	r0, #24576	; 0x6000
    29a4:	0700001e 	smladeq	r0, lr, r0, r0
    29a8:	00007301 	andeq	r7, r0, r1, lsl #6
    29ac:	0e650600 	cdpeq	6, 6, cr0, cr5, cr0, {0}
    29b0:	000000d7 	ldrdeq	r0, [r0], -r7
    29b4:	00238c07 	eoreq	r8, r3, r7, lsl #24
    29b8:	fb070000 	blx	1c29c2 <__core1_unwind_stub-0xe3d63e>
    29bc:	0100001d 	tsteq	r0, sp, lsl r0
    29c0:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    29c4:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    29c8:	0000b803 	andeq	fp, r0, r3, lsl #16
    29cc:	23f80600 	mvnscs	r0, #0, 12
    29d0:	01070000 	mrseq	r0, (UNDEF: 7)
    29d4:	00000073 	andeq	r0, r0, r3, ror r0
    29d8:	020e7306 	andeq	r7, lr, #402653184	; 0x18000000
    29dc:	07000001 	streq	r0, [r0, -r1]
    29e0:	0000221e 	andeq	r2, r0, lr, lsl r2
    29e4:	21060700 	tstcs	r6, r0, lsl #14
    29e8:	00010000 	andeq	r0, r1, r0
    29ec:	00242c03 	eoreq	r2, r4, r3, lsl #24
    29f0:	03770600 	cmneq	r7, #0, 12
    29f4:	000000e3 	andeq	r0, r0, r3, ror #1
    29f8:	00223406 	eoreq	r3, r2, r6, lsl #8
    29fc:	73010700 	movwvc	r0, #5888	; 0x1700
    2a00:	06000000 	streq	r0, [r0], -r0
    2a04:	012d0e7e 			; <UNDEFINED> instruction: 0x012d0e7e
    2a08:	de070000 	cdple	0, 0, cr0, cr7, cr0, {0}
    2a0c:	00000022 	andeq	r0, r0, r2, lsr #32
    2a10:	0025a107 	eoreq	sl, r5, r7, lsl #2
    2a14:	03000100 	movweq	r0, #256	; 0x100
    2a18:	00002256 	andeq	r2, r0, r6, asr r2
    2a1c:	0e038d06 	cdpeq	13, 0, cr8, cr3, cr6, {0}
    2a20:	06000001 	streq	r0, [r0], -r1
    2a24:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
    2a28:	00730107 	rsbseq	r0, r3, r7, lsl #2
    2a2c:	93060000 	movwls	r0, #24576	; 0x6000
    2a30:	0001640e 	andeq	r6, r1, lr, lsl #8
    2a34:	23370700 	teqcs	r7, #0, 14
    2a38:	07000000 	streq	r0, [r0, -r0]
    2a3c:	00001d61 	andeq	r1, r0, r1, ror #26
    2a40:	25c70701 	strbcs	r0, [r7, #1793]	; 0x701
    2a44:	07020000 	streq	r0, [r2, -r0]
    2a48:	00002076 	andeq	r2, r0, r6, ror r0
    2a4c:	da030003 	ble	c2a60 <__core1_unwind_stub-0xf3d5a0>
    2a50:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    2a54:	013903a1 	teqeq	r9, r1, lsr #7
    2a58:	64040000 	strvs	r0, [r4], #-0
    2a5c:	06000001 	streq	r0, [r0], -r1
    2a60:	00002458 	andeq	r2, r0, r8, asr r4
    2a64:	00730107 	rsbseq	r0, r3, r7, lsl #2
    2a68:	bc060000 	stclt	0, cr0, [r6], {-0}
    2a6c:	0001ac06 	andeq	sl, r1, r6, lsl #24
    2a70:	22960700 	addscs	r0, r6, #0, 14
    2a74:	07000000 	streq	r0, [r0, -r0]
    2a78:	00002042 	andeq	r2, r0, r2, asr #32
    2a7c:	21ca0701 	biccs	r0, sl, r1, lsl #14
    2a80:	07020000 	streq	r0, [r2, -r0]
    2a84:	00001ca1 	andeq	r1, r0, r1, lsr #25
    2a88:	24b00703 	ldrtcs	r0, [r0], #1795	; 0x703
    2a8c:	07050000 	streq	r0, [r5, -r0]
    2a90:	0000219f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    2a94:	77030007 	strvc	r0, [r3, -r7]
    2a98:	06000024 	streq	r0, [r0], -r4, lsr #32
    2a9c:	017521c6 	cmneq	r5, r6, asr #3
    2aa0:	9f060000 	svcls	0x00060000
    2aa4:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    2aa8:	00007301 	andeq	r7, r0, r1, lsl #6
    2aac:	06f70600 	ldrbteq	r0, [r7], r0, lsl #12
    2ab0:	0000025b 	andeq	r0, r0, fp, asr r2
    2ab4:	00230907 	eoreq	r0, r3, r7, lsl #18
    2ab8:	9107ff00 	tstls	r7, r0, lsl #30	; <UNPREDICTABLE>
    2abc:	0000001e 	andeq	r0, r0, lr, lsl r0
    2ac0:	0021eb07 	eoreq	lr, r1, r7, lsl #22
    2ac4:	52070100 	andpl	r0, r7, #0, 2
    2ac8:	0200001c 	andeq	r0, r0, #28
    2acc:	0025b707 	eoreq	fp, r5, r7, lsl #14
    2ad0:	32070300 	andcc	r0, r7, #0, 6
    2ad4:	10000020 	andne	r0, r0, r0, lsr #32
    2ad8:	00231c07 	eoreq	r1, r3, r7, lsl #24
    2adc:	a5071300 	strge	r1, [r7, #-768]	; 0xfffffd00
    2ae0:	2000001e 	andcs	r0, r0, lr, lsl r0
    2ae4:	001e6c07 	andseq	r6, lr, r7, lsl #24
    2ae8:	c6074000 	strgt	r4, [r7], -r0
    2aec:	5000001c 	andpl	r0, r0, ip, lsl r0
    2af0:	0023c807 	eoreq	ip, r3, r7, lsl #16
    2af4:	a8076000 	stmdage	r7, {sp, lr}
    2af8:	70000023 	andvc	r0, r0, r3, lsr #32
    2afc:	0020b307 	eoreq	fp, r0, r7, lsl #6
    2b00:	47074100 	strmi	r4, [r7, -r0, lsl #2]
    2b04:	5100001f 	tstpl	r0, pc, lsl r0
    2b08:	001d4d07 	andseq	r4, sp, r7, lsl #26
    2b0c:	39076100 	stmdbcc	r7, {r8, sp, lr}
    2b10:	7100001d 	tstvc	r0, sp, lsl r0
    2b14:	00234d07 	eoreq	r4, r3, r7, lsl #26
    2b18:	56074200 	strpl	r4, [r7], -r0, lsl #4
    2b1c:	52000021 	andpl	r0, r0, #33	; 0x21
    2b20:	001ff907 	andseq	pc, pc, r7, lsl #18
    2b24:	ae076200 	cdpge	2, 0, cr6, cr7, cr0, {0}
    2b28:	7200001f 	andvc	r0, r0, #31
    2b2c:	00201f07 	eoreq	r1, r0, r7, lsl #30
    2b30:	e4074300 	str	r4, [r7], #-768	; 0xfffffd00
    2b34:	53000023 	movwpl	r0, #35	; 0x23
    2b38:	001c3f07 	andseq	r3, ip, r7, lsl #30
    2b3c:	0c076300 	stceq	3, cr6, [r7], {-0}
    2b40:	73000020 	movwvc	r0, #32
    2b44:	1fd80800 	svcne	0x00d80800
    2b48:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    2b4c:	01b82101 			; <UNDEFINED> instruction: 0x01b82101
    2b50:	ca090000 	bgt	242b58 <__core1_unwind_stub-0xdbd4a8>
    2b54:	14000024 	strne	r0, [r0], #-36	; 0xffffffdc
    2b58:	1005cf06 	andne	ip, r5, r6, lsl #30
    2b5c:	000002e5 	andeq	r0, r0, r5, ror #5
    2b60:	0061760a 	rsbeq	r7, r1, sl, lsl #12
    2b64:	1a05d106 	bne	176f84 <__core1_unwind_stub-0xe8907c>
    2b68:	000002e5 	andeq	r0, r0, r5, ror #5
    2b6c:	61700a00 	cmnvs	r0, r0, lsl #20
    2b70:	05d50600 	ldrbeq	r0, [r5, #1536]	; 0x600
    2b74:	0002e51a 	andeq	lr, r2, sl, lsl r5
    2b78:	4f0b0400 	svcmi	0x000b0400
    2b7c:	06000030 			; <UNDEFINED> instruction: 0x06000030
    2b80:	811a05da 			; <UNDEFINED> instruction: 0x811a05da
    2b84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2b88:	0021e40b 	eoreq	lr, r1, fp, lsl #8
    2b8c:	05de0600 	ldrbeq	r0, [lr, #1536]	; 0x600
    2b90:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    2b94:	3d0b0c00 	stccc	12, cr0, [fp, #-0]
    2b98:	06000024 	streq	r0, [r0], -r4, lsr #32
    2b9c:	5b1a05df 	blpl	684320 <__core1_unwind_stub-0x97bce0>
    2ba0:	0d000002 	stceq	0, cr0, [r0, #-8]
    2ba4:	0022780b 	eoreq	r7, r2, fp, lsl #16
    2ba8:	05e40600 	strbeq	r0, [r4, #1536]!	; 0x600
    2bac:	0000d71a 	andeq	sp, r0, sl, lsl r7
    2bb0:	c70b0e00 	strgt	r0, [fp, -r0, lsl #28]
    2bb4:	06000020 	streq	r0, [r0], -r0, lsr #32
    2bb8:	2d1a05e5 	cfldr32cs	mvfx0, [sl, #-916]	; 0xfffffc6c
    2bbc:	0f000001 	svceq	0x00000001
    2bc0:	0023720b 	eoreq	r7, r3, fp, lsl #4
    2bc4:	05e80600 	strbeq	r0, [r8, #1536]!	; 0x600
    2bc8:	0001021a 	andeq	r0, r1, sl, lsl r2
    2bcc:	0c001000 	stceq	0, cr1, [r0], {-0}
    2bd0:	24df0804 	ldrbcs	r0, [pc], #2052	; 2bd8 <__core1_unwind_stub-0xffd428>
    2bd4:	ec060000 	stc	0, cr0, [r6], {-0}
    2bd8:	02680305 	rsbeq	r0, r8, #335544320	; 0x14000000
    2bdc:	e7040000 	str	r0, [r4, -r0]
    2be0:	08000002 	stmdaeq	r0, {r1}
    2be4:	0000250b 	andeq	r2, r0, fp, lsl #10
    2be8:	11060b06 	tstne	r6, r6, lsl #22
    2bec:	00000306 	andeq	r0, r0, r6, lsl #6
    2bf0:	030c040d 	movweq	r0, #50189	; 0xc40d
    2bf4:	e50e0000 	str	r0, [lr, #-0]
    2bf8:	20000002 	andcs	r0, r0, r2
    2bfc:	0f000003 	svceq	0x00000003
    2c00:	00000038 	andeq	r0, r0, r8, lsr r0
    2c04:	0002e50f 	andeq	lr, r2, pc, lsl #10
    2c08:	1f090000 	svcne	0x00090000
    2c0c:	10000025 	andne	r0, r0, r5, lsr #32
    2c10:	10067b06 	andne	r7, r6, r6, lsl #22
    2c14:	00000366 	andeq	r0, r0, r6, ror #6
    2c18:	0061760a 	rsbeq	r7, r1, sl, lsl #12
    2c1c:	12067d06 	andne	r7, r6, #384	; 0x180
    2c20:	00000366 	andeq	r0, r0, r6, ror #6
    2c24:	304f0b00 	subcc	r0, pc, r0, lsl #22
    2c28:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    2c2c:	002c1206 	eoreq	r1, ip, r6, lsl #4
    2c30:	0b040000 	bleq	102c38 <__core1_unwind_stub-0xefd3c8>
    2c34:	0000256e 	andeq	r2, r0, lr, ror #10
    2c38:	0f068006 	svceq	0x00068006
    2c3c:	000000a0 	andeq	r0, r0, r0, lsr #1
    2c40:	22f50b08 	rscscs	r0, r5, #8, 22	; 0x2000
    2c44:	81060000 	mrshi	r0, (UNDEF: 6)
    2c48:	00810f06 	addeq	r0, r1, r6, lsl #30
    2c4c:	000c0000 	andeq	r0, ip, r0
    2c50:	0373040d 	cmneq	r3, #218103808	; 0xd000000
    2c54:	01050000 	mrseq	r0, (UNDEF: 5)
    2c58:	00040908 	andeq	r0, r4, r8, lsl #18
    2c5c:	036c0400 	cmneq	ip, #0, 8
    2c60:	3b080000 	blcc	202c68 <__core1_unwind_stub-0xdfd398>
    2c64:	06000025 	streq	r0, [r0], -r5, lsr #32
    2c68:	20030683 	andcs	r0, r3, r3, lsl #13
    2c6c:	08000003 	stmdaeq	r0, {r0, r1}
    2c70:	00000c88 	andeq	r0, r0, r8, lsl #25
    2c74:	17015e03 	strne	r5, [r1, -r3, lsl #28]
    2c78:	0000003d 	andeq	r0, r0, sp, lsr r0
    2c7c:	00305503 	eorseq	r5, r0, r3, lsl #10
    2c80:	0e2e0700 	cdpeq	7, 2, cr0, cr14, cr0, {0}
    2c84:	0000006c 	andeq	r0, r0, ip, rrx
    2c88:	000add03 	andeq	sp, sl, r3, lsl #26
    2c8c:	0e740700 	cdpeq	7, 7, cr0, cr4, cr0, {0}
    2c90:	0000006c 	andeq	r0, r0, ip, rrx
    2c94:	a5070410 	strge	r0, [r7, #-1040]	; 0xfffffbf0
    2c98:	0003cc03 	andeq	ip, r3, r3, lsl #24
    2c9c:	023a1100 	eorseq	r1, sl, #0, 2
    2ca0:	a7070000 	strge	r0, [r7, -r0]
    2ca4:	0003850c 	andeq	r8, r3, ip, lsl #10
    2ca8:	0ae51100 	beq	ff9470b0 <__shm_end__+0xbf9470b0>
    2cac:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    2cb0:	0003cc13 	andeq	ip, r3, r3, lsl ip
    2cb4:	73120000 	tstvc	r2, #0
    2cb8:	dc000000 	stcle	0, cr0, [r0], {-0}
    2cbc:	13000003 	movwne	r0, #3
    2cc0:	0000003d 	andeq	r0, r0, sp, lsr r0
    2cc4:	08140003 	ldmdaeq	r4, {r0, r1}
    2cc8:	0009a207 	andeq	sl, r9, r7, lsl #4
    2ccc:	15000004 	strne	r0, [r0, #-4]
    2cd0:	00000a69 	andeq	r0, r0, r9, ror #20
    2cd4:	2507a407 	strcs	sl, [r7, #-1031]	; 0xfffffbf9
    2cd8:	00000000 	andeq	r0, r0, r0
    2cdc:	00000b15 	andeq	r0, r0, r5, lsl fp
    2ce0:	05a90700 	streq	r0, [r9, #1792]!	; 0x700
    2ce4:	000003aa 	andeq	r0, r0, sl, lsr #7
    2ce8:	20030004 	andcs	r0, r3, r4
    2cec:	0700000c 	streq	r0, [r0, -ip]
    2cf0:	03dc03aa 	bicseq	r0, ip, #-1476395006	; 0xa8000002
    2cf4:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    2cf8:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2cfc:	00921916 	addseq	r1, r2, r6, lsl r9
    2d00:	b3030000 	movwlt	r0, #12288	; 0x3000
    2d04:	09000006 	stmdbeq	r0, {r1, r2}
    2d08:	00250d0c 	eoreq	r0, r5, ip, lsl #26
    2d0c:	c7030000 	strgt	r0, [r3, -r0]
    2d10:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2d14:	04181b23 	ldreq	r1, [r8], #-2851	; 0xfffff4dd
    2d18:	08160000 	ldmdaeq	r6, {}	; <UNPREDICTABLE>
    2d1c:	18000007 	stmdane	r0, {r0, r1, r2}
    2d20:	8a083408 	bhi	20fd48 <__core1_unwind_stub-0xdf02b8>
    2d24:	15000004 	strne	r0, [r0, #-4]
    2d28:	00000a34 	andeq	r0, r0, r4, lsr sl
    2d2c:	8a133608 	bhi	4d0554 <__core1_unwind_stub-0xb2faac>
    2d30:	00000004 	andeq	r0, r0, r4
    2d34:	006b5f17 	rsbeq	r5, fp, r7, lsl pc
    2d38:	25073708 	strcs	r3, [r7, #-1800]	; 0xfffff8f8
    2d3c:	04000000 	streq	r0, [r0], #-0
    2d40:	00076115 	andeq	r6, r7, r5, lsl r1
    2d44:	0b370800 	bleq	dc4d4c <__core1_unwind_stub-0x23b2b4>
    2d48:	00000025 	andeq	r0, r0, r5, lsr #32
    2d4c:	08bf1508 	ldmeq	pc!, {r3, r8, sl, ip}	; <UNPREDICTABLE>
    2d50:	37080000 	strcc	r0, [r8, -r0]
    2d54:	00002514 	andeq	r2, r0, r4, lsl r5
    2d58:	01150c00 	tsteq	r5, r0, lsl #24
    2d5c:	08000006 	stmdaeq	r0, {r1, r2}
    2d60:	00251b37 	eoreq	r1, r5, r7, lsr fp
    2d64:	17100000 	ldrne	r0, [r0, -r0]
    2d68:	0800785f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    2d6c:	04900b38 	ldreq	r0, [r0], #2872	; 0xb38
    2d70:	00140000 	andseq	r0, r4, r0
    2d74:	0430040d 	ldrteq	r0, [r0], #-1037	; 0xfffffbf3
    2d78:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2d7c:	a0000004 	andge	r0, r0, r4
    2d80:	13000004 	movwne	r0, #4
    2d84:	0000003d 	andeq	r0, r0, sp, lsr r0
    2d88:	40160000 	andsmi	r0, r6, r0
    2d8c:	24000001 	strcs	r0, [r0], #-1
    2d90:	23083c08 	movwcs	r3, #35848	; 0x8c08
    2d94:	15000005 	strne	r0, [r0, #-5]
    2d98:	0000015c 	andeq	r0, r0, ip, asr r1
    2d9c:	25093e08 	strcs	r3, [r9, #-3592]	; 0xfffff1f8
    2da0:	00000000 	andeq	r0, r0, r0
    2da4:	000f8f15 	andeq	r8, pc, r5, lsl pc	; <UNPREDICTABLE>
    2da8:	093f0800 	ldmdbeq	pc!, {fp}	; <UNPREDICTABLE>
    2dac:	00000025 	andeq	r0, r0, r5, lsr #32
    2db0:	0eb11504 	cdpeq	5, 11, cr1, cr1, cr4, {0}
    2db4:	40080000 	andmi	r0, r8, r0
    2db8:	00002509 	andeq	r2, r0, r9, lsl #10
    2dbc:	fb150800 	blx	544dc6 <__core1_unwind_stub-0xabb23a>
    2dc0:	08000009 	stmdaeq	r0, {r0, r3}
    2dc4:	00250941 	eoreq	r0, r5, r1, asr #18
    2dc8:	150c0000 	strne	r0, [ip, #-0]
    2dcc:	0000038c 	andeq	r0, r0, ip, lsl #7
    2dd0:	25094208 	strcs	r4, [r9, #-520]	; 0xfffffdf8
    2dd4:	10000000 	andne	r0, r0, r0
    2dd8:	000de415 	andeq	lr, sp, r5, lsl r4
    2ddc:	09430800 	stmdbeq	r3, {fp}^
    2de0:	00000025 	andeq	r0, r0, r5, lsr #32
    2de4:	0a7b1514 	beq	1ec823c <__end__+0xeac21c>
    2de8:	44080000 	strmi	r0, [r8], #-0
    2dec:	00002509 	andeq	r2, r0, r9, lsl #10
    2df0:	a9151800 	ldmdbge	r5, {fp, ip}
    2df4:	0800000a 	stmdaeq	r0, {r1, r3}
    2df8:	00250945 	eoreq	r0, r5, r5, asr #18
    2dfc:	151c0000 	ldrne	r0, [ip, #-0]
    2e00:	00000f55 	andeq	r0, r0, r5, asr pc
    2e04:	25094608 	strcs	r4, [r9, #-1544]	; 0xfffff9f8
    2e08:	20000000 	andcs	r0, r0, r0
    2e0c:	02631800 	rsbeq	r1, r3, #0, 16
    2e10:	01080000 	mrseq	r0, (UNDEF: 8)
    2e14:	68084f08 	stmdavs	r8, {r3, r8, r9, sl, fp, lr}
    2e18:	15000005 	strne	r0, [r0, #-5]
    2e1c:	00000f41 	andeq	r0, r0, r1, asr #30
    2e20:	680a5008 	stmdavs	sl, {r3, ip, lr}
    2e24:	00000005 	andeq	r0, r0, r5
    2e28:	000b6615 	andeq	r6, fp, r5, lsl r6
    2e2c:	09510800 	ldmdbeq	r1, {fp}^
    2e30:	00000568 	andeq	r0, r0, r8, ror #10
    2e34:	0dd41980 	vldreq.16	s3, [r4, #256]	; 0x100	; <UNPREDICTABLE>
    2e38:	53080000 	movwpl	r0, #32768	; 0x8000
    2e3c:	00040c0a 	andeq	r0, r4, sl, lsl #24
    2e40:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2e44:	00000e10 	andeq	r0, r0, r0, lsl lr
    2e48:	0c0a5608 	stceq	6, cr5, [sl], {8}
    2e4c:	04000004 	streq	r0, [r0], #-4
    2e50:	e5120001 	ldr	r0, [r2, #-1]
    2e54:	78000002 	stmdavc	r0, {r1}
    2e58:	13000005 	movwne	r0, #5
    2e5c:	0000003d 	andeq	r0, r0, sp, lsr r0
    2e60:	5418001f 	ldrpl	r0, [r8], #-31	; 0xffffffe1
    2e64:	9000000a 	andls	r0, r0, sl
    2e68:	08620801 	stmdaeq	r2!, {r0, fp}^
    2e6c:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    2e70:	000a3415 	andeq	r3, sl, r5, lsl r4
    2e74:	12630800 	rsbne	r0, r3, #0, 16
    2e78:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    2e7c:	0e041500 	cfsh32eq	mvfx1, mvfx4, #0
    2e80:	64080000 	strvs	r0, [r8], #-0
    2e84:	00002506 	andeq	r2, r0, r6, lsl #10
    2e88:	93150400 	tstls	r5, #0, 8
    2e8c:	08000004 	stmdaeq	r0, {r2}
    2e90:	05c10966 	strbeq	r0, [r1, #2406]	; 0x966
    2e94:	15080000 	strne	r0, [r8, #-0]
    2e98:	00000263 	andeq	r0, r0, r3, ror #4
    2e9c:	231e6708 	tstcs	lr, #8, 14	; 0x200000
    2ea0:	88000005 	stmdahi	r0, {r0, r2}
    2ea4:	78040d00 	stmdavc	r4, {r8, sl, fp}
    2ea8:	12000005 	andne	r0, r0, #5
    2eac:	000005d1 	ldrdeq	r0, [r0], -r1
    2eb0:	000005d1 	ldrdeq	r0, [r0], -r1
    2eb4:	00003d13 	andeq	r3, r0, r3, lsl sp
    2eb8:	0d001f00 	stceq	15, cr1, [r0, #-0]
    2ebc:	0005d704 	andeq	sp, r5, r4, lsl #14
    2ec0:	09161a00 	ldmdbeq	r6, {r9, fp, ip}
    2ec4:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2ec8:	00087a08 	andeq	r7, r8, r8, lsl #20
    2ecc:	15000006 	strne	r0, [r0, #-6]
    2ed0:	00000ba5 	andeq	r0, r0, r5, lsr #23
    2ed4:	00117b08 	andseq	r7, r1, r8, lsl #22
    2ed8:	00000006 	andeq	r0, r0, r6
    2edc:	00304e15 	eorseq	r4, r0, r5, lsl lr
    2ee0:	067c0800 	ldrbteq	r0, [ip], -r0, lsl #16
    2ee4:	00000025 	andeq	r0, r0, r5, lsr #32
    2ee8:	040d0004 	streq	r0, [sp], #-4
    2eec:	00000073 	andeq	r0, r0, r3, ror r0
    2ef0:	00068116 	andeq	r8, r6, r6, lsl r1
    2ef4:	ba086800 	blt	21cefc <__core1_unwind_stub-0xde3104>
    2ef8:	00074908 	andeq	r4, r7, r8, lsl #18
    2efc:	705f1700 	subsvc	r1, pc, r0, lsl #14
    2f00:	12bb0800 	adcsne	r0, fp, #0, 16
    2f04:	00000600 	andeq	r0, r0, r0, lsl #12
    2f08:	725f1700 	subsvc	r1, pc, #0, 14
    2f0c:	07bc0800 	ldreq	r0, [ip, r0, lsl #16]!
    2f10:	00000025 	andeq	r0, r0, r5, lsr #32
    2f14:	775f1704 	ldrbvc	r1, [pc, -r4, lsl #14]
    2f18:	07bd0800 	ldreq	r0, [sp, r0, lsl #16]!
    2f1c:	00000025 	andeq	r0, r0, r5, lsr #32
    2f20:	0a3a1508 	beq	e88348 <__core1_unwind_stub-0x177cb8>
    2f24:	be080000 	cdplt	0, 0, cr0, cr8, cr0, {0}
    2f28:	00005909 	andeq	r5, r0, r9, lsl #18
    2f2c:	5d150c00 	ldcpl	12, cr0, [r5, #-0]
    2f30:	08000002 	stmdaeq	r0, {r1}
    2f34:	005909bf 	ldrheq	r0, [r9], #-159	; 0xffffff61
    2f38:	170e0000 	strne	r0, [lr, -r0]
    2f3c:	0066625f 	rsbeq	r6, r6, pc, asr r2
    2f40:	d811c008 	ldmdale	r1, {r3, lr, pc}
    2f44:	10000005 	andne	r0, r0, r5
    2f48:	000df615 	andeq	pc, sp, r5, lsl r6	; <UNPREDICTABLE>
    2f4c:	07c10800 	strbeq	r0, [r1, r0, lsl #16]
    2f50:	00000025 	andeq	r0, r0, r5, lsr #32
    2f54:	05e41518 	strbeq	r1, [r4, #1304]!	; 0x518
    2f58:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    2f5c:	0002e50a 	andeq	lr, r2, sl, lsl #10
    2f60:	39151c00 	ldmdbcc	r5, {sl, fp, ip}
    2f64:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    2f68:	08c11dca 	stmiaeq	r1, {r1, r3, r6, r7, r8, sl, fp, ip}^
    2f6c:	15200000 	strne	r0, [r0, #-0]!
    2f70:	0000117d 	andeq	r1, r0, sp, ror r1
    2f74:	e51dcc08 	ldr	ip, [sp, #-3080]	; 0xfffff3f8
    2f78:	24000008 	strcs	r0, [r0], #-8
    2f7c:	000ac615 	andeq	ip, sl, r5, lsl r6
    2f80:	0dcf0800 	stcleq	8, cr0, [pc]	; 2f88 <__core1_unwind_stub-0xffd078>
    2f84:	00000909 	andeq	r0, r0, r9, lsl #18
    2f88:	2b1e1528 	blcs	788430 <__core1_unwind_stub-0x877bd0>
    2f8c:	d0080000 	andle	r0, r8, r0
    2f90:	00092309 	andeq	r2, r9, r9, lsl #6
    2f94:	5f172c00 	svcpl	0x00172c00
    2f98:	08006275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
    2f9c:	05d811d3 	ldrbeq	r1, [r8, #467]	; 0x1d3
    2fa0:	17300000 	ldrne	r0, [r0, -r0]!
    2fa4:	0070755f 	rsbseq	r7, r0, pc, asr r5
    2fa8:	0012d408 	andseq	sp, r2, r8, lsl #8
    2fac:	38000006 	stmdacc	r0, {r1, r2}
    2fb0:	72755f17 	rsbsvc	r5, r5, #23, 30	; 0x5c
    2fb4:	07d50800 	ldrbeq	r0, [r5, r0, lsl #16]
    2fb8:	00000025 	andeq	r0, r0, r5, lsr #32
    2fbc:	0a0a153c 	beq	2884b4 <__core1_unwind_stub-0xd77b4c>
    2fc0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    2fc4:	00092911 	andeq	r2, r9, r1, lsl r9
    2fc8:	56154000 	ldrpl	r4, [r5], -r0
    2fcc:	08000001 	stmdaeq	r0, {r0}
    2fd0:	093911d9 	ldmdbeq	r9!, {r0, r3, r4, r6, r7, r8, ip}
    2fd4:	17430000 	strbne	r0, [r3, -r0]
    2fd8:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    2fdc:	d811dc08 	ldmdale	r1, {r3, sl, fp, ip, lr, pc}
    2fe0:	44000005 	strmi	r0, [r0], #-5
    2fe4:	002eb715 	eoreq	fp, lr, r5, lsl r7
    2fe8:	07df0800 	ldrbeq	r0, [pc, r0, lsl #16]
    2fec:	00000025 	andeq	r0, r0, r5, lsr #32
    2ff0:	0627154c 	strteq	r1, [r7], -ip, asr #10
    2ff4:	e0080000 	and	r0, r8, r0
    2ff8:	0003920a 	andeq	r9, r3, sl, lsl #4
    2ffc:	12155000 	andsne	r5, r5, #0
    3000:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    3004:	076712e3 	strbeq	r1, [r7, -r3, ror #5]!
    3008:	15540000 	ldrbne	r0, [r4, #-0]
    300c:	000001ab 	andeq	r0, r0, fp, lsr #3
    3010:	240ce708 	strcs	lr, [ip], #-1800	; 0xfffff8f8
    3014:	58000004 	stmdapl	r0, {r2}
    3018:	000a2615 	andeq	r2, sl, r5, lsl r6
    301c:	0ee90800 	cdpeq	8, 14, cr0, cr9, cr0, {0}
    3020:	00000400 	andeq	r0, r0, r0, lsl #8
    3024:	0694155c 			; <UNDEFINED> instruction: 0x0694155c
    3028:	ea080000 	b	203030 <__core1_unwind_stub-0xdfcfd0>
    302c:	00002509 	andeq	r2, r0, r9, lsl #10
    3030:	0e006400 	cfcpyseq	mvf6, mvf0
    3034:	00000025 	andeq	r0, r0, r5, lsr #32
    3038:	00000767 	andeq	r0, r0, r7, ror #14
    303c:	0007670f 	andeq	r6, r7, pc, lsl #14
    3040:	02e50f00 	rsceq	r0, r5, #0, 30
    3044:	bb0f0000 	bllt	3c304c <__core1_unwind_stub-0xc3cfb4>
    3048:	0f000008 	svceq	0x00000008
    304c:	00000025 	andeq	r0, r0, r5, lsr #32
    3050:	72040d00 	andvc	r0, r4, #0, 26
    3054:	04000007 	streq	r0, [r0], #-7
    3058:	00000767 	andeq	r0, r0, r7, ror #14
    305c:	0004461b 	andeq	r4, r4, fp, lsl r6
    3060:	08042800 	stmdaeq	r4, {fp, sp}
    3064:	bb080265 	bllt	203a00 <__core1_unwind_stub-0xdfc600>
    3068:	0b000008 	bleq	3090 <__core1_unwind_stub-0xffcf70>
    306c:	00000992 	muleq	r0, r2, r9
    3070:	07026708 	streq	r6, [r2, -r8, lsl #14]
    3074:	00000025 	andeq	r0, r0, r5, lsr #32
    3078:	05220b00 	streq	r0, [r2, #-2816]!	; 0xfffff500
    307c:	6c080000 	stcvs	0, cr0, [r8], {-0}
    3080:	09950b02 	ldmibeq	r5, {r1, r8, r9, fp}
    3084:	0b040000 	bleq	10308c <__core1_unwind_stub-0xefcf74>
    3088:	00000b87 	andeq	r0, r0, r7, lsl #23
    308c:	14026c08 	strne	r6, [r2], #-3080	; 0xfffff3f8
    3090:	00000995 	muleq	r0, r5, r9
    3094:	0a100b08 	beq	405cbc <__core1_unwind_stub-0xbfa344>
    3098:	6c080000 	stcvs	0, cr0, [r8], {-0}
    309c:	09951e02 	ldmibeq	r5, {r1, r9, sl, fp, ip}
    30a0:	0b0c0000 	bleq	3030a8 <__core1_unwind_stub-0xcfcf58>
    30a4:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    30a8:	08026e08 	stmdaeq	r2, {r3, r9, sl, fp, sp, lr}
    30ac:	00000025 	andeq	r0, r0, r5, lsr #32
    30b0:	07fa0b10 			; <UNDEFINED> instruction: 0x07fa0b10
    30b4:	6f080000 	svcvs	0x00080000
    30b8:	0b950802 	bleq	fe5450c8 <__shm_end__+0xbe5450c8>
    30bc:	0b140000 	bleq	5030c4 <__core1_unwind_stub-0xafcf3c>
    30c0:	0000042d 	andeq	r0, r0, sp, lsr #8
    30c4:	07027208 	streq	r7, [r2, -r8, lsl #4]
    30c8:	00000025 	andeq	r0, r0, r5, lsr #32
    30cc:	0e410b30 	vmoveq.8	d1[1], r0
    30d0:	73080000 	movwvc	r0, #32768	; 0x8000
    30d4:	0baa1602 	bleq	fea888e4 <__shm_end__+0xbea888e4>
    30d8:	0b340000 	bleq	d030e0 <__core1_unwind_stub-0x2fcf20>
    30dc:	00000689 	andeq	r0, r0, r9, lsl #13
    30e0:	07027508 	streq	r7, [r2, -r8, lsl #10]
    30e4:	00000025 	andeq	r0, r0, r5, lsr #32
    30e8:	077d0b38 			; <UNDEFINED> instruction: 0x077d0b38
    30ec:	77080000 	strvc	r0, [r8, -r0]
    30f0:	0bbb0a02 	bleq	feec5900 <__shm_end__+0xbeec5900>
    30f4:	0b3c0000 	bleq	f030fc <__core1_unwind_stub-0xfcf04>
    30f8:	00000e51 	andeq	r0, r0, r1, asr lr
    30fc:	13027a08 	movwne	r7, #10760	; 0x2a08
    3100:	0000048a 	andeq	r0, r0, sl, lsl #9
    3104:	02f10b40 	rscseq	r0, r1, #64, 22	; 0x10000
    3108:	7b080000 	blvc	203110 <__core1_unwind_stub-0xdfcef0>
    310c:	00250702 	eoreq	r0, r5, r2, lsl #14
    3110:	0b440000 	bleq	1103118 <__end__+0xe70f8>
    3114:	0000066f 	andeq	r0, r0, pc, ror #12
    3118:	13027c08 	movwne	r7, #11272	; 0x2c08
    311c:	0000048a 	andeq	r0, r0, sl, lsl #9
    3120:	08a90b48 	stmiaeq	r9!, {r3, r6, r8, r9, fp}
    3124:	7d080000 	stcvc	0, cr0, [r8, #-0]
    3128:	0bc11402 	bleq	ff048138 <__shm_end__+0xbf048138>
    312c:	0b4c0000 	bleq	1303134 <__end__+0x2e7114>
    3130:	00000110 	andeq	r0, r0, r0, lsl r1
    3134:	07028008 	streq	r8, [r2, -r8]
    3138:	00000025 	andeq	r0, r0, r5, lsr #32
    313c:	062f0b50 			; <UNDEFINED> instruction: 0x062f0b50
    3140:	81080000 	mrshi	r0, (UNDEF: 8)
    3144:	08bb0902 	ldmeq	fp!, {r1, r8, fp}
    3148:	0b540000 	bleq	1503150 <__end__+0x4e7130>
    314c:	00000a05 	andeq	r0, r0, r5, lsl #20
    3150:	0702a408 	streq	sl, [r2, -r8, lsl #8]
    3154:	00000b70 	andeq	r0, r0, r0, ror fp
    3158:	0a541c58 	beq	150a2c0 <__end__+0x4ee2a0>
    315c:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
    3160:	05bb1302 	ldreq	r1, [fp, #770]!	; 0x302
    3164:	01480000 	mrseq	r0, (UNDEF: 72)
    3168:	0007871c 	andeq	r8, r7, ip, lsl r7
    316c:	02a90800 	adceq	r0, r9, #0, 16
    3170:	00057812 	andeq	r7, r5, r2, lsl r8
    3174:	1c014c00 	stcne	12, cr4, [r1], {-0}
    3178:	0000061d 	andeq	r0, r0, sp, lsl r6
    317c:	0c02ad08 	stceq	13, cr10, [r2], {8}
    3180:	00000bd2 	ldrdeq	r0, [r0], -r2
    3184:	341c02dc 	ldrcc	r0, [ip], #-732	; 0xfffffd24
    3188:	08000008 	stmdaeq	r0, {r3}
    318c:	561002b2 			; <UNDEFINED> instruction: 0x561002b2
    3190:	e0000009 	and	r0, r0, r9
    3194:	00131c02 	andseq	r1, r3, r2, lsl #24
    3198:	b4080000 	strlt	r0, [r8], #-0
    319c:	0bde0a02 	bleq	ff7859ac <__shm_end__+0xbf7859ac>
    31a0:	02ec0000 	rsceq	r0, ip, #0
    31a4:	6c040d00 	stcvs	13, cr0, [r4], {-0}
    31a8:	0d000003 	stceq	0, cr0, [r0, #-12]
    31ac:	00074904 	andeq	r4, r7, r4, lsl #18
    31b0:	00250e00 	eoreq	r0, r5, r0, lsl #28
    31b4:	08e50000 	stmiaeq	r5!, {}^	; <UNPREDICTABLE>
    31b8:	670f0000 	strvs	r0, [pc, -r0]
    31bc:	0f000007 	svceq	0x00000007
    31c0:	000002e5 	andeq	r0, r0, r5, ror #5
    31c4:	0003660f 	andeq	r6, r3, pc, lsl #12
    31c8:	00250f00 	eoreq	r0, r5, r0, lsl #30
    31cc:	0d000000 	stceq	0, cr0, [r0, #-0]
    31d0:	0008c704 	andeq	ip, r8, r4, lsl #14
    31d4:	039e0e00 	orrseq	r0, lr, #0, 28
    31d8:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    31dc:	670f0000 	strvs	r0, [pc, -r0]
    31e0:	0f000007 	svceq	0x00000007
    31e4:	000002e5 	andeq	r0, r0, r5, ror #5
    31e8:	00039e0f 	andeq	r9, r3, pc, lsl #28
    31ec:	00250f00 	eoreq	r0, r5, r0, lsl #30
    31f0:	0d000000 	stceq	0, cr0, [r0, #-0]
    31f4:	0008eb04 	andeq	lr, r8, r4, lsl #22
    31f8:	00250e00 	eoreq	r0, r5, r0, lsl #28
    31fc:	09230000 	stmdbeq	r3!, {}	; <UNPREDICTABLE>
    3200:	670f0000 	strvs	r0, [pc, -r0]
    3204:	0f000007 	svceq	0x00000007
    3208:	000002e5 	andeq	r0, r0, r5, ror #5
    320c:	0f040d00 	svceq	0x00040d00
    3210:	12000009 	andne	r0, r0, #9
    3214:	00000073 	andeq	r0, r0, r3, ror r0
    3218:	00000939 	andeq	r0, r0, r9, lsr r9
    321c:	00003d13 	andeq	r3, r0, r3, lsl sp
    3220:	12000200 	andne	r0, r0, #0, 4
    3224:	00000073 	andeq	r0, r0, r3, ror r0
    3228:	00000949 	andeq	r0, r0, r9, asr #18
    322c:	00003d13 	andeq	r3, r0, r3, lsl sp
    3230:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3234:	00000c12 	andeq	r0, r0, r2, lsl ip
    3238:	1a012408 	bne	4c260 <__core1_unwind_stub-0xfb3da0>
    323c:	00000606 	andeq	r0, r0, r6, lsl #12
    3240:	0008b909 	andeq	fp, r8, r9, lsl #18
    3244:	28080c00 	stmdacs	r8, {sl, fp}
    3248:	098f0801 	stmibeq	pc, {r0, fp}	; <UNPREDICTABLE>
    324c:	340b0000 	strcc	r0, [fp], #-0
    3250:	0800000a 	stmdaeq	r0, {r1, r3}
    3254:	8f11012a 	svchi	0x0011012a
    3258:	00000009 	andeq	r0, r0, r9
    325c:	00082d0b 	andeq	r2, r8, fp, lsl #26
    3260:	012b0800 			; <UNDEFINED> instruction: 0x012b0800
    3264:	00002507 	andeq	r2, r0, r7, lsl #10
    3268:	b30b0400 	movwlt	r0, #46080	; 0xb400
    326c:	08000008 	stmdaeq	r0, {r3}
    3270:	950b012c 	strls	r0, [fp, #-300]	; 0xfffffed4
    3274:	08000009 	stmdaeq	r0, {r0, r3}
    3278:	56040d00 	strpl	r0, [r4], -r0, lsl #26
    327c:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    3280:	00094904 	andeq	r4, r9, r4, lsl #18
    3284:	0b7f0900 	bleq	1fc568c <__end__+0xfa966c>
    3288:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    328c:	d4080144 	strle	r0, [r8], #-324	; 0xfffffebc
    3290:	0b000009 	bleq	32bc <__core1_unwind_stub-0xffcd44>
    3294:	00000ac0 	andeq	r0, r0, r0, asr #21
    3298:	12014508 	andne	r4, r1, #8, 10	; 0x2000000
    329c:	000009d4 	ldrdeq	r0, [r0], -r4
    32a0:	01bf0b00 			; <UNDEFINED> instruction: 0x01bf0b00
    32a4:	46080000 	strmi	r0, [r8], -r0
    32a8:	09d41201 	ldmibeq	r4, {r0, r9, ip}^
    32ac:	0b060000 	bleq	1832b4 <__core1_unwind_stub-0xe7cd4c>
    32b0:	00000e8c 	andeq	r0, r0, ip, lsl #29
    32b4:	12014708 	andne	r4, r1, #8, 14	; 0x200000
    32b8:	0000007a 	andeq	r0, r0, sl, ror r0
    32bc:	7a12000c 	bvc	4832f4 <__core1_unwind_stub-0xb7cd0c>
    32c0:	e4000000 	str	r0, [r0], #-0
    32c4:	13000009 	movwne	r0, #9
    32c8:	0000003d 	andeq	r0, r0, sp, lsr r0
    32cc:	d01d0002 	andsle	r0, sp, r2
    32d0:	07028508 	streq	r8, [r2, -r8, lsl #10]
    32d4:	00000af9 	strdeq	r0, [r0], -r9
    32d8:	0003ce0b 	andeq	ip, r3, fp, lsl #28
    32dc:	02870800 	addeq	r0, r7, #0, 16
    32e0:	00003d18 	andeq	r3, r0, r8, lsl sp
    32e4:	ab0b0000 	blge	2c32ec <__core1_unwind_stub-0xd3cd14>
    32e8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    32ec:	bb120288 	bllt	483d14 <__core1_unwind_stub-0xb7c2ec>
    32f0:	04000008 	streq	r0, [r0], #-8
    32f4:	00002d0b 	andeq	r2, r0, fp, lsl #26
    32f8:	02890800 	addeq	r0, r9, #0, 16
    32fc:	000af910 	andeq	pc, sl, r0, lsl r9	; <UNPREDICTABLE>
    3300:	100b0800 	andne	r0, fp, r0, lsl #16
    3304:	08000003 	stmdaeq	r0, {r0, r1}
    3308:	a017028a 	andsge	r0, r7, sl, lsl #5
    330c:	24000004 	strcs	r0, [r0], #-4
    3310:	0008830b 	andeq	r8, r8, fp, lsl #6
    3314:	028b0800 	addeq	r0, fp, #0, 16
    3318:	0000250f 	andeq	r2, r0, pc, lsl #10
    331c:	2f0b4800 	svccs	0x000b4800
    3320:	0800000a 	stmdaeq	r0, {r1, r3}
    3324:	992c028c 	stmdbls	ip!, {r2, r3, r7, r9}
    3328:	50000000 	andpl	r0, r0, r0
    332c:	000c760b 	andeq	r7, ip, fp, lsl #12
    3330:	028d0800 	addeq	r0, sp, #0, 16
    3334:	00099b1a 	andeq	r9, r9, sl, lsl fp
    3338:	540b5800 	strpl	r5, [fp], #-2048	; 0xfffff800
    333c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    3340:	0016028e 	andseq	r0, r6, lr, lsl #5
    3344:	68000004 	stmdavs	r0, {r2}
    3348:	000afa0b 	andeq	pc, sl, fp, lsl #20
    334c:	028f0800 	addeq	r0, pc, #0, 16
    3350:	00040016 	andeq	r0, r4, r6, lsl r0
    3354:	180b7000 	stmdane	fp, {ip, sp, lr}
    3358:	0800000a 	stmdaeq	r0, {r1, r3}
    335c:	00160290 	mulseq	r6, r0, r2
    3360:	78000004 	stmdavc	r0, {r2}
    3364:	0001650b 	andeq	r6, r1, fp, lsl #10
    3368:	02910800 	addseq	r0, r1, #0, 16
    336c:	000b0910 	andeq	r0, fp, r0, lsl r9
    3370:	e30b8000 	movw	r8, #45056	; 0xb000
    3374:	08000006 	stmdaeq	r0, {r1, r2}
    3378:	19100292 	ldmdbne	r0, {r1, r4, r7, r9}
    337c:	8800000b 	stmdahi	r0, {r0, r1, r3}
    3380:	000f980b 	andeq	r9, pc, fp, lsl #16
    3384:	02930800 	addseq	r0, r3, #0, 16
    3388:	0000250f 	andeq	r2, r0, pc, lsl #10
    338c:	e30ba000 	movw	sl, #45056	; 0xb000
    3390:	08000002 	stmdaeq	r0, {r1}
    3394:	00160294 	mulseq	r6, r4, r2
    3398:	a4000004 	strge	r0, [r0], #-4
    339c:	000bb80b 	andeq	fp, fp, fp, lsl #16
    33a0:	02950800 	addseq	r0, r5, #0, 16
    33a4:	00040016 	andeq	r0, r4, r6, lsl r0
    33a8:	010bac00 	tsteq	fp, r0, lsl #24
    33ac:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    33b0:	00160296 	mulseq	r6, r6, r2
    33b4:	b4000004 	strlt	r0, [r0], #-4
    33b8:	0009ec0b 	andeq	lr, r9, fp, lsl #24
    33bc:	02970800 	addseq	r0, r7, #0, 16
    33c0:	00040016 	andeq	r0, r4, r6, lsl r0
    33c4:	450bbc00 	strmi	fp, [fp, #-3072]	; 0xfffff400
    33c8:	08000001 	stmdaeq	r0, {r0}
    33cc:	00160298 	mulseq	r6, r8, r2
    33d0:	c4000004 	strgt	r0, [r0], #-4
    33d4:	0009900b 	andeq	r9, r9, fp
    33d8:	02990800 	addseq	r0, r9, #0, 16
    33dc:	00002508 	andeq	r2, r0, r8, lsl #10
    33e0:	1200cc00 	andne	ip, r0, #0, 24
    33e4:	0000036c 	andeq	r0, r0, ip, ror #6
    33e8:	00000b09 	andeq	r0, r0, r9, lsl #22
    33ec:	00003d13 	andeq	r3, r0, r3, lsl sp
    33f0:	12001900 	andne	r1, r0, #0, 18
    33f4:	0000036c 	andeq	r0, r0, ip, ror #6
    33f8:	00000b19 	andeq	r0, r0, r9, lsl fp
    33fc:	00003d13 	andeq	r3, r0, r3, lsl sp
    3400:	12000700 	andne	r0, r0, #0, 14
    3404:	0000036c 	andeq	r0, r0, ip, ror #6
    3408:	00000b29 	andeq	r0, r0, r9, lsr #22
    340c:	00003d13 	andeq	r3, r0, r3, lsl sp
    3410:	1d001700 	stcne	7, cr1, [r0, #-0]
    3414:	029e08f0 	addseq	r0, lr, #240, 16	; 0xf00000
    3418:	000b5007 	andeq	r5, fp, r7
    341c:	0e180b00 	vnmlseq.f64	d0, d8, d0
    3420:	a1080000 	mrsge	r0, (UNDEF: 8)
    3424:	0b501b02 	bleq	140a034 <__end__+0x3ee014>
    3428:	0b000000 	bleq	3430 <__core1_unwind_stub-0xffcbd0>
    342c:	00000848 	andeq	r0, r0, r8, asr #16
    3430:	1802a208 	stmdane	r2, {r3, r9, sp, pc}
    3434:	00000b60 	andeq	r0, r0, r0, ror #22
    3438:	00120078 	andseq	r0, r2, r8, ror r0
    343c:	60000006 	andvs	r0, r0, r6
    3440:	1300000b 	movwne	r0, #11
    3444:	0000003d 	andeq	r0, r0, sp, lsr r0
    3448:	3d12001d 	ldccc	0, cr0, [r2, #-116]	; 0xffffff8c
    344c:	70000000 	andvc	r0, r0, r0
    3450:	1300000b 	movwne	r0, #11
    3454:	0000003d 	andeq	r0, r0, sp, lsr r0
    3458:	f01e001d 			; <UNDEFINED> instruction: 0xf01e001d
    345c:	03028308 	movweq	r8, #8968	; 0x2308
    3460:	00000b95 	muleq	r0, r5, fp
    3464:	0004461f 	andeq	r4, r4, pc, lsl r6
    3468:	029a0800 	addseq	r0, sl, #0, 16
    346c:	0009e40b 	andeq	lr, r9, fp, lsl #8
    3470:	01381f00 	teqeq	r8, r0, lsl #30
    3474:	a3080000 	movwge	r0, #32768	; 0x8000
    3478:	0b290b02 	bleq	a46088 <__core1_unwind_stub-0x5b9f78>
    347c:	12000000 	andne	r0, r0, #0
    3480:	0000036c 	andeq	r0, r0, ip, ror #6
    3484:	00000ba5 	andeq	r0, r0, r5, lsr #23
    3488:	00003d13 	andeq	r3, r0, r3, lsl sp
    348c:	20001800 	andcs	r1, r0, r0, lsl #16
    3490:	00000000 	andeq	r0, r0, r0
    3494:	0ba5040d 	bleq	fe9444d0 <__shm_end__+0xbe9444d0>
    3498:	bb210000 	bllt	8434a0 <__core1_unwind_stub-0x7bcb60>
    349c:	0f00000b 	svceq	0x0000000b
    34a0:	00000767 	andeq	r0, r0, r7, ror #14
    34a4:	b0040d00 	andlt	r0, r4, r0, lsl #26
    34a8:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    34ac:	00048a04 	andeq	r8, r4, r4, lsl #20
    34b0:	0bd22100 	bleq	ff48b8b8 <__shm_end__+0xbf48b8b8>
    34b4:	250f0000 	strcs	r0, [pc, #-0]	; 34bc <__core1_unwind_stub-0xffcb44>
    34b8:	00000000 	andeq	r0, r0, r0
    34bc:	0bd8040d 	bleq	ff6044f8 <__shm_end__+0xbf6044f8>
    34c0:	040d0000 	streq	r0, [sp], #-0
    34c4:	00000bc7 	andeq	r0, r0, r7, asr #23
    34c8:	00094912 	andeq	r4, r9, r2, lsl r9
    34cc:	000bee00 	andeq	lr, fp, r0, lsl #28
    34d0:	003d1300 	eorseq	r1, sp, r0, lsl #6
    34d4:	00020000 	andeq	r0, r2, r0
    34d8:	00045422 	andeq	r5, r4, r2, lsr #8
    34dc:	03330800 	teqeq	r3, #0, 16
    34e0:	00076717 	andeq	r6, r7, r7, lsl r7
    34e4:	044d2200 	strbeq	r2, [sp], #-512	; 0xfffffe00
    34e8:	34080000 	strcc	r0, [r8], #-0
    34ec:	076d1d03 	strbeq	r1, [sp, -r3, lsl #26]!
    34f0:	14030000 	strne	r0, [r3], #-0
    34f4:	0a00000c 	beq	352c <__core1_unwind_stub-0xffcad4>
    34f8:	09491042 	stmdbeq	r9, {r1, r6, ip}^
    34fc:	040d0000 	streq	r0, [sp], #-0
    3500:	00000c08 	andeq	r0, r0, r8, lsl #24
    3504:	00083c23 	andeq	r3, r8, r3, lsr #24
    3508:	0e360100 	rsfeqs	f0, f6, f0
    350c:	00000c14 	andeq	r0, r0, r4, lsl ip
    3510:	00084223 	andeq	r4, r8, r3, lsr #4
    3514:	0e370100 	rsfeqs	f0, f7, f0
    3518:	00000c14 	andeq	r0, r0, r4, lsl ip
    351c:	00217224 	eoreq	r7, r1, r4, lsr #4
    3520:	06030200 	streq	r0, [r3], -r0, lsl #4
    3524:	0000ac11 	andeq	sl, r0, r1, lsl ip
    3528:	00000000 	andeq	r0, r0, r0
    352c:	00004400 	andeq	r4, r0, r0, lsl #8
    3530:	5e9c0100 	fmlple	f0, f4, f0
    3534:	2500000c 	strcs	r0, [r0, #-12]
    3538:	000023db 	ldrdeq	r2, [r0], -fp
    353c:	4d060302 	stcmi	3, cr0, [r6, #-8]
    3540:	00000c5e 	andeq	r0, r0, lr, asr ip
    3544:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3548:	0378040d 	cmneq	r8, #218103808	; 0xd000000
    354c:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
    3550:	02000025 	andeq	r0, r0, #37	; 0x25
    3554:	ac1105d2 	cfldr32ge	mvfx0, [r1], {210}	; 0xd2
    3558:	00000000 	andeq	r0, r0, r0
    355c:	bc000000 	stclt	0, cr0, [r0], {-0}
    3560:	01000001 	tsteq	r0, r1
    3564:	000ce69c 	muleq	ip, ip, r6
    3568:	23db2500 	bicscs	r2, fp, #0, 10
    356c:	d2020000 	andle	r0, r2, #0
    3570:	0c5e4e05 	mrrceq	14, 0, r4, lr, cr5
    3574:	91020000 	mrsls	r0, (UNDEF: 2)
    3578:	22862564 	addcs	r2, r6, #100, 10	; 0x19000000
    357c:	d2020000 	andle	r0, r2, #0
    3580:	0ce66405 	cfstrdeq	mvd6, [r6], #20
    3584:	91020000 	mrsls	r0, (UNDEF: 2)
    3588:	22af2560 	adccs	r2, pc, #96, 10	; 0x18000000
    358c:	d2020000 	andle	r0, r2, #0
    3590:	0cec7605 	stcleq	6, cr7, [ip], #20
    3594:	91020000 	mrsls	r0, (UNDEF: 2)
    3598:	2282265c 	addcs	r2, r2, #92, 12	; 0x5c00000
    359c:	d4020000 	strle	r0, [r2], #-0
    35a0:	00a00f05 	adceq	r0, r0, r5, lsl #30
    35a4:	91020000 	mrsls	r0, (UNDEF: 2)
    35a8:	22ab2670 	adccs	r2, fp, #112, 12	; 0x7000000
    35ac:	d5020000 	strle	r0, [r2, #-0]
    35b0:	00810f05 	addeq	r0, r1, r5, lsl #30
    35b4:	91020000 	mrsls	r0, (UNDEF: 2)
    35b8:	03402774 	movteq	r2, #1908	; 0x774
    35bc:	d3260000 			; <UNDEFINED> instruction: 0xd3260000
    35c0:	0200001f 	andeq	r0, r0, #31
    35c4:	811205e2 	tsthi	r2, r2, ror #11
    35c8:	02000000 	andeq	r0, r0, #0
    35cc:	00006c91 	muleq	r0, r1, ip
    35d0:	00a0040d 	adceq	r0, r0, sp, lsl #8
    35d4:	040d0000 	streq	r0, [sp], #-0
    35d8:	00000081 	andeq	r0, r0, r1, lsl #1
    35dc:	001ec224 	andseq	ip, lr, r4, lsr #4
    35e0:	05b80200 	ldreq	r0, [r8, #512]!	; 0x200
    35e4:	0000ac11 	andeq	sl, r0, r1, lsl ip
    35e8:	00000000 	andeq	r0, r0, r0
    35ec:	0000e000 	andeq	lr, r0, r0
    35f0:	4d9c0100 	ldfmis	f0, [ip]
    35f4:	2500000d 	strcs	r0, [r0, #-13]
    35f8:	000023db 	ldrdeq	r2, [r0], -fp
    35fc:	4f05b802 	svcmi	0x0005b802
    3600:	00000c5e 	andeq	r0, r0, lr, asr ip
    3604:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
    3608:	02006176 	andeq	r6, r0, #-2147483619	; 0x8000001d
    360c:	4d6605b8 	cfstr64mi	mvdx0, [r6, #-736]!	; 0xfffffd20
    3610:	0200000d 	andeq	r0, r0, #13
    3614:	4f256891 	svcmi	0x00256891
    3618:	02000030 	andeq	r0, r0, #48	; 0x30
    361c:	2c7105b8 	cfldr64cs	mvdx0, [r1], #-736	; 0xfffffd20
    3620:	02000000 	andeq	r0, r0, #0
    3624:	d3266491 			; <UNDEFINED> instruction: 0xd3266491
    3628:	0200001f 	andeq	r0, r0, #31
    362c:	810e05ba 			; <UNDEFINED> instruction: 0x810e05ba
    3630:	02000000 	andeq	r0, r0, #0
    3634:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
    3638:	000d5304 	andeq	r5, sp, r4, lsl #6
    363c:	5c242900 			; <UNDEFINED> instruction: 0x5c242900
    3640:	0200001f 	andeq	r0, r0, #31
    3644:	a00b0573 	andge	r0, fp, r3, ror r5
    3648:	00000000 	andeq	r0, r0, r0
    364c:	84000000 	strhi	r0, [r0], #-0
    3650:	01000001 	tsteq	r0, r1
    3654:	000e039c 	muleq	lr, ip, r3
    3658:	61762800 	cmnvs	r6, r0, lsl #16
    365c:	05730200 	ldrbeq	r0, [r3, #-512]!	; 0xfffffe00
    3660:	000d4d29 	andeq	r4, sp, r9, lsr #26
    3664:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3668:	001de025 	andseq	lr, sp, r5, lsr #32
    366c:	05730200 	ldrbeq	r0, [r3, #-512]!	; 0xfffffe00
    3670:	000cec38 	andeq	lr, ip, r8, lsr ip
    3674:	60910200 	addsvs	r0, r1, r0, lsl #4
    3678:	001fd325 	andseq	sp, pc, r5, lsr #6
    367c:	05730200 	ldrbeq	r0, [r3, #-512]!	; 0xfffffe00
    3680:	000cec4e 	andeq	lr, ip, lr, asr #24
    3684:	5c910200 	lfmpl	f0, 4, [r1], {0}
    3688:	0061702a 	rsbeq	r7, r1, sl, lsr #32
    368c:	0f057502 	svceq	0x00057502
    3690:	000000a0 	andeq	r0, r0, r0, lsr #1
    3694:	2b749102 	blcs	1d27aa4 <__end__+0xd0ba84>
    3698:	00000000 	andeq	r0, r0, r0
    369c:	00000050 	andeq	r0, r0, r0, asr r0
    36a0:	00000dca 	andeq	r0, r0, sl, asr #27
    36a4:	0073662a 	rsbseq	r6, r3, sl, lsr #12
    36a8:	12058d02 	andne	r8, r5, #2, 26	; 0x80
    36ac:	00000081 	andeq	r0, r0, r1, lsl #1
    36b0:	00689102 	rsbeq	r9, r8, r2, lsl #2
    36b4:	0000002b 	andeq	r0, r0, fp, lsr #32
    36b8:	00006000 	andeq	r6, r0, r0
    36bc:	000de800 	andeq	lr, sp, r0, lsl #16
    36c0:	06282600 	strteq	r2, [r8], -r0, lsl #12
    36c4:	9a020000 	bls	836cc <__core1_unwind_stub-0xf7c934>
    36c8:	00811205 	addeq	r1, r1, r5, lsl #4
    36cc:	91020000 	mrsls	r0, (UNDEF: 2)
    36d0:	002c006c 	eoreq	r0, ip, ip, rrx
    36d4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    36d8:	26000000 	strcs	r0, [r0], -r0
    36dc:	00000628 	andeq	r0, r0, r8, lsr #12
    36e0:	1205a902 	andne	sl, r5, #32768	; 0x8000
    36e4:	00000081 	andeq	r0, r0, r1, lsl #1
    36e8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    36ec:	1d022400 	cfstrsne	mvf2, [r2, #-0]
    36f0:	34020000 	strcc	r0, [r2], #-0
    36f4:	00ac1105 	adceq	r1, ip, r5, lsl #2
    36f8:	384c0000 	stmdacc	ip, {}^	; <UNPREDICTABLE>
    36fc:	013c0100 	teqeq	ip, r0, lsl #2
    3700:	9c010000 	stcls	0, cr0, [r1], {-0}
    3704:	00000e67 	andeq	r0, r0, r7, ror #28
    3708:	00246d25 	eoreq	r6, r4, r5, lsr #26
    370c:	05340200 	ldreq	r0, [r4, #-512]!	; 0xfffffe00
    3710:	000e673a 	andeq	r6, lr, sl, lsr r7
    3714:	5c910200 	lfmpl	f0, 4, [r1], {0}
    3718:	0027b926 	eoreq	fp, r7, r6, lsr #18
    371c:	05360200 	ldreq	r0, [r6, #-512]!	; 0xfffffe00
    3720:	0000ac15 	andeq	sl, r0, r5, lsl ip
    3724:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3728:	0038e02c 	eorseq	lr, r8, ip, lsr #32
    372c:	00006801 	andeq	r6, r0, r1, lsl #16
    3730:	00692a00 	rsbeq	r2, r9, r0, lsl #20
    3734:	0d055302 	stceq	3, cr5, [r5, #-8]
    3738:	00000025 	andeq	r0, r0, r5, lsr #32
    373c:	26709102 	ldrbtcs	r9, [r0], -r2, lsl #2
    3740:	0000214c 	andeq	r2, r0, ip, asr #2
    3744:	17055402 	strne	r5, [r5, -r2, lsl #8]
    3748:	00000e6d 	andeq	r0, r0, sp, ror #28
    374c:	00609102 	rsbeq	r9, r0, r2, lsl #2
    3750:	8d040d00 	stchi	13, cr0, [r4, #-0]
    3754:	12000000 	andne	r0, r0, #0
    3758:	00000164 	andeq	r0, r0, r4, ror #2
    375c:	00000e7d 	andeq	r0, r0, sp, ror lr
    3760:	00003d13 	andeq	r3, r0, r3, lsl sp
    3764:	24000f00 	strcs	r0, [r0], #-3840	; 0xfffff100
    3768:	00002409 	andeq	r2, r0, r9, lsl #8
    376c:	1103be02 	tstne	r3, r2, lsl #28
    3770:	000000ac 	andeq	r0, r0, ip, lsr #1
    3774:	01002a74 	tsteq	r0, r4, ror sl
    3778:	00000dd8 	ldrdeq	r0, [r0], -r8
    377c:	12079c01 	andne	r9, r7, #256	; 0x100
    3780:	6d250000 	stcvs	0, cr0, [r5, #-0]
    3784:	02000024 	andeq	r0, r0, #36	; 0x24
    3788:	073403be 			; <UNDEFINED> instruction: 0x073403be
    378c:	03000012 	movweq	r0, #18
    3790:	255ec491 	ldrbcs	ip, [lr, #-1169]	; 0xfffffb6f
    3794:	00001e60 	andeq	r1, r0, r0, ror #28
    3798:	4503bf02 	strmi	fp, [r3, #-3842]	; 0xfffff0fe
    379c:	0000120d 	andeq	r1, r0, sp, lsl #4
    37a0:	5ec09103 	acspls	f1, f3
    37a4:	001e5c25 	andseq	r5, lr, r5, lsr #24
    37a8:	03c00200 	biceq	r0, r0, #0, 4
    37ac:	00003836 	andeq	r3, r0, r6, lsr r8
    37b0:	bc910300 	ldclt	3, cr0, [r1], {0}
    37b4:	2597255e 	ldrcs	r2, [r7, #1374]	; 0x55e
    37b8:	c1020000 	mrsgt	r0, (UNDEF: 2)
    37bc:	02f93d03 	rscseq	r3, r9, #3, 26	; 0xc0
    37c0:	91030000 	mrsls	r0, (UNDEF: 3)
    37c4:	f4255eb8 			; <UNDEFINED> instruction: 0xf4255eb8
    37c8:	0200001e 	andeq	r0, r0, #30
    37cc:	e53003c2 	ldr	r0, [r0, #-962]!	; 0xfffffc3e
    37d0:	02000002 	andeq	r0, r0, #2
    37d4:	6b2a0091 	blvs	a83a20 <__core1_unwind_stub-0x57c5e0>
    37d8:	03c40200 	biceq	r0, r4, #0, 4
    37dc:	00002509 	andeq	r2, r0, r9, lsl #10
    37e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    37e4:	0200692a 	andeq	r6, r0, #688128	; 0xa8000
    37e8:	2c0c03c5 	stccs	3, cr0, [ip], {197}	; 0xc5
    37ec:	02000000 	andeq	r0, r0, #0
    37f0:	6a267091 	bvs	99fa3c <__core1_unwind_stub-0x6605c4>
    37f4:	02000021 	andeq	r0, r0, #33	; 0x21
    37f8:	130a03c6 	movwne	r0, #41926	; 0xa3c6
    37fc:	03000012 	movweq	r0, #18
    3800:	265eec91 			; <UNDEFINED> instruction: 0x265eec91
    3804:	00002484 	andeq	r2, r0, r4, lsl #9
    3808:	0c03c802 	stceq	8, cr12, [r3], {2}
    380c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3810:	26509102 	ldrbcs	r9, [r0], -r2, lsl #2
    3814:	000023bb 			; <UNDEFINED> instruction: 0x000023bb
    3818:	0c03cb02 			; <UNDEFINED> instruction: 0x0c03cb02
    381c:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    3820:	264c9102 	strbcs	r9, [ip], -r2, lsl #2
    3824:	0000228c 	andeq	r2, r0, ip, lsl #5
    3828:	0c03cc02 	stceq	12, cr12, [r3], {2}
    382c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3830:	2b6c9102 	blcs	1b27c40 <__end__+0xb0bc20>
    3834:	01002be4 	smlatteq	r0, r4, fp, r2
    3838:	000000bc 	strheq	r0, [r0], -ip
    383c:	00000f8a 	andeq	r0, r0, sl, lsl #31
    3840:	002c6826 	eoreq	r6, ip, r6, lsr #16
    3844:	03ff0200 	mvnseq	r0, #0, 4
    3848:	00008116 	andeq	r8, r0, r6, lsl r1
    384c:	ec910300 	ldc	3, cr0, [r1], {0}
    3850:	2421267e 	strtcs	r2, [r1], #-1662	; 0xfffff982
    3854:	00020000 	andeq	r0, r2, r0
    3858:	02e72204 	rsceq	r2, r7, #4, 4	; 0x40000000
    385c:	91030000 	mrsls	r0, (UNDEF: 3)
    3860:	9d265ed8 	stcls	14, cr5, [r6, #-864]!	; 0xfffffca0
    3864:	02000024 	andeq	r0, r0, #36	; 0x24
    3868:	ec180401 	cfldrs	mvf0, [r8], {1}
    386c:	0300000c 	movweq	r0, #12
    3870:	007ef091 			; <UNDEFINED> instruction: 0x007ef091
    3874:	002cdc2c 	eoreq	sp, ip, ip, lsr #24
    3878:	000b3c01 	andeq	r3, fp, r1, lsl #24
    387c:	61762a00 	cmnvs	r6, r0, lsl #20
    3880:	041d0200 	ldreq	r0, [sp], #-512	; 0xfffffe00
    3884:	0000a013 	andeq	sl, r0, r3, lsl r0
    3888:	68910200 	ldmvs	r1, {r9}
    388c:	0061702a 	rsbeq	r7, r1, sl, lsr #32
    3890:	13041e02 	movwne	r1, #19970	; 0x4e02
    3894:	000000a0 	andeq	r0, r0, r0, lsr #1
    3898:	26649102 	strbtcs	r9, [r4], -r2, lsl #2
    389c:	0000304f 	andeq	r3, r0, pc, asr #32
    38a0:	13041f02 	movwne	r1, #20226	; 0x4f02
    38a4:	00000081 	andeq	r0, r0, r1, lsl #1
    38a8:	2a609102 	bcs	1827cb8 <__end__+0x80bc98>
    38ac:	2002006a 	andcs	r0, r2, sl, rrx
    38b0:	00811204 	addeq	r1, r1, r4, lsl #4
    38b4:	91020000 	mrsls	r0, (UNDEF: 2)
    38b8:	20fd265c 	rscscs	r2, sp, ip, asr r6
    38bc:	24020000 	strcs	r0, [r2], #-0
    38c0:	12241204 	eorne	r1, r4, #4, 4	; 0x40000000
    38c4:	91030000 	mrsls	r0, (UNDEF: 3)
    38c8:	b4265ecc 	strtlt	r5, [r6], #-3788	; 0xfffff134
    38cc:	02000021 	andeq	r0, r0, #33	; 0x21
    38d0:	8112042c 	tsthi	r2, ip, lsr #8
    38d4:	02000000 	andeq	r0, r0, #0
    38d8:	242b5891 	strtcs	r5, [fp], #-2193	; 0xfffff76f
    38dc:	4001002e 	andmi	r0, r1, lr, lsr #32
    38e0:	0b000004 	bleq	38f8 <__core1_unwind_stub-0xffc708>
    38e4:	26000011 			; <UNDEFINED> instruction: 0x26000011
    38e8:	000022af 	andeq	r2, r0, pc, lsr #5
    38ec:	16043f02 	strne	r3, [r4], -r2, lsl #30
    38f0:	00000081 	andeq	r0, r0, r1, lsl #1
    38f4:	2b549102 	blcs	1527d04 <__end__+0x50bce4>
    38f8:	01002e54 	tsteq	r0, r4, asr lr
    38fc:	000000e4 	andeq	r0, r0, r4, ror #1
    3900:	0000104e 	andeq	r1, r0, lr, asr #32
    3904:	002c6826 	eoreq	r6, ip, r6, lsr #16
    3908:	04480200 	strbeq	r0, [r8], #-512	; 0xfffffe00
    390c:	0000811e 	andeq	r8, r0, lr, lsl r1
    3910:	bc910300 	ldclt	3, cr0, [r1], {0}
    3914:	249d267f 	ldrcs	r2, [sp], #1663	; 0x67f
    3918:	4a020000 	bmi	83920 <__core1_unwind_stub-0xf7c6e0>
    391c:	0cec2004 	stcleq	0, cr2, [ip], #16
    3920:	91030000 	mrsls	r0, (UNDEF: 3)
    3924:	01267fb8 			; <UNDEFINED> instruction: 0x01267fb8
    3928:	02000023 	andeq	r0, r0, #35	; 0x23
    392c:	811e044b 	tsthi	lr, fp, asr #8
    3930:	03000000 	movweq	r0, #0
    3934:	007fb491 			; <UNDEFINED> instruction: 0x007fb491
    3938:	002f582b 	eoreq	r5, pc, fp, lsr #16
    393c:	00011801 	andeq	r1, r1, r1, lsl #16
    3940:	00108f00 	andseq	r8, r0, r0, lsl #30
    3944:	2c682600 	stclcs	6, cr2, [r8], #-0
    3948:	60020000 	andvs	r0, r2, r0
    394c:	00811e04 	addeq	r1, r1, r4, lsl #28
    3950:	91030000 	mrsls	r0, (UNDEF: 3)
    3954:	9d267fa4 	stcls	15, cr7, [r6, #-656]!	; 0xfffffd70
    3958:	02000024 	andeq	r0, r0, #36	; 0x24
    395c:	ec200462 	cfstrs	mvf0, [r0], #-392	; 0xfffffe78
    3960:	0300000c 	movweq	r0, #12
    3964:	267fa091 			; <UNDEFINED> instruction: 0x267fa091
    3968:	00002301 	andeq	r2, r0, r1, lsl #6
    396c:	1e046302 	cdpne	3, 0, cr6, cr4, cr2, {0}
    3970:	00000081 	andeq	r0, r0, r1, lsl #1
    3974:	7f9c9103 	svcvc	0x009c9103
    3978:	30802b00 	addcc	r2, r0, r0, lsl #22
    397c:	00e40100 	rsceq	r0, r4, r0, lsl #2
    3980:	10d00000 	sbcsne	r0, r0, r0
    3984:	68260000 	stmdavs	r6!, {}	; <UNPREDICTABLE>
    3988:	0200002c 	andeq	r0, r0, #44	; 0x2c
    398c:	811e0479 	tsthi	lr, r9, ror r4
    3990:	03000000 	movweq	r0, #0
    3994:	267fb091 			; <UNDEFINED> instruction: 0x267fb091
    3998:	0000249d 	muleq	r0, sp, r4
    399c:	20047b02 	andcs	r7, r4, r2, lsl #22
    39a0:	00000cec 	andeq	r0, r0, ip, ror #25
    39a4:	7fac9103 	svcvc	0x00ac9103
    39a8:	00230126 	eoreq	r0, r3, r6, lsr #2
    39ac:	047c0200 	ldrbteq	r0, [ip], #-512	; 0xfffffe00
    39b0:	0000811e 	andeq	r8, r0, lr, lsl r1
    39b4:	a8910300 	ldmge	r1, {r8, r9}
    39b8:	742c007f 	strtvc	r0, [ip], #-127	; 0xffffff81
    39bc:	e4010031 	str	r0, [r1], #-49	; 0xffffffcf
    39c0:	26000000 	strcs	r0, [r0], -r0
    39c4:	00002c68 	andeq	r2, r0, r8, ror #24
    39c8:	1e049002 	cdpne	0, 0, cr9, cr4, cr2, {0}
    39cc:	00000081 	andeq	r0, r0, r1, lsl #1
    39d0:	26489102 	strbcs	r9, [r8], -r2, lsl #2
    39d4:	0000249d 	muleq	r0, sp, r4
    39d8:	20049202 	andcs	r9, r4, r2, lsl #4
    39dc:	00000cec 	andeq	r0, r0, ip, ror #25
    39e0:	26449102 	strbcs	r9, [r4], -r2, lsl #2
    39e4:	00002301 	andeq	r2, r0, r1, lsl #6
    39e8:	1e049302 	cdpne	3, 0, cr9, cr4, cr2, {0}
    39ec:	00000081 	andeq	r0, r0, r1, lsl #1
    39f0:	00409102 	subeq	r9, r0, r2, lsl #2
    39f4:	32802b00 	addcc	r2, r0, #0, 22
    39f8:	00b80100 	adcseq	r0, r8, r0, lsl #2
    39fc:	112a0000 			; <UNDEFINED> instruction: 0x112a0000
    3a00:	68260000 	stmdavs	r6!, {}	; <UNPREDICTABLE>
    3a04:	0200002c 	andeq	r0, r0, #44	; 0x2c
    3a08:	811a04b6 			; <UNDEFINED> instruction: 0x811a04b6
    3a0c:	03000000 	movweq	r0, #0
    3a10:	007f9891 			; <UNDEFINED> instruction: 0x007f9891
    3a14:	0033582b 	eorseq	r5, r3, fp, lsr #16
    3a18:	0000ec01 	andeq	lr, r0, r1, lsl #24
    3a1c:	00114900 	andseq	r4, r1, r0, lsl #18
    3a20:	2c682600 	stclcs	6, cr2, [r8], #-0
    3a24:	c7020000 	strgt	r0, [r2, -r0]
    3a28:	00811a04 	addeq	r1, r1, r4, lsl #20
    3a2c:	91030000 	mrsls	r0, (UNDEF: 3)
    3a30:	2b007f90 	blcs	23878 <__core1_unwind_stub-0xfdc788>
    3a34:	01003454 	tsteq	r0, r4, asr r4
    3a38:	000000b8 	strheq	r0, [r0], -r8
    3a3c:	00001168 	andeq	r1, r0, r8, ror #2
    3a40:	002c6826 	eoreq	r6, ip, r6, lsr #16
    3a44:	04db0200 	ldrbeq	r0, [fp], #512	; 0x200
    3a48:	0000811a 	andeq	r8, r0, sl, lsl r1
    3a4c:	94910300 	ldrls	r0, [r1], #768	; 0x300
    3a50:	382b007f 	stmdacc	fp!, {r0, r1, r2, r3, r4, r5, r6}
    3a54:	b8010035 	stmdalt	r1, {r0, r2, r4, r5}
    3a58:	87000000 	strhi	r0, [r0, -r0]
    3a5c:	26000011 			; <UNDEFINED> instruction: 0x26000011
    3a60:	00002c68 	andeq	r2, r0, r8, ror #24
    3a64:	1a04f002 	bne	13fa74 <__core1_unwind_stub-0xec058c>
    3a68:	00000081 	andeq	r0, r0, r1, lsl #1
    3a6c:	7f8c9103 	svcvc	0x008c9103
    3a70:	36182b00 	ldrcc	r2, [r8], -r0, lsl #22
    3a74:	010c0100 	mrseq	r0, (UNDEF: 28)
    3a78:	11c80000 	bicne	r0, r8, r0
    3a7c:	68260000 	stmdavs	r6!, {}	; <UNPREDICTABLE>
    3a80:	0200002c 	andeq	r0, r0, #44	; 0x2c
    3a84:	811a0507 	tsthi	sl, r7, lsl #10
    3a88:	03000000 	movweq	r0, #0
    3a8c:	267f8891 			; <UNDEFINED> instruction: 0x267f8891
    3a90:	0000249d 	muleq	r0, sp, r4
    3a94:	1c050902 			; <UNDEFINED> instruction: 0x1c050902
    3a98:	00000cec 	andeq	r0, r0, ip, ror #25
    3a9c:	7f849103 	svcvc	0x00849103
    3aa0:	00230126 	eoreq	r0, r3, r6, lsr #2
    3aa4:	050a0200 	streq	r0, [sl, #-512]	; 0xfffffe00
    3aa8:	0000811a 	andeq	r8, r0, sl, lsl r1
    3aac:	80910300 	addshi	r0, r1, r0, lsl #6
    3ab0:	342c007f 	strtcc	r0, [ip], #-127	; 0xffffff81
    3ab4:	d8010037 	stmdale	r1, {r0, r1, r2, r4, r5}
    3ab8:	26000000 	strcs	r0, [r0], -r0
    3abc:	00002c68 	andeq	r2, r0, r8, ror #24
    3ac0:	16051e02 	strne	r1, [r5], -r2, lsl #28
    3ac4:	00000081 	andeq	r0, r0, r1, lsl #1
    3ac8:	7efc9103 	nrmvce	f1, f3
    3acc:	00249d26 	eoreq	r9, r4, r6, lsr #26
    3ad0:	05200200 	streq	r0, [r0, #-512]!	; 0xfffffe00
    3ad4:	000cec18 	andeq	lr, ip, r8, lsl ip
    3ad8:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
    3adc:	2301267e 	movwcs	r2, #5758	; 0x167e
    3ae0:	21020000 	mrscs	r0, (UNDEF: 2)
    3ae4:	00811605 	addeq	r1, r1, r5, lsl #12
    3ae8:	91030000 	mrsls	r0, (UNDEF: 3)
    3aec:	00007ef4 	strdeq	r7, [r0], -r4
    3af0:	ec040d00 	stc	13, cr0, [r4], {-0}
    3af4:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    3af8:	0002f404 	andeq	pc, r2, r4, lsl #8
    3afc:	036c1200 	cmneq	ip, #0, 4
    3b00:	12240000 	eorne	r0, r4, #0
    3b04:	3d2d0000 	stccc	0, cr0, [sp, #-0]
    3b08:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    3b0c:	8112000f 	tsthi	r2, pc
    3b10:	34000000 	strcc	r0, [r0], #-0
    3b14:	13000012 	movwne	r0, #18
    3b18:	0000003d 	andeq	r0, r0, sp, lsr r0
    3b1c:	7d2e0002 	stcvc	0, cr0, [lr, #-8]!
    3b20:	0200001c 	andeq	r0, r0, #28
    3b24:	ac1803af 	ldcge	3, cr0, [r8], {175}	; 0xaf
    3b28:	2c000000 	stccs	0, cr0, [r0], {-0}
    3b2c:	4801002a 	stmdami	r1, {r1, r3, r5}
    3b30:	01000000 	mrseq	r0, (UNDEF: 0)
    3b34:	0012609c 	mulseq	r2, ip, r0
    3b38:	24722500 	ldrbtcs	r2, [r2], #-1280	; 0xfffffb00
    3b3c:	af020000 	svcge	0x00020000
    3b40:	0cec3503 	cfstr64eq	mvdx3, [ip], #12
    3b44:	91020000 	mrsls	r0, (UNDEF: 2)
    3b48:	ff2f0074 			; <UNDEFINED> instruction: 0xff2f0074
    3b4c:	02000021 	andeq	r0, r0, #33	; 0x21
    3b50:	811a0395 			; <UNDEFINED> instruction: 0x811a0395
    3b54:	1c000000 	stcne	0, cr0, [r0], {-0}
    3b58:	10010029 	andne	r0, r1, r9, lsr #32
    3b5c:	01000001 	tsteq	r0, r1
    3b60:	0012c79c 	mulseq	r2, ip, r7
    3b64:	61702800 	cmnvs	r0, r0, lsl #16
    3b68:	03950200 	orrseq	r0, r5, #0, 4
    3b6c:	0000a043 	andeq	sl, r0, r3, asr #32
    3b70:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3b74:	6d656d28 	stclvs	13, cr6, [r5, #-160]!	; 0xffffff60
    3b78:	03960200 	orrseq	r0, r6, #0, 4
    3b7c:	00120d54 	andseq	r0, r2, r4, asr sp
    3b80:	60910200 	addsvs	r0, r1, r0, lsl #4
    3b84:	7865742a 	stmdavc	r5!, {r1, r3, r5, sl, ip, sp, lr}^
    3b88:	03980200 	orrseq	r0, r8, #0, 4
    3b8c:	00002509 	andeq	r2, r0, r9, lsl #10
    3b90:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3b94:	0200632a 	andeq	r6, r0, #-1476395008	; 0xa8000000
    3b98:	25090399 	strcs	r0, [r9, #-921]	; 0xfffffc67
    3b9c:	02000000 	andeq	r0, r0, #0
    3ba0:	622a7091 	eorvs	r7, sl, #145	; 0x91
    3ba4:	039a0200 	orrseq	r0, sl, #0, 4
    3ba8:	00002509 	andeq	r2, r0, r9, lsl #10
    3bac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3bb0:	1d1a2f00 	ldcne	15, cr2, [sl, #-0]
    3bb4:	7b020000 	blvc	83bbc <__core1_unwind_stub-0xf7c444>
    3bb8:	00811a03 	addeq	r1, r1, r3, lsl #20
    3bbc:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
    3bc0:	010c0100 	mrseq	r0, (UNDEF: 28)
    3bc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bc8:	0000132e 	andeq	r1, r0, lr, lsr #6
    3bcc:	00617028 	rsbeq	r7, r1, r8, lsr #32
    3bd0:	43037b02 	movwmi	r7, #15106	; 0x3b02
    3bd4:	000000a0 	andeq	r0, r0, r0, lsr #1
    3bd8:	28649102 	stmdacs	r4!, {r1, r8, ip, pc}^
    3bdc:	006d656d 	rsbeq	r6, sp, sp, ror #10
    3be0:	54037c02 	strpl	r7, [r3], #-3074	; 0xfffff3fe
    3be4:	0000120d 	andeq	r1, r0, sp, lsl #4
    3be8:	2a609102 	bcs	1827ff8 <__end__+0x80bfd8>
    3bec:	00786574 	rsbseq	r6, r8, r4, ror r5
    3bf0:	09037e02 	stmdbeq	r3, {r1, r9, sl, fp, ip, sp, lr}
    3bf4:	00000025 	andeq	r0, r0, r5, lsr #32
    3bf8:	2a749102 	bcs	1d28008 <__end__+0xd0bfe8>
    3bfc:	7f020063 	svcvc	0x00020063
    3c00:	00250903 	eoreq	r0, r5, r3, lsl #18
    3c04:	91020000 	mrsls	r0, (UNDEF: 2)
    3c08:	00622a70 	rsbeq	r2, r2, r0, ror sl
    3c0c:	09038002 	stmdbeq	r3, {r1, pc}
    3c10:	00000025 	andeq	r0, r0, r5, lsr #32
    3c14:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3c18:	0020cf2f 	eoreq	ip, r0, pc, lsr #30
    3c1c:	03610200 	cmneq	r1, #0, 4
    3c20:	0000811a 	andeq	r8, r0, sl, lsl r1
    3c24:	0026ec00 	eoreq	lr, r6, r0, lsl #24
    3c28:	00012401 	andeq	r2, r1, r1, lsl #8
    3c2c:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    3c30:	28000013 	stmdacs	r0, {r0, r1, r4}
    3c34:	02006170 	andeq	r6, r0, #112, 2
    3c38:	a0460361 	subge	r0, r6, r1, ror #6
    3c3c:	02000000 	andeq	r0, r0, #0
    3c40:	6d286491 	cfstrsvs	mvf6, [r8, #-580]!	; 0xfffffdbc
    3c44:	02006d65 	andeq	r6, r0, #6464	; 0x1940
    3c48:	0d570362 	ldcleq	3, cr0, [r7, #-392]	; 0xfffffe78
    3c4c:	02000012 	andeq	r0, r0, #18
    3c50:	742a6091 	strtvc	r6, [sl], #-145	; 0xffffff6f
    3c54:	02007865 	andeq	r7, r0, #6619136	; 0x650000
    3c58:	25090364 	strcs	r0, [r9, #-868]	; 0xfffffc9c
    3c5c:	02000000 	andeq	r0, r0, #0
    3c60:	632a7491 			; <UNDEFINED> instruction: 0x632a7491
    3c64:	03650200 	cmneq	r5, #0, 4
    3c68:	00002509 	andeq	r2, r0, r9, lsl #10
    3c6c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3c70:	0200622a 	andeq	r6, r0, #-1610612734	; 0xa0000002
    3c74:	25090366 	strcs	r0, [r9, #-870]	; 0xfffffc9a
    3c78:	02000000 	andeq	r0, r0, #0
    3c7c:	2f006c91 	svccs	0x00006c91
    3c80:	00002059 	andeq	r2, r0, r9, asr r0
    3c84:	1a034702 	bne	d5894 <__core1_unwind_stub-0xf2a76c>
    3c88:	00000081 	andeq	r0, r0, r1, lsl #1
    3c8c:	010025c8 	smlabteq	r0, r8, r5, r2
    3c90:	00000124 	andeq	r0, r0, r4, lsr #2
    3c94:	13fc9c01 	mvnsne	r9, #256	; 0x100
    3c98:	70280000 	eorvc	r0, r8, r0
    3c9c:	47020061 	strmi	r0, [r2, -r1, rrx]
    3ca0:	00a04103 	adceq	r4, r0, r3, lsl #2
    3ca4:	91020000 	mrsls	r0, (UNDEF: 2)
    3ca8:	656d2864 	strbvs	r2, [sp, #-2148]!	; 0xfffff79c
    3cac:	4802006d 	stmdami	r2, {r0, r2, r3, r5, r6}
    3cb0:	120d5203 	andne	r5, sp, #805306368	; 0x30000000
    3cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    3cb8:	65742a60 	ldrbvs	r2, [r4, #-2656]!	; 0xfffff5a0
    3cbc:	4a020078 	bmi	83ea4 <__core1_unwind_stub-0xf7c15c>
    3cc0:	00250903 	eoreq	r0, r5, r3, lsl #18
    3cc4:	91020000 	mrsls	r0, (UNDEF: 2)
    3cc8:	00632a74 	rsbeq	r2, r3, r4, ror sl
    3ccc:	09034b02 	stmdbeq	r3, {r1, r8, r9, fp, lr}
    3cd0:	00000025 	andeq	r0, r0, r5, lsr #32
    3cd4:	2a709102 	bcs	1c280e4 <__end__+0xc0c0c4>
    3cd8:	4c020062 	stcmi	0, cr0, [r2], {98}	; 0x62
    3cdc:	00250903 	eoreq	r0, r5, r3, lsl #18
    3ce0:	91020000 	mrsls	r0, (UNDEF: 2)
    3ce4:	282f006c 	stmdacs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    3ce8:	0200001f 	andeq	r0, r0, #31
    3cec:	811a0338 	tsthi	sl, r8, lsr r3
    3cf0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    3cf4:	60010025 	andvs	r0, r1, r5, lsr #32
    3cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    3cfc:	0014389c 	mulseq	r4, ip, r8
    3d00:	249d2500 	ldrcs	r2, [sp], #1280	; 0x500
    3d04:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    3d08:	00a04303 	adceq	r4, r0, r3, lsl #6
    3d0c:	91020000 	mrsls	r0, (UNDEF: 2)
    3d10:	656d2874 	strbvs	r2, [sp, #-2164]!	; 0xfffff78c
    3d14:	3902006d 	stmdbcc	r2, {r0, r2, r3, r5, r6}
    3d18:	120d5403 	andne	r5, sp, #50331648	; 0x3000000
    3d1c:	91020000 	mrsls	r0, (UNDEF: 2)
    3d20:	6d240070 	stcvs	0, cr0, [r4, #-448]!	; 0xfffffe40
    3d24:	0200001f 	andeq	r0, r0, #31
    3d28:	2c08032e 	stccs	3, cr0, [r8], {46}	; 0x2e
    3d2c:	00000000 	andeq	r0, r0, r0
    3d30:	68010025 	stmdavs	r1, {r0, r2, r5}
    3d34:	01000000 	mrseq	r0, (UNDEF: 0)
    3d38:	0014879c 	mulseq	r4, ip, r7
    3d3c:	1e602500 	cdpne	5, 6, cr2, cr0, cr0, {0}
    3d40:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    3d44:	120d4603 	andne	r4, sp, #3145728	; 0x300000
    3d48:	91030000 	mrsls	r0, (UNDEF: 3)
    3d4c:	5c255ff4 	stcpl	15, cr5, [r5], #-976	; 0xfffffc30
    3d50:	0200001e 	andeq	r0, r0, #30
    3d54:	3837032f 	ldmdacc	r7!, {r0, r1, r2, r3, r5, r8, r9}
    3d58:	03000000 	movweq	r0, #0
    3d5c:	265ff091 			; <UNDEFINED> instruction: 0x265ff091
    3d60:	0000216a 	andeq	r2, r0, sl, ror #2
    3d64:	0a033102 	beq	d0174 <__core1_unwind_stub-0xf2fe8c>
    3d68:	00001213 	andeq	r1, r0, r3, lsl r2
    3d6c:	5ff89103 	svcpl	0x00f89103
    3d70:	1da42e00 	stcne	14, cr2, [r4]
    3d74:	b2020000 	andlt	r0, r2, #0
    3d78:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    3d7c:	21d80000 	bicscs	r0, r8, r0
    3d80:	03280100 			; <UNDEFINED> instruction: 0x03280100
    3d84:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d88:	00001553 	andeq	r1, r0, r3, asr r5
    3d8c:	001e6025 	andseq	r6, lr, r5, lsr #32
    3d90:	02b20200 	adcseq	r0, r2, #0, 4
    3d94:	00120d56 	andseq	r0, r2, r6, asr sp
    3d98:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3d9c:	001e5c25 	andseq	r5, lr, r5, lsr #24
    3da0:	02b30200 	adcseq	r0, r3, #0, 4
    3da4:	00003847 	andeq	r3, r0, r7, asr #16
    3da8:	50910200 	addspl	r0, r1, r0, lsl #4
    3dac:	00216a25 	eoreq	r6, r1, r5, lsr #20
    3db0:	02b40200 	adcseq	r0, r4, #0, 4
    3db4:	0008bb41 	andeq	fp, r8, r1, asr #22
    3db8:	4c910200 	lfmmi	f0, 4, [r1], {0}
    3dbc:	00248426 	eoreq	r8, r4, r6, lsr #8
    3dc0:	02b60200 	adcseq	r0, r6, #0, 4
    3dc4:	00002c0c 	andeq	r2, r0, ip, lsl #24
    3dc8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3dcc:	0200692a 	andeq	r6, r0, #688128	; 0xa8000
    3dd0:	810e02b7 			; <UNDEFINED> instruction: 0x810e02b7
    3dd4:	02000000 	andeq	r0, r0, #0
    3dd8:	342c7091 	strtcc	r7, [ip], #-145	; 0xffffff6f
    3ddc:	50010022 	andpl	r0, r1, r2, lsr #32
    3de0:	2a000002 	bcs	3df0 <__core1_unwind_stub-0xffc210>
    3de4:	02006176 	andeq	r6, r0, #-2147483619	; 0x8000001d
    3de8:	a01a02c2 	andsge	r0, sl, r2, asr #5
    3dec:	02000000 	andeq	r0, r0, #0
    3df0:	702a6c91 	mlavc	sl, r1, ip, r6
    3df4:	c3020061 	movwgt	r0, #8289	; 0x2061
    3df8:	00a01a02 	adceq	r1, r0, r2, lsl #20
    3dfc:	91020000 	mrsls	r0, (UNDEF: 2)
    3e00:	304f2668 	subcc	r2, pc, r8, ror #12
    3e04:	c4020000 	strgt	r0, [r2], #-0
    3e08:	00811a02 	addeq	r1, r1, r2, lsl #20
    3e0c:	91020000 	mrsls	r0, (UNDEF: 2)
    3e10:	23722664 	cmncs	r2, #100, 12	; 0x6400000
    3e14:	c5020000 	strgt	r0, [r2, #-0]
    3e18:	01021a02 	tsteq	r2, r2, lsl #20
    3e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    3e20:	232c2c63 			; <UNDEFINED> instruction: 0x232c2c63
    3e24:	00840100 	addeq	r0, r4, r0, lsl #2
    3e28:	85260000 	strhi	r0, [r6, #-0]!
    3e2c:	0200001d 	andeq	r0, r0, #29
    3e30:	811602dd 			; <UNDEFINED> instruction: 0x811602dd
    3e34:	02000000 	andeq	r0, r0, #0
    3e38:	00005c91 	muleq	r0, r1, ip
    3e3c:	248c2f00 	strcs	r2, [ip], #3840	; 0xf00
    3e40:	a4020000 	strge	r0, [r2], #-0
    3e44:	00ac1802 	adceq	r1, ip, r2, lsl #16
    3e48:	21700000 	cmncs	r0, r0
    3e4c:	00680100 	rsbeq	r0, r8, r0, lsl #2
    3e50:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e54:	0000158f 	andeq	r1, r0, pc, lsl #11
    3e58:	00216a25 	eoreq	r6, r1, r5, lsr #20
    3e5c:	02a40200 	adceq	r0, r4, #0, 4
    3e60:	0008bb3a 	andeq	fp, r8, sl, lsr fp
    3e64:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3e68:	00237225 	eoreq	r7, r3, r5, lsr #4
    3e6c:	02a40200 	adceq	r0, r4, #0, 4
    3e70:	00010254 	andeq	r0, r1, r4, asr r2
    3e74:	73910200 	orrsvc	r0, r1, #0, 4
    3e78:	20993000 	addscs	r3, r9, r0
    3e7c:	8a020000 	bhi	83e84 <__core1_unwind_stub-0xf7c17c>
    3e80:	00ac1102 	adceq	r1, ip, r2, lsl #2
    3e84:	00000000 	andeq	r0, r0, r0
    3e88:	00340000 	eorseq	r0, r4, r0
    3e8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e90:	000015bb 			; <UNDEFINED> instruction: 0x000015bb
    3e94:	001ebc26 	andseq	fp, lr, r6, lsr #24
    3e98:	028f0200 	addeq	r0, pc, #0, 4
    3e9c:	0000810e 	andeq	r8, r0, lr, lsl #2
    3ea0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3ea4:	25573000 	ldrbcs	r3, [r7, #-0]
    3ea8:	75020000 	strvc	r0, [r2, #-0]
    3eac:	00ac1102 	adceq	r1, ip, r2, lsl #2
    3eb0:	213c0000 	teqcs	ip, r0
    3eb4:	00340100 	eorseq	r0, r4, r0, lsl #2
    3eb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ebc:	000015e7 	andeq	r1, r0, r7, ror #11
    3ec0:	001ebc26 	andseq	fp, lr, r6, lsr #24
    3ec4:	027a0200 	rsbseq	r0, sl, #0, 4
    3ec8:	0000810e 	andeq	r8, r0, lr, lsl #2
    3ecc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3ed0:	24f43000 	ldrbtcs	r3, [r4], #0
    3ed4:	62020000 	andvs	r0, r2, #0
    3ed8:	00ac1102 	adceq	r1, ip, r2, lsl #2
    3edc:	00000000 	andeq	r0, r0, r0
    3ee0:	00780000 	rsbseq	r0, r8, r0
    3ee4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ee8:	0000164d 	andeq	r1, r0, sp, asr #12
    3eec:	001e5525 	andseq	r5, lr, r5, lsr #10
    3ef0:	02620200 	rsbeq	r0, r2, #0, 4
    3ef4:	00008d37 	andeq	r8, r0, r7, lsr sp
    3ef8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3efc:	001d9f25 	andseq	r9, sp, r5, lsr #30
    3f00:	02620200 	rsbeq	r0, r2, #0, 4
    3f04:	00008d4e 	andeq	r8, r0, lr, asr #26
    3f08:	68910200 	ldmvs	r1, {r9}
    3f0c:	0022b726 	eoreq	fp, r2, r6, lsr #14
    3f10:	02640200 	rsbeq	r0, r4, #0, 4
    3f14:	0000810e 	andeq	r8, r0, lr, lsl #2
    3f18:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3f1c:	001c7631 	andseq	r7, ip, r1, lsr r6
    3f20:	00000000 	andeq	r0, r0, r0
    3f24:	00000c00 	andeq	r0, r0, r0, lsl #24
    3f28:	02700200 	rsbseq	r0, r0, #0, 4
    3f2c:	1c833205 	sfmne	f3, 4, [r3], {5}
    3f30:	91020000 	mrsls	r0, (UNDEF: 2)
    3f34:	30000070 	andcc	r0, r0, r0, ror r0
    3f38:	00001e34 	andeq	r1, r0, r4, lsr lr
    3f3c:	11024102 	tstne	r2, r2, lsl #2
    3f40:	000000ac 	andeq	r0, r0, ip, lsr #1
    3f44:	0100205c 	qaddeq	r2, ip, r0
    3f48:	000000e0 	andeq	r0, r0, r0, ror #1
    3f4c:	16de9c01 	ldrbne	r9, [lr], r1, lsl #24
    3f50:	4c250000 	stcmi	0, cr0, [r5], #-0
    3f54:	02000021 	andeq	r0, r0, #33	; 0x21
    3f58:	de360241 	cdple	2, 3, cr0, cr6, cr1, {2}
    3f5c:	02000016 	andeq	r0, r0, #22
    3f60:	a7256491 			; <UNDEFINED> instruction: 0xa7256491
    3f64:	02000024 	andeq	r0, r0, #36	; 0x24
    3f68:	382f0242 	stmdacc	pc!, {r1, r6, r9}	; <UNPREDICTABLE>
    3f6c:	02000000 	andeq	r0, r0, #0
    3f70:	23266091 			; <UNDEFINED> instruction: 0x23266091
    3f74:	0200001f 	andeq	r0, r0, #31
    3f78:	810e0244 	tsthi	lr, r4, asr #4
    3f7c:	02000000 	andeq	r0, r0, #0
    3f80:	692a7491 	stmdbvs	sl!, {r0, r4, r7, sl, ip, sp, lr}
    3f84:	02450200 	subeq	r0, r5, #0, 4
    3f88:	0000810e 	andeq	r8, r0, lr, lsl #2
    3f8c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3f90:	0020982b 	eoreq	r9, r0, fp, lsr #16
    3f94:	00006001 	andeq	r6, r0, r1
    3f98:	0016c300 	andseq	ip, r6, r0, lsl #6
    3f9c:	70612a00 	rsbvc	r2, r1, r0, lsl #20
    3fa0:	024e0200 	subeq	r0, lr, #0, 4
    3fa4:	00016417 	andeq	r6, r1, r7, lsl r4
    3fa8:	6f910200 	svcvs	0x00910200
    3fac:	1c5c3100 	ldfnee	f3, [ip], {-0}
    3fb0:	211c0000 	tstcs	ip, r0
    3fb4:	000c0100 	andeq	r0, ip, r0, lsl #2
    3fb8:	5d020000 	stcpl	0, cr0, [r2, #-0]
    3fbc:	69320502 	ldmdbvs	r2!, {r1, r8, sl}
    3fc0:	0200001c 	andeq	r0, r0, #28
    3fc4:	00006891 	muleq	r0, r1, r8
    3fc8:	0170040d 	cmneq	r0, sp, lsl #8
    3fcc:	7f300000 	svcvc	0x00300000
    3fd0:	0200001e 	andeq	r0, r0, #30
    3fd4:	ac110225 	lfmge	f0, 4, [r1], {37}	; 0x25
    3fd8:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    3fdc:	b401001f 	strlt	r0, [r1], #-31	; 0xffffffe1
    3fe0:	01000000 	mrseq	r0, (UNDEF: 0)
    3fe4:	00175a9c 	mulseq	r7, ip, sl
    3fe8:	1ee22500 	cdpne	5, 14, cr2, cr2, cr0, {0}
    3fec:	25020000 	strcs	r0, [r2, #-0]
    3ff0:	17612e02 	strbne	r2, [r1, -r2, lsl #28]!
    3ff4:	91020000 	mrsls	r0, (UNDEF: 2)
    3ff8:	25dc256f 	ldrbcs	r2, [ip, #1391]	; 0x56f
    3ffc:	26020000 	strcs	r0, [r2], -r0
    4000:	17612e02 	strbne	r2, [r1, -r2, lsl #28]!
    4004:	91020000 	mrsls	r0, (UNDEF: 2)
    4008:	2448256e 	strbcs	r2, [r8], #-1390	; 0xfffffa92
    400c:	27020000 	strcs	r0, [r2, -r0]
    4010:	008d3202 	addeq	r3, sp, r2, lsl #4
    4014:	91020000 	mrsls	r0, (UNDEF: 2)
    4018:	23c22668 	biccs	r2, r2, #104, 12	; 0x6800000
    401c:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    4020:	00810e02 	addeq	r0, r1, r2, lsl #28
    4024:	91020000 	mrsls	r0, (UNDEF: 2)
    4028:	1c243174 	stfnes	f3, [r4], #-464	; 0xfffffe30
    402c:	203c0000 	eorscs	r0, ip, r0
    4030:	000c0100 	andeq	r0, ip, r0, lsl #2
    4034:	3c020000 	stccc	0, cr0, [r2], {-0}
    4038:	31320502 	teqcc	r2, r2, lsl #10
    403c:	0200001c 	andeq	r0, r0, #28
    4040:	00007091 	muleq	r0, r1, r0
    4044:	0e020105 	adfeqs	f0, f2, f5
    4048:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    404c:	0000175a 	andeq	r1, r0, sl, asr r7
    4050:	00236030 	eoreq	r6, r3, r0, lsr r0
    4054:	02120200 	andseq	r0, r2, #0, 4
    4058:	0000ac11 	andeq	sl, r0, r1, lsl ip
    405c:	00000000 	andeq	r0, r0, r0
    4060:	00007c00 	andeq	r7, r0, r0, lsl #24
    4064:	da9c0100 	ble	fe70446c <__shm_end__+0xbe70446c>
    4068:	25000017 	strcs	r0, [r0, #-23]	; 0xffffffe9
    406c:	00001103 	andeq	r1, r0, r3, lsl #2
    4070:	2f021202 	svccs	0x00021202
    4074:	00000d4d 	andeq	r0, r0, sp, asr #26
    4078:	26649102 	strbtcs	r9, [r4], -r2, lsl #2
    407c:	000022c8 	andeq	r2, r0, r8, asr #5
    4080:	0e021402 	cdpeq	4, 0, cr1, cr2, cr2, {0}
    4084:	00000081 	andeq	r0, r0, r1, lsl #1
    4088:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
    408c:	00001bcc 	andeq	r1, r0, ip, asr #23
    4090:	00000000 	andeq	r0, r0, r0
    4094:	0000000c 	andeq	r0, r0, ip
    4098:	0d021c02 	stceq	12, cr1, [r2, #-8]
    409c:	000017bf 			; <UNDEFINED> instruction: 0x000017bf
    40a0:	001bde34 	andseq	sp, fp, r4, lsr lr
    40a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    40a8:	1bb03100 	blne	fec104b0 <__shm_end__+0xbec104b0>
    40ac:	00000000 	andeq	r0, r0, r0
    40b0:	000c0000 	andeq	r0, ip, r0
    40b4:	20020000 	andcs	r0, r2, r0
    40b8:	be320502 	cdplt	5, 3, cr0, cr2, cr2, {0}
    40bc:	0200001b 	andeq	r0, r0, #27
    40c0:	00007091 	muleq	r0, r1, r0
    40c4:	001c8f30 	andseq	r8, ip, r0, lsr pc
    40c8:	020b0200 	andeq	r0, fp, #0, 4
    40cc:	0002e508 	andeq	lr, r2, r8, lsl #10
    40d0:	00000000 	andeq	r0, r0, r0
    40d4:	00003800 	andeq	r3, r0, r0, lsl #16
    40d8:	209c0100 	addscs	r0, ip, r0, lsl #2
    40dc:	26000018 			; <UNDEFINED> instruction: 0x26000018
    40e0:	000022c8 	andeq	r2, r0, r8, asr #5
    40e4:	0e020d02 	cdpeq	13, 0, cr0, cr2, cr2, {0}
    40e8:	00000081 	andeq	r0, r0, r1, lsl #1
    40ec:	31749102 	cmncc	r4, r2, lsl #2
    40f0:	00001bcc 	andeq	r1, r0, ip, asr #23
    40f4:	00000000 	andeq	r0, r0, r0
    40f8:	0000000c 	andeq	r0, r0, ip
    40fc:	16020d02 	strne	r0, [r2], -r2, lsl #26
    4100:	001bde34 	andseq	sp, fp, r4, lsr lr
    4104:	70910200 	addsvc	r0, r1, r0, lsl #4
    4108:	8d300000 	ldchi	0, cr0, [r0, #-0]
    410c:	0200001d 	andeq	r0, r0, #29
    4110:	ac1101f3 	ldfges	f0, [r1], {243}	; 0xf3
    4114:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    4118:	e001001e 	and	r0, r1, lr, lsl r0
    411c:	01000000 	mrseq	r0, (UNDEF: 0)
    4120:	0018b49c 	mulseq	r8, ip, r4
    4124:	11032500 	tstne	r3, r0, lsl #10
    4128:	f3020000 	vhadd.u8	d0, d2, d0
    412c:	0d4d2f01 	stcleq	15, cr2, [sp, #-4]
    4130:	91020000 	mrsls	r0, (UNDEF: 2)
    4134:	23c2265c 	biccs	r2, r2, #92, 12	; 0x5c00000
    4138:	f5020000 			; <UNDEFINED> instruction: 0xf5020000
    413c:	00810e01 	addeq	r0, r1, r1, lsl #28
    4140:	91020000 	mrsls	r0, (UNDEF: 2)
    4144:	24652674 	strbtcs	r2, [r5], #-1652	; 0xfffff98c
    4148:	f6020000 			; <UNDEFINED> instruction: 0xf6020000
    414c:	00810e01 	addeq	r0, r1, r1, lsl #28
    4150:	91020000 	mrsls	r0, (UNDEF: 2)
    4154:	22c22670 	sbccs	r2, r2, #112, 12	; 0x7000000
    4158:	f7020000 			; <UNDEFINED> instruction: 0xf7020000
    415c:	00810e01 	addeq	r0, r1, r1, lsl #28
    4160:	91020000 	mrsls	r0, (UNDEF: 2)
    4164:	1c3e336c 	ldcne	3, cr3, [lr], #-432	; 0xfffffe50
    4168:	1ed80000 	cdpne	0, 13, cr0, cr8, cr0, {0}
    416c:	000c0100 	andeq	r0, ip, r0, lsl #2
    4170:	f5020000 			; <UNDEFINED> instruction: 0xf5020000
    4174:	18991601 	ldmne	r9, {r0, r9, sl, ip}
    4178:	4f340000 	svcmi	0x00340000
    417c:	0200001c 	andeq	r0, r0, #28
    4180:	31006891 			; <UNDEFINED> instruction: 0x31006891
    4184:	00001bec 	andeq	r1, r0, ip, ror #23
    4188:	01001f88 	smlabbeq	r0, r8, pc, r1	; <UNPREDICTABLE>
    418c:	0000000c 	andeq	r0, r0, ip
    4190:	05020602 	streq	r0, [r2, #-1538]	; 0xfffff9fe
    4194:	001bf932 	andseq	pc, fp, r2, lsr r9	; <UNPREDICTABLE>
    4198:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    419c:	c1300000 	teqgt	r0, r0
    41a0:	0200001f 	andeq	r0, r0, #31
    41a4:	e50801ea 	str	r0, [r8, #-490]	; 0xfffffe16
    41a8:	00000002 	andeq	r0, r0, r2
    41ac:	74000000 	strvc	r0, [r0], #-0
    41b0:	01000000 	mrseq	r0, (UNDEF: 0)
    41b4:	0019389c 	mulseq	r9, ip, r8
    41b8:	23c22600 	biccs	r2, r2, #0, 12
    41bc:	ec020000 	stc	0, cr0, [r2], {-0}
    41c0:	00810e01 	addeq	r0, r1, r1, lsl #28
    41c4:	91020000 	mrsls	r0, (UNDEF: 2)
    41c8:	24652674 	strbtcs	r2, [r5], #-1652	; 0xfffff98c
    41cc:	ed020000 	stc	0, cr0, [r2, #-0]
    41d0:	00810e01 	addeq	r0, r1, r1, lsl #28
    41d4:	91020000 	mrsls	r0, (UNDEF: 2)
    41d8:	22c22670 	sbccs	r2, r2, #112, 12	; 0x7000000
    41dc:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
    41e0:	00810e01 	addeq	r0, r1, r1, lsl #28
    41e4:	91020000 	mrsls	r0, (UNDEF: 2)
    41e8:	1c3e336c 	ldcne	3, cr3, [lr], #-432	; 0xfffffe50
    41ec:	00000000 	andeq	r0, r0, r0
    41f0:	000c0000 	andeq	r0, ip, r0
    41f4:	ec020000 	stc	0, cr0, [r2], {-0}
    41f8:	191d1601 	ldmdbne	sp, {r0, r9, sl, ip}
    41fc:	4f340000 	svcmi	0x00340000
    4200:	0200001c 	andeq	r0, r0, #28
    4204:	31006491 			; <UNDEFINED> instruction: 0x31006491
    4208:	00001c06 	andeq	r1, r0, r6, lsl #24
    420c:	00000000 	andeq	r0, r0, r0
    4210:	0000000c 	andeq	r0, r0, ip
    4214:	1601ee02 	strne	lr, [r1], -r2, lsl #28
    4218:	001c1734 	andseq	r1, ip, r4, lsr r7
    421c:	68910200 	ldmvs	r1, {r9}
    4220:	90240000 	eorls	r0, r4, r0
    4224:	02000021 	andeq	r0, r0, #33	; 0x21
    4228:	ac1101de 	ldfges	f0, [r1], {222}	; 0xde
    422c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    4230:	5001001e 	andpl	r0, r1, lr, lsl r0
    4234:	01000000 	mrseq	r0, (UNDEF: 0)
    4238:	00199c9c 	mulseq	r9, ip, ip
    423c:	2ccf2600 	stclcs	6, cr2, [pc], {0}
    4240:	e0020000 	and	r0, r2, r0
    4244:	00810e01 	addeq	r0, r1, r1, lsl #28
    4248:	91020000 	mrsls	r0, (UNDEF: 2)
    424c:	1caa3374 	stcne	3, cr3, [sl], #464	; 0x1d0
    4250:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    4254:	000c0100 	andeq	r0, ip, r0, lsl #2
    4258:	e3020000 	movw	r0, #8192	; 0x2000
    425c:	19810d01 	stmibne	r1, {r0, r8, sl, fp}
    4260:	bb340000 	bllt	d04268 <__core1_unwind_stub-0x2fbd98>
    4264:	0200001c 	andeq	r0, r0, #28
    4268:	31006c91 			; <UNDEFINED> instruction: 0x31006c91
    426c:	00001c90 	muleq	r0, r0, ip
    4270:	01001eac 	smlatbeq	r0, ip, lr, r1
    4274:	0000000c 	andeq	r0, r0, ip
    4278:	0501e502 	streq	lr, [r1, #-1282]	; 0xfffffafe
    427c:	001c9d32 	andseq	r9, ip, r2, lsr sp
    4280:	70910200 	addsvc	r0, r1, r0, lsl #4
    4284:	ce240000 	cdpgt	0, 2, cr0, cr4, cr0, {0}
    4288:	02000022 	andeq	r0, r0, #34	; 0x22
    428c:	ac1101d1 	ldfges	f0, [r1], {209}	; 0xd1
    4290:	00000000 	andeq	r0, r0, r0
    4294:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4298:	01000000 	mrseq	r0, (UNDEF: 0)
    429c:	001a009c 	mulseq	sl, ip, r0
    42a0:	2ccf2600 	stclcs	6, cr2, [pc], {0}
    42a4:	d3020000 	movwle	r0, #8192	; 0x2000
    42a8:	00810e01 	addeq	r0, r1, r1, lsl #28
    42ac:	91020000 	mrsls	r0, (UNDEF: 2)
    42b0:	1caa3374 	stcne	3, cr3, [sl], #464	; 0x1d0
    42b4:	00000000 	andeq	r0, r0, r0
    42b8:	000c0000 	andeq	r0, ip, r0
    42bc:	d3020000 	movwle	r0, #8192	; 0x2000
    42c0:	19e51601 	stmibne	r5!, {r0, r9, sl, ip}^
    42c4:	bb340000 	bllt	d042cc <__core1_unwind_stub-0x2fbd34>
    42c8:	0200001c 	andeq	r0, r0, #28
    42cc:	31007091 	swpcc	r7, r1, [r0]
    42d0:	00001c90 	muleq	r0, r0, ip
    42d4:	00000000 	andeq	r0, r0, r0
    42d8:	0000000c 	andeq	r0, r0, ip
    42dc:	0501d902 	streq	sp, [r1, #-2306]	; 0xfffff6fe
    42e0:	001c9d32 	andseq	r9, ip, r2, lsr sp
    42e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    42e8:	20300000 	eorscs	r0, r0, r0
    42ec:	02000021 	andeq	r0, r0, #33	; 0x21
    42f0:	ac110190 	ldfges	f0, [r1], {144}	; 0x90
    42f4:	00000000 	andeq	r0, r0, r0
    42f8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    42fc:	01000001 	tsteq	r0, r1
    4300:	001aa39c 	mulseq	sl, ip, r3
    4304:	246d2500 	strbtcs	r2, [sp], #-1280	; 0xfffffb00
    4308:	90020000 	andls	r0, r2, r0
    430c:	0e673701 	cdpeq	7, 6, cr3, cr7, cr1, {0}
    4310:	91020000 	mrsls	r0, (UNDEF: 2)
    4314:	6176285c 	cmnvs	r6, ip, asr r8
    4318:	01910200 	orrseq	r0, r1, r0, lsl #4
    431c:	000d4d33 	andeq	r4, sp, r3, lsr sp
    4320:	58910200 	ldmpl	r1, {r9}
    4324:	002c6825 	eoreq	r6, ip, r5, lsr #16
    4328:	01920200 	orrseq	r0, r2, r0, lsl #4
    432c:	00008d36 	andeq	r8, r0, r6, lsr sp
    4330:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    4334:	00221426 	eoreq	r1, r2, r6, lsr #8
    4338:	01940200 	orrseq	r0, r4, r0, lsl #4
    433c:	00175a0a 	andseq	r5, r7, sl, lsl #20
    4340:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4344:	001c6226 	andseq	r6, ip, r6, lsr #4
    4348:	01950200 	orrseq	r0, r5, r0, lsl #4
    434c:	0000810e 	andeq	r8, r0, lr, lsl #2
    4350:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4354:	00247226 	eoreq	r7, r4, r6, lsr #4
    4358:	01960200 	orrseq	r0, r6, r0, lsl #4
    435c:	000cec0f 	andeq	lr, ip, pc, lsl #24
    4360:	68910200 	ldmvs	r1, {r9}
    4364:	00230326 	eoreq	r0, r3, r6, lsr #6
    4368:	01970200 	orrseq	r0, r7, r0, lsl #4
    436c:	0000810e 	andeq	r8, r0, lr, lsl #2
    4370:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4374:	0000002c 	andeq	r0, r0, ip, lsr #32
    4378:	00004400 	andeq	r4, r0, r0, lsl #8
    437c:	00692a00 	rsbeq	r2, r9, r0, lsl #20
    4380:	0d01c602 	stceq	6, cr12, [r1, #-8]
    4384:	00000025 	andeq	r0, r0, r5, lsr #32
    4388:	00709102 	rsbseq	r9, r0, r2, lsl #2
    438c:	1f063000 	svcne	0x00063000
    4390:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    4394:	00ac1101 	adceq	r1, ip, r1, lsl #2
    4398:	00000000 	andeq	r0, r0, r0
    439c:	01500000 	cmpeq	r0, r0
    43a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    43a4:	00001b1c 	andeq	r1, r0, ip, lsl fp
    43a8:	00246d25 	eoreq	r6, r4, r5, lsr #26
    43ac:	01490200 	mrseq	r0, (UNDEF: 105)
    43b0:	000cec31 	andeq	lr, ip, r1, lsr ip
    43b4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    43b8:	00617628 	rsbeq	r7, r1, r8, lsr #12
    43bc:	33014a02 	movwcc	r4, #6658	; 0x1a02
    43c0:	00000d4d 	andeq	r0, r0, sp, asr #26
    43c4:	25609102 	strbcs	r9, [r0, #-258]!	; 0xfffffefe
    43c8:	00002c68 	andeq	r2, r0, r8, ror #24
    43cc:	36014b02 	strcc	r4, [r1], -r2, lsl #22
    43d0:	0000008d 	andeq	r0, r0, sp, lsl #1
    43d4:	2a5c9102 	bcs	17287e4 <__end__+0x70c7c4>
    43d8:	4d020069 	stcmi	0, cr0, [r2, #-420]	; 0xfffffe5c
    43dc:	00250901 	eoreq	r0, r5, r1, lsl #18
    43e0:	91020000 	mrsls	r0, (UNDEF: 2)
    43e4:	23032674 	movwcs	r2, #13940	; 0x3674
    43e8:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    43ec:	00810e01 	addeq	r0, r1, r1, lsl #28
    43f0:	91020000 	mrsls	r0, (UNDEF: 2)
    43f4:	20e4266c 	rsccs	r2, r4, ip, ror #12
    43f8:	4f020000 	svcmi	0x00020000
    43fc:	175a0a01 	ldrbne	r0, [sl, -r1, lsl #20]
    4400:	91020000 	mrsls	r0, (UNDEF: 2)
    4404:	e7240073 			; <UNDEFINED> instruction: 0xe7240073
    4408:	0200001f 	andeq	r0, r0, #31
    440c:	ac110134 	ldfges	f0, [r1], {52}	; 0x34
    4410:	ec000000 	stc	0, cr0, [r0], {-0}
    4414:	8c01001d 	stchi	0, cr0, [r1], {29}
    4418:	01000000 	mrseq	r0, (UNDEF: 0)
    441c:	001b829c 	mulseq	fp, ip, r2
    4420:	246d2500 	strbtcs	r2, [sp], #-1280	; 0xfffffb00
    4424:	34020000 	strcc	r0, [r2], #-0
    4428:	0cec2d01 	stcleq	13, cr2, [ip], #4
    442c:	91020000 	mrsls	r0, (UNDEF: 2)
    4430:	23c22664 	biccs	r2, r2, #100, 12	; 0x6400000
    4434:	36020000 	strcc	r0, [r2], -r0
    4438:	00810e01 	addeq	r0, r1, r1, lsl #28
    443c:	91020000 	mrsls	r0, (UNDEF: 2)
    4440:	24652674 	strbtcs	r2, [r5], #-1652	; 0xfffff98c
    4444:	37020000 	strcc	r0, [r2, -r0]
    4448:	00810e01 	addeq	r0, r1, r1, lsl #28
    444c:	91020000 	mrsls	r0, (UNDEF: 2)
    4450:	1c3e3170 	ldfnes	f3, [lr], #-448	; 0xfffffe40
    4454:	1dfc0000 	ldclne	0, cr0, [ip]
    4458:	000c0100 	andeq	r0, ip, r0, lsl #2
    445c:	36020000 	strcc	r0, [r2], -r0
    4460:	4f341601 	svcmi	0x00341601
    4464:	0200001c 	andeq	r0, r0, #28
    4468:	00006c91 	muleq	r0, r1, ip
    446c:	00208a35 	eoreq	r8, r0, r5, lsr sl
    4470:	012f0200 			; <UNDEFINED> instruction: 0x012f0200
    4474:	0000ac11 	andeq	sl, r0, r1, lsl ip
    4478:	00000000 	andeq	r0, r0, r0
    447c:	00001c00 	andeq	r1, r0, r0, lsl #24
    4480:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    4484:	000021bd 			; <UNDEFINED> instruction: 0x000021bd
    4488:	11012a02 	tstne	r1, r2, lsl #20
    448c:	000000ac 	andeq	r0, r0, ip, lsr #1
    4490:	01001dd0 	ldrdeq	r1, [r0, -r0]
    4494:	0000001c 	andeq	r0, r0, ip, lsl r0
    4498:	7b369c01 	blvc	dab4a4 <__core1_unwind_stub-0x254b5c>
    449c:	02000023 	andeq	r0, r0, #35	; 0x23
    44a0:	0335011c 	teqeq	r5, #28, 2
    44a4:	00001bcc 	andeq	r1, r0, ip, asr #23
    44a8:	0022c837 	eoreq	ip, r2, r7, lsr r8
    44ac:	011c0200 	tsteq	ip, r0, lsl #4
    44b0:	0000814f 	andeq	r8, r0, pc, asr #2
    44b4:	67380000 	ldrvs	r0, [r8, -r0]!
    44b8:	02000022 	andeq	r0, r0, #34	; 0x22
    44bc:	8139010a 	teqhi	r9, sl, lsl #2
    44c0:	03000000 	movweq	r0, #0
    44c4:	00001bec 	andeq	r1, r0, ip, ror #23
    44c8:	0022c839 	eoreq	ip, r2, r9, lsr r8
    44cc:	010f0200 	mrseq	r0, (UNDEF: 47)
    44d0:	0000810e 	andeq	r8, r0, lr, lsl #2
    44d4:	453a0000 	ldrmi	r0, [sl, #-0]!
    44d8:	02000022 	andeq	r0, r0, #34	; 0x22
    44dc:	060335fc 			; <UNDEFINED> instruction: 0x060335fc
    44e0:	3b00001c 	blcc	4558 <__core1_unwind_stub-0xffbaa8>
    44e4:	000022c2 	andeq	r2, r0, r2, asr #5
    44e8:	814ffc02 	cmphi	pc, r2, lsl #24	; <UNPREDICTABLE>
    44ec:	00000000 	andeq	r0, r0, r0
    44f0:	001d743c 	andseq	r7, sp, ip, lsr r4
    44f4:	39ea0200 	stmibcc	sl!, {r9}^
    44f8:	00000081 	andeq	r0, r0, r1, lsl #1
    44fc:	001c2403 	andseq	r2, ip, r3, lsl #8
    4500:	22c23d00 	sbccs	r3, r2, #0, 26
    4504:	ef020000 	svc	0x00020000
    4508:	0000810e 	andeq	r8, r0, lr, lsl #2
    450c:	cf3a0000 	svcgt	0x003a0000
    4510:	0200001d 	andeq	r0, r0, #29
    4514:	3e0335dc 	mcrcc	5, 0, r3, cr3, cr12, {6}
    4518:	3b00001c 	blcc	4590 <__core1_unwind_stub-0xffba70>
    451c:	000023c2 	andeq	r2, r0, r2, asr #7
    4520:	814fdc02 	cmphi	pc, r2, lsl #24
    4524:	00000000 	andeq	r0, r0, r0
    4528:	001dea3c 	andseq	lr, sp, ip, lsr sl
    452c:	39ca0200 	stmibcc	sl, {r9}^
    4530:	00000081 	andeq	r0, r0, r1, lsl #1
    4534:	001c5c03 	andseq	r5, ip, r3, lsl #24
    4538:	23c23d00 	biccs	r3, r2, #0, 26
    453c:	cf020000 	svcgt	0x00020000
    4540:	0000810e 	andeq	r8, r0, lr, lsl #2
    4544:	8f3a0000 	svchi	0x003a0000
    4548:	0200001f 	andeq	r0, r0, #31
    454c:	760335bc 			; <UNDEFINED> instruction: 0x760335bc
    4550:	3b00001c 	blcc	45c8 <__core1_unwind_stub-0xffba38>
    4554:	00001f23 	andeq	r1, r0, r3, lsr #30
    4558:	814ebc02 	cmphi	lr, r2, lsl #24
    455c:	00000000 	andeq	r0, r0, r0
    4560:	0021363a 	eoreq	r3, r1, sl, lsr r6
    4564:	359a0200 	ldrcc	r0, [sl, #512]	; 0x200
    4568:	001c9003 	andseq	r9, ip, r3
    456c:	22b73b00 	adcscs	r3, r7, #0, 22
    4570:	9a020000 	bls	84578 <__core1_unwind_stub-0xf7ba88>
    4574:	00008154 	andeq	r8, r0, r4, asr r1
    4578:	6c3a0000 	ldcvs	0, cr0, [sl], #-0
    457c:	0200001c 	andeq	r0, r0, #28
    4580:	aa033578 	bge	d1b68 <__core1_unwind_stub-0xf2e498>
    4584:	3b00001c 	blcc	45fc <__core1_unwind_stub-0xffba04>
    4588:	00002ccf 	andeq	r2, r0, pc, asr #25
    458c:	814f7802 	cmphi	pc, r2, lsl #16
    4590:	00000000 	andeq	r0, r0, r0
    4594:	001e233c 	andseq	r2, lr, ip, lsr r3
    4598:	39660200 	stmdbcc	r6!, {r9}^
    459c:	00000081 	andeq	r0, r0, r1, lsl #1
    45a0:	001cc803 	andseq	ip, ip, r3, lsl #16
    45a4:	2ccf3d00 	stclcs	13, cr3, [pc], {0}
    45a8:	6b020000 	blvs	845b0 <__core1_unwind_stub-0xf7ba50>
    45ac:	0000810e 	andeq	r8, r0, lr, lsl #2
    45b0:	f13e0000 			; <UNDEFINED> instruction: 0xf13e0000
    45b4:	01000020 	tsteq	r0, r0, lsr #32
    45b8:	00251539 	eoreq	r1, r5, r9, lsr r5
    45bc:	1dac0000 	stcne	0, cr0, [ip]
    45c0:	00240100 	eoreq	r0, r4, r0, lsl #2
    45c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    45c8:	001f1c3f 	andseq	r1, pc, pc, lsr ip	; <UNPREDICTABLE>
    45cc:	45390100 	ldrmi	r0, [r9, #-256]!	; 0xffffff00
    45d0:	00000366 	andeq	r0, r0, r6, ror #6
    45d4:	40709102 	rsbsmi	r9, r0, r2, lsl #2
    45d8:	10a00000 	adcne	r0, r0, r0
    45dc:	00040000 	andeq	r0, r4, r0
    45e0:	000008fa 	strdeq	r0, [r0], -sl
    45e4:	003a0104 	eorseq	r0, sl, r4, lsl #2
    45e8:	590c0000 	stmdbpl	ip, {}	; <UNPREDICTABLE>
    45ec:	d0000026 	andle	r0, r0, r6, lsr #32
    45f0:	6000000b 	andvs	r0, r0, fp
    45f4:	00000004 	andeq	r0, r0, r4
    45f8:	54000000 	strpl	r0, [r0], #-0
    45fc:	02000022 	andeq	r0, r0, #34	; 0x22
    4600:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4604:	fa030074 	blx	c47dc <__core1_unwind_stub-0xf3b824>
    4608:	0200002f 	andeq	r0, r0, #47	; 0x2f
    460c:	003817d1 	ldrsbteq	r1, [r8], -r1
    4610:	04040000 	streq	r0, [r4], #-0
    4614:	000b4507 	andeq	r4, fp, r7, lsl #10
    4618:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    461c:	00000805 	andeq	r0, r0, r5, lsl #16
    4620:	9d040804 	stcls	8, cr0, [r4, #-16]
    4624:	0400000a 	streq	r0, [r0], #-10
    4628:	04020601 	streq	r0, [r2], #-1537	; 0xfffff9ff
    462c:	02040000 	andeq	r0, r4, #0
    4630:	000d6105 	andeq	r6, sp, r5, lsl #2
    4634:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4638:	0000080a 	andeq	r0, r0, sl, lsl #16
    463c:	000d8b03 	andeq	r8, sp, r3, lsl #22
    4640:	182b0300 	stmdane	fp!, {r8, r9}
    4644:	0000003f 	andeq	r0, r0, pc, lsr r0
    4648:	00080104 	andeq	r0, r8, r4, lsl #2
    464c:	04000004 	streq	r0, [r0], #-4
    4650:	0e9e0702 	cdpeq	7, 9, cr0, cr14, cr2, {0}
    4654:	04040000 	streq	r0, [r4], #-0
    4658:	000b4007 	andeq	r4, fp, r7
    465c:	0d8a0300 	stceq	3, cr0, [sl]
    4660:	37030000 	strcc	r0, [r3, -r0]
    4664:	00008f19 	andeq	r8, r0, r9, lsl pc
    4668:	07080400 	streq	r0, [r8, -r0, lsl #8]
    466c:	00000b3b 	andeq	r0, r0, fp, lsr fp
    4670:	00269103 	eoreq	r9, r6, r3, lsl #2
    4674:	1b280400 	blne	a0567c <__core1_unwind_stub-0x5fa984>
    4678:	000000a2 	andeq	r0, r0, r2, lsr #1
    467c:	00261d05 	eoreq	r1, r6, r5, lsl #26
    4680:	000a0400 	andeq	r0, sl, r0, lsl #8
    4684:	000000b9 	strheq	r0, [r0], -r9
    4688:	00271406 	eoreq	r1, r7, r6, lsl #8
    468c:	0000b900 	andeq	fp, r0, r0, lsl #18
    4690:	07000000 	streq	r0, [r0, -r0]
    4694:	261f0304 	ldrcs	r0, [pc], -r4, lsl #6
    4698:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    469c:	00009618 	andeq	r9, r0, r8, lsl r6
    46a0:	0c880800 	stceq	8, cr0, [r8], {0}
    46a4:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    46a8:	00381701 	eorseq	r1, r8, r1, lsl #14
    46ac:	55030000 	strpl	r0, [r3, #-0]
    46b0:	06000030 			; <UNDEFINED> instruction: 0x06000030
    46b4:	005b0e2e 	subseq	r0, fp, lr, lsr #28
    46b8:	dd030000 	stcle	0, cr0, [r3, #-0]
    46bc:	0600000a 	streq	r0, [r0], -sl
    46c0:	005b0e74 	subseq	r0, fp, r4, ror lr
    46c4:	04090000 	streq	r0, [r9], #-0
    46c8:	0e03a506 	cfsh32eq	mvfx10, mvfx3, #6
    46cc:	0a000001 	beq	46d8 <__core1_unwind_stub-0xffb928>
    46d0:	0000023a 	andeq	r0, r0, sl, lsr r2
    46d4:	c70ca706 	strgt	sl, [ip, -r6, lsl #14]
    46d8:	0a000000 	beq	46e0 <__core1_unwind_stub-0xffb920>
    46dc:	00000ae5 	andeq	r0, r0, r5, ror #21
    46e0:	0e13a806 	cdpeq	8, 1, cr10, cr3, cr6, {0}
    46e4:	00000001 	andeq	r0, r0, r1
    46e8:	00006e0b 	andeq	r6, r0, fp, lsl #28
    46ec:	00011e00 	andeq	r1, r1, r0, lsl #28
    46f0:	00380c00 	eorseq	r0, r8, r0, lsl #24
    46f4:	00030000 	andeq	r0, r3, r0
    46f8:	a206080d 	andge	r0, r6, #851968	; 0xd0000
    46fc:	00014209 	andeq	r4, r1, r9, lsl #4
    4700:	0a690e00 	beq	1a47f08 <__end__+0xa2bee8>
    4704:	a4060000 	strge	r0, [r6], #-0
    4708:	00002507 	andeq	r2, r0, r7, lsl #10
    470c:	0b0e0000 	bleq	384714 <__core1_unwind_stub-0xc7b8ec>
    4710:	06000000 	streq	r0, [r0], -r0
    4714:	00ec05a9 	rsceq	r0, ip, r9, lsr #11
    4718:	00040000 	andeq	r0, r4, r0
    471c:	000c2003 	andeq	r2, ip, r3
    4720:	03aa0600 			; <UNDEFINED> instruction: 0x03aa0600
    4724:	0000011e 	andeq	r0, r0, lr, lsl r1
    4728:	000e4903 	andeq	r4, lr, r3, lsl #18
    472c:	19160700 	ldmdbne	r6, {r8, r9, sl}
    4730:	0000007c 	andeq	r0, r0, ip, ror r0
    4734:	0006b303 	andeq	fp, r6, r3, lsl #6
    4738:	0d0c0800 	stceq	8, cr0, [ip, #-0]
    473c:	00000025 	andeq	r0, r0, r5, lsr #32
    4740:	000bc703 	andeq	ip, fp, r3, lsl #14
    4744:	1b230700 	blne	8c634c <__core1_unwind_stub-0x739cb4>
    4748:	0000015a 	andeq	r0, r0, sl, asr r1
    474c:	0007080f 	andeq	r0, r7, pc, lsl #16
    4750:	34071800 	strcc	r1, [r7], #-2048	; 0xfffff800
    4754:	0001cc08 	andeq	ip, r1, r8, lsl #24
    4758:	0a340e00 	beq	d07f60 <__core1_unwind_stub-0x2f80a0>
    475c:	36070000 	strcc	r0, [r7], -r0
    4760:	0001cc13 	andeq	ip, r1, r3, lsl ip
    4764:	5f100000 	svcpl	0x00100000
    4768:	3707006b 	strcc	r0, [r7, -fp, rrx]
    476c:	00002507 	andeq	r2, r0, r7, lsl #10
    4770:	610e0400 	tstvs	lr, r0, lsl #8
    4774:	07000007 	streq	r0, [r0, -r7]
    4778:	00250b37 	eoreq	r0, r5, r7, lsr fp
    477c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    4780:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    4784:	25143707 	ldrcs	r3, [r4, #-1799]	; 0xfffff8f9
    4788:	0c000000 	stceq	0, cr0, [r0], {-0}
    478c:	0006010e 	andeq	r0, r6, lr, lsl #2
    4790:	1b370700 	blne	dc6398 <__core1_unwind_stub-0x239c68>
    4794:	00000025 	andeq	r0, r0, r5, lsr #32
    4798:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    479c:	0b380700 	bleq	e063a4 <__core1_unwind_stub-0x1f9c5c>
    47a0:	000001d2 	ldrdeq	r0, [r0], -r2
    47a4:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
    47a8:	00000172 	andeq	r0, r0, r2, ror r1
    47ac:	00014e0b 	andeq	r4, r1, fp, lsl #28
    47b0:	0001e200 	andeq	lr, r1, r0, lsl #4
    47b4:	00380c00 	eorseq	r0, r8, r0, lsl #24
    47b8:	00000000 	andeq	r0, r0, r0
    47bc:	0001400f 	andeq	r4, r1, pc
    47c0:	3c072400 	cfstrscc	mvf2, [r7], {-0}
    47c4:	00026508 	andeq	r6, r2, r8, lsl #10
    47c8:	015c0e00 	cmpeq	ip, r0, lsl #28
    47cc:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    47d0:	00002509 	andeq	r2, r0, r9, lsl #10
    47d4:	8f0e0000 	svchi	0x000e0000
    47d8:	0700000f 	streq	r0, [r0, -pc]
    47dc:	0025093f 	eoreq	r0, r5, pc, lsr r9
    47e0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    47e4:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    47e8:	25094007 	strcs	r4, [r9, #-7]
    47ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    47f0:	0009fb0e 	andeq	pc, r9, lr, lsl #22
    47f4:	09410700 	stmdbeq	r1, {r8, r9, sl}^
    47f8:	00000025 	andeq	r0, r0, r5, lsr #32
    47fc:	038c0e0c 	orreq	r0, ip, #12, 28	; 0xc0
    4800:	42070000 	andmi	r0, r7, #0
    4804:	00002509 	andeq	r2, r0, r9, lsl #10
    4808:	e40e1000 	str	r1, [lr], #-0
    480c:	0700000d 	streq	r0, [r0, -sp]
    4810:	00250943 	eoreq	r0, r5, r3, asr #18
    4814:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    4818:	00000a7b 	andeq	r0, r0, fp, ror sl
    481c:	25094407 	strcs	r4, [r9, #-1031]	; 0xfffffbf9
    4820:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4824:	000aa90e 	andeq	sl, sl, lr, lsl #18
    4828:	09450700 	stmdbeq	r5, {r8, r9, sl}^
    482c:	00000025 	andeq	r0, r0, r5, lsr #32
    4830:	0f550e1c 	svceq	0x00550e1c
    4834:	46070000 	strmi	r0, [r7], -r0
    4838:	00002509 	andeq	r2, r0, r9, lsl #10
    483c:	12002000 	andne	r2, r0, #0
    4840:	00000263 	andeq	r0, r0, r3, ror #4
    4844:	4f070108 	svcmi	0x00070108
    4848:	0002aa08 	andeq	sl, r2, r8, lsl #20
    484c:	0f410e00 	svceq	0x00410e00
    4850:	50070000 	andpl	r0, r7, r0
    4854:	0002aa0a 	andeq	sl, r2, sl, lsl #20
    4858:	660e0000 	strvs	r0, [lr], -r0
    485c:	0700000b 	streq	r0, [r0, -fp]
    4860:	02aa0951 	adceq	r0, sl, #1327104	; 0x144000
    4864:	13800000 	orrne	r0, r0, #0
    4868:	00000dd4 	ldrdeq	r0, [r0], -r4
    486c:	4e0a5307 	cdpmi	3, 0, cr5, cr10, cr7, {0}
    4870:	00000001 	andeq	r0, r0, r1
    4874:	0e101301 	cdpeq	3, 1, cr1, cr0, cr1, {0}
    4878:	56070000 	strpl	r0, [r7], -r0
    487c:	00014e0a 	andeq	r4, r1, sl, lsl #28
    4880:	00010400 	andeq	r0, r1, r0, lsl #8
    4884:	0000b90b 	andeq	fp, r0, fp, lsl #18
    4888:	0002ba00 	andeq	fp, r2, r0, lsl #20
    488c:	00380c00 	eorseq	r0, r8, r0, lsl #24
    4890:	001f0000 	andseq	r0, pc, r0
    4894:	000a5412 	andeq	r5, sl, r2, lsl r4
    4898:	07019000 	streq	r9, [r1, -r0]
    489c:	02fd0862 	rscseq	r0, sp, #6422528	; 0x620000
    48a0:	340e0000 	strcc	r0, [lr], #-0
    48a4:	0700000a 	streq	r0, [r0, -sl]
    48a8:	02fd1263 	rscseq	r1, sp, #805306374	; 0x30000006
    48ac:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    48b0:	00000e04 	andeq	r0, r0, r4, lsl #28
    48b4:	25066407 	strcs	r6, [r6, #-1031]	; 0xfffffbf9
    48b8:	04000000 	streq	r0, [r0], #-0
    48bc:	0004930e 	andeq	r9, r4, lr, lsl #6
    48c0:	09660700 	stmdbeq	r6!, {r8, r9, sl}^
    48c4:	00000303 	andeq	r0, r0, r3, lsl #6
    48c8:	02630e08 	rsbeq	r0, r3, #8, 28	; 0x80
    48cc:	67070000 	strvs	r0, [r7, -r0]
    48d0:	0002651e 	andeq	r6, r2, lr, lsl r5
    48d4:	11008800 	tstne	r0, r0, lsl #16
    48d8:	0002ba04 	andeq	fp, r2, r4, lsl #20
    48dc:	03130b00 	tsteq	r3, #0, 22
    48e0:	03130000 	tsteq	r3, #0
    48e4:	380c0000 	stmdacc	ip, {}	; <UNPREDICTABLE>
    48e8:	1f000000 	svcne	0x00000000
    48ec:	19041100 	stmdbne	r4, {r8, ip}
    48f0:	14000003 	strne	r0, [r0], #-3
    48f4:	000e090f 	andeq	r0, lr, pc, lsl #18
    48f8:	7a070800 	bvc	1c6900 <__core1_unwind_stub-0xe39700>
    48fc:	00034208 	andeq	r4, r3, r8, lsl #4
    4900:	0ba50e00 	bleq	fe948108 <__shm_end__+0xbe948108>
    4904:	7b070000 	blvc	1c490c <__core1_unwind_stub-0xe3b6f4>
    4908:	00034211 	andeq	r4, r3, r1, lsl r2
    490c:	4e0e0000 	cdpmi	0, 0, cr0, cr14, cr0, {0}
    4910:	07000030 	smladxeq	r0, r0, r0, r0
    4914:	0025067c 	eoreq	r0, r5, ip, ror r6
    4918:	00040000 	andeq	r0, r4, r0
    491c:	006e0411 	rsbeq	r0, lr, r1, lsl r4
    4920:	810f0000 	mrshi	r0, CPSR
    4924:	68000006 	stmdavs	r0, {r1, r2}
    4928:	8b08ba07 	blhi	23314c <__core1_unwind_stub-0xdcceb4>
    492c:	10000004 	andne	r0, r0, r4
    4930:	0700705f 	smlsdeq	r0, pc, r0, r7	; <UNPREDICTABLE>
    4934:	034212bb 	movteq	r1, #8891	; 0x22bb
    4938:	10000000 	andne	r0, r0, r0
    493c:	0700725f 	smlsdeq	r0, pc, r2, r7	; <UNPREDICTABLE>
    4940:	002507bc 	strhteq	r0, [r5], -ip
    4944:	10040000 	andne	r0, r4, r0
    4948:	0700775f 	smlsdeq	r0, pc, r7, r7	; <UNPREDICTABLE>
    494c:	002507bd 	strhteq	r0, [r5], -sp
    4950:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    4954:	00000a3a 	andeq	r0, r0, sl, lsr sl
    4958:	5409be07 	strpl	fp, [r9], #-3591	; 0xfffff1f9
    495c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4960:	00025d0e 	andeq	r5, r2, lr, lsl #26
    4964:	09bf0700 	ldmibeq	pc!, {r8, r9, sl}	; <UNPREDICTABLE>
    4968:	00000054 	andeq	r0, r0, r4, asr r0
    496c:	625f100e 	subsvs	r1, pc, #14
    4970:	c0070066 	andgt	r0, r7, r6, rrx
    4974:	00031a11 	andeq	r1, r3, r1, lsl sl
    4978:	f60e1000 			; <UNDEFINED> instruction: 0xf60e1000
    497c:	0700000d 	streq	r0, [r0, -sp]
    4980:	002507c1 	eoreq	r0, r5, r1, asr #15
    4984:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    4988:	000005e4 	andeq	r0, r0, r4, ror #11
    498c:	b90ac807 	stmdblt	sl, {r0, r1, r2, fp, lr, pc}
    4990:	1c000000 	stcne	0, cr0, [r0], {-0}
    4994:	001c390e 	andseq	r3, ip, lr, lsl #18
    4998:	1dca0700 	stclne	7, cr0, [sl]
    499c:	0000060f 	andeq	r0, r0, pc, lsl #12
    49a0:	117d0e20 	cmnne	sp, r0, lsr #28
    49a4:	cc070000 	stcgt	0, cr0, [r7], {-0}
    49a8:	0006391d 	andeq	r3, r6, sp, lsl r9
    49ac:	c60e2400 	strgt	r2, [lr], -r0, lsl #8
    49b0:	0700000a 	streq	r0, [r0, -sl]
    49b4:	065d0dcf 	ldrbeq	r0, [sp], -pc, asr #27
    49b8:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    49bc:	00002b1e 	andeq	r2, r0, lr, lsl fp
    49c0:	7709d007 	strvc	sp, [r9, -r7]
    49c4:	2c000006 	stccs	0, cr0, [r0], {6}
    49c8:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
    49cc:	11d30700 	bicsne	r0, r3, r0, lsl #14
    49d0:	0000031a 	andeq	r0, r0, sl, lsl r3
    49d4:	755f1030 	ldrbvc	r1, [pc, #-48]	; 49ac <__core1_unwind_stub-0xffb654>
    49d8:	d4070070 	strle	r0, [r7], #-112	; 0xffffff90
    49dc:	00034212 	andeq	r4, r3, r2, lsl r2
    49e0:	5f103800 	svcpl	0x00103800
    49e4:	07007275 	smlsdxeq	r0, r5, r2, r7
    49e8:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
    49ec:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
    49f0:	00000a0a 	andeq	r0, r0, sl, lsl #20
    49f4:	7d11d807 	ldcvc	8, cr13, [r1, #-28]	; 0xffffffe4
    49f8:	40000006 	andmi	r0, r0, r6
    49fc:	0001560e 	andeq	r5, r1, lr, lsl #12
    4a00:	11d90700 	bicsne	r0, r9, r0, lsl #14
    4a04:	0000068d 	andeq	r0, r0, sp, lsl #13
    4a08:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
    4a0c:	dc070062 	stcle	0, cr0, [r7], {98}	; 0x62
    4a10:	00031a11 	andeq	r1, r3, r1, lsl sl
    4a14:	b70e4400 	strlt	r4, [lr, -r0, lsl #8]
    4a18:	0700002e 	streq	r0, [r0, -lr, lsr #32]
    4a1c:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
    4a20:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    4a24:	00000627 	andeq	r0, r0, r7, lsr #12
    4a28:	d40ae007 	strle	lr, [sl], #-7
    4a2c:	50000000 	andpl	r0, r0, r0
    4a30:	002b120e 	eoreq	r1, fp, lr, lsl #4
    4a34:	12e30700 	rscne	r0, r3, #0, 14
    4a38:	000004a9 	andeq	r0, r0, r9, lsr #9
    4a3c:	01ab0e54 			; <UNDEFINED> instruction: 0x01ab0e54
    4a40:	e7070000 	str	r0, [r7, -r0]
    4a44:	0001660c 	andeq	r6, r1, ip, lsl #12
    4a48:	260e5800 	strcs	r5, [lr], -r0, lsl #16
    4a4c:	0700000a 	streq	r0, [r0, -sl]
    4a50:	01420ee9 	smlaltteq	r0, r2, r9, lr
    4a54:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    4a58:	00000694 	muleq	r0, r4, r6
    4a5c:	2509ea07 	strcs	lr, [r9, #-2567]	; 0xfffff5f9
    4a60:	64000000 	strvs	r0, [r0], #-0
    4a64:	00251500 	eoreq	r1, r5, r0, lsl #10
    4a68:	04a90000 	strteq	r0, [r9], #0
    4a6c:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
    4a70:	16000004 	strne	r0, [r0], -r4
    4a74:	000000b9 	strheq	r0, [r0], -r9
    4a78:	0005fd16 	andeq	pc, r5, r6, lsl sp	; <UNPREDICTABLE>
    4a7c:	00251600 	eoreq	r1, r5, r0, lsl #12
    4a80:	11000000 	mrsne	r0, (UNDEF: 0)
    4a84:	0004b404 	andeq	fp, r4, r4, lsl #8
    4a88:	04a91700 	strteq	r1, [r9], #1792	; 0x700
    4a8c:	46180000 	ldrmi	r0, [r8], -r0
    4a90:	28000004 	stmdacs	r0, {r2}
    4a94:	02650704 	rsbeq	r0, r5, #4, 14	; 0x100000
    4a98:	0005fd08 	andeq	pc, r5, r8, lsl #26
    4a9c:	09921900 	ldmibeq	r2, {r8, fp, ip}
    4aa0:	67070000 	strvs	r0, [r7, -r0]
    4aa4:	00250702 	eoreq	r0, r5, r2, lsl #14
    4aa8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4aac:	00000522 	andeq	r0, r0, r2, lsr #10
    4ab0:	0b026c07 	bleq	9fad4 <__core1_unwind_stub-0xf6052c>
    4ab4:	000006e9 	andeq	r0, r0, r9, ror #13
    4ab8:	0b871904 	bleq	fe1caed0 <__shm_end__+0xbe1caed0>
    4abc:	6c070000 	stcvs	0, cr0, [r7], {-0}
    4ac0:	06e91402 	strbteq	r1, [r9], r2, lsl #8
    4ac4:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    4ac8:	00000a10 	andeq	r0, r0, r0, lsl sl
    4acc:	1e026c07 	cdpne	12, 0, cr6, cr2, cr7, {0}
    4ad0:	000006e9 	andeq	r0, r0, r9, ror #13
    4ad4:	0dff190c 			; <UNDEFINED> instruction: 0x0dff190c
    4ad8:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    4adc:	00250802 	eoreq	r0, r5, r2, lsl #16
    4ae0:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
    4ae4:	000007fa 	strdeq	r0, [r0], -sl
    4ae8:	08026f07 	stmdaeq	r2, {r0, r1, r2, r8, r9, sl, fp, sp, lr}
    4aec:	000008e9 	andeq	r0, r0, r9, ror #17
    4af0:	042d1914 	strteq	r1, [sp], #-2324	; 0xfffff6ec
    4af4:	72070000 	andvc	r0, r7, #0
    4af8:	00250702 	eoreq	r0, r5, r2, lsl #14
    4afc:	19300000 	ldmdbne	r0!, {}	; <UNPREDICTABLE>
    4b00:	00000e41 	andeq	r0, r0, r1, asr #28
    4b04:	16027307 	strne	r7, [r2], -r7, lsl #6
    4b08:	000008fe 	strdeq	r0, [r0], -lr
    4b0c:	06891934 			; <UNDEFINED> instruction: 0x06891934
    4b10:	75070000 	strvc	r0, [r7, #-0]
    4b14:	00250702 	eoreq	r0, r5, r2, lsl #14
    4b18:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
    4b1c:	0000077d 	andeq	r0, r0, sp, ror r7
    4b20:	0a027707 	beq	a2744 <__core1_unwind_stub-0xf5d8bc>
    4b24:	0000090f 	andeq	r0, r0, pc, lsl #18
    4b28:	0e51193c 			; <UNDEFINED> instruction: 0x0e51193c
    4b2c:	7a070000 	bvc	1c4b34 <__core1_unwind_stub-0xe3b4cc>
    4b30:	01cc1302 	biceq	r1, ip, r2, lsl #6
    4b34:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    4b38:	000002f1 	strdeq	r0, [r0], -r1
    4b3c:	07027b07 	streq	r7, [r2, -r7, lsl #22]
    4b40:	00000025 	andeq	r0, r0, r5, lsr #32
    4b44:	066f1944 	strbteq	r1, [pc], -r4, asr #18
    4b48:	7c070000 	stcvc	0, cr0, [r7], {-0}
    4b4c:	01cc1302 	biceq	r1, ip, r2, lsl #6
    4b50:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
    4b54:	000008a9 	andeq	r0, r0, r9, lsr #17
    4b58:	14027d07 	strne	r7, [r2], #-3335	; 0xfffff2f9
    4b5c:	00000915 	andeq	r0, r0, r5, lsl r9
    4b60:	0110194c 	tsteq	r0, ip, asr #18
    4b64:	80070000 	andhi	r0, r7, r0
    4b68:	00250702 	eoreq	r0, r5, r2, lsl #14
    4b6c:	19500000 	ldmdbne	r0, {}^	; <UNPREDICTABLE>
    4b70:	0000062f 	andeq	r0, r0, pc, lsr #12
    4b74:	09028107 	stmdbeq	r2, {r0, r1, r2, r8, pc}
    4b78:	000005fd 	strdeq	r0, [r0], -sp
    4b7c:	0a051954 	beq	14b0d4 <__core1_unwind_stub-0xeb4f2c>
    4b80:	a4070000 	strge	r0, [r7], #-0
    4b84:	08c40702 	stmiaeq	r4, {r1, r8, r9, sl}^
    4b88:	1a580000 	bne	1604b90 <__end__+0x5e8b70>
    4b8c:	00000a54 	andeq	r0, r0, r4, asr sl
    4b90:	1302a807 	movwne	sl, #10247	; 0x2807
    4b94:	000002fd 	strdeq	r0, [r0], -sp
    4b98:	871a0148 	ldrhi	r0, [sl, -r8, asr #2]
    4b9c:	07000007 	streq	r0, [r0, -r7]
    4ba0:	ba1202a9 	blt	48564c <__core1_unwind_stub-0xb7a9b4>
    4ba4:	4c000002 	stcmi	0, cr0, [r0], {2}
    4ba8:	061d1a01 	ldreq	r1, [sp], -r1, lsl #20
    4bac:	ad070000 	stcge	0, cr0, [r7, #-0]
    4bb0:	09260c02 	stmdbeq	r6!, {r1, sl, fp}
    4bb4:	02dc0000 	sbcseq	r0, ip, #0
    4bb8:	0008341a 	andeq	r3, r8, sl, lsl r4
    4bbc:	02b20700 	adcseq	r0, r2, #0, 14
    4bc0:	0006aa10 	andeq	sl, r6, r0, lsl sl
    4bc4:	1a02e000 	bne	bcbcc <__core1_unwind_stub-0xf43434>
    4bc8:	00000013 	andeq	r0, r0, r3, lsl r0
    4bcc:	0a02b407 	beq	b1bf0 <__core1_unwind_stub-0xf4e410>
    4bd0:	00000932 	andeq	r0, r0, r2, lsr r9
    4bd4:	110002ec 	smlattne	r0, ip, r2, r0
    4bd8:	00060304 	andeq	r0, r6, r4, lsl #6
    4bdc:	08010400 	stmdaeq	r1, {sl}
    4be0:	00000409 	andeq	r0, r0, r9, lsl #8
    4be4:	00060317 	andeq	r0, r6, r7, lsl r3
    4be8:	8b041100 	blhi	108ff0 <__core1_unwind_stub-0xef7010>
    4bec:	15000004 	strne	r0, [r0, #-4]
    4bf0:	00000025 	andeq	r0, r0, r5, lsr #32
    4bf4:	00000633 	andeq	r0, r0, r3, lsr r6
    4bf8:	0004a916 	andeq	sl, r4, r6, lsl r9
    4bfc:	00b91600 	adcseq	r1, r9, r0, lsl #12
    4c00:	33160000 	tstcc	r6, #0
    4c04:	16000006 	strne	r0, [r0], -r6
    4c08:	00000025 	andeq	r0, r0, r5, lsr #32
    4c0c:	0a041100 	beq	109014 <__core1_unwind_stub-0xef6fec>
    4c10:	11000006 	tstne	r0, r6
    4c14:	00061504 	andeq	r1, r6, r4, lsl #10
    4c18:	00e01500 	rsceq	r1, r0, r0, lsl #10
    4c1c:	065d0000 	ldrbeq	r0, [sp], -r0
    4c20:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
    4c24:	16000004 	strne	r0, [r0], -r4
    4c28:	000000b9 	strheq	r0, [r0], -r9
    4c2c:	0000e016 	andeq	lr, r0, r6, lsl r0
    4c30:	00251600 	eoreq	r1, r5, r0, lsl #12
    4c34:	11000000 	mrsne	r0, (UNDEF: 0)
    4c38:	00063f04 	andeq	r3, r6, r4, lsl #30
    4c3c:	00251500 	eoreq	r1, r5, r0, lsl #10
    4c40:	06770000 	ldrbteq	r0, [r7], -r0
    4c44:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
    4c48:	16000004 	strne	r0, [r0], -r4
    4c4c:	000000b9 	strheq	r0, [r0], -r9
    4c50:	63041100 	movwvs	r1, #16640	; 0x4100
    4c54:	0b000006 	bleq	4c74 <__core1_unwind_stub-0xffb38c>
    4c58:	0000006e 	andeq	r0, r0, lr, rrx
    4c5c:	0000068d 	andeq	r0, r0, sp, lsl #13
    4c60:	0000380c 	andeq	r3, r0, ip, lsl #16
    4c64:	0b000200 	bleq	546c <__core1_unwind_stub-0xffab94>
    4c68:	0000006e 	andeq	r0, r0, lr, rrx
    4c6c:	0000069d 	muleq	r0, sp, r6
    4c70:	0000380c 	andeq	r3, r0, ip, lsl #16
    4c74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4c78:	00000c12 	andeq	r0, r0, r2, lsl ip
    4c7c:	1a012407 	bne	4dca0 <__core1_unwind_stub-0xfb2360>
    4c80:	00000348 	andeq	r0, r0, r8, asr #6
    4c84:	0008b91b 	andeq	fp, r8, fp, lsl r9
    4c88:	28070c00 	stmdacs	r7, {sl, fp}
    4c8c:	06e30801 	strbteq	r0, [r3], r1, lsl #16
    4c90:	34190000 	ldrcc	r0, [r9], #-0
    4c94:	0700000a 	streq	r0, [r0, -sl]
    4c98:	e311012a 	tst	r1, #-2147483638	; 0x8000000a
    4c9c:	00000006 	andeq	r0, r0, r6
    4ca0:	00082d19 	andeq	r2, r8, r9, lsl sp
    4ca4:	012b0700 			; <UNDEFINED> instruction: 0x012b0700
    4ca8:	00002507 	andeq	r2, r0, r7, lsl #10
    4cac:	b3190400 	tstlt	r9, #0, 8
    4cb0:	07000008 	streq	r0, [r0, -r8]
    4cb4:	e90b012c 	stmdb	fp, {r2, r3, r5, r8}
    4cb8:	08000006 	stmdaeq	r0, {r1, r2}
    4cbc:	aa041100 	bge	1090c4 <__core1_unwind_stub-0xef6f3c>
    4cc0:	11000006 	tstne	r0, r6
    4cc4:	00069d04 	andeq	r9, r6, r4, lsl #26
    4cc8:	0b7f1b00 	bleq	1fcb8d0 <__end__+0xfaf8b0>
    4ccc:	070e0000 	streq	r0, [lr, -r0]
    4cd0:	28080144 	stmdacs	r8, {r2, r6, r8}
    4cd4:	19000007 	stmdbne	r0, {r0, r1, r2}
    4cd8:	00000ac0 	andeq	r0, r0, r0, asr #21
    4cdc:	12014507 	andne	r4, r1, #29360128	; 0x1c00000
    4ce0:	00000728 	andeq	r0, r0, r8, lsr #14
    4ce4:	01bf1900 			; <UNDEFINED> instruction: 0x01bf1900
    4ce8:	46070000 	strmi	r0, [r7], -r0
    4cec:	07281201 	streq	r1, [r8, -r1, lsl #4]!
    4cf0:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
    4cf4:	00000e8c 	andeq	r0, r0, ip, lsl #29
    4cf8:	12014707 	andne	r4, r1, #1835008	; 0x1c0000
    4cfc:	00000075 	andeq	r0, r0, r5, ror r0
    4d00:	750b000c 	strvc	r0, [fp, #-12]
    4d04:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4d08:	0c000007 	stceq	0, cr0, [r0], {7}
    4d0c:	00000038 	andeq	r0, r0, r8, lsr r0
    4d10:	d01c0002 	andsle	r0, ip, r2
    4d14:	07028507 	streq	r8, [r2, -r7, lsl #10]
    4d18:	0000084d 	andeq	r0, r0, sp, asr #16
    4d1c:	0003ce19 	andeq	ip, r3, r9, lsl lr
    4d20:	02870700 	addeq	r0, r7, #0, 14
    4d24:	00003818 	andeq	r3, r0, r8, lsl r8
    4d28:	ab190000 	blge	644d30 <__core1_unwind_stub-0x9bb2d0>
    4d2c:	0700000b 	streq	r0, [r0, -fp]
    4d30:	fd120288 	ldc2	2, cr0, [r2, #-544]	; 0xfffffde0
    4d34:	04000005 	streq	r0, [r0], #-5
    4d38:	00002d19 	andeq	r2, r0, r9, lsl sp
    4d3c:	02890700 	addeq	r0, r9, #0, 14
    4d40:	00084d10 	andeq	r4, r8, r0, lsl sp
    4d44:	10190800 	andsne	r0, r9, r0, lsl #16
    4d48:	07000003 	streq	r0, [r0, -r3]
    4d4c:	e217028a 	ands	r0, r7, #-1610612728	; 0xa0000008
    4d50:	24000001 	strcs	r0, [r0], #-1
    4d54:	00088319 	andeq	r8, r8, r9, lsl r3
    4d58:	028b0700 	addeq	r0, fp, #0, 14
    4d5c:	0000250f 	andeq	r2, r0, pc, lsl #10
    4d60:	2f194800 	svccs	0x00194800
    4d64:	0700000a 	streq	r0, [r0, -sl]
    4d68:	8f2c028c 	svchi	0x002c028c
    4d6c:	50000000 	andpl	r0, r0, r0
    4d70:	000c7619 	andeq	r7, ip, r9, lsl r6
    4d74:	028d0700 	addeq	r0, sp, #0, 14
    4d78:	0006ef1a 	andeq	lr, r6, sl, lsl pc
    4d7c:	54195800 	ldrpl	r5, [r9], #-2048	; 0xfffff800
    4d80:	0700000d 	streq	r0, [r0, -sp]
    4d84:	4216028e 	andsmi	r0, r6, #-536870904	; 0xe0000008
    4d88:	68000001 	stmdavs	r0, {r0}
    4d8c:	000afa19 	andeq	pc, sl, r9, lsl sl	; <UNPREDICTABLE>
    4d90:	028f0700 	addeq	r0, pc, #0, 14
    4d94:	00014216 	andeq	r4, r1, r6, lsl r2
    4d98:	18197000 	ldmdane	r9, {ip, sp, lr}
    4d9c:	0700000a 	streq	r0, [r0, -sl]
    4da0:	42160290 	andsmi	r0, r6, #144, 4
    4da4:	78000001 	stmdavc	r0, {r0}
    4da8:	00016519 	andeq	r6, r1, r9, lsl r5
    4dac:	02910700 	addseq	r0, r1, #0, 14
    4db0:	00085d10 	andeq	r5, r8, r0, lsl sp
    4db4:	e3198000 	tst	r9, #0
    4db8:	07000006 	streq	r0, [r0, -r6]
    4dbc:	6d100292 	lfmvs	f0, 4, [r0, #-584]	; 0xfffffdb8
    4dc0:	88000008 	stmdahi	r0, {r3}
    4dc4:	000f9819 	andeq	r9, pc, r9, lsl r8	; <UNPREDICTABLE>
    4dc8:	02930700 	addseq	r0, r3, #0, 14
    4dcc:	0000250f 	andeq	r2, r0, pc, lsl #10
    4dd0:	e319a000 	tst	r9, #0
    4dd4:	07000002 	streq	r0, [r0, -r2]
    4dd8:	42160294 	andsmi	r0, r6, #148, 4	; 0x40000009
    4ddc:	a4000001 	strge	r0, [r0], #-1
    4de0:	000bb819 	andeq	fp, fp, r9, lsl r8
    4de4:	02950700 	addseq	r0, r5, #0, 14
    4de8:	00014216 	andeq	r4, r1, r6, lsl r2
    4dec:	0119ac00 	tsteq	r9, r0, lsl #24
    4df0:	0700000f 	streq	r0, [r0, -pc]
    4df4:	42160296 	andsmi	r0, r6, #1610612745	; 0x60000009
    4df8:	b4000001 	strlt	r0, [r0], #-1
    4dfc:	0009ec19 	andeq	lr, r9, r9, lsl ip
    4e00:	02970700 	addseq	r0, r7, #0, 14
    4e04:	00014216 	andeq	r4, r1, r6, lsl r2
    4e08:	4519bc00 	ldrmi	fp, [r9, #-3072]	; 0xfffff400
    4e0c:	07000001 	streq	r0, [r0, -r1]
    4e10:	42160298 	andsmi	r0, r6, #152, 4	; 0x80000009
    4e14:	c4000001 	strgt	r0, [r0], #-1
    4e18:	00099019 	andeq	r9, r9, r9, lsl r0
    4e1c:	02990700 	addseq	r0, r9, #0, 14
    4e20:	00002508 	andeq	r2, r0, r8, lsl #10
    4e24:	0b00cc00 	bleq	37e2c <__core1_unwind_stub-0xfc81d4>
    4e28:	00000603 	andeq	r0, r0, r3, lsl #12
    4e2c:	0000085d 	andeq	r0, r0, sp, asr r8
    4e30:	0000380c 	andeq	r3, r0, ip, lsl #16
    4e34:	0b001900 	bleq	b23c <__core1_unwind_stub-0xff4dc4>
    4e38:	00000603 	andeq	r0, r0, r3, lsl #12
    4e3c:	0000086d 	andeq	r0, r0, sp, ror #16
    4e40:	0000380c 	andeq	r3, r0, ip, lsl #16
    4e44:	0b000700 	bleq	6a4c <__core1_unwind_stub-0xff95b4>
    4e48:	00000603 	andeq	r0, r0, r3, lsl #12
    4e4c:	0000087d 	andeq	r0, r0, sp, ror r8
    4e50:	0000380c 	andeq	r3, r0, ip, lsl #16
    4e54:	1c001700 	stcne	7, cr1, [r0], {-0}
    4e58:	029e07f0 	addseq	r0, lr, #240, 14	; 0x3c00000
    4e5c:	0008a407 	andeq	sl, r8, r7, lsl #8
    4e60:	0e181900 	vnmlseq.f16	s2, s16, s0	; <UNPREDICTABLE>
    4e64:	a1070000 	mrsge	r0, (UNDEF: 7)
    4e68:	08a41b02 	stmiaeq	r4!, {r1, r8, r9, fp, ip}
    4e6c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4e70:	00000848 	andeq	r0, r0, r8, asr #16
    4e74:	1802a207 	stmdane	r2, {r0, r1, r2, r9, sp, pc}
    4e78:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    4e7c:	420b0078 	andmi	r0, fp, #120	; 0x78
    4e80:	b4000003 	strlt	r0, [r0], #-3
    4e84:	0c000008 	stceq	0, cr0, [r0], {8}
    4e88:	00000038 	andeq	r0, r0, r8, lsr r0
    4e8c:	380b001d 	stmdacc	fp, {r0, r2, r3, r4}
    4e90:	c4000000 	strgt	r0, [r0], #-0
    4e94:	0c000008 	stceq	0, cr0, [r0], {8}
    4e98:	00000038 	andeq	r0, r0, r8, lsr r0
    4e9c:	f01d001d 			; <UNDEFINED> instruction: 0xf01d001d
    4ea0:	03028307 	movweq	r8, #8967	; 0x2307
    4ea4:	000008e9 	andeq	r0, r0, r9, ror #17
    4ea8:	0004461e 	andeq	r4, r4, lr, lsl r6
    4eac:	029a0700 	addseq	r0, sl, #0, 14
    4eb0:	0007380b 	andeq	r3, r7, fp, lsl #16
    4eb4:	01381e00 	teqeq	r8, r0, lsl #28
    4eb8:	a3070000 	movwge	r0, #28672	; 0x7000
    4ebc:	087d0b02 	ldmdaeq	sp!, {r1, r8, r9, fp}^
    4ec0:	0b000000 	bleq	4ec8 <__core1_unwind_stub-0xffb138>
    4ec4:	00000603 	andeq	r0, r0, r3, lsl #12
    4ec8:	000008f9 	strdeq	r0, [r0], -r9
    4ecc:	0000380c 	andeq	r3, r0, ip, lsl #16
    4ed0:	1f001800 	svcne	0x00001800
    4ed4:	00000000 	andeq	r0, r0, r0
    4ed8:	08f90411 	ldmeq	r9!, {r0, r4, sl}^
    4edc:	0f200000 	svceq	0x00200000
    4ee0:	16000009 	strne	r0, [r0], -r9
    4ee4:	000004a9 	andeq	r0, r0, r9, lsr #9
    4ee8:	04041100 	streq	r1, [r4], #-256	; 0xffffff00
    4eec:	11000009 	tstne	r0, r9
    4ef0:	0001cc04 	andeq	ip, r1, r4, lsl #24
    4ef4:	09262000 	stmdbeq	r6!, {sp}
    4ef8:	25160000 	ldrcs	r0, [r6, #-0]
    4efc:	00000000 	andeq	r0, r0, r0
    4f00:	092c0411 	stmdbeq	ip!, {r0, r4, sl}
    4f04:	04110000 	ldreq	r0, [r1], #-0
    4f08:	0000091b 	andeq	r0, r0, fp, lsl r9
    4f0c:	00069d0b 	andeq	r9, r6, fp, lsl #26
    4f10:	00094200 	andeq	r4, r9, r0, lsl #4
    4f14:	00380c00 	eorseq	r0, r8, r0, lsl #24
    4f18:	00020000 	andeq	r0, r2, r0
    4f1c:	00045421 	andeq	r5, r4, r1, lsr #8
    4f20:	03330700 	teqeq	r3, #0, 14
    4f24:	0004a917 	andeq	sl, r4, r7, lsl r9
    4f28:	044d2100 	strbeq	r2, [sp], #-256	; 0xffffff00
    4f2c:	34070000 	strcc	r0, [r7], #-0
    4f30:	04af1d03 	strteq	r1, [pc], #3331	; 4f38 <__core1_unwind_stub-0xffb0c8>
    4f34:	14030000 	strne	r0, [r3], #-0
    4f38:	0500000c 	streq	r0, [r0, #-12]
    4f3c:	069d1042 	ldreq	r1, [sp], r2, asr #32
    4f40:	ab0f0000 	blge	3c4f48 <__core1_unwind_stub-0xc3b0b8>
    4f44:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
    4f48:	9d102709 	ldcls	7, cr2, [r0, #-36]	; 0xffffffdc
    4f4c:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    4f50:	0000262e 	andeq	r2, r0, lr, lsr #12
    4f54:	b30c2909 	movwlt	r2, #51465	; 0xc909
    4f58:	00000009 	andeq	r0, r0, r9
    4f5c:	0026cf0e 	eoreq	ip, r6, lr, lsl #30
    4f60:	0b2a0900 	bleq	a87368 <__core1_unwind_stub-0x578c98>
    4f64:	000005fd 	strdeq	r0, [r0], -sp
    4f68:	26c80e04 	strbcs	r0, [r8], r4, lsl #28
    4f6c:	2b090000 	blcs	244f74 <__core1_unwind_stub-0xdbb08c>
    4f70:	0005fd0b 	andeq	pc, r5, fp, lsl #26
    4f74:	20000800 	andcs	r0, r0, r0, lsl #16
    4f78:	000009ad 	andeq	r0, r0, sp, lsr #19
    4f7c:	00060316 	andeq	r0, r6, r6, lsl r3
    4f80:	09ad1600 	stmibeq	sp!, {r9, sl, ip}
    4f84:	11000000 	mrsne	r0, (UNDEF: 0)
    4f88:	00095c04 	andeq	r5, r9, r4, lsl #24
    4f8c:	9d041100 	stflss	f1, [r4, #-0]
    4f90:	03000009 	movweq	r0, #9
    4f94:	00002766 	andeq	r2, r0, r6, ror #14
    4f98:	68032c09 	stmdavs	r3, {r0, r3, sl, fp, sp}
    4f9c:	22000009 	andcs	r0, r0, #9
    4fa0:	0000083c 	andeq	r0, r0, ip, lsr r8
    4fa4:	ad0e3609 	stcge	6, cr3, [lr, #-36]	; 0xffffffdc
    4fa8:	22000009 	andcs	r0, r0, #9
    4fac:	00000842 	andeq	r0, r0, r2, asr #16
    4fb0:	ad0e3709 	stcge	7, cr3, [lr, #-36]	; 0xffffffdc
    4fb4:	23000009 	movwcs	r0, #9
    4fb8:	000009c5 	andeq	r0, r0, r5, asr #19
    4fbc:	051d2d01 	ldreq	r2, [sp, #-3329]	; 0xfffff2ff
    4fc0:	00000003 	andeq	r0, r0, r3
    4fc4:	09d12300 	ldmibeq	r1, {r8, r9, sp}^
    4fc8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    4fcc:	0803051d 	stmdaeq	r3, {r0, r2, r3, r4, r8, sl}
    4fd0:	24010057 	strcs	r0, [r1], #-87	; 0xffffffa9
    4fd4:	0000267b 	andeq	r2, r0, fp, ror r6
    4fd8:	05022901 	streq	r2, [r2, #-2305]	; 0xfffff6ff
    4fdc:	00000025 	andeq	r0, r0, r5, lsr #32
    4fe0:	01004604 	tsteq	r0, r4, lsl #12
    4fe4:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    4fe8:	0ad39c01 	beq	ff4ebff4 <__shm_end__+0xbf4ebff4>
    4fec:	fe250000 	cdp2	0, 2, cr0, cr5, cr0, {0}
    4ff0:	01000025 	tsteq	r0, r5, lsr #32
    4ff4:	ad180229 	lfmge	f0, 4, [r8, #-164]	; 0xffffff5c
    4ff8:	02000009 	andeq	r0, r0, #9
    4ffc:	1c255491 	cfstrsne	mvf5, [r5], #-580	; 0xfffffdbc
    5000:	0100001f 	tsteq	r0, pc, lsl r0
    5004:	332c0229 			; <UNDEFINED> instruction: 0x332c0229
    5008:	02000006 	andeq	r0, r0, #6
    500c:	6c255091 	stcvs	0, cr5, [r5], #-580	; 0xfffffdbc
    5010:	01000002 	tsteq	r0, r2
    5014:	bb3c0229 	bllt	f058c0 <__core1_unwind_stub-0xfa740>
    5018:	02000000 	andeq	r0, r0, #0
    501c:	f8264c91 			; <UNDEFINED> instruction: 0xf8264c91
    5020:	01000025 	tsteq	r0, r5, lsr #32
    5024:	d31c022b 	tstle	ip, #-1342177278	; 0xb0000002
    5028:	0200000a 	andeq	r0, r0, #10
    502c:	03266891 			; <UNDEFINED> instruction: 0x03266891
    5030:	01000023 	tsteq	r0, r3, lsr #32
    5034:	2509022c 	strcs	r0, [r9, #-556]	; 0xfffffdd4
    5038:	02000000 	andeq	r0, r0, #0
    503c:	e3266491 			; <UNDEFINED> instruction: 0xe3266491
    5040:	0100001d 	tsteq	r0, sp, lsl r0
    5044:	2511022c 	ldrcs	r0, [r1, #-556]	; 0xfffffdd4
    5048:	02000000 	andeq	r0, r0, #0
    504c:	6b267491 	blvs	9a2298 <__core1_unwind_stub-0x65dd68>
    5050:	0100000a 	tsteq	r0, sl
    5054:	2509022d 	strcs	r0, [r9, #-557]	; 0xfffffdd3
    5058:	02000000 	andeq	r0, r0, #0
    505c:	64276091 	strtvs	r6, [r7], #-145	; 0xffffff6f
    5060:	0100746f 	tsteq	r0, pc, ror #8
    5064:	2511022d 	ldrcs	r0, [r1, #-557]	; 0xfffffdd3
    5068:	02000000 	andeq	r0, r0, #0
    506c:	63277091 			; <UNDEFINED> instruction: 0x63277091
    5070:	022e0100 	eoreq	r0, lr, #0, 2
    5074:	0006030a 	andeq	r0, r6, sl, lsl #6
    5078:	6f910200 	svcvs	0x00910200
    507c:	0026eb26 	eoreq	lr, r6, r6, lsr #22
    5080:	022e0100 	eoreq	r0, lr, #0, 2
    5084:	0006030c 	andeq	r0, r6, ip, lsl #6
    5088:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    508c:	00245226 	eoreq	r5, r4, r6, lsr #4
    5090:	022f0100 	eoreq	r0, pc, #0, 2
    5094:	00002509 	andeq	r2, r0, r9, lsl #10
    5098:	5c910200 	lfmpl	f0, 4, [r1], {0}
    509c:	0026f726 	eoreq	pc, r6, r6, lsr #14
    50a0:	022f0100 	eoreq	r0, pc, #0, 2
    50a4:	0000250f 	andeq	r2, r0, pc, lsl #10
    50a8:	58910200 	ldmpl	r1, {r9}
    50ac:	b9041100 	stmdblt	r4, {r8, ip}
    50b0:	28000009 	stmdacs	r0, {r0, r3}
    50b4:	000026e2 	andeq	r2, r0, r2, ror #13
    50b8:	0c016201 	sfmeq	f6, 4, [r1], {1}
    50bc:	00000025 	andeq	r0, r0, r5, lsr #32
    50c0:	01003de8 	smlatteq	r0, r8, sp, r3
    50c4:	0000081c 	andeq	r0, r0, ip, lsl r8
    50c8:	0c389c01 	ldceq	12, cr9, [r8], #-4
    50cc:	f8250000 			; <UNDEFINED> instruction: 0xf8250000
    50d0:	01000025 	tsteq	r0, r5, lsr #32
    50d4:	d32c0162 			; <UNDEFINED> instruction: 0xd32c0162
    50d8:	0300000a 	movweq	r0, #10
    50dc:	257fac91 	ldrbcs	sl, [pc, #-3217]!	; 4453 <__core1_unwind_stub-0xffbbad>
    50e0:	0000275c 	andeq	r2, r0, ip, asr r7
    50e4:	37016201 	strcc	r6, [r1, -r1, lsl #4]
    50e8:	00000603 	andeq	r0, r0, r3, lsl #12
    50ec:	7fab9103 	svcvc	0x00ab9103
    50f0:	0026eb25 	eoreq	lr, r6, r5, lsr #22
    50f4:	01620100 	cmneq	r2, r0, lsl #2
    50f8:	00060346 	andeq	r0, r6, r6, asr #6
    50fc:	aa910300 	bge	fe445d04 <__shm_end__+0xbe445d04>
    5100:	2452257f 	ldrbcs	r2, [r2], #-1407	; 0xfffffa81
    5104:	62010000 	andvs	r0, r1, #0
    5108:	00254f01 	eoreq	r4, r5, r1, lsl #30
    510c:	91030000 	mrsls	r0, (UNDEF: 3)
    5110:	e3257fa4 			; <UNDEFINED> instruction: 0xe3257fa4
    5114:	0100001d 	tsteq	r0, sp, lsl r0
    5118:	25590162 	ldrbcs	r0, [r9, #-354]	; 0xfffffe9e
    511c:	02000000 	andeq	r0, r0, #0
    5120:	f7250091 			; <UNDEFINED> instruction: 0xf7250091
    5124:	01000026 	tsteq	r0, r6, lsr #32
    5128:	25640162 	strbcs	r0, [r4, #-354]!	; 0xfffffe9e
    512c:	02000000 	andeq	r0, r0, #0
    5130:	64290491 	strtvs	r0, [r9], #-1169	; 0xfffffb6f
    5134:	0100746f 	tsteq	r0, pc, ror #8
    5138:	25720162 	ldrbcs	r0, [r2, #-354]!	; 0xfffffe9e
    513c:	02000000 	andeq	r0, r0, #0
    5140:	01250891 			; <UNDEFINED> instruction: 0x01250891
    5144:	01000027 	tsteq	r0, r7, lsr #32
    5148:	387c0162 	ldmdacc	ip!, {r1, r5, r6, r8}^
    514c:	0200000c 	andeq	r0, r0, #12
    5150:	6c250c91 	stcvs	12, cr0, [r5], #-580	; 0xfffffdbc
    5154:	01000002 	tsteq	r0, r2
    5158:	3e8e0162 	rmfccez	f0, f6, f2
    515c:	0200000c 	andeq	r0, r0, #12
    5160:	52261091 	eorpl	r1, r6, #145	; 0x91
    5164:	01000027 	tsteq	r0, r7, lsr #32
    5168:	440a0164 	strmi	r0, [sl], #-356	; 0xfffffe9c
    516c:	0300000c 	movweq	r0, #12
    5170:	277fb491 			; <UNDEFINED> instruction: 0x277fb491
    5174:	00646170 	rsbeq	r6, r4, r0, ror r1
    5178:	13016401 	movwne	r6, #5121	; 0x1401
    517c:	00000603 	andeq	r0, r0, r3, lsl #12
    5180:	26779102 	ldrbtcs	r9, [r7], -r2, lsl #2
    5184:	00002614 	andeq	r2, r0, r4, lsl r6
    5188:	1b016401 	blne	5e194 <__core1_unwind_stub-0xfa1e6c>
    518c:	00000603 	andeq	r0, r0, r3, lsl #12
    5190:	26769102 	ldrbtcs	r9, [r6], -r2, lsl #2
    5194:	000025ee 	andeq	r2, r0, lr, ror #11
    5198:	26016401 	strcs	r6, [r1], -r1, lsl #8
    519c:	00000603 	andeq	r0, r0, r3, lsl #12
    51a0:	26759102 	ldrbtcs	r9, [r5], -r2, lsl #2
    51a4:	00000a6b 	andeq	r0, r0, fp, ror #20
    51a8:	09016501 	stmdbeq	r1, {r0, r8, sl, sp, lr}
    51ac:	00000025 	andeq	r0, r0, r5, lsr #32
    51b0:	27709102 	ldrbcs	r9, [r0, -r2, lsl #2]!
    51b4:	65010069 	strvs	r0, [r1, #-105]	; 0xffffff97
    51b8:	00250f01 	eoreq	r0, r5, r1, lsl #30
    51bc:	91020000 	mrsls	r0, (UNDEF: 2)
    51c0:	2719266c 	ldrcs	r2, [r9, -ip, ror #12]
    51c4:	65010000 	strvs	r0, [r1, #-0]
    51c8:	00251101 	eoreq	r1, r5, r1, lsl #2
    51cc:	91020000 	mrsls	r0, (UNDEF: 2)
    51d0:	27362668 	ldrcs	r2, [r6, -r8, ror #12]!
    51d4:	65010000 	strvs	r0, [r1, #-0]
    51d8:	00251901 	eoreq	r1, r5, r1, lsl #18
    51dc:	91020000 	mrsls	r0, (UNDEF: 2)
    51e0:	616d2764 	cmnvs	sp, r4, ror #14
    51e4:	66010078 			; <UNDEFINED> instruction: 0x66010078
    51e8:	00250901 	eoreq	r0, r5, r1, lsl #18
    51ec:	91020000 	mrsls	r0, (UNDEF: 2)
    51f0:	61762760 	cmnvs	r6, r0, ror #14
    51f4:	6701006c 	strvs	r0, [r1, -ip, rrx]
    51f8:	00620d01 	rsbeq	r0, r2, r1, lsl #26
    51fc:	91020000 	mrsls	r0, (UNDEF: 2)
    5200:	26272658 			; <UNDEFINED> instruction: 0x26272658
    5204:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    5208:	05fd0c01 	ldrbeq	r0, [sp, #3073]!	; 0xc01
    520c:	91020000 	mrsls	r0, (UNDEF: 2)
    5210:	04110054 	ldreq	r0, [r1], #-84	; 0xffffffac
    5214:	00000025 	andeq	r0, r0, r5, lsr #32
    5218:	00bb0411 	adcseq	r0, fp, r1, lsl r4
    521c:	030b0000 	movweq	r0, #45056	; 0xb000
    5220:	54000006 	strpl	r0, [r0], #-6
    5224:	0c00000c 	stceq	0, cr0, [r0], {12}
    5228:	00000038 	andeq	r0, r0, r8, lsr r0
    522c:	3c2a001f 	stccc	0, cr0, [sl], #-124	; 0xffffff84
    5230:	01000026 	tsteq	r0, r6, lsr #32
    5234:	250c0137 	strcs	r0, [ip, #-311]	; 0xfffffec9
    5238:	70000000 	andvc	r0, r0, r0
    523c:	7801003c 	stmdavc	r1, {r2, r3, r4, r5}
    5240:	01000001 	tsteq	r0, r1
    5244:	000d009c 	muleq	sp, ip, r0
    5248:	61762900 	cmnvs	r6, r0, lsl #18
    524c:	3701006c 	strcc	r0, [r1, -ip, rrx]
    5250:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    5254:	91020000 	mrsls	r0, (UNDEF: 2)
    5258:	74732958 	ldrbtvc	r2, [r3], #-2392	; 0xfffff6a8
    525c:	37010067 	strcc	r0, [r1, -r7, rrx]
    5260:	05fd2a01 	ldrbeq	r2, [sp, #2561]!	; 0xa01
    5264:	91020000 	mrsls	r0, (UNDEF: 2)
    5268:	275c2554 			; <UNDEFINED> instruction: 0x275c2554
    526c:	37010000 	strcc	r0, [r1, -r0]
    5270:	06033301 	streq	r3, [r3], -r1, lsl #6
    5274:	91020000 	mrsls	r0, (UNDEF: 2)
    5278:	273c2553 			; <UNDEFINED> instruction: 0x273c2553
    527c:	37010000 	strcc	r0, [r1, -r0]
    5280:	00254101 	eoreq	r4, r5, r1, lsl #2
    5284:	91020000 	mrsls	r0, (UNDEF: 2)
    5288:	0a6b2600 	beq	1acea90 <__end__+0xab2a70>
    528c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    5290:	00250901 	eoreq	r0, r5, r1, lsl #18
    5294:	91020000 	mrsls	r0, (UNDEF: 2)
    5298:	272a2674 			; <UNDEFINED> instruction: 0x272a2674
    529c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    52a0:	00251101 	eoreq	r1, r5, r1, lsl #2
    52a4:	91020000 	mrsls	r0, (UNDEF: 2)
    52a8:	271f2670 			; <UNDEFINED> instruction: 0x271f2670
    52ac:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    52b0:	00251a01 	eoreq	r1, r5, r1, lsl #20
    52b4:	91020000 	mrsls	r0, (UNDEF: 2)
    52b8:	26c1266c 	strbcs	r2, [r1], ip, ror #12
    52bc:	3a010000 	bcc	452c4 <__core1_unwind_stub-0xfbad3c>
    52c0:	00250901 	eoreq	r0, r5, r1, lsl #18
    52c4:	91020000 	mrsls	r0, (UNDEF: 2)
    52c8:	27092668 	strcs	r2, [r9, -r8, ror #12]
    52cc:	3a010000 	bcc	452d4 <__core1_unwind_stub-0xfbad2c>
    52d0:	00251201 	eoreq	r1, r5, r1, lsl #4
    52d4:	91020000 	mrsls	r0, (UNDEF: 2)
    52d8:	a0280064 	eorge	r0, r8, r4, rrx
    52dc:	01000026 	tsteq	r0, r6, lsr #32
    52e0:	250c0115 	strcs	r0, [ip, #-277]	; 0xfffffeeb
    52e4:	34000000 	strcc	r0, [r0], #-0
    52e8:	3c01003b 	stccc	0, cr0, [r1], {59}	; 0x3b
    52ec:	01000001 	tsteq	r0, r1
    52f0:	000d6a9c 	muleq	sp, ip, sl
    52f4:	61762900 	cmnvs	r6, r0, lsl #18
    52f8:	1501006c 	strne	r0, [r1, #-108]	; 0xffffff94
    52fc:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    5300:	91020000 	mrsls	r0, (UNDEF: 2)
    5304:	74732968 	ldrbtvc	r2, [r3], #-2408	; 0xfffff698
    5308:	15010067 	strne	r0, [r1, #-103]	; 0xffffff99
    530c:	05fd2a01 	ldrbeq	r2, [sp, #2561]!	; 0xa01
    5310:	91020000 	mrsls	r0, (UNDEF: 2)
    5314:	27362564 	ldrcs	r2, [r6, -r4, ror #10]!
    5318:	15010000 	strne	r0, [r1, #-0]
    531c:	00253201 	eoreq	r3, r5, r1, lsl #4
    5320:	91020000 	mrsls	r0, (UNDEF: 2)
    5324:	0a6b2660 	beq	1acecac <__end__+0xab2c8c>
    5328:	17010000 	strne	r0, [r1, -r0]
    532c:	00250901 	eoreq	r0, r5, r1, lsl #18
    5330:	91020000 	mrsls	r0, (UNDEF: 2)
    5334:	00692774 	rsbeq	r2, r9, r4, ror r7
    5338:	12011701 	andne	r1, r1, #262144	; 0x40000
    533c:	00000025 	andeq	r0, r0, r5, lsr #32
    5340:	00709102 	rsbseq	r9, r0, r2, lsl #2
    5344:	0026522b 	eoreq	r5, r6, fp, lsr #4
    5348:	0dbe0100 	ldfeqs	f0, [lr]
    534c:	00000603 	andeq	r0, r0, r3, lsl #12
    5350:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
    5354:	00000098 	muleq	r0, r8, r0
    5358:	0dbf9c01 	ldceq	12, cr9, [pc, #4]!	; 5364 <__core1_unwind_stub-0xffac9c>
    535c:	1c2c0000 	stcne	0, cr0, [ip], #-0
    5360:	0100001f 	tsteq	r0, pc, lsl r0
    5364:	063320be 			; <UNDEFINED> instruction: 0x063320be
    5368:	91020000 	mrsls	r0, (UNDEF: 2)
    536c:	23032c74 	movwcs	r2, #15476	; 0x3c74
    5370:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    5374:	000c382d 	andeq	r3, ip, sp, lsr #16
    5378:	70910200 	addsvc	r0, r1, r0, lsl #4
    537c:	6c61762d 	stclvs	6, cr7, [r1], #-180	; 0xffffff4c
    5380:	3abe0100 	bcc	fef85788 <__shm_end__+0xbef85788>
    5384:	00000c38 	andeq	r0, r0, r8, lsr ip
    5388:	2d6c9102 	stfcsp	f1, [ip, #-8]!
    538c:	be010063 	cdplt	0, 0, cr0, cr1, cr3, {3}
    5390:	00060344 	andeq	r0, r6, r4, asr #6
    5394:	6b910200 	blvs	fe445b9c <__shm_end__+0xbe445b9c>
    5398:	26882e00 	strcs	r2, [r8], r0, lsl #28
    539c:	ad010000 	stcge	0, cr0, [r1, #-0]
    53a0:	0006030d 	andeq	r0, r6, sp, lsl #6
    53a4:	003a4400 	eorseq	r4, sl, r0, lsl #8
    53a8:	00005801 	andeq	r5, r0, r1, lsl #16
    53ac:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    53b0:	2c00000e 	stccs	0, cr0, [r0], {14}
    53b4:	00001f1c 	andeq	r1, r0, ip, lsl pc
    53b8:	3322ad01 			; <UNDEFINED> instruction: 0x3322ad01
    53bc:	02000006 	andeq	r0, r0, #6
    53c0:	032c6c91 			; <UNDEFINED> instruction: 0x032c6c91
    53c4:	01000023 	tsteq	r0, r3, lsr #32
    53c8:	0c382fad 	ldceq	15, cr2, [r8], #-692	; 0xfffffd4c
    53cc:	91020000 	mrsls	r0, (UNDEF: 2)
    53d0:	00632f68 	rsbeq	r2, r3, r8, ror #30
    53d4:	030aaf01 	movweq	sl, #44801	; 0xaf01
    53d8:	02000006 	andeq	r0, r0, #6
    53dc:	30007791 	mulcc	r0, r1, r7
    53e0:	00002731 	andeq	r2, r0, r1, lsr r7
    53e4:	d80d9f01 	stmdale	sp, {r0, r8, r9, sl, fp, ip, pc}
    53e8:	6c010039 	stcvs	0, cr0, [r1], {57}	; 0x39
    53ec:	01000000 	mrseq	r0, (UNDEF: 0)
    53f0:	000e479c 	muleq	lr, ip, r7
    53f4:	25f82c00 	ldrbcs	r2, [r8, #3072]!	; 0xc00
    53f8:	9f010000 	svcls	0x00010000
    53fc:	000ad329 	andeq	sp, sl, r9, lsr #6
    5400:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5404:	000a6b2c 	andeq	r6, sl, ip, lsr #22
    5408:	369f0100 	ldrcc	r0, [pc], r0, lsl #2
    540c:	00000c38 	andeq	r0, r0, r8, lsr ip
    5410:	2d709102 	ldfcsp	f1, [r0, #-8]!
    5414:	9f010063 	svcls	0x00010063
    5418:	00060342 	andeq	r0, r6, r2, asr #6
    541c:	6f910200 	svcvs	0x00910200
    5420:	26803100 	strcs	r3, [r0], r0, lsl #2
    5424:	c4050000 	strgt	r0, [r5], #-0
    5428:	00002505 	andeq	r2, r0, r5, lsl #10
    542c:	00000000 	andeq	r0, r0, r0
    5430:	00004800 	andeq	r4, r0, r0, lsl #16
    5434:	9e9c0100 	fmllse	f0, f4, f0
    5438:	2c00000e 	stccs	0, cr0, [r0], {14}
    543c:	000025fe 	strdeq	r2, [r0], -lr
    5440:	ad138c01 	ldcge	12, cr8, [r3, #-4]
    5444:	02000009 	andeq	r0, r0, #9
    5448:	1c2c5c91 	stcne	12, cr5, [ip], #-580	; 0xfffffdbc
    544c:	0100001f 	tsteq	r0, pc, lsl r0
    5450:	0633278c 	ldrteq	r2, [r3], -ip, lsl #15
    5454:	91020000 	mrsls	r0, (UNDEF: 2)
    5458:	722f3274 	eorvc	r3, pc, #116, 4	; 0x40000007
    545c:	8e010063 	cdphi	0, 0, cr0, cr1, cr3, {3}
    5460:	00002509 	andeq	r2, r0, r9, lsl #10
    5464:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5468:	00026c33 	andeq	r6, r2, r3, lsr ip
    546c:	0d900100 	ldfeqs	f0, [r0]
    5470:	000000bb 	strheq	r0, [r0], -fp
    5474:	00609102 	rsbeq	r9, r0, r2, lsl #2
    5478:	00264731 	eoreq	r4, r6, r1, lsr r7
    547c:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 5384 <__core1_unwind_stub-0xffac7c>
    5480:	00000025 	andeq	r0, r0, r5, lsr #32
    5484:	01003988 	smlabbeq	r0, r8, r9, r3
    5488:	00000050 	andeq	r0, r0, r0, asr r0
    548c:	0ee69c01 	cdpeq	12, 14, cr9, cr6, cr1, {0}
    5490:	1c2c0000 	stcne	0, cr0, [ip], #-0
    5494:	0100001f 	tsteq	r0, pc, lsl r0
    5498:	06331c7f 			; <UNDEFINED> instruction: 0x06331c7f
    549c:	91020000 	mrsls	r0, (UNDEF: 2)
    54a0:	722f3270 	eorvc	r3, pc, #112, 4
    54a4:	81010063 	tsthi	r1, r3, rrx
    54a8:	00002509 	andeq	r2, r0, r9, lsl #10
    54ac:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    54b0:	00026c33 	andeq	r6, r2, r3, lsr ip
    54b4:	0d830100 	stfeqs	f0, [r3]
    54b8:	000000bb 	strheq	r0, [r0], -fp
    54bc:	00609102 	rsbeq	r9, r0, r2, lsl #2
    54c0:	00274631 	eoreq	r4, r7, r1, lsr r6
    54c4:	056b0100 	strbeq	r0, [fp, #-256]!	; 0xffffff00
    54c8:	00000025 	andeq	r0, r0, r5, lsr #32
    54cc:	00000000 	andeq	r0, r0, r0
    54d0:	00000068 	andeq	r0, r0, r8, rrx
    54d4:	0f4b9c01 	svceq	0x004b9c01
    54d8:	742d0000 	strtvc	r0, [sp], #-0
    54dc:	6b01006f 	blvs	456a0 <__core1_unwind_stub-0xfba960>
    54e0:	0005fd17 	andeq	pc, r5, r7, lsl sp	; <UNPREDICTABLE>
    54e4:	4c910200 	lfmmi	f0, 4, [r1], {0}
    54e8:	001f1c2c 	andseq	r1, pc, ip, lsr #24
    54ec:	276b0100 	strbcs	r0, [fp, -r0, lsl #2]!
    54f0:	00000633 	andeq	r0, r0, r3, lsr r6
    54f4:	32749102 	rsbscc	r9, r4, #-2147483648	; 0x80000000
    54f8:	00275733 	eoreq	r5, r7, r3, lsr r7
    54fc:	1b6d0100 	blne	1b45904 <__end__+0xb298e4>
    5500:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
    5504:	2f589102 	svccs	0x00589102
    5508:	01006372 	tsteq	r0, r2, ror r3
    550c:	0025096e 	eoreq	r0, r5, lr, ror #18
    5510:	91020000 	mrsls	r0, (UNDEF: 2)
    5514:	026c3364 	rsbeq	r3, ip, #100, 6	; 0x90000001
    5518:	70010000 	andvc	r0, r1, r0
    551c:	0000bb0d 	andeq	fp, r0, sp, lsl #22
    5520:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    5524:	26d53100 	ldrbcs	r3, [r5], r0, lsl #2
    5528:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    552c:	00002505 	andeq	r2, r0, r5, lsl #10
    5530:	00000000 	andeq	r0, r0, r0
    5534:	00007800 	andeq	r7, r0, r0, lsl #16
    5538:	bd9c0100 	ldflts	f0, [ip]
    553c:	2d00000f 	stccs	0, cr0, [r0, #-60]	; 0xffffffc4
    5540:	01006f74 	tsteq	r0, r4, ror pc
    5544:	05fd1859 	ldrbeq	r1, [sp, #2137]!	; 0x859
    5548:	91020000 	mrsls	r0, (UNDEF: 2)
    554c:	006e2d54 	rsbeq	r2, lr, r4, asr sp
    5550:	2c235901 			; <UNDEFINED> instruction: 0x2c235901
    5554:	02000000 	andeq	r0, r0, #0
    5558:	1c2c5091 	stcne	0, cr5, [ip], #-580	; 0xfffffdbc
    555c:	0100001f 	tsteq	r0, pc, lsl r0
    5560:	06333259 			; <UNDEFINED> instruction: 0x06333259
    5564:	91020000 	mrsls	r0, (UNDEF: 2)
    5568:	57333278 			; <UNDEFINED> instruction: 0x57333278
    556c:	01000027 	tsteq	r0, r7, lsr #32
    5570:	09b91b5b 	ldmibeq	r9!, {r0, r1, r3, r4, r6, r8, r9, fp, ip}
    5574:	91020000 	mrsls	r0, (UNDEF: 2)
    5578:	63722f60 	cmnvs	r2, #96, 30	; 0x180
    557c:	095c0100 	ldmdbeq	ip, {r8}^
    5580:	00000025 	andeq	r0, r0, r5, lsr #32
    5584:	336c9102 	cmncc	ip, #-2147483648	; 0x80000000
    5588:	0000026c 	andeq	r0, r0, ip, ror #4
    558c:	bb0d5e01 	bllt	35cd98 <__core1_unwind_stub-0xca3268>
    5590:	02000000 	andeq	r0, r0, #0
    5594:	34005c91 	strcc	r5, [r0], #-3217	; 0xfffff36f
    5598:	00002605 	andeq	r2, r0, r5, lsl #12
    559c:	000d4901 	andeq	r4, sp, r1, lsl #18
    55a0:	b4000000 	strlt	r0, [r0], #-0
    55a4:	01000000 	mrseq	r0, (UNDEF: 0)
    55a8:	0010019c 	mulseq	r0, ip, r1
    55ac:	260e2c00 	strcs	r2, [lr], -r0, lsl #24
    55b0:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    55b4:	0006031b 	andeq	r0, r6, fp, lsl r3
    55b8:	6f910200 	svcvs	0x00910200
    55bc:	0028df2c 	eoreq	sp, r8, ip, lsr #30
    55c0:	28490100 	stmdacs	r9, {r8}^
    55c4:	000009ad 	andeq	r0, r0, sp, lsr #19
    55c8:	33689102 	cmncc	r8, #-2147483648	; 0x80000000
    55cc:	00002757 	andeq	r2, r0, r7, asr r7
    55d0:	d31c4b01 	tstle	ip, #1024	; 0x400
    55d4:	0200000a 	andeq	r0, r0, #10
    55d8:	31007491 			; <UNDEFINED> instruction: 0x31007491
    55dc:	000026f0 	strdeq	r2, [r0], -r0
    55e0:	2c08e005 	stccs	0, cr14, [r8], {5}
    55e4:	00000000 	andeq	r0, r0, r0
    55e8:	90000000 	andls	r0, r0, r0
    55ec:	01000000 	mrseq	r0, (UNDEF: 0)
    55f0:	0010769c 	mulseq	r0, ip, r6
    55f4:	74702d00 	ldrbtvc	r2, [r0], #-3328	; 0xfffff300
    55f8:	35010072 	strcc	r0, [r1, #-114]	; 0xffffff8e
    55fc:	0010761b 	andseq	r7, r0, fp, lsl r6
    5600:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5604:	00304f2c 	eorseq	r4, r0, ip, lsr #30
    5608:	27350100 	ldrcs	r0, [r5, -r0, lsl #2]!
    560c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5610:	2c689102 	stfcsp	f1, [r8], #-8
    5614:	00000a6b 	andeq	r0, r0, fp, ror #20
    5618:	2c343501 	cfldr32cs	mvfx3, [r4], #-4
    561c:	02000000 	andeq	r0, r0, #0
    5620:	fe2c6491 	mcr2	4, 1, r6, cr12, cr1, {4}
    5624:	01000025 	tsteq	r0, r5, lsr #32
    5628:	09ad4135 	stmibeq	sp!, {r0, r2, r4, r5, r8, lr}
    562c:	91020000 	mrsls	r0, (UNDEF: 2)
    5630:	25f83360 	ldrbcs	r3, [r8, #864]!	; 0x360
    5634:	37010000 	strcc	r0, [r1, -r0]
    5638:	000ad31c 	andeq	sp, sl, ip, lsl r3
    563c:	70910200 	addsvc	r0, r1, r0, lsl #4
    5640:	00230333 	eoreq	r0, r3, r3, lsr r3
    5644:	09380100 	ldmdbeq	r8!, {r8}
    5648:	00000025 	andeq	r0, r0, r5, lsr #32
    564c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    5650:	107c0411 	rsbsne	r0, ip, r1, lsl r4
    5654:	36350000 	ldrtcc	r0, [r5], -r0
    5658:	00002676 	andeq	r2, r0, r6, ror r6
    565c:	2505dd05 	strcs	sp, [r5, #-3333]	; 0xfffff2fb
    5660:	00000000 	andeq	r0, r0, r0
    5664:	30000000 	andcc	r0, r0, r0
    5668:	01000000 	mrseq	r0, (UNDEF: 0)
    566c:	74732d9c 	ldrbtvc	r2, [r3], #-3484	; 0xfffff264
    5670:	30010072 	andcc	r0, r1, r2, ror r0
    5674:	00063316 	andeq	r3, r6, r6, lsl r3
    5678:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    567c:	0ce50000 	stcleq	0, cr0, [r5]
    5680:	00040000 	andeq	r0, r4, r0
    5684:	00000c68 	andeq	r0, r0, r8, ror #24
    5688:	003a0104 	eorseq	r0, sl, r4, lsl #2
    568c:	420c0000 	andmi	r0, ip, #0
    5690:	d0000028 	andle	r0, r0, r8, lsr #32
    5694:	d800000b 	stmdale	r0, {r0, r1, r3}
    5698:	00000004 	andeq	r0, r0, r4
    569c:	06000000 	streq	r0, [r0], -r0
    56a0:	0200002a 	andeq	r0, r0, #42	; 0x2a
    56a4:	04020601 	streq	r0, [r2], #-1537	; 0xfffff9ff
    56a8:	02020000 	andeq	r0, r2, #0
    56ac:	000d6105 	andeq	r6, sp, r5, lsl #2
    56b0:	2ec20300 	cdpcs	3, 12, cr0, cr2, cr0, {0}
    56b4:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    56b8:	00003f18 	andeq	r3, r0, r8, lsl pc
    56bc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    56c0:	0000080a 	andeq	r0, r0, sl, lsl #16
    56c4:	05050802 	streq	r0, [r5, #-2050]	; 0xfffff7fe
    56c8:	02000008 	andeq	r0, r0, #8
    56cc:	04000801 	streq	r0, [r0], #-2049	; 0xfffff7ff
    56d0:	02020000 	andeq	r0, r2, #0
    56d4:	000e9e07 	andeq	r9, lr, r7, lsl #28
    56d8:	30430300 	subcc	r0, r3, r0, lsl #6
    56dc:	34020000 	strcc	r0, [r2], #-0
    56e0:	00006719 	andeq	r6, r0, r9, lsl r7
    56e4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    56e8:	00000b40 	andeq	r0, r0, r0, asr #22
    56ec:	3b070802 	blcc	1c76fc <__core1_unwind_stub-0xe38904>
    56f0:	0400000b 	streq	r0, [r0], #-11
    56f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    56f8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    56fc:	000b4507 	andeq	r4, fp, r7, lsl #10
    5700:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    5704:	00000a9d 	muleq	r0, sp, sl
    5708:	0004d603 	andeq	sp, r4, r3, lsl #12
    570c:	1d410300 	stclne	3, cr0, [r1, #-0]
    5710:	00000033 	andeq	r0, r0, r3, lsr r0
    5714:	00094503 	andeq	r4, r9, r3, lsl #10
    5718:	122a0400 	eorne	r0, sl, #0, 8
    571c:	0000005b 	andeq	r0, r0, fp, asr r0
    5720:	000dee05 	andeq	lr, sp, r5, lsl #28
    5724:	4d010700 	stcmi	7, cr0, [r1, #-0]
    5728:	04000000 	streq	r0, [r0], #-0
    572c:	016f0e8b 	smulbbeq	pc, fp, lr	; <UNPREDICTABLE>
    5730:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
    5734:	00000005 	andeq	r0, r0, r5
    5738:	000ccc06 	andeq	ip, ip, r6, lsl #24
    573c:	f7060100 			; <UNDEFINED> instruction: 0xf7060100
    5740:	02000008 	andeq	r0, r0, #8
    5744:	000acc06 	andeq	ip, sl, r6, lsl #24
    5748:	7c060300 	stcvc	3, cr0, [r6], {-0}
    574c:	04000005 	streq	r0, [r0], #-5
    5750:	000c8f06 	andeq	r8, ip, r6, lsl #30
    5754:	a5060500 	strge	r0, [r6, #-1280]	; 0xfffffb00
    5758:	0600000f 	streq	r0, [r0], -pc
    575c:	00011806 	andeq	r1, r1, r6, lsl #16
    5760:	6d060700 	stcvs	7, cr0, [r6, #-0]
    5764:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5768:	0007c806 	andeq	ip, r7, r6, lsl #16
    576c:	7c060900 			; <UNDEFINED> instruction: 0x7c060900
    5770:	0a00000e 	beq	57b0 <__core1_unwind_stub-0xffa850>
    5774:	00027106 	andeq	r7, r2, r6, lsl #2
    5778:	ec060b00 			; <UNDEFINED> instruction: 0xec060b00
    577c:	0c00000a 	stceq	0, cr0, [r0], {10}
    5780:	00027f06 	andeq	r7, r2, r6, lsl #30
    5784:	90060d00 	andls	r0, r6, r0, lsl #26
    5788:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    578c:	0005d406 	andeq	sp, r5, r6, lsl #8
    5790:	bd060f00 	stclt	15, cr0, [r6, #-0]
    5794:	10000003 	andne	r0, r0, r3
    5798:	000e5906 	andeq	r5, lr, r6, lsl #18
    579c:	7d061100 	stfvcs	f1, [r6, #-0]
    57a0:	1200000f 	andne	r0, r0, #15
    57a4:	000b5206 	andeq	r5, fp, r6, lsl #4
    57a8:	11061300 	mrsne	r1, LR_und
    57ac:	1400000d 	strne	r0, [r0], #-13
    57b0:	000d1f06 	andeq	r1, sp, r6, lsl #30
    57b4:	2d061500 	cfstr32cs	mvfx1, [r6, #-0]
    57b8:	1600000d 	strne	r0, [r0], -sp
    57bc:	00037006 	andeq	r7, r3, r6
    57c0:	f4061700 	vst1.8	{d1}, [r6], r0
    57c4:	18000005 	stmdane	r0, {r0, r2}
    57c8:	000dc606 	andeq	ip, sp, r6, lsl #12
    57cc:	fc061900 	stc2	9, cr1, [r6], {-0}	; <UNPREDICTABLE>
    57d0:	1a000006 	bne	57f0 <__core1_unwind_stub-0xffa810>
    57d4:	000e9106 	andeq	r9, lr, r6, lsl #2
    57d8:	df061b00 	svcle	0x00061b00
    57dc:	1c000008 	stcne	0, cr0, [r0], {8}
    57e0:	000c2b06 	andeq	r2, ip, r6, lsl #22
    57e4:	60061d00 	andvs	r1, r6, r0, lsl #26
    57e8:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    57ec:	1add0500 	bne	ff746bf4 <__shm_end__+0xbf746bf4>
    57f0:	02070000 	andeq	r0, r7, #0
    57f4:	00000054 	andeq	r0, r0, r4, asr r0
    57f8:	950e4d05 	strls	r4, [lr, #-3333]	; 0xfffff2fb
    57fc:	06000001 	streq	r0, [r0], -r1
    5800:	000015af 	andeq	r1, r0, pc, lsr #11
    5804:	15ce0600 	strbne	r0, [lr, #1536]	; 0x600
    5808:	07010000 	streq	r0, [r1, -r0]
    580c:	000013d9 	ldrdeq	r1, [r0], -r9
    5810:	03000100 	movweq	r0, #256	; 0x100
    5814:	00001b60 	andeq	r1, r0, r0, ror #22
    5818:	6f015f05 	svcvs	0x00015f05
    581c:	08000001 	stmdaeq	r0, {r0}
    5820:	00001b8a 	andeq	r1, r0, sl, lsl #23
    5824:	10660514 	rsbne	r0, r6, r4, lsl r5
    5828:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    582c:	00072109 	andeq	r2, r7, r9, lsl #2
    5830:	18680500 	stmdane	r8!, {r8, sl}^
    5834:	00000195 	muleq	r0, r5, r1
    5838:	28390900 	ldmdacs	r9!, {r8, fp}
    583c:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    5840:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5844:	f2090400 	vshl.s8	d0, d0, d9
    5848:	05000014 	streq	r0, [r0, #-20]	; 0xffffffec
    584c:	0096186a 	addseq	r1, r6, sl, ror #16
    5850:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    5854:	00002b13 	andeq	r2, r0, r3, lsl fp
    5858:	5b186b05 	blpl	620474 <__core1_unwind_stub-0x9dfb8c>
    585c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5860:	7263660a 	rsbvc	r6, r3, #10485760	; 0xa00000
    5864:	186c0500 	stmdane	ip!, {r8, sl}^
    5868:	0000005b 	andeq	r0, r0, fp, asr r0
    586c:	040b0010 	streq	r0, [fp], #-16
    5870:	001b9d03 	andseq	r9, fp, r3, lsl #26
    5874:	016e0500 	cmneq	lr, r0, lsl #10
    5878:	000001a1 	andeq	r0, r0, r1, lsr #3
    587c:	0014d70c 	andseq	sp, r4, ip, lsl #14
    5880:	4d010700 	stcmi	7, cr0, [r1, #-0]
    5884:	05000000 	streq	r0, [r0, #-0]
    5888:	2a0e053c 	bcs	386d80 <__core1_unwind_stub-0xc79280>
    588c:	06000002 	streq	r0, [r0], -r2
    5890:	000013fc 	strdeq	r1, [r0], -ip
    5894:	14110600 	ldrne	r0, [r1], #-1536	; 0xfffffa00
    5898:	06010000 	streq	r0, [r1], -r0
    589c:	00001426 	andeq	r1, r0, r6, lsr #8
    58a0:	143b0602 	ldrtne	r0, [fp], #-1538	; 0xfffff9fe
    58a4:	00030000 	andeq	r0, r3, r0
    58a8:	0012760c 	andseq	r7, r2, ip, lsl #12
    58ac:	4d010700 	stcmi	7, cr0, [r1, #-0]
    58b0:	05000000 	streq	r0, [r0, #-0]
    58b4:	4a0e0557 	bmi	386e18 <__core1_unwind_stub-0xc791e8>
    58b8:	06000002 	streq	r0, [r0], -r2
    58bc:	00001108 	andeq	r1, r0, r8, lsl #2
    58c0:	111d0600 	tstne	sp, r0, lsl #12
    58c4:	00010000 	andeq	r0, r1, r0
    58c8:	001a300c 	andseq	r3, sl, ip
    58cc:	4d010700 	stcmi	7, cr0, [r1, #-0]
    58d0:	05000000 	streq	r0, [r0, #-0]
    58d4:	700e0569 	andvc	r0, lr, r9, ror #10
    58d8:	06000002 	streq	r0, [r0], -r2
    58dc:	00001591 	muleq	r0, r1, r5
    58e0:	16640600 	strbtne	r0, [r4], -r0, lsl #12
    58e4:	06010000 	streq	r0, [r1], -r0
    58e8:	00001a1a 	andeq	r1, r0, sl, lsl sl
    58ec:	8a0c0002 	bhi	3058fc <__core1_unwind_stub-0xcfa704>
    58f0:	07000028 	streq	r0, [r0, -r8, lsr #32]
    58f4:	00004d01 	andeq	r4, r0, r1, lsl #26
    58f8:	05820500 	streq	r0, [r2, #1280]	; 0x500
    58fc:	0002b40e 	andeq	fp, r2, lr, lsl #8
    5900:	28ff0600 	ldmcs	pc!, {r9, sl}^	; <UNPREDICTABLE>
    5904:	06800000 	streq	r0, [r0], r0
    5908:	00002800 	andeq	r2, r0, r0, lsl #16
    590c:	28e40640 	stmiacs	r4!, {r6, r9, sl}^
    5910:	06200000 	strteq	r0, [r0], -r0
    5914:	000027dd 	ldrdeq	r2, [r0], -sp
    5918:	28710610 	ldmdacs	r1!, {r4, r9, sl}^
    591c:	06080000 	streq	r0, [r8], -r0
    5920:	0000279b 	muleq	r0, fp, r7
    5924:	27820604 	strcs	r0, [r2, r4, lsl #12]
    5928:	06020000 	streq	r0, [r2], -r0
    592c:	0000281b 	andeq	r2, r0, fp, lsl r8
    5930:	880d0001 	stmdahi	sp, {r0}
    5934:	0600000c 	streq	r0, [r0], -ip
    5938:	7c17015e 	ldfvcs	f0, [r7], {94}	; 0x5e
    593c:	03000000 	movweq	r0, #0
    5940:	00003055 	andeq	r3, r0, r5, asr r0
    5944:	3f0e2e07 	svccc	0x000e2e07
    5948:	03000000 	movweq	r0, #0
    594c:	00000add 	ldrdeq	r0, [r0], -sp
    5950:	3f0e7407 	svccc	0x000e7407
    5954:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5958:	03a50704 			; <UNDEFINED> instruction: 0x03a50704
    595c:	000002fb 	strdeq	r0, [r0], -fp
    5960:	00023a0f 	andeq	r3, r2, pc, lsl #20
    5964:	0ca70700 	stceq	7, cr0, [r7]
    5968:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    596c:	000ae50f 	andeq	lr, sl, pc, lsl #10
    5970:	13a80700 			; <UNDEFINED> instruction: 0x13a80700
    5974:	000002fb 	strdeq	r0, [r0], -fp
    5978:	004d1000 	subeq	r1, sp, r0
    597c:	030b0000 	movweq	r0, #45056	; 0xb000
    5980:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    5984:	03000000 	movweq	r0, #0
    5988:	07081200 	streq	r1, [r8, -r0, lsl #4]
    598c:	032f09a2 			; <UNDEFINED> instruction: 0x032f09a2
    5990:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
    5994:	0700000a 	streq	r0, [r0, -sl]
    5998:	007507a4 	rsbseq	r0, r5, r4, lsr #15
    599c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    59a0:	0000000b 	andeq	r0, r0, fp
    59a4:	d905a907 	stmdble	r5, {r0, r1, r2, r8, fp, sp, pc}
    59a8:	04000002 	streq	r0, [r0], #-2
    59ac:	0c200300 	stceq	3, cr0, [r0], #-0
    59b0:	aa070000 	bge	1c59b8 <__core1_unwind_stub-0xe3a648>
    59b4:	00030b03 	andeq	r0, r3, r3, lsl #22
    59b8:	0e490300 	cdpeq	3, 4, cr0, cr9, cr0, {0}
    59bc:	16080000 	strne	r0, [r8], -r0
    59c0:	00006719 	andeq	r6, r0, r9, lsl r7
    59c4:	06b30300 	ldrteq	r0, [r3], r0, lsl #6
    59c8:	0c090000 	stceq	0, cr0, [r9], {-0}
    59cc:	0000750d 	andeq	r7, r0, sp, lsl #10
    59d0:	0bc70300 	bleq	ff1c65d8 <__shm_end__+0xbf1c65d8>
    59d4:	23080000 	movwcs	r0, #32768	; 0x8000
    59d8:	0003471b 	andeq	r4, r3, fp, lsl r7
    59dc:	07080800 	streq	r0, [r8, -r0, lsl #16]
    59e0:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    59e4:	03b90834 			; <UNDEFINED> instruction: 0x03b90834
    59e8:	34090000 	strcc	r0, [r9], #-0
    59ec:	0800000a 	stmdaeq	r0, {r1, r3}
    59f0:	03b91336 			; <UNDEFINED> instruction: 0x03b91336
    59f4:	0a000000 	beq	59fc <__core1_unwind_stub-0xffa604>
    59f8:	08006b5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
    59fc:	00750737 	rsbseq	r0, r5, r7, lsr r7
    5a00:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    5a04:	00000761 	andeq	r0, r0, r1, ror #14
    5a08:	750b3708 	strvc	r3, [fp, #-1800]	; 0xfffff8f8
    5a0c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5a10:	0008bf09 	andeq	fp, r8, r9, lsl #30
    5a14:	14370800 	ldrtne	r0, [r7], #-2048	; 0xfffff800
    5a18:	00000075 	andeq	r0, r0, r5, ror r0
    5a1c:	0601090c 	streq	r0, [r1], -ip, lsl #18
    5a20:	37080000 	strcc	r0, [r8, -r0]
    5a24:	0000751b 	andeq	r7, r0, fp, lsl r5
    5a28:	5f0a1000 	svcpl	0x000a1000
    5a2c:	38080078 	stmdacc	r8, {r3, r4, r5, r6}
    5a30:	0003bf0b 	andeq	fp, r3, fp, lsl #30
    5a34:	13001400 	movwne	r1, #1024	; 0x400
    5a38:	00035f04 	andeq	r5, r3, r4, lsl #30
    5a3c:	033b1000 	teqeq	fp, #0
    5a40:	03cf0000 	biceq	r0, pc, #0
    5a44:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    5a48:	00000000 	andeq	r0, r0, r0
    5a4c:	01400800 	cmpeq	r0, r0, lsl #16
    5a50:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    5a54:	0452083c 	ldrbeq	r0, [r2], #-2108	; 0xfffff7c4
    5a58:	5c090000 	stcpl	0, cr0, [r9], {-0}
    5a5c:	08000001 	stmdaeq	r0, {r0}
    5a60:	0075093e 	rsbseq	r0, r5, lr, lsr r9
    5a64:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5a68:	00000f8f 	andeq	r0, r0, pc, lsl #31
    5a6c:	75093f08 	strvc	r3, [r9, #-3848]	; 0xfffff0f8
    5a70:	04000000 	streq	r0, [r0], #-0
    5a74:	000eb109 	andeq	fp, lr, r9, lsl #2
    5a78:	09400800 	stmdbeq	r0, {fp}^
    5a7c:	00000075 	andeq	r0, r0, r5, ror r0
    5a80:	09fb0908 	ldmibeq	fp!, {r3, r8, fp}^
    5a84:	41080000 	mrsmi	r0, (UNDEF: 8)
    5a88:	00007509 	andeq	r7, r0, r9, lsl #10
    5a8c:	8c090c00 	stchi	12, cr0, [r9], {-0}
    5a90:	08000003 	stmdaeq	r0, {r0, r1}
    5a94:	00750942 	rsbseq	r0, r5, r2, asr #18
    5a98:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    5a9c:	00000de4 	andeq	r0, r0, r4, ror #27
    5aa0:	75094308 	strvc	r4, [r9, #-776]	; 0xfffffcf8
    5aa4:	14000000 	strne	r0, [r0], #-0
    5aa8:	000a7b09 	andeq	r7, sl, r9, lsl #22
    5aac:	09440800 	stmdbeq	r4, {fp}^
    5ab0:	00000075 	andeq	r0, r0, r5, ror r0
    5ab4:	0aa90918 	beq	fea47f1c <__shm_end__+0xbea47f1c>
    5ab8:	45080000 	strmi	r0, [r8, #-0]
    5abc:	00007509 	andeq	r7, r0, r9, lsl #10
    5ac0:	55091c00 	strpl	r1, [r9, #-3072]	; 0xfffff400
    5ac4:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5ac8:	00750946 	rsbseq	r0, r5, r6, asr #18
    5acc:	00200000 	eoreq	r0, r0, r0
    5ad0:	00026314 	andeq	r6, r2, r4, lsl r3
    5ad4:	08010800 	stmdaeq	r1, {fp}
    5ad8:	0497084f 	ldreq	r0, [r7], #2127	; 0x84f
    5adc:	41090000 	mrsmi	r0, (UNDEF: 9)
    5ae0:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5ae4:	04970a50 	ldreq	r0, [r7], #2640	; 0xa50
    5ae8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5aec:	00000b66 	andeq	r0, r0, r6, ror #22
    5af0:	97095108 	strls	r5, [r9, -r8, lsl #2]
    5af4:	80000004 	andhi	r0, r0, r4
    5af8:	000dd415 	andeq	sp, sp, r5, lsl r4
    5afc:	0a530800 	beq	14c7b04 <__end__+0x4abae4>
    5b00:	0000033b 	andeq	r0, r0, fp, lsr r3
    5b04:	10150100 	andsne	r0, r5, r0, lsl #2
    5b08:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    5b0c:	033b0a56 	teqeq	fp, #352256	; 0x56000
    5b10:	01040000 	mrseq	r0, (UNDEF: 4)
    5b14:	01f01000 	mvnseq	r1, r0
    5b18:	04a70000 	strteq	r0, [r7], #0
    5b1c:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    5b20:	1f000000 	svcne	0x00000000
    5b24:	0a541400 	beq	150ab2c <__end__+0x4eeb0c>
    5b28:	01900000 	orrseq	r0, r0, r0
    5b2c:	ea086208 	b	21e354 <__core1_unwind_stub-0xde1cac>
    5b30:	09000004 	stmdbeq	r0, {r2}
    5b34:	00000a34 	andeq	r0, r0, r4, lsr sl
    5b38:	ea126308 	b	49e760 <__core1_unwind_stub-0xb618a0>
    5b3c:	00000004 	andeq	r0, r0, r4
    5b40:	000e0409 	andeq	r0, lr, r9, lsl #8
    5b44:	06640800 	strbteq	r0, [r4], -r0, lsl #16
    5b48:	00000075 	andeq	r0, r0, r5, ror r0
    5b4c:	04930904 	ldreq	r0, [r3], #2308	; 0x904
    5b50:	66080000 	strvs	r0, [r8], -r0
    5b54:	0004f009 	andeq	pc, r4, r9
    5b58:	63090800 	movwvs	r0, #38912	; 0x9800
    5b5c:	08000002 	stmdaeq	r0, {r1}
    5b60:	04521e67 	ldrbeq	r1, [r2], #-3687	; 0xfffff199
    5b64:	00880000 	addeq	r0, r8, r0
    5b68:	04a70413 	strteq	r0, [r7], #1043	; 0x413
    5b6c:	00100000 	andseq	r0, r0, r0
    5b70:	00000005 	andeq	r0, r0, r5
    5b74:	11000005 	tstne	r0, r5
    5b78:	0000007c 	andeq	r0, r0, ip, ror r0
    5b7c:	0413001f 	ldreq	r0, [r3], #-31	; 0xffffffe1
    5b80:	00000506 	andeq	r0, r0, r6, lsl #10
    5b84:	0e090816 	mcreq	8, 0, r0, cr9, cr6, {0}
    5b88:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    5b8c:	052f087a 	streq	r0, [pc, #-2170]!	; 531a <__core1_unwind_stub-0xfface6>
    5b90:	a5090000 	strge	r0, [r9, #-0]
    5b94:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    5b98:	052f117b 	streq	r1, [pc, #-379]!	; 5a25 <__core1_unwind_stub-0xffa5db>
    5b9c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5ba0:	0000304e 	andeq	r3, r0, lr, asr #32
    5ba4:	75067c08 	strvc	r7, [r6, #-3080]	; 0xfffff3f8
    5ba8:	04000000 	streq	r0, [r0], #-0
    5bac:	4d041300 	stcmi	3, cr1, [r4, #-0]
    5bb0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5bb4:	00000681 	andeq	r0, r0, r1, lsl #13
    5bb8:	08ba0868 	ldmeq	sl!, {r3, r5, r6, fp}
    5bbc:	00000678 	andeq	r0, r0, r8, ror r6
    5bc0:	00705f0a 	rsbseq	r5, r0, sl, lsl #30
    5bc4:	2f12bb08 	svccs	0x0012bb08
    5bc8:	00000005 	andeq	r0, r0, r5
    5bcc:	00725f0a 	rsbseq	r5, r2, sl, lsl #30
    5bd0:	7507bc08 	strvc	fp, [r7, #-3080]	; 0xfffff3f8
    5bd4:	04000000 	streq	r0, [r0], #-0
    5bd8:	00775f0a 	rsbseq	r5, r7, sl, lsl #30
    5bdc:	7507bd08 	strvc	fp, [r7, #-3336]	; 0xfffff2f8
    5be0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5be4:	000a3a09 	andeq	r3, sl, r9, lsl #20
    5be8:	09be0800 	ldmibeq	lr!, {fp}
    5bec:	0000002c 	andeq	r0, r0, ip, lsr #32
    5bf0:	025d090c 	subseq	r0, sp, #12, 18	; 0x30000
    5bf4:	bf080000 	svclt	0x00080000
    5bf8:	00002c09 	andeq	r2, r0, r9, lsl #24
    5bfc:	5f0a0e00 	svcpl	0x000a0e00
    5c00:	08006662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp, lr}
    5c04:	050711c0 	streq	r1, [r7, #-448]	; 0xfffffe40
    5c08:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    5c0c:	00000df6 	strdeq	r0, [r0], -r6
    5c10:	7507c108 	strvc	ip, [r7, #-264]	; 0xfffffef8
    5c14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5c18:	0005e409 	andeq	lr, r5, r9, lsl #8
    5c1c:	0ac80800 	beq	ff207c24 <__shm_end__+0xbf207c24>
    5c20:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5c24:	1c39091c 			; <UNDEFINED> instruction: 0x1c39091c
    5c28:	ca080000 	bgt	205c30 <__core1_unwind_stub-0xdfa3d0>
    5c2c:	0007fc1d 	andeq	pc, r7, sp, lsl ip	; <UNPREDICTABLE>
    5c30:	7d092000 	stcvc	0, cr2, [r9, #-0]
    5c34:	08000011 	stmdaeq	r0, {r0, r4}
    5c38:	08261dcc 	stmdaeq	r6!, {r2, r3, r6, r7, r8, sl, fp, ip}
    5c3c:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    5c40:	00000ac6 	andeq	r0, r0, r6, asr #21
    5c44:	4a0dcf08 	bmi	37986c <__core1_unwind_stub-0xc86794>
    5c48:	28000008 	stmdacs	r0, {r3}
    5c4c:	002b1e09 	eoreq	r1, fp, r9, lsl #28
    5c50:	09d00800 	ldmibeq	r0, {fp}^
    5c54:	00000864 	andeq	r0, r0, r4, ror #16
    5c58:	755f0a2c 	ldrbvc	r0, [pc, #-2604]	; 5234 <__core1_unwind_stub-0xffadcc>
    5c5c:	d3080062 	movwle	r0, #32866	; 0x8062
    5c60:	00050711 	andeq	r0, r5, r1, lsl r7
    5c64:	5f0a3000 	svcpl	0x000a3000
    5c68:	08007075 	stmdaeq	r0, {r0, r2, r4, r5, r6, ip, sp, lr}
    5c6c:	052f12d4 	streq	r1, [pc, #-724]!	; 59a0 <__core1_unwind_stub-0xffa660>
    5c70:	0a380000 	beq	e05c78 <__core1_unwind_stub-0x1fa388>
    5c74:	0072755f 	rsbseq	r7, r2, pc, asr r5
    5c78:	7507d508 	strvc	sp, [r7, #-1288]	; 0xfffffaf8
    5c7c:	3c000000 	stccc	0, cr0, [r0], {-0}
    5c80:	000a0a09 	andeq	r0, sl, r9, lsl #20
    5c84:	11d80800 	bicsne	r0, r8, r0, lsl #16
    5c88:	0000086a 	andeq	r0, r0, sl, ror #16
    5c8c:	01560940 	cmpeq	r6, r0, asr #18
    5c90:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    5c94:	00087a11 	andeq	r7, r8, r1, lsl sl
    5c98:	5f0a4300 	svcpl	0x000a4300
    5c9c:	0800626c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp, lr}
    5ca0:	050711dc 	streq	r1, [r7, #-476]	; 0xfffffe24
    5ca4:	09440000 	stmdbeq	r4, {}^	; <UNPREDICTABLE>
    5ca8:	00002eb7 			; <UNDEFINED> instruction: 0x00002eb7
    5cac:	7507df08 	strvc	sp, [r7, #-3848]	; 0xfffff0f8
    5cb0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5cb4:	00062709 	andeq	r2, r6, r9, lsl #14
    5cb8:	0ae00800 	beq	ff807cc0 <__shm_end__+0xbf807cc0>
    5cbc:	000002c1 	andeq	r0, r0, r1, asr #5
    5cc0:	2b120950 	blcs	488208 <__core1_unwind_stub-0xb77df8>
    5cc4:	e3080000 	movw	r0, #32768	; 0x8000
    5cc8:	00069612 	andeq	r9, r6, r2, lsl r6
    5ccc:	ab095400 	blge	25acd4 <__core1_unwind_stub-0xda532c>
    5cd0:	08000001 	stmdaeq	r0, {r0}
    5cd4:	03530ce7 	cmpeq	r3, #59136	; 0xe700
    5cd8:	09580000 	ldmdbeq	r8, {}^	; <UNPREDICTABLE>
    5cdc:	00000a26 	andeq	r0, r0, r6, lsr #20
    5ce0:	2f0ee908 	svccs	0x000ee908
    5ce4:	5c000003 	stcpl	0, cr0, [r0], {3}
    5ce8:	00069409 	andeq	r9, r6, r9, lsl #8
    5cec:	09ea0800 	stmibeq	sl!, {fp}^
    5cf0:	00000075 	andeq	r0, r0, r5, ror r0
    5cf4:	75170064 	ldrvc	r0, [r7, #-100]	; 0xffffff9c
    5cf8:	96000000 	strls	r0, [r0], -r0
    5cfc:	18000006 	stmdane	r0, {r1, r2}
    5d00:	00000696 	muleq	r0, r6, r6
    5d04:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5d08:	07ea1800 	strbeq	r1, [sl, r0, lsl #16]!
    5d0c:	75180000 	ldrvc	r0, [r8, #-0]
    5d10:	00000000 	andeq	r0, r0, r0
    5d14:	06a10413 	ssateq	r0, #2, r3, lsl #8
    5d18:	96190000 	ldrls	r0, [r9], -r0
    5d1c:	1a000006 	bne	5d3c <__core1_unwind_stub-0xffa2c4>
    5d20:	00000446 	andeq	r0, r0, r6, asr #8
    5d24:	65080428 	strvs	r0, [r8, #-1064]	; 0xfffffbd8
    5d28:	07ea0802 	strbeq	r0, [sl, r2, lsl #16]!
    5d2c:	921b0000 	andsls	r0, fp, #0
    5d30:	08000009 	stmdaeq	r0, {r0, r3}
    5d34:	75070267 	strvc	r0, [r7, #-615]	; 0xfffffd99
    5d38:	00000000 	andeq	r0, r0, r0
    5d3c:	0005221b 	andeq	r2, r5, fp, lsl r2
    5d40:	026c0800 	rsbeq	r0, ip, #0, 16
    5d44:	0008d60b 	andeq	sp, r8, fp, lsl #12
    5d48:	871b0400 	ldrhi	r0, [fp, -r0, lsl #8]
    5d4c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    5d50:	d614026c 	ldrle	r0, [r4], -ip, ror #4
    5d54:	08000008 	stmdaeq	r0, {r3}
    5d58:	000a101b 	andeq	r1, sl, fp, lsl r0
    5d5c:	026c0800 	rsbeq	r0, ip, #0, 16
    5d60:	0008d61e 	andeq	sp, r8, lr, lsl r6
    5d64:	ff1b0c00 			; <UNDEFINED> instruction: 0xff1b0c00
    5d68:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    5d6c:	7508026e 	strvc	r0, [r8, #-622]	; 0xfffffd92
    5d70:	10000000 	andne	r0, r0, r0
    5d74:	0007fa1b 	andeq	pc, r7, fp, lsl sl	; <UNPREDICTABLE>
    5d78:	026f0800 	rsbeq	r0, pc, #0, 16
    5d7c:	000ad608 	andeq	sp, sl, r8, lsl #12
    5d80:	2d1b1400 	cfldrscs	mvf1, [fp, #-0]
    5d84:	08000004 	stmdaeq	r0, {r2}
    5d88:	75070272 	strvc	r0, [r7, #-626]	; 0xfffffd8e
    5d8c:	30000000 	andcc	r0, r0, r0
    5d90:	000e411b 	andeq	r4, lr, fp, lsl r1
    5d94:	02730800 	rsbseq	r0, r3, #0, 16
    5d98:	000aeb16 	andeq	lr, sl, r6, lsl fp
    5d9c:	891b3400 	ldmdbhi	fp, {sl, ip, sp}
    5da0:	08000006 	stmdaeq	r0, {r1, r2}
    5da4:	75070275 	strvc	r0, [r7, #-629]	; 0xfffffd8b
    5da8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5dac:	00077d1b 	andeq	r7, r7, fp, lsl sp
    5db0:	02770800 	rsbseq	r0, r7, #0, 16
    5db4:	000afc0a 	andeq	pc, sl, sl, lsl #24
    5db8:	511b3c00 	tstpl	fp, r0, lsl #24
    5dbc:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    5dc0:	b913027a 	ldmdblt	r3, {r1, r3, r4, r5, r6, r9}
    5dc4:	40000003 	andmi	r0, r0, r3
    5dc8:	0002f11b 	andeq	pc, r2, fp, lsl r1	; <UNPREDICTABLE>
    5dcc:	027b0800 	rsbseq	r0, fp, #0, 16
    5dd0:	00007507 	andeq	r7, r0, r7, lsl #10
    5dd4:	6f1b4400 	svcvs	0x001b4400
    5dd8:	08000006 	stmdaeq	r0, {r1, r2}
    5ddc:	b913027c 	ldmdblt	r3, {r2, r3, r4, r5, r6, r9}
    5de0:	48000003 	stmdami	r0, {r0, r1}
    5de4:	0008a91b 	andeq	sl, r8, fp, lsl r9
    5de8:	027d0800 	rsbseq	r0, sp, #0, 16
    5dec:	000b0214 	andeq	r0, fp, r4, lsl r2
    5df0:	101b4c00 	andsne	r4, fp, r0, lsl #24
    5df4:	08000001 	stmdaeq	r0, {r0}
    5df8:	75070280 	strvc	r0, [r7, #-640]	; 0xfffffd80
    5dfc:	50000000 	andpl	r0, r0, r0
    5e00:	00062f1b 	andeq	r2, r6, fp, lsl pc
    5e04:	02810800 	addeq	r0, r1, #0, 16
    5e08:	0007ea09 	andeq	lr, r7, r9, lsl #20
    5e0c:	051b5400 	ldreq	r5, [fp, #-1024]	; 0xfffffc00
    5e10:	0800000a 	stmdaeq	r0, {r1, r3}
    5e14:	b10702a4 	smlatblt	r7, r4, r2, r0
    5e18:	5800000a 	stmdapl	r0, {r1, r3}
    5e1c:	000a541c 	andeq	r5, sl, ip, lsl r4
    5e20:	02a80800 	adceq	r0, r8, #0, 16
    5e24:	0004ea13 	andeq	lr, r4, r3, lsl sl
    5e28:	1c014800 	stcne	8, cr4, [r1], {-0}
    5e2c:	00000787 	andeq	r0, r0, r7, lsl #15
    5e30:	1202a908 	andne	sl, r2, #8, 18	; 0x20000
    5e34:	000004a7 	andeq	r0, r0, r7, lsr #9
    5e38:	1d1c014c 	ldfnes	f0, [ip, #-304]	; 0xfffffed0
    5e3c:	08000006 	stmdaeq	r0, {r1, r2}
    5e40:	130c02ad 	movwne	r0, #49837	; 0xc2ad
    5e44:	dc00000b 	stcle	0, cr0, [r0], {11}
    5e48:	08341c02 	ldmdaeq	r4!, {r1, sl, fp, ip}
    5e4c:	b2080000 	andlt	r0, r8, #0
    5e50:	08971002 	ldmeq	r7, {r1, ip}
    5e54:	02e00000 	rsceq	r0, r0, #0
    5e58:	0000131c 	andeq	r1, r0, ip, lsl r3
    5e5c:	02b40800 	adcseq	r0, r4, #0, 16
    5e60:	000b1f0a 	andeq	r1, fp, sl, lsl #30
    5e64:	0002ec00 	andeq	lr, r2, r0, lsl #24
    5e68:	07f00413 			; <UNDEFINED> instruction: 0x07f00413
    5e6c:	01020000 	mrseq	r0, (UNDEF: 2)
    5e70:	00040908 	andeq	r0, r4, r8, lsl #18
    5e74:	07f01900 	ldrbeq	r1, [r0, r0, lsl #18]!
    5e78:	04130000 	ldreq	r0, [r3], #-0
    5e7c:	00000678 	andeq	r0, r0, r8, ror r6
    5e80:	00007517 	andeq	r7, r0, r7, lsl r5
    5e84:	00082000 	andeq	r2, r8, r0
    5e88:	06961800 	ldreq	r1, [r6], r0, lsl #16
    5e8c:	f0180000 			; <UNDEFINED> instruction: 0xf0180000
    5e90:	18000001 	stmdane	r0, {r0}
    5e94:	00000820 	andeq	r0, r0, r0, lsr #16
    5e98:	00007518 	andeq	r7, r0, r8, lsl r5
    5e9c:	04130000 	ldreq	r0, [r3], #-0
    5ea0:	000007f7 	strdeq	r0, [r0], -r7
    5ea4:	08020413 	stmdaeq	r2, {r0, r1, r4, sl}
    5ea8:	cd170000 	ldcgt	0, cr0, [r7, #-0]
    5eac:	4a000002 	bmi	5ebc <__core1_unwind_stub-0xffa144>
    5eb0:	18000008 	stmdane	r0, {r3}
    5eb4:	00000696 	muleq	r0, r6, r6
    5eb8:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5ebc:	02cd1800 	sbceq	r1, sp, #0, 16
    5ec0:	75180000 	ldrvc	r0, [r8, #-0]
    5ec4:	00000000 	andeq	r0, r0, r0
    5ec8:	082c0413 	stmdaeq	ip!, {r0, r1, r4, sl}
    5ecc:	75170000 	ldrvc	r0, [r7, #-0]
    5ed0:	64000000 	strvs	r0, [r0], #-0
    5ed4:	18000008 	stmdane	r0, {r3}
    5ed8:	00000696 	muleq	r0, r6, r6
    5edc:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5ee0:	04130000 	ldreq	r0, [r3], #-0
    5ee4:	00000850 	andeq	r0, r0, r0, asr r8
    5ee8:	00004d10 	andeq	r4, r0, r0, lsl sp
    5eec:	00087a00 	andeq	r7, r8, r0, lsl #20
    5ef0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    5ef4:	00020000 	andeq	r0, r2, r0
    5ef8:	00004d10 	andeq	r4, r0, r0, lsl sp
    5efc:	00088a00 	andeq	r8, r8, r0, lsl #20
    5f00:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    5f04:	00000000 	andeq	r0, r0, r0
    5f08:	000c120d 	andeq	r1, ip, sp, lsl #4
    5f0c:	01240800 			; <UNDEFINED> instruction: 0x01240800
    5f10:	0005351a 	andeq	r3, r5, sl, lsl r5
    5f14:	08b91d00 	ldmeq	r9!, {r8, sl, fp, ip}
    5f18:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    5f1c:	d0080128 	andle	r0, r8, r8, lsr #2
    5f20:	1b000008 	blne	5f48 <__core1_unwind_stub-0xffa0b8>
    5f24:	00000a34 	andeq	r0, r0, r4, lsr sl
    5f28:	11012a08 	tstne	r1, r8, lsl #20
    5f2c:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5f30:	082d1b00 	stmdaeq	sp!, {r8, r9, fp, ip}
    5f34:	2b080000 	blcs	205f3c <__core1_unwind_stub-0xdfa0c4>
    5f38:	00750701 	rsbseq	r0, r5, r1, lsl #14
    5f3c:	1b040000 	blne	105f44 <__core1_unwind_stub-0xefa0bc>
    5f40:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
    5f44:	0b012c08 	bleq	50f6c <__core1_unwind_stub-0xfaf094>
    5f48:	000008d6 	ldrdeq	r0, [r0], -r6
    5f4c:	04130008 	ldreq	r0, [r3], #-8
    5f50:	00000897 	muleq	r0, r7, r8
    5f54:	088a0413 	stmeq	sl, {r0, r1, r4, sl}
    5f58:	7f1d0000 	svcvc	0x001d0000
    5f5c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    5f60:	08014408 	stmdaeq	r1, {r3, sl, lr}
    5f64:	00000915 	andeq	r0, r0, r5, lsl r9
    5f68:	000ac01b 	andeq	ip, sl, fp, lsl r0
    5f6c:	01450800 	cmpeq	r5, r0, lsl #16
    5f70:	00091512 	andeq	r1, r9, r2, lsl r5
    5f74:	bf1b0000 	svclt	0x001b0000
    5f78:	08000001 	stmdaeq	r0, {r0}
    5f7c:	15120146 	ldrne	r0, [r2, #-326]	; 0xfffffeba
    5f80:	06000009 	streq	r0, [r0], -r9
    5f84:	000e8c1b 	andeq	r8, lr, fp, lsl ip
    5f88:	01470800 	cmpeq	r7, r0, lsl #16
    5f8c:	00005412 	andeq	r5, r0, r2, lsl r4
    5f90:	10000c00 	andne	r0, r0, r0, lsl #24
    5f94:	00000054 	andeq	r0, r0, r4, asr r0
    5f98:	00000925 	andeq	r0, r0, r5, lsr #18
    5f9c:	00007c11 	andeq	r7, r0, r1, lsl ip
    5fa0:	1e000200 	cdpne	2, 0, cr0, cr0, cr0, {0}
    5fa4:	028508d0 	addeq	r0, r5, #208, 16	; 0xd00000
    5fa8:	000a3a07 	andeq	r3, sl, r7, lsl #20
    5fac:	03ce1b00 	biceq	r1, lr, #0, 22
    5fb0:	87080000 	strhi	r0, [r8, -r0]
    5fb4:	007c1802 	rsbseq	r1, ip, r2, lsl #16
    5fb8:	1b000000 	blne	5fc0 <__core1_unwind_stub-0xffa040>
    5fbc:	00000bab 	andeq	r0, r0, fp, lsr #23
    5fc0:	12028808 	andne	r8, r2, #8, 16	; 0x80000
    5fc4:	000007ea 	andeq	r0, r0, sl, ror #15
    5fc8:	002d1b04 	eoreq	r1, sp, r4, lsl #22
    5fcc:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    5fd0:	0a3a1002 	beq	e89fe0 <__core1_unwind_stub-0x176020>
    5fd4:	1b080000 	blne	205fdc <__core1_unwind_stub-0xdfa024>
    5fd8:	00000310 	andeq	r0, r0, r0, lsl r3
    5fdc:	17028a08 	strne	r8, [r2, -r8, lsl #20]
    5fe0:	000003cf 	andeq	r0, r0, pc, asr #7
    5fe4:	08831b24 	stmeq	r3, {r2, r5, r8, r9, fp, ip}
    5fe8:	8b080000 	blhi	205ff0 <__core1_unwind_stub-0xdfa010>
    5fec:	00750f02 	rsbseq	r0, r5, r2, lsl #30
    5ff0:	1b480000 	blne	1205ff8 <__end__+0x1e9fd8>
    5ff4:	00000a2f 	andeq	r0, r0, pc, lsr #20
    5ff8:	2c028c08 	stccs	12, cr8, [r2], {8}
    5ffc:	0000006e 	andeq	r0, r0, lr, rrx
    6000:	0c761b50 			; <UNDEFINED> instruction: 0x0c761b50
    6004:	8d080000 	stchi	0, cr0, [r8, #-0]
    6008:	08dc1a02 	ldmeq	ip, {r1, r9, fp, ip}^
    600c:	1b580000 	blne	1606014 <__end__+0x5e9ff4>
    6010:	00000d54 	andeq	r0, r0, r4, asr sp
    6014:	16028e08 	strne	r8, [r2], -r8, lsl #28
    6018:	0000032f 	andeq	r0, r0, pc, lsr #6
    601c:	0afa1b68 	beq	ffe8cdc4 <__shm_end__+0xbfe8cdc4>
    6020:	8f080000 	svchi	0x00080000
    6024:	032f1602 			; <UNDEFINED> instruction: 0x032f1602
    6028:	1b700000 	blne	1c06030 <__end__+0xbea010>
    602c:	00000a18 	andeq	r0, r0, r8, lsl sl
    6030:	16029008 	strne	r9, [r2], -r8
    6034:	0000032f 	andeq	r0, r0, pc, lsr #6
    6038:	01651b78 	smceq	20920	; 0x51b8
    603c:	91080000 	mrsls	r0, (UNDEF: 8)
    6040:	0a4a1002 	beq	128a050 <__end__+0x26e030>
    6044:	1b800000 	blne	fe00604c <__shm_end__+0xbe00604c>
    6048:	000006e3 	andeq	r0, r0, r3, ror #13
    604c:	10029208 	andne	r9, r2, r8, lsl #4
    6050:	00000a5a 	andeq	r0, r0, sl, asr sl
    6054:	0f981b88 	svceq	0x00981b88
    6058:	93080000 	movwls	r0, #32768	; 0x8000
    605c:	00750f02 	rsbseq	r0, r5, r2, lsl #30
    6060:	1ba00000 	blne	fe806068 <__shm_end__+0xbe806068>
    6064:	000002e3 	andeq	r0, r0, r3, ror #5
    6068:	16029408 	strne	r9, [r2], -r8, lsl #8
    606c:	0000032f 	andeq	r0, r0, pc, lsr #6
    6070:	0bb81ba4 	bleq	fee0cf08 <__shm_end__+0xbee0cf08>
    6074:	95080000 	strls	r0, [r8, #-0]
    6078:	032f1602 			; <UNDEFINED> instruction: 0x032f1602
    607c:	1bac0000 	blne	feb06084 <__shm_end__+0xbeb06084>
    6080:	00000f01 	andeq	r0, r0, r1, lsl #30
    6084:	16029608 	strne	r9, [r2], -r8, lsl #12
    6088:	0000032f 	andeq	r0, r0, pc, lsr #6
    608c:	09ec1bb4 	stmibeq	ip!, {r2, r4, r5, r7, r8, r9, fp, ip}^
    6090:	97080000 	strls	r0, [r8, -r0]
    6094:	032f1602 			; <UNDEFINED> instruction: 0x032f1602
    6098:	1bbc0000 	blne	fef060a0 <__shm_end__+0xbef060a0>
    609c:	00000145 	andeq	r0, r0, r5, asr #2
    60a0:	16029808 	strne	r9, [r2], -r8, lsl #16
    60a4:	0000032f 	andeq	r0, r0, pc, lsr #6
    60a8:	09901bc4 	ldmibeq	r0, {r2, r6, r7, r8, r9, fp, ip}
    60ac:	99080000 	stmdbls	r8, {}	; <UNPREDICTABLE>
    60b0:	00750802 	rsbseq	r0, r5, r2, lsl #16
    60b4:	00cc0000 	sbceq	r0, ip, r0
    60b8:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    60bc:	000a4a00 	andeq	r4, sl, r0, lsl #20
    60c0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    60c4:	00190000 	andseq	r0, r9, r0
    60c8:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    60cc:	000a5a00 	andeq	r5, sl, r0, lsl #20
    60d0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    60d4:	00070000 	andeq	r0, r7, r0
    60d8:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    60dc:	000a6a00 	andeq	r6, sl, r0, lsl #20
    60e0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    60e4:	00170000 	andseq	r0, r7, r0
    60e8:	9e08f01e 	mcrls	0, 0, pc, cr8, cr14, {0}	; <UNPREDICTABLE>
    60ec:	0a910702 	beq	fe447cfc <__shm_end__+0xbe447cfc>
    60f0:	181b0000 	ldmdane	fp, {}	; <UNPREDICTABLE>
    60f4:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    60f8:	911b02a1 	tstls	fp, r1, lsr #5
    60fc:	0000000a 	andeq	r0, r0, sl
    6100:	0008481b 	andeq	r4, r8, fp, lsl r8
    6104:	02a20800 	adceq	r0, r2, #0, 16
    6108:	000aa118 	andeq	sl, sl, r8, lsl r1
    610c:	10007800 	andne	r7, r0, r0, lsl #16
    6110:	0000052f 	andeq	r0, r0, pc, lsr #10
    6114:	00000aa1 	andeq	r0, r0, r1, lsr #21
    6118:	00007c11 	andeq	r7, r0, r1, lsl ip
    611c:	10001d00 	andne	r1, r0, r0, lsl #26
    6120:	0000007c 	andeq	r0, r0, ip, ror r0
    6124:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    6128:	00007c11 	andeq	r7, r0, r1, lsl ip
    612c:	1f001d00 	svcne	0x00001d00
    6130:	028308f0 	addeq	r0, r3, #240, 16	; 0xf00000
    6134:	000ad603 	andeq	sp, sl, r3, lsl #12
    6138:	04462000 	strbeq	r2, [r6], #-0
    613c:	9a080000 	bls	206144 <__core1_unwind_stub-0xdf9ebc>
    6140:	09250b02 	stmdbeq	r5!, {r1, r8, r9, fp}
    6144:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
    6148:	08000001 	stmdaeq	r0, {r0}
    614c:	6a0b02a3 	bvs	2c6be0 <__core1_unwind_stub-0xd39420>
    6150:	0000000a 	andeq	r0, r0, sl
    6154:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    6158:	000ae600 	andeq	lr, sl, r0, lsl #12
    615c:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    6160:	00180000 	andseq	r0, r8, r0
    6164:	00000021 	andeq	r0, r0, r1, lsr #32
    6168:	e6041300 	str	r1, [r4], -r0, lsl #6
    616c:	2200000a 	andcs	r0, r0, #10
    6170:	00000afc 	strdeq	r0, [r0], -ip
    6174:	00069618 	andeq	r9, r6, r8, lsl r6
    6178:	04130000 	ldreq	r0, [r3], #-0
    617c:	00000af1 	strdeq	r0, [r0], -r1
    6180:	03b90413 			; <UNDEFINED> instruction: 0x03b90413
    6184:	13220000 			; <UNDEFINED> instruction: 0x13220000
    6188:	1800000b 	stmdane	r0, {r0, r1, r3}
    618c:	00000075 	andeq	r0, r0, r5, ror r0
    6190:	19041300 	stmdbne	r4, {r8, r9, ip}
    6194:	1300000b 	movwne	r0, #11
    6198:	000b0804 	andeq	r0, fp, r4, lsl #16
    619c:	088a1000 	stmeq	sl, {ip}
    61a0:	0b2f0000 	bleq	bc61a8 <__core1_unwind_stub-0x439e58>
    61a4:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    61a8:	02000000 	andeq	r0, r0, #0
    61ac:	04542300 	ldrbeq	r2, [r4], #-768	; 0xfffffd00
    61b0:	33080000 	movwcc	r0, #32768	; 0x8000
    61b4:	06961703 	ldreq	r1, [r6], r3, lsl #14
    61b8:	4d230000 	stcmi	0, cr0, [r3, #-0]
    61bc:	08000004 	stmdaeq	r0, {r2}
    61c0:	9c1d0334 	ldcls	3, cr0, [sp], {52}	; 0x34
    61c4:	03000006 	movweq	r0, #6
    61c8:	00000c14 	andeq	r0, r0, r4, lsl ip
    61cc:	8a10420a 	bhi	4169fc <__core1_unwind_stub-0xbe9604>
    61d0:	22000008 	andcs	r0, r0, #8
    61d4:	00000b65 	andeq	r0, r0, r5, ror #22
    61d8:	0007f018 	andeq	pc, r7, r8, lsl r0	; <UNPREDICTABLE>
    61dc:	0b651800 	bleq	194c1e4 <__end__+0x9301c4>
    61e0:	13000000 	movwne	r0, #0
    61e4:	000b4904 	andeq	r4, fp, r4, lsl #18
    61e8:	55041300 	strpl	r1, [r4, #-768]	; 0xfffffd00
    61ec:	2400000b 	strcs	r0, [r0], #-11
    61f0:	0000083c 	andeq	r0, r0, ip, lsr r8
    61f4:	650e360b 	strvs	r3, [lr, #-1547]	; 0xfffff9f5
    61f8:	2400000b 	strcs	r0, [r0], #-11
    61fc:	00000842 	andeq	r0, r0, r2, asr #16
    6200:	650e370b 	strvs	r3, [lr, #-1803]	; 0xfffff8f5
    6204:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    6208:	000028a2 	andeq	r2, r0, r2, lsr #17
    620c:	102c0120 	eorne	r0, ip, r0, lsr #2
    6210:	00000bcb 	andeq	r0, r0, fp, asr #23
    6214:	00262e09 	eoreq	r2, r6, r9, lsl #28
    6218:	0a2e0100 	beq	b86620 <__core1_unwind_stub-0x4799e0>
    621c:	00000b6b 	andeq	r0, r0, fp, ror #22
    6220:	28cf0900 	stmiacs	pc, {r8, fp}^	; <UNPREDICTABLE>
    6224:	2f010000 	svccs	0x00010000
    6228:	0000750a 	andeq	r7, r0, sl, lsl #10
    622c:	c7090400 	strgt	r0, [r9, -r0, lsl #8]
    6230:	01000028 	tsteq	r0, r8, lsr #32
    6234:	01951630 	orrseq	r1, r5, r0, lsr r6
    6238:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    623c:	0000277c 	andeq	r2, r0, ip, ror r7
    6240:	f2163101 	vrhadd.s16	d3, d6, d1
    6244:	0c000001 	stceq	0, cr0, [r0], {1}
    6248:	28ae0300 	stmiacs	lr!, {r8, r9}
    624c:	32010000 	andcc	r0, r1, #0
    6250:	000b8903 	andeq	r8, fp, r3, lsl #18
    6254:	28d92500 	ldmcs	r9, {r8, sl, sp}^
    6258:	37010000 	strcc	r0, [r1, -r0]
    625c:	000bcb14 	andeq	ip, fp, r4, lsl fp
    6260:	00030500 	andeq	r0, r3, r0, lsl #10
    6264:	26000000 	strcs	r0, [r0], -r0
    6268:	00000b71 	andeq	r0, r0, r1, ror fp
    626c:	05083801 	streq	r3, [r8, #-2049]	; 0xfffff7ff
    6270:	00000003 	andeq	r0, r0, r3
    6274:	28662500 	stmdacs	r6!, {r8, sl, sp}^
    6278:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    627c:	000bcb14 	andeq	ip, fp, r4, lsl fp
    6280:	e8030500 	stmda	r3, {r8, sl}
    6284:	26010056 			; <UNDEFINED> instruction: 0x26010056
    6288:	00000b7d 	andeq	r0, r0, sp, ror fp
    628c:	05083a01 	streq	r3, [r8, #-2561]	; 0xfffff5ff
    6290:	00570803 	subseq	r0, r7, r3, lsl #16
    6294:	28ba2701 	ldmcs	sl!, {r0, r8, r9, sl, sp}
    6298:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    629c:	00000006 	andeq	r0, r0, r6
    62a0:	00007c00 	andeq	r7, r0, r0, lsl #24
    62a4:	5a9c0100 	bpl	fe7066ac <__shm_end__+0xbe7066ac>
    62a8:	2800000c 	stmdacs	r0, {r2, r3}
    62ac:	0100706f 	tsteq	r0, pc, rrx
    62b0:	0b65196e 	bleq	194c870 <__end__+0x930850>
    62b4:	91020000 	mrsls	r0, (UNDEF: 2)
    62b8:	285f256c 	ldmdacs	pc, {r2, r3, r5, r6, r8, sl, sp}^	; <UNPREDICTABLE>
    62bc:	70010000 	andvc	r0, r1, r0
    62c0:	000c5a12 	andeq	r5, ip, r2, lsl sl
    62c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    62c8:	0027b425 	eoreq	fp, r7, r5, lsr #8
    62cc:	0e710100 	rpweqs	f0, f1, f0
    62d0:	0000005b 	andeq	r0, r0, fp, asr r0
    62d4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    62d8:	0bcb0413 	bleq	ff2c732c <__shm_end__+0xbf2c732c>
    62dc:	f6290000 			; <UNDEFINED> instruction: 0xf6290000
    62e0:	01000027 	tsteq	r0, r7, lsr #32
    62e4:	008a184b 	addeq	r1, sl, fp, asr #16
    62e8:	49380000 	ldmdbmi	r8!, {}	; <UNPREDICTABLE>
    62ec:	00d80100 	sbcseq	r0, r8, r0, lsl #2
    62f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    62f4:	00000ca8 	andeq	r0, r0, r8, lsr #25
    62f8:	0027c02a 	eoreq	ip, r7, sl, lsr #32
    62fc:	2f4b0100 	svccs	0x004b0100
    6300:	00000c5a 	andeq	r0, r0, sl, asr ip
    6304:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
    6308:	00002834 	andeq	r2, r0, r4, lsr r8
    630c:	5b0e4d01 	blpl	399718 <__core1_unwind_stub-0xc668e8>
    6310:	02000000 	andeq	r0, r0, #0
    6314:	b9257091 	stmdblt	r5!, {r0, r4, r7, ip, sp, lr}
    6318:	01000027 	tsteq	r0, r7, lsr #32
    631c:	008a154e 	addeq	r1, sl, lr, asr #10
    6320:	91020000 	mrsls	r0, (UNDEF: 2)
    6324:	d32b0074 			; <UNDEFINED> instruction: 0xd32b0074
    6328:	01000027 	tsteq	r0, r7, lsr #32
    632c:	48b80d3c 	ldmmi	r8!, {r2, r3, r4, r5, r8, sl, fp}
    6330:	00800100 	addeq	r0, r0, r0, lsl #2
    6334:	9c010000 	stcls	0, cr0, [r1], {-0}
    6338:	00260e2a 	eoreq	r0, r6, sl, lsr #28
    633c:	1c3c0100 	ldfnes	f0, [ip], #-0
    6340:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6344:	2a6f9102 	bcs	1bea754 <__end__+0xbce734>
    6348:	000028df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    634c:	65293c01 	strvs	r3, [r9, #-3073]!	; 0xfffff3ff
    6350:	0200000b 	andeq	r0, r0, #11
    6354:	c9256891 	stmdbgt	r5!, {r0, r4, r7, fp, sp, lr}
    6358:	01000027 	tsteq	r0, r7, lsr #32
    635c:	0c5a103e 	mrrceq	0, 3, r1, sl, cr14
    6360:	91020000 	mrsls	r0, (UNDEF: 2)
    6364:	09000074 	stmdbeq	r0, {r2, r4, r5, r6}
    6368:	0400000b 	streq	r0, [r0], #-11
    636c:	000eeb00 	andeq	lr, lr, r0, lsl #22
    6370:	3a010400 	bcc	47378 <__core1_unwind_stub-0xfb8c88>
    6374:	0c000000 	stceq	0, cr0, [r0], {-0}
    6378:	000029e9 	andeq	r2, r0, r9, ror #19
    637c:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6380:	000004f8 	strdeq	r0, [r0], -r8
    6384:	00000000 	andeq	r0, r0, r0
    6388:	00002bdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    638c:	69050402 	stmdbvs	r5, {r1, sl}
    6390:	0300746e 	movweq	r7, #1134	; 0x46e
    6394:	0b450704 	bleq	1147fac <__end__+0x12bf8c>
    6398:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    639c:	00080505 	andeq	r0, r8, r5, lsl #10
    63a0:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    63a4:	00000a9d 	muleq	r0, sp, sl
    63a8:	000c8804 	andeq	r8, ip, r4, lsl #16
    63ac:	015e0200 	cmpeq	lr, r0, lsl #4
    63b0:	00002c17 	andeq	r2, r0, r7, lsl ip
    63b4:	06010300 	streq	r0, [r1], -r0, lsl #6
    63b8:	00000402 	andeq	r0, r0, r2, lsl #8
    63bc:	00080103 	andeq	r0, r8, r3, lsl #2
    63c0:	03000004 	movweq	r0, #4
    63c4:	0d610502 	cfstr64eq	mvdx0, [r1, #-8]!
    63c8:	02030000 	andeq	r0, r3, #0
    63cc:	000e9e07 	andeq	r9, lr, r7, lsl #28
    63d0:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    63d4:	0000080a 	andeq	r0, r0, sl, lsl #16
    63d8:	40070403 	andmi	r0, r7, r3, lsl #8
    63dc:	0300000b 	movweq	r0, #11
    63e0:	0b3b0708 	bleq	ec8008 <__core1_unwind_stub-0x137ff8>
    63e4:	55050000 	strpl	r0, [r5, #-0]
    63e8:	03000030 	movweq	r0, #48	; 0x30
    63ec:	006a0e2e 	rsbeq	r0, sl, lr, lsr #28
    63f0:	dd050000 	stcle	0, cr0, [r5, #-0]
    63f4:	0300000a 	movweq	r0, #10
    63f8:	006a0e74 	rsbeq	r0, sl, r4, ror lr
    63fc:	04060000 	streq	r0, [r6], #-0
    6400:	b903a503 	stmdblt	r3, {r0, r1, r8, sl, sp, pc}
    6404:	07000000 	streq	r0, [r0, -r0]
    6408:	0000023a 	andeq	r0, r0, sl, lsr r2
    640c:	410ca703 	tstmi	ip, r3, lsl #14
    6410:	07000000 	streq	r0, [r0, -r0]
    6414:	00000ae5 	andeq	r0, r0, r5, ror #21
    6418:	b913a803 	ldmdblt	r3, {r0, r1, fp, sp, pc}
    641c:	00000000 	andeq	r0, r0, r0
    6420:	00005508 	andeq	r5, r0, r8, lsl #10
    6424:	0000c900 	andeq	ip, r0, r0, lsl #18
    6428:	002c0900 	eoreq	r0, ip, r0, lsl #18
    642c:	00030000 	andeq	r0, r3, r0
    6430:	a203080a 	andge	r0, r3, #655360	; 0xa0000
    6434:	0000ed09 	andeq	lr, r0, r9, lsl #26
    6438:	0a690b00 	beq	1a49040 <__end__+0xa2d020>
    643c:	a4030000 	strge	r0, [r3], #-0
    6440:	00002507 	andeq	r2, r0, r7, lsl #10
    6444:	0b0b0000 	bleq	2c644c <__core1_unwind_stub-0xd39bb4>
    6448:	03000000 	movweq	r0, #0
    644c:	009705a9 	addseq	r0, r7, r9, lsr #11
    6450:	00040000 	andeq	r0, r4, r0
    6454:	000c2005 	andeq	r2, ip, r5
    6458:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    645c:	000000c9 	andeq	r0, r0, r9, asr #1
    6460:	4905040c 	stmdbmi	r5, {r2, r3, sl}
    6464:	0400000e 	streq	r0, [r0], #-14
    6468:	00711916 	rsbseq	r1, r1, r6, lsl r9
    646c:	b3050000 	movwlt	r0, #20480	; 0x5000
    6470:	05000006 	streq	r0, [r0, #-6]
    6474:	00250d0c 	eoreq	r0, r5, ip, lsl #26
    6478:	c7050000 	strgt	r0, [r5, -r0]
    647c:	0400000b 	streq	r0, [r0], #-11
    6480:	01071b23 	tsteq	r7, r3, lsr #22
    6484:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    6488:	18000007 	stmdane	r0, {r0, r1, r2}
    648c:	79083404 	stmdbvc	r8, {r2, sl, ip, sp}
    6490:	0b000001 	bleq	649c <__core1_unwind_stub-0xff9b64>
    6494:	00000a34 	andeq	r0, r0, r4, lsr sl
    6498:	79133604 	ldmdbvc	r3, {r2, r9, sl, ip, sp}
    649c:	00000001 	andeq	r0, r0, r1
    64a0:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
    64a4:	25073704 	strcs	r3, [r7, #-1796]	; 0xfffff8fc
    64a8:	04000000 	streq	r0, [r0], #-0
    64ac:	0007610b 	andeq	r6, r7, fp, lsl #2
    64b0:	0b370400 	bleq	dc74b8 <__core1_unwind_stub-0x238b48>
    64b4:	00000025 	andeq	r0, r0, r5, lsr #32
    64b8:	08bf0b08 	ldmeq	pc!, {r3, r8, r9, fp}	; <UNPREDICTABLE>
    64bc:	37040000 	strcc	r0, [r4, -r0]
    64c0:	00002514 	andeq	r2, r0, r4, lsl r5
    64c4:	010b0c00 	tsteq	fp, r0, lsl #24
    64c8:	04000006 	streq	r0, [r0], #-6
    64cc:	00251b37 	eoreq	r1, r5, r7, lsr fp
    64d0:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    64d4:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    64d8:	017f0b38 	cmneq	pc, r8, lsr fp	; <UNPREDICTABLE>
    64dc:	00140000 	andseq	r0, r4, r0
    64e0:	011f040f 	tsteq	pc, pc, lsl #8
    64e4:	fb080000 	blx	2064ee <__core1_unwind_stub-0xdf9b12>
    64e8:	8f000000 	svchi	0x00000000
    64ec:	09000001 	stmdbeq	r0, {r0}
    64f0:	0000002c 	andeq	r0, r0, ip, lsr #32
    64f4:	400d0000 	andmi	r0, sp, r0
    64f8:	24000001 	strcs	r0, [r0], #-1
    64fc:	12083c04 	andne	r3, r8, #4, 24	; 0x400
    6500:	0b000002 	bleq	6510 <__core1_unwind_stub-0xff9af0>
    6504:	0000015c 	andeq	r0, r0, ip, asr r1
    6508:	25093e04 	strcs	r3, [r9, #-3588]	; 0xfffff1fc
    650c:	00000000 	andeq	r0, r0, r0
    6510:	000f8f0b 	andeq	r8, pc, fp, lsl #30
    6514:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    6518:	00000025 	andeq	r0, r0, r5, lsr #32
    651c:	0eb10b04 	vmoveq.f64	d0, #20	; 0x40a00000  5.0
    6520:	40040000 	andmi	r0, r4, r0
    6524:	00002509 	andeq	r2, r0, r9, lsl #10
    6528:	fb0b0800 	blx	2c8532 <__core1_unwind_stub-0xd37ace>
    652c:	04000009 	streq	r0, [r0], #-9
    6530:	00250941 	eoreq	r0, r5, r1, asr #18
    6534:	0b0c0000 	bleq	30653c <__core1_unwind_stub-0xcf9ac4>
    6538:	0000038c 	andeq	r0, r0, ip, lsl #7
    653c:	25094204 	strcs	r4, [r9, #-516]	; 0xfffffdfc
    6540:	10000000 	andne	r0, r0, r0
    6544:	000de40b 	andeq	lr, sp, fp, lsl #8
    6548:	09430400 	stmdbeq	r3, {sl}^
    654c:	00000025 	andeq	r0, r0, r5, lsr #32
    6550:	0a7b0b14 	beq	1ec91a8 <__end__+0xead188>
    6554:	44040000 	strmi	r0, [r4], #-0
    6558:	00002509 	andeq	r2, r0, r9, lsl #10
    655c:	a90b1800 	stmdbge	fp, {fp, ip}
    6560:	0400000a 	streq	r0, [r0], #-10
    6564:	00250945 	eoreq	r0, r5, r5, asr #18
    6568:	0b1c0000 	bleq	706570 <__core1_unwind_stub-0x8f9a90>
    656c:	00000f55 	andeq	r0, r0, r5, asr pc
    6570:	25094604 	strcs	r4, [r9, #-1540]	; 0xfffff9fc
    6574:	20000000 	andcs	r0, r0, r0
    6578:	02631000 	rsbeq	r1, r3, #0
    657c:	01080000 	mrseq	r0, (UNDEF: 8)
    6580:	57084f04 	strpl	r4, [r8, -r4, lsl #30]
    6584:	0b000002 	bleq	6594 <__core1_unwind_stub-0xff9a6c>
    6588:	00000f41 	andeq	r0, r0, r1, asr #30
    658c:	570a5004 	strpl	r5, [sl, -r4]
    6590:	00000002 	andeq	r0, r0, r2
    6594:	000b660b 	andeq	r6, fp, fp, lsl #12
    6598:	09510400 	ldmdbeq	r1, {sl}^
    659c:	00000257 	andeq	r0, r0, r7, asr r2
    65a0:	0dd41180 	ldfeqe	f1, [r4, #512]	; 0x200
    65a4:	53040000 	movwpl	r0, #16384	; 0x4000
    65a8:	0000fb0a 	andeq	pc, r0, sl, lsl #22
    65ac:	11010000 	mrsne	r0, (UNDEF: 1)
    65b0:	00000e10 	andeq	r0, r0, r0, lsl lr
    65b4:	fb0a5604 	blx	29bdce <__core1_unwind_stub-0xd64232>
    65b8:	04000000 	streq	r0, [r0], #-0
    65bc:	f9080001 			; <UNDEFINED> instruction: 0xf9080001
    65c0:	67000000 	strvs	r0, [r0, -r0]
    65c4:	09000002 	stmdbeq	r0, {r1}
    65c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    65cc:	5410001f 	ldrpl	r0, [r0], #-31	; 0xffffffe1
    65d0:	9000000a 	andls	r0, r0, sl
    65d4:	08620401 	stmdaeq	r2!, {r0, sl}^
    65d8:	000002aa 	andeq	r0, r0, sl, lsr #5
    65dc:	000a340b 	andeq	r3, sl, fp, lsl #8
    65e0:	12630400 	rsbne	r0, r3, #0, 8
    65e4:	000002aa 	andeq	r0, r0, sl, lsr #5
    65e8:	0e040b00 	vmlaeq.f64	d0, d4, d0
    65ec:	64040000 	strvs	r0, [r4], #-0
    65f0:	00002506 	andeq	r2, r0, r6, lsl #10
    65f4:	930b0400 	movwls	r0, #46080	; 0xb400
    65f8:	04000004 	streq	r0, [r0], #-4
    65fc:	02b00966 	adcseq	r0, r0, #1671168	; 0x198000
    6600:	0b080000 	bleq	206608 <__core1_unwind_stub-0xdf99f8>
    6604:	00000263 	andeq	r0, r0, r3, ror #4
    6608:	121e6704 	andsne	r6, lr, #4, 14	; 0x100000
    660c:	88000002 	stmdahi	r0, {r1}
    6610:	67040f00 	strvs	r0, [r4, -r0, lsl #30]
    6614:	08000002 	stmdaeq	r0, {r1}
    6618:	000002c0 	andeq	r0, r0, r0, asr #5
    661c:	000002c0 	andeq	r0, r0, r0, asr #5
    6620:	00002c09 	andeq	r2, r0, r9, lsl #24
    6624:	0f001f00 	svceq	0x00001f00
    6628:	0002c604 	andeq	ip, r2, r4, lsl #12
    662c:	090d1200 	stmdbeq	sp, {r9, ip}
    6630:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    6634:	ef087a04 	svc	0x00087a04
    6638:	0b000002 	bleq	6648 <__core1_unwind_stub-0xff99b8>
    663c:	00000ba5 	andeq	r0, r0, r5, lsr #23
    6640:	ef117b04 	svc	0x00117b04
    6644:	00000002 	andeq	r0, r0, r2
    6648:	00304e0b 	eorseq	r4, r0, fp, lsl #28
    664c:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
    6650:	00000025 	andeq	r0, r0, r5, lsr #32
    6654:	040f0004 	streq	r0, [pc], #-4	; 665c <__core1_unwind_stub-0xff99a4>
    6658:	00000055 	andeq	r0, r0, r5, asr r0
    665c:	0006810d 	andeq	r8, r6, sp, lsl #2
    6660:	ba046800 	blt	120668 <__core1_unwind_stub-0xedf998>
    6664:	00043808 	andeq	r3, r4, r8, lsl #16
    6668:	705f0e00 	subsvc	r0, pc, r0, lsl #28
    666c:	12bb0400 	adcsne	r0, fp, #0, 8
    6670:	000002ef 	andeq	r0, r0, pc, ror #5
    6674:	725f0e00 	subsvc	r0, pc, #0, 28
    6678:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
    667c:	00000025 	andeq	r0, r0, r5, lsr #32
    6680:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
    6684:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
    6688:	00000025 	andeq	r0, r0, r5, lsr #32
    668c:	0a3a0b08 	beq	e892b4 <__core1_unwind_stub-0x176d4c>
    6690:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    6694:	00005c09 	andeq	r5, r0, r9, lsl #24
    6698:	5d0b0c00 	stcpl	12, cr0, [fp, #-0]
    669c:	04000002 	streq	r0, [r0], #-2
    66a0:	005c09bf 	ldrheq	r0, [ip], #-159	; 0xffffff61
    66a4:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    66a8:	0066625f 	rsbeq	r6, r6, pc, asr r2
    66ac:	c711c004 	ldrgt	ip, [r1, -r4]
    66b0:	10000002 	andne	r0, r0, r2
    66b4:	000df60b 	andeq	pc, sp, fp, lsl #12
    66b8:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
    66bc:	00000025 	andeq	r0, r0, r5, lsr #32
    66c0:	05e40b18 	strbeq	r0, [r4, #2840]!	; 0xb18
    66c4:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
    66c8:	0000f90a 	andeq	pc, r0, sl, lsl #18
    66cc:	390b1c00 	stmdbcc	fp, {sl, fp, ip}
    66d0:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    66d4:	05bc1dca 	ldreq	r1, [ip, #3530]!	; 0xdca
    66d8:	0b200000 	bleq	8066e0 <__core1_unwind_stub-0x7f9920>
    66dc:	0000117d 	andeq	r1, r0, sp, ror r1
    66e0:	e61dcc04 	ldr	ip, [sp], -r4, lsl #24
    66e4:	24000005 	strcs	r0, [r0], #-5
    66e8:	000ac60b 	andeq	ip, sl, fp, lsl #12
    66ec:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 66f4 <__core1_unwind_stub-0xff990c>
    66f0:	0000060a 	andeq	r0, r0, sl, lsl #12
    66f4:	2b1e0b28 	blcs	78939c <__core1_unwind_stub-0x876c64>
    66f8:	d0040000 	andle	r0, r4, r0
    66fc:	00062409 	andeq	r2, r6, r9, lsl #8
    6700:	5f0e2c00 	svcpl	0x000e2c00
    6704:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
    6708:	02c711d3 	sbceq	r1, r7, #-1073741772	; 0xc0000034
    670c:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    6710:	0070755f 	rsbseq	r7, r0, pc, asr r5
    6714:	ef12d404 	svc	0x0012d404
    6718:	38000002 	stmdacc	r0, {r1}
    671c:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
    6720:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
    6724:	00000025 	andeq	r0, r0, r5, lsr #32
    6728:	0a0a0b3c 	beq	289420 <__core1_unwind_stub-0xd76be0>
    672c:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    6730:	00062a11 	andeq	r2, r6, r1, lsl sl
    6734:	560b4000 	strpl	r4, [fp], -r0
    6738:	04000001 	streq	r0, [r0], #-1
    673c:	063a11d9 			; <UNDEFINED> instruction: 0x063a11d9
    6740:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
    6744:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    6748:	c711dc04 	ldrgt	sp, [r1, -r4, lsl #24]
    674c:	44000002 	strmi	r0, [r0], #-2
    6750:	002eb70b 	eoreq	fp, lr, fp, lsl #14
    6754:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
    6758:	00000025 	andeq	r0, r0, r5, lsr #32
    675c:	06270b4c 	strteq	r0, [r7], -ip, asr #22
    6760:	e0040000 	and	r0, r4, r0
    6764:	00007f0a 	andeq	r7, r0, sl, lsl #30
    6768:	120b5000 	andne	r5, fp, #0
    676c:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    6770:	045612e3 	ldrbeq	r1, [r6], #-739	; 0xfffffd1d
    6774:	0b540000 	bleq	150677c <__end__+0x4ea75c>
    6778:	000001ab 	andeq	r0, r0, fp, lsr #3
    677c:	130ce704 	movwne	lr, #50948	; 0xc704
    6780:	58000001 	stmdapl	r0, {r0}
    6784:	000a260b 	andeq	r2, sl, fp, lsl #12
    6788:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
    678c:	000000ed 	andeq	r0, r0, sp, ror #1
    6790:	06940b5c 			; <UNDEFINED> instruction: 0x06940b5c
    6794:	ea040000 	b	10679c <__core1_unwind_stub-0xef9864>
    6798:	00002509 	andeq	r2, r0, r9, lsl #10
    679c:	13006400 	movwne	r6, #1024	; 0x400
    67a0:	00000025 	andeq	r0, r0, r5, lsr #32
    67a4:	00000456 	andeq	r0, r0, r6, asr r4
    67a8:	00045614 	andeq	r5, r4, r4, lsl r6
    67ac:	00f91400 	rscseq	r1, r9, r0, lsl #8
    67b0:	aa140000 	bge	5067b8 <__core1_unwind_stub-0xaf9848>
    67b4:	14000005 	strne	r0, [r0], #-5
    67b8:	00000025 	andeq	r0, r0, r5, lsr #32
    67bc:	61040f00 	tstvs	r4, r0, lsl #30
    67c0:	15000004 	strne	r0, [r0, #-4]
    67c4:	00000456 	andeq	r0, r0, r6, asr r4
    67c8:	00044616 	andeq	r4, r4, r6, lsl r6
    67cc:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
    67d0:	aa080265 	bge	20716c <__core1_unwind_stub-0xdf8e94>
    67d4:	17000005 	strne	r0, [r0, -r5]
    67d8:	00000992 	muleq	r0, r2, r9
    67dc:	07026704 	streq	r6, [r2, -r4, lsl #14]
    67e0:	00000025 	andeq	r0, r0, r5, lsr #32
    67e4:	05221700 	streq	r1, [r2, #-1792]!	; 0xfffff900
    67e8:	6c040000 	stcvs	0, cr0, [r4], {-0}
    67ec:	06960b02 	ldreq	r0, [r6], r2, lsl #22
    67f0:	17040000 	strne	r0, [r4, -r0]
    67f4:	00000b87 	andeq	r0, r0, r7, lsl #23
    67f8:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
    67fc:	00000696 	muleq	r0, r6, r6
    6800:	0a101708 	beq	40c428 <__core1_unwind_stub-0xbf3bd8>
    6804:	6c040000 	stcvs	0, cr0, [r4], {-0}
    6808:	06961e02 	ldreq	r1, [r6], r2, lsl #28
    680c:	170c0000 	strne	r0, [ip, -r0]
    6810:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6814:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
    6818:	00000025 	andeq	r0, r0, r5, lsr #32
    681c:	07fa1710 			; <UNDEFINED> instruction: 0x07fa1710
    6820:	6f040000 	svcvs	0x00040000
    6824:	08960802 	ldmeq	r6, {r1, fp}
    6828:	17140000 	ldrne	r0, [r4, -r0]
    682c:	0000042d 	andeq	r0, r0, sp, lsr #8
    6830:	07027204 	streq	r7, [r2, -r4, lsl #4]
    6834:	00000025 	andeq	r0, r0, r5, lsr #32
    6838:	0e411730 	mcreq	7, 2, r1, cr1, cr0, {1}
    683c:	73040000 	movwvc	r0, #16384	; 0x4000
    6840:	08ab1602 	stmiaeq	fp!, {r1, r9, sl, ip}
    6844:	17340000 	ldrne	r0, [r4, -r0]!
    6848:	00000689 	andeq	r0, r0, r9, lsl #13
    684c:	07027504 	streq	r7, [r2, -r4, lsl #10]
    6850:	00000025 	andeq	r0, r0, r5, lsr #32
    6854:	077d1738 			; <UNDEFINED> instruction: 0x077d1738
    6858:	77040000 	strvc	r0, [r4, -r0]
    685c:	08bc0a02 	ldmeq	ip!, {r1, r9, fp}
    6860:	173c0000 	ldrne	r0, [ip, -r0]!
    6864:	00000e51 	andeq	r0, r0, r1, asr lr
    6868:	13027a04 	movwne	r7, #10756	; 0x2a04
    686c:	00000179 	andeq	r0, r0, r9, ror r1
    6870:	02f11740 	rscseq	r1, r1, #64, 14	; 0x1000000
    6874:	7b040000 	blvc	10687c <__core1_unwind_stub-0xef9784>
    6878:	00250702 	eoreq	r0, r5, r2, lsl #14
    687c:	17440000 	strbne	r0, [r4, -r0]
    6880:	0000066f 	andeq	r0, r0, pc, ror #12
    6884:	13027c04 	movwne	r7, #11268	; 0x2c04
    6888:	00000179 	andeq	r0, r0, r9, ror r1
    688c:	08a91748 	stmiaeq	r9!, {r3, r6, r8, r9, sl, ip}
    6890:	7d040000 	stcvc	0, cr0, [r4, #-0]
    6894:	08c21402 	stmiaeq	r2, {r1, sl, ip}^
    6898:	174c0000 	strbne	r0, [ip, -r0]
    689c:	00000110 	andeq	r0, r0, r0, lsl r1
    68a0:	07028004 	streq	r8, [r2, -r4]
    68a4:	00000025 	andeq	r0, r0, r5, lsr #32
    68a8:	062f1750 			; <UNDEFINED> instruction: 0x062f1750
    68ac:	81040000 	mrshi	r0, (UNDEF: 4)
    68b0:	05aa0902 	streq	r0, [sl, #2306]!	; 0x902
    68b4:	17540000 	ldrbne	r0, [r4, -r0]
    68b8:	00000a05 	andeq	r0, r0, r5, lsl #20
    68bc:	0702a404 	streq	sl, [r2, -r4, lsl #8]
    68c0:	00000871 	andeq	r0, r0, r1, ror r8
    68c4:	0a541858 	beq	150ca2c <__end__+0x4f0a0c>
    68c8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    68cc:	02aa1302 	adceq	r1, sl, #134217728	; 0x8000000
    68d0:	01480000 	mrseq	r0, (UNDEF: 72)
    68d4:	00078718 	andeq	r8, r7, r8, lsl r7
    68d8:	02a90400 	adceq	r0, r9, #0, 8
    68dc:	00026712 	andeq	r6, r2, r2, lsl r7
    68e0:	18014c00 	stmdane	r1, {sl, fp, lr}
    68e4:	0000061d 	andeq	r0, r0, sp, lsl r6
    68e8:	0c02ad04 	stceq	13, cr10, [r2], {4}
    68ec:	000008d3 	ldrdeq	r0, [r0], -r3
    68f0:	341802dc 	ldrcc	r0, [r8], #-732	; 0xfffffd24
    68f4:	04000008 	streq	r0, [r0], #-8
    68f8:	571002b2 			; <UNDEFINED> instruction: 0x571002b2
    68fc:	e0000006 	and	r0, r0, r6
    6900:	00131802 	andseq	r1, r3, r2, lsl #16
    6904:	b4040000 	strlt	r0, [r4], #-0
    6908:	08df0a02 	ldmeq	pc, {r1, r9, fp}^	; <UNPREDICTABLE>
    690c:	02ec0000 	rsceq	r0, ip, #0
    6910:	b0040f00 	andlt	r0, r4, r0, lsl #30
    6914:	03000005 	movweq	r0, #5
    6918:	04090801 	streq	r0, [r9], #-2049	; 0xfffff7ff
    691c:	b0150000 	andslt	r0, r5, r0
    6920:	0f000005 	svceq	0x00000005
    6924:	00043804 	andeq	r3, r4, r4, lsl #16
    6928:	00251300 	eoreq	r1, r5, r0, lsl #6
    692c:	05e00000 	strbeq	r0, [r0, #0]!
    6930:	56140000 	ldrpl	r0, [r4], -r0
    6934:	14000004 	strne	r0, [r0], #-4
    6938:	000000f9 	strdeq	r0, [r0], -r9
    693c:	0005e014 	andeq	lr, r5, r4, lsl r0
    6940:	00251400 	eoreq	r1, r5, r0, lsl #8
    6944:	0f000000 	svceq	0x00000000
    6948:	0005b704 	andeq	fp, r5, r4, lsl #14
    694c:	c2040f00 	andgt	r0, r4, #0, 30
    6950:	13000005 	movwne	r0, #5
    6954:	0000008b 	andeq	r0, r0, fp, lsl #1
    6958:	0000060a 	andeq	r0, r0, sl, lsl #12
    695c:	00045614 	andeq	r5, r4, r4, lsl r6
    6960:	00f91400 	rscseq	r1, r9, r0, lsl #8
    6964:	8b140000 	blhi	50696c <__core1_unwind_stub-0xaf9694>
    6968:	14000000 	strne	r0, [r0], #-0
    696c:	00000025 	andeq	r0, r0, r5, lsr #32
    6970:	ec040f00 	stc	15, cr0, [r4], {-0}
    6974:	13000005 	movwne	r0, #5
    6978:	00000025 	andeq	r0, r0, r5, lsr #32
    697c:	00000624 	andeq	r0, r0, r4, lsr #12
    6980:	00045614 	andeq	r5, r4, r4, lsl r6
    6984:	00f91400 	rscseq	r1, r9, r0, lsl #8
    6988:	0f000000 	svceq	0x00000000
    698c:	00061004 	andeq	r1, r6, r4
    6990:	00550800 	subseq	r0, r5, r0, lsl #16
    6994:	063a0000 	ldrteq	r0, [sl], -r0
    6998:	2c090000 	stccs	0, cr0, [r9], {-0}
    699c:	02000000 	andeq	r0, r0, #0
    69a0:	00550800 	subseq	r0, r5, r0, lsl #16
    69a4:	064a0000 	strbeq	r0, [sl], -r0
    69a8:	2c090000 	stccs	0, cr0, [r9], {-0}
    69ac:	00000000 	andeq	r0, r0, r0
    69b0:	0c120400 	cfldrseq	mvf0, [r2], {-0}
    69b4:	24040000 	strcs	r0, [r4], #-0
    69b8:	02f51a01 	rscseq	r1, r5, #4096	; 0x1000
    69bc:	b9190000 	ldmdblt	r9, {}	; <UNPREDICTABLE>
    69c0:	0c000008 	stceq	0, cr0, [r0], {8}
    69c4:	08012804 	stmdaeq	r1, {r2, fp, sp}
    69c8:	00000690 	muleq	r0, r0, r6
    69cc:	000a3417 	andeq	r3, sl, r7, lsl r4
    69d0:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
    69d4:	00069011 	andeq	r9, r6, r1, lsl r0
    69d8:	2d170000 	ldccs	0, cr0, [r7, #-0]
    69dc:	04000008 	streq	r0, [r0], #-8
    69e0:	2507012b 	strcs	r0, [r7, #-299]	; 0xfffffed5
    69e4:	04000000 	streq	r0, [r0], #-0
    69e8:	0008b317 	andeq	fp, r8, r7, lsl r3
    69ec:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
    69f0:	0006960b 	andeq	r9, r6, fp, lsl #12
    69f4:	0f000800 	svceq	0x00000800
    69f8:	00065704 	andeq	r5, r6, r4, lsl #14
    69fc:	4a040f00 	bmi	10a604 <__core1_unwind_stub-0xef59fc>
    6a00:	19000006 	stmdbne	r0, {r1, r2}
    6a04:	00000b7f 	andeq	r0, r0, pc, ror fp
    6a08:	0144040e 	cmpeq	r4, lr, lsl #8
    6a0c:	0006d508 	andeq	sp, r6, r8, lsl #10
    6a10:	0ac01700 	beq	ff00c618 <__shm_end__+0xbf00c618>
    6a14:	45040000 	strmi	r0, [r4, #-0]
    6a18:	06d51201 	ldrbeq	r1, [r5], r1, lsl #4
    6a1c:	17000000 	strne	r0, [r0, -r0]
    6a20:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    6a24:	12014604 	andne	r4, r1, #4, 12	; 0x400000
    6a28:	000006d5 	ldrdeq	r0, [r0], -r5
    6a2c:	0e8c1706 	cdpeq	7, 8, cr1, cr12, cr6, {0}
    6a30:	47040000 	strmi	r0, [r4, -r0]
    6a34:	00631201 	rsbeq	r1, r3, r1, lsl #4
    6a38:	000c0000 	andeq	r0, ip, r0
    6a3c:	00006308 	andeq	r6, r0, r8, lsl #6
    6a40:	0006e500 	andeq	lr, r6, r0, lsl #10
    6a44:	002c0900 	eoreq	r0, ip, r0, lsl #18
    6a48:	00020000 	andeq	r0, r2, r0
    6a4c:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
    6a50:	07fa0702 	ldrbeq	r0, [sl, r2, lsl #14]!
    6a54:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
    6a58:	04000003 	streq	r0, [r0], #-3
    6a5c:	2c180287 	lfmcs	f0, 4, [r8], {135}	; 0x87
    6a60:	00000000 	andeq	r0, r0, r0
    6a64:	000bab17 	andeq	sl, fp, r7, lsl fp
    6a68:	02880400 	addeq	r0, r8, #0, 8
    6a6c:	0005aa12 	andeq	sl, r5, r2, lsl sl
    6a70:	2d170400 	cfldrscs	mvf0, [r7, #-0]
    6a74:	04000000 	streq	r0, [r0], #-0
    6a78:	fa100289 	blx	4074a4 <__core1_unwind_stub-0xbf8b5c>
    6a7c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    6a80:	00031017 	andeq	r1, r3, r7, lsl r0
    6a84:	028a0400 	addeq	r0, sl, #0, 8
    6a88:	00018f17 	andeq	r8, r1, r7, lsl pc
    6a8c:	83172400 	tsthi	r7, #0, 8
    6a90:	04000008 	streq	r0, [r0], #-8
    6a94:	250f028b 	strcs	r0, [pc, #-651]	; 6811 <__core1_unwind_stub-0xff97ef>
    6a98:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    6a9c:	000a2f17 	andeq	r2, sl, r7, lsl pc
    6aa0:	028c0400 	addeq	r0, ip, #0, 8
    6aa4:	0000782c 	andeq	r7, r0, ip, lsr #16
    6aa8:	76175000 	ldrvc	r5, [r7], -r0
    6aac:	0400000c 	streq	r0, [r0], #-12
    6ab0:	9c1a028d 	lfmls	f0, 4, [sl], {141}	; 0x8d
    6ab4:	58000006 	stmdapl	r0, {r1, r2}
    6ab8:	000d5417 	andeq	r5, sp, r7, lsl r4
    6abc:	028e0400 	addeq	r0, lr, #0, 8
    6ac0:	0000ed16 	andeq	lr, r0, r6, lsl sp
    6ac4:	fa176800 	blx	5e0acc <__core1_unwind_stub-0xa1f534>
    6ac8:	0400000a 	streq	r0, [r0], #-10
    6acc:	ed16028f 	lfm	f0, 4, [r6, #-572]	; 0xfffffdc4
    6ad0:	70000000 	andvc	r0, r0, r0
    6ad4:	000a1817 	andeq	r1, sl, r7, lsl r8
    6ad8:	02900400 	addseq	r0, r0, #0, 8
    6adc:	0000ed16 	andeq	lr, r0, r6, lsl sp
    6ae0:	65177800 	ldrvs	r7, [r7, #-2048]	; 0xfffff800
    6ae4:	04000001 	streq	r0, [r0], #-1
    6ae8:	0a100291 	beq	407534 <__core1_unwind_stub-0xbf8acc>
    6aec:	80000008 	andhi	r0, r0, r8
    6af0:	0006e317 	andeq	lr, r6, r7, lsl r3
    6af4:	02920400 	addseq	r0, r2, #0, 8
    6af8:	00081a10 	andeq	r1, r8, r0, lsl sl
    6afc:	98178800 	ldmdals	r7, {fp, pc}
    6b00:	0400000f 	streq	r0, [r0], #-15
    6b04:	250f0293 	strcs	r0, [pc, #-659]	; 6879 <__core1_unwind_stub-0xff9787>
    6b08:	a0000000 	andge	r0, r0, r0
    6b0c:	0002e317 	andeq	lr, r2, r7, lsl r3
    6b10:	02940400 	addseq	r0, r4, #0, 8
    6b14:	0000ed16 	andeq	lr, r0, r6, lsl sp
    6b18:	b817a400 	ldmdalt	r7, {sl, sp, pc}
    6b1c:	0400000b 	streq	r0, [r0], #-11
    6b20:	ed160295 	lfm	f0, 4, [r6, #-596]	; 0xfffffdac
    6b24:	ac000000 	stcge	0, cr0, [r0], {-0}
    6b28:	000f0117 	andeq	r0, pc, r7, lsl r1	; <UNPREDICTABLE>
    6b2c:	02960400 	addseq	r0, r6, #0, 8
    6b30:	0000ed16 	andeq	lr, r0, r6, lsl sp
    6b34:	ec17b400 	cfldrs	mvf11, [r7], {-0}
    6b38:	04000009 	streq	r0, [r0], #-9
    6b3c:	ed160297 	lfm	f0, 4, [r6, #-604]	; 0xfffffda4
    6b40:	bc000000 	stclt	0, cr0, [r0], {-0}
    6b44:	00014517 	andeq	r4, r1, r7, lsl r5
    6b48:	02980400 	addseq	r0, r8, #0, 8
    6b4c:	0000ed16 	andeq	lr, r0, r6, lsl sp
    6b50:	9017c400 	andsls	ip, r7, r0, lsl #8
    6b54:	04000009 	streq	r0, [r0], #-9
    6b58:	25080299 	strcs	r0, [r8, #-665]	; 0xfffffd67
    6b5c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    6b60:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
    6b64:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    6b68:	2c090000 	stccs	0, cr0, [r9], {-0}
    6b6c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    6b70:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
    6b74:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
    6b78:	2c090000 	stccs	0, cr0, [r9], {-0}
    6b7c:	07000000 	streq	r0, [r0, -r0]
    6b80:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
    6b84:	082a0000 	stmdaeq	sl!, {}	; <UNPREDICTABLE>
    6b88:	2c090000 	stccs	0, cr0, [r9], {-0}
    6b8c:	17000000 	strne	r0, [r0, -r0]
    6b90:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
    6b94:	5107029e 			; <UNDEFINED> instruction: 0x5107029e
    6b98:	17000008 	strne	r0, [r0, -r8]
    6b9c:	00000e18 	andeq	r0, r0, r8, lsl lr
    6ba0:	1b02a104 	blne	aefb8 <__core1_unwind_stub-0xf51048>
    6ba4:	00000851 	andeq	r0, r0, r1, asr r8
    6ba8:	08481700 	stmdaeq	r8, {r8, r9, sl, ip}^
    6bac:	a2040000 	andge	r0, r4, #0
    6bb0:	08611802 	stmdaeq	r1!, {r1, fp, ip}^
    6bb4:	00780000 	rsbseq	r0, r8, r0
    6bb8:	0002ef08 	andeq	lr, r2, r8, lsl #30
    6bbc:	00086100 	andeq	r6, r8, r0, lsl #2
    6bc0:	002c0900 	eoreq	r0, ip, r0, lsl #18
    6bc4:	001d0000 	andseq	r0, sp, r0
    6bc8:	00002c08 	andeq	r2, r0, r8, lsl #24
    6bcc:	00087100 	andeq	r7, r8, r0, lsl #2
    6bd0:	002c0900 	eoreq	r0, ip, r0, lsl #18
    6bd4:	001d0000 	andseq	r0, sp, r0
    6bd8:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
    6bdc:	08960302 	ldmeq	r6, {r1, r8, r9}
    6be0:	461c0000 	ldrmi	r0, [ip], -r0
    6be4:	04000004 	streq	r0, [r0], #-4
    6be8:	e50b029a 	str	r0, [fp, #-666]	; 0xfffffd66
    6bec:	1c000006 	stcne	0, cr0, [r0], {6}
    6bf0:	00000138 	andeq	r0, r0, r8, lsr r1
    6bf4:	0b02a304 	bleq	af80c <__core1_unwind_stub-0xf507f4>
    6bf8:	0000082a 	andeq	r0, r0, sl, lsr #16
    6bfc:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
    6c00:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
    6c04:	2c090000 	stccs	0, cr0, [r9], {-0}
    6c08:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6c0c:	00001d00 	andeq	r1, r0, r0, lsl #26
    6c10:	040f0000 	streq	r0, [pc], #-0	; 6c18 <__core1_unwind_stub-0xff93e8>
    6c14:	000008a6 	andeq	r0, r0, r6, lsr #17
    6c18:	0008bc1e 	andeq	fp, r8, lr, lsl ip
    6c1c:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
    6c20:	0f000000 	svceq	0x00000000
    6c24:	0008b104 	andeq	fp, r8, r4, lsl #2
    6c28:	79040f00 	stmdbvc	r4, {r8, r9, sl, fp}
    6c2c:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    6c30:	000008d3 	ldrdeq	r0, [r0], -r3
    6c34:	00002514 	andeq	r2, r0, r4, lsl r5
    6c38:	040f0000 	streq	r0, [pc], #-0	; 6c40 <__core1_unwind_stub-0xff93c0>
    6c3c:	000008d9 	ldrdeq	r0, [r0], -r9
    6c40:	08c8040f 	stmiaeq	r8, {r0, r1, r2, r3, sl}^
    6c44:	4a080000 	bmi	206c4c <__core1_unwind_stub-0xdf93b4>
    6c48:	ef000006 	svc	0x00000006
    6c4c:	09000008 	stmdbeq	r0, {r3}
    6c50:	0000002c 	andeq	r0, r0, ip, lsr #32
    6c54:	541f0002 	ldrpl	r0, [pc], #-2	; 6c5c <__core1_unwind_stub-0xff93a4>
    6c58:	04000004 	streq	r0, [r0], #-4
    6c5c:	56170333 			; <UNDEFINED> instruction: 0x56170333
    6c60:	1f000004 	svcne	0x00000004
    6c64:	0000044d 	andeq	r0, r0, sp, asr #8
    6c68:	1d033404 	cfstrsne	mvf3, [r3, #-16]
    6c6c:	0000045c 	andeq	r0, r0, ip, asr r4
    6c70:	002ec205 	eoreq	ip, lr, r5, lsl #4
    6c74:	18280600 	stmdane	r8!, {r9, sl}
    6c78:	0000006a 	andeq	r0, r0, sl, rrx
    6c7c:	002a1b05 	eoreq	r1, sl, r5, lsl #22
    6c80:	182e0600 	stmdane	lr!, {r9, sl}
    6c84:	00000055 	andeq	r0, r0, r5, asr r0
    6c88:	00304305 	eorseq	r4, r0, r5, lsl #6
    6c8c:	19340600 	ldmdbne	r4!, {r9, sl}
    6c90:	00000071 	andeq	r0, r0, r1, ror r0
    6c94:	00092115 	andeq	r2, r9, r5, lsl r1
    6c98:	09212000 	stmdbeq	r1!, {sp}
    6c9c:	2d050000 	stccs	0, cr0, [r5, #-0]
    6ca0:	06000023 	streq	r0, [r0], -r3, lsr #32
    6ca4:	002c1a56 	eoreq	r1, ip, r6, asr sl
    6ca8:	14050000 	strne	r0, [r5], #-0
    6cac:	0700000c 	streq	r0, [r0, -ip]
    6cb0:	064a1042 	strbeq	r1, [sl], -r2, asr #32
    6cb4:	040f0000 	streq	r0, [pc], #-0	; 6cbc <__core1_unwind_stub-0xff9344>
    6cb8:	00000943 	andeq	r0, r0, r3, asr #18
    6cbc:	00083c21 	andeq	r3, r8, r1, lsr #24
    6cc0:	0e360800 	cdpeq	8, 3, cr0, cr6, cr0, {0}
    6cc4:	0000094f 	andeq	r0, r0, pc, asr #18
    6cc8:	00084221 	andeq	r4, r8, r1, lsr #4
    6ccc:	0e370800 	cdpeq	8, 3, cr0, cr7, cr0, {0}
    6cd0:	0000094f 	andeq	r0, r0, pc, asr #18
    6cd4:	0e020103 	adfeqs	f0, f2, f3
    6cd8:	08000018 	stmdaeq	r0, {r3, r4}
    6cdc:	0000092d 	andeq	r0, r0, sp, lsr #18
    6ce0:	00000984 	andeq	r0, r0, r4, lsl #19
    6ce4:	00002c09 	andeq	r2, r0, r9, lsl #24
    6ce8:	15000300 	strne	r0, [r0, #-768]	; 0xfffffd00
    6cec:	00000974 	andeq	r0, r0, r4, ror r9
    6cf0:	002a0022 	eoreq	r0, sl, r2, lsr #32
    6cf4:	17080900 	strne	r0, [r8, -r0, lsl #18]
    6cf8:	00000984 	andeq	r0, r0, r4, lsl #19
    6cfc:	00000305 	andeq	r0, r0, r5, lsl #6
    6d00:	19220000 	stmdbne	r2!, {}	; <UNPREDICTABLE>
    6d04:	09000029 	stmdbeq	r0, {r0, r3, r5}
    6d08:	0984170a 	stmibeq	r4, {r1, r3, r8, r9, sl, ip}
    6d0c:	03050000 	movweq	r0, #20480	; 0x5000
    6d10:	00000000 	andeq	r0, r0, r0
    6d14:	0029a922 	eoreq	sl, r9, r2, lsr #18
    6d18:	170d0900 	strne	r0, [sp, -r0, lsl #18]
    6d1c:	00000984 	andeq	r0, r0, r4, lsl #19
    6d20:	00000305 	andeq	r0, r0, r5, lsl #6
    6d24:	94220000 	strtls	r0, [r2], #-0
    6d28:	09000029 	stmdbeq	r0, {r0, r3, r5}
    6d2c:	0984170e 	stmibeq	r4, {r1, r2, r3, r8, r9, sl, ip}
    6d30:	03050000 	movweq	r0, #20480	; 0x5000
    6d34:	00000000 	andeq	r0, r0, r0
    6d38:	00292d21 	eoreq	r2, r9, r1, lsr #26
    6d3c:	1a110900 	bne	449144 <__core1_unwind_stub-0xbb6ebc>
    6d40:	00000932 	andeq	r0, r0, r2, lsr r9
    6d44:	0029dc21 	eoreq	sp, r9, r1, lsr #24
    6d48:	1a120900 	bne	489150 <__core1_unwind_stub-0xb76eb0>
    6d4c:	00000932 	andeq	r0, r0, r2, lsr r9
    6d50:	002a2c21 	eoreq	r2, sl, r1, lsr #24
    6d54:	1a130900 	bne	4c915c <__core1_unwind_stub-0xb36ea4>
    6d58:	00000932 	andeq	r0, r0, r2, lsr r9
    6d5c:	0a010023 	beq	46df0 <__core1_unwind_stub-0xfb9210>
    6d60:	0a5b0907 	beq	16c9184 <__end__+0x6ad164>
    6d64:	d60b0000 	strle	r0, [fp], -r0
    6d68:	0a000029 	beq	6e14 <__core1_unwind_stub-0xff91ec>
    6d6c:	09321709 	ldmdbeq	r2!, {r0, r3, r8, r9, sl, ip}
    6d70:	0b000000 	bleq	6d78 <__core1_unwind_stub-0xff9288>
    6d74:	00002956 	andeq	r2, r0, r6, asr r9
    6d78:	32170a0a 	andscc	r0, r7, #40960	; 0xa000
    6d7c:	04000009 	streq	r0, [r0], #-9
    6d80:	0029620b 	eoreq	r6, r9, fp, lsl #4
    6d84:	170b0a00 	strne	r0, [fp, -r0, lsl #20]
    6d88:	00000932 	andeq	r0, r0, r2, lsr r9
    6d8c:	294b0b08 	stmdbcs	fp, {r3, r8, r9, fp}^
    6d90:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    6d94:	00093217 	andeq	r3, r9, r7, lsl r2
    6d98:	120b0c00 	andne	r0, fp, #0, 24
    6d9c:	0a00002a 	beq	6e4c <__core1_unwind_stub-0xff91b4>
    6da0:	0932170d 	ldmdbeq	r2!, {r0, r2, r3, r8, r9, sl, ip}
    6da4:	0b100000 	bleq	406dac <__core1_unwind_stub-0xbf9254>
    6da8:	0000296e 	andeq	r2, r0, lr, ror #18
    6dac:	32170e0a 	andscc	r0, r7, #10, 28	; 0xa0
    6db0:	14000009 	strne	r0, [r0], #-9
    6db4:	0029820b 	eoreq	r8, r9, fp, lsl #4
    6db8:	170f0a00 	strne	r0, [pc, -r0, lsl #20]
    6dbc:	00000a6b 	andeq	r0, r0, fp, ror #20
    6dc0:	32080018 	andcc	r0, r8, #24
    6dc4:	6b000009 	blvs	6df0 <__core1_unwind_stub-0xff9210>
    6dc8:	0900000a 	stmdbeq	r0, {r1, r3}
    6dcc:	0000002c 	andeq	r0, r0, ip, lsr #32
    6dd0:	5b200039 	blpl	806ebc <__core1_unwind_stub-0x7f9144>
    6dd4:	0500000a 	streq	r0, [r0, #-10]
    6dd8:	00002937 	andeq	r2, r0, r7, lsr r9
    6ddc:	f503110a 			; <UNDEFINED> instruction: 0xf503110a
    6de0:	21000009 	tstcs	r0, r9
    6de4:	00002942 	andeq	r2, r0, r2, asr #18
    6de8:	b00d2301 	andlt	r2, sp, r1, lsl #6
    6dec:	24000005 	strcs	r0, [r0], #-5
    6df0:	00002977 	andeq	r2, r0, r7, ror r9
    6df4:	98062901 	stmdals	r6, {r0, r8, fp, sp}
    6df8:	bc01004a 	stclt	0, cr0, [r1], {74}	; 0x4a
    6dfc:	01000000 	mrseq	r0, (UNDEF: 0)
    6e00:	298b259c 	stmibcs	fp, {r2, r3, r4, r7, r8, sl, sp}
    6e04:	24010000 	strcs	r0, [r1], #-0
    6e08:	004a6c14 	subeq	r6, sl, r4, lsl ip
    6e0c:	00002c01 	andeq	r2, r0, r1, lsl #24
    6e10:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    6e14:	2600000a 	strcs	r0, [r0], -sl
    6e18:	00001103 	andeq	r1, r0, r3, lsl #2
    6e1c:	f9232401 			; <UNDEFINED> instruction: 0xf9232401
    6e20:	02000000 	andeq	r0, r0, #0
    6e24:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    6e28:	00002a23 	andeq	r2, r0, r3, lsr #20
    6e2c:	10141c01 	andsne	r1, r4, r1, lsl #24
    6e30:	5c01004a 	stcpl	0, cr0, [r1], {74}	; 0x4a
    6e34:	01000000 	mrseq	r0, (UNDEF: 0)
    6e38:	000b069c 	muleq	fp, ip, r6
    6e3c:	29bc2100 	ldmibcs	ip!, {r8, sp}
    6e40:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    6e44:	00091514 	andeq	r1, r9, r4, lsl r5
    6e48:	29ca2100 	stmibcs	sl, {r8, sp}^
    6e4c:	1f010000 	svcne	0x00010000
    6e50:	00091514 	andeq	r1, r9, r4, lsl r5
    6e54:	4a1c2700 	bmi	710a5c <__core1_unwind_stub-0x8ef5a4>
    6e58:	003c0100 	eorseq	r0, ip, r0, lsl #2
    6e5c:	70280000 	eorvc	r0, r8, r0
    6e60:	13200100 	nopne	{0}	; <UNPREDICTABLE>
    6e64:	00000b06 	andeq	r0, r0, r6, lsl #22
    6e68:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6e6c:	15040f00 	strne	r0, [r4, #-3840]	; 0xfffff100
    6e70:	00000009 	andeq	r0, r0, r9
    6e74:	000000f6 	strdeq	r0, [r0], -r6
    6e78:	11260004 			; <UNDEFINED> instruction: 0x11260004
    6e7c:	01040000 	mrseq	r0, (UNDEF: 4)
    6e80:	0000003a 	andeq	r0, r0, sl, lsr r0
    6e84:	002a850c 	eoreq	r8, sl, ip, lsl #10
    6e88:	000bd000 	andeq	sp, fp, r0
    6e8c:	00051800 	andeq	r1, r5, r0, lsl #16
    6e90:	00000000 	andeq	r0, r0, r0
    6e94:	002d9a00 	eoreq	r9, sp, r0, lsl #20
    6e98:	06010200 	streq	r0, [r1], -r0, lsl #4
    6e9c:	00000402 	andeq	r0, r0, r2, lsl #8
    6ea0:	61050202 	tstvs	r5, r2, lsl #4
    6ea4:	0200000d 	andeq	r0, r0, #13
    6ea8:	080a0504 	stmdaeq	sl, {r2, r8, sl}
    6eac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6eb0:	00080505 	andeq	r0, r8, r5, lsl #10
    6eb4:	08010200 	stmdaeq	r1, {r9}
    6eb8:	00000400 	andeq	r0, r0, r0, lsl #8
    6ebc:	9e070202 	cdpls	2, 0, cr0, cr7, cr2, {0}
    6ec0:	0200000e 	andeq	r0, r0, #14
    6ec4:	0b400704 	bleq	1008adc <f2s_free_clk+0xad8>
    6ec8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6ecc:	000b3b07 	andeq	r3, fp, r7, lsl #22
    6ed0:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    6ed4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6ed8:	45070402 	strmi	r0, [r7, #-1026]	; 0xfffffbfe
    6edc:	0400000b 	streq	r0, [r0], #-11
    6ee0:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
    6ee4:	4f160301 	svcmi	0x00160301
    6ee8:	04000000 	streq	r0, [r0], #-0
    6eec:	000029ca 	andeq	r2, r0, sl, asr #19
    6ef0:	4f250301 	svcmi	0x00250301
    6ef4:	04000000 	streq	r0, [r0], #-0
    6ef8:	00002a68 	andeq	r2, r0, r8, ror #20
    6efc:	4f320301 	svcmi	0x00320301
    6f00:	04000000 	streq	r0, [r0], #-0
    6f04:	00002a76 	andeq	r2, r0, r6, ror sl
    6f08:	4f160401 	svcmi	0x00160401
    6f0c:	04000000 	streq	r0, [r0], #-0
    6f10:	00002a48 	andeq	r2, r0, r8, asr #20
    6f14:	4f260401 	svcmi	0x00260401
    6f18:	04000000 	streq	r0, [r0], #-0
    6f1c:	00002a3a 	andeq	r2, r0, sl, lsr sl
    6f20:	4f340401 	svcmi	0x00340401
    6f24:	05000000 	streq	r0, [r0, #-0]
    6f28:	00002a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    6f2c:	a41d1c01 	ldrge	r1, [sp], #-3073	; 0xfffff3ff
    6f30:	0c01004b 	stceq	0, cr0, [r1], {75}	; 0x4b
    6f34:	01000000 	mrseq	r0, (UNDEF: 0)
    6f38:	2a55069c 	bcs	15489b0 <__end__+0x52c990>
    6f3c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    6f40:	004b5423 	subeq	r5, fp, r3, lsr #8
    6f44:	00005001 	andeq	r5, r0, r1
    6f48:	f39c0100 	vaddw.u16	q0, q6, d0
    6f4c:	07000000 	streq	r0, [r0, -r0]
    6f50:	01004b60 	tsteq	r0, r0, ror #22
    6f54:	0000003c 	andeq	r0, r0, ip, lsr r0
    6f58:	01007008 	tsteq	r0, r8
    6f5c:	00f3190c 	rscseq	r1, r3, ip, lsl #18
    6f60:	91020000 	mrsls	r0, (UNDEF: 2)
    6f64:	09000074 	stmdbeq	r0, {r2, r4, r5, r6}
    6f68:	00004f04 	andeq	r4, r0, r4, lsl #30
    6f6c:	020c0000 	andeq	r0, ip, #0
    6f70:	00040000 	andeq	r0, r4, r0
    6f74:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
    6f78:	003a0104 	eorseq	r0, sl, r4, lsl #2
    6f7c:	bb0c0000 	bllt	306f84 <__core1_unwind_stub-0xcf907c>
    6f80:	d000002a 	andle	r0, r0, sl, lsr #32
    6f84:	3000000b 	andcc	r0, r0, fp
    6f88:	00000005 	andeq	r0, r0, r5
    6f8c:	1d000000 	stcne	0, cr0, [r0, #-0]
    6f90:	0200002e 	andeq	r0, r0, #46	; 0x2e
    6f94:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6f98:	fa030074 	blx	c7170 <__core1_unwind_stub-0xf38e90>
    6f9c:	0200002f 	andeq	r0, r0, #47	; 0x2f
    6fa0:	003817d1 	ldrsbteq	r1, [r8], -r1
    6fa4:	04040000 	streq	r0, [r4], #-0
    6fa8:	000b4507 	andeq	r4, fp, r7, lsl #10
    6fac:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    6fb0:	00000805 	andeq	r0, r0, r5, lsl #16
    6fb4:	9d040804 	stcls	8, cr0, [r4, #-16]
    6fb8:	0400000a 	streq	r0, [r0], #-10
    6fbc:	04020601 	streq	r0, [r2], #-1537	; 0xfffff9ff
    6fc0:	02040000 	andeq	r0, r4, #0
    6fc4:	000d6105 	andeq	r6, sp, r5, lsl #2
    6fc8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6fcc:	0000080a 	andeq	r0, r0, sl, lsl #16
    6fd0:	002a1b03 	eoreq	r1, sl, r3, lsl #22
    6fd4:	182e0300 	stmdane	lr!, {r8, r9}
    6fd8:	00000073 	andeq	r0, r0, r3, ror r0
    6fdc:	00006205 	andeq	r6, r0, r5, lsl #4
    6fe0:	08010400 	stmdaeq	r1, {sl}
    6fe4:	00000400 	andeq	r0, r0, r0, lsl #8
    6fe8:	9e070204 	cdpls	2, 0, cr0, cr7, cr4, {0}
    6fec:	0400000e 	streq	r0, [r0], #-14
    6ff0:	0b400704 	bleq	1008c08 <f2s_free_clk+0xc04>
    6ff4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    6ff8:	000b3b07 	andeq	r3, fp, r7, lsl #22
    6ffc:	2aac0600 	bcs	feb08804 <__shm_end__+0xbeb08804>
    7000:	14010000 	strne	r0, [r1], #-0
    7004:	00012107 	andeq	r2, r1, r7, lsl #2
    7008:	00000000 	andeq	r0, r0, r0
    700c:	00010800 	andeq	r0, r1, r0, lsl #16
    7010:	219c0100 	orrscs	r0, ip, r0, lsl #2
    7014:	07000001 	streq	r0, [r0, -r1]
    7018:	00747364 	rsbseq	r7, r4, r4, ror #6
    701c:	21151401 	tstcs	r5, r1, lsl #8
    7020:	02000001 	andeq	r0, r0, #1
    7024:	73076491 	movwvc	r6, #29841	; 0x7491
    7028:	01006372 	tsteq	r0, r2, ror r3
    702c:	01232614 			; <UNDEFINED> instruction: 0x01232614
    7030:	91020000 	mrsls	r0, (UNDEF: 2)
    7034:	006e0760 	rsbeq	r0, lr, r0, ror #14
    7038:	2c321401 	cfldrscs	mvf1, [r2], #-4
    703c:	02000000 	andeq	r0, r0, #0
    7040:	64085c91 	strvs	r5, [r8], #-3217	; 0xfffff36f
    7044:	0e160100 	mufeqs	f0, f6, f0
    7048:	0000012a 	andeq	r0, r0, sl, lsr #2
    704c:	086c9102 	stmdaeq	ip!, {r1, r8, ip, pc}^
    7050:	17010073 	smlsdxne	r1, r3, r0, r0
    7054:	00013014 	andeq	r3, r1, r4, lsl r0
    7058:	68910200 	ldmvs	r1, {r9}
    705c:	00000009 	andeq	r0, r0, r9
    7060:	00004c00 	andeq	r4, r0, r0, lsl #24
    7064:	00010900 	andeq	r0, r1, r0, lsl #18
    7068:	00690800 	rsbeq	r0, r9, r0, lsl #16
    706c:	2c151a01 			; <UNDEFINED> instruction: 0x2c151a01
    7070:	02000000 	andeq	r0, r0, #0
    7074:	0a007491 	beq	242c0 <__core1_unwind_stub-0xfdbd40>
    7078:	00000000 	andeq	r0, r0, r0
    707c:	0000004c 	andeq	r0, r0, ip, asr #32
    7080:	01006908 	tsteq	r0, r8, lsl #18
    7084:	002c151c 	eoreq	r1, ip, ip, lsl r5
    7088:	91020000 	mrsls	r0, (UNDEF: 2)
    708c:	0b000070 	bleq	7254 <__core1_unwind_stub-0xff8dac>
    7090:	29040c04 	stmdbcs	r4, {r2, sl, fp}
    7094:	0d000001 	stceq	0, cr0, [r0, #-4]
    7098:	0062040c 	rsbeq	r0, r2, ip, lsl #8
    709c:	040c0000 	streq	r0, [ip], #-0
    70a0:	0000006e 	andeq	r0, r0, lr, rrx
    70a4:	002ad006 	eoreq	sp, sl, r6
    70a8:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    70ac:	00000121 	andeq	r0, r0, r1, lsr #2
    70b0:	01004c28 	tsteq	r0, r8, lsr #24
    70b4:	00000084 	andeq	r0, r0, r4, lsl #1
    70b8:	01ad9c01 			; <UNDEFINED> instruction: 0x01ad9c01
    70bc:	64070000 	strvs	r0, [r7], #-0
    70c0:	01007473 	tsteq	r0, r3, ror r4
    70c4:	0121140c 			; <UNDEFINED> instruction: 0x0121140c
    70c8:	91020000 	mrsls	r0, (UNDEF: 2)
    70cc:	72730764 	rsbsvc	r0, r3, #100, 14	; 0x1900000
    70d0:	0c010063 	stceq	0, cr0, [r1], {99}	; 0x63
    70d4:	00012325 	andeq	r2, r1, r5, lsr #6
    70d8:	60910200 	addsvs	r0, r1, r0, lsl #4
    70dc:	01006e07 	tsteq	r0, r7, lsl #28
    70e0:	002c310c 	eoreq	r3, ip, ip, lsl #2
    70e4:	91020000 	mrsls	r0, (UNDEF: 2)
    70e8:	0064085c 	rsbeq	r0, r4, ip, asr r8
    70ec:	2a0e0e01 	bcs	38a8f8 <__core1_unwind_stub-0xc75708>
    70f0:	02000001 	andeq	r0, r0, #1
    70f4:	73087091 	movwvc	r7, #32913	; 0x8091
    70f8:	140f0100 	strne	r0, [pc], #-256	; 7100 <__core1_unwind_stub-0xff8f00>
    70fc:	00000130 	andeq	r0, r0, r0, lsr r1
    7100:	0a6c9102 	beq	1b2b510 <__end__+0xb0f4f0>
    7104:	01004c50 	tsteq	r0, r0, asr ip
    7108:	00000048 	andeq	r0, r0, r8, asr #32
    710c:	01006908 	tsteq	r0, r8, lsl #18
    7110:	002c1110 	eoreq	r1, ip, r0, lsl r1
    7114:	91020000 	mrsls	r0, (UNDEF: 2)
    7118:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    711c:	00002ab4 			; <UNDEFINED> instruction: 0x00002ab4
    7120:	21070501 	tstcs	r7, r1, lsl #10
    7124:	b4000001 	strlt	r0, [r0], #-1
    7128:	7401004b 	strvc	r0, [r1], #-75	; 0xffffffb5
    712c:	01000000 	mrseq	r0, (UNDEF: 0)
    7130:	0073079c 			; <UNDEFINED> instruction: 0x0073079c
    7134:	21140501 	tstcs	r4, r1, lsl #10
    7138:	02000001 	andeq	r0, r0, #1
    713c:	63076c91 	movwvs	r6, #31889	; 0x7c91
    7140:	1b050100 	blne	147548 <__core1_unwind_stub-0xeb8ab8>
    7144:	00000025 	andeq	r0, r0, r5, lsr #32
    7148:	07689102 	strbeq	r9, [r8, -r2, lsl #2]!
    714c:	0501006e 	streq	r0, [r1, #-110]	; 0xffffff92
    7150:	00002c25 	andeq	r2, r0, r5, lsr #24
    7154:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    7158:	01007008 	tsteq	r0, r8
    715c:	012a0e07 			; <UNDEFINED> instruction: 0x012a0e07
    7160:	91020000 	mrsls	r0, (UNDEF: 2)
    7164:	4bd40a70 	blmi	ff509b2c <__shm_end__+0xbf509b2c>
    7168:	00400100 	subeq	r0, r0, r0, lsl #2
    716c:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    7170:	11080100 	mrsne	r0, (UNDEF: 24)
    7174:	0000002c 	andeq	r0, r0, ip, lsr #32
    7178:	00749102 	rsbseq	r9, r4, r2, lsl #2
    717c:	00220000 	eoreq	r0, r2, r0
    7180:	00020000 	andeq	r0, r2, r0
    7184:	0000127f 	andeq	r1, r0, pc, ror r2
    7188:	2fb20104 	svccs	0x00b20104
    718c:	00000000 	andeq	r0, r0, r0
    7190:	00040100 	andeq	r0, r4, r0, lsl #2
    7194:	2ad70100 	bcs	ff5c759c <__shm_end__+0xbf5c759c>
    7198:	0bd00000 	bleq	ff4071a0 <__shm_end__+0xbf4071a0>
    719c:	2af40000 	bcs	ffd071a4 <__shm_end__+0xbfd071a4>
    71a0:	80010000 	andhi	r0, r1, r0
    71a4:	0000126d 	andeq	r1, r0, sp, ror #4
    71a8:	12930004 	addsne	r0, r3, #4
    71ac:	01040000 	mrseq	r0, (UNDEF: 4)
    71b0:	0000003a 	andeq	r0, r0, sl, lsr r0
    71b4:	002d0c0c 	eoreq	r0, sp, ip, lsl #24
    71b8:	000bd000 	andeq	sp, fp, r0
    71bc:	00056800 	andeq	r6, r5, r0, lsl #16
    71c0:	00000000 	andeq	r0, r0, r0
    71c4:	002ffe00 	eoreq	pc, pc, r0, lsl #28
    71c8:	06010200 	streq	r0, [r1], -r0, lsl #4
    71cc:	00000402 	andeq	r0, r0, r2, lsl #8
    71d0:	61050202 	tstvs	r5, r2, lsl #4
    71d4:	0300000d 	movweq	r0, #13
    71d8:	00002ec2 	andeq	r2, r0, r2, asr #29
    71dc:	3f182802 	svccc	0x00182802
    71e0:	02000000 	andeq	r0, r0, #0
    71e4:	080a0504 	stmdaeq	sl, {r2, r8, sl}
    71e8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    71ec:	00080505 	andeq	r0, r8, r5, lsl #10
    71f0:	2a1b0300 	bcs	6c7df8 <__core1_unwind_stub-0x938208>
    71f4:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    71f8:	00005918 	andeq	r5, r0, r8, lsl r9
    71fc:	08010200 	stmdaeq	r1, {r9}
    7200:	00000400 	andeq	r0, r0, r0, lsl #8
    7204:	9e070202 	cdpls	2, 0, cr0, cr7, cr2, {0}
    7208:	0300000e 	movweq	r0, #14
    720c:	00003043 	andeq	r3, r0, r3, asr #32
    7210:	78193402 	ldmdavc	r9, {r1, sl, ip, sp}
    7214:	04000000 	streq	r0, [r0], #-0
    7218:	00000067 	andeq	r0, r0, r7, rrx
    721c:	40070402 	andmi	r0, r7, r2, lsl #8
    7220:	0200000b 	andeq	r0, r0, #11
    7224:	0b3b0708 	bleq	ec8e4c <__core1_unwind_stub-0x1371b4>
    7228:	04050000 	streq	r0, [r5], #-0
    722c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    7230:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7234:	00000b45 	andeq	r0, r0, r5, asr #22
    7238:	00008d06 	andeq	r8, r0, r6, lsl #26
    723c:	232d0300 			; <UNDEFINED> instruction: 0x232d0300
    7240:	56020000 	strpl	r0, [r2], -r0
    7244:	00008d1a 	andeq	r8, r0, sl, lsl sp
    7248:	2ffa0300 	svccs	0x00fa0300
    724c:	d1030000 	mrsle	r0, (UNDEF: 3)
    7250:	00008d17 	andeq	r8, r0, r7, lsl sp
    7254:	00a50600 	adceq	r0, r5, r0, lsl #12
    7258:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    725c:	000a9d04 	andeq	r9, sl, r4, lsl #26
    7260:	04d60300 	ldrbeq	r0, [r6], #768	; 0x300
    7264:	41040000 	mrsmi	r0, (UNDEF: 4)
    7268:	0000331d 	andeq	r3, r0, sp, lsl r3
    726c:	1e130700 	cdpne	7, 1, cr0, cr3, cr0, {0}
    7270:	01070000 	mrseq	r0, (UNDEF: 7)
    7274:	00000059 	andeq	r0, r0, r9, asr r0
    7278:	e80e6505 	stmda	lr, {r0, r2, r8, sl, sp, lr}
    727c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7280:	0000238c 	andeq	r2, r0, ip, lsl #7
    7284:	1dfb0800 	ldclne	8, cr0, [fp]
    7288:	00010000 	andeq	r0, r1, r0
    728c:	001e4503 	andseq	r4, lr, r3, lsl #10
    7290:	03690500 	cmneq	r9, #0, 10
    7294:	000000c9 	andeq	r0, r0, r9, asr #1
    7298:	0023f807 	eoreq	pc, r3, r7, lsl #16
    729c:	59010700 	stmdbpl	r1, {r8, r9, sl}
    72a0:	05000000 	streq	r0, [r0, #-0]
    72a4:	01130e73 	tsteq	r3, r3, ror lr
    72a8:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    72ac:	00000022 	andeq	r0, r0, r2, lsr #32
    72b0:	00210608 	eoreq	r0, r1, r8, lsl #12
    72b4:	03000100 	movweq	r0, #256	; 0x100
    72b8:	0000242c 	andeq	r2, r0, ip, lsr #8
    72bc:	f4037705 	vst1.8	{d7}, [r3], r5
    72c0:	07000000 	streq	r0, [r0, -r0]
    72c4:	00002234 	andeq	r2, r0, r4, lsr r2
    72c8:	00590107 	subseq	r0, r9, r7, lsl #2
    72cc:	7e050000 	cdpvc	0, 0, cr0, cr5, cr0, {0}
    72d0:	00013e0e 	andeq	r3, r1, lr, lsl #28
    72d4:	22de0800 	sbcscs	r0, lr, #0, 16
    72d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    72dc:	000025a1 	andeq	r2, r0, r1, lsr #11
    72e0:	56030001 	strpl	r0, [r3], -r1
    72e4:	05000022 	streq	r0, [r0, #-34]	; 0xffffffde
    72e8:	011f038d 	tsteq	pc, sp, lsl #7
    72ec:	58070000 	stmdapl	r7, {}	; <UNPREDICTABLE>
    72f0:	07000024 	streq	r0, [r0, -r4, lsr #32]
    72f4:	00005901 	andeq	r5, r0, r1, lsl #18
    72f8:	06bc0500 	ldrteq	r0, [ip], r0, lsl #10
    72fc:	00000181 	andeq	r0, r0, r1, lsl #3
    7300:	00229608 	eoreq	r9, r2, r8, lsl #12
    7304:	42080000 	andmi	r0, r8, #0
    7308:	01000020 	tsteq	r0, r0, lsr #32
    730c:	0021ca08 	eoreq	ip, r1, r8, lsl #20
    7310:	a1080200 	mrsge	r0, R8_fiq
    7314:	0300001c 	movweq	r0, #28
    7318:	0024b008 	eoreq	fp, r4, r8
    731c:	9f080500 	svcls	0x00080500
    7320:	07000021 	streq	r0, [r0, -r1, lsr #32]
    7324:	24770300 	ldrbtcs	r0, [r7], #-768	; 0xfffffd00
    7328:	c6050000 	strgt	r0, [r5], -r0
    732c:	00014a21 	andeq	r4, r1, r1, lsr #20
    7330:	1f9f0700 	svcne	0x009f0700
    7334:	01070000 	mrseq	r0, (UNDEF: 7)
    7338:	00000059 	andeq	r0, r0, r9, asr r0
    733c:	3006f705 	andcc	pc, r6, r5, lsl #14
    7340:	08000002 	stmdaeq	r0, {r1}
    7344:	00002309 	andeq	r2, r0, r9, lsl #6
    7348:	1e9108ff 	mrcne	8, 4, r0, cr1, cr15, {7}
    734c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7350:	000021eb 	andeq	r2, r0, fp, ror #3
    7354:	1c520801 	mrrcne	8, 0, r0, r2, cr1
    7358:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    735c:	000025b7 			; <UNDEFINED> instruction: 0x000025b7
    7360:	20320803 	eorscs	r0, r2, r3, lsl #16
    7364:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    7368:	0000231c 	andeq	r2, r0, ip, lsl r3
    736c:	1ea50813 	mcrne	8, 5, r0, cr5, cr3, {0}
    7370:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    7374:	00001e6c 	andeq	r1, r0, ip, ror #28
    7378:	1cc60840 	stclne	8, cr0, [r6], {64}	; 0x40
    737c:	08500000 	ldmdaeq	r0, {}^	; <UNPREDICTABLE>
    7380:	000023c8 	andeq	r2, r0, r8, asr #7
    7384:	23a80860 			; <UNDEFINED> instruction: 0x23a80860
    7388:	08700000 	ldmdaeq	r0!, {}^	; <UNPREDICTABLE>
    738c:	000020b3 	strheq	r2, [r0], -r3
    7390:	1f470841 	svcne	0x00470841
    7394:	08510000 	ldmdaeq	r1, {}^	; <UNPREDICTABLE>
    7398:	00001d4d 	andeq	r1, r0, sp, asr #26
    739c:	1d390861 	ldcne	8, cr0, [r9, #-388]!	; 0xfffffe7c
    73a0:	08710000 	ldmdaeq	r1!, {}^	; <UNPREDICTABLE>
    73a4:	0000234d 	andeq	r2, r0, sp, asr #6
    73a8:	21560842 	cmpcs	r6, r2, asr #16
    73ac:	08520000 	ldmdaeq	r2, {}^	; <UNPREDICTABLE>
    73b0:	00001ff9 	strdeq	r1, [r0], -r9
    73b4:	1fae0862 	svcne	0x00ae0862
    73b8:	08720000 	ldmdaeq	r2!, {}^	; <UNPREDICTABLE>
    73bc:	0000201f 	andeq	r2, r0, pc, lsl r0
    73c0:	23e40843 	mvncs	r0, #4390912	; 0x430000
    73c4:	08530000 	ldmdaeq	r3, {}^	; <UNPREDICTABLE>
    73c8:	00001c3f 	andeq	r1, r0, pc, lsr ip
    73cc:	200c0863 	andcs	r0, ip, r3, ror #16
    73d0:	00730000 	rsbseq	r0, r3, r0
    73d4:	001fd809 	andseq	sp, pc, r9, lsl #16
    73d8:	01180500 	tsteq	r8, r0, lsl #10
    73dc:	00018d21 	andeq	r8, r1, r1, lsr #26
    73e0:	24ca0a00 	strbcs	r0, [sl], #2560	; 0xa00
    73e4:	05140000 	ldreq	r0, [r4, #-0]
    73e8:	ba1005cf 	blt	408b2c <__core1_unwind_stub-0xbf74d4>
    73ec:	0b000002 	bleq	73fc <__core1_unwind_stub-0xff8c04>
    73f0:	05006176 	streq	r6, [r0, #-374]	; 0xfffffe8a
    73f4:	ba1a05d1 	blt	688b40 <__core1_unwind_stub-0x9774c0>
    73f8:	00000002 	andeq	r0, r0, r2
    73fc:	0061700b 	rsbeq	r7, r1, fp
    7400:	1a05d505 	bne	17c81c <__core1_unwind_stub-0xe837e4>
    7404:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    7408:	304f0c04 	subcc	r0, pc, r4, lsl #24
    740c:	da050000 	ble	147414 <__core1_unwind_stub-0xeb8bec>
    7410:	00671a05 	rsbeq	r1, r7, r5, lsl #20
    7414:	0c080000 	stceq	0, cr0, [r8], {-0}
    7418:	000021e4 	andeq	r2, r0, r4, ror #3
    741c:	1a05de05 	bne	17ec38 <__core1_unwind_stub-0xe813c8>
    7420:	00000181 	andeq	r0, r0, r1, lsl #3
    7424:	243d0c0c 	ldrtcs	r0, [sp], #-3084	; 0xfffff3f4
    7428:	df050000 	svcle	0x00050000
    742c:	02301a05 	eorseq	r1, r0, #20480	; 0x5000
    7430:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    7434:	00002278 	andeq	r2, r0, r8, ror r2
    7438:	1a05e405 	bne	180454 <__core1_unwind_stub-0xe7fbac>
    743c:	000000e8 	andeq	r0, r0, r8, ror #1
    7440:	20c70c0e 	sbccs	r0, r7, lr, lsl #24
    7444:	e5050000 	str	r0, [r5, #-0]
    7448:	013e1a05 	teqeq	lr, r5, lsl #20
    744c:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    7450:	00002372 	andeq	r2, r0, r2, ror r3
    7454:	1a05e805 	bne	181470 <__core1_unwind_stub-0xe7eb90>
    7458:	00000113 	andeq	r0, r0, r3, lsl r1
    745c:	040d0010 	streq	r0, [sp], #-16
    7460:	0024df09 	eoreq	sp, r4, r9, lsl #30
    7464:	05ec0500 	strbeq	r0, [ip, #1280]!	; 0x500
    7468:	00023d03 	andeq	r3, r2, r3, lsl #26
    746c:	d6040e00 	strle	r0, [r4], -r0, lsl #28
    7470:	02000002 	andeq	r0, r0, #2
    7474:	04090801 	streq	r0, [r9], #-2049	; 0xfffff7ff
    7478:	cf060000 	svcgt	0x00060000
    747c:	07000002 	streq	r0, [r0, -r2]
    7480:	00002e6c 	andeq	r2, r0, ip, ror #28
    7484:	00590107 	subseq	r0, r9, r7, lsl #2
    7488:	41060000 	mrsmi	r0, (UNDEF: 6)
    748c:	0003060e 	andeq	r0, r3, lr, lsl #12
    7490:	2c4b0800 	mcrrcs	8, 0, r0, fp, cr0
    7494:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7498:	00002b6c 	andeq	r2, r0, ip, ror #22
    749c:	2ca30801 	stccs	8, cr0, [r3], #4
    74a0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    74a4:	00002c7f 	andeq	r2, r0, pc, ror ip
    74a8:	88090003 	stmdahi	r9, {r0, r1}
    74ac:	0300000c 	movweq	r0, #12
    74b0:	8d17015e 	ldfhis	f0, [r7, #-376]	; 0xfffffe88
    74b4:	03000000 	movweq	r0, #0
    74b8:	00003055 	andeq	r3, r0, r5, asr r0
    74bc:	3f0e2e07 	svccc	0x000e2e07
    74c0:	03000000 	movweq	r0, #0
    74c4:	00000add 	ldrdeq	r0, [r0], -sp
    74c8:	3f0e7407 	svccc	0x000e7407
    74cc:	0f000000 	svceq	0x00000000
    74d0:	03a50704 			; <UNDEFINED> instruction: 0x03a50704
    74d4:	0000034d 	andeq	r0, r0, sp, asr #6
    74d8:	00023a10 	andeq	r3, r2, r0, lsl sl
    74dc:	0ca70700 	stceq	7, cr0, [r7]
    74e0:	00000306 	andeq	r0, r0, r6, lsl #6
    74e4:	000ae510 	andeq	lr, sl, r0, lsl r5
    74e8:	13a80700 			; <UNDEFINED> instruction: 0x13a80700
    74ec:	0000034d 	andeq	r0, r0, sp, asr #6
    74f0:	00591100 	subseq	r1, r9, r0, lsl #2
    74f4:	035d0000 	cmpeq	sp, #0
    74f8:	8d120000 	ldchi	0, cr0, [r2, #-0]
    74fc:	03000000 	movweq	r0, #0
    7500:	07081300 	streq	r1, [r8, -r0, lsl #6]
    7504:	038109a2 	orreq	r0, r1, #2654208	; 0x288000
    7508:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
    750c:	0700000a 	streq	r0, [r0, -sl]
    7510:	008607a4 	addeq	r0, r6, r4, lsr #15
    7514:	14000000 	strne	r0, [r0], #-0
    7518:	0000000b 	andeq	r0, r0, fp
    751c:	2b05a907 	blcs	171940 <__core1_unwind_stub-0xe8e6c0>
    7520:	04000003 	streq	r0, [r0], #-3
    7524:	0c200300 	stceq	3, cr0, [r0], #-0
    7528:	aa070000 	bge	1c7530 <__core1_unwind_stub-0xe38ad0>
    752c:	00035d03 	andeq	r5, r3, r3, lsl #26
    7530:	0e490300 	cdpeq	3, 4, cr0, cr9, cr0, {0}
    7534:	16080000 	strne	r0, [r8], -r0
    7538:	00007819 	andeq	r7, r0, r9, lsl r8
    753c:	06b30300 	ldrteq	r0, [r3], r0, lsl #6
    7540:	0c090000 	stceq	0, cr0, [r9], {-0}
    7544:	0000860d 	andeq	r8, r0, sp, lsl #12
    7548:	0bc70300 	bleq	ff1c8150 <__shm_end__+0xbf1c8150>
    754c:	23080000 	movwcs	r0, #32768	; 0x8000
    7550:	0003991b 	andeq	r9, r3, fp, lsl r9
    7554:	07081500 	streq	r1, [r8, -r0, lsl #10]
    7558:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    755c:	040b0834 	streq	r0, [fp], #-2100	; 0xfffff7cc
    7560:	34140000 	ldrcc	r0, [r4], #-0
    7564:	0800000a 	stmdaeq	r0, {r1, r3}
    7568:	040b1336 	streq	r1, [fp], #-822	; 0xfffffcca
    756c:	16000000 	strne	r0, [r0], -r0
    7570:	08006b5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
    7574:	00860737 	addeq	r0, r6, r7, lsr r7
    7578:	14040000 	strne	r0, [r4], #-0
    757c:	00000761 	andeq	r0, r0, r1, ror #14
    7580:	860b3708 	strhi	r3, [fp], -r8, lsl #14
    7584:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7588:	0008bf14 	andeq	fp, r8, r4, lsl pc
    758c:	14370800 	ldrtne	r0, [r7], #-2048	; 0xfffff800
    7590:	00000086 	andeq	r0, r0, r6, lsl #1
    7594:	0601140c 	streq	r1, [r1], -ip, lsl #8
    7598:	37080000 	strcc	r0, [r8, -r0]
    759c:	0000861b 	andeq	r8, r0, fp, lsl r6
    75a0:	5f161000 	svcpl	0x00161000
    75a4:	38080078 	stmdacc	r8, {r3, r4, r5, r6}
    75a8:	0004110b 	andeq	r1, r4, fp, lsl #2
    75ac:	0e001400 	cfcpyseq	mvf1, mvf0
    75b0:	0003b104 	andeq	fp, r3, r4, lsl #2
    75b4:	038d1100 	orreq	r1, sp, #0, 2
    75b8:	04210000 	strteq	r0, [r1], #-0
    75bc:	8d120000 	ldchi	0, cr0, [r2, #-0]
    75c0:	00000000 	andeq	r0, r0, r0
    75c4:	01401500 	cmpeq	r0, r0, lsl #10
    75c8:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    75cc:	04a4083c 	strteq	r0, [r4], #2108	; 0x83c
    75d0:	5c140000 	ldcpl	0, cr0, [r4], {-0}
    75d4:	08000001 	stmdaeq	r0, {r0}
    75d8:	0086093e 	addeq	r0, r6, lr, lsr r9
    75dc:	14000000 	strne	r0, [r0], #-0
    75e0:	00000f8f 	andeq	r0, r0, pc, lsl #31
    75e4:	86093f08 	strhi	r3, [r9], -r8, lsl #30
    75e8:	04000000 	streq	r0, [r0], #-0
    75ec:	000eb114 	andeq	fp, lr, r4, lsl r1
    75f0:	09400800 	stmdbeq	r0, {fp}^
    75f4:	00000086 	andeq	r0, r0, r6, lsl #1
    75f8:	09fb1408 	ldmibeq	fp!, {r3, sl, ip}^
    75fc:	41080000 	mrsmi	r0, (UNDEF: 8)
    7600:	00008609 	andeq	r8, r0, r9, lsl #12
    7604:	8c140c00 	ldchi	12, cr0, [r4], {-0}
    7608:	08000003 	stmdaeq	r0, {r0, r1}
    760c:	00860942 	addeq	r0, r6, r2, asr #18
    7610:	14100000 	ldrne	r0, [r0], #-0
    7614:	00000de4 	andeq	r0, r0, r4, ror #27
    7618:	86094308 	strhi	r4, [r9], -r8, lsl #6
    761c:	14000000 	strne	r0, [r0], #-0
    7620:	000a7b14 	andeq	r7, sl, r4, lsl fp
    7624:	09440800 	stmdbeq	r4, {fp}^
    7628:	00000086 	andeq	r0, r0, r6, lsl #1
    762c:	0aa91418 	beq	fea4c694 <__shm_end__+0xbea4c694>
    7630:	45080000 	strmi	r0, [r8, #-0]
    7634:	00008609 	andeq	r8, r0, r9, lsl #12
    7638:	55141c00 	ldrpl	r1, [r4, #-3072]	; 0xfffff400
    763c:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    7640:	00860946 	addeq	r0, r6, r6, asr #18
    7644:	00200000 	eoreq	r0, r0, r0
    7648:	00026317 	andeq	r6, r2, r7, lsl r3
    764c:	08010800 	stmdaeq	r1, {fp}
    7650:	04e9084f 	strbteq	r0, [r9], #2127	; 0x84f
    7654:	41140000 	tstmi	r4, r0
    7658:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    765c:	04e90a50 	strbteq	r0, [r9], #2640	; 0xa50
    7660:	14000000 	strne	r0, [r0], #-0
    7664:	00000b66 	andeq	r0, r0, r6, ror #22
    7668:	e9095108 	stmdb	r9, {r3, r8, ip, lr}
    766c:	80000004 	andhi	r0, r0, r4
    7670:	000dd418 	andeq	sp, sp, r8, lsl r4
    7674:	0a530800 	beq	14c967c <__end__+0x4ad65c>
    7678:	0000038d 	andeq	r0, r0, sp, lsl #7
    767c:	10180100 	andsne	r0, r8, r0, lsl #2
    7680:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    7684:	038d0a56 	orreq	r0, sp, #352256	; 0x56000
    7688:	01040000 	mrseq	r0, (UNDEF: 4)
    768c:	02ba1100 	adcseq	r1, sl, #0, 2
    7690:	04f90000 	ldrbteq	r0, [r9], #0
    7694:	8d120000 	ldchi	0, cr0, [r2, #-0]
    7698:	1f000000 	svcne	0x00000000
    769c:	0a541700 	beq	150d2a4 <__end__+0x4f1284>
    76a0:	01900000 	orrseq	r0, r0, r0
    76a4:	3c086208 	sfmcc	f6, 4, [r8], {8}
    76a8:	14000005 	strne	r0, [r0], #-5
    76ac:	00000a34 	andeq	r0, r0, r4, lsr sl
    76b0:	3c126308 	ldccc	3, cr6, [r2], {8}
    76b4:	00000005 	andeq	r0, r0, r5
    76b8:	000e0414 	andeq	r0, lr, r4, lsl r4
    76bc:	06640800 	strbteq	r0, [r4], -r0, lsl #16
    76c0:	00000086 	andeq	r0, r0, r6, lsl #1
    76c4:	04931404 	ldreq	r1, [r3], #1028	; 0x404
    76c8:	66080000 	strvs	r0, [r8], -r0
    76cc:	00054209 	andeq	r4, r5, r9, lsl #4
    76d0:	63140800 	tstvs	r4, #0, 16
    76d4:	08000002 	stmdaeq	r0, {r1}
    76d8:	04a41e67 	strteq	r1, [r4], #3687	; 0xe67
    76dc:	00880000 	addeq	r0, r8, r0
    76e0:	04f9040e 	ldrbteq	r0, [r9], #1038	; 0x40e
    76e4:	52110000 	andspl	r0, r1, #0
    76e8:	52000005 	andpl	r0, r0, #5
    76ec:	12000005 	andne	r0, r0, #5
    76f0:	0000008d 	andeq	r0, r0, sp, lsl #1
    76f4:	040e001f 	streq	r0, [lr], #-31	; 0xffffffe1
    76f8:	00000558 	andeq	r0, r0, r8, asr r5
    76fc:	0e091519 	mcreq	5, 0, r1, cr9, cr9, {0}
    7700:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    7704:	0581087a 	streq	r0, [r1, #2170]	; 0x87a
    7708:	a5140000 	ldrge	r0, [r4, #-0]
    770c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    7710:	0581117b 	streq	r1, [r1, #379]	; 0x17b
    7714:	14000000 	strne	r0, [r0], #-0
    7718:	0000304e 	andeq	r3, r0, lr, asr #32
    771c:	86067c08 	strhi	r7, [r6], -r8, lsl #24
    7720:	04000000 	streq	r0, [r0], #-0
    7724:	59040e00 	stmdbpl	r4, {r9, sl, fp}
    7728:	15000000 	strne	r0, [r0, #-0]
    772c:	00000681 	andeq	r0, r0, r1, lsl #13
    7730:	08ba0868 	ldmeq	sl!, {r3, r5, r6, fp}
    7734:	000006ca 	andeq	r0, r0, sl, asr #13
    7738:	00705f16 	rsbseq	r5, r0, r6, lsl pc
    773c:	8112bb08 	tsthi	r2, r8, lsl #22
    7740:	00000005 	andeq	r0, r0, r5
    7744:	00725f16 	rsbseq	r5, r2, r6, lsl pc
    7748:	8607bc08 	strhi	fp, [r7], -r8, lsl #24
    774c:	04000000 	streq	r0, [r0], #-0
    7750:	00775f16 	rsbseq	r5, r7, r6, lsl pc
    7754:	8607bd08 	strhi	fp, [r7], -r8, lsl #26
    7758:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    775c:	000a3a14 	andeq	r3, sl, r4, lsl sl
    7760:	09be0800 	ldmibeq	lr!, {fp}
    7764:	0000002c 	andeq	r0, r0, ip, lsr #32
    7768:	025d140c 	subseq	r1, sp, #12, 8	; 0xc000000
    776c:	bf080000 	svclt	0x00080000
    7770:	00002c09 	andeq	r2, r0, r9, lsl #24
    7774:	5f160e00 	svcpl	0x00160e00
    7778:	08006662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp, lr}
    777c:	055911c0 	ldrbeq	r1, [r9, #-448]	; 0xfffffe40
    7780:	14100000 	ldrne	r0, [r0], #-0
    7784:	00000df6 	strdeq	r0, [r0], -r6
    7788:	8607c108 	strhi	ip, [r7], -r8, lsl #2
    778c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7790:	0005e414 	andeq	lr, r5, r4, lsl r4
    7794:	0ac80800 	beq	ff20979c <__shm_end__+0xbf20979c>
    7798:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    779c:	1c39141c 	cfldrsne	mvf1, [r9], #-112	; 0xffffff90
    77a0:	ca080000 	bgt	2077a8 <__core1_unwind_stub-0xdf8858>
    77a4:	0008421d 	andeq	r4, r8, sp, lsl r2
    77a8:	7d142000 	ldcvc	0, cr2, [r4, #-0]
    77ac:	08000011 	stmdaeq	r0, {r0, r4}
    77b0:	08661dcc 	stmdaeq	r6!, {r2, r3, r6, r7, r8, sl, fp, ip}^
    77b4:	14240000 	strtne	r0, [r4], #-0
    77b8:	00000ac6 	andeq	r0, r0, r6, asr #21
    77bc:	8a0dcf08 	bhi	37b3e4 <__core1_unwind_stub-0xc84c1c>
    77c0:	28000008 	stmdacs	r0, {r3}
    77c4:	002b1e14 	eoreq	r1, fp, r4, lsl lr
    77c8:	09d00800 	ldmibeq	r0, {fp}^
    77cc:	000008a4 	andeq	r0, r0, r4, lsr #17
    77d0:	755f162c 	ldrbvc	r1, [pc, #-1580]	; 71ac <__core1_unwind_stub-0xff8e54>
    77d4:	d3080062 	movwle	r0, #32866	; 0x8062
    77d8:	00055911 	andeq	r5, r5, r1, lsl r9
    77dc:	5f163000 	svcpl	0x00163000
    77e0:	08007075 	stmdaeq	r0, {r0, r2, r4, r5, r6, ip, sp, lr}
    77e4:	058112d4 	streq	r1, [r1, #724]	; 0x2d4
    77e8:	16380000 	ldrtne	r0, [r8], -r0
    77ec:	0072755f 	rsbseq	r7, r2, pc, asr r5
    77f0:	8607d508 	strhi	sp, [r7], -r8, lsl #10
    77f4:	3c000000 	stccc	0, cr0, [r0], {-0}
    77f8:	000a0a14 	andeq	r0, sl, r4, lsl sl
    77fc:	11d80800 	bicsne	r0, r8, r0, lsl #16
    7800:	000008aa 	andeq	r0, r0, sl, lsr #17
    7804:	01561440 	cmpeq	r6, r0, asr #8
    7808:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    780c:	0008ba11 	andeq	fp, r8, r1, lsl sl
    7810:	5f164300 	svcpl	0x00164300
    7814:	0800626c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp, lr}
    7818:	055911dc 	ldrbeq	r1, [r9, #-476]	; 0xfffffe24
    781c:	14440000 	strbne	r0, [r4], #-0
    7820:	00002eb7 			; <UNDEFINED> instruction: 0x00002eb7
    7824:	8607df08 	strhi	sp, [r7], -r8, lsl #30
    7828:	4c000000 	stcmi	0, cr0, [r0], {-0}
    782c:	00062714 	andeq	r2, r6, r4, lsl r7
    7830:	0ae00800 	beq	ff809838 <__shm_end__+0xbf809838>
    7834:	00000313 	andeq	r0, r0, r3, lsl r3
    7838:	2b121450 	blcs	48c980 <__core1_unwind_stub-0xb73680>
    783c:	e3080000 	movw	r0, #32768	; 0x8000
    7840:	0006e812 	andeq	lr, r6, r2, lsl r8
    7844:	ab145400 	blge	51c84c <__core1_unwind_stub-0xae37b4>
    7848:	08000001 	stmdaeq	r0, {r0}
    784c:	03a50ce7 			; <UNDEFINED> instruction: 0x03a50ce7
    7850:	14580000 	ldrbne	r0, [r8], #-0
    7854:	00000a26 	andeq	r0, r0, r6, lsr #20
    7858:	810ee908 	tsthi	lr, r8, lsl #18
    785c:	5c000003 	stcpl	0, cr0, [r0], {3}
    7860:	00069414 	andeq	r9, r6, r4, lsl r4
    7864:	09ea0800 	stmibeq	sl!, {fp}^
    7868:	00000086 	andeq	r0, r0, r6, lsl #1
    786c:	861a0064 	ldrhi	r0, [sl], -r4, rrx
    7870:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    7874:	1b000006 	blne	7894 <__core1_unwind_stub-0xff876c>
    7878:	000006e8 	andeq	r0, r0, r8, ror #13
    787c:	0002ba1b 	andeq	fp, r2, fp, lsl sl
    7880:	083c1b00 	ldmdaeq	ip!, {r8, r9, fp, ip}
    7884:	861b0000 	ldrhi	r0, [fp], -r0
    7888:	00000000 	andeq	r0, r0, r0
    788c:	06f3040e 	ldrbteq	r0, [r3], lr, lsl #8
    7890:	e8060000 	stmda	r6, {}	; <UNPREDICTABLE>
    7894:	1c000006 	stcne	0, cr0, [r0], {6}
    7898:	00000446 	andeq	r0, r0, r6, asr #8
    789c:	65080428 	strvs	r0, [r8, #-1064]	; 0xfffffbd8
    78a0:	083c0802 	ldmdaeq	ip!, {r1, fp}
    78a4:	920c0000 	andls	r0, ip, #0
    78a8:	08000009 	stmdaeq	r0, {r0, r3}
    78ac:	86070267 	strhi	r0, [r7], -r7, ror #4
    78b0:	00000000 	andeq	r0, r0, r0
    78b4:	0005220c 	andeq	r2, r5, ip, lsl #4
    78b8:	026c0800 	rsbeq	r0, ip, #0, 16
    78bc:	0009160b 	andeq	r1, r9, fp, lsl #12
    78c0:	870c0400 	strhi	r0, [ip, -r0, lsl #8]
    78c4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    78c8:	1614026c 	ldrne	r0, [r4], -ip, ror #4
    78cc:	08000009 	stmdaeq	r0, {r0, r3}
    78d0:	000a100c 	andeq	r1, sl, ip
    78d4:	026c0800 	rsbeq	r0, ip, #0, 16
    78d8:	0009161e 	andeq	r1, r9, lr, lsl r6
    78dc:	ff0c0c00 			; <UNDEFINED> instruction: 0xff0c0c00
    78e0:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    78e4:	8608026e 	strhi	r0, [r8], -lr, ror #4
    78e8:	10000000 	andne	r0, r0, r0
    78ec:	0007fa0c 	andeq	pc, r7, ip, lsl #20
    78f0:	026f0800 	rsbeq	r0, pc, #0, 16
    78f4:	000b1608 	andeq	r1, fp, r8, lsl #12
    78f8:	2d0c1400 	cfstrscs	mvf1, [ip, #-0]
    78fc:	08000004 	stmdaeq	r0, {r2}
    7900:	86070272 			; <UNDEFINED> instruction: 0x86070272
    7904:	30000000 	andcc	r0, r0, r0
    7908:	000e410c 	andeq	r4, lr, ip, lsl #2
    790c:	02730800 	rsbseq	r0, r3, #0, 16
    7910:	000b2b16 	andeq	r2, fp, r6, lsl fp
    7914:	890c3400 	stmdbhi	ip, {sl, ip, sp}
    7918:	08000006 	stmdaeq	r0, {r1, r2}
    791c:	86070275 			; <UNDEFINED> instruction: 0x86070275
    7920:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    7924:	00077d0c 	andeq	r7, r7, ip, lsl #26
    7928:	02770800 	rsbseq	r0, r7, #0, 16
    792c:	000b3c0a 	andeq	r3, fp, sl, lsl #24
    7930:	510c3c00 	tstpl	ip, r0, lsl #24
    7934:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    7938:	0b13027a 	bleq	4c8328 <__core1_unwind_stub-0xb37cd8>
    793c:	40000004 	andmi	r0, r0, r4
    7940:	0002f10c 	andeq	pc, r2, ip, lsl #2
    7944:	027b0800 	rsbseq	r0, fp, #0, 16
    7948:	00008607 	andeq	r8, r0, r7, lsl #12
    794c:	6f0c4400 	svcvs	0x000c4400
    7950:	08000006 	stmdaeq	r0, {r1, r2}
    7954:	0b13027c 	bleq	4c834c <__core1_unwind_stub-0xb37cb4>
    7958:	48000004 	stmdami	r0, {r2}
    795c:	0008a90c 	andeq	sl, r8, ip, lsl #18
    7960:	027d0800 	rsbseq	r0, sp, #0, 16
    7964:	000b4214 	andeq	r4, fp, r4, lsl r2
    7968:	100c4c00 	andne	r4, ip, r0, lsl #24
    796c:	08000001 	stmdaeq	r0, {r0}
    7970:	86070280 	strhi	r0, [r7], -r0, lsl #5
    7974:	50000000 	andpl	r0, r0, r0
    7978:	00062f0c 	andeq	r2, r6, ip, lsl #30
    797c:	02810800 	addeq	r0, r1, #0, 16
    7980:	00083c09 	andeq	r3, r8, r9, lsl #24
    7984:	050c5400 	streq	r5, [ip, #-1024]	; 0xfffffc00
    7988:	0800000a 	stmdaeq	r0, {r1, r3}
    798c:	f10702a4 			; <UNDEFINED> instruction: 0xf10702a4
    7990:	5800000a 	stmdapl	r0, {r1, r3}
    7994:	000a541d 	andeq	r5, sl, sp, lsl r4
    7998:	02a80800 	adceq	r0, r8, #0, 16
    799c:	00053c13 	andeq	r3, r5, r3, lsl ip
    79a0:	1d014800 	stcne	8, cr4, [r1, #-0]
    79a4:	00000787 	andeq	r0, r0, r7, lsl #15
    79a8:	1202a908 	andne	sl, r2, #8, 18	; 0x20000
    79ac:	000004f9 	strdeq	r0, [r0], -r9
    79b0:	1d1d014c 	ldfnes	f0, [sp, #-304]	; 0xfffffed0
    79b4:	08000006 	stmdaeq	r0, {r1, r2}
    79b8:	530c02ad 	movwpl	r0, #49837	; 0xc2ad
    79bc:	dc00000b 	stcle	0, cr0, [r0], {11}
    79c0:	08341d02 	ldmdaeq	r4!, {r1, r8, sl, fp, ip}
    79c4:	b2080000 	andlt	r0, r8, #0
    79c8:	08d71002 	ldmeq	r7, {r1, ip}^
    79cc:	02e00000 	rsceq	r0, r0, #0
    79d0:	0000131d 	andeq	r1, r0, sp, lsl r3
    79d4:	02b40800 	adcseq	r0, r4, #0, 16
    79d8:	000b5f0a 	andeq	r5, fp, sl, lsl #30
    79dc:	0002ec00 	andeq	lr, r2, r0, lsl #24
    79e0:	02cf040e 	sbceq	r0, pc, #234881024	; 0xe000000
    79e4:	040e0000 	streq	r0, [lr], #-0
    79e8:	000006ca 	andeq	r0, r0, sl, asr #13
    79ec:	0000861a 	andeq	r8, r0, sl, lsl r6
    79f0:	00086600 	andeq	r6, r8, r0, lsl #12
    79f4:	06e81b00 	strbteq	r1, [r8], r0, lsl #22
    79f8:	ba1b0000 	blt	6c7a00 <__core1_unwind_stub-0x938600>
    79fc:	1b000002 	blne	7a0c <__core1_unwind_stub-0xff85f4>
    7a00:	000002c9 	andeq	r0, r0, r9, asr #5
    7a04:	0000861b 	andeq	r8, r0, fp, lsl r6
    7a08:	040e0000 	streq	r0, [lr], #-0
    7a0c:	00000848 	andeq	r0, r0, r8, asr #16
    7a10:	00031f1a 	andeq	r1, r3, sl, lsl pc
    7a14:	00088a00 	andeq	r8, r8, r0, lsl #20
    7a18:	06e81b00 	strbteq	r1, [r8], r0, lsl #22
    7a1c:	ba1b0000 	blt	6c7a24 <__core1_unwind_stub-0x9385dc>
    7a20:	1b000002 	blne	7a30 <__core1_unwind_stub-0xff85d0>
    7a24:	0000031f 	andeq	r0, r0, pc, lsl r3
    7a28:	0000861b 	andeq	r8, r0, fp, lsl r6
    7a2c:	040e0000 	streq	r0, [lr], #-0
    7a30:	0000086c 	andeq	r0, r0, ip, ror #16
    7a34:	0000861a 	andeq	r8, r0, sl, lsl r6
    7a38:	0008a400 	andeq	sl, r8, r0, lsl #8
    7a3c:	06e81b00 	strbteq	r1, [r8], r0, lsl #22
    7a40:	ba1b0000 	blt	6c7a48 <__core1_unwind_stub-0x9385b8>
    7a44:	00000002 	andeq	r0, r0, r2
    7a48:	0890040e 	ldmeq	r0, {r1, r2, r3, sl}
    7a4c:	59110000 	ldmdbpl	r1, {}	; <UNPREDICTABLE>
    7a50:	ba000000 	blt	7a58 <__core1_unwind_stub-0xff85a8>
    7a54:	12000008 	andne	r0, r0, #8
    7a58:	0000008d 	andeq	r0, r0, sp, lsl #1
    7a5c:	59110002 	ldmdbpl	r1, {r1}
    7a60:	ca000000 	bgt	7a68 <__core1_unwind_stub-0xff8598>
    7a64:	12000008 	andne	r0, r0, #8
    7a68:	0000008d 	andeq	r0, r0, sp, lsl #1
    7a6c:	12090000 	andne	r0, r9, #0
    7a70:	0800000c 	stmdaeq	r0, {r2, r3}
    7a74:	871a0124 	ldrhi	r0, [sl, -r4, lsr #2]
    7a78:	0a000005 	beq	7a94 <__core1_unwind_stub-0xff856c>
    7a7c:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    7a80:	0128080c 			; <UNDEFINED> instruction: 0x0128080c
    7a84:	00091008 	andeq	r1, r9, r8
    7a88:	0a340c00 	beq	d0aa90 <__core1_unwind_stub-0x2f5570>
    7a8c:	2a080000 	bcs	207a94 <__core1_unwind_stub-0xdf856c>
    7a90:	09101101 	ldmdbeq	r0, {r0, r8, ip}
    7a94:	0c000000 	stceq	0, cr0, [r0], {-0}
    7a98:	0000082d 	andeq	r0, r0, sp, lsr #16
    7a9c:	07012b08 	streq	r2, [r1, -r8, lsl #22]
    7aa0:	00000086 	andeq	r0, r0, r6, lsl #1
    7aa4:	08b30c04 	ldmeq	r3!, {r2, sl, fp}
    7aa8:	2c080000 	stccs	0, cr0, [r8], {-0}
    7aac:	09160b01 	ldmdbeq	r6, {r0, r8, r9, fp}
    7ab0:	00080000 	andeq	r0, r8, r0
    7ab4:	08d7040e 	ldmeq	r7, {r1, r2, r3, sl}^
    7ab8:	040e0000 	streq	r0, [lr], #-0
    7abc:	000008ca 	andeq	r0, r0, sl, asr #17
    7ac0:	000b7f0a 	andeq	r7, fp, sl, lsl #30
    7ac4:	44080e00 	strmi	r0, [r8], #-3584	; 0xfffff200
    7ac8:	09550801 	ldmdbeq	r5, {r0, fp}^
    7acc:	c00c0000 	andgt	r0, ip, r0
    7ad0:	0800000a 	stmdaeq	r0, {r1, r3}
    7ad4:	55120145 	ldrpl	r0, [r2, #-325]	; 0xfffffebb
    7ad8:	00000009 	andeq	r0, r0, r9
    7adc:	0001bf0c 	andeq	fp, r1, ip, lsl #30
    7ae0:	01460800 	cmpeq	r6, r0, lsl #16
    7ae4:	00095512 	andeq	r5, r9, r2, lsl r5
    7ae8:	8c0c0600 	stchi	6, cr0, [ip], {-0}
    7aec:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    7af0:	60120147 	andsvs	r0, r2, r7, asr #2
    7af4:	0c000000 	stceq	0, cr0, [r0], {-0}
    7af8:	00601100 	rsbeq	r1, r0, r0, lsl #2
    7afc:	09650000 	stmdbeq	r5!, {}^	; <UNPREDICTABLE>
    7b00:	8d120000 	ldchi	0, cr0, [r2, #-0]
    7b04:	02000000 	andeq	r0, r0, #0
    7b08:	08d01e00 	ldmeq	r0, {r9, sl, fp, ip}^
    7b0c:	7a070285 	bvc	1c8528 <__core1_unwind_stub-0xe37ad8>
    7b10:	0c00000a 	stceq	0, cr0, [r0], {10}
    7b14:	000003ce 	andeq	r0, r0, lr, asr #7
    7b18:	18028708 	stmdane	r2, {r3, r8, r9, sl, pc}
    7b1c:	0000008d 	andeq	r0, r0, sp, lsl #1
    7b20:	0bab0c00 	bleq	feacab28 <__shm_end__+0xbeacab28>
    7b24:	88080000 	stmdahi	r8, {}	; <UNPREDICTABLE>
    7b28:	083c1202 	ldmdaeq	ip!, {r1, r9, ip}
    7b2c:	0c040000 	stceq	0, cr0, [r4], {-0}
    7b30:	0000002d 	andeq	r0, r0, sp, lsr #32
    7b34:	10028908 	andne	r8, r2, r8, lsl #18
    7b38:	00000a7a 	andeq	r0, r0, sl, ror sl
    7b3c:	03100c08 	tsteq	r0, #8, 24	; 0x800
    7b40:	8a080000 	bhi	207b48 <__core1_unwind_stub-0xdf84b8>
    7b44:	04211702 	strteq	r1, [r1], #-1794	; 0xfffff8fe
    7b48:	0c240000 	stceq	0, cr0, [r4], #-0
    7b4c:	00000883 	andeq	r0, r0, r3, lsl #17
    7b50:	0f028b08 	svceq	0x00028b08
    7b54:	00000086 	andeq	r0, r0, r6, lsl #1
    7b58:	0a2f0c48 	beq	bcac80 <__core1_unwind_stub-0x435380>
    7b5c:	8c080000 	stchi	0, cr0, [r8], {-0}
    7b60:	007f2c02 	rsbseq	r2, pc, r2, lsl #24
    7b64:	0c500000 	mraeq	r0, r0, acc0
    7b68:	00000c76 	andeq	r0, r0, r6, ror ip
    7b6c:	1a028d08 	bne	aaf94 <__core1_unwind_stub-0xf5506c>
    7b70:	0000091c 	andeq	r0, r0, ip, lsl r9
    7b74:	0d540c58 	ldcleq	12, cr0, [r4, #-352]	; 0xfffffea0
    7b78:	8e080000 	cdphi	0, 0, cr0, cr8, cr0, {0}
    7b7c:	03811602 	orreq	r1, r1, #2097152	; 0x200000
    7b80:	0c680000 	stcleq	0, cr0, [r8], #-0
    7b84:	00000afa 	strdeq	r0, [r0], -sl
    7b88:	16028f08 	strne	r8, [r2], -r8, lsl #30
    7b8c:	00000381 	andeq	r0, r0, r1, lsl #7
    7b90:	0a180c70 	beq	60ad58 <__core1_unwind_stub-0x9f52a8>
    7b94:	90080000 	andls	r0, r8, r0
    7b98:	03811602 	orreq	r1, r1, #2097152	; 0x200000
    7b9c:	0c780000 	ldcleq	0, cr0, [r8], #-0
    7ba0:	00000165 	andeq	r0, r0, r5, ror #2
    7ba4:	10029108 	andne	r9, r2, r8, lsl #2
    7ba8:	00000a8a 	andeq	r0, r0, sl, lsl #21
    7bac:	06e30c80 	strbteq	r0, [r3], r0, lsl #25
    7bb0:	92080000 	andls	r0, r8, #0
    7bb4:	0a9a1002 	beq	fe68bbc4 <__shm_end__+0xbe68bbc4>
    7bb8:	0c880000 	stceq	0, cr0, [r8], {0}
    7bbc:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    7bc0:	0f029308 	svceq	0x00029308
    7bc4:	00000086 	andeq	r0, r0, r6, lsl #1
    7bc8:	02e30ca0 	rsceq	r0, r3, #160, 24	; 0xa000
    7bcc:	94080000 	strls	r0, [r8], #-0
    7bd0:	03811602 	orreq	r1, r1, #2097152	; 0x200000
    7bd4:	0ca40000 	stceq	0, cr0, [r4]
    7bd8:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
    7bdc:	16029508 	strne	r9, [r2], -r8, lsl #10
    7be0:	00000381 	andeq	r0, r0, r1, lsl #7
    7be4:	0f010cac 	svceq	0x00010cac
    7be8:	96080000 	strls	r0, [r8], -r0
    7bec:	03811602 	orreq	r1, r1, #2097152	; 0x200000
    7bf0:	0cb40000 	ldceq	0, cr0, [r4]
    7bf4:	000009ec 	andeq	r0, r0, ip, ror #19
    7bf8:	16029708 	strne	r9, [r2], -r8, lsl #14
    7bfc:	00000381 	andeq	r0, r0, r1, lsl #7
    7c00:	01450cbc 	strheq	r0, [r5, #-204]	; 0xffffff34
    7c04:	98080000 	stmdals	r8, {}	; <UNPREDICTABLE>
    7c08:	03811602 	orreq	r1, r1, #2097152	; 0x200000
    7c0c:	0cc40000 	stcleq	0, cr0, [r4], {0}
    7c10:	00000990 	muleq	r0, r0, r9
    7c14:	08029908 	stmdaeq	r2, {r3, r8, fp, ip, pc}
    7c18:	00000086 	andeq	r0, r0, r6, lsl #1
    7c1c:	cf1100cc 	svcgt	0x001100cc
    7c20:	8a000002 	bhi	7c30 <__core1_unwind_stub-0xff83d0>
    7c24:	1200000a 	andne	r0, r0, #10
    7c28:	0000008d 	andeq	r0, r0, sp, lsl #1
    7c2c:	cf110019 	svcgt	0x00110019
    7c30:	9a000002 	bls	7c40 <__core1_unwind_stub-0xff83c0>
    7c34:	1200000a 	andne	r0, r0, #10
    7c38:	0000008d 	andeq	r0, r0, sp, lsl #1
    7c3c:	cf110007 	svcgt	0x00110007
    7c40:	aa000002 	bge	7c50 <__core1_unwind_stub-0xff83b0>
    7c44:	1200000a 	andne	r0, r0, #10
    7c48:	0000008d 	andeq	r0, r0, sp, lsl #1
    7c4c:	f01e0017 			; <UNDEFINED> instruction: 0xf01e0017
    7c50:	07029e08 	streq	r9, [r2, -r8, lsl #28]
    7c54:	00000ad1 	ldrdeq	r0, [r0], -r1
    7c58:	000e180c 	andeq	r1, lr, ip, lsl #16
    7c5c:	02a10800 	adceq	r0, r1, #0, 16
    7c60:	000ad11b 	andeq	sp, sl, fp, lsl r1
    7c64:	480c0000 	stmdami	ip, {}	; <UNPREDICTABLE>
    7c68:	08000008 	stmdaeq	r0, {r3}
    7c6c:	e11802a2 	tst	r8, r2, lsr #5
    7c70:	7800000a 	stmdavc	r0, {r1, r3}
    7c74:	05811100 	streq	r1, [r1, #256]	; 0x100
    7c78:	0ae10000 	beq	ff847c80 <__shm_end__+0xbf847c80>
    7c7c:	8d120000 	ldchi	0, cr0, [r2, #-0]
    7c80:	1d000000 	stcne	0, cr0, [r0, #-0]
    7c84:	008d1100 	addeq	r1, sp, r0, lsl #2
    7c88:	0af10000 	beq	ffc47c90 <__shm_end__+0xbfc47c90>
    7c8c:	8d120000 	ldchi	0, cr0, [r2, #-0]
    7c90:	1d000000 	stcne	0, cr0, [r0, #-0]
    7c94:	08f01f00 	ldmeq	r0!, {r8, r9, sl, fp, ip}^
    7c98:	16030283 	strne	r0, [r3], -r3, lsl #5
    7c9c:	2000000b 	andcs	r0, r0, fp
    7ca0:	00000446 	andeq	r0, r0, r6, asr #8
    7ca4:	0b029a08 	bleq	ae4cc <__core1_unwind_stub-0xf51b34>
    7ca8:	00000965 	andeq	r0, r0, r5, ror #18
    7cac:	00013820 	andeq	r3, r1, r0, lsr #16
    7cb0:	02a30800 	adceq	r0, r3, #0, 16
    7cb4:	000aaa0b 	andeq	sl, sl, fp, lsl #20
    7cb8:	cf110000 	svcgt	0x00110000
    7cbc:	26000002 	strcs	r0, [r0], -r2
    7cc0:	1200000b 	andne	r0, r0, #11
    7cc4:	0000008d 	andeq	r0, r0, sp, lsl #1
    7cc8:	00210018 	eoreq	r0, r1, r8, lsl r0
    7ccc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7cd0:	000b2604 	andeq	r2, fp, r4, lsl #12
    7cd4:	0b3c2200 	bleq	f104dc <__core1_unwind_stub-0xefb24>
    7cd8:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    7cdc:	00000006 	andeq	r0, r0, r6
    7ce0:	0b31040e 	bleq	c48d20 <__core1_unwind_stub-0x3b72e0>
    7ce4:	040e0000 	streq	r0, [lr], #-0
    7ce8:	0000040b 	andeq	r0, r0, fp, lsl #8
    7cec:	000b5322 	andeq	r5, fp, r2, lsr #6
    7cf0:	00861b00 	addeq	r1, r6, r0, lsl #22
    7cf4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7cf8:	000b5904 	andeq	r5, fp, r4, lsl #18
    7cfc:	48040e00 	stmdami	r4, {r9, sl, fp}
    7d00:	1100000b 	tstne	r0, fp
    7d04:	000008ca 	andeq	r0, r0, sl, asr #17
    7d08:	00000b6f 	andeq	r0, r0, pc, ror #22
    7d0c:	00008d12 	andeq	r8, r0, r2, lsl sp
    7d10:	23000200 	movwcs	r0, #512	; 0x200
    7d14:	00000454 	andeq	r0, r0, r4, asr r4
    7d18:	17033308 	strne	r3, [r3, -r8, lsl #6]
    7d1c:	000006e8 	andeq	r0, r0, r8, ror #13
    7d20:	00044d23 	andeq	r4, r4, r3, lsr #26
    7d24:	03340800 	teqeq	r4, #0, 16
    7d28:	0006ee1d 	andeq	lr, r6, sp, lsl lr
    7d2c:	0c140300 	ldceq	3, cr0, [r4], {-0}
    7d30:	420a0000 	andmi	r0, sl, #0
    7d34:	0008ca10 	andeq	ip, r8, r0, lsl sl
    7d38:	89040e00 	stmdbhi	r4, {r9, sl, fp}
    7d3c:	2400000b 	strcs	r0, [r0], #-11
    7d40:	0000083c 	andeq	r0, r0, ip, lsr r8
    7d44:	950e360b 	strls	r3, [lr, #-1547]	; 0xfffff9f5
    7d48:	2400000b 	strcs	r0, [r0], #-11
    7d4c:	00000842 	andeq	r0, r0, r2, asr #16
    7d50:	950e370b 	strls	r3, [lr, #-1803]	; 0xfffff8f5
    7d54:	1100000b 	tstne	r0, fp
    7d58:	00000067 	andeq	r0, r0, r7, rrx
    7d5c:	00000bc4 	andeq	r0, r0, r4, asr #23
    7d60:	00008d25 	andeq	r8, r0, r5, lsr #26
    7d64:	003fff00 	eorseq	pc, pc, r0, lsl #30
    7d68:	002c3d26 	eoreq	r3, ip, r6, lsr #26
    7d6c:	11500100 	cmpne	r0, r0, lsl #2
    7d70:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    7d74:	03054000 	movweq	r4, #20480	; 0x5000
    7d78:	00000000 	andeq	r0, r0, r0
    7d7c:	54010c13 	strpl	r0, [r1], #-3091	; 0xfffff3ed
    7d80:	000c0909 	andeq	r0, ip, r9, lsl #18
    7d84:	0ba61400 	bleq	fe98cd8c <__shm_end__+0xbe98cd8c>
    7d88:	55010000 	strpl	r0, [r1, #-0]
    7d8c:	000c090e 	andeq	r0, ip, lr, lsl #18
    7d90:	4f140000 	svcmi	0x00140000
    7d94:	01000030 	tsteq	r0, r0, lsr r0
    7d98:	00a50e56 	adceq	r0, r5, r6, asr lr
    7d9c:	16040000 	strne	r0, [r4], -r0
    7da0:	0066666f 	rsbeq	r6, r6, pc, ror #12
    7da4:	a50e5701 	strge	r5, [lr, #-1793]	; 0xfffff8ff
    7da8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7dac:	4d040e00 	stcmi	14, cr0, [r4, #-0]
    7db0:	03000000 	movweq	r0, #0
    7db4:	00002b86 	andeq	r2, r0, r6, lsl #23
    7db8:	d8035801 	stmdale	r3, {r0, fp, ip, lr}
    7dbc:	1100000b 	tstne	r0, fp
    7dc0:	0000004d 	andeq	r0, r0, sp, asr #32
    7dc4:	00000c2c 	andeq	r0, r0, ip, lsr #24
    7dc8:	00008d25 	andeq	r8, r0, r5, lsr #26
    7dcc:	00ffff00 	rscseq	pc, pc, r0, lsl #30
    7dd0:	002b4326 	eoreq	r4, fp, r6, lsr #6
    7dd4:	125a0100 	subsne	r0, sl, #0, 2
    7dd8:	00000c1b 	andeq	r0, r0, fp, lsl ip
    7ddc:	03054000 	movweq	r4, #20480	; 0x5000
    7de0:	0100c000 	mrseq	ip, (UNDEF: 0)
    7de4:	002e3b27 	eoreq	r3, lr, r7, lsr #22
    7de8:	135b0100 	cmpne	fp, #0, 2
    7dec:	00000c0f 	andeq	r0, r0, pc, lsl #24
    7df0:	570c0305 	strpl	r0, [ip, -r5, lsl #6]
    7df4:	2b280100 	blcs	a081fc <__core1_unwind_stub-0x5f7e04>
    7df8:	0100002e 	tsteq	r0, lr, lsr #32
    7dfc:	6514015d 	ldrvs	r0, [r4, #-349]	; 0xfffffea3
    7e00:	0500000c 	streq	r0, [r0, #-12]
    7e04:	00000003 	andeq	r0, r0, r3
    7e08:	73040e00 	movwvc	r0, #19968	; 0x4e00
    7e0c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7e10:	00002b5b 	andeq	r2, r0, fp, asr fp
    7e14:	14015e01 	strne	r5, [r1], #-3585	; 0xfffff1ff
    7e18:	00000c65 	andeq	r0, r0, r5, ror #24
    7e1c:	00000305 	andeq	r0, r0, r5, lsl #6
    7e20:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
    7e24:	0100002b 	tsteq	r0, fp, lsr #32
    7e28:	6514015f 	ldrvs	r0, [r4, #-351]	; 0xfffffea1
    7e2c:	0500000c 	streq	r0, [r0, #-12]
    7e30:	00000003 	andeq	r0, r0, r3
    7e34:	2c6d2800 	stclcs	8, cr2, [sp], #-0
    7e38:	60010000 	andvs	r0, r1, r0
    7e3c:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    7e40:	03050000 	movweq	r0, #20480	; 0x5000
    7e44:	00000000 	andeq	r0, r0, r0
    7e48:	002c5a28 	eoreq	r5, ip, r8, lsr #20
    7e4c:	01610100 	cmneq	r1, r0, lsl #2
    7e50:	000c6514 	andeq	r6, ip, r4, lsl r5
    7e54:	00030500 	andeq	r0, r3, r0, lsl #10
    7e58:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7e5c:	00002e92 	muleq	r0, r2, lr
    7e60:	14016201 	strne	r6, [r1], #-513	; 0xfffffdff
    7e64:	00000c65 	andeq	r0, r0, r5, ror #24
    7e68:	00000305 	andeq	r0, r0, r5, lsl #6
    7e6c:	d5280000 	strle	r0, [r8, #-0]!
    7e70:	0100002c 	tsteq	r0, ip, lsr #32
    7e74:	65140163 	ldrvs	r0, [r4, #-355]	; 0xfffffe9d
    7e78:	0500000c 	streq	r0, [r0, #-12]
    7e7c:	00000003 	andeq	r0, r0, r3
    7e80:	2d6d2800 	stclcs	8, cr2, [sp, #-0]
    7e84:	64010000 	strvs	r0, [r1], #-0
    7e88:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    7e8c:	03050000 	movweq	r0, #20480	; 0x5000
    7e90:	00000000 	andeq	r0, r0, r0
    7e94:	002cf928 	eoreq	pc, ip, r8, lsr #18
    7e98:	01650100 	cmneq	r5, r0, lsl #2
    7e9c:	000c6514 	andeq	r6, ip, r4, lsl r5
    7ea0:	00030500 	andeq	r0, r3, r0, lsl #10
    7ea4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7ea8:	00002c0d 	andeq	r2, r0, sp, lsl #24
    7eac:	14016601 	strne	r6, [r1], #-1537	; 0xfffff9ff
    7eb0:	00000c65 	andeq	r0, r0, r5, ror #24
    7eb4:	00000305 	andeq	r0, r0, r5, lsl #6
    7eb8:	91280000 			; <UNDEFINED> instruction: 0x91280000
    7ebc:	0100002b 	tsteq	r0, fp, lsr #32
    7ec0:	65140167 	ldrvs	r0, [r4, #-359]	; 0xfffffe99
    7ec4:	0500000c 	streq	r0, [r0, #-12]
    7ec8:	00000003 	andeq	r0, r0, r3
    7ecc:	2e792800 	cdpcs	8, 7, cr2, cr9, cr0, {0}
    7ed0:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    7ed4:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    7ed8:	03050000 	movweq	r0, #20480	; 0x5000
    7edc:	00000000 	andeq	r0, r0, r0
    7ee0:	002e0b28 	eoreq	r0, lr, r8, lsr #22
    7ee4:	01690100 	cmneq	r9, r0, lsl #2
    7ee8:	000c6514 	andeq	r6, ip, r4, lsl r5
    7eec:	00030500 	andeq	r0, r3, r0, lsl #10
    7ef0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7ef4:	00002cb4 			; <UNDEFINED> instruction: 0x00002cb4
    7ef8:	14016a01 	strne	r6, [r1], #-2561	; 0xfffff5ff
    7efc:	00000c65 	andeq	r0, r0, r5, ror #24
    7f00:	00000305 	andeq	r0, r0, r5, lsl #6
    7f04:	f9280000 			; <UNDEFINED> instruction: 0xf9280000
    7f08:	0100002d 	tsteq	r0, sp, lsr #32
    7f0c:	6514016b 	ldrvs	r0, [r4, #-363]	; 0xfffffe95
    7f10:	0500000c 	streq	r0, [r0, #-12]
    7f14:	00000003 	andeq	r0, r0, r3
    7f18:	2d222900 			; <UNDEFINED> instruction: 0x2d222900
    7f1c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    7f20:	0d880d01 	stceq	13, cr0, [r8, #4]
    7f24:	03050000 	movweq	r0, #20480	; 0x5000
    7f28:	00000000 	andeq	r0, r0, r0
    7f2c:	0e020102 	adfeqs	f0, f2, f2
    7f30:	2a000018 	bcs	7f98 <__core1_unwind_stub-0xff8068>
    7f34:	00002b18 	andeq	r2, r0, r8, lsl fp
    7f38:	1101a301 	tstne	r1, r1, lsl #6
    7f3c:	000000bd 	strheq	r0, [r0], -sp
    7f40:	00000000 	andeq	r0, r0, r0
    7f44:	000000ac 	andeq	r0, r0, ip, lsr #1
    7f48:	992b9c01 	stmdbls	fp!, {r0, sl, fp, ip, pc}
    7f4c:	0100002d 	tsteq	r0, sp, lsr #32
    7f50:	bd110186 	ldflts	f0, [r1, #-536]	; 0xfffffde8
    7f54:	00000000 	andeq	r0, r0, r0
    7f58:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    7f5c:	01000001 	tsteq	r0, r1
    7f60:	000dd09c 	muleq	sp, ip, r0
    7f64:	00732c00 	rsbseq	r2, r3, r0, lsl #24
    7f68:	15018801 	strne	r8, [r1, #-2049]	; 0xfffff7ff
    7f6c:	000000bd 	strheq	r0, [r0], -sp
    7f70:	00749102 	rsbseq	r9, r4, r2, lsl #2
    7f74:	002bf42b 	eoreq	pc, fp, fp, lsr #8
    7f78:	01780100 	cmneq	r8, r0, lsl #2
    7f7c:	0000bd11 	andeq	fp, r0, r1, lsl sp
    7f80:	00000000 	andeq	r0, r0, r0
    7f84:	00006c00 	andeq	r6, r0, r0, lsl #24
    7f88:	fa9c0100 	blx	fe708390 <__shm_end__+0xbe708390>
    7f8c:	2c00000d 	stccs	0, cr0, [r0], {13}
    7f90:	7b010073 	blvc	48164 <__core1_unwind_stub-0xfb7e9c>
    7f94:	00bd1501 	adcseq	r1, sp, r1, lsl #10
    7f98:	91020000 	mrsls	r0, (UNDEF: 2)
    7f9c:	1f2a0074 	svcne	0x002a0074
    7fa0:	0100002c 	tsteq	r0, ip, lsr #32
    7fa4:	bd11016f 	ldflts	f0, [r1, #-444]	; 0xfffffe44
    7fa8:	00000000 	andeq	r0, r0, r0
    7fac:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    7fb0:	01000000 	mrseq	r0, (UNDEF: 0)
    7fb4:	2be22d9c 	blcs	ff89362c <__shm_end__+0xbf89362c>
    7fb8:	4f010000 	svcmi	0x00010000
    7fbc:	0d880601 	stceq	6, cr0, [r8, #4]
    7fc0:	00000000 	andeq	r0, r0, r0
    7fc4:	00440000 	subeq	r0, r4, r0
    7fc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7fcc:	00000e3d 	andeq	r0, r0, sp, lsr lr
    7fd0:	002b5229 	eoreq	r5, fp, r9, lsr #4
    7fd4:	01520100 	cmpeq	r2, r0, lsl #2
    7fd8:	000c6518 	andeq	r6, ip, r8, lsl r5
    7fdc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7fe0:	2bb22e00 	blcs	fec937e8 <__shm_end__+0xbec937e8>
    7fe4:	47010000 	strmi	r0, [r1, -r0]
    7fe8:	00000601 	andeq	r0, r0, r1, lsl #12
    7fec:	006c0000 	rsbeq	r0, ip, r0
    7ff0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7ff4:	00000e63 	andeq	r0, r0, r3, ror #28
    7ff8:	0100732c 	tsteq	r0, ip, lsr #6
    7ffc:	670e0149 	strvs	r0, [lr, -r9, asr #2]
    8000:	02000000 	andeq	r0, r0, #0
    8004:	2e007491 	mcrcs	4, 0, r7, cr0, cr1, {4}
    8008:	00002c8e 	andeq	r2, r0, lr, lsl #25
    800c:	06013e01 	streq	r3, [r1], -r1, lsl #28
    8010:	00000000 	andeq	r0, r0, r0
    8014:	000000ec 	andeq	r0, r0, ip, ror #1
    8018:	0ec99c01 	cdpeq	12, 12, cr9, cr9, cr1, {0}
    801c:	3c2f0000 	stccc	0, cr0, [pc], #-0	; 8024 <__core1_unwind_stub-0xff7fdc>
    8020:	0100002b 	tsteq	r0, fp, lsr #32
    8024:	c921013e 	stmdbgt	r1!, {r1, r2, r3, r4, r5, r8}
    8028:	0200000e 	andeq	r0, r0, #14
    802c:	032f6c91 			; <UNDEFINED> instruction: 0x032f6c91
    8030:	0100002c 	tsteq	r0, ip, lsr #32
    8034:	c92f013e 	stmdbgt	pc!, {r1, r2, r3, r4, r5, r8}	; <UNPREDICTABLE>
    8038:	0200000e 	andeq	r0, r0, #14
    803c:	622f6891 	eorvs	r6, pc, #9502720	; 0x910000
    8040:	0100002e 	tsteq	r0, lr, lsr #32
    8044:	c940013e 	stmdbgt	r0, {r1, r2, r3, r4, r5, r8}^
    8048:	0200000e 	andeq	r0, r0, #14
    804c:	ee2f6491 	mcr	4, 1, r6, cr15, cr1, {4}
    8050:	0100002c 	tsteq	r0, ip, lsr #32
    8054:	c951013e 	ldmdbgt	r1, {r1, r2, r3, r4, r5, r8}^
    8058:	0200000e 	andeq	r0, r0, #14
    805c:	732c6091 			; <UNDEFINED> instruction: 0x732c6091
    8060:	01400100 	mrseq	r0, (UNDEF: 80)
    8064:	0000670e 	andeq	r6, r0, lr, lsl #14
    8068:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    806c:	88040e00 	stmdahi	r4, {r9, sl, fp}
    8070:	3000000d 	andcc	r0, r0, sp
    8074:	00002cc6 	andeq	r2, r0, r6, asr #25
    8078:	18013701 	stmdane	r1, {r0, r8, r9, sl, ip, sp}
    807c:	00000067 	andeq	r0, r0, r7, rrx
    8080:	00000000 	andeq	r0, r0, r0
    8084:	00000028 	andeq	r0, r0, r8, lsr #32
    8088:	0ef99c01 	cdpeq	12, 15, cr9, cr9, cr1, {0}
    808c:	732c0000 			; <UNDEFINED> instruction: 0x732c0000
    8090:	01390100 	teqeq	r9, r0, lsl #2
    8094:	0000670e 	andeq	r6, r0, lr, lsl #14
    8098:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    809c:	2e462b00 	vmlacs.f64	d18, d6, d0
    80a0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    80a4:	00bd1101 	adcseq	r1, sp, r1, lsl #2
    80a8:	00000000 	andeq	r0, r0, r0
    80ac:	00840000 	addeq	r0, r4, r0
    80b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    80b4:	00000f5d 	andeq	r0, r0, sp, asr pc
    80b8:	0019a22f 	andseq	sl, r9, pc, lsr #4
    80bc:	01190100 	tsteq	r9, r0, lsl #2
    80c0:	000d882c 	andeq	r8, sp, ip, lsr #16
    80c4:	6f910200 	svcvs	0x00910200
    80c8:	00000031 	andeq	r0, r0, r1, lsr r0
    80cc:	00002800 	andeq	r2, r0, r0, lsl #16
    80d0:	000f4200 	andeq	r4, pc, r0, lsl #4
    80d4:	2cf42900 			; <UNDEFINED> instruction: 0x2cf42900
    80d8:	20010000 	andcs	r0, r1, r0
    80dc:	00671201 	rsbeq	r1, r7, r1, lsl #4
    80e0:	91020000 	mrsls	r0, (UNDEF: 2)
    80e4:	00320070 	eorseq	r0, r2, r0, ror r0
    80e8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    80ec:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    80f0:	00002cf4 	strdeq	r2, [r0], -r4
    80f4:	12012a01 	andne	r2, r1, #4096	; 0x1000
    80f8:	00000067 	andeq	r0, r0, r7, rrx
    80fc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    8100:	2dc63300 	stclcs	3, cr3, [r6]
    8104:	07010000 	streq	r0, [r1, -r0]
    8108:	00001401 	andeq	r1, r0, r1, lsl #8
    810c:	00900000 	addseq	r0, r0, r0
    8110:	9c010000 	stcls	0, cr0, [r1], {-0}
    8114:	00000f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    8118:	0019a22f 	andseq	sl, r9, pc, lsr #4
    811c:	01070100 	mrseq	r0, (UNDEF: 23)
    8120:	000d882c 	andeq	r8, sp, ip, lsr #16
    8124:	6f910200 	svcvs	0x00910200
    8128:	002ccf29 	eoreq	ip, ip, r9, lsr #30
    812c:	01090100 	mrseq	r0, (UNDEF: 25)
    8130:	0000670e 	andeq	r6, r0, lr, lsl #14
    8134:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8138:	2dd93400 	cfldrdcs	mvd3, [r9]
    813c:	ea010000 	b	48144 <__core1_unwind_stub-0xfb7ebc>
    8140:	00000006 	andeq	r0, r0, r6
    8144:	0000dc00 	andeq	sp, r0, r0, lsl #24
    8148:	299c0100 	ldmibcs	ip, {r8}
    814c:	27000010 	smladcs	r0, r0, r0, r0
    8150:	00002d61 	andeq	r2, r0, r1, ror #26
    8154:	670eec01 	strvs	lr, [lr, -r1, lsl #24]
    8158:	02000000 	andeq	r0, r0, #0
    815c:	45276891 	strmi	r6, [r7, #-2193]!	; 0xfffff76f
    8160:	0100002d 	tsteq	r0, sp, lsr #32
    8164:	006716ec 	rsbeq	r1, r7, ip, ror #13
    8168:	91020000 	mrsls	r0, (UNDEF: 2)
    816c:	2d682760 	stclcs	7, cr2, [r8, #-384]!	; 0xfffffe80
    8170:	ec010000 	stc	0, cr0, [r1], {-0}
    8174:	0000671c 	andeq	r6, r0, ip, lsl r7
    8178:	5c910200 	lfmpl	f0, 4, [r1], {0}
    817c:	74657335 	strbtvc	r7, [r5], #-821	; 0xfffffccb
    8180:	22ec0100 	rsccs	r0, ip, #0, 2
    8184:	00000067 	andeq	r0, r0, r7, rrx
    8188:	35749102 	ldrbcc	r9, [r4, #-258]!	; 0xfffffefe
    818c:	00796177 	rsbseq	r6, r9, r7, ror r1
    8190:	6727ec01 	strvs	lr, [r7, -r1, lsl #24]!
    8194:	02000000 	andeq	r0, r0, #0
    8198:	7b277091 	blvc	9e43e4 <__core1_unwind_stub-0x61bc1c>
    819c:	0100002b 	tsteq	r0, fp, lsr #32
    81a0:	00672cec 	rsbeq	r2, r7, ip, ror #25
    81a4:	91020000 	mrsls	r0, (UNDEF: 2)
    81a8:	2e8b2764 	cdpcs	7, 8, cr2, cr11, cr4, {3}
    81ac:	ef010000 	svc	0x00010000
    81b0:	0000670e 	andeq	r6, r0, lr, lsl #14
    81b4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    81b8:	00055036 	andeq	r5, r5, r6, lsr r0
    81bc:	77733500 	ldrbvc	r3, [r3, -r0, lsl #10]!
    81c0:	16fd0100 	ldrbtne	r0, [sp], r0, lsl #2
    81c4:	00000067 	andeq	r0, r0, r7, rrx
    81c8:	00589102 	subseq	r9, r8, r2, lsl #2
    81cc:	2bc83400 	blcs	ff2151d4 <__shm_end__+0xbf2151d4>
    81d0:	e2010000 	and	r0, r1, #0
    81d4:	00000006 	andeq	r0, r0, r6
    81d8:	00003000 	andeq	r3, r0, r0
    81dc:	4f9c0100 	svcmi	0x009c0100
    81e0:	27000010 	smladcs	r0, r0, r0, r0
    81e4:	00002cf4 	strdeq	r2, [r0], -r4
    81e8:	670ee401 	strvs	lr, [lr, -r1, lsl #8]
    81ec:	02000000 	andeq	r0, r0, #0
    81f0:	37007491 			; <UNDEFINED> instruction: 0x37007491
    81f4:	00002d31 	andeq	r2, r0, r1, lsr sp
    81f8:	bd11d201 	lfmlt	f5, 1, [r1, #-4]
    81fc:	ac000000 	stcge	0, cr0, [r0], {-0}
    8200:	3c01004f 	stccc	0, cr0, [r1], {79}	; 0x4f
    8204:	01000000 	mrseq	r0, (UNDEF: 0)
    8208:	0010869c 	mulseq	r0, ip, r6
    820c:	74743500 	ldrbtvc	r3, [r4], #-1280	; 0xfffffb00
    8210:	d7010062 	strle	r0, [r1, -r2, rrx]
    8214:	0010860f 	andseq	r8, r0, pc, lsl #12
    8218:	70910200 	addsvc	r0, r1, r0, lsl #4
    821c:	01007335 	tsteq	r0, r5, lsr r3
    8220:	008609d8 	ldrdeq	r0, [r6], r8
    8224:	91020000 	mrsls	r0, (UNDEF: 2)
    8228:	040e0074 	streq	r0, [lr], #-116	; 0xffffff8c
    822c:	00000067 	andeq	r0, r0, r7, rrx
    8230:	002db238 	eoreq	fp, sp, r8, lsr r2
    8234:	11bb0100 			; <UNDEFINED> instruction: 0x11bb0100
    8238:	000000bd 	strheq	r0, [r0], -sp
    823c:	00000000 	andeq	r0, r0, r0
    8240:	0000005c 	andeq	r0, r0, ip, asr r0
    8244:	10c29c01 	sbcne	r9, r2, r1, lsl #24
    8248:	42240000 	eormi	r0, r4, #0
    824c:	01000029 	tsteq	r0, r9, lsr #32
    8250:	02cf0ebd 	sbceq	r0, pc, #3024	; 0xbd0
    8254:	cf270000 	svcgt	0x00270000
    8258:	0100002c 	tsteq	r0, ip, lsr #32
    825c:	00670fc7 	rsbeq	r0, r7, r7, asr #31
    8260:	91020000 	mrsls	r0, (UNDEF: 2)
    8264:	7f390074 	svcvc	0x00390074
    8268:	0100002d 	tsteq	r0, sp, lsr #32
    826c:	00bd1870 	adcseq	r1, sp, r0, ror r8
    8270:	4e940000 	cdpmi	0, 9, cr0, cr4, cr0, {0}
    8274:	01180100 	tsteq	r8, r0, lsl #2
    8278:	9c010000 	stcls	0, cr0, [r1], {-0}
    827c:	00001138 	andeq	r1, r0, r8, lsr r1
    8280:	002e233a 	eoreq	r2, lr, sl, lsr r3
    8284:	3d700100 	ldfcce	f0, [r0, #-0]
    8288:	00001138 	andeq	r1, r0, r8, lsr r1
    828c:	7f949103 	svcvc	0x00949103
    8290:	01007335 	tsteq	r0, r5, lsr r3
    8294:	00bd1572 	adcseq	r1, sp, r2, ror r5
    8298:	91020000 	mrsls	r0, (UNDEF: 2)
    829c:	1e642774 	mcrne	7, 3, r2, cr4, cr4, {3}
    82a0:	77010000 	strvc	r0, [r1, -r0]
    82a4:	00113e1a 	andseq	r3, r1, sl, lsl lr
    82a8:	9c910300 	ldcls	3, cr0, [r1], {0}
    82ac:	2da5277f 	stccs	7, cr2, [r5, #508]!	; 0x1fc
    82b0:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    82b4:	0000a50c 	andeq	sl, r0, ip, lsl #10
    82b8:	70910200 	addsvc	r0, r1, r0, lsl #4
    82bc:	002e1e27 	eoreq	r1, lr, r7, lsr #28
    82c0:	0ca90100 	stfeqs	f0, [r9]
    82c4:	000000a5 	andeq	r0, r0, r5, lsr #1
    82c8:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    82cc:	0000246d 	andeq	r2, r0, sp, ror #8
    82d0:	860fac01 	strhi	sl, [pc], -r1, lsl #24
    82d4:	03000010 	movweq	r0, #16
    82d8:	007f9891 			; <UNDEFINED> instruction: 0x007f9891
    82dc:	1086040e 	addne	r0, r6, lr, lsl #8
    82e0:	bc110000 	ldclt	0, cr0, [r1], {-0}
    82e4:	4e000002 	cdpmi	0, 0, cr0, cr0, cr2, {0}
    82e8:	12000011 	andne	r0, r0, #17
    82ec:	0000008d 	andeq	r0, r0, sp, lsl #1
    82f0:	a43b0003 	ldrtge	r0, [fp], #-3
    82f4:	0100002b 	tsteq	r0, fp, lsr #32
    82f8:	02ba0e5e 	adcseq	r0, sl, #1504	; 0x5e0
    82fc:	4dc40000 	stclmi	0, cr0, [r4]
    8300:	00d00100 	sbcseq	r0, r0, r0, lsl #2
    8304:	9c010000 	stcls	0, cr0, [r1], {-0}
    8308:	000011c3 	andeq	r1, r0, r3, asr #3
    830c:	00304f3a 	eorseq	r4, r0, sl, lsr pc
    8310:	2f5e0100 	svccs	0x005e0100
    8314:	00000094 	muleq	r0, r4, r0
    8318:	3a649102 	bcc	192c728 <__end__+0x910708>
    831c:	00002c34 	andeq	r2, r0, r4, lsr ip
    8320:	ba3b5e01 	blt	edfb2c <__core1_unwind_stub-0x1204d4>
    8324:	02000002 	andeq	r0, r0, #2
    8328:	41276091 			; <UNDEFINED> instruction: 0x41276091
    832c:	0100002e 	tsteq	r0, lr, lsr #32
    8330:	11c31160 	bicne	r1, r3, r0, ror #2
    8334:	91020000 	mrsls	r0, (UNDEF: 2)
    8338:	21b72774 			; <UNDEFINED> instruction: 0x21b72774
    833c:	64010000 	strvs	r0, [r1], #-0
    8340:	0000b112 	andeq	fp, r0, r2, lsl r1
    8344:	70910200 	addsvc	r0, r1, r0, lsl #4
    8348:	66666f35 	uqasxvs	r6, r6, r5
    834c:	0c650100 	stfeqe	f0, [r5], #-0
    8350:	000000a5 	andeq	r0, r0, r5, lsr #1
    8354:	356c9102 	strbcc	r9, [ip, #-258]!	; 0xfffffefe
    8358:	00727470 	rsbseq	r7, r2, r0, ror r4
    835c:	ba0b6901 	blt	2e2768 <__core1_unwind_stub-0xd1d898>
    8360:	02000002 	andeq	r0, r0, #2
    8364:	0e006891 	mcreq	8, 0, r6, cr0, cr1, {4}
    8368:	000c0f04 	andeq	r0, ip, r4, lsl #30
    836c:	2d4a3400 	cfstrdcs	mvd3, [sl, #-0]
    8370:	30010000 	andcc	r0, r1, r0
    8374:	004d3806 	subeq	r3, sp, r6, lsl #16
    8378:	00008c01 	andeq	r8, r0, r1, lsl #24
    837c:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    8380:	27000012 	smladcs	r0, r2, r0, r0
    8384:	00002ce8 	andeq	r2, r0, r8, ror #25
    8388:	670e3201 	strvs	r3, [lr, -r1, lsl #4]
    838c:	02000000 	andeq	r0, r0, #0
    8390:	5c277491 	cfstrspl	mvf7, [r7], #-580	; 0xfffffdbc
    8394:	0100002e 	tsteq	r0, lr, lsr #32
    8398:	00670e42 	rsbeq	r0, r7, r2, asr #28
    839c:	91020000 	mrsls	r0, (UNDEF: 2)
    83a0:	4d803270 	sfmmi	f3, 4, [r0, #448]	; 0x1c0
    83a4:	00380100 	eorseq	r0, r8, r0, lsl #2
    83a8:	00270000 	eoreq	r0, r7, r0
    83ac:	0100002b 	tsteq	r0, fp, lsr #32
    83b0:	0c651945 			; <UNDEFINED> instruction: 0x0c651945
    83b4:	91020000 	mrsls	r0, (UNDEF: 2)
    83b8:	6176356c 	cmnvs	r6, ip, ror #10
    83bc:	4601006c 	strmi	r0, [r1], -ip, rrx
    83c0:	00006712 	andeq	r6, r0, r2, lsl r7
    83c4:	68910200 	ldmvs	r1, {r9}
    83c8:	253c0000 	ldrcs	r0, [ip, #-0]!
    83cc:	0100002b 	tsteq	r0, fp, lsr #32
    83d0:	4ce4141f 	cfstrdmi	mvd1, [r4], #124	; 0x7c
    83d4:	00540100 	subseq	r0, r4, r0, lsl #2
    83d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    83dc:	0000124c 	andeq	r1, r0, ip, asr #4
    83e0:	002ccf27 	eoreq	ip, ip, r7, lsr #30
    83e4:	0e220100 	sufeqs	f0, f2, f0
    83e8:	00000067 	andeq	r0, r0, r7, rrx
    83ec:	00749102 	rsbseq	r9, r4, r2, lsl #2
    83f0:	6273693d 	rsbsvs	r6, r3, #999424	; 0xf4000
    83f4:	141b0100 	ldrne	r0, [fp], #-256	; 0xffffff00
    83f8:	01004cc8 	smlabteq	r0, r8, ip, r4
    83fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    8400:	643d9c01 	ldrtvs	r9, [sp], #-3073	; 0xfffff3ff
    8404:	01006273 	tsteq	r0, r3, ror r2
    8408:	4cac141a 	cfstrsmi	mvf1, [ip], #104	; 0x68
    840c:	001c0100 	andseq	r0, ip, r0, lsl #2
    8410:	9c010000 	stcls	0, cr0, [r1], {-0}
    8414:	000fab00 	andeq	sl, pc, r0, lsl #22
    8418:	9b000400 	blls	9420 <__core1_unwind_stub-0xff6be0>
    841c:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    8420:	00003a01 	andeq	r3, r0, r1, lsl #20
    8424:	2fcc0c00 	svccs	0x00cc0c00
    8428:	0bd00000 	bleq	ff408430 <__shm_end__+0xbf408430>
    842c:	06100000 	ldreq	r0, [r0], -r0
    8430:	00000000 	andeq	r0, r0, r0
    8434:	358b0000 	strcc	r0, [fp]
    8438:	01020000 	mrseq	r0, (UNDEF: 2)
    843c:	00040206 	andeq	r0, r4, r6, lsl #4
    8440:	08010200 	stmdaeq	r1, {r9}
    8444:	00000400 	andeq	r0, r0, r0, lsl #8
    8448:	61050202 	tstvs	r5, r2, lsl #4
    844c:	0200000d 	andeq	r0, r0, #13
    8450:	0e9e0702 	cdpeq	7, 9, cr0, cr14, cr2, {0}
    8454:	c0030000 	andgt	r0, r3, r0
    8458:	0200002e 	andeq	r0, r0, #46	; 0x2e
    845c:	004d184d 	subeq	r1, sp, sp, asr #16
    8460:	04020000 	streq	r0, [r2], #-0
    8464:	00080a05 	andeq	r0, r8, r5, lsl #20
    8468:	30410300 	subcc	r0, r1, r0, lsl #6
    846c:	4f020000 	svcmi	0x00020000
    8470:	00006019 	andeq	r6, r0, r9, lsl r0
    8474:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8478:	00000b40 	andeq	r0, r0, r0, asr #22
    847c:	05050802 	streq	r0, [r5, #-2050]	; 0xfffff7fe
    8480:	02000008 	andeq	r0, r0, #8
    8484:	0b3b0708 	bleq	eca0ac <__core1_unwind_stub-0x135f54>
    8488:	dd030000 	stcle	0, cr0, [r3, #-0]
    848c:	0200002f 	andeq	r0, r0, #47	; 0x2f
    8490:	00671ec8 	rsbeq	r1, r7, r8, asr #29
    8494:	04040000 	streq	r0, [r4], #-0
    8498:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    849c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    84a0:	00000b45 	andeq	r0, r0, r5, asr #22
    84a4:	002ffa03 	eoreq	pc, pc, r3, lsl #20
    84a8:	17d10300 	ldrbne	r0, [r1, r0, lsl #6]
    84ac:	00000088 	andeq	r0, r0, r8, lsl #1
    84b0:	000c8805 	andeq	r8, ip, r5, lsl #16
    84b4:	015e0300 	cmpeq	lr, r0, lsl #6
    84b8:	00008817 	andeq	r8, r0, r7, lsl r8
    84bc:	30710300 	rsbscc	r0, r1, r0, lsl #6
    84c0:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    84c4:	00004d0e 	andeq	r4, r0, lr, lsl #26
    84c8:	2ff50300 	svccs	0x00f50300
    84cc:	22040000 	andcs	r0, r4, #0
    84d0:	00004d0e 	andeq	r4, r0, lr, lsl #26
    84d4:	30550300 	subscc	r0, r5, r0, lsl #6
    84d8:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    84dc:	00004d0e 	andeq	r4, r0, lr, lsl #26
    84e0:	2fa60300 	svccs	0x00a60300
    84e4:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    84e8:	0000330f 	andeq	r3, r0, pc, lsl #6
    84ec:	30060300 	andcc	r0, r6, r0, lsl #6
    84f0:	3c040000 	stccc	0, cr0, [r4], {-0}
    84f4:	00003a18 	andeq	r3, r0, r8, lsl sl
    84f8:	2fc40300 	svccs	0x00c40300
    84fc:	3f040000 	svccc	0x00040000
    8500:	00003a18 	andeq	r3, r0, r8, lsl sl
    8504:	2ef00300 	cdpcs	3, 15, cr0, cr0, cr0, {0}
    8508:	4b040000 	blmi	108510 <__core1_unwind_stub-0xef7af0>
    850c:	00003a18 	andeq	r3, r0, r8, lsl sl
    8510:	2f240300 	svccs	0x00240300
    8514:	5a040000 	bpl	10851c <__core1_unwind_stub-0xef7ae4>
    8518:	00005414 	andeq	r5, r0, r4, lsl r4
    851c:	30540300 	subscc	r0, r4, r0, lsl #6
    8520:	66040000 	strvs	r0, [r4], -r0
    8524:	0000c010 	andeq	ip, r0, r0, lsl r0
    8528:	0add0300 	beq	ff749130 <__shm_end__+0xbf749130>
    852c:	74040000 	strvc	r0, [r4], #-0
    8530:	00004d0e 	andeq	r4, r0, lr, lsl #26
    8534:	04040600 	streq	r0, [r4], #-1536	; 0xfffffa00
    8538:	014203a5 	smlaltbeq	r0, r2, r5, r3
    853c:	3a070000 	bcc	1c8544 <__core1_unwind_stub-0xe37abc>
    8540:	04000002 	streq	r0, [r0], #-2
    8544:	009b0ca7 	addseq	r0, fp, r7, lsr #25
    8548:	e5070000 	str	r0, [r7, #-0]
    854c:	0400000a 	streq	r0, [r0], #-10
    8550:	014213a8 	smlaltbeq	r1, r2, r8, r3
    8554:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8558:	0000002c 	andeq	r0, r0, ip, lsr #32
    855c:	00000152 	andeq	r0, r0, r2, asr r1
    8560:	00008809 	andeq	r8, r0, r9, lsl #16
    8564:	0a000300 	beq	916c <__core1_unwind_stub-0xff6e94>
    8568:	09a20408 	stmibeq	r2!, {r3, sl}
    856c:	00000176 	andeq	r0, r0, r6, ror r1
    8570:	000a690b 	andeq	r6, sl, fp, lsl #18
    8574:	07a40400 	streq	r0, [r4, r0, lsl #8]!
    8578:	00000081 	andeq	r0, r0, r1, lsl #1
    857c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    8580:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    8584:	00012005 	andeq	r2, r1, r5
    8588:	03000400 	movweq	r0, #1024	; 0x400
    858c:	00000c20 	andeq	r0, r0, r0, lsr #24
    8590:	5203aa04 	andpl	sl, r3, #4, 20	; 0x4000
    8594:	0c000001 	stceq	0, cr0, [r0], {1}
    8598:	2eca0304 	cdpcs	3, 12, cr0, cr10, cr4, {0}
    859c:	d1040000 	mrsle	r0, (UNDEF: 4)
    85a0:	00003a18 	andeq	r3, r0, r8, lsl sl
    85a4:	2ec20300 	cdpcs	3, 12, cr0, cr2, cr0, {0}
    85a8:	2c050000 	stccs	0, cr0, [r5], {-0}
    85ac:	00004113 	andeq	r4, r0, r3, lsl r1
    85b0:	30430300 	subcc	r0, r3, r0, lsl #6
    85b4:	30050000 	andcc	r0, r5, r0
    85b8:	00005414 	andeq	r5, r0, r4, lsl r4
    85bc:	2f870300 	svccs	0x00870300
    85c0:	2a060000 	bcs	1885c8 <__core1_unwind_stub-0xe77a38>
    85c4:	00007512 	andeq	r7, r0, r2, lsl r5
    85c8:	2f6f0d00 	svccs	0x006f0d00
    85cc:	07100000 	ldreq	r0, [r0, -r0]
    85d0:	01dc082f 	bicseq	r0, ip, pc, lsr #16
    85d4:	330b0000 	movwcc	r0, #45056	; 0xb000
    85d8:	07000030 	smladxeq	r0, r0, r0, r0
    85dc:	01a80930 			; <UNDEFINED> instruction: 0x01a80930
    85e0:	0b000000 	bleq	85e8 <__core1_unwind_stub-0xff7a18>
    85e4:	00002f1c 	andeq	r2, r0, ip, lsl pc
    85e8:	4d073107 	stfmis	f3, [r7, #-28]	; 0xffffffe4
    85ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    85f0:	30730300 	rsbscc	r0, r3, r0, lsl #6
    85f4:	61080000 	mrsvs	r0, (UNDEF: 8)
    85f8:	0000a814 	andeq	sl, r0, r4, lsl r8
    85fc:	2ff70300 	svccs	0x00f70300
    8600:	66080000 	strvs	r0, [r8], -r0
    8604:	0000b415 	andeq	fp, r0, r5, lsl r4
    8608:	fa040e00 	blx	10be10 <__core1_unwind_stub-0xef41f0>
    860c:	02000001 	andeq	r0, r0, #1
    8610:	04090801 	streq	r0, [r9], #-2049	; 0xfffff7ff
    8614:	fa0f0000 	blx	3c861c <__core1_unwind_stub-0xc379e4>
    8618:	03000001 	movweq	r0, #1
    861c:	00002ef2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    8620:	f0128b08 			; <UNDEFINED> instruction: 0xf0128b08
    8624:	03000000 	movweq	r0, #0
    8628:	00003056 	andeq	r3, r0, r6, asr r0
    862c:	08129d08 	ldmdaeq	r2, {r3, r8, sl, fp, ip, pc}
    8630:	03000001 	movweq	r0, #1
    8634:	00002fa8 	andeq	r2, r0, r8, lsr #31
    8638:	cc12a108 	ldfgtd	f2, [r2], {8}
    863c:	03000000 	movweq	r0, #0
    8640:	00003008 	andeq	r3, r0, r8
    8644:	d812a508 	ldmdale	r2, {r3, r8, sl, sp, pc}
    8648:	03000000 	movweq	r0, #0
    864c:	00002fc6 	andeq	r2, r0, r6, asr #31
    8650:	e412a908 	ldr	sl, [r2], #-2312	; 0xfffff6f8
    8654:	03000000 	movweq	r0, #0
    8658:	00002f26 	andeq	r2, r0, r6, lsr #30
    865c:	fc12bd08 	ldc2	13, cr11, [r2], {8}
    8660:	03000000 	movweq	r0, #0
    8664:	00002ecc 	andeq	r2, r0, ip, asr #29
    8668:	8413c208 	ldrhi	ip, [r3], #-520	; 0xfffffdf8
    866c:	02000001 	andeq	r0, r0, #1
    8670:	0a9d0408 	beq	fe749698 <__shm_end__+0xbe749698>
    8674:	7f100000 	svcvc	0x00100000
    8678:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
    867c:	026d0f10 	rsbeq	r0, sp, #16, 30	; 0x40
    8680:	040e0000 	streq	r0, [lr], #-0
    8684:	000001f4 	strdeq	r0, [r0], -r4
    8688:	000dbf10 	andeq	fp, sp, r0, lsl pc
    868c:	0efc0900 	vmoveq.f16	s1, #192	; 0xbe000000 -0.125	; <UNPREDICTABLE>
    8690:	000001f4 	strdeq	r0, [r0], -r4
    8694:	002fb610 	eoreq	fp, pc, r0, lsl r6	; <UNPREDICTABLE>
    8698:	0cfd0900 			; <UNDEFINED> instruction: 0x0cfd0900
    869c:	00000081 	andeq	r0, r0, r1, lsl #1
    86a0:	002f0410 	eoreq	r0, pc, r0, lsl r4	; <UNPREDICTABLE>
    86a4:	14fd0900 	ldrbtne	r0, [sp], #2304	; 0x900
    86a8:	00000081 	andeq	r0, r0, r1, lsl #1
    86ac:	002eae10 	eoreq	sl, lr, r0, lsl lr
    86b0:	1cfd0900 			; <UNDEFINED> instruction: 0x1cfd0900
    86b4:	00000081 	andeq	r0, r0, r1, lsl #1
    86b8:	002f2d10 	eoreq	r2, pc, r0, lsl sp	; <UNPREDICTABLE>
    86bc:	0cff0900 			; <UNDEFINED> instruction: 0x0cff0900
    86c0:	00000081 	andeq	r0, r0, r1, lsl #1
    86c4:	000e4903 	andeq	r4, lr, r3, lsl #18
    86c8:	19160a00 	ldmdbne	r6, {r9, fp}
    86cc:	00000060 	andeq	r0, r0, r0, rrx
    86d0:	0006b303 	andeq	fp, r6, r3, lsl #6
    86d4:	0d0c0b00 	vstreq	d0, [ip, #-0]
    86d8:	00000081 	andeq	r0, r0, r1, lsl #1
    86dc:	000bc703 	andeq	ip, fp, r3, lsl #14
    86e0:	1b230a00 	blne	8caee8 <__core1_unwind_stub-0x735118>
    86e4:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    86e8:	0007080d 	andeq	r0, r7, sp, lsl #16
    86ec:	340a1800 	strcc	r1, [sl], #-2048	; 0xfffff800
    86f0:	00032d08 	andeq	r2, r3, r8, lsl #26
    86f4:	0a340b00 	beq	d0b2fc <__core1_unwind_stub-0x2f4d04>
    86f8:	360a0000 	strcc	r0, [sl], -r0
    86fc:	00032d13 	andeq	r2, r3, r3, lsl sp
    8700:	5f110000 	svcpl	0x00110000
    8704:	370a006b 	strcc	r0, [sl, -fp, rrx]
    8708:	00008107 	andeq	r8, r0, r7, lsl #2
    870c:	610b0400 	tstvs	fp, r0, lsl #8
    8710:	0a000007 	beq	8734 <__core1_unwind_stub-0xff78cc>
    8714:	00810b37 	addeq	r0, r1, r7, lsr fp
    8718:	0b080000 	bleq	208720 <__core1_unwind_stub-0xdf78e0>
    871c:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    8720:	8114370a 	tsthi	r4, sl, lsl #14
    8724:	0c000000 	stceq	0, cr0, [r0], {-0}
    8728:	0006010b 	andeq	r0, r6, fp, lsl #2
    872c:	1b370a00 	blne	dcaf34 <__core1_unwind_stub-0x2350cc>
    8730:	00000081 	andeq	r0, r0, r1, lsl #1
    8734:	785f1110 	ldmdavc	pc, {r4, r8, ip}^	; <UNPREDICTABLE>
    8738:	0b380a00 	bleq	e0af40 <__core1_unwind_stub-0x1f50c0>
    873c:	00000333 	andeq	r0, r0, r3, lsr r3
    8740:	040e0014 	streq	r0, [lr], #-20	; 0xffffffec
    8744:	000002d3 	ldrdeq	r0, [r0], -r3
    8748:	0002af08 	andeq	sl, r2, r8, lsl #30
    874c:	00034300 	andeq	r4, r3, r0, lsl #6
    8750:	00880900 	addeq	r0, r8, r0, lsl #18
    8754:	00000000 	andeq	r0, r0, r0
    8758:	0001400d 	andeq	r4, r1, sp
    875c:	3c0a2400 	cfstrscc	mvf2, [sl], {-0}
    8760:	0003c608 	andeq	ip, r3, r8, lsl #12
    8764:	015c0b00 	cmpeq	ip, r0, lsl #22
    8768:	3e0a0000 	cdpcc	0, 0, cr0, cr10, cr0, {0}
    876c:	00008109 	andeq	r8, r0, r9, lsl #2
    8770:	8f0b0000 	svchi	0x000b0000
    8774:	0a00000f 	beq	87b8 <__core1_unwind_stub-0xff7848>
    8778:	0081093f 	addeq	r0, r1, pc, lsr r9
    877c:	0b040000 	bleq	108784 <__core1_unwind_stub-0xef787c>
    8780:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    8784:	8109400a 	tsthi	r9, sl
    8788:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    878c:	0009fb0b 	andeq	pc, r9, fp, lsl #22
    8790:	09410a00 	stmdbeq	r1, {r9, fp}^
    8794:	00000081 	andeq	r0, r0, r1, lsl #1
    8798:	038c0b0c 	orreq	r0, ip, #12, 22	; 0x3000
    879c:	420a0000 	andmi	r0, sl, #0
    87a0:	00008109 	andeq	r8, r0, r9, lsl #2
    87a4:	e40b1000 	str	r1, [fp], #-0
    87a8:	0a00000d 	beq	87e4 <__core1_unwind_stub-0xff781c>
    87ac:	00810943 	addeq	r0, r1, r3, asr #18
    87b0:	0b140000 	bleq	5087b8 <__core1_unwind_stub-0xaf7848>
    87b4:	00000a7b 	andeq	r0, r0, fp, ror sl
    87b8:	8109440a 	tsthi	r9, sl, lsl #8
    87bc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    87c0:	000aa90b 	andeq	sl, sl, fp, lsl #18
    87c4:	09450a00 	stmdbeq	r5, {r9, fp}^
    87c8:	00000081 	andeq	r0, r0, r1, lsl #1
    87cc:	0f550b1c 	svceq	0x00550b1c
    87d0:	460a0000 	strmi	r0, [sl], -r0
    87d4:	00008109 	andeq	r8, r0, r9, lsl #2
    87d8:	12002000 	andne	r2, r0, #0
    87dc:	00000263 	andeq	r0, r0, r3, ror #4
    87e0:	4f0a0108 	svcmi	0x000a0108
    87e4:	00040b08 	andeq	r0, r4, r8, lsl #22
    87e8:	0f410b00 	svceq	0x00410b00
    87ec:	500a0000 	andpl	r0, sl, r0
    87f0:	00040b0a 	andeq	r0, r4, sl, lsl #22
    87f4:	660b0000 	strvs	r0, [fp], -r0
    87f8:	0a00000b 	beq	882c <__core1_unwind_stub-0xff77d4>
    87fc:	040b0951 	streq	r0, [fp], #-2385	; 0xfffff6af
    8800:	13800000 	orrne	r0, r0, #0
    8804:	00000dd4 	ldrdeq	r0, [r0], -r4
    8808:	af0a530a 	svcge	0x000a530a
    880c:	00000002 	andeq	r0, r0, r2
    8810:	0e101301 	cdpeq	3, 1, cr1, cr0, cr1, {0}
    8814:	560a0000 	strpl	r0, [sl], -r0
    8818:	0002af0a 	andeq	sl, r2, sl, lsl #30
    881c:	00010400 	andeq	r0, r1, r0, lsl #8
    8820:	00018208 	andeq	r8, r1, r8, lsl #4
    8824:	00041b00 	andeq	r1, r4, r0, lsl #22
    8828:	00880900 	addeq	r0, r8, r0, lsl #18
    882c:	001f0000 	andseq	r0, pc, r0
    8830:	000a5412 	andeq	r5, sl, r2, lsl r4
    8834:	0a019000 	beq	6c83c <__core1_unwind_stub-0xf937c4>
    8838:	045e0862 	ldrbeq	r0, [lr], #-2146	; 0xfffff79e
    883c:	340b0000 	strcc	r0, [fp], #-0
    8840:	0a00000a 	beq	8870 <__core1_unwind_stub-0xff7790>
    8844:	045e1263 	ldrbeq	r1, [lr], #-611	; 0xfffffd9d
    8848:	0b000000 	bleq	8850 <__core1_unwind_stub-0xff77b0>
    884c:	00000e04 	andeq	r0, r0, r4, lsl #28
    8850:	8106640a 	tsthi	r6, sl, lsl #8
    8854:	04000000 	streq	r0, [r0], #-0
    8858:	0004930b 	andeq	r9, r4, fp, lsl #6
    885c:	09660a00 	stmdbeq	r6!, {r9, fp}^
    8860:	00000464 	andeq	r0, r0, r4, ror #8
    8864:	02630b08 	rsbeq	r0, r3, #8, 22	; 0x2000
    8868:	670a0000 	strvs	r0, [sl, -r0]
    886c:	0003c61e 	andeq	ip, r3, lr, lsl r6
    8870:	0e008800 	cdpeq	8, 0, cr8, cr0, cr0, {0}
    8874:	00041b04 	andeq	r1, r4, r4, lsl #22
    8878:	04740800 	ldrbteq	r0, [r4], #-2048	; 0xfffff800
    887c:	04740000 	ldrbteq	r0, [r4], #-0
    8880:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    8884:	1f000000 	svcne	0x00000000
    8888:	7a040e00 	bvc	10c090 <__core1_unwind_stub-0xef3f70>
    888c:	14000004 	strne	r0, [r0], #-4
    8890:	000e090d 	andeq	r0, lr, sp, lsl #18
    8894:	7a0a0800 	bvc	28a89c <__core1_unwind_stub-0xd75764>
    8898:	0004a308 	andeq	sl, r4, r8, lsl #6
    889c:	0ba50b00 	bleq	fe94b4a4 <__shm_end__+0xbe94b4a4>
    88a0:	7b0a0000 	blvc	2888a8 <__core1_unwind_stub-0xd77758>
    88a4:	0004a311 	andeq	sl, r4, r1, lsl r3
    88a8:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
    88ac:	0a000030 	beq	8974 <__core1_unwind_stub-0xff768c>
    88b0:	0081067c 	addeq	r0, r1, ip, ror r6
    88b4:	00040000 	andeq	r0, r4, r0
    88b8:	002c040e 	eoreq	r0, ip, lr, lsl #8
    88bc:	810d0000 	mrshi	r0, (UNDEF: 13)
    88c0:	68000006 	stmdavs	r0, {r1, r2}
    88c4:	ec08ba0a 			; <UNDEFINED> instruction: 0xec08ba0a
    88c8:	11000005 	tstne	r0, r5
    88cc:	0a00705f 	beq	24a50 <__core1_unwind_stub-0xfdb5b0>
    88d0:	04a312bb 	strteq	r1, [r3], #699	; 0x2bb
    88d4:	11000000 	mrsne	r0, (UNDEF: 0)
    88d8:	0a00725f 	beq	2525c <__core1_unwind_stub-0xfdada4>
    88dc:	008107bc 			; <UNDEFINED> instruction: 0x008107bc
    88e0:	11040000 	mrsne	r0, (UNDEF: 4)
    88e4:	0a00775f 	beq	26668 <__core1_unwind_stub-0xfd9998>
    88e8:	008107bd 			; <UNDEFINED> instruction: 0x008107bd
    88ec:	0b080000 	bleq	2088f4 <__core1_unwind_stub-0xdf770c>
    88f0:	00000a3a 	andeq	r0, r0, sl, lsr sl
    88f4:	3309be0a 	movwcc	fp, #40458	; 0x9e0a
    88f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    88fc:	00025d0b 	andeq	r5, r2, fp, lsl #26
    8900:	09bf0a00 	ldmibeq	pc!, {r9, fp}	; <UNPREDICTABLE>
    8904:	00000033 	andeq	r0, r0, r3, lsr r0
    8908:	625f110e 	subsvs	r1, pc, #-2147483645	; 0x80000003
    890c:	c00a0066 	andgt	r0, sl, r6, rrx
    8910:	00047b11 	andeq	r7, r4, r1, lsl fp
    8914:	f60b1000 			; <UNDEFINED> instruction: 0xf60b1000
    8918:	0a00000d 	beq	8954 <__core1_unwind_stub-0xff76ac>
    891c:	008107c1 	addeq	r0, r1, r1, asr #15
    8920:	0b180000 	bleq	608928 <__core1_unwind_stub-0x9f76d8>
    8924:	000005e4 	andeq	r0, r0, r4, ror #11
    8928:	820ac80a 	andhi	ip, sl, #655360	; 0xa0000
    892c:	1c000001 	stcne	0, cr0, [r0], {1}
    8930:	001c390b 	andseq	r3, ip, fp, lsl #18
    8934:	1dca0a00 	vstrne	s1, [sl]
    8938:	0000075e 	andeq	r0, r0, lr, asr r7
    893c:	117d0b20 	cmnne	sp, r0, lsr #22
    8940:	cc0a0000 	stcgt	0, cr0, [sl], {-0}
    8944:	00078d1d 	andeq	r8, r7, sp, lsl sp
    8948:	c60b2400 	strgt	r2, [fp], -r0, lsl #8
    894c:	0a00000a 	beq	897c <__core1_unwind_stub-0xff7684>
    8950:	07b10dcf 	ldreq	r0, [r1, pc, asr #27]!
    8954:	0b280000 	bleq	a0895c <__core1_unwind_stub-0x5f76a4>
    8958:	00002b1e 	andeq	r2, r0, lr, lsl fp
    895c:	cb09d00a 	blgt	27c98c <__core1_unwind_stub-0xd83674>
    8960:	2c000007 	stccs	0, cr0, [r0], {7}
    8964:	62755f11 	rsbsvs	r5, r5, #17, 30	; 0x44
    8968:	11d30a00 	bicsne	r0, r3, r0, lsl #20
    896c:	0000047b 	andeq	r0, r0, fp, ror r4
    8970:	755f1130 	ldrbvc	r1, [pc, #-304]	; 8848 <__core1_unwind_stub-0xff77b8>
    8974:	d40a0070 	strle	r0, [sl], #-112	; 0xffffff90
    8978:	0004a312 	andeq	sl, r4, r2, lsl r3
    897c:	5f113800 	svcpl	0x00113800
    8980:	0a007275 	beq	2535c <__core1_unwind_stub-0xfdaca4>
    8984:	008107d5 	ldrdeq	r0, [r1], r5
    8988:	0b3c0000 	bleq	f08990 <__core1_unwind_stub-0xf7670>
    898c:	00000a0a 	andeq	r0, r0, sl, lsl #20
    8990:	d111d80a 	tstle	r1, sl, lsl #16
    8994:	40000007 	andmi	r0, r0, r7
    8998:	0001560b 	andeq	r5, r1, fp, lsl #12
    899c:	11d90a00 	bicsne	r0, r9, r0, lsl #20
    89a0:	000007e1 	andeq	r0, r0, r1, ror #15
    89a4:	6c5f1143 	ldfvse	f1, [pc], {67}	; 0x43
    89a8:	dc0a0062 	stcle	0, cr0, [sl], {98}	; 0x62
    89ac:	00047b11 	andeq	r7, r4, r1, lsl fp
    89b0:	b70b4400 	strlt	r4, [fp, -r0, lsl #8]
    89b4:	0a00002e 	beq	8a74 <__core1_unwind_stub-0xff758c>
    89b8:	008107df 	ldrdeq	r0, [r1], pc	; <UNPREDICTABLE>
    89bc:	0b4c0000 	bleq	13089c4 <__end__+0x2ec9a4>
    89c0:	00000627 	andeq	r0, r0, r7, lsr #12
    89c4:	c00ae00a 	andgt	lr, sl, sl
    89c8:	50000000 	andpl	r0, r0, r0
    89cc:	002b120b 	eoreq	r1, fp, fp, lsl #4
    89d0:	12e30a00 	rscne	r0, r3, #0, 20
    89d4:	0000060a 	andeq	r0, r0, sl, lsl #12
    89d8:	01ab0b54 			; <UNDEFINED> instruction: 0x01ab0b54
    89dc:	e70a0000 	str	r0, [sl, -r0]
    89e0:	0002c70c 	andeq	ip, r2, ip, lsl #14
    89e4:	260b5800 	strcs	r5, [fp], -r0, lsl #16
    89e8:	0a00000a 	beq	8a18 <__core1_unwind_stub-0xff75e8>
    89ec:	01760ee9 	cmneq	r6, r9, ror #29
    89f0:	0b5c0000 	bleq	17089f8 <__end__+0x6ec9d8>
    89f4:	00000694 	muleq	r0, r4, r6
    89f8:	8109ea0a 	tsthi	r9, sl, lsl #20
    89fc:	64000000 	strvs	r0, [r0], #-0
    8a00:	00811500 	addeq	r1, r1, r0, lsl #10
    8a04:	060a0000 	streq	r0, [sl], -r0
    8a08:	0a160000 	beq	588a10 <__core1_unwind_stub-0xa775f0>
    8a0c:	16000006 	strne	r0, [r0], -r6
    8a10:	00000182 	andeq	r0, r0, r2, lsl #3
    8a14:	0001f416 	andeq	pc, r1, r6, lsl r4	; <UNPREDICTABLE>
    8a18:	00811600 	addeq	r1, r1, r0, lsl #12
    8a1c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8a20:	00061504 	andeq	r1, r6, r4, lsl #10
    8a24:	060a0f00 	streq	r0, [sl], -r0, lsl #30
    8a28:	46170000 	ldrmi	r0, [r7], -r0
    8a2c:	28000004 	stmdacs	r0, {r2}
    8a30:	02650a04 	rsbeq	r0, r5, #4, 20	; 0x4000
    8a34:	00075e08 	andeq	r5, r7, r8, lsl #28
    8a38:	09921800 	ldmibeq	r2, {fp, ip}
    8a3c:	670a0000 	strvs	r0, [sl, -r0]
    8a40:	00810702 	addeq	r0, r1, r2, lsl #14
    8a44:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8a48:	00000522 	andeq	r0, r0, r2, lsr #10
    8a4c:	0b026c0a 	bleq	a3a7c <__core1_unwind_stub-0xf5c584>
    8a50:	0000083d 	andeq	r0, r0, sp, lsr r8
    8a54:	0b871804 	bleq	fe1cea6c <__shm_end__+0xbe1cea6c>
    8a58:	6c0a0000 	stcvs	0, cr0, [sl], {-0}
    8a5c:	083d1402 	ldmdaeq	sp!, {r1, sl, ip}
    8a60:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    8a64:	00000a10 	andeq	r0, r0, r0, lsl sl
    8a68:	1e026c0a 	cdpne	12, 0, cr6, cr2, cr10, {0}
    8a6c:	0000083d 	andeq	r0, r0, sp, lsr r8
    8a70:	0dff180c 	ldcleq	8, cr1, [pc, #48]!	; 8aa8 <__core1_unwind_stub-0xff7558>
    8a74:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
    8a78:	00810802 	addeq	r0, r1, r2, lsl #16
    8a7c:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    8a80:	000007fa 	strdeq	r0, [r0], -sl
    8a84:	08026f0a 	stmdaeq	r2, {r1, r3, r8, r9, sl, fp, sp, lr}
    8a88:	00000a3d 	andeq	r0, r0, sp, lsr sl
    8a8c:	042d1814 	strteq	r1, [sp], #-2068	; 0xfffff7ec
    8a90:	720a0000 	andvc	r0, sl, #0
    8a94:	00810702 	addeq	r0, r1, r2, lsl #14
    8a98:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    8a9c:	00000e41 	andeq	r0, r0, r1, asr #28
    8aa0:	1602730a 	strne	r7, [r2], -sl, lsl #6
    8aa4:	00000a52 	andeq	r0, r0, r2, asr sl
    8aa8:	06891834 			; <UNDEFINED> instruction: 0x06891834
    8aac:	750a0000 	strvc	r0, [sl, #-0]
    8ab0:	00810702 	addeq	r0, r1, r2, lsl #14
    8ab4:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    8ab8:	0000077d 	andeq	r0, r0, sp, ror r7
    8abc:	0a02770a 	beq	a66ec <__core1_unwind_stub-0xf59914>
    8ac0:	00000a63 	andeq	r0, r0, r3, ror #20
    8ac4:	0e51183c 	mrceq	8, 2, r1, cr1, cr12, {1}
    8ac8:	7a0a0000 	bvc	288ad0 <__core1_unwind_stub-0xd77530>
    8acc:	032d1302 			; <UNDEFINED> instruction: 0x032d1302
    8ad0:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    8ad4:	000002f1 	strdeq	r0, [r0], -r1
    8ad8:	07027b0a 	streq	r7, [r2, -sl, lsl #22]
    8adc:	00000081 	andeq	r0, r0, r1, lsl #1
    8ae0:	066f1844 	strbteq	r1, [pc], -r4, asr #16
    8ae4:	7c0a0000 	stcvc	0, cr0, [sl], {-0}
    8ae8:	032d1302 			; <UNDEFINED> instruction: 0x032d1302
    8aec:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    8af0:	000008a9 	andeq	r0, r0, r9, lsr #17
    8af4:	14027d0a 	strne	r7, [r2], #-3338	; 0xfffff2f6
    8af8:	00000a69 	andeq	r0, r0, r9, ror #20
    8afc:	0110184c 	tsteq	r0, ip, asr #16
    8b00:	800a0000 	andhi	r0, sl, r0
    8b04:	00810702 	addeq	r0, r1, r2, lsl #14
    8b08:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    8b0c:	0000062f 	andeq	r0, r0, pc, lsr #12
    8b10:	0902810a 	stmdbeq	r2, {r1, r3, r8, pc}
    8b14:	000001f4 	strdeq	r0, [r0], -r4
    8b18:	0a051854 	beq	14ec70 <__core1_unwind_stub-0xeb1390>
    8b1c:	a40a0000 	strge	r0, [sl], #-0
    8b20:	0a180702 	beq	60a730 <__core1_unwind_stub-0x9f58d0>
    8b24:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    8b28:	00000a54 	andeq	r0, r0, r4, asr sl
    8b2c:	1302a80a 	movwne	sl, #10250	; 0x280a
    8b30:	0000045e 	andeq	r0, r0, lr, asr r4
    8b34:	87190148 	ldrhi	r0, [r9, -r8, asr #2]
    8b38:	0a000007 	beq	8b5c <__core1_unwind_stub-0xff74a4>
    8b3c:	1b1202a9 	blne	4895e8 <__core1_unwind_stub-0xb76a18>
    8b40:	4c000004 	stcmi	0, cr0, [r0], {4}
    8b44:	061d1901 	ldreq	r1, [sp], -r1, lsl #18
    8b48:	ad0a0000 	stcge	0, cr0, [sl, #-0]
    8b4c:	0a7a0c02 	beq	1e8bb5c <__end__+0xe6fb3c>
    8b50:	02dc0000 	sbcseq	r0, ip, #0
    8b54:	00083419 	andeq	r3, r8, r9, lsl r4
    8b58:	02b20a00 	adcseq	r0, r2, #0, 20
    8b5c:	0007fe10 	andeq	pc, r7, r0, lsl lr	; <UNPREDICTABLE>
    8b60:	1902e000 	stmdbne	r2, {sp, lr, pc}
    8b64:	00000013 	andeq	r0, r0, r3, lsl r0
    8b68:	0a02b40a 	beq	b5b98 <__core1_unwind_stub-0xf4a468>
    8b6c:	00000a86 	andeq	r0, r0, r6, lsl #21
    8b70:	0e0002ec 	cdpeq	2, 0, cr0, cr0, cr12, {7}
    8b74:	0005ec04 	andeq	lr, r5, r4, lsl #24
    8b78:	00811500 	addeq	r1, r1, r0, lsl #10
    8b7c:	07820000 	streq	r0, [r2, r0]
    8b80:	0a160000 	beq	588b88 <__core1_unwind_stub-0xa77478>
    8b84:	16000006 	strne	r0, [r0], -r6
    8b88:	00000182 	andeq	r0, r0, r2, lsl #3
    8b8c:	00078216 	andeq	r8, r7, r6, lsl r2
    8b90:	00811600 	addeq	r1, r1, r0, lsl #12
    8b94:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8b98:	00020104 	andeq	r0, r2, r4, lsl #2
    8b9c:	07820f00 	streq	r0, [r2, r0, lsl #30]
    8ba0:	040e0000 	streq	r0, [lr], #-0
    8ba4:	00000764 	andeq	r0, r0, r4, ror #14
    8ba8:	00011415 	andeq	r1, r1, r5, lsl r4
    8bac:	0007b100 	andeq	fp, r7, r0, lsl #2
    8bb0:	060a1600 	streq	r1, [sl], -r0, lsl #12
    8bb4:	82160000 	andshi	r0, r6, #0
    8bb8:	16000001 	strne	r0, [r0], -r1
    8bbc:	00000114 	andeq	r0, r0, r4, lsl r1
    8bc0:	00008116 	andeq	r8, r0, r6, lsl r1
    8bc4:	040e0000 	streq	r0, [lr], #-0
    8bc8:	00000793 	muleq	r0, r3, r7
    8bcc:	00008115 	andeq	r8, r0, r5, lsl r1
    8bd0:	0007cb00 	andeq	ip, r7, r0, lsl #22
    8bd4:	060a1600 	streq	r1, [sl], -r0, lsl #12
    8bd8:	82160000 	andshi	r0, r6, #0
    8bdc:	00000001 	andeq	r0, r0, r1
    8be0:	07b7040e 	ldreq	r0, [r7, lr, lsl #8]!
    8be4:	2c080000 	stccs	0, cr0, [r8], {-0}
    8be8:	e1000000 	mrs	r0, (UNDEF: 0)
    8bec:	09000007 	stmdbeq	r0, {r0, r1, r2}
    8bf0:	00000088 	andeq	r0, r0, r8, lsl #1
    8bf4:	2c080002 	stccs	0, cr0, [r8], {2}
    8bf8:	f1000000 	cps	#0
    8bfc:	09000007 	stmdbeq	r0, {r0, r1, r2}
    8c00:	00000088 	andeq	r0, r0, r8, lsl #1
    8c04:	12050000 	andne	r0, r5, #0
    8c08:	0a00000c 	beq	8c40 <__core1_unwind_stub-0xff73c0>
    8c0c:	a91a0124 	ldmdbge	sl, {r2, r5, r8}
    8c10:	1a000004 	bne	8c28 <__core1_unwind_stub-0xff73d8>
    8c14:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    8c18:	01280a0c 			; <UNDEFINED> instruction: 0x01280a0c
    8c1c:	00083708 	andeq	r3, r8, r8, lsl #14
    8c20:	0a341800 	beq	d0ec28 <__core1_unwind_stub-0x2f13d8>
    8c24:	2a0a0000 	bcs	288c2c <__core1_unwind_stub-0xd773d4>
    8c28:	08371101 	ldmdaeq	r7!, {r0, r8, ip}
    8c2c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8c30:	0000082d 	andeq	r0, r0, sp, lsr #16
    8c34:	07012b0a 	streq	r2, [r1, -sl, lsl #22]
    8c38:	00000081 	andeq	r0, r0, r1, lsl #1
    8c3c:	08b31804 	ldmeq	r3!, {r2, fp, ip}
    8c40:	2c0a0000 	stccs	0, cr0, [sl], {-0}
    8c44:	083d0b01 	ldmdaeq	sp!, {r0, r8, r9, fp}
    8c48:	00080000 	andeq	r0, r8, r0
    8c4c:	07fe040e 	ldrbeq	r0, [lr, lr, lsl #8]!
    8c50:	040e0000 	streq	r0, [lr], #-0
    8c54:	000007f1 	strdeq	r0, [r0], -r1
    8c58:	000b7f1a 	andeq	r7, fp, sl, lsl pc
    8c5c:	440a0e00 	strmi	r0, [sl], #-3584	; 0xfffff200
    8c60:	087c0801 	ldmdaeq	ip!, {r0, fp}^
    8c64:	c0180000 	andsgt	r0, r8, r0
    8c68:	0a00000a 	beq	8c98 <__core1_unwind_stub-0xff7368>
    8c6c:	7c120145 	ldfvcs	f0, [r2], {69}	; 0x45
    8c70:	00000008 	andeq	r0, r0, r8
    8c74:	0001bf18 	andeq	fp, r1, r8, lsl pc
    8c78:	01460a00 	cmpeq	r6, r0, lsl #20
    8c7c:	00087c12 	andeq	r7, r8, r2, lsl ip
    8c80:	8c180600 	ldchi	6, cr0, [r8], {-0}
    8c84:	0a00000e 	beq	8cc4 <__core1_unwind_stub-0xff733c>
    8c88:	3a120147 	bcc	4891ac <__core1_unwind_stub-0xb76e54>
    8c8c:	0c000000 	stceq	0, cr0, [r0], {-0}
    8c90:	003a0800 	eorseq	r0, sl, r0, lsl #16
    8c94:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
    8c98:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    8c9c:	02000000 	andeq	r0, r0, #0
    8ca0:	0ad01b00 	beq	ff40f8a8 <__shm_end__+0xbf40f8a8>
    8ca4:	a1070285 	smlabbge	r7, r5, r2, r0
    8ca8:	18000009 	stmdane	r0, {r0, r3}
    8cac:	000003ce 	andeq	r0, r0, lr, asr #7
    8cb0:	1802870a 	stmdane	r2, {r1, r3, r8, r9, sl, pc}
    8cb4:	00000088 	andeq	r0, r0, r8, lsl #1
    8cb8:	0bab1800 	bleq	feacecc0 <__shm_end__+0xbeacecc0>
    8cbc:	880a0000 	stmdahi	sl, {}	; <UNPREDICTABLE>
    8cc0:	01f41202 	mvnseq	r1, r2, lsl #4
    8cc4:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    8cc8:	0000002d 	andeq	r0, r0, sp, lsr #32
    8ccc:	1002890a 	andne	r8, r2, sl, lsl #18
    8cd0:	000009a1 	andeq	r0, r0, r1, lsr #19
    8cd4:	03101808 	tsteq	r0, #8, 16	; 0x80000
    8cd8:	8a0a0000 	bhi	288ce0 <__core1_unwind_stub-0xd77320>
    8cdc:	03431702 	movteq	r1, #14082	; 0x3702
    8ce0:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    8ce4:	00000883 	andeq	r0, r0, r3, lsl #17
    8ce8:	0f028b0a 	svceq	0x00028b0a
    8cec:	00000081 	andeq	r0, r0, r1, lsl #1
    8cf0:	0a2f1848 	beq	bcee18 <__core1_unwind_stub-0x4311e8>
    8cf4:	8c0a0000 	stchi	0, cr0, [sl], {-0}
    8cf8:	006e2c02 	rsbeq	r2, lr, r2, lsl #24
    8cfc:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    8d00:	00000c76 	andeq	r0, r0, r6, ror ip
    8d04:	1a028d0a 	bne	ac134 <__core1_unwind_stub-0xf53ecc>
    8d08:	00000843 	andeq	r0, r0, r3, asr #16
    8d0c:	0d541858 	ldcleq	8, cr1, [r4, #-352]	; 0xfffffea0
    8d10:	8e0a0000 	cdphi	0, 0, cr0, cr10, cr0, {0}
    8d14:	01761602 	cmneq	r6, r2, lsl #12
    8d18:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
    8d1c:	00000afa 	strdeq	r0, [r0], -sl
    8d20:	16028f0a 	strne	r8, [r2], -sl, lsl #30
    8d24:	00000176 	andeq	r0, r0, r6, ror r1
    8d28:	0a181870 	beq	60eef0 <__core1_unwind_stub-0x9f1110>
    8d2c:	900a0000 	andls	r0, sl, r0
    8d30:	01761602 	cmneq	r6, r2, lsl #12
    8d34:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    8d38:	00000165 	andeq	r0, r0, r5, ror #2
    8d3c:	1002910a 	andne	r9, r2, sl, lsl #2
    8d40:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
    8d44:	06e31880 	strbteq	r1, [r3], r0, lsl #17
    8d48:	920a0000 	andls	r0, sl, #0
    8d4c:	09c11002 	stmibeq	r1, {r1, ip}^
    8d50:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    8d54:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    8d58:	0f02930a 	svceq	0x0002930a
    8d5c:	00000081 	andeq	r0, r0, r1, lsl #1
    8d60:	02e318a0 	rsceq	r1, r3, #160, 16	; 0xa00000
    8d64:	940a0000 	strls	r0, [sl], #-0
    8d68:	01761602 	cmneq	r6, r2, lsl #12
    8d6c:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    8d70:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
    8d74:	1602950a 	strne	r9, [r2], -sl, lsl #10
    8d78:	00000176 	andeq	r0, r0, r6, ror r1
    8d7c:	0f0118ac 	svceq	0x000118ac
    8d80:	960a0000 	strls	r0, [sl], -r0
    8d84:	01761602 	cmneq	r6, r2, lsl #12
    8d88:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    8d8c:	000009ec 	andeq	r0, r0, ip, ror #19
    8d90:	1602970a 	strne	r9, [r2], -sl, lsl #14
    8d94:	00000176 	andeq	r0, r0, r6, ror r1
    8d98:	014518bc 	strheq	r1, [r5, #-140]	; 0xffffff74
    8d9c:	980a0000 	stmdals	sl, {}	; <UNPREDICTABLE>
    8da0:	01761602 	cmneq	r6, r2, lsl #12
    8da4:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    8da8:	00000990 	muleq	r0, r0, r9
    8dac:	0802990a 	stmdaeq	r2, {r1, r3, r8, fp, ip, pc}
    8db0:	00000081 	andeq	r0, r0, r1, lsl #1
    8db4:	fa0800cc 	blx	2090ec <__core1_unwind_stub-0xdf6f14>
    8db8:	b1000001 	tstlt	r0, r1
    8dbc:	09000009 	stmdbeq	r0, {r0, r3}
    8dc0:	00000088 	andeq	r0, r0, r8, lsl #1
    8dc4:	fa080019 	blx	208e30 <__core1_unwind_stub-0xdf71d0>
    8dc8:	c1000001 	tstgt	r0, r1
    8dcc:	09000009 	stmdbeq	r0, {r0, r3}
    8dd0:	00000088 	andeq	r0, r0, r8, lsl #1
    8dd4:	fa080007 	blx	208df8 <__core1_unwind_stub-0xdf7208>
    8dd8:	d1000001 	tstle	r0, r1
    8ddc:	09000009 	stmdbeq	r0, {r0, r3}
    8de0:	00000088 	andeq	r0, r0, r8, lsl #1
    8de4:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    8de8:	07029e0a 	streq	r9, [r2, -sl, lsl #28]
    8dec:	000009f8 	strdeq	r0, [r0], -r8
    8df0:	000e1818 	andeq	r1, lr, r8, lsl r8
    8df4:	02a10a00 	adceq	r0, r1, #0, 20
    8df8:	0009f81b 	andeq	pc, r9, fp, lsl r8	; <UNPREDICTABLE>
    8dfc:	48180000 	ldmdami	r8, {}	; <UNPREDICTABLE>
    8e00:	0a000008 	beq	8e28 <__core1_unwind_stub-0xff71d8>
    8e04:	081802a2 	ldmdaeq	r8, {r1, r5, r7, r9}
    8e08:	7800000a 	stmdavc	r0, {r1, r3}
    8e0c:	04a30800 	strteq	r0, [r3], #2048	; 0x800
    8e10:	0a080000 	beq	208e18 <__core1_unwind_stub-0xdf71e8>
    8e14:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    8e18:	1d000000 	stcne	0, cr0, [r0, #-0]
    8e1c:	00880800 	addeq	r0, r8, r0, lsl #16
    8e20:	0a180000 	beq	608e28 <__core1_unwind_stub-0x9f71d8>
    8e24:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    8e28:	1d000000 	stcne	0, cr0, [r0, #-0]
    8e2c:	0af01c00 	beq	ffc0fe34 <__shm_end__+0xbfc0fe34>
    8e30:	3d030283 	sfmcc	f0, 4, [r3, #-524]	; 0xfffffdf4
    8e34:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    8e38:	00000446 	andeq	r0, r0, r6, asr #8
    8e3c:	0b029a0a 	bleq	af66c <__core1_unwind_stub-0xf50994>
    8e40:	0000088c 	andeq	r0, r0, ip, lsl #17
    8e44:	0001381d 	andeq	r3, r1, sp, lsl r8
    8e48:	02a30a00 	adceq	r0, r3, #0, 20
    8e4c:	0009d10b 	andeq	sp, r9, fp, lsl #2
    8e50:	fa080000 	blx	208e58 <__core1_unwind_stub-0xdf71a8>
    8e54:	4d000001 	stcmi	0, cr0, [r0, #-4]
    8e58:	0900000a 	stmdbeq	r0, {r1, r3}
    8e5c:	00000088 	andeq	r0, r0, r8, lsl #1
    8e60:	001e0018 	andseq	r0, lr, r8, lsl r0
    8e64:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8e68:	000a4d04 	andeq	r4, sl, r4, lsl #26
    8e6c:	0a631f00 	beq	18d0a74 <__end__+0x8b4a54>
    8e70:	0a160000 	beq	588e78 <__core1_unwind_stub-0xa77188>
    8e74:	00000006 	andeq	r0, r0, r6
    8e78:	0a58040e 	beq	1609eb8 <__end__+0x5ede98>
    8e7c:	040e0000 	streq	r0, [lr], #-0
    8e80:	0000032d 	andeq	r0, r0, sp, lsr #6
    8e84:	000a7a1f 	andeq	r7, sl, pc, lsl sl
    8e88:	00811600 	addeq	r1, r1, r0, lsl #12
    8e8c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8e90:	000a8004 	andeq	r8, sl, r4
    8e94:	6f040e00 	svcvs	0x00040e00
    8e98:	0800000a 	stmdaeq	r0, {r1, r3}
    8e9c:	000007f1 	strdeq	r0, [r0], -r1
    8ea0:	00000a96 	muleq	r0, r6, sl
    8ea4:	00008809 	andeq	r8, r0, r9, lsl #16
    8ea8:	20000200 	andcs	r0, r0, r0, lsl #4
    8eac:	00000454 	andeq	r0, r0, r4, asr r4
    8eb0:	1703330a 	strne	r3, [r3, -sl, lsl #6]
    8eb4:	0000060a 	andeq	r0, r0, sl, lsl #12
    8eb8:	00044d20 	andeq	r4, r4, r0, lsr #26
    8ebc:	03340a00 	teqeq	r4, #0, 20
    8ec0:	0006101d 	andeq	r1, r6, sp, lsl r0
    8ec4:	2f951000 	svccs	0x00951000
    8ec8:	9a0c0000 	bls	308ed0 <__core1_unwind_stub-0xcf7130>
    8ecc:	00004d16 	andeq	r4, r0, r6, lsl sp
    8ed0:	2ea41000 	cdpcs	0, 10, cr1, cr4, cr0, {0}
    8ed4:	9b0c0000 	blls	308edc <__core1_unwind_stub-0xcf7124>
    8ed8:	00008115 	andeq	r8, r0, r5, lsl r1
    8edc:	01f40800 	mvnseq	r0, r0, lsl #16
    8ee0:	0ad80000 	beq	ff608ee8 <__shm_end__+0xbf608ee8>
    8ee4:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    8ee8:	01000000 	mrseq	r0, (UNDEF: 0)
    8eec:	2f671000 	svccs	0x00671000
    8ef0:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    8ef4:	000ac817 	andeq	ip, sl, r7, lsl r8
    8ef8:	30100d00 	andscc	r0, r0, r0, lsl #26
    8efc:	0d580000 	ldcleq	0, cr0, [r8, #-0]
    8f00:	0ba8081b 	bleq	fea0af74 <__shm_end__+0xbea0af74>
    8f04:	150b0000 	strne	r0, [fp, #-0]
    8f08:	0d00002f 	stceq	0, cr0, [r0, #-188]	; 0xffffff44
    8f0c:	021e0a1d 	andseq	r0, lr, #118784	; 0x1d000
    8f10:	0b000000 	bleq	8f18 <__core1_unwind_stub-0xff70e8>
    8f14:	00002f8e 	andeq	r2, r0, lr, lsl #31
    8f18:	060a1e0d 	streq	r1, [sl], -sp, lsl #28
    8f1c:	02000002 	andeq	r0, r0, #2
    8f20:	002f510b 	eoreq	r5, pc, fp, lsl #2
    8f24:	0a1f0d00 	beq	7cc32c <__core1_unwind_stub-0x833cd4>
    8f28:	00000242 	andeq	r0, r0, r2, asr #4
    8f2c:	2f5e0b04 	svccs	0x005e0b04
    8f30:	200d0000 	andcs	r0, sp, r0
    8f34:	00024e0b 	andeq	r4, r2, fp, lsl #28
    8f38:	780b0800 	stmdavc	fp, {fp}
    8f3c:	0d00002f 	stceq	0, cr0, [r0, #-188]	; 0xffffff44
    8f40:	022a0a21 	eoreq	r0, sl, #135168	; 0x21000
    8f44:	0b0a0000 	bleq	288f4c <__core1_unwind_stub-0xd770b4>
    8f48:	00002f4a 	andeq	r2, r0, sl, asr #30
    8f4c:	360a220d 	strcc	r2, [sl], -sp, lsl #4
    8f50:	0c000002 	stceq	0, cr0, [r0], {2}
    8f54:	00307c0b 	eorseq	r7, r0, fp, lsl #24
    8f58:	0a230d00 	beq	8cc360 <__core1_unwind_stub-0x733ca0>
    8f5c:	0000021e 	andeq	r0, r0, lr, lsl r2
    8f60:	304c0b0e 	subcc	r0, ip, lr, lsl #22
    8f64:	240d0000 	strcs	r0, [sp], #-0
    8f68:	0002120a 	andeq	r1, r2, sl, lsl #4
    8f6c:	150b1000 	strne	r1, [fp, #-0]
    8f70:	0d000030 	stceq	0, cr0, [r0, #-192]	; 0xffffff40
    8f74:	01b4132a 			; <UNDEFINED> instruction: 0x01b4132a
    8f78:	0b180000 	bleq	608f80 <__core1_unwind_stub-0x9f7080>
    8f7c:	00002fed 	andeq	r2, r0, sp, ror #31
    8f80:	b4132b0d 	ldrlt	r2, [r3], #-2829	; 0xfffff4f3
    8f84:	28000001 	stmdacs	r0, {r0}
    8f88:	00305c0b 	eorseq	r5, r0, fp, lsl #24
    8f8c:	132c0d00 			; <UNDEFINED> instruction: 0x132c0d00
    8f90:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    8f94:	2eb50b38 	vmovcs.u16	r0, d5[2]
    8f98:	2d0d0000 	stccs	0, cr0, [sp, #-0]
    8f9c:	0001e811 	andeq	lr, r1, r1, lsl r8
    8fa0:	0b0b4800 	bleq	2dafa8 <__core1_unwind_stub-0xd25058>
    8fa4:	0d00002f 	stceq	0, cr0, [r0, #-188]	; 0xffffff44
    8fa8:	01dc0c2e 	bicseq	r0, ip, lr, lsr #24
    8fac:	0b4c0000 	bleq	1308fb4 <__end__+0x2ecf94>
    8fb0:	00002ede 	ldrdeq	r2, [r0], -lr
    8fb4:	a809300d 	stmdage	r9, {r0, r2, r3, ip, sp}
    8fb8:	5000000b 	andpl	r0, r0, fp
    8fbc:	004d0800 	subeq	r0, sp, r0, lsl #16
    8fc0:	0bb80000 	bleq	fee08fc8 <__shm_end__+0xbee08fc8>
    8fc4:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    8fc8:	01000000 	mrseq	r0, (UNDEF: 0)
    8fcc:	07880800 	streq	r0, [r8, r0, lsl #16]
    8fd0:	0bc30000 	bleq	ff0c8fd8 <__shm_end__+0xbf0c8fd8>
    8fd4:	00210000 	eoreq	r0, r1, r0
    8fd8:	000bb80f 	andeq	fp, fp, pc, lsl #16
    8fdc:	30641000 	rsbcc	r1, r4, r0
    8fe0:	140e0000 	strne	r0, [lr], #-0
    8fe4:	000bc324 	andeq	ip, fp, r4, lsr #6
    8fe8:	2ed41000 	cdpcs	0, 13, cr1, cr4, cr0, {0}
    8fec:	150e0000 	strne	r0, [lr, #-0]
    8ff0:	00008115 	andeq	r8, r0, r5, lsl r1
    8ff4:	04d60300 	ldrbeq	r0, [r6], #768	; 0x300
    8ff8:	410f0000 	mrsmi	r0, CPSR
    8ffc:	0001901d 	andeq	r9, r1, sp, lsl r0
    9000:	09450300 	stmdbeq	r5, {r8, r9}^
    9004:	2a100000 	bcs	40900c <__core1_unwind_stub-0xbf6ff4>
    9008:	00019c12 	andeq	r9, r1, r2, lsl ip
    900c:	0dee2200 	sfmeq	f2, 2, [lr]
    9010:	01070000 	mrseq	r0, (UNDEF: 7)
    9014:	0000002c 	andeq	r0, r0, ip, lsr #32
    9018:	c50e8b10 	strgt	r8, [lr, #-2832]	; 0xfffff4f0
    901c:	2300000c 	movwcs	r0, #12
    9020:	00000529 	andeq	r0, r0, r9, lsr #10
    9024:	0ccc2300 	stcleq	3, cr2, [ip], {0}
    9028:	23010000 	movwcs	r0, #4096	; 0x1000
    902c:	000008f7 	strdeq	r0, [r0], -r7
    9030:	0acc2302 	beq	ff311c40 <__shm_end__+0xbf311c40>
    9034:	23030000 	movwcs	r0, #12288	; 0x3000
    9038:	0000057c 	andeq	r0, r0, ip, ror r5
    903c:	0c8f2304 	stceq	3, cr2, [pc], {4}
    9040:	23050000 	movwcs	r0, #20480	; 0x5000
    9044:	00000fa5 	andeq	r0, r0, r5, lsr #31
    9048:	01182306 	tsteq	r8, r6, lsl #6
    904c:	23070000 	movwcs	r0, #28672	; 0x7000
    9050:	00000f6d 	andeq	r0, r0, sp, ror #30
    9054:	07c82308 	strbeq	r2, [r8, r8, lsl #6]
    9058:	23090000 	movwcs	r0, #36864	; 0x9000
    905c:	00000e7c 	andeq	r0, r0, ip, ror lr
    9060:	0271230a 	rsbseq	r2, r1, #671088640	; 0x28000000
    9064:	230b0000 	movwcs	r0, #45056	; 0xb000
    9068:	00000aec 	andeq	r0, r0, ip, ror #21
    906c:	027f230c 	rsbseq	r2, pc, #12, 6	; 0x30000000
    9070:	230d0000 	movwcs	r0, #53248	; 0xd000
    9074:	00000290 	muleq	r0, r0, r2
    9078:	05d4230e 	ldrbeq	r2, [r4, #782]	; 0x30e
    907c:	230f0000 	movwcs	r0, #61440	; 0xf000
    9080:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    9084:	0e592310 	mrceq	3, 2, r2, cr9, cr0, {0}
    9088:	23110000 	tstcs	r1, #0
    908c:	00000f7d 	andeq	r0, r0, sp, ror pc
    9090:	0b522312 	bleq	1491ce0 <__end__+0x475cc0>
    9094:	23130000 	tstcs	r3, #0
    9098:	00000d11 	andeq	r0, r0, r1, lsl sp
    909c:	0d1f2314 	ldceq	3, cr2, [pc, #-80]	; 9054 <__core1_unwind_stub-0xff6fac>
    90a0:	23150000 	tstcs	r5, #0
    90a4:	00000d2d 	andeq	r0, r0, sp, lsr #26
    90a8:	03702316 	cmneq	r0, #1476395008	; 0x58000000
    90ac:	23170000 	tstcs	r7, #0
    90b0:	000005f4 	strdeq	r0, [r0], -r4
    90b4:	0dc62318 	stcleq	3, cr2, [r6, #96]	; 0x60
    90b8:	23190000 	tstcs	r9, #0
    90bc:	000006fc 	strdeq	r0, [r0], -ip
    90c0:	0e91231a 	mrceq	3, 4, r2, cr1, cr10, {0}
    90c4:	231b0000 	tstcs	fp, #0
    90c8:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    90cc:	0c2b231c 	stceq	3, cr2, [fp], #-112	; 0xffffff90
    90d0:	231d0000 	tstcs	sp, #0
    90d4:	00000360 	andeq	r0, r0, r0, ror #6
    90d8:	dd22001e 	stcle	0, cr0, [r2, #-120]!	; 0xffffff88
    90dc:	0700001a 	smladeq	r0, sl, r0, r0
    90e0:	00003a02 	andeq	r3, r0, r2, lsl #20
    90e4:	0e4d1100 	dvfeqe	f1, f5, f0
    90e8:	00000ceb 	andeq	r0, r0, fp, ror #25
    90ec:	0015af23 	andseq	sl, r5, r3, lsr #30
    90f0:	ce230000 	cdpgt	0, 2, cr0, cr3, cr0, {0}
    90f4:	01000015 	tsteq	r0, r5, lsl r0
    90f8:	0013d924 	andseq	sp, r3, r4, lsr #18
    90fc:	00010000 	andeq	r0, r1, r0
    9100:	001b6003 	andseq	r6, fp, r3
    9104:	015f1100 	cmpeq	pc, r0, lsl #2
    9108:	00000cc5 	andeq	r0, r0, r5, asr #25
    910c:	001b8a0d 	andseq	r8, fp, sp, lsl #20
    9110:	66111400 	ldrvs	r1, [r1], -r0, lsl #8
    9114:	000d4610 	andeq	r4, sp, r0, lsl r6
    9118:	07210b00 	streq	r0, [r1, -r0, lsl #22]!
    911c:	68110000 	ldmdavs	r1, {}	; <UNPREDICTABLE>
    9120:	000ceb18 	andeq	lr, ip, r8, lsl fp
    9124:	390b0000 	stmdbcc	fp, {}	; <UNPREDICTABLE>
    9128:	11000028 	tstne	r0, r8, lsr #32
    912c:	01821869 	orreq	r1, r2, r9, ror #16
    9130:	0b040000 	bleq	109138 <__core1_unwind_stub-0xef6ec8>
    9134:	000014f2 	strdeq	r1, [r0], -r2
    9138:	ec186a11 			; <UNDEFINED> instruction: 0xec186a11
    913c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    9140:	002b130b 	eoreq	r1, fp, fp, lsl #6
    9144:	186b1100 	stmdane	fp!, {r8, ip}^
    9148:	0000019c 	muleq	r0, ip, r1
    914c:	6366110c 	cmnvs	r6, #12, 2
    9150:	6c110072 	ldcvs	0, cr0, [r1], {114}	; 0x72
    9154:	00019c18 	andeq	r9, r1, r8, lsl ip
    9158:	03001000 	movweq	r1, #0
    915c:	00001b9d 	muleq	r0, sp, fp
    9160:	f7016e11 			; <UNDEFINED> instruction: 0xf7016e11
    9164:	2500000c 	strcs	r0, [r0, #-12]
    9168:	00002ee8 	andeq	r2, r0, r8, ror #29
    916c:	461b0b01 	ldrmi	r0, [fp], -r1, lsl #22
    9170:	0500000d 	streq	r0, [r0, #-13]
    9174:	01c00003 	biceq	r0, r0, r3
    9178:	2fbd2501 	svccs	0x00bd2501
    917c:	0c010000 	stceq	0, cr0, [r1], {-0}
    9180:	0000810c 	andeq	r8, r0, ip, lsl #2
    9184:	00030500 	andeq	r0, r3, r0, lsl #10
    9188:	26000000 	strcs	r0, [r0], -r0
    918c:	00002f9f 	muleq	r0, pc, pc	; <UNPREDICTABLE>
    9190:	12077401 	andne	r7, r7, #16777216	; 0x1000000
    9194:	00000002 	andeq	r0, r0, r2
    9198:	2c000000 	stccs	0, cr0, [r0], {-0}
    919c:	01000000 	mrseq	r0, (UNDEF: 0)
    91a0:	000dbd9c 	muleq	sp, ip, sp
    91a4:	64662700 	strbtvs	r2, [r6], #-1792	; 0xfffff900
    91a8:	12740100 	rsbsne	r0, r4, #0, 2
    91ac:	00000081 	andeq	r0, r0, r1, lsl #1
    91b0:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    91b4:	00736f70 	rsbseq	r6, r3, r0, ror pc
    91b8:	121c7401 	andsne	r7, ip, #16777216	; 0x1000000
    91bc:	02000002 	andeq	r0, r0, #2
    91c0:	3a287091 	bcc	a2540c <__core1_unwind_stub-0x5dabf4>
    91c4:	01000030 	tsteq	r0, r0, lsr r0
    91c8:	00812574 	addeq	r2, r1, r4, ror r5
    91cc:	91020000 	mrsls	r0, (UNDEF: 2)
    91d0:	ae26006c 	cdpge	0, 2, cr0, cr6, cr12, {3}
    91d4:	0100002f 	tsteq	r0, pc, lsr #32
    91d8:	00810573 	addeq	r0, r1, r3, ror r5
    91dc:	00000000 	andeq	r0, r0, r0
    91e0:	00500000 	subseq	r0, r0, r0
    91e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    91e8:	00000de6 	andeq	r0, r0, r6, ror #27
    91ec:	00646627 	rsbeq	r6, r4, r7, lsr #12
    91f0:	81117301 	tsthi	r1, r1, lsl #6
    91f4:	02000000 	andeq	r0, r0, #0
    91f8:	26007491 			; <UNDEFINED> instruction: 0x26007491
    91fc:	0000300e 	andeq	r3, r0, lr
    9200:	81057201 	tsthi	r5, r1, lsl #4
    9204:	00000000 	andeq	r0, r0, r0
    9208:	34000000 	strcc	r0, [r0], #-0
    920c:	01000000 	mrseq	r0, (UNDEF: 0)
    9210:	000e1d9c 	muleq	lr, ip, sp
    9214:	64662700 	strbtvs	r2, [r6], #-1792	; 0xfffff900
    9218:	10720100 	rsbsne	r0, r2, r0, lsl #2
    921c:	00000081 	andeq	r0, r0, r1, lsl #1
    9220:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    9224:	01007473 	tsteq	r0, r3, ror r4
    9228:	0e1d2172 	mrceq	1, 0, r2, cr13, cr2, {3}
    922c:	91020000 	mrsls	r0, (UNDEF: 2)
    9230:	040e0070 	streq	r0, [lr], #-112	; 0xffffff90
    9234:	00000ae4 	andeq	r0, r0, r4, ror #21
    9238:	002b1e26 	eoreq	r1, fp, r6, lsr #28
    923c:	05710100 	ldrbeq	r0, [r1, #-256]!	; 0xffffff00
    9240:	00000081 	andeq	r0, r0, r1, lsl #1
    9244:	00000000 	andeq	r0, r0, r0
    9248:	00000024 	andeq	r0, r0, r4, lsr #32
    924c:	0e4c9c01 	cdpeq	12, 4, cr9, cr12, cr1, {0}
    9250:	66270000 	strtvs	r0, [r7], -r0
    9254:	71010064 	tstvc	r1, r4, rrx
    9258:	00008110 	andeq	r8, r0, r0, lsl r1
    925c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9260:	1c392900 			; <UNDEFINED> instruction: 0x1c392900
    9264:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    9268:	00008105 	andeq	r8, r0, r5, lsl #2
    926c:	00000000 	andeq	r0, r0, r0
    9270:	0000b400 	andeq	fp, r0, r0, lsl #8
    9274:	b99c0100 	ldmiblt	ip, {r8}
    9278:	2700000e 	strcs	r0, [r0, -lr]
    927c:	01006466 	tsteq	r0, r6, ror #8
    9280:	00810f5e 	addeq	r0, r1, lr, asr pc
    9284:	91020000 	mrsls	r0, (UNDEF: 2)
    9288:	7562276c 	strbvc	r2, [r2, #-1900]!	; 0xfffff894
    928c:	5e010066 	cdppl	0, 0, cr0, cr1, cr6, {3}
    9290:	00018219 	andeq	r8, r1, r9, lsl r2
    9294:	68910200 	ldmvs	r1, {r9}
    9298:	746e6327 	strbtvc	r6, [lr], #-807	; 0xfffffcd9
    929c:	255e0100 	ldrbcs	r0, [lr, #-256]	; 0xffffff00
    92a0:	0000008f 	andeq	r0, r0, pc, lsl #1
    92a4:	2a649102 	bcs	192d6b4 <__end__+0x911694>
    92a8:	00000000 	andeq	r0, r0, r0
    92ac:	00000064 	andeq	r0, r0, r4, rrx
    92b0:	0100702b 	tsteq	r0, fp, lsr #32
    92b4:	01f40f61 	mvnseq	r0, r1, ror #30
    92b8:	91020000 	mrsls	r0, (UNDEF: 2)
    92bc:	6f672b74 	svcvs	0x00672b74
    92c0:	62010074 	andvs	r0, r1, #116	; 0x74
    92c4:	00008f10 	andeq	r8, r0, r0, lsl pc
    92c8:	70910200 	addsvc	r0, r1, r0, lsl #4
    92cc:	7d290000 	stcvc	0, cr0, [r9, #-0]
    92d0:	01000011 	tsteq	r0, r1, lsl r0
    92d4:	00810546 	addeq	r0, r1, r6, asr #10
    92d8:	00000000 	andeq	r0, r0, r0
    92dc:	01300000 	teqeq	r0, r0
    92e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    92e4:	00000f3e 	andeq	r0, r0, lr, lsr pc
    92e8:	00646627 	rsbeq	r6, r4, r7, lsr #12
    92ec:	81104601 	tsthi	r0, r1, lsl #12
    92f0:	02000000 	andeq	r0, r0, #0
    92f4:	62276491 	eorvs	r6, r7, #-1862270976	; 0x91000000
    92f8:	01006675 	tsteq	r0, r5, ror r6
    92fc:	0f3e2046 	svceq	0x003e2046
    9300:	91020000 	mrsls	r0, (UNDEF: 2)
    9304:	6e632760 	cdpvs	7, 6, cr2, cr3, cr0, {3}
    9308:	46010074 			; <UNDEFINED> instruction: 0x46010074
    930c:	00008f2c 	andeq	r8, r0, ip, lsr #30
    9310:	5c910200 	lfmpl	f0, 4, [r1], {0}
    9314:	0000002a 	andeq	r0, r0, sl, lsr #32
    9318:	0000e000 	andeq	lr, r0, r0
    931c:	00702b00 	rsbseq	r2, r0, r0, lsl #22
    9320:	82154901 	andshi	r4, r5, #16384	; 0x4000
    9324:	02000007 	andeq	r0, r0, #7
    9328:	01257491 			; <UNDEFINED> instruction: 0x01257491
    932c:	01000030 	tsteq	r0, r0, lsr r0
    9330:	008f104a 	addeq	r1, pc, sl, asr #32
    9334:	91020000 	mrsls	r0, (UNDEF: 2)
    9338:	00002a70 	andeq	r2, r0, r0, ror sl
    933c:	00b80000 	adcseq	r0, r8, r0
    9340:	632b0000 			; <UNDEFINED> instruction: 0x632b0000
    9344:	4d010068 	stcmi	0, cr0, [r1, #-416]	; 0xfffffe60
    9348:	0001fa12 	andeq	pc, r1, r2, lsl sl	; <UNPREDICTABLE>
    934c:	6f910200 	svcvs	0x00910200
    9350:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    9354:	000f4404 	andeq	r4, pc, r4, lsl #8
    9358:	362d2c00 	strtcc	r2, [sp], -r0, lsl #24
    935c:	0100002f 	tsteq	r0, pc, lsr #32
    9360:	00000642 	andeq	r0, r0, r2, asr #12
    9364:	00440000 	subeq	r0, r4, r0
    9368:	9c010000 	stcls	0, cr0, [r1], {-0}
    936c:	00000f6b 	andeq	r0, r0, fp, ror #30
    9370:	0019a228 	andseq	sl, r9, r8, lsr #4
    9374:	1e420100 	dvfnes	f0, f2, f0
    9378:	00000081 	andeq	r0, r0, r1, lsl #1
    937c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    9380:	00301d2e 	eorseq	r1, r0, lr, lsr #26
    9384:	11150100 	tstne	r5, r0, lsl #2
    9388:	00000be0 	andeq	r0, r0, r0, ror #23
    938c:	01004fe8 	smlatteq	r0, r8, pc, r4	; <UNPREDICTABLE>
    9390:	000000d8 	ldrdeq	r0, [r0], -r8
    9394:	59289c01 	stmdbpl	r8!, {r0, sl, fp, ip, pc}
    9398:	0100002f 	tsteq	r0, pc, lsr #32
    939c:	019c3015 	orrseq	r3, ip, r5, lsl r0
    93a0:	91020000 	mrsls	r0, (UNDEF: 2)
    93a4:	74732b6c 	ldrbtvc	r2, [r3], #-2924	; 0xfffff494
    93a8:	15170100 	ldrne	r0, [r7, #-256]	; 0xffffff00
    93ac:	00000be0 	andeq	r0, r0, r0, ror #23
    93b0:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    93b4:	00002ef8 	strdeq	r2, [r0], -r8
    93b8:	9c0e1801 	stcls	8, cr1, [lr], {1}
    93bc:	02000001 	andeq	r0, r0, #1
    93c0:	00007091 	muleq	r0, r1, r0
    93c4:	00000022 	andeq	r0, r0, r2, lsr #32
    93c8:	19420002 	stmdbne	r2, {r1}^
    93cc:	01040000 	mrseq	r0, (UNDEF: 4)
    93d0:	000038d7 	ldrdeq	r3, [r0], -r7
    93d4:	010050c0 	smlabteq	r0, r0, r0, r5
    93d8:	010051d4 	ldrdeq	r5, [r0, -r4]
    93dc:	00003084 	andeq	r3, r0, r4, lsl #1
    93e0:	000030ab 	andeq	r3, r0, fp, lsr #1
    93e4:	00002af4 	strdeq	r2, [r0], -r4
    93e8:	00228001 	eoreq	r8, r2, r1
    93ec:	00020000 	andeq	r0, r2, r0
    93f0:	00001956 	andeq	r1, r0, r6, asr r9
    93f4:	394b0104 	stmdbcc	fp, {r2, r8}^
    93f8:	51d40000 	bicspl	r0, r4, r0
    93fc:	51d80100 	bicspl	r0, r8, r0, lsl #2
    9400:	30840100 	addcc	r0, r4, r0, lsl #2
    9404:	30ab0000 	adccc	r0, fp, r0
    9408:	2af40000 	bcs	ffd09410 <__shm_end__+0xbfd09410>
    940c:	80010000 	andhi	r0, r1, r0
    9410:	00000022 	andeq	r0, r0, r2, lsr #32
    9414:	196a0002 	stmdbne	sl!, {r1}^
    9418:	01040000 	mrseq	r0, (UNDEF: 4)
    941c:	000039a2 	andeq	r3, r0, r2, lsr #19
    9420:	010051d8 	ldrdeq	r5, [r0, -r8]
    9424:	01005214 	tsteq	r0, r4, lsl r2
    9428:	00003102 	andeq	r3, r0, r2, lsl #2
    942c:	000030ab 	andeq	r3, r0, fp, lsr #1
    9430:	00002af4 	strdeq	r2, [r0], -r4
    9434:	09e58001 	stmibeq	r5!, {r0, pc}^
    9438:	00040000 	andeq	r0, r4, r0
    943c:	0000197e 	andeq	r1, r0, lr, ror r9
    9440:	3d2b0104 	stfccs	f0, [fp, #-16]!
    9444:	e20c0000 	and	r0, ip, #0
    9448:	ab000040 	blge	9550 <__core1_unwind_stub-0xff6ab0>
    944c:	14000030 	strne	r0, [r0], #-48	; 0xffffffd0
    9450:	30010052 	andcc	r0, r1, r2, asr r0
    9454:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
    9458:	02000039 	andeq	r0, r0, #57	; 0x39
    945c:	0b3b0708 	bleq	ecb084 <__core1_unwind_stub-0x134f7c>
    9460:	04030000 	streq	r0, [r3], #-0
    9464:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    9468:	07040200 	streq	r0, [r4, -r0, lsl #4]
    946c:	00000b45 	andeq	r0, r0, r5, asr #22
    9470:	05050802 	streq	r0, [r5, #-2050]	; 0xfffff7fe
    9474:	02000008 	andeq	r0, r0, #8
    9478:	0a9d0408 	beq	fe74a4a0 <__shm_end__+0xbe74a4a0>
    947c:	0f040000 	svceq	0x00040000
    9480:	02000034 	andeq	r0, r0, #52	; 0x34
    9484:	0033162a 	eorseq	r1, r3, sl, lsr #12
    9488:	e6040000 	str	r0, [r4], -r0
    948c:	02000037 	andeq	r0, r0, #55	; 0x37
    9490:	0060152f 	rsbeq	r1, r0, pc, lsr #10
    9494:	04050000 	streq	r0, [r5], #-0
    9498:	00000066 	andeq	r0, r0, r6, rrx
    949c:	00004806 	andeq	r4, r0, r6, lsl #16
    94a0:	00007500 	andeq	r7, r0, r0, lsl #10
    94a4:	00750700 	rsbseq	r0, r5, r0, lsl #14
    94a8:	05000000 	streq	r0, [r0, #-0]
    94ac:	00007b04 	andeq	r7, r0, r4, lsl #22
    94b0:	c7040800 	strgt	r0, [r4, -r0, lsl #16]
    94b4:	0200003f 	andeq	r0, r0, #63	; 0x3f
    94b8:	00880f36 	addeq	r0, r8, r6, lsr pc
    94bc:	04050000 	streq	r0, [r5], #-0
    94c0:	0000008e 	andeq	r0, r0, lr, lsl #1
    94c4:	00002c06 	andeq	r2, r0, r6, lsl #24
    94c8:	0000a200 	andeq	sl, r0, r0, lsl #4
    94cc:	00750700 	rsbseq	r0, r5, r0, lsl #14
    94d0:	75070000 	strvc	r0, [r7, #-0]
    94d4:	00000000 	andeq	r0, r0, r0
    94d8:	00080102 	andeq	r0, r8, r2, lsl #2
    94dc:	09000004 	stmdbeq	r0, {r2}
    94e0:	00003a0e 	andeq	r3, r0, lr, lsl #20
    94e4:	5412bb02 	ldrpl	fp, [r2], #-2818	; 0xfffff4fe
    94e8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    94ec:	00003ff5 	strdeq	r3, [r0], -r5
    94f0:	7c10be02 	ldcvc	14, cr11, [r0], {2}
    94f4:	02000000 	andeq	r0, r0, #0
    94f8:	04020601 	streq	r0, [r2], #-1537	; 0xfffff9ff
    94fc:	060a0000 	streq	r0, [sl], -r0
    9500:	07000037 	smladxeq	r0, r7, r0, r0
    9504:	0000a201 	andeq	sl, r0, r1, lsl #4
    9508:	06170300 	ldreq	r0, [r7], -r0, lsl #6
    950c:	000001f5 	strdeq	r0, [r0], -r5
    9510:	00329e0b 	eorseq	r9, r2, fp, lsl #28
    9514:	050b0000 	streq	r0, [fp, #-0]
    9518:	01000036 	tsteq	r0, r6, lsr r0
    951c:	003ad90b 	eorseq	sp, sl, fp, lsl #18
    9520:	120b0200 	andne	r0, fp, #0, 4
    9524:	0300003f 	movweq	r0, #63	; 0x3f
    9528:	003a7d0b 	eorseq	r7, sl, fp, lsl #26
    952c:	1b0b0400 	blne	2ca534 <__core1_unwind_stub-0xd35acc>
    9530:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    9534:	003c9e0b 	eorseq	r9, ip, fp, lsl #28
    9538:	e80b0600 	stmda	fp, {r9, sl}
    953c:	07000038 	smladxeq	r0, r8, r0, r0
    9540:	003e300b 	eorseq	r3, lr, fp
    9544:	3e0b0800 	cdpcc	8, 0, cr0, cr11, cr0, {0}
    9548:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
    954c:	003f050b 	eorseq	r0, pc, fp, lsl #10
    9550:	d40b0a00 	strle	r0, [fp], #-2560	; 0xfffff600
    9554:	0b000039 	bleq	9640 <__core1_unwind_stub-0xff69c0>
    9558:	0034500b 	eorseq	r5, r4, fp
    955c:	640b0c00 	strvs	r0, [fp], #-3072	; 0xfffff400
    9560:	0d000034 	stceq	0, cr0, [r0, #-208]	; 0xffffff30
    9564:	00374a0b 	eorseq	r4, r7, fp, lsl #20
    9568:	600b0e00 	andvs	r0, fp, r0, lsl #28
    956c:	0f000037 	svceq	0x00000037
    9570:	00363f0b 	eorseq	r3, r6, fp, lsl #30
    9574:	610b1000 	mrsvs	r1, (UNDEF: 11)
    9578:	1100003a 	tstne	r0, sl, lsr r0
    957c:	0036c90b 	eorseq	ip, r6, fp, lsl #18
    9580:	a80b1200 	stmdage	fp, {r9, ip}
    9584:	13000041 	movwne	r0, #65	; 0x41
    9588:	00331a0b 	eorseq	r1, r3, fp, lsl #20
    958c:	ed0b1400 	cfstrs	mvf1, [fp, #-0]
    9590:	15000036 	strne	r0, [r0, #-54]	; 0xffffffca
    9594:	00325d0b 	eorseq	r5, r2, fp, lsl #26
    9598:	350b1600 	strcc	r1, [fp, #-1536]	; 0xfffffa00
    959c:	1700003f 	smladxne	r0, pc, r0, r0	; <UNPREDICTABLE>
    95a0:	00404e0b 	subeq	r4, r0, fp, lsl #28
    95a4:	120b1800 	andne	r1, fp, #0, 16
    95a8:	19000037 	stmdbne	r0, {r0, r1, r2, r4, r5}
    95ac:	003b4b0b 	eorseq	r4, fp, fp, lsl #22
    95b0:	430b1a00 	movwmi	r1, #47616	; 0xba00
    95b4:	1b00003f 	blne	96b8 <__core1_unwind_stub-0xff6948>
    95b8:	0031770b 	eorseq	r7, r1, fp, lsl #14
    95bc:	510b1c00 	tstpl	fp, r0, lsl #24
    95c0:	1d00003f 	stcne	0, cr0, [r0, #-252]	; 0xffffff04
    95c4:	003f5f0b 	eorseq	r5, pc, fp, lsl #30
    95c8:	250b1e00 	strcs	r1, [fp, #-3584]	; 0xfffff200
    95cc:	1f000031 	svcne	0x00000031
    95d0:	003f890b 	eorseq	r8, pc, fp, lsl #18
    95d4:	ff0b2000 			; <UNDEFINED> instruction: 0xff0b2000
    95d8:	21000034 	tstcs	r0, r4, lsr r0
    95dc:	003a330b 	eorseq	r3, sl, fp, lsl #6
    95e0:	280b2200 	stmdacs	fp, {r9, sp}
    95e4:	2300003f 	movwcs	r0, #63	; 0x3f
    95e8:	0039550b 	eorseq	r5, r9, fp, lsl #10
    95ec:	490b2400 	stmdbmi	fp, {sl, sp}
    95f0:	25000038 	strcs	r0, [r0, #-56]	; 0xffffffc8
    95f4:	0035280b 	eorseq	r2, r5, fp, lsl #16
    95f8:	670b2600 	strvs	r2, [fp, -r0, lsl #12]
    95fc:	27000038 	smladxcs	r0, r8, r0, r0
    9600:	0035e10b 	eorseq	lr, r5, fp, lsl #2
    9604:	770b2800 	strvc	r2, [fp, -r0, lsl #16]
    9608:	29000038 	stmdbcs	r0, {r3, r4, r5}
    960c:	0038870b 	eorseq	r8, r8, fp, lsl #14
    9610:	ba0b2a00 	blt	2d3e18 <__core1_unwind_stub-0xd2c1e8>
    9614:	2b000039 	blcs	9700 <__core1_unwind_stub-0xff6900>
    9618:	0037f00b 	eorseq	pc, r7, fp
    961c:	ec0b2c00 	stc	12, cr2, [fp], {-0}
    9620:	2d00003b 	stccs	0, cr0, [r0, #-236]	; 0xffffff14
    9624:	0035860b 	eorseq	r8, r5, fp, lsl #12
    9628:	0a002e00 	beq	14e30 <__core1_unwind_stub-0xfeb1d0>
    962c:	00003782 	andeq	r3, r0, r2, lsl #15
    9630:	00a20107 	adceq	r0, r2, r7, lsl #2
    9634:	17040000 	strne	r0, [r4, -r0]
    9638:	0003d606 	andeq	sp, r3, r6, lsl #12
    963c:	34860b00 	strcc	r0, [r6], #2816	; 0xb00
    9640:	0b000000 	bleq	9648 <__core1_unwind_stub-0xff69b8>
    9644:	000031ca 	andeq	r3, r0, sl, asr #3
    9648:	41560b01 	cmpmi	r6, r1, lsl #22
    964c:	0b020000 	bleq	89654 <__core1_unwind_stub-0xf769ac>
    9650:	00003fcf 	andeq	r3, r0, pc, asr #31
    9654:	34a60b03 	strtcc	r0, [r6], #2819	; 0xb03
    9658:	0b040000 	bleq	109660 <__core1_unwind_stub-0xef69a0>
    965c:	0000328a 	andeq	r3, r0, sl, lsl #5
    9660:	35620b05 	strbcc	r0, [r2, #-2821]!	; 0xfffff4fb
    9664:	0b060000 	bleq	18966c <__core1_unwind_stub-0xe76994>
    9668:	00003496 	muleq	r0, r6, r4
    966c:	3e6c0b07 	vmulcc.f64	d16, d12, d7
    9670:	0b080000 	bleq	209678 <__core1_unwind_stub-0xdf6988>
    9674:	00003fb4 			; <UNDEFINED> instruction: 0x00003fb4
    9678:	3cc20b09 	fstmiaxcc	r2, {d16-d19}	;@ Deprecated
    967c:	0b0a0000 	bleq	289684 <__core1_unwind_stub-0xd7697c>
    9680:	000032cf 	andeq	r3, r0, pc, asr #5
    9684:	34d90b0b 	ldrbcc	r0, [r9], #2827	; 0xb0b
    9688:	0b0c0000 	bleq	309690 <__core1_unwind_stub-0xcf6970>
    968c:	0000324b 	andeq	r3, r0, fp, asr #4
    9690:	418b0b0d 	orrmi	r0, fp, sp, lsl #22
    9694:	0b0e0000 	bleq	38969c <__core1_unwind_stub-0xc76964>
    9698:	000039a7 	andeq	r3, r0, r7, lsr #19
    969c:	36940b0f 	ldrcc	r0, [r4], pc, lsl #22
    96a0:	0b100000 	bleq	4096a8 <__core1_unwind_stub-0xbf6958>
    96a4:	000039e4 	andeq	r3, r0, r4, ror #19
    96a8:	40900b11 	addsmi	r0, r0, r1, lsl fp
    96ac:	0b120000 	bleq	4896b4 <__core1_unwind_stub-0xb7694c>
    96b0:	00003392 	muleq	r0, r2, r3
    96b4:	36a70b13 	ssatcc	r0, #8, r3, lsl #22
    96b8:	0b140000 	bleq	5096c0 <__core1_unwind_stub-0xaf6940>
    96bc:	00003918 	andeq	r3, r0, r8, lsl r9
    96c0:	34710b15 	ldrbtcc	r0, [r1], #-2837	; 0xfffff4eb
    96c4:	0b160000 	bleq	5896cc <__core1_unwind_stub-0xa76934>
    96c8:	00003964 	andeq	r3, r0, r4, ror #18
    96cc:	376c0b17 			; <UNDEFINED> instruction: 0x376c0b17
    96d0:	0b180000 	bleq	6096d8 <__core1_unwind_stub-0x9f6928>
    96d4:	000032a8 	andeq	r3, r0, r8, lsr #5
    96d8:	40370b19 	eorsmi	r0, r7, r9, lsl fp
    96dc:	0b1a0000 	bleq	6896e4 <__core1_unwind_stub-0x97691c>
    96e0:	000038d6 	ldrdeq	r3, [r0], -r6
    96e4:	36600b1b 			; <UNDEFINED> instruction: 0x36600b1b
    96e8:	0b1c0000 	bleq	7096f0 <__core1_unwind_stub-0x8f6910>
    96ec:	00003160 	andeq	r3, r0, r0, ror #2
    96f0:	38210b1d 	stmdacc	r1!, {r0, r2, r3, r4, r8, r9, fp}
    96f4:	0b1e0000 	bleq	7896fc <__core1_unwind_stub-0x876904>
    96f8:	0000380d 	andeq	r3, r0, sp, lsl #16
    96fc:	3c7f0b1f 			; <UNDEFINED> instruction: 0x3c7f0b1f
    9700:	0b200000 	bleq	809708 <__core1_unwind_stub-0x7f68f8>
    9704:	00003d0a 	andeq	r3, r0, sl, lsl #26
    9708:	40160b21 	andsmi	r0, r6, r1, lsr #22
    970c:	0b220000 	bleq	889714 <__core1_unwind_stub-0x7768ec>
    9710:	00003593 	muleq	r0, r3, r5
    9714:	3afb0b23 	bcc	ffecc3a8 <__shm_end__+0xbfecc3a8>
    9718:	0b240000 	bleq	909720 <__core1_unwind_stub-0x6f68e0>
    971c:	00003cd7 	ldrdeq	r3, [r0], -r7
    9720:	3bfb0b25 	blcc	ffecc3bc <__shm_end__+0xbfecc3bc>
    9724:	0b260000 	bleq	98972c <__core1_unwind_stub-0x6768d4>
    9728:	00003c0f 	andeq	r3, r0, pc, lsl #24
    972c:	3c230b27 			; <UNDEFINED> instruction: 0x3c230b27
    9730:	0b280000 	bleq	a09738 <__core1_unwind_stub-0x5f68c8>
    9734:	000033fa 	strdeq	r3, [r0], -sl
    9738:	337d0b29 	cmncc	sp, #41984	; 0xa400
    973c:	0b2a0000 	bleq	a89744 <__core1_unwind_stub-0x5768bc>
    9740:	000033a5 	andeq	r3, r0, r5, lsr #7
    9744:	3eb50b2b 			; <UNDEFINED> instruction: 0x3eb50b2b
    9748:	0b2c0000 	bleq	b09750 <__core1_unwind_stub-0x4f68b0>
    974c:	000033d7 	ldrdeq	r3, [r0], -r7
    9750:	3ec90b2d 	vdivcc.f64	d16, d9, d29
    9754:	0b2e0000 	bleq	b8975c <__core1_unwind_stub-0x4768a4>
    9758:	00003edd 	ldrdeq	r3, [r0], -sp
    975c:	3ef10b2f 			; <UNDEFINED> instruction: 0x3ef10b2f
    9760:	0b300000 	bleq	c09768 <__core1_unwind_stub-0x3f6898>
    9764:	000034eb 	andeq	r3, r0, fp, ror #9
    9768:	34c50b31 	strbcc	r0, [r5], #2865	; 0xb31
    976c:	0b320000 	bleq	c89774 <__core1_unwind_stub-0x37688c>
    9770:	00003835 	andeq	r3, r0, r5, lsr r8
    9774:	39f70b33 	ldmibcc	r7!, {r0, r1, r4, r5, r8, r9, fp}^
    9778:	0b340000 	bleq	d09780 <__core1_unwind_stub-0x2f6880>
    977c:	000040c5 	andeq	r4, r0, r5, asr #1
    9780:	35450b35 	strbcc	r0, [r5, #-2869]	; 0xfffff4cb
    9784:	0b360000 	bleq	d8978c <__core1_unwind_stub-0x276874>
    9788:	00003615 	andeq	r3, r0, r5, lsl r6
    978c:	362a0b37 			; <UNDEFINED> instruction: 0x362a0b37
    9790:	0b380000 	bleq	e09798 <__core1_unwind_stub-0x1f6868>
    9794:	00003897 	muleq	r0, r7, r8
    9798:	38c10b39 	stmiacc	r1, {r0, r3, r4, r5, r8, r9, fp}^
    979c:	0b3a0000 	bleq	e897a4 <__core1_unwind_stub-0x17685c>
    97a0:	00004108 	andeq	r4, r0, r8, lsl #2
    97a4:	3ae60b3b 	bcc	ff98c498 <__shm_end__+0xbf98c498>
    97a8:	0b3c0000 	bleq	f097b0 <__core1_unwind_stub-0xf6850>
    97ac:	000035b8 			; <UNDEFINED> instruction: 0x000035b8
    97b0:	31dc0b3d 	bicscc	r0, ip, sp, lsr fp
    97b4:	0b3e0000 	bleq	f897bc <__core1_unwind_stub-0x76844>
    97b8:	0000318d 	andeq	r3, r0, sp, lsl #3
    97bc:	3a430b3f 	bcc	10cc4c0 <__end__+0xb04a0>
    97c0:	0b400000 	bleq	10097c8 <f2s_free_clk+0x17c4>
    97c4:	00003b67 	andeq	r3, r0, r7, ror #22
    97c8:	3c610b41 			; <UNDEFINED> instruction: 0x3c610b41
    97cc:	0b420000 	bleq	10897d4 <__end__+0x6d7b4>
    97d0:	000038ac 	andeq	r3, r0, ip, lsr #17
    97d4:	41410b43 	cmpmi	r1, r3, asr #22
    97d8:	0b440000 	bleq	11097e0 <__end__+0xed7c0>
    97dc:	00003b11 	andeq	r3, r0, r1, lsl fp
    97e0:	33c10b45 	biccc	r0, r1, #70656	; 0x11400
    97e4:	0b460000 	bleq	11897ec <__end__+0x16d7cc>
    97e8:	00003676 	andeq	r3, r0, r6, ror r6
    97ec:	37ba0b47 	ldrcc	r0, [sl, r7, asr #22]!
    97f0:	0b480000 	bleq	12097f8 <__end__+0x1ed7d8>
    97f4:	00003144 	andeq	r3, r0, r4, asr #2
    97f8:	326d0b49 	rsbcc	r0, sp, #74752	; 0x12400
    97fc:	0b4a0000 	bleq	1289804 <__end__+0x26d7e4>
    9800:	000035cc 	andeq	r3, r0, ip, asr #11
    9804:	38f60b4b 	ldmcc	r6!, {r0, r1, r3, r6, r8, r9, fp}^
    9808:	004c0000 	subeq	r0, ip, r0
    980c:	9e070202 	cdpls	2, 0, cr0, cr7, cr2, {0}
    9810:	0c00000e 	stceq	0, cr0, [r0], {14}
    9814:	000003f3 	strdeq	r0, [r0], -r3
    9818:	000003e8 	andeq	r0, r0, r8, ror #7
    981c:	dd0e000d 	stcle	0, cr0, [lr, #-52]	; 0xffffffcc
    9820:	05000003 	streq	r0, [r0, #-3]
    9824:	0003ff04 	andeq	pc, r3, r4, lsl #30
    9828:	03ed0e00 	mvneq	r0, #0, 28
    982c:	01020000 	mrseq	r0, (UNDEF: 2)
    9830:	00040908 	andeq	r0, r4, r8, lsl #18
    9834:	03f80e00 	mvnseq	r0, #0, 28
    9838:	0b0f0000 	bleq	3c9840 <__core1_unwind_stub-0xc367c0>
    983c:	05000033 	streq	r0, [r0, #-51]	; 0xffffffcd
    9840:	e81a014c 	ldmda	sl, {r2, r3, r6, r8}
    9844:	0f000003 	svceq	0x00000003
    9848:	00003650 	andeq	r3, r0, r0, asr r6
    984c:	1a018205 	bne	6a068 <__core1_unwind_stub-0xf95f98>
    9850:	000003e8 	andeq	r0, r0, r8, ror #7
    9854:	0003f80c 	andeq	pc, r3, ip, lsl #16
    9858:	00042900 	andeq	r2, r4, r0, lsl #18
    985c:	09000d00 	stmdbeq	r0, {r8, sl, fp}
    9860:	00003859 	andeq	r3, r0, r9, asr r8
    9864:	1e0d2d06 	cdpne	13, 0, cr2, cr13, cr6, {0}
    9868:	09000004 	stmdbeq	r0, {r2}
    986c:	00003f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    9870:	f51c3806 			; <UNDEFINED> instruction: 0xf51c3806
    9874:	0a000001 	beq	9880 <__core1_unwind_stub-0xff6780>
    9878:	0000350c 	andeq	r3, r0, ip, lsl #10
    987c:	00a20107 	adceq	r0, r2, r7, lsl #2
    9880:	3a060000 	bcc	189888 <__core1_unwind_stub-0xe76778>
    9884:	0004b40e 	andeq	fp, r4, lr, lsl #8
    9888:	31590b00 	cmpcc	r9, r0, lsl #22
    988c:	0b000000 	bleq	9894 <__core1_unwind_stub-0xff676c>
    9890:	00003759 	andeq	r3, r0, r9, asr r7
    9894:	40a20b01 	adcmi	r0, r2, r1, lsl #22
    9898:	0b020000 	bleq	898a0 <__core1_unwind_stub-0xf76760>
    989c:	00004065 	andeq	r4, r0, r5, rrx
    98a0:	3aa00b03 	bcc	fe80c4b4 <__shm_end__+0xbe80c4b4>
    98a4:	0b040000 	bleq	1098ac <__core1_unwind_stub-0xef6754>
    98a8:	00003e29 	andeq	r3, r0, r9, lsr #28
    98ac:	334e0b05 	movtcc	r0, #60165	; 0xeb05
    98b0:	0b060000 	bleq	1898b8 <__core1_unwind_stub-0xe76748>
    98b4:	00003330 	andeq	r3, r0, r0, lsr r3
    98b8:	345d0b07 	ldrbcc	r0, [sp], #-2823	; 0xfffff4f9
    98bc:	0b080000 	bleq	2098c4 <__core1_unwind_stub-0xdf673c>
    98c0:	0000397a 	andeq	r3, r0, sl, ror r9
    98c4:	33550b09 	cmpcc	r5, #9216	; 0x2400
    98c8:	0b0a0000 	bleq	2898d0 <__core1_unwind_stub-0xd76730>
    98cc:	00003981 	andeq	r3, r0, r1, lsl #19
    98d0:	33ba0b0b 			; <UNDEFINED> instruction: 0x33ba0b0b
    98d4:	0b0c0000 	bleq	3098dc <__core1_unwind_stub-0xcf6724>
    98d8:	00003347 	andeq	r3, r0, r7, asr #6
    98dc:	3e800b0d 	vdivcc.f64	d0, d0, d13
    98e0:	0b0e0000 	bleq	3898e8 <__core1_unwind_stub-0xc76718>
    98e4:	00003b85 	andeq	r3, r0, r5, lsl #23
    98e8:	9704000f 	strls	r0, [r4, -pc]
    98ec:	0600003c 			; <UNDEFINED> instruction: 0x0600003c
    98f0:	0441013f 	strbeq	r0, [r1], #-319	; 0xfffffec1
    98f4:	0c090000 	stceq	0, cr0, [r9], {-0}
    98f8:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
    98fc:	04b40f41 	ldrteq	r0, [r4], #3905	; 0xf41
    9900:	94090000 	strls	r0, [r9], #-0
    9904:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
    9908:	002c0c4a 	eoreq	r0, ip, sl, asr #24
    990c:	ef090000 	svc	0x00090000
    9910:	06000032 			; <UNDEFINED> instruction: 0x06000032
    9914:	002c0c4b 	eoreq	r0, ip, fp, asr #24
    9918:	6d100000 	ldcvs	0, cr0, [r0, #-0]
    991c:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
    9920:	00003ea5 	andeq	r3, r0, r5, lsr #29
    9924:	f5144c06 			; <UNDEFINED> instruction: 0xf5144c06
    9928:	05000004 	streq	r0, [r0, #-4]
    992c:	0004e404 	andeq	lr, r4, r4, lsl #8
    9930:	23091100 	movwcs	r1, #37120	; 0x9100
    9934:	06000037 			; <UNDEFINED> instruction: 0x06000037
    9938:	05080f4e 	streq	r0, [r8, #-3918]	; 0xfffff0b2
    993c:	04050000 	streq	r0, [r5], #-0
    9940:	000004fb 	strdeq	r0, [r0], -fp
    9944:	003cad12 	eorseq	sl, ip, r2, lsl sp
    9948:	3a8d0900 	bcc	fe34bd50 <__shm_end__+0xbe34bd50>
    994c:	52060000 	andpl	r0, r6, #0
    9950:	00051f0d 	andeq	r1, r5, sp, lsl #30
    9954:	0e040500 	cfsh32eq	mvfx0, mvfx4, #0
    9958:	13000005 	movwne	r0, #5
    995c:	00003443 	andeq	r3, r0, r3, asr #8
    9960:	01670634 	cmneq	r7, r4, lsr r6
    9964:	00055015 	andeq	r5, r5, r5, lsl r0
    9968:	38621400 	stmdacc	r2!, {sl, ip}^
    996c:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    9970:	03ed0f01 	mvneq	r0, #1, 30
    9974:	14000000 	strne	r0, [r0], #-0
    9978:	00003427 	andeq	r3, r0, r7, lsr #8
    997c:	14016a06 	strne	r6, [r1], #-2566	; 0xfffff5fa
    9980:	00000555 	andeq	r0, r0, r5, asr r5
    9984:	250e0004 	strcs	r0, [lr, #-4]
    9988:	0c000005 	stceq	0, cr0, [r0], {5}
    998c:	000000c8 	andeq	r0, r0, r8, asr #1
    9990:	00000565 	andeq	r0, r0, r5, ror #10
    9994:	00003315 	andeq	r3, r0, r5, lsl r3
    9998:	0c002d00 	stceq	13, cr2, [r0], {-0}
    999c:	00000550 	andeq	r0, r0, r0, asr r5
    99a0:	00000570 	andeq	r0, r0, r0, ror r5
    99a4:	650e000d 	strvs	r0, [lr, #-13]
    99a8:	0f000005 	svceq	0x00000005
    99ac:	00003791 	muleq	r0, r1, r7
    99b0:	03016b06 	movweq	r6, #6918	; 0x1b06
    99b4:	00000570 	andeq	r0, r0, r0, ror r5
    99b8:	0039c70f 	eorseq	ip, r9, pc, lsl #14
    99bc:	016e0600 	cmneq	lr, r0, lsl #12
    99c0:	00002c0c 	andeq	r2, r0, ip, lsl #24
    99c4:	3ceb1600 	stclcc	6, cr1, [fp]
    99c8:	01070000 	mrseq	r0, (UNDEF: 7)
    99cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    99d0:	06018106 	streq	r8, [r1], -r6, lsl #2
    99d4:	00000639 	andeq	r0, r0, r9, lsr r6
    99d8:	0032030b 	eorseq	r0, r2, fp, lsl #6
    99dc:	0f0b0000 	svceq	0x000b0000
    99e0:	02000032 	andeq	r0, r0, #50	; 0x32
    99e4:	00321b0b 	eorseq	r1, r2, fp, lsl #22
    99e8:	380b0300 	stmdacc	fp, {r8, r9}
    99ec:	03000035 	movweq	r0, #53	; 0x35
    99f0:	0032270b 	eorseq	r2, r2, fp, lsl #14
    99f4:	bc0b0400 	cfstrslt	mvf0, [fp], {-0}
    99f8:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    99fc:	0037a20b 	eorseq	sl, r7, fp, lsl #4
    9a00:	f80b0500 			; <UNDEFINED> instruction: 0xf80b0500
    9a04:	05000036 	streq	r0, [r0, #-54]	; 0xffffffca
    9a08:	0032e00b 	eorseq	lr, r2, fp
    9a0c:	330b0500 	movwcc	r0, #46336	; 0xb500
    9a10:	06000032 			; <UNDEFINED> instruction: 0x06000032
    9a14:	00392e0b 	eorseq	r2, r9, fp, lsl #28
    9a18:	190b0600 	stmdbne	fp, {r9, sl}
    9a1c:	06000034 			; <UNDEFINED> instruction: 0x06000034
    9a20:	00393b0b 	eorseq	r3, r9, fp, lsl #22
    9a24:	4c0b0600 	stcmi	6, cr0, [fp], {-0}
    9a28:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
    9a2c:	0039480b 	eorseq	r4, r9, fp, lsl #16
    9a30:	880b0600 	stmdahi	fp, {r9, sl}
    9a34:	06000039 			; <UNDEFINED> instruction: 0x06000039
    9a38:	00323f0b 	eorseq	r3, r2, fp, lsl #30
    9a3c:	700b0700 	andvc	r0, fp, r0, lsl #14
    9a40:	0700003a 	smladxeq	r0, sl, r0, r0
    9a44:	003abd0b 	eorseq	fp, sl, fp, lsl #26
    9a48:	870b0700 	strhi	r0, [fp, -r0, lsl #14]
    9a4c:	0700003e 	smladxeq	r0, lr, r0, r0
    9a50:	0033ec0b 	eorseq	lr, r3, fp, lsl #24
    9a54:	3e0b0700 	cdpcc	7, 0, cr0, cr11, cr0, {0}
    9a58:	0800003b 	stmdaeq	r0, {r0, r1, r3, r4, r5}
    9a5c:	0031b80b 	eorseq	fp, r1, fp, lsl #16
    9a60:	5a0b0800 	bpl	2cba68 <__core1_unwind_stub-0xd34598>
    9a64:	0800003e 	stmdaeq	r0, {r1, r2, r3, r4, r5}
    9a68:	003b5a0b 	eorseq	r5, fp, fp, lsl #20
    9a6c:	0f000800 	svceq	0x00000800
    9a70:	000040b7 	strheq	r4, [r0], -r7
    9a74:	1f019f06 	svcne	0x00019f06
    9a78:	0000058f 	andeq	r0, r0, pc, lsl #11
    9a7c:	003b8c0f 	eorseq	r8, fp, pc, lsl #24
    9a80:	01a20600 			; <UNDEFINED> instruction: 0x01a20600
    9a84:	00002c0c 	andeq	r2, r0, ip, lsl #24
    9a88:	37af0f00 	strcc	r0, [pc, r0, lsl #30]!
    9a8c:	a5060000 	strge	r0, [r6, #-0]
    9a90:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    9a94:	9d0f0000 	stcls	0, cr0, [pc, #-0]	; 9a9c <__core1_unwind_stub-0xff6564>
    9a98:	06000041 	streq	r0, [r0], -r1, asr #32
    9a9c:	2c0c01a8 	stfcss	f0, [ip], {168}	; 0xa8
    9aa0:	0f000000 	svceq	0x00000000
    9aa4:	000032ff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    9aa8:	0c01ab06 			; <UNDEFINED> instruction: 0x0c01ab06
    9aac:	0000002c 	andeq	r0, r0, ip, lsr #32
    9ab0:	003b960f 	eorseq	r9, fp, pc, lsl #12
    9ab4:	01ae0600 			; <UNDEFINED> instruction: 0x01ae0600
    9ab8:	00002c0c 	andeq	r2, r0, ip, lsl #24
    9abc:	3aa70f00 	bcc	fe9cd6c4 <__shm_end__+0xbe9cd6c4>
    9ac0:	b1060000 	mrslt	r0, (UNDEF: 6)
    9ac4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    9ac8:	b20f0000 	andlt	r0, pc, #0
    9acc:	0600003a 			; <UNDEFINED> instruction: 0x0600003a
    9ad0:	2c0c01b4 	stfcss	f0, [ip], {180}	; 0xb4
    9ad4:	0f000000 	svceq	0x00000000
    9ad8:	00003ba0 	andeq	r3, r0, r0, lsr #23
    9adc:	0c01b706 	stceq	7, cr11, [r1], {6}
    9ae0:	0000002c 	andeq	r0, r0, ip, lsr #32
    9ae4:	00390a0f 	eorseq	r0, r9, pc, lsl #20
    9ae8:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
    9aec:	00002c0c 	andeq	r2, r0, ip, lsl #24
    9af0:	40fc0f00 	rscsmi	r0, ip, r0, lsl #30
    9af4:	bd060000 	stclt	0, cr0, [r6, #-0]
    9af8:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    9afc:	aa0f0000 	bge	3c9b04 <__core1_unwind_stub-0xc364fc>
    9b00:	0600003b 			; <UNDEFINED> instruction: 0x0600003b
    9b04:	2c0c01c0 	stfcss	f0, [ip], {192}	; 0xc0
    9b08:	0f000000 	svceq	0x00000000
    9b0c:	000041c0 	andeq	r4, r0, r0, asr #3
    9b10:	0c01c306 	stceq	3, cr12, [r1], {6}
    9b14:	0000002c 	andeq	r0, r0, ip, lsr #32
    9b18:	00406c0f 	subeq	r6, r0, pc, lsl #24
    9b1c:	01c60600 	biceq	r0, r6, r0, lsl #12
    9b20:	00002c0c 	andeq	r2, r0, ip, lsl #24
    9b24:	40780f00 	rsbsmi	r0, r8, r0, lsl #30
    9b28:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
    9b2c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    9b30:	840f0000 	strhi	r0, [pc], #-0	; 9b38 <__core1_unwind_stub-0xff64c8>
    9b34:	06000040 	streq	r0, [r0], -r0, asr #32
    9b38:	2c0c01cc 	stfcss	f0, [ip], {204}	; 0xcc
    9b3c:	0f000000 	svceq	0x00000000
    9b40:	000040a9 	andeq	r4, r0, r9, lsr #1
    9b44:	0c01d006 	stceq	0, cr13, [r1], {6}
    9b48:	0000002c 	andeq	r0, r0, ip, lsr #32
    9b4c:	0041b30f 	subeq	fp, r1, pc, lsl #6
    9b50:	01d30600 	bicseq	r0, r3, r0, lsl #12
    9b54:	00002c0c 	andeq	r2, r0, ip, lsl #24
    9b58:	335c0f00 	cmpcc	ip, #0, 30
    9b5c:	d6060000 	strle	r0, [r6], -r0
    9b60:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    9b64:	340f0000 	strcc	r0, [pc], #-0	; 9b6c <__core1_unwind_stub-0xff6494>
    9b68:	06000031 			; <UNDEFINED> instruction: 0x06000031
    9b6c:	2c0c01d9 	stfcss	f0, [ip], {217}	; 0xd9
    9b70:	0f000000 	svceq	0x00000000
    9b74:	00003575 	andeq	r3, r0, r5, ror r5
    9b78:	0c01dc06 	stceq	12, cr13, [r1], {6}
    9b7c:	0000002c 	andeq	r0, r0, ip, lsr #32
    9b80:	0033370f 	eorseq	r3, r3, pc, lsl #14
    9b84:	01df0600 	bicseq	r0, pc, r0, lsl #12
    9b88:	00002c0c 	andeq	r2, r0, ip, lsl #24
    9b8c:	3bb40f00 	blcc	fed0d794 <__shm_end__+0xbed0d794>
    9b90:	e2060000 	and	r0, r6, #0
    9b94:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    9b98:	d80f0000 	stmdale	pc, {}	; <UNPREDICTABLE>
    9b9c:	06000037 			; <UNDEFINED> instruction: 0x06000037
    9ba0:	2c0c01e5 	stfcss	f0, [ip], {229}	; 0xe5
    9ba4:	0f000000 	svceq	0x00000000
    9ba8:	00003a20 	andeq	r3, r0, r0, lsr #20
    9bac:	0c01e806 	stceq	8, cr14, [r1], {6}
    9bb0:	0000002c 	andeq	r0, r0, ip, lsr #32
    9bb4:	003fa20f 	eorseq	sl, pc, pc, lsl #4
    9bb8:	01ef0600 	mvneq	r0, r0, lsl #12
    9bbc:	00002c0c 	andeq	r2, r0, ip, lsl #24
    9bc0:	416b0f00 	cmnmi	fp, r0, lsl #30
    9bc4:	f2060000 	vhadd.s8	d0, d6, d0
    9bc8:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    9bcc:	7b0f0000 	blvc	3c9bd4 <__core1_unwind_stub-0xc3642c>
    9bd0:	06000041 	streq	r0, [r0], -r1, asr #32
    9bd4:	2c0c01f5 	stfcss	f0, [ip], {245}	; 0xf5
    9bd8:	0f000000 	svceq	0x00000000
    9bdc:	00003430 	andeq	r3, r0, r0, lsr r4
    9be0:	0c01f806 	stceq	8, cr15, [r1], {6}
    9be4:	0000002c 	andeq	r0, r0, ip, lsr #32
    9be8:	003fe00f 	eorseq	lr, pc, pc
    9bec:	01fb0600 	mvnseq	r0, r0, lsl #12
    9bf0:	00002c0c 	andeq	r2, r0, ip, lsl #24
    9bf4:	3b260f00 	blcc	98d7fc <__core1_unwind_stub-0x672804>
    9bf8:	fe060000 	cdp2	0, 0, cr0, cr6, cr0, {0}
    9bfc:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    9c00:	ee0f0000 	cdp	0, 0, cr0, cr15, cr0, {0}
    9c04:	06000035 			; <UNDEFINED> instruction: 0x06000035
    9c08:	2c0c0202 	sfmcs	f0, 4, [ip], {2}
    9c0c:	0f000000 	svceq	0x00000000
    9c10:	00003cfd 	strdeq	r3, [r0], -sp
    9c14:	0c020a06 			; <UNDEFINED> instruction: 0x0c020a06
    9c18:	0000002c 	andeq	r0, r0, ip, lsr #32
    9c1c:	0034b70f 	eorseq	fp, r4, pc, lsl #14
    9c20:	020d0600 	andeq	r0, sp, #0, 12
    9c24:	00002c0c 	andeq	r2, r0, ip, lsl #24
    9c28:	002c0c00 	eoreq	r0, ip, r0, lsl #24
    9c2c:	07fe0000 	ldrbeq	r0, [lr, r0]!
    9c30:	000d0000 	andeq	r0, sp, r0
    9c34:	0036d80f 	eorseq	sp, r6, pc, lsl #16
    9c38:	03fb0600 	mvnseq	r0, #0, 12
    9c3c:	0007f30c 	andeq	pc, r7, ip, lsl #6
    9c40:	04f50c00 	ldrbteq	r0, [r5], #3072	; 0xc00
    9c44:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
    9c48:	33150000 	tstcc	r5, #0
    9c4c:	0d000000 	stceq	0, cr0, [r0, #-0]
    9c50:	3bd70f00 	blcc	ff5cd858 <__shm_end__+0xbf5cd858>
    9c54:	84060000 	strhi	r0, [r6], #-0
    9c58:	080b1405 	stmdaeq	fp, {r0, r2, sl, ip}
    9c5c:	9a160000 	bls	589c64 <__core1_unwind_stub-0xa7639c>
    9c60:	07000037 	smladxeq	r0, r7, r0, r0
    9c64:	0000a201 	andeq	sl, r0, r1, lsl #4
    9c68:	058b0600 	streq	r0, [fp, #1536]	; 0x600
    9c6c:	00086606 	andeq	r6, r8, r6, lsl #12
    9c70:	351a0b00 	ldrcc	r0, [sl, #-2816]	; 0xfffff500
    9c74:	0b000000 	bleq	9c7c <__core1_unwind_stub-0xff6384>
    9c78:	00003995 	muleq	r0, r5, r9
    9c7c:	31ee0b01 	mvncc	r0, r1, lsl #22
    9c80:	0b020000 	bleq	89c88 <__core1_unwind_stub-0xf76378>
    9c84:	0000412d 	andeq	r4, r0, sp, lsr #2
    9c88:	3c440b03 	mcrrcc	11, 0, r0, r4, cr3
    9c8c:	0b040000 	bleq	109c94 <__core1_unwind_stub-0xef636c>
    9c90:	00003c37 	andeq	r3, r0, r7, lsr ip
    9c94:	32bf0b05 	adcscc	r0, pc, #5120	; 0x1400
    9c98:	00060000 	andeq	r0, r6, r0
    9c9c:	00411d0f 	subeq	r1, r1, pc, lsl #26
    9ca0:	05980600 	ldreq	r0, [r8, #1536]	; 0x600
    9ca4:	00082815 	andeq	r2, r8, r5, lsl r8
    9ca8:	40050f00 	andmi	r0, r5, r0, lsl #30
    9cac:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    9cb0:	00331107 	eorseq	r1, r3, r7, lsl #2
    9cb4:	c40f0000 	strgt	r0, [pc], #-0	; 9cbc <__core1_unwind_stub-0xff6344>
    9cb8:	0600003b 			; <UNDEFINED> instruction: 0x0600003b
    9cbc:	2c0c07ae 	stccs	7, cr0, [ip], {174}	; 0xae
    9cc0:	04000000 	streq	r0, [r0], #-0
    9cc4:	00003f81 	andeq	r3, r0, r1, lsl #31
    9cc8:	a2167b07 	andsge	r7, r6, #7168	; 0x1c00
    9ccc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    9cd0:	0000088d 	andeq	r0, r0, sp, lsl #17
    9cd4:	61050202 	tstvs	r5, r2, lsl #4
    9cd8:	0400000d 	streq	r0, [r0], #-13
    9cdc:	00003282 	andeq	r3, r0, r2, lsl #5
    9ce0:	33168107 	tstcc	r6, #-1073741823	; 0xc0000001
    9ce4:	04000000 	streq	r0, [r0], #-0
    9ce8:	00003185 	andeq	r3, r0, r5, lsl #3
    9cec:	25168507 	ldrcs	r8, [r6, #-1287]	; 0xfffffaf9
    9cf0:	02000000 	andeq	r0, r0, #0
    9cf4:	33770404 	cmncc	r7, #4, 8	; 0x4000000
    9cf8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9cfc:	00336f03 	eorseq	r6, r3, r3, lsl #30
    9d00:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    9d04:	00000aa2 	andeq	r0, r0, r2, lsr #21
    9d08:	52031002 	andpl	r1, r3, #2
    9d0c:	0c00003c 	stceq	0, cr0, [r0], {60}	; 0x3c
    9d10:	00000899 	muleq	r0, r9, r8
    9d14:	000008e9 	andeq	r0, r0, r9, ror #17
    9d18:	00003315 	andeq	r3, r0, r5, lsl r3
    9d1c:	0e00ff00 	cdpeq	15, 0, cr15, cr0, cr0, {0}
    9d20:	000008d9 	ldrdeq	r0, [r0], -r9
    9d24:	003aca0f 	eorseq	ip, sl, pc, lsl #20
    9d28:	01fc0700 	mvnseq	r0, r0, lsl #14
    9d2c:	0008e916 	andeq	lr, r8, r6, lsl r9
    9d30:	33260f00 			; <UNDEFINED> instruction: 0x33260f00
    9d34:	02070000 	andeq	r0, r7, #0
    9d38:	08e91602 	stmiaeq	r9!, {r1, r9, sl, ip}^
    9d3c:	ab170000 	blge	5c9d44 <__core1_unwind_stub-0xa362bc>
    9d40:	01000031 	tsteq	r0, r1, lsr r0
    9d44:	b10103b3 			; <UNDEFINED> instruction: 0xb10103b3
    9d48:	14000008 	strne	r0, [r0], #-8
    9d4c:	30010052 	andcc	r0, r1, r2, asr r0
    9d50:	01000001 	tsteq	r0, r1
    9d54:	0009e29c 	muleq	r9, ip, r2
    9d58:	006e1800 	rsbeq	r1, lr, r0, lsl #16
    9d5c:	1703b301 	strne	fp, [r3, -r1, lsl #6]
    9d60:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    9d64:	00000004 	andeq	r0, r0, r4
    9d68:	00000000 	andeq	r0, r0, r0
    9d6c:	01006418 	tsteq	r0, r8, lsl r4
    9d70:	b12203b3 			; <UNDEFINED> instruction: 0xb12203b3
    9d74:	30000008 	andcc	r0, r0, r8
    9d78:	2c000000 	stccs	0, cr0, [r0], {-0}
    9d7c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    9d80:	01007072 	tsteq	r0, r2, ror r0
    9d84:	e22e03b3 	eor	r0, lr, #-872415230	; 0xcc000002
    9d88:	02000009 	andeq	r0, r0, #9
    9d8c:	711a0091 			; <UNDEFINED> instruction: 0x711a0091
    9d90:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    9d94:	0008b10b 	andeq	fp, r8, fp, lsl #2
    9d98:	00006000 	andeq	r6, r0, r0
    9d9c:	00005800 	andeq	r5, r0, r0, lsl #16
    9da0:	00721a00 	rsbseq	r1, r2, r0, lsl #20
    9da4:	1203b501 	andne	fp, r3, #4194304	; 0x400000
    9da8:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    9dac:	000000b6 	strheq	r0, [r0], -r6
    9db0:	000000ac 	andeq	r0, r0, ip, lsr #1
    9db4:	0100791a 	tsteq	r0, sl, lsl r9
    9db8:	b11903b5 			; <UNDEFINED> instruction: 0xb11903b5
    9dbc:	12000008 	andne	r0, r0, #8
    9dc0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    9dc4:	1a000001 	bne	9dd0 <__core1_unwind_stub-0xff6230>
    9dc8:	00317a6c 	eorseq	r7, r1, ip, ror #20
    9dcc:	0a03b601 	beq	f75d8 <__core1_unwind_stub-0xf08a28>
    9dd0:	000008a5 	andeq	r0, r0, r5, lsr #17
    9dd4:	0000013e 	andeq	r0, r0, lr, lsr r1
    9dd8:	0000013a 	andeq	r0, r0, sl, lsr r1
    9ddc:	327a6c1a 	rsbscc	r6, sl, #6656	; 0x1a00
    9de0:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    9de4:	0008a50f 	andeq	sl, r8, pc, lsl #10
    9de8:	00015e00 	andeq	r5, r1, r0, lsl #28
    9dec:	00015c00 	andeq	r5, r1, r0, lsl #24
    9df0:	00691a00 	rsbeq	r1, r9, r0, lsl #20
    9df4:	1403b601 	strne	fp, [r3], #-1537	; 0xfffff9ff
    9df8:	000008a5 	andeq	r0, r0, r5, lsr #17
    9dfc:	0000017b 	andeq	r0, r0, fp, ror r1
    9e00:	00000171 	andeq	r0, r0, r1, ror r1
    9e04:	01006b1a 	tsteq	r0, sl, lsl fp
    9e08:	a51703b6 	ldrge	r0, [r7, #-950]	; 0xfffffc4a
    9e0c:	c2000008 	andgt	r0, r0, #8
    9e10:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
    9e14:	00000001 	andeq	r0, r0, r1
    9e18:	08b10405 	ldmeq	r1!, {r0, r2, sl}
    9e1c:	22000000 	andcs	r0, r0, #0
    9e20:	02000000 	andeq	r0, r0, #0
    9e24:	001ae000 	andseq	lr, sl, r0
    9e28:	e6010400 	str	r0, [r1], -r0, lsl #8
    9e2c:	4400003b 	strmi	r0, [r0], #-59	; 0xffffffc5
    9e30:	6c010053 	stcvs	0, cr0, [r1], {83}	; 0x53
    9e34:	84010053 	strhi	r0, [r1], #-83	; 0xffffffad
    9e38:	ab000030 	blge	9f00 <__core1_unwind_stub-0xff6100>
    9e3c:	f4000030 	vst4.8	{d0-d3}, [r0 :256], r0
    9e40:	0100002a 	tsteq	r0, sl, lsr #32
    9e44:	00002280 	andeq	r2, r0, r0, lsl #5
    9e48:	f4000200 	vst1.8	{d0-d3}, [r0], r0
    9e4c:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    9e50:	003c4701 	eorseq	r4, ip, r1, lsl #14
    9e54:	00536c00 	subseq	r6, r3, r0, lsl #24
    9e58:	0053b401 	subseq	fp, r3, r1, lsl #8
    9e5c:	00308401 	eorseq	r8, r0, r1, lsl #8
    9e60:	0030ab00 	eorseq	sl, r0, r0, lsl #22
    9e64:	002af400 	eoreq	pc, sl, r0, lsl #8
    9e68:	Address 0x0000000000009e68 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
{
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011117 	andne	r1, r1, r7, lsl r1
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__core1_unwind_stub-0xd3ff54>
    ALT_PRINTF("\n");
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__core1_unwind_stub-0xc7f3d8>
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__core1_unwind_stub-0x7d39c>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	03001605 	movweq	r1, #1541	; 0x605
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	3b0b3a0e 	blcc	2ce87c <__core1_unwind_stub-0xd31784>
      40:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__core1_unwind_stub-0xd3fb54>
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	0b3b0b3a 	bleq	ec2d3c <__core1_unwind_stub-0x13d2c4>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
      58:	3a0e0300 	bcc	380c60 <__core1_unwind_stub-0xc7f3a0>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
}
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <__core1_unwind_stub-0xffff58>
      78:	0b0b0113 	bleq	2c04cc <__core1_unwind_stub-0xd3fb34>
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	0b3b0b3a 	bleq	ec2d6c <__core1_unwind_stub-0x13d294>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__core1_unwind_stub-0xc7f370>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      *(pmem->toptr)=0;
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__core1_unwind_stub-0xd3ff24>
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__core1_unwind_stub-0xc7f354>
}
      a4:	3b0b3a0b 	blcc	2ce8d8 <__core1_unwind_stub-0xd31728>
      a8:	010b390b 	tsteq	fp, fp, lsl #18
      ac:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      b0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	0b3b0b3a 	bleq	ec2da4 <__core1_unwind_stub-0x13d25c>
      b8:	13490b39 	movtne	r0, #39737	; 0x9b39
        break;
      bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    return ALT_E_SUCCESS;
      c0:	0b000f0f 	bleq	3d04 <__core1_unwind_stub-0xffc2fc>
      c4:	0013490b 	andseq	r4, r3, fp, lsl #18
        return ALT_E_ERROR;
      c8:	01131000 	tsteq	r3, r0
}
      cc:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
      d0:	0b3b0b3a 	bleq	ec2dc0 <__core1_unwind_stub-0x13d240>
      d4:	13010b39 	movwne	r0, #6969	; 0x1b39
      d8:	0d110000 	ldceq	0, cr0, [r1, #-0]
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	3a0e0300 	bcc	380ce4 <__core1_unwind_stub-0xc7f31c>
      e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      e4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      e8:	12000005 	andne	r0, r0, #5
      ec:	19270015 	stmdbne	r7!, {r0, r2, r4}
      f0:	15130000 	ldrne	r0, [r3, #-0]
    return dst;
      f4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
}
      f8:	00130113 	andseq	r0, r3, r3, lsl r1
      fc:	00051400 	andeq	r1, r5, r0, lsl #8
     100:	00001349 	andeq	r1, r0, r9, asr #6
     104:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
        return (int)cnt;
     108:	16000013 			; <UNDEFINED> instruction: 0x16000013
     10c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    errno = ENOSYS;
     110:	0b3a050b 	bleq	e81544 <__core1_unwind_stub-0x17eabc>
     114:	0b39053b 	bleq	e41608 <__core1_unwind_stub-0x1be9f8>
     118:	00001301 	andeq	r1, r0, r1, lsl #6
     11c:	03000d17 	movweq	r0, #3351	; 0xd17
    return -1;
     120:	3b0b3a0e 	blcc	2ce960 <__core1_unwind_stub-0xd316a0>
}
     124:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     128:	000b3813 	andeq	r3, fp, r3, lsl r8
     12c:	000d1800 	andeq	r1, sp, r0, lsl #16
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     130:	0b3a0e03 	bleq	e83944 <__core1_unwind_stub-0x17c6bc>
     134:	0b39053b 	bleq	e41628 <__core1_unwind_stub-0x1be9d8>
     138:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	13190000 	tstne	r9, #0
     140:	0b0e0301 	bleq	380d4c <__core1_unwind_stub-0xc7f2b4>
     144:	3b0b3a0b 	blcc	2ce978 <__core1_unwind_stub-0xd31688>
     148:	010b3905 	tsteq	fp, r5, lsl #18
     14c:	1a000013 	bne	1a0 <__core1_unwind_stub-0xfffe60>
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	0b0b0113 	bleq	2c05a4 <__core1_unwind_stub-0xd3fa5c>
     154:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     158:	13010b39 	movwne	r0, #6969	; 0x1b39
     15c:	171b0000 	ldrne	r0, [fp, -r0]
     160:	3a0b0b01 	bcc	2c2d6c <__core1_unwind_stub-0xd3d294>
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     168:	0013010b 	andseq	r0, r3, fp, lsl #2
     16c:	000d1c00 	andeq	r1, sp, r0, lsl #24
     170:	0b3a0e03 	bleq	e83984 <__core1_unwind_stub-0x17c67c>
     174:	0b39053b 	bleq	e41668 <__core1_unwind_stub-0x1be998>
    return ALT_E_SUCCESS;
     178:	00001349 	andeq	r1, r0, r9, asr #6
}
     17c:	0300131d 	movweq	r1, #797	; 0x31d
     180:	00193c0e 	andseq	r3, r9, lr, lsl #24
     184:	01151e00 	tsteq	r5, r0, lsl #28
    while (coalesce->size)
     188:	13011927 	movwne	r1, #6439	; 0x1927
     18c:	341f0000 	ldrcc	r0, [pc], #-0	; 194 <__core1_unwind_stub-0xfffe6c>
            break;
     190:	3a0e0300 	bcc	380d98 <__core1_unwind_stub-0xc7f268>
    *segpa   = thissegpa;
     194:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	3f13490b 	svccc	0x0013490b
     19c:	00193c19 	andseq	r3, r9, r9, lsl ip
    *segsize = thissegsize;
     1a0:	00342000 	eorseq	r2, r4, r0
     1a4:	0b3a0e03 	bleq	e839b8 <__core1_unwind_stub-0x17c648>
     1a8:	0b390b3b 	bleq	e42e9c <__core1_unwind_stub-0x1bd164>
    return ALT_E_SUCCESS;
     1ac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
}
     1b0:	0000193c 	andeq	r1, r0, ip, lsr r9
     1b4:	03010421 	movweq	r0, #5153	; 0x1421
     1b8:	0b0b3e0e 	bleq	2cf9f8 <__core1_unwind_stub-0xd30608>
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	3a13490b 	bcc	4d25f0 <__core1_unwind_stub-0xb2da10>
     1c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1c4:	0013010b 	andseq	r0, r3, fp, lsl #2
     1c8:	00282200 	eoreq	r2, r8, r0, lsl #4
     1cc:	0b1c0e03 	bleq	7039e0 <__core1_unwind_stub-0x8fc620>
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	34230000 	strtcc	r0, [r3], #-0
     1d4:	3a0e0300 	bcc	380ddc <__core1_unwind_stub-0xc7f224>
     1d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1dc:	3f13490b 	svccc	0x0013490b
     1e0:	00180219 	andseq	r0, r8, r9, lsl r2
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
     1e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     1ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     1f0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     1f4:	01111349 	tsteq	r1, r9, asr #6
     1f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1fc:	01194296 			; <UNDEFINED> instruction: 0x01194296
     200:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     204:	08030005 	stmdaeq	r3, {r0, r2}
     208:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     20c:	13490b39 	movtne	r0, #39737	; 0x9b39
     210:	00001802 	andeq	r1, r0, r2, lsl #16
        clkStep += clk100;
     214:	03000526 	movweq	r0, #1318	; 0x526
     218:	3b0b3a0e 	blcc	2cea58 <__core1_unwind_stub-0xd315a8>
     21c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     220:	00180213 	andseq	r0, r8, r3, lsl r2
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	00342700 	eorseq	r2, r4, r0, lsl #14
     228:	0b3a0e03 	bleq	e83a3c <__core1_unwind_stub-0x17c5c4>
     22c:	0b39053b 	bleq	e41720 <__core1_unwind_stub-0x1be8e0>
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     234:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     238:	3a0e0301 	bcc	380e44 <__core1_unwind_stub-0xc7f1bc>
     23c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     244:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     248:	97184006 	ldrls	r4, [r8, -r6]
     24c:	13011942 	movwne	r1, #6466	; 0x1942
     250:	34290000 	strtcc	r0, [r9], #-0
     254:	3a080300 	bcc	200e5c <__core1_unwind_stub-0xdff1a4>
     258:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     260:	2a000018 	bcs	2c8 <__core1_unwind_stub-0xfffd38>
     264:	0e03012e 	adfeqsp	f0, f3, #0.5
     268:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     26c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     270:	01111349 	tsteq	r1, r9, asr #6
     274:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     278:	01194296 			; <UNDEFINED> instruction: 0x01194296
     27c:	2b000013 	blcs	2d0 <__core1_unwind_stub-0xfffd30>
     280:	0e03012e 	adfeqsp	f0, f3, #0.5
     284:	0b3b0b3a 	bleq	ec2f74 <__core1_unwind_stub-0x13d08c>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     28c:	01111349 	tsteq	r1, r9, asr #6
     290:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	01194296 			; <UNDEFINED> instruction: 0x01194296
     298:	2c000013 	stccs	0, cr0, [r0], {19}
     29c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     2a0:	0b3b0b3a 	bleq	ec2f90 <__core1_unwind_stub-0x13d070>
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	13490b39 	movtne	r0, #39737	; 0x9b39
     2a8:	00001802 	andeq	r1, r0, r2, lsl #16
     2ac:	0300342d 	movweq	r3, #1069	; 0x42d
     2b0:	3b0b3a0e 	blcc	2ceaf0 <__core1_unwind_stub-0xd31510>
     2b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     2b8:	00180213 	andseq	r0, r8, r3, lsl r2
     2bc:	00342e00 	eorseq	r2, r4, r0, lsl #28
     2c0:	0b3a0803 	bleq	e822d4 <__core1_unwind_stub-0x17dd2c>
     2c4:	0b390b3b 	bleq	e42fb8 <__core1_unwind_stub-0x1bd048>
     2c8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     2cc:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	03193f01 	tsteq	r9, #1, 30
     2d4:	3b0b3a0e 	blcc	2ceb14 <__core1_unwind_stub-0xd314ec>
     2d8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	11134919 	tstne	r3, r9, lsl r9
     2e0:	40061201 	andmi	r1, r6, r1, lsl #4
     2e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     2e8:	00001301 	andeq	r1, r0, r1, lsl #6
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	3f012e30 	svccc	0x00012e30
     2f0:	3a0e0319 	bcc	380f5c <__core1_unwind_stub-0xc7f0a4>
     2f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2f8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     2fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     300:	97184006 	ldrls	r4, [r8, -r6]
     304:	13011942 	movwne	r1, #6466	; 0x1942
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
     30c:	03193f01 	tsteq	r9, #1, 30
     310:	3b0b3a0e 	blcc	2ceb50 <__core1_unwind_stub-0xd314b0>
     314:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     318:	11134919 	tstne	r3, r9, lsl r9
     31c:	40061201 	andmi	r1, r6, r1, lsl #4
     320:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	05320000 	ldreq	r0, [r2, #-0]!
     328:	3a080300 	bcc	200f30 <__core1_unwind_stub-0xdff0d0>
     32c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     334:	00000018 	andeq	r0, r0, r8, lsl r0
     338:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     33c:	030b130e 	movweq	r1, #45838	; 0xb30e
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     344:	10011117 	andne	r1, r1, r7, lsl r1
     348:	02000017 	andeq	r0, r0, #23
     34c:	0b0b0024 	bleq	2c03e4 <__core1_unwind_stub-0xd3fc1c>
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     354:	16030000 	strne	r0, [r3], -r0
     358:	3a0e0300 	bcc	380f60 <__core1_unwind_stub-0xc7f0a0>
     35c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     360:	0013490b 	andseq	r4, r3, fp, lsl #18
     364:	00240400 	eoreq	r0, r4, r0, lsl #8
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	0b3e0b0b 	bleq	f82f9c <__core1_unwind_stub-0x7d064>
     36c:	00000e03 	andeq	r0, r0, r3, lsl #28
     370:	03010405 	movweq	r0, #5125	; 0x1405
     374:	0b0b3e0e 	bleq	2cfbb4 <__core1_unwind_stub-0xd3044c>
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	3a13490b 	bcc	4d27ac <__core1_unwind_stub-0xb2d854>
     37c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     380:	0013010b 	andseq	r0, r3, fp, lsl #2
     384:	00280600 	eoreq	r0, r8, r0, lsl #12
     388:	0b1c0e03 	bleq	703b9c <__core1_unwind_stub-0x8fc464>
     38c:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     394:	08000005 	stmdaeq	r0, {r0, r2}
     398:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     39c:	0b3a0b0b 	bleq	e82fd0 <__core1_unwind_stub-0x17d030>
     3a0:	0b390b3b 	bleq	e43094 <__core1_unwind_stub-0x1bcf6c>
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	00001301 	andeq	r1, r0, r1, lsl #6
     3a8:	03000d09 	movweq	r0, #3337	; 0xd09
     3ac:	3b0b3a0e 	blcc	2cebec <__core1_unwind_stub-0xd31414>
     3b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     3b4:	000b3813 	andeq	r3, fp, r3, lsl r8
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	000d0a00 	andeq	r0, sp, r0, lsl #20
     3bc:	0b3a0803 	bleq	e823d0 <__core1_unwind_stub-0x17dc30>
     3c0:	0b390b3b 	bleq	e430b4 <__core1_unwind_stub-0x1bcf4c>
     3c4:	0b381349 	bleq	e050f0 <__core1_unwind_stub-0x1faf10>
     3c8:	0f0b0000 	svceq	0x000b0000
     3cc:	000b0b00 	andeq	r0, fp, r0, lsl #22
     3d0:	00160c00 	andseq	r0, r6, r0, lsl #24
     3d4:	0b3a0e03 	bleq	e83be8 <__core1_unwind_stub-0x17c418>
     3d8:	0b39053b 	bleq	e418cc <__core1_unwind_stub-0x1be734>
     3dc:	00001349 	andeq	r1, r0, r9, asr #6
     3e0:	0301040d 	movweq	r0, #5133	; 0x140d
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	0b0b3e0e 	bleq	2cfc24 <__core1_unwind_stub-0xd303dc>
     3e8:	3a13490b 	bcc	4d281c <__core1_unwind_stub-0xb2d7e4>
     3ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3f0:	0013010b 	andseq	r0, r3, fp, lsl #2
     3f4:	00280e00 	eoreq	r0, r8, r0, lsl #28
     3f8:	061c0e03 	ldreq	r0, [ip], -r3, lsl #28
     3fc:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     400:	03193f01 	tsteq	r9, #1, 30
     404:	3b0b3a0e 	blcc	2cec44 <__core1_unwind_stub-0xd313bc>
     408:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     40c:	11134919 	tstne	r3, r9, lsl r9
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	40061201 	andmi	r1, r6, r1, lsl #4
     414:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     418:	00001301 	andeq	r1, r0, r1, lsl #6
     41c:	03000510 	movweq	r0, #1296	; 0x510
     420:	3b0b3a0e 	blcc	2cec60 <__core1_unwind_stub-0xd313a0>
     424:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	00180213 	andseq	r0, r8, r3, lsl r2
     42c:	000f1100 	andeq	r1, pc, r0, lsl #2
     430:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     434:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     438:	03193f01 	tsteq	r9, #1, 30
     43c:	3b0b3a0e 	blcc	2cec7c <__core1_unwind_stub-0xd31384>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     444:	11134919 	tstne	r3, r9, lsl r9
     448:	40061201 	andmi	r1, r6, r1, lsl #4
     44c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     450:	00001301 	andeq	r1, r0, r1, lsl #6
     454:	11010b13 	tstne	r1, r3, lsl fp
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	00061201 	andeq	r1, r6, r1, lsl #4
     45c:	00341400 	eorseq	r1, r4, r0, lsl #8
     460:	0b3a0803 	bleq	e82474 <__core1_unwind_stub-0x17db8c>
     464:	0b39053b 	bleq	e41958 <__core1_unwind_stub-0x1be6a8>
     468:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     46c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	3a0e0301 	bcc	38107c <__core1_unwind_stub-0xc7ef84>
     474:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     478:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     47c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     480:	97184006 	ldrls	r4, [r8, -r6]
     484:	13011942 	movwne	r1, #6466	; 0x1942
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	34160000 	ldrcc	r0, [r6], #-0
     48c:	3a0e0300 	bcc	381094 <__core1_unwind_stub-0xc7ef6c>
     490:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     494:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     498:	17000018 	smladne	r0, r8, r0, r0
     49c:	13490026 	movtne	r0, #36902	; 0x9026
     4a0:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     4a4:	03193f01 	tsteq	r9, #1, 30
     4a8:	3b0b3a0e 	blcc	2cece8 <__core1_unwind_stub-0xd31318>
     4ac:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     4b0:	11134919 	tstne	r3, r9, lsl r9
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	40061201 	andmi	r1, r6, r1, lsl #4
     4b8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     4bc:	00001301 	andeq	r1, r0, r1, lsl #6
     4c0:	03000519 	movweq	r0, #1305	; 0x519
     4c4:	3b0b3a0e 	blcc	2ced04 <__core1_unwind_stub-0xd312fc>
     4c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	00180213 	andseq	r0, r8, r3, lsl r2
     4d0:	010b1a00 	tsteq	fp, r0, lsl #20
     4d4:	00001755 	andeq	r1, r0, r5, asr r7
     4d8:	0300341b 	movweq	r3, #1051	; 0x41b
     4dc:	3b0b3a0e 	blcc	2ced1c <__core1_unwind_stub-0xd312e4>
     4e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     4e4:	00180213 	andseq	r0, r8, r3, lsl r2
     4e8:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
     4ec:	0b3a0e03 	bleq	e83d00 <__core1_unwind_stub-0x17c300>
     4f0:	0b390b3b 	bleq	e431e4 <__core1_unwind_stub-0x1bce1c>
     4f4:	13491927 	movtne	r1, #39207	; 0x9927
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     4fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     500:	00130119 	andseq	r0, r3, r9, lsl r1
     504:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
     508:	0b3a0e03 	bleq	e83d1c <__core1_unwind_stub-0x17c2e4>
     50c:	0b390b3b 	bleq	e43200 <__core1_unwind_stub-0x1bce00>
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	13491927 	movtne	r1, #39207	; 0x9927
     514:	06120111 			; <UNDEFINED> instruction: 0x06120111
     518:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     51c:	00130119 	andseq	r0, r3, r9, lsl r1
     520:	00261e00 	eoreq	r1, r6, r0, lsl #28
     524:	01000000 	mrseq	r0, (UNDEF: 0)
     528:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     52c:	0e030b13 	vmoveq.32	d3[0], r0
     530:	17550e1b 	smmlane	r5, fp, lr, r0
     534:	17100111 			; <UNDEFINED> instruction: 0x17100111
     538:	24020000 	strcs	r0, [r2], #-0
     53c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     540:	0008030b 	andeq	r0, r8, fp, lsl #6
     544:	00160300 	andseq	r0, r6, r0, lsl #6
     548:	0b3a0e03 	bleq	e83d5c <__core1_unwind_stub-0x17c2a4>
     54c:	0b390b3b 	bleq	e43240 <__core1_unwind_stub-0x1bcdc0>
     550:	00001349 	andeq	r1, r0, r9, asr #6
     554:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
     558:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     55c:	0b0b0024 	bleq	2c05f4 <__core1_unwind_stub-0xd3fa0c>
     560:	0e030b3e 	vmoveq.16	d3[0], r0
     564:	04060000 	streq	r0, [r6], #-0
     568:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
     56c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
     570:	3b0b3a13 	blcc	2cedc4 <__core1_unwind_stub-0xd3123c>
     574:	010b390b 	tsteq	fp, fp, lsl #18
     578:	07000013 	smladeq	r0, r3, r0, r0
     57c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     580:	00000b1c 	andeq	r0, r0, ip, lsl fp
     584:	03001608 	movweq	r1, #1544	; 0x608
     588:	3b0b3a0e 	blcc	2cedc8 <__core1_unwind_stub-0xd31238>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     590:	09000013 	stmdbeq	r0, {r0, r1, r4}
     594:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     598:	0b3a0b0b 	bleq	e831cc <__core1_unwind_stub-0x17ce34>
     59c:	0b39053b 	bleq	e41a90 <__core1_unwind_stub-0x1be570>
     5a0:	00001301 	andeq	r1, r0, r1, lsl #6
     5a4:	03000d0a 	movweq	r0, #3338	; 0xd0a
     5a8:	3b0b3a08 	blcc	2cedd0 <__core1_unwind_stub-0xd31230>
     5ac:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     5b0:	000b3813 	andeq	r3, fp, r3, lsl r8
     5b4:	000d0b00 	andeq	r0, sp, r0, lsl #22
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0b3a0e03 	bleq	e83dcc <__core1_unwind_stub-0x17c234>
     5bc:	0b39053b 	bleq	e41ab0 <__core1_unwind_stub-0x1be550>
     5c0:	0b381349 	bleq	e052ec <__core1_unwind_stub-0x1fad14>
     5c4:	0f0c0000 	svceq	0x000c0000
     5c8:	000b0b00 	andeq	r0, fp, r0, lsl #22
     5cc:	000f0d00 	andeq	r0, pc, r0, lsl #26
     5d0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     5d4:	150e0000 	strne	r0, [lr, #-0]
     5d8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     5dc:	00130113 	andseq	r0, r3, r3, lsl r1
     5e0:	00050f00 	andeq	r0, r5, r0, lsl #30
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	00001349 	andeq	r1, r0, r9, asr #6
     5e8:	0b011710 	bleq	46230 <__core1_unwind_stub-0xfb9dd0>
     5ec:	3b0b3a0b 	blcc	2cee20 <__core1_unwind_stub-0xd311e0>
     5f0:	010b390b 	tsteq	fp, fp, lsl #18
     5f4:	11000013 	tstne	r0, r3, lsl r0
     5f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     5fc:	0b3b0b3a 	bleq	ec32ec <__core1_unwind_stub-0x13cd14>
     600:	13490b39 	movtne	r0, #39737	; 0x9b39
     604:	01120000 	tsteq	r2, r0
     608:	01134901 	tsteq	r3, r1, lsl #18
     60c:	13000013 	movwne	r0, #19
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	13490021 	movtne	r0, #36897	; 0x9021
     614:	00000b2f 	andeq	r0, r0, pc, lsr #22
     618:	0b011314 	bleq	45270 <__core1_unwind_stub-0xfbad90>
     61c:	3b0b3a0b 	blcc	2cee50 <__core1_unwind_stub-0xd311b0>
     620:	010b390b 	tsteq	fp, fp, lsl #18
     624:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     628:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     62c:	0b3b0b3a 	bleq	ec331c <__core1_unwind_stub-0x13cce4>
     630:	13490b39 	movtne	r0, #39737	; 0x9b39
     634:	00000b38 	andeq	r0, r0, r8, lsr fp
     638:	03011316 	movweq	r1, #4886	; 0x1316
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	3a0b0b0e 	bcc	2c327c <__core1_unwind_stub-0xd3cd84>
     640:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     644:	0013010b 	andseq	r0, r3, fp, lsl #2
     648:	000d1700 	andeq	r1, sp, r0, lsl #14
     64c:	0b3a0803 	bleq	e82660 <__core1_unwind_stub-0x17d9a0>
     650:	0b390b3b 	bleq	e43344 <__core1_unwind_stub-0x1bccbc>
     654:	0b381349 	bleq	e05380 <__core1_unwind_stub-0x1fac80>
     658:	13180000 	tstne	r8, #0
     65c:	0b0e0301 	bleq	381268 <__core1_unwind_stub-0xc7ed98>
     660:	3b0b3a05 	blcc	2cee7c <__core1_unwind_stub-0xd31184>
     664:	010b390b 	tsteq	fp, fp, lsl #18
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	19000013 	stmdbne	r0, {r0, r1, r4}
     66c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     670:	0b3b0b3a 	bleq	ec3360 <__core1_unwind_stub-0x13cca0>
     674:	13490b39 	movtne	r0, #39737	; 0x9b39
     678:	00000538 	andeq	r0, r0, r8, lsr r5
     67c:	2700151a 	smladcs	r0, sl, r5, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	1b000019 	blne	6ec <__core1_unwind_stub-0xfff914>
     684:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     688:	0b3a050b 	bleq	e81abc <__core1_unwind_stub-0x17e544>
     68c:	0b39053b 	bleq	e41b80 <__core1_unwind_stub-0x1be480>
     690:	00001301 	andeq	r1, r0, r1, lsl #6
     694:	03000d1c 	movweq	r0, #3356	; 0xd1c
     698:	3b0b3a0e 	blcc	2ceed8 <__core1_unwind_stub-0xd31128>
     69c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     6a0:	00053813 	andeq	r3, r5, r3, lsl r8
     6a4:	01131d00 	tsteq	r3, r0, lsl #26
     6a8:	0b3a0b0b 	bleq	e832dc <__core1_unwind_stub-0x17cd24>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	0b39053b 	bleq	e41ba0 <__core1_unwind_stub-0x1be460>
     6b0:	00001301 	andeq	r1, r0, r1, lsl #6
     6b4:	0b01171e 	bleq	46334 <__core1_unwind_stub-0xfb9ccc>
     6b8:	3b0b3a0b 	blcc	2ceeec <__core1_unwind_stub-0xd31114>
     6bc:	010b3905 	tsteq	fp, r5, lsl #18
     6c0:	1f000013 	svcne	0x00000013
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     6c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6cc:	13490b39 	movtne	r0, #39737	; 0x9b39
     6d0:	13200000 	nopne	{0}	; <UNPREDICTABLE>
     6d4:	3c0e0300 	stccc	3, cr0, [lr], {-0}
     6d8:	21000019 	tstcs	r0, r9, lsl r0
     6dc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     6e0:	00001301 	andeq	r1, r0, r1, lsl #6
     6e4:	03003422 	movweq	r3, #1058	; 0x422
     6e8:	3b0b3a0e 	blcc	2cef28 <__core1_unwind_stub-0xd310d8>
     6ec:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     6f0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     6f4:	23000019 	movwcs	r0, #25
     6f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     6fc:	0b3b0b3a 	bleq	ec33ec <__core1_unwind_stub-0x13cc14>
     700:	13490b39 	movtne	r0, #39737	; 0x9b39
     704:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     70c:	03193f01 	tsteq	r9, #1, 30
     710:	3b0b3a0e 	blcc	2cef50 <__core1_unwind_stub-0xd310b0>
     714:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     718:	11134919 	tstne	r3, r9, lsl r9
     71c:	40061201 	andmi	r1, r6, r1, lsl #4
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     724:	00001301 	andeq	r1, r0, r1, lsl #6
     728:	03000525 	movweq	r0, #1317	; 0x525
     72c:	3b0b3a0e 	blcc	2cef6c <__core1_unwind_stub-0xd31094>
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     734:	00180213 	andseq	r0, r8, r3, lsl r2
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	00342600 	eorseq	r2, r4, r0, lsl #12
     73c:	0b3a0e03 	bleq	e83f50 <__core1_unwind_stub-0x17c0b0>
     740:	0b39053b 	bleq	e41c34 <__core1_unwind_stub-0x1be3cc>
     744:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	0b270000 	bleq	9c0750 <__core1_unwind_stub-0x63f8b0>
     74c:	00175501 	andseq	r5, r7, r1, lsl #10
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	00052800 	andeq	r2, r5, r0, lsl #16
     754:	0b3a0803 	bleq	e82768 <__core1_unwind_stub-0x17d898>
     758:	0b39053b 	bleq	e41c4c <__core1_unwind_stub-0x1be3b4>
     75c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     760:	26290000 	strtcs	r0, [r9], -r0
     764:	2a000000 	bcs	76c <__core1_unwind_stub-0xfff894>
     768:	08030034 	stmdaeq	r3, {r2, r4, r5}
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     770:	13490b39 	movtne	r0, #39737	; 0x9b39
     774:	00001802 	andeq	r1, r0, r2, lsl #16
     778:	11010b2b 	tstne	r1, fp, lsr #22
     77c:	01061201 	tsteq	r6, r1, lsl #4
     780:	2c000013 	stccs	0, cr0, [r0], {19}
     784:	0111010b 	tsteq	r1, fp, lsl #2
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	00000612 	andeq	r0, r0, r2, lsl r6
     78c:	4900212d 	stmdbmi	r0, {r0, r2, r3, r5, r8, sp}
     790:	00052f13 	andeq	r2, r5, r3, lsl pc
     794:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     798:	0b3a0e03 	bleq	e83fac <__core1_unwind_stub-0x17c054>
     79c:	0b39053b 	bleq	e41c90 <__core1_unwind_stub-0x1be370>
     7a0:	13491927 	movtne	r1, #39207	; 0x9927
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7ac:	00130119 	andseq	r0, r3, r9, lsl r1
     7b0:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
     7b4:	0b3a0e03 	bleq	e83fc8 <__core1_unwind_stub-0x17c038>
     7b8:	0b39053b 	bleq	e41cac <__core1_unwind_stub-0x1be354>
     7bc:	13491927 	movtne	r1, #39207	; 0x9927
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     7c8:	00130119 	andseq	r0, r3, r9, lsl r1
     7cc:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     7d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7d8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	01111349 	tsteq	r1, r9, asr #6
     7e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     7e4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     7e8:	31000013 	tstcc	r0, r3, lsl r0
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     7f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7f4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     7f8:	00000b57 	andeq	r0, r0, r7, asr fp
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	31000532 	tstcc	r0, r2, lsr r5
     800:	00180213 	andseq	r0, r8, r3, lsl r2
     804:	011d3300 	tsteq	sp, r0, lsl #6
     808:	01111331 	tsteq	r1, r1, lsr r3
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	0b580612 	bleq	160205c <__end__+0x5e603c>
     810:	0b570559 	bleq	15c1d7c <__end__+0x5a5d5c>
     814:	00001301 	andeq	r1, r0, r1, lsl #6
     818:	31003434 	tstcc	r0, r4, lsr r4
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	00180213 	andseq	r0, r8, r3, lsl r2
     820:	002e3500 	eoreq	r3, lr, r0, lsl #10
     824:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     82c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     830:	01111349 	tsteq	r1, r9, asr #6
     834:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	00194297 	mulseq	r9, r7, r2
     83c:	012e3600 			; <UNDEFINED> instruction: 0x012e3600
     840:	0b3a0e03 	bleq	e84054 <__core1_unwind_stub-0x17bfac>
     844:	0b39053b 	bleq	e41d38 <__core1_unwind_stub-0x1be2c8>
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	0b201927 	bleq	806cec <__core1_unwind_stub-0x7f9314>
     84c:	00001301 	andeq	r1, r0, r1, lsl #6
     850:	03000537 	movweq	r0, #1335	; 0x537
     854:	3b0b3a0e 	blcc	2cf094 <__core1_unwind_stub-0xd30f6c>
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     85c:	38000013 	stmdacc	r0, {r0, r1, r4}
     860:	0e03012e 	adfeqsp	f0, f3, #0.5
     864:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     868:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     86c:	0b201349 	bleq	805598 <__core1_unwind_stub-0x7faa68>
     870:	00001301 	andeq	r1, r0, r1, lsl #6
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	03003439 	movweq	r3, #1081	; 0x439
     878:	3b0b3a0e 	blcc	2cf0b8 <__core1_unwind_stub-0xd30f48>
     87c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	3a000013 	bcc	8d4 <__core1_unwind_stub-0xfff72c>
     884:	0e03012e 	adfeqsp	f0, f3, #0.5
     888:	0b3b0b3a 	bleq	ec3578 <__core1_unwind_stub-0x13ca88>
     88c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	13010b20 	movwne	r0, #6944	; 0x1b20
     894:	053b0000 	ldreq	r0, [fp, #-0]!
     898:	3a0e0300 	bcc	3814a0 <__core1_unwind_stub-0xc7eb60>
     89c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	0013490b 	andseq	r4, r3, fp, lsl #18
     8a4:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
     8a8:	0b3a0e03 	bleq	e840bc <__core1_unwind_stub-0x17bf44>
     8ac:	0b390b3b 	bleq	e435a0 <__core1_unwind_stub-0x1bca60>
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	13491927 	movtne	r1, #39207	; 0x9927
     8b4:	13010b20 	movwne	r0, #6944	; 0x1b20
     8b8:	343d0000 	ldrtcc	r0, [sp], #-0
     8bc:	3a0e0300 	bcc	3814c4 <__core1_unwind_stub-0xc7eb3c>
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     8c8:	012e3e00 			; <UNDEFINED> instruction: 0x012e3e00
     8cc:	0b3a0e03 	bleq	e840e0 <__core1_unwind_stub-0x17bf20>
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	0b390b3b 	bleq	e435c4 <__core1_unwind_stub-0x1bca3c>
     8d4:	13491927 	movtne	r1, #39207	; 0x9927
     8d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    return ALT_E_SUCCESS;
     8e0:	3f000019 	svccc	0x00000019
}
     8e4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     8e8:	0b3b0b3a 	bleq	ec35d8 <__core1_unwind_stub-0x13ca28>
     8ec:	13490b39 	movtne	r0, #39737	; 0x9b39
     8f0:	00001802 	andeq	r1, r0, r2, lsl #16
     8f4:	00001840 	andeq	r1, r0, r0, asr #16
     8f8:	11010000 	mrsne	r0, (UNDEF: 1)
     8fc:	130e2501 	movwne	r2, #58625	; 0xe501
     900:	1b0e030b 	blne	381534 <__core1_unwind_stub-0xc7eacc>
     904:	1117550e 	tstne	r7, lr, lsl #10
     908:	00171001 	andseq	r1, r7, r1
     90c:	00240200 	eoreq	r0, r4, r0, lsl #4
     910:	0b3e0b0b 	bleq	f83544 <__core1_unwind_stub-0x7cabc>
     914:	00000803 	andeq	r0, r0, r3, lsl #16
     918:	03001603 	movweq	r1, #1539	; 0x603
     91c:	3b0b3a0e 	blcc	2cf15c <__core1_unwind_stub-0xd30ea4>
     920:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     924:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     928:	0b0b0024 	bleq	2c09c0 <__core1_unwind_stub-0xd3f640>
     92c:	0e030b3e 	vmoveq.16	d3[0], r0
     930:	13050000 	movwne	r0, #20480	; 0x5000
     934:	0b0e0301 	bleq	381540 <__core1_unwind_stub-0xc7eac0>
     938:	3b0b3a0b 	blcc	2cf16c <__core1_unwind_stub-0xd30e94>
     93c:	0013010b 	andseq	r0, r3, fp, lsl #2
     940:	000d0600 	andeq	r0, sp, r0, lsl #12
     944:	13490e03 	movtne	r0, #40451	; 0x9e03
     948:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
     94c:	0f070000 	svceq	0x00070000
     950:	000b0b00 	andeq	r0, fp, r0, lsl #22
     954:	00160800 	andseq	r0, r6, r0, lsl #16
     958:	0b3a0e03 	bleq	e8416c <__core1_unwind_stub-0x17be94>
     95c:	0b39053b 	bleq	e41e50 <__core1_unwind_stub-0x1be1b0>
     960:	00001349 	andeq	r1, r0, r9, asr #6
     964:	0b011709 	bleq	46590 <__core1_unwind_stub-0xfb9a70>
     968:	3b0b3a0b 	blcc	2cf19c <__core1_unwind_stub-0xd30e64>
     96c:	010b390b 	tsteq	fp, fp, lsl #18
     970:	0a000013 	beq	9c4 <__core1_unwind_stub-0xfff63c>
     974:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     978:	0b3b0b3a 	bleq	ec3668 <__core1_unwind_stub-0x13c998>
     97c:	13490b39 	movtne	r0, #39737	; 0x9b39
     980:	010b0000 	mrseq	r0, (UNDEF: 11)
     984:	01134901 	tsteq	r3, r1, lsl #18
     988:	0c000013 	stceq	0, cr0, [r0], {19}
     98c:	13490021 	movtne	r0, #36897	; 0x9021
     990:	00000b2f 	andeq	r0, r0, pc, lsr #22
     994:	0b01130d 	bleq	455d0 <__core1_unwind_stub-0xfbaa30>
     998:	3b0b3a0b 	blcc	2cf1cc <__core1_unwind_stub-0xd30e34>
     99c:	010b390b 	tsteq	fp, fp, lsl #18
     9a0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     9a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     9a8:	0b3b0b3a 	bleq	ec3698 <__core1_unwind_stub-0x13c968>
     9ac:	13490b39 	movtne	r0, #39737	; 0x9b39
     9b0:	00000b38 	andeq	r0, r0, r8, lsr fp
     9b4:	0301130f 	movweq	r1, #4879	; 0x130f
     9b8:	3a0b0b0e 	bcc	2c35f8 <__core1_unwind_stub-0xd3ca08>
     9bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9c0:	0013010b 	andseq	r0, r3, fp, lsl #2
     9c4:	000d1000 	andeq	r1, sp, r0
     9c8:	0b3a0803 	bleq	e829dc <__core1_unwind_stub-0x17d624>
     9cc:	0b390b3b 	bleq	e436c0 <__core1_unwind_stub-0x1bc940>
     9d0:	0b381349 	bleq	e056fc <__core1_unwind_stub-0x1fa904>
     9d4:	0f110000 	svceq	0x00110000
     9d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     9dc:	12000013 	andne	r0, r0, #19
     9e0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     9e4:	0b3a050b 	bleq	e81e18 <__core1_unwind_stub-0x17e1e8>
     9e8:	0b390b3b 	bleq	e436dc <__core1_unwind_stub-0x1bc924>
     9ec:	00001301 	andeq	r1, r0, r1, lsl #6
     9f0:	03000d13 	movweq	r0, #3347	; 0xd13
     9f4:	3b0b3a0e 	blcc	2cf234 <__core1_unwind_stub-0xd30dcc>
     9f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     9fc:	00053813 	andeq	r3, r5, r3, lsl r8
     a00:	00151400 	andseq	r1, r5, r0, lsl #8
     a04:	00001927 	andeq	r1, r0, r7, lsr #18
     a08:	27011515 	smladcs	r1, r5, r5, r1
     a0c:	01134919 	tsteq	r3, r9, lsl r9
     a10:	16000013 			; <UNDEFINED> instruction: 0x16000013
     a14:	13490005 	movtne	r0, #36869	; 0x9005
     a18:	26170000 	ldrcs	r0, [r7], -r0
     a1c:	00134900 	andseq	r4, r3, r0, lsl #18
     a20:	01131800 	tsteq	r3, r0, lsl #16
     a24:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     a28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a2c:	13010b39 	movwne	r0, #6969	; 0x1b39
     a30:	0d190000 	ldceq	0, cr0, [r9, #-0]
     a34:	3a0e0300 	bcc	38163c <__core1_unwind_stub-0xc7e9c4>
     a38:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a3c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     a40:	1a00000b 	bne	a74 <__core1_unwind_stub-0xfff58c>
     a44:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a4c:	13490b39 	movtne	r0, #39737	; 0x9b39
     a50:	00000538 	andeq	r0, r0, r8, lsr r5
     a54:	0301131b 	movweq	r1, #4891	; 0x131b
     a58:	3a0b0b0e 	bcc	2c3698 <__core1_unwind_stub-0xd3c968>
     a5c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a60:	0013010b 	andseq	r0, r3, fp, lsl #2
     a64:	01131c00 	tsteq	r3, r0, lsl #24
     a68:	0b3a0b0b 	bleq	e8369c <__core1_unwind_stub-0x17c964>
     a6c:	0b39053b 	bleq	e41f60 <__core1_unwind_stub-0x1be0a0>
     a70:	00001301 	andeq	r1, r0, r1, lsl #6
     a74:	0b01171d 	bleq	466f0 <__core1_unwind_stub-0xfb9910>
     a78:	3b0b3a0b 	blcc	2cf2ac <__core1_unwind_stub-0xd30d54>
     a7c:	010b3905 	tsteq	fp, r5, lsl #18
     a80:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     a84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a8c:	13490b39 	movtne	r0, #39737	; 0x9b39
     a90:	131f0000 	tstne	pc, #0
     a94:	3c0e0300 	stccc	3, cr0, [lr], {-0}
     a98:	20000019 	andcs	r0, r0, r9, lsl r0
     a9c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     aa0:	00001301 	andeq	r1, r0, r1, lsl #6
     aa4:	03003421 	movweq	r3, #1057	; 0x421
     aa8:	3b0b3a0e 	blcc	2cf2e8 <__core1_unwind_stub-0xd30d18>
     aac:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ab0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     ab4:	22000019 	andcs	r0, r0, #25
     ab8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     abc:	0b3b0b3a 	bleq	ec37ac <__core1_unwind_stub-0x13c854>
     ac0:	13490b39 	movtne	r0, #39737	; 0x9b39
     ac4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     ac8:	34230000 	strtcc	r0, [r3], #-0
     acc:	3a134700 	bcc	4d26d4 <__core1_unwind_stub-0xb2d92c>
     ad0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ad4:	0018020b 	andseq	r0, r8, fp, lsl #4
     ad8:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
     adc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     ae0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ae4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     ae8:	01111349 	tsteq	r1, r9, asr #6
     aec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     af0:	01194296 			; <UNDEFINED> instruction: 0x01194296
     af4:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     af8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     afc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b00:	13490b39 	movtne	r0, #39737	; 0x9b39
     b04:	00001802 	andeq	r1, r0, r2, lsl #16
     b08:	03003426 	movweq	r3, #1062	; 0x426
     b0c:	3b0b3a0e 	blcc	2cf34c <__core1_unwind_stub-0xd30cb4>
     b10:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     b14:	00180213 	andseq	r0, r8, r3, lsl r2
     b18:	00342700 	eorseq	r2, r4, r0, lsl #14
     b1c:	0b3a0803 	bleq	e82b30 <__core1_unwind_stub-0x17d4d0>
     b20:	0b39053b 	bleq	e42014 <__core1_unwind_stub-0x1bdfec>
     b24:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b28:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     b2c:	3a0e0301 	bcc	381738 <__core1_unwind_stub-0xc7e8c8>
     b30:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b34:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b38:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b3c:	96184006 	ldrls	r4, [r8], -r6
     b40:	13011942 	movwne	r1, #6466	; 0x1942
     b44:	05290000 	streq	r0, [r9, #-0]!
     b48:	3a080300 	bcc	201750 <__core1_unwind_stub-0xdfe8b0>
     b4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b50:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b54:	2a000018 	bcs	bbc <__core1_unwind_stub-0xfff444>
     b58:	0e03012e 	adfeqsp	f0, f3, #0.5
     b5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b60:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     b64:	01111349 	tsteq	r1, r9, asr #6
     b68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b6c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b70:	2b000013 	blcs	bc4 <__core1_unwind_stub-0xfff43c>
     b74:	0e03012e 	adfeqsp	f0, f3, #0.5
     b78:	0b3b0b3a 	bleq	ec3868 <__core1_unwind_stub-0x13c798>
     b7c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     b80:	01111349 	tsteq	r1, r9, asr #6
     b84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b88:	01194296 			; <UNDEFINED> instruction: 0x01194296
     b8c:	2c000013 	stccs	0, cr0, [r0], {19}
     b90:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b94:	0b3b0b3a 	bleq	ec3884 <__core1_unwind_stub-0x13c77c>
     b98:	13490b39 	movtne	r0, #39737	; 0x9b39
     b9c:	00001802 	andeq	r1, r0, r2, lsl #16
     ba0:	0300052d 	movweq	r0, #1325	; 0x52d
     ba4:	3b0b3a08 	blcc	2cf3cc <__core1_unwind_stub-0xd30c34>
     ba8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     bac:	00180213 	andseq	r0, r8, r3, lsl r2
     bb0:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     bb4:	0b3a0e03 	bleq	e843c8 <__core1_unwind_stub-0x17bc38>
     bb8:	0b390b3b 	bleq	e438ac <__core1_unwind_stub-0x1bc754>
     bbc:	13491927 	movtne	r1, #39207	; 0x9927
     bc0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     bc4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     bc8:	00130119 	andseq	r0, r3, r9, lsl r1
     bcc:	00342f00 	eorseq	r2, r4, r0, lsl #30
     bd0:	0b3a0803 	bleq	e82be4 <__core1_unwind_stub-0x17d41c>
     bd4:	0b390b3b 	bleq	e438c8 <__core1_unwind_stub-0x1bc738>
     bd8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     bdc:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
     be0:	3a0e0301 	bcc	3817ec <__core1_unwind_stub-0xc7e814>
     be4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     be8:	1119270b 	tstne	r9, fp, lsl #14
     bec:	40061201 	andmi	r1, r6, r1, lsl #4
     bf0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     bf4:	00001301 	andeq	r1, r0, r1, lsl #6
     bf8:	3f012e31 	svccc	0x00012e31
     bfc:	3a0e0319 	bcc	381868 <__core1_unwind_stub-0xc7e798>
     c00:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c04:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     c08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c0c:	96184006 	ldrls	r4, [r8], -r6
     c10:	13011942 	movwne	r1, #6466	; 0x1942
     c14:	18320000 	ldmdane	r2!, {}	; <UNPREDICTABLE>
     c18:	33000000 	movwcc	r0, #0
     c1c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c20:	0b3b0b3a 	bleq	ec3910 <__core1_unwind_stub-0x13c6f0>
     c24:	13490b39 	movtne	r0, #39737	; 0x9b39
     c28:	00001802 	andeq	r1, r0, r2, lsl #16
     c2c:	03012e34 	movweq	r2, #7732	; 0x1e34
     c30:	3b0b3a0e 	blcc	2cf470 <__core1_unwind_stub-0xd30b90>
     c34:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     c38:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c3c:	97184006 	ldrls	r4, [r8, -r6]
     c40:	13011942 	movwne	r1, #6466	; 0x1942
     c44:	26350000 	ldrtcs	r0, [r5], -r0
     c48:	36000000 	strcc	r0, [r0], -r0
     c4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c50:	0b3a0e03 	bleq	e84464 <__core1_unwind_stub-0x17bb9c>
     c54:	0b390b3b 	bleq	e43948 <__core1_unwind_stub-0x1bc6b8>
     c58:	13491927 	movtne	r1, #39207	; 0x9927
     c5c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c60:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     c64:	00000019 	andeq	r0, r0, r9, lsl r0
     c68:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     c6c:	030b130e 	movweq	r1, #45838	; 0xb30e
     c70:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     c74:	10011117 	andne	r1, r1, r7, lsl r1
     c78:	02000017 	andeq	r0, r0, #23
     c7c:	0b0b0024 	bleq	2c0d14 <__core1_unwind_stub-0xd3f2ec>
     c80:	0e030b3e 	vmoveq.16	d3[0], r0
     c84:	16030000 	strne	r0, [r3], -r0
     c88:	3a0e0300 	bcc	381890 <__core1_unwind_stub-0xc7e770>
     c8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c90:	0013490b 	andseq	r4, r3, fp, lsl #18
     c94:	00240400 	eoreq	r0, r4, r0, lsl #8
     c98:	0b3e0b0b 	bleq	f838cc <__core1_unwind_stub-0x7c734>
     c9c:	00000803 	andeq	r0, r0, r3, lsl #16
     ca0:	03010405 	movweq	r0, #5125	; 0x1405
     ca4:	0b0b3e0e 	bleq	2d04e4 <__core1_unwind_stub-0xd2fb1c>
     ca8:	3a13490b 	bcc	4d30dc <__core1_unwind_stub-0xb2cf24>
     cac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cb0:	0013010b 	andseq	r0, r3, fp, lsl #2
     cb4:	00280600 	eoreq	r0, r8, r0, lsl #12
     cb8:	0b1c0e03 	bleq	7044cc <__core1_unwind_stub-0x8fbb34>
     cbc:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     cc0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     cc4:	08000005 	stmdaeq	r0, {r0, r2}
     cc8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     ccc:	0b3a0b0b 	bleq	e83900 <__core1_unwind_stub-0x17c700>
     cd0:	0b390b3b 	bleq	e439c4 <__core1_unwind_stub-0x1bc63c>
     cd4:	00001301 	andeq	r1, r0, r1, lsl #6
     cd8:	03000d09 	movweq	r0, #3337	; 0xd09
     cdc:	3b0b3a0e 	blcc	2cf51c <__core1_unwind_stub-0xd30ae4>
     ce0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ce4:	000b3813 	andeq	r3, fp, r3, lsl r8
     ce8:	000d0a00 	andeq	r0, sp, r0, lsl #20
     cec:	0b3a0803 	bleq	e82d00 <__core1_unwind_stub-0x17d300>
     cf0:	0b390b3b 	bleq	e439e4 <__core1_unwind_stub-0x1bc61c>
     cf4:	0b381349 	bleq	e05a20 <__core1_unwind_stub-0x1fa5e0>
     cf8:	0f0b0000 	svceq	0x000b0000
     cfc:	000b0b00 	andeq	r0, fp, r0, lsl #22
     d00:	01040c00 	tsteq	r4, r0, lsl #24
     d04:	0b3e0e03 	bleq	f84518 <__core1_unwind_stub-0x7bae8>
     d08:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     d0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d10:	13010b39 	movwne	r0, #6969	; 0x1b39
     d14:	160d0000 	strne	r0, [sp], -r0
     d18:	3a0e0300 	bcc	381920 <__core1_unwind_stub-0xc7e6e0>
     d1c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d20:	0013490b 	andseq	r4, r3, fp, lsl #18
     d24:	01170e00 	tsteq	r7, r0, lsl #28
     d28:	0b3a0b0b 	bleq	e8395c <__core1_unwind_stub-0x17c6a4>
     d2c:	0b390b3b 	bleq	e43a20 <__core1_unwind_stub-0x1bc5e0>
     d30:	00001301 	andeq	r1, r0, r1, lsl #6
     d34:	03000d0f 	movweq	r0, #3343	; 0xd0f
     d38:	3b0b3a0e 	blcc	2cf578 <__core1_unwind_stub-0xd30a88>
     d3c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d40:	10000013 	andne	r0, r0, r3, lsl r0
     d44:	13490101 	movtne	r0, #37121	; 0x9101
     d48:	00001301 	andeq	r1, r0, r1, lsl #6
     d4c:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
     d50:	000b2f13 	andeq	r2, fp, r3, lsl pc
     d54:	01131200 	tsteq	r3, r0, lsl #4
     d58:	0b3a0b0b 	bleq	e8398c <__core1_unwind_stub-0x17c674>
     d5c:	0b390b3b 	bleq	e43a50 <__core1_unwind_stub-0x1bc5b0>
     d60:	00001301 	andeq	r1, r0, r1, lsl #6
     d64:	0b000f13 	bleq	49b8 <__core1_unwind_stub-0xffb648>
     d68:	0013490b 	andseq	r4, r3, fp, lsl #18
     d6c:	01131400 	tsteq	r3, r0, lsl #8
     d70:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     d74:	0b3b0b3a 	bleq	ec3a64 <__core1_unwind_stub-0x13c59c>
     d78:	13010b39 	movwne	r0, #6969	; 0x1b39
     d7c:	0d150000 	ldceq	0, cr0, [r5, #-0]
     d80:	3a0e0300 	bcc	381988 <__core1_unwind_stub-0xc7e678>
     d84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d88:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d8c:	16000005 	strne	r0, [r0], -r5
     d90:	19270015 	stmdbne	r7!, {r0, r2, r4}
     d94:	15170000 	ldrne	r0, [r7, #-0]
     d98:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     d9c:	00130113 	andseq	r0, r3, r3, lsl r1
     da0:	00051800 	andeq	r1, r5, r0, lsl #16
     da4:	00001349 	andeq	r1, r0, r9, asr #6
     da8:	49002619 	stmdbmi	r0, {r0, r3, r4, r9, sl, sp}
     dac:	1a000013 	bne	e00 <__core1_unwind_stub-0xfff200>
     db0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     db4:	0b3a050b 	bleq	e821e8 <__core1_unwind_stub-0x17de18>
     db8:	0b39053b 	bleq	e422ac <__core1_unwind_stub-0x1bdd54>
     dbc:	00001301 	andeq	r1, r0, r1, lsl #6
     dc0:	03000d1b 	movweq	r0, #3355	; 0xd1b
     dc4:	3b0b3a0e 	blcc	2cf604 <__core1_unwind_stub-0xd309fc>
     dc8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     dcc:	000b3813 	andeq	r3, fp, r3, lsl r8
     dd0:	000d1c00 	andeq	r1, sp, r0, lsl #24
     dd4:	0b3a0e03 	bleq	e845e8 <__core1_unwind_stub-0x17ba18>
     dd8:	0b39053b 	bleq	e422cc <__core1_unwind_stub-0x1bdd34>
     ddc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     de0:	131d0000 	tstne	sp, #0
     de4:	0b0e0301 	bleq	3819f0 <__core1_unwind_stub-0xc7e610>
     de8:	3b0b3a0b 	blcc	2cf61c <__core1_unwind_stub-0xd309e4>
     dec:	010b3905 	tsteq	fp, r5, lsl #18
     df0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     df4:	0b0b0113 	bleq	2c1248 <__core1_unwind_stub-0xd3edb8>
     df8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     dfc:	13010b39 	movwne	r0, #6969	; 0x1b39
     e00:	171f0000 	ldrne	r0, [pc, -r0]
     e04:	3a0b0b01 	bcc	2c3a10 <__core1_unwind_stub-0xd3c5f0>
     e08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e0c:	0013010b 	andseq	r0, r3, fp, lsl #2
     e10:	000d2000 	andeq	r2, sp, r0
     e14:	0b3a0e03 	bleq	e84628 <__core1_unwind_stub-0x17b9d8>
     e18:	0b39053b 	bleq	e4230c <__core1_unwind_stub-0x1bdcf4>
     e1c:	00001349 	andeq	r1, r0, r9, asr #6
     e20:	03001321 	movweq	r1, #801	; 0x321
     e24:	00193c0e 	andseq	r3, r9, lr, lsl #24
     e28:	01152200 	tsteq	r5, r0, lsl #4
     e2c:	13011927 	movwne	r1, #6439	; 0x1927
     e30:	34230000 	strtcc	r0, [r3], #-0
     e34:	3a0e0300 	bcc	381a3c <__core1_unwind_stub-0xc7e5c4>
     e38:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e3c:	3f13490b 	svccc	0x0013490b
     e40:	00193c19 	andseq	r3, r9, r9, lsl ip
     e44:	00342400 	eorseq	r2, r4, r0, lsl #8
     e48:	0b3a0e03 	bleq	e8465c <__core1_unwind_stub-0x17b9a4>
     e4c:	0b390b3b 	bleq	e43b40 <__core1_unwind_stub-0x1bc4c0>
     e50:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     e54:	0000193c 	andeq	r1, r0, ip, lsr r9
     e58:	03003425 	movweq	r3, #1061	; 0x425
     e5c:	3b0b3a0e 	blcc	2cf69c <__core1_unwind_stub-0xd30964>
     e60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e64:	00180213 	andseq	r0, r8, r3, lsl r2
     e68:	00342600 	eorseq	r2, r4, r0, lsl #12
     e6c:	0b3a1347 	bleq	e85b90 <__core1_unwind_stub-0x17a470>
     e70:	0b390b3b 	bleq	e43b64 <__core1_unwind_stub-0x1bc49c>
     e74:	00001802 	andeq	r1, r0, r2, lsl #16
     e78:	3f012e27 	svccc	0x00012e27
     e7c:	3a0e0319 	bcc	381ae8 <__core1_unwind_stub-0xc7e518>
     e80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e84:	1119270b 	tstne	r9, fp, lsl #14
     e88:	40061201 	andmi	r1, r6, r1, lsl #4
     e8c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     e90:	00001301 	andeq	r1, r0, r1, lsl #6
     e94:	03000528 	movweq	r0, #1320	; 0x528
     e98:	3b0b3a08 	blcc	2cf6c0 <__core1_unwind_stub-0xd30940>
     e9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ea0:	00180213 	andseq	r0, r8, r3, lsl r2
     ea4:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
     ea8:	0b3a0e03 	bleq	e846bc <__core1_unwind_stub-0x17b944>
     eac:	0b390b3b 	bleq	e43ba0 <__core1_unwind_stub-0x1bc460>
     eb0:	13491927 	movtne	r1, #39207	; 0x9927
     eb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     eb8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     ebc:	00130119 	andseq	r0, r3, r9, lsl r1
     ec0:	00052a00 	andeq	r2, r5, r0, lsl #20
     ec4:	0b3a0e03 	bleq	e846d8 <__core1_unwind_stub-0x17b928>
     ec8:	0b390b3b 	bleq	e43bbc <__core1_unwind_stub-0x1bc444>
     ecc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ed0:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     ed4:	3a0e0301 	bcc	381ae0 <__core1_unwind_stub-0xc7e520>
     ed8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     edc:	1119270b 	tstne	r9, fp, lsl #14
     ee0:	40061201 	andmi	r1, r6, r1, lsl #4
     ee4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     ee8:	01000000 	mrseq	r0, (UNDEF: 0)
     eec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     ef0:	0e030b13 	vmoveq.32	d3[0], r0
     ef4:	17550e1b 	smmlane	r5, fp, lr, r0
     ef8:	17100111 			; <UNDEFINED> instruction: 0x17100111
     efc:	24020000 	strcs	r0, [r2], #-0
     f00:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f04:	0008030b 	andeq	r0, r8, fp, lsl #6
     f08:	00240300 	eoreq	r0, r4, r0, lsl #6
     f0c:	0b3e0b0b 	bleq	f83b40 <__core1_unwind_stub-0x7c4c0>
     f10:	00000e03 	andeq	r0, r0, r3, lsl #28
     f14:	03001604 	movweq	r1, #1540	; 0x604
     f18:	3b0b3a0e 	blcc	2cf758 <__core1_unwind_stub-0xd308a8>
     f1c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f20:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     f24:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f28:	0b3b0b3a 	bleq	ec3c18 <__core1_unwind_stub-0x13c3e8>
     f2c:	13490b39 	movtne	r0, #39737	; 0x9b39
     f30:	17060000 	strne	r0, [r6, -r0]
     f34:	3a0b0b01 	bcc	2c3b40 <__core1_unwind_stub-0xd3c4c0>
     f38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f3c:	0013010b 	andseq	r0, r3, fp, lsl #2
     f40:	000d0700 	andeq	r0, sp, r0, lsl #14
     f44:	0b3a0e03 	bleq	e84758 <__core1_unwind_stub-0x17b8a8>
     f48:	0b390b3b 	bleq	e43c3c <__core1_unwind_stub-0x1bc3c4>
     f4c:	00001349 	andeq	r1, r0, r9, asr #6
     f50:	49010108 	stmdbmi	r1, {r3, r8}
     f54:	00130113 	andseq	r0, r3, r3, lsl r1
     f58:	00210900 	eoreq	r0, r1, r0, lsl #18
     f5c:	0b2f1349 	bleq	bc5c88 <__core1_unwind_stub-0x43a378>
     f60:	130a0000 	movwne	r0, #40960	; 0xa000
     f64:	3a0b0b01 	bcc	2c3b70 <__core1_unwind_stub-0xd3c490>
     f68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f6c:	0013010b 	andseq	r0, r3, fp, lsl #2
     f70:	000d0b00 	andeq	r0, sp, r0, lsl #22
     f74:	0b3a0e03 	bleq	e84788 <__core1_unwind_stub-0x17b878>
     f78:	0b390b3b 	bleq	e43c6c <__core1_unwind_stub-0x1bc394>
     f7c:	0b381349 	bleq	e05ca8 <__core1_unwind_stub-0x1fa358>
     f80:	0f0c0000 	svceq	0x000c0000
     f84:	000b0b00 	andeq	r0, fp, r0, lsl #22
     f88:	01130d00 	tsteq	r3, r0, lsl #26
     f8c:	0b0b0e03 	bleq	2c47a0 <__core1_unwind_stub-0xd3b860>
     f90:	0b3b0b3a 	bleq	ec3c80 <__core1_unwind_stub-0x13c380>
     f94:	13010b39 	movwne	r0, #6969	; 0x1b39
     f98:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     f9c:	3a080300 	bcc	201ba4 <__core1_unwind_stub-0xdfe45c>
     fa0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fa4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     fa8:	0f00000b 	svceq	0x0000000b
     fac:	0b0b000f 	bleq	2c0ff0 <__core1_unwind_stub-0xd3f010>
     fb0:	00001349 	andeq	r1, r0, r9, asr #6
     fb4:	03011310 	movweq	r1, #4880	; 0x1310
     fb8:	3a050b0e 	bcc	143bf8 <__core1_unwind_stub-0xebc408>
     fbc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fc0:	0013010b 	andseq	r0, r3, fp, lsl #2
     fc4:	000d1100 	andeq	r1, sp, r0, lsl #2
     fc8:	0b3a0e03 	bleq	e847dc <__core1_unwind_stub-0x17b824>
     fcc:	0b390b3b 	bleq	e43cc0 <__core1_unwind_stub-0x1bc340>
     fd0:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     fd4:	15120000 	ldrne	r0, [r2, #-0]
     fd8:	00192700 	andseq	r2, r9, r0, lsl #14
     fdc:	01151300 	tsteq	r5, r0, lsl #6
     fe0:	13491927 	movtne	r1, #39207	; 0x9927
     fe4:	00001301 	andeq	r1, r0, r1, lsl #6
     fe8:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
     fec:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     ff0:	13490026 	movtne	r0, #36902	; 0x9026
     ff4:	13160000 	tstne	r6, #0
     ff8:	0b0e0301 	bleq	381c04 <__core1_unwind_stub-0xc7e3fc>
     ffc:	3b0b3a05 	blcc	2cf818 <__core1_unwind_stub-0xd307e8>
    1000:	010b3905 	tsteq	fp, r5, lsl #18
    1004:	17000013 	smladne	r0, r3, r0, r0
    1008:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    100c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1010:	13490b39 	movtne	r0, #39737	; 0x9b39
    1014:	00000b38 	andeq	r0, r0, r8, lsr fp
    1018:	03000d18 	movweq	r0, #3352	; 0xd18
    101c:	3b0b3a0e 	blcc	2cf85c <__core1_unwind_stub-0xd307a4>
    1020:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1024:	00053813 	andeq	r3, r5, r3, lsl r8
    1028:	01131900 	tsteq	r3, r0, lsl #18
    102c:	0b0b0e03 	bleq	2c4840 <__core1_unwind_stub-0xd3b7c0>
    1030:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1034:	13010b39 	movwne	r0, #6969	; 0x1b39
    1038:	131a0000 	tstne	sl, #0
    103c:	3a0b0b01 	bcc	2c3c48 <__core1_unwind_stub-0xd3c3b8>
    1040:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1044:	0013010b 	andseq	r0, r3, fp, lsl #2
    1048:	01171b00 	tsteq	r7, r0, lsl #22
    104c:	0b3a0b0b 	bleq	e83c80 <__core1_unwind_stub-0x17c380>
    1050:	0b39053b 	bleq	e42544 <__core1_unwind_stub-0x1bdabc>
    1054:	00001301 	andeq	r1, r0, r1, lsl #6
    1058:	03000d1c 	movweq	r0, #3356	; 0xd1c
    105c:	3b0b3a0e 	blcc	2cf89c <__core1_unwind_stub-0xd30764>
    1060:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1064:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1068:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    106c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1070:	2701151e 	smladcs	r1, lr, r5, r1
    1074:	00130119 	andseq	r0, r3, r9, lsl r1
    1078:	00341f00 	eorseq	r1, r4, r0, lsl #30
    107c:	0b3a0e03 	bleq	e84890 <__core1_unwind_stub-0x17b770>
    1080:	0b39053b 	bleq	e42574 <__core1_unwind_stub-0x1bda8c>
    1084:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1088:	0000193c 	andeq	r1, r0, ip, lsr r9
    108c:	49003520 	stmdbmi	r0, {r5, r8, sl, ip, sp}
    1090:	21000013 	tstcs	r0, r3, lsl r0
    1094:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1098:	0b3b0b3a 	bleq	ec3d88 <__core1_unwind_stub-0x13c278>
    109c:	13490b39 	movtne	r0, #39737	; 0x9b39
    10a0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    10a4:	34220000 	strtcc	r0, [r2], #-0
    10a8:	3a0e0300 	bcc	381cb0 <__core1_unwind_stub-0xc7e350>
    10ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10b4:	23000018 	movwcs	r0, #24
    10b8:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
    10bc:	0b3b0b3a 	bleq	ec3dac <__core1_unwind_stub-0x13c254>
    10c0:	13010b39 	movwne	r0, #6969	; 0x1b39
    10c4:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    10c8:	03193f00 	tsteq	r9, #0, 30
    10cc:	3b0b3a0e 	blcc	2cf90c <__core1_unwind_stub-0xd306f4>
    10d0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    10d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10d8:	96184006 	ldrls	r4, [r8], -r6
    10dc:	00001942 	andeq	r1, r0, r2, asr #18
    10e0:	03012e25 	movweq	r2, #7717	; 0x1e25
    10e4:	3b0b3a0e 	blcc	2cf924 <__core1_unwind_stub-0xd306dc>
    10e8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    10ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10f0:	97184006 	ldrls	r4, [r8, -r6]
    10f4:	13011942 	movwne	r1, #6466	; 0x1942
    10f8:	05260000 	streq	r0, [r6, #-0]!
    10fc:	3a0e0300 	bcc	381d04 <__core1_unwind_stub-0xc7e2fc>
    1100:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1104:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1108:	27000018 	smladcs	r0, r8, r0, r0
    110c:	0111010b 	tsteq	r1, fp, lsl #2
    1110:	00000612 	andeq	r0, r0, r2, lsl r6
    1114:	03003428 	movweq	r3, #1064	; 0x428
    1118:	3b0b3a08 	blcc	2cf940 <__core1_unwind_stub-0xd306c0>
    111c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1120:	00180213 	andseq	r0, r8, r3, lsl r2
    1124:	11010000 	mrsne	r0, (UNDEF: 1)
    1128:	130e2501 	movwne	r2, #58625	; 0xe501
    112c:	1b0e030b 	blne	381d60 <__core1_unwind_stub-0xc7e2a0>
    1130:	1117550e 	tstne	r7, lr, lsl #10
    1134:	00171001 	andseq	r1, r7, r1
    1138:	00240200 	eoreq	r0, r4, r0, lsl #4
    113c:	0b3e0b0b 	bleq	f83d70 <__core1_unwind_stub-0x7c290>
    1140:	00000e03 	andeq	r0, r0, r3, lsl #28
    1144:	0b002403 	bleq	a158 <__core1_unwind_stub-0xff5ea8>
    1148:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    114c:	04000008 	streq	r0, [r0], #-8
    1150:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1154:	0b3b0b3a 	bleq	ec3e44 <__core1_unwind_stub-0x13c1bc>
    1158:	13490b39 	movtne	r0, #39737	; 0x9b39
    115c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1160:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1164:	03193f00 	tsteq	r9, #0, 30
    1168:	3b0b3a0e 	blcc	2cf9a8 <__core1_unwind_stub-0xd30658>
    116c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1170:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1174:	97184006 	ldrls	r4, [r8, -r6]
    1178:	00001942 	andeq	r1, r0, r2, asr #18
    117c:	03012e06 	movweq	r2, #7686	; 0x1e06
    1180:	3b0b3a0e 	blcc	2cf9c0 <__core1_unwind_stub-0xd30640>
    1184:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1188:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    118c:	96184006 	ldrls	r4, [r8], -r6
    1190:	13011942 	movwne	r1, #6466	; 0x1942
    1194:	0b070000 	bleq	1c119c <__core1_unwind_stub-0xe3ee64>
    1198:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    119c:	08000006 	stmdaeq	r0, {r1, r2}
    11a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    11a4:	0b3b0b3a 	bleq	ec3e94 <__core1_unwind_stub-0x13c16c>
    11a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    11ac:	00001802 	andeq	r1, r0, r2, lsl #16
    11b0:	0b000f09 	bleq	4ddc <__core1_unwind_stub-0xffb224>
    11b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    11b8:	11010000 	mrsne	r0, (UNDEF: 1)
    11bc:	130e2501 	movwne	r2, #58625	; 0xe501
    11c0:	1b0e030b 	blne	381df4 <__core1_unwind_stub-0xc7e20c>
    11c4:	1117550e 	tstne	r7, lr, lsl #10
    11c8:	00171001 	andseq	r1, r7, r1
    11cc:	00240200 	eoreq	r0, r4, r0, lsl #4
    11d0:	0b3e0b0b 	bleq	f83e04 <__core1_unwind_stub-0x7c1fc>
    11d4:	00000803 	andeq	r0, r0, r3, lsl #16
    11d8:	03001603 	movweq	r1, #1539	; 0x603
    11dc:	3b0b3a0e 	blcc	2cfa1c <__core1_unwind_stub-0xd305e4>
    11e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    11e4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    11e8:	0b0b0024 	bleq	2c1280 <__core1_unwind_stub-0xd3ed80>
    11ec:	0e030b3e 	vmoveq.16	d3[0], r0
    11f0:	26050000 	strcs	r0, [r5], -r0
    11f4:	00134900 	andseq	r4, r3, r0, lsl #18
    11f8:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
    11fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1200:	0b3b0b3a 	bleq	ec3ef0 <__core1_unwind_stub-0x13c110>
    1204:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1208:	01111349 	tsteq	r1, r9, asr #6
    120c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1210:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1214:	07000013 	smladeq	r0, r3, r0, r0
    1218:	08030005 	stmdaeq	r3, {r0, r2}
    121c:	0b3b0b3a 	bleq	ec3f0c <__core1_unwind_stub-0x13c0f4>
    1220:	13490b39 	movtne	r0, #39737	; 0x9b39
    1224:	00001802 	andeq	r1, r0, r2, lsl #16
    1228:	03003408 	movweq	r3, #1032	; 0x408
    122c:	3b0b3a08 	blcc	2cfa54 <__core1_unwind_stub-0xd305ac>
    1230:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1234:	00180213 	andseq	r0, r8, r3, lsl r2
    1238:	010b0900 	tsteq	fp, r0, lsl #18
    123c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1240:	00001301 	andeq	r1, r0, r1, lsl #6
    1244:	11010b0a 	tstne	r1, sl, lsl #22
    1248:	00061201 	andeq	r1, r6, r1, lsl #4
    124c:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1250:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1254:	0b000f0c 	bleq	4e8c <__core1_unwind_stub-0xffb174>
    1258:	0013490b 	andseq	r4, r3, fp, lsl #18
    125c:	00260d00 	eoreq	r0, r6, r0, lsl #26
    1260:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    1264:	03193f01 	tsteq	r9, #1, 30
    1268:	3b0b3a0e 	blcc	2cfaa8 <__core1_unwind_stub-0xd30558>
    126c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1270:	11134919 	tstne	r3, r9, lsl r9
    1274:	40061201 	andmi	r1, r6, r1, lsl #4
    1278:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    127c:	01000000 	mrseq	r0, (UNDEF: 0)
    1280:	06100011 			; <UNDEFINED> instruction: 0x06100011
    1284:	01120111 	tsteq	r2, r1, lsl r1
    1288:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    128c:	05130e25 	ldreq	r0, [r3, #-3621]	; 0xfffff1db
    1290:	01000000 	mrseq	r0, (UNDEF: 0)
    1294:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1298:	0e030b13 	vmoveq.32	d3[0], r0
    129c:	17550e1b 	smmlane	r5, fp, lr, r0
    12a0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    12a4:	24020000 	strcs	r0, [r2], #-0
    12a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    12ac:	000e030b 	andeq	r0, lr, fp, lsl #6
    12b0:	00160300 	andseq	r0, r6, r0, lsl #6
    12b4:	0b3a0e03 	bleq	e84ac8 <__core1_unwind_stub-0x17b538>
    12b8:	0b390b3b 	bleq	e43fac <__core1_unwind_stub-0x1bc054>
    12bc:	00001349 	andeq	r1, r0, r9, asr #6
    12c0:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    12c4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    12c8:	0b0b0024 	bleq	2c1360 <__core1_unwind_stub-0xd3eca0>
    12cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    12d0:	26060000 	strcs	r0, [r6], -r0
    12d4:	00134900 	andseq	r4, r3, r0, lsl #18
    12d8:	01040700 	tsteq	r4, r0, lsl #14
    12dc:	0b3e0e03 	bleq	f84af0 <__core1_unwind_stub-0x7b510>
    12e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    12e4:	0b3b0b3a 	bleq	ec3fd4 <__core1_unwind_stub-0x13c02c>
    12e8:	13010b39 	movwne	r0, #6969	; 0x1b39
    12ec:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    12f0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    12f4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    12f8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    12fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1300:	13490b39 	movtne	r0, #39737	; 0x9b39
    1304:	130a0000 	movwne	r0, #40960	; 0xa000
    1308:	0b0e0301 	bleq	381f14 <__core1_unwind_stub-0xc7e0ec>
    130c:	3b0b3a0b 	blcc	2cfb40 <__core1_unwind_stub-0xd304c0>
    1310:	010b3905 	tsteq	fp, r5, lsl #18
    1314:	0b000013 	bleq	1368 <__core1_unwind_stub-0xffec98>
    1318:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    131c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1320:	13490b39 	movtne	r0, #39737	; 0x9b39
    1324:	00000b38 	andeq	r0, r0, r8, lsr fp
    1328:	03000d0c 	movweq	r0, #3340	; 0xd0c
    132c:	3b0b3a0e 	blcc	2cfb6c <__core1_unwind_stub-0xd30494>
    1330:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1334:	000b3813 	andeq	r3, fp, r3, lsl r8
    1338:	000f0d00 	andeq	r0, pc, r0, lsl #26
    133c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1340:	0b000f0e 	bleq	4f80 <__core1_unwind_stub-0xffb080>
    1344:	0013490b 	andseq	r4, r3, fp, lsl #18
    1348:	01170f00 	tsteq	r7, r0, lsl #30
    134c:	0b3a0b0b 	bleq	e83f80 <__core1_unwind_stub-0x17c080>
    1350:	0b390b3b 	bleq	e44044 <__core1_unwind_stub-0x1bbfbc>
    1354:	00001301 	andeq	r1, r0, r1, lsl #6
    1358:	03000d10 	movweq	r0, #3344	; 0xd10
    135c:	3b0b3a0e 	blcc	2cfb9c <__core1_unwind_stub-0xd30464>
    1360:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1364:	11000013 	tstne	r0, r3, lsl r0
    1368:	13490101 	movtne	r0, #37121	; 0x9101
    136c:	00001301 	andeq	r1, r0, r1, lsl #6
    1370:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
    1374:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1378:	01131300 	tsteq	r3, r0, lsl #6
    137c:	0b3a0b0b 	bleq	e83fb0 <__core1_unwind_stub-0x17c050>
    1380:	0b390b3b 	bleq	e44074 <__core1_unwind_stub-0x1bbf8c>
    1384:	00001301 	andeq	r1, r0, r1, lsl #6
    1388:	03000d14 	movweq	r0, #3348	; 0xd14
    138c:	3b0b3a0e 	blcc	2cfbcc <__core1_unwind_stub-0xd30434>
    1390:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1394:	000b3813 	andeq	r3, fp, r3, lsl r8
    1398:	01131500 	tsteq	r3, r0, lsl #10
    139c:	0b0b0e03 	bleq	2c4bb0 <__core1_unwind_stub-0xd3b450>
    13a0:	0b3b0b3a 	bleq	ec4090 <__core1_unwind_stub-0x13bf70>
    13a4:	13010b39 	movwne	r0, #6969	; 0x1b39
    13a8:	0d160000 	ldceq	0, cr0, [r6, #-0]
    13ac:	3a080300 	bcc	201fb4 <__core1_unwind_stub-0xdfe04c>
    13b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    13b8:	1700000b 	strne	r0, [r0, -fp]
    13bc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    13c0:	0b3a050b 	bleq	e827f4 <__core1_unwind_stub-0x17d80c>
    13c4:	0b390b3b 	bleq	e440b8 <__core1_unwind_stub-0x1bbf48>
    13c8:	00001301 	andeq	r1, r0, r1, lsl #6
    13cc:	03000d18 	movweq	r0, #3352	; 0xd18
    13d0:	3b0b3a0e 	blcc	2cfc10 <__core1_unwind_stub-0xd303f0>
    13d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    13d8:	00053813 	andeq	r3, r5, r3, lsl r8
    13dc:	00151900 	andseq	r1, r5, r0, lsl #18
    13e0:	00001927 	andeq	r1, r0, r7, lsr #18
    13e4:	2701151a 	smladcs	r1, sl, r5, r1
    13e8:	01134919 	tsteq	r3, r9, lsl r9
    13ec:	1b000013 	blne	1440 <__core1_unwind_stub-0xffebc0>
    13f0:	13490005 	movtne	r0, #36869	; 0x9005
    13f4:	131c0000 	tstne	ip, #0
    13f8:	0b0e0301 	bleq	382004 <__core1_unwind_stub-0xc7dffc>
    13fc:	3b0b3a05 	blcc	2cfc18 <__core1_unwind_stub-0xd303e8>
    1400:	010b3905 	tsteq	fp, r5, lsl #18
    1404:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1408:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    140c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1410:	13490b39 	movtne	r0, #39737	; 0x9b39
    1414:	00000538 	andeq	r0, r0, r8, lsr r5
    1418:	0b01131e 	bleq	46098 <__core1_unwind_stub-0xfb9f68>
    141c:	3b0b3a0b 	blcc	2cfc50 <__core1_unwind_stub-0xd303b0>
    1420:	010b3905 	tsteq	fp, r5, lsl #18
    1424:	1f000013 	svcne	0x00000013
    1428:	0b0b0117 	bleq	2c188c <__core1_unwind_stub-0xd3e774>
    142c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1430:	13010b39 	movwne	r0, #6969	; 0x1b39
    1434:	0d200000 	stceq	0, cr0, [r0, #-0]
    1438:	3a0e0300 	bcc	382040 <__core1_unwind_stub-0xc7dfc0>
    143c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1440:	0013490b 	andseq	r4, r3, fp, lsl #18
    1444:	00132100 	andseq	r2, r3, r0, lsl #2
    1448:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    144c:	15220000 	strne	r0, [r2, #-0]!
    1450:	01192701 	tsteq	r9, r1, lsl #14
    1454:	23000013 	movwcs	r0, #19
    1458:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    145c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1460:	13490b39 	movtne	r0, #39737	; 0x9b39
    1464:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1468:	34240000 	strtcc	r0, [r4], #-0
    146c:	3a0e0300 	bcc	382074 <__core1_unwind_stub-0xc7df8c>
    1470:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1474:	3f13490b 	svccc	0x0013490b
    1478:	00193c19 	andseq	r3, r9, r9, lsl ip
    147c:	00212500 	eoreq	r2, r1, r0, lsl #10
    1480:	052f1349 	streq	r1, [pc, #-841]!	; 113f <__core1_unwind_stub-0xffeec1>
    1484:	34260000 	strtcc	r0, [r6], #-0
    1488:	3a0e0300 	bcc	382090 <__core1_unwind_stub-0xc7df70>
    148c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1490:	8813490b 	ldmdahi	r3, {r0, r1, r3, r8, fp, lr}
    1494:	18020501 	stmdane	r2, {r0, r8, sl}
    1498:	34270000 	strtcc	r0, [r7], #-0
    149c:	3a0e0300 	bcc	3820a4 <__core1_unwind_stub-0xc7df5c>
    14a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    14a8:	28000018 	stmdacs	r0, {r3, r4}
    14ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    14b8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    14bc:	34290000 	strtcc	r0, [r9], #-0
    14c0:	3a0e0300 	bcc	3820c8 <__core1_unwind_stub-0xc7df38>
    14c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    14cc:	2a000018 	bcs	1534 <__core1_unwind_stub-0xffeacc>
    14d0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    14d4:	0b3a0e03 	bleq	e84ce8 <__core1_unwind_stub-0x17b318>
    14d8:	0b39053b 	bleq	e429cc <__core1_unwind_stub-0x1bd634>
    14dc:	13491927 	movtne	r1, #39207	; 0x9927
    14e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    14e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    14e8:	2b000019 	blcs	1554 <__core1_unwind_stub-0xffeaac>
    14ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    14f0:	0b3a0e03 	bleq	e84d04 <__core1_unwind_stub-0x17b2fc>
    14f4:	0b39053b 	bleq	e429e8 <__core1_unwind_stub-0x1bd618>
    14f8:	13491927 	movtne	r1, #39207	; 0x9927
    14fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1500:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1504:	00130119 	andseq	r0, r3, r9, lsl r1
    1508:	00342c00 	eorseq	r2, r4, r0, lsl #24
    150c:	0b3a0803 	bleq	e83520 <__core1_unwind_stub-0x17cae0>
    1510:	0b39053b 	bleq	e42a04 <__core1_unwind_stub-0x1bd5fc>
    1514:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1518:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
    151c:	03193f01 	tsteq	r9, #1, 30
    1520:	3b0b3a0e 	blcc	2cfd60 <__core1_unwind_stub-0xd302a0>
    1524:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1528:	11134919 	tstne	r3, r9, lsl r9
    152c:	40061201 	andmi	r1, r6, r1, lsl #4
    1530:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1534:	00001301 	andeq	r1, r0, r1, lsl #6
    1538:	3f012e2e 	svccc	0x00012e2e
    153c:	3a0e0319 	bcc	3821a8 <__core1_unwind_stub-0xc7de58>
    1540:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1544:	1119270b 	tstne	r9, fp, lsl #14
    1548:	40061201 	andmi	r1, r6, r1, lsl #4
    154c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1550:	00001301 	andeq	r1, r0, r1, lsl #6
    1554:	0300052f 	movweq	r0, #1327	; 0x52f
    1558:	3b0b3a0e 	blcc	2cfd98 <__core1_unwind_stub-0xd30268>
    155c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1560:	00180213 	andseq	r0, r8, r3, lsl r2
    1564:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
    1568:	0b3a0e03 	bleq	e84d7c <__core1_unwind_stub-0x17b284>
    156c:	0b39053b 	bleq	e42a60 <__core1_unwind_stub-0x1bd5a0>
    1570:	13491927 	movtne	r1, #39207	; 0x9927
    1574:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1578:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    157c:	00130119 	andseq	r0, r3, r9, lsl r1
    1580:	010b3100 	mrseq	r3, (UNDEF: 27)
    1584:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1588:	00001301 	andeq	r1, r0, r1, lsl #6
    158c:	11010b32 	tstne	r1, r2, lsr fp
    1590:	00061201 	andeq	r1, r6, r1, lsl #4
    1594:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
    1598:	0b3a0e03 	bleq	e84dac <__core1_unwind_stub-0x17b254>
    159c:	0b39053b 	bleq	e42a90 <__core1_unwind_stub-0x1bd570>
    15a0:	01111927 	tsteq	r1, r7, lsr #18
    15a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15a8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    15ac:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
    15b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    15b4:	0b3a0e03 	bleq	e84dc8 <__core1_unwind_stub-0x17b238>
    15b8:	0b390b3b 	bleq	e442ac <__core1_unwind_stub-0x1bbd54>
    15bc:	01111927 	tsteq	r1, r7, lsr #18
    15c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
    15c8:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
    15cc:	08030034 	stmdaeq	r3, {r2, r4, r5}
    15d0:	0b3b0b3a 	bleq	ec42c0 <__core1_unwind_stub-0x13bd40>
    15d4:	13490b39 	movtne	r0, #39737	; 0x9b39
    15d8:	00001802 	andeq	r1, r0, r2, lsl #16
    15dc:	55010b36 	strpl	r0, [r1, #-2870]	; 0xfffff4ca
    15e0:	37000017 	smladcc	r0, r7, r0, r0
    15e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    15e8:	0b3a0e03 	bleq	e84dfc <__core1_unwind_stub-0x17b204>
    15ec:	0b390b3b 	bleq	e442e0 <__core1_unwind_stub-0x1bbd20>
    15f0:	13491927 	movtne	r1, #39207	; 0x9927
    15f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    15f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    15fc:	00130119 	andseq	r0, r3, r9, lsl r1
    1600:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
    1604:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1608:	0b3b0b3a 	bleq	ec42f8 <__core1_unwind_stub-0x13bd08>
    160c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1610:	01111349 	tsteq	r1, r9, asr #6
    1614:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1618:	01194297 			; <UNDEFINED> instruction: 0x01194297
    161c:	39000013 	stmdbcc	r0, {r0, r1, r4}
    1620:	0e03012e 	adfeqsp	f0, f3, #0.5
    1624:	0b3b0b3a 	bleq	ec4314 <__core1_unwind_stub-0x13bcec>
    1628:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    162c:	01111349 	tsteq	r1, r9, asr #6
    1630:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1634:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1638:	3a000013 	bcc	168c <__core1_unwind_stub-0xffe974>
    163c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1640:	0b3b0b3a 	bleq	ec4330 <__core1_unwind_stub-0x13bcd0>
    1644:	13490b39 	movtne	r0, #39737	; 0x9b39
    1648:	00001802 	andeq	r1, r0, r2, lsl #16
    164c:	03012e3b 	movweq	r2, #7739	; 0x1e3b
    1650:	3b0b3a0e 	blcc	2cfe90 <__core1_unwind_stub-0xd30170>
    1654:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1658:	11134919 	tstne	r3, r9, lsl r9
    165c:	40061201 	andmi	r1, r6, r1, lsl #4
    1660:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1664:	00001301 	andeq	r1, r0, r1, lsl #6
    1668:	03012e3c 	movweq	r2, #7740	; 0x1e3c
    166c:	3b0b3a0e 	blcc	2cfeac <__core1_unwind_stub-0xd30154>
    1670:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1674:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1678:	97184006 	ldrls	r4, [r8, -r6]
    167c:	13011942 	movwne	r1, #6466	; 0x1942
    1680:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
    1684:	3a080300 	bcc	20228c <__core1_unwind_stub-0xdfdd74>
    1688:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    168c:	1119270b 	tstne	r9, fp, lsl #14
    1690:	40061201 	andmi	r1, r6, r1, lsl #4
    1694:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1698:	01000000 	mrseq	r0, (UNDEF: 0)
    169c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    16a0:	0e030b13 	vmoveq.32	d3[0], r0
    16a4:	17550e1b 	smmlane	r5, fp, lr, r0
    16a8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    16ac:	24020000 	strcs	r0, [r2], #-0
    16b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    16b4:	000e030b 	andeq	r0, lr, fp, lsl #6
    16b8:	00160300 	andseq	r0, r6, r0, lsl #6
    16bc:	0b3a0e03 	bleq	e84ed0 <__core1_unwind_stub-0x17b130>
    16c0:	0b390b3b 	bleq	e443b4 <__core1_unwind_stub-0x1bbc4c>
    16c4:	00001349 	andeq	r1, r0, r9, asr #6
    16c8:	0b002404 	bleq	a6e0 <__core1_unwind_stub-0xff5920>
    16cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    16d0:	05000008 	streq	r0, [r0, #-8]
    16d4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    16d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16dc:	13490b39 	movtne	r0, #39737	; 0x9b39
    16e0:	17060000 	strne	r0, [r6, -r0]
    16e4:	3a0b0b01 	bcc	2c42f0 <__core1_unwind_stub-0xd3bd10>
    16e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    16f0:	000d0700 	andeq	r0, sp, r0, lsl #14
    16f4:	0b3a0e03 	bleq	e84f08 <__core1_unwind_stub-0x17b0f8>
    16f8:	0b390b3b 	bleq	e443ec <__core1_unwind_stub-0x1bbc14>
    16fc:	00001349 	andeq	r1, r0, r9, asr #6
    1700:	49010108 	stmdbmi	r1, {r3, r8}
    1704:	00130113 	andseq	r0, r3, r3, lsl r1
    1708:	00210900 	eoreq	r0, r1, r0, lsl #18
    170c:	0b2f1349 	bleq	bc6438 <__core1_unwind_stub-0x439bc8>
    1710:	130a0000 	movwne	r0, #40960	; 0xa000
    1714:	3a0b0b01 	bcc	2c4320 <__core1_unwind_stub-0xd3bce0>
    1718:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    171c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1720:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1724:	0b3a0e03 	bleq	e84f38 <__core1_unwind_stub-0x17b0c8>
    1728:	0b390b3b 	bleq	e4441c <__core1_unwind_stub-0x1bbbe4>
    172c:	0b381349 	bleq	e06458 <__core1_unwind_stub-0x1f9ba8>
    1730:	0f0c0000 	svceq	0x000c0000
    1734:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1738:	01130d00 	tsteq	r3, r0, lsl #26
    173c:	0b0b0e03 	bleq	2c4f50 <__core1_unwind_stub-0xd3b0b0>
    1740:	0b3b0b3a 	bleq	ec4430 <__core1_unwind_stub-0x13bbd0>
    1744:	13010b39 	movwne	r0, #6969	; 0x1b39
    1748:	0f0e0000 	svceq	0x000e0000
    174c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1750:	0f000013 	svceq	0x00000013
    1754:	13490026 	movtne	r0, #36902	; 0x9026
    1758:	34100000 	ldrcc	r0, [r0], #-0
    175c:	3a0e0300 	bcc	382364 <__core1_unwind_stub-0xc7dc9c>
    1760:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1764:	3f13490b 	svccc	0x0013490b
    1768:	00193c19 	andseq	r3, r9, r9, lsl ip
    176c:	000d1100 	andeq	r1, sp, r0, lsl #2
    1770:	0b3a0803 	bleq	e83784 <__core1_unwind_stub-0x17c87c>
    1774:	0b390b3b 	bleq	e44468 <__core1_unwind_stub-0x1bbb98>
    1778:	0b381349 	bleq	e064a4 <__core1_unwind_stub-0x1f9b5c>
    177c:	13120000 	tstne	r2, #0
    1780:	0b0e0301 	bleq	38238c <__core1_unwind_stub-0xc7dc74>
    1784:	3b0b3a05 	blcc	2cffa0 <__core1_unwind_stub-0xd30060>
    1788:	010b390b 	tsteq	fp, fp, lsl #18
    178c:	13000013 	movwne	r0, #19
    1790:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1794:	0b3b0b3a 	bleq	ec4484 <__core1_unwind_stub-0x13bb7c>
    1798:	13490b39 	movtne	r0, #39737	; 0x9b39
    179c:	00000538 	andeq	r0, r0, r8, lsr r5
    17a0:	27001514 	smladcs	r0, r4, r5, r1
    17a4:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    17a8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    17ac:	13011349 	movwne	r1, #4937	; 0x1349
    17b0:	05160000 	ldreq	r0, [r6, #-0]
    17b4:	00134900 	andseq	r4, r3, r0, lsl #18
    17b8:	01131700 	tsteq	r3, r0, lsl #14
    17bc:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    17c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    17c4:	13010b39 	movwne	r0, #6969	; 0x1b39
    17c8:	0d180000 	ldceq	0, cr0, [r8, #-0]
    17cc:	3a0e0300 	bcc	3823d4 <__core1_unwind_stub-0xc7dc2c>
    17d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17d4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    17d8:	1900000b 	stmdbne	r0, {r0, r1, r3}
    17dc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    17e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    17e4:	13490b39 	movtne	r0, #39737	; 0x9b39
    17e8:	00000538 	andeq	r0, r0, r8, lsr r5
    17ec:	0301131a 	movweq	r1, #4890	; 0x131a
    17f0:	3a0b0b0e 	bcc	2c4430 <__core1_unwind_stub-0xd3bbd0>
    17f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17f8:	0013010b 	andseq	r0, r3, fp, lsl #2
    17fc:	01131b00 	tsteq	r3, r0, lsl #22
    1800:	0b3a0b0b 	bleq	e84434 <__core1_unwind_stub-0x17bbcc>
    1804:	0b39053b 	bleq	e42cf8 <__core1_unwind_stub-0x1bd308>
    1808:	00001301 	andeq	r1, r0, r1, lsl #6
    180c:	0b01171c 	bleq	47484 <__core1_unwind_stub-0xfb8b7c>
    1810:	3b0b3a0b 	blcc	2d0044 <__core1_unwind_stub-0xd2ffbc>
    1814:	010b3905 	tsteq	fp, r5, lsl #18
    1818:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    181c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1820:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1824:	13490b39 	movtne	r0, #39737	; 0x9b39
    1828:	131e0000 	tstne	lr, #0
    182c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    1830:	1f000019 	svcne	0x00000019
    1834:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1838:	00001301 	andeq	r1, r0, r1, lsl #6
    183c:	03003420 	movweq	r3, #1056	; 0x420
    1840:	3b0b3a0e 	blcc	2d0080 <__core1_unwind_stub-0xd2ff80>
    1844:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1848:	3c193f13 	ldccc	15, cr3, [r9], {19}
    184c:	21000019 	tstcs	r0, r9, lsl r0
    1850:	00000021 	andeq	r0, r0, r1, lsr #32
    1854:	03010422 	movweq	r0, #5154	; 0x1422
    1858:	0b0b3e0e 	bleq	2d1098 <__core1_unwind_stub-0xd2ef68>
    185c:	3a13490b 	bcc	4d3c90 <__core1_unwind_stub-0xb2c370>
    1860:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1864:	0013010b 	andseq	r0, r3, fp, lsl #2
    1868:	00282300 	eoreq	r2, r8, r0, lsl #6
    186c:	0b1c0e03 	bleq	705080 <__core1_unwind_stub-0x8faf80>
    1870:	28240000 	stmdacs	r4!, {}	; <UNPREDICTABLE>
    1874:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1878:	25000005 	strcs	r0, [r0, #-5]
    187c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1880:	0b3b0b3a 	bleq	ec4570 <__core1_unwind_stub-0x13ba90>
    1884:	13490b39 	movtne	r0, #39737	; 0x9b39
    1888:	00001802 	andeq	r1, r0, r2, lsl #16
    188c:	3f012e26 	svccc	0x00012e26
    1890:	3a0e0319 	bcc	3824fc <__core1_unwind_stub-0xc7db04>
    1894:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1898:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    189c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    18a0:	97184006 	ldrls	r4, [r8, -r6]
    18a4:	13011942 	movwne	r1, #6466	; 0x1942
    18a8:	05270000 	streq	r0, [r7, #-0]!
    18ac:	3a080300 	bcc	2024b4 <__core1_unwind_stub-0xdfdb4c>
    18b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    18b8:	28000018 	stmdacs	r0, {r3, r4}
    18bc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    18c0:	0b3b0b3a 	bleq	ec45b0 <__core1_unwind_stub-0x13ba50>
    18c4:	13490b39 	movtne	r0, #39737	; 0x9b39
    18c8:	00001802 	andeq	r1, r0, r2, lsl #16
    18cc:	3f012e29 	svccc	0x00012e29
    18d0:	3a0e0319 	bcc	38253c <__core1_unwind_stub-0xc7dac4>
    18d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    18dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    18e0:	96184006 	ldrls	r4, [r8], -r6
    18e4:	13011942 	movwne	r1, #6466	; 0x1942
    18e8:	0b2a0000 	bleq	a818f0 <__core1_unwind_stub-0x57e710>
    18ec:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    18f0:	2b000006 	blcs	1910 <__core1_unwind_stub-0xffe6f0>
    18f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    18f8:	0b3b0b3a 	bleq	ec45e8 <__core1_unwind_stub-0x13ba18>
    18fc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1900:	00001802 	andeq	r1, r0, r2, lsl #16
    1904:	0000262c 	andeq	r2, r0, ip, lsr #12
    1908:	012e2d00 			; <UNDEFINED> instruction: 0x012e2d00
    190c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1910:	0b3b0b3a 	bleq	ec4600 <__core1_unwind_stub-0x13ba00>
    1914:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1918:	06120111 			; <UNDEFINED> instruction: 0x06120111
    191c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1920:	00130119 	andseq	r0, r3, r9, lsl r1
    1924:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
    1928:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    192c:	0b3b0b3a 	bleq	ec461c <__core1_unwind_stub-0x13b9e4>
    1930:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1934:	01111349 	tsteq	r1, r9, asr #6
    1938:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    193c:	00194296 	mulseq	r9, r6, r2
    1940:	11010000 	mrsne	r0, (UNDEF: 1)
    1944:	11061000 	mrsne	r1, (UNDEF: 6)
    1948:	03011201 	movweq	r1, #4609	; 0x1201
    194c:	250e1b0e 	strcs	r1, [lr, #-2830]	; 0xfffff4f2
    1950:	0005130e 	andeq	r1, r5, lr, lsl #6
    1954:	11010000 	mrsne	r0, (UNDEF: 1)
    1958:	11061000 	mrsne	r1, (UNDEF: 6)
    195c:	03011201 	movweq	r1, #4609	; 0x1201
    1960:	250e1b0e 	strcs	r1, [lr, #-2830]	; 0xfffff4f2
    1964:	0005130e 	andeq	r1, r5, lr, lsl #6
    1968:	11010000 	mrsne	r0, (UNDEF: 1)
    196c:	11061000 	mrsne	r1, (UNDEF: 6)
    1970:	03011201 	movweq	r1, #4609	; 0x1201
    1974:	250e1b0e 	strcs	r1, [lr, #-2830]	; 0xfffff4f2
    1978:	0005130e 	andeq	r1, r5, lr, lsl #6
    197c:	11010000 	mrsne	r0, (UNDEF: 1)
    1980:	130e2501 	movwne	r2, #58625	; 0xe501
    1984:	1b0e030b 	blne	3825b8 <__core1_unwind_stub-0xc7da48>
    1988:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    198c:	00171006 	andseq	r1, r7, r6
    1990:	00240200 	eoreq	r0, r4, r0, lsl #4
    1994:	0b3e0b0b 	bleq	f845c8 <__core1_unwind_stub-0x7ba38>
    1998:	00000e03 	andeq	r0, r0, r3, lsl #28
    199c:	0b002403 	bleq	a9b0 <__core1_unwind_stub-0xff5650>
    19a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    19a4:	04000008 	streq	r0, [r0], #-8
    19a8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    19ac:	0b3b0b3a 	bleq	ec469c <__core1_unwind_stub-0x13b964>
    19b0:	13490b39 	movtne	r0, #39737	; 0x9b39
    19b4:	0f050000 	svceq	0x00050000
    19b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    19bc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    19c0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    19c4:	13011349 	movwne	r1, #4937	; 0x1349
    19c8:	05070000 	streq	r0, [r7, #-0]
    19cc:	00134900 	andseq	r4, r3, r0, lsl #18
    19d0:	00260800 	eoreq	r0, r6, r0, lsl #16
    19d4:	34090000 	strcc	r0, [r9], #-0
    19d8:	3a0e0300 	bcc	3825e0 <__core1_unwind_stub-0xc7da20>
    19dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19e0:	3f13490b 	svccc	0x0013490b
    19e4:	00193c19 	andseq	r3, r9, r9, lsl ip
    19e8:	01040a00 	tsteq	r4, r0, lsl #20
    19ec:	0b3e0e03 	bleq	f85200 <__core1_unwind_stub-0x7ae00>
    19f0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    19f4:	0b3b0b3a 	bleq	ec46e4 <__core1_unwind_stub-0x13b91c>
    19f8:	13010b39 	movwne	r0, #6969	; 0x1b39
    19fc:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
    1a00:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1a04:	0c00000b 	stceq	0, cr0, [r0], {11}
    1a08:	13490101 	movtne	r0, #37121	; 0x9101
    1a0c:	00001301 	andeq	r1, r0, r1, lsl #6
    1a10:	0000210d 	andeq	r2, r0, sp, lsl #2
    1a14:	00260e00 	eoreq	r0, r6, r0, lsl #28
    1a18:	00001349 	andeq	r1, r0, r9, asr #6
    1a1c:	0300340f 	movweq	r3, #1039	; 0x40f
    1a20:	3b0b3a0e 	blcc	2d0260 <__core1_unwind_stub-0xd2fda0>
    1a24:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1a28:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1a2c:	10000019 	andne	r0, r0, r9, lsl r0
    1a30:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    1a34:	0000193c 	andeq	r1, r0, ip, lsr r9
    1a38:	27001511 	smladcs	r0, r1, r5, r1
    1a3c:	12000019 	andne	r0, r0, #25
    1a40:	0e030017 	mcreq	0, 0, r0, cr3, cr7, {0}
    1a44:	0000193c 	andeq	r1, r0, ip, lsr r9
    1a48:	03011313 	movweq	r1, #4883	; 0x1313
    1a4c:	3a0b0b0e 	bcc	2c468c <__core1_unwind_stub-0xd3b974>
    1a50:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a54:	0013010b 	andseq	r0, r3, fp, lsl #2
    1a58:	000d1400 	andeq	r1, sp, r0, lsl #8
    1a5c:	0b3a0e03 	bleq	e85270 <__core1_unwind_stub-0x17ad90>
    1a60:	0b39053b 	bleq	e42f54 <__core1_unwind_stub-0x1bd0ac>
    1a64:	0b381349 	bleq	e06790 <__core1_unwind_stub-0x1f9870>
    1a68:	21150000 	tstcs	r5, r0
    1a6c:	2f134900 	svccs	0x00134900
    1a70:	1600000b 	strne	r0, [r0], -fp
    1a74:	0e030104 	adfeqs	f0, f3, f4
    1a78:	0b0b0b3e 	bleq	2c4778 <__core1_unwind_stub-0xd3b888>
    1a7c:	0b3a1349 	bleq	e867a8 <__core1_unwind_stub-0x179858>
    1a80:	0b39053b 	bleq	e42f74 <__core1_unwind_stub-0x1bd08c>
    1a84:	00001301 	andeq	r1, r0, r1, lsl #6
    1a88:	3f012e17 	svccc	0x00012e17
    1a8c:	3a0e0319 	bcc	3826f8 <__core1_unwind_stub-0xc7d908>
    1a90:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a94:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1a98:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1a9c:	96184006 	ldrls	r4, [r8], -r6
    1aa0:	13011942 	movwne	r1, #6466	; 0x1942
    1aa4:	05180000 	ldreq	r0, [r8, #-0]
    1aa8:	3a080300 	bcc	2026b0 <__core1_unwind_stub-0xdfd950>
    1aac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ab0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1ab4:	1742b717 	smlaldne	fp, r2, r7, r7
    1ab8:	05190000 	ldreq	r0, [r9, #-0]
    1abc:	3a080300 	bcc	2026c4 <__core1_unwind_stub-0xdfd93c>
    1ac0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ac4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1ac8:	1a000018 	bne	1b30 <__core1_unwind_stub-0xffe4d0>
    1acc:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1ad0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ad4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ad8:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1adc:	00000017 	andeq	r0, r0, r7, lsl r0
    1ae0:	10001101 	andne	r1, r0, r1, lsl #2
    1ae4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    1ae8:	1b0e0301 	blne	3826f4 <__core1_unwind_stub-0xc7d90c>
    1aec:	130e250e 	movwne	r2, #58638	; 0xe50e
    1af0:	00000005 	andeq	r0, r0, r5
    1af4:	10001101 	andne	r1, r0, r1, lsl #2
    1af8:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    1afc:	1b0e0301 	blne	382708 <__core1_unwind_stub-0xc7d8f8>
    1b00:	130e250e 	movwne	r2, #58638	; 0xe50e
    1b04:	00000005 	andeq	r0, r0, r5

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
{
   0:	00000154 	andeq	r0, r0, r4, asr r1
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  14:	00000098 	muleq	r0, r8, r0
    ALT_PRINTF("\n");
  18:	01000004 	tsteq	r0, r4
  1c:	00000038 	andeq	r0, r0, r8, lsr r0
  20:	0100003c 	tsteq	r0, ip, lsr r0
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	00000054 	andeq	r0, r0, r4, asr r0
  28:	01000090 	swpeq	r0, r0, [r0]	; <UNPREDICTABLE>
  2c:	00000054 	andeq	r0, r0, r4, asr r0
  30:	010000e4 	smlatteq	r0, r4, r0, r0
  34:	00000158 	andeq	r0, r0, r8, asr r1
  38:	0100023c 	tsteq	r0, ip, lsr r2
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	00000190 	muleq	r0, r0, r1
  40:	010003cc 	smlabteq	r0, ip, r3, r0
  44:	00000220 	andeq	r0, r0, r0, lsr #4
  48:	010005ec 	smlatteq	r0, ip, r5, r0
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	0000006c 	andeq	r0, r0, ip, rrx
  50:	01000658 	tsteq	r0, r8, asr r6
  54:	00000040 	andeq	r0, r0, r0, asr #32
  58:	01000698 			; <UNDEFINED> instruction: 0x01000698
  5c:	00000040 	andeq	r0, r0, r0, asr #32
  60:	010006d8 	ldrdeq	r0, [r0, -r8]
  64:	0000006c 	andeq	r0, r0, ip, rrx
  68:	01000744 	tsteq	r0, r4, asr #14
  6c:	00000040 	andeq	r0, r0, r0, asr #32
}
  70:	01000784 	smlabbeq	r0, r4, r7, r0
  74:	00000068 	andeq	r0, r0, r8, rrx
  78:	010007ec 	smlatteq	r0, ip, r7, r0
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
  7c:	0000006c 	andeq	r0, r0, ip, rrx
  80:	01000858 	tsteq	r0, r8, asr r8
  84:	0000006c 	andeq	r0, r0, ip, rrx
  88:	010008c4 	smlabteq	r0, r4, r8, r0
  8c:	0000006c 	andeq	r0, r0, ip, rrx
  90:	01000930 	tsteq	r0, r0, lsr r9
      *(pmem->toptr)=0;
  94:	0000006c 	andeq	r0, r0, ip, rrx
  98:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
  9c:	0000006c 	andeq	r0, r0, ip, rrx
  a0:	01000a08 	tsteq	r0, r8, lsl #20
}
  a4:	0000006c 	andeq	r0, r0, ip, rrx
  a8:	01000a74 	tsteq	r0, r4, ror sl
  ac:	000000dc 	ldrdeq	r0, [r0], -ip
  b0:	01000b50 	tsteq	r0, r0, asr fp
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
  b4:	00000030 	andeq	r0, r0, r0, lsr r0
  b8:	01000b80 	smlabbeq	r0, r0, fp, r0
        break;
  bc:	00000030 	andeq	r0, r0, r0, lsr r0
    return ALT_E_SUCCESS;
  c0:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
  c4:	00000030 	andeq	r0, r0, r0, lsr r0
        return ALT_E_ERROR;
  c8:	01000be0 	smlatteq	r0, r0, fp, r0
}
  cc:	00000068 	andeq	r0, r0, r8, rrx
  d0:	01000c48 	tsteq	r0, r8, asr #24
  d4:	000000a4 	andeq	r0, r0, r4, lsr #1
  d8:	01000cec 	smlatteq	r0, ip, ip, r0
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  dc:	00000068 	andeq	r0, r0, r8, rrx
  e0:	01000d54 	tsteq	r0, r4, asr sp
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	00000000 	andeq	r0, r0, r0
  ec:	0000005c 	andeq	r0, r0, ip, asr r0
  f0:	00000000 	andeq	r0, r0, r0
    return dst;
  f4:	0000005c 	andeq	r0, r0, ip, asr r0
}
  f8:	01000d7c 	tsteq	r0, ip, ror sp
  fc:	00000068 	andeq	r0, r0, r8, rrx
 100:	01000de4 	smlatteq	r0, r4, sp, r0
 104:	00000068 	andeq	r0, r0, r8, rrx
        return (int)cnt;
 108:	01000e4c 	tsteq	r0, ip, asr #28
 10c:	00000068 	andeq	r0, r0, r8, rrx
    errno = ENOSYS;
 110:	01000eb4 			; <UNDEFINED> instruction: 0x01000eb4
 114:	0000023c 	andeq	r0, r0, ip, lsr r2
 118:	00000000 	andeq	r0, r0, r0
 11c:	00000034 	andeq	r0, r0, r4, lsr r0
    return -1;
 120:	00000000 	andeq	r0, r0, r0
}
 124:	00000264 	andeq	r0, r0, r4, ror #4
 128:	00000000 	andeq	r0, r0, r0
 12c:	00000034 	andeq	r0, r0, r4, lsr r0
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 130:	00000000 	andeq	r0, r0, r0
 134:	00000264 	andeq	r0, r0, r4, ror #4
 138:	010010f0 	strdeq	r1, [r0, -r0]
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	00000048 	andeq	r0, r0, r8, asr #32
 140:	01001138 	tsteq	r0, r8, lsr r1
 144:	00000264 	andeq	r0, r0, r4, ror #4
 148:	00000000 	andeq	r0, r0, r0
 14c:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 158:	000001ec 	andeq	r0, r0, ip, ror #3
 15c:	17e60002 	strbne	r0, [r6, r2]!
 160:	00040000 	andeq	r0, r4, r0
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	00000000 	andeq	r0, r0, r0
 168:	0100139c 			; <UNDEFINED> instruction: 0x0100139c
 16c:	00000028 	andeq	r0, r0, r8, lsr #32
 170:	010013c4 	smlabteq	r0, r4, r3, r1
 174:	00000120 	andeq	r0, r0, r0, lsr #2
    return ALT_E_SUCCESS;
 178:	010014e4 	smlatteq	r0, r4, r4, r1
}
 17c:	00000158 	andeq	r0, r0, r8, asr r1
 180:	0100163c 	tsteq	r0, ip, lsr r6
 184:	0000015c 	andeq	r0, r0, ip, asr r1
    while (coalesce->size)
 188:	00000000 	andeq	r0, r0, r0
 18c:	00000090 	muleq	r0, r0, r0
            break;
 190:	00000000 	andeq	r0, r0, r0
    *segpa   = thissegpa;
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
 198:	01001798 			; <UNDEFINED> instruction: 0x01001798
 19c:	00000048 	andeq	r0, r0, r8, asr #32
    *segsize = thissegsize;
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1a8:	00000000 	andeq	r0, r0, r0
    return ALT_E_SUCCESS;
 1ac:	000000a4 	andeq	r0, r0, r4, lsr #1
}
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	000000a0 	andeq	r0, r0, r0, lsr #1
 1b8:	010017e0 	smlatteq	r0, r0, r7, r1
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
 1bc:	00000080 	andeq	r0, r0, r0, lsl #1
 1c0:	01001860 	tsteq	r0, r0, ror #16
 1c4:	00000080 	andeq	r0, r0, r0, lsl #1
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	000000d8 	ldrdeq	r0, [r0], -r8
    clkStep = 9 * clk100; /* 900MHz */
 1d0:	010018e0 	smlatteq	r0, r0, r8, r1
 1d4:	00000104 	andeq	r0, r0, r4, lsl #2
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	0000003c 	andeq	r0, r0, ip, lsr r0
 1e0:	00000000 	andeq	r0, r0, r0
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 1e4:	000000a8 	andeq	r0, r0, r8, lsr #1
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	000000a8 	andeq	r0, r0, r8, lsr #1
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	000000a8 	andeq	r0, r0, r8, lsr #1
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	000000a8 	andeq	r0, r0, r8, lsr #1
 200:	00000000 	andeq	r0, r0, r0
 204:	000000a8 	andeq	r0, r0, r8, lsr #1
 208:	00000000 	andeq	r0, r0, r0
 20c:	0000009c 	muleq	r0, ip, r0
 210:	00000000 	andeq	r0, r0, r0
        clkStep += clk100;
 214:	0000009c 	muleq	r0, ip, r0
 218:	00000000 	andeq	r0, r0, r0
 21c:	000000dc 	ldrdeq	r0, [r0], -ip
 220:	00000000 	andeq	r0, r0, r0
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 224:	000000dc 	ldrdeq	r0, [r0], -ip
 228:	00000000 	andeq	r0, r0, r0
 22c:	0000005c 	andeq	r0, r0, ip, asr r0
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 230:	010019e4 	smlatteq	r0, r4, r9, r1
 234:	00000074 	andeq	r0, r0, r4, ror r0
 238:	00000000 	andeq	r0, r0, r0
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
 240:	01001a58 	tsteq	r0, r8, asr sl
 244:	00000078 	andeq	r0, r0, r8, ror r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	00000080 	andeq	r0, r0, r0, lsl #1
 250:	01001ad0 	ldrdeq	r1, [r0, -r0]
 254:	00000084 	andeq	r0, r0, r4, lsl #1
 258:	00000000 	andeq	r0, r0, r0
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 25c:	0000002c 	andeq	r0, r0, ip, lsr #32
 260:	00000000 	andeq	r0, r0, r0
 264:	0000002c 	andeq	r0, r0, ip, lsr #32
 268:	00000000 	andeq	r0, r0, r0
 26c:	0000002c 	andeq	r0, r0, ip, lsr #32
 270:	00000000 	andeq	r0, r0, r0
 274:	0000002c 	andeq	r0, r0, ip, lsr #32
 278:	00000000 	andeq	r0, r0, r0
 27c:	0000002c 	andeq	r0, r0, ip, lsr #32
 280:	00000000 	andeq	r0, r0, r0
 284:	0000002c 	andeq	r0, r0, ip, lsr #32
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 288:	00000000 	andeq	r0, r0, r0
 28c:	0000002c 	andeq	r0, r0, ip, lsr #32
 290:	00000000 	andeq	r0, r0, r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 294:	0000002c 	andeq	r0, r0, ip, lsr #32
 298:	01001b54 	tsteq	r0, r4, asr fp
 29c:	0000002c 	andeq	r0, r0, ip, lsr #32
 2a0:	00000000 	andeq	r0, r0, r0
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
 2a4:	0000007c 	andeq	r0, r0, ip, ror r0
 2a8:	01001b80 	smlabbeq	r0, r0, fp, r1
 2ac:	00000154 	andeq	r0, r0, r4, asr r1
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000078 	andeq	r0, r0, r8, ror r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	00000078 	andeq	r0, r0, r8, ror r0
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
 2c8:	01001cd4 	ldrdeq	r1, [r0, -r4]
 2cc:	00000080 	andeq	r0, r0, r0, lsl #1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000084 	andeq	r0, r0, r4, lsl #1
 2d8:	00000000 	andeq	r0, r0, r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 2dc:	00000080 	andeq	r0, r0, r0, lsl #1
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2e8:	00000000 	andeq	r0, r0, r0
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 2ec:	00000044 	andeq	r0, r0, r4, asr #32
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 300:	00000000 	andeq	r0, r0, r0
 304:	0000002c 	andeq	r0, r0, ip, lsr #32
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
 310:	00000000 	andeq	r0, r0, r0
 314:	0000002c 	andeq	r0, r0, ip, lsr #32
 318:	01001d54 	tsteq	r0, r4, asr sp
 31c:	0000002c 	andeq	r0, r0, ip, lsr #32
 320:	00000000 	andeq	r0, r0, r0
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
 328:	01001d80 	smlabbeq	r0, r0, sp, r1
 32c:	0000002c 	andeq	r0, r0, ip, lsr #32
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
 330:	00000000 	andeq	r0, r0, r0
 334:	0000002c 	andeq	r0, r0, ip, lsr #32
 338:	00000000 	andeq	r0, r0, r0
 33c:	0000006c 	andeq	r0, r0, ip, rrx
	...
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
 348:	00000114 	andeq	r0, r0, r4, lsl r1
 34c:	28ea0002 	stmiacs	sl!, {r1}^
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 350:	00040000 	andeq	r0, r4, r0
 354:	00000000 	andeq	r0, r0, r0
 358:	01001dac 	smlatbeq	r0, ip, sp, r1
 35c:	00000024 	andeq	r0, r0, r4, lsr #32
 360:	01001dd0 	ldrdeq	r1, [r0, -r0]
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
 368:	00000000 	andeq	r0, r0, r0
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	01001dec 	smlatteq	r0, ip, sp, r1
 374:	0000008c 	andeq	r0, r0, ip, lsl #1
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 378:	00000000 	andeq	r0, r0, r0
 37c:	00000150 	andeq	r0, r0, r0, asr r1
 380:	00000000 	andeq	r0, r0, r0
 384:	00000168 	andeq	r0, r0, r8, ror #2
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000068 	andeq	r0, r0, r8, rrx
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
 390:	01001e78 	tsteq	r0, r8, ror lr
 394:	00000050 	andeq	r0, r0, r0, asr r0
 398:	00000000 	andeq	r0, r0, r0
 39c:	00000074 	andeq	r0, r0, r4, ror r0
 3a0:	01001ec8 	smlabteq	r0, r8, lr, r1
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
 3a4:	000000e0 	andeq	r0, r0, r0, ror #1
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	00000038 	andeq	r0, r0, r8, lsr r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	0000007c 	andeq	r0, r0, ip, ror r0
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
 3b8:	01001fa8 	smlatbeq	r0, r8, pc, r1	; <UNPREDICTABLE>
 3bc:	000000b4 	strheq	r0, [r0], -r4
 3c0:	0100205c 	qaddeq	r2, ip, r0
 3c4:	000000e0 	andeq	r0, r0, r0, ror #1
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	00000078 	andeq	r0, r0, r8, ror r0
 3d0:	0100213c 	tsteq	r0, ip, lsr r1
 3d4:	00000034 	andeq	r0, r0, r4, lsr r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	00000034 	andeq	r0, r0, r4, lsr r0
 3e0:	01002170 	tsteq	r0, r0, ror r1
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
 3e4:	00000068 	andeq	r0, r0, r8, rrx
 3e8:	010021d8 	ldrdeq	r2, [r0, -r8]
 3ec:	00000328 	andeq	r0, r0, r8, lsr #6
 3f0:	01002500 	tsteq	r0, r0, lsl #10
 3f4:	00000068 	andeq	r0, r0, r8, rrx
 3f8:	01002568 	tsteq	r0, r8, ror #10
 3fc:	00000060 	andeq	r0, r0, r0, rrx
 400:	010025c8 	smlabteq	r0, r8, r5, r2
 404:	00000124 	andeq	r0, r0, r4, lsr #2
 408:	010026ec 	smlatteq	r0, ip, r6, r2
 40c:	00000124 	andeq	r0, r0, r4, lsr #2
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
 410:	01002810 	tsteq	r0, r0, lsl r8
 414:	0000010c 	andeq	r0, r0, ip, lsl #2
 418:	0100291c 	tsteq	r0, ip, lsl r9
 41c:	00000110 	andeq	r0, r0, r0, lsl r1
 420:	01002a2c 	tsteq	r0, ip, lsr #20
 424:	00000048 	andeq	r0, r0, r8, asr #32
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
 428:	01002a74 	tsteq	r0, r4, ror sl
 42c:	00000dd8 	ldrdeq	r0, [r0], -r8
 430:	0100384c 	tsteq	r0, ip, asr #16
 434:	0000013c 	andeq	r0, r0, ip, lsr r1
 438:	00000000 	andeq	r0, r0, r0
 43c:	00000184 	andeq	r0, r0, r4, lsl #3
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
 440:	00000000 	andeq	r0, r0, r0
 444:	000000e0 	andeq	r0, r0, r0, ror #1
 448:	00000000 	andeq	r0, r0, r0
 44c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 450:	00000000 	andeq	r0, r0, r0
 454:	00000044 	andeq	r0, r0, r4, asr #32
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
 460:	00000084 	andeq	r0, r0, r4, lsl #1
 464:	45da0002 	ldrbmi	r0, [sl, #2]
 468:	00040000 	andeq	r0, r4, r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
 474:	00000030 	andeq	r0, r0, r0, lsr r0
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000090 	muleq	r0, r0, r0
 480:	00000000 	andeq	r0, r0, r0
 484:	000000b4 	strheq	r0, [r0], -r4
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000078 	andeq	r0, r0, r8, ror r0
 490:	00000000 	andeq	r0, r0, r0
 494:	00000068 	andeq	r0, r0, r8, rrx
 498:	01003988 	smlabbeq	r0, r8, r9, r3
 49c:	00000050 	andeq	r0, r0, r0, asr r0
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	00000048 	andeq	r0, r0, r8, asr #32
 4a8:	010039d8 	ldrdeq	r3, [r0, -r8]
 4ac:	0000006c 	andeq	r0, r0, ip, rrx
 4b0:	01003a44 	tsteq	r0, r4, asr #20
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
 4b4:	00000058 	andeq	r0, r0, r8, asr r0
 4b8:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
 4bc:	00000098 	muleq	r0, r8, r0
 4c0:	01003b34 	tsteq	r0, r4, lsr fp
 4c4:	0000013c 	andeq	r0, r0, ip, lsr r1
 4c8:	01003c70 	tsteq	r0, r0, ror ip
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
 4cc:	00000178 	andeq	r0, r0, r8, ror r1
 4d0:	01003de8 	smlatteq	r0, r8, sp, r3
 4d4:	0000081c 	andeq	r0, r0, ip, lsl r8
 4d8:	01004604 	tsteq	r0, r4, lsl #12
 4dc:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
	...
 4e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 4ec:	567e0002 	ldrbtpl	r0, [lr], -r2
 4f0:	00040000 	andeq	r0, r4, r0
 4f4:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
 4f8:	010048b8 			; <UNDEFINED> instruction: 0x010048b8
 4fc:	00000080 	andeq	r0, r0, r0, lsl #1
 500:	01004938 	tsteq	r0, r8, lsr r9
 504:	000000d8 	ldrdeq	r0, [r0], -r8
 508:	00000000 	andeq	r0, r0, r0
 50c:	0000007c 	andeq	r0, r0, ip, ror r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
 518:	0000002c 	andeq	r0, r0, ip, lsr #32
 51c:	63670002 	cmnvs	r7, #2
 520:	00040000 	andeq	r0, r4, r0
 524:	00000000 	andeq	r0, r0, r0
 528:	01004a10 	tsteq	r0, r0, lsl sl
 52c:	0000005c 	andeq	r0, r0, ip, asr r0
 530:	01004a6c 	tsteq	r0, ip, ror #20
 534:	0000002c 	andeq	r0, r0, ip, lsr #32
 538:	01004a98 			; <UNDEFINED> instruction: 0x01004a98
 53c:	000000bc 	strheq	r0, [r0], -ip
	...
 548:	00000024 	andeq	r0, r0, r4, lsr #32
 54c:	6e740002 	cdpvs	0, 7, cr0, cr4, cr2, {0}
 550:	00040000 	andeq	r0, r4, r0
 554:	00000000 	andeq	r0, r0, r0
 558:	01004b54 	tsteq	r0, r4, asr fp
 55c:	00000050 	andeq	r0, r0, r0, asr r0
 560:	01004ba4 	smlatbeq	r0, r4, fp, r4
 564:	0000000c 	andeq	r0, r0, ip
	...
 570:	0000002c 	andeq	r0, r0, ip, lsr #32
 574:	6f6e0002 	svcvs	0x006e0002
 578:	00040000 	andeq	r0, r4, r0
 57c:	00000000 	andeq	r0, r0, r0
 580:	01004bb4 			; <UNDEFINED> instruction: 0x01004bb4
 584:	00000074 	andeq	r0, r0, r4, ror r0
 588:	01004c28 	tsteq	r0, r8, lsr #24
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
 58c:	00000084 	andeq	r0, r0, r4, lsl #1
 590:	00000000 	andeq	r0, r0, r0
 594:	00000108 	andeq	r0, r0, r8, lsl #2
	...
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	717e0002 	cmnvc	lr, r2
 5a8:	00040000 	andeq	r0, r4, r0
 5ac:	00000000 	andeq	r0, r0, r0
 5b0:	01000000 	mrseq	r0, (UNDEF: 0)
 5b4:	00000004 	andeq	r0, r0, r4
	...
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
 5c0:	000000b4 	strheq	r0, [r0], -r4
 5c4:	71a40002 			; <UNDEFINED> instruction: 0x71a40002
 5c8:	00040000 	andeq	r0, r4, r0
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	01004cac 	smlatbeq	r0, ip, ip, r4
 5d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d8:	01004cc8 	smlabteq	r0, r8, ip, r4
 5dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e0:	01004ce4 	smlatteq	r0, r4, ip, r4
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
 5e4:	00000054 	andeq	r0, r0, r4, asr r0
 5e8:	01004d38 	tsteq	r0, r8, lsr sp
 5ec:	0000008c 	andeq	r0, r0, ip, lsl #1
 5f0:	01004dc4 	smlabteq	r0, r4, sp, r4
 5f4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5f8:	01004e94 			; <UNDEFINED> instruction: 0x01004e94
 5fc:	00000118 	andeq	r0, r0, r8, lsl r1
 600:	00000000 	andeq	r0, r0, r0
 604:	0000005c 	andeq	r0, r0, ip, asr r0
 608:	01004fac 	smlatbeq	r0, ip, pc, r4	; <UNPREDICTABLE>
 60c:	0000003c 	andeq	r0, r0, ip, lsr r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
 610:	00000000 	andeq	r0, r0, r0
 614:	00000030 	andeq	r0, r0, r0, lsr r0
 618:	00000000 	andeq	r0, r0, r0
 61c:	000000dc 	ldrdeq	r0, [r0], -ip
 620:	00000000 	andeq	r0, r0, r0
 624:	00000090 	muleq	r0, r0, r0
 628:	00000000 	andeq	r0, r0, r0
 62c:	00000084 	andeq	r0, r0, r4, lsl #1
 630:	00000000 	andeq	r0, r0, r0
 634:	00000028 	andeq	r0, r0, r8, lsr #32
 638:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
 63c:	000000ec 	andeq	r0, r0, ip, ror #1
 640:	00000000 	andeq	r0, r0, r0
 644:	0000006c 	andeq	r0, r0, ip, rrx
 648:	00000000 	andeq	r0, r0, r0
 64c:	00000044 	andeq	r0, r0, r4, asr #32
 650:	00000000 	andeq	r0, r0, r0
 654:	00000088 	andeq	r0, r0, r8, lsl #1
 658:	00000000 	andeq	r0, r0, r0
 65c:	0000006c 	andeq	r0, r0, ip, rrx
 660:	00000000 	andeq	r0, r0, r0
 664:	00000188 	andeq	r0, r0, r8, lsl #3
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
 668:	00000000 	andeq	r0, r0, r0
 66c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
 678:	00000054 	andeq	r0, r0, r4, asr r0
 67c:	84150002 	ldrhi	r0, [r5], #-2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
 680:	00040000 	andeq	r0, r4, r0
 684:	00000000 	andeq	r0, r0, r0
 688:	01004fe8 	smlatteq	r0, r8, pc, r4	; <UNPREDICTABLE>
 68c:	000000d8 	ldrdeq	r0, [r0], -r8
 690:	00000000 	andeq	r0, r0, r0
 694:	00000044 	andeq	r0, r0, r4, asr #32
 698:	00000000 	andeq	r0, r0, r0
 69c:	00000130 	andeq	r0, r0, r0, lsr r1
 6a0:	00000000 	andeq	r0, r0, r0
 6a4:	000000b4 	strheq	r0, [r0], -r4
 6a8:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
 6ac:	00000024 	andeq	r0, r0, r4, lsr #32
 6b0:	00000000 	andeq	r0, r0, r0
 6b4:	00000034 	andeq	r0, r0, r4, lsr r0
 6b8:	00000000 	andeq	r0, r0, r0
 6bc:	00000050 	andeq	r0, r0, r0, asr r0
 6c0:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
 6c4:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
 6d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d4:	93c40002 	bicls	r0, r4, #2
 6d8:	00040000 	andeq	r0, r4, r0
 6dc:	00000000 	andeq	r0, r0, r0
 6e0:	010050c0 	smlabteq	r0, r0, r0, r5
 6e4:	00000114 	andeq	r0, r0, r4, lsl r1
	...
 6f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f4:	93ea0002 	mvnls	r0, #2
 6f8:	00040000 	andeq	r0, r4, r0
 6fc:	00000000 	andeq	r0, r0, r0
 700:	010051d4 	ldrdeq	r5, [r0, -r4]
 704:	00000004 	andeq	r0, r0, r4
	...
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
 710:	0000001c 	andeq	r0, r0, ip, lsl r0
 714:	94100002 	ldrls	r0, [r0], #-2
 718:	00040000 	andeq	r0, r4, r0
 71c:	00000000 	andeq	r0, r0, r0
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
 720:	010051d8 	ldrdeq	r5, [r0, -r8]
 724:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
 730:	0000001c 	andeq	r0, r0, ip, lsl r0
 734:	94360002 	ldrtls	r0, [r6], #-2
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
 738:	00040000 	andeq	r0, r4, r0
 73c:	00000000 	andeq	r0, r0, r0
 740:	01005214 	tsteq	r0, r4, lsl r2
 744:	00000130 	andeq	r0, r0, r0, lsr r1
	...
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 750:	0000001c 	andeq	r0, r0, ip, lsl r0
 754:	9e1f0002 	cdpls	0, 1, cr0, cr15, cr2, {0}
 758:	00040000 	andeq	r0, r4, r0
 75c:	00000000 	andeq	r0, r0, r0
 760:	01005344 	tsteq	r0, r4, asr #6
 764:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 770:	0000001c 	andeq	r0, r0, ip, lsl r0
 774:	9e450002 	cdpls	0, 4, cr0, cr5, cr2, {0}
 778:	00040000 	andeq	r0, r4, r0
 77c:	00000000 	andeq	r0, r0, r0
 780:	0100536c 	tsteq	r0, ip, ror #6
 784:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
{
   0:	00000001 	andeq	r0, r0, r1
   4:	00000001 	andeq	r0, r0, r1
   8:	01000004 	tsteq	r0, r4
   c:	0100003c 	tsteq	r0, ip, lsr r0
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	0100003c 	tsteq	r0, ip, lsr r0
  14:	01000090 	swpeq	r0, r0, [r0]	; <UNPREDICTABLE>
    ALT_PRINTF("\n");
  18:	01000090 	swpeq	r0, r0, [r0]	; <UNPREDICTABLE>
  1c:	010000e4 	smlatteq	r0, r4, r0, r0
  20:	010000e4 	smlatteq	r0, r4, r0, r0
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	0100023c 	tsteq	r0, ip, lsr r2
  28:	0100023c 	tsteq	r0, ip, lsr r2
  2c:	010003cc 	smlabteq	r0, ip, r3, r0
  30:	010003cc 	smlabteq	r0, ip, r3, r0
  34:	010005ec 	smlatteq	r0, ip, r5, r0
  38:	010005ec 	smlatteq	r0, ip, r5, r0
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	01000658 	tsteq	r0, r8, asr r6
  40:	01000658 	tsteq	r0, r8, asr r6
  44:	01000698 			; <UNDEFINED> instruction: 0x01000698
  48:	01000698 			; <UNDEFINED> instruction: 0x01000698
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	010006d8 	ldrdeq	r0, [r0, -r8]
  50:	010006d8 	ldrdeq	r0, [r0, -r8]
  54:	01000744 	tsteq	r0, r4, asr #14
  58:	01000744 	tsteq	r0, r4, asr #14
  5c:	01000784 	smlabbeq	r0, r4, r7, r0
  60:	01000784 	smlabbeq	r0, r4, r7, r0
  64:	010007ec 	smlatteq	r0, ip, r7, r0
  68:	010007ec 	smlatteq	r0, ip, r7, r0
  6c:	01000858 	tsteq	r0, r8, asr r8
}
  70:	01000858 	tsteq	r0, r8, asr r8
  74:	010008c4 	smlabteq	r0, r4, r8, r0
  78:	010008c4 	smlabteq	r0, r4, r8, r0
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
  7c:	01000930 	tsteq	r0, r0, lsr r9
  80:	01000930 	tsteq	r0, r0, lsr r9
  84:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
  88:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
  8c:	01000a08 	tsteq	r0, r8, lsl #20
  90:	01000a08 	tsteq	r0, r8, lsl #20
      *(pmem->toptr)=0;
  94:	01000a74 	tsteq	r0, r4, ror sl
  98:	01000a74 	tsteq	r0, r4, ror sl
  9c:	01000b50 	tsteq	r0, r0, asr fp
  a0:	01000b50 	tsteq	r0, r0, asr fp
}
  a4:	01000b80 	smlabbeq	r0, r0, fp, r0
  a8:	01000b80 	smlabbeq	r0, r0, fp, r0
  ac:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
  b0:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
  b4:	01000be0 	smlatteq	r0, r0, fp, r0
  b8:	01000be0 	smlatteq	r0, r0, fp, r0
        break;
  bc:	01000c48 	tsteq	r0, r8, asr #24
    return ALT_E_SUCCESS;
  c0:	01000c48 	tsteq	r0, r8, asr #24
  c4:	01000cec 	smlatteq	r0, ip, ip, r0
        return ALT_E_ERROR;
  c8:	01000cec 	smlatteq	r0, ip, ip, r0
}
  cc:	01000d54 	tsteq	r0, r4, asr sp
  d0:	01000d54 	tsteq	r0, r4, asr sp
  d4:	01000d7c 	tsteq	r0, ip, ror sp
  d8:	00000001 	andeq	r0, r0, r1
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  dc:	00000001 	andeq	r0, r0, r1
  e0:	00000001 	andeq	r0, r0, r1
  e4:	00000001 	andeq	r0, r0, r1
  e8:	01000d7c 	tsteq	r0, ip, ror sp
  ec:	01000de4 	smlatteq	r0, r4, sp, r0
  f0:	01000de4 	smlatteq	r0, r4, sp, r0
    return dst;
  f4:	01000e4c 	tsteq	r0, ip, asr #28
}
  f8:	01000e4c 	tsteq	r0, ip, asr #28
  fc:	01000eb4 			; <UNDEFINED> instruction: 0x01000eb4
 100:	01000eb4 			; <UNDEFINED> instruction: 0x01000eb4
 104:	010010f0 	strdeq	r1, [r0, -r0]
        return (int)cnt;
 108:	00000001 	andeq	r0, r0, r1
 10c:	00000001 	andeq	r0, r0, r1
    errno = ENOSYS;
 110:	00000001 	andeq	r0, r0, r1
 114:	00000001 	andeq	r0, r0, r1
 118:	00000001 	andeq	r0, r0, r1
 11c:	00000001 	andeq	r0, r0, r1
    return -1;
 120:	00000001 	andeq	r0, r0, r1
}
 124:	00000001 	andeq	r0, r0, r1
 128:	010010f0 	strdeq	r1, [r0, -r0]
 12c:	01001138 	tsteq	r0, r8, lsr r1
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 130:	01001138 	tsteq	r0, r8, lsr r1
 134:	0100139c 			; <UNDEFINED> instruction: 0x0100139c
 138:	00000001 	andeq	r0, r0, r1
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	00000001 	andeq	r0, r0, r1
	...
 148:	010016c0 	smlabteq	r0, r0, r6, r1
 14c:	01001724 	tsteq	r0, r4, lsr #14
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 150:	01001728 	tsteq	r0, r8, lsr #14
 154:	01001754 	tsteq	r0, r4, asr r7
	...
 160:	0100139c 			; <UNDEFINED> instruction: 0x0100139c
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	010013c4 	smlabteq	r0, r4, r3, r1
 168:	010013c4 	smlabteq	r0, r4, r3, r1
 16c:	010014e4 	smlatteq	r0, r4, r4, r1
 170:	010014e4 	smlatteq	r0, r4, r4, r1
 174:	0100163c 	tsteq	r0, ip, lsr r6
    return ALT_E_SUCCESS;
 178:	0100163c 	tsteq	r0, ip, lsr r6
}
 17c:	01001798 			; <UNDEFINED> instruction: 0x01001798
 180:	00000001 	andeq	r0, r0, r1
 184:	00000001 	andeq	r0, r0, r1
    while (coalesce->size)
 188:	00000001 	andeq	r0, r0, r1
 18c:	00000001 	andeq	r0, r0, r1
            break;
 190:	01001798 			; <UNDEFINED> instruction: 0x01001798
    *segpa   = thissegpa;
 194:	010017e0 	smlatteq	r0, r0, r7, r1
 198:	00000001 	andeq	r0, r0, r1
 19c:	00000001 	andeq	r0, r0, r1
    *segsize = thissegsize;
 1a0:	00000001 	andeq	r0, r0, r1
 1a4:	00000001 	andeq	r0, r0, r1
 1a8:	00000001 	andeq	r0, r0, r1
    return ALT_E_SUCCESS;
 1ac:	00000001 	andeq	r0, r0, r1
}
 1b0:	010017e0 	smlatteq	r0, r0, r7, r1
 1b4:	01001860 	tsteq	r0, r0, ror #16
 1b8:	01001860 	tsteq	r0, r0, ror #16
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
 1bc:	010018e0 	smlatteq	r0, r0, r8, r1
 1c0:	00000001 	andeq	r0, r0, r1
 1c4:	00000001 	andeq	r0, r0, r1
 1c8:	010018e0 	smlatteq	r0, r0, r8, r1
 1cc:	010019e4 	smlatteq	r0, r4, r9, r1
    clkStep = 9 * clk100; /* 900MHz */
 1d0:	00000001 	andeq	r0, r0, r1
 1d4:	00000001 	andeq	r0, r0, r1
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	00000001 	andeq	r0, r0, r1
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 1e4:	00000001 	andeq	r0, r0, r1
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	00000001 	andeq	r0, r0, r1
 1f0:	00000001 	andeq	r0, r0, r1
 1f4:	00000001 	andeq	r0, r0, r1
 1f8:	00000001 	andeq	r0, r0, r1
 1fc:	00000001 	andeq	r0, r0, r1
 200:	00000001 	andeq	r0, r0, r1
 204:	00000001 	andeq	r0, r0, r1
 208:	00000001 	andeq	r0, r0, r1
 20c:	00000001 	andeq	r0, r0, r1
 210:	00000001 	andeq	r0, r0, r1
        clkStep += clk100;
 214:	00000001 	andeq	r0, r0, r1
 218:	00000001 	andeq	r0, r0, r1
 21c:	00000001 	andeq	r0, r0, r1
 220:	00000001 	andeq	r0, r0, r1
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 224:	00000001 	andeq	r0, r0, r1
 228:	010019e4 	smlatteq	r0, r4, r9, r1
 22c:	01001a58 	tsteq	r0, r8, asr sl
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 230:	00000001 	andeq	r0, r0, r1
 234:	00000001 	andeq	r0, r0, r1
 238:	01001a58 	tsteq	r0, r8, asr sl
 23c:	01001ad0 	ldrdeq	r1, [r0, -r0]
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
 240:	00000001 	andeq	r0, r0, r1
 244:	00000001 	andeq	r0, r0, r1
 248:	01001ad0 	ldrdeq	r1, [r0, -r0]
 24c:	01001b54 	tsteq	r0, r4, asr fp
 250:	00000001 	andeq	r0, r0, r1
 254:	00000001 	andeq	r0, r0, r1
 258:	00000001 	andeq	r0, r0, r1
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 25c:	00000001 	andeq	r0, r0, r1
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	00000001 	andeq	r0, r0, r1
 26c:	00000001 	andeq	r0, r0, r1
 270:	00000001 	andeq	r0, r0, r1
 274:	00000001 	andeq	r0, r0, r1
 278:	00000001 	andeq	r0, r0, r1
 27c:	00000001 	andeq	r0, r0, r1
 280:	00000001 	andeq	r0, r0, r1
 284:	00000001 	andeq	r0, r0, r1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 288:	00000001 	andeq	r0, r0, r1
 28c:	00000001 	andeq	r0, r0, r1
 290:	01001b54 	tsteq	r0, r4, asr fp
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 294:	01001b80 	smlabbeq	r0, r0, fp, r1
 298:	00000001 	andeq	r0, r0, r1
 29c:	00000001 	andeq	r0, r0, r1
 2a0:	01001b80 	smlabbeq	r0, r0, fp, r1
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
 2a4:	01001cd4 	ldrdeq	r1, [r0, -r4]
 2a8:	00000001 	andeq	r0, r0, r1
 2ac:	00000001 	andeq	r0, r0, r1
 2b0:	00000001 	andeq	r0, r0, r1
 2b4:	00000001 	andeq	r0, r0, r1
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	01001cd4 	ldrdeq	r1, [r0, -r4]
 2c4:	01001d54 	tsteq	r0, r4, asr sp
 2c8:	00000001 	andeq	r0, r0, r1
 2cc:	00000001 	andeq	r0, r0, r1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 2dc:	00000001 	andeq	r0, r0, r1
 2e0:	00000001 	andeq	r0, r0, r1
 2e4:	00000001 	andeq	r0, r0, r1
 2e8:	00000001 	andeq	r0, r0, r1
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 2ec:	00000001 	andeq	r0, r0, r1
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
 300:	00000001 	andeq	r0, r0, r1
 304:	00000001 	andeq	r0, r0, r1
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 308:	00000001 	andeq	r0, r0, r1
 30c:	00000001 	andeq	r0, r0, r1
 310:	01001d54 	tsteq	r0, r4, asr sp
 314:	01001d80 	smlabbeq	r0, r0, sp, r1
 318:	00000001 	andeq	r0, r0, r1
 31c:	00000001 	andeq	r0, r0, r1
 320:	01001d80 	smlabbeq	r0, r0, sp, r1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 324:	01001dac 	smlatbeq	r0, ip, sp, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
 330:	00000001 	andeq	r0, r0, r1
 334:	00000001 	andeq	r0, r0, r1
	...
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
 340:	00000001 	andeq	r0, r0, r1
 344:	00000001 	andeq	r0, r0, r1
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
	...
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 358:	01001dac 	smlatbeq	r0, ip, sp, r1
 35c:	01001dd0 	ldrdeq	r1, [r0, -r0]
 360:	01001dd0 	ldrdeq	r1, [r0, -r0]
 364:	01001dec 	smlatteq	r0, ip, sp, r1
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
 370:	01001dec 	smlatteq	r0, ip, sp, r1
 374:	01001e78 	tsteq	r0, r8, ror lr
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	00000001 	andeq	r0, r0, r1
 38c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
 390:	01001e78 	tsteq	r0, r8, ror lr
 394:	01001ec8 	smlabteq	r0, r8, lr, r1
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	01001ec8 	smlabteq	r0, r8, lr, r1
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
 3a4:	01001fa8 	smlatbeq	r0, r8, pc, r1	; <UNPREDICTABLE>
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
 3b8:	01001fa8 	smlatbeq	r0, r8, pc, r1	; <UNPREDICTABLE>
 3bc:	0100205c 	qaddeq	r2, ip, r0
 3c0:	0100205c 	qaddeq	r2, ip, r0
 3c4:	0100213c 	tsteq	r0, ip, lsr r1
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	0100213c 	tsteq	r0, ip, lsr r1
 3d4:	01002170 	tsteq	r0, r0, ror r1
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	01002170 	tsteq	r0, r0, ror r1
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
 3e4:	010021d8 	ldrdeq	r2, [r0, -r8]
 3e8:	010021d8 	ldrdeq	r2, [r0, -r8]
 3ec:	01002500 	tsteq	r0, r0, lsl #10
 3f0:	01002500 	tsteq	r0, r0, lsl #10
 3f4:	01002568 	tsteq	r0, r8, ror #10
 3f8:	01002568 	tsteq	r0, r8, ror #10
 3fc:	010025c8 	smlabteq	r0, r8, r5, r2
 400:	010025c8 	smlabteq	r0, r8, r5, r2
 404:	010026ec 	smlatteq	r0, ip, r6, r2
 408:	010026ec 	smlatteq	r0, ip, r6, r2
 40c:	01002810 	tsteq	r0, r0, lsl r8
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
 410:	01002810 	tsteq	r0, r0, lsl r8
 414:	0100291c 	tsteq	r0, ip, lsl r9
 418:	0100291c 	tsteq	r0, ip, lsl r9
 41c:	01002a2c 	tsteq	r0, ip, lsr #20
 420:	01002a2c 	tsteq	r0, ip, lsr #20
 424:	01002a74 	tsteq	r0, r4, ror sl
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
 428:	01002a74 	tsteq	r0, r4, ror sl
 42c:	0100384c 	tsteq	r0, ip, asr #16
 430:	0100384c 	tsteq	r0, ip, asr #16
 434:	01003988 	smlabbeq	r0, r8, r9, r3
 438:	00000001 	andeq	r0, r0, r1
 43c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
 440:	00000001 	andeq	r0, r0, r1
 444:	00000001 	andeq	r0, r0, r1
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	00000001 	andeq	r0, r0, r1
 46c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
 470:	00000001 	andeq	r0, r0, r1
 474:	00000001 	andeq	r0, r0, r1
 478:	00000001 	andeq	r0, r0, r1
 47c:	00000001 	andeq	r0, r0, r1
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
 488:	01003988 	smlabbeq	r0, r8, r9, r3
 48c:	010039d8 	ldrdeq	r3, [r0, -r8]
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	010039d8 	ldrdeq	r3, [r0, -r8]
 49c:	01003a44 	tsteq	r0, r4, asr #20
 4a0:	01003a44 	tsteq	r0, r4, asr #20
 4a4:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
 4a8:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
 4ac:	01003b34 	tsteq	r0, r4, lsr fp
 4b0:	01003b34 	tsteq	r0, r4, lsr fp
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
 4b4:	01003c70 	tsteq	r0, r0, ror ip
 4b8:	01003c70 	tsteq	r0, r0, ror ip
 4bc:	01003de8 	smlatteq	r0, r8, sp, r3
 4c0:	01003de8 	smlatteq	r0, r8, sp, r3
 4c4:	01004604 	tsteq	r0, r4, lsl #12
 4c8:	01004604 	tsteq	r0, r4, lsl #12
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
 4cc:	010048b8 			; <UNDEFINED> instruction: 0x010048b8
	...
 4d8:	010048b8 			; <UNDEFINED> instruction: 0x010048b8
 4dc:	01004938 	tsteq	r0, r8, lsr r9
 4e0:	01004938 	tsteq	r0, r8, lsr r9
 4e4:	01004a10 	tsteq	r0, r0, lsl sl
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
 4f8:	01004a10 	tsteq	r0, r0, lsl sl
 4fc:	01004a6c 	tsteq	r0, ip, ror #20
 500:	01004a6c 	tsteq	r0, ip, ror #20
 504:	01004a98 			; <UNDEFINED> instruction: 0x01004a98
 508:	01004a98 			; <UNDEFINED> instruction: 0x01004a98
 50c:	01004b54 	tsteq	r0, r4, asr fp
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
 518:	01004b54 	tsteq	r0, r4, asr fp
 51c:	01004ba4 	smlatbeq	r0, r4, fp, r4
 520:	01004ba4 	smlatbeq	r0, r4, fp, r4
 524:	01004bb0 			; <UNDEFINED> instruction: 0x01004bb0
	...
 530:	01004bb4 			; <UNDEFINED> instruction: 0x01004bb4
 534:	01004c28 	tsteq	r0, r8, lsr #24
 538:	01004c28 	tsteq	r0, r8, lsr #24
 53c:	01004cac 	smlatbeq	r0, ip, ip, r4
 540:	00000001 	andeq	r0, r0, r1
 544:	00000001 	andeq	r0, r0, r1
	...
 550:	00000001 	andeq	r0, r0, r1
 554:	00000001 	andeq	r0, r0, r1
 558:	00000001 	andeq	r0, r0, r1
 55c:	00000001 	andeq	r0, r0, r1
	...
 568:	01004cac 	smlatbeq	r0, ip, ip, r4
 56c:	01004cc8 	smlabteq	r0, r8, ip, r4
 570:	01004cc8 	smlabteq	r0, r8, ip, r4
 574:	01004ce4 	smlatteq	r0, r4, ip, r4
 578:	01004ce4 	smlatteq	r0, r4, ip, r4
 57c:	01004d38 	tsteq	r0, r8, lsr sp
 580:	01004d38 	tsteq	r0, r8, lsr sp
 584:	01004dc4 	smlabteq	r0, r4, sp, r4
 588:	01004dc4 	smlabteq	r0, r4, sp, r4
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
 58c:	01004e94 			; <UNDEFINED> instruction: 0x01004e94
 590:	01004e94 			; <UNDEFINED> instruction: 0x01004e94
 594:	01004fac 	smlatbeq	r0, ip, pc, r4	; <UNPREDICTABLE>
 598:	00000001 	andeq	r0, r0, r1
 59c:	00000001 	andeq	r0, r0, r1
 5a0:	01004fac 	smlatbeq	r0, ip, pc, r4	; <UNPREDICTABLE>
 5a4:	01004fe8 	smlatteq	r0, r8, pc, r4	; <UNPREDICTABLE>
 5a8:	00000001 	andeq	r0, r0, r1
 5ac:	00000001 	andeq	r0, r0, r1
 5b0:	00000001 	andeq	r0, r0, r1
 5b4:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
 5b8:	00000001 	andeq	r0, r0, r1
 5bc:	00000001 	andeq	r0, r0, r1
 5c0:	00000001 	andeq	r0, r0, r1
 5c4:	00000001 	andeq	r0, r0, r1
 5c8:	00000001 	andeq	r0, r0, r1
 5cc:	00000001 	andeq	r0, r0, r1
 5d0:	00000001 	andeq	r0, r0, r1
 5d4:	00000001 	andeq	r0, r0, r1
 5d8:	00000001 	andeq	r0, r0, r1
 5dc:	00000001 	andeq	r0, r0, r1
 5e0:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
 5e4:	00000001 	andeq	r0, r0, r1
 5e8:	00000001 	andeq	r0, r0, r1
 5ec:	00000001 	andeq	r0, r0, r1
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
 5f8:	00000001 	andeq	r0, r0, r1
 5fc:	00000001 	andeq	r0, r0, r1
 600:	00000001 	andeq	r0, r0, r1
 604:	00000001 	andeq	r0, r0, r1
	...
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
 610:	01004fe8 	smlatteq	r0, r8, pc, r4	; <UNPREDICTABLE>
 614:	010050c0 	smlabteq	r0, r0, r0, r5
 618:	00000001 	andeq	r0, r0, r1
 61c:	00000001 	andeq	r0, r0, r1
 620:	00000001 	andeq	r0, r0, r1
 624:	00000001 	andeq	r0, r0, r1
 628:	00000001 	andeq	r0, r0, r1
 62c:	00000001 	andeq	r0, r0, r1
 630:	00000001 	andeq	r0, r0, r1
 634:	00000001 	andeq	r0, r0, r1
 638:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
 63c:	00000001 	andeq	r0, r0, r1
 640:	00000001 	andeq	r0, r0, r1
 644:	00000001 	andeq	r0, r0, r1
 648:	00000001 	andeq	r0, r0, r1
 64c:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
{
       0:	0000097d 	andeq	r0, r0, sp, ror r9
       4:	014d0003 	cmpeq	sp, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    ALT_PRINTF("\n");
      18:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
      1c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
      20:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	6d77682f 	ldclvs	8, cr6, [r7, #-188]!	; 0xffffff44
      28:	732f7267 			; <UNDEFINED> instruction: 0x732f7267
      2c:	615f636f 	cmpvs	pc, pc, ror #6
      30:	2f003031 	svccs	0x00003031
      34:	2f727375 	svccs	0x00727375
      38:	2f62696c 	svccs	0x0062696c
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	2f636367 	svccs	0x00636367
      40:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      44:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      48:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      50:	2f312e32 	svccs	0x00312e32
      54:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      58:	00656475 	rsbeq	r6, r5, r5, ror r4
      5c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      60:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      64:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      68:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      6c:	2f62696c 	svccs	0x0062696c
}
      70:	00737973 	rsbseq	r7, r3, r3, ror r9
      74:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      80:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      84:	0062696c 	rsbeq	r6, r2, ip, ror #18
      88:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
      8c:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
      90:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      *(pmem->toptr)=0;
      94:	77680065 	strbvc	r0, [r8, -r5, rrx]!
      98:	2f62696c 	svccs	0x0062696c
      9c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      a0:	2f656475 	svccs	0x00656475
}
      a4:	5f636f73 	svcpl	0x00636f73
      a8:	00303161 	eorseq	r3, r0, r1, ror #2
      ac:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
      b0:	6f6c635f 	svcvs	0x006c635f
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	6d5f6b63 	vldrvs	d22, [pc, #-396]	; ffffff30 <__shm_end__+0xbfffff30>
      b8:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
        break;
      bc:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
    return ALT_E_SUCCESS;
      c0:	00000100 	andeq	r0, r0, r0, lsl #2
      c4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
        return ALT_E_ERROR;
      c8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
}
      cc:	00000200 	andeq	r0, r0, r0, lsl #4
      d0:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
      d4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
      d8:	00000200 	andeq	r0, r0, r0, lsl #4
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
      e0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
      e4:	00000300 	andeq	r0, r0, r0, lsl #6
      e8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
      ec:	00682e74 	rsbeq	r2, r8, r4, ror lr
      f0:	6c000003 	stcvs	0, cr0, [r0], {3}
    return dst;
      f4:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
}
      f8:	00030068 	andeq	r0, r3, r8, rrx
      fc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     100:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     104:	00040068 	andeq	r0, r4, r8, rrx
        return (int)cnt;
     108:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     10c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    errno = ENOSYS;
     110:	00000400 	andeq	r0, r0, r0, lsl #8
     114:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     118:	00682e62 	rsbeq	r2, r8, r2, ror #28
     11c:	61000005 	tstvs	r0, r5
    return -1;
     120:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
}
     124:	6b636f6c 	blvs	18dbedc <__end__+0x8bfebc>
     128:	6e616d5f 	mcrvs	13, 3, r6, cr1, cr15, {2}
     12c:	72656761 	rsbvc	r6, r5, #25427968	; 0x1840000
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     130:	0600682e 	streq	r6, [r0], -lr, lsr #16
     134:	6c610000 	stclvs	0, cr0, [r1], #-0
     138:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
     140:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     144:	6c610000 	stclvs	0, cr0, [r1], #-0
     148:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     14c:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     154:	05000000 	streq	r0, [r0, #-0]
     158:	02050001 	andeq	r0, r5, #1
     15c:	00000000 	andeq	r0, r0, r0
     160:	0100d303 	tsteq	r0, r3, lsl #6
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	05bb0505 	ldreq	r0, [fp, #1285]!	; 0x505
     168:	053f0814 	ldreq	r0, [pc, #-2068]!	; fffff95c <__shm_end__+0xbffff95c>
     16c:	1b058309 	blne	160d98 <__core1_unwind_stub-0xe9f268>
     170:	83090530 	movwhi	r0, #38192	; 0x9530
     174:	05301605 	ldreq	r1, [r0, #-1541]!	; 0xfffff9fb
    return ALT_E_SUCCESS;
     178:	10058309 	andne	r8, r5, r9, lsl #6
}
     17c:	4c0c0530 	cfstr32mi	mvfx0, [ip], {48}	; 0x30
     180:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     184:	01010008 	tsteq	r1, r8
    while (coalesce->size)
     188:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     18c:	00000402 	andeq	r0, r0, r2, lsl #8
            break;
     190:	00e80301 	rsceq	r0, r8, r1, lsl #6
    *segpa   = thissegpa;
     194:	830c0501 	movwhi	r0, #50433	; 0xc501
     198:	2f01059f 	svccs	0x0001059f
     19c:	01000802 	tsteq	r0, r2, lsl #16
    *segsize = thissegsize;
     1a0:	00010501 	andeq	r0, r1, r1, lsl #10
     1a4:	003c0205 	eorseq	r0, ip, r5, lsl #4
     1a8:	ee030100 	adfs	f0, f3, f0
    return ALT_E_SUCCESS;
     1ac:	08050100 	stmdaeq	r5, {r8}
}
     1b0:	66070583 	strvs	r0, [r7], -r3, lsl #11
     1b4:	9f4c1005 	svcls	0x004c1005
     1b8:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     1c0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     1c4:	02050001 	andeq	r0, r5, #1
     1c8:	01000090 	swpeq	r0, r0, [r0]	; <UNPREDICTABLE>
     1cc:	0100f803 	tsteq	r0, r3, lsl #16	; <UNPREDICTABLE>
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	05830805 	streq	r0, [r3, #2053]	; 0x805
     1d4:	10056607 	andne	r6, r5, r7, lsl #12
     1d8:	0c059f4c 	stceq	15, cr9, [r5], {76}	; 0x4c
     1dc:	2f01054c 	svccs	0x0001054c
     1e0:	01000802 	tsteq	r0, r2, lsl #16
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	00010501 	andeq	r0, r1, r1, lsl #10
     1e8:	00e40205 	rsceq	r0, r4, r5, lsl #4
     1ec:	85030100 	strhi	r0, [r3, #-256]	; 0xffffff00
     1f0:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
     1f4:	0d055183 	stfeqs	f5, [r5, #-524]	; 0xfffffdf4
     1f8:	4b0b054a 	blmi	2c1728 <__core1_unwind_stub-0xd3e8d8>
     1fc:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
     200:	05230812 	streq	r0, [r3, #-2066]!	; 0xfffff7ee
     204:	1205830c 	andne	r8, r5, #12, 6	; 0x30000000
     208:	830c0530 	movwhi	r0, #50480	; 0xc530
     20c:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
     210:	1305830c 	movwne	r8, #21260	; 0x530c
        clkStep += clk100;
     214:	4d060530 	cfstr32mi	mvfx0, [r6, #-192]	; 0xffffff40
     218:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
     21c:	05854b0b 	streq	r4, [r5, #2827]	; 0xb0b
     220:	0f054a09 	svceq	0x00054a09
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	4a37054b 	bmi	dc1758 <__core1_unwind_stub-0x23e8a8>
     228:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
     22c:	0559080f 	ldrbeq	r0, [r9, #-2063]	; 0xfffff7f1
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	0b056637 	bleq	159b14 <__core1_unwind_stub-0xea64ec>
     234:	a00d0566 	andge	r0, sp, r6, ror #10
     238:	4b2e0b05 	blmi	b82e54 <__core1_unwind_stub-0x47d1ac>
     23c:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	022f0104 	eoreq	r0, pc, #4, 2
     244:	01010006 	tsteq	r1, r6
     248:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     24c:	00023c02 	andeq	r3, r2, r2, lsl #24
     250:	01ab0301 			; <UNDEFINED> instruction: 0x01ab0301
     254:	83140501 	tsthi	r4, #4194304	; 0x400000
     258:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	0d055014 	stceq	0, cr5, [r5, #-80]	; 0xffffffb0
     260:	4b0b054a 	blmi	2c1790 <__core1_unwind_stub-0xd3e870>
     264:	3f081205 	svccc	0x00081205
     268:	30830c05 	addcc	r0, r3, r5, lsl #24
     26c:	05681905 	strbeq	r1, [r8, #-2309]!	; 0xfffff6fb
     270:	11056617 	tstne	r5, r7, lsl r6
     274:	bb0c052e 	bllt	301734 <__core1_unwind_stub-0xcfe8cc>
     278:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
     27c:	1205830c 	andne	r8, r5, #12, 6	; 0x30000000
     280:	830c0530 	movwhi	r0, #50480	; 0xc530
     284:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	0f054d06 	svceq	0x00054d06
     28c:	4b0b0567 	blmi	2c1830 <__core1_unwind_stub-0xd3e7d0>
     290:	4a090585 	bmi	2418ac <__core1_unwind_stub-0xdbe754>
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
     298:	0b054a36 	bleq	152b78 <__core1_unwind_stub-0xead488>
     29c:	080f0566 	stmdaeq	pc, {r1, r2, r5, r6, r8, sl}	; <UNPREDICTABLE>
     2a0:	66360559 			; <UNDEFINED> instruction: 0x66360559
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
     2a8:	0b05a00d 	bleq	1682e4 <__core1_unwind_stub-0xe97d1c>
     2ac:	01054b2e 	tsteq	r5, lr, lsr #22
     2b0:	01040200 	mrseq	r0, R12_usr
     2b4:	0006022f 	andeq	r0, r6, pc, lsr #4
     2b8:	01050101 	tsteq	r5, r1, lsl #2
     2bc:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
     2c0:	03010003 	movweq	r0, #4099	; 0x1003
     2c4:	050101ed 	streq	r0, [r1, #-493]	; 0xfffffe13
     2c8:	1005db07 	andne	sp, r5, r7, lsl #22
     2cc:	4a0e0567 	bmi	381870 <__core1_unwind_stub-0xc7e790>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	05681005 	strbeq	r1, [r8, #-5]!
     2d4:	07054a0e 	streq	r4, [r5, -lr, lsl #20]
     2d8:	001c054c 	andseq	r0, ip, ip, asr #10
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     2e0:	01040200 	mrseq	r0, R12_usr
     2e4:	4d100565 	cfldr32mi	mvfx0, [r0, #-404]	; 0xfffffe6c
     2e8:	4d070567 	cfstr32mi	mvfx0, [r7, #-412]	; 0xfffffe64
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	05671005 	strbeq	r1, [r7, #-5]!
     2f0:	10054a0e 	andne	r4, r5, lr, lsl #20
     2f4:	4a0e0568 	bmi	38189c <__core1_unwind_stub-0xc7e764>
     2f8:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
     2fc:	10056607 	andne	r6, r5, r7, lsl #12
     300:	840c054c 	strhi	r0, [ip], #-1356	; 0xfffffab4
     304:	77081405 	strvc	r1, [r8, -r5, lsl #8]
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	05841305 	streq	r1, [r4, #773]	; 0x305
     30c:	1805830f 	stmdane	r5, {r0, r1, r2, r3, r8, r9, pc}
     310:	4b140567 	blmi	5018b4 <__core1_unwind_stub-0xafe74c>
     314:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     318:	2005671a 	andcs	r6, r5, sl, lsl r7
     31c:	4a1e052e 	bmi	7817dc <__core1_unwind_stub-0x87e824>
     320:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	0d059e14 	stceq	14, cr9, [r5, #-80]	; 0xffffffb0
     328:	3013054b 	andscc	r0, r3, fp, asr #10
     32c:	05830f05 	streq	r0, [r3, #3845]	; 0xf05
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	14056718 	strne	r6, [r5], #-1816	; 0xfffff8e8
     334:	4a12054b 	bmi	481868 <__core1_unwind_stub-0xb7e798>
     338:	05671a05 	strbeq	r1, [r7, #-2565]!	; 0xfffff5fb
     33c:	1e052e20 	cdpne	14, 0, cr2, cr5, cr0, {1}
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	2e1a054a 	cfmac32cs	mvfx0, mvfx10, mvfx10
     344:	059e1405 	ldreq	r1, [lr, #1029]	; 0x405
     348:	13054b0d 	movwne	r4, #23309	; 0x5b0d
     34c:	830d0530 	movwhi	r0, #54576	; 0xd530
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	13056830 	movwne	r6, #22576	; 0x5830
     354:	4c0c0530 	cfstr32mi	mvfx0, [ip], {48}	; 0x30
     358:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
     35c:	022f0104 	eoreq	r0, pc, #4, 2
     360:	01010006 	tsteq	r1, r6
     364:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	0005ec02 	andeq	lr, r5, r2, lsl #24
     36c:	02a70301 	adceq	r0, r7, #67108864	; 0x4000000
     370:	870b0501 	strhi	r0, [fp, -r1, lsl #10]
     374:	26020c05 	strcs	r0, [r2], -r5, lsl #24
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	2f010519 	svccs	0x00010519
     37c:	01000602 	tsteq	r0, r2, lsl #12
     380:	00010501 	andeq	r0, r1, r1, lsl #10
     384:	06580205 	ldrbeq	r0, [r8], -r5, lsl #4
     388:	b7030100 	strlt	r0, [r3, -r0, lsl #2]
     38c:	0b050102 	bleq	14079c <__core1_unwind_stub-0xebf864>
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	0c056784 	stceq	7, cr6, [r5], {132}	; 0x84
     394:	2f01059f 	svccs	0x0001059f
     398:	01000602 	tsteq	r0, r2, lsl #12
     39c:	00010501 	andeq	r0, r1, r1, lsl #10
     3a0:	06980205 	ldreq	r0, [r8], r5, lsl #4
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	bf030100 	svclt	0x00030100
     3a8:	0b050102 	bleq	1407b8 <__core1_unwind_stub-0xebf848>
     3ac:	0c056784 	stceq	7, cr6, [r5], {132}	; 0x84
     3b0:	2f01059f 	svccs	0x0001059f
     3b4:	01000602 	tsteq	r0, r2, lsl #12
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	00010501 	andeq	r0, r1, r1, lsl #10
     3bc:	06d80205 	ldrbeq	r0, [r8], r5, lsl #4
     3c0:	c8030100 	stmdagt	r3, {r8}
     3c4:	0b050102 	bleq	1407d4 <__core1_unwind_stub-0xebf82c>
     3c8:	020c0584 	andeq	r0, ip, #132, 10	; 0x21000000
     3cc:	01051a26 	tsteq	r5, r6, lsr #20
     3d0:	0006022f 	andeq	r0, r6, pc, lsr #4
     3d4:	01050101 	tsteq	r5, r1, lsl #2
     3d8:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
     3dc:	03010007 	movweq	r0, #4103	; 0x1007
     3e0:	050102d6 	streq	r0, [r1, #-726]	; 0xfffffd2a
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	0567840b 	strbeq	r8, [r7, #-1035]!	; 0xfffffbf5
     3e8:	01059f0c 	tsteq	r5, ip, lsl #30
     3ec:	0006022f 	andeq	r0, r6, pc, lsr #4
     3f0:	01050101 	tsteq	r5, r1, lsl #2
     3f4:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
     3f8:	03010007 	movweq	r0, #4103	; 0x1007
     3fc:	050102de 	streq	r0, [r1, #-734]	; 0xfffffd22
     400:	1305840b 	movwne	r8, #21515	; 0x540b
     404:	82100567 	andshi	r0, r0, #432013312	; 0x19c00000
     408:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
     40c:	0522080c 	streq	r0, [r2, #-2060]!	; 0xfffff7f4
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	06022f01 	streq	r2, [r2], -r1, lsl #30
     414:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     418:	02050001 	andeq	r0, r5, #1
     41c:	010007ec 	smlatteq	r0, ip, r7, r0
     420:	0102e703 	tsteq	r2, r3, lsl #14
     424:	05840b05 	streq	r0, [r4, #2821]	; 0xb05
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	10056713 	andne	r6, r5, r3, lsl r7
     42c:	4a0b059e 	bmi	2c1aac <__core1_unwind_stub-0xd3e554>
     430:	22080c05 	andcs	r0, r8, #1280	; 0x500
     434:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     438:	01010006 	tsteq	r1, r6
     43c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	00085802 	andeq	r5, r8, r2, lsl #16
     444:	02f00301 	rscseq	r0, r0, #67108864	; 0x4000000
     448:	840b0501 	strhi	r0, [fp], #-1281	; 0xfffffaff
     44c:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
     450:	0b059e10 	bleq	167c98 <__core1_unwind_stub-0xe98368>
     454:	080c054a 	stmdaeq	ip, {r1, r3, r6, r8, sl}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	2f010522 	svccs	0x00010522
     45c:	01000602 	tsteq	r0, r2, lsl #12
     460:	00010501 	andeq	r0, r1, r1, lsl #10
     464:	08c40205 	stmiaeq	r4, {r0, r2, r9}^
     468:	f9030100 			; <UNDEFINED> instruction: 0xf9030100
     46c:	0b050102 	bleq	14087c <__core1_unwind_stub-0xebf784>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	67130584 	ldrvs	r0, [r3, -r4, lsl #11]
     474:	059e1005 	ldreq	r1, [lr, #5]
     478:	0c054a0b 			; <UNDEFINED> instruction: 0x0c054a0b
     47c:	01052208 	tsteq	r5, r8, lsl #4
     480:	0006022f 	andeq	r0, r6, pc, lsr #4
     484:	01050101 	tsteq	r5, r1, lsl #2
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	30020500 	andcc	r0, r2, r0, lsl #10
     48c:	03010009 	movweq	r0, #4105	; 0x1009
     490:	05010382 	streq	r0, [r1, #-898]	; 0xfffffc7e
     494:	1305840b 	movwne	r8, #21515	; 0x540b
     498:	9e100567 	cfmsc32ls	mvfx0, mvfx0, mvfx7
     49c:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
     4a0:	0522080c 	streq	r0, [r2, #-2060]!	; 0xfffff7f4
     4a4:	06022f01 	streq	r2, [r2], -r1, lsl #30
     4a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     4ac:	02050001 	andeq	r0, r5, #1
     4b0:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	01038b03 	tsteq	r3, r3, lsl #22
     4b8:	05840b05 	streq	r0, [r4, #2821]	; 0xb05
     4bc:	10056713 	andne	r6, r5, r3, lsl r7
     4c0:	4a0b059e 	bmi	2c1b40 <__core1_unwind_stub-0xd3e4c0>
     4c4:	22080c05 	andcs	r0, r8, #1280	; 0x500
     4c8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	01010006 	tsteq	r1, r6
     4d0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     4d4:	000a0802 	andeq	r0, sl, r2, lsl #16
     4d8:	03940301 	orrseq	r0, r4, #67108864	; 0x4000000
     4dc:	840b0501 	strhi	r0, [fp], #-1281	; 0xfffffaff
     4e0:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
     4e4:	0b059e10 	bleq	167d2c <__core1_unwind_stub-0xe982d4>
     4e8:	080c054a 	stmdaeq	ip, {r1, r3, r6, r8, sl}
     4ec:	2f010522 	svccs	0x00010522
     4f0:	01000602 	tsteq	r0, r2, lsl #12
     4f4:	00010501 	andeq	r0, r1, r1, lsl #10
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	0a740205 	beq	1d00d14 <__end__+0xce4cf4>
     4fc:	b1030100 	mrslt	r0, (UNDEF: 19)
     500:	08050103 	stmdaeq	r5, {r0, r1, r8}
     504:	663605bd 			; <UNDEFINED> instruction: 0x663605bd
     508:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     50c:	0b034c10 	bleq	d3554 <__core1_unwind_stub-0xf2caac>
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	05012802 	streq	r2, [r1, #-2050]	; 0xfffff7fe
     514:	02090301 	andeq	r0, r9, #67108864	; 0x4000000
     518:	06020126 	streq	r0, [r2], -r6, lsr #2
     51c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     520:	02050001 	andeq	r0, r5, #1
     524:	01000b50 	tsteq	r0, r0, asr fp
     528:	0103ce03 	tsteq	r3, r3, lsl #28
     52c:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     530:	0602a101 	streq	sl, [r2], -r1, lsl #2
     534:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     538:	02050001 	andeq	r0, r5, #1
     53c:	01000b80 	smlabbeq	r0, r0, fp, r0
     540:	0103d503 	tsteq	r3, r3, lsl #10
     544:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     548:	0602a101 	streq	sl, [r2], -r1, lsl #2
     54c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     550:	02050001 	andeq	r0, r5, #1
     554:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
     558:	0103dc03 	tsteq	r3, r3, lsl #24
     55c:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     560:	0602a101 	streq	sl, [r2], -r1, lsl #2
     564:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     568:	02050001 	andeq	r0, r5, #1
     56c:	01000be0 	smlatteq	r0, r0, fp, r0
     570:	0103e303 	tsteq	r3, r3, lsl #6
     574:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     578:	1a260201 	bne	980d84 <__core1_unwind_stub-0x67f27c>
     57c:	01000602 	tsteq	r0, r2, lsl #12
     580:	00010501 	andeq	r0, r1, r1, lsl #10
     584:	0c480205 	sfmeq	f0, 2, [r8], {5}
     588:	ef030100 	svc	0x00030100
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	0b050103 	bleq	1409a0 <__core1_unwind_stub-0xebf660>
     590:	03110584 	tsteq	r1, #132, 10	; 0x21000000
     594:	01260209 			; <UNDEFINED> instruction: 0x01260209
     598:	05820f05 	streq	r0, [r2, #3845]	; 0xf05
     59c:	0b052e0a 	bleq	14bdcc <__core1_unwind_stub-0xeb4234>
     5a0:	01052208 	tsteq	r5, r8, lsl #4
     5a4:	0006022f 	andeq	r0, r6, pc, lsr #4
     5a8:	01050101 	tsteq	r5, r1, lsl #2
     5ac:	ec020500 	cfstr32	mvfx0, [r2], {-0}
     5b0:	0301000c 	movweq	r0, #4108	; 0x100c
     5b4:	05010480 	streq	r0, [r1, #-1152]	; 0xfffffb80
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0105830c 	tsteq	r5, ip, lsl #6
     5bc:	021a2602 	andseq	r2, sl, #2097152	; 0x200000
     5c0:	01010006 	tsteq	r1, r6
     5c4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     5c8:	000d5402 	andeq	r5, sp, r2, lsl #8
     5cc:	048c0301 	streq	r0, [ip], #769	; 0x301
     5d0:	830c0501 	movwhi	r0, #50433	; 0xc501
     5d4:	02670105 	rsbeq	r0, r7, #1073741825	; 0x40000001
     5d8:	01010006 	tsteq	r1, r6
     5dc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     5e0:	00000002 	andeq	r0, r0, r2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	04910300 	ldreq	r0, [r1], #768	; 0x300
     5e8:	840b0501 	strhi	r0, [fp], #-1281	; 0xfffffaff
     5ec:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
     5f0:	0c05660b 	stceq	6, cr6, [r5], {11}
     5f4:	01052108 	tsteq	r5, r8, lsl #2
     5f8:	0006022f 	andeq	r0, r6, pc, lsr #4
     5fc:	01050101 	tsteq	r5, r1, lsl #2
     600:	00020500 	andeq	r0, r2, r0, lsl #10
     604:	03000000 	movweq	r0, #0
     608:	05010499 	streq	r0, [r1, #-1177]	; 0xfffffb67
     60c:	0d05840b 	cfstrseq	mvf8, [r5, #-44]	; 0xffffffd4
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	660b0567 	strvs	r0, [fp], -r7, ror #10
     614:	21080c05 	tstcs	r8, r5, lsl #24
     618:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     61c:	01010006 	tsteq	r1, r6
     620:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     624:	000d7c02 	andeq	r7, sp, r2, lsl #24
     628:	04a10301 	strteq	r0, [r1], #769	; 0x301
     62c:	830c0501 	movwhi	r0, #50433	; 0xc501
     630:	26020105 	strcs	r0, [r2], -r5, lsl #2
     634:	0006021a 	andeq	r0, r6, sl, lsl r2
     638:	01050101 	tsteq	r5, r1, lsl #2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
     640:	0301000d 	movweq	r0, #4109	; 0x100d
     644:	050104ad 	streq	r0, [r1, #-1197]	; 0xfffffb53
     648:	0105830c 	tsteq	r5, ip, lsl #6
     64c:	021a2602 	andseq	r2, sl, #2097152	; 0x200000
     650:	01010006 	tsteq	r1, r6
     654:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     658:	000e4c02 	andeq	r4, lr, r2, lsl #24
     65c:	04b90301 	ldrteq	r0, [r9], #769	; 0x301
     660:	830c0501 	movwhi	r0, #50433	; 0xc501
     664:	26020105 	strcs	r0, [r2], -r5, lsl #2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	0006021a 	andeq	r0, r6, sl, lsl r2
     66c:	01050101 	tsteq	r5, r1, lsl #2
     670:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
     674:	0301000e 	movweq	r0, #4110	; 0x100e
     678:	050104c9 	streq	r0, [r1, #-1225]	; 0xfffffb37
     67c:	0805bb15 	stmdaeq	r5, {r0, r2, r4, r8, r9, fp, ip, sp, pc}
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	6810054c 	ldmdavs	r0, {r2, r3, r6, r8, sl}
     684:	054d0505 	strbeq	r0, [sp, #-1285]	; 0xfffffafb
     688:	1644020f 	strbne	r0, [r4], -pc, lsl #4
     68c:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     690:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
     694:	300f0567 	andcc	r0, pc, r7, ror #10
     698:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     69c:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
     6a0:	300f0567 	andcc	r0, pc, r7, ror #10
     6a4:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     6a8:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	300f0567 	andcc	r0, pc, r7, ror #10
     6b0:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     6b4:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
     6b8:	304b3167 	subcc	r3, fp, r7, ror #2
     6bc:	304b304b 	subcc	r3, fp, fp, asr #32
     6c0:	314b304b 	cmpcc	fp, fp, asr #32
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	304b304b 	subcc	r3, fp, fp, asr #32
     6c8:	314b304b 	cmpcc	fp, fp, asr #32
     6cc:	304b304b 	subcc	r3, fp, fp, asr #32
     6d0:	304b304b 	subcc	r3, fp, fp, asr #32
     6d4:	304b304b 	subcc	r3, fp, fp, asr #32
     6d8:	304b304b 	subcc	r3, fp, fp, asr #32
     6dc:	054b304b 	strbeq	r3, [fp, #-75]	; 0xffffffb5
     6e0:	0905300d 	stmdbeq	r5, {r0, r2, r3, ip, sp}
     6e4:	320c054b 	andcc	r0, ip, #314572800	; 0x12c00000
     6e8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     6ec:	01010006 	tsteq	r1, r6
     6f0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     6f4:	00000002 	andeq	r0, r0, r2
     6f8:	05b40300 	ldreq	r0, [r4, #768]!	; 0x300
     6fc:	9f050501 	svcls	0x00050501
     700:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
     704:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     70c:	02050001 	andeq	r0, r5, #1
     710:	00000000 	andeq	r0, r0, r0
     714:	0105bb03 	tsteq	r5, r3, lsl #22
     718:	059f0505 	ldreq	r0, [pc, #1285]	; c25 <__core1_unwind_stub-0xfff3db>
     71c:	163c0210 			; <UNDEFINED> instruction: 0x163c0210
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	bdbcbcbd 	ldclt	12, cr11, [ip, #756]!	; 0x2f4
     724:	bcbcbdbc 	ldclt	13, cr11, [ip], #752	; 0x2f0
     728:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
     72c:	bcbdbcbc 	ldclt	12, cr11, [sp], #752	; 0x2f0
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	05bcbcbc 	ldreq	fp, [ip, #3260]!	; 0xcbc
     734:	06023001 	streq	r3, [r2], -r1
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     73c:	02050001 	andeq	r0, r5, #1
     740:	00000000 	andeq	r0, r0, r0
     744:	0105ef03 	tsteq	r5, r3, lsl #30
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	059f0505 	ldreq	r0, [pc, #1285]	; c55 <__core1_unwind_stub-0xfff3ab>
     74c:	0105670c 	tsteq	r5, ip, lsl #14
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	0008022f 	andeq	r0, r8, pc, lsr #4
     754:	01050101 	tsteq	r5, r1, lsl #2
     758:	00020500 	andeq	r0, r2, r0, lsl #10
     75c:	03000000 	movweq	r0, #0
     760:	050105f5 	streq	r0, [r1, #-1525]	; 0xfffffa0b
     764:	10059f05 	andne	r9, r5, r5, lsl #30
     768:	bd163c02 	ldclt	12, cr3, [r6, #-8]
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	bcbdbcbc 	ldclt	12, cr11, [sp], #752	; 0x2f0
     770:	bcbcbcbd 	ldclt	12, cr11, [ip], #756	; 0x2f4
     774:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
     778:	bcbcbdbc 	ldclt	13, cr11, [ip], #752	; 0x2f0
     77c:	0105bcbc 			; <UNDEFINED> instruction: 0x0105bcbc
     780:	00060230 	andeq	r0, r6, r0, lsr r2
     784:	01050101 	tsteq	r5, r1, lsl #2
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     78c:	03010010 	movweq	r0, #4112	; 0x1010
     790:	050106a9 	streq	r0, [r1, #-1705]	; 0xfffff957
     794:	0b059f0d 	bleq	1683d0 <__core1_unwind_stub-0xe97c30>
     798:	4a05054a 	bmi	141cc8 <__core1_unwind_stub-0xebe338>
     79c:	4c4b0e05 	mcrrmi	14, 0, r0, fp, cr5
     7a0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	01010008 	tsteq	r1, r8
     7a8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     7ac:	00113802 	andseq	r3, r1, r2, lsl #16
     7b0:	06b10301 	ldrteq	r0, [r1], r1, lsl #6
     7b4:	9f050501 	svcls	0x00050501
     7b8:	3c021005 	stccc	0, cr1, [r2], {5}
     7bc:	bcbcbd16 	ldclt	13, cr11, [ip], #88	; 0x58
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	bcbdbcbd 	ldclt	12, cr11, [sp], #756	; 0x2f4
     7c4:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
     7c8:	bdbcbcbc 	ldclt	12, cr11, [ip, #752]!	; 0x2f0
     7cc:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	02300105 	eorseq	r0, r0, #1073741825	; 0x40000001
     7d4:	01010006 	tsteq	r1, r6
     7d8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	00000002 	andeq	r0, r0, r2
     7e0:	06ee0300 	strbteq	r0, [lr], r0, lsl #6
     7e4:	03050501 	movweq	r0, #21761	; 0x5501
     7e8:	18059e25 	stmdane	r5, {r0, r2, r5, r9, sl, fp, ip, pc}
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	4a100568 	bmi	401d94 <__core1_unwind_stub-0xbfe26c>
     7f0:	05671f05 	strbeq	r1, [r7, #-3845]!	; 0xfffff0fb
     7f4:	1a054a17 	bne	153058 <__core1_unwind_stub-0xeacfa8>
     7f8:	4a120567 	bmi	481d9c <__core1_unwind_stub-0xb7e264>
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	d9690305 	stmdble	r9!, {r0, r2, r8, r9}^
     800:	05676731 	strbeq	r6, [r7, #-1841]!	; 0xfffff8cf
     804:	03054b0a 	movweq	r4, #23306	; 0x5b0a
     808:	86878769 	strhi	r8, [r7], r9, ror #14
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	05860c05 	streq	r0, [r6, #3077]	; 0xc05
     810:	35054a0a 	strcc	r4, [r5, #-2570]	; 0xfffff5f6
     814:	4a06054d 	bmi	181d50 <__core1_unwind_stub-0xe7e2b0>
     818:	c04c0505 	subgt	r0, ip, r5, lsl #10
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	26080305 	strcs	r0, [r8], -r5, lsl #6
     820:	27032605 	strcs	r2, [r3, -r5, lsl #12]
     824:	19052008 	stmdbne	r5, {r3, sp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	ba400582 	blt	1001e38 <alt_mmu_ttb1_init+0x4c>
     82c:	054a3205 	strbeq	r3, [sl, #-517]	; 0xfffffdfb
     830:	0a052e2d 	beq	14c0ec <__core1_unwind_stub-0xeb3f14>
     834:	4c12052e 	cfldr32mi	mvfx0, [r2], {46}	; 0x2e
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
     83c:	30052e2c 	andcc	r2, r5, ip, lsr #28
     840:	2e050582 	cfsh32cs	mvfx0, mvfx5, #-62
     844:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	04020009 	streq	r0, [r2], #-9
     84c:	1105a101 	tstne	r5, r1, lsl #2
     850:	01040200 	mrseq	r0, R12_usr
     854:	10057708 	andne	r7, r5, r8, lsl #14
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	01040200 	mrseq	r0, R12_usr
     85c:	00090584 	andeq	r0, r9, r4, lsl #11
     860:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     864:	02001905 	andeq	r1, r0, #81920	; 0x14000
     868:	05830104 	streq	r0, [r3, #260]	; 0x104
     86c:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
     870:	38054a01 	stmdacc	r5, {r0, r9, fp, lr}
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	01040200 	mrseq	r0, R12_usr
     878:	0005054a 	andeq	r0, r5, sl, asr #10
     87c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
     884:	055d080a 	ldrbeq	r0, [sp, #-2058]	; 0xfffff7f6
     888:	05856703 	streq	r6, [r5, #1795]	; 0x703
     88c:	055e080a 	ldrbeq	r0, [lr, #-2058]	; 0xfffff7f6
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	d9876703 	stmible	r7, {r0, r1, r8, r9, sl, sp, lr}
     894:	05dc0a05 	ldrbeq	r0, [ip, #2565]	; 0xa05
     898:	0c056703 	stceq	7, cr6, [r5], {3}
     89c:	05820d03 	streq	r0, [r2, #3331]	; 0xd03
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	03054a0a 	movweq	r4, #23050	; 0x5a0a
     8a4:	bf0c054b 	svclt	0x000c054b
     8a8:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
     8ac:	a0bf4b03 	adcsge	r4, pc, r3, lsl #22
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	085c08a4 	ldmdaeq	ip, {r2, r5, r7, fp}^
     8b4:	bdbdbd5c 	ldclt	13, cr11, [sp, #368]!	; 0x170
     8b8:	5c08bdbd 	stcpl	13, cr11, [r8], {189}	; 0xbd
     8bc:	bd5d08bd 	ldcllt	8, cr0, [sp, #-756]	; 0xfffffd0c
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	3e020c03 	cdpcc	12, 0, cr0, cr2, cr3, {0}
     8c4:	085c0801 	ldmdaeq	ip, {r0, fp}^
     8c8:	085c085c 	ldmdaeq	ip, {r2, r3, r4, r6, fp}^
     8cc:	bd5c085c 	ldcllt	8, cr0, [ip, #-368]	; 0xfffffe90
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	02be5c08 	adcseq	r5, lr, #8, 24	; 0x800
     8d4:	0e051822 	cdpeq	8, 0, cr1, cr5, cr2, {1}
     8d8:	01040200 	mrseq	r0, R12_usr
     8dc:	000c05c0 	andeq	r0, ip, r0, asr #11
    return ALT_E_SUCCESS;
     8e0:	4a010402 	bmi	418f0 <__core1_unwind_stub-0xfbe710>
}
     8e4:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
     8e8:	054b0104 	strbeq	r0, [fp, #-260]	; 0xfffffefc
     8ec:	0402000c 	streq	r0, [r2], #-12
     8f0:	3d054b01 	vstrcc	d4, [r5, #-4]
     8f4:	02040200 	andeq	r0, r4, #0, 4
     8f8:	0044054a 	subeq	r0, r4, sl, asr #10
     8fc:	49020402 	stmdbmi	r2, {r1, sl}
     900:	d9520305 	ldmdble	r2, {r0, r2, r8, r9}^
     904:	0903d9d9 	stmdbeq	r3, {r0, r3, r4, r6, r7, r8, fp, ip, lr, pc}
     908:	890a05d6 	stmdbhi	sl, {r1, r2, r4, r6, r7, r8, sl}
     90c:	05670305 	strbeq	r0, [r7, #-773]!	; 0xfffffcfb
     910:	0402000e 	streq	r0, [r2], #-14
     914:	0c058501 	cfstr32eq	mvfx8, [r5], {1}
     918:	01040200 	mrseq	r0, R12_usr
     91c:	000d054a 	andeq	r0, sp, sl, asr #10
     920:	4b010402 	blmi	41930 <__core1_unwind_stub-0xfbe6d0>
     924:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
     928:	504a0104 	subpl	r0, sl, r4, lsl #2
     92c:	05890a05 	streq	r0, [r9, #2565]	; 0xa05
     930:	0e056703 	cdpeq	7, 0, cr6, cr5, cr3, {0}
     934:	01040200 	mrseq	r0, R12_usr
     938:	000c0585 	andeq	r0, ip, r5, lsl #11
     93c:	4a010402 	bmi	4194c <__core1_unwind_stub-0xfbe6b4>
     940:	02000d05 	andeq	r0, r0, #320	; 0x140
     944:	054b0104 	strbeq	r0, [fp, #-260]	; 0xfffffefc
     948:	04020003 	streq	r0, [r2], #-3
     94c:	05514a01 	ldrbeq	r4, [r1, #-2561]	; 0xfffff5ff
     950:	0305de0a 	movweq	sp, #24074	; 0x5e0a
     954:	000e0567 	andeq	r0, lr, r7, ror #10
     958:	85010402 	strhi	r0, [r1, #-1026]	; 0xfffffbfe
     95c:	02000c05 	andeq	r0, r0, #1280	; 0x500
     960:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     964:	0402000d 	streq	r0, [r2], #-13
     968:	03054b01 	movweq	r4, #23297	; 0x5b01
     96c:	01040200 	mrseq	r0, R12_usr
     970:	86874e4a 	strhi	r4, [r7], sl, asr #28
     974:	09030c05 	stmdbeq	r3, {r0, r2, sl, fp}
     978:	2f010582 	svccs	0x00010582
     97c:	01000602 	tsteq	r0, r2, lsl #12
     980:	000a8801 	andeq	r8, sl, r1, lsl #16
     984:	d2000300 	andle	r0, r0, #0, 6
     988:	02000000 	andeq	r0, r0, #0
     98c:	0d0efb01 	vstreq	d15, [lr, #-4]
     990:	01010100 	mrseq	r0, (UNDEF: 17)
     994:	00000001 	andeq	r0, r0, r1
     998:	01000001 	tsteq	r0, r1
     99c:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     9a0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     9a4:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
     9a8:	0072676d 	rsbseq	r6, r2, sp, ror #14
     9ac:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     9b0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     9b4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     9b8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     9bc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     9c0:	61652d65 	cmnvs	r5, r5, ror #26
     9c4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     9c8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     9cc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     9d0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     9d4:	6c776800 	ldclvs	8, cr6, [r7], #-0
     9d8:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     9dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     9e0:	68006564 	stmdavs	r0, {r2, r5, r6, r8, sl, sp, lr}
     9e4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     9e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     9ec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     9f0:	636f732f 	cmnvs	pc, #-1140850688	; 0xbc000000
     9f4:	3031615f 	eorscc	r6, r1, pc, asr r1
     9f8:	6c610000 	stclvs	0, cr0, [r1], #-0
     9fc:	36315f74 	shsub16cc	r5, r1, r4
     a00:	5f303535 	svcpl	0x00303535
     a04:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     a08:	0100632e 	tsteq	r0, lr, lsr #6
     a0c:	74730000 	ldrbtvc	r0, [r3], #-0
     a10:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     a14:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a18:	74730000 	ldrbtvc	r0, [r3], #-0
     a1c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     a20:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a24:	77680000 	strbvc	r0, [r8, -r0]!
     a28:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     a2c:	00030068 	andeq	r0, r3, r8, rrx
     a30:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     a34:	6f6c635f 	svcvs	0x006c635f
     a38:	6d5f6b63 	vldrvs	d22, [pc, #-396]	; 8b4 <__core1_unwind_stub-0xfff74c>
     a3c:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     a40:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
     a44:	00000400 	andeq	r0, r0, r0, lsl #8
     a48:	5f746c61 	svcpl	0x00746c61
     a4c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
     a50:	61755f30 	cmnvs	r5, r0, lsr pc
     a54:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     a58:	00000300 	andeq	r0, r0, r0, lsl #6
     a5c:	00010500 	andeq	r0, r1, r0, lsl #10
     a60:	139c0205 	orrsne	r0, ip, #1342177280	; 0x50000000
     a64:	ca030100 	bgt	c0e6c <__core1_unwind_stub-0xf3f194>
     a68:	0c050100 	stfeqs	f0, [r5], {-0}
     a6c:	4b010583 	blmi	42080 <__core1_unwind_stub-0xfbdf80>
     a70:	01000802 	tsteq	r0, r2, lsl #16
     a74:	00010501 	andeq	r0, r1, r1, lsl #10
     a78:	13c40205 	bicne	r0, r4, #1342177280	; 0x50000000
     a7c:	d3030100 	movwle	r0, #12544	; 0x3100
     a80:	08050100 	stmdaeq	r5, {r8}
     a84:	691005a0 	ldmdbvs	r0, {r5, r7, r8, sl}
     a88:	054d1305 	strbeq	r1, [sp, #-773]	; 0xfffffcfb
     a8c:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
     a90:	a12308dc 	ldrdge	r0, [r3, -ip]!
     a94:	052208d9 	streq	r0, [r2, #-2265]!	; 0xfffff727
     a98:	10053508 	andne	r3, r5, r8, lsl #10
     a9c:	5016057e 	andspl	r0, r6, lr, ror r5
     aa0:	a10c05be 			; <UNDEFINED> instruction: 0xa10c05be
     aa4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     aa8:	01010008 	tsteq	r1, r8
     aac:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     ab0:	0014e402 	andseq	lr, r4, r2, lsl #8
     ab4:	01830301 	orreq	r0, r3, r1, lsl #6
     ab8:	bb130501 	bllt	4c1ec4 <__core1_unwind_stub-0xb3e13c>
     abc:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ac0:	1e05f709 	cdpne	7, 0, cr15, cr5, cr9, {0}
     ac4:	660905a1 	strvs	r0, [r9], -r1, lsr #11
     ac8:	4b67314b 	blmi	19ccffc <__end__+0x9b0fdc>
     acc:	10059f4b 	andne	r9, r5, fp, asr #30
     ad0:	4e080531 	mcrmi	5, 0, r0, cr8, cr1, {1}
     ad4:	056c0905 	strbeq	r0, [ip, #-2309]!	; 0xfffff6fb
     ad8:	05230812 	streq	r0, [r3, #-2066]!	; 0xfffff7ee
     adc:	1405bd0c 	strne	fp, [r5], #-3340	; 0xfffff2f4
     ae0:	4d130568 	cfldr32mi	mvfx0, [r3, #-416]	; 0xfffffe60
     ae4:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
     ae8:	16054b0c 	strne	r4, [r5], -ip, lsl #22
     aec:	9f100568 	svcls	0x00100568
     af0:	05681805 	strbeq	r1, [r8, #-2053]!	; 0xfffff7fb
     af4:	01054f0c 	tsteq	r5, ip, lsl #30
     af8:	0006022f 	andeq	r0, r6, pc, lsr #4
     afc:	01050101 	tsteq	r5, r1, lsl #2
     b00:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
     b04:	03010016 	movweq	r0, #4118	; 0x1016
     b08:	050101be 	streq	r0, [r1, #-446]	; 0xfffffe42
     b0c:	6767f314 			; <UNDEFINED> instruction: 0x6767f314
     b10:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     b14:	0525080d 	streq	r0, [r5, #-2061]!	; 0xfffff7f3
     b18:	1405660c 	strne	r6, [r5], #-1548	; 0xfffff9f4
     b1c:	0336054c 	teqeq	r6, #76, 10	; 0x13000000
     b20:	16054a09 	strne	r4, [r5], -r9, lsl #20
     b24:	8310054a 	tsthi	r0, #310378496	; 0x12800000
     b28:	05681805 	strbeq	r1, [r8, #-2053]!	; 0xfffff7fb
     b2c:	22054d10 	andcs	r4, r5, #16, 26	; 0x400
     b30:	88110568 	ldmdahi	r1, {r3, r5, r6, r8, sl}
     b34:	17030905 	strne	r0, [r3, -r5, lsl #18]
     b38:	032205d6 			; <UNDEFINED> instruction: 0x032205d6
     b3c:	11052e6e 	tstne	r5, lr, ror #28
     b40:	03090588 	movweq	r0, #38280	; 0x9588
     b44:	1c05d60c 	stcne	6, cr13, [r5], {12}
     b48:	09056730 	stmdbeq	r5, {r4, r5, r8, r9, sl, sp, lr}
     b4c:	30100567 	andscc	r0, r0, r7, ror #10
     b50:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     b54:	06028301 	streq	r8, [r2], -r1, lsl #6
     b58:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     b5c:	02050001 	andeq	r0, r5, #1
     b60:	00000000 	andeq	r0, r0, r0
     b64:	01028503 	tsteq	r2, r3, lsl #10
     b68:	05831305 	streq	r1, [r3, #773]	; 0x305
     b6c:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
     b70:	d81005a4 	ldmdale	r0, {r2, r5, r7, r8, sl}
     b74:	054f0905 	strbeq	r0, [pc, #-2309]	; 277 <__core1_unwind_stub-0xfffd89>
     b78:	054dd810 	strbeq	sp, [sp, #-2064]	; 0xfffff7f0
     b7c:	06028401 	streq	r8, [r2], -r1, lsl #8
     b80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     b84:	02050001 	andeq	r0, r5, #1
     b88:	00000000 	andeq	r0, r0, r0
     b8c:	01029d03 	tsteq	r2, r3, lsl #26
     b90:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     b94:	06028301 	streq	r8, [r2], -r1, lsl #6
     b98:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     b9c:	02050001 	andeq	r0, r5, #1
     ba0:	01001798 			; <UNDEFINED> instruction: 0x01001798
     ba4:	0102a203 	tsteq	r2, r3, lsl #4
     ba8:	4b840305 	blmi	fe1017c4 <__shm_end__+0xbe1017c4>
     bac:	054f2b05 	strbeq	r2, [pc, #-2821]	; af <__core1_unwind_stub-0xffff51>
     bb0:	0105490c 	tsteq	r5, ip, lsl #18
     bb4:	000602a1 	andeq	r0, r6, r1, lsr #5
     bb8:	01050101 	tsteq	r5, r1, lsl #2
     bbc:	00020500 	andeq	r0, r2, r0, lsl #10
     bc0:	03000000 	movweq	r0, #0
     bc4:	050102af 	streq	r0, [r1, #-687]	; 0xfffffd51
     bc8:	0105850c 	tsteq	r5, ip, lsl #10
     bcc:	00060283 	andeq	r0, r6, r3, lsl #5
     bd0:	01050101 	tsteq	r5, r1, lsl #2
     bd4:	00020500 	andeq	r0, r2, r0, lsl #10
     bd8:	03000000 	movweq	r0, #0
     bdc:	050102b7 	streq	r0, [r1, #-695]	; 0xfffffd49
     be0:	0805a011 	stmdaeq	r5, {r0, r4, sp, pc}
     be4:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
     be8:	054e0f05 	strbeq	r0, [lr, #-3845]	; 0xfffff0fb
     bec:	08054a15 	stmdaeq	r5, {r0, r2, r4, r9, fp, lr}
     bf0:	4c10052e 	cfldr32mi	mvfx0, [r0], {46}	; 0x2e
     bf4:	054d1305 	strbeq	r1, [sp, #-773]	; 0xfffffcfb
     bf8:	11054a05 	tstne	r5, r5, lsl #20
     bfc:	660f05dc 			; <UNDEFINED> instruction: 0x660f05dc
     c00:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     c04:	1005320c 	andne	r3, r5, ip, lsl #4
     c08:	31010548 	tstcc	r1, r8, asr #10
     c0c:	01000802 	tsteq	r0, r2, lsl #16
     c10:	00010501 	andeq	r0, r1, r1, lsl #10
     c14:	00000205 	andeq	r0, r0, r5, lsl #4
     c18:	d4030000 	strle	r0, [r3], #-0
     c1c:	11050102 	tstne	r5, r2, lsl #2
     c20:	4a0805bc 	bmi	202318 <__core1_unwind_stub-0xdfdce8>
     c24:	054c1005 	strbeq	r1, [ip, #-5]
     c28:	15054e0f 	strne	r4, [r5, #-3599]	; 0xfffff1f1
     c2c:	2e08054a 	cfsh32cs	mvfx0, mvfx8, #42
     c30:	054c1005 	strbeq	r1, [ip, #-5]
     c34:	05054d13 	streq	r4, [r5, #-3347]	; 0xfffff2ed
     c38:	dc09054a 	cfstr32le	mvfx0, [r9], {74}	; 0x4a
     c3c:	330c0583 	movwcc	r0, #50563	; 0xc583
     c40:	05471005 	strbeq	r1, [r7, #-5]
     c44:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
     c48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c4c:	02050001 	andeq	r0, r5, #1
     c50:	010017e0 	smlatteq	r0, r0, r7, r1
     c54:	0102f103 	tsteq	r2, r3, lsl #2	; <UNPREDICTABLE>
     c58:	05831305 	streq	r1, [r3, #773]	; 0x305
     c5c:	15054a05 	strne	r4, [r5, #-2565]	; 0xfffff5fb
     c60:	9f0905dc 	svcls	0x000905dc
     c64:	350c05bb 	strcc	r0, [ip, #-1467]	; 0xfffffa45
     c68:	05451005 	strbeq	r1, [r5, #-5]
     c6c:	08023401 	stmdaeq	r2, {r0, sl, ip, sp}
     c70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c74:	02050001 	andeq	r0, r5, #1
     c78:	01001860 	tsteq	r0, r0, ror #16
     c7c:	01038503 	tsteq	r3, r3, lsl #10
     c80:	05831305 	streq	r1, [r3, #773]	; 0x305
     c84:	15054a05 	strne	r4, [r5, #-2565]	; 0xfffff5fb
     c88:	9f0905dc 	svcls	0x000905dc
     c8c:	330c05bb 	movwcc	r0, #50619	; 0xc5bb
     c90:	05471005 	strbeq	r1, [r7, #-5]
     c94:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
     c98:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c9c:	02050001 	andeq	r0, r5, #1
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	01039903 	tsteq	r3, r3, lsl #18
     ca8:	05bd1105 	ldreq	r1, [sp, #261]!	; 0x105
     cac:	10054a08 	andne	r4, r5, r8, lsl #20
     cb0:	4e11054c 	cfmac32mi	mvfx0, mvfx1, mvfx12
     cb4:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     cb8:	10052e08 	andne	r2, r5, r8, lsl #28
     cbc:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     cc0:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     cc4:	0905dc10 	stmdbeq	r5, {r4, sl, fp, ip, lr, pc}
     cc8:	0019054a 	andseq	r0, r9, sl, asr #10
     ccc:	30030402 	andcc	r0, r3, r2, lsl #8
     cd0:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
     cd4:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
     cd8:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
     cdc:	20056603 	andcs	r6, r5, r3, lsl #12
     ce0:	03040200 	movweq	r0, #16896	; 0x4200
     ce4:	00090548 	andeq	r0, r9, r8, asr #10
     ce8:	66010402 	strvs	r0, [r1], -r2, lsl #8
     cec:	30100586 	andscc	r0, r0, r6, lsl #11
     cf0:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     cf4:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     cf8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     cfc:	02050001 	andeq	r0, r5, #1
     d00:	010018e0 	smlatteq	r0, r0, r8, r1
     d04:	0103bd03 	tsteq	r3, r3, lsl #26
     d08:	05d91105 	ldrbeq	r1, [r9, #261]	; 0x105
     d0c:	10054a08 	andne	r4, r5, r8, lsl #20
     d10:	4e11054c 	cfmac32mi	mvfx0, mvfx1, mvfx12
     d14:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     d18:	10052e08 	andne	r2, r5, r8, lsl #28
     d1c:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     d20:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     d24:	0905dc10 	stmdbeq	r5, {r4, sl, fp, ip, lr, pc}
     d28:	3010054a 	andscc	r0, r0, sl, asr #10
     d2c:	05671705 	strbeq	r1, [r7, #-1797]!	; 0xfffff8fb
     d30:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
     d34:	17052e01 	strne	r2, [r5, -r1, lsl #28]
     d38:	01040200 	mrseq	r0, R12_usr
     d3c:	000d059e 	muleq	sp, lr, r5
     d40:	4c020402 	cfstrsmi	mvf0, [r2], {2}
     d44:	02002005 	andeq	r2, r0, #5
     d48:	05d10204 	ldrbeq	r0, [r1, #516]	; 0x204
     d4c:	04020009 	streq	r0, [r2], #-9
     d50:	05896601 	streq	r6, [r9, #1537]	; 0x601
     d54:	0c053010 	stceq	0, cr3, [r5], {16}
     d58:	2f01054d 	svccs	0x0001054d
     d5c:	01000802 	tsteq	r0, r2, lsl #16
     d60:	00010501 	andeq	r0, r1, r1, lsl #10
     d64:	00000205 	andeq	r0, r0, r5, lsl #4
     d68:	e3030000 	movw	r0, #12288	; 0x3000
     d6c:	0c050103 	stfeqs	f0, [r5], {3}
     d70:	bb0105bb 	bllt	42464 <__core1_unwind_stub-0xfbdb9c>
     d74:	01000602 	tsteq	r0, r2, lsl #12
     d78:	00010501 	andeq	r0, r1, r1, lsl #10
     d7c:	00000205 	andeq	r0, r0, r5, lsl #4
     d80:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
     d84:	11050103 	tstne	r5, r3, lsl #2
     d88:	4a170584 	bmi	5c23a0 <__core1_unwind_stub-0xa3dc60>
     d8c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
     d90:	13054c10 	movwne	r4, #23568	; 0x5c10
     d94:	4a05054d 	bmi	1422d0 <__core1_unwind_stub-0xebdd30>
     d98:	9ff70905 	svcls	0x00f70905
     d9c:	1005d731 	andne	sp, r5, r1, lsr r7
     da0:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     da4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     da8:	01010008 	tsteq	r1, r8
     dac:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     db0:	00000002 	andeq	r0, r0, r2
     db4:	04820300 	streq	r0, [r2], #768	; 0x300
     db8:	84110501 	ldrhi	r0, [r1], #-1281	; 0xfffffaff
     dbc:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     dc0:	10052e08 	andne	r2, r5, r8, lsl #28
     dc4:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     dc8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     dcc:	319ff709 	orrscc	pc, pc, r9, lsl #14
     dd0:	301005d7 			; <UNDEFINED> instruction: 0x301005d7
     dd4:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     dd8:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     ddc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     de0:	02050001 	andeq	r0, r5, #1
     de4:	00000000 	andeq	r0, r0, r0
     de8:	01049c03 	tsteq	r4, r3, lsl #24
     dec:	05841105 	streq	r1, [r4, #261]	; 0x105
     df0:	08054a17 	stmdaeq	r5, {r0, r1, r2, r4, r9, fp, lr}
     df4:	4c10052e 	cfldr32mi	mvfx0, [r0], {46}	; 0x2e
     df8:	054d1305 	strbeq	r1, [sp, #-773]	; 0xfffffcfb
     dfc:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
     e00:	d832a0f8 	ldmdale	r2!, {r3, r4, r5, r6, r7, sp, pc}
     e04:	05301005 	ldreq	r1, [r0, #-5]!
     e08:	01054d0c 	tsteq	r5, ip, lsl #26
     e0c:	0008022f 	andeq	r0, r8, pc, lsr #4
     e10:	01050101 	tsteq	r5, r1, lsl #2
     e14:	00020500 	andeq	r0, r2, r0, lsl #10
     e18:	03000000 	movweq	r0, #0
     e1c:	050104bb 	streq	r0, [r1, #-1211]	; 0xfffffb45
     e20:	05059f13 	streq	r9, [r5, #-3859]	; 0xfffff0ed
     e24:	f811054a 			; <UNDEFINED> instruction: 0xf811054a
     e28:	059e5f05 	ldreq	r5, [lr, #3845]	; 0xf05
     e2c:	09054a0f 	stmdbeq	r5, {r0, r1, r2, r3, r9, fp, lr}
     e30:	3211054b 	andscc	r0, r1, #314572800	; 0x12c00000
     e34:	059e7005 	ldreq	r7, [lr, #5]
     e38:	09054a0f 	stmdbeq	r5, {r0, r1, r2, r3, r9, fp, lr}
     e3c:	3010054b 	andscc	r0, r0, fp, asr #10
     e40:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     e44:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     e48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     e4c:	02050001 	andeq	r0, r5, #1
     e50:	00000000 	andeq	r0, r0, r0
     e54:	0104d203 	tsteq	r4, r3, lsl #4
     e58:	059f1305 	ldreq	r1, [pc, #773]	; 1165 <__core1_unwind_stub-0xffee9b>
     e5c:	11054a05 	tstne	r5, r5, lsl #20
     e60:	9e5f05f8 	mrcls	5, 2, r0, cr15, cr8, {7}
     e64:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
     e68:	11054b09 	tstne	r5, r9, lsl #22
     e6c:	9e700533 	mrcls	5, 3, r0, cr0, cr3, {1}
     e70:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
     e74:	10054b09 	andne	r4, r5, r9, lsl #22
     e78:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     e7c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     e80:	01010008 	tsteq	r1, r8
     e84:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     e88:	00000002 	andeq	r0, r0, r2
     e8c:	04ea0300 	strbteq	r0, [sl], #768	; 0x300
     e90:	a0110501 	andsge	r0, r1, r1, lsl #10
     e94:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     e98:	10052e08 	andne	r2, r5, r8, lsl #28
     e9c:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     ea0:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ea4:	1005f712 	andne	pc, r5, r2, lsl r7	; <UNPREDICTABLE>
     ea8:	6709054a 	strvs	r0, [r9, -sl, asr #10]
     eac:	05311005 	ldreq	r1, [r1, #-5]!
     eb0:	10056709 	andne	r6, r5, r9, lsl #14
     eb4:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     eb8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     ebc:	01010008 	tsteq	r1, r8
     ec0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     ec4:	00000002 	andeq	r0, r0, r2
     ec8:	05850300 	streq	r0, [r5, #768]	; 0x300
     ecc:	a0110501 	andsge	r0, r1, r1, lsl #10
     ed0:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     ed4:	10052e08 	andne	r2, r5, r8, lsl #28
     ed8:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     edc:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ee0:	1005f712 	andne	pc, r5, r2, lsl r7	; <UNPREDICTABLE>
     ee4:	6709054a 	strvs	r0, [r9, -sl, asr #10]
     ee8:	05311005 	ldreq	r1, [r1, #-5]!
     eec:	10056709 	andne	r6, r5, r9, lsl #14
     ef0:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     ef4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     ef8:	01010008 	tsteq	r1, r8
     efc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     f00:	00000002 	andeq	r0, r0, r2
     f04:	05a00300 	streq	r0, [r0, #768]!	; 0x300
     f08:	bc110501 	cfldr32lt	mvfx0, [r1], {1}
     f0c:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     f10:	10052e08 	andne	r2, r5, r8, lsl #28
     f14:	4e05054c 	cfsh32mi	mvfx0, mvfx5, #44
     f18:	056e1005 	strbeq	r1, [lr, #-5]!
     f1c:	13054809 	movwne	r4, #22537	; 0x5809
     f20:	4a050533 	bmi	1423f4 <__core1_unwind_stub-0xebdc0c>
     f24:	9fdc1505 	svcls	0x00dc1505
     f28:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     f2c:	09056615 	stmdbeq	r5, {r0, r2, r4, r9, sl, sp, lr}
     f30:	0c05bb67 			; <UNDEFINED> instruction: 0x0c05bb67
     f34:	47100533 			; <UNDEFINED> instruction: 0x47100533
     f38:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
     f3c:	01010008 	tsteq	r1, r8
     f40:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     f44:	00000002 	andeq	r0, r0, r2
     f48:	05c60300 	strbeq	r0, [r6, #768]	; 0x300
     f4c:	bc110501 	cfldr32lt	mvfx0, [r1], {1}
     f50:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     f54:	10052e08 	andne	r2, r5, r8, lsl #28
     f58:	4e05054c 	cfsh32mi	mvfx0, mvfx5, #44
     f5c:	056e1005 	strbeq	r1, [lr, #-5]!
     f60:	13054809 	movwne	r4, #22537	; 0x5809
     f64:	4a050533 	bmi	142438 <__core1_unwind_stub-0xebdbc8>
     f68:	9fdc1505 	svcls	0x00dc1505
     f6c:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     f70:	09056615 	stmdbeq	r5, {r0, r2, r4, r9, sl, sp, lr}
     f74:	0c05bb67 			; <UNDEFINED> instruction: 0x0c05bb67
     f78:	47100533 			; <UNDEFINED> instruction: 0x47100533
     f7c:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
     f80:	01010008 	tsteq	r1, r8
     f84:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     f88:	00000002 	andeq	r0, r0, r2
     f8c:	05ec0300 	strbeq	r0, [ip, #768]!	; 0x300
     f90:	a0180501 	andsge	r0, r8, r1, lsl #10
     f94:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
     f98:	4a0a0318 	bmi	281c00 <__core1_unwind_stub-0xd7e400>
     f9c:	054a2505 	strbeq	r2, [sl, #-1285]	; 0xfffffafb
     fa0:	0f052e2b 	svceq	0x00052e2b
     fa4:	4c0c059e 	cfstr32mi	mvfx0, [ip], {158}	; 0x9e
     fa8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     fac:	01010006 	tsteq	r1, r6
     fb0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     fb4:	0019e402 	andseq	lr, r9, r2, lsl #8
     fb8:	05ff0301 	ldrbeq	r0, [pc, #769]!	; 12c1 <__core1_unwind_stub-0xffed3f>
     fbc:	a0080501 	andge	r0, r8, r1, lsl #10
     fc0:	05681005 	strbeq	r1, [r8, #-5]!
     fc4:	4a0a0317 	bmi	281c28 <__core1_unwind_stub-0xd7e3d8>
     fc8:	054a2905 	strbeq	r2, [sl, #-2309]	; 0xfffff6fb
     fcc:	3c054a24 			; <UNDEFINED> instruction: 0x3c054a24
     fd0:	4a0d052e 	bmi	342490 <__core1_unwind_stub-0xcbdb70>
     fd4:	05a10c05 	streq	r0, [r1, #3077]!	; 0xc05
     fd8:	06028301 	streq	r8, [r2], -r1, lsl #6
     fdc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     fe0:	02050001 	andeq	r0, r5, #1
     fe4:	00000000 	andeq	r0, r0, r0
     fe8:	01069503 	tsteq	r6, r3, lsl #10
     fec:	05a01005 	streq	r1, [r0, #5]!
     ff0:	0c05660e 	stceq	6, cr6, [r5], {14}
     ff4:	2f01054c 	svccs	0x0001054c
     ff8:	01000802 	tsteq	r0, r2, lsl #16
     ffc:	00010501 	andeq	r0, r1, r1, lsl #10
    1000:	1a580205 	bne	160181c <__end__+0x5e57fc>
    1004:	9e030100 	adflss	f0, f3, f0
    1008:	08050106 	stmdaeq	r5, {r1, r2, r8}
    100c:	001c05a0 	andseq	r0, ip, r0, lsr #11
    1010:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1014:	05681005 	strbeq	r1, [r8, #-5]!
    1018:	05bb4e12 	ldreq	r4, [fp, #3602]!	; 0xe12
    101c:	0105bf0c 	tsteq	r5, ip, lsl #30
    1020:	0008022f 	andeq	r0, r8, pc, lsr #4
    1024:	01050101 	tsteq	r5, r1, lsl #2
    1028:	00020500 	andeq	r0, r2, r0, lsl #10
    102c:	03000000 	movweq	r0, #0
    1030:	050106b0 	streq	r0, [r1, #-1712]	; 0xfffff950
    1034:	05059f13 	streq	r9, [r5, #-3859]	; 0xfffff0ed
    1038:	dc09054a 	cfstr32le	mvfx0, [r9], {74}	; 0x4a
    103c:	0c053d08 	stceq	13, cr3, [r5], {8}
    1040:	47100533 			; <UNDEFINED> instruction: 0x47100533
    1044:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    1048:	01010008 	tsteq	r1, r8
    104c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1050:	001ad002 	andseq	sp, sl, r2
    1054:	06c10301 	strbeq	r0, [r1], r1, lsl #6
    1058:	9f130501 	svcls	0x00130501
    105c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    1060:	5908dc09 	stmdbpl	r8, {r0, r3, sl, fp, ip, lr, pc}
    1064:	05330c05 	ldreq	r0, [r3, #-3077]!	; 0xfffff3fb
    1068:	01054710 	tsteq	r5, r0, lsl r7
    106c:	00080232 	andeq	r0, r8, r2, lsr r2
    1070:	01050101 	tsteq	r5, r1, lsl #2
    1074:	00020500 	andeq	r0, r2, r0, lsl #10
    1078:	03000000 	movweq	r0, #0
    107c:	050106d2 	streq	r0, [r1, #-1746]	; 0xfffff92e
    1080:	0105840c 	tsteq	r5, ip, lsl #8
    1084:	00060283 	andeq	r0, r6, r3, lsl #5
    1088:	01050101 	tsteq	r5, r1, lsl #2
    108c:	00020500 	andeq	r0, r2, r0, lsl #10
    1090:	03000000 	movweq	r0, #0
    1094:	050106d8 	streq	r0, [r1, #-1752]	; 0xfffff928
    1098:	0105840c 	tsteq	r5, ip, lsl #8
    109c:	00060283 	andeq	r0, r6, r3, lsl #5
    10a0:	01050101 	tsteq	r5, r1, lsl #2
    10a4:	00020500 	andeq	r0, r2, r0, lsl #10
    10a8:	03000000 	movweq	r0, #0
    10ac:	050106de 	streq	r0, [r1, #-1758]	; 0xfffff922
    10b0:	0105840c 	tsteq	r5, ip, lsl #8
    10b4:	00060283 	andeq	r0, r6, r3, lsl #5
    10b8:	01050101 	tsteq	r5, r1, lsl #2
    10bc:	00020500 	andeq	r0, r2, r0, lsl #10
    10c0:	03000000 	movweq	r0, #0
    10c4:	050106e4 	streq	r0, [r1, #-1764]	; 0xfffff91c
    10c8:	0105840c 	tsteq	r5, ip, lsl #8
    10cc:	00060283 	andeq	r0, r6, r3, lsl #5
    10d0:	01050101 	tsteq	r5, r1, lsl #2
    10d4:	00020500 	andeq	r0, r2, r0, lsl #10
    10d8:	03000000 	movweq	r0, #0
    10dc:	050106ea 	streq	r0, [r1, #-1770]	; 0xfffff916
    10e0:	0105840c 	tsteq	r5, ip, lsl #8
    10e4:	00060283 	andeq	r0, r6, r3, lsl #5
    10e8:	01050101 	tsteq	r5, r1, lsl #2
    10ec:	00020500 	andeq	r0, r2, r0, lsl #10
    10f0:	03000000 	movweq	r0, #0
    10f4:	050106f0 	streq	r0, [r1, #-1776]	; 0xfffff910
    10f8:	0105840c 	tsteq	r5, ip, lsl #8
    10fc:	00060283 	andeq	r0, r6, r3, lsl #5
    1100:	01050101 	tsteq	r5, r1, lsl #2
    1104:	00020500 	andeq	r0, r2, r0, lsl #10
    1108:	03000000 	movweq	r0, #0
    110c:	050106f6 	streq	r0, [r1, #-1782]	; 0xfffff90a
    1110:	0105840c 	tsteq	r5, ip, lsl #8
    1114:	00060283 	andeq	r0, r6, r3, lsl #5
    1118:	01050101 	tsteq	r5, r1, lsl #2
    111c:	00020500 	andeq	r0, r2, r0, lsl #10
    1120:	03000000 	movweq	r0, #0
    1124:	050106fc 	streq	r0, [r1, #-1788]	; 0xfffff904
    1128:	0105840c 	tsteq	r5, ip, lsl #8
    112c:	00060283 	andeq	r0, r6, r3, lsl #5
    1130:	01050101 	tsteq	r5, r1, lsl #2
    1134:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    1138:	0301001b 	movweq	r0, #4123	; 0x101b
    113c:	05010782 	streq	r0, [r1, #-1922]	; 0xfffff87e
    1140:	0105880c 	tsteq	r5, ip, lsl #16
    1144:	00060286 	andeq	r0, r6, r6, lsl #5
    1148:	01050101 	tsteq	r5, r1, lsl #2
    114c:	00020500 	andeq	r0, r2, r0, lsl #10
    1150:	03000000 	movweq	r0, #0
    1154:	05010790 	streq	r0, [r1, #-1936]	; 0xfffff870
    1158:	05059f13 	streq	r9, [r5, #-3859]	; 0xfffff0ed
    115c:	dc2c054a 	cfstr32le	mvfx0, [ip], #-296	; 0xfffffed8
    1160:	05821305 	streq	r1, [r2, #773]	; 0x305
    1164:	11052e2c 	tstne	r5, ip, lsr #28
    1168:	4b09054a 	blmi	242698 <__core1_unwind_stub-0xdbd968>
    116c:	05330c05 	ldreq	r0, [r3, #-3077]!	; 0xfffff3fb
    1170:	01054710 	tsteq	r5, r0, lsl r7
    1174:	00080232 	andeq	r0, r8, r2, lsr r2
    1178:	01050101 	tsteq	r5, r1, lsl #2
    117c:	80020500 	andhi	r0, r2, r0, lsl #10
    1180:	0301001b 	movweq	r0, #4123	; 0x101b
    1184:	050107a4 	streq	r0, [r1, #-1956]	; 0xfffff85c
    1188:	0592080e 	ldreq	r0, [r2, #2062]	; 0x80e
    118c:	10054d05 	andne	r4, r5, r5, lsl #26
    1190:	4809056e 	stmdami	r9, {r1, r2, r3, r5, r6, r8, sl}
    1194:	05340505 	ldreq	r0, [r4, #-1285]!	; 0xfffffafb
    1198:	09056d10 	stmdbeq	r5, {r4, r8, sl, fp, sp, lr}
    119c:	34050548 	strcc	r0, [r5], #-1352	; 0xfffffab8
    11a0:	056c1005 	strbeq	r1, [ip, #-5]!
    11a4:	13054809 	movwne	r4, #22537	; 0x5809
    11a8:	4a050533 	bmi	14267c <__core1_unwind_stub-0xebd984>
    11ac:	05dd1005 	ldrbeq	r1, [sp, #5]
    11b0:	10054a0d 	andne	r4, r5, sp, lsl #20
    11b4:	660d0569 	strvs	r0, [sp], -r9, ror #10
    11b8:	05690c05 	strbeq	r0, [r9, #-3077]!	; 0xfffff3fb
    11bc:	10056911 	andne	r6, r5, r1, lsl r9
    11c0:	69150568 	ldmdbvs	r5, {r3, r5, r6, r8, sl}
    11c4:	086b0905 	stmdaeq	fp!, {r0, r2, r8, fp}^
    11c8:	340c057b 	strcc	r0, [ip], #-1403	; 0xfffffa85
    11cc:	05471005 	strbeq	r1, [r7, #-5]
    11d0:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
    11d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    11d8:	02050001 	andeq	r0, r5, #1
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	0107f403 	tsteq	r7, r3, lsl #8	; <UNPREDICTABLE>
    11e4:	05831305 	streq	r1, [r3, #773]	; 0x305
    11e8:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
    11ec:	052108dc 	streq	r0, [r1, #-2268]!	; 0xfffff724
    11f0:	1005340c 	andne	r3, r5, ip, lsl #8
    11f4:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    11f8:	01000802 	tsteq	r0, r2, lsl #16
    11fc:	00010501 	andeq	r0, r1, r1, lsl #10
    1200:	00000205 	andeq	r0, r0, r5, lsl #4
    1204:	86030000 	strhi	r0, [r3], -r0
    1208:	13050108 	movwne	r0, #20744	; 0x5108
    120c:	4a050583 	bmi	142820 <__core1_unwind_stub-0xebd7e0>
    1210:	08dc0905 	ldmeq	ip, {r0, r2, r8, fp}^
    1214:	350c0521 	strcc	r0, [ip, #-1313]	; 0xfffffadf
    1218:	05461005 	strbeq	r1, [r6, #-5]
    121c:	08023301 	stmdaeq	r2, {r0, r8, r9, ip, sp}
    1220:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1224:	02050001 	andeq	r0, r5, #1
    1228:	00000000 	andeq	r0, r0, r0
    122c:	01089a03 	tsteq	r8, r3, lsl #20
    1230:	059f1305 	ldreq	r1, [pc, #773]	; 153d <__core1_unwind_stub-0xffeac3>
    1234:	13054a05 	movwne	r4, #23045	; 0x5a05
    1238:	4a1105dc 	bmi	4429b0 <__core1_unwind_stub-0xbbd650>
    123c:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    1240:	1005330c 	andne	r3, r5, ip, lsl #6
    1244:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    1248:	01000802 	tsteq	r0, r2, lsl #16
    124c:	00010501 	andeq	r0, r1, r1, lsl #10
    1250:	1cd40205 	lfmne	f0, 2, [r4], {5}
    1254:	ac030100 	stfges	f0, [r3], {-0}
    1258:	13050108 	movwne	r0, #20744	; 0x5108
    125c:	4a05059f 	bmi	1428e0 <__core1_unwind_stub-0xebd720>
    1260:	08dc0905 	ldmeq	ip, {r0, r2, r8, fp}^
    1264:	330c053d 	movwcc	r0, #50493	; 0xc53d
    1268:	05471005 	strbeq	r1, [r7, #-5]
    126c:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
    1270:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1274:	02050001 	andeq	r0, r5, #1
    1278:	00000000 	andeq	r0, r0, r0
    127c:	0108bd03 	tsteq	r8, r3, lsl #26
    1280:	059f1305 	ldreq	r1, [pc, #773]	; 158d <__core1_unwind_stub-0xffea73>
    1284:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
    1288:	055908dc 	ldrbeq	r0, [r9, #-2268]	; 0xfffff724
    128c:	1005330c 	andne	r3, r5, ip, lsl #6
    1290:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    1294:	01000802 	tsteq	r0, r2, lsl #16
    1298:	00010501 	andeq	r0, r1, r1, lsl #10
    129c:	00000205 	andeq	r0, r0, r5, lsl #4
    12a0:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    12a4:	11050108 	tstne	r5, r8, lsl #2
    12a8:	4a170584 	bmi	5c28c0 <__core1_unwind_stub-0xa3d740>
    12ac:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    12b0:	0f054c10 	svceq	0x00054c10
    12b4:	4a08054e 	bmi	2027f4 <__core1_unwind_stub-0xdfd80c>
    12b8:	054d1805 	strbeq	r1, [sp, #-2053]	; 0xfffff7fb
    12bc:	36054a12 			; <UNDEFINED> instruction: 0x36054a12
    12c0:	4a0c054b 	bmi	3027f4 <__core1_unwind_stub-0xcfd80c>
    12c4:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    12c8:	01054f0c 	tsteq	r5, ip, lsl #30
    12cc:	00060283 	andeq	r0, r6, r3, lsl #5
    12d0:	01050101 	tsteq	r5, r1, lsl #2
    12d4:	00020500 	andeq	r0, r2, r0, lsl #10
    12d8:	03000000 	movweq	r0, #0
    12dc:	050108e5 	streq	r0, [r1, #-2277]	; 0xfffff71b
    12e0:	0105840c 	tsteq	r5, ip, lsl #8
    12e4:	00060283 	andeq	r0, r6, r3, lsl #5
    12e8:	01050101 	tsteq	r5, r1, lsl #2
    12ec:	00020500 	andeq	r0, r2, r0, lsl #10
    12f0:	03000000 	movweq	r0, #0
    12f4:	050108eb 	streq	r0, [r1, #-2283]	; 0xfffff715
    12f8:	0805840f 	stmdaeq	r5, {r0, r1, r2, r3, sl, pc}
    12fc:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
    1300:	054e0c05 	strbeq	r0, [lr, #-3077]	; 0xfffff3fb
    1304:	06028301 	streq	r8, [r2], -r1, lsl #6
    1308:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    130c:	02050001 	andeq	r0, r5, #1
    1310:	00000000 	andeq	r0, r0, r0
    1314:	0108f703 	tsteq	r8, r3, lsl #14	; <UNPREDICTABLE>
    1318:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    131c:	06028301 	streq	r8, [r2], -r1, lsl #6
    1320:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1324:	02050001 	andeq	r0, r5, #1
    1328:	00000000 	andeq	r0, r0, r0
    132c:	0108fd03 	tsteq	r8, r3, lsl #26	; <UNPREDICTABLE>
    1330:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    1334:	06028301 	streq	r8, [r2], -r1, lsl #6
    1338:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    133c:	02050001 	andeq	r0, r5, #1
    1340:	00000000 	andeq	r0, r0, r0
    1344:	01098303 	tsteq	r9, r3, lsl #6
    1348:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    134c:	06028301 	streq	r8, [r2], -r1, lsl #6
    1350:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1354:	02050001 	andeq	r0, r5, #1
    1358:	00000000 	andeq	r0, r0, r0
    135c:	01098903 	tsteq	r9, r3, lsl #18
    1360:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    1364:	06028301 	streq	r8, [r2], -r1, lsl #6
    1368:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    136c:	02050001 	andeq	r0, r5, #1
    1370:	00000000 	andeq	r0, r0, r0
    1374:	01098f03 	tsteq	r9, r3, lsl #30
    1378:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    137c:	06028301 	streq	r8, [r2], -r1, lsl #6
    1380:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1384:	02050001 	andeq	r0, r5, #1
    1388:	01001d54 	tsteq	r0, r4, asr sp
    138c:	01099503 	tsteq	r9, r3, lsl #10
    1390:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    1394:	06028301 	streq	r8, [r2], -r1, lsl #6
    1398:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    139c:	02050001 	andeq	r0, r5, #1
    13a0:	00000000 	andeq	r0, r0, r0
    13a4:	01099b03 	tsteq	r9, r3, lsl #22
    13a8:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    13ac:	06028301 	streq	r8, [r2], -r1, lsl #6
    13b0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13b4:	02050001 	andeq	r0, r5, #1
    13b8:	01001d80 	smlabbeq	r0, r0, sp, r1
    13bc:	0109a103 	tsteq	r9, r3, lsl #2
    13c0:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    13c4:	06028301 	streq	r8, [r2], -r1, lsl #6
    13c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13cc:	02050001 	andeq	r0, r5, #1
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	0109a703 	tsteq	r9, r3, lsl #14
    13d8:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    13dc:	06028301 	streq	r8, [r2], -r1, lsl #6
    13e0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13e4:	02050001 	andeq	r0, r5, #1
    13e8:	00000000 	andeq	r0, r0, r0
    13ec:	0109ae03 	tsteq	r9, r3, lsl #28
    13f0:	059f1305 	ldreq	r1, [pc, #773]	; 16fd <__core1_unwind_stub-0xffe903>
    13f4:	13054a05 	movwne	r4, #23045	; 0x5a05
    13f8:	4a1105dc 	bmi	442b70 <__core1_unwind_stub-0xbbd490>
    13fc:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    1400:	1005330c 	andne	r3, r5, ip, lsl #6
    1404:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    1408:	01000802 	tsteq	r0, r2, lsl #16
    140c:	000e4301 	andeq	r4, lr, r1, lsl #6
    1410:	ff000300 			; <UNDEFINED> instruction: 0xff000300
    1414:	02000000 	andeq	r0, r0, #0
    1418:	0d0efb01 	vstreq	d15, [lr, #-4]
    141c:	01010100 	mrseq	r0, (UNDEF: 17)
    1420:	00000001 	andeq	r0, r0, r1
    1424:	01000001 	tsteq	r0, r1
    1428:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    142c:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    1430:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1434:	77680065 	strbvc	r0, [r8, -r5, rrx]!
    1438:	2f62696c 	svccs	0x0062696c
    143c:	2f637273 	svccs	0x00637273
    1440:	676d7768 	strbvs	r7, [sp, -r8, ror #14]!
    1444:	752f0072 	strvc	r0, [pc, #-114]!	; 13da <__core1_unwind_stub-0xffec26>
    1448:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1284 <__core1_unwind_stub-0xffed7c>
    144c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1450:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    1454:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1458:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    145c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1460:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    1464:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    1468:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    146c:	2f006564 	svccs	0x00006564
    1470:	2f727375 	svccs	0x00727375
    1474:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1478:	2f656475 	svccs	0x00656475
    147c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1480:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1484:	2f007379 	svccs	0x00007379
    1488:	2f727375 	svccs	0x00727375
    148c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1490:	2f656475 	svccs	0x00656475
    1494:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1498:	00006269 	andeq	r6, r0, r9, ror #4
    149c:	5f746c61 	svcpl	0x00746c61
    14a0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    14a4:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
    14a8:	00000100 	andeq	r0, r0, r0, lsl #2
    14ac:	5f746c61 	svcpl	0x00746c61
    14b0:	2e756d6d 	cdpcs	13, 7, cr6, cr5, cr13, {3}
    14b4:	00020063 	andeq	r0, r2, r3, rrx
    14b8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    14bc:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    14c0:	00030068 	andeq	r0, r3, r8, rrx
    14c4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    14c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    14cc:	00030068 	andeq	r0, r3, r8, rrx
    14d0:	6c776800 	ldclvs	8, cr6, [r7], #-0
    14d4:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    14d8:	00000100 	andeq	r0, r0, r0, lsl #2
    14dc:	5f746c61 	svcpl	0x00746c61
    14e0:	2e756d6d 	cdpcs	13, 7, cr6, cr5, cr13, {3}
    14e4:	00010068 	andeq	r0, r1, r8, rrx
    14e8:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    14ec:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    14f0:	00040068 	andeq	r0, r4, r8, rrx
    14f4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    14f8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    14fc:	00000400 	andeq	r0, r0, r0, lsl #8
    1500:	6b636f6c 	blvs	18dd2b8 <__end__+0x8c1298>
    1504:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1508:	74730000 	ldrbtvc	r0, [r3], #-0
    150c:	2e6f6964 	vnmulcs.f16	s13, s30, s9	; <UNPREDICTABLE>
    1510:	00050068 	andeq	r0, r5, r8, rrx
    1514:	51050000 	mrspl	r0, (UNDEF: 5)
    1518:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    151c:	0301001d 	movweq	r0, #4125	; 0x101d
    1520:	59050138 	stmdbpl	r5, {r3, r4, r5, r8}
    1524:	2e010566 	cfsh32cs	mvfx0, mvfx1, #54
    1528:	01000a02 	tsteq	r0, r2, lsl #20
    152c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1530:	02050001 	andeq	r0, r5, #1
    1534:	01001dd0 	ldrdeq	r1, [r0, -r0]
    1538:	0102aa03 	tsteq	r2, r3, lsl #20
    153c:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    1540:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1544:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1548:	00010502 	andeq	r0, r1, r2, lsl #10
    154c:	00000205 	andeq	r0, r0, r5, lsl #4
    1550:	af030000 	svcge	0x00030000
    1554:	0c050102 	stfeqs	f0, [r5], {2}
    1558:	2f01054b 	svccs	0x0001054b
    155c:	01000802 	tsteq	r0, r2, lsl #16
    1560:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1564:	02050001 	andeq	r0, r5, #1
    1568:	01001dec 	smlatteq	r0, ip, sp, r1
    156c:	0102b403 	tsteq	r2, r3, lsl #8
    1570:	a1030505 	tstge	r3, r5, lsl #10
    1574:	0c05827f 	sfmeq	f0, 1, [r5], {127}	; 0x7f
    1578:	0316054d 	tsteq	r6, #322961408	; 0x13400000
    157c:	052e00dd 	streq	r0, [lr, #-221]!	; 0xffffff23
    1580:	1c052f0e 	stcne	15, cr2, [r5], {14}
    1584:	f21b0569 	vrshl.s16	q0, <illegal reg q12.5>, <illegal reg q5.5>
    1588:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    158c:	08052e19 	stmdaeq	r5, {r0, r3, r4, r9, sl, fp, sp}
    1590:	4d10052e 	cfldr32mi	mvfx0, [r0, #-184]	; 0xffffff48
    1594:	05510505 	ldrbeq	r0, [r1, #-1285]	; 0xfffffafb
    1598:	0105840c 	tsteq	r5, ip, lsl #8
    159c:	0006022f 	andeq	r0, r6, pc, lsr #4
    15a0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    15a4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    15a8:	00000002 	andeq	r0, r0, r2
    15ac:	02cb0300 	sbceq	r0, fp, #0, 6
    15b0:	bd0a0501 	cfstr32lt	mvfx0, [sl, #-4]
    15b4:	05510d05 	ldrbeq	r0, [r1, #-3333]	; 0xfffff2fb
    15b8:	12054a05 	andne	r4, r5, #20480	; 0x5000
    15bc:	4a0c05f6 	bmi	302d9c <__core1_unwind_stub-0xcfd264>
    15c0:	054d1a05 	strbeq	r1, [sp, #-2565]	; 0xfffff5fb
    15c4:	1f054d11 	svcne	0x00054d11
    15c8:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
    15cc:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
    15d0:	1f055011 	svcne	0x00055011
    15d4:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
    15d8:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
    15dc:	1b05510d 	blne	155a18 <__core1_unwind_stub-0xeaa5e8>
    15e0:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
    15e4:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    15e8:	09054f10 	stmdbeq	r5, {r4, r8, r9, sl, fp, lr}
    15ec:	524a7503 	subpl	r7, sl, #12582912	; 0xc00000
    15f0:	09030d05 	stmdbeq	r3, {r0, r2, r8, sl, fp}
    15f4:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
    15f8:	054c1605 	strbeq	r1, [ip, #-1541]	; 0xfffff9fb
    15fc:	0d056608 	stceq	6, cr6, [r5, #-32]	; 0xffffffe0
    1600:	8215054c 	andshi	r0, r5, #76, 10	; 0x13000000
    1604:	056b1005 	strbeq	r1, [fp, #-5]!
    1608:	18054a09 	stmdane	r5, {r0, r3, r9, fp, lr}
    160c:	03040200 	movweq	r0, #16896	; 0x4200
    1610:	00110530 	andseq	r0, r1, r0, lsr r5
    1614:	66030402 	strvs	r0, [r3], -r2, lsl #8
    1618:	02001d05 	andeq	r1, r0, #320	; 0x140
    161c:	00660304 	rsbeq	r0, r6, r4, lsl #6
    1620:	48030402 	stmdami	r3, {r1, sl}
    1624:	02000905 	andeq	r0, r0, #81920	; 0x14000
    1628:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    162c:	01056c0c 	tsteq	r5, ip, lsl #24
    1630:	0008022f 	andeq	r0, r8, pc, lsr #4
    1634:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    1638:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    163c:	00000002 	andeq	r0, r0, r2
    1640:	03920300 	orrseq	r0, r2, #0, 6
    1644:	bb0a0501 	bllt	282a50 <__core1_unwind_stub-0xd7d5b0>
    1648:	09030d05 	stmdbeq	r3, {r0, r2, r8, sl, fp}
    164c:	4a05054a 	bmi	142b7c <__core1_unwind_stub-0xebd484>
    1650:	25080d05 	strcs	r0, [r8, #-3333]	; 0xfffff2fb
    1654:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
    1658:	14052e0c 	strne	r2, [r5], #-3596	; 0xfffff1f4
    165c:	4e0d054c 	cfsh32mi	mvfx0, mvfx13, #44
    1660:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
    1664:	14052e0c 	strne	r2, [r5], #-3596	; 0xfffff1f4
    1668:	4c13054c 	cfldr32mi	mvfx0, [r3], {76}	; 0x4c
    166c:	034b0905 	movteq	r0, #47365	; 0xb905
    1670:	16052e79 			; <UNDEFINED> instruction: 0x16052e79
    1674:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    1678:	15052e24 	strne	r2, [r5, #-3620]	; 0xfffff1dc
    167c:	660f052e 	strvs	r0, [pc], -lr, lsr #10
    1680:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    1684:	10054a08 	andne	r4, r5, r8, lsl #20
    1688:	4e23054c 	cfsh64mi	mvdx0, mvdx3, #44
    168c:	05660a05 	strbeq	r0, [r6, #-2565]!	; 0xfffff5fb
    1690:	0b05310d 	bleq	14dacc <__core1_unwind_stub-0xeb2534>
    1694:	4b13054a 	blmi	4c2bc4 <__core1_unwind_stub-0xb3d43c>
    1698:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    169c:	15054c0d 	strne	r4, [r5, #-3085]	; 0xfffff3f3
    16a0:	6c100582 	cfldr32vs	mvfx0, [r0], {130}	; 0x82
    16a4:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    16a8:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    16ac:	11053003 	tstne	r5, r3
    16b0:	03040200 	movweq	r0, #16896	; 0x4200
    16b4:	001d0566 	andseq	r0, sp, r6, ror #10
    16b8:	66030402 	strvs	r0, [r3], -r2, lsl #8
    16bc:	03040200 	movweq	r0, #16896	; 0x4200
    16c0:	00090548 	andeq	r0, r9, r8, asr #10
    16c4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    16c8:	056c0c05 	strbeq	r0, [ip, #-3077]!	; 0xfffff3fb
    16cc:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    16d0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    16d4:	00010502 	andeq	r0, r1, r2, lsl #10
    16d8:	00000205 	andeq	r0, r0, r5, lsl #4
    16dc:	d1030000 	mrsle	r0, (UNDEF: 3)
    16e0:	05050103 	streq	r0, [r5, #-259]	; 0xfffffefd
    16e4:	667da003 	ldrbtvs	sl, [sp], -r3
    16e8:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    16ec:	02de0316 	sbcseq	r0, lr, #1476395008	; 0x58000000
    16f0:	2f0f052e 	svccs	0x000f052e
    16f4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    16f8:	0b054c09 	bleq	154724 <__core1_unwind_stub-0xeab8dc>
    16fc:	03050568 	movweq	r0, #21864	; 0x5568
    1700:	059e7daa 	ldreq	r7, [lr, #3498]	; 0xdaa
    1704:	0c054c01 	stceq	12, cr4, [r5], {1}
    1708:	2e02d703 	cdpcs	7, 0, cr13, cr2, cr3, {0}
    170c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1710:	01010006 	tsteq	r1, r6
    1714:	01050204 	tsteq	r5, r4, lsl #4
    1718:	78020500 	stmdavc	r2, {r8, sl}
    171c:	0301001e 	movweq	r0, #4126	; 0x101e
    1720:	050103de 	streq	r0, [r1, #-990]	; 0xfffffc22
    1724:	91036805 	tstls	r3, r5, lsl #16
    1728:	0c052e7d 	stceq	14, cr2, [r5], {125}	; 0x7d
    172c:	030d054d 	movweq	r0, #54605	; 0xd54d
    1730:	052e02ee 	streq	r0, [lr, #-750]!	; 0xfffffd12
    1734:	05052f0b 	streq	r2, [r5, #-3851]	; 0xfffff0f5
    1738:	9e7d9e03 	cdpls	14, 7, cr9, cr13, cr3, {0}
    173c:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
    1740:	02e3030c 	rsceq	r0, r3, #12, 6	; 0x30000000
    1744:	2f01052e 	svccs	0x0001052e
    1748:	01000602 	tsteq	r0, r2, lsl #12
    174c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1750:	02050001 	andeq	r0, r5, #1
    1754:	00000000 	andeq	r0, r0, r0
    1758:	0103ea03 	tsteq	r3, r3, lsl #20
    175c:	eb030505 	bl	c2b78 <__core1_unwind_stub-0xf3d488>
    1760:	0c05667d 	stceq	6, cr6, [r5], {125}	; 0x7d
    1764:	0316054d 	tsteq	r6, #322961408	; 0x13400000
    1768:	052e0293 	streq	r0, [lr, #-659]!	; 0xfffffd6d
    176c:	05052f0e 	streq	r2, [r5, #-3854]	; 0xfffff0f2
    1770:	667e8903 	ldrbtvs	r8, [lr], -r3, lsl #18
    1774:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    1778:	01f50316 	mvnseq	r0, r6, lsl r3
    177c:	3015052e 	andscc	r0, r5, lr, lsr #10
    1780:	20084105 	andcs	r4, r8, r5, lsl #2
    1784:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    1788:	01010008 	tsteq	r1, r8
    178c:	01050204 	tsteq	r5, r4, lsl #4
    1790:	c8020500 	stmdagt	r2, {r8, sl}
    1794:	0301001e 	movweq	r0, #4126	; 0x101e
    1798:	050103f3 	streq	r0, [r1, #-1011]	; 0xfffffc0d
    179c:	7de20305 	stclvc	3, cr0, [r2, #20]!
    17a0:	4d0c0582 	cfstr32mi	mvfx0, [ip, #-520]	; 0xfffffdf8
    17a4:	9c031605 	stcls	6, cr1, [r3], {5}
    17a8:	0e052e02 	cdpeq	14, 0, cr2, cr5, cr2, {0}
    17ac:	691c052f 	ldmdbvs	ip, {r0, r1, r2, r3, r5, r8, sl}
    17b0:	05f21b05 	ldrbeq	r1, [r2, #2821]!	; 0xb05
    17b4:	19054a09 	stmdbne	r5, {r0, r3, r9, fp, lr}
    17b8:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    17bc:	054d1005 	strbeq	r1, [sp, #-5]
    17c0:	0f054f0b 	svceq	0x00054f0b
    17c4:	f20e054c 	vrshl.s8	q0, q6, q7
    17c8:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    17cc:	0b05670e 	bleq	15b40c <__core1_unwind_stub-0xea4bf4>
    17d0:	0305052e 	movweq	r0, #21806	; 0x552e
    17d4:	059e7e82 	ldreq	r7, [lr, #3714]	; 0xe82
    17d8:	0c054c01 	stceq	12, cr4, [r5], {1}
    17dc:	2e028003 	cdpcs	0, 0, cr8, cr2, cr3, {0}
    17e0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    17e4:	01010008 	tsteq	r1, r8
    17e8:	01050204 	tsteq	r5, r4, lsl #4
    17ec:	00020500 	andeq	r0, r2, r0, lsl #10
    17f0:	03000000 	movweq	r0, #0
    17f4:	0501048b 	streq	r0, [r1, #-1163]	; 0xfffffb75
    17f8:	7e8a0305 	cdpvc	3, 8, cr0, cr10, cr5, {0}
    17fc:	4d0c0566 	cfstr32mi	mvfx0, [ip, #-408]	; 0xfffffe68
    1800:	f4031605 	vst1.8	{d1-d3}, [r3], r5
    1804:	38052e01 	stmdacc	r5, {r0, r9, sl, fp, sp}
    1808:	67010530 	smladxvs	r1, r0, r5, r0
    180c:	01000802 	tsteq	r0, r2, lsl #16
    1810:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1814:	02050001 	andeq	r0, r5, #1
    1818:	00000000 	andeq	r0, r0, r0
    181c:	01049203 	tsteq	r4, r3, lsl #4
    1820:	05850905 	streq	r0, [r5, #2309]	; 0x905
    1824:	08052e19 	stmdaeq	r5, {r0, r3, r4, r9, sl, fp, sp}
    1828:	4d10052e 	cfldr32mi	mvfx0, [r0, #-184]	; 0xffffff48
    182c:	fd030505 	stc2	5, cr0, [r3, #-20]	; 0xffffffec
    1830:	0c054a7d 			; <UNDEFINED> instruction: 0x0c054a7d
    1834:	030d054d 	movweq	r0, #54605	; 0xd54d
    1838:	052e0283 	streq	r0, [lr, #-643]!	; 0xfffffd7d
    183c:	0e052f0b 	cdpeq	15, 0, cr2, cr5, cr11, {0}
    1840:	2e0b0567 	cfsh32cs	mvfx0, mvfx11, #55
    1844:	88030505 	stmdahi	r3, {r0, r2, r8, sl}
    1848:	01059e7e 	tsteq	r5, lr, ror lr
    184c:	030c054c 	movweq	r0, #50508	; 0xc54c
    1850:	052e01fa 	streq	r0, [lr, #-506]!	; 0xfffffe06
    1854:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1858:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    185c:	00010502 	andeq	r0, r1, r2, lsl #10
    1860:	1fa80205 	svcne	0x00a80205
    1864:	a7030100 	strge	r0, [r3, -r0, lsl #2]
    1868:	0e050104 	adfeqs	f0, f5, f4
    186c:	4c0905f3 	cfstr32mi	mvfx0, [r9], {243}	; 0xf3
    1870:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    1874:	09054c0f 	stmdbeq	r5, {r0, r1, r2, r3, sl, fp, lr}
    1878:	66080569 	strvs	r0, [r8], -r9, ror #10
    187c:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    1880:	10056908 	andne	r6, r5, r8, lsl #18
    1884:	4d0b0568 	cfstr32mi	mvfx0, [fp, #-416]	; 0xfffffe60
    1888:	ac030505 	cfstr32ge	mvfx0, [r3], {5}
    188c:	0105ba7d 	tsteq	r5, sp, ror sl
    1890:	030c054c 	movweq	r0, #50508	; 0xc54c
    1894:	052e02d6 	streq	r0, [lr, #-726]!	; 0xfffffd2a
    1898:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    189c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    18a0:	00010502 	andeq	r0, r1, r2, lsl #10
    18a4:	205c0205 	subscs	r0, ip, r5, lsl #4
    18a8:	c2030100 	andgt	r0, r3, #0, 2
    18ac:	0e050104 	adfeqs	f0, f5, f4
    18b0:	4d08059f 	cfstr32mi	mvfx0, [r8, #-636]	; 0xfffffd84
    18b4:	05681005 	strbeq	r1, [r8, #-5]!
    18b8:	05054d0c 	streq	r4, [r5, #-3340]	; 0xfffff2f4
    18bc:	3025054a 	eorcc	r0, r5, sl, asr #10
    18c0:	05661705 	strbeq	r1, [r6, #-1797]!	; 0xfffff8fb
    18c4:	18054c09 	stmdane	r5, {r0, r3, sl, fp, lr}
    18c8:	2e1e05f7 	mrccs	5, 0, r0, cr14, cr7, {7}
    18cc:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    18d0:	0d054a12 	vstreq	s8, [r5, #-72]	; 0xffffffb8
    18d4:	31140567 	tstcc	r4, r7, ror #10
    18d8:	02001f05 	andeq	r1, r0, #5, 30
    18dc:	73030204 	movwvc	r0, #12804	; 0x3204
    18e0:	0005054a 	andeq	r0, r5, sl, asr #10
    18e4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    18e8:	ba7cfa03 	blt	1f400fc <__end__+0xf240dc>
    18ec:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
    18f0:	0397030c 	orrseq	r0, r7, #12, 6	; 0x30000000
    18f4:	2f01052e 	svccs	0x0001052e
    18f8:	01000802 	tsteq	r0, r2, lsl #16
    18fc:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1900:	02050001 	andeq	r0, r5, #1
    1904:	00000000 	andeq	r0, r0, r0
    1908:	0104e203 	tsteq	r4, r3, lsl #4
    190c:	059f2305 	ldreq	r2, [pc, #773]	; 1c19 <__core1_unwind_stub-0xffe3e7>
    1910:	08054a0e 	stmdaeq	r5, {r1, r2, r3, r9, fp, lr}
    1914:	68100568 	ldmdavs	r0, {r3, r5, r6, r8, sl}
    1918:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
    191c:	05056810 	streq	r6, [r5, #-2064]	; 0xfffff7f0
    1920:	827cb703 	rsbshi	fp, ip, #786432	; 0xc0000
    1924:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
    1928:	03cc030c 	biceq	r0, ip, #12, 6	; 0x30000000
    192c:	2f01052e 	svccs	0x0001052e
    1930:	01000802 	tsteq	r0, r2, lsl #16
    1934:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1938:	02050001 	andeq	r0, r5, #1
    193c:	0100213c 	tsteq	r0, ip, lsr r1
    1940:	0104f503 	tsteq	r4, r3, lsl #10	; <UNPREDICTABLE>
    1944:	056a0e05 	strbeq	r0, [sl, #-3589]!	; 0xfffff1fb
    1948:	054e5105 	strbeq	r5, [lr, #-261]	; 0xfffffefb
    194c:	0105300c 	tsteq	r5, ip
    1950:	0008022f 	andeq	r0, r8, pc, lsr #4
    1954:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    1958:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    195c:	00000002 	andeq	r0, r0, r2
    1960:	058a0300 	streq	r0, [sl, #768]	; 0x300
    1964:	6a0e0501 	bvs	382d70 <__core1_unwind_stub-0xc7d290>
    1968:	4e510505 	cdpmi	5, 5, cr0, cr1, cr5, {0}
    196c:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
    1970:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1974:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1978:	00010502 	andeq	r0, r1, r2, lsl #10
    197c:	21700205 	cmncs	r0, r5, lsl #4
    1980:	a4030100 	strge	r0, [r3], #-256	; 0xffffff00
    1984:	09050105 	stmdbeq	r5, {r0, r2, r8}
    1988:	4a0805bb 	bmi	20307c <__core1_unwind_stub-0xdfcf84>
    198c:	054c1205 	strbeq	r1, [ip, #-517]	; 0xfffffdfb
    1990:	0d05840e 	cfstrseq	mvf8, [r5, #-56]	; 0xffffffc8
    1994:	6810054a 	ldmdavs	r0, {r1, r3, r6, r8, sl}
    1998:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    199c:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    19a0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    19a4:	00010502 	andeq	r0, r1, r2, lsl #10
    19a8:	21d80205 	bicscs	r0, r8, r5, lsl #4
    19ac:	b4030100 	strlt	r0, [r3], #-256	; 0xffffff00
    19b0:	0c050105 	stfeqs	f0, [r5], {5}
    19b4:	4a0505bd 	bmi	1430b0 <__core1_unwind_stub-0xebcf50>
    19b8:	02001005 	andeq	r1, r0, #5
    19bc:	05300304 	ldreq	r0, [r0, #-772]!	; 0xfffffcfc
    19c0:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    19c4:	31056603 	tstcc	r5, r3, lsl #12
    19c8:	03040200 	movweq	r0, #16896	; 0x4200
    19cc:	00050548 	andeq	r0, r5, r8, asr #10
    19d0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    19d4:	056e0c05 	strbeq	r0, [lr, #-3077]!	; 0xfffff3fb
    19d8:	3b054a05 	blcc	1541f4 <__core1_unwind_stub-0xeabe0c>
    19dc:	f23e0530 	vqrshl.s64	d0, d16, d14
    19e0:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
    19e4:	3e052f3b 	mcrcc	15, 0, r2, cr5, cr11, {1}
    19e8:	2e1a05f2 	mrccs	5, 0, r0, cr10, cr2, {7}
    19ec:	052f3005 	streq	r3, [pc, #-5]!	; 19ef <__core1_unwind_stub-0xffe611>
    19f0:	3005f21a 	andcc	pc, r5, sl, lsl r2	; <UNPREDICTABLE>
    19f4:	f21a054b 	vrshl.s16	q0, <illegal reg q5.5>, q5
    19f8:	054d1005 	strbeq	r1, [sp, #-5]
    19fc:	14054a0c 	strne	r4, [r5], #-2572	; 0xfffff5f4
    1a00:	4e10054c 	cfmac32mi	mvfx0, mvfx0, mvfx12
    1a04:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1a08:	12054c14 	andne	r4, r5, #20, 24	; 0x1400
    1a0c:	4a0c054e 	bmi	302f4c <__core1_unwind_stub-0xcfd0b4>
    1a10:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    1a14:	0c054f10 	stceq	15, cr4, [r5], {16}
    1a18:	4c20054a 	cfstr32mi	mvfx0, [r0], #-296	; 0xfffffed8
    1a1c:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    1a20:	1105a338 	tstne	r5, r8, lsr r3
    1a24:	d610054a 	ldrle	r0, [r0], -sl, asr #10
    1a28:	054d1805 	strbeq	r1, [sp, #-2053]	; 0xfffff7fb
    1a2c:	83834d12 	orrhi	r4, r3, #1152	; 0x480
    1a30:	058a1005 	streq	r1, [sl, #5]
    1a34:	13054a0c 	movwne	r4, #23052	; 0x5a0c
    1a38:	333c054e 	teqcc	ip, #327155712	; 0x13800000
    1a3c:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
    1a40:	1c05d614 	stcne	6, cr13, [r5], {20}
    1a44:	4d16054d 	cfldr32mi	mvfx0, [r6, #-308]	; 0xfffffecc
    1a48:	03130568 	tsteq	r3, #104, 10	; 0x1a000000
    1a4c:	16056673 			; <UNDEFINED> instruction: 0x16056673
    1a50:	68821603 	stmvs	r2, {r0, r1, r9, sl, ip}
    1a54:	05621305 	strbeq	r1, [r2, #-773]!	; 0xfffffcfb
    1a58:	6609030c 	strvs	r0, [r9], -ip, lsl #6
    1a5c:	056b3805 	strbeq	r3, [fp, #-2053]!	; 0xfffff7fb
    1a60:	10054a11 	andne	r4, r5, r1, lsl sl
    1a64:	4d1805d6 	cfldr32mi	mvfx0, [r8, #-856]	; 0xfffffca8
    1a68:	02002605 	andeq	r2, r0, #5242880	; 0x500000
    1a6c:	a5030204 	strge	r0, [r3, #-516]	; 0xfffffdfc
    1a70:	05054a7f 	streq	r4, [r5, #-2687]	; 0xfffff581
    1a74:	01040200 	mrseq	r0, R12_usr
    1a78:	030d0566 	movweq	r0, #54630	; 0xd566
    1a7c:	058200e1 	streq	r0, [r2, #225]	; 0xe1
    1a80:	05054c0c 	streq	r4, [r5, #-3084]	; 0xfffff3f4
    1a84:	3014054a 	andscc	r0, r4, sl, asr #10
    1a88:	05820c05 	streq	r0, [r2, #3077]	; 0xc05
    1a8c:	31054c15 	tstcc	r5, r5, lsl ip
    1a90:	02040200 	andeq	r0, r4, #0, 4
    1a94:	00050562 	andeq	r0, r5, r2, ror #10
    1a98:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1a9c:	056e0c05 	strbeq	r0, [lr, #-3077]!	; 0xfffff3fb
    1aa0:	06022f01 	streq	r2, [r2], -r1, lsl #30
    1aa4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1aa8:	00010502 	andeq	r0, r1, r2, lsl #10
    1aac:	25000205 	strcs	r0, [r0, #-517]	; 0xfffffdfb
    1ab0:	af030100 	svcge	0x00030100
    1ab4:	0c050106 	stfeqs	f0, [r5], {6}
    1ab8:	01053f08 	tsteq	r5, r8, lsl #30
    1abc:	06029308 	streq	r9, [r2], -r8, lsl #6
    1ac0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1ac4:	00010502 	andeq	r0, r1, r2, lsl #10
    1ac8:	25680205 	strbcs	r0, [r8, #-517]!	; 0xfffffdfb
    1acc:	b9030100 	stmdblt	r3, {r8}
    1ad0:	0c050106 	stfeqs	f0, [r5], {6}
    1ad4:	4a08059f 	bmi	203158 <__core1_unwind_stub-0xdfcea8>
    1ad8:	054c1005 	strbeq	r1, [ip, #-5]
    1adc:	09054f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, lr}
    1ae0:	2e0b0568 	cfsh32cs	mvfx0, mvfx11, #56
    1ae4:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1ae8:	08024b01 	stmdaeq	r2, {r0, r8, r9, fp, lr}
    1aec:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1af0:	00010502 	andeq	r0, r1, r2, lsl #10
    1af4:	25c80205 	strbcs	r0, [r8, #517]	; 0x205
    1af8:	c8030100 	stmdagt	r3, {r8}
    1afc:	13050106 	movwne	r0, #20742	; 0x5106
    1b00:	4a26059f 	bmi	983184 <__core1_unwind_stub-0x67ce7c>
    1b04:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1b08:	26054b13 			; <UNDEFINED> instruction: 0x26054b13
    1b0c:	4a09054a 	bmi	24303c <__core1_unwind_stub-0xdbcfc4>
    1b10:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    1b14:	0c054a09 			; <UNDEFINED> instruction: 0x0c054a09
    1b18:	4a08054c 	bmi	203050 <__core1_unwind_stub-0xdfcfb0>
    1b1c:	054c1005 	strbeq	r1, [ip, #-5]
    1b20:	09054f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, lr}
    1b24:	2f0b0566 	svccs	0x000b0566
    1b28:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1b2c:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1b30:	2f0b0583 	svccs	0x000b0583
    1b34:	20080905 	andcs	r0, r8, r5, lsl #18
    1b38:	052f0b05 	streq	r0, [pc, #-2821]!	; 103b <__core1_unwind_stub-0xffefc5>
    1b3c:	0b056609 	bleq	15b368 <__core1_unwind_stub-0xea4c98>
    1b40:	8309052f 	movwhi	r0, #38191	; 0x952f
    1b44:	052f0b05 	streq	r0, [pc, #-2821]!	; 1047 <__core1_unwind_stub-0xffefb9>
    1b48:	0b058209 	bleq	162374 <__core1_unwind_stub-0xe9dc8c>
    1b4c:	6609054b 	strvs	r0, [r9], -fp, asr #10
    1b50:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1b54:	01010008 	tsteq	r1, r8
    1b58:	01050204 	tsteq	r5, r4, lsl #4
    1b5c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    1b60:	03010026 	movweq	r0, #4134	; 0x1026
    1b64:	050106e2 	streq	r0, [r1, #-1762]	; 0xfffff91e
    1b68:	26059f13 			; <UNDEFINED> instruction: 0x26059f13
    1b6c:	4a09054a 	bmi	24309c <__core1_unwind_stub-0xdbcf64>
    1b70:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    1b74:	09054a26 	stmdbeq	r5, {r1, r2, r5, r9, fp, lr}
    1b78:	4b13054a 	blmi	4c30a8 <__core1_unwind_stub-0xb3cf58>
    1b7c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1b80:	08054c0c 	stmdaeq	r5, {r2, r3, sl, fp, lr}
    1b84:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
    1b88:	054f0b05 	strbeq	r0, [pc, #-2821]	; 108b <__core1_unwind_stub-0xffef75>
    1b8c:	0b056609 	bleq	15b3b8 <__core1_unwind_stub-0xea4c48>
    1b90:	6609054b 	strvs	r0, [r9], -fp, asr #10
    1b94:	052f0b05 	streq	r0, [pc, #-2821]!	; 1097 <__core1_unwind_stub-0xffef69>
    1b98:	0b058309 	bleq	1627c4 <__core1_unwind_stub-0xe9d83c>
    1b9c:	0809052f 	stmdaeq	r9, {r0, r1, r2, r3, r5, r8, sl}
    1ba0:	2f0b0520 	svccs	0x000b0520
    1ba4:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1ba8:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1bac:	2f0b0583 	svccs	0x000b0583
    1bb0:	05820905 	streq	r0, [r2, #2309]	; 0x905
    1bb4:	09054b0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, fp, lr}
    1bb8:	2f01054a 	svccs	0x0001054a
    1bbc:	01000802 	tsteq	r0, r2, lsl #16
    1bc0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1bc4:	02050001 	andeq	r0, r5, #1
    1bc8:	01002810 	tsteq	r0, r0, lsl r8
    1bcc:	0106fc03 	tsteq	r6, r3, lsl #24	; <UNPREDICTABLE>
    1bd0:	059f1305 	ldreq	r1, [pc, #773]	; 1edd <__core1_unwind_stub-0xffe123>
    1bd4:	09054a26 	stmdbeq	r5, {r1, r2, r5, r9, fp, lr}
    1bd8:	4b13054a 	blmi	4c3108 <__core1_unwind_stub-0xb3cef8>
    1bdc:	054a2605 	strbeq	r2, [sl, #-1541]	; 0xfffff9fb
    1be0:	13054a09 	movwne	r4, #23049	; 0x5a09
    1be4:	4a09054b 	bmi	243118 <__core1_unwind_stub-0xdbcee8>
    1be8:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
    1bec:	10054a08 	andne	r4, r5, r8, lsl #20
    1bf0:	510b054c 	tstpl	fp, ip, asr #10
    1bf4:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1bf8:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1bfc:	2f0b0566 	svccs	0x000b0566
    1c00:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1c04:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1c08:	0b052008 	bleq	149c30 <__core1_unwind_stub-0xeb63d0>
    1c0c:	6609052f 	strvs	r0, [r9], -pc, lsr #10
    1c10:	052f0b05 	streq	r0, [pc, #-2821]!	; 1113 <__core1_unwind_stub-0xffeeed>
    1c14:	0b058309 	bleq	162840 <__core1_unwind_stub-0xe9d7c0>
    1c18:	6609054b 	strvs	r0, [r9], -fp, asr #10
    1c1c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1c20:	01010008 	tsteq	r1, r8
    1c24:	01050204 	tsteq	r5, r4, lsl #4
    1c28:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    1c2c:	03010029 	movweq	r0, #4137	; 0x1029
    1c30:	05010796 	streq	r0, [r1, #-1942]	; 0xfffff86a
    1c34:	26059f13 			; <UNDEFINED> instruction: 0x26059f13
    1c38:	4a09054a 	bmi	243168 <__core1_unwind_stub-0xdbce98>
    1c3c:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    1c40:	09054a26 	stmdbeq	r5, {r1, r2, r5, r9, fp, lr}
    1c44:	4b13054a 	blmi	4c3174 <__core1_unwind_stub-0xb3ce8c>
    1c48:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c4c:	08054c0c 	stmdaeq	r5, {r2, r3, sl, fp, lr}
    1c50:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
    1c54:	05510b05 	ldrbeq	r0, [r1, #-2821]	; 0xfffff4fb
    1c58:	0b056609 	bleq	15b484 <__core1_unwind_stub-0xea4b7c>
    1c5c:	6609052f 	strvs	r0, [r9], -pc, lsr #10
    1c60:	052f0b05 	streq	r0, [pc, #-2821]!	; 1163 <__core1_unwind_stub-0xffee9d>
    1c64:	05200809 	streq	r0, [r0, #-2057]!	; 0xfffff7f7
    1c68:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1c6c:	2f0b0583 	svccs	0x000b0583
    1c70:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1c74:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1c78:	4b0b0582 	blmi	2c3288 <__core1_unwind_stub-0xd3cd78>
    1c7c:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1c80:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1c84:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1c88:	00010502 	andeq	r0, r1, r2, lsl #10
    1c8c:	2a2c0205 	bcs	b024a8 <__core1_unwind_stub-0x4fdb58>
    1c90:	af030100 	svcge	0x00030100
    1c94:	09050107 	stmdbeq	r5, {r0, r1, r2, r8}
    1c98:	2e190587 	cdpcs	5, 1, cr0, cr9, cr7, {4}
    1c9c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    1ca0:	05054c10 	streq	r4, [r5, #-3088]	; 0xfffff3f0
    1ca4:	830c054d 	movwhi	r0, #50509	; 0xc54d
    1ca8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1cac:	01010006 	tsteq	r1, r6
    1cb0:	01050204 	tsteq	r5, r4, lsl #4
    1cb4:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    1cb8:	0301002a 	movweq	r0, #4138	; 0x102a
    1cbc:	050107c2 	streq	r0, [r1, #-1986]	; 0xfffff83e
    1cc0:	05cd0816 	strbeq	r0, [sp, #2070]	; 0x816
    1cc4:	05b0080c 	ldreq	r0, [r0, #2060]!	; 0x80c
    1cc8:	10054b08 	andne	r4, r5, r8, lsl #22
    1ccc:	4d110568 	cfldr32mi	mvfx0, [r1, #-416]	; 0xfffffe60
    1cd0:	05da0805 	ldrbeq	r0, [sl, #2053]	; 0x805
    1cd4:	09056810 	stmdbeq	r5, {r4, fp, sp, lr}
    1cd8:	054a1003 	strbeq	r1, [sl, #-3]
    1cdc:	08052e1b 	stmdaeq	r5, {r0, r1, r3, r4, r9, sl, fp, sp}
    1ce0:	4c10052e 	cfldr32mi	mvfx0, [r0], {46}	; 0x2e
    1ce4:	054e1305 	strbeq	r1, [lr, #-773]	; 0xfffffcfb
    1ce8:	10054a08 	andne	r4, r5, r8, lsl #20
    1cec:	4c0b0568 	cfstr32mi	mvfx0, [fp], {104}	; 0x68
    1cf0:	059f0f05 	ldreq	r0, [pc, #3845]	; 2bfd <__core1_unwind_stub-0xffd403>
    1cf4:	08056809 	stmdaeq	r5, {r0, r3, fp, sp, lr}
    1cf8:	4c1005d6 	cfldr32mi	mvfx0, [r0], {214}	; 0xd6
    1cfc:	054e0c05 	strbeq	r0, [lr, #-3077]	; 0xfffff3fb
    1d00:	14054a05 	strne	r4, [r5], #-2565	; 0xfffff5fb
    1d04:	d60c0530 			; <UNDEFINED> instruction: 0xd60c0530
    1d08:	054e1805 	strbeq	r1, [lr, #-2053]	; 0xfffff7fb
    1d0c:	1005831b 	andne	r8, r5, fp, lsl r3
    1d10:	6818054a 	ldmdavs	r8, {r1, r3, r6, r8, sl}
    1d14:	054c1705 	strbeq	r1, [ip, #-1797]	; 0xfffff8fb
    1d18:	2305670d 	movwcs	r6, #22285	; 0x570d
    1d1c:	833e054c 	teqhi	lr, #76, 10	; 0x13000000
    1d20:	05d62305 	ldrbeq	r2, [r6, #773]	; 0x305
    1d24:	0e056714 	mcreq	7, 0, r6, cr5, cr4, {0}
    1d28:	821405f4 	andshi	r0, r4, #244, 10	; 0x3d000000
    1d2c:	05661805 	strbeq	r1, [r6, #-2053]!	; 0xfffff7fb
    1d30:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    1d34:	4a6e0302 	bmi	1b82944 <__end__+0xb66924>
    1d38:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    1d3c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1d40:	66190308 	ldrvs	r0, [r9], -r8, lsl #6
    1d44:	05841005 	streq	r1, [r4, #5]
    1d48:	05054f0c 	streq	r4, [r5, #-3852]	; 0xfffff0f4
    1d4c:	3030054a 	eorscc	r0, r0, sl, asr #10
    1d50:	3c083305 	stccc	3, cr3, [r8], {5}
    1d54:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    1d58:	33052f30 	movwcc	r2, #24368	; 0x5f30
    1d5c:	13053c08 	movwne	r3, #23560	; 0x5c08
    1d60:	2f25052e 	svccs	0x0025052e
    1d64:	3c081305 	stccc	3, cr1, [r8], {5}
    1d68:	fa4f1205 	blx	13c6584 <__end__+0x3aa564>
    1d6c:	054c1005 	strbeq	r1, [ip, #-5]
    1d70:	2b054a09 	blcs	15459c <__core1_unwind_stub-0xeaba64>
    1d74:	66210530 			; <UNDEFINED> instruction: 0x66210530
    1d78:	05d62505 	ldrbeq	r2, [r6, #1285]	; 0x505
    1d7c:	10052e2b 	andne	r2, r5, fp, lsr #28
    1d80:	4d1a052e 	cfldr32mi	mvfx0, [sl, #-184]	; 0xffffff48
    1d84:	05f31105 	ldrbeq	r1, [r3, #261]!	; 0x105
    1d88:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    1d8c:	2e7a0302 	cdpcs	3, 7, cr0, cr10, cr2, {0}
    1d90:	02000905 	andeq	r0, r0, #81920	; 0x14000
    1d94:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1d98:	660d0310 			; <UNDEFINED> instruction: 0x660d0310
    1d9c:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1da0:	16054e20 	strne	r4, [r5], -r0, lsr #28
    1da4:	a0100566 	andsge	r0, r0, r6, ror #10
    1da8:	056b1705 	strbeq	r1, [fp, #-1797]!	; 0xfffff8fb
    1dac:	25053054 	strcs	r3, [r5, #-84]	; 0xffffffac
    1db0:	f43a05ba 			; <UNDEFINED> instruction: 0xf43a05ba
    1db4:	05824405 	streq	r4, [r2, #1029]	; 0x405
    1db8:	4b054a40 	blmi	1546c0 <__core1_unwind_stub-0xeab940>
    1dbc:	4a200566 	bmi	80335c <__core1_unwind_stub-0x7fcca4>
    1dc0:	052f2805 	streq	r2, [pc, #-2053]!	; 15c3 <__core1_unwind_stub-0xffea3d>
    1dc4:	22054a1e 	andcs	r4, r5, #122880	; 0x1e000
    1dc8:	9e18054f 	cfmac32ls	mvfx0, mvfx8, mvfx15
    1dcc:	054c2005 	strbeq	r2, [ip, #-5]
    1dd0:	28054d1e 	stmdacs	r5, {r1, r2, r3, r4, r8, sl, fp, lr}
    1dd4:	4c1d0582 	cfldr32mi	mvfx0, [sp], {130}	; 0x82
    1dd8:	03676767 	cmneq	r7, #27000832	; 0x19c0000
    1ddc:	1705666c 	strne	r6, [r5, -ip, ror #12]
    1de0:	0044054a 	subeq	r0, r4, sl, asr #10
    1de4:	4a010402 	bmi	42df4 <__core1_unwind_stub-0xfbd20c>
    1de8:	18031705 	stmdane	r3, {r0, r2, r8, r9, sl, ip}
    1dec:	30540566 	subscc	r0, r4, r6, ror #10
    1df0:	05ba2505 	ldreq	r2, [sl, #1285]!	; 0x505
    1df4:	4405f43a 	strmi	pc, [r5], #-1082	; 0xfffffbc6
    1df8:	4a400582 	bmi	1003408 <alt_mmu_va_space_create+0x994>
    1dfc:	05664b05 	strbeq	r4, [r6, #-2821]!	; 0xfffff4fb
    1e00:	28054a20 	stmdacs	r5, {r5, r9, fp, lr}
    1e04:	4a1e052f 	bmi	7832c8 <__core1_unwind_stub-0x87cd38>
    1e08:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
    1e0c:	2f054a15 	svccs	0x00054a15
    1e10:	66260530 			; <UNDEFINED> instruction: 0x66260530
    1e14:	05821c05 	streq	r1, [r2, #3077]	; 0xc05
    1e18:	2b054c24 	blcs	154eb0 <__core1_unwind_stub-0xeab150>
    1e1c:	02040200 	andeq	r0, r4, #0, 4
    1e20:	0022054d 	eoreq	r0, r2, sp, asr #10
    1e24:	66020402 	strvs	r0, [r2], -r2, lsl #8
    1e28:	02003005 	andeq	r3, r0, #5
    1e2c:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    1e30:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    1e34:	4a790302 	bmi	1e42a44 <__end__+0xe26a24>
    1e38:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    1e3c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1e40:	660a031d 			; <UNDEFINED> instruction: 0x660a031d
    1e44:	05676767 	strbeq	r6, [r7, #-1895]!	; 0xfffff899
    1e48:	666c0317 			; <UNDEFINED> instruction: 0x666c0317
    1e4c:	05661903 	strbeq	r1, [r6, #-2307]!	; 0xfffff6fd
    1e50:	25053054 	strcs	r3, [r5, #-84]	; 0xffffffac
    1e54:	f43a05ba 			; <UNDEFINED> instruction: 0xf43a05ba
    1e58:	05824405 	streq	r4, [r2, #1029]	; 0x405
    1e5c:	4b054a40 	blmi	154764 <__core1_unwind_stub-0xeab89c>
    1e60:	4a200566 	bmi	803400 <__core1_unwind_stub-0x7fcc00>
    1e64:	052f2805 	streq	r2, [pc, #-2053]!	; 1667 <__core1_unwind_stub-0xffe999>
    1e68:	22054a1e 	andcs	r4, r5, #122880	; 0x1e000
    1e6c:	9e18054c 	cfmac32ls	mvfx0, mvfx8, mvfx12
    1e70:	054c2005 	strbeq	r2, [ip, #-5]
    1e74:	28054d1e 	stmdacs	r5, {r1, r2, r3, r4, r8, sl, fp, lr}
    1e78:	4c1d0582 	cfldr32mi	mvfx0, [sp], {130}	; 0x82
    1e7c:	05676767 	strbeq	r6, [r7, #-1895]!	; 0xfffff899
    1e80:	666f0317 			; <UNDEFINED> instruction: 0x666f0317
    1e84:	19035405 	stmdbne	r3, {r0, r2, sl, ip, lr}
    1e88:	ba250582 	blt	943498 <__core1_unwind_stub-0x6bcb68>
    1e8c:	05f43a05 	ldrbeq	r3, [r4, #2565]!	; 0xa05
    1e90:	40058244 	andmi	r8, r5, r4, asr #4
    1e94:	664b054a 	strbvs	r0, [fp], -sl, asr #10
    1e98:	054a2005 	strbeq	r2, [sl, #-5]
    1e9c:	1e052f28 	cdpne	15, 0, cr2, cr5, cr8, {1}
    1ea0:	4c22054a 	cfstr32mi	mvfx0, [r2], #-296	; 0xfffffed8
    1ea4:	059e1805 	ldreq	r1, [lr, #2053]	; 0x805
    1ea8:	1e054c20 	cdpne	12, 0, cr4, cr5, cr0, {1}
    1eac:	8228054d 	eorhi	r0, r8, #322961408	; 0x13400000
    1eb0:	674c1d05 	strbvs	r1, [ip, -r5, lsl #26]
    1eb4:	17056767 	strne	r6, [r5, -r7, ror #14]
    1eb8:	05666f03 	strbeq	r6, [r6, #-3843]!	; 0xfffff0fd
    1ebc:	6620030c 	strtvs	r0, [r0], -ip, lsl #6
    1ec0:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    1ec4:	4e056b13 	vmovmi.32	d5[0], r6
    1ec8:	ba210530 	blt	843390 <__core1_unwind_stub-0x7bcc70>
    1ecc:	05f41605 	ldrbeq	r1, [r4, #1541]!	; 0x605
    1ed0:	1c058220 	sfmne	f0, 1, [r5], {32}
    1ed4:	6614054a 	ldrvs	r0, [r4], -sl, asr #10
    1ed8:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
    1edc:	1c054d12 	stcne	13, cr4, [r5], {18}
    1ee0:	4a180582 	bmi	6034f0 <__core1_unwind_stub-0x9fcb10>
    1ee4:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
    1ee8:	67674c16 			; <UNDEFINED> instruction: 0x67674c16
    1eec:	73031905 	movwvc	r1, #14597	; 0x3905
    1ef0:	4a130566 	bmi	4c3490 <__core1_unwind_stub-0xb3cb70>
    1ef4:	02004205 	andeq	r4, r0, #1342177280	; 0x50000000
    1ef8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1efc:	66110313 			; <UNDEFINED> instruction: 0x66110313
    1f00:	05305305 	ldreq	r5, [r0, #-773]!	; 0xfffffcfb
    1f04:	1805ba21 	stmdane	r5, {r0, r5, r9, fp, ip, sp, pc}
    1f08:	4a1105f4 	bmi	4436e0 <__core1_unwind_stub-0xbbc920>
    1f0c:	05301a05 	ldreq	r1, [r0, #-2565]!	; 0xfffff5fb
    1f10:	2c058225 	sfmcs	f0, 1, [r5], {37}	; 0x25
    1f14:	4a20054a 	bmi	803444 <__core1_unwind_stub-0x7fcbbc>
    1f18:	05661805 	strbeq	r1, [r6, #-2053]!	; 0xfffff7fb
    1f1c:	16054c20 	strne	r4, [r5], -r0, lsr #24
    1f20:	02040200 	andeq	r0, r4, #0, 4
    1f24:	0021054d 	eoreq	r0, r1, sp, asr #10
    1f28:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    1f2c:	02002805 	andeq	r2, r0, #327680	; 0x50000
    1f30:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    1f34:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    1f38:	2d054a02 	vstrcs	s8, [r5, #-8]
    1f3c:	02040200 	andeq	r0, r4, #0, 4
    1f40:	0025054a 	eoreq	r0, r5, sl, asr #10
    1f44:	03020402 	movweq	r0, #9218	; 0x2402
    1f48:	11054a79 	tstne	r5, r9, ror sl
    1f4c:	01040200 	mrseq	r0, R12_usr
    1f50:	03160566 	tsteq	r6, #427819008	; 0x19800000
    1f54:	6767660a 	strbvs	r6, [r7, -sl, lsl #12]!
    1f58:	70031305 	andvc	r1, r3, r5, lsl #6
    1f5c:	66140366 	ldrvs	r0, [r4], -r6, ror #6
    1f60:	05304e05 	ldreq	r4, [r0, #-3589]!	; 0xfffff1fb
    1f64:	1605ba21 	strne	fp, [r5], -r1, lsr #20
    1f68:	822005f4 	eorhi	r0, r0, #244, 10	; 0x3d000000
    1f6c:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
    1f70:	1c056614 	stcne	6, cr6, [r5], {20}
    1f74:	4d12054c 	cfldr32mi	mvfx0, [r2, #-304]	; 0xfffffed0
    1f78:	05821c05 	streq	r1, [r2, #3077]	; 0xc05
    1f7c:	23054a18 	movwcs	r4, #23064	; 0x5a18
    1f80:	4c16054a 	cfldr32mi	mvfx0, [r6], {74}	; 0x4a
    1f84:	13056767 	movwne	r6, #22375	; 0x5767
    1f88:	05667303 	strbeq	r7, [r6, #-771]!	; 0xfffffcfd
    1f8c:	6655030c 	ldrbvs	r0, [r5], -ip, lsl #6
    1f90:	3b031105 	blcc	c63ac <__core1_unwind_stub-0xf39c54>
    1f94:	6712052e 	ldrvs	r0, [r2, -lr, lsr #10]
    1f98:	056a1305 	strbeq	r1, [sl, #-773]!	; 0xfffffcfb
    1f9c:	2105304e 	tstcs	r5, lr, asr #32
    1fa0:	f41605ba 			; <UNDEFINED> instruction: 0xf41605ba
    1fa4:	05822005 	streq	r2, [r2, #5]
    1fa8:	14054a1c 	strne	r4, [r5], #-2588	; 0xfffff5e4
    1fac:	4c1c0566 	cfldr32mi	mvfx0, [ip], {102}	; 0x66
    1fb0:	054d1205 	strbeq	r1, [sp, #-517]	; 0xfffffdfb
    1fb4:	1805821c 	stmdane	r5, {r2, r3, r4, r9, pc}
    1fb8:	4a23054a 	bmi	8c34e8 <__core1_unwind_stub-0x73cb18>
    1fbc:	674c1605 	strbvs	r1, [ip, -r5, lsl #12]
    1fc0:	03130567 	tsteq	r3, #432013312	; 0x19c00000
    1fc4:	0c056673 	stceq	6, cr6, [r5], {115}	; 0x73
    1fc8:	05661503 	strbeq	r1, [r6, #-1283]!	; 0xfffffafd
    1fcc:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    1fd0:	13056601 	movwne	r6, #22017	; 0x5601
    1fd4:	30500568 	subscc	r0, r0, r8, ror #10
    1fd8:	05ba2105 	ldreq	r2, [sl, #261]!	; 0x105
    1fdc:	4005f436 	andmi	pc, r5, r6, lsr r4	; <UNPREDICTABLE>
    1fe0:	4a3c0582 	bmi	f035f0 <__core1_unwind_stub-0xfca10>
    1fe4:	05664705 	strbeq	r4, [r6, #-1797]!	; 0xfffff8fb
    1fe8:	24054a1c 	strcs	r4, [r5], #-2588	; 0xfffff5e4
    1fec:	4a1a052f 	bmi	6834b0 <__core1_unwind_stub-0x97cb50>
    1ff0:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
    1ff4:	2b054a11 	blcs	154840 <__core1_unwind_stub-0xeab7c0>
    1ff8:	66220530 			; <UNDEFINED> instruction: 0x66220530
    1ffc:	05821805 	streq	r1, [r2, #2053]	; 0x805
    2000:	27054c20 	strcs	r4, [r5, -r0, lsr #24]
    2004:	02040200 	andeq	r0, r4, #0, 4
    2008:	001e054d 	andseq	r0, lr, sp, asr #10
    200c:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2010:	02002c05 	andeq	r2, r0, #1280	; 0x500
    2014:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    2018:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    201c:	4a790302 	bmi	1e42c2c <__end__+0xe26c0c>
    2020:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
    2024:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2028:	660a0316 			; <UNDEFINED> instruction: 0x660a0316
    202c:	13056767 	movwne	r6, #22375	; 0x5767
    2030:	05666d03 	strbeq	r6, [r6, #-3331]!	; 0xfffff2fd
    2034:	6617030f 	ldrvs	r0, [r7], -pc, lsl #6
    2038:	05304c05 	ldreq	r4, [r0, #-3077]!	; 0xfffff3fb
    203c:	3205ba1d 	andcc	fp, r5, #118784	; 0x1d000
    2040:	823c05f4 	eorshi	r0, ip, #244, 10	; 0x3d000000
    2044:	054a3805 	strbeq	r3, [sl, #-2053]	; 0xfffff7fb
    2048:	18056643 	stmdane	r5, {r0, r1, r6, r9, sl, sp, lr}
    204c:	2f20054a 	svccs	0x0020054a
    2050:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
    2054:	10054c1a 	andne	r4, r5, sl, lsl ip
    2058:	4c18059e 	cfldr32mi	mvfx0, [r8], {158}	; 0x9e
    205c:	054d1605 	strbeq	r1, [sp, #-1541]	; 0xfffff9fb
    2060:	12058220 	andne	r8, r5, #32, 4
    2064:	0567674c 	strbeq	r6, [r7, #-1868]!	; 0xfffff8b4
    2068:	6670030f 	ldrbtvs	r0, [r0], -pc, lsl #6
    206c:	ff032605 			; <UNDEFINED> instruction: 0xff032605
    2070:	0505667d 	streq	r6, [r5, #-1661]	; 0xfffff983
    2074:	01040200 	mrseq	r0, R12_usr
    2078:	030c0566 	movweq	r0, #50534	; 0xc566
    207c:	05ba0296 	ldreq	r0, [sl, #662]!	; 0x296
    2080:	04020001 	streq	r0, [r2], #-1
    2084:	06022f01 	streq	r2, [r2], -r1, lsl #30
    2088:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    208c:	00010502 	andeq	r0, r1, r2, lsl #10
    2090:	384c0205 	stmdacc	ip, {r0, r2, r9}^
    2094:	b4030100 	strlt	r0, [r3], #-256	; 0xffffff00
    2098:	1505010a 	strne	r0, [r5, #-266]	; 0xfffffef6
    209c:	4d080583 	cfstr32mi	mvfx0, [r8, #-524]	; 0xfffffdf4
    20a0:	05681205 	strbeq	r1, [r8, #-517]!	; 0xfffffdfb
    20a4:	0d05a10c 	stfeqd	f2, [r5, #-48]	; 0xffffffd0
    20a8:	88080568 	stmdahi	r8, {r3, r5, r6, r8, sl}
    20ac:	05681205 	strbeq	r1, [r8, #-517]!	; 0xfffffdfb
    20b0:	0d05670c 	stceq	7, cr6, [r5, #-48]	; 0xffffffd0
    20b4:	88080568 	stmdahi	r8, {r3, r5, r6, r8, sl}
    20b8:	056a1005 	strbeq	r1, [sl, #-5]!
    20bc:	1a054a09 	bne	1548e8 <__core1_unwind_stub-0xeab718>
    20c0:	03040200 	movweq	r0, #16896	; 0x4200
    20c4:	001d0530 	andseq	r0, sp, r0, lsr r5
    20c8:	9c030402 	cfstrsls	mvf0, [r3], {2}
    20cc:	02000905 	andeq	r0, r0, #81920	; 0x14000
    20d0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    20d4:	0c056b12 			; <UNDEFINED> instruction: 0x0c056b12
    20d8:	680d059f 	stmdavs	sp, {r0, r1, r2, r3, r4, r7, r8, sl}
    20dc:	05880805 	streq	r0, [r8, #2053]	; 0x805
    20e0:	0c056812 	stceq	8, cr6, [r5], {18}
    20e4:	680d054b 	stmdavs	sp, {r0, r1, r3, r6, r8, sl}
    20e8:	05860c05 	streq	r0, [r6, #3077]	; 0xc05
    20ec:	06022f01 	streq	r2, [r2], -r1, lsl #30
    20f0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    20f4:	00010502 	andeq	r0, r1, r2, lsl #10
    20f8:	00000205 	andeq	r0, r0, r5, lsl #4
    20fc:	f3030000 	vhadd.u8	d0, d3, d0
    2100:	0f05010a 	svceq	0x0005010a
    2104:	030505bb 	movweq	r0, #21947	; 0x55bb
    2108:	2f4b4a0e 	svccs	0x004b4a0e
    210c:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    2110:	17054a08 	strne	r4, [r5, -r8, lsl #20]
    2114:	4a12054f 	bmi	483658 <__core1_unwind_stub-0xb7c9a8>
    2118:	674d1e05 	strbvs	r1, [sp, -r5, lsl #28]
    211c:	05652405 	strbeq	r2, [r5, #-1029]!	; 0xfffffbfb
    2120:	2405301e 	strcs	r3, [r5], #-30	; 0xffffffe2
    2124:	2d0f0549 	cfstr32cs	mvfx0, [pc, #-292]	; 2008 <__core1_unwind_stub-0xffdff8>
    2128:	054e0905 	strbeq	r0, [lr, #-2309]	; 0xfffff6fb
    212c:	0d05a011 	stceq	0, cr10, [r5, #-68]	; 0xffffffbc
    2130:	4e1b054a 	cfmac32mi	mvfx0, mvfx11, mvfx10
    2134:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    2138:	05674b0c 	strbeq	r4, [r7, #-2828]!	; 0xfffff4f4
    213c:	30058409 	andcc	r8, r5, r9, lsl #8
    2140:	4a1405da 	bmi	5038b0 <__core1_unwind_stub-0xafc750>
    2144:	881b054b 	ldmdahi	fp, {r0, r1, r3, r6, r8, sl}
    2148:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    214c:	05834b0c 	streq	r4, [r3, #2828]	; 0xb0c
    2150:	2e058409 	cdpcs	4, 0, cr8, cr5, cr9, {0}
    2154:	4a1405f6 	bmi	503934 <__core1_unwind_stub-0xafc6cc>
    2158:	690c054b 	stmdbvs	ip, {r0, r1, r3, r6, r8, sl}
    215c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    2160:	01010006 	tsteq	r1, r6
    2164:	01050204 	tsteq	r5, r4, lsl #4
    2168:	00020500 	andeq	r0, r2, r0, lsl #10
    216c:	03000000 	movweq	r0, #0
    2170:	05010bb8 	streq	r0, [r1, #-3000]	; 0xfffff448
    2174:	1705bd09 	strne	fp, [r5, -r9, lsl #26]
    2178:	4a1e052e 	bmi	783638 <__core1_unwind_stub-0x87c9c8>
    217c:	052e2405 	streq	r2, [lr, #-1029]!	; 0xfffffbfb
    2180:	09052e08 	stmdbeq	r5, {r3, r9, sl, fp, sp}
    2184:	6710054c 	ldrvs	r0, [r0, -ip, asr #10]
    2188:	054d1b05 	strbeq	r1, [sp, #-2821]	; 0xfffff4fb
    218c:	0905d619 	stmdbeq	r5, {r0, r3, r4, r9, sl, ip, lr, pc}
    2190:	2e08054b 	cfsh32cs	mvfx0, mvfx8, #43
    2194:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
    2198:	1d05bc10 	stcne	12, cr11, [r5, #-64]	; 0xffffffc0
    219c:	ba1b054d 	blt	6c36d8 <__core1_unwind_stub-0x93c928>
    21a0:	674c1405 	strbvs	r1, [ip, -r5, lsl #8]
    21a4:	05680c05 	strbeq	r0, [r8, #-3077]!	; 0xfffff3fb
    21a8:	04020001 	streq	r0, [r2], #-1
    21ac:	06022f01 	streq	r2, [r2], -r1, lsl #30
    21b0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    21b4:	00010502 	andeq	r0, r1, r2, lsl #10
    21b8:	00000205 	andeq	r0, r0, r5, lsl #4
    21bc:	d2030000 	andle	r0, r3, #0
    21c0:	0f05010b 	svceq	0x0005010b
    21c4:	110567bb 			; <UNDEFINED> instruction: 0x110567bb
    21c8:	4a080568 	bmi	203770 <__core1_unwind_stub-0xdfc890>
    21cc:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
    21d0:	14056710 	strne	r6, [r5], #-1808	; 0xfffff8f0
    21d4:	0b05bb4d 	bleq	170f10 <__core1_unwind_stub-0xe8f0f0>
    21d8:	313805bc 	teqcc	r8, ip	; <illegal shifter operand>
    21dc:	054a1f05 	strbeq	r1, [sl, #-3845]	; 0xfffff0fb
    21e0:	0d05ba1d 	vstreq	s22, [r5, #-116]	; 0xffffff8c
    21e4:	2e0c054b 	cfsh32cs	mvfx0, mvfx12, #43
    21e8:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    21ec:	2105d814 	tstcs	r5, r4, lsl r8
    21f0:	d61f054d 	ldrle	r0, [pc], -sp, asr #10
    21f4:	054c1505 	strbeq	r1, [ip, #-1285]	; 0xfffffafb
    21f8:	0c054a2e 			; <UNDEFINED> instruction: 0x0c054a2e
    21fc:	4d270566 	cfstr32mi	mvfx0, [r7, #-408]!	; 0xfffffe68
    2200:	674a1c05 	strbvs	r1, [sl, -r5, lsl #24]
    2204:	054a2705 	strbeq	r2, [sl, #-1797]	; 0xfffff8fb
    2208:	05674a1c 	strbeq	r4, [r7, #-2588]!	; 0xfffff5e4
    220c:	1c054a27 			; <UNDEFINED> instruction: 0x1c054a27
    2210:	680d054a 	stmdavs	sp, {r1, r3, r6, r8, sl}
    2214:	6c031405 	cfstrsvs	mvf1, [r3], {5}
    2218:	4a0b0582 	bmi	2c3828 <__core1_unwind_stub-0xd3c7d8>
    221c:	19030d05 	stmdbne	r3, {r0, r2, r8, sl, fp}
    2220:	320e0566 	andcc	r0, lr, #427819008	; 0x19800000
    2224:	680c0567 	stmdavs	ip, {r0, r1, r2, r5, r6, r8, sl}
    2228:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    222c:	01010006 	tsteq	r1, r6
    2230:	01050204 	tsteq	r5, r4, lsl #4
    2234:	00020500 	andeq	r0, r2, r0, lsl #10
    2238:	03000000 	movweq	r0, #0
    223c:	05010c83 	streq	r0, [r1, #-3203]	; 0xfffff37d
    2240:	08058311 	stmdaeq	r5, {r0, r4, r8, r9, pc}
    2244:	4c09054a 	cfstr32mi	mvfx0, [r9], {74}	; 0x4a
    2248:	4e671005 	cdpmi	0, 6, cr1, cr7, cr5, {0}
    224c:	02300105 	eorseq	r0, r0, #1073741825	; 0x40000001
    2250:	01010006 	tsteq	r1, r6
    2254:	000007ae 	andeq	r0, r0, lr, lsr #15
    2258:	01040003 	tsteq	r4, r3
    225c:	01020000 	mrseq	r0, (UNDEF: 2)
    2260:	000d0efb 	strdeq	r0, [sp], -fp
    2264:	01010101 	tsteq	r1, r1, lsl #2
    2268:	01000000 	mrseq	r0, (UNDEF: 0)
    226c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    2270:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2274:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2278:	6974752f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, sp, lr}^
    227c:	2f00736c 	svccs	0x0000736c
    2280:	2f727375 	svccs	0x00727375
    2284:	2f62696c 	svccs	0x0062696c
    2288:	2f636367 	svccs	0x00636367
    228c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2290:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    2294:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2298:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    229c:	2f312e32 	svccs	0x00312e32
    22a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    22a4:	00656475 	rsbeq	r6, r5, r5, ror r4
    22a8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    22ac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    22b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    22b4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    22b8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    22bc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    22c0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    22c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    22c8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    22cc:	2f62696c 	svccs	0x0062696c
    22d0:	00737973 	rsbseq	r7, r3, r3, ror r9
    22d4:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    22d8:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    22dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    22e0:	61000065 	tstvs	r0, r5, rrx
    22e4:	705f746c 	subsvc	r7, pc, ip, ror #8
    22e8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    22ec:	00632e66 	rsbeq	r2, r3, r6, ror #28
    22f0:	73000001 	movwvc	r0, #1
    22f4:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    22f8:	00682e66 	rsbeq	r2, r8, r6, ror #28
    22fc:	73000002 	movwvc	r0, #2
    2300:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2304:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2308:	73000002 	movwvc	r0, #2
    230c:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    2310:	00682e67 	rsbeq	r2, r8, r7, ror #28
    2314:	73000002 	movwvc	r0, #2
    2318:	6f696474 	svcvs	0x00696474
    231c:	0300682e 	movweq	r6, #2094	; 0x82e
    2320:	745f0000 	ldrbvc	r0, [pc], #-0	; 2328 <__core1_unwind_stub-0xffdcd8>
    2324:	73657079 	cmnvc	r5, #121	; 0x79
    2328:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    232c:	65720000 	ldrbvs	r0, [r2, #-0]!
    2330:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    2334:	00040068 	andeq	r0, r4, r8, rrx
    2338:	636f6c00 	cmnvs	pc, #0, 24
    233c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    2340:	61000004 	tstvs	r0, r4
    2344:	705f746c 	subsvc	r7, pc, ip, ror #8
    2348:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    234c:	00682e66 	rsbeq	r2, r8, r6, ror #28
    2350:	3c000005 	stccc	0, cr0, [r0], {5}
    2354:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2358:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    235c:	0000003e 	andeq	r0, r0, lr, lsr r0
    2360:	01050000 	mrseq	r0, (UNDEF: 5)
    2364:	00020500 	andeq	r0, r2, r0, lsl #10
    2368:	03000000 	movweq	r0, #0
    236c:	0c050130 	stfeqs	f0, [r5], {48}	; 0x30
    2370:	9f010583 	svcls	0x00010583
    2374:	01000602 	tsteq	r0, r2, lsl #12
    2378:	00010501 	andeq	r0, r1, r1, lsl #10
    237c:	00000205 	andeq	r0, r0, r5, lsl #4
    2380:	35030000 	strcc	r0, [r3, #-0]
    2384:	d71c0501 	ldrle	r0, [ip, -r1, lsl #10]
    2388:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    238c:	0d054c0b 	stceq	12, cr4, [r5, #-44]	; 0xffffffd4
    2390:	4a1e0530 	bmi	783858 <__core1_unwind_stub-0x87c7a8>
    2394:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    2398:	1a05830d 	bne	162fd4 <__core1_unwind_stub-0xe9d02c>
    239c:	66120563 	ldrvs	r0, [r2], -r3, ror #10
    23a0:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    23a4:	01055010 	tsteq	r5, r0, lsl r0
    23a8:	00060267 	andeq	r0, r6, r7, ror #4
    23ac:	01050101 	tsteq	r5, r1, lsl #2
    23b0:	00020500 	andeq	r0, r2, r0, lsl #10
    23b4:	03000000 	movweq	r0, #0
    23b8:	050100c9 	streq	r0, [r1, #-201]	; 0xffffff37
    23bc:	0e05bb1c 	vmoveq.32	d5[0], fp
    23c0:	4a1c054c 	bmi	7038f8 <__core1_unwind_stub-0x8fc708>
    23c4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    23c8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    23cc:	26054a01 	strcs	r4, [r5], -r1, lsl #20
    23d0:	01040200 	mrseq	r0, R12_usr
    23d4:	4c0d054a 	cfstr32mi	mvfx0, [sp], {74}	; 0x4a
    23d8:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
    23dc:	12054b0b 	andne	r4, r5, #11264	; 0x2c00
    23e0:	690e054a 	stmdbvs	lr, {r1, r3, r6, r8, sl}
    23e4:	054a1d05 	strbeq	r1, [sl, #-3333]	; 0xfffff2fb
    23e8:	2f054a08 	svccs	0x00054a08
    23ec:	01040200 	mrseq	r0, R12_usr
    23f0:	0027054a 	eoreq	r0, r7, sl, asr #10
    23f4:	4a010402 	bmi	43404 <__core1_unwind_stub-0xfbcbfc>
    23f8:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    23fc:	01054a15 	tsteq	r5, r5, lsl sl
    2400:	0008024c 	andeq	r0, r8, ip, asr #4
    2404:	01050101 	tsteq	r5, r1, lsl #2
    2408:	00020500 	andeq	r0, r2, r0, lsl #10
    240c:	03000000 	movweq	r0, #0
    2410:	050100d9 	streq	r0, [r1, #-217]	; 0xffffff27
    2414:	0f05bf05 	svceq	0x0005bf05
    2418:	4b19054c 	blmi	643950 <__core1_unwind_stub-0x9bc6b0>
    241c:	05821005 	streq	r1, [r2, #5]
    2420:	08052f17 	stmdaeq	r5, {r0, r1, r2, r4, r8, r9, sl, fp, sp}
    2424:	bd0c0568 	cfstr32lt	mvfx0, [ip, #-416]	; 0xfffffe60
    2428:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    242c:	0101000a 	tsteq	r1, sl
    2430:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2434:	00000002 	andeq	r0, r0, r2
    2438:	00eb0300 	rsceq	r0, fp, r0, lsl #6
    243c:	a3050501 	movwge	r0, #21761	; 0x5501
    2440:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    2444:	17054b10 	smladne	r5, r0, fp, r4
    2448:	6808054b 	stmdavs	r8, {r0, r1, r3, r6, r8, sl}
    244c:	05bd0c05 	ldreq	r0, [sp, #3077]!	; 0xc05
    2450:	0a022f01 	beq	8e05c <__core1_unwind_stub-0xf71fa4>
    2454:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2458:	02050001 	andeq	r0, r5, #1
    245c:	01003988 	smlabbeq	r0, r8, r9, r3
    2460:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    2464:	05860505 	streq	r0, [r6, #1285]	; 0x505
    2468:	0c054b08 			; <UNDEFINED> instruction: 0x0c054b08
    246c:	2f0105f5 	svccs	0x000105f5
    2470:	01000a02 	tsteq	r0, r2, lsl #20
    2474:	00010501 	andeq	r0, r1, r1, lsl #10
    2478:	00000205 	andeq	r0, r0, r5, lsl #4
    247c:	8c030000 	stchi	0, cr0, [r3], {-0}
    2480:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    2484:	4b0805a2 	blmi	203b14 <__core1_unwind_stub-0xdfc4ec>
    2488:	05a10c05 	streq	r0, [r1, #3077]!	; 0xc05
    248c:	0a022f01 	beq	8e098 <__core1_unwind_stub-0xf71f68>
    2490:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2494:	02050001 	andeq	r0, r5, #1
    2498:	010039d8 	ldrdeq	r3, [r0, -r8]
    249c:	01019f03 	tsteq	r1, r3, lsl #30
    24a0:	05d70805 	ldrbeq	r0, [r7, #2053]	; 0x805
    24a4:	0705680c 	streq	r6, [r5, -ip, lsl #16]
    24a8:	8408054a 	strhi	r0, [r8], #-1354	; 0xfffffab6
    24ac:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    24b0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    24b4:	06029f01 	streq	r9, [r2], -r1, lsl #30
    24b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    24bc:	02050001 	andeq	r0, r5, #1
    24c0:	01003a44 	tsteq	r0, r4, asr #20
    24c4:	0101ad03 	tsteq	r1, r3, lsl #26
    24c8:	05a11505 	streq	r1, [r1, #1285]!	; 0x505
    24cc:	08056613 	stmdaeq	r5, {r0, r1, r4, r9, sl, sp, lr}
    24d0:	4b0b054a 	blmi	2c3a00 <__core1_unwind_stub-0xd3c600>
    24d4:	05a00c05 	streq	r0, [r0, #3077]!	; 0xc05
    24d8:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    24dc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    24e0:	02050001 	andeq	r0, r5, #1
    24e4:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
    24e8:	0101be03 	tsteq	r1, r3, lsl #28
    24ec:	05d70805 	ldrbeq	r0, [r7, #2053]	; 0x805
    24f0:	0b05670a 	bleq	15c120 <__core1_unwind_stub-0xea3ee0>
    24f4:	4a100530 	bmi	4039bc <__core1_unwind_stub-0xbfc644>
    24f8:	059e1a05 	ldreq	r1, [lr, #2565]	; 0xa05
    24fc:	0a054a15 	beq	154d58 <__core1_unwind_stub-0xeab2a8>
    2500:	059b4b2e 	ldreq	r4, [fp, #2862]	; 0xb2e
    2504:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    2508:	0b056601 	bleq	15bd14 <__core1_unwind_stub-0xea42ec>
    250c:	2f01056c 	svccs	0x0001056c
    2510:	01000602 	tsteq	r0, r2, lsl #12
    2514:	00010501 	andeq	r0, r1, r1, lsl #10
    2518:	3b340205 	blcc	d02d34 <__core1_unwind_stub-0x2fd2cc>
    251c:	95030100 	strls	r0, [r3, #-256]	; 0xffffff00
    2520:	09050102 	stmdbeq	r5, {r1, r8}
    2524:	4a1205bb 	bmi	483c18 <__core1_unwind_stub-0xb7c3e8>
    2528:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
    252c:	0402000f 	streq	r0, [r2], #-15
    2530:	0b056601 	bleq	15bd3c <__core1_unwind_stub-0xea42c4>
    2534:	19058584 	stmdbne	r5, {r2, r7, r8, sl, pc}
    2538:	2e260530 	mcrcs	5, 1, r0, cr6, cr0, {1}
    253c:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    2540:	16052e0a 	strne	r2, [r5], -sl, lsl #28
    2544:	4a110566 	bmi	443ae4 <__core1_unwind_stub-0xbbc51c>
    2548:	052f0b05 	streq	r0, [pc, #-2821]!	; 1a4b <__core1_unwind_stub-0xffe5b5>
    254c:	0a052e18 	beq	14ddb4 <__core1_unwind_stub-0xeb224c>
    2550:	2f0c059e 	svccs	0x000c059e
    2554:	6c620b05 			; <UNDEFINED> instruction: 0x6c620b05
    2558:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    255c:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
    2560:	1d053003 	stcne	0, cr3, [r5, #-12]
    2564:	03040200 	movweq	r0, #16896	; 0x4200
    2568:	0011054a 	andseq	r0, r1, sl, asr #10
    256c:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2570:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    2574:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    2578:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
    257c:	0d056603 	stceq	6, cr6, [r5, #-12]
    2580:	03040200 	movweq	r0, #16896	; 0x4200
    2584:	001c052e 	andseq	r0, ip, lr, lsr #10
    2588:	2c030402 	cfstrscs	mvf0, [r3], {2}
    258c:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    2590:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2594:	04020005 	streq	r0, [r2], #-5
    2598:	08054a01 	stmdaeq	r5, {r0, r9, fp, lr}
    259c:	660b056a 	strvs	r0, [fp], -sl, ror #10
    25a0:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    25a4:	06024b01 	streq	r4, [r2], -r1, lsl #22
    25a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    25ac:	02050001 	andeq	r0, r5, #1
    25b0:	01003c70 	tsteq	r0, r0, ror ip
    25b4:	0102b703 	tsteq	r2, r3, lsl #14
    25b8:	05bb0905 	ldreq	r0, [fp, #2309]!	; 0x905
    25bc:	1a054a11 	bne	154e08 <__core1_unwind_stub-0xeab1f8>
    25c0:	4b09054a 	blmi	243af0 <__core1_unwind_stub-0xdbc510>
    25c4:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
    25c8:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    25cc:	08056601 	stmdaeq	r5, {r0, r9, sl, sp, lr}
    25d0:	680d054b 	stmdavs	sp, {r0, r1, r3, r6, r8, sl}
    25d4:	054c0b05 	strbeq	r0, [ip, #-2821]	; 0xfffff4fb
    25d8:	2f053025 	svccs	0x00053025
    25dc:	4a1b0566 	bmi	6c3b7c <__core1_unwind_stub-0x93c484>
    25e0:	05f21205 	ldrbeq	r1, [r2, #517]!	; 0x205
    25e4:	16052e11 			; <UNDEFINED> instruction: 0x16052e11
    25e8:	4a0a054b 	bmi	283b1c <__core1_unwind_stub-0xd7c4e4>
    25ec:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    25f0:	0a054a11 	beq	154e3c <__core1_unwind_stub-0xeab1c4>
    25f4:	682e052f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r8, sl}
    25f8:	059e0c05 	ldreq	r0, [lr, #3077]	; 0xc05
    25fc:	1405663a 	strne	r6, [r5], #-1594	; 0xfffff9c6
    2600:	300f054a 	andcc	r0, pc, sl, asr #10
    2604:	05820a05 	streq	r0, [r2, #2565]	; 0xa05
    2608:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    260c:	0e054a01 	vmlaeq.f32	s8, s10, s2
    2610:	67130568 	ldrvs	r0, [r3, -r8, ror #10]
    2614:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    2618:	6673030b 	ldrbtvs	r0, [r3], -fp, lsl #6
    261c:	0f030805 	svceq	0x00030805
    2620:	660f0582 	strvs	r0, [pc], -r2, lsl #11
    2624:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
    2628:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    262c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2630:	02050001 	andeq	r0, r5, #1
    2634:	01003de8 	smlatteq	r0, r8, sp, r3
    2638:	0102e203 	tsteq	r2, r3, lsl #4
    263c:	21081305 	tstcs	r8, r5, lsl #6
    2640:	054a1b05 	strbeq	r1, [sl, #-2821]	; 0xfffff4fb
    2644:	11054a26 	tstne	r5, r6, lsr #20
    2648:	4a19054b 	bmi	643b7c <__core1_unwind_stub-0x9bc484>
    264c:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    2650:	08054b0c 	stmdaeq	r5, {r2, r3, r8, r9, fp, lr}
    2654:	001a054c 	andseq	r0, sl, ip, asr #10
    2658:	66010402 	strvs	r0, [r1], -r2, lsl #8
    265c:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
    2660:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    2664:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
    2668:	56056603 	strpl	r6, [r5], -r3, lsl #12
    266c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2670:	006a0566 	rsbeq	r0, sl, r6, ror #10
    2674:	66050402 	strvs	r0, [r5], -r2, lsl #8
    2678:	05680a05 	strbeq	r0, [r8, #-2565]!	; 0xfffff5fb
    267c:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    2680:	0e056601 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx1
    2684:	4d0a0568 	cfstr32mi	mvfx0, [sl, #-416]	; 0xfffffe60
    2688:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    268c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2690:	0a05680c 	beq	15c6c8 <__core1_unwind_stub-0xea3938>
    2694:	17052208 	strne	r2, [r5, -r8, lsl #4]
    2698:	01040200 	mrseq	r0, R12_usr
    269c:	680d0566 	stmdavs	sp, {r1, r2, r5, r6, r8, sl}
    26a0:	05f20c05 	ldrbeq	r0, [r2, #3077]!	; 0xc05
    26a4:	1705300a 	strne	r3, [r5, -sl]
    26a8:	01040200 	mrseq	r0, R12_usr
    26ac:	68160566 	ldmdavs	r6, {r1, r2, r5, r6, r8, sl}
    26b0:	05ba0c05 	ldreq	r0, [sl, #3077]!	; 0xc05
    26b4:	1705680a 	strne	r6, [r5, -sl, lsl #16]
    26b8:	01040200 	mrseq	r0, R12_usr
    26bc:	68160566 	ldmdavs	r6, {r1, r2, r5, r6, r8, sl}
    26c0:	05ba0c05 	ldreq	r0, [sl, #3077]!	; 0xc05
    26c4:	1405690a 	strne	r6, [r5], #-2314	; 0xfffff6f6
    26c8:	01040200 	mrseq	r0, R12_usr
    26cc:	00270566 	eoreq	r0, r7, r6, ror #10
    26d0:	66020402 	strvs	r0, [r2], -r2, lsl #8
    26d4:	4b681005 	blmi	1a066f0 <__end__+0x9ea6d0>
    26d8:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    26dc:	1e056a0c 	vmlane.f32	s12, s10, s24
    26e0:	01040200 	mrseq	r0, R12_usr
    26e4:	00320566 	eorseq	r0, r2, r6, ror #10
    26e8:	66020402 	strvs	r0, [r2], -r2, lsl #8
    26ec:	05681105 	strbeq	r1, [r8, #-261]!	; 0xfffffefb
    26f0:	1105f210 	tstne	r5, r0, lsl r2	; <UNPREDICTABLE>
    26f4:	a10a0532 	tstge	sl, r2, lsr r5
    26f8:	02001c05 	andeq	r1, r0, #1280	; 0x500
    26fc:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2700:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    2704:	0c056602 	stceq	6, cr6, [r5], {2}
    2708:	68130568 	ldmdavs	r3, {r3, r5, r6, r8, sl}
    270c:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
    2710:	0f054b10 	svceq	0x00054b10
    2714:	001c0586 	andseq	r0, ip, r6, lsl #11
    2718:	66010402 	strvs	r0, [r1], -r2, lsl #8
    271c:	05681505 	strbeq	r1, [r8, #-1285]!	; 0xfffffafb
    2720:	12054b16 	andne	r4, r5, #22528	; 0x5800
    2724:	690c054b 	stmdbvs	ip, {r0, r1, r3, r6, r8, sl}
    2728:	02001905 	andeq	r1, r0, #81920	; 0x14000
    272c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2730:	0c05680e 	stceq	8, cr6, [r5], {14}
    2734:	15053548 	strne	r3, [r5, #-1352]	; 0xfffffab8
    2738:	01040200 	mrseq	r0, R12_usr
    273c:	68130582 	ldmdavs	r3, {r1, r7, r8, sl}
    2740:	054b1005 	strbeq	r1, [fp, #-5]
    2744:	1e058411 	cfmvdlrne	mvd5, r8
    2748:	01040200 	mrseq	r0, R12_usr
    274c:	002a0566 	eoreq	r0, sl, r6, ror #10
    2750:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    2754:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
    2758:	11054b10 	tstne	r5, r0, lsl fp
    275c:	001e0584 	andseq	r0, lr, r4, lsl #11
    2760:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2764:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
    2768:	0c054b10 			; <UNDEFINED> instruction: 0x0c054b10
    276c:	00190569 	andseq	r0, r9, r9, ror #10
    2770:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2774:	05680e05 	strbeq	r0, [r8, #-3589]!	; 0xfffff1fb
    2778:	6667030c 	strbtvs	r0, [r7], -ip, lsl #6
    277c:	1d030a05 	vstrne	s0, [r3, #-20]	; 0xffffffec
    2780:	0c054b2e 			; <UNDEFINED> instruction: 0x0c054b2e
    2784:	4d0a0584 	cfstr32mi	mvfx0, [sl, #-528]	; 0xfffffdf0
    2788:	02001905 	andeq	r1, r0, #81920	; 0x14000
    278c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2790:	0a056809 	beq	15c7bc <__core1_unwind_stub-0xea3844>
    2794:	001a05a0 	andseq	r0, sl, r0, lsr #11
    2798:	66010402 	strvs	r0, [r1], -r2, lsl #8
    279c:	05680905 	strbeq	r0, [r8, #-2309]!	; 0xfffff6fb
    27a0:	0705a00d 	streq	sl, [r5, -sp]
    27a4:	0009054a 	andeq	r0, r9, sl, asr #10
    27a8:	30040402 	andcc	r0, r4, r2, lsl #8
    27ac:	02003805 	andeq	r3, r0, #327680	; 0x50000
    27b0:	059c0404 	ldreq	r0, [ip, #1028]	; 0x404
    27b4:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    27b8:	1e056601 	cfmadd32ne	mvax0, mvfx6, mvfx5, mvfx1
    27bc:	01040200 	mrseq	r0, R12_usr
    27c0:	00070566 	andeq	r0, r7, r6, ror #10
    27c4:	4a010402 	bmi	437d4 <__core1_unwind_stub-0xfbc82c>
    27c8:	02002705 	andeq	r2, r0, #1310720	; 0x140000
    27cc:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    27d0:	19056a0a 	stmdbne	r5, {r1, r3, r9, fp, sp, lr}
    27d4:	01040200 	mrseq	r0, R12_usr
    27d8:	68090566 	stmdavs	r9, {r1, r2, r5, r6, r8, sl}
    27dc:	05a00a05 	streq	r0, [r0, #2565]!	; 0xa05
    27e0:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    27e4:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    27e8:	a00d0568 	andge	r0, sp, r8, ror #10
    27ec:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    27f0:	04020009 	streq	r0, [r2], #-9
    27f4:	25053003 	strcs	r3, [r5, #-3]
    27f8:	03040200 	movweq	r0, #16896	; 0x4200
    27fc:	001c0580 	andseq	r0, ip, r0, lsl #11
    2800:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2804:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    2808:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    280c:	07056a0d 	streq	r6, [r5, -sp, lsl #20]
    2810:	0009054a 	andeq	r0, r9, sl, asr #10
    2814:	30030402 	andcc	r0, r3, r2, lsl #8
    2818:	02001905 	andeq	r1, r0, #81920	; 0x14000
    281c:	05f00304 	ldrbeq	r0, [r0, #772]!	; 0x304
    2820:	04020007 	streq	r0, [r2], #-7
    2824:	0d056601 	stceq	6, cr6, [r5, #-4]
    2828:	4a070586 	bmi	1c3e48 <__core1_unwind_stub-0xe3c1b8>
    282c:	02000905 	andeq	r0, r0, #81920	; 0x14000
    2830:	05300404 	ldreq	r0, [r0, #-1028]!	; 0xfffffbfc
    2834:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    2838:	1a058004 	bne	162850 <__core1_unwind_stub-0xe9d7b0>
    283c:	01040200 	mrseq	r0, R12_usr
    2840:	001e0566 	andseq	r0, lr, r6, ror #10
    2844:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2848:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    284c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2850:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    2854:	08056603 	stmdaeq	r5, {r0, r1, r9, sl, sp, lr}
    2858:	667f8703 	ldrbtvs	r8, [pc], -r3, lsl #14
    285c:	fe030d05 	vdot.bf16	d0, d3, d5[0]
    2860:	1f052e00 	svcne	0x00052e00
    2864:	01040200 	mrseq	r0, R12_usr
    2868:	680a0566 	stmdavs	sl, {r1, r2, r5, r6, r8, sl}
    286c:	05681105 	strbeq	r1, [r8, #-261]!	; 0xfffffefb
    2870:	054bba10 	strbeq	fp, [fp, #-2576]	; 0xfffff5f0
    2874:	0c054b0e 			; <UNDEFINED> instruction: 0x0c054b0e
    2878:	690f054b 	stmdbvs	pc, {r0, r1, r3, r6, r8, sl}	; <UNPREDICTABLE>
    287c:	05d70e05 	ldrbeq	r0, [r7, #3589]	; 0xe05
    2880:	10054b0f 	andne	r4, r5, pc, lsl #22
    2884:	64180530 	ldrvs	r0, [r8], #-1328	; 0xfffffad0
    2888:	05661005 	strbeq	r1, [r6, #-5]!
    288c:	0a052e0f 	beq	14e0d0 <__core1_unwind_stub-0xeb1f30>
    2890:	680c0550 	stmdavs	ip, {r4, r6, r8, sl}
    2894:	4b4d0a05 	blmi	13450b0 <__end__+0x329090>
    2898:	02000f05 	andeq	r0, r0, #5, 30
    289c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    28a0:	0d05840c 	cfstrseq	mvf8, [r5, #-48]	; 0xffffffd0
    28a4:	4a07054d 	bmi	1c3de0 <__core1_unwind_stub-0xe3c220>
    28a8:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    28ac:	05300404 	ldreq	r0, [r0, #-1028]!	; 0xfffffbfc
    28b0:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    28b4:	1a059c04 	bne	1698cc <__core1_unwind_stub-0xe96734>
    28b8:	01040200 	mrseq	r0, R12_usr
    28bc:	001e0566 	andseq	r0, lr, r6, ror #10
    28c0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    28c4:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    28c8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    28cc:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    28d0:	0d056603 	stceq	6, cr6, [r5, #-12]
    28d4:	4a07056b 	bmi	1c3e88 <__core1_unwind_stub-0xe3c178>
    28d8:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
    28dc:	2605680b 	strcs	r6, [r5], -fp, lsl #16
    28e0:	0b052408 	bleq	14b908 <__core1_unwind_stub-0xeb46f8>
    28e4:	003a0566 	eorseq	r0, sl, r6, ror #10
    28e8:	03020402 	movweq	r0, #9218	; 0x2402
    28ec:	07059e78 	smlsdxeq	r5, r8, lr, r9
    28f0:	01040200 	mrseq	r0, R12_usr
    28f4:	001a0566 	andseq	r0, sl, r6, ror #10
    28f8:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
    28fc:	02002c05 	andeq	r2, r0, #1280	; 0x500
    2900:	05820404 	streq	r0, [r2, #1028]	; 0x404
    2904:	660c030d 	strvs	r0, [ip], -sp, lsl #6
    2908:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    290c:	04020009 	streq	r0, [r2], #-9
    2910:	38053004 	stmdacc	r5, {r2, ip, sp}
    2914:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2918:	001a0580 	andseq	r0, sl, r0, lsl #11
    291c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2920:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
    2924:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2928:	04020007 	streq	r0, [r2], #-7
    292c:	27054a01 	strcs	r4, [r5, -r1, lsl #20]
    2930:	03040200 	movweq	r0, #16896	; 0x4200
    2934:	030d0566 	movweq	r0, #54630	; 0xd566
    2938:	0f056652 	svceq	0x00056652
    293c:	052e3503 	streq	r3, [lr, #-1283]!	; 0xfffffafd
    2940:	7ecd0308 	cdpvc	3, 12, cr0, cr13, cr8, {0}
    2944:	030d054a 	movweq	r0, #54602	; 0xd54a
    2948:	054a00fe 	strbeq	r0, [sl, #-254]	; 0xffffff02
    294c:	2e38030c 	cdpcs	3, 3, cr0, cr8, cr12, {0}
    2950:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    2954:	022f0104 	eoreq	r0, pc, #4, 2
    2958:	01010006 	tsteq	r1, r6
    295c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2960:	00460402 	subeq	r0, r6, r2, lsl #8
    2964:	04a90301 	strteq	r0, [r9], #769	; 0x301
    2968:	bb1c0501 	bllt	703d74 <__core1_unwind_stub-0x8fc28c>
    296c:	4b4b0905 	blmi	12c4d88 <__end__+0x2a8d68>
    2970:	05500d05 	ldrbeq	r0, [r0, #-3333]	; 0xfffff2fb
    2974:	0f05bc0b 	svceq	0x0005bc0b
    2978:	bb0e0568 	bllt	383f20 <__core1_unwind_stub-0xc7c0e0>
    297c:	9f680d05 	svcls	0x00680d05
    2980:	05310f05 	ldreq	r0, [r1, #-3845]!	; 0xfffff0fb
    2984:	18054b0e 	stmdane	r5, {r1, r2, r3, r8, r9, fp, lr}
    2988:	01040200 	mrseq	r0, R12_usr
    298c:	00240566 	eoreq	r0, r4, r6, ror #10
    2990:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2994:	02003005 	andeq	r3, r0, #5
    2998:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    299c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    29a0:	11056604 	tstne	r5, r4, lsl #12
    29a4:	10054b68 	andne	r4, r5, r8, ror #22
    29a8:	4b0e05bd 	blmi	3840a4 <__core1_unwind_stub-0xc7bf5c>
    29ac:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
    29b0:	11058212 	tstne	r5, r2, lsl r2
    29b4:	1405da2f 	strne	sp, [r5], #-2607	; 0xfffff5d1
    29b8:	4b0e05d9 	blmi	384124 <__core1_unwind_stub-0xc7bedc>
    29bc:	6810054b 	ldmdavs	r0, {r0, r1, r3, r6, r8, sl}
    29c0:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
    29c4:	1905bb10 	stmdbne	r5, {r4, r8, r9, fp, ip, sp, pc}
    29c8:	82180568 	andshi	r0, r8, #104, 10	; 0x1a000000
    29cc:	da2f1305 	ble	bc75e8 <__core1_unwind_stub-0x438a18>
    29d0:	4bdb1105 	blmi	ff6c6dec <__shm_end__+0xbf6c6dec>
    29d4:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
    29d8:	1105670f 	tstne	r5, pc, lsl #14
    29dc:	6c0f05b7 	cfstr32vs	mvfx0, [pc], {183}	; 0xb7
    29e0:	24020e05 	strcs	r0, [r2], #-3589	; 0xfffff1fb
    29e4:	4c140512 	cfldr32mi	mvfx0, [r4], {18}
    29e8:	054f0a05 	strbeq	r0, [pc, #-2565]	; 1feb <__core1_unwind_stub-0xffe015>
    29ec:	4003a10b 	andmi	sl, r3, fp, lsl #2
    29f0:	030a0566 	movweq	r0, #42342	; 0xa566
    29f4:	052e00c2 	streq	r0, [lr, #-194]!	; 0xffffff3e
    29f8:	0105320c 	tsteq	r5, ip, lsl #4
    29fc:	01040200 	mrseq	r0, R12_usr
    2a00:	0006022f 	andeq	r0, r6, pc, lsr #4
    2a04:	01d50101 	bicseq	r0, r5, r1, lsl #2
    2a08:	00030000 	andeq	r0, r3, r0
    2a0c:	00000136 	andeq	r0, r0, r6, lsr r1
    2a10:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2a14:	0101000d 	tsteq	r1, sp
    2a18:	00000101 	andeq	r0, r0, r1, lsl #2
    2a1c:	00000100 	andeq	r0, r0, r0, lsl #2
    2a20:	6c776801 	ldclvs	8, cr6, [r7], #-4
    2a24:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2a28:	752f6372 	strvc	r6, [pc, #-882]!	; 26be <__core1_unwind_stub-0xffd942>
    2a2c:	736c6974 	cmnvc	ip, #116, 18	; 0x1d0000
    2a30:	73752f00 	cmnvc	r5, #0, 30
    2a34:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    2a38:	63672f62 	cmnvs	r7, #392	; 0x188
    2a3c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    2a40:	6f6e2d6d 	svcvs	0x006e2d6d
    2a44:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    2a48:	2f696261 	svccs	0x00696261
    2a4c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    2a50:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    2a54:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2a58:	77680065 	strbvc	r0, [r8, -r5, rrx]!
    2a5c:	2f62696c 	svccs	0x0062696c
    2a60:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2a64:	00656475 	rsbeq	r6, r5, r5, ror r4
    2a68:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    2a6c:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    2a70:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2a74:	6f732f65 	svcvs	0x00732f65
    2a78:	31615f63 	cmncc	r1, r3, ror #30
    2a7c:	752f0030 	strvc	r0, [pc, #-48]!	; 2a54 <__core1_unwind_stub-0xffd5ac>
    2a80:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2a84:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2a88:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2a8c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2a90:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2a94:	752f0073 	strvc	r0, [pc, #-115]!	; 2a29 <__core1_unwind_stub-0xffd5d7>
    2a98:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2a9c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2aa0:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2aa4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2aa8:	61000062 	tstvs	r0, r2, rrx
    2aac:	705f746c 	subsvc	r7, pc, ip, ror #8
    2ab0:	72617532 	rsbvc	r7, r1, #209715200	; 0xc800000
    2ab4:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2ab8:	73000001 	movwvc	r0, #1
    2abc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2ac0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2ac4:	68000002 	stmdavs	r0, {r1}
    2ac8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2acc:	0300682e 	movweq	r6, #2094	; 0x82e
    2ad0:	6c610000 	stclvs	0, cr0, [r1], #-0
    2ad4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    2ad8:	5f6b636f 	svcpl	0x006b636f
    2adc:	616e616d 	cmnvs	lr, sp, ror #2
    2ae0:	2e726567 	cdpcs	5, 7, cr6, cr2, cr7, {3}
    2ae4:	00040068 	andeq	r0, r4, r8, rrx
    2ae8:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2aec:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    2af0:	755f3035 	ldrbvc	r3, [pc, #-53]	; 2ac3 <__core1_unwind_stub-0xffd53d>
    2af4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    2af8:	00030068 	andeq	r0, r3, r8, rrx
    2afc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2b00:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    2b04:	00020068 	andeq	r0, r2, r8, rrx
    2b08:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    2b0c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2b10:	00050068 	andeq	r0, r5, r8, rrx
    2b14:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    2b18:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2b1c:	00000500 	andeq	r0, r0, r0, lsl #10
    2b20:	6b636f6c 	blvs	18de8d8 <__end__+0x8c28b8>
    2b24:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    2b28:	74730000 	ldrbtvc	r0, [r3], #-0
    2b2c:	2e6f6964 	vnmulcs.f16	s13, s30, s9	; <UNPREDICTABLE>
    2b30:	00060068 	andeq	r0, r6, r8, rrx
    2b34:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2b38:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2b3c:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    2b40:	00030068 	andeq	r0, r3, r8, rrx
    2b44:	01050000 	mrseq	r0, (UNDEF: 5)
    2b48:	b8020500 	stmdalt	r2, {r8, sl}
    2b4c:	03010048 	movweq	r0, #4168	; 0x1048
    2b50:	1005013c 	andne	r0, r5, ip, lsr r1
    2b54:	4c1105bb 	cfldr32mi	mvfx0, [r1], {187}	; 0xbb
    2b58:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    2b5c:	05054c1a 	streq	r4, [r5, #-3098]	; 0xfffff3e6
    2b60:	4d0c0567 	cfstr32mi	mvfx0, [ip, #-412]	; 0xfffffe64
    2b64:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2b68:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    2b6c:	03054a01 	movweq	r4, #23041	; 0x5a01
    2b70:	bc010567 	cfstr32lt	mvfx0, [r1], {103}	; 0x67
    2b74:	01000602 	tsteq	r0, r2, lsl #12
    2b78:	00010501 	andeq	r0, r1, r1, lsl #10
    2b7c:	49380205 	ldmdbmi	r8!, {r0, r2, r9}
    2b80:	cb030100 	blgt	c2f88 <__core1_unwind_stub-0xf3d078>
    2b84:	0e050100 	adfeqs	f0, f5, f0
    2b88:	08054d83 	stmdaeq	r5, {r0, r1, r7, r8, sl, fp, lr}
    2b8c:	681205f7 	ldmdavs	r2, {r0, r1, r2, r4, r5, r6, r7, r8, sl}
    2b90:	05d90805 	ldrbeq	r0, [r9, #2053]	; 0x805
    2b94:	08056812 	stmdaeq	r5, {r1, r4, fp, sp, lr}
    2b98:	681205dc 	ldmdavs	r2, {r2, r3, r4, r6, r7, r8, sl}
    2b9c:	05a10805 	streq	r0, [r1, #2053]!	; 0x805
    2ba0:	0c056812 	stceq	8, cr6, [r5], {18}
    2ba4:	2f0105a0 	svccs	0x000105a0
    2ba8:	01000602 	tsteq	r0, r2, lsl #12
    2bac:	00010501 	andeq	r0, r1, r1, lsl #10
    2bb0:	00000205 	andeq	r0, r0, r5, lsl #4
    2bb4:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    2bb8:	12050100 	andne	r0, r5, #0, 2
    2bbc:	4d050583 	cfstr32mi	mvfx0, [r5, #-524]	; 0xfffffdf4
    2bc0:	02000905 	andeq	r0, r0, #81920	; 0x14000
    2bc4:	056c0104 	strbeq	r0, [ip, #-260]!	; 0xfffffefc
    2bc8:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    2bcc:	0505bb01 	streq	fp, [r5, #-2817]	; 0xfffff4ff
    2bd0:	01040200 	mrseq	r0, R12_usr
    2bd4:	01054c4a 	tsteq	r5, sl, asr #24
    2bd8:	06022408 	streq	r2, [r2], -r8, lsl #8
    2bdc:	b7010100 	strlt	r0, [r1, -r0, lsl #2]
    2be0:	03000001 	movweq	r0, #1
    2be4:	00010800 	andeq	r0, r1, r0, lsl #16
    2be8:	fb010200 	blx	433f2 <__core1_unwind_stub-0xfbcc0e>
    2bec:	01000d0e 	tsteq	r0, lr, lsl #26
    2bf0:	00010101 	andeq	r0, r1, r1, lsl #2
    2bf4:	00010000 	andeq	r0, r1, r0
    2bf8:	72730100 	rsbsvc	r0, r3, #0, 2
    2bfc:	6f632f63 	svcvs	0x00632f63
    2c00:	00316572 	eorseq	r6, r1, r2, ror r5
    2c04:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2c08:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2c0c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2c10:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2c14:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2c18:	61652d65 	cmnvs	r5, r5, ror #26
    2c1c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    2c20:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    2c24:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2c28:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    2c2c:	73752f00 	cmnvc	r5, #0, 30
    2c30:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2c34:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2c38:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    2c3c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2c40:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    2c44:	73752f00 	cmnvc	r5, #0, 30
    2c48:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2c4c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2c50:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    2c54:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2c58:	6c776800 	ldclvs	8, cr6, [r7], #-0
    2c5c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    2c60:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2c64:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
    2c68:	0000636e 	andeq	r6, r0, lr, ror #6
    2c6c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2c70:	616d5f31 	cmnvs	sp, r1, lsr pc
    2c74:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    2c78:	00000100 	andeq	r0, r0, r0, lsl #2
    2c7c:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    2c80:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    2c84:	00000200 	andeq	r0, r0, r0, lsl #4
    2c88:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2c8c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2c90:	00000300 	andeq	r0, r0, r0, lsl #6
    2c94:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2c98:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2c9c:	6c000003 	stcvs	0, cr0, [r0], {3}
    2ca0:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    2ca4:	00030068 	andeq	r0, r3, r8, rrx
    2ca8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2cac:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2cb0:	00020068 	andeq	r0, r2, r8, rrx
    2cb4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2cb8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    2cbc:	00000400 	andeq	r0, r0, r0, lsl #8
    2cc0:	5f746c61 	svcpl	0x00746c61
    2cc4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    2cc8:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
    2ccc:	00000500 	andeq	r0, r0, r0, lsl #10
    2cd0:	5f616d64 	svcpl	0x00616d64
    2cd4:	6f79616c 	svcvs	0x0079616c
    2cd8:	682e7475 	stmdavs	lr!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
    2cdc:	00000600 	andeq	r0, r0, r0, lsl #12
    2ce0:	72616873 	rsbvc	r6, r1, #7536640	; 0x730000
    2ce4:	695f6465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    2ce8:	682e6370 	stmdavs	lr!, {r4, r5, r6, r8, r9, sp, lr}
    2cec:	00000600 	andeq	r0, r0, r0, lsl #12
    2cf0:	00010500 	andeq	r0, r1, r0, lsl #10
    2cf4:	4a100205 	bmi	403510 <__core1_unwind_stub-0xbfcaf0>
    2cf8:	1c030100 	stfnes	f0, [r3], {-0}
    2cfc:	69130501 	ldmdbvs	r3, {r0, r8, sl}
    2d00:	05660505 	strbeq	r0, [r6, #-1285]!	; 0xfffffafb
    2d04:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    2d08:	39052e03 	stmdbcc	r5, {r0, r1, r9, sl, fp, sp}
    2d0c:	03040200 	movweq	r0, #16896	; 0x4200
    2d10:	00050566 	andeq	r0, r5, r6, ror #10
    2d14:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2d18:	029f0105 	addseq	r0, pc, #1073741825	; 0x40000001
    2d1c:	0101000a 	tsteq	r1, sl
    2d20:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    2d24:	004a6c02 	subeq	r6, sl, r2, lsl #24
    2d28:	01230301 			; <UNDEFINED> instruction: 0x01230301
    2d2c:	4b830505 	blmi	fe0c4148 <__shm_end__+0xbe0c4148>
    2d30:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    2d34:	01010008 	tsteq	r1, r8
    2d38:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2d3c:	004a9802 	subeq	r9, sl, r2, lsl #16
    2d40:	01290301 			; <UNDEFINED> instruction: 0x01290301
    2d44:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
    2d48:	0b056705 	bleq	15c964 <__core1_unwind_stub-0xea369c>
    2d4c:	05693631 	strbeq	r3, [r9, #-1585]!	; 0xfffff9cf
    2d50:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    2d54:	0b052e01 	bleq	14e560 <__core1_unwind_stub-0xeb1aa0>
    2d58:	01040200 	mrseq	r0, R12_usr
    2d5c:	1405834a 	strne	r8, [r5], #-842	; 0xfffffcb6
    2d60:	01040200 	mrseq	r0, R12_usr
    2d64:	000b052e 	andeq	r0, fp, lr, lsr #10
    2d68:	4a010402 	bmi	43d78 <__core1_unwind_stub-0xfbc288>
    2d6c:	054d0505 	strbeq	r0, [sp, #-1285]	; 0xfffffafb
    2d70:	1b05830d 	blne	1639ac <__core1_unwind_stub-0xe9c654>
    2d74:	0805052e 	stmdaeq	r5, {r1, r2, r3, r5, r8, sl}
    2d78:	00110591 	mulseq	r1, r1, r5
    2d7c:	32010402 	andcc	r0, r1, #33554432	; 0x2000000
    2d80:	02001d05 	andeq	r1, r0, #320	; 0x140
    2d84:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2d88:	04020009 	streq	r0, [r2], #-9
    2d8c:	1d054b01 	vstrne	d4, [r5, #-4]
    2d90:	01040200 	mrseq	r0, R12_usr
    2d94:	0002022d 	andeq	r0, r2, sp, lsr #4
    2d98:	007f0101 	rsbseq	r0, pc, r1, lsl #2
    2d9c:	00030000 	andeq	r0, r3, r0
    2da0:	00000030 	andeq	r0, r0, r0, lsr r0
    2da4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2da8:	0101000d 	tsteq	r1, sp
    2dac:	00000101 	andeq	r0, r0, r1, lsl #2
    2db0:	00000100 	andeq	r0, r0, r0, lsl #2
    2db4:	63727301 	cmnvs	r2, #67108864	; 0x4000000
    2db8:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2dbc:	00003165 	andeq	r3, r0, r5, ror #2
    2dc0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2dc4:	74735f31 	ldrbtvc	r5, [r3], #-3889	; 0xfffff0cf
    2dc8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2dcc:	00632e70 	rsbeq	r2, r3, r0, ror lr
    2dd0:	00000001 	andeq	r0, r0, r1
    2dd4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2dd8:	004b5402 	subeq	r5, fp, r2, lsl #8
    2ddc:	19051a01 	stmdbne	r5, {r0, r9, fp, ip}
    2de0:	66050569 	strvs	r0, [r5], -r9, ror #10
    2de4:	02000c05 	andeq	r0, r0, #1280	; 0x500
    2de8:	052f0304 	streq	r0, [pc, #-772]!	; 2aec <__core1_unwind_stub-0xffd514>
    2dec:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    2df0:	05056503 	streq	r6, [r5, #-1283]	; 0xfffffafd
    2df4:	01040200 	mrseq	r0, R12_usr
    2df8:	9e0a0366 	cdpls	3, 0, cr0, cr10, cr6, {3}
    2dfc:	01040200 	mrseq	r0, R12_usr
    2e00:	00020230 	andeq	r0, r2, r0, lsr r2
    2e04:	01050101 	tsteq	r5, r1, lsl #2
    2e08:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    2e0c:	0301004b 	movweq	r0, #4171	; 0x104b
    2e10:	0505011c 	streq	r0, [r5, #-284]	; 0xfffffee4
    2e14:	4e010514 	mcrmi	5, 0, r0, cr1, cr4, {0}
    2e18:	01000402 	tsteq	r0, r2, lsl #8
    2e1c:	00019101 	andeq	r9, r1, r1, lsl #2
    2e20:	6c000300 	stcvs	3, cr0, [r0], {-0}
    2e24:	02000000 	andeq	r0, r0, #0
    2e28:	0d0efb01 	vstreq	d15, [lr, #-4]
    2e2c:	01010100 	mrseq	r0, (UNDEF: 17)
    2e30:	00000001 	andeq	r0, r0, r1
    2e34:	01000001 	tsteq	r0, r1
    2e38:	2f637273 	svccs	0x00637273
    2e3c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2e40:	752f0031 	strvc	r0, [pc, #-49]!	; 2e17 <__core1_unwind_stub-0xffd1e9>
    2e44:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 2c80 <__core1_unwind_stub-0xffd380>
    2e48:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    2e4c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    2e50:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    2e54:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2e58:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2e5c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    2e60:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    2e64:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2e68:	00006564 	andeq	r6, r0, r4, ror #10
    2e6c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    2e70:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
    2e74:	0100632e 	tsteq	r0, lr, lsr #6
    2e78:	74730000 	ldrbtvc	r0, [r3], #-0
    2e7c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    2e80:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2e84:	74730000 	ldrbtvc	r0, [r3], #-0
    2e88:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    2e8c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2e90:	05000000 	streq	r0, [r0, #-0]
    2e94:	02050001 	andeq	r0, r5, #1
    2e98:	01004bb4 			; <UNDEFINED> instruction: 0x01004bb4
    2e9c:	bb0e0517 	bllt	384300 <__core1_unwind_stub-0xc7bd00>
    2ea0:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
    2ea4:	25054a05 	strcs	r4, [r5, #-2565]	; 0xfffff5fb
    2ea8:	03040200 	movweq	r0, #16896	; 0x4200
    2eac:	002b052e 	eoreq	r0, fp, lr, lsr #10
    2eb0:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2eb4:	02002905 	andeq	r2, r0, #81920	; 0x14000
    2eb8:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    2ebc:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    2ec0:	05052e03 	streq	r2, [r5, #-3587]	; 0xfffff1fd
    2ec4:	01040200 	mrseq	r0, R12_usr
    2ec8:	830c0566 	movwhi	r0, #50534	; 0xc566
    2ecc:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    2ed0:	01010008 	tsteq	r1, r8
    2ed4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2ed8:	004c2802 	subeq	r2, ip, r2, lsl #16
    2edc:	010c0301 	tsteq	ip, r1, lsl #6
    2ee0:	05bb0e05 	ldreq	r0, [fp, #3589]!	; 0xe05
    2ee4:	11054b14 	tstne	r5, r4, lsl fp
    2ee8:	4a05054b 	bmi	14441c <__core1_unwind_stub-0xebbbe4>
    2eec:	02002c05 	andeq	r2, r0, #1280	; 0x500
    2ef0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    2ef4:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    2ef8:	2c056603 	stccs	6, cr6, [r5], {3}
    2efc:	03040200 	movweq	r0, #16896	; 0x4200
    2f00:	00290566 	eoreq	r0, r9, r6, ror #10
    2f04:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2f08:	02001f05 	andeq	r1, r0, #5, 30
    2f0c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    2f10:	04020005 	streq	r0, [r2], #-5
    2f14:	0c056601 	stceq	6, cr6, [r5], {1}
    2f18:	2f010583 	svccs	0x00010583
    2f1c:	01000802 	tsteq	r0, r2, lsl #16
    2f20:	00010501 	andeq	r0, r1, r1, lsl #10
    2f24:	00000205 	andeq	r0, r0, r5, lsl #4
    2f28:	14030000 	strne	r0, [r3], #-0
    2f2c:	bb0e0501 	bllt	384338 <__core1_unwind_stub-0xc7bcc8>
    2f30:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
    2f34:	10054b08 	andne	r4, r5, r8, lsl #22
    2f38:	02040200 	andeq	r0, r4, #0, 4
    2f3c:	00220582 	eoreq	r0, r2, r2, lsl #11
    2f40:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2f44:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    2f48:	09058315 	stmdbeq	r5, {r0, r2, r4, r8, r9, pc}
    2f4c:	0030054a 	eorseq	r0, r0, sl, asr #10
    2f50:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2f54:	02002905 	andeq	r2, r0, #81920	; 0x14000
    2f58:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    2f5c:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    2f60:	2d056603 	stccs	6, cr6, [r5, #-12]
    2f64:	03040200 	movweq	r0, #16896	; 0x4200
    2f68:	0023052e 	eoreq	r0, r3, lr, lsr #10
    2f6c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2f70:	02000905 	andeq	r0, r0, #81920	; 0x14000
    2f74:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2f78:	0905a015 	stmdbeq	r5, {r0, r2, r4, sp, pc}
    2f7c:	0032054a 	eorseq	r0, r2, sl, asr #10
    2f80:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2f84:	02002905 	andeq	r2, r0, #81920	; 0x14000
    2f88:	05820304 	streq	r0, [r2, #772]	; 0x304
    2f8c:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    2f90:	2f058203 	svccs	0x00058203
    2f94:	03040200 	movweq	r0, #16896	; 0x4200
    2f98:	0023052e 	eoreq	r0, r3, lr, lsr #10
    2f9c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2fa0:	02000905 	andeq	r0, r0, #81920	; 0x14000
    2fa4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2fa8:	0105680c 	tsteq	r5, ip, lsl #16
    2fac:	0008022f 	andeq	r0, r8, pc, lsr #4
    2fb0:	00480101 	subeq	r0, r8, r1, lsl #2
    2fb4:	00030000 	andeq	r0, r3, r0
    2fb8:	00000033 	andeq	r0, r0, r3, lsr r0
    2fbc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2fc0:	0101000d 	tsteq	r1, sp
    2fc4:	00000101 	andeq	r0, r0, r1, lsl #2
    2fc8:	00000100 	andeq	r0, r0, r0, lsl #2
    2fcc:	63727301 	cmnvs	r2, #67108864	; 0x4000000
    2fd0:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2fd4:	00003165 	andeq	r3, r0, r5, ror #2
    2fd8:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2fdc:	78655f31 	stmdavc	r5!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    2fe0:	5f786469 	svcpl	0x00786469
    2fe4:	62757473 	rsbsvs	r7, r5, #1929379840	; 0x73000000
    2fe8:	0100532e 	tsteq	r0, lr, lsr #6
    2fec:	00000000 	andeq	r0, r0, r0
    2ff0:	00000205 	andeq	r0, r0, r5, lsl #4
    2ff4:	15030100 	strne	r0, [r3, #-256]	; 0xffffff00
    2ff8:	00020201 	andeq	r0, r2, r1, lsl #4
    2ffc:	05890101 	streq	r0, [r9, #257]	; 0x101
    3000:	00030000 	andeq	r0, r3, r0
    3004:	00000129 	andeq	r0, r0, r9, lsr #2
    3008:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    300c:	0101000d 	tsteq	r1, sp
    3010:	00000101 	andeq	r0, r0, r1, lsl #2
    3014:	00000100 	andeq	r0, r0, r0, lsl #2
    3018:	63727301 	cmnvs	r2, #67108864	; 0x4000000
    301c:	73752f00 	cmnvc	r5, #0, 30
    3020:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3024:	63672f62 	cmnvs	r7, #392	; 0x188
    3028:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    302c:	6f6e2d6d 	svcvs	0x006e2d6d
    3030:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3034:	2f696261 	svccs	0x00696261
    3038:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    303c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3040:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3044:	77680065 	strbvc	r0, [r8, -r5, rrx]!
    3048:	2f62696c 	svccs	0x0062696c
    304c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3050:	00656475 	rsbeq	r6, r5, r5, ror r4
    3054:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    3058:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    305c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3060:	6f732f65 	svcvs	0x00732f65
    3064:	31615f63 	cmncc	r1, r3, ror #30
    3068:	752f0030 	strvc	r0, [pc, #-48]!	; 3040 <__core1_unwind_stub-0xffcfc0>
    306c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3070:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3074:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3078:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    307c:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3080:	752f0073 	strvc	r0, [pc, #-115]!	; 3015 <__core1_unwind_stub-0xffcfeb>
    3084:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3088:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    308c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3090:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3094:	61000062 	tstvs	r0, r2, rrx
    3098:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2ed8 <__core1_unwind_stub-0xffd128>
    309c:	725f6d65 	subsvc	r6, pc, #6464	; 0x1940
    30a0:	6f696765 	svcvs	0x00696765
    30a4:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    30a8:	00000100 	andeq	r0, r0, r0, lsl #2
    30ac:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    30b0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    30b4:	00000200 	andeq	r0, r0, r0, lsl #4
    30b8:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    30bc:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    30c0:	00000200 	andeq	r0, r0, r0, lsl #4
    30c4:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    30c8:	00682e62 	rsbeq	r2, r8, r2, ror #28
    30cc:	61000003 	tstvs	r0, r3
    30d0:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 2f28 <__core1_unwind_stub-0xffd0d8>
    30d4:	682e756d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}
    30d8:	00000300 	andeq	r0, r0, r0, lsl #6
    30dc:	5f746c61 	svcpl	0x00746c61
    30e0:	64697262 	strbtvs	r7, [r9], #-610	; 0xfffffd9e
    30e4:	6d5f6567 	cfldr64vs	mvdx6, [pc, #-412]	; 2f50 <__core1_unwind_stub-0xffd0b0>
    30e8:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
    30ec:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    30f0:	00000400 	andeq	r0, r0, r0, lsl #8
    30f4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    30f8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    30fc:	00000500 	andeq	r0, r0, r0, lsl #10
    3100:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    3104:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3108:	6c000005 	stcvs	0, cr0, [r0], {5}
    310c:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    3110:	00050068 	andeq	r0, r5, r8, rrx
    3114:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3118:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    311c:	00000600 	andeq	r0, r0, r0, lsl #12
    3120:	5f746c61 	svcpl	0x00746c61
    3124:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    3128:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
    312c:	00000300 	andeq	r0, r0, r0, lsl #6
    3130:	001d0500 	andseq	r0, sp, r0, lsl #10
    3134:	4cac0205 	sfmmi	f0, 4, [ip], #20
    3138:	19030100 	stmdbne	r3, {r8}
    313c:	4a1f0501 	bmi	7c4548 <__core1_unwind_stub-0x83bab8>
    3140:	022e0105 	eoreq	r0, lr, #1073741825	; 0x40000001
    3144:	01010008 	tsteq	r1, r8
    3148:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
    314c:	004cc802 	subeq	ip, ip, r2, lsl #16
    3150:	011a0301 	tsteq	sl, r1, lsl #6
    3154:	054a1f05 	strbeq	r1, [sl, #-3845]	; 0xfffff0fb
    3158:	08022e01 	stmdaeq	r2, {r0, r9, sl, fp, sp}
    315c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3160:	02050001 	andeq	r0, r5, #1
    3164:	01004ce4 	smlatteq	r0, r4, ip, r4
    3168:	05011f03 	streq	r1, [r1, #-3843]	; 0xfffff0fd
    316c:	0b056905 	bleq	15d588 <__core1_unwind_stub-0xea2a78>
    3170:	8305054d 	movwhi	r0, #21837	; 0x554d
    3174:	054b4d4b 	strbeq	r4, [fp, #-3403]	; 0xfffff2b5
    3178:	08024b01 	stmdaeq	r2, {r0, r8, r9, fp, lr}
    317c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3180:	02050001 	andeq	r0, r5, #1
    3184:	01004d38 	tsteq	r0, r8, lsr sp
    3188:	05013003 	streq	r3, [r1, #-3]
    318c:	0b056805 	bleq	15d1a8 <__core1_unwind_stub-0xea2e58>
    3190:	6705054b 	strvs	r0, [r5, -fp, asr #10]
    3194:	2e0c054b 	cfsh32cs	mvfx0, mvfx12, #43
    3198:	0d030505 	cfstr32eq	mvfx0, [r3, #-20]	; 0xffffffec
    319c:	4b10052e 	blmi	40465c <__core1_unwind_stub-0xbfb9a4>
    31a0:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    31a4:	12054b19 	andne	r4, r5, #25600	; 0x6400
    31a8:	670d0567 	strvs	r0, [sp, -r7, ror #10]
    31ac:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
    31b0:	10056709 	andne	r6, r5, r9, lsl #14
    31b4:	3001052e 	andcc	r0, r1, lr, lsr #10
    31b8:	01000602 	tsteq	r0, r2, lsl #12
    31bc:	00010501 	andeq	r0, r1, r1, lsl #10
    31c0:	4dc40205 	sfmmi	f0, 2, [r4, #20]
    31c4:	de030100 	adfles	f0, f3, f0
    31c8:	11050100 	mrsne	r0, (UNDEF: 21)
    31cc:	4b08059f 	blmi	204850 <__core1_unwind_stub-0xdfb7b0>
    31d0:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    31d4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    31d8:	02004d34 	andeq	r4, r0, #52, 26	; 0xd00
    31dc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    31e0:	02040200 	andeq	r0, r4, #0, 4
    31e4:	0012054a 	andseq	r0, r2, sl, asr #10
    31e8:	06040402 	streq	r0, [r4], -r2, lsl #8
    31ec:	0017052e 	andseq	r0, r7, lr, lsr #10
    31f0:	2f040402 	svccs	0x00040402
    31f4:	02001d05 	andeq	r1, r0, #320	; 0x140
    31f8:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
    31fc:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    3200:	0c056604 	stceq	6, cr6, [r5], {4}
    3204:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3208:	000d054a 	andeq	r0, sp, sl, asr #10
    320c:	4c040402 	cfstrsmi	mvf0, [r4], {2}
    3210:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    3214:	05660404 	strbeq	r0, [r6, #-1028]!	; 0xfffffbfc
    3218:	04020008 	streq	r0, [r2], #-8
    321c:	29054a04 	stmdbcs	r5, {r2, r9, fp, lr}
    3220:	01040200 	mrseq	r0, R12_usr
    3224:	4c15054a 	cfldr32mi	mvfx0, [r5], {74}	; 0x4a
    3228:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    322c:	0f056715 	svceq	0x00056715
    3230:	4b0c0566 	blmi	3047d0 <__core1_unwind_stub-0xcfb830>
    3234:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    3238:	01010008 	tsteq	r1, r8
    323c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3240:	004e9402 	subeq	r9, lr, r2, lsl #8
    3244:	00f00301 	rscseq	r0, r0, r1, lsl #6
    3248:	83190501 	tsthi	r9, #4194304	; 0x400000
    324c:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    3250:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    3254:	14056601 	strne	r6, [r5], #-1537	; 0xfffff9ff
    3258:	841a054c 	ldrhi	r0, [sl], #-1356	; 0xfffffab4
    325c:	31030c05 	tstcc	r3, r5, lsl #24
    3260:	4b1305d6 	blmi	4c49c0 <__core1_unwind_stub-0xb3b640>
    3264:	059f0805 	ldreq	r0, [pc, #2053]	; 3a71 <__core1_unwind_stub-0xffc58f>
    3268:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    326c:	0f056601 	svceq	0x00056601
    3270:	4b09054c 	blmi	2447a8 <__core1_unwind_stub-0xdbb858>
    3274:	3f080805 	svccc	0x00080805
    3278:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    327c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3280:	08054c09 	stmdaeq	r5, {r0, r3, sl, fp, lr}
    3284:	00240583 	eoreq	r0, r4, r3, lsl #11
    3288:	66010402 	strvs	r0, [r1], -r2, lsl #8
    328c:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
    3290:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    3294:	0c056601 	stceq	6, cr6, [r5], {1}
    3298:	00010567 	andeq	r0, r1, r7, ror #10
    329c:	2f010402 	svccs	0x00010402
    32a0:	01000602 	tsteq	r0, r2, lsl #12
    32a4:	00010501 	andeq	r0, r1, r1, lsl #10
    32a8:	00000205 	andeq	r0, r0, r5, lsl #4
    32ac:	bb030000 	bllt	c32b4 <__core1_unwind_stub-0xf3cd4c>
    32b0:	06050101 	streq	r0, [r5], -r1, lsl #2
    32b4:	3267316a 	rsbcc	r3, r7, #-2147483622	; 0x8000001a
    32b8:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    32bc:	054b8306 	strbeq	r8, [fp, #-774]	; 0xfffffcfa
    32c0:	01054d0d 	tsteq	r5, sp, lsl #26
    32c4:	0008022f 	andeq	r0, r8, pc, lsr #4
    32c8:	01050101 	tsteq	r5, r1, lsl #2
    32cc:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    32d0:	0301004f 	movweq	r0, #4175	; 0x104f
    32d4:	050101d2 	streq	r0, [r1, #-466]	; 0xfffffe2e
    32d8:	052f6705 	streq	r6, [pc, #-1797]!	; 2bdb <__core1_unwind_stub-0xffd425>
    32dc:	0705300f 	streq	r3, [r5, -pc]
    32e0:	840c054c 	strhi	r0, [ip], #-1356	; 0xfffffab4
    32e4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    32e8:	01010006 	tsteq	r1, r6
    32ec:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    32f0:	00000002 	andeq	r0, r0, r2
    32f4:	01e20300 	mvneq	r0, r0, lsl #6
    32f8:	670e0501 	strvs	r0, [lr, -r1, lsl #10]
    32fc:	4b4b0505 	blmi	12c4718 <__end__+0x2a86f8>
    3300:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    3304:	06022f01 	streq	r2, [r2], -r1, lsl #30
    3308:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    330c:	02050001 	andeq	r0, r5, #1
    3310:	00000000 	andeq	r0, r0, r0
    3314:	0101ea03 	tsteq	r1, r3, lsl #20
    3318:	056a0e05 	strbeq	r0, [sl, #-3589]!	; 0xfffff1fb
    331c:	314b4b05 	cmpcc	fp, r5, lsl #22
    3320:	054d1b05 	strbeq	r1, [sp, #-2821]	; 0xfffff4fb
    3324:	1b054a10 	blne	155b6c <__core1_unwind_stub-0xeaa494>
    3328:	4a10054b 	bmi	40485c <__core1_unwind_stub-0xbfb7a4>
    332c:	054b1b05 	strbeq	r1, [fp, #-2821]	; 0xfffff4fb
    3330:	0e054a10 	vmoveq	s10, r4
    3334:	4b12054c 	blmi	48486c <__core1_unwind_stub-0xb7b794>
    3338:	054b2005 	strbeq	r2, [fp, #-5]
    333c:	16054a2e 	strne	r4, [r5], -lr, lsr #20
    3340:	4b0d0566 	blmi	3448e0 <__core1_unwind_stub-0xcbb720>
    3344:	054b1005 	strbeq	r1, [fp, #-5]
    3348:	2305631f 	movwcs	r6, #21279	; 0x531f
    334c:	310d0566 	tstcc	sp, r6, ror #10
    3350:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
    3354:	667a031b 			; <UNDEFINED> instruction: 0x667a031b
    3358:	05671205 	strbeq	r1, [r7, #-517]!	; 0xfffffdfb
    335c:	05053309 	streq	r3, [r5, #-777]	; 0xfffffcf7
    3360:	2f010530 	svccs	0x00010530
    3364:	01000602 	tsteq	r0, r2, lsl #12
    3368:	00010501 	andeq	r0, r1, r1, lsl #10
    336c:	00000205 	andeq	r0, r0, r5, lsl #4
    3370:	87030000 	strhi	r0, [r3, -r0]
    3374:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    3378:	4b0805a0 	blmi	204a00 <__core1_unwind_stub-0xdfb600>
    337c:	67670f05 	strbvs	r0, [r7, -r5, lsl #30]!
    3380:	67678467 	strbvs	r8, [r7, -r7, ror #8]!
    3384:	4b680505 	blmi	1a047a0 <__end__+0x9e8780>
    3388:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    338c:	06022f01 	streq	r2, [r2], -r1, lsl #30
    3390:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3394:	02050001 	andeq	r0, r5, #1
    3398:	00000000 	andeq	r0, r0, r0
    339c:	01029903 	tsteq	r2, r3, lsl #18
    33a0:	059f0805 	ldreq	r0, [pc, #2053]	; 3bad <__core1_unwind_stub-0xffc453>
    33a4:	052f6809 	streq	r6, [pc, #-2057]!	; 2ba3 <__core1_unwind_stub-0xffd45d>
    33a8:	09053012 	stmdbeq	r5, {r1, r4, ip, sp}
    33ac:	10054b4b 	andne	r4, r5, fp, asr #22
    33b0:	3009052e 	andcc	r0, r9, lr, lsr #10
    33b4:	12053069 	andne	r3, r5, #105	; 0x69
    33b8:	4b09052f 	blmi	24487c <__core1_unwind_stub-0xdbb784>
    33bc:	2e10054b 	cfmac32cs	mvfx0, mvfx0, mvfx11
    33c0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
    33c4:	01054c0c 	tsteq	r5, ip, lsl #24
    33c8:	0006022f 	andeq	r0, r6, pc, lsr #4
    33cc:	01050101 	tsteq	r5, r1, lsl #2
    33d0:	00020500 	andeq	r0, r2, r0, lsl #10
    33d4:	03000000 	movweq	r0, #0
    33d8:	050102b7 	streq	r0, [r1, #-695]	; 0xfffffd49
    33dc:	0c056805 	stceq	8, cr6, [r5], {5}
    33e0:	2f01054b 	svccs	0x0001054b
    33e4:	01000802 	tsteq	r0, r2, lsl #16
    33e8:	00010501 	andeq	r0, r1, r1, lsl #10
    33ec:	00000205 	andeq	r0, r0, r5, lsl #4
    33f0:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    33f4:	12050102 	andne	r0, r5, #-2147483648	; 0x80000000
    33f8:	4b0805d7 	blmi	204b5c <__core1_unwind_stub-0xdfb4a4>
    33fc:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    3400:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3404:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    3408:	0805ba01 	stmdaeq	r5, {r0, r9, fp, ip, sp, pc}
    340c:	0024054b 	eoreq	r0, r4, fp, asr #10
    3410:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3414:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    3418:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    341c:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    3420:	08059e01 	stmdaeq	r5, {r0, r9, sl, fp, ip, pc}
    3424:	0024054b 	eoreq	r0, r4, fp, asr #10
    3428:	66010402 	strvs	r0, [r1], -r2, lsl #8
    342c:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    3430:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3434:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    3438:	08059e01 	stmdaeq	r5, {r0, r9, sl, fp, ip, pc}
    343c:	0024054b 	eoreq	r0, r4, fp, asr #10
    3440:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3444:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    3448:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    344c:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    3450:	01059e01 	tsteq	r5, r1, lsl #28
    3454:	0006024b 	andeq	r0, r6, fp, asr #4
    3458:	01050101 	tsteq	r5, r1, lsl #2
    345c:	00020500 	andeq	r0, r2, r0, lsl #10
    3460:	03000000 	movweq	r0, #0
    3464:	050102c7 	streq	r0, [r1, #-711]	; 0xfffffd39
    3468:	05056712 	streq	r6, [r5, #-1810]	; 0xfffff8ee
    346c:	4b1b054c 	blmi	6c49a4 <__core1_unwind_stub-0x93b65c>
    3470:	05490505 	strbeq	r0, [r9, #-1285]	; 0xfffffafb
    3474:	05052f26 	streq	r2, [r5, #-3878]	; 0xfffff0da
    3478:	2f300549 	svccs	0x00300549
    347c:	05490505 	strbeq	r0, [r9, #-1285]	; 0xfffffafb
    3480:	02220801 	eoreq	r0, r2, #65536	; 0x10000
    3484:	01010006 	tsteq	r1, r6
    3488:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    348c:	00000002 	andeq	r0, r0, r2
    3490:	02cf0300 	sbceq	r0, pc, #0, 6
    3494:	68180501 	ldmdavs	r8, {r0, r8, sl}
    3498:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    349c:	1f054a19 	svcne	0x00054a19
    34a0:	8601052e 	strhi	r0, [r1], -lr, lsr #10
    34a4:	01000802 	tsteq	r0, r2, lsl #16
    34a8:	00010501 	andeq	r0, r1, r1, lsl #10
    34ac:	00000205 	andeq	r0, r0, r5, lsl #4
    34b0:	ef030000 	svc	0x00030000
    34b4:	09050102 	stmdbeq	r5, {r1, r8}
    34b8:	6608054b 	strvs	r0, [r8], -fp, asr #10
    34bc:	02001805 	andeq	r1, r0, #327680	; 0x50000
    34c0:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    34c4:	31059f1b 	tstcc	r5, fp, lsl pc
    34c8:	01040200 	mrseq	r0, R12_usr
    34cc:	9f1b059e 	svcls	0x001b059e
    34d0:	059f1005 	ldreq	r1, [pc, #5]	; 34dd <__core1_unwind_stub-0xffcb23>
    34d4:	01054b0c 	tsteq	r5, ip, lsl #22
    34d8:	0008022f 	andeq	r0, r8, pc, lsr #4
    34dc:	01050101 	tsteq	r5, r1, lsl #2
    34e0:	00020500 	andeq	r0, r2, r0, lsl #10
    34e4:	03000000 	movweq	r0, #0
    34e8:	050102f8 	streq	r0, [r1, #-760]	; 0xfffffd08
    34ec:	08056819 	stmdaeq	r5, {r0, r3, r4, fp, sp, lr}
    34f0:	00240567 	eoreq	r0, r4, r7, ror #10
    34f4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    34f8:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    34fc:	24056708 	strcs	r6, [r5], #-1800	; 0xfffff8f8
    3500:	01040200 	mrseq	r0, R12_usr
    3504:	4c140566 	cfldr32mi	mvfx0, [r4], {102}	; 0x66
    3508:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
    350c:	06022f01 	streq	r2, [r2], -r1, lsl #30
    3510:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3514:	02050001 	andeq	r0, r5, #1
    3518:	00000000 	andeq	r0, r0, r0
    351c:	01038603 	tsteq	r3, r3, lsl #12
    3520:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
    3524:	08054c09 	stmdaeq	r5, {r0, r3, sl, fp, lr}
    3528:	4b0d059e 	blmi	344ba8 <__core1_unwind_stub-0xcbb458>
    352c:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    3530:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
    3534:	18056601 	stmdane	r5, {r0, r9, sl, sp, lr}
    3538:	9f9f9f4e 	svcls	0x009f9f4e
    353c:	9f9f9f9f 	svcls	0x009f9f9f
    3540:	15059f9f 	strne	r9, [r5, #-3999]	; 0xfffff061
    3544:	16059f9f 			; <UNDEFINED> instruction: 0x16059f9f
    3548:	9f18059f 	svcls	0x0018059f
    354c:	a00c059f 	mulge	ip, pc, r5	; <UNPREDICTABLE>
    3550:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    3554:	01010006 	tsteq	r1, r6
    3558:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    355c:	00000002 	andeq	r0, r0, r2
    3560:	03a30300 			; <UNDEFINED> instruction: 0x03a30300
    3564:	4b120501 	blmi	484970 <__core1_unwind_stub-0xb7b690>
    3568:	05831305 	streq	r1, [r3, #773]	; 0x305
    356c:	17058314 	smladne	r5, r4, r3, r8
    3570:	83180583 	tsthi	r8, #549453824	; 0x20c00000
    3574:	05831705 	streq	r1, [r3, #1797]	; 0x705
    3578:	17058318 	smladne	r5, r8, r3, r8
    357c:	83140583 	tsthi	r4, #549453824	; 0x20c00000
    3580:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    3584:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    3588:	48010100 	stmdami	r1, {r8}
    358c:	03000003 	movweq	r0, #3
    3590:	00019300 	andeq	r9, r1, r0, lsl #6
    3594:	fb010200 	blx	43d9e <__core1_unwind_stub-0xfbc262>
    3598:	01000d0e 	tsteq	r0, lr, lsl #26
    359c:	00010101 	andeq	r0, r1, r1, lsl #2
    35a0:	00010000 	andeq	r0, r1, r0
    35a4:	72730100 	rsbsvc	r0, r3, #0, 2
    35a8:	752f0063 	strvc	r0, [pc, #-99]!	; 354d <__core1_unwind_stub-0xffcab3>
    35ac:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    35b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    35b4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    35b8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    35bc:	616d2f62 	cmnvs	sp, r2, ror #30
    35c0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    35c4:	752f0065 	strvc	r0, [pc, #-101]!	; 3567 <__core1_unwind_stub-0xffca99>
    35c8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3404 <__core1_unwind_stub-0xffcbfc>
    35cc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    35d0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    35d4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    35d8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    35dc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    35e0:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    35e4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    35e8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    35ec:	2f006564 	svccs	0x00006564
    35f0:	2f727375 	svccs	0x00727375
    35f4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    35f8:	2f656475 	svccs	0x00656475
    35fc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3600:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3604:	2f007379 	svccs	0x00007379
    3608:	2f727375 	svccs	0x00727375
    360c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3610:	2f656475 	svccs	0x00656475
    3614:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3618:	68006269 	stmdavs	r0, {r0, r3, r5, r6, r9, sp, lr}
    361c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3620:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3624:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3628:	6c776800 	ldclvs	8, cr6, [r7], #-0
    362c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    3630:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3634:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    3638:	615f636f 	cmpvs	pc, pc, ror #6
    363c:	00003031 	andeq	r3, r0, r1, lsr r0
    3640:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    3644:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    3648:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    364c:	00000100 	andeq	r0, r0, r0, lsl #2
    3650:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    3654:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    3658:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    365c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3660:	00000200 	andeq	r0, r0, r0, lsl #4
    3664:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    3668:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    366c:	00000300 	andeq	r0, r0, r0, lsl #6
    3670:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3674:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3678:	00000400 	andeq	r0, r0, r0, lsl #8
    367c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    3680:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3684:	00040068 	andeq	r0, r4, r8, rrx
    3688:	69745f00 	ldmdbvs	r4!, {r8, r9, sl, fp, ip, lr}^
    368c:	6176656d 	cmnvs	r6, sp, ror #10
    3690:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    3694:	5f000004 	svcpl	0x00000004
    3698:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    369c:	63657073 	cmnvs	r5, #115	; 0x73
    36a0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    36a4:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
    36a8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    36ac:	00040068 	andeq	r0, r4, r8, rrx
    36b0:	696e7500 	stmdbvs	lr!, {r8, sl, ip, sp, lr}^
    36b4:	2e647473 	mcrcs	4, 3, r7, cr4, cr3, {3}
    36b8:	00040068 	andeq	r0, r4, r8, rrx
    36bc:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    36c0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    36c4:	00000400 	andeq	r0, r0, r0, lsl #8
    36c8:	6b636f6c 	blvs	18df480 <__end__+0x8c3460>
    36cc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    36d0:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    36d4:	682e656d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    36d8:	00000500 	andeq	r0, r0, r0, lsl #10
    36dc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    36e0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    36e4:	72650000 	rsbvc	r0, r5, #0
    36e8:	2e6f6e72 	mcrcs	14, 3, r6, cr15, cr2, {3}
    36ec:	00040068 	andeq	r0, r4, r8, rrx
    36f0:	6c776800 	ldclvs	8, cr6, [r7], #-0
    36f4:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    36f8:	00000600 	andeq	r0, r0, r0, lsl #12
    36fc:	5f746c61 	svcpl	0x00746c61
    3700:	636f6c63 	cmnvs	pc, #25344	; 0x6300
    3704:	616d5f6b 	cmnvs	sp, fp, ror #30
    3708:	6567616e 	strbvs	r6, [r7, #-366]!	; 0xfffffe92
    370c:	00682e72 	rsbeq	r2, r8, r2, ror lr
    3710:	61000007 	tstvs	r0, r7
    3714:	315f746c 	cmpcc	pc, ip, ror #8
    3718:	30353536 	eorscc	r3, r5, r6, lsr r5
    371c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    3720:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3724:	00000006 	andeq	r0, r0, r6
    3728:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    372c:	004fe802 	subeq	lr, pc, r2, lsl #16
    3730:	01150301 	tsteq	r5, r1, lsl #6
    3734:	05840e05 	streq	r0, [r4, #3589]	; 0xe05
    3738:	08054d0a 	stmdaeq	r5, {r1, r3, r8, sl, fp, lr}
    373c:	0025059f 	mlaeq	r5, pc, r5, r0	; <UNPREDICTABLE>
    3740:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3744:	054d0a05 	strbeq	r0, [sp, #-2565]	; 0xfffff5fb
    3748:	2505d808 	strcs	sp, [r5, #-2056]	; 0xfffff7f8
    374c:	01040200 	mrseq	r0, R12_usr
    3750:	4d0a0566 	cfstr32mi	mvfx0, [sl, #-408]	; 0xfffffe68
    3754:	059f0805 	ldreq	r0, [pc, #2053]	; 3f61 <__core1_unwind_stub-0xffc09f>
    3758:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    375c:	0b056601 	bleq	15cf68 <__core1_unwind_stub-0xea3098>
    3760:	680a0552 	stmdavs	sl, {r1, r4, r6, r8, sl}
    3764:	05830805 	streq	r0, [r3, #2053]	; 0x805
    3768:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    376c:	0c056601 	stceq	6, cr6, [r5], {1}
    3770:	054a0f03 	strbeq	r0, [sl, #-3843]	; 0xfffff0fd
    3774:	04020001 	streq	r0, [r2], #-1
    3778:	06022f01 	streq	r2, [r2], -r1, lsl #30
    377c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3780:	02050026 	andeq	r0, r5, #38	; 0x26
    3784:	00000000 	andeq	r0, r0, r0
    3788:	0100c103 	tsteq	r0, r3, lsl #2
    378c:	05823c05 	streq	r3, [r2, #3077]	; 0xc05
    3790:	0105ba2f 	tsteq	r5, pc, lsr #20
    3794:	00080266 	andeq	r0, r8, r6, ror #4
    3798:	01050101 	tsteq	r5, r1, lsl #2
    379c:	00020500 	andeq	r0, r2, r0, lsl #10
    37a0:	03000000 	movweq	r0, #0
    37a4:	050100c6 	streq	r0, [r1, #-198]	; 0xffffff3a
    37a8:	1d05bb08 	vstrne	d11, [r5, #-32]	; 0xffffffe0
    37ac:	01040200 	mrseq	r0, R12_usr
    37b0:	67150566 	ldrvs	r0, [r5, -r6, ror #10]
    37b4:	054b1005 	strbeq	r1, [fp, #-5]
    37b8:	19054c0f 	stmdbne	r5, {r0, r1, r2, r3, sl, fp, lr}
    37bc:	6617052f 	ldrvs	r0, [r7], -pc, lsr #10
    37c0:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    37c4:	10052f11 	andne	r2, r5, r1, lsl pc
    37c8:	001e0566 	andseq	r0, lr, r6, ror #10
    37cc:	4a010402 	bmi	447dc <__core1_unwind_stub-0xfbb824>
    37d0:	02001805 	andeq	r1, r0, #327680	; 0x50000
    37d4:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    37d8:	14054b15 	strne	r4, [r5], #-2837	; 0xfffff4eb
    37dc:	4b1505d6 	blmi	544f3c <__core1_unwind_stub-0xabb0c4>
    37e0:	054a1b05 	strbeq	r1, [sl, #-2821]	; 0xfffff4fb
    37e4:	11054a29 	tstne	r5, r9, lsr #20
    37e8:	d610054d 	ldrle	r0, [r0], -sp, asr #10
    37ec:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
    37f0:	25054a17 	strcs	r4, [r5, #-2583]	; 0xfffff5e9
    37f4:	4c0d054a 	cfstr32mi	mvfx0, [sp], {74}	; 0x4a
    37f8:	76030f05 	strvc	r0, [r3], -r5, lsl #30
    37fc:	03100566 	tsteq	r0, #427819008	; 0x19800000
    3800:	0505660c 	streq	r6, [r5, #-1548]	; 0xfffff9f4
    3804:	4a0b054c 	bmi	2c4d3c <__core1_unwind_stub-0xd3b2c4>
    3808:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    380c:	06022f01 	streq	r2, [r2], -r1, lsl #30
    3810:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3814:	02050001 	andeq	r0, r5, #1
    3818:	00000000 	andeq	r0, r0, r0
    381c:	0100de03 	tsteq	r0, r3, lsl #28
    3820:	05bb0805 	ldreq	r0, [fp, #2053]!	; 0x805
    3824:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    3828:	0f056601 	svceq	0x00056601
    382c:	4b100567 	blmi	404dd0 <__core1_unwind_stub-0xbfb230>
    3830:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    3834:	10052f11 	andne	r2, r5, r1, lsl pc
    3838:	4b1105ba 	blmi	444f28 <__core1_unwind_stub-0xbbb0d8>
    383c:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    3840:	1005640f 	andne	r6, r5, pc, lsl #8
    3844:	4c050588 	cfstr32mi	mvfx0, [r5], {136}	; 0x88
    3848:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    384c:	01054b0c 	tsteq	r5, ip, lsl #22
    3850:	0006022f 	andeq	r0, r6, pc, lsr #4
    3854:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
    3858:	00020500 	andeq	r0, r2, r0, lsl #10
    385c:	03000000 	movweq	r0, #0
    3860:	050100f0 	streq	r0, [r1, #-240]	; 0xffffff10
    3864:	01058227 	tsteq	r5, r7, lsr #4
    3868:	0008022e 	andeq	r0, r8, lr, lsr #4
    386c:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    3870:	00020500 	andeq	r0, r2, r0, lsl #10
    3874:	03000000 	movweq	r0, #0
    3878:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
    387c:	4f059e3d 	svcmi	0x00059e3d
    3880:	2e1b0566 	cfmsc32cs	mvfx0, mvfx11, mvfx6
    3884:	01000802 	tsteq	r0, r2, lsl #16
    3888:	00150501 	andseq	r0, r5, r1, lsl #10
    388c:	00000205 	andeq	r0, r0, r5, lsl #4
    3890:	f2030000 	vhadd.s8	d0, d3, d0
    3894:	49050100 	stmdbmi	r5, {r8}
    3898:	00320582 	eorseq	r0, r2, r2, lsl #11
    389c:	66020402 	strvs	r0, [r2], -r2, lsl #8
    38a0:	02004905 	andeq	r4, r0, #81920	; 0x14000
    38a4:	00660404 	rsbeq	r0, r6, r4, lsl #8
    38a8:	06050402 	streq	r0, [r5], -r2, lsl #8
    38ac:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    38b0:	01054a06 	tsteq	r5, r6, lsl #20
    38b4:	09040200 	stmdbeq	r4, {r9}
    38b8:	08022e06 	stmdaeq	r2, {r1, r2, r9, sl, fp, sp}
    38bc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    38c0:	0205002d 	andeq	r0, r5, #45	; 0x2d
    38c4:	00000000 	andeq	r0, r0, r0
    38c8:	0100f303 	tsteq	r0, r3, lsl #6	; <UNPREDICTABLE>
    38cc:	05ba5905 	ldreq	r5, [sl, #2309]!	; 0x905
    38d0:	08022e01 	stmdaeq	r2, {r0, r9, sl, fp, sp}
    38d4:	70010100 	andvc	r0, r1, r0, lsl #2
    38d8:	03000000 	movweq	r0, #0
    38dc:	00003d00 	andeq	r3, r0, r0, lsl #26
    38e0:	fb010200 	blx	440ea <__core1_unwind_stub-0xfbbf16>
    38e4:	01000d0e 	tsteq	r0, lr, lsl #26
    38e8:	00010101 	andeq	r0, r1, r1, lsl #2
    38ec:	00010000 	andeq	r0, r1, r0
    38f0:	2e2e0100 	sufcse	f0, f6, f0
    38f4:	2f2e2e2f 	svccs	0x002e2e2f
    38f8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 3848 <__core1_unwind_stub-0xffc7b8>
    38fc:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3900:	6f632f63 	svcvs	0x00632f63
    3904:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3908:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    390c:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    3910:	75663162 	strbvc	r3, [r6, #-354]!	; 0xfffffe9e
    3914:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
    3918:	00010053 	andeq	r0, r1, r3, asr r0
    391c:	05000000 	streq	r0, [r0, #-0]
    3920:	0050c002 	subseq	ip, r0, r2
    3924:	08ca0301 	stmiaeq	sl, {r0, r8, r9}^
    3928:	2f2f3001 	svccs	0x002f3001
    392c:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    3930:	2f143e02 	svccs	0x00143e02
    3934:	302f2f31 	eorcc	r2, pc, r1, lsr pc	; <UNPREDICTABLE>
    3938:	322f9208 	eorcc	r9, pc, #8, 4	; 0x80000000
    393c:	2f661f03 	svccs	0x00661f03
    3940:	2f2f2f2f 	svccs	0x002f2f2f
    3944:	02022f2f 	andeq	r2, r2, #47, 30	; 0xbc
    3948:	53010100 	movwpl	r0, #4352	; 0x1100
    394c:	03000000 	movweq	r0, #0
    3950:	00003d00 	andeq	r3, r0, r0, lsl #26
    3954:	fb010200 	blx	4415e <__core1_unwind_stub-0xfbbea2>
    3958:	01000d0e 	tsteq	r0, lr, lsl #26
    395c:	00010101 	andeq	r0, r1, r1, lsl #2
    3960:	00010000 	andeq	r0, r1, r0
    3964:	2e2e0100 	sufcse	f0, f6, f0
    3968:	2f2e2e2f 	svccs	0x002e2e2f
    396c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 38bc <__core1_unwind_stub-0xffc744>
    3970:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3974:	6f632f63 	svcvs	0x00632f63
    3978:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    397c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3980:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    3984:	75663162 	strbvc	r3, [r6, #-354]!	; 0xfffffe9e
    3988:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
    398c:	00010053 	andeq	r0, r1, r3, asr r0
    3990:	05000000 	streq	r0, [r0, #-0]
    3994:	0051d402 	subseq	sp, r1, r2, lsl #8
    3998:	0bb40301 	bleq	fed045a4 <__shm_end__+0xbed045a4>
    399c:	00020201 	andeq	r0, r2, r1, lsl #4
    39a0:	00530101 	subseq	r0, r3, r1, lsl #2
    39a4:	00030000 	andeq	r0, r3, r0
    39a8:	00000039 	andeq	r0, r0, r9, lsr r0
    39ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    39b0:	0101000d 	tsteq	r1, sp
    39b4:	00000101 	andeq	r0, r0, r1, lsl #2
    39b8:	00000100 	andeq	r0, r0, r0, lsl #2
    39bc:	2f2e2e01 	svccs	0x002e2e01
    39c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    39c4:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    39c8:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    39cc:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    39d0:	2f676966 	svccs	0x00676966
    39d4:	006d7261 	rsbeq	r7, sp, r1, ror #4
    39d8:	61706200 	cmnvs	r0, r0, lsl #4
    39dc:	532e6962 			; <UNDEFINED> instruction: 0x532e6962
    39e0:	00000100 	andeq	r0, r0, r0, lsl #2
    39e4:	02050000 	andeq	r0, r5, #0
    39e8:	010051d8 	ldrdeq	r5, [r0, -r8]
    39ec:	0101fd03 	tsteq	r1, r3, lsl #26	; <UNPREDICTABLE>
    39f0:	672f4cf4 			; <UNDEFINED> instruction: 0x672f4cf4
    39f4:	01000202 	tsteq	r0, r2, lsl #4
    39f8:	0001e901 	andeq	lr, r1, r1, lsl #18
    39fc:	ca000300 	bgt	4604 <__core1_unwind_stub-0xffb9fc>
    3a00:	02000000 	andeq	r0, r0, #0
    3a04:	0d0efb01 	vstreq	d15, [lr, #-4]
    3a08:	01010100 	mrseq	r0, (UNDEF: 17)
    3a0c:	00000001 	andeq	r0, r0, r1
    3a10:	01000001 	tsteq	r0, r1
    3a14:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3a18:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3a1c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3a20:	00636367 	rsbeq	r6, r3, r7, ror #6
    3a24:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3a28:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3a2c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3a30:	2f636367 	svccs	0x00636367
    3a34:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    3a38:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3a3c:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    3a40:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3a44:	672f2e2f 	strvs	r2, [pc, -pc, lsr #28]!
    3a48:	2e006363 	cdpcs	3, 0, cr6, cr0, cr3, {3}
    3a4c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3a50:	2f2e2e2f 	svccs	0x002e2e2f
    3a54:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    3a58:	2e2f6363 	cdpcs	3, 2, cr6, cr15, cr3, {3}
    3a5c:	63672f2e 	cmnvs	r7, #46, 30	; 0xb8
    3a60:	6f632f63 	svcvs	0x00632f63
    3a64:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3a68:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3a6c:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    3a70:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    3a74:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    3a78:	68000001 	stmdavs	r0, {r0}
    3a7c:	74687361 	strbtvc	r7, [r8], #-865	; 0xfffffc9f
    3a80:	682e6261 	stmdavs	lr!, {r0, r5, r6, r9, sp, lr}
    3a84:	00000200 	andeq	r0, r0, r0, lsl #4
    3a88:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3a8c:	2e617369 	cdpcs	3, 6, cr7, cr1, cr9, {3}
    3a90:	00030068 	andeq	r0, r3, r8, rrx
    3a94:	6d726100 	ldfvse	f6, [r2, #-0]
    3a98:	7570632d 	ldrbvc	r6, [r0, #-813]!	; 0xfffffcd3
    3a9c:	0300682e 	movweq	r6, #2094	; 0x82e
    3aa0:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    3aa4:	632d6e73 			; <UNDEFINED> instruction: 0x632d6e73
    3aa8:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    3aac:	73746e61 	cmnvc	r4, #1552	; 0x610
    3ab0:	0300682e 	movweq	r6, #2094	; 0x82e
    3ab4:	72610000 	rsbvc	r0, r1, #0
    3ab8:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    3abc:	6c000004 	stcvs	0, cr0, [r0], {4}
    3ac0:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3ac4:	682e3263 	stmdavs	lr!, {r0, r1, r5, r6, r9, ip, sp}
    3ac8:	00000100 	andeq	r0, r0, r0, lsl #2
    3acc:	00010500 	andeq	r0, r1, r0, lsl #10
    3ad0:	52140205 	andspl	r0, r4, #1342177280	; 0x50000000
    3ad4:	b3030100 	movwlt	r0, #12544	; 0x3100
    3ad8:	03050107 	movweq	r0, #20743	; 0x5107
    3adc:	06060513 			; <UNDEFINED> instruction: 0x06060513
    3ae0:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    3ae4:	4a740301 	bmi	1d046f0 <__end__+0xce86d0>
    3ae8:	2f0b052e 	svccs	0x000b052e
    3aec:	052d0105 	streq	r0, [sp, #-261]!	; 0xfffffefb
    3af0:	03300603 	teqeq	r0, #3145728	; 0x300000
    3af4:	0105010a 	tsteq	r5, sl, lsl #2
    3af8:	01740306 	cmneq	r4, r6, lsl #6
    3afc:	052f0b05 	streq	r0, [pc, #-2821]!	; 2fff <__core1_unwind_stub-0xffd001>
    3b00:	2e0b0306 	cdpcs	3, 0, cr0, cr11, cr6, {0}
    3b04:	30060705 	andcc	r0, r6, r5, lsl #14
    3b08:	01060d05 	tsteq	r6, r5, lsl #26
    3b0c:	07052d9f 			; <UNDEFINED> instruction: 0x07052d9f
    3b10:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    3b14:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    3b18:	05300607 	ldreq	r0, [r0, #-1543]!	; 0xfffff9f9
    3b1c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3b20:	052f0607 	streq	r0, [pc, #-1543]!	; 3521 <__core1_unwind_stub-0xffcadf>
    3b24:	2e010609 	cfmadd32cs	mvax0, mvfx0, mvfx1, mvfx9
    3b28:	05890a05 	streq	r0, [r9, #2565]	; 0xa05
    3b2c:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
    3b30:	35060705 	strcc	r0, [r6, #-1797]	; 0xfffff8fb
    3b34:	01060a05 	tsteq	r6, r5, lsl #20
    3b38:	68030b05 	stmdavs	r3, {r0, r2, r8, r9, fp}
    3b3c:	0a052e2e 	beq	14f3fc <__core1_unwind_stub-0xeb0c04>
    3b40:	052e1803 	streq	r1, [lr, #-2051]!	; 0xfffff7fd
    3b44:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3b48:	2d130606 	ldccs	6, cr0, [r3, #-24]	; 0xffffffe8
    3b4c:	0405492f 	streq	r4, [r5], #-2351	; 0xfffff6d1
    3b50:	06052f06 	streq	r2, [r5], -r6, lsl #30
    3b54:	07050106 	streq	r0, [r5, -r6, lsl #2]
    3b58:	0a053106 	beq	14ff78 <__core1_unwind_stub-0xeb0088>
    3b5c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3b60:	06054c06 	streq	r4, [r5], -r6, lsl #24
    3b64:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3b68:	01068606 	tsteq	r6, r6, lsl #12
    3b6c:	05320b05 	ldreq	r0, [r2, #-2821]!	; 0xfffff4fb
    3b70:	05054a10 	streq	r4, [r5, #-2576]	; 0xfffff5f0
    3b74:	08052e4a 	stmdaeq	r5, {r1, r3, r6, r9, sl, fp, sp}
    3b78:	0e053106 	adfeqs	f3, f5, f6
    3b7c:	06060513 			; <UNDEFINED> instruction: 0x06060513
    3b80:	04052e01 	streq	r2, [r5], #-3585	; 0xfffff1ff
    3b84:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    3b88:	05140805 	ldreq	r0, [r4, #-2053]	; 0xfffff7fb
    3b8c:	05141303 	ldreq	r1, [r4, #-771]	; 0xfffffcfd
    3b90:	050f060b 	streq	r0, [pc, #-1547]	; 358d <__core1_unwind_stub-0xffca73>
    3b94:	052e6905 	streq	r6, [lr, #-2309]!	; 0xfffff6fb
    3b98:	052f0608 	streq	r0, [pc, #-1544]!	; 3598 <__core1_unwind_stub-0xffca68>
    3b9c:	0605130e 	streq	r1, [r5], -lr, lsl #6
    3ba0:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    3ba4:	05320604 	ldreq	r0, [r2, #-1540]!	; 0xfffff9fc
    3ba8:	65130606 	ldrvs	r0, [r3, #-1542]	; 0xfffff9fa
    3bac:	052d2e2f 	streq	r2, [sp, #-3631]!	; 0xfffff1d1
    3bb0:	052f0604 	streq	r0, [pc, #-1540]!	; 35b4 <__core1_unwind_stub-0xffca4c>
    3bb4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3bb8:	052f0604 	streq	r0, [pc, #-1540]!	; 35bc <__core1_unwind_stub-0xffca44>
    3bbc:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    3bc0:	0f056606 	svceq	0x00056606
    3bc4:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
    3bc8:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    3bcc:	01060605 	tsteq	r6, r5, lsl #12
    3bd0:	2f060505 	svccs	0x00060505
    3bd4:	01060905 	tsteq	r6, r5, lsl #18
    3bd8:	2f060305 	svccs	0x00060305
    3bdc:	13060105 	movwne	r0, #24837	; 0x6105
    3be0:	0002022e 	andeq	r0, r2, lr, lsr #4
    3be4:	005d0101 	subseq	r0, sp, r1, lsl #2
    3be8:	00030000 	andeq	r0, r3, r0
    3bec:	0000003d 	andeq	r0, r0, sp, lsr r0
    3bf0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3bf4:	0101000d 	tsteq	r1, sp
    3bf8:	00000101 	andeq	r0, r0, r1, lsl #2
    3bfc:	00000100 	andeq	r0, r0, r0, lsl #2
    3c00:	2f2e2e01 	svccs	0x002e2e01
    3c04:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3c08:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    3c0c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    3c10:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    3c14:	2f676966 	svccs	0x00676966
    3c18:	006d7261 	rsbeq	r7, sp, r1, ror #4
    3c1c:	62696c00 	rsbvs	r6, r9, #0, 24
    3c20:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
    3c24:	532e7363 			; <UNDEFINED> instruction: 0x532e7363
    3c28:	00000100 	andeq	r0, r0, r0, lsl #2
    3c2c:	02050000 	andeq	r0, r5, #0
    3c30:	01005344 	tsteq	r0, r4, asr #6
    3c34:	010de103 	tsteq	sp, r3, lsl #2
    3c38:	09032f30 	stmdbeq	r3, {r4, r5, r8, r9, sl, fp, sp}
    3c3c:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
    3c40:	0402342f 	streq	r3, [r2], #-1071	; 0xfffffbd1
    3c44:	60010100 	andvs	r0, r1, r0, lsl #2
    3c48:	03000000 	movweq	r0, #0
    3c4c:	00003d00 	andeq	r3, r0, r0, lsl #26
    3c50:	fb010200 	blx	4445a <__core1_unwind_stub-0xfbbba6>
    3c54:	01000d0e 	tsteq	r0, lr, lsl #26
    3c58:	00010101 	andeq	r0, r1, r1, lsl #2
    3c5c:	00010000 	andeq	r0, r1, r0
    3c60:	2e2e0100 	sufcse	f0, f6, f0
    3c64:	2f2e2e2f 	svccs	0x002e2e2f
    3c68:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 3bb8 <__core1_unwind_stub-0xffc448>
    3c6c:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3c70:	6f632f63 	svcvs	0x00632f63
    3c74:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3c78:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3c7c:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    3c80:	75663162 	strbvc	r3, [r6, #-354]!	; 0xfffffe9e
    3c84:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
    3c88:	00010053 	andeq	r0, r1, r3, asr r0
    3c8c:	05000000 	streq	r0, [r0, #-0]
    3c90:	00536c02 	subseq	r6, r3, r2, lsl #24
    3c94:	0dc00301 	stcleq	3, cr0, [r0, #4]
    3c98:	2f302f01 	svccs	0x00302f01
    3c9c:	2f2f302f 	svccs	0x002f302f
    3ca0:	2f2f2f30 	svccs	0x002f2f30
    3ca4:	0a022f2f 	beq	8f968 <__core1_unwind_stub-0xf70698>
    3ca8:	Address 0x0000000000003ca8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
{
       0:	6f6c5f5f 	svcvs	0x006c5f5f
       4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
       8:	5f00745f 	svcpl	0x0000745f
       c:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	5f006575 	svcpl	0x00006575
      14:	0066735f 	rsbeq	r7, r6, pc, asr r3
    ALT_PRINTF("\n");
      18:	65726670 	ldrbvs	r6, [r2, #-1648]!	; 0xfffff990
      1c:	6f6e0071 	svcvs	0x006e0071
      20:	76696463 	strbtvc	r6, [r9], -r3, ror #8
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	6d346c5f 	ldcvs	12, cr6, [r4, #-380]!	; 0xfffffe84
      28:	6b6c6370 	blvs	1b18df0 <__end__+0xafcdd0>
      2c:	73615f00 	cmnvc	r1, #0, 30
      30:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
      34:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
      38:	4e470066 	cdpmi	0, 4, cr0, cr7, cr6, {3}
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	31432055 	qdaddcc	r2, r5, r3
      40:	2e392037 	mrccs	0, 1, r2, cr9, cr7, {1}
      44:	20312e32 	eorscs	r2, r1, r2, lsr lr
      48:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
      50:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
      54:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
      58:	5b202965 	blpl	80a5f4 <__core1_unwind_stub-0x7f5a0c>
      5c:	2f4d5241 	svccs	0x004d5241
      60:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      64:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
      68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
      6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
}
      70:	6f697369 	svcvs	0x00697369
      74:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
      78:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
      80:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
      84:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
      88:	612d7865 			; <UNDEFINED> instruction: 0x612d7865
      8c:	6d2d2039 	stcvs	0, cr2, [sp, #-228]!	; 0xffffff1c
      90:	616f6c66 	cmnvs	pc, r6, ror #24
      *(pmem->toptr)=0;
      94:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
      98:	6f733d69 	svcvs	0x00733d69
      9c:	70667466 	rsbvc	r7, r6, r6, ror #8
      a0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
}
      a4:	6e3d7570 	mrcvs	5, 1, r7, cr13, cr0, {3}
      a8:	206e6f65 	rsbcs	r6, lr, r5, ror #30
      ac:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      b0:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      b8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
        break;
      bc:	612d3776 			; <UNDEFINED> instruction: 0x612d3776
    return ALT_E_SUCCESS;
      c0:	2b706d2b 	blcs	1c1b574 <__end__+0xbff554>
      c4:	2b636573 	blcs	18d9698 <__end__+0x8bd678>
        return ALT_E_ERROR;
      c8:	646d6973 	strbtvs	r6, [sp], #-2419	; 0xfffff68d
}
      cc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      d0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
      d4:	6164662d 	cmnvs	r4, sp, lsr #12
      d8:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
      e0:	20736e6f 	rsbscs	r6, r3, pc, ror #28
      e4:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
      e8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
      ec:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
      f0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    return dst;
      f4:	20736e6f 	rsbscs	r6, r3, pc, ror #28
}
      f8:	7266662d 	rsbvc	r6, r6, #47185920	; 0x2d00000
      fc:	74736565 	ldrbtvc	r6, [r3], #-1381	; 0xfffffa9b
     100:	69646e61 	stmdbvs	r4!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     104:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
        return (int)cnt;
     108:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; ffffff78 <__shm_end__+0xbfffff78>
     10c:	00656970 	rsbeq	r6, r5, r0, ror r9
    errno = ENOSYS;
     110:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
     114:	006e656c 	rsbeq	r6, lr, ip, ror #10
     118:	5f544c41 	svcpl	0x00544c41
     11c:	5f4b4c43 	svcpl	0x004b4c43
    return -1;
     120:	5f55504d 	svcpl	0x0055504d
}
     124:	525f324c 	subspl	r3, pc, #76, 4	; 0xc0000004
     128:	63004d41 	movwvs	r4, #3393	; 0xd41
     12c:	3672746e 	ldrbtcc	r7, [r2], -lr, ror #8
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     130:	5f6b6c63 	svcpl	0x006b6c63
     134:	00637273 	rsbeq	r7, r3, r3, ror r2
     138:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	00646573 	rsbeq	r6, r4, r3, ror r5
     140:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     144:	63775f00 	cmnvs	r7, #0, 30
     148:	6f747273 	svcvs	0x00747273
     14c:	5f73626d 	svcpl	0x0073626d
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     154:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
     158:	00667562 	rsbeq	r7, r6, r2, ror #10
     15c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     160:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
     168:	625f6134 	subsvs	r6, pc, #52, 2
     16c:	63006675 	movwvs	r6, #1653	; 0x675
     170:	3572746e 	ldrbcc	r7, [r2, #-1134]!	; 0xfffffb92
     174:	5f6b6c63 	svcpl	0x006b6c63
    return ALT_E_SUCCESS;
     178:	00746e63 	rsbseq	r6, r4, r3, ror #28
}
     17c:	63616d65 	cmnvs	r1, #6464	; 0x1940
     180:	5f6c7463 	svcpl	0x006c7463
     184:	63616d65 	cmnvs	r1, #6464	; 0x1940
    while (coalesce->size)
     188:	6c657331 	stclvs	3, cr7, [r5], #-196	; 0xffffff3c
     18c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
            break;
     190:	6b6c635f 	blvs	1b18f14 <__end__+0xafcef4>
    *segpa   = thissegpa;
     194:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     198:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     19c:	32665f74 	rsbcc	r5, r6, #116, 30	; 0x1d0
    *segsize = thissegsize;
     1a0:	72665f73 	rsbvc	r5, r6, #460	; 0x1cc
     1a4:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
     1a8:	5f006b6c 	svcpl	0x00006b6c
    return ALT_E_SUCCESS;
     1ac:	6b636f6c 	blvs	18dbf64 <__end__+0x8bff44>
}
     1b0:	75706d00 	ldrbvc	r6, [r0, #-3328]!	; 0xfffff300
     1b4:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     1b8:	61746164 	cmnvs	r4, r4, ror #2
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	5f003233 	svcpl	0x00003233
     1c0:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
     1c4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     1c8:	6b6c635f 	blvs	1b18f4c <__end__+0xafcf2c>
     1cc:	5f72676d 	svcpl	0x0072676d
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     1d4:	6e006769 	cdpvs	7, 0, cr6, cr0, cr9, {3}
     1d8:	6964636f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     1dc:	346c5f76 	strbtcc	r5, [ip], #-3958	; 0xfffff08a
     1e0:	6c637073 	stclvs	0, cr7, [r3], #-460	; 0xfffffe34
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	6c61006b 	stclvs	0, cr0, [r1], #-428	; 0xfffffe54
     1e8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     1ec:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
     1f0:	5f6b636f 	svcpl	0x006b636f
     1f4:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     1f8:	6300656c 	movwvs	r6, #1388	; 0x56c
     1fc:	3472746e 	ldrbtcc	r7, [r2], #-1134	; 0xfffffb92
     200:	5f6b6c63 	svcpl	0x006b6c63
     204:	00746e63 	rsbseq	r6, r4, r3, ror #28
     208:	5f746c61 	svcpl	0x00746c61
     20c:	5f6b6c63 	svcpl	0x006b6c63
     210:	71657266 	cmnvc	r5, r6, ror #4
        clkStep += clk100;
     214:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     218:	5f346c5f 	svcpl	0x00346c5f
     21c:	6e69616d 	powvsez	f6, f1, #5.0
     220:	6b6c6300 	blvs	1b18e28 <__end__+0xafce08>
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     228:	666f5f71 	uqsub16vs	r5, pc, r1	; <UNPREDICTABLE>
     22c:	5f62635f 	svcpl	0x0062635f
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	6f746e69 	svcvs	0x00746e69
     234:	6c5f6373 	mrrcvs	3, 7, r6, pc, cr3	; <UNPREDICTABLE>
     238:	5f5f0073 	svcpl	0x005f0073
     23c:	00686377 	rsbeq	r6, r8, r7, ror r3
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	434f4c43 	movtmi	r4, #64579	; 0xfc43
     244:	414d5f4b 	cmpmi	sp, fp, asr #30
     248:	4547414e 	strbmi	r4, [r7, #-334]	; 0xfffffeb2
     24c:	45505f52 	ldrbmi	r5, [r0, #-3922]	; 0xfffff0ae
     250:	4c505f52 	mrrcmi	15, 5, r5, r0, cr2
     254:	4f435f4c 	svcmi	0x00435f4c
     258:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
     260:	5f00656c 	svcpl	0x0000656c
     264:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; fffff3fd <__shm_end__+0xbffff3fd>
     268:	5f746978 	svcpl	0x00746978
     26c:	73677261 	cmnvc	r7, #268435462	; 0x10000006
     270:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     274:	4b4c435f 	blmi	1310ff8 <__end__+0x2f4fd8>
     278:	5f344c5f 	svcpl	0x00344c5f
     27c:	4100504d 	tstmi	r0, sp, asr #32
     280:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     284:	435f4b4c 	cmpmi	pc, #76, 22	; 0x13000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	49545f53 	ldmdbmi	r4, {r0, r1, r4, r6, r8, r9, sl, fp, ip, lr}^
     28c:	0052454d 	subseq	r4, r2, sp, asr #10
     290:	5f544c41 	svcpl	0x00544c41
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	5f4b4c43 	svcpl	0x004b4c43
     298:	415f5343 	cmpmi	pc, r3, asr #6
     29c:	65730054 	ldrbvs	r0, [r3, #-84]!	; 0xffffffac
     2a0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	73616d5f 	cmnvc	r1, #6080	; 0x17c0
     2a8:	6c61006b 	stclvs	0, cr0, [r1], #-428	; 0xfffffe54
     2ac:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     2b0:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
     2b4:	5f6b636f 	svcpl	0x006b636f
     2b8:	61736964 	cmnvs	r3, r4, ror #18
     2bc:	5f656c62 	svcpl	0x00656c62
     2c0:	706c6568 	rsbvc	r6, ip, r8, ror #10
     2c4:	61007265 	tstvs	r0, r5, ror #4
     2c8:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     2cc:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	6b636f6c 	blvs	18dc088 <__end__+0x8c0068>
     2d4:	616e655f 	cmnvs	lr, pc, asr r5
     2d8:	5f656c62 	svcpl	0x00656c62
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	706c6568 	rsbvc	r6, ip, r8, ror #10
     2e0:	5f007265 	svcpl	0x00007265
     2e4:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
     2e8:	735f6e65 	cmpvc	pc, #1616	; 0x650
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     2f0:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     2f4:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
     2f8:	43006b5f 	movwmi	r6, #2911	; 0xb5f
     2fc:	4b434f4c 	blmi	10d4034 <__end__+0xb8014>
     300:	4e414d5f 	mcrmi	13, 2, r4, cr1, cr15, {2}
     304:	52454741 	subpl	r4, r5, #17039360	; 0x1040000
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
     30c:	00474946 	subeq	r4, r7, r6, asr #18
     310:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     314:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
     318:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
     31c:	41006675 	tstmi	r0, r5, ror r6
     320:	475f544c 	ldrbmi	r5, [pc, -ip, asr #8]
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
     328:	475f5550 			; <UNDEFINED> instruction: 0x475f5550
     32c:	41424f4c 	cmpmi	r2, ip, asr #30
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	4d545f4c 	ldclmi	15, cr5, [r4, #-304]	; 0xfffffed0
     334:	4c410052 	mcrrmi	0, 5, r0, r1, cr2
     338:	50475f54 	subpl	r5, r7, r4, asr pc
     33c:	50535f54 	subspl	r5, r3, r4, asr pc
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	524d545f 	subpl	r5, sp, #1593835520	; 0x5f000000
     344:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
     348:	50475f54 	subpl	r5, r7, r4, asr pc
     34c:	50535f54 	subspl	r5, r3, r4, asr pc
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	524d545f 	subpl	r5, sp, #1593835520	; 0x5f000000
     354:	6c700031 	ldclvs	0, cr0, [r0], #-196	; 0xffffff3c
     358:	68735f6c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     35c:	00746669 	rsbseq	r6, r4, r9, ror #12
     360:	5f544c41 	svcpl	0x00544c41
     364:	5f4b4c43 	svcpl	0x004b4c43
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	4e4b4e55 	mcrmi	14, 2, r4, cr11, cr5, {2}
     36c:	004e574f 	subeq	r5, lr, pc, asr #14
     370:	5f544c41 	svcpl	0x00544c41
     374:	5f4b4c43 	svcpl	0x004b4c43
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	43414d45 	movtmi	r4, #7493	; 0x1d45
     37c:	5054505f 	subspl	r5, r4, pc, asr r0
     380:	6f637600 	svcvs	0x00637600
     384:	65645f31 	strbvs	r5, [r4, #-3889]!	; 0xfffff0cf
     388:	006d6f6e 	rsbeq	r6, sp, lr, ror #30
     38c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
     394:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     398:	6b6c635f 	blvs	1b1911c <__end__+0xafd0fc>
     39c:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     3a0:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	32735f74 	rsbscc	r5, r3, #116, 30	; 0x1d0
     3a8:	73755f66 	cmnvc	r5, #408	; 0x198
     3ac:	00317265 	eorseq	r7, r1, r5, ror #4
     3b0:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     3b4:	6b6c6332 	blvs	1b19084 <__end__+0xafd064>
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
     3bc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     3c0:	4b4c435f 	blmi	1311144 <__end__+0x2f5124>
     3c4:	5f53435f 	svcpl	0x0053435f
     3c8:	43415254 	movtmi	r5, #4692	; 0x1254
     3cc:	755f0045 	ldrbvc	r0, [pc, #-69]	; 38f <__core1_unwind_stub-0xfffc71>
     3d0:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     3d4:	61725f64 	cmnvs	r2, r4, ror #30
     3d8:	6100646e 	tstvs	r0, lr, ror #8
     3dc:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     3e0:	70726761 	rsbsvc	r6, r2, r1, ror #14
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     3e8:	6b6c635f 	blvs	1b1916c <__end__+0xafd14c>
     3ec:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     3f0:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     3f4:	706d5f74 	rsbvc	r5, sp, r4, ror pc
     3f8:	326c5f75 	rsbcc	r5, ip, #468	; 0x1d4
     3fc:	006d6172 	rsbeq	r6, sp, r2, ror r1
     400:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     404:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     408:	61686320 	cmnvs	r8, r0, lsr #6
     40c:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	50475f54 	subpl	r5, r7, r4, asr pc
     414:	50435f54 	subpl	r5, r3, r4, asr pc
     418:	44575f55 	ldrbmi	r5, [r7], #-3925	; 0xfffff0ab
     41c:	54504754 	ldrbpl	r4, [r0], #-1876	; 0xfffff8ac
     420:	524d545f 	subpl	r5, sp, #1593835520	; 0x5f000000
     424:	6b6c6300 	blvs	1b1902c <__end__+0xafd00c>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	70657453 	rsbvc	r7, r5, r3, asr r4
     42c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     430:	63657073 	cmnvs	r5, #115	; 0x73
     434:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
     438:	6f6c5f64 	svcvs	0x006c5f64
     43c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
     444:	725f006f 	subsvc	r0, pc, #111	; 0x6f
     448:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
     44c:	6c675f00 	stclvs	15, cr5, [r7], #-0
     450:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
     454:	706d695f 	rsbvc	r6, sp, pc, asr r9
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	5f657275 	svcpl	0x00657275
     45c:	00727470 	rsbseq	r7, r2, r0, ror r4
     460:	5f544c41 	svcpl	0x00544c41
     464:	5f545047 	svcpl	0x00545047
     468:	54534552 	ldrbpl	r4, [r3], #-1362	; 0xfffffaae
     46c:	5f545241 	svcpl	0x00545241
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     474:	454e4f5f 	strbmi	r4, [lr, #-3935]	; 0xfffff0a1
     478:	544f4853 	strbpl	r4, [pc], #-2131	; 480 <__core1_unwind_stub-0xfffb80>
     47c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     480:	6b6c635f 	blvs	1b19204 <__end__+0xafd1e4>
     484:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     48c:	73715f74 	cmnvc	r1, #116, 30	; 0x1d0
     490:	5f006970 	svcpl	0x00006970
     494:	00736e66 	rsbseq	r6, r3, r6, ror #28
     498:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     49c:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     4a0:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
     4a4:	2f72676d 	svccs	0x0072676d
     4a8:	5f636f73 	svcpl	0x00636f73
     4ac:	2f303161 	svccs	0x00303161
     4b0:	5f746c61 	svcpl	0x00746c61
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	636f6c63 	cmnvs	pc, #25344	; 0x6300
     4b8:	616d5f6b 	cmnvs	sp, fp, ror #30
     4bc:	6567616e 	strbvs	r6, [r7, #-366]!	; 0xfffffe92
     4c0:	00632e72 	rsbeq	r2, r3, r2, ror lr
     4c4:	5f6b6c63 	svcpl	0x006b6c63
     4c8:	71657266 	cmnvc	r5, r6, ror #4
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	5f666f5f 	svcpl	0x00666f5f
     4d0:	63736f65 	cmnvs	r3, #404	; 0x194
     4d4:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
     4d8:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xfffff0ac
     4dc:	53555441 	cmppl	r5, #1090519040	; 0x41000000
     4e0:	444f435f 	strbmi	r4, [pc], #-863	; 4e8 <__core1_unwind_stub-0xfffb18>
     4e4:	6c610045 	stclvs	0, cr0, [r1], #-276	; 0xfffffeec
     4e8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     4ec:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     4f0:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     4f4:	675f7465 	ldrbvs	r7, [pc, -r5, ror #8]
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
     4fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     500:	4100736b 	tstmi	r0, fp, ror #6
     504:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     508:	745f4b4c 	ldrbvc	r4, [pc], #-2892	; 510 <__core1_unwind_stub-0xfffaf0>
     50c:	6b6c6300 	blvs	1b19114 <__end__+0xafd0f4>
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     514:	666f5f71 	uqsub16vs	r5, pc, r1	; <UNPREDICTABLE>
     518:	6832665f 	ldmdavs	r2!, {r0, r1, r2, r3, r4, r6, r9, sl, sp, lr}
     51c:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     520:	735f0065 	cmpvc	pc, #101	; 0x65
     524:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     528:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     52c:	4b4c435f 	blmi	13112b0 <__end__+0x2f5290>
     530:	43534f5f 	cmpmi	r3, #380	; 0x17c
     534:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
     538:	50475f54 	subpl	r5, r7, r4, asr pc
     53c:	50435f54 	subpl	r5, r3, r4, asr pc
     540:	52505f55 	subspl	r5, r0, #340	; 0x154
     544:	54415649 	strbpl	r5, [r1], #-1609	; 0xfffff9b7
     548:	4d545f45 	ldclmi	15, cr5, [r4, #-276]	; 0xfffffeec
     54c:	6c610052 	stclvs	0, cr0, [r1], #-328	; 0xfffffeb8
     550:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     554:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     558:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     55c:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
     560:	306d6970 	rsbcc	r6, sp, r0, ror r9
     564:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     568:	6b6c635f 	blvs	1b192ec <__end__+0xafd2cc>
     56c:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     570:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     574:	70735f74 	rsbsvc	r5, r3, r4, ror pc
     578:	00316d69 	eorseq	r6, r1, r9, ror #26
     57c:	5f544c41 	svcpl	0x00544c41
     580:	5f4b4c43 	svcpl	0x004b4c43
     584:	49524550 	ldmdbmi	r2, {r4, r6, r8, sl, lr}^
     588:	52454850 	subpl	r4, r5, #80, 16	; 0x500000
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	505f4c41 	subspl	r4, pc, r1, asr #24
     590:	63004c4c 	movwvs	r4, #3148	; 0xc4c
     594:	3872746e 	ldmdacc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     598:	5f6b6c63 	svcpl	0x006b6c63
     59c:	00637273 	rsbeq	r7, r3, r3, ror r2
     5a0:	5f746c61 	svcpl	0x00746c61
     5a4:	5f6b6c63 	svcpl	0x006b6c63
     5a8:	71657266 	cmnvc	r5, r6, ror #4
     5ac:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     5b0:	5f346c5f 	svcpl	0x00346c5f
     5b4:	5f737973 	svcpl	0x00737973
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     5bc:	746e6300 	strbtvc	r6, [lr], #-768	; 0xfffffd00
     5c0:	6c633772 	stclvs	7, cr3, [r3], #-456	; 0xfffffe38
     5c4:	6e635f6b 	cdpvs	15, 6, cr5, cr3, cr11, {3}
     5c8:	63760074 	cmnvs	r6, #116	; 0x74
     5cc:	705f306f 	subsvc	r3, pc, pc, rrx
     5d0:	00637273 	rsbeq	r7, r3, r3, ror r2
     5d4:	5f544c41 	svcpl	0x00544c41
     5d8:	5f4b4c43 	svcpl	0x004b4c43
     5dc:	505f5343 	subspl	r5, pc, r3, asr #6
     5e0:	00474244 	subeq	r4, r7, r4, asr #4
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	6f6f635f 	svcvs	0x006f635f
     5e8:	0065696b 	rsbeq	r6, r5, fp, ror #18
     5ec:	6e69616d 	powvsez	f6, f1, #5.0
     5f0:	006c6c70 	rsbeq	r6, ip, r0, ror ip
     5f4:	5f544c41 	svcpl	0x00544c41
     5f8:	5f4b4c43 	svcpl	0x004b4c43
     5fc:	4f495047 	svcmi	0x00495047
     600:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
     604:	6c610073 	stclvs	0, cr0, [r1], #-460	; 0xfffffe34
     608:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     60c:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     614:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
     618:	74615f73 	strbtvc	r5, [r1], #-3955	; 0xfffff08d
     61c:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     620:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     624:	5f00636e 	svcpl	0x0000636e
     628:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
     62c:	5f007465 	svcpl	0x00007465
     630:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
     634:	6e006675 	mcrvs	6, 0, r6, cr0, cr5, {3}
     638:	6c63636f 	stclvs	3, cr6, [r3], #-444	; 0xfffffe44
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	72735f6b 	rsbsvc	r5, r3, #428	; 0x1ac
     640:	4c430063 	mcrrmi	0, 6, r0, r3, cr3
     644:	5f4b434f 	svcpl	0x004b434f
     648:	414e414d 	cmpmi	lr, sp, asr #2
     64c:	5f524547 	svcpl	0x00524547
     650:	4e49414d 	dvfmiem	f4, f1, #5.0
     654:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     658:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
     65c:	00474946 	subeq	r4, r7, r6, asr #18
     660:	64636f6e 	strbtvs	r6, [r3], #-3950	; 0xfffff092
     664:	635f7669 	cmpvs	pc, #110100480	; 0x6900000
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	63746173 	cmnvs	r4, #-1073741796	; 0xc000001c
     66c:	5f006b6c 	svcpl	0x00006b6c
     670:	00733570 	rsbseq	r3, r3, r0, ror r5
     674:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     678:	6b6c6335 	blvs	1b19354 <__end__+0xafd334>
     67c:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	735f5f00 	cmpvc	pc, #0, 30
     684:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
     688:	735f5f00 	cmpvc	pc, #0, 30
     68c:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
     690:	0074696e 	rsbseq	r6, r4, lr, ror #18
     694:	616c665f 	cmnvs	ip, pc, asr r6
     698:	00327367 	eorseq	r7, r2, r7, ror #6
     69c:	5f544c41 	svcpl	0x00544c41
     6a0:	5f545047 	svcpl	0x00545047
     6a4:	54534552 	ldrbpl	r4, [r3], #-1362	; 0xfffffaae
     6a8:	5f545241 	svcpl	0x00545241
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     6b0:	5f00655f 	svcpl	0x0000655f
     6b4:	4b434f4c 	blmi	10d43ec <__end__+0xb83cc>
     6b8:	4345525f 	movtmi	r5, #21087	; 0x525f
     6bc:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
     6c0:	545f4556 	ldrbpl	r4, [pc], #-1366	; 6c8 <__core1_unwind_stub-0xfff938>
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	6b6c6300 	blvs	1b192cc <__end__+0xafd2ac>
     6c8:	00303031 	eorseq	r3, r0, r1, lsr r0
     6cc:	5f746c61 	svcpl	0x00746c61
     6d0:	5f6b6c63 	svcpl	0x006b6c63
     6d4:	71657266 	cmnvc	r5, r6, ror #4
     6d8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     6dc:	616d655f 	cmnvs	sp, pc, asr r5
     6e0:	5f003063 	svcpl	0x00003063
     6e4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     6e8:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
     6ec:	63006675 	movwvs	r6, #1653	; 0x675
     6f0:	3472746e 	ldrbtcc	r7, [r2], #-1134	; 0xfffffb92
     6f4:	5f6b6c63 	svcpl	0x006b6c63
     6f8:	00637273 	rsbeq	r7, r3, r3, ror r2
     6fc:	5f544c41 	svcpl	0x00544c41
     700:	5f4b4c43 	svcpl	0x004b4c43
     704:	00425355 	subeq	r5, r2, r5, asr r3
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	6769425f 			; <UNDEFINED> instruction: 0x6769425f
     70c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     710:	5f746c61 	svcpl	0x00746c61
     714:	5f6b6c63 	svcpl	0x006b6c63
     718:	71657266 	cmnvc	r5, r6, ror #4
     71c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	7665645f 			; <UNDEFINED> instruction: 0x7665645f
     724:	00656369 	rsbeq	r6, r5, r9, ror #6
     728:	63636f6e 	cmnvs	r3, #440	; 0x1b8
     72c:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	6100746e 	tstvs	r0, lr, ror #8
     734:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     73c:	5f716572 	svcpl	0x00716572
     740:	5f746567 	svcpl	0x00746567
     744:	63616d65 	cmnvs	r1, #6464	; 0x1940
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	6c610031 	stclvs	0, cr0, [r1], #-196	; 0xffffff3c
     74c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     754:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     758:	655f7465 	ldrbvs	r7, [pc, #-1125]	; 2fb <__core1_unwind_stub-0xfffd05>
     75c:	3263616d 	rsbcc	r6, r3, #1073741851	; 0x4000001b
     760:	616d5f00 	cmnvs	sp, r0, lsl #30
     764:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
     768:	636f6e00 	cmnvs	pc, #0, 28
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     770:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     774:	6b6c6333 	blvs	1b19448 <__end__+0xafd428>
     778:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
     77c:	635f5f00 	cmpvs	pc, #0, 30
     780:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
     784:	5f007075 	svcpl	0x00007075
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
     78c:	00307469 	eorseq	r7, r0, r9, ror #8
     790:	5f746c61 	svcpl	0x00746c61
     794:	5f6b6c63 	svcpl	0x006b6c63
     798:	71657266 	cmnvc	r5, r6, ror #4
     79c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     7a0:	5f73635f 	svcpl	0x0073635f
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     7a8:	6c610072 	stclvs	0, cr0, [r1], #-456	; 0xfffffe38
     7ac:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     7b0:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     7b4:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     7b8:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
     7bc:	616d5f33 	cmnvs	sp, r3, lsr pc
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	665f6e69 	ldrbvs	r6, [pc], -r9, ror #28
     7c4:	00656572 	rsbeq	r6, r5, r2, ror r5
     7c8:	5f544c41 	svcpl	0x00544c41
     7cc:	5f4b4c43 	svcpl	0x004b4c43
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	535f344c 	cmppl	pc, #76, 8	; 0x4c000000
     7d4:	465f5359 			; <UNDEFINED> instruction: 0x465f5359
     7d8:	00454552 	subeq	r4, r5, r2, asr r5
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	5f544c41 	svcpl	0x00544c41
     7e0:	5f545047 	svcpl	0x00545047
     7e4:	54534552 	ldrbpl	r4, [r3], #-1362	; 0xfffffaae
     7e8:	5f545241 	svcpl	0x00545241
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     7f0:	5245505f 	subpl	r5, r5, #95	; 0x5f
     7f4:	49444f49 	stmdbmi	r4, {r0, r3, r6, r8, r9, sl, fp, lr}^
     7f8:	655f0043 	ldrbvs	r0, [pc, #-67]	; 7bd <__core1_unwind_stub-0xfff843>
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
     800:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     804:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     808:	6f6c2067 	svcvs	0x006c2067
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     810:	6100746e 	tstvs	r0, lr, ror #8
     814:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     818:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	5f716572 	svcpl	0x00716572
     820:	5f746567 	svcpl	0x00746567
     824:	69726570 	ldmdbvs	r2!, {r4, r5, r6, r8, sl, sp, lr}^
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	6c6c705f 	stclvs	0, cr7, [ip], #-380	; 0xfffffe84
     82c:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
     830:	0073626f 	rsbseq	r6, r3, pc, ror #4
     834:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	0065756c 	rsbeq	r7, r5, ip, ror #10
     83c:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!	; 0xfffffe30
     840:	65740030 	ldrbvs	r0, [r4, #-48]!	; 0xffffffd0
     844:	00316d72 	eorseq	r6, r1, r2, ror sp
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	616d6e5f 	cmnvs	sp, pc, asr lr
     84c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     850:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     854:	6b6c635f 	blvs	1b195d8 <__end__+0xafd5b8>
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     85c:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     860:	62635f74 	rsbvs	r5, r3, #116, 30	; 0x1d0
     864:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     868:	5f63736f 	svcpl	0x0063736f
     86c:	645f7368 	ldrbvs	r7, [pc], #-872	; 874 <__core1_unwind_stub-0xfff78c>
     870:	5f327669 	svcpl	0x00327669
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     878:	3163736f 	cmncc	r3, pc, ror #6
     87c:	6f6c635f 	svcvs	0x006c635f
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	5f006b63 	svcpl	0x00006b63
     884:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
     888:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
     88c:	61676e67 	cmnvs	r7, r7, ror #28
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	6c61006d 	stclvs	0, cr0, [r1], #-436	; 0xfffffe4c
     894:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     898:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     89c:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
     8a4:	636d6d64 	cmnvs	sp, #100, 26	; 0x1900
     8a8:	72665f00 	rsbvc	r5, r6, #0, 30
     8ac:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	5f007473 	svcpl	0x00007473
     8b4:	73626f69 	cmnvc	r2, #420	; 0x1a4
     8b8:	6c675f00 	stclvs	15, cr5, [r7], #-0
     8bc:	5f006575 	svcpl	0x00006575
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     8c4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     8c8:	6b6c635f 	blvs	1b1964c <__end__+0xafd62c>
     8cc:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     8d4:	73635f74 	cmnvc	r3, #116, 30	; 0x1d0
     8d8:	6172745f 	cmnvs	r2, pc, asr r4
     8dc:	41006563 	tstmi	r0, r3, ror #10
    return ALT_E_SUCCESS;
     8e0:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
}
     8e4:	4e5f4b4c 	vnmlami.f64	d20, d15, d12
     8e8:	00444e41 	subeq	r4, r4, r1, asr #28
     8ec:	6375706d 	cmnvs	r5, #109	; 0x6d
     8f0:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
     8f4:	4100746e 	tstmi	r0, lr, ror #8
     8f8:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     8fc:	495f4b4c 	ldmdbmi	pc, {r2, r3, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
     900:	534f544e 	movtpl	r5, #62542	; 0xf44e
     904:	53485f43 	movtpl	r5, #36675	; 0x8f43
     908:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
     90c:	6c610032 	stclvs	0, cr0, [r1], #-200	; 0xffffff38
     910:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     914:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     918:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     91c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
     920:	706d5f34 	rsbvc	r5, sp, r4, lsr pc
     924:	4f4c4300 	svcmi	0x004c4300
     928:	4d5f4b43 	vldrmi	d20, [pc, #-268]	; 824 <__core1_unwind_stub-0xfff7dc>
     92c:	47414e41 	strbmi	r4, [r1, -r1, asr #28]
     930:	415f5245 	cmpmi	pc, r5, asr #4
     934:	5245544c 	subpl	r5, r5, #76, 8	; 0x4c000000
     938:	52475f41 	subpl	r5, r7, #260	; 0x104
     93c:	4f435f50 	svcmi	0x00435f50
     940:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
     944:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     948:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     94c:	00745f71 	rsbseq	r5, r4, r1, ror pc
     950:	5f746c61 	svcpl	0x00746c61
     954:	5f6b6c63 	svcpl	0x006b6c63
     958:	71657266 	cmnvc	r5, r6, ror #4
     95c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     960:	616d655f 	cmnvs	sp, pc, asr r5
     964:	74705f63 	ldrbtvc	r5, [r0], #-3939	; 0xfffff09d
     968:	6d650070 	stclvs	0, cr0, [r5, #-448]!	; 0xfffffe40
     96c:	74636361 	strbtvc	r6, [r3], #-865	; 0xfffffc9f
     970:	6d655f6c 	stclvs	15, cr5, [r5, #-432]!	; 0xfffffe50
     974:	73306361 	teqvc	r0, #-2080374783	; 0x84000001
     978:	61006c65 	tstvs	r0, r5, ror #24
     97c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     980:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     984:	5f716572 	svcpl	0x00716572
     988:	5f746567 	svcpl	0x00746567
     98c:	00636d68 	rsbeq	r6, r3, r8, ror #26
     990:	655f685f 	ldrbvs	r6, [pc, #-2143]	; 139 <__core1_unwind_stub-0xfffec7>
     994:	6f6e7272 	svcvs	0x006e7272
     998:	616d6500 	cmnvs	sp, r0, lsl #10
     99c:	6c746363 	ldclvs	3, cr6, [r4], #-396	; 0xfffffe74
     9a0:	616d655f 	cmnvs	sp, pc, asr r5
     9a4:	65733263 	ldrbvs	r3, [r3, #-611]!	; 0xfffffd9d
     9a8:	6c61006c 	stclvs	0, cr0, [r1], #-432	; 0xfffffe50
     9ac:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     9b0:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     9b4:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     9b8:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
     9bc:	70735f34 	rsbsvc	r5, r3, r4, lsr pc
     9c0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     9c4:	6b6c635f 	blvs	1b19748 <__end__+0xafd728>
     9c8:	7478655f 	ldrbtvc	r6, [r8], #-1375	; 0xfffffaa1
     9cc:	6b6c635f 	blvs	1b19750 <__end__+0xafd730>
     9d0:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     9d4:	65735f71 	ldrbvs	r5, [r3, #-3953]!	; 0xfffff08f
     9d8:	70670074 	rsbvc	r0, r7, r4, ror r0
     9dc:	69646f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     9e0:	70675f76 	rsbvc	r5, r7, r6, ror pc
     9e4:	62646f69 	rsbvs	r6, r4, #420	; 0x1a4
     9e8:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     9ec:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
     9f0:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     9f4:	6174735f 	cmnvs	r4, pc, asr r3
     9f8:	5f006574 	svcpl	0x00006574
     9fc:	5f6d745f 	svcpl	0x006d745f
     a00:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
     a04:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
     a08:	755f0077 	ldrbvc	r0, [pc, #-119]	; 999 <__core1_unwind_stub-0xfff667>
     a0c:	00667562 	rsbeq	r7, r6, r2, ror #10
     a10:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     a14:	00727265 	rsbseq	r7, r2, r5, ror #4
     a18:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
     a1c:	5f626d6f 	svcpl	0x00626d6f
     a20:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     a24:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 898 <__core1_unwind_stub-0xfff768>
     a28:	61747362 	cmnvs	r4, r2, ror #6
     a2c:	5f006574 	svcpl	0x00006574
     a30:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     a34:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     a38:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     a3c:	7367616c 	cmnvc	r7, #108, 2
     a40:	6f637600 	svcvs	0x00637600
     a44:	63760030 	cmnvs	r6, #48	; 0x30
     a48:	5f00316f 	svcpl	0x0000316f
     a4c:	5f6c6c70 	svcpl	0x006c6c70
     a50:	00676572 	rsbeq	r6, r7, r2, ror r5
     a54:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
     a58:	00746978 	rsbseq	r6, r4, r8, ror r9
     a5c:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     a60:	6b6c6339 	blvs	1b1974c <__end__+0xafd72c>
     a64:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
     a68:	635f5f00 	cmpvs	pc, #0, 30
     a6c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     a70:	616d5f00 	cmnvs	sp, r0, lsl #30
     a74:	725f6e69 	subsvc	r6, pc, #1680	; 0x690
     a78:	5f006765 	svcpl	0x00006765
     a7c:	5f6d745f 	svcpl	0x006d745f
     a80:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
     a84:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     a88:	6b6c635f 	blvs	1b1980c <__end__+0xafd7ec>
     a8c:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     a90:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     a94:	6d655f74 	stclvs	15, cr5, [r5, #-464]!	; 0xfffffe30
     a98:	31306361 	teqcc	r0, r1, ror #6
     a9c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     aa0:	6f642067 	svcvs	0x00642067
     aa4:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
     aa8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; ab0 <__core1_unwind_stub-0xfff550>
     aac:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
     ab0:	5f007961 	svcpl	0x00007961
     ab4:	61707962 	cmnvs	r0, r2, ror #18
     ab8:	6d5f7373 	ldclvs	3, cr7, [pc, #-460]	; 8f4 <__core1_unwind_stub-0xfff70c>
     abc:	006b7361 	rsbeq	r7, fp, r1, ror #6
     ac0:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
     ac4:	735f0064 	cmpvc	pc, #100	; 0x64
     ac8:	006b6565 	rsbeq	r6, fp, r5, ror #10
     acc:	5f544c41 	svcpl	0x00544c41
     ad0:	5f4b4c43 	svcpl	0x004b4c43
     ad4:	4e49414d 	dvfmiem	f4, f1, #5.0
     ad8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     adc:	70665f00 	rsbvc	r5, r6, r0, lsl #30
     ae0:	745f736f 	ldrbvc	r7, [pc], #-879	; ae8 <__core1_unwind_stub-0xfff518>
     ae4:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
     ae8:	00626863 	rsbeq	r6, r2, r3, ror #16
     aec:	5f544c41 	svcpl	0x00544c41
     af0:	5f4b4c43 	svcpl	0x004b4c43
     af4:	535f344c 	cmppl	pc, #76, 8	; 0x4c000000
     af8:	6d5f0050 	ldclvs	0, cr0, [pc, #-320]	; 9c0 <__core1_unwind_stub-0xfff640>
     afc:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
     b00:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
     b04:	00657461 	rsbeq	r7, r5, r1, ror #8
     b08:	64636f6e 	strbtvs	r6, [r3], #-3950	; 0xfffff092
     b0c:	6c5f7669 	mrrcvs	6, 6, r7, pc, cr9	; <UNPREDICTABLE>
     b10:	69616d34 	stmdbvs	r1!, {r2, r4, r5, r8, sl, fp, sp, lr}^
     b14:	6b6c636e 	blvs	1b198d4 <__end__+0xafd8b4>
     b18:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     b1c:	6b6c635f 	blvs	1b198a0 <__end__+0xafd880>
     b20:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     b24:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     b28:	706d5f74 	rsbvc	r5, sp, r4, ror pc
     b2c:	6e630075 	mcrvs	0, 3, r0, cr3, cr5, {3}
     b30:	63377274 	teqvs	r7, #116, 4	; 0x40000007
     b34:	735f6b6c 	cmpvc	pc, #108, 22	; 0x1b000
     b38:	6c006372 	stcvs	3, cr6, [r0], {114}	; 0x72
     b3c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     b40:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     b44:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     b48:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     b4c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     b50:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
     b54:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     b58:	4d485f4b 	stclmi	15, cr5, [r8, #-300]	; 0xfffffed4
     b5c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     b60:	45525f4c 	ldrbmi	r5, [r2, #-3916]	; 0xfffff0b4
     b64:	645f0046 	ldrbvs	r0, [pc], #-70	; b6c <__core1_unwind_stub-0xfff494>
     b68:	685f6f73 	ldmdavs	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     b6c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     b70:	6e630065 	cdpvs	0, 6, cr0, cr3, cr5, {3}
     b74:	63367274 	teqvs	r6, #116, 4	; 0x40000007
     b78:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
     b7c:	5f00746e 	svcpl	0x0000746e
     b80:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     b84:	5f003834 	svcpl	0x00003834
     b88:	6f647473 	svcvs	0x00647473
     b8c:	61007475 	tstvs	r0, r5, ror r4
     b90:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     b94:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
     b98:	6b636f6c 	blvs	18dc950 <__end__+0x8c0930>
     b9c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     ba0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     ba4:	61625f00 	cmnvs	r2, r0, lsl #30
     ba8:	5f006573 	svcpl	0x00006573
     bac:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
     bb0:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
     bb4:	00747361 	rsbseq	r7, r4, r1, ror #6
     bb8:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
     bbc:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
     bc0:	6174735f 	cmnvs	r4, pc, asr r3
     bc4:	5f006574 	svcpl	0x00006574
     bc8:	636f6c66 	cmnvs	pc, #26112	; 0x6600
     bcc:	00745f6b 	rsbseq	r5, r4, fp, ror #30
     bd0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; b1c <__core1_unwind_stub-0xfff4e4>
     bd4:	6f6d2f65 	svcvs	0x006d2f65
     bd8:	6c6c6572 	cfstr64vs	mvdx6, [ip], #-456	; 0xfffffe38
     bdc:	6e612f69 	cdpvs	15, 6, cr2, cr1, cr9, {3}
     be0:	612f6f74 			; <UNDEFINED> instruction: 0x612f6f74
     be4:	695f3031 	ldmdbvs	pc, {r0, r4, r5, ip, sp}^	; <UNPREDICTABLE>
     be8:	612f7363 			; <UNDEFINED> instruction: 0x612f7363
     bec:	665f3031 			; <UNDEFINED> instruction: 0x665f3031
     bf0:	3034636d 	eorscc	r6, r4, sp, ror #6
     bf4:	6f732f30 	svcvs	0x00732f30
     bf8:	61777466 	cmnvs	r7, r6, ror #8
     bfc:	682f6572 	stmdavs	pc!, {r1, r4, r5, r6, r8, sl, sp, lr}	; <UNPREDICTABLE>
     c00:	462d7370 			; <UNDEFINED> instruction: 0x462d7370
     c04:	3034636d 	eorscc	r6, r4, sp, ror #6
     c08:	77732d30 			; <UNDEFINED> instruction: 0x77732d30
     c0c:	3130762d 	teqcc	r0, sp, lsr #12
     c10:	5f5f002f 	svcpl	0x005f002f
     c14:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
     c18:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
     c1c:	00343671 	eorseq	r3, r4, r1, ror r6
     c20:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
     c24:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     c28:	4100745f 	tstmi	r0, pc, asr r4
     c2c:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     c30:	515f4b4c 	cmppl	pc, ip, asr #22
     c34:	00495053 	subeq	r5, r9, r3, asr r0
     c38:	5f544c41 	svcpl	0x00544c41
     c3c:	5f545047 	svcpl	0x00545047
     c40:	3143534f 	cmpcc	r3, pc, asr #6
     c44:	524d545f 	subpl	r5, sp, #1593835520	; 0x5f000000
     c48:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
     c4c:	50475f54 	subpl	r5, r7, r4, asr pc
     c50:	534f5f54 	movtpl	r5, #65364	; 0xff54
     c54:	545f3143 	ldrbpl	r3, [pc], #-323	; c5c <__core1_unwind_stub-0xfff3a4>
     c58:	0031524d 	eorseq	r5, r1, sp, asr #4
     c5c:	5f746c61 	svcpl	0x00746c61
     c60:	5f6b6c63 	svcpl	0x006b6c63
     c64:	655f7369 	ldrbvs	r7, [pc, #-873]	; 903 <__core1_unwind_stub-0xfff6fd>
     c68:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     c6c:	685f6465 	ldmdavs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
     c70:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
     c74:	725f0072 	subsvc	r0, pc, #114	; 0x72
     c78:	73003834 	movwvc	r3, #2100	; 0x834
     c7c:	725f6372 	subsvc	r6, pc, #-939524095	; 0xc8000001
     c80:	73696765 	cmnvc	r9, #26476544	; 0x1940000
     c84:	00726574 	rsbseq	r6, r2, r4, ror r5
     c88:	746e6977 	strbtvc	r6, [lr], #-2423	; 0xfffff689
     c8c:	4100745f 	tstmi	r0, pc, asr r4
     c90:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     c94:	4d5f4b4c 	vldrmi	d20, [pc, #-304]	; b6c <__core1_unwind_stub-0xfff494>
     c98:	61005550 	tstvs	r0, r0, asr r5
     c9c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     ca0:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     ca4:	5f716572 	svcpl	0x00716572
     ca8:	5f746567 	svcpl	0x00746567
     cac:	5f663273 	svcpl	0x00663273
     cb0:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     cb4:	616d0030 	cmnvs	sp, r0, lsr r0
     cb8:	735f6e69 	cmpvc	pc, #1680	; 0x690
     cbc:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
     cc0:	75706d00 	ldrbvc	r6, [r0, #-3328]!	; 0xfffff300
     cc4:	5f6b6c63 	svcpl	0x006b6c63
     cc8:	00637273 	rsbeq	r7, r3, r3, ror r2
     ccc:	5f544c41 	svcpl	0x00544c41
     cd0:	5f4b4c43 	svcpl	0x004b4c43
     cd4:	5f533246 	svcpl	0x00533246
     cd8:	45455246 	strbmi	r5, [r5, #-582]	; 0xfffffdba
     cdc:	4b4c435f 	blmi	1311a60 <__end__+0x2f5a40>
     ce0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     ce4:	6b6c635f 	blvs	1b19a68 <__end__+0xafda48>
     ce8:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     cec:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     cf0:	616d5f74 	smcvs	54772	; 0xd5f4
     cf4:	705f6e69 	subsvc	r6, pc, r9, ror #28
     cf8:	61006c6c 	tstvs	r0, ip, ror #24
     cfc:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     d00:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     d04:	5f716572 	svcpl	0x00716572
     d08:	5f746567 	svcpl	0x00746567
     d0c:	3163736f 	cmncc	r3, pc, ror #6
     d10:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     d14:	4b4c435f 	blmi	1311a98 <__end__+0x2f5a78>
     d18:	414d455f 	cmpmi	sp, pc, asr r5
     d1c:	41003043 	tstmi	r0, r3, asr #32
     d20:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     d24:	455f4b4c 	ldrbmi	r4, [pc, #-2892]	; 1e0 <__core1_unwind_stub-0xfffe20>
     d28:	3143414d 	cmpcc	r3, sp, asr #2
     d2c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     d30:	4b4c435f 	blmi	1311ab4 <__end__+0x2f5a94>
     d34:	414d455f 	cmpmi	sp, pc, asr r5
     d38:	61003243 	tstvs	r0, r3, asr #4
     d3c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     d40:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     d44:	5f716572 	svcpl	0x00716572
     d48:	5f746567 	svcpl	0x00746567
     d4c:	705f7363 	subsvc	r7, pc, r3, ror #6
     d50:	00676264 	rsbeq	r6, r7, r4, ror #4
     d54:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
     d58:	735f6e65 	cmpvc	pc, #1616	; 0x650
     d5c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     d60:	6f687300 	svcvs	0x00687300
     d64:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     d68:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
     d6c:	6964636f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     d70:	73635f76 	cmnvc	r3, #472	; 0x1d8
     d74:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
     d78:	6b6c6365 	blvs	1b19b14 <__end__+0xafdaf4>
     d7c:	746e6300 	strbtvc	r6, [lr], #-768	; 0xfffffd00
     d80:	6c633372 	stclvs	3, cr3, [r3], #-456	; 0xfffffe38
     d84:	72735f6b 	rsbsvc	r5, r3, #428	; 0x1ac
     d88:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
     d8c:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
     d90:	6100745f 	tstvs	r0, pc, asr r4
     d94:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     d98:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     d9c:	5f716572 	svcpl	0x00716572
     da0:	5f746567 	svcpl	0x00746567
     da4:	5f75706d 	svcpl	0x0075706d
     da8:	69726570 	ldmdbvs	r2!, {r4, r5, r6, r8, sl, sp, lr}^
     dac:	63006870 	movwvs	r6, #2160	; 0x870
     db0:	3272746e 	rsbscc	r7, r2, #1845493760	; 0x6e000000
     db4:	5f6b6c63 	svcpl	0x006b6c63
     db8:	00746e63 	rsbseq	r6, r4, r3, ror #28
     dbc:	6f627573 	svcvs	0x00627573
     dc0:	72617470 	rsbvc	r7, r1, #112, 8	; 0x70000000
     dc4:	4c410067 	mcrrmi	0, 6, r0, r1, cr7
     dc8:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     dcc:	44535f4b 	ldrbmi	r5, [r3], #-3915	; 0xfffff0b5
     dd0:	00434d4d 	subeq	r4, r3, sp, asr #26
     dd4:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
     dd8:	73657079 	cmnvc	r5, #121	; 0x79
     ddc:	72657000 	rsbvc	r7, r5, #0
     de0:	006c6c70 	rsbeq	r6, ip, r0, ror ip
     de4:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     de8:	6165795f 	cmnvs	r5, pc, asr r9
     dec:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
     df0:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     df4:	6c5f004b 	mrrcvs	0, 4, r0, pc, cr11	; <UNPREDICTABLE>
     df8:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
     dfc:	5f00657a 	svcpl	0x0000657a
     e00:	00636e69 	rsbeq	r6, r3, r9, ror #28
     e04:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     e08:	735f5f00 	cmpvc	pc, #0, 30
     e0c:	00667562 	rsbeq	r7, r6, r2, ror #10
     e10:	5f73695f 	svcpl	0x0073695f
     e14:	00617863 	rsbeq	r7, r1, r3, ror #16
     e18:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     e1c:	43006674 	movwmi	r6, #1652	; 0x674
     e20:	4b434f4c 	blmi	10d4b58 <__end__+0xb8b38>
     e24:	554f535f 	strbpl	r5, [pc, #-863]	; acd <__core1_unwind_stub-0xfff533>
     e28:	5f454352 	svcpl	0x00454352
     e2c:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     e30:	63004749 	movwvs	r4, #1865	; 0x749
     e34:	3172746e 	cmncc	r2, lr, ror #8
     e38:	6b6c6335 	blvs	1b19b14 <__end__+0xafdaf4>
     e3c:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
     e40:	6f6c5f00 	svcvs	0x006c5f00
     e44:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     e48:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; ffffff50 <__shm_end__+0xbfffff50>
     e4c:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
     e50:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     e54:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
     e58:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     e5c:	4b4c435f 	blmi	1311be0 <__end__+0x2f5bc0>
     e60:	4632535f 			; <UNDEFINED> instruction: 0x4632535f
     e64:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0xfffffaa1
     e68:	6e003052 	mcrvs	0, 0, r3, cr0, cr2, {2}
     e6c:	6964636f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     e70:	73635f76 	cmnvc	r3, #472	; 0x1d8
     e74:	67626470 			; <UNDEFINED> instruction: 0x67626470
     e78:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     e7c:	5f544c41 	svcpl	0x00544c41
     e80:	5f4b4c43 	svcpl	0x004b4c43
     e84:	4d5f344c 	cfldrdmi	mvd3, [pc, #-304]	; d5c <__core1_unwind_stub-0xfff2a4>
     e88:	004e4941 	subeq	r4, lr, r1, asr #18
     e8c:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     e90:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     e94:	4b4c435f 	blmi	1311c18 <__end__+0x2f5bf8>
     e98:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     e9c:	6873004d 	ldmdavs	r3!, {r0, r2, r3, r6}^
     ea0:	2074726f 	rsbscs	r7, r4, pc, ror #4
     ea4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     ea8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     eac:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     eb0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; eb8 <__core1_unwind_stub-0xfff148>
     eb4:	6f685f6d 	svcvs	0x00685f6d
     eb8:	63007275 	movwvs	r7, #629	; 0x275
     ebc:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
     ec0:	63736f74 	cmnvs	r3, #116, 30	; 0x1d0
     ec4:	5f73685f 	svcpl	0x0073685f
     ec8:	32766964 	rsbscc	r6, r6, #100, 18	; 0x190000
     ecc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     ed0:	5450475f 	ldrbpl	r4, [r0], #-1887	; 0xfffff8a1
     ed4:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     ed8:	655f5245 	ldrbvs	r5, [pc, #-581]	; c9b <__core1_unwind_stub-0xfff365>
     edc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     ee0:	6b6c635f 	blvs	1b19c64 <__end__+0xafdc44>
     ee4:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     ee8:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     eec:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
     ef0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     ef4:	73695f6b 	cmnvc	r9, #428	; 0x1ac
     ef8:	616e655f 	cmnvs	lr, pc, asr r5
     efc:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
     f00:	626d5f00 	rsbvs	r5, sp, #0, 30
     f04:	6f747273 	svcvs	0x00747273
     f08:	5f736377 	svcpl	0x00736377
     f0c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     f10:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     f14:	5f00656d 	svcpl	0x0000656d
     f18:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     f1c:	6d5f656c 	cfldr64vs	mvdx6, [pc, #-432]	; d74 <__core1_unwind_stub-0xfff28c>
     f20:	006b7361 	rsbeq	r7, fp, r1, ror #6
     f24:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     f28:	6b6c6339 	blvs	1b19c14 <__end__+0xafdbf4>
     f2c:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
     f30:	6f637600 	svcvs	0x00637600
     f34:	756e5f31 	strbvc	r5, [lr, #-3889]!	; 0xfffff0cf
     f38:	0072656d 	rsbseq	r6, r2, sp, ror #10
     f3c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     f40:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     f44:	73677261 	cmnvc	r7, #268435462	; 0x10000006
     f48:	63727300 	cmnvs	r2, #0, 6
     f4c:	5f6e695f 	svcpl	0x006e695f
     f50:	6e69616d 	powvsez	f6, f1, #5.0
     f54:	745f5f00 	ldrbvc	r5, [pc], #-3840	; f5c <__core1_unwind_stub-0xfff0a4>
     f58:	73695f6d 	cmnvc	r9, #436	; 0x1b4
     f5c:	00747364 	rsbseq	r7, r4, r4, ror #6
     f60:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     f64:	6b6c6338 	blvs	1b19c4c <__end__+0xafdc2c>
     f68:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
     f6c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     f70:	4b4c435f 	blmi	1311cf4 <__end__+0x2f5cd4>
     f74:	5f334c5f 	svcpl	0x00334c5f
     f78:	4e49414d 	dvfmiem	f4, f1, #5.0
     f7c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     f80:	4b4c435f 	blmi	1311d04 <__end__+0x2f5ce4>
     f84:	4632535f 			; <UNDEFINED> instruction: 0x4632535f
     f88:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0xfffffaa1
     f8c:	5f003152 	svcpl	0x00003152
     f90:	5f6d745f 	svcpl	0x006d745f
     f94:	006e696d 	rsbeq	r6, lr, sp, ror #18
     f98:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     f9c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     fa0:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     fa4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     fa8:	4b4c435f 	blmi	1311d2c <__end__+0x2f5d0c>
     fac:	55504d5f 	ldrbpl	r4, [r0, #-3423]	; 0xfffff2a1
     fb0:	5245505f 	subpl	r5, r5, #95	; 0x5f
     fb4:	00485049 	subeq	r5, r8, r9, asr #32
     fb8:	5f746c61 	svcpl	0x00746c61
     fbc:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
     fc0:	61625f30 	cmnvs	r2, r0, lsr pc
     fc4:	61726475 	cmnvs	r2, r5, ror r4
     fc8:	675f6574 			; <UNDEFINED> instruction: 0x675f6574
     fcc:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
     fd0:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
     fd4:	00657461 	rsbeq	r7, r5, r1, ror #8
     fd8:	5f746c61 	svcpl	0x00746c61
     fdc:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
     fe0:	69645f30 	stmdbvs	r4!, {r4, r5, r8, r9, sl, fp, ip, lr}^
     fe4:	6f736976 	svcvs	0x00736976
     fe8:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xfffff08e
     fec:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
     ff0:	36315f74 	shsub16cc	r5, r1, r4
     ff4:	5f303535 	svcpl	0x00303535
     ff8:	6f666966 	svcvs	0x00666966
     ffc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1000:	745f7261 	ldrbvc	r7, [pc], #-609	; 1008 <__core1_unwind_stub-0xffeff8>
    1004:	4c410078 	mcrrmi	0, 7, r0, r1, cr8
    1008:	36315f54 	shsaxcc	r5, r1, r4
    100c:	5f303535 	svcpl	0x00303535
    1010:	4f464946 	svcmi	0x00464946
    1014:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1018:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    101c:	5f58545f 	svcpl	0x0058545f
    1020:	54504d45 	ldrbpl	r4, [r0], #-3397	; 0xfffff2bb
    1024:	6c610059 	stclvs	0, cr0, [r1], #-356	; 0xfffffe9c
    1028:	36315f74 	shsub16cc	r5, r1, r4
    102c:	5f303535 	svcpl	0x00303535
    1030:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
    1034:	6b636162 	blvs	18d95c4 <__end__+0x8bd5a4>
    1038:	616e655f 	cmnvs	lr, pc, asr r5
    103c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1040:	5f544c41 	svcpl	0x00544c41
    1044:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1048:	41425f30 	cmpmi	r2, r0, lsr pc
    104c:	41524455 	cmpmi	r2, r5, asr r4
    1050:	315f4554 	cmpcc	pc, r4, asr r5	; <UNPREDICTABLE>
    1054:	30303434 	eorscc	r3, r0, r4, lsr r4
    1058:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    105c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1060:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    1064:	5f6f6669 	svcpl	0x006f6669
    1068:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    106c:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    1070:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1074:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1078:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    107c:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1080:	645f746e 	ldrbvs	r7, [pc], #-1134	; 1088 <__core1_unwind_stub-0xffef78>
    1084:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1088:	745f656c 	ldrbvc	r6, [pc], #-1388	; 1090 <__core1_unwind_stub-0xffef70>
    108c:	4c410078 	mcrrmi	0, 7, r0, r1, cr8
    1090:	36315f54 	shsaxcc	r5, r1, r4
    1094:	5f303535 	svcpl	0x00303535
    1098:	4f464946 	svcmi	0x00464946
    109c:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    10a0:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    10a4:	5f58545f 	svcpl	0x0058545f
    10a8:	4f4d4c41 	svcmi	0x004d4c41
    10ac:	455f5453 	ldrbmi	r5, [pc, #-1107]	; c61 <__core1_unwind_stub-0xfff39f>
    10b0:	5954504d 	ldmdbpl	r4, {r0, r2, r3, r6, ip, lr}^
    10b4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    10b8:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    10bc:	425f3035 	subsmi	r3, pc, #53	; 0x35
    10c0:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    10c4:	5f455441 	svcpl	0x00455441
    10c8:	30303633 	eorscc	r3, r0, r3, lsr r6
    10cc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    10d0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    10d4:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    10d8:	5f6f6669 	svcpl	0x006f6669
    10dc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    10e0:	61735f65 	cmnvs	r3, r5, ror #30
    10e4:	61006566 	tstvs	r0, r6, ror #10
    10e8:	315f746c 	cmpcc	pc, ip, ror #8
    10ec:	30353536 	eorscc	r3, r5, r6, lsr r5
    10f0:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    10f4:	656c5f6f 	strbvs	r5, [ip, #-3951]!	; 0xfffff091
    10f8:	5f6c6576 	svcpl	0x006c6576
    10fc:	5f746567 	svcpl	0x00746567
    1100:	61007872 	tstvs	r0, r2, ror r8
    1104:	00726464 	rsbseq	r6, r2, r4, ror #8
    1108:	5f544c41 	svcpl	0x00544c41
    110c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1110:	54535f30 	ldrbpl	r5, [r3], #-3888	; 0xfffff0d0
    1114:	4942504f 	stmdbmi	r2, {r0, r1, r2, r3, r6, ip, lr}^
    1118:	315f5354 	cmpcc	pc, r4, asr r3	; <UNPREDICTABLE>
    111c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1120:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1124:	535f3035 	cmppl	pc, #53	; 0x35
    1128:	42504f54 	subsmi	r4, r0, #84, 30	; 0x150
    112c:	5f535449 	svcpl	0x00535449
    1130:	4c410032 	mcrrmi	0, 3, r0, r1, cr2
    1134:	36315f54 	shsaxcc	r5, r1, r4
    1138:	5f303535 	svcpl	0x00303535
    113c:	4f464946 	svcmi	0x00464946
    1140:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1144:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    1148:	5f58545f 	svcpl	0x0058545f
    114c:	52415551 	subpl	r5, r1, #339738624	; 0x14400000
    1150:	5f524554 	svcpl	0x00524554
    1154:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
    1158:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    115c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1160:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    1164:	5f6f6669 	svcpl	0x006f6669
    1168:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    116c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1170:	0078725f 	rsbseq	r7, r8, pc, asr r2
    1174:	5f746c61 	svcpl	0x00746c61
    1178:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    117c:	72775f30 	rsbsvc	r5, r7, #48, 30	; 0xc0
    1180:	00657469 	rsbeq	r7, r5, r9, ror #8
    1184:	5f746c61 	svcpl	0x00746c61
    1188:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    118c:	6c665f30 	stclvs	15, cr5, [r6], #-192	; 0xffffff40
    1190:	6f63776f 	svcvs	0x0063776f
    1194:	6f72746e 	svcvs	0x0072746e
    1198:	69645f6c 	stmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    119c:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    11a0:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    11a4:	36315f74 	shsub16cc	r5, r1, r4
    11a8:	5f303535 	svcpl	0x00303535
    11ac:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    11b0:	6174735f 	cmnvs	r4, pc, asr r3
    11b4:	5f737574 	svcpl	0x00737574
    11b8:	00746567 	rsbseq	r6, r4, r7, ror #10
    11bc:	5f746c61 	svcpl	0x00746c61
    11c0:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    11c4:	6f6d5f30 	svcvs	0x006d5f30
    11c8:	5f6d6564 	svcpl	0x006d6564
    11cc:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    11d0:	645f656c 	ldrbvs	r6, [pc], #-1388	; 11d8 <__core1_unwind_stub-0xffee28>
    11d4:	61007274 	tstvs	r0, r4, ror r2
    11d8:	725f746c 	subsvc	r7, pc, #108, 8	; 0x6c000000
    11dc:	5f646165 	svcpl	0x00646165
    11e0:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    11e4:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    11e8:	00726570 	rsbseq	r6, r2, r0, ror r5
    11ec:	5f746c61 	svcpl	0x00746c61
    11f0:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    11f4:	6e695f30 	mcrvs	15, 3, r5, cr9, cr0, {1}
    11f8:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
    11fc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1200:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1204:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1208:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    120c:	495f3035 	ldmdbmi	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1210:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    1214:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    1218:	4f4d5f53 	svcmi	0x004d5f53
    121c:	004d4544 	subeq	r4, sp, r4, asr #10
    1220:	5f746c61 	svcpl	0x00746c61
    1224:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1228:	6f6d5f30 	svcvs	0x006d5f30
    122c:	5f6d6564 	svcpl	0x006d6564
    1230:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    1234:	6f5f656c 	svcvs	0x005f656c
    1238:	00317475 	eorseq	r7, r1, r5, ror r4
    123c:	5f746c61 	svcpl	0x00746c61
    1240:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1244:	6f6d5f30 	svcvs	0x006d5f30
    1248:	5f6d6564 	svcpl	0x006d6564
    124c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    1250:	6f5f656c 	svcvs	0x005f656c
    1254:	00327475 	eorseq	r7, r2, r5, ror r4
    1258:	5f746c61 	svcpl	0x00746c61
    125c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1260:	65695f30 	strbvs	r5, [r9, #-3888]!	; 0xfffff0d0
    1264:	616d5f72 	smcvs	54770	; 0xd5f2
    1268:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
    126c:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1270:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    1274:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    1278:	36315f54 	shsaxcc	r5, r1, r4
    127c:	5f303535 	svcpl	0x00303535
    1280:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    1284:	53544942 	cmppl	r4, #1081344	; 0x108000
    1288:	6100655f 	tstvs	r0, pc, asr r5
    128c:	315f746c 	cmpcc	pc, ip, ror #8
    1290:	30353536 	eorscc	r3, r5, r6, lsr r5
    1294:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1298:	616e655f 	cmnvs	lr, pc, asr r5
    129c:	5f656c62 	svcpl	0x00656c62
    12a0:	61007874 	tstvs	r0, r4, ror r8
    12a4:	315f746c 	cmpcc	pc, ip, ror #8
    12a8:	30353536 	eorscc	r3, r5, r6, lsr r5
    12ac:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    12b0:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    12b4:	36315f74 	shsub16cc	r5, r1, r4
    12b8:	5f303535 	svcpl	0x00303535
    12bc:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    12c0:	6572625f 	ldrbvs	r6, [r2, #-607]!	; 0xfffffda1
    12c4:	645f6b61 	ldrbvs	r6, [pc], #-2913	; 12cc <__core1_unwind_stub-0xffed34>
    12c8:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    12cc:	6100656c 	tstvs	r0, ip, ror #10
    12d0:	315f746c 	cmpcc	pc, ip, ror #8
    12d4:	30353536 	eorscc	r3, r5, r6, lsr r5
    12d8:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    12dc:	69735f6f 	ldmdbvs	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    12e0:	675f657a 			; <UNDEFINED> instruction: 0x675f657a
    12e4:	745f7465 	ldrbvc	r7, [pc], #-1125	; 12ec <__core1_unwind_stub-0xffed14>
    12e8:	4c410078 	mcrrmi	0, 7, r0, r1, cr8
    12ec:	36315f54 	shsaxcc	r5, r1, r4
    12f0:	5f303535 	svcpl	0x00303535
    12f4:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    12f8:	53544942 	cmppl	r4, #1081344	; 0x108000
    12fc:	4100745f 	tstmi	r0, pc, asr r4
    1300:	315f544c 	cmpcc	pc, ip, asr #8
    1304:	30353536 	eorscc	r3, r5, r6, lsr r5
    1308:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    130c:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1310:	30355f45 	eorscc	r5, r5, r5, asr #30
    1314:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1318:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    131c:	465f3035 			; <UNDEFINED> instruction: 0x465f3035
    1320:	5f4f4649 	svcpl	0x004f4649
    1324:	47495254 	smlsldmi	r5, r9, r4, r2
    1328:	5f524547 	svcpl	0x00524547
    132c:	485f5854 	ldmdami	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
    1330:	5f464c41 	svcpl	0x00464c41
    1334:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
    1338:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    133c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1340:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1344:	6d5f7265 	lfmvs	f7, 2, [pc, #-404]	; 11b8 <__core1_unwind_stub-0xffee48>
    1348:	5f6b7361 	svcpl	0x006b7361
    134c:	5f726c63 	svcpl	0x00726c63
    1350:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1354:	41007265 	tstmi	r0, r5, ror #4
    1358:	315f544c 	cmpcc	pc, ip, asr #8
    135c:	30353536 	eorscc	r3, r5, r6, lsr r5
    1360:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
    1364:	52545f4f 	subspl	r5, r4, #316	; 0x13c
    1368:	45474749 	strbmi	r4, [r7, #-1865]	; 0xfffff8b7
    136c:	58525f52 	ldmdapl	r2, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1370:	4155515f 	cmpmi	r5, pc, asr r1
    1374:	52455452 	subpl	r5, r5, #1375731712	; 0x52000000
    1378:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
    137c:	6c61004c 	stclvs	0, cr0, [r1], #-304	; 0xfffffed0
    1380:	36315f74 	shsub16cc	r5, r1, r4
    1384:	5f303535 	svcpl	0x00303535
    1388:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    138c:	69645f6d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1390:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1394:	756f5f65 	strbvc	r5, [pc, #-3941]!	; 437 <__core1_unwind_stub-0xfffbc9>
    1398:	61003174 	tstvs	r0, r4, ror r1
    139c:	315f746c 	cmpcc	pc, ip, ror #8
    13a0:	30353536 	eorscc	r3, r5, r6, lsr r5
    13a4:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 13ac <__core1_unwind_stub-0xffec54>
    13a8:	645f6d65 	ldrbvs	r6, [pc], #-3429	; 13b0 <__core1_unwind_stub-0xffec50>
    13ac:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    13b0:	6f5f656c 	svcvs	0x005f656c
    13b4:	00327475 	eorseq	r7, r2, r5, ror r4
    13b8:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    13bc:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    13c0:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
    13c4:	2f72676d 	svccs	0x0072676d
    13c8:	5f746c61 	svcpl	0x00746c61
    13cc:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    13d0:	61755f30 	cmnvs	r5, r0, lsr pc
    13d4:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
    13d8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    13dc:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    13e0:	445f3035 	ldrbmi	r3, [pc], #-53	; 13e8 <__core1_unwind_stub-0xffec18>
    13e4:	43495645 	movtmi	r5, #38469	; 0x9645
    13e8:	4c415f45 	mcrrmi	15, 4, r5, r1, cr5
    13ec:	41524554 	cmpmi	r2, r4, asr r5
    13f0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    13f4:	555f3035 	ldrbpl	r3, [pc, #-53]	; 13c7 <__core1_unwind_stub-0xffec39>
    13f8:	00545241 	subseq	r5, r4, r1, asr #4
    13fc:	5f544c41 	svcpl	0x00544c41
    1400:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1404:	41445f30 	cmpmi	r4, r0, lsr pc
    1408:	49424154 	stmdbmi	r2, {r2, r4, r6, r8, lr}^
    140c:	355f5354 	ldrbcc	r5, [pc, #-852]	; 10c0 <__core1_unwind_stub-0xffef40>
    1410:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1414:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1418:	445f3035 	ldrbmi	r3, [pc], #-53	; 1420 <__core1_unwind_stub-0xffebe0>
    141c:	42415441 	submi	r5, r1, #1090519040	; 0x41000000
    1420:	5f535449 	svcpl	0x00535449
    1424:	4c410036 	mcrrmi	0, 3, r0, r1, cr6
    1428:	36315f54 	shsaxcc	r5, r1, r4
    142c:	5f303535 	svcpl	0x00303535
    1430:	41544144 	cmpmi	r4, r4, asr #2
    1434:	53544942 	cmppl	r4, #1081344	; 0x108000
    1438:	4100375f 	tstmi	r0, pc, asr r7
    143c:	315f544c 	cmpcc	pc, ip, asr #8
    1440:	30353536 	eorscc	r3, r5, r6, lsr r5
    1444:	5441445f 	strbpl	r4, [r1], #-1119	; 0xfffffba1
    1448:	54494241 	strbpl	r4, [r9], #-577	; 0xfffffdbf
    144c:	00385f53 	eorseq	r5, r8, r3, asr pc
    1450:	5f544c41 	svcpl	0x00544c41
    1454:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1458:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    145c:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 1464 <__core1_unwind_stub-0xffeb9c>
    1460:	47474952 	smlsldmi	r4, r7, r2, r9
    1464:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
    1468:	00745f58 	rsbseq	r5, r4, r8, asr pc
    146c:	5f746c61 	svcpl	0x00746c61
    1470:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1474:	6c665f30 	stclvs	15, cr5, [r6], #-192	; 0xffffff40
    1478:	6f63776f 	svcvs	0x0063776f
    147c:	6f72746e 	svcvs	0x0072746e
    1480:	6e655f6c 	cdpvs	15, 6, cr5, cr5, cr12, {3}
    1484:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1488:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    148c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1490:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    1494:	5f6f6669 	svcpl	0x006f6669
    1498:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0xfffffa94
    149c:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
    14a0:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    14a4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    14a8:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    14ac:	6d5f3035 	ldclvs	0, cr3, [pc, #-212]	; 13e0 <__core1_unwind_stub-0xffec20>
    14b0:	6d65646f 	cfstrdvs	mvd6, [r5, #-444]!	; 0xfffffe44
    14b4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    14b8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    14bc:	7374725f 	cmnvc	r4, #-268435451	; 0xf0000005
    14c0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    14c4:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    14c8:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    14cc:	5f6f6669 	svcpl	0x006f6669
    14d0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    14d4:	4100656c 	tstmi	r0, ip, ror #10
    14d8:	315f544c 	cmpcc	pc, ip, asr #8
    14dc:	30353536 	eorscc	r3, r5, r6, lsr r5
    14e0:	5441445f 	strbpl	r4, [r1], #-1119	; 0xfffffba1
    14e4:	54494241 	strbpl	r4, [r9], #-577	; 0xfffffdbf
    14e8:	00655f53 	rsbeq	r5, r5, r3, asr pc
    14ec:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0xfffffa94
    14f0:	6c63006c 	stclvs	0, cr0, [r3], #-432	; 0xfffffe50
    14f4:	5f6b636f 	svcpl	0x006b636f
    14f8:	71657266 	cmnvc	r5, r6, ror #4
    14fc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1500:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1504:	6c5f3035 	mrrcvs	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    1508:	5f656e69 	svcpl	0x00656e69
    150c:	61657262 	cmnvs	r5, r2, ror #4
    1510:	6e655f6b 	cdpvs	15, 6, cr5, cr5, cr11, {3}
    1514:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1518:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    151c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1520:	445f3035 	ldrbmi	r3, [pc], #-53	; 1528 <__core1_unwind_stub-0xffead8>
    1524:	42415441 	submi	r5, r1, #1090519040	; 0x41000000
    1528:	5f535449 	svcpl	0x00535449
    152c:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    1530:	36315f74 	shsub16cc	r5, r1, r4
    1534:	5f303535 	svcpl	0x00303535
    1538:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    153c:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
    1540:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1544:	7374725f 	cmnvc	r4, #-268435451	; 0xf0000005
    1548:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    154c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1550:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    1554:	5f6f6669 	svcpl	0x006f6669
    1558:	61656c63 	cmnvs	r5, r3, ror #24
    155c:	78725f72 	ldmdavc	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1560:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1564:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1568:	425f3035 	subsmi	r3, pc, #53	; 0x35
    156c:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1570:	5f455441 	svcpl	0x00455441
    1574:	30303237 	eorscc	r3, r0, r7, lsr r2
    1578:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    157c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1580:	425f3035 	subsmi	r3, pc, #53	; 0x35
    1584:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1588:	5f455441 	svcpl	0x00455441
    158c:	30303639 	eorscc	r3, r0, r9, lsr r6
    1590:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1594:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1598:	505f3035 	subspl	r3, pc, r5, lsr r0	; <UNPREDICTABLE>
    159c:	54495241 	strbpl	r5, [r9], #-577	; 0xfffffdbf
    15a0:	49445f59 	stmdbmi	r4, {r0, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    15a4:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
    15a8:	74690045 	strbtvc	r0, [r9], #-69	; 0xffffffbb
    15ac:	41006d65 	tstmi	r0, r5, ror #26
    15b0:	315f544c 	cmpcc	pc, ip, asr #8
    15b4:	30353536 	eorscc	r3, r5, r6, lsr r5
    15b8:	5645445f 			; <UNDEFINED> instruction: 0x5645445f
    15bc:	5f454349 	svcpl	0x00454349
    15c0:	46434f53 			; <UNDEFINED> instruction: 0x46434f53
    15c4:	5f414750 	svcpl	0x00414750
    15c8:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    15cc:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
    15d0:	36315f54 	shsaxcc	r5, r1, r4
    15d4:	5f303535 	svcpl	0x00303535
    15d8:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    15dc:	535f4543 	cmppl	pc, #281018368	; 0x10c00000
    15e0:	5046434f 	subpl	r4, r6, pc, asr #6
    15e4:	555f4147 	ldrbpl	r4, [pc, #-327]	; 14a5 <__core1_unwind_stub-0xffeb5b>
    15e8:	31545241 	cmpcc	r4, r1, asr #4
    15ec:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    15f0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    15f4:	425f3035 	subsmi	r3, pc, #53	; 0x35
    15f8:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    15fc:	5f455441 	svcpl	0x00455441
    1600:	30303231 	eorscc	r3, r0, r1, lsr r2
    1604:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1608:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    160c:	495f3035 	ldmdbmi	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1610:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    1614:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    1618:	4f4e5f53 	svcmi	0x004e5f53
    161c:	6100454e 	tstvs	r0, lr, asr #10
    1620:	315f746c 	cmpcc	pc, ip, ror #8
    1624:	30353536 	eorscc	r3, r5, r6, lsr r5
    1628:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    162c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1630:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1634:	6e696c5f 	mcrvs	12, 3, r6, cr9, cr15, {2}
    1638:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    163c:	36315f54 	shsaxcc	r5, r1, r4
    1640:	5f303535 	svcpl	0x00303535
    1644:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1648:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    164c:	3030365f 	eorscc	r3, r0, pc, asr r6
    1650:	72617000 	rsbvc	r7, r1, #0
    1654:	00797469 	rsbseq	r7, r9, r9, ror #8
    1658:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    165c:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1660:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1664:	5f544c41 	svcpl	0x00544c41
    1668:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    166c:	41505f30 	cmpmi	r0, r0, lsr pc
    1670:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    1674:	44444f5f 	strbmi	r4, [r4], #-3935	; 0xfffff0a1
    1678:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    167c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1680:	6d5f3035 	ldclvs	0, cr3, [pc, #-212]	; 15b4 <__core1_unwind_stub-0xffea4c>
    1684:	6d65646f 	cfstrdvs	mvd6, [r5, #-444]!	; 0xfffffe44
    1688:	6174735f 	cmnvs	r4, pc, asr r3
    168c:	5f737574 	svcpl	0x00737574
    1690:	00746567 	rsbseq	r6, r4, r7, ror #10
    1694:	5f544c41 	svcpl	0x00544c41
    1698:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    169c:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    16a0:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 16a8 <__core1_unwind_stub-0xffe958>
    16a4:	47474952 	smlsldmi	r4, r7, r2, r9
    16a8:	545f5245 	ldrbpl	r5, [pc], #-581	; 16b0 <__core1_unwind_stub-0xffe950>
    16ac:	00655f58 	rsbeq	r5, r5, r8, asr pc
    16b0:	5f544c41 	svcpl	0x00544c41
    16b4:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    16b8:	41425f30 	cmpmi	r2, r0, lsr pc
    16bc:	41524455 	cmpmi	r2, r5, asr r4
    16c0:	375f4554 			; <UNDEFINED> instruction: 0x375f4554
    16c4:	6c610035 	stclvs	0, cr0, [r1], #-212	; 0xffffff2c
    16c8:	36315f74 	shsub16cc	r5, r1, r4
    16cc:	5f303535 	svcpl	0x00303535
    16d0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    16d4:	69645f65 	stmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    16d8:	6f736976 	svcvs	0x00736976
    16dc:	65685f72 	strbvs	r5, [r8, #-3954]!	; 0xfffff08e
    16e0:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
    16e4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    16e8:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    16ec:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    16f0:	5f6f6669 	svcpl	0x006f6669
    16f4:	67697274 			; <UNDEFINED> instruction: 0x67697274
    16f8:	5f726567 	svcpl	0x00726567
    16fc:	5f746573 	svcpl	0x00746573
    1700:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
    1704:	73697669 	cmnvc	r9, #110100480	; 0x6900000
    1708:	4100726f 	tstmi	r0, pc, ror #4
    170c:	315f544c 	cmpcc	pc, ip, asr #8
    1710:	30353536 	eorscc	r3, r5, r6, lsr r5
    1714:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
    1718:	52545f4f 	subspl	r5, r4, #316	; 0x13c
    171c:	45474749 	strbmi	r4, [r7, #-1865]	; 0xfffff8b7
    1720:	58545f52 	ldmdapl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1724:	6100745f 	tstvs	r0, pc, asr r4
    1728:	315f746c 	cmpcc	pc, ip, ror #8
    172c:	30353536 	eorscc	r3, r5, r6, lsr r5
    1730:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1734:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1738:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    173c:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 1744 <__core1_unwind_stub-0xffe8bc>
    1740:	41006d65 	tstmi	r0, r5, ror #26
    1744:	315f544c 	cmpcc	pc, ip, asr #8
    1748:	30353536 	eorscc	r3, r5, r6, lsr r5
    174c:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1750:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1754:	34325f45 	ldrtcc	r5, [r2], #-3909	; 0xfffff0bb
    1758:	61003030 	tstvs	r0, r0, lsr r0
    175c:	315f746c 	cmpcc	pc, ip, ror #8
    1760:	30353536 	eorscc	r3, r5, r6, lsr r5
    1764:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    1768:	69645f6f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    176c:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1770:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    1774:	36315f54 	shsaxcc	r5, r1, r4
    1778:	5f303535 	svcpl	0x00303535
    177c:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1780:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    1784:	4100655f 	tstmi	r0, pc, asr r5
    1788:	315f544c 	cmpcc	pc, ip, asr #8
    178c:	30353536 	eorscc	r3, r5, r6, lsr r5
    1790:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1794:	4154535f 	cmpmi	r4, pc, asr r3
    1798:	5f535554 	svcpl	0x00535554
    179c:	445f5852 	ldrbmi	r5, [pc], #-2130	; 17a4 <__core1_unwind_stub-0xffe85c>
    17a0:	00415441 	subeq	r5, r1, r1, asr #8
    17a4:	5f746c61 	svcpl	0x00746c61
    17a8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    17ac:	69665f30 	stmdbvs	r6!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    17b0:	745f6f66 	ldrbvc	r6, [pc], #-3942	; 17b8 <__core1_unwind_stub-0xffe848>
    17b4:	67676972 			; <UNDEFINED> instruction: 0x67676972
    17b8:	735f7265 	cmpvc	pc, #1342177286	; 0x50000006
    17bc:	745f7465 	ldrbvc	r7, [pc], #-1125	; 17c4 <__core1_unwind_stub-0xffe83c>
    17c0:	6c610078 	stclvs	0, cr0, [r1], #-480	; 0xfffffe20
    17c4:	36315f74 	shsub16cc	r5, r1, r4
    17c8:	5f303535 	svcpl	0x00303535
    17cc:	6f666966 	svcvs	0x00666966
    17d0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    17d4:	615f7261 	cmpvs	pc, r1, ror #4
    17d8:	41006c6c 	tstmi	r0, ip, ror #24
    17dc:	315f544c 	cmpcc	pc, ip, asr #8
    17e0:	30353536 	eorscc	r3, r5, r6, lsr r5
    17e4:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    17e8:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    17ec:	38345f45 	ldmdacc	r4!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    17f0:	61003030 	tstvs	r0, r0, lsr r0
    17f4:	315f746c 	cmpcc	pc, ip, ror #8
    17f8:	30353536 	eorscc	r3, r5, r6, lsr r5
    17fc:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1800:	616e655f 	cmnvs	lr, pc, asr r5
    1804:	5f656c62 	svcpl	0x00656c62
    1808:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    180c:	425f006d 	subsmi	r0, pc, #109	; 0x6d
    1810:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
    1814:	5f746c61 	svcpl	0x00746c61
    1818:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    181c:	65725f30 	ldrbvs	r5, [r2, #-3888]!	; 0xfffff0d0
    1820:	00746573 	rsbseq	r6, r4, r3, ror r5
    1824:	5f746c61 	svcpl	0x00746c61
    1828:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    182c:	6f6c5f30 	svcvs	0x006c5f30
    1830:	6162706f 	cmnvs	r2, pc, rrx
    1834:	645f6b63 	ldrbvs	r6, [pc], #-2915	; 183c <__core1_unwind_stub-0xffe7c4>
    1838:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    183c:	6100656c 	tstvs	r0, ip, ror #10
    1840:	315f746c 	cmpcc	pc, ip, ror #8
    1844:	30353536 	eorscc	r3, r5, r6, lsr r5
    1848:	696e755f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    184c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1850:	5f746c61 	svcpl	0x00746c61
    1854:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1858:	69665f30 	stmdbvs	r6!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    185c:	775f6f66 	ldrbvc	r6, [pc, -r6, ror #30]
    1860:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1864:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1868:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    186c:	425f3035 	subsmi	r3, pc, #53	; 0x35
    1870:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1874:	5f455441 	svcpl	0x00455441
    1878:	30383832 	eorscc	r3, r8, r2, lsr r8
    187c:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
    1880:	36315f54 	shsaxcc	r5, r1, r4
    1884:	5f303535 	svcpl	0x00303535
    1888:	4f464946 	svcmi	0x00464946
    188c:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1890:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    1894:	5f58525f 	svcpl	0x0058525f
    1898:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    189c:	36315f74 	shsub16cc	r5, r1, r4
    18a0:	5f303535 	svcpl	0x00303535
    18a4:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    18a8:	69645f6d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    18ac:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    18b0:	74645f65 	strbtvc	r5, [r4], #-3941	; 0xfffff09b
    18b4:	6c610072 	stclvs	0, cr0, [r1], #-456	; 0xfffffe38
    18b8:	36315f74 	shsub16cc	r5, r1, r4
    18bc:	5f303535 	svcpl	0x00303535
    18c0:	5f72636d 	svcpl	0x0072636d
    18c4:	6b73616d 	blvs	1cd9e80 <__end__+0xcbde60>
    18c8:	726c635f 	rsbvc	r6, ip, #2080374785	; 0x7c000001
    18cc:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    18d0:	00726570 	rsbseq	r6, r2, r0, ror r5
    18d4:	5f746c61 	svcpl	0x00746c61
    18d8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    18dc:	6e695f30 	mcrvs	15, 3, r5, cr9, cr0, {1}
    18e0:	69645f74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    18e4:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    18e8:	6c615f65 	stclvs	15, cr5, [r1], #-404	; 0xfffffe6c
    18ec:	6c61006c 	stclvs	0, cr0, [r1], #-432	; 0xfffffe50
    18f0:	36315f74 	shsub16cc	r5, r1, r4
    18f4:	5f303535 	svcpl	0x00303535
    18f8:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    18fc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1900:	5f676966 	svcpl	0x00676966
    1904:	00746573 	rsbseq	r6, r4, r3, ror r5
    1908:	5f746c61 	svcpl	0x00746c61
    190c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1910:	636d5f30 	cmnvs	sp, #48, 30	; 0xc0
    1914:	616d5f72 	smcvs	54770	; 0xd5f2
    1918:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
    191c:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1920:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    1924:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    1928:	36315f54 	shsaxcc	r5, r1, r4
    192c:	5f303535 	svcpl	0x00303535
    1930:	5f544e49 	svcpl	0x00544e49
    1934:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    1938:	4c5f5355 	mrrcmi	3, 5, r5, pc, cr5	; <UNPREDICTABLE>
    193c:	00454e49 	subeq	r4, r5, r9, asr #28
    1940:	5f544c41 	svcpl	0x00544c41
    1944:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1948:	4e495f30 	mcrmi	15, 2, r5, cr9, cr0, {1}
    194c:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xfffff0ac
    1950:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    1954:	5f58545f 	svcpl	0x0058545f
    1958:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
    195c:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    1960:	00726566 	rsbseq	r6, r2, r6, ror #10
    1964:	5f544c41 	svcpl	0x00544c41
    1968:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    196c:	41425f30 	cmpmi	r2, r0, lsr pc
    1970:	41524455 	cmpmi	r2, r5, asr r4
    1974:	315f4554 	cmpcc	pc, r4, asr r5	; <UNPREDICTABLE>
    1978:	30323531 	eorscc	r3, r2, r1, lsr r5
    197c:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    1980:	36315f74 	shsub16cc	r5, r1, r4
    1984:	5f303535 	svcpl	0x00303535
    1988:	5f746e69 	svcpl	0x00746e69
    198c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    1990:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
    1994:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1998:	5f746c61 	svcpl	0x00746c61
    199c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    19a0:	6e655f30 	mcrvs	15, 3, r5, cr5, cr0, {1}
    19a4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    19a8:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    19ac:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    19b0:	725f3035 	subsvc	r3, pc, #53	; 0x35
    19b4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    19b8:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    19bc:	00726570 	rsbseq	r6, r2, r0, ror r5
    19c0:	5f544c41 	svcpl	0x00544c41
    19c4:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    19c8:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    19cc:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 19d4 <__core1_unwind_stub-0xffe62c>
    19d0:	47474952 	smlsldmi	r4, r7, r2, r9
    19d4:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
    19d8:	41485f58 	cmpmi	r8, r8, asr pc
    19dc:	465f464c 	ldrbmi	r4, [pc], -ip, asr #12
    19e0:	004c4c55 	subeq	r4, ip, r5, asr ip
    19e4:	5f544c41 	svcpl	0x00544c41
    19e8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    19ec:	41425f30 	cmpmi	r2, r0, lsr pc
    19f0:	41524455 	cmpmi	r2, r5, asr r4
    19f4:	395f4554 	ldmdbcc	pc, {r2, r4, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    19f8:	73003030 	movwvc	r3, #48	; 0x30
    19fc:	616d7465 	cmnvs	sp, r5, ror #8
    1a00:	61006b73 	tstvs	r0, r3, ror fp
    1a04:	315f746c 	cmpcc	pc, ip, ror #8
    1a08:	30353536 	eorscc	r3, r5, r6, lsr r5
    1a0c:	7561625f 	strbvc	r6, [r1, #-607]!	; 0xfffffda1
    1a10:	74617264 	strbtvc	r7, [r1], #-612	; 0xfffffd9c
    1a14:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xfffff09b
    1a18:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    1a1c:	36315f54 	shsaxcc	r5, r1, r4
    1a20:	5f303535 	svcpl	0x00303535
    1a24:	49524150 	ldmdbmi	r2, {r4, r6, r8, lr}^
    1a28:	455f5954 	ldrbmi	r5, [pc, #-2388]	; 10dc <__core1_unwind_stub-0xffef24>
    1a2c:	004e4556 	subeq	r4, lr, r6, asr r5
    1a30:	5f544c41 	svcpl	0x00544c41
    1a34:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1a38:	41505f30 	cmpmi	r0, r0, lsr pc
    1a3c:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    1a40:	4100655f 	tstmi	r0, pc, asr r5
    1a44:	315f544c 	cmpcc	pc, ip, asr #8
    1a48:	30353536 	eorscc	r3, r5, r6, lsr r5
    1a4c:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
    1a50:	52545f4f 	subspl	r5, r4, #316	; 0x13c
    1a54:	45474749 	strbmi	r4, [r7, #-1865]	; 0xfffff8b7
    1a58:	58525f52 	ldmdapl	r2, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1a5c:	594e415f 	stmdbpl	lr, {r0, r1, r2, r3, r4, r6, r8, lr}^
    1a60:	6f747300 	svcvs	0x00747300
    1a64:	74696270 	strbtvc	r6, [r9], #-624	; 0xfffffd90
    1a68:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
    1a6c:	36315f54 	shsaxcc	r5, r1, r4
    1a70:	5f303535 	svcpl	0x00303535
    1a74:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1a78:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    1a7c:	3239315f 	eorscc	r3, r9, #-1073741801	; 0xc0000017
    1a80:	41003030 	tstmi	r0, r0, lsr r0
    1a84:	315f544c 	cmpcc	pc, ip, asr #8
    1a88:	30353536 	eorscc	r3, r5, r6, lsr r5
    1a8c:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1a90:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1a94:	38335f45 	ldmdacc	r3!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    1a98:	00303034 	eorseq	r3, r0, r4, lsr r0
    1a9c:	5f746c61 	svcpl	0x00746c61
    1aa0:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1aa4:	69645f30 	stmdbvs	r4!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    1aa8:	6f736976 	svcvs	0x00736976
    1aac:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
    1ab0:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    1ab4:	36315f54 	shsaxcc	r5, r1, r4
    1ab8:	5f303535 	svcpl	0x00303535
    1abc:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1ac0:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    1ac4:	3637355f 			; <UNDEFINED> instruction: 0x3637355f
    1ac8:	61003030 	tstvs	r0, r0, lsr r0
    1acc:	315f746c 	cmpcc	pc, ip, ror #8
    1ad0:	30353536 	eorscc	r3, r5, r6, lsr r5
    1ad4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1ad8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1adc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ae0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1ae4:	445f3035 	ldrbmi	r3, [pc], #-53	; 1aec <__core1_unwind_stub-0xffe514>
    1ae8:	43495645 	movtmi	r5, #38469	; 0x9645
    1aec:	00655f45 	rsbeq	r5, r5, r5, asr #30
    1af0:	61746164 	cmnvs	r4, r4, ror #2
    1af4:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1af8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1afc:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1b00:	505f3035 	subspl	r3, pc, r5, lsr r0	; <UNPREDICTABLE>
    1b04:	54495241 	strbpl	r5, [r9], #-577	; 0xfffffdbf
    1b08:	00745f59 	rsbseq	r5, r4, r9, asr pc
    1b0c:	5f544c41 	svcpl	0x00544c41
    1b10:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1b14:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    1b18:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 1b20 <__core1_unwind_stub-0xffe4e0>
    1b1c:	47474952 	smlsldmi	r4, r7, r2, r9
    1b20:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
    1b24:	4c415f58 	mcrrmi	15, 5, r5, r1, cr8
    1b28:	54534f4d 	ldrbpl	r4, [r3], #-3917	; 0xfffff0b3
    1b2c:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
    1b30:	4c41004c 	mcrrmi	0, 4, r0, r1, cr12
    1b34:	36315f54 	shsaxcc	r5, r1, r4
    1b38:	5f303535 	svcpl	0x00303535
    1b3c:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1b40:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    1b44:	3030335f 	eorscc	r3, r0, pc, asr r3
    1b48:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1b4c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1b50:	495f3035 	ldmdbmi	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1b54:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    1b58:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    1b5c:	00655f53 	rsbeq	r5, r5, r3, asr pc
    1b60:	5f544c41 	svcpl	0x00544c41
    1b64:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1b68:	45445f30 	strbmi	r5, [r4, #-3888]	; 0xfffff0d0
    1b6c:	45434956 	strbmi	r4, [r3, #-2390]	; 0xfffff6aa
    1b70:	4100745f 	tstmi	r0, pc, asr r4
    1b74:	315f544c 	cmpcc	pc, ip, asr #8
    1b78:	30353536 	eorscc	r3, r5, r6, lsr r5
    1b7c:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1b80:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1b84:	35315f45 	ldrcc	r5, [r1, #-3909]!	; 0xfffff0bb
    1b88:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
    1b8c:	36315f54 	shsaxcc	r5, r1, r4
    1b90:	5f303535 	svcpl	0x00303535
    1b94:	444e4148 	strbmi	r4, [lr], #-328	; 0xfffffeb8
    1b98:	735f454c 	cmpvc	pc, #76, 10	; 0x13000000
    1b9c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ba0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1ba4:	485f3035 	ldmdami	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1ba8:	4c444e41 	mcrrmi	14, 4, r4, r4, cr1
    1bac:	00745f45 	rsbseq	r5, r4, r5, asr #30
    1bb0:	5f544c41 	svcpl	0x00544c41
    1bb4:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1bb8:	4e495f30 	mcrmi	15, 2, r5, cr9, cr0, {1}
    1bbc:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xfffff0ac
    1bc0:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    1bc4:	4100745f 	tstmi	r0, pc, asr r4
    1bc8:	315f544c 	cmpcc	pc, ip, asr #8
    1bcc:	30353536 	eorscc	r3, r5, r6, lsr r5
    1bd0:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1bd4:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1bd8:	38315f45 	ldmdacc	r1!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    1bdc:	61003030 	tstvs	r0, r0, lsr r0
    1be0:	315f746c 	cmpcc	pc, ip, ror #8
    1be4:	30353536 	eorscc	r3, r5, r6, lsr r5
    1be8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1bec:	616e655f 	cmnvs	lr, pc, asr r5
    1bf0:	5f656c62 	svcpl	0x00656c62
    1bf4:	41007872 	tstmi	r0, r2, ror r8
    1bf8:	315f544c 	cmpcc	pc, ip, asr #8
    1bfc:	30353536 	eorscc	r3, r5, r6, lsr r5
    1c00:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1c04:	4154535f 	cmpmi	r4, pc, asr r3
    1c08:	5f535554 	svcpl	0x00535554
    1c0c:	545f5852 	ldrbpl	r5, [pc], #-2130	; 1c14 <__core1_unwind_stub-0xffe3ec>
    1c10:	4f454d49 	svcmi	0x00454d49
    1c14:	61005455 	tstvs	r0, r5, asr r4
    1c18:	315f746c 	cmpcc	pc, ip, ror #8
    1c1c:	30353536 	eorscc	r3, r5, r6, lsr r5
    1c20:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1c24:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1c28:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1c2c:	0078725f 	rsbseq	r7, r8, pc, asr r2
    1c30:	5f746c61 	svcpl	0x00746c61
    1c34:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1c38:	65725f30 	ldrbvs	r5, [r2, #-3888]!	; 0xfffff0d0
    1c3c:	41006461 	tstmi	r0, r1, ror #8
    1c40:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1b18 <__core1_unwind_stub-0xffe4e8>
    1c44:	415f554d 	cmpmi	pc, sp, asr #10
    1c48:	5f525454 	svcpl	0x00525454
    1c4c:	575f4257 			; <UNDEFINED> instruction: 0x575f4257
    1c50:	4c410054 	mcrrmi	0, 5, r0, r1, cr4
    1c54:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    1c58:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    1c5c:	575f5254 			; <UNDEFINED> instruction: 0x575f5254
    1c60:	74740054 	ldrbtvc	r0, [r4], #-84	; 0xffffffac
    1c64:	645f3162 	ldrbvs	r3, [pc], #-354	; 1c6c <__core1_unwind_stub-0xffe394>
    1c68:	00637365 	rsbeq	r7, r3, r5, ror #6
    1c6c:	6c746373 	ldclvs	3, cr6, [r4], #-460	; 0xfffffe34
    1c70:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
    1c74:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xfffff08c
    1c78:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
    1c7c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1c80:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    1c84:	6274745f 	rsbsvs	r7, r4, #1593835520	; 0x5f000000
    1c88:	6e695f32 	mcrvs	15, 3, r5, cr9, cr2, {1}
    1c8c:	61007469 	tstvs	r0, r9, ror #8
    1c90:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1ae8 <__core1_unwind_stub-0xffe518>
    1c94:	545f756d 	ldrbpl	r7, [pc], #-1389	; 1c9c <__core1_unwind_stub-0xffe364>
    1c98:	31524254 	cmpcc	r2, r4, asr r2
    1c9c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1ca0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ca4:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1ca8:	5f50415f 	svcpl	0x0050415f
    1cac:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
    1cb0:	4343415f 	movtmi	r4, #12639	; 0x315f
    1cb4:	00535345 	subseq	r5, r3, r5, asr #6
    1cb8:	5f544c41 	svcpl	0x00544c41
    1cbc:	5f554d4d 	svcpl	0x00554d4d
    1cc0:	5f504144 	svcpl	0x00504144
    1cc4:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    1cc8:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    1ccc:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    1cd0:	4e5f5254 	mrcmi	2, 2, r5, cr15, cr4, {2}
    1cd4:	42575f43 	subsmi	r5, r7, #268	; 0x10c
    1cd8:	4c410041 	mcrrmi	0, 4, r0, r1, cr1
    1cdc:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    1ce0:	41445f55 	cmpmi	r4, r5, asr pc
    1ce4:	00745f50 	rsbseq	r5, r4, r0, asr pc
    1ce8:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    1cec:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1cf0:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
    1cf4:	2f72676d 	svccs	0x0072676d
    1cf8:	5f746c61 	svcpl	0x00746c61
    1cfc:	2e756d6d 	cdpcs	13, 7, cr6, cr5, cr13, {3}
    1d00:	6c610063 	stclvs	0, cr0, [r1], #-396	; 0xfffffe74
    1d04:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1d08:	61765f75 	cmnvs	r6, r5, ror pc
    1d0c:	6170735f 	cmnvs	r0, pc, asr r3
    1d10:	655f6563 	ldrbvs	r6, [pc, #-1379]	; 17b5 <__core1_unwind_stub-0xffe84b>
    1d14:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1d18:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    1d1c:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1d20:	61765f75 	cmnvs	r6, r5, ror pc
    1d24:	6170735f 	cmnvs	r0, pc, asr r3
    1d28:	675f6563 	ldrbvs	r6, [pc, -r3, ror #10]
    1d2c:	735f6e65 	cmpvc	pc, #1616	; 0x650
    1d30:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    1d34:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
    1d38:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1d3c:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1d40:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1d44:	42575f52 	subsmi	r5, r7, #328	; 0x148
    1d48:	42575f41 	subsmi	r5, r7, #260	; 0x104
    1d4c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1d50:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1d54:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1d58:	42575f52 	subsmi	r5, r7, #328	; 0x148
    1d5c:	54575f41 	ldrbpl	r5, [r7], #-3905	; 0xfffff0bf
    1d60:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1d64:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1d68:	5041445f 	subpl	r4, r1, pc, asr r4
    1d6c:	494c435f 	stmdbmi	ip, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    1d70:	00544e45 	subseq	r4, r4, r5, asr #28
    1d74:	72627474 	rsbvc	r7, r2, #116, 8	; 0x74000000
    1d78:	65675f30 	strbvs	r5, [r7, #-3888]!	; 0xfffff0d0
    1d7c:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xfffff08c
    1d80:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
    1d84:	67657300 	strbvs	r7, [r5, -r0, lsl #6]!
    1d88:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1d8c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1d90:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    1d94:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    1d98:	735f3052 	cmpvc	pc, #82	; 0x52
    1d9c:	61007465 	tstvs	r0, r5, ror #8
    1da0:	00646973 	rsbeq	r6, r4, r3, ror r9
    1da4:	5f746c61 	svcpl	0x00746c61
    1da8:	5f756d6d 	svcpl	0x00756d6d
    1dac:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
    1db0:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    1db4:	6f74735f 	svcvs	0x0074735f
    1db8:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    1dbc:	7165725f 	cmnvc	r5, pc, asr r2
    1dc0:	65726975 	ldrbvs	r6, [r2, #-2421]!	; 0xfffff68b
    1dc4:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
    1dc8:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    1dcc:	74006c61 	strvc	r6, [r0], #-3169	; 0xfffff39f
    1dd0:	72636274 	rsbvc	r6, r3, #116, 4	; 0x40000007
    1dd4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1dd8:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    1ddc:	00726570 	rsbseq	r6, r2, r0, ror r5
    1de0:	6c676573 	cfstr64vs	mvdx6, [r7], #-460	; 0xfffffe34
    1de4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1de8:	74740068 	ldrbtvc	r0, [r4], #-104	; 0xffffff98
    1dec:	5f726362 	svcpl	0x00726362
    1df0:	5f746567 	svcpl	0x00746567
    1df4:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1df8:	41007265 	tstmi	r0, r5, ror #4
    1dfc:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1cd4 <__core1_unwind_stub-0xffe32c>
    1e00:	545f554d 	ldrbpl	r5, [pc], #-1357	; 1e08 <__core1_unwind_stub-0xffe1f8>
    1e04:	535f4254 	cmppl	pc, #84, 4	; 0x40000005
    1e08:	4148535f 	cmpmi	r8, pc, asr r3
    1e0c:	42414552 	submi	r4, r1, #343932928	; 0x14800000
    1e10:	4100454c 	tstmi	r0, ip, asr #10
    1e14:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1cec <__core1_unwind_stub-0xffe314>
    1e18:	545f554d 	ldrbpl	r5, [pc], #-1357	; 1e20 <__core1_unwind_stub-0xffe1e0>
    1e1c:	535f4254 	cmppl	pc, #84, 4	; 0x40000005
    1e20:	7300655f 	movwvc	r6, #1375	; 0x55f
    1e24:	726c7463 	rsbvc	r7, ip, #1660944384	; 0x63000000
    1e28:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1e2c:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    1e30:	00726570 	rsbseq	r6, r2, r0, ror r5
    1e34:	5f746c61 	svcpl	0x00746c61
    1e38:	5f756d6d 	svcpl	0x00756d6d
    1e3c:	52434144 	subpl	r4, r3, #68, 2
    1e40:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1e44:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1e48:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1e4c:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    1e50:	745f535f 	ldrbvc	r5, [pc], #-863	; 1e58 <__core1_unwind_stub-0xffe1a8>
    1e54:	6f727000 	svcvs	0x00727000
    1e58:	00646963 	rsbeq	r6, r4, r3, ror #18
    1e5c:	5f6d756e 	svcpl	0x006d756e
    1e60:	5f6d656d 	svcpl	0x006d656d
    1e64:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1e68:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    1e6c:	5f544c41 	svcpl	0x00544c41
    1e70:	5f554d4d 	svcpl	0x00554d4d
    1e74:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    1e78:	5f434e5f 	svcpl	0x00434e5f
    1e7c:	6100434e 	tstvs	r0, lr, asr #6
    1e80:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1cd8 <__core1_unwind_stub-0xffe328>
    1e84:	545f756d 	ldrbpl	r7, [pc], #-1389	; 1e8c <__core1_unwind_stub-0xffe174>
    1e88:	52434254 	subpl	r4, r3, #84, 4	; 0x40000005
    1e8c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1e90:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1e94:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1e98:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1e9c:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xfffff0ae
    1ea0:	474e4f52 	smlsldmi	r4, lr, r2, pc	; <UNPREDICTABLE>
    1ea4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ea8:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1eac:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1eb0:	45445f52 	strbmi	r5, [r4, #-3922]	; 0xfffff0ae
    1eb4:	45434956 	strbmi	r4, [r3, #-2390]	; 0xfffff6aa
    1eb8:	00534e5f 	subseq	r4, r3, pc, asr lr
    1ebc:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    1ec0:	6c610079 	stclvs	0, cr0, [r1], #-484	; 0xfffffe1c
    1ec4:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1ec8:	61765f75 	cmnvs	r6, r5, ror pc
    1ecc:	5f6f745f 	svcpl	0x006f745f
    1ed0:	635f6170 	cmpvs	pc, #112, 2
    1ed4:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
    1ed8:	5f656373 	svcpl	0x00656373
    1edc:	69676562 	stmdbvs	r7!, {r1, r5, r6, r8, sl, sp, lr}^
    1ee0:	6e65006e 	cdpvs	0, 6, cr0, cr5, cr14, {3}
    1ee4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1ee8:	6274745f 	rsbsvs	r7, r4, #1593835520	; 0x5f000000
    1eec:	775f3072 			; <UNDEFINED> instruction: 0x775f3072
    1ef0:	006b6c61 	rsbeq	r6, fp, r1, ror #24
    1ef4:	5f627474 	svcpl	0x00627474
    1ef8:	6f6c6c61 	svcvs	0x006c6c61
    1efc:	6f635f63 	svcvs	0x00635f63
    1f00:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1f04:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    1f08:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1f0c:	74745f75 	ldrbtvc	r5, [r4], #-3957	; 0xfffff08b
    1f10:	645f3162 	ldrbvs	r3, [pc], #-354	; 1f18 <__core1_unwind_stub-0xffe0e8>
    1f14:	5f637365 	svcpl	0x00637365
    1f18:	00746573 	rsbseq	r6, r4, r3, ror r5
    1f1c:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    1f20:	64007461 	strvs	r7, [r0], #-1121	; 0xfffffb9f
    1f24:	00726361 	rsbseq	r6, r2, r1, ror #6
    1f28:	5f746c61 	svcpl	0x00746c61
    1f2c:	5f756d6d 	svcpl	0x00756d6d
    1f30:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
    1f34:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    1f38:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    1f3c:	6761705f 			; <UNDEFINED> instruction: 0x6761705f
    1f40:	62617465 	rsbvs	r7, r1, #1694498816	; 0x65000000
    1f44:	4100656c 	tstmi	r0, ip, ror #10
    1f48:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1e20 <__core1_unwind_stub-0xffe1e0>
    1f4c:	415f554d 	cmpmi	pc, sp, asr #10
    1f50:	5f525454 	svcpl	0x00525454
    1f54:	5f414257 	svcpl	0x00414257
    1f58:	00414257 	subeq	r4, r1, r7, asr r2
    1f5c:	5f746c61 	svcpl	0x00746c61
    1f60:	5f756d6d 	svcpl	0x00756d6d
    1f64:	745f6176 	ldrbvc	r6, [pc], #-374	; 1f6c <__core1_unwind_stub-0xffe094>
    1f68:	61705f6f 	cmnvs	r0, pc, ror #30
    1f6c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1f70:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    1f74:	5f61765f 	svcpl	0x0061765f
    1f78:	63617073 	cmnvs	r1, #115	; 0x73
    1f7c:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    1f80:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    1f84:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
    1f88:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    1f8c:	64006465 	strvs	r6, [r0], #-1125	; 0xfffffb9b
    1f90:	5f726361 	svcpl	0x00726361
    1f94:	5f746573 	svcpl	0x00746573
    1f98:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1f9c:	41007265 	tstmi	r0, r5, ror #4
    1fa0:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1e78 <__core1_unwind_stub-0xffe188>
    1fa4:	415f554d 	cmpmi	pc, sp, asr #10
    1fa8:	5f525454 	svcpl	0x00525454
    1fac:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    1fb0:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    1fb4:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    1fb8:	575f5254 			; <UNDEFINED> instruction: 0x575f5254
    1fbc:	42575f54 	subsmi	r5, r7, #84, 30	; 0x150
    1fc0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1fc4:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    1fc8:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    1fcc:	675f3052 			; <UNDEFINED> instruction: 0x675f3052
    1fd0:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
    1fd4:	00727366 	rsbseq	r7, r2, r6, ror #6
    1fd8:	5f544c41 	svcpl	0x00544c41
    1fdc:	5f554d4d 	svcpl	0x00554d4d
    1fe0:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    1fe4:	6100745f 	tstvs	r0, pc, asr r4
    1fe8:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1e40 <__core1_unwind_stub-0xffe1c0>
    1fec:	745f756d 	ldrbvc	r7, [pc], #-1389	; 1ff4 <__core1_unwind_stub-0xffe00c>
    1ff0:	5f316274 	svcpl	0x00316274
    1ff4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1ff8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ffc:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    2000:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    2004:	54575f52 	ldrbpl	r5, [r7], #-3922	; 0xfffff0ae
    2008:	0054575f 	subseq	r5, r4, pc, asr r7
    200c:	5f544c41 	svcpl	0x00544c41
    2010:	5f554d4d 	svcpl	0x00554d4d
    2014:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    2018:	5f42575f 	svcpl	0x0042575f
    201c:	41004257 	tstmi	r0, r7, asr r2
    2020:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1ef8 <__core1_unwind_stub-0xffe108>
    2024:	415f554d 	cmpmi	pc, sp, asr #10
    2028:	5f525454 	svcpl	0x00525454
    202c:	4e5f4257 	mrcmi	2, 2, r4, cr15, cr7, {2}
    2030:	4c410043 	mcrrmi	0, 4, r0, r1, cr3
    2034:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2038:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    203c:	4e5f5254 	mrcmi	2, 2, r5, cr15, cr4, {2}
    2040:	4c410043 	mcrrmi	0, 4, r0, r1, cr3
    2044:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2048:	50415f55 	subpl	r5, r1, r5, asr pc
    204c:	4952505f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, ip, lr}^
    2050:	43415f56 	movtmi	r5, #8022	; 0x1f56
    2054:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    2058:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    205c:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2060:	5f61765f 	svcpl	0x0061765f
    2064:	63617073 	cmnvs	r1, #115	; 0x73
    2068:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    206c:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    2070:	6f697463 	svcvs	0x00697463
    2074:	4c41006e 	mcrrmi	0, 6, r0, r1, cr14
    2078:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    207c:	41445f55 	cmpmi	r4, r5, asr pc
    2080:	414d5f50 	cmpmi	sp, r0, asr pc
    2084:	4547414e 	strbmi	r4, [r7, #-334]	; 0xfffffeb2
    2088:	6c610052 	stclvs	0, cr0, [r1], #-328	; 0xfffffeb8
    208c:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    2090:	6e755f75 	mrcvs	15, 3, r5, cr5, cr5, {3}
    2094:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    2098:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    209c:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    20a0:	626c745f 	rsbvs	r7, ip, #1593835520	; 0x5f000000
    20a4:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    20a8:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
    20ac:	5f657461 	svcpl	0x00657461
    20b0:	41007369 	tstmi	r0, r9, ror #6
    20b4:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1f8c <__core1_unwind_stub-0xffe074>
    20b8:	415f554d 	cmpmi	pc, sp, asr #10
    20bc:	5f525454 	svcpl	0x00525454
    20c0:	5f414257 	svcpl	0x00414257
    20c4:	6500434e 	strvs	r4, [r0, #-846]	; 0xfffffcb2
    20c8:	75636578 	strbvc	r6, [r3, #-1400]!	; 0xfffffa88
    20cc:	61006574 	tstvs	r0, r4, ror r5
    20d0:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1f28 <__core1_unwind_stub-0xffe0d8>
    20d4:	765f756d 	ldrbvc	r7, [pc], -sp, ror #10
    20d8:	70735f61 	rsbsvc	r5, r3, r1, ror #30
    20dc:	5f656361 	svcpl	0x00656361
    20e0:	5f6e6567 	svcpl	0x006e6567
    20e4:	65707573 	ldrbvs	r7, [r0, #-1395]!	; 0xfffffa8d
    20e8:	63657372 	cmnvs	r5, #-939524095	; 0xc8000001
    20ec:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    20f0:	6c756e00 	ldclvs	14, cr6, [r5], #-0
    20f4:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    20f8:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    20fc:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    2100:	706f6e67 	rsbvc	r6, pc, r7, ror #28
    2104:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    2108:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    210c:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    2110:	534e5f42 	movtpl	r5, #61250	; 0xef42
    2114:	4e4f4e5f 	mcrmi	14, 2, r4, cr15, cr15, {2}
    2118:	4345535f 	movtmi	r5, #21343	; 0x535f
    211c:	00455255 	subeq	r5, r5, r5, asr r2
    2120:	5f746c61 	svcpl	0x00746c61
    2124:	5f756d6d 	svcpl	0x00756d6d
    2128:	32627474 	rsbcc	r7, r2, #116, 8	; 0x74000000
    212c:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    2130:	65735f63 	ldrbvs	r5, [r3, #-3939]!	; 0xfffff09d
    2134:	6f630074 	svcvs	0x00630074
    2138:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    213c:	72646974 	rsbvc	r6, r4, #116, 18	; 0x1d0000
    2140:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2144:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    2148:	00726570 	rsbseq	r6, r2, r0, ror r5
    214c:	616d6f64 	cmnvs	sp, r4, ror #30
    2150:	615f6e69 	cmpvs	pc, r9, ror #28
    2154:	4c410070 	mcrrmi	0, 7, r0, r1, cr0
    2158:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    215c:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    2160:	575f5254 			; <UNDEFINED> instruction: 0x575f5254
    2164:	42575f54 	subsmi	r5, r7, #84, 30	; 0x150
    2168:	72760041 	rsbsvc	r0, r6, #65	; 0x41
    216c:	6f696765 	svcvs	0x00696765
    2170:	6c61006e 	stclvs	0, cr0, [r1], #-440	; 0xfffffe48
    2174:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    2178:	61765f75 	cmnvs	r6, r5, ror pc
    217c:	5f6f745f 	svcpl	0x006f745f
    2180:	635f6170 	cmpvs	pc, #112, 2
    2184:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
    2188:	5f656373 	svcpl	0x00656373
    218c:	00646e65 	rsbeq	r6, r4, r5, ror #28
    2190:	5f746c61 	svcpl	0x00746c61
    2194:	5f756d6d 	svcpl	0x00756d6d
    2198:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    219c:	4100656c 	tstmi	r0, ip, ror #10
    21a0:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2078 <__core1_unwind_stub-0xffdf88>
    21a4:	415f554d 	cmpmi	pc, sp, asr #10
    21a8:	45525f50 	ldrbmi	r5, [r2, #-3920]	; 0xfffff0b0
    21ac:	4f5f4441 	svcmi	0x005f4441
    21b0:	00594c4e 	subseq	r4, r9, lr, asr #24
    21b4:	616c6572 	smcvs	50770	; 0xc652
    21b8:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    21bc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    21c0:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    21c4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    21c8:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    21cc:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    21d0:	50415f55 	subpl	r5, r1, r5, asr pc
    21d4:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0xfffffaa1
    21d8:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    21dc:	4f5f4441 	svcmi	0x005f4441
    21e0:	00594c4e 	subseq	r4, r9, lr, asr #24
    21e4:	65636361 	strbvs	r6, [r3, #-865]!	; 0xfffffc9f
    21e8:	41007373 	tstmi	r0, r3, ror r3
    21ec:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 20c4 <__core1_unwind_stub-0xffdf3c>
    21f0:	415f554d 	cmpmi	pc, sp, asr #10
    21f4:	5f525454 	svcpl	0x00525454
    21f8:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    21fc:	61004543 	tstvs	r0, r3, asr #10
    2200:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 2058 <__core1_unwind_stub-0xffdfa8>
    2204:	765f756d 	ldrbvc	r7, [pc], -sp, ror #10
    2208:	70735f61 	rsbsvc	r5, r3, r1, ror #30
    220c:	5f656361 	svcpl	0x00656361
    2210:	5f6e6567 	svcpl	0x006e6567
    2214:	6772616c 	ldrbvs	r6, [r2, -ip, ror #2]!
    2218:	67617065 	strbvs	r7, [r1, -r5, rrx]!
    221c:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    2220:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2224:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    2228:	534e5f42 	movtpl	r5, #61250	; 0xef42
    222c:	4345535f 	movtmi	r5, #21343	; 0x535f
    2230:	00455255 	subeq	r5, r5, r5, asr r2
    2234:	5f544c41 	svcpl	0x00544c41
    2238:	5f554d4d 	svcpl	0x00554d4d
    223c:	5f425454 	svcpl	0x00425454
    2240:	655f4e58 	ldrbvs	r4, [pc, #-3672]	; 13f0 <__core1_unwind_stub-0xffec10>
    2244:	62747400 	rsbsvs	r7, r4, #0, 8
    2248:	735f3072 	cmpvc	pc, #114	; 0x72
    224c:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2250:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    2254:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    2258:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    225c:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    2260:	4e585f42 	cdpmi	15, 5, cr5, cr8, cr2, {2}
    2264:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
    2268:	31726274 	cmncc	r2, r4, ror r2
    226c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    2270:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    2274:	00726570 	rsbseq	r6, r2, r0, ror r5
    2278:	72616873 	rsbvc	r6, r1, #7536640	; 0x730000
    227c:	6c626165 	stfvse	f6, [r2], #-404	; 0xfffffe6c
    2280:	68740065 	ldmdavs	r4!, {r0, r2, r5, r6}^
    2284:	65737369 	ldrbvs	r7, [r3, #-873]!	; 0xfffffc97
    2288:	00617067 	rsbeq	r7, r1, r7, rrx
    228c:	6f6c6c61 	svcvs	0x006c6c61
    2290:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    2294:	4c410064 	mcrrmi	0, 6, r0, r1, cr4
    2298:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    229c:	50415f55 	subpl	r5, r1, r5, asr pc
    22a0:	5f4f4e5f 	svcpl	0x004f4e5f
    22a4:	45434341 	strbmi	r4, [r3, #-833]	; 0xfffffcbf
    22a8:	74005353 	strvc	r5, [r0], #-851	; 0xfffffcad
    22ac:	73736968 	cmnvc	r3, #104, 18	; 0x1a0000
    22b0:	69736765 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, sp, lr}^
    22b4:	6300657a 	movwvs	r6, #1402	; 0x57a
    22b8:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
    22bc:	64697478 	strbtvs	r7, [r9], #-1144	; 0xfffffb88
    22c0:	74740072 	ldrbtvc	r0, [r4], #-114	; 0xffffff8e
    22c4:	00307262 	eorseq	r7, r0, r2, ror #4
    22c8:	72627474 	rsbvc	r7, r2, #116, 8	; 0x74000000
    22cc:	6c610031 	stclvs	0, cr0, [r1], #-196	; 0xffffff3c
    22d0:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    22d4:	69645f75 	stmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    22d8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    22dc:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    22e0:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    22e4:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    22e8:	4e585f42 	cdpmi	15, 5, cr5, cr8, cr2, {2}
    22ec:	5349445f 	movtpl	r4, #37983	; 0x945f
    22f0:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
    22f4:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
    22f8:	67657374 			; <UNDEFINED> instruction: 0x67657374
    22fc:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    2300:	69747000 	ldmdbvs	r4!, {ip, sp, lr}^
    2304:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2308:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    230c:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    2310:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    2314:	41465f52 	cmpmi	r6, r2, asr pc
    2318:	00544c55 	subseq	r4, r4, r5, asr ip
    231c:	5f544c41 	svcpl	0x00544c41
    2320:	5f554d4d 	svcpl	0x00554d4d
    2324:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    2328:	4142575f 	cmpmi	r2, pc, asr r7
    232c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
    2330:	72747074 	rsbsvc	r7, r4, #116	; 0x74
    2334:	4100745f 	tstmi	r0, pc, asr r4
    2338:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2210 <__core1_unwind_stub-0xffddf0>
    233c:	445f554d 	ldrbmi	r5, [pc], #-1357	; 2344 <__core1_unwind_stub-0xffdcbc>
    2340:	4e5f5041 	cdpmi	0, 5, cr5, cr15, cr1, {2}
    2344:	43415f4f 	movtmi	r5, #8015	; 0x1f4f
    2348:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    234c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2350:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    2354:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    2358:	54575f52 	ldrbpl	r5, [r7], #-3922	; 0xfffff0ae
    235c:	00434e5f 	subeq	r4, r3, pc, asr lr
    2360:	5f746c61 	svcpl	0x00746c61
    2364:	5f756d6d 	svcpl	0x00756d6d
    2368:	52425454 	subpl	r5, r2, #84, 8	; 0x54000000
    236c:	65735f31 	ldrbvs	r5, [r3, #-3889]!	; 0xfffff0cf
    2370:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
    2374:	69727563 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    2378:	74007974 	strvc	r7, [r0], #-2420	; 0xfffff68c
    237c:	31726274 	cmncc	r2, r4, ror r2
    2380:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2384:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    2388:	00726570 	rsbseq	r6, r2, r0, ror r5
    238c:	5f544c41 	svcpl	0x00544c41
    2390:	5f554d4d 	svcpl	0x00554d4d
    2394:	5f425454 	svcpl	0x00425454
    2398:	4f4e5f53 	svcmi	0x004e5f53
    239c:	48535f4e 	ldmdami	r3, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    23a0:	41455241 	cmpmi	r5, r1, asr #4
    23a4:	00454c42 	subeq	r4, r5, r2, asr #24
    23a8:	5f544c41 	svcpl	0x00544c41
    23ac:	5f554d4d 	svcpl	0x00554d4d
    23b0:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    23b4:	5f434e5f 	svcpl	0x00434e5f
    23b8:	6d004257 	sfmvs	f4, 4, [r0, #-348]	; 0xfffffea4
    23bc:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    23c0:	74740079 	ldrbtvc	r0, [r4], #-121	; 0xffffff87
    23c4:	00726362 	rsbseq	r6, r2, r2, ror #6
    23c8:	5f544c41 	svcpl	0x00544c41
    23cc:	5f554d4d 	svcpl	0x00554d4d
    23d0:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    23d4:	5f434e5f 	svcpl	0x00434e5f
    23d8:	63005457 	movwvs	r5, #1111	; 0x457
    23dc:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
    23e0:	00656373 	rsbeq	r6, r5, r3, ror r3
    23e4:	5f544c41 	svcpl	0x00544c41
    23e8:	5f554d4d 	svcpl	0x00554d4d
    23ec:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    23f0:	5f42575f 	svcpl	0x0042575f
    23f4:	00414257 	subeq	r4, r1, r7, asr r2
    23f8:	5f544c41 	svcpl	0x00544c41
    23fc:	5f554d4d 	svcpl	0x00554d4d
    2400:	5f425454 	svcpl	0x00425454
    2404:	655f534e 	ldrbvs	r5, [pc, #-846]	; 20be <__core1_unwind_stub-0xffdf42>
    2408:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    240c:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2410:	5f61765f 	svcpl	0x0061765f
    2414:	63617073 	cmnvs	r1, #115	; 0x73
    2418:	72635f65 	rsbvc	r5, r3, #404	; 0x194
    241c:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    2420:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    2424:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    2428:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    242c:	5f544c41 	svcpl	0x00544c41
    2430:	5f554d4d 	svcpl	0x00554d4d
    2434:	5f425454 	svcpl	0x00425454
    2438:	745f534e 	ldrbvc	r5, [pc], #-846	; 2440 <__core1_unwind_stub-0xffdbc0>
    243c:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
    2440:	75626972 	strbvc	r6, [r2, #-2418]!	; 0xfffff68e
    2444:	00736574 	rsbseq	r6, r3, r4, ror r5
    2448:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    244c:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    2450:	69775f72 	ldmdbvs	r7!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2454:	00687464 	rsbeq	r7, r8, r4, ror #8
    2458:	5f544c41 	svcpl	0x00544c41
    245c:	5f554d4d 	svcpl	0x00554d4d
    2460:	655f5041 	ldrbvs	r5, [pc, #-65]	; 2427 <__core1_unwind_stub-0xffdbd9>
    2464:	62747400 	rsbsvs	r7, r4, #0, 8
    2468:	6e5f7263 	cdpvs	2, 5, cr7, cr15, cr3, {3}
    246c:	62747400 	rsbsvs	r7, r4, #0, 8
    2470:	74740031 	ldrbtvc	r0, [r4], #-49	; 0xffffffcf
    2474:	41003262 	tstmi	r0, r2, ror #4
    2478:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2350 <__core1_unwind_stub-0xffdcb0>
    247c:	415f554d 	cmpmi	pc, sp, asr #10
    2480:	00745f50 	rsbseq	r5, r4, r0, asr pc
    2484:	73716572 	cmnvc	r1, #478150656	; 0x1c800000
    2488:	00657a69 	rsbeq	r7, r5, r9, ror #20
    248c:	5f746c61 	svcpl	0x00746c61
    2490:	67657276 			; <UNDEFINED> instruction: 0x67657276
    2494:	5f6e6f69 	svcpl	0x006e6f69
    2498:	6b72616d 	blvs	1c9aa54 <__end__+0xc7ea34>
    249c:	6761705f 			; <UNDEFINED> instruction: 0x6761705f
    24a0:	62617465 	rsbvs	r7, r1, #1694498816	; 0x65000000
    24a4:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
    24a8:	655f6d75 	ldrbvs	r6, [pc, #-3445]	; 173b <__core1_unwind_stub-0xffe8c5>
    24ac:	006d656c 	rsbeq	r6, sp, ip, ror #10
    24b0:	5f544c41 	svcpl	0x00544c41
    24b4:	5f554d4d 	svcpl	0x00554d4d
    24b8:	505f5041 	subspl	r5, pc, r1, asr #32
    24bc:	5f564952 	svcpl	0x00564952
    24c0:	44414552 	strbmi	r4, [r1], #-1362	; 0xfffffaae
    24c4:	4c4e4f5f 	mcrrmi	15, 5, r4, lr, cr15
    24c8:	4c410059 	mcrrmi	0, 5, r0, r1, cr9
    24cc:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    24d0:	454d5f55 	strbmi	r5, [sp, #-3925]	; 0xfffff0ab
    24d4:	45525f4d 	ldrbmi	r5, [r2, #-3917]	; 0xfffff0b3
    24d8:	4e4f4947 	vmlsmi.f16	s9, s30, s14	; <UNPREDICTABLE>
    24dc:	4100735f 	tstmi	r0, pc, asr r3
    24e0:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 23b8 <__core1_unwind_stub-0xffdc48>
    24e4:	4d5f554d 	cfldr64mi	mvdx5, [pc, #-308]	; 23b8 <__core1_unwind_stub-0xffdc48>
    24e8:	525f4d45 	subspl	r4, pc, #4416	; 0x1140
    24ec:	4f494745 	svcmi	0x00494745
    24f0:	00745f4e 	rsbseq	r5, r4, lr, asr #30
    24f4:	5f746c61 	svcpl	0x00746c61
    24f8:	5f756d6d 	svcpl	0x00756d6d
    24fc:	544e4f43 	strbpl	r4, [lr], #-3907	; 0xfffff0bd
    2500:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2504:	735f5244 	cmpvc	pc, #68, 4	; 0x40000004
    2508:	61007465 	tstvs	r0, r5, ror #8
    250c:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 2364 <__core1_unwind_stub-0xffdc9c>
    2510:	745f756d 	ldrbvc	r7, [pc], #-1389	; 2518 <__core1_unwind_stub-0xffdae8>
    2514:	615f6274 	cmpvs	pc, r4, ror r2	; <UNPREDICTABLE>
    2518:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    251c:	4100745f 	tstmi	r0, pc, asr r4
    2520:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 23f8 <__core1_unwind_stub-0xffdc08>
    2524:	565f554d 	ldrbpl	r5, [pc], -sp, asr #10
    2528:	4f545f41 	svcmi	0x00545f41
    252c:	5f41505f 	svcpl	0x0041505f
    2530:	4c414f43 	mcrrmi	15, 4, r4, r1, cr3
    2534:	45435345 	strbmi	r5, [r3, #-837]	; 0xfffffcbb
    2538:	4100735f 	tstmi	r0, pc, asr r3
    253c:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2414 <__core1_unwind_stub-0xffdbec>
    2540:	565f554d 	ldrbpl	r5, [pc], -sp, asr #10
    2544:	4f545f41 	svcmi	0x00545f41
    2548:	5f41505f 	svcpl	0x0041505f
    254c:	4c414f43 	mcrrmi	15, 4, r4, r1, cr3
    2550:	45435345 	strbmi	r5, [r3, #-837]	; 0xfffffcbb
    2554:	6100745f 	tstvs	r0, pc, asr r4
    2558:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 23b0 <__core1_unwind_stub-0xffdc50>
    255c:	745f756d 	ldrbvc	r7, [pc], #-1389	; 2564 <__core1_unwind_stub-0xffda9c>
    2560:	695f626c 	ldmdbvs	pc, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    2564:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    2568:	74616469 	strbtvc	r6, [r1], #-1129	; 0xfffffb97
    256c:	656e0065 	strbvs	r0, [lr, #-101]!	; 0xffffff9b
    2570:	65737478 	ldrbvs	r7, [r3, #-1144]!	; 0xfffffb88
    2574:	00617067 	rsbeq	r7, r1, r7, rrx
    2578:	5f746c61 	svcpl	0x00746c61
    257c:	5f756d6d 	svcpl	0x00756d6d
    2580:	745f6176 	ldrbvc	r6, [pc], #-374	; 2588 <__core1_unwind_stub-0xffda78>
    2584:	61705f6f 	cmnvs	r0, pc, ror #30
    2588:	616f635f 	cmnvs	pc, pc, asr r3	; <UNPREDICTABLE>
    258c:	6373656c 	cmnvs	r3, #108, 10	; 0x1b000000
    2590:	656e5f65 	strbvs	r5, [lr, #-3941]!	; 0xfffff09b
    2594:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
    2598:	615f6274 	cmpvs	pc, r4, ror r2	; <UNPREDICTABLE>
    259c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    25a0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    25a4:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    25a8:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    25ac:	5f4e585f 	svcpl	0x004e585f
    25b0:	42414e45 	submi	r4, r1, #1104	; 0x450
    25b4:	4100454c 	tstmi	r0, ip, asr #10
    25b8:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2490 <__core1_unwind_stub-0xffdb70>
    25bc:	415f554d 	cmpmi	pc, sp, asr #10
    25c0:	5f525454 	svcpl	0x00525454
    25c4:	41004257 	tstmi	r0, r7, asr r2
    25c8:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 24a0 <__core1_unwind_stub-0xffdb60>
    25cc:	445f554d 	ldrbmi	r5, [pc], #-1357	; 25d4 <__core1_unwind_stub-0xffda2c>
    25d0:	525f5041 	subspl	r5, pc, #65	; 0x41
    25d4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    25d8:	00444556 	subeq	r4, r4, r6, asr r5
    25dc:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    25e0:	745f656c 	ldrbvc	r6, [pc], #-1388	; 25e8 <__core1_unwind_stub-0xffda18>
    25e4:	31726274 	cmncc	r2, r4, ror r2
    25e8:	6c61775f 	stclvs	7, cr7, [r1], #-380	; 0xfffffe84
    25ec:	656c006b 	strbvs	r0, [ip, #-107]!	; 0xffffff95
    25f0:	68636461 	stmdavs	r3!, {r0, r5, r6, sl, sp, lr}^
    25f4:	00327261 	eorseq	r7, r2, r1, ror #4
    25f8:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    25fc:	7473006f 	ldrbtvc	r0, [r3], #-111	; 0xffffff91
    2600:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    2604:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    2608:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0xffffffa1
    260c:	63700063 	cmnvs	r0, #99	; 0x63
    2610:	00726168 	rsbseq	r6, r2, r8, ror #2
    2614:	6461656c 	strbtvs	r6, [r1], #-1388	; 0xfffffa94
    2618:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    261c:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    2620:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    2624:	73007473 	movwvc	r7, #1139	; 0x473
    2628:	72616774 	rsbvc	r6, r1, #116, 14	; 0x1d00000
    262c:	75700067 	ldrbvc	r0, [r0, #-103]!	; 0xffffff99
    2630:	665f6374 			; <UNDEFINED> instruction: 0x665f6374
    2634:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
    2638:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    263c:	5f786568 	svcpl	0x00786568
    2640:	615f6f74 	cmpvs	pc, r4, ror pc	; <UNPREDICTABLE>
    2644:	61006373 	tstvs	r0, r3, ror r3
    2648:	705f746c 	subsvc	r7, pc, ip, ror #8
    264c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    2650:	65670066 	strbvs	r0, [r7, #-102]!	; 0xffffff9a
    2654:	63656474 	cmnvs	r5, #116, 8	; 0x74000000
    2658:	6c776800 	ldclvs	8, cr6, [r7], #-0
    265c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2660:	752f6372 	strvc	r6, [pc, #-882]!	; 22f6 <__core1_unwind_stub-0xffdd0a>
    2664:	736c6974 	cmnvc	ip, #116, 18	; 0x1d0000
    2668:	746c612f 	strbtvc	r6, [ip], #-303	; 0xfffffed1
    266c:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2670:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    2674:	75700063 	ldrbvc	r0, [r0, #-99]!	; 0xffffff9d
    2678:	61007374 	tstvs	r0, r4, ror r3
    267c:	765f746c 	ldrbvc	r7, [pc], -ip, ror #8
    2680:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    2684:	0066746e 	rsbeq	r7, r6, lr, ror #8
    2688:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
    268c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    2690:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
    2694:	5f63756e 	svcpl	0x0063756e
    2698:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
    269c:	00747369 	rsbseq	r7, r4, r9, ror #6
    26a0:	5f746e69 	svcpl	0x00746e69
    26a4:	615f6f74 	cmpvs	pc, r4, ror pc	; <UNPREDICTABLE>
    26a8:	41006373 	tstmi	r0, r3, ror r3
    26ac:	505f544c 	subspl	r5, pc, ip, asr #8
    26b0:	544e4952 	strbpl	r4, [lr], #-2386	; 0xfffff6ae
    26b4:	454d5f46 	strbmi	r5, [sp, #-3910]	; 0xfffff0ba
    26b8:	4e495f4d 	cdpmi	15, 4, cr5, cr9, cr13, {2}
    26bc:	735f4f46 	cmpvc	pc, #280	; 0x118
    26c0:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
    26c4:	00737469 	rsbseq	r7, r3, r9, ror #8
    26c8:	7078616d 	rsbsvc	r6, r8, sp, ror #2
    26cc:	74007274 	strvc	r7, [r0], #-628	; 0xfffffd8c
    26d0:	7274706f 	rsbsvc	r7, r4, #111	; 0x6f
    26d4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    26d8:	706e735f 	rsbvc	r7, lr, pc, asr r3
    26dc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    26e0:	72700066 	rsbsvc	r0, r0, #102	; 0x66
    26e4:	61746e69 	cmnvs	r4, r9, ror #28
    26e8:	66006772 			; <UNDEFINED> instruction: 0x66006772
    26ec:	0067616c 	rsbeq	r6, r7, ip, ror #2
    26f0:	69727766 	ldmdbvs	r2!, {r1, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    26f4:	70006574 	andvc	r6, r0, r4, ror r5
    26f8:	69636572 	stmdbvs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    26fc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    2700:	635f6300 	cmpvs	pc, #0, 6
    2704:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2708:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
    270c:	61767469 	cmnvs	r6, r9, ror #8
    2710:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2714:	70615f5f 	rsbvc	r5, r1, pc, asr pc
    2718:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    271c:	73007265 	movwvc	r7, #613	; 0x265
    2720:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2724:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2728:	6f630074 	svcvs	0x00630074
    272c:	32746e75 	rsbscc	r6, r4, #1872	; 0x750
    2730:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    2734:	73690074 	cmnvc	r9, #116	; 0x74
    2738:	00746e69 	rsbseq	r6, r4, r9, ror #28
    273c:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    2740:	6f6d6874 	svcvs	0x006d6874
    2744:	6c610064 	stclvs	0, cr0, [r1], #-400	; 0xfffffe70
    2748:	70735f74 	rsbsvc	r5, r3, r4, ror pc
    274c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    2750:	736f0066 	cmnvc	pc, #102	; 0x66
    2754:	70006774 	andvc	r6, r0, r4, ror r7
    2758:	006d656d 	rsbeq	r6, sp, sp, ror #10
    275c:	63657073 	cmnvs	r5, #115	; 0x73
    2760:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
    2764:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    2768:	52505f54 	subspl	r5, r0, #84, 30	; 0x150
    276c:	46544e49 	ldrbmi	r4, [r4], -r9, asr #28
    2770:	4d454d5f 	stclmi	13, cr4, [r5, #-380]	; 0xfffffe84
    2774:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
    2778:	00745f4f 	rsbseq	r5, r4, pc, asr #30
    277c:	7261556d 	rsbvc	r5, r1, #457179136	; 0x1b400000
    2780:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    2784:	36315f54 	shsaxcc	r5, r1, r4
    2788:	5f303535 	svcpl	0x00303535
    278c:	454e494c 	strbmi	r4, [lr, #-2380]	; 0xfffff6b4
    2790:	4154535f 	cmpmi	r4, pc, asr r3
    2794:	5f535554 	svcpl	0x00535554
    2798:	4100454f 	tstmi	r0, pc, asr #10
    279c:	315f544c 	cmpcc	pc, ip, asr #8
    27a0:	30353536 	eorscc	r3, r5, r6, lsr r5
    27a4:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    27a8:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xfffff0bb
    27ac:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    27b0:	0045505f 	subeq	r5, r5, pc, asr r0
    27b4:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    27b8:	6174735f 	cmnvs	r4, pc, asr r3
    27bc:	00737574 	rsbseq	r7, r3, r4, ror r5
    27c0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    27c4:	6f666e49 	svcvs	0x00666e49
    27c8:	726f7000 	rsbvc	r7, pc, #0
    27cc:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    27d0:	75006f66 	strvc	r6, [r0, #-3942]	; 0xfffff09a
    27d4:	5f747261 	svcpl	0x00747261
    27d8:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
    27dc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    27e0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    27e4:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    27e8:	5f454e49 	svcpl	0x00454e49
    27ec:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    27f0:	425f5355 	subsmi	r5, pc, #1409286145	; 0x54000001
    27f4:	6e690049 	cdpvs	0, 6, cr0, cr9, cr9, {2}
    27f8:	755f7469 	ldrbvc	r7, [pc, #-1129]	; 2397 <__core1_unwind_stub-0xffdc69>
    27fc:	00747261 	rsbseq	r7, r4, r1, ror #4
    2800:	5f544c41 	svcpl	0x00544c41
    2804:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    2808:	494c5f30 	stmdbmi	ip, {r4, r5, r8, r9, sl, fp, ip, lr}^
    280c:	535f454e 	cmppl	pc, #327155712	; 0x13800000
    2810:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    2814:	45545f53 	ldrbmi	r5, [r4, #-3923]	; 0xfffff0ad
    2818:	4100544d 	tstmi	r0, sp, asr #8
    281c:	315f544c 	cmpcc	pc, ip, asr #8
    2820:	30353536 	eorscc	r3, r5, r6, lsr r5
    2824:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2828:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xfffff0bb
    282c:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    2830:	0052445f 	subseq	r4, r2, pc, asr r4
    2834:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    2838:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    283c:	6f697461 	svcvs	0x00697461
    2840:	7768006e 	strbvc	r0, [r8, -lr, rrx]!
    2844:	2f62696c 	svccs	0x0062696c
    2848:	2f637273 	svccs	0x00637273
    284c:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
    2850:	6c612f73 	stclvs	15, cr2, [r1], #-460	; 0xfffffe34
    2854:	32705f74 	rsbscc	r5, r0, #116, 30	; 0x1d0
    2858:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    285c:	7000632e 	andvc	r6, r0, lr, lsr #6
    2860:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    2864:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
    2868:	5f316d72 	svcpl	0x00316d72
    286c:	6f666e69 	svcvs	0x00666e69
    2870:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2874:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    2878:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    287c:	5f454e49 	svcpl	0x00454e49
    2880:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    2884:	465f5355 			; <UNDEFINED> instruction: 0x465f5355
    2888:	4c410045 	mcrrmi	0, 4, r0, r1, cr5
    288c:	36315f54 	shsaxcc	r5, r1, r4
    2890:	5f303535 	svcpl	0x00303535
    2894:	454e494c 	strbmi	r4, [lr, #-2380]	; 0xfffff6b4
    2898:	4154535f 	cmpmi	r4, pc, asr r3
    289c:	5f535554 	svcpl	0x00535554
    28a0:	41550065 	cmpmi	r5, r5, rrx
    28a4:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    28a8:	5f4f464e 	svcpl	0x004f464e
    28ac:	41550073 	cmpmi	r5, r3, ror r0
    28b0:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    28b4:	5f4f464e 	svcpl	0x004f464e
    28b8:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    28bc:	6f6c5f74 	svcvs	0x006c5f74
    28c0:	6f645f67 	svcvs	0x00645f67
    28c4:	7500656e 	strvc	r6, [r0, #-1390]	; 0xfffffa92
    28c8:	5f747261 	svcpl	0x00747261
    28cc:	69004449 	stmdbvs	r0, {r0, r3, r6, sl, lr}
    28d0:	5f74696e 	svcpl	0x0074696e
    28d4:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xfffff09c
    28d8:	72657400 	rsbvc	r7, r5, #0, 8
    28dc:	695f306d 	ldmdbvs	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
    28e0:	006f666e 	rsbeq	r6, pc, lr, ror #12
    28e4:	5f544c41 	svcpl	0x00544c41
    28e8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    28ec:	494c5f30 	stmdbmi	ip, {r4, r5, r8, r9, sl, fp, ip, lr}^
    28f0:	535f454e 	cmppl	pc, #327155712	; 0x13800000
    28f4:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    28f8:	48545f53 	ldmdami	r4, {r0, r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    28fc:	41004552 	tstmi	r0, r2, asr r5
    2900:	315f544c 	cmpcc	pc, ip, asr #8
    2904:	30353536 	eorscc	r3, r5, r6, lsr r5
    2908:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    290c:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xfffff0bb
    2910:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    2914:	4546525f 	strbmi	r5, [r6, #-607]	; 0xfffffda1
    2918:	635f6700 	cmpvs	pc, #0, 14
    291c:	5f66656f 	svcpl	0x0066656f
    2920:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2924:	625f6564 	subsvs	r6, pc, #100, 10	; 0x19000000
    2928:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    292c:	635f6700 	cmpvs	pc, #0, 14
    2930:	6e6e6168 	powvsez	f6, f6, #0.0
    2934:	73006c65 	movwvc	r6, #3173	; 0xc65
    2938:	635f6d68 	cmpvs	pc, #104, 26	; 0x1a00
    293c:	5f6c7274 	svcpl	0x006c7274
    2940:	765f0074 			; <UNDEFINED> instruction: 0x765f0074
    2944:	6f746365 	svcvs	0x00746365
    2948:	74007372 	strvc	r7, [r0], #-882	; 0xfffffc8e
    294c:	5f676972 	svcpl	0x00676972
    2950:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2954:	6f630074 	svcvs	0x00630074
    2958:	5f306572 	svcpl	0x00306572
    295c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    2960:	6f630079 	svcvs	0x00630079
    2964:	5f316572 	svcpl	0x00316572
    2968:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    296c:	6f6c0079 	svcvs	0x006c0079
    2970:	61745f67 	cmnvs	r4, r7, ror #30
    2974:	63006c69 	movwvs	r6, #3177	; 0xc69
    2978:	3165726f 	cmncc	r5, pc, ror #4
    297c:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    2980:	6572006e 	ldrbvs	r0, [r2, #-110]!	; 0xffffff92
    2984:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2988:	73006465 	movwvc	r6, #1125	; 0x465
    298c:	765f7465 	ldrbvc	r7, [pc], -r5, ror #8
    2990:	00726162 	rsbseq	r6, r2, r2, ror #2
    2994:	75705f67 	ldrbvc	r5, [r0, #-3943]!	; 0xfffff099
    2998:	5f65736c 	svcpl	0x0065736c
    299c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    29a0:	625f6564 	subsvs	r6, pc, #100, 10	; 0x19000000
    29a4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    29a8:	705f6700 	subsvc	r6, pc, r0, lsl #14
    29ac:	65736c75 	ldrbvs	r6, [r3, #-3189]!	; 0xfffff38b
    29b0:	6961705f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    29b4:	79625f72 	stmdbvc	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    29b8:	00736574 	rsbseq	r6, r3, r4, ror r5
    29bc:	73625f5f 	cmnvc	r2, #380	; 0x17c
    29c0:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
    29c4:	5f747261 	svcpl	0x00747261
    29c8:	5f5f005f 	svcpl	0x005f005f
    29cc:	5f737362 	svcpl	0x00737362
    29d0:	5f646e65 	svcpl	0x00646e65
    29d4:	616d005f 	qdsubvs	r0, pc, sp	; <UNPREDICTABLE>
    29d8:	00636967 	rsbeq	r6, r3, r7, ror #18
    29dc:	6f635f67 	svcvs	0x00635f67
    29e0:	635f6665 	cmpvs	pc, #105906176	; 0x6500000
    29e4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    29e8:	63727300 	cmnvs	r2, #0, 6
    29ec:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    29f0:	632f3165 			; <UNDEFINED> instruction: 0x632f3165
    29f4:	3165726f 	cmncc	r5, pc, ror #4
    29f8:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    29fc:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    2a00:	6f635f67 	svcvs	0x00635f67
    2a04:	705f6665 	subsvc	r6, pc, r5, ror #12
    2a08:	5f726961 	svcpl	0x00726961
    2a0c:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    2a10:	6f6c0073 	svcvs	0x006c0073
    2a14:	65685f67 	strbvs	r5, [r8, #-3943]!	; 0xfffff099
    2a18:	75006461 	strvc	r6, [r0, #-1121]	; 0xfffffb9f
    2a1c:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    2a20:	7a00745f 	bvc	1fba4 <__core1_unwind_stub-0xfe045c>
    2a24:	5f6f7265 	svcpl	0x006f7265
    2a28:	00737362 	rsbseq	r7, r3, r2, ror #6
    2a2c:	75705f67 	ldrbvc	r5, [r0, #-3943]!	; 0xfffff099
    2a30:	5f65736c 	svcpl	0x0065736c
    2a34:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2a38:	5f5f0074 	svcpl	0x005f0074
    2a3c:	61746164 	cmnvs	r4, r4, ror #2
    2a40:	616f6c5f 	cmnvs	pc, pc, asr ip	; <UNPREDICTABLE>
    2a44:	005f5f64 	subseq	r5, pc, r4, ror #30
    2a48:	61645f5f 	cmnvs	r4, pc, asr pc
    2a4c:	655f6174 	ldrbvs	r6, [pc, #-372]	; 28e0 <__core1_unwind_stub-0xffd720>
    2a50:	5f5f646e 	svcpl	0x005f646e
    2a54:	726f6300 	rsbvc	r6, pc, #0, 6
    2a58:	735f3165 	cmpvc	pc, #1073741849	; 0x40000019
    2a5c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2a60:	625f7075 	subsvs	r7, pc, #117	; 0x75
    2a64:	0079646f 	rsbseq	r6, r9, pc, ror #8
    2a68:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
    2a6c:	5f6b6361 	svcpl	0x006b6361
    2a70:	5f706f74 	svcpl	0x00706f74
    2a74:	5f5f005f 	svcpl	0x005f005f
    2a78:	61746164 	cmnvs	r4, r4, ror #2
    2a7c:	6174735f 	cmnvs	r4, pc, asr r3
    2a80:	5f5f7472 	svcpl	0x005f7472
    2a84:	63727300 	cmnvs	r2, #0, 6
    2a88:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2a8c:	632f3165 			; <UNDEFINED> instruction: 0x632f3165
    2a90:	3165726f 	cmncc	r5, pc, ror #4
    2a94:	6174735f 	cmnvs	r4, pc, asr r3
    2a98:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a9c:	5f00632e 	svcpl	0x0000632e
    2aa0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    2aa4:	6f635f74 	svcvs	0x00635f74
    2aa8:	00316572 	eorseq	r6, r1, r2, ror r5
    2aac:	6d6d656d 	cfstr64vs	mvdx6, [sp, #-436]!	; 0xfffffe4c
    2ab0:	0065766f 	rsbeq	r7, r5, pc, ror #12
    2ab4:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    2ab8:	73007465 	movwvc	r7, #1125	; 0x465
    2abc:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    2ac0:	3165726f 	cmncc	r5, pc, ror #4
    2ac4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2ac8:	696d5f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    2acc:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    2ad0:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    2ad4:	73007970 	movwvc	r7, #2416	; 0x970
    2ad8:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    2adc:	3165726f 	cmncc	r5, pc, ror #4
    2ae0:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2ae4:	655f3165 	ldrbvs	r3, [pc, #-357]	; 2987 <__core1_unwind_stub-0xffd679>
    2ae8:	78646978 	stmdavc	r4!, {r3, r4, r5, r6, r8, fp, sp, lr}^
    2aec:	7574735f 	ldrbvc	r7, [r4, #-863]!	; 0xfffffca1
    2af0:	00532e62 	subseq	r2, r3, r2, ror #28
    2af4:	20554e47 	subscs	r4, r5, r7, asr #28
    2af8:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
    2afc:	0034332e 	eorseq	r3, r4, lr, lsr #6
    2b00:	5f554353 	svcpl	0x00554353
    2b04:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
    2b08:	615f6700 	cmpvs	pc, r0, lsl #14
    2b0c:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    2b10:	645f6f69 	ldrbvs	r6, [pc], #-3945	; 2b18 <__core1_unwind_stub-0xffd4e8>
    2b14:	00617461 	rsbeq	r7, r1, r1, ror #8
    2b18:	5f6d7261 	svcpl	0x006d7261
    2b1c:	635f6d6d 	cmpvs	pc, #6976	; 0x1b40
    2b20:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
    2b24:	5f396100 	svcpl	0x00396100
    2b28:	696e6173 	stmdbvs	lr!, {r0, r1, r4, r5, r6, r8, sp, lr}^
    2b2c:	657a6974 	ldrbvs	r6, [sl, #-2420]!	; 0xfffff68c
    2b30:	6665625f 			; <UNDEFINED> instruction: 0x6665625f
    2b34:	5f65726f 	svcpl	0x0065726f
    2b38:	00756d6d 	rsbseq	r6, r5, sp, ror #26
    2b3c:	5f756d6d 	svcpl	0x00756d6d
    2b40:	73006e6f 	movwvc	r6, #3695	; 0xe6f
    2b44:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2b48:	7875615f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
    2b4c:	6f6f705f 	svcvs	0x006f705f
    2b50:	324c006c 	subcc	r0, ip, #108	; 0x6c
    2b54:	54435f43 	strbpl	r5, [r3], #-3907	; 0xfffff0bd
    2b58:	67004c52 	smlsdvs	r0, r2, ip, r4
    2b5c:	6e61625f 	mcrvs	2, 3, r6, cr1, cr15, {2}
    2b60:	75705f6b 	ldrbvc	r5, [r0, #-3947]!	; 0xfffff095
    2b64:	5f65736c 	svcpl	0x0065736c
    2b68:	006c6573 	rsbeq	r6, ip, r3, ror r5
    2b6c:	5f544c41 	svcpl	0x00544c41
    2b70:	44495242 	strbmi	r5, [r9], #-578	; 0xfffffdbe
    2b74:	485f4547 	ldmdami	pc, {r0, r1, r2, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    2b78:	6c004632 	stcvs	6, cr4, [r0], {50}	; 0x32
    2b7c:	5f656e69 	svcpl	0x00656e69
    2b80:	66696873 			; <UNDEFINED> instruction: 0x66696873
    2b84:	6d6d0074 	stclvs	0, cr0, [sp, #-464]!	; 0xfffffe30
    2b88:	6f705f75 	svcvs	0x00705f75
    2b8c:	745f6c6f 	ldrbvc	r6, [pc], #-3183	; 2b94 <__core1_unwind_stub-0xffd46c>
    2b90:	615f6700 	cmpvs	pc, r0, lsl #14
    2b94:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 29d4 <__core1_unwind_stub-0xffd62c>
    2b98:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2b9c:	645f3361 	ldrbvs	r3, [pc], #-865	; 2ba4 <__core1_unwind_stub-0xffd45c>
    2ba0:	00637365 	rsbeq	r7, r3, r5, ror #6
    2ba4:	5f756d6d 	svcpl	0x00756d6d
    2ba8:	5f787561 	svcpl	0x00787561
    2bac:	6f6c6c61 	svcvs	0x006c6c61
    2bb0:	72610063 	rsbvc	r0, r1, #99	; 0x63
    2bb4:	61635f6d 	cmnvs	r3, sp, ror #30
    2bb8:	5f656863 	svcpl	0x00656863
    2bbc:	706d7564 	rsbvc	r7, sp, r4, ror #10
    2bc0:	6174735f 	cmnvs	r4, pc, asr r3
    2bc4:	00737574 	rsbseq	r7, r3, r4, ror r5
    2bc8:	5f6d7261 	svcpl	0x006d7261
    2bcc:	63616369 	cmnvs	r1, #-1543503871	; 0xa4000001
    2bd0:	695f6568 	ldmdbvs	pc, {r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    2bd4:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    2bd8:	74616469 	strbtvc	r6, [r1], #-1129	; 0xfffffb97
    2bdc:	6c615f65 	stclvs	15, cr5, [r1], #-404	; 0xfffffe6c
    2be0:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    2be4:	326c5f6d 	rsbcc	r5, ip, #436	; 0x1b4
    2be8:	5f73695f 	svcpl	0x0073695f
    2bec:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    2bf0:	0064656c 	rsbeq	r6, r4, ip, ror #10
    2bf4:	5f6d7261 	svcpl	0x006d7261
    2bf8:	685f6d6d 	ldmdavs	pc, {r0, r2, r3, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    2bfc:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    2c00:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    2c04:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    2c08:	6e6f5f65 	cdpvs	15, 6, cr5, cr15, cr5, {3}
    2c0c:	615f6700 	cmpvs	pc, r0, lsl #14
    2c10:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2a50 <__core1_unwind_stub-0xffd5b0>
    2c14:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2c18:	635f3361 	cmpvs	pc, #-2080374783	; 0x84000001
    2c1c:	61007273 	tstvs	r0, r3, ror r2
    2c20:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2a60 <__core1_unwind_stub-0xffd5a0>
    2c24:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    2c28:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    2c2c:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
    2c30:	00796461 	rsbseq	r6, r9, r1, ror #8
    2c34:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    2c38:	7874635f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    2c3c:	745f7300 	ldrbvc	r7, [pc], #-768	; 2c44 <__core1_unwind_stub-0xffd3bc>
    2c40:	735f6274 	cmpvc	pc, #116, 4	; 0x40000007
    2c44:	61726f74 	cmnvs	r2, r4, ror pc
    2c48:	41006567 	tstmi	r0, r7, ror #10
    2c4c:	425f544c 	subsmi	r5, pc, #76, 8	; 0x4c000000
    2c50:	47444952 	smlsldmi	r4, r4, r2, r9	; <UNPREDICTABLE>
    2c54:	32465f45 	subcc	r5, r6, #276	; 0x114
    2c58:	5f670048 	svcpl	0x00670048
    2c5c:	5f6d7261 	svcpl	0x006d7261
    2c60:	6467736d 	strbtvs	r7, [r7], #-877	; 0xfffffc93
    2c64:	5f30616d 	svcpl	0x0030616d
    2c68:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
    2c6c:	615f6700 	cmpvs	pc, r0, lsl #14
    2c70:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2ab0 <__core1_unwind_stub-0xffd550>
    2c74:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2c78:	635f3061 	cmpvs	pc, #97	; 0x61
    2c7c:	41007273 	tstmi	r0, r3, ror r2
    2c80:	425f544c 	subsmi	r5, pc, #76, 8	; 0x4c000000
    2c84:	47444952 	smlsldmi	r4, r4, r2, r9	; <UNPREDICTABLE>
    2c88:	32465f45 	subcc	r5, r6, #276	; 0x114
    2c8c:	72610053 	rsbvc	r0, r1, #83	; 0x53
    2c90:	61635f6d 	cmnvs	r3, sp, ror #30
    2c94:	5f656863 	svcpl	0x00656863
    2c98:	5f746567 	svcpl	0x00746567
    2c9c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2ca0:	41007375 	tstmi	r0, r5, ror r3
    2ca4:	425f544c 	subsmi	r5, pc, #76, 8	; 0x4c000000
    2ca8:	47444952 	smlsldmi	r4, r4, r2, r9	; <UNPREDICTABLE>
    2cac:	574c5f45 	strbpl	r5, [ip, -r5, asr #30]
    2cb0:	00463248 	subeq	r3, r6, r8, asr #4
    2cb4:	72615f67 	rsbvc	r5, r1, #412	; 0x19c
    2cb8:	32665f6d 	rsbcc	r5, r6, #436	; 0x1b4
    2cbc:	72695f68 	rsbvc	r5, r9, #104, 30	; 0x1a0
    2cc0:	655f3071 	ldrbvs	r3, [pc, #-113]	; 2c57 <__core1_unwind_stub-0xffd3a9>
    2cc4:	7261006e 	rsbvc	r0, r1, #110	; 0x6e
    2cc8:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    2ccc:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    2cd0:	726c7463 	rsbvc	r7, ip, #1660944384	; 0x63000000
    2cd4:	615f6700 	cmpvs	pc, r0, lsl #14
    2cd8:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2b18 <__core1_unwind_stub-0xffd4e8>
    2cdc:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2ce0:	645f3161 	ldrbvs	r3, [pc], #-353	; 2ce8 <__core1_unwind_stub-0xffd318>
    2ce4:	00637365 	rsbeq	r7, r3, r5, ror #6
    2ce8:	6c746361 	ldclvs	3, cr6, [r4], #-388	; 0xfffffe7c
    2cec:	70620072 	rsbvc	r0, r2, r2, ror r0
    2cf0:	006e6f5f 	rsbeq	r6, lr, pc, asr pc
    2cf4:	6f72657a 	svcvs	0x0072657a
    2cf8:	615f6700 	cmpvs	pc, r0, lsl #14
    2cfc:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2b3c <__core1_unwind_stub-0xffd4c4>
    2d00:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2d04:	645f3261 	ldrbvs	r3, [pc], #-609	; 2d0c <__core1_unwind_stub-0xffd2f4>
    2d08:	00637365 	rsbeq	r7, r3, r5, ror #6
    2d0c:	2f637273 	svccs	0x00637273
    2d10:	5f6d7261 	svcpl	0x006d7261
    2d14:	5f6d656d 	svcpl	0x006d656d
    2d18:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2d1c:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
    2d20:	5f670063 	svcpl	0x00670063
    2d24:	64697262 	strbtvs	r7, [r9], #-610	; 0xfffffd9e
    2d28:	725f6567 	subsvc	r6, pc, #432013312	; 0x19c00000
    2d2c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    2d30:	6d726100 	ldfvse	f6, [r2, #-0]
    2d34:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2d38:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2d3c:	635f7075 	cmpvs	pc, #117	; 0x75
    2d40:	3165726f 	cmncc	r5, pc, ror #4
    2d44:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    2d48:	72610073 	rsbvc	r0, r1, #115	; 0x73
    2d4c:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
    2d50:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2d54:	706d735f 	rsbvc	r7, sp, pc, asr r3
    2d58:	646e615f 	strbtvs	r6, [lr], #-351	; 0xfffffea1
    2d5c:	7563735f 	strbvc	r7, [r3, #-863]!	; 0xfffffca1
    2d60:	73636300 	cmnvc	r3, #0, 6
    2d64:	00726469 	rsbseq	r6, r2, r9, ror #8
    2d68:	73796177 	cmnvc	r9, #-1073741795	; 0xc000001d
    2d6c:	615f6700 	cmpvs	pc, r0, lsl #14
    2d70:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2bb0 <__core1_unwind_stub-0xffd450>
    2d74:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2d78:	635f3261 	cmpvs	pc, #268435462	; 0x10000006
    2d7c:	63007273 	movwvs	r7, #627	; 0x273
    2d80:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    2d84:	61765f65 	cmnvs	r6, r5, ror #30
    2d88:	6170735f 	cmnvs	r0, pc, asr r3
    2d8c:	635f6563 	cmpvs	pc, #415236096	; 0x18c00000
    2d90:	3165726f 	cmncc	r5, pc, ror #4
    2d94:	7264645f 	rsbvc	r6, r4, #1593835520	; 0x5f000000
    2d98:	6d726100 	ldfvse	f6, [r2, #-0]
    2d9c:	5f6d6d5f 	svcpl	0x006d6d5f
    2da0:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    2da4:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
    2da8:	5f6e6f69 	svcpl	0x006e6f69
    2dac:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2db0:	72610074 	rsbvc	r0, r1, #116	; 0x74
    2db4:	6d6d5f6d 	stclvs	15, cr5, [sp, #-436]!	; 0xfffffe4c
    2db8:	65735f75 	ldrbvs	r5, [r3, #-3957]!	; 0xfffff08b
    2dbc:	5f707574 	svcpl	0x00707574
    2dc0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2dc4:	72610030 	rsbvc	r0, r1, #48	; 0x30
    2dc8:	65735f6d 	ldrbvs	r5, [r3, #-3949]!	; 0xfffff093
    2dcc:	61635f74 	smcvs	13812	; 0x35f4
    2dd0:	5f656863 	svcpl	0x00656863
    2dd4:	73746962 	cmnvc	r4, #1605632	; 0x188000
    2dd8:	6d726100 	ldfvse	f6, [r2, #-0]
    2ddc:	6163645f 	cmnvs	r3, pc, asr r4
    2de0:	5f656863 	svcpl	0x00656863
    2de4:	61656c63 	cmnvs	r5, r3, ror #24
    2de8:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
    2dec:	696c6176 	stmdbvs	ip!, {r1, r2, r4, r5, r6, r8, sp, lr}^
    2df0:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    2df4:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    2df8:	615f6700 	cmpvs	pc, r0, lsl #14
    2dfc:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    2e00:	635f6672 	cmpvs	pc, #119537664	; 0x7200000
    2e04:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2e08:	67007265 	strvs	r7, [r0, -r5, ror #4]
    2e0c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2e10:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    2e14:	34616d64 	strbtcc	r6, [r1], #-3428	; 0xfffff29c
    2e18:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    2e1c:	656e0063 	strbvs	r0, [lr, #-99]!	; 0xffffff9d
    2e20:	74006465 	strvc	r6, [r0], #-1125	; 0xfffffb9b
    2e24:	6f5f6274 	svcvs	0x005f6274
    2e28:	67007475 	smlsdxvs	r0, r5, r4, r7
    2e2c:	6e61625f 	mcrvs	2, 3, r6, cr1, cr15, {2}
    2e30:	6f635f6b 	svcvs	0x00635f6b
    2e34:	735f6665 	cmpvc	pc, #105906176	; 0x6500000
    2e38:	73006c65 	movwvc	r6, #3173	; 0xc65
    2e3c:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2e40:	6f6f705f 	svcvs	0x006f705f
    2e44:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    2e48:	61635f6d 	cmnvs	r3, sp, ror #30
    2e4c:	5f656863 	svcpl	0x00656863
    2e50:	5f746573 	svcpl	0x00746573
    2e54:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    2e58:	0064656c 	rsbeq	r6, r4, ip, ror #10
    2e5c:	6469706d 	strbtvs	r7, [r9], #-109	; 0xffffff93
    2e60:	63640072 	cmnvs	r4, #114	; 0x72
    2e64:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
    2e68:	006e6f5f 	rsbeq	r6, lr, pc, asr pc
    2e6c:	5f544c41 	svcpl	0x00544c41
    2e70:	44495242 	strbmi	r5, [r9], #-578	; 0xfffffdbe
    2e74:	655f4547 	ldrbvs	r4, [pc, #-1351]	; 2935 <__core1_unwind_stub-0xffd6cb>
    2e78:	615f6700 	cmpvs	pc, r0, lsl #14
    2e7c:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2cbc <__core1_unwind_stub-0xffd344>
    2e80:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2e84:	635f3461 	cmpvs	pc, #1627389952	; 0x61000000
    2e88:	63007273 	movwvs	r7, #627	; 0x273
    2e8c:	6c657373 	stclvs	3, cr7, [r5], #-460	; 0xfffffe34
    2e90:	5f670072 	svcpl	0x00670072
    2e94:	5f6d7261 	svcpl	0x006d7261
    2e98:	6467736d 	strbtvs	r7, [r7], #-877	; 0xfffffc93
    2e9c:	5f31616d 	svcpl	0x0031616d
    2ea0:	00727363 	rsbseq	r7, r2, r3, ror #6
    2ea4:	7961645f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
    2ea8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    2eac:	706f0074 	rsbvc	r0, pc, r4, ror r0	; <UNPREDICTABLE>
    2eb0:	74706f74 	ldrbtvc	r6, [r0], #-3956	; 0xfffff08c
    2eb4:	5f747300 	svcpl	0x00747300
    2eb8:	736b6c62 	cmnvc	fp, #25088	; 0x6200
    2ebc:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2ec0:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    2ec4:	5f323374 	svcpl	0x00323374
    2ec8:	5f5f0074 	svcpl	0x005f0074
    2ecc:	6e696c6e 	cdpvs	12, 6, cr6, cr9, cr14, {3}
    2ed0:	00745f6b 	rsbseq	r5, r4, fp, ror #30
    2ed4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2ed8:	72656e5f 	rsbvc	r6, r5, #1520	; 0x5f0
    2edc:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
    2ee0:	6170735f 	cmnvs	r0, pc, asr r3
    2ee4:	00346572 	eorseq	r6, r4, r2, ror r5
    2ee8:	61755f73 	cmnvs	r5, r3, ror pc
    2eec:	00317472 	eorseq	r7, r1, r2, ror r4
    2ef0:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    2ef4:	00745f6f 	rsbseq	r5, r4, pc, ror #30
    2ef8:	7073346c 	rsbsvc	r3, r3, ip, ror #8
    2efc:	5f7a685f 	svcpl	0x007a685f
    2f00:	00323375 	eorseq	r3, r2, r5, ror r3
    2f04:	6574706f 	ldrbvs	r7, [r4, #-111]!	; 0xffffff91
    2f08:	73007272 	movwvc	r7, #626	; 0x272
    2f0c:	6c625f74 	stclvs	15, cr5, [r2], #-464	; 0xfffffe30
    2f10:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    2f14:	5f747300 	svcpl	0x00747300
    2f18:	00766564 	rsbseq	r6, r6, r4, ror #10
    2f1c:	6e5f7674 	mrcvs	6, 2, r7, cr15, cr4, {3}
    2f20:	00636573 	rsbeq	r6, r3, r3, ror r5
    2f24:	6f6d5f5f 	svcvs	0x006d5f5f
    2f28:	745f6564 	ldrbvc	r6, [pc], #-1380	; 2f30 <__core1_unwind_stub-0xffd0d0>
    2f2c:	74706f00 	ldrbtvc	r6, [r0], #-3840	; 0xfffff100
    2f30:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    2f34:	61750074 	cmnvs	r5, r4, ror r0
    2f38:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
    2f3c:	6f696474 	svcvs	0x00696474
    2f40:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2f44:	6c72635f 	ldclvs	3, cr6, [r2], #-380	; 0xfffffe84
    2f48:	74730066 	ldrbtvc	r0, [r3], #-102	; 0xffffff9a
    2f4c:	6469675f 	strbtvs	r6, [r9], #-1887	; 0xfffff8a1
    2f50:	5f747300 	svcpl	0x00747300
    2f54:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    2f58:	75616200 	strbvc	r6, [r1, #-512]!	; 0xfffffe00
    2f5c:	74730064 	ldrbtvc	r0, [r3], #-100	; 0xffffff9c
    2f60:	696c6e5f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    2f64:	5f006b6e 	svcpl	0x00006b6e
    2f68:	616e7a74 	smcvs	59300	; 0xe7a4
    2f6c:	7400656d 	strvc	r6, [r0], #-1389	; 0xfffffa93
    2f70:	73656d69 	cmnvc	r5, #6720	; 0x1a40
    2f74:	00636570 	rsbeq	r6, r3, r0, ror r5
    2f78:	755f7473 	ldrbvc	r7, [pc, #-1139]	; 2b0d <__core1_unwind_stub-0xffd4f3>
    2f7c:	65006469 	strvs	r6, [r0, #-1129]	; 0xfffffb97
    2f80:	7269766e 	rsbvc	r7, r9, #115343360	; 0x6e00000
    2f84:	74006e6f 	strvc	r6, [r0], #-3695	; 0xfffff191
    2f88:	5f656d69 	svcpl	0x00656d69
    2f8c:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    2f90:	6f6e695f 	svcvs	0x006e695f
    2f94:	69745f00 	ldmdbvs	r4!, {r8, r9, sl, fp, ip, lr}^
    2f98:	6f7a656d 	svcvs	0x007a656d
    2f9c:	5f00656e 	svcpl	0x0000656e
    2fa0:	6565736c 	strbvs	r7, [r5, #-876]!	; 0xfffffc94
    2fa4:	5f5f006b 	svcpl	0x005f006b
    2fa8:	5f766564 	svcpl	0x00766564
    2fac:	695f0074 	ldmdbvs	pc, {r2, r4, r5, r6}^	; <UNPREDICTABLE>
    2fb0:	74746173 	ldrbtvc	r6, [r4], #-371	; 0xfffffe8d
    2fb4:	706f0079 	rsbvc	r0, pc, r9, ror r0	; <UNPREDICTABLE>
    2fb8:	646e6974 	strbtvs	r6, [lr], #-2420	; 0xfffff68c
    2fbc:	635f7300 	cmpvs	pc, #0, 6
    2fc0:	00666c72 	rsbeq	r6, r6, r2, ror ip
    2fc4:	69675f5f 	stmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    2fc8:	00745f64 	rsbseq	r5, r4, r4, ror #30
    2fcc:	2f637273 	svccs	0x00637273
    2fd0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    2fd4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    2fd8:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    2fdc:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    2fe0:	6c5f746e 	cfldrdvs	mvd7, [pc], {110}	; 0x6e
    2fe4:	74736165 	ldrbtvc	r6, [r3], #-357	; 0xfffffe9b
    2fe8:	745f3436 	ldrbvc	r3, [pc], #-1078	; 2ff0 <__core1_unwind_stub-0xffd010>
    2fec:	5f747300 	svcpl	0x00747300
    2ff0:	6d69746d 	cfstrdvs	mvd7, [r9, #-436]!	; 0xfffffe4c
    2ff4:	625f5f00 	subsvs	r5, pc, #0, 30
    2ff8:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
    2ffc:	745f657a 	ldrbvc	r6, [pc], #-1402	; 3004 <__core1_unwind_stub-0xffcffc>
    3000:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
    3004:	5f5f0074 	svcpl	0x005f0074
    3008:	5f646975 	svcpl	0x00646975
    300c:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
    3010:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    3014:	5f747300 	svcpl	0x00747300
    3018:	6d697461 	cfstrdvs	mvd7, [r9, #-388]!	; 0xfffffe7c
    301c:	72617500 	rsbvc	r7, r1, #0, 10
    3020:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
    3024:	5f6f6964 	svcpl	0x006f6964
    3028:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    302c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    3030:	74003174 	strvc	r3, [r0], #-372	; 0xfffffe8c
    3034:	65735f76 	ldrbvs	r5, [r3, #-3958]!	; 0xfffff08a
    3038:	68770063 	ldmdavs	r7!, {r0, r1, r5, r6}^
    303c:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xfffff19b
    3040:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 2148 <__core1_unwind_stub-0xffdeb8>
    3044:	33746e69 	cmncc	r4, #1680	; 0x690
    3048:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    304c:	735f7473 	cmpvc	pc, #1929379840	; 0x73000000
    3050:	00657a69 	rsbeq	r7, r5, r9, ror #20
    3054:	666f5f5f 	uqsaxvs	r5, pc, pc	; <UNPREDICTABLE>
    3058:	00745f66 	rsbseq	r5, r4, r6, ror #30
    305c:	635f7473 	cmpvs	pc, #1929379840	; 0x73000000
    3060:	006d6974 	rsbeq	r6, sp, r4, ror r9
    3064:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3068:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    306c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    3070:	625f5f00 	subsvs	r5, pc, #0, 30
    3074:	6e636b6c 	vnmulvs.f64	d22, d3, d28
    3078:	00745f74 	rsbseq	r5, r4, r4, ror pc
    307c:	725f7473 	subsvc	r7, pc, #1929379840	; 0x73000000
    3080:	00766564 	rsbseq	r6, r6, r4, ror #10
    3084:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3088:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    308c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3090:	2f636367 	svccs	0x00636367
    3094:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    3098:	612f6769 			; <UNDEFINED> instruction: 0x612f6769
    309c:	6c2f6d72 	stcvs	13, cr6, [pc], #-456	; 2edc <__core1_unwind_stub-0xffd124>
    30a0:	66316269 	ldrtvs	r6, [r1], -r9, ror #4
    30a4:	73636e75 	cmnvc	r3, #1872	; 0x750
    30a8:	2f00532e 	svccs	0x0000532e
    30ac:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    30b0:	63672f64 	cmnvs	r7, #100, 30	; 0x190
    30b4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    30b8:	6f6e2d6d 	svcvs	0x006e2d6d
    30bc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    30c0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    30c4:	6b396c47 	blvs	e5e1e8 <__core1_unwind_stub-0x1a1e18>
    30c8:	672f3954 			; <UNDEFINED> instruction: 0x672f3954
    30cc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    30d0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    30d4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    30d8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    30dc:	322d392d 	eorcc	r3, sp, #737280	; 0xb4000
    30e0:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    30e4:	622f3471 	eorvs	r3, pc, #1895825408	; 0x71000000
    30e8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    30ec:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    30f0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    30f4:	61652d65 	cmnvs	r5, r5, ror #26
    30f8:	6c2f6962 			; <UNDEFINED> instruction: 0x6c2f6962
    30fc:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3100:	2e2e0063 	cdpcs	0, 2, cr0, cr14, cr3, {3}
    3104:	2f2e2e2f 	svccs	0x002e2e2f
    3108:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 3058 <__core1_unwind_stub-0xffcfa8>
    310c:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3110:	6f632f63 	svcvs	0x00632f63
    3114:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3118:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    311c:	6170622f 	cmnvs	r0, pc, lsr #4
    3120:	532e6962 			; <UNDEFINED> instruction: 0x532e6962
    3124:	61736900 	cmnvs	r3, r0, lsl #18
    3128:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    312c:	5f70665f 	svcpl	0x0070665f
    3130:	006c6264 	rsbeq	r6, ip, r4, ror #4
    3134:	5f6d7261 	svcpl	0x006d7261
    3138:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    313c:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    3140:	0074786d 	rsbseq	r7, r4, sp, ror #16
    3144:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3148:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    314c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3150:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3154:	33326d78 	teqcc	r2, #120, 26	; 0x1e00
    3158:	4d524100 	ldfmie	f4, [r2, #-0]
    315c:	0051455f 	subseq	r4, r1, pc, asr r5
    3160:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3164:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3168:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    316c:	31316d72 	teqcc	r1, r2, ror sp
    3170:	32743635 	rsbscc	r3, r4, #55574528	; 0x3500000
    3174:	69007366 	stmdbvs	r0, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    3178:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    317c:	745f7469 	ldrbvc	r7, [pc], #-1129	; 3184 <__core1_unwind_stub-0xffce7c>
    3180:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    3184:	49445500 	stmdbmi	r4, {r8, sl, ip, lr}^
    3188:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    318c:	52415400 	subpl	r5, r1, #0, 8
    3190:	5f544547 	svcpl	0x00544547
    3194:	5f555043 	svcpl	0x00555043
    3198:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    319c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    31a0:	726f6337 	rsbvc	r6, pc, #-603979776	; 0xdc000000
    31a4:	61786574 	cmnvs	r8, r4, ror r5
    31a8:	5f003335 	svcpl	0x00003335
    31ac:	6964755f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    31b0:	646f6d76 	strbtvs	r6, [pc], #-3446	; 31b8 <__core1_unwind_stub-0xffce48>
    31b4:	00346964 	eorseq	r6, r4, r4, ror #18
    31b8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    31bc:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    31c0:	4d385f48 	ldcmi	15, cr5, [r8, #-288]!	; 0xfffffee0
    31c4:	5341425f 	movtpl	r4, #4703	; 0x125f
    31c8:	41540045 	cmpmi	r4, r5, asr #32
    31cc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    31d0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    31d4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    31d8:	00303138 	eorseq	r3, r0, r8, lsr r1
    31dc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    31e0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    31e4:	785f5550 	ldmdavc	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
    31e8:	656e6567 	strbvs	r6, [lr, #-1383]!	; 0xfffffa99
    31ec:	52410031 	subpl	r0, r1, #49	; 0x31
    31f0:	43505f4d 	cmpmi	r0, #308	; 0x134
    31f4:	41415f53 	cmpmi	r1, r3, asr pc
    31f8:	5f534350 	svcpl	0x00534350
    31fc:	4d4d5749 	stclmi	7, cr5, [sp, #-292]	; 0xfffffedc
    3200:	42005458 	andmi	r5, r0, #88, 8	; 0x58000000
    3204:	5f455341 	svcpl	0x00455341
    3208:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    320c:	4200305f 	andmi	r3, r0, #95	; 0x5f
    3210:	5f455341 	svcpl	0x00455341
    3214:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3218:	4200325f 	andmi	r3, r0, #-268435451	; 0xf0000005
    321c:	5f455341 	svcpl	0x00455341
    3220:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3224:	4200335f 	andmi	r3, r0, #2080374785	; 0x7c000001
    3228:	5f455341 	svcpl	0x00455341
    322c:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3230:	4200345f 	andmi	r3, r0, #1593835520	; 0x5f000000
    3234:	5f455341 	svcpl	0x00455341
    3238:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    323c:	4200365f 	andmi	r3, r0, #99614720	; 0x5f00000
    3240:	5f455341 	svcpl	0x00455341
    3244:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3248:	5400375f 	strpl	r3, [r0], #-1887	; 0xfffff8a1
    324c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3250:	50435f54 	subpl	r5, r3, r4, asr pc
    3254:	73785f55 	cmnvc	r8, #340	; 0x154
    3258:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    325c:	61736900 	cmnvs	r3, r0, lsl #18
    3260:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3264:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    3268:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    326c:	52415400 	subpl	r5, r1, #0, 8
    3270:	5f544547 	svcpl	0x00544547
    3274:	5f555043 	svcpl	0x00555043
    3278:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    327c:	336d7865 	cmncc	sp, #6619136	; 0x650000
    3280:	53550033 	cmppl	r5, #51	; 0x33
    3284:	70797449 	rsbsvc	r7, r9, r9, asr #8
    3288:	41540065 	cmpmi	r4, r5, rrx
    328c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3290:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3294:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3298:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    329c:	73690069 	cmnvc	r9, #105	; 0x69
    32a0:	6f6e5f61 	svcvs	0x006e5f61
    32a4:	00746962 	rsbseq	r6, r4, r2, ror #18
    32a8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    32ac:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    32b0:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    32b4:	31316d72 	teqcc	r1, r2, ror sp
    32b8:	7a6a3637 	bvc	1a90b9c <__end__+0xa74b7c>
    32bc:	41007366 	tstmi	r0, r6, ror #6
    32c0:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    32c4:	555f5343 	ldrbpl	r5, [pc, #-835]	; 2f89 <__core1_unwind_stub-0xffd077>
    32c8:	4f4e4b4e 	svcmi	0x004e4b4e
    32cc:	54004e57 	strpl	r4, [r0], #-3671	; 0xfffff1a9
    32d0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    32d4:	50435f54 	subpl	r5, r3, r4, asr pc
    32d8:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    32dc:	0065396d 	rsbeq	r3, r5, sp, ror #18
    32e0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    32e4:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    32e8:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    32ec:	61004a45 	tstvs	r0, r5, asr #20
    32f0:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    32f4:	6d736663 	ldclvs	6, cr6, [r3, #-396]!	; 0xfffffe74
    32f8:	6174735f 	cmnvs	r4, pc, asr r3
    32fc:	61006574 	tstvs	r0, r4, ror r5
    3300:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    3304:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    3308:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    330c:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
    3310:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
    3314:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    3318:	73690073 	cmnvc	r9, #115	; 0x73
    331c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3320:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    3324:	5f5f0063 	svcpl	0x005f0063
    3328:	5f7a6c63 	svcpl	0x007a6c63
    332c:	00626174 	rsbeq	r6, r2, r4, ror r1
    3330:	5f4d5241 	svcpl	0x004d5241
    3334:	61004356 	tstvs	r0, r6, asr r3
    3338:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    333c:	5f686372 	svcpl	0x00686372
    3340:	61637378 	smcvs	14136	; 0x3738
    3344:	4100656c 	tstmi	r0, ip, ror #10
    3348:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    334c:	52410045 	subpl	r0, r1, #69	; 0x45
    3350:	53565f4d 	cmppl	r6, #308	; 0x134
    3354:	4d524100 	ldfmie	f4, [r2, #-0]
    3358:	0045475f 	subeq	r4, r5, pc, asr r7
    335c:	5f6d7261 	svcpl	0x006d7261
    3360:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    3364:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    3368:	61676e6f 	cmnvs	r7, pc, ror #28
    336c:	63006d72 	movwvs	r6, #3442	; 0xd72
    3370:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    3374:	66207865 	strtvs	r7, [r0], -r5, ror #16
    3378:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    337c:	52415400 	subpl	r5, r1, #0, 8
    3380:	5f544547 	svcpl	0x00544547
    3384:	5f555043 	svcpl	0x00555043
    3388:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    338c:	31617865 	cmncc	r1, r5, ror #16
    3390:	41540035 	cmpmi	r4, r5, lsr r0
    3394:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3398:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    339c:	3761665f 			; <UNDEFINED> instruction: 0x3761665f
    33a0:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    33a4:	52415400 	subpl	r5, r1, #0, 8
    33a8:	5f544547 	svcpl	0x00544547
    33ac:	5f555043 	svcpl	0x00555043
    33b0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    33b4:	31617865 	cmncc	r1, r5, ror #16
    33b8:	52410037 	subpl	r0, r1, #55	; 0x37
    33bc:	54475f4d 	strbpl	r5, [r7], #-3917	; 0xfffff0b3
    33c0:	52415400 	subpl	r5, r1, #0, 8
    33c4:	5f544547 	svcpl	0x00544547
    33c8:	5f555043 	svcpl	0x00555043
    33cc:	766f656e 	strbtvc	r6, [pc], -lr, ror #10
    33d0:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
    33d4:	5400316e 	strpl	r3, [r0], #-366	; 0xfffffe92
    33d8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    33dc:	50435f54 	subpl	r5, r3, r4, asr pc
    33e0:	6f635f55 	svcvs	0x00635f55
    33e4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    33e8:	00663472 	rsbeq	r3, r6, r2, ror r4
    33ec:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    33f0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    33f4:	45375f48 	ldrmi	r5, [r7, #-3912]!	; 0xfffff0b8
    33f8:	4154004d 	cmpmi	r4, sp, asr #32
    33fc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3400:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3404:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3408:	61786574 	cmnvs	r8, r4, ror r5
    340c:	68003231 	stmdavs	r0, {r0, r4, r5, r9, ip, sp}
    3410:	76687361 	strbtvc	r7, [r8], -r1, ror #6
    3414:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 341c <__core1_unwind_stub-0xffcbe4>
    3418:	53414200 	movtpl	r4, #4608	; 0x1200
    341c:	52415f45 	subpl	r5, r1, #276	; 0x114
    3420:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    3424:	69005a4b 	stmdbvs	r0, {r0, r1, r3, r6, r9, fp, ip, lr}
    3428:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    342c:	00737469 	rsbseq	r7, r3, r9, ror #8
    3430:	5f6d7261 	svcpl	0x006d7261
    3434:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3438:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    343c:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    3440:	61007669 	tstvs	r0, r9, ror #12
    3444:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    3448:	645f7570 	ldrbvs	r7, [pc], #-1392	; 3450 <__core1_unwind_stub-0xffcbb0>
    344c:	00637365 	rsbeq	r7, r3, r5, ror #6
    3450:	5f617369 	svcpl	0x00617369
    3454:	5f746962 	svcpl	0x00746962
    3458:	36317066 	ldrtcc	r7, [r1], -r6, rrx
    345c:	4d524100 	ldfmie	f4, [r2, #-0]
    3460:	0049485f 	subeq	r4, r9, pc, asr r8
    3464:	5f617369 	svcpl	0x00617369
    3468:	5f746962 	svcpl	0x00746962
    346c:	76696461 	strbtvc	r6, [r9], -r1, ror #8
    3470:	52415400 	subpl	r5, r1, #0, 8
    3474:	5f544547 	svcpl	0x00544547
    3478:	5f555043 	svcpl	0x00555043
    347c:	316d7261 	cmncc	sp, r1, ror #4
    3480:	6a363331 	bvs	d9014c <__core1_unwind_stub-0x26feb4>
    3484:	41540073 	cmpmi	r4, r3, ror r0
    3488:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    348c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3490:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3494:	41540038 	cmpmi	r4, r8, lsr r0
    3498:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    349c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    34a0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    34a4:	41540039 	cmpmi	r4, r9, lsr r0
    34a8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    34ac:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    34b0:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    34b4:	61003632 	tstvs	r0, r2, lsr r6
    34b8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    34bc:	5f686372 	svcpl	0x00686372
    34c0:	65736d63 	ldrbvs	r6, [r3, #-3427]!	; 0xfffff29d
    34c4:	52415400 	subpl	r5, r1, #0, 8
    34c8:	5f544547 	svcpl	0x00544547
    34cc:	5f555043 	svcpl	0x00555043
    34d0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    34d4:	346d7865 	strbtcc	r7, [sp], #-2149	; 0xfffff79b
    34d8:	52415400 	subpl	r5, r1, #0, 8
    34dc:	5f544547 	svcpl	0x00544547
    34e0:	5f555043 	svcpl	0x00555043
    34e4:	316d7261 	cmncc	sp, r1, ror #4
    34e8:	54006530 	strpl	r6, [r0], #-1328	; 0xfffffad0
    34ec:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    34f0:	50435f54 	subpl	r5, r3, r4, asr pc
    34f4:	6f635f55 	svcvs	0x00635f55
    34f8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    34fc:	6900376d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}
    3500:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3504:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    3508:	00357670 	eorseq	r7, r5, r0, ror r6
    350c:	5f6d7261 	svcpl	0x006d7261
    3510:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
    3514:	646f635f 	strbtvs	r6, [pc], #-863	; 351c <__core1_unwind_stub-0xffcae4>
    3518:	52410065 	subpl	r0, r1, #101	; 0x65
    351c:	43505f4d 	cmpmi	r0, #308	; 0x134
    3520:	41415f53 	cmpmi	r1, r3, asr pc
    3524:	00534350 	subseq	r4, r3, r0, asr r3
    3528:	5f617369 	svcpl	0x00617369
    352c:	5f746962 	svcpl	0x00746962
    3530:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3534:	00325f38 	eorseq	r5, r2, r8, lsr pc
    3538:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    353c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    3540:	4d335f48 	ldcmi	15, cr5, [r3, #-288]!	; 0xfffffee0
    3544:	52415400 	subpl	r5, r1, #0, 8
    3548:	5f544547 	svcpl	0x00544547
    354c:	5f555043 	svcpl	0x00555043
    3550:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3554:	31617865 	cmncc	r1, r5, ror #16
    3558:	726f6337 	rsbvc	r6, pc, #-603979776	; 0xdc000000
    355c:	61786574 	cmnvs	r8, r4, ror r5
    3560:	41540037 	cmpmi	r4, r7, lsr r0
    3564:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3568:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    356c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3570:	74303137 	ldrtvc	r3, [r0], #-311	; 0xfffffec9
    3574:	6d726100 	ldfvse	f6, [r2, #-0]
    3578:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    357c:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    3580:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    3584:	73690032 	cmnvc	r9, #50	; 0x32
    3588:	756e5f61 	strbvc	r5, [lr, #-3937]!	; 0xfffff09f
    358c:	69625f6d 	stmdbvs	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3590:	54007374 	strpl	r7, [r0], #-884	; 0xfffffc8c
    3594:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3598:	50435f54 	subpl	r5, r3, r4, asr pc
    359c:	6f635f55 	svcvs	0x00635f55
    35a0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    35a4:	6c70306d 	ldclvs	0, cr3, [r0], #-436	; 0xfffffe4c
    35a8:	6d737375 	ldclvs	3, cr7, [r3, #-468]!	; 0xfffffe2c
    35ac:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    35b0:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    35b4:	00796c70 	rsbseq	r6, r9, r0, ror ip
    35b8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    35bc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    35c0:	655f5550 	ldrbvs	r5, [pc, #-1360]	; 3078 <__core1_unwind_stub-0xffcf88>
    35c4:	6f6e7978 	svcvs	0x006e7978
    35c8:	00316d73 	eorseq	r6, r1, r3, ror sp
    35cc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    35d0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    35d4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    35d8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    35dc:	32357278 	eorscc	r7, r5, #120, 4	; 0x80000007
    35e0:	61736900 	cmnvs	r3, r0, lsl #18
    35e4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    35e8:	6964745f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    35ec:	72700076 	rsbsvc	r0, r0, #118	; 0x76
    35f0:	72656665 	rsbvc	r6, r5, #105906176	; 0x6500000
    35f4:	6f656e5f 	svcvs	0x00656e5f
    35f8:	6f665f6e 	svcvs	0x00665f6e
    35fc:	34365f72 	ldrtcc	r5, [r6], #-3954	; 0xfffff08e
    3600:	73746962 	cmnvc	r4, #1605632	; 0x188000
    3604:	61736900 	cmnvs	r3, r0, lsl #18
    3608:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    360c:	3170665f 	cmncc	r0, pc, asr r6
    3610:	6c6d6636 	stclvs	6, cr6, [sp], #-216	; 0xffffff28
    3614:	52415400 	subpl	r5, r1, #0, 8
    3618:	5f544547 	svcpl	0x00544547
    361c:	5f555043 	svcpl	0x00555043
    3620:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3624:	33617865 	cmncc	r1, #6619136	; 0x650000
    3628:	41540032 	cmpmi	r4, r2, lsr r0
    362c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3630:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3634:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3638:	61786574 	cmnvs	r8, r4, ror r5
    363c:	69003533 	stmdbvs	r0, {r0, r1, r4, r5, r8, sl, ip, sp}
    3640:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3644:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    3648:	63363170 	teqvs	r6, #112, 2
    364c:	00766e6f 	rsbseq	r6, r6, pc, ror #28
    3650:	70736e75 	rsbsvc	r6, r3, r5, ror lr
    3654:	5f766365 	svcpl	0x00766365
    3658:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    365c:	0073676e 	rsbseq	r6, r3, lr, ror #14
    3660:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3664:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3668:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    366c:	31316d72 	teqcc	r1, r2, ror sp
    3670:	32743635 	rsbscc	r3, r4, #55574528	; 0x3500000
    3674:	41540073 	cmpmi	r4, r3, ror r0
    3678:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    367c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3680:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3684:	61786574 	cmnvs	r8, r4, ror r5
    3688:	6f633537 	svcvs	0x00633537
    368c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3690:	00353561 	eorseq	r3, r5, r1, ror #10
    3694:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3698:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    369c:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    36a0:	36303661 	ldrtcc	r3, [r0], -r1, ror #12
    36a4:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    36a8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    36ac:	50435f54 	subpl	r5, r3, r4, asr pc
    36b0:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    36b4:	3632396d 	ldrtcc	r3, [r2], -sp, ror #18
    36b8:	00736a65 	rsbseq	r6, r3, r5, ror #20
    36bc:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    36c0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    36c4:	54345f48 	ldrtpl	r5, [r4], #-3912	; 0xfffff0b8
    36c8:	61736900 	cmnvs	r3, r0, lsl #18
    36cc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    36d0:	7972635f 	ldmdbvc	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    36d4:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
    36d8:	5f6d7261 	svcpl	0x006d7261
    36dc:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    36e0:	5f6e695f 	svcpl	0x006e695f
    36e4:	75716573 	ldrbvc	r6, [r1, #-1395]!	; 0xfffffa8d
    36e8:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xfffff19b
    36ec:	61736900 	cmnvs	r3, r0, lsl #18
    36f0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    36f4:	0062735f 	rsbeq	r7, r2, pc, asr r3
    36f8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    36fc:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    3700:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    3704:	73690045 	cmnvc	r9, #69	; 0x45
    3708:	65665f61 	strbvs	r5, [r6, #-3937]!	; 0xfffff09f
    370c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    3710:	73690065 	cmnvc	r9, #101	; 0x65
    3714:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3718:	6d735f74 	ldclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    371c:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    3720:	61006c75 	tstvs	r0, r5, ror ip
    3724:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    3728:	5f676e61 	svcpl	0x00676e61
    372c:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    3730:	6f5f7475 	svcvs	0x005f7475
    3734:	63656a62 	cmnvs	r5, #401408	; 0x62000
    3738:	74615f74 	strbtvc	r5, [r1], #-3956	; 0xfffff08c
    373c:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
    3740:	73657475 	cmnvc	r5, #1962934272	; 0x75000000
    3744:	6f6f685f 	svcvs	0x006f685f
    3748:	7369006b 	cmnvc	r9, #107	; 0x6b
    374c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3750:	70665f74 	rsbvc	r5, r6, r4, ror pc
    3754:	3233645f 	eorscc	r6, r3, #1593835520	; 0x5f000000
    3758:	4d524100 	ldfmie	f4, [r2, #-0]
    375c:	00454e5f 	subeq	r4, r5, pc, asr lr
    3760:	5f617369 	svcpl	0x00617369
    3764:	5f746962 	svcpl	0x00746962
    3768:	00386562 	eorseq	r6, r8, r2, ror #10
    376c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3770:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3774:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    3778:	31316d72 	teqcc	r1, r2, ror sp
    377c:	7a6a3637 	bvc	1a91060 <__end__+0xa75040>
    3780:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    3784:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    3788:	5f726f73 	svcpl	0x00726f73
    378c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3790:	6c6c6100 	stfvse	f6, [ip], #-0
    3794:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    3798:	72610073 	rsbvc	r0, r1, #115	; 0x73
    379c:	63705f6d 	cmnvs	r0, #436	; 0x1b4
    37a0:	41420073 	hvcmi	8195	; 0x2003
    37a4:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    37a8:	5f484352 	svcpl	0x00484352
    37ac:	61005435 	tstvs	r0, r5, lsr r4
    37b0:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    37b4:	34686372 	strbtcc	r6, [r8], #-882	; 0xfffffc8e
    37b8:	41540074 	cmpmi	r4, r4, ror r0
    37bc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    37c0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    37c4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    37c8:	61786574 	cmnvs	r8, r4, ror r5
    37cc:	6f633637 	svcvs	0x00633637
    37d0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    37d4:	00353561 	eorseq	r3, r5, r1, ror #10
    37d8:	5f6d7261 	svcpl	0x006d7261
    37dc:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    37e0:	7562775f 	strbvc	r7, [r2, #-1887]!	; 0xfffff8a1
    37e4:	74680066 	strbtvc	r0, [r8], #-102	; 0xffffff9a
    37e8:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    37ec:	00687361 	rsbeq	r7, r8, r1, ror #6
    37f0:	5f617369 	svcpl	0x00617369
    37f4:	5f746962 	svcpl	0x00746962
    37f8:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    37fc:	6f6e5f6b 	svcvs	0x006e5f6b
    3800:	6c6f765f 	stclvs	6, cr7, [pc], #-380	; 368c <__core1_unwind_stub-0xffc974>
    3804:	6c697461 	cfstrdvs	mvd7, [r9], #-388	; 0xfffffe7c
    3808:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
    380c:	52415400 	subpl	r5, r1, #0, 8
    3810:	5f544547 	svcpl	0x00544547
    3814:	5f555043 	svcpl	0x00555043
    3818:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    381c:	306d7865 	rsbcc	r7, sp, r5, ror #16
    3820:	52415400 	subpl	r5, r1, #0, 8
    3824:	5f544547 	svcpl	0x00544547
    3828:	5f555043 	svcpl	0x00555043
    382c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3830:	316d7865 	cmncc	sp, r5, ror #16
    3834:	52415400 	subpl	r5, r1, #0, 8
    3838:	5f544547 	svcpl	0x00544547
    383c:	5f555043 	svcpl	0x00555043
    3840:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3844:	336d7865 	cmncc	sp, #6619136	; 0x650000
    3848:	61736900 	cmnvs	r3, r0, lsl #18
    384c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3850:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3854:	315f3876 	cmpcc	pc, r6, ror r8	; <UNPREDICTABLE>
    3858:	6d726100 	ldfvse	f6, [r2, #-0]
    385c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    3860:	616e5f68 	cmnvs	lr, r8, ror #30
    3864:	6900656d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    3868:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    386c:	615f7469 	cmpvs	pc, r9, ror #8
    3870:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    3874:	6900335f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp}
    3878:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    387c:	615f7469 	cmpvs	pc, r9, ror #8
    3880:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    3884:	6900345f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
    3888:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    388c:	615f7469 	cmpvs	pc, r9, ror #8
    3890:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    3894:	5400355f 	strpl	r3, [r0], #-1375	; 0xfffffaa1
    3898:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    389c:	50435f54 	subpl	r5, r3, r4, asr pc
    38a0:	6f635f55 	svcvs	0x00635f55
    38a4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    38a8:	00333561 	eorseq	r3, r3, r1, ror #10
    38ac:	47524154 			; <UNDEFINED> instruction: 0x47524154
    38b0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    38b4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    38b8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    38bc:	35356178 	ldrcc	r6, [r5, #-376]!	; 0xfffffe88
    38c0:	52415400 	subpl	r5, r1, #0, 8
    38c4:	5f544547 	svcpl	0x00544547
    38c8:	5f555043 	svcpl	0x00555043
    38cc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    38d0:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    38d4:	41540037 	cmpmi	r4, r7, lsr r0
    38d8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    38dc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    38e0:	63706d5f 	cmnvs	r0, #6080	; 0x17c0
    38e4:	0065726f 	rsbeq	r7, r5, pc, ror #4
    38e8:	5f617369 	svcpl	0x00617369
    38ec:	5f746962 	svcpl	0x00746962
    38f0:	76706676 			; <UNDEFINED> instruction: 0x76706676
    38f4:	41540032 	cmpmi	r4, r2, lsr r0
    38f8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    38fc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3900:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3904:	6e6f6e5f 	mcrvs	14, 3, r6, cr15, cr15, {2}
    3908:	72610065 	rsbvc	r0, r1, #101	; 0x65
    390c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3910:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    3914:	006d746f 	rsbeq	r7, sp, pc, ror #8
    3918:	47524154 			; <UNDEFINED> instruction: 0x47524154
    391c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3920:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    3924:	30316d72 	eorscc	r6, r1, r2, ror sp
    3928:	6a653632 	bvs	19511f8 <__end__+0x9351d8>
    392c:	41420073 	hvcmi	8195	; 0x2003
    3930:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3934:	5f484352 	svcpl	0x00484352
    3938:	42004a36 	andmi	r4, r0, #221184	; 0x36000
    393c:	5f455341 	svcpl	0x00455341
    3940:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3944:	004b365f 	subeq	r3, fp, pc, asr r6
    3948:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    394c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    3950:	4d365f48 	ldcmi	15, cr5, [r6, #-288]!	; 0xfffffee0
    3954:	61736900 	cmnvs	r3, r0, lsl #18
    3958:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    395c:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    3960:	0074786d 	rsbseq	r7, r4, sp, ror #16
    3964:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3968:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    396c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    3970:	31316d72 	teqcc	r1, r2, ror sp
    3974:	666a3633 			; <UNDEFINED> instruction: 0x666a3633
    3978:	52410073 	subpl	r0, r1, #115	; 0x73
    397c:	534c5f4d 	movtpl	r5, #53069	; 0xcf4d
    3980:	4d524100 	ldfmie	f4, [r2, #-0]
    3984:	00544c5f 	subseq	r4, r4, pc, asr ip
    3988:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    398c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    3990:	5a365f48 	bpl	d9b6b8 <__core1_unwind_stub-0x264948>
    3994:	4d524100 	ldfmie	f4, [r2, #-0]
    3998:	5343505f 	movtpl	r5, #12383	; 0x305f
    399c:	5041415f 	subpl	r4, r1, pc, asr r1
    39a0:	565f5343 	ldrbpl	r5, [pc], -r3, asr #6
    39a4:	54005046 	strpl	r5, [r0], #-70	; 0xffffffba
    39a8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    39ac:	50435f54 	subpl	r5, r3, r4, asr pc
    39b0:	77695f55 			; <UNDEFINED> instruction: 0x77695f55
    39b4:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    39b8:	73690032 	cmnvc	r9, #50	; 0x32
    39bc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    39c0:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
    39c4:	61006e6f 	tstvs	r0, pc, ror #28
    39c8:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    39cc:	615f7570 	cmpvs	pc, r0, ror r5	; <UNPREDICTABLE>
    39d0:	00727474 	rsbseq	r7, r2, r4, ror r4
    39d4:	5f617369 	svcpl	0x00617369
    39d8:	5f746962 	svcpl	0x00746962
    39dc:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    39e0:	006d6537 	rsbeq	r6, sp, r7, lsr r5
    39e4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    39e8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    39ec:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    39f0:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    39f4:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    39f8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    39fc:	50435f54 	subpl	r5, r3, r4, asr pc
    3a00:	616d5f55 	cmnvs	sp, r5, asr pc
    3a04:	6c657672 	stclvs	6, cr7, [r5], #-456	; 0xfffffe38
    3a08:	6a705f6c 	bvs	1c1b7c0 <__end__+0xbff7a0>
    3a0c:	74680034 	strbtvc	r0, [r8], #-52	; 0xffffffcc
    3a10:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    3a14:	5f687361 	svcpl	0x00687361
    3a18:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    3a1c:	00726574 	rsbseq	r6, r2, r4, ror r5
    3a20:	5f6d7261 	svcpl	0x006d7261
    3a24:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    3a28:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3a2c:	5f786574 	svcpl	0x00786574
    3a30:	69003961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp}
    3a34:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3a38:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3a3c:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    3a40:	54003274 	strpl	r3, [r0], #-628	; 0xfffffd8c
    3a44:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3a48:	50435f54 	subpl	r5, r3, r4, asr pc
    3a4c:	6f635f55 	svcvs	0x00635f55
    3a50:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3a54:	63323761 	teqvs	r2, #25427968	; 0x1840000
    3a58:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3a5c:	33356178 	teqcc	r5, #120, 2
    3a60:	61736900 	cmnvs	r3, r0, lsl #18
    3a64:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3a68:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    3a6c:	0032626d 	eorseq	r6, r2, sp, ror #4
    3a70:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    3a74:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    3a78:	41375f48 	teqmi	r7, r8, asr #30
    3a7c:	61736900 	cmnvs	r3, r0, lsl #18
    3a80:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3a84:	746f645f 	strbtvc	r6, [pc], #-1119	; 3a8c <__core1_unwind_stub-0xffc574>
    3a88:	646f7270 	strbtvs	r7, [pc], #-624	; 3a90 <__core1_unwind_stub-0xffc570>
    3a8c:	6d726100 	ldfvse	f6, [r2, #-0]
    3a90:	3170665f 	cmncc	r0, pc, asr r6
    3a94:	79745f36 	ldmdbvc	r4!, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    3a98:	6e5f6570 	mrcvs	5, 2, r6, cr15, cr0, {3}
    3a9c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3aa0:	5f4d5241 	svcpl	0x004d5241
    3aa4:	6100494d 	tstvs	r0, sp, asr #18
    3aa8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    3aac:	36686372 			; <UNDEFINED> instruction: 0x36686372
    3ab0:	7261006b 	rsbvc	r0, r1, #107	; 0x6b
    3ab4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3ab8:	6d366863 	ldcvs	8, cr6, [r6, #-396]!	; 0xfffffe74
    3abc:	53414200 	movtpl	r4, #4608	; 0x1200
    3ac0:	52415f45 	subpl	r5, r1, #276	; 0x114
    3ac4:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    3ac8:	5f5f0052 	svcpl	0x005f0052
    3acc:	63706f70 	cmnvs	r0, #112, 30	; 0x1c0
    3ad0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    3ad4:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    3ad8:	61736900 	cmnvs	r3, r0, lsl #18
    3adc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3ae0:	736d635f 	cmnvc	sp, #2080374785	; 0x7c000001
    3ae4:	41540065 	cmpmi	r4, r5, rrx
    3ae8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3aec:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3af0:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3af4:	61786574 	cmnvs	r8, r4, ror r5
    3af8:	54003337 	strpl	r3, [r0], #-823	; 0xfffffcc9
    3afc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3b00:	50435f54 	subpl	r5, r3, r4, asr pc
    3b04:	65675f55 	strbvs	r5, [r7, #-3925]!	; 0xfffff0ab
    3b08:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    3b0c:	61377663 	teqvs	r7, r3, ror #12
    3b10:	52415400 	subpl	r5, r1, #0, 8
    3b14:	5f544547 	svcpl	0x00544547
    3b18:	5f555043 	svcpl	0x00555043
    3b1c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3b20:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    3b24:	72610036 	rsbvc	r0, r1, #54	; 0x36
    3b28:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3b2c:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    3b30:	6f765f6f 	svcvs	0x00765f6f
    3b34:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    3b38:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
    3b3c:	41420065 	cmpmi	r2, r5, rrx
    3b40:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3b44:	5f484352 	svcpl	0x00484352
    3b48:	69004138 	stmdbvs	r0, {r3, r4, r5, r8, lr}
    3b4c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3b50:	615f7469 	cmpvs	pc, r9, ror #8
    3b54:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    3b58:	41420074 	hvcmi	8196	; 0x2004
    3b5c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3b60:	5f484352 	svcpl	0x00484352
    3b64:	54005238 	strpl	r5, [r0], #-568	; 0xfffffdc8
    3b68:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3b6c:	50435f54 	subpl	r5, r3, r4, asr pc
    3b70:	6f635f55 	svcvs	0x00635f55
    3b74:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3b78:	63333761 	teqvs	r3, #25427968	; 0x1840000
    3b7c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3b80:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    3b84:	4d524100 	ldfmie	f4, [r2, #-0]
    3b88:	00564e5f 	subseq	r4, r6, pc, asr lr
    3b8c:	5f6d7261 	svcpl	0x006d7261
    3b90:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3b94:	72610034 	rsbvc	r0, r1, #52	; 0x34
    3b98:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3b9c:	00366863 	eorseq	r6, r6, r3, ror #16
    3ba0:	5f6d7261 	svcpl	0x006d7261
    3ba4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3ba8:	72610037 	rsbvc	r0, r1, #55	; 0x37
    3bac:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3bb0:	00386863 	eorseq	r6, r8, r3, ror #16
    3bb4:	5f6d7261 	svcpl	0x006d7261
    3bb8:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    3bbc:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    3bc0:	00656c61 	rsbeq	r6, r5, r1, ror #24
    3bc4:	696b616d 	stmdbvs	fp!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3bc8:	635f676e 	cmpvs	pc, #28835840	; 0x1b80000
    3bcc:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    3bd0:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    3bd4:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    3bd8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    3bdc:	6c61635f 	stclvs	3, cr6, [r1], #-380	; 0xfffffe84
    3be0:	69765f6c 	ldmdbvs	r6!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3be4:	616c5f61 	cmnvs	ip, r1, ror #30
    3be8:	006c6562 	rsbeq	r6, ip, r2, ror #10
    3bec:	5f617369 	svcpl	0x00617369
    3bf0:	5f746962 	svcpl	0x00746962
    3bf4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3bf8:	54006b36 	strpl	r6, [r0], #-2870	; 0xfffff4ca
    3bfc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3c00:	50435f54 	subpl	r5, r3, r4, asr pc
    3c04:	6f635f55 	svcvs	0x00635f55
    3c08:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3c0c:	54003761 	strpl	r3, [r0], #-1889	; 0xfffff89f
    3c10:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3c14:	50435f54 	subpl	r5, r3, r4, asr pc
    3c18:	6f635f55 	svcvs	0x00635f55
    3c1c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3c20:	54003861 	strpl	r3, [r0], #-2145	; 0xfffff79f
    3c24:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3c28:	50435f54 	subpl	r5, r3, r4, asr pc
    3c2c:	6f635f55 	svcvs	0x00635f55
    3c30:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3c34:	41003961 	tstmi	r0, r1, ror #18
    3c38:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    3c3c:	415f5343 	cmpmi	pc, r3, asr #6
    3c40:	00534350 	subseq	r4, r3, r0, asr r3
    3c44:	5f4d5241 	svcpl	0x004d5241
    3c48:	5f534350 	svcpl	0x00534350
    3c4c:	43505441 	cmpmi	r0, #1090519040	; 0x41000000
    3c50:	6f630053 	svcvs	0x00630053
    3c54:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    3c58:	6f642078 	svcvs	0x00642078
    3c5c:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
    3c60:	52415400 	subpl	r5, r1, #0, 8
    3c64:	5f544547 	svcpl	0x00544547
    3c68:	5f555043 	svcpl	0x00555043
    3c6c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3c70:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    3c74:	726f6333 	rsbvc	r6, pc, #-872415232	; 0xcc000000
    3c78:	61786574 	cmnvs	r8, r4, ror r5
    3c7c:	54003335 	strpl	r3, [r0], #-821	; 0xfffffccb
    3c80:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3c84:	50435f54 	subpl	r5, r3, r4, asr pc
    3c88:	6f635f55 	svcvs	0x00635f55
    3c8c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3c90:	6c70306d 	ldclvs	0, cr3, [r0], #-436	; 0xfffffe4c
    3c94:	61007375 	tstvs	r0, r5, ror r3
    3c98:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    3c9c:	73690063 	cmnvc	r9, #99	; 0x63
    3ca0:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3ca4:	73785f74 	cmnvc	r8, #116, 30	; 0x1d0
    3ca8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    3cac:	6f645f00 	svcvs	0x00645f00
    3cb0:	755f746e 	ldrbvc	r7, [pc, #-1134]	; 384a <__core1_unwind_stub-0xffc7b6>
    3cb4:	745f6573 	ldrbvc	r6, [pc], #-1395	; 3cbc <__core1_unwind_stub-0xffc344>
    3cb8:	5f656572 	svcpl	0x00656572
    3cbc:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
    3cc0:	4154005f 	cmpmi	r4, pc, asr r0
    3cc4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3cc8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3ccc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3cd0:	64743031 	ldrbtvs	r3, [r4], #-49	; 0xffffffcf
    3cd4:	5400696d 	strpl	r6, [r0], #-2413	; 0xfffff693
    3cd8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3cdc:	50435f54 	subpl	r5, r3, r4, asr pc
    3ce0:	6f635f55 	svcvs	0x00635f55
    3ce4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3ce8:	62003561 	andvs	r3, r0, #406847488	; 0x18400000
    3cec:	5f657361 	svcpl	0x00657361
    3cf0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3cf4:	63657469 	cmnvs	r5, #1761607680	; 0x69000000
    3cf8:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    3cfc:	6d726100 	ldfvse	f6, [r2, #-0]
    3d00:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    3d04:	72635f68 	rsbvc	r5, r3, #104, 30	; 0x1a0
    3d08:	41540063 	cmpmi	r4, r3, rrx
    3d0c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3d10:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3d14:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3d18:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    3d1c:	616d7331 	cmnvs	sp, r1, lsr r3
    3d20:	756d6c6c 	strbvc	r6, [sp, #-3180]!	; 0xfffff394
    3d24:	7069746c 	rsbvc	r7, r9, ip, ror #8
    3d28:	4700796c 	strmi	r7, [r0, -ip, ror #18]
    3d2c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    3d30:	39203731 	stmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
    3d34:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3d38:	31303220 	teqcc	r0, r0, lsr #4
    3d3c:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
    3d40:	72282035 	eorvc	r2, r8, #53	; 0x35
    3d44:	61656c65 	cmnvs	r5, r5, ror #24
    3d48:	20296573 	eorcs	r6, r9, r3, ror r5
    3d4c:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
    3d50:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3d54:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
    3d58:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    3d5c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
    3d60:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3d64:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
    3d68:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
    3d6c:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
    3d70:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    3d74:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    3d78:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    3d7c:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    3d80:	616f6c66 	cmnvs	pc, r6, ror #24
    3d84:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    3d88:	6f733d69 	svcvs	0x00733d69
    3d8c:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    3d90:	6d72616d 	ldfvse	f6, [r2, #-436]!	; 0xfffffe4c
    3d94:	616d2d20 	cmnvs	sp, r0, lsr #26
    3d98:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
    3d9c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3da0:	2d207434 	cfstrscs	mvf7, [r0, #-208]!	; 0xffffff30
    3da4:	672d2067 	strvs	r2, [sp, -r7, rrx]!
    3da8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    3dac:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    3db0:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    3db4:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    3db8:	7562662d 	strbvc	r6, [r2, #-1581]!	; 0xfffff9d3
    3dbc:	69646c69 	stmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    3dc0:	6c2d676e 	stcvs	7, cr6, [sp], #-440	; 0xfffffe48
    3dc4:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    3dc8:	662d2063 	strtvs	r2, [sp], -r3, rrx
    3dcc:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
    3dd0:	6b636174 	blvs	18dc3a8 <__end__+0x8c0388>
    3dd4:	6f72702d 	svcvs	0x0072702d
    3dd8:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    3ddc:	2d20726f 	sfmcs	f7, 4, [r0, #-444]!	; 0xfffffe44
    3de0:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 3c50 <__core1_unwind_stub-0xffc3b0>
    3de4:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    3de8:	2d20656e 	cfstr32cs	mvfx6, [r0, #-440]!	; 0xfffffe48
    3dec:	63786566 	cmnvs	r8, #427819008	; 0x19800000
    3df0:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
    3df4:	20736e6f 	rsbscs	r6, r3, pc, ror #28
    3df8:	6976662d 	ldmdbvs	r6!, {r0, r2, r3, r5, r9, sl, sp, lr}^
    3dfc:	69626973 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    3e00:	7974696c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    3e04:	6469683d 	strbtvs	r6, [r9], #-2109	; 0xfffff7c3
    3e08:	006e6564 	rsbeq	r6, lr, r4, ror #10
    3e0c:	5f6d7261 	svcpl	0x006d7261
    3e10:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    3e14:	5f746e65 	svcpl	0x00746e65
    3e18:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    3e1c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3e20:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    3e24:	32336372 	eorscc	r6, r3, #-939524095	; 0xc8000001
    3e28:	4d524100 	ldfmie	f4, [r2, #-0]
    3e2c:	004c505f 	subeq	r5, ip, pc, asr r0
    3e30:	5f617369 	svcpl	0x00617369
    3e34:	5f746962 	svcpl	0x00746962
    3e38:	76706676 			; <UNDEFINED> instruction: 0x76706676
    3e3c:	73690033 	cmnvc	r9, #51	; 0x33
    3e40:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3e44:	66765f74 	uhsub16vs	r5, r6, r4
    3e48:	00347670 	eorseq	r7, r4, r0, ror r6
    3e4c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    3e50:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    3e54:	54365f48 	ldrtpl	r5, [r6], #-3912	; 0xfffff0b8
    3e58:	41420032 	cmpmi	r2, r2, lsr r0
    3e5c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3e60:	5f484352 	svcpl	0x00484352
    3e64:	4d5f4d38 	ldclmi	13, cr4, [pc, #-224]	; 3d8c <__core1_unwind_stub-0xffc274>
    3e68:	004e4941 	subeq	r4, lr, r1, asr #18
    3e6c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3e70:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3e74:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    3e78:	74396d72 	ldrtvc	r6, [r9], #-3442	; 0xfffff28e
    3e7c:	00696d64 	rsbeq	r6, r9, r4, ror #26
    3e80:	5f4d5241 	svcpl	0x004d5241
    3e84:	42004c41 	andmi	r4, r0, #16640	; 0x4100
    3e88:	5f455341 	svcpl	0x00455341
    3e8c:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3e90:	004d375f 	subeq	r3, sp, pc, asr r7
    3e94:	5f6d7261 	svcpl	0x006d7261
    3e98:	67726174 			; <UNDEFINED> instruction: 0x67726174
    3e9c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    3ea0:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
    3ea4:	6d726100 	ldfvse	f6, [r2, #-0]
    3ea8:	7261745f 	rsbvc	r7, r1, #1593835520	; 0x5f000000
    3eac:	5f746567 	svcpl	0x00746567
    3eb0:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
    3eb4:	52415400 	subpl	r5, r1, #0, 8
    3eb8:	5f544547 	svcpl	0x00544547
    3ebc:	5f555043 	svcpl	0x00555043
    3ec0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3ec4:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    3ec8:	52415400 	subpl	r5, r1, #0, 8
    3ecc:	5f544547 	svcpl	0x00544547
    3ed0:	5f555043 	svcpl	0x00555043
    3ed4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3ed8:	35727865 	ldrbcc	r7, [r2, #-2149]!	; 0xfffff79b
    3edc:	52415400 	subpl	r5, r1, #0, 8
    3ee0:	5f544547 	svcpl	0x00544547
    3ee4:	5f555043 	svcpl	0x00555043
    3ee8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3eec:	37727865 	ldrbcc	r7, [r2, -r5, ror #16]!
    3ef0:	52415400 	subpl	r5, r1, #0, 8
    3ef4:	5f544547 	svcpl	0x00544547
    3ef8:	5f555043 	svcpl	0x00555043
    3efc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3f00:	38727865 	ldmdacc	r2!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    3f04:	61736900 	cmnvs	r3, r0, lsl #18
    3f08:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3f0c:	61706c5f 	cmnvs	r0, pc, asr ip
    3f10:	73690065 	cmnvc	r9, #101	; 0x65
    3f14:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3f18:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    3f1c:	5f6b7269 	svcpl	0x006b7269
    3f20:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3f24:	007a6b36 	rsbseq	r6, sl, r6, lsr fp
    3f28:	5f617369 	svcpl	0x00617369
    3f2c:	5f746962 	svcpl	0x00746962
    3f30:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    3f34:	61736900 	cmnvs	r3, r0, lsl #18
    3f38:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3f3c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3f40:	69003476 	stmdbvs	r0, {r1, r2, r4, r5, r6, sl, ip, sp}
    3f44:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3f48:	615f7469 	cmpvs	pc, r9, ror #8
    3f4c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
    3f50:	61736900 	cmnvs	r3, r0, lsl #18
    3f54:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3f58:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3f5c:	69003776 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, r9, sl, ip, sp}
    3f60:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3f64:	615f7469 	cmpvs	pc, r9, ror #8
    3f68:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    3f6c:	6f645f00 	svcvs	0x00645f00
    3f70:	755f746e 	ldrbvc	r7, [pc, #-1134]	; 3b0a <__core1_unwind_stub-0xffc4f6>
    3f74:	725f6573 	subsvc	r6, pc, #482344960	; 0x1cc00000
    3f78:	685f7874 	ldmdavs	pc, {r2, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3f7c:	5f657265 	svcpl	0x00657265
    3f80:	49515500 	ldmdbmi	r1, {r8, sl, ip, lr}^
    3f84:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3f88:	61736900 	cmnvs	r3, r0, lsl #18
    3f8c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3f90:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3f94:	65743576 	ldrbvs	r3, [r4, #-1398]!	; 0xfffffa8a
    3f98:	6d726100 	ldfvse	f6, [r2, #-0]
    3f9c:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    3fa0:	72610065 	rsbvc	r0, r1, #101	; 0x65
    3fa4:	70635f6d 	rsbvc	r5, r3, sp, ror #30
    3fa8:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
    3fac:	77726574 			; <UNDEFINED> instruction: 0x77726574
    3fb0:	006b726f 	rsbeq	r7, fp, pc, ror #4
    3fb4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3fb8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3fbc:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    3fc0:	32396d72 	eorscc	r6, r9, #7296	; 0x1c80
    3fc4:	68007430 	stmdavs	r0, {r4, r5, sl, ip, sp, lr}
    3fc8:	5f626174 	svcpl	0x00626174
    3fcc:	54007165 	strpl	r7, [r0], #-357	; 0xfffffe9b
    3fd0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3fd4:	50435f54 	subpl	r5, r3, r4, asr pc
    3fd8:	61665f55 	cmnvs	r6, r5, asr pc
    3fdc:	00363235 	eorseq	r3, r6, r5, lsr r2
    3fe0:	5f6d7261 	svcpl	0x006d7261
    3fe4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3fe8:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    3fec:	685f626d 	ldmdavs	pc, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    3ff0:	76696477 			; <UNDEFINED> instruction: 0x76696477
    3ff4:	61746800 	cmnvs	r4, r0, lsl #16
    3ff8:	71655f62 	cmnvc	r5, r2, ror #30
    3ffc:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    4000:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4004:	6d726100 	ldfvse	f6, [r2, #-0]
    4008:	6369705f 	cmnvs	r9, #95	; 0x5f
    400c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    4010:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    4014:	41540072 	cmpmi	r4, r2, ror r0
    4018:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    401c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4020:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4024:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    4028:	616d7330 	cmnvs	sp, r0, lsr r3
    402c:	756d6c6c 	strbvc	r6, [sp, #-3180]!	; 0xfffff394
    4030:	7069746c 	rsbvc	r7, r9, ip, ror #8
    4034:	5400796c 	strpl	r7, [r0], #-2412	; 0xfffff694
    4038:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    403c:	50435f54 	subpl	r5, r3, r4, asr pc
    4040:	706d5f55 	rsbvc	r5, sp, r5, asr pc
    4044:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    4048:	66766f6e 	ldrbtvs	r6, [r6], -lr, ror #30
    404c:	73690070 	cmnvc	r9, #112	; 0x70
    4050:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4054:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    4058:	5f6b7269 	svcpl	0x006b7269
    405c:	5f336d63 	svcpl	0x00336d63
    4060:	6472646c 	ldrbtvs	r6, [r2], #-1132	; 0xfffffb94
    4064:	4d524100 	ldfmie	f4, [r2, #-0]
    4068:	0043435f 	subeq	r4, r3, pc, asr r3
    406c:	5f6d7261 	svcpl	0x006d7261
    4070:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4074:	00325f38 	eorseq	r5, r2, r8, lsr pc
    4078:	5f6d7261 	svcpl	0x006d7261
    407c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4080:	00335f38 	eorseq	r5, r3, r8, lsr pc
    4084:	5f6d7261 	svcpl	0x006d7261
    4088:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    408c:	00345f38 	eorseq	r5, r4, r8, lsr pc
    4090:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4094:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4098:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    409c:	3236706d 	eorscc	r7, r6, #109	; 0x6d
    40a0:	52410036 	subpl	r0, r1, #54	; 0x36
    40a4:	53435f4d 	movtpl	r5, #16205	; 0x3f4d
    40a8:	6d726100 	ldfvse	f6, [r2, #-0]
    40ac:	3170665f 	cmncc	r0, pc, asr r6
    40b0:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
    40b4:	61007473 	tstvs	r0, r3, ror r4
    40b8:	625f6d72 	subsvs	r6, pc, #7296	; 0x1c80
    40bc:	5f657361 	svcpl	0x00657361
    40c0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    40c4:	52415400 	subpl	r5, r1, #0, 8
    40c8:	5f544547 	svcpl	0x00544547
    40cc:	5f555043 	svcpl	0x00555043
    40d0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    40d4:	31617865 	cmncc	r1, r5, ror #16
    40d8:	726f6335 	rsbvc	r6, pc, #-738197504	; 0xd4000000
    40dc:	61786574 	cmnvs	r8, r4, ror r5
    40e0:	2e2e0037 	mcrcs	0, 1, r0, cr14, cr7, {1}
    40e4:	2f2e2e2f 	svccs	0x002e2e2f
    40e8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 4038 <__core1_unwind_stub-0xffbfc8>
    40ec:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    40f0:	696c2f63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    40f4:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    40f8:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    40fc:	5f6d7261 	svcpl	0x006d7261
    4100:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4104:	006d6537 	rsbeq	r6, sp, r7, lsr r5
    4108:	47524154 			; <UNDEFINED> instruction: 0x47524154
    410c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4110:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4114:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4118:	32376178 	eorscc	r6, r7, #120, 2
    411c:	6d726100 	ldfvse	f6, [r2, #-0]
    4120:	7363705f 	cmnvc	r3, #95	; 0x5f
    4124:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    4128:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    412c:	4d524100 	ldfmie	f4, [r2, #-0]
    4130:	5343505f 	movtpl	r5, #12383	; 0x305f
    4134:	5041415f 	subpl	r4, r1, pc, asr r1
    4138:	4c5f5343 	mrrcmi	3, 4, r5, pc, cr3	; <UNPREDICTABLE>
    413c:	4c41434f 	mcrrmi	3, 4, r4, r1, cr15
    4140:	52415400 	subpl	r5, r1, #0, 8
    4144:	5f544547 	svcpl	0x00544547
    4148:	5f555043 	svcpl	0x00555043
    414c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4150:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    4154:	41540035 	cmpmi	r4, r5, lsr r0
    4158:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    415c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4160:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    4164:	61676e6f 	cmnvs	r7, pc, ror #28
    4168:	61006d72 	tstvs	r0, r2, ror sp
    416c:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4170:	5f686372 	svcpl	0x00686372
    4174:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4178:	61003162 	tstvs	r0, r2, ror #2
    417c:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4180:	5f686372 	svcpl	0x00686372
    4184:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4188:	54003262 	strpl	r3, [r0], #-610	; 0xfffffd9e
    418c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4190:	50435f54 	subpl	r5, r3, r4, asr pc
    4194:	77695f55 			; <UNDEFINED> instruction: 0x77695f55
    4198:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    419c:	6d726100 	ldfvse	f6, [r2, #-0]
    41a0:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    41a4:	00743568 	rsbseq	r3, r4, r8, ror #10
    41a8:	5f617369 	svcpl	0x00617369
    41ac:	5f746962 	svcpl	0x00746962
    41b0:	6100706d 	tstvs	r0, sp, rrx
    41b4:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    41b8:	63735f64 	cmnvs	r3, #100, 30	; 0x190
    41bc:	00646568 	rsbeq	r6, r4, r8, ror #10
    41c0:	5f6d7261 	svcpl	0x006d7261
    41c4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    41c8:	00315f38 	eorseq	r5, r1, r8, lsr pc

Disassembly of section .comment:

00000000 <.comment>:
{
   0:	3a434347 	bcc	10d0d24 <__end__+0xb4d04>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
    ALT_PRINTF("\n");
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  40:	6172622d 	cmnvs	r2, sp, lsr #4
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
{
   0:	00003441 	andeq	r3, r0, r1, asr #8
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000002a 	andeq	r0, r0, sl, lsr #32
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	412d3705 			; <UNDEFINED> instruction: 0x412d3705
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
    ALT_PRINTF("\n");
  18:	09010841 	stmdbeq	r1, {r0, r6, fp}
  1c:	0c030a02 			; <UNDEFINED> instruction: 0x0c030a02
  20:	14041201 	strne	r1, [r4], #-513	; 0xfffffdff
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__core1_unwind_stub-0xfb9fc4>
  2c:	22061e01 	andcs	r1, r6, #1, 28
  30:	44012a01 	strmi	r2, [r1], #-2561	; 0xfffff5ff
  34:	Address 0x0000000000000034 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
{
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
    ALT_PRINTF("\n");
      1c:	00000098 	muleq	r0, r8, r0
      20:	8b040e42 	blhi	103930 <__core1_unwind_stub-0xefc6d0>
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	0b0d4201 	bleq	350830 <__core1_unwind_stub-0xcaf7d0>
      28:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
      2c:	000ecb42 	andeq	ip, lr, r2, asr #22
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	01000004 	tsteq	r0, r4
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	00000038 	andeq	r0, r0, r8, lsr r0
      40:	8b040e42 	blhi	103950 <__core1_unwind_stub-0xefc6b0>
      44:	0b0d4201 	bleq	350850 <__core1_unwind_stub-0xcaf7b0>
      48:	420d0d54 	andmi	r0, sp, #84, 26	; 0x1500
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	00000ecb 	andeq	r0, r0, fp, asr #29
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	0100003c 	tsteq	r0, ip, lsr r0
      5c:	00000054 	andeq	r0, r0, r4, asr r0
      60:	8b040e42 	blhi	103970 <__core1_unwind_stub-0xefc690>
      64:	0b0d4201 	bleq	350870 <__core1_unwind_stub-0xcaf790>
      68:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
      6c:	00000ecb 	andeq	r0, r0, fp, asr #29
}
      70:	0000001c 	andeq	r0, r0, ip, lsl r0
      74:	00000000 	andeq	r0, r0, r0
      78:	01000090 	swpeq	r0, r0, [r0]	; <UNPREDICTABLE>
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	00000054 	andeq	r0, r0, r4, asr r0
      80:	8b040e42 	blhi	103990 <__core1_unwind_stub-0xefc670>
      84:	0b0d4201 	bleq	350890 <__core1_unwind_stub-0xcaf770>
      88:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
      8c:	00000ecb 	andeq	r0, r0, fp, asr #29
      90:	0000001c 	andeq	r0, r0, ip, lsl r0
      *(pmem->toptr)=0;
      94:	00000000 	andeq	r0, r0, r0
      98:	010000e4 	smlatteq	r0, r4, r0, r0
      9c:	00000158 	andeq	r0, r0, r8, asr r1
      a0:	8b080e42 	blhi	2039b0 <__core1_unwind_stub-0xdfc650>
}
      a4:	42018e02 	andmi	r8, r1, #2, 28
      a8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
      ac:	080d0ca6 	stmdaeq	sp, {r1, r2, r5, r7, sl, fp}
      b0:	0000001c 	andeq	r0, r0, ip, lsl r0
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	00000000 	andeq	r0, r0, r0
      b8:	0100023c 	tsteq	r0, ip, lsr r2
        break;
      bc:	00000190 	muleq	r0, r0, r1
    return ALT_E_SUCCESS;
      c0:	8b080e42 	blhi	2039d0 <__core1_unwind_stub-0xdfc630>
      c4:	42018e02 	andmi	r8, r1, #2, 28
        return ALT_E_ERROR;
      c8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
}
      cc:	080d0cc2 	stmdaeq	sp, {r1, r6, r7, sl, fp}
      d0:	00000020 	andeq	r0, r0, r0, lsr #32
      d4:	00000000 	andeq	r0, r0, r0
      d8:	010003cc 	smlabteq	r0, ip, r3, r0
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	00000220 	andeq	r0, r0, r0, lsr #4
      e0:	8b080e42 	blhi	2039f0 <__core1_unwind_stub-0xdfc610>
      e4:	42018e02 	andmi	r8, r1, #2, 28
      e8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
      ec:	0d0c010a 	stfeqs	f0, [ip, #-40]	; 0xffffffd8
      f0:	00000008 	andeq	r0, r0, r8
    return dst;
      f4:	0000001c 	andeq	r0, r0, ip, lsl r0
}
      f8:	00000000 	andeq	r0, r0, r0
      fc:	010005ec 	smlatteq	r0, ip, r5, r0
     100:	0000006c 	andeq	r0, r0, ip, rrx
     104:	8b080e42 	blhi	203a14 <__core1_unwind_stub-0xdfc5ec>
        return (int)cnt;
     108:	42018e02 	andmi	r8, r1, #2, 28
     10c:	70040b0c 	andvc	r0, r4, ip, lsl #22
    errno = ENOSYS;
     110:	00080d0c 	andeq	r0, r8, ip, lsl #26
     114:	0000001c 	andeq	r0, r0, ip, lsl r0
     118:	00000000 	andeq	r0, r0, r0
     11c:	01000658 	tsteq	r0, r8, asr r6
    return -1;
     120:	00000040 	andeq	r0, r0, r0, asr #32
}
     124:	8b080e42 	blhi	203a34 <__core1_unwind_stub-0xdfc5cc>
     128:	42018e02 	andmi	r8, r1, #2, 28
     12c:	5a040b0c 	bpl	102d64 <__core1_unwind_stub-0xefd29c>
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     130:	00080d0c 	andeq	r0, r8, ip, lsl #26
     134:	0000001c 	andeq	r0, r0, ip, lsl r0
     138:	00000000 	andeq	r0, r0, r0
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	01000698 			; <UNDEFINED> instruction: 0x01000698
     140:	00000040 	andeq	r0, r0, r0, asr #32
     144:	8b080e42 	blhi	203a54 <__core1_unwind_stub-0xdfc5ac>
     148:	42018e02 	andmi	r8, r1, #2, 28
     14c:	5a040b0c 	bpl	102d84 <__core1_unwind_stub-0xefd27c>
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	00080d0c 	andeq	r0, r8, ip, lsl #26
     154:	0000001c 	andeq	r0, r0, ip, lsl r0
     158:	00000000 	andeq	r0, r0, r0
     15c:	010006d8 	ldrdeq	r0, [r0, -r8]
     160:	0000006c 	andeq	r0, r0, ip, rrx
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	8b080e42 	blhi	203a74 <__core1_unwind_stub-0xdfc58c>
     168:	42018e02 	andmi	r8, r1, #2, 28
     16c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     170:	00080d0c 	andeq	r0, r8, ip, lsl #26
     174:	0000001c 	andeq	r0, r0, ip, lsl r0
    return ALT_E_SUCCESS;
     178:	00000000 	andeq	r0, r0, r0
}
     17c:	01000744 	tsteq	r0, r4, asr #14
     180:	00000040 	andeq	r0, r0, r0, asr #32
     184:	8b080e42 	blhi	203a94 <__core1_unwind_stub-0xdfc56c>
    while (coalesce->size)
     188:	42018e02 	andmi	r8, r1, #2, 28
     18c:	5a040b0c 	bpl	102dc4 <__core1_unwind_stub-0xefd23c>
            break;
     190:	00080d0c 	andeq	r0, r8, ip, lsl #26
    *segpa   = thissegpa;
     194:	0000001c 	andeq	r0, r0, ip, lsl r0
     198:	00000000 	andeq	r0, r0, r0
     19c:	01000784 	smlabbeq	r0, r4, r7, r0
    *segsize = thissegsize;
     1a0:	00000068 	andeq	r0, r0, r8, rrx
     1a4:	8b080e42 	blhi	203ab4 <__core1_unwind_stub-0xdfc54c>
     1a8:	42018e02 	andmi	r8, r1, #2, 28
    return ALT_E_SUCCESS;
     1ac:	6e040b0c 	vmlavs.f64	d0, d4, d12
}
     1b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b8:	00000000 	andeq	r0, r0, r0
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	010007ec 	smlatteq	r0, ip, r7, r0
     1c0:	0000006c 	andeq	r0, r0, ip, rrx
     1c4:	8b080e42 	blhi	203ad4 <__core1_unwind_stub-0xdfc52c>
     1c8:	42018e02 	andmi	r8, r1, #2, 28
     1cc:	70040b0c 	andvc	r0, r4, ip, lsl #22
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	01000858 	tsteq	r0, r8, asr r8
     1e0:	0000006c 	andeq	r0, r0, ip, rrx
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	8b080e42 	blhi	203af4 <__core1_unwind_stub-0xdfc50c>
     1e8:	42018e02 	andmi	r8, r1, #2, 28
     1ec:	70040b0c 	andvc	r0, r4, ip, lsl #22
     1f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	010008c4 	smlabteq	r0, r4, r8, r0
     200:	0000006c 	andeq	r0, r0, ip, rrx
     204:	8b080e42 	blhi	203b14 <__core1_unwind_stub-0xdfc4ec>
     208:	42018e02 	andmi	r8, r1, #2, 28
     20c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     210:	00080d0c 	andeq	r0, r8, ip, lsl #26
        clkStep += clk100;
     214:	0000001c 	andeq	r0, r0, ip, lsl r0
     218:	00000000 	andeq	r0, r0, r0
     21c:	01000930 	tsteq	r0, r0, lsr r9
     220:	0000006c 	andeq	r0, r0, ip, rrx
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	8b080e42 	blhi	203b34 <__core1_unwind_stub-0xdfc4cc>
     228:	42018e02 	andmi	r8, r1, #2, 28
     22c:	70040b0c 	andvc	r0, r4, ip, lsl #22
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	00080d0c 	andeq	r0, r8, ip, lsl #26
     234:	0000001c 	andeq	r0, r0, ip, lsl r0
     238:	00000000 	andeq	r0, r0, r0
     23c:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	0000006c 	andeq	r0, r0, ip, rrx
     244:	8b080e42 	blhi	203b54 <__core1_unwind_stub-0xdfc4ac>
     248:	42018e02 	andmi	r8, r1, #2, 28
     24c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     250:	00080d0c 	andeq	r0, r8, ip, lsl #26
     254:	0000001c 	andeq	r0, r0, ip, lsl r0
     258:	00000000 	andeq	r0, r0, r0
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	01000a08 	tsteq	r0, r8, lsl #20
     260:	0000006c 	andeq	r0, r0, ip, rrx
     264:	8b080e42 	blhi	203b74 <__core1_unwind_stub-0xdfc48c>
     268:	42018e02 	andmi	r8, r1, #2, 28
     26c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     270:	00080d0c 	andeq	r0, r8, ip, lsl #26
     274:	0000001c 	andeq	r0, r0, ip, lsl r0
     278:	00000000 	andeq	r0, r0, r0
     27c:	01000a74 	tsteq	r0, r4, ror sl
     280:	000000dc 	ldrdeq	r0, [r0], -ip
     284:	8b080e42 	blhi	203b94 <__core1_unwind_stub-0xdfc46c>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	42018e02 	andmi	r8, r1, #2, 28
     28c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     290:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	0000001c 	andeq	r0, r0, ip, lsl r0
     298:	00000000 	andeq	r0, r0, r0
     29c:	01000b50 	tsteq	r0, r0, asr fp
     2a0:	00000030 	andeq	r0, r0, r0, lsr r0
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	8b080e42 	blhi	203bb4 <__core1_unwind_stub-0xdfc44c>
     2a8:	42018e02 	andmi	r8, r1, #2, 28
     2ac:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
     2b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2b8:	00000000 	andeq	r0, r0, r0
     2bc:	01000b80 	smlabbeq	r0, r0, fp, r0
     2c0:	00000030 	andeq	r0, r0, r0, lsr r0
     2c4:	8b080e42 	blhi	203bd4 <__core1_unwind_stub-0xdfc42c>
     2c8:	42018e02 	andmi	r8, r1, #2, 28
     2cc:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2d8:	00000000 	andeq	r0, r0, r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
     2e0:	00000030 	andeq	r0, r0, r0, lsr r0
     2e4:	8b080e42 	blhi	203bf4 <__core1_unwind_stub-0xdfc40c>
     2e8:	42018e02 	andmi	r8, r1, #2, 28
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
     2f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f8:	00000000 	andeq	r0, r0, r0
     2fc:	01000be0 	smlatteq	r0, r0, fp, r0
     300:	00000068 	andeq	r0, r0, r8, rrx
     304:	8b080e42 	blhi	203c14 <__core1_unwind_stub-0xdfc3ec>
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	42018e02 	andmi	r8, r1, #2, 28
     30c:	6e040b0c 	vmlavs.f64	d0, d4, d12
     310:	00080d0c 	andeq	r0, r8, ip, lsl #26
     314:	0000001c 	andeq	r0, r0, ip, lsl r0
     318:	00000000 	andeq	r0, r0, r0
     31c:	01000c48 	tsteq	r0, r8, asr #24
     320:	000000a4 	andeq	r0, r0, r4, lsr #1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	8b080e42 	blhi	203c34 <__core1_unwind_stub-0xdfc3cc>
     328:	42018e02 	andmi	r8, r1, #2, 28
     32c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
     334:	0000001c 	andeq	r0, r0, ip, lsl r0
     338:	00000000 	andeq	r0, r0, r0
     33c:	01000cec 	smlatteq	r0, ip, ip, r0
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	00000068 	andeq	r0, r0, r8, rrx
     344:	8b080e42 	blhi	203c54 <__core1_unwind_stub-0xdfc3ac>
     348:	42018e02 	andmi	r8, r1, #2, 28
     34c:	6e040b0c 	vmlavs.f64	d0, d4, d12
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	00080d0c 	andeq	r0, r8, ip, lsl #26
     354:	0000001c 	andeq	r0, r0, ip, lsl r0
     358:	00000000 	andeq	r0, r0, r0
     35c:	01000d54 	tsteq	r0, r4, asr sp
     360:	00000028 	andeq	r0, r0, r8, lsr #32
     364:	8b080e42 	blhi	203c74 <__core1_unwind_stub-0xdfc38c>
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	42018e02 	andmi	r8, r1, #2, 28
     36c:	4e040b0c 	vmlami.f64	d0, d4, d12
     370:	00080d0c 	andeq	r0, r8, ip, lsl #26
     374:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     380:	0000005c 	andeq	r0, r0, ip, asr r0
     384:	8b080e42 	blhi	203c94 <__core1_unwind_stub-0xdfc36c>
     388:	42018e02 	andmi	r8, r1, #2, 28
     38c:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	00080d0c 	andeq	r0, r8, ip, lsl #26
     394:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     3a0:	0000005c 	andeq	r0, r0, ip, asr r0
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	8b080e42 	blhi	203cb4 <__core1_unwind_stub-0xdfc34c>
     3a8:	42018e02 	andmi	r8, r1, #2, 28
     3ac:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
     3b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	01000d7c 	tsteq	r0, ip, ror sp
     3c0:	00000068 	andeq	r0, r0, r8, rrx
     3c4:	8b080e42 	blhi	203cd4 <__core1_unwind_stub-0xdfc32c>
     3c8:	42018e02 	andmi	r8, r1, #2, 28
     3cc:	6e040b0c 	vmlavs.f64	d0, d4, d12
     3d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d8:	00000000 	andeq	r0, r0, r0
     3dc:	01000de4 	smlatteq	r0, r4, sp, r0
     3e0:	00000068 	andeq	r0, r0, r8, rrx
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	8b080e42 	blhi	203cf4 <__core1_unwind_stub-0xdfc30c>
     3e8:	42018e02 	andmi	r8, r1, #2, 28
     3ec:	6e040b0c 	vmlavs.f64	d0, d4, d12
     3f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	01000e4c 	tsteq	r0, ip, asr #28
     400:	00000068 	andeq	r0, r0, r8, rrx
     404:	8b080e42 	blhi	203d14 <__core1_unwind_stub-0xdfc2ec>
     408:	42018e02 	andmi	r8, r1, #2, 28
     40c:	6e040b0c 	vmlavs.f64	d0, d4, d12
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	00080d0c 	andeq	r0, r8, ip, lsl #26
     414:	00000020 	andeq	r0, r0, r0, lsr #32
     418:	00000000 	andeq	r0, r0, r0
     41c:	01000eb4 			; <UNDEFINED> instruction: 0x01000eb4
     420:	0000023c 	andeq	r0, r0, ip, lsr r2
     424:	8b080e42 	blhi	203d34 <__core1_unwind_stub-0xdfc2cc>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	42018e02 	andmi	r8, r1, #2, 28
     42c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     430:	0d0c0118 	stfeqs	f0, [ip, #-96]	; 0xffffffa0
     434:	00000008 	andeq	r0, r0, r8
     438:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     444:	00000034 	andeq	r0, r0, r4, lsr r0
     448:	8b040e42 	blhi	103d58 <__core1_unwind_stub-0xefc2a8>
     44c:	0b0d4201 	bleq	350c58 <__core1_unwind_stub-0xcaf3a8>
     450:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     454:	00000ecb 	andeq	r0, r0, fp, asr #29
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     464:	00000264 	andeq	r0, r0, r4, ror #4
     468:	8b080e42 	blhi	203d78 <__core1_unwind_stub-0xdfc288>
     46c:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     474:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     478:	00000008 	andeq	r0, r0, r8
     47c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	00000034 	andeq	r0, r0, r4, lsr r0
     48c:	8b040e42 	blhi	103d9c <__core1_unwind_stub-0xefc264>
     490:	0b0d4201 	bleq	350c9c <__core1_unwind_stub-0xcaf364>
     494:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     498:	00000ecb 	andeq	r0, r0, fp, asr #29
     49c:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     4a8:	00000264 	andeq	r0, r0, r4, ror #4
     4ac:	8b080e42 	blhi	203dbc <__core1_unwind_stub-0xdfc244>
     4b0:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     4b8:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     4bc:	00000008 	andeq	r0, r0, r8
     4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c4:	00000000 	andeq	r0, r0, r0
     4c8:	010010f0 	strdeq	r1, [r0, -r0]
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	00000048 	andeq	r0, r0, r8, asr #32
     4d0:	8b040e42 	blhi	103de0 <__core1_unwind_stub-0xefc220>
     4d4:	0b0d4201 	bleq	350ce0 <__core1_unwind_stub-0xcaf320>
     4d8:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     4dc:	00000ecb 	andeq	r0, r0, fp, asr #29
     4e0:	00000020 	andeq	r0, r0, r0, lsr #32
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	01001138 	tsteq	r0, r8, lsr r1
     4ec:	00000264 	andeq	r0, r0, r4, ror #4
     4f0:	8b080e42 	blhi	203e00 <__core1_unwind_stub-0xdfc200>
     4f4:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     4fc:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     500:	00000008 	andeq	r0, r0, r8
     504:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     514:	8b080e42 	blhi	203e24 <__core1_unwind_stub-0xdfc1dc>
     518:	42018e02 	andmi	r8, r1, #2, 28
     51c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     520:	0d0c0472 	cfstrseq	mvf0, [ip, #-456]	; 0xfffffe38
     524:	00000008 	andeq	r0, r0, r8
     528:	0000000c 	andeq	r0, r0, ip
     52c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     530:	7c020001 	stcvc	0, cr0, [r2], {1}
     534:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     538:	0000001c 	andeq	r0, r0, ip, lsl r0
     53c:	00000528 	andeq	r0, r0, r8, lsr #10
     540:	0100139c 			; <UNDEFINED> instruction: 0x0100139c
     544:	00000028 	andeq	r0, r0, r8, lsr #32
     548:	8b040e42 	blhi	103e58 <__core1_unwind_stub-0xefc1a8>
     54c:	0b0d4201 	bleq	350d58 <__core1_unwind_stub-0xcaf2a8>
     550:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
     554:	00000ecb 	andeq	r0, r0, fp, asr #29
     558:	0000001c 	andeq	r0, r0, ip, lsl r0
     55c:	00000528 	andeq	r0, r0, r8, lsr #10
     560:	010013c4 	smlabteq	r0, r4, r3, r1
     564:	00000120 	andeq	r0, r0, r0, lsr #2
     568:	8b040e42 	blhi	103e78 <__core1_unwind_stub-0xefc188>
     56c:	0b0d4201 	bleq	350d78 <__core1_unwind_stub-0xcaf288>
     570:	0d0d8802 	stceq	8, cr8, [sp, #-8]
     574:	000ecb42 	andeq	ip, lr, r2, asr #22
     578:	0000001c 	andeq	r0, r0, ip, lsl r0
     57c:	00000528 	andeq	r0, r0, r8, lsr #10
     580:	010014e4 	smlatteq	r0, r4, r4, r1
     584:	00000158 	andeq	r0, r0, r8, asr r1
     588:	8b080e42 	blhi	203e98 <__core1_unwind_stub-0xdfc168>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	42018e02 	andmi	r8, r1, #2, 28
     590:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     594:	080d0ca6 	stmdaeq	sp, {r1, r2, r5, r7, sl, fp}
     598:	0000001c 	andeq	r0, r0, ip, lsl r0
     59c:	00000528 	andeq	r0, r0, r8, lsr #10
     5a0:	0100163c 	tsteq	r0, ip, lsr r6
     5a4:	0000015c 	andeq	r0, r0, ip, asr r1
     5a8:	8b080e42 	blhi	203eb8 <__core1_unwind_stub-0xdfc148>
     5ac:	42018e02 	andmi	r8, r1, #2, 28
     5b0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5b4:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5bc:	00000528 	andeq	r0, r0, r8, lsr #10
     5c0:	00000000 	andeq	r0, r0, r0
     5c4:	00000090 	muleq	r0, r0, r0
     5c8:	8b080e42 	blhi	203ed8 <__core1_unwind_stub-0xdfc128>
     5cc:	42018e02 	andmi	r8, r1, #2, 28
     5d0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5d4:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5dc:	00000528 	andeq	r0, r0, r8, lsr #10
     5e0:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     5e8:	8b080e42 	blhi	203ef8 <__core1_unwind_stub-0xdfc108>
     5ec:	42018e02 	andmi	r8, r1, #2, 28
     5f0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     5f4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5fc:	00000528 	andeq	r0, r0, r8, lsr #10
     600:	01001798 			; <UNDEFINED> instruction: 0x01001798
     604:	00000048 	andeq	r0, r0, r8, asr #32
     608:	8b080e42 	blhi	203f18 <__core1_unwind_stub-0xdfc0e8>
     60c:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	5e040b0c 	vmlapl.f64	d0, d4, d12
     614:	00080d0c 	andeq	r0, r8, ip, lsl #26
     618:	0000001c 	andeq	r0, r0, ip, lsl r0
     61c:	00000528 	andeq	r0, r0, r8, lsr #10
     620:	00000000 	andeq	r0, r0, r0
     624:	0000002c 	andeq	r0, r0, ip, lsr #32
     628:	8b080e42 	blhi	203f38 <__core1_unwind_stub-0xdfc0c8>
     62c:	42018e02 	andmi	r8, r1, #2, 28
     630:	50040b0c 	andpl	r0, r4, ip, lsl #22
     634:	00080d0c 	andeq	r0, r8, ip, lsl #26
     638:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	00000528 	andeq	r0, r0, r8, lsr #10
     640:	00000000 	andeq	r0, r0, r0
     644:	000000a4 	andeq	r0, r0, r4, lsr #1
     648:	8b040e42 	blhi	103f58 <__core1_unwind_stub-0xefc0a8>
     64c:	0b0d4201 	bleq	350e58 <__core1_unwind_stub-0xcaf1a8>
     650:	0d0d4a02 	vstreq	s8, [sp, #-8]
     654:	000ecb42 	andeq	ip, lr, r2, asr #22
     658:	0000001c 	andeq	r0, r0, ip, lsl r0
     65c:	00000528 	andeq	r0, r0, r8, lsr #10
     660:	00000000 	andeq	r0, r0, r0
     664:	000000a0 	andeq	r0, r0, r0, lsr #1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	8b040e42 	blhi	103f78 <__core1_unwind_stub-0xefc088>
     66c:	0b0d4201 	bleq	350e78 <__core1_unwind_stub-0xcaf188>
     670:	0d0d4802 	stceq	8, cr4, [sp, #-8]
     674:	000ecb42 	andeq	ip, lr, r2, asr #22
     678:	0000001c 	andeq	r0, r0, ip, lsl r0
     67c:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	010017e0 	smlatteq	r0, r0, r7, r1
     684:	00000080 	andeq	r0, r0, r0, lsl #1
     688:	8b040e42 	blhi	103f98 <__core1_unwind_stub-0xefc068>
     68c:	0b0d4201 	bleq	350e98 <__core1_unwind_stub-0xcaf168>
     690:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     694:	00000ecb 	andeq	r0, r0, fp, asr #29
     698:	0000001c 	andeq	r0, r0, ip, lsl r0
     69c:	00000528 	andeq	r0, r0, r8, lsr #10
     6a0:	01001860 	tsteq	r0, r0, ror #16
     6a4:	00000080 	andeq	r0, r0, r0, lsl #1
     6a8:	8b040e42 	blhi	103fb8 <__core1_unwind_stub-0xefc048>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	0b0d4201 	bleq	350eb8 <__core1_unwind_stub-0xcaf148>
     6b0:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     6b4:	00000ecb 	andeq	r0, r0, fp, asr #29
     6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6bc:	00000528 	andeq	r0, r0, r8, lsr #10
     6c0:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	000000d8 	ldrdeq	r0, [r0], -r8
     6c8:	8b040e42 	blhi	103fd8 <__core1_unwind_stub-0xefc028>
     6cc:	0b0d4201 	bleq	350ed8 <__core1_unwind_stub-0xcaf128>
     6d0:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
     6d4:	000ecb42 	andeq	ip, lr, r2, asr #22
     6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6dc:	00000528 	andeq	r0, r0, r8, lsr #10
     6e0:	010018e0 	smlatteq	r0, r0, r8, r1
     6e4:	00000104 	andeq	r0, r0, r4, lsl #2
     6e8:	8b040e42 	blhi	103ff8 <__core1_unwind_stub-0xefc008>
     6ec:	0b0d4201 	bleq	350ef8 <__core1_unwind_stub-0xcaf108>
     6f0:	0d0d7a02 	vstreq	s14, [sp, #-8]
     6f4:	000ecb42 	andeq	ip, lr, r2, asr #22
     6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6fc:	00000528 	andeq	r0, r0, r8, lsr #10
     700:	00000000 	andeq	r0, r0, r0
     704:	0000003c 	andeq	r0, r0, ip, lsr r0
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	8b080e42 	blhi	204018 <__core1_unwind_stub-0xdfbfe8>
     70c:	42018e02 	andmi	r8, r1, #2, 28
     710:	58040b0c 	stmdapl	r4, {r2, r3, r8, r9, fp}
     714:	00080d0c 	andeq	r0, r8, ip, lsl #26
     718:	0000001c 	andeq	r0, r0, ip, lsl r0
     71c:	00000528 	andeq	r0, r0, r8, lsr #10
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	00000000 	andeq	r0, r0, r0
     724:	000000a8 	andeq	r0, r0, r8, lsr #1
     728:	8b040e42 	blhi	104038 <__core1_unwind_stub-0xefbfc8>
     72c:	0b0d4201 	bleq	350f38 <__core1_unwind_stub-0xcaf0c8>
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     734:	000ecb42 	andeq	ip, lr, r2, asr #22
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	0000001c 	andeq	r0, r0, ip, lsl r0
     73c:	00000528 	andeq	r0, r0, r8, lsr #10
     740:	00000000 	andeq	r0, r0, r0
     744:	000000a8 	andeq	r0, r0, r8, lsr #1
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	8b040e42 	blhi	104058 <__core1_unwind_stub-0xefbfa8>
     74c:	0b0d4201 	bleq	350f58 <__core1_unwind_stub-0xcaf0a8>
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     754:	000ecb42 	andeq	ip, lr, r2, asr #22
     758:	0000001c 	andeq	r0, r0, ip, lsl r0
     75c:	00000528 	andeq	r0, r0, r8, lsr #10
     760:	00000000 	andeq	r0, r0, r0
     764:	000000a8 	andeq	r0, r0, r8, lsr #1
     768:	8b040e42 	blhi	104078 <__core1_unwind_stub-0xefbf88>
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	0b0d4201 	bleq	350f78 <__core1_unwind_stub-0xcaf088>
     770:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     774:	000ecb42 	andeq	ip, lr, r2, asr #22
     778:	0000001c 	andeq	r0, r0, ip, lsl r0
     77c:	00000528 	andeq	r0, r0, r8, lsr #10
     780:	00000000 	andeq	r0, r0, r0
     784:	000000a8 	andeq	r0, r0, r8, lsr #1
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	8b040e42 	blhi	104098 <__core1_unwind_stub-0xefbf68>
     78c:	0b0d4201 	bleq	350f98 <__core1_unwind_stub-0xcaf068>
     790:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     794:	000ecb42 	andeq	ip, lr, r2, asr #22
     798:	0000001c 	andeq	r0, r0, ip, lsl r0
     79c:	00000528 	andeq	r0, r0, r8, lsr #10
     7a0:	00000000 	andeq	r0, r0, r0
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	000000a8 	andeq	r0, r0, r8, lsr #1
     7a8:	8b040e42 	blhi	1040b8 <__core1_unwind_stub-0xefbf48>
     7ac:	0b0d4201 	bleq	350fb8 <__core1_unwind_stub-0xcaf048>
     7b0:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     7b4:	000ecb42 	andeq	ip, lr, r2, asr #22
     7b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7bc:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	0000009c 	muleq	r0, ip, r0
     7c8:	8b040e42 	blhi	1040d8 <__core1_unwind_stub-0xefbf28>
     7cc:	0b0d4201 	bleq	350fd8 <__core1_unwind_stub-0xcaf028>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	0d0d4602 	stceq	6, cr4, [sp, #-8]
     7d4:	000ecb42 	andeq	ip, lr, r2, asr #22
     7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	00000528 	andeq	r0, r0, r8, lsr #10
     7e0:	00000000 	andeq	r0, r0, r0
     7e4:	0000009c 	muleq	r0, ip, r0
     7e8:	8b040e42 	blhi	1040f8 <__core1_unwind_stub-0xefbf08>
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	0b0d4201 	bleq	350ff8 <__core1_unwind_stub-0xcaf008>
     7f0:	0d0d4602 	stceq	6, cr4, [sp, #-8]
     7f4:	000ecb42 	andeq	ip, lr, r2, asr #22
     7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	00000528 	andeq	r0, r0, r8, lsr #10
     800:	00000000 	andeq	r0, r0, r0
     804:	000000dc 	ldrdeq	r0, [r0], -ip
     808:	8b040e42 	blhi	104118 <__core1_unwind_stub-0xefbee8>
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	0b0d4201 	bleq	351018 <__core1_unwind_stub-0xcaefe8>
     810:	0d0d6602 	stceq	6, cr6, [sp, #-8]
     814:	000ecb42 	andeq	ip, lr, r2, asr #22
     818:	0000001c 	andeq	r0, r0, ip, lsl r0
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	00000528 	andeq	r0, r0, r8, lsr #10
     820:	00000000 	andeq	r0, r0, r0
     824:	000000dc 	ldrdeq	r0, [r0], -ip
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	8b040e42 	blhi	104138 <__core1_unwind_stub-0xefbec8>
     82c:	0b0d4201 	bleq	351038 <__core1_unwind_stub-0xcaefc8>
     830:	0d0d6602 	stceq	6, cr6, [sp, #-8]
     834:	000ecb42 	andeq	ip, lr, r2, asr #22
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	0000001c 	andeq	r0, r0, ip, lsl r0
     83c:	00000528 	andeq	r0, r0, r8, lsr #10
     840:	00000000 	andeq	r0, r0, r0
     844:	0000005c 	andeq	r0, r0, ip, asr r0
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	8b080e42 	blhi	204158 <__core1_unwind_stub-0xdfbea8>
     84c:	42018e02 	andmi	r8, r1, #2, 28
     850:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
     854:	00080d0c 	andeq	r0, r8, ip, lsl #26
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	0000001c 	andeq	r0, r0, ip, lsl r0
     85c:	00000528 	andeq	r0, r0, r8, lsr #10
     860:	010019e4 	smlatteq	r0, r4, r9, r1
     864:	00000074 	andeq	r0, r0, r4, ror r0
     868:	8b080e42 	blhi	204178 <__core1_unwind_stub-0xdfbe88>
     86c:	42018e02 	andmi	r8, r1, #2, 28
     870:	74040b0c 	strvc	r0, [r4], #-2828	; 0xfffff4f4
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	00080d0c 	andeq	r0, r8, ip, lsl #26
     878:	0000001c 	andeq	r0, r0, ip, lsl r0
     87c:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	00000000 	andeq	r0, r0, r0
     884:	0000003c 	andeq	r0, r0, ip, lsr r0
     888:	8b040e42 	blhi	104198 <__core1_unwind_stub-0xefbe68>
     88c:	0b0d4201 	bleq	351098 <__core1_unwind_stub-0xcaef68>
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	420d0d56 	andmi	r0, sp, #5504	; 0x1580
     894:	00000ecb 	andeq	r0, r0, fp, asr #29
     898:	0000001c 	andeq	r0, r0, ip, lsl r0
     89c:	00000528 	andeq	r0, r0, r8, lsr #10
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	01001a58 	tsteq	r0, r8, asr sl
     8a4:	00000078 	andeq	r0, r0, r8, ror r0
     8a8:	8b040e42 	blhi	1041b8 <__core1_unwind_stub-0xefbe48>
     8ac:	0b0d4201 	bleq	3510b8 <__core1_unwind_stub-0xcaef48>
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     8b4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8bc:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	00000080 	andeq	r0, r0, r0, lsl #1
     8c8:	8b040e42 	blhi	1041d8 <__core1_unwind_stub-0xefbe28>
     8cc:	0b0d4201 	bleq	3510d8 <__core1_unwind_stub-0xcaef28>
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     8d4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8dc:	00000528 	andeq	r0, r0, r8, lsr #10
    return ALT_E_SUCCESS;
     8e0:	01001ad0 	ldrdeq	r1, [r0, -r0]
}
     8e4:	00000084 	andeq	r0, r0, r4, lsl #1
     8e8:	8b040e42 	blhi	1041f8 <__core1_unwind_stub-0xefbe08>
     8ec:	0b0d4201 	bleq	3510f8 <__core1_unwind_stub-0xcaef08>
     8f0:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
     8f4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8fc:	00000528 	andeq	r0, r0, r8, lsr #10
     900:	00000000 	andeq	r0, r0, r0
     904:	0000002c 	andeq	r0, r0, ip, lsr #32
     908:	8b080e42 	blhi	204218 <__core1_unwind_stub-0xdfbde8>
     90c:	42018e02 	andmi	r8, r1, #2, 28
     910:	50040b0c 	andpl	r0, r4, ip, lsl #22
     914:	00080d0c 	andeq	r0, r8, ip, lsl #26
     918:	0000001c 	andeq	r0, r0, ip, lsl r0
     91c:	00000528 	andeq	r0, r0, r8, lsr #10
     920:	00000000 	andeq	r0, r0, r0
     924:	0000002c 	andeq	r0, r0, ip, lsr #32
     928:	8b080e42 	blhi	204238 <__core1_unwind_stub-0xdfbdc8>
     92c:	42018e02 	andmi	r8, r1, #2, 28
     930:	50040b0c 	andpl	r0, r4, ip, lsl #22
     934:	00080d0c 	andeq	r0, r8, ip, lsl #26
     938:	0000001c 	andeq	r0, r0, ip, lsl r0
     93c:	00000528 	andeq	r0, r0, r8, lsr #10
     940:	00000000 	andeq	r0, r0, r0
     944:	0000002c 	andeq	r0, r0, ip, lsr #32
     948:	8b080e42 	blhi	204258 <__core1_unwind_stub-0xdfbda8>
     94c:	42018e02 	andmi	r8, r1, #2, 28
     950:	50040b0c 	andpl	r0, r4, ip, lsl #22
     954:	00080d0c 	andeq	r0, r8, ip, lsl #26
     958:	0000001c 	andeq	r0, r0, ip, lsl r0
     95c:	00000528 	andeq	r0, r0, r8, lsr #10
     960:	00000000 	andeq	r0, r0, r0
     964:	0000002c 	andeq	r0, r0, ip, lsr #32
     968:	8b080e42 	blhi	204278 <__core1_unwind_stub-0xdfbd88>
     96c:	42018e02 	andmi	r8, r1, #2, 28
     970:	50040b0c 	andpl	r0, r4, ip, lsl #22
     974:	00080d0c 	andeq	r0, r8, ip, lsl #26
     978:	0000001c 	andeq	r0, r0, ip, lsl r0
     97c:	00000528 	andeq	r0, r0, r8, lsr #10
     980:	00000000 	andeq	r0, r0, r0
     984:	0000002c 	andeq	r0, r0, ip, lsr #32
     988:	8b080e42 	blhi	204298 <__core1_unwind_stub-0xdfbd68>
     98c:	42018e02 	andmi	r8, r1, #2, 28
     990:	50040b0c 	andpl	r0, r4, ip, lsl #22
     994:	00080d0c 	andeq	r0, r8, ip, lsl #26
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
     99c:	00000528 	andeq	r0, r0, r8, lsr #10
     9a0:	00000000 	andeq	r0, r0, r0
     9a4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9a8:	8b080e42 	blhi	2042b8 <__core1_unwind_stub-0xdfbd48>
     9ac:	42018e02 	andmi	r8, r1, #2, 28
     9b0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     9b4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9bc:	00000528 	andeq	r0, r0, r8, lsr #10
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9c8:	8b080e42 	blhi	2042d8 <__core1_unwind_stub-0xdfbd28>
     9cc:	42018e02 	andmi	r8, r1, #2, 28
     9d0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     9d4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9dc:	00000528 	andeq	r0, r0, r8, lsr #10
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9e8:	8b080e42 	blhi	2042f8 <__core1_unwind_stub-0xdfbd08>
     9ec:	42018e02 	andmi	r8, r1, #2, 28
     9f0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     9f4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9fc:	00000528 	andeq	r0, r0, r8, lsr #10
     a00:	01001b54 	tsteq	r0, r4, asr fp
     a04:	0000002c 	andeq	r0, r0, ip, lsr #32
     a08:	8b080e42 	blhi	204318 <__core1_unwind_stub-0xdfbce8>
     a0c:	42018e02 	andmi	r8, r1, #2, 28
     a10:	50040b0c 	andpl	r0, r4, ip, lsl #22
     a14:	00080d0c 	andeq	r0, r8, ip, lsl #26
     a18:	0000001c 	andeq	r0, r0, ip, lsl r0
     a1c:	00000528 	andeq	r0, r0, r8, lsr #10
     a20:	00000000 	andeq	r0, r0, r0
     a24:	0000007c 	andeq	r0, r0, ip, ror r0
     a28:	8b040e42 	blhi	104338 <__core1_unwind_stub-0xefbcc8>
     a2c:	0b0d4201 	bleq	351238 <__core1_unwind_stub-0xcaedc8>
     a30:	420d0d76 	andmi	r0, sp, #7552	; 0x1d80
     a34:	00000ecb 	andeq	r0, r0, fp, asr #29
     a38:	0000001c 	andeq	r0, r0, ip, lsl r0
     a3c:	00000528 	andeq	r0, r0, r8, lsr #10
     a40:	01001b80 	smlabbeq	r0, r0, fp, r1
     a44:	00000154 	andeq	r0, r0, r4, asr r1
     a48:	8b040e42 	blhi	104358 <__core1_unwind_stub-0xefbca8>
     a4c:	0b0d4201 	bleq	351258 <__core1_unwind_stub-0xcaeda8>
     a50:	0d0da202 	sfmeq	f2, 1, [sp, #-8]
     a54:	000ecb42 	andeq	ip, lr, r2, asr #22
     a58:	0000001c 	andeq	r0, r0, ip, lsl r0
     a5c:	00000528 	andeq	r0, r0, r8, lsr #10
     a60:	00000000 	andeq	r0, r0, r0
     a64:	00000078 	andeq	r0, r0, r8, ror r0
     a68:	8b040e42 	blhi	104378 <__core1_unwind_stub-0xefbc88>
     a6c:	0b0d4201 	bleq	351278 <__core1_unwind_stub-0xcaed88>
     a70:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     a74:	00000ecb 	andeq	r0, r0, fp, asr #29
     a78:	0000001c 	andeq	r0, r0, ip, lsl r0
     a7c:	00000528 	andeq	r0, r0, r8, lsr #10
     a80:	00000000 	andeq	r0, r0, r0
     a84:	00000078 	andeq	r0, r0, r8, ror r0
     a88:	8b040e42 	blhi	104398 <__core1_unwind_stub-0xefbc68>
     a8c:	0b0d4201 	bleq	351298 <__core1_unwind_stub-0xcaed68>
     a90:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     a94:	00000ecb 	andeq	r0, r0, fp, asr #29
     a98:	0000001c 	andeq	r0, r0, ip, lsl r0
     a9c:	00000528 	andeq	r0, r0, r8, lsr #10
     aa0:	00000000 	andeq	r0, r0, r0
     aa4:	0000006c 	andeq	r0, r0, ip, rrx
     aa8:	8b040e42 	blhi	1043b8 <__core1_unwind_stub-0xefbc48>
     aac:	0b0d4201 	bleq	3512b8 <__core1_unwind_stub-0xcaed48>
     ab0:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
     ab4:	00000ecb 	andeq	r0, r0, fp, asr #29
     ab8:	0000001c 	andeq	r0, r0, ip, lsl r0
     abc:	00000528 	andeq	r0, r0, r8, lsr #10
     ac0:	01001cd4 	ldrdeq	r1, [r0, -r4]
     ac4:	00000080 	andeq	r0, r0, r0, lsl #1
     ac8:	8b040e42 	blhi	1043d8 <__core1_unwind_stub-0xefbc28>
     acc:	0b0d4201 	bleq	3512d8 <__core1_unwind_stub-0xcaed28>
     ad0:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     ad4:	00000ecb 	andeq	r0, r0, fp, asr #29
     ad8:	0000001c 	andeq	r0, r0, ip, lsl r0
     adc:	00000528 	andeq	r0, r0, r8, lsr #10
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	00000084 	andeq	r0, r0, r4, lsl #1
     ae8:	8b040e42 	blhi	1043f8 <__core1_unwind_stub-0xefbc08>
     aec:	0b0d4201 	bleq	3512f8 <__core1_unwind_stub-0xcaed08>
     af0:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
     af4:	00000ecb 	andeq	r0, r0, fp, asr #29
     af8:	0000001c 	andeq	r0, r0, ip, lsl r0
     afc:	00000528 	andeq	r0, r0, r8, lsr #10
     b00:	00000000 	andeq	r0, r0, r0
     b04:	00000080 	andeq	r0, r0, r0, lsl #1
     b08:	8b080e42 	blhi	204418 <__core1_unwind_stub-0xdfbbe8>
     b0c:	42018e02 	andmi	r8, r1, #2, 28
     b10:	7a040b0c 	bvc	103748 <__core1_unwind_stub-0xefc8b8>
     b14:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b18:	0000001c 	andeq	r0, r0, ip, lsl r0
     b1c:	00000528 	andeq	r0, r0, r8, lsr #10
     b20:	00000000 	andeq	r0, r0, r0
     b24:	0000002c 	andeq	r0, r0, ip, lsr #32
     b28:	8b080e42 	blhi	204438 <__core1_unwind_stub-0xdfbbc8>
     b2c:	42018e02 	andmi	r8, r1, #2, 28
     b30:	50040b0c 	andpl	r0, r4, ip, lsl #22
     b34:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b38:	0000001c 	andeq	r0, r0, ip, lsl r0
     b3c:	00000528 	andeq	r0, r0, r8, lsr #10
     b40:	00000000 	andeq	r0, r0, r0
     b44:	00000044 	andeq	r0, r0, r4, asr #32
     b48:	8b080e42 	blhi	204458 <__core1_unwind_stub-0xdfbba8>
     b4c:	42018e02 	andmi	r8, r1, #2, 28
     b50:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
     b54:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b58:	0000001c 	andeq	r0, r0, ip, lsl r0
     b5c:	00000528 	andeq	r0, r0, r8, lsr #10
     b60:	00000000 	andeq	r0, r0, r0
     b64:	0000002c 	andeq	r0, r0, ip, lsr #32
     b68:	8b080e42 	blhi	204478 <__core1_unwind_stub-0xdfbb88>
     b6c:	42018e02 	andmi	r8, r1, #2, 28
     b70:	50040b0c 	andpl	r0, r4, ip, lsl #22
     b74:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b78:	0000001c 	andeq	r0, r0, ip, lsl r0
     b7c:	00000528 	andeq	r0, r0, r8, lsr #10
     b80:	00000000 	andeq	r0, r0, r0
     b84:	0000002c 	andeq	r0, r0, ip, lsr #32
     b88:	8b080e42 	blhi	204498 <__core1_unwind_stub-0xdfbb68>
     b8c:	42018e02 	andmi	r8, r1, #2, 28
     b90:	50040b0c 	andpl	r0, r4, ip, lsl #22
     b94:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b98:	0000001c 	andeq	r0, r0, ip, lsl r0
     b9c:	00000528 	andeq	r0, r0, r8, lsr #10
     ba0:	00000000 	andeq	r0, r0, r0
     ba4:	0000002c 	andeq	r0, r0, ip, lsr #32
     ba8:	8b080e42 	blhi	2044b8 <__core1_unwind_stub-0xdfbb48>
     bac:	42018e02 	andmi	r8, r1, #2, 28
     bb0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     bb4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     bb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bbc:	00000528 	andeq	r0, r0, r8, lsr #10
     bc0:	00000000 	andeq	r0, r0, r0
     bc4:	0000002c 	andeq	r0, r0, ip, lsr #32
     bc8:	8b080e42 	blhi	2044d8 <__core1_unwind_stub-0xdfbb28>
     bcc:	42018e02 	andmi	r8, r1, #2, 28
     bd0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     bd4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     bd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bdc:	00000528 	andeq	r0, r0, r8, lsr #10
     be0:	00000000 	andeq	r0, r0, r0
     be4:	0000002c 	andeq	r0, r0, ip, lsr #32
     be8:	8b080e42 	blhi	2044f8 <__core1_unwind_stub-0xdfbb08>
     bec:	42018e02 	andmi	r8, r1, #2, 28
     bf0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     bf4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     bf8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bfc:	00000528 	andeq	r0, r0, r8, lsr #10
     c00:	01001d54 	tsteq	r0, r4, asr sp
     c04:	0000002c 	andeq	r0, r0, ip, lsr #32
     c08:	8b080e42 	blhi	204518 <__core1_unwind_stub-0xdfbae8>
     c0c:	42018e02 	andmi	r8, r1, #2, 28
     c10:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c14:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c18:	0000001c 	andeq	r0, r0, ip, lsl r0
     c1c:	00000528 	andeq	r0, r0, r8, lsr #10
     c20:	00000000 	andeq	r0, r0, r0
     c24:	0000002c 	andeq	r0, r0, ip, lsr #32
     c28:	8b080e42 	blhi	204538 <__core1_unwind_stub-0xdfbac8>
     c2c:	42018e02 	andmi	r8, r1, #2, 28
     c30:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c34:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c38:	0000001c 	andeq	r0, r0, ip, lsl r0
     c3c:	00000528 	andeq	r0, r0, r8, lsr #10
     c40:	01001d80 	smlabbeq	r0, r0, sp, r1
     c44:	0000002c 	andeq	r0, r0, ip, lsr #32
     c48:	8b080e42 	blhi	204558 <__core1_unwind_stub-0xdfbaa8>
     c4c:	42018e02 	andmi	r8, r1, #2, 28
     c50:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c54:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c58:	0000001c 	andeq	r0, r0, ip, lsl r0
     c5c:	00000528 	andeq	r0, r0, r8, lsr #10
     c60:	00000000 	andeq	r0, r0, r0
     c64:	0000002c 	andeq	r0, r0, ip, lsr #32
     c68:	8b080e42 	blhi	204578 <__core1_unwind_stub-0xdfba88>
     c6c:	42018e02 	andmi	r8, r1, #2, 28
     c70:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c74:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c78:	0000001c 	andeq	r0, r0, ip, lsl r0
     c7c:	00000528 	andeq	r0, r0, r8, lsr #10
     c80:	00000000 	andeq	r0, r0, r0
     c84:	0000006c 	andeq	r0, r0, ip, rrx
     c88:	8b040e42 	blhi	104598 <__core1_unwind_stub-0xefba68>
     c8c:	0b0d4201 	bleq	351498 <__core1_unwind_stub-0xcaeb68>
     c90:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
     c94:	00000ecb 	andeq	r0, r0, fp, asr #29
     c98:	0000000c 	andeq	r0, r0, ip
     c9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ca0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ca4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ca8:	00000030 	andeq	r0, r0, r0, lsr r0
     cac:	00000c98 	muleq	r0, r8, ip
     cb0:	01001dac 	smlatbeq	r0, ip, sp, r1
     cb4:	00000024 	andeq	r0, r0, r4, lsr #32
     cb8:	80100e42 	andshi	r0, r0, r2, asr #28
     cbc:	82038104 	andhi	r8, r3, #4, 2
     cc0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     cc4:	058b140e 	streq	r1, [fp, #1038]	; 0x40e
     cc8:	460b0d42 	strmi	r0, [fp], -r2, asr #26
     ccc:	cb420d0d 	blgt	1084108 <__end__+0x680e8>
     cd0:	c342100e 	movtgt	r1, #8206	; 0x200e
     cd4:	0ec0c1c2 	acseqdm	f4, f2
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ce0:	00000c98 	muleq	r0, r8, ip
     ce4:	01001dd0 	ldrdeq	r1, [r0, -r0]
     ce8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cec:	8b040e42 	blhi	1045fc <__core1_unwind_stub-0xefba04>
     cf0:	0b0d4201 	bleq	3514fc <__core1_unwind_stub-0xcaeb04>
     cf4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     cf8:	00000ecb 	andeq	r0, r0, fp, asr #29
     cfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     d00:	00000c98 	muleq	r0, r8, ip
     d04:	00000000 	andeq	r0, r0, r0
     d08:	0000001c 	andeq	r0, r0, ip, lsl r0
     d0c:	8b040e42 	blhi	10461c <__core1_unwind_stub-0xefb9e4>
     d10:	0b0d4201 	bleq	35151c <__core1_unwind_stub-0xcaeae4>
     d14:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     d18:	00000ecb 	andeq	r0, r0, fp, asr #29
     d1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d20:	00000c98 	muleq	r0, r8, ip
     d24:	01001dec 	smlatteq	r0, ip, sp, r1
     d28:	0000008c 	andeq	r0, r0, ip, lsl #1
     d2c:	8b080e42 	blhi	20463c <__core1_unwind_stub-0xdfb9c4>
     d30:	42018e02 	andmi	r8, r1, #2, 28
     d34:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     d38:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
     d3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d40:	00000c98 	muleq	r0, r8, ip
     d44:	00000000 	andeq	r0, r0, r0
     d48:	00000150 	andeq	r0, r0, r0, asr r1
     d4c:	8b040e42 	blhi	10465c <__core1_unwind_stub-0xefb9a4>
     d50:	0b0d4201 	bleq	35155c <__core1_unwind_stub-0xcaeaa4>
     d54:	0d0da002 	stceq	0, cr10, [sp, #-8]
     d58:	000ecb42 	andeq	ip, lr, r2, asr #22
     d5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d60:	00000c98 	muleq	r0, r8, ip
     d64:	00000000 	andeq	r0, r0, r0
     d68:	00000168 	andeq	r0, r0, r8, ror #2
     d6c:	8b040e42 	blhi	10467c <__core1_unwind_stub-0xefb984>
     d70:	0b0d4201 	bleq	35157c <__core1_unwind_stub-0xcaea84>
     d74:	0d0dac02 	stceq	12, cr10, [sp, #-8]
     d78:	000ecb42 	andeq	ip, lr, r2, asr #22
     d7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d80:	00000c98 	muleq	r0, r8, ip
     d84:	00000000 	andeq	r0, r0, r0
     d88:	00000068 	andeq	r0, r0, r8, rrx
     d8c:	8b080e42 	blhi	20469c <__core1_unwind_stub-0xdfb964>
     d90:	42018e02 	andmi	r8, r1, #2, 28
     d94:	6e040b0c 	vmlavs.f64	d0, d4, d12
     d98:	00080d0c 	andeq	r0, r8, ip, lsl #26
     d9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     da0:	00000c98 	muleq	r0, r8, ip
     da4:	01001e78 	tsteq	r0, r8, ror lr
     da8:	00000050 	andeq	r0, r0, r0, asr r0
     dac:	8b080e42 	blhi	2046bc <__core1_unwind_stub-0xdfb944>
     db0:	42018e02 	andmi	r8, r1, #2, 28
     db4:	62040b0c 	andvs	r0, r4, #12, 22	; 0x3000
     db8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     dbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     dc0:	00000c98 	muleq	r0, r8, ip
     dc4:	00000000 	andeq	r0, r0, r0
     dc8:	00000074 	andeq	r0, r0, r4, ror r0
     dcc:	8b040e42 	blhi	1046dc <__core1_unwind_stub-0xefb924>
     dd0:	0b0d4201 	bleq	3515dc <__core1_unwind_stub-0xcaea24>
     dd4:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
     dd8:	00000ecb 	andeq	r0, r0, fp, asr #29
     ddc:	0000001c 	andeq	r0, r0, ip, lsl r0
     de0:	00000c98 	muleq	r0, r8, ip
     de4:	01001ec8 	smlabteq	r0, r8, lr, r1
     de8:	000000e0 	andeq	r0, r0, r0, ror #1
     dec:	8b040e42 	blhi	1046fc <__core1_unwind_stub-0xefb904>
     df0:	0b0d4201 	bleq	3515fc <__core1_unwind_stub-0xcaea04>
     df4:	0d0d6802 	stceq	8, cr6, [sp, #-8]
     df8:	000ecb42 	andeq	ip, lr, r2, asr #22
     dfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     e00:	00000c98 	muleq	r0, r8, ip
     e04:	00000000 	andeq	r0, r0, r0
     e08:	00000038 	andeq	r0, r0, r8, lsr r0
     e0c:	8b040e42 	blhi	10471c <__core1_unwind_stub-0xefb8e4>
     e10:	0b0d4201 	bleq	35161c <__core1_unwind_stub-0xcae9e4>
     e14:	420d0d54 	andmi	r0, sp, #84, 26	; 0x1500
     e18:	00000ecb 	andeq	r0, r0, fp, asr #29
     e1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e20:	00000c98 	muleq	r0, r8, ip
     e24:	00000000 	andeq	r0, r0, r0
     e28:	0000007c 	andeq	r0, r0, ip, ror r0
     e2c:	8b040e42 	blhi	10473c <__core1_unwind_stub-0xefb8c4>
     e30:	0b0d4201 	bleq	35163c <__core1_unwind_stub-0xcae9c4>
     e34:	420d0d76 	andmi	r0, sp, #7552	; 0x1d80
     e38:	00000ecb 	andeq	r0, r0, fp, asr #29
     e3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e40:	00000c98 	muleq	r0, r8, ip
     e44:	01001fa8 	smlatbeq	r0, r8, pc, r1	; <UNPREDICTABLE>
     e48:	000000b4 	strheq	r0, [r0], -r4
     e4c:	8b040e42 	blhi	10475c <__core1_unwind_stub-0xefb8a4>
     e50:	0b0d4201 	bleq	35165c <__core1_unwind_stub-0xcae9a4>
     e54:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
     e58:	000ecb42 	andeq	ip, lr, r2, asr #22
     e5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e60:	00000c98 	muleq	r0, r8, ip
     e64:	0100205c 	qaddeq	r2, ip, r0
     e68:	000000e0 	andeq	r0, r0, r0, ror #1
     e6c:	8b040e42 	blhi	10477c <__core1_unwind_stub-0xefb884>
     e70:	0b0d4201 	bleq	35167c <__core1_unwind_stub-0xcae984>
     e74:	0d0d6802 	stceq	8, cr6, [sp, #-8]
     e78:	000ecb42 	andeq	ip, lr, r2, asr #22
     e7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e80:	00000c98 	muleq	r0, r8, ip
     e84:	00000000 	andeq	r0, r0, r0
     e88:	00000078 	andeq	r0, r0, r8, ror r0
     e8c:	8b040e42 	blhi	10479c <__core1_unwind_stub-0xefb864>
     e90:	0b0d4201 	bleq	35169c <__core1_unwind_stub-0xcae964>
     e94:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     e98:	00000ecb 	andeq	r0, r0, fp, asr #29
     e9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     ea0:	00000c98 	muleq	r0, r8, ip
     ea4:	0100213c 	tsteq	r0, ip, lsr r1
     ea8:	00000034 	andeq	r0, r0, r4, lsr r0
     eac:	8b040e42 	blhi	1047bc <__core1_unwind_stub-0xefb844>
     eb0:	0b0d4201 	bleq	3516bc <__core1_unwind_stub-0xcae944>
     eb4:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     eb8:	00000ecb 	andeq	r0, r0, fp, asr #29
     ebc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ec0:	00000c98 	muleq	r0, r8, ip
     ec4:	00000000 	andeq	r0, r0, r0
     ec8:	00000034 	andeq	r0, r0, r4, lsr r0
     ecc:	8b040e42 	blhi	1047dc <__core1_unwind_stub-0xefb824>
     ed0:	0b0d4201 	bleq	3516dc <__core1_unwind_stub-0xcae924>
     ed4:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     ed8:	00000ecb 	andeq	r0, r0, fp, asr #29
     edc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ee0:	00000c98 	muleq	r0, r8, ip
     ee4:	01002170 	tsteq	r0, r0, ror r1
     ee8:	00000068 	andeq	r0, r0, r8, rrx
     eec:	8b040e42 	blhi	1047fc <__core1_unwind_stub-0xefb804>
     ef0:	0b0d4201 	bleq	3516fc <__core1_unwind_stub-0xcae904>
     ef4:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
     ef8:	00000ecb 	andeq	r0, r0, fp, asr #29
     efc:	00000020 	andeq	r0, r0, r0, lsr #32
     f00:	00000c98 	muleq	r0, r8, ip
     f04:	010021d8 	ldrdeq	r2, [r0, -r8]
     f08:	00000328 	andeq	r0, r0, r8, lsr #6
     f0c:	8b080e42 	blhi	20481c <__core1_unwind_stub-0xdfb7e4>
     f10:	42018e02 	andmi	r8, r1, #2, 28
     f14:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     f18:	0d0c018e 	stfeqs	f0, [ip, #-568]	; 0xfffffdc8
     f1c:	00000008 	andeq	r0, r0, r8
     f20:	0000001c 	andeq	r0, r0, ip, lsl r0
     f24:	00000c98 	muleq	r0, r8, ip
     f28:	01002500 	tsteq	r0, r0, lsl #10
     f2c:	00000068 	andeq	r0, r0, r8, rrx
     f30:	8b080e42 	blhi	204840 <__core1_unwind_stub-0xdfb7c0>
     f34:	42018e02 	andmi	r8, r1, #2, 28
     f38:	6e040b0c 	vmlavs.f64	d0, d4, d12
     f3c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     f40:	0000001c 	andeq	r0, r0, ip, lsl r0
     f44:	00000c98 	muleq	r0, r8, ip
     f48:	01002568 	tsteq	r0, r8, ror #10
     f4c:	00000060 	andeq	r0, r0, r0, rrx
     f50:	8b040e42 	blhi	104860 <__core1_unwind_stub-0xefb7a0>
     f54:	0b0d4201 	bleq	351760 <__core1_unwind_stub-0xcae8a0>
     f58:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     f5c:	00000ecb 	andeq	r0, r0, fp, asr #29
     f60:	0000001c 	andeq	r0, r0, ip, lsl r0
     f64:	00000c98 	muleq	r0, r8, ip
     f68:	010025c8 	smlabteq	r0, r8, r5, r2
     f6c:	00000124 	andeq	r0, r0, r4, lsr #2
     f70:	8b040e42 	blhi	104880 <__core1_unwind_stub-0xefb780>
     f74:	0b0d4201 	bleq	351780 <__core1_unwind_stub-0xcae880>
     f78:	0d0d8a02 	vstreq	s16, [sp, #-8]
     f7c:	000ecb42 	andeq	ip, lr, r2, asr #22
     f80:	0000001c 	andeq	r0, r0, ip, lsl r0
     f84:	00000c98 	muleq	r0, r8, ip
     f88:	010026ec 	smlatteq	r0, ip, r6, r2
     f8c:	00000124 	andeq	r0, r0, r4, lsr #2
     f90:	8b040e42 	blhi	1048a0 <__core1_unwind_stub-0xefb760>
     f94:	0b0d4201 	bleq	3517a0 <__core1_unwind_stub-0xcae860>
     f98:	0d0d8a02 	vstreq	s16, [sp, #-8]
     f9c:	000ecb42 	andeq	ip, lr, r2, asr #22
     fa0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fa4:	00000c98 	muleq	r0, r8, ip
     fa8:	01002810 	tsteq	r0, r0, lsl r8
     fac:	0000010c 	andeq	r0, r0, ip, lsl #2
     fb0:	8b040e42 	blhi	1048c0 <__core1_unwind_stub-0xefb740>
     fb4:	0b0d4201 	bleq	3517c0 <__core1_unwind_stub-0xcae840>
     fb8:	0d0d7e02 	stceq	14, cr7, [sp, #-8]
     fbc:	000ecb42 	andeq	ip, lr, r2, asr #22
     fc0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fc4:	00000c98 	muleq	r0, r8, ip
     fc8:	0100291c 	tsteq	r0, ip, lsl r9
     fcc:	00000110 	andeq	r0, r0, r0, lsl r1
     fd0:	8b040e42 	blhi	1048e0 <__core1_unwind_stub-0xefb720>
     fd4:	0b0d4201 	bleq	3517e0 <__core1_unwind_stub-0xcae820>
     fd8:	0d0d8002 	stceq	0, cr8, [sp, #-8]
     fdc:	000ecb42 	andeq	ip, lr, r2, asr #22
     fe0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fe4:	00000c98 	muleq	r0, r8, ip
     fe8:	01002a2c 	tsteq	r0, ip, lsr #20
     fec:	00000048 	andeq	r0, r0, r8, asr #32
     ff0:	8b080e42 	blhi	204900 <__core1_unwind_stub-0xdfb700>
     ff4:	42018e02 	andmi	r8, r1, #2, 28
     ff8:	5e040b0c 	vmlapl.f64	d0, d4, d12
     ffc:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1000:	00000020 	andeq	r0, r0, r0, lsr #32
    1004:	00000c98 	muleq	r0, r8, ip
    1008:	01002a74 	tsteq	r0, r4, ror sl
    100c:	00000dd8 	ldrdeq	r0, [r0], -r8
    1010:	8b080e42 	blhi	204920 <__core1_unwind_stub-0xdfb6e0>
    1014:	42018e02 	andmi	r8, r1, #2, 28
    1018:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    101c:	0d0c06e6 	stceq	6, cr0, [ip, #-920]	; 0xfffffc68
    1020:	00000008 	andeq	r0, r0, r8
    1024:	0000001c 	andeq	r0, r0, ip, lsl r0
    1028:	00000c98 	muleq	r0, r8, ip
    102c:	0100384c 	tsteq	r0, ip, asr #16
    1030:	0000013c 	andeq	r0, r0, ip, lsr r1
    1034:	8b080e42 	blhi	204944 <__core1_unwind_stub-0xdfb6bc>
    1038:	42018e02 	andmi	r8, r1, #2, 28
    103c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1040:	080d0c98 	stmdaeq	sp, {r3, r4, r7, sl, fp}
    1044:	0000001c 	andeq	r0, r0, ip, lsl r0
    1048:	00000c98 	muleq	r0, r8, ip
    104c:	00000000 	andeq	r0, r0, r0
    1050:	00000184 	andeq	r0, r0, r4, lsl #3
    1054:	8b080e42 	blhi	204964 <__core1_unwind_stub-0xdfb69c>
    1058:	42018e02 	andmi	r8, r1, #2, 28
    105c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1060:	080d0cbc 	stmdaeq	sp, {r2, r3, r4, r5, r7, sl, fp}
    1064:	0000001c 	andeq	r0, r0, ip, lsl r0
    1068:	00000c98 	muleq	r0, r8, ip
    106c:	00000000 	andeq	r0, r0, r0
    1070:	000000e0 	andeq	r0, r0, r0, ror #1
    1074:	8b080e42 	blhi	204984 <__core1_unwind_stub-0xdfb67c>
    1078:	42018e02 	andmi	r8, r1, #2, 28
    107c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1080:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
    1084:	0000001c 	andeq	r0, r0, ip, lsl r0
    1088:	00000c98 	muleq	r0, r8, ip
    108c:	00000000 	andeq	r0, r0, r0
    1090:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1094:	8b080e42 	blhi	2049a4 <__core1_unwind_stub-0xdfb65c>
    1098:	42018e02 	andmi	r8, r1, #2, 28
    109c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    10a0:	080d0cd8 	stmdaeq	sp, {r3, r4, r6, r7, sl, fp}
    10a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10a8:	00000c98 	muleq	r0, r8, ip
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	00000044 	andeq	r0, r0, r4, asr #32
    10b4:	8b080e42 	blhi	2049c4 <__core1_unwind_stub-0xdfb63c>
    10b8:	42018e02 	andmi	r8, r1, #2, 28
    10bc:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
    10c0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    10d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10d8:	000010c4 	andeq	r1, r0, r4, asr #1
    10dc:	00000000 	andeq	r0, r0, r0
    10e0:	00000030 	andeq	r0, r0, r0, lsr r0
    10e4:	8b080e42 	blhi	2049f4 <__core1_unwind_stub-0xdfb60c>
    10e8:	42018e02 	andmi	r8, r1, #2, 28
    10ec:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
    10f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    10f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10f8:	000010c4 	andeq	r1, r0, r4, asr #1
    10fc:	00000000 	andeq	r0, r0, r0
    1100:	00000090 	muleq	r0, r0, r0
    1104:	8b080e42 	blhi	204a14 <__core1_unwind_stub-0xdfb5ec>
    1108:	42018e02 	andmi	r8, r1, #2, 28
    110c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1110:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
    1114:	0000001c 	andeq	r0, r0, ip, lsl r0
    1118:	000010c4 	andeq	r1, r0, r4, asr #1
    111c:	00000000 	andeq	r0, r0, r0
    1120:	000000b4 	strheq	r0, [r0], -r4
    1124:	8b040e42 	blhi	104a34 <__core1_unwind_stub-0xefb5cc>
    1128:	0b0d4201 	bleq	351934 <__core1_unwind_stub-0xcae6cc>
    112c:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
    1130:	000ecb42 	andeq	ip, lr, r2, asr #22
    1134:	0000002c 	andeq	r0, r0, ip, lsr #32
    1138:	000010c4 	andeq	r1, r0, r4, asr #1
    113c:	00000000 	andeq	r0, r0, r0
    1140:	00000078 	andeq	r0, r0, r8, ror r0
    1144:	82080e42 	andhi	r0, r8, #1056	; 0x420
    1148:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
    114c:	048b100e 	streq	r1, [fp], #14
    1150:	0c42038e 	mcrreq	3, 8, r0, r2, cr14
    1154:	0c700c0b 	ldcleq	12, cr0, [r0], #-44	; 0xffffffd4
    1158:	ce42100d 	cdpgt	0, 4, cr1, cr2, cr13, {0}
    115c:	42080ecb 	andmi	r0, r8, #3248	; 0xcb0
    1160:	000ec2c3 	andeq	ip, lr, r3, asr #5
    1164:	00000030 	andeq	r0, r0, r0, lsr r0
    1168:	000010c4 	andeq	r1, r0, r4, asr #1
    116c:	00000000 	andeq	r0, r0, r0
    1170:	00000068 	andeq	r0, r0, r8, rrx
    1174:	810c0e42 	tsthi	ip, r2, asr #28
    1178:	83028203 	movwhi	r8, #8707	; 0x2203
    117c:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
    1180:	048e058b 	streq	r0, [lr], #1419	; 0x58b
    1184:	100b0c42 	andne	r0, fp, r2, asr #24
    1188:	140d0c68 	strne	r0, [sp], #-3176	; 0xfffff398
    118c:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
    1190:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
    1194:	00000ec1 	andeq	r0, r0, r1, asr #29
    1198:	00000034 	andeq	r0, r0, r4, lsr r0
    119c:	000010c4 	andeq	r1, r0, r4, asr #1
    11a0:	01003988 	smlabbeq	r0, r8, r9, r3
    11a4:	00000050 	andeq	r0, r0, r0, asr r0
    11a8:	80100e42 	andshi	r0, r0, r2, asr #28
    11ac:	82038104 	andhi	r8, r3, #4, 2
    11b0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
    11b4:	068b180e 	streq	r1, [fp], lr, lsl #16
    11b8:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
    11bc:	0c5c140b 	cfldrdeq	mvd1, [ip], {11}
    11c0:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
    11c4:	42100ecb 	andsmi	r0, r0, #3248	; 0xcb0
    11c8:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
    11cc:	0000000e 	andeq	r0, r0, lr
    11d0:	00000030 	andeq	r0, r0, r0, lsr r0
    11d4:	000010c4 	andeq	r1, r0, r4, asr #1
    11d8:	00000000 	andeq	r0, r0, r0
    11dc:	00000048 	andeq	r0, r0, r8, asr #32
    11e0:	810c0e42 	tsthi	ip, r2, asr #28
    11e4:	83028203 	movwhi	r8, #8707	; 0x2203
    11e8:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
    11ec:	048e058b 	streq	r0, [lr], #1419	; 0x58b
    11f0:	100b0c42 	andne	r0, fp, r2, asr #24
    11f4:	140d0c58 	strne	r0, [sp], #-3160	; 0xfffff3a8
    11f8:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
    11fc:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
    1200:	00000ec1 	andeq	r0, r0, r1, asr #29
    1204:	0000001c 	andeq	r0, r0, ip, lsl r0
    1208:	000010c4 	andeq	r1, r0, r4, asr #1
    120c:	010039d8 	ldrdeq	r3, [r0, -r8]
    1210:	0000006c 	andeq	r0, r0, ip, rrx
    1214:	8b080e42 	blhi	204b24 <__core1_unwind_stub-0xdfb4dc>
    1218:	42018e02 	andmi	r8, r1, #2, 28
    121c:	70040b0c 	andvc	r0, r4, ip, lsl #22
    1220:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1224:	0000001c 	andeq	r0, r0, ip, lsl r0
    1228:	000010c4 	andeq	r1, r0, r4, asr #1
    122c:	01003a44 	tsteq	r0, r4, asr #20
    1230:	00000058 	andeq	r0, r0, r8, asr r0
    1234:	8b040e42 	blhi	104b44 <__core1_unwind_stub-0xefb4bc>
    1238:	0b0d4201 	bleq	351a44 <__core1_unwind_stub-0xcae5bc>
    123c:	420d0d64 	andmi	r0, sp, #100, 26	; 0x1900
    1240:	00000ecb 	andeq	r0, r0, fp, asr #29
    1244:	0000001c 	andeq	r0, r0, ip, lsl r0
    1248:	000010c4 	andeq	r1, r0, r4, asr #1
    124c:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
    1250:	00000098 	muleq	r0, r8, r0
    1254:	8b080e42 	blhi	204b64 <__core1_unwind_stub-0xdfb49c>
    1258:	42018e02 	andmi	r8, r1, #2, 28
    125c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1260:	080d0c46 	stmdaeq	sp, {r1, r2, r6, sl, fp}
    1264:	0000001c 	andeq	r0, r0, ip, lsl r0
    1268:	000010c4 	andeq	r1, r0, r4, asr #1
    126c:	01003b34 	tsteq	r0, r4, lsr fp
    1270:	0000013c 	andeq	r0, r0, ip, lsr r1
    1274:	8b080e42 	blhi	204b84 <__core1_unwind_stub-0xdfb47c>
    1278:	42018e02 	andmi	r8, r1, #2, 28
    127c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1280:	080d0c98 	stmdaeq	sp, {r3, r4, r7, sl, fp}
    1284:	0000001c 	andeq	r0, r0, ip, lsl r0
    1288:	000010c4 	andeq	r1, r0, r4, asr #1
    128c:	01003c70 	tsteq	r0, r0, ror ip
    1290:	00000178 	andeq	r0, r0, r8, ror r1
    1294:	8b040e42 	blhi	104ba4 <__core1_unwind_stub-0xefb45c>
    1298:	0b0d4201 	bleq	351aa4 <__core1_unwind_stub-0xcae55c>
    129c:	0d0db402 	cfstrseq	mvf11, [sp, #-8]
    12a0:	000ecb42 	andeq	ip, lr, r2, asr #22
    12a4:	00000020 	andeq	r0, r0, r0, lsr #32
    12a8:	000010c4 	andeq	r1, r0, r4, asr #1
    12ac:	01003de8 	smlatteq	r0, r8, sp, r3
    12b0:	0000081c 	andeq	r0, r0, ip, lsl r8
    12b4:	8b080e42 	blhi	204bc4 <__core1_unwind_stub-0xdfb43c>
    12b8:	42018e02 	andmi	r8, r1, #2, 28
    12bc:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    12c0:	0d0c0408 	cfstrseq	mvf0, [ip, #-32]	; 0xffffffe0
    12c4:	00000008 	andeq	r0, r0, r8
    12c8:	00000020 	andeq	r0, r0, r0, lsr #32
    12cc:	000010c4 	andeq	r1, r0, r4, asr #1
    12d0:	01004604 	tsteq	r0, r4, lsl #12
    12d4:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    12d8:	8b080e42 	blhi	204be8 <__core1_unwind_stub-0xdfb418>
    12dc:	42018e02 	andmi	r8, r1, #2, 28
    12e0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    12e4:	0d0c0154 	stfeqs	f0, [ip, #-336]	; 0xfffffeb0
    12e8:	00000008 	andeq	r0, r0, r8
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    12f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1300:	000012ec 	andeq	r1, r0, ip, ror #5
    1304:	010048b8 			; <UNDEFINED> instruction: 0x010048b8
    1308:	00000080 	andeq	r0, r0, r0, lsl #1
    130c:	8b080e42 	blhi	204c1c <__core1_unwind_stub-0xdfb3e4>
    1310:	42018e02 	andmi	r8, r1, #2, 28
    1314:	7a040b0c 	bvc	103f4c <__core1_unwind_stub-0xefc0b4>
    1318:	00080d0c 	andeq	r0, r8, ip, lsl #26
    131c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1320:	000012ec 	andeq	r1, r0, ip, ror #5
    1324:	01004938 	tsteq	r0, r8, lsr r9
    1328:	000000d8 	ldrdeq	r0, [r0], -r8
    132c:	8b080e42 	blhi	204c3c <__core1_unwind_stub-0xdfb3c4>
    1330:	42018e02 	andmi	r8, r1, #2, 28
    1334:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1338:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
    133c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1340:	000012ec 	andeq	r1, r0, ip, ror #5
    1344:	00000000 	andeq	r0, r0, r0
    1348:	0000007c 	andeq	r0, r0, ip, ror r0
    134c:	8b080e42 	blhi	204c5c <__core1_unwind_stub-0xdfb3a4>
    1350:	42018e02 	andmi	r8, r1, #2, 28
    1354:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
    1358:	00080d0c 	andeq	r0, r8, ip, lsl #26
    135c:	0000000c 	andeq	r0, r0, ip
    1360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1364:	7c020001 	stcvc	0, cr0, [r2], {1}
    1368:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    136c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1370:	0000135c 	andeq	r1, r0, ip, asr r3
    1374:	01004a10 	tsteq	r0, r0, lsl sl
    1378:	0000005c 	andeq	r0, r0, ip, asr r0
    137c:	8b040e42 	blhi	104c8c <__core1_unwind_stub-0xefb374>
    1380:	0b0d4201 	bleq	351b8c <__core1_unwind_stub-0xcae474>
    1384:	420d0d66 	andmi	r0, sp, #6528	; 0x1980
    1388:	00000ecb 	andeq	r0, r0, fp, asr #29
    138c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1390:	0000135c 	andeq	r1, r0, ip, asr r3
    1394:	01004a6c 	tsteq	r0, ip, ror #20
    1398:	0000002c 	andeq	r0, r0, ip, lsr #32
    139c:	8b040e42 	blhi	104cac <__core1_unwind_stub-0xefb354>
    13a0:	0b0d4201 	bleq	351bac <__core1_unwind_stub-0xcae454>
    13a4:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
    13a8:	00000ecb 	andeq	r0, r0, fp, asr #29
    13ac:	00000018 	andeq	r0, r0, r8, lsl r0
    13b0:	0000135c 	andeq	r1, r0, ip, asr r3
    13b4:	01004a98 			; <UNDEFINED> instruction: 0x01004a98
    13b8:	000000bc 	strheq	r0, [r0], -ip
    13bc:	8b080e42 	blhi	204ccc <__core1_unwind_stub-0xdfb334>
    13c0:	42018e02 	andmi	r8, r1, #2, 28
    13c4:	00040b0c 	andeq	r0, r4, ip, lsl #22
    13c8:	0000000c 	andeq	r0, r0, ip
    13cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    13d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13d8:	00000018 	andeq	r0, r0, r8, lsl r0
    13dc:	000013c8 	andeq	r1, r0, r8, asr #7
    13e0:	01004b54 	tsteq	r0, r4, asr fp
    13e4:	00000050 	andeq	r0, r0, r0, asr r0
    13e8:	8b080e42 	blhi	204cf8 <__core1_unwind_stub-0xdfb308>
    13ec:	42018e02 	andmi	r8, r1, #2, 28
    13f0:	00040b0c 	andeq	r0, r4, ip, lsl #22
    13f4:	0000000c 	andeq	r0, r0, ip
    13f8:	000013c8 	andeq	r1, r0, r8, asr #7
    13fc:	01004ba4 	smlatbeq	r0, r4, fp, r4
    1400:	0000000c 	andeq	r0, r0, ip
    1404:	0000000c 	andeq	r0, r0, ip
    1408:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    140c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1410:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1414:	0000001c 	andeq	r0, r0, ip, lsl r0
    1418:	00001404 	andeq	r1, r0, r4, lsl #8
    141c:	01004bb4 			; <UNDEFINED> instruction: 0x01004bb4
    1420:	00000074 	andeq	r0, r0, r4, ror r0
    1424:	8b040e42 	blhi	104d34 <__core1_unwind_stub-0xefb2cc>
    1428:	0b0d4201 	bleq	351c34 <__core1_unwind_stub-0xcae3cc>
    142c:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
    1430:	00000ecb 	andeq	r0, r0, fp, asr #29
    1434:	0000001c 	andeq	r0, r0, ip, lsl r0
    1438:	00001404 	andeq	r1, r0, r4, lsl #8
    143c:	01004c28 	tsteq	r0, r8, lsr #24
    1440:	00000084 	andeq	r0, r0, r4, lsl #1
    1444:	8b040e42 	blhi	104d54 <__core1_unwind_stub-0xefb2ac>
    1448:	0b0d4201 	bleq	351c54 <__core1_unwind_stub-0xcae3ac>
    144c:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
    1450:	00000ecb 	andeq	r0, r0, fp, asr #29
    1454:	0000001c 	andeq	r0, r0, ip, lsl r0
    1458:	00001404 	andeq	r1, r0, r4, lsl #8
    145c:	00000000 	andeq	r0, r0, r0
    1460:	00000108 	andeq	r0, r0, r8, lsl #2
    1464:	8b040e42 	blhi	104d74 <__core1_unwind_stub-0xefb28c>
    1468:	0b0d4201 	bleq	351c74 <__core1_unwind_stub-0xcae38c>
    146c:	0d0d7c02 	stceq	12, cr7, [sp, #-8]
    1470:	000ecb42 	andeq	ip, lr, r2, asr #22
    1474:	0000000c 	andeq	r0, r0, ip
    1478:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    147c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1480:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1484:	0000001c 	andeq	r0, r0, ip, lsl r0
    1488:	00001474 	andeq	r1, r0, r4, ror r4
    148c:	01004cac 	smlatbeq	r0, ip, ip, r4
    1490:	0000001c 	andeq	r0, r0, ip, lsl r0
    1494:	8b040e42 	blhi	104da4 <__core1_unwind_stub-0xefb25c>
    1498:	0b0d4201 	bleq	351ca4 <__core1_unwind_stub-0xcae35c>
    149c:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
    14a0:	00000ecb 	andeq	r0, r0, fp, asr #29
    14a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14a8:	00001474 	andeq	r1, r0, r4, ror r4
    14ac:	01004cc8 	smlabteq	r0, r8, ip, r4
    14b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    14b4:	8b040e42 	blhi	104dc4 <__core1_unwind_stub-0xefb23c>
    14b8:	0b0d4201 	bleq	351cc4 <__core1_unwind_stub-0xcae33c>
    14bc:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
    14c0:	00000ecb 	andeq	r0, r0, fp, asr #29
    14c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14c8:	00001474 	andeq	r1, r0, r4, ror r4
    14cc:	01004ce4 	smlatteq	r0, r4, ip, r4
    14d0:	00000054 	andeq	r0, r0, r4, asr r0
    14d4:	8b040e42 	blhi	104de4 <__core1_unwind_stub-0xefb21c>
    14d8:	0b0d4201 	bleq	351ce4 <__core1_unwind_stub-0xcae31c>
    14dc:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
    14e0:	00000ecb 	andeq	r0, r0, fp, asr #29
    14e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14e8:	00001474 	andeq	r1, r0, r4, ror r4
    14ec:	01004d38 	tsteq	r0, r8, lsr sp
    14f0:	0000008c 	andeq	r0, r0, ip, lsl #1
    14f4:	8b080e42 	blhi	204e04 <__core1_unwind_stub-0xdfb1fc>
    14f8:	42018e02 	andmi	r8, r1, #2, 28
    14fc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1500:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
    1504:	0000001c 	andeq	r0, r0, ip, lsl r0
    1508:	00001474 	andeq	r1, r0, r4, ror r4
    150c:	01004dc4 	smlabteq	r0, r4, sp, r4
    1510:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1514:	8b040e42 	blhi	104e24 <__core1_unwind_stub-0xefb1dc>
    1518:	0b0d4201 	bleq	351d24 <__core1_unwind_stub-0xcae2dc>
    151c:	0d0d6002 	stceq	0, cr6, [sp, #-8]
    1520:	000ecb42 	andeq	ip, lr, r2, asr #22
    1524:	0000001c 	andeq	r0, r0, ip, lsl r0
    1528:	00001474 	andeq	r1, r0, r4, ror r4
    152c:	01004e94 			; <UNDEFINED> instruction: 0x01004e94
    1530:	00000118 	andeq	r0, r0, r8, lsl r1
    1534:	8b080e42 	blhi	204e44 <__core1_unwind_stub-0xdfb1bc>
    1538:	42018e02 	andmi	r8, r1, #2, 28
    153c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1540:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
    1544:	0000001c 	andeq	r0, r0, ip, lsl r0
    1548:	00001474 	andeq	r1, r0, r4, ror r4
    154c:	00000000 	andeq	r0, r0, r0
    1550:	0000005c 	andeq	r0, r0, ip, asr r0
    1554:	8b040e42 	blhi	104e64 <__core1_unwind_stub-0xefb19c>
    1558:	0b0d4201 	bleq	351d64 <__core1_unwind_stub-0xcae29c>
    155c:	420d0d66 	andmi	r0, sp, #6528	; 0x1980
    1560:	00000ecb 	andeq	r0, r0, fp, asr #29
    1564:	0000001c 	andeq	r0, r0, ip, lsl r0
    1568:	00001474 	andeq	r1, r0, r4, ror r4
    156c:	01004fac 	smlatbeq	r0, ip, pc, r4	; <UNPREDICTABLE>
    1570:	0000003c 	andeq	r0, r0, ip, lsr r0
    1574:	8b080e42 	blhi	204e84 <__core1_unwind_stub-0xdfb17c>
    1578:	42018e02 	andmi	r8, r1, #2, 28
    157c:	58040b0c 	stmdapl	r4, {r2, r3, r8, r9, fp}
    1580:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1584:	0000001c 	andeq	r0, r0, ip, lsl r0
    1588:	00001474 	andeq	r1, r0, r4, ror r4
    158c:	00000000 	andeq	r0, r0, r0
    1590:	00000030 	andeq	r0, r0, r0, lsr r0
    1594:	8b080e42 	blhi	204ea4 <__core1_unwind_stub-0xdfb15c>
    1598:	42018e02 	andmi	r8, r1, #2, 28
    159c:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
    15a0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    15a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15a8:	00001474 	andeq	r1, r0, r4, ror r4
    15ac:	00000000 	andeq	r0, r0, r0
    15b0:	000000dc 	ldrdeq	r0, [r0], -ip
    15b4:	8b080e42 	blhi	204ec4 <__core1_unwind_stub-0xdfb13c>
    15b8:	42018e02 	andmi	r8, r1, #2, 28
    15bc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    15c0:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
    15c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15c8:	00001474 	andeq	r1, r0, r4, ror r4
    15cc:	00000000 	andeq	r0, r0, r0
    15d0:	00000090 	muleq	r0, r0, r0
    15d4:	8b080e42 	blhi	204ee4 <__core1_unwind_stub-0xdfb11c>
    15d8:	42018e02 	andmi	r8, r1, #2, 28
    15dc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    15e0:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
    15e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15e8:	00001474 	andeq	r1, r0, r4, ror r4
    15ec:	00000000 	andeq	r0, r0, r0
    15f0:	00000084 	andeq	r0, r0, r4, lsl #1
    15f4:	8b080e42 	blhi	204f04 <__core1_unwind_stub-0xdfb0fc>
    15f8:	42018e02 	andmi	r8, r1, #2, 28
    15fc:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
    1600:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1604:	0000001c 	andeq	r0, r0, ip, lsl r0
    1608:	00001474 	andeq	r1, r0, r4, ror r4
    160c:	00000000 	andeq	r0, r0, r0
    1610:	00000028 	andeq	r0, r0, r8, lsr #32
    1614:	8b040e42 	blhi	104f24 <__core1_unwind_stub-0xefb0dc>
    1618:	0b0d4201 	bleq	351e24 <__core1_unwind_stub-0xcae1dc>
    161c:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
    1620:	00000ecb 	andeq	r0, r0, fp, asr #29
    1624:	0000001c 	andeq	r0, r0, ip, lsl r0
    1628:	00001474 	andeq	r1, r0, r4, ror r4
    162c:	00000000 	andeq	r0, r0, r0
    1630:	000000ec 	andeq	r0, r0, ip, ror #1
    1634:	8b080e42 	blhi	204f44 <__core1_unwind_stub-0xdfb0bc>
    1638:	42018e02 	andmi	r8, r1, #2, 28
    163c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1640:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
    1644:	0000001c 	andeq	r0, r0, ip, lsl r0
    1648:	00001474 	andeq	r1, r0, r4, ror r4
    164c:	00000000 	andeq	r0, r0, r0
    1650:	0000006c 	andeq	r0, r0, ip, rrx
    1654:	8b080e42 	blhi	204f64 <__core1_unwind_stub-0xdfb09c>
    1658:	42018e02 	andmi	r8, r1, #2, 28
    165c:	70040b0c 	andvc	r0, r4, ip, lsl #22
    1660:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1664:	0000001c 	andeq	r0, r0, ip, lsl r0
    1668:	00001474 	andeq	r1, r0, r4, ror r4
    166c:	00000000 	andeq	r0, r0, r0
    1670:	00000044 	andeq	r0, r0, r4, asr #32
    1674:	8b040e42 	blhi	104f84 <__core1_unwind_stub-0xefb07c>
    1678:	0b0d4201 	bleq	351e84 <__core1_unwind_stub-0xcae17c>
    167c:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
    1680:	00000ecb 	andeq	r0, r0, fp, asr #29
    1684:	0000001c 	andeq	r0, r0, ip, lsl r0
    1688:	00001474 	andeq	r1, r0, r4, ror r4
    168c:	00000000 	andeq	r0, r0, r0
    1690:	00000088 	andeq	r0, r0, r8, lsl #1
    1694:	8b040e42 	blhi	104fa4 <__core1_unwind_stub-0xefb05c>
    1698:	0b0d4201 	bleq	351ea4 <__core1_unwind_stub-0xcae15c>
    169c:	420d0d7c 	andmi	r0, sp, #124, 26	; 0x1f00
    16a0:	00000ecb 	andeq	r0, r0, fp, asr #29
    16a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16a8:	00001474 	andeq	r1, r0, r4, ror r4
    16ac:	00000000 	andeq	r0, r0, r0
    16b0:	0000006c 	andeq	r0, r0, ip, rrx
    16b4:	8b080e42 	blhi	204fc4 <__core1_unwind_stub-0xdfb03c>
    16b8:	42018e02 	andmi	r8, r1, #2, 28
    16bc:	70040b0c 	andvc	r0, r4, ip, lsl #22
    16c0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    16c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16c8:	00001474 	andeq	r1, r0, r4, ror r4
    16cc:	00000000 	andeq	r0, r0, r0
    16d0:	00000188 	andeq	r0, r0, r8, lsl #3
    16d4:	8b080e42 	blhi	204fe4 <__core1_unwind_stub-0xdfb01c>
    16d8:	42018e02 	andmi	r8, r1, #2, 28
    16dc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    16e0:	080d0cbe 	stmdaeq	sp, {r1, r2, r3, r4, r5, r7, sl, fp}
    16e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16e8:	00001474 	andeq	r1, r0, r4, ror r4
    16ec:	00000000 	andeq	r0, r0, r0
    16f0:	000000ac 	andeq	r0, r0, ip, lsr #1
    16f4:	8b040e42 	blhi	105004 <__core1_unwind_stub-0xefaffc>
    16f8:	0b0d4201 	bleq	351f04 <__core1_unwind_stub-0xcae0fc>
    16fc:	0d0d4e02 	stceq	14, cr4, [sp, #-8]
    1700:	000ecb42 	andeq	ip, lr, r2, asr #22
    1704:	0000000c 	andeq	r0, r0, ip
    1708:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    170c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1710:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1714:	0000001c 	andeq	r0, r0, ip, lsl r0
    1718:	00001704 	andeq	r1, r0, r4, lsl #14
    171c:	01004fe8 	smlatteq	r0, r8, pc, r4	; <UNPREDICTABLE>
    1720:	000000d8 	ldrdeq	r0, [r0], -r8
    1724:	8b080e42 	blhi	205034 <__core1_unwind_stub-0xdfafcc>
    1728:	42018e02 	andmi	r8, r1, #2, 28
    172c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1730:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
    1734:	0000001c 	andeq	r0, r0, ip, lsl r0
    1738:	00001704 	andeq	r1, r0, r4, lsl #14
    173c:	00000000 	andeq	r0, r0, r0
    1740:	00000044 	andeq	r0, r0, r4, asr #32
    1744:	8b040e42 	blhi	105054 <__core1_unwind_stub-0xefafac>
    1748:	0b0d4201 	bleq	351f54 <__core1_unwind_stub-0xcae0ac>
    174c:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
    1750:	00000ecb 	andeq	r0, r0, fp, asr #29
    1754:	0000001c 	andeq	r0, r0, ip, lsl r0
    1758:	00001704 	andeq	r1, r0, r4, lsl #14
    175c:	00000000 	andeq	r0, r0, r0
    1760:	00000130 	andeq	r0, r0, r0, lsr r1
    1764:	8b080e42 	blhi	205074 <__core1_unwind_stub-0xdfaf8c>
    1768:	42018e02 	andmi	r8, r1, #2, 28
    176c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1770:	080d0c92 	stmdaeq	sp, {r1, r4, r7, sl, fp}
    1774:	0000001c 	andeq	r0, r0, ip, lsl r0
    1778:	00001704 	andeq	r1, r0, r4, lsl #14
    177c:	00000000 	andeq	r0, r0, r0
    1780:	000000b4 	strheq	r0, [r0], -r4
    1784:	8b080e42 	blhi	205094 <__core1_unwind_stub-0xdfaf6c>
    1788:	42018e02 	andmi	r8, r1, #2, 28
    178c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1790:	080d0c54 	stmdaeq	sp, {r2, r4, r6, sl, fp}
    1794:	0000001c 	andeq	r0, r0, ip, lsl r0
    1798:	00001704 	andeq	r1, r0, r4, lsl #14
    179c:	00000000 	andeq	r0, r0, r0
    17a0:	00000024 	andeq	r0, r0, r4, lsr #32
    17a4:	8b040e42 	blhi	1050b4 <__core1_unwind_stub-0xefaf4c>
    17a8:	0b0d4201 	bleq	351fb4 <__core1_unwind_stub-0xcae04c>
    17ac:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
    17b0:	00000ecb 	andeq	r0, r0, fp, asr #29
    17b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    17b8:	00001704 	andeq	r1, r0, r4, lsl #14
    17bc:	00000000 	andeq	r0, r0, r0
    17c0:	00000034 	andeq	r0, r0, r4, lsr r0
    17c4:	8b040e42 	blhi	1050d4 <__core1_unwind_stub-0xefaf2c>
    17c8:	0b0d4201 	bleq	351fd4 <__core1_unwind_stub-0xcae02c>
    17cc:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
    17d0:	00000ecb 	andeq	r0, r0, fp, asr #29
    17d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    17d8:	00001704 	andeq	r1, r0, r4, lsl #14
    17dc:	00000000 	andeq	r0, r0, r0
    17e0:	00000050 	andeq	r0, r0, r0, asr r0
    17e4:	8b040e42 	blhi	1050f4 <__core1_unwind_stub-0xefaf0c>
    17e8:	0b0d4201 	bleq	351ff4 <__core1_unwind_stub-0xcae00c>
    17ec:	420d0d60 	andmi	r0, sp, #96, 26	; 0x1800
    17f0:	00000ecb 	andeq	r0, r0, fp, asr #29
    17f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    17f8:	00001704 	andeq	r1, r0, r4, lsl #14
    17fc:	00000000 	andeq	r0, r0, r0
    1800:	0000002c 	andeq	r0, r0, ip, lsr #32
    1804:	8b040e42 	blhi	105114 <__core1_unwind_stub-0xefaeec>
    1808:	0b0d4201 	bleq	352014 <__core1_unwind_stub-0xcadfec>
    180c:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
    1810:	00000ecb 	andeq	r0, r0, fp, asr #29
    1814:	0000000c 	andeq	r0, r0, ip
    1818:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    181c:	7c010001 	stcvc	0, cr0, [r1], {1}
    1820:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1824:	0000000c 	andeq	r0, r0, ip
    1828:	00001814 	andeq	r1, r0, r4, lsl r8
    182c:	010050c0 	smlabteq	r0, r0, r0, r5
    1830:	000000f4 	strdeq	r0, [r0], -r4
    1834:	0000000c 	andeq	r0, r0, ip
    1838:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    183c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1840:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1844:	00000018 	andeq	r0, r0, r8, lsl r0
    1848:	00001834 	andeq	r1, r0, r4, lsr r8
    184c:	010051d8 	ldrdeq	r5, [r0, -r8]
    1850:	0000003c 	andeq	r0, r0, ip, lsr r0
    1854:	8e100e54 	mrchi	14, 0, r0, cr0, cr4, {2}
    1858:	0ece4803 	cdpeq	8, 12, cr4, cr14, cr3, {0}
    185c:	00000010 	andeq	r0, r0, r0, lsl r0
    1860:	0000000c 	andeq	r0, r0, ip
    1864:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1868:	7c020001 	stcvc	0, cr0, [r2], {1}
    186c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1870:	0000002c 	andeq	r0, r0, ip, lsr #32
    1874:	00001860 	andeq	r1, r0, r0, ror #16
    1878:	01005214 	tsteq	r0, r4, lsl r2
    187c:	00000130 	andeq	r0, r0, r0, lsr r1
    1880:	84200e46 	strthi	r0, [r0], #-3654	; 0xfffff1ba
    1884:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1888:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    188c:	8a038904 	bhi	e3ca4 <__core1_unwind_stub-0xf1c35c>
    1890:	02018e02 	andeq	r8, r1, #2, 28
    1894:	c9cace90 	stmibgt	sl, {r4, r7, r9, sl, fp, lr, pc}^
    1898:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
    189c:	00000ec4 	andeq	r0, r0, r4, asr #29

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	...
{
   8:	00000014 	andeq	r0, r0, r4, lsl r0
   c:	93500006 	cmpls	r0, #6
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	04935104 	ldreq	r5, [r3], #260	; 0x104
  14:	00000014 	andeq	r0, r0, r4, lsl r0
    ALT_PRINTF("\n");
  18:	00000130 	andeq	r0, r0, r0, lsr r1
  1c:	03f30006 	mvnseq	r0, #6
  20:	9f2500f5 	svcls	0x002500f5
	...
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  34:	00000037 	andeq	r0, r0, r7, lsr r0
  38:	93520006 	cmpls	r2, #6
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	04935304 	ldreq	r5, [r3], #772	; 0x304
  40:	00000037 	andeq	r0, r0, r7, lsr r0
  44:	00000130 	andeq	r0, r0, r0, lsr r1
  48:	03f30006 	mvnseq	r0, #6
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	9f2502f5 	svcls	0x002502f5
	...
  58:	00000002 	andeq	r0, r0, r2
	...
  64:	00000090 	muleq	r0, r0, r0
  68:	089e000a 	ldmeq	lr, {r1, r3}
	...
}
  74:	00000090 	muleq	r0, r0, r0
  78:	000000f8 	strdeq	r0, [r0], -r8
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
  7c:	93500006 	cmpls	r0, #6
  80:	04935104 	ldreq	r5, [r3], #260	; 0x104
  84:	00000104 	andeq	r0, r0, r4, lsl #2
  88:	00000118 	andeq	r0, r0, r8, lsl r1
  8c:	93500006 	cmpls	r0, #6
  90:	04935104 	ldreq	r5, [r3], #260	; 0x104
      *(pmem->toptr)=0;
  94:	00000120 	andeq	r0, r0, r0, lsr #2
  98:	00000130 	andeq	r0, r0, r0, lsr r1
  9c:	93500006 	cmpls	r0, #6
  a0:	04935104 	ldreq	r5, [r3], #260	; 0x104
	...
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
  b4:	00180000 	andseq	r0, r8, r0
  b8:	00800000 	addeq	r0, r0, r0
        break;
  bc:	00060000 	andeq	r0, r6, r0
    return ALT_E_SUCCESS;
  c0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  c4:	008c0493 	umulleq	r0, ip, r3, r4
        return ALT_E_ERROR;
  c8:	00c00000 	sbceq	r0, r0, r0
}
  cc:	00060000 	andeq	r0, r6, r0
  d0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  d4:	00c40493 	smulleq	r0, r4, r3, r4
  d8:	00dc0000 	sbcseq	r0, ip, r0
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  dc:	00060000 	andeq	r0, r6, r0
  e0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  e4:	00e00493 	smlaleq	r0, r0, r3, r4	; <UNPREDICTABLE>
  e8:	00fc0000 	rscseq	r0, ip, r0
  ec:	00060000 	andeq	r0, r6, r0
  f0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
    return dst;
  f4:	01080493 			; <UNDEFINED> instruction: 0x01080493
}
  f8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
  fc:	00060000 	andeq	r0, r6, r0
 100:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
 104:	00000493 	muleq	r0, r3, r4
	...
    errno = ENOSYS;
 110:	00680000 	rsbeq	r0, r8, r0
 114:	00a80000 	adceq	r0, r8, r0
 118:	00060000 	andeq	r0, r6, r0
 11c:	53049352 	movwpl	r9, #17234	; 0x4352
    return -1;
 120:	00a80493 	umlaleq	r0, r8, r3, r4
}
 124:	01200000 			; <UNDEFINED> instruction: 0x01200000
 128:	00060000 	andeq	r0, r6, r0
 12c:	57049356 	smlsdpl	r4, r6, r3, r9
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 130:	00000493 	muleq	r0, r3, r4
	...
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	00400000 	subeq	r0, r0, r0
 140:	00440000 	subeq	r0, r4, r0
 144:	00010000 	andeq	r0, r1, r0
 148:	00004450 	andeq	r4, r0, r0, asr r4
 14c:	00005000 	andeq	r5, r0, r0
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 150:	59000100 	stmdbpl	r0, {r8}
	...
 15c:	00480000 	subeq	r0, r8, r0
 160:	00700000 	rsbseq	r0, r0, r0
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	00010000 	andeq	r0, r1, r0
 168:	00000050 	andeq	r0, r0, r0, asr r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	01010100 	mrseq	r0, (UNDEF: 17)
 174:	01010000 	mrseq	r0, (UNDEF: 1)
    return ALT_E_SUCCESS;
 178:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
}
 17c:	c4000000 	strgt	r0, [r0], #-0
 180:	01000000 	mrseq	r0, (UNDEF: 0)
 184:	00c45e00 	sbceq	r5, r4, r0, lsl #28
    while (coalesce->size)
 188:	00c80000 	sbceq	r0, r8, r0
 18c:	00030000 	andeq	r0, r3, r0
            break;
 190:	c89f7f7e 	ldmgt	pc, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    *segpa   = thissegpa;
 194:	e0000000 	and	r0, r0, r0
 198:	01000000 	mrseq	r0, (UNDEF: 0)
 19c:	00e05e00 	rsceq	r5, r0, r0, lsl #28
    *segsize = thissegsize;
 1a0:	00e40000 	rsceq	r0, r4, r0
 1a4:	00030000 	andeq	r0, r3, r0
 1a8:	e49f7f7e 	ldr	r7, [pc], #3966	; 1b0 <__core1_unwind_stub-0xfffe50>
    return ALT_E_SUCCESS;
 1ac:	20000000 	andcs	r0, r0, r0
}
 1b0:	01000001 	tsteq	r0, r1
 1b4:	00005e00 	andeq	r5, r0, r0, lsl #28
	...
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
 1c0:	004c0000 	subeq	r0, ip, r0
 1c4:	01140000 	tsteq	r4, r0
 1c8:	00010000 	andeq	r0, r1, r0
 1cc:	0001145c 	andeq	r1, r1, ip, asr r4
    clkStep = 9 * clk100; /* 900MHz */
 1d0:	00012000 	andeq	r2, r1, r0
 1d4:	79000300 	stmdbvc	r0, {r8, r9}
 1d8:	00009f20 	andeq	r9, r0, r0, lsr #30
 1dc:	00000000 	andeq	r0, r0, r0
	...

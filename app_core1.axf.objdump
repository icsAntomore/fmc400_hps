
app_core1.axf:     file format elf32-littlearm


Disassembly of section .text:

01000000 <__core1_unwind_stub>:
    .global __core1_unwind_stub
    .type   __core1_unwind_stub, %function
    .hidden __core1_unwind_stub
__core1_unwind_stub:
    .fnstart
    bx      lr
 1000000:	e12fff1e 	bx	lr

01000004 <alt_clk_freq_get_osc1>:
}



ALT_STATUS_CODE alt_clk_freq_get_osc1(alt_freq_t *pfreq)
{
 1000004:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000008:	e28db000 	add	fp, sp, #0
 100000c:	e24dd00c 	sub	sp, sp, #12
 1000010:	e50b0008 	str	r0, [fp, #-8]
    *pfreq = (uint64_t) osc1_clock;
 1000014:	e3053600 	movw	r3, #22016	; 0x5600
 1000018:	e3403100 	movt	r3, #256	; 0x100
 100001c:	e5932000 	ldr	r2, [r3]
 1000020:	e51b3008 	ldr	r3, [fp, #-8]
 1000024:	e5832000 	str	r2, [r3]
    return ALT_E_SUCCESS;
 1000028:	e3a03000 	mov	r3, #0
}
 100002c:	e1a00003 	mov	r0, r3
 1000030:	e28bd000 	add	sp, fp, #0
 1000034:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000038:	e12fff1e 	bx	lr

0100003c <alt_clk_freq_get_cb_intosc_hs_div2_clk>:

ALT_STATUS_CODE alt_clk_freq_get_cb_intosc_hs_div2_clk(alt_freq_t *pfreq)
{
 100003c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000040:	e28db000 	add	fp, sp, #0
 1000044:	e24dd00c 	sub	sp, sp, #12
 1000048:	e50b0008 	str	r0, [fp, #-8]
    if(cb_intosc_hs_div2)
 100004c:	e3083000 	movw	r3, #32768	; 0x8000
 1000050:	e3403100 	movt	r3, #256	; 0x100
 1000054:	e5933000 	ldr	r3, [r3]
 1000058:	e3530000 	cmp	r3, #0
 100005c:	0a000006 	beq	100007c <alt_clk_freq_get_cb_intosc_hs_div2_clk+0x40>
    {
        *pfreq = cb_intosc_hs_div2;
 1000060:	e3083000 	movw	r3, #32768	; 0x8000
 1000064:	e3403100 	movt	r3, #256	; 0x100
 1000068:	e5932000 	ldr	r2, [r3]
 100006c:	e51b3008 	ldr	r3, [fp, #-8]
 1000070:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
 1000074:	e3a03000 	mov	r3, #0
 1000078:	ea000000 	b	1000080 <alt_clk_freq_get_cb_intosc_hs_div2_clk+0x44>
    }
    return ALT_E_ERROR;
 100007c:	e3e03000 	mvn	r3, #0
}
 1000080:	e1a00003 	mov	r0, r3
 1000084:	e28bd000 	add	sp, fp, #0
 1000088:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100008c:	e12fff1e 	bx	lr

01000090 <alt_clk_freq_get_f2s_free_clk>:

ALT_STATUS_CODE alt_clk_freq_get_f2s_free_clk(alt_freq_t *pfreq)
{
 1000090:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000094:	e28db000 	add	fp, sp, #0
 1000098:	e24dd00c 	sub	sp, sp, #12
 100009c:	e50b0008 	str	r0, [fp, #-8]
    if(f2s_free_clk)
 10000a0:	e3083004 	movw	r3, #32772	; 0x8004
 10000a4:	e3403100 	movt	r3, #256	; 0x100
 10000a8:	e5933000 	ldr	r3, [r3]
 10000ac:	e3530000 	cmp	r3, #0
 10000b0:	0a000006 	beq	10000d0 <alt_clk_freq_get_f2s_free_clk+0x40>
    {
        *pfreq = f2s_free_clk;
 10000b4:	e3083004 	movw	r3, #32772	; 0x8004
 10000b8:	e3403100 	movt	r3, #256	; 0x100
 10000bc:	e5932000 	ldr	r2, [r3]
 10000c0:	e51b3008 	ldr	r3, [fp, #-8]
 10000c4:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
 10000c8:	e3a03000 	mov	r3, #0
 10000cc:	ea000000 	b	10000d4 <alt_clk_freq_get_f2s_free_clk+0x44>
    }
    return ALT_E_ERROR;
 10000d0:	e3e03000 	mvn	r3, #0
}
 10000d4:	e1a00003 	mov	r0, r3
 10000d8:	e28bd000 	add	sp, fp, #0
 10000dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10000e0:	e12fff1e 	bx	lr

010000e4 <alt_clk_freq_get_main_pll>:

/***************************************************************
                Functions to retreive frequencies of devices
***************************************************************/
ALT_STATUS_CODE alt_clk_freq_get_main_pll(alt_freq_t *pfreq)
{
 10000e4:	e92d4800 	push	{fp, lr}
 10000e8:	e28db004 	add	fp, sp, #4
 10000ec:	e24dd020 	sub	sp, sp, #32
 10000f0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   ALT_STATUS_CODE ret = ALT_E_SUCCESS;
 10000f4:	e3a03000 	mov	r3, #0
 10000f8:	e50b3008 	str	r3, [fp, #-8]
   alt_freq_t freq;
   uint32_t vco1;
   /* Note - we don't check that we're locked */

   /* Step 1 - what is the clock source freq? */
   uint32_t vco0 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
 10000fc:	e3043040 	movw	r3, #16448	; 0x4040
 1000100:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000104:	e5933000 	ldr	r3, [r3]
 1000108:	e50b300c 	str	r3, [fp, #-12]
   switch(ALT_CLKMGR_MAINPLL_VCO0_PSRC_GET(vco0))
 100010c:	e51b300c 	ldr	r3, [fp, #-12]
 1000110:	e1a03423 	lsr	r3, r3, #8
 1000114:	e2033003 	and	r3, r3, #3
 1000118:	e3530002 	cmp	r3, #2
 100011c:	0a000010 	beq	1000164 <alt_clk_freq_get_main_pll+0x80>
 1000120:	e3530002 	cmp	r3, #2
 1000124:	8a000013 	bhi	1000178 <alt_clk_freq_get_main_pll+0x94>
 1000128:	e3530000 	cmp	r3, #0
 100012c:	0a000002 	beq	100013c <alt_clk_freq_get_main_pll+0x58>
 1000130:	e3530001 	cmp	r3, #1
 1000134:	0a000005 	beq	1000150 <alt_clk_freq_get_main_pll+0x6c>
 1000138:	ea00000e 	b	1000178 <alt_clk_freq_get_main_pll+0x94>
   {
       case ALT_CLKMGR_MAINPLL_VCO0_PSRC_E_EOSC1:
           ret = alt_clk_freq_get_osc1(&freq);
 100013c:	e24b301c 	sub	r3, fp, #28
 1000140:	e1a00003 	mov	r0, r3
 1000144:	ebffffae 	bl	1000004 <alt_clk_freq_get_osc1>
 1000148:	e50b0008 	str	r0, [fp, #-8]
           break;
 100014c:	ea00000b 	b	1000180 <alt_clk_freq_get_main_pll+0x9c>
       case ALT_CLKMGR_MAINPLL_VCO0_PSRC_E_INTOSC:
           ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(&freq);
 1000150:	e24b301c 	sub	r3, fp, #28
 1000154:	e1a00003 	mov	r0, r3
 1000158:	ebffffb7 	bl	100003c <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 100015c:	e50b0008 	str	r0, [fp, #-8]
           break;
 1000160:	ea000006 	b	1000180 <alt_clk_freq_get_main_pll+0x9c>
       case ALT_CLKMGR_MAINPLL_VCO0_PSRC_E_F2S:/* f2s_free */
           ret = alt_clk_freq_get_f2s_free_clk(&freq);
 1000164:	e24b301c 	sub	r3, fp, #28
 1000168:	e1a00003 	mov	r0, r3
 100016c:	ebffffc7 	bl	1000090 <alt_clk_freq_get_f2s_free_clk>
 1000170:	e50b0008 	str	r0, [fp, #-8]
           break;
 1000174:	ea000001 	b	1000180 <alt_clk_freq_get_main_pll+0x9c>
       default:
           return ALT_E_ERROR;
 1000178:	e3e03000 	mvn	r3, #0
 100017c:	ea00002b 	b	1000230 <alt_clk_freq_get_main_pll+0x14c>
   }

   if(ret != ALT_E_SUCCESS)
 1000180:	e51b3008 	ldr	r3, [fp, #-8]
 1000184:	e3530000 	cmp	r3, #0
 1000188:	0a000001 	beq	1000194 <alt_clk_freq_get_main_pll+0xb0>
       return ret;
 100018c:	e51b3008 	ldr	r3, [fp, #-8]
 1000190:	ea000026 	b	1000230 <alt_clk_freq_get_main_pll+0x14c>
   freq64 = freq;
 1000194:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000198:	e1a02003 	mov	r2, r3
 100019c:	e3a03000 	mov	r3, #0
 10001a0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   /* Step 2 - scale according to num/denom */
   vco1 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR);
 10001a4:	e3043044 	movw	r3, #16452	; 0x4044
 10001a8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10001ac:	e5933000 	ldr	r3, [r3]
 10001b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   freq64 *= (ALT_CLKMGR_MAINPLL_VCO1_NUMER_GET(vco1) + 1);
 10001b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10001b8:	e7ec3053 	ubfx	r3, r3, #0, #13
 10001bc:	e2833001 	add	r3, r3, #1
 10001c0:	e1a02003 	mov	r2, r3
 10001c4:	e3a03000 	mov	r3, #0
 10001c8:	e51b1010 	ldr	r1, [fp, #-16]
 10001cc:	e0000192 	mul	r0, r2, r1
 10001d0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 10001d4:	e0010193 	mul	r1, r3, r1
 10001d8:	e0801001 	add	r1, r0, r1
 10001dc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10001e0:	e0832290 	umull	r2, r3, r0, r2
 10001e4:	e0811003 	add	r1, r1, r3
 10001e8:	e1a03001 	mov	r3, r1
 10001ec:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
 10001f0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
   freq64 /= (ALT_CLKMGR_MAINPLL_VCO1_DENOM_GET(vco1) + 1);
 10001f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10001f8:	e1a03823 	lsr	r3, r3, #16
 10001fc:	e203303f 	and	r3, r3, #63	; 0x3f
 1000200:	e2833001 	add	r3, r3, #1
 1000204:	e1a02003 	mov	r2, r3
 1000208:	e3a03000 	mov	r3, #0
 100020c:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 1000210:	eb0013b7 	bl	10050f4 <__aeabi_uldivmod>
 1000214:	e1a02000 	mov	r2, r0
 1000218:	e1a03001 	mov	r3, r1
 100021c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   *pfreq = (alt_freq_t) freq64;
 1000220:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1000224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1000228:	e5832000 	str	r2, [r3]
   return ALT_E_SUCCESS;
 100022c:	e3a03000 	mov	r3, #0
}
 1000230:	e1a00003 	mov	r0, r3
 1000234:	e24bd004 	sub	sp, fp, #4
 1000238:	e8bd8800 	pop	{fp, pc}

0100023c <alt_clk_freq_get_peri_pll>:

ALT_STATUS_CODE alt_clk_freq_get_peri_pll(alt_freq_t *pfreq)
{
 100023c:	e92d4800 	push	{fp, lr}
 1000240:	e28db004 	add	fp, sp, #4
 1000244:	e24dd020 	sub	sp, sp, #32
 1000248:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   ALT_STATUS_CODE ret = ALT_E_SUCCESS;
 100024c:	e3a03000 	mov	r3, #0
 1000250:	e50b3008 	str	r3, [fp, #-8]
   uint64_t freq64;
   alt_freq_t freq = 0;
 1000254:	e3a03000 	mov	r3, #0
 1000258:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   uint32_t vco1;

   /* Note - we don't check that we're locked */

   /* Step 1 - what is the clock source freq? */
   uint32_t vco0 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
 100025c:	e30430c0 	movw	r3, #16576	; 0x40c0
 1000260:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000264:	e5933000 	ldr	r3, [r3]
 1000268:	e50b300c 	str	r3, [fp, #-12]
   switch(ALT_CLKMGR_PERPLL_VCO0_PSRC_GET(vco0))
 100026c:	e51b300c 	ldr	r3, [fp, #-12]
 1000270:	e1a03423 	lsr	r3, r3, #8
 1000274:	e2033003 	and	r3, r3, #3
 1000278:	e3530003 	cmp	r3, #3
 100027c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1000280:	ea000020 	b	1000308 <alt_clk_freq_get_peri_pll+0xcc>
 1000284:	01000294 			; <UNDEFINED> instruction: 0x01000294
 1000288:	010002e0 	smlatteq	r0, r0, r2, r0
 100028c:	010002f4 	strdeq	r0, [r0, -r4]
 1000290:	010002a8 	smlatbeq	r0, r8, r2, r0
   {
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_EOSC1:
           ret = alt_clk_freq_get_osc1(&freq);
 1000294:	e24b301c 	sub	r3, fp, #28
 1000298:	e1a00003 	mov	r0, r3
 100029c:	ebffff58 	bl	1000004 <alt_clk_freq_get_osc1>
 10002a0:	e50b0008 	str	r0, [fp, #-8]
           break;
 10002a4:	ea000019 	b	1000310 <alt_clk_freq_get_peri_pll+0xd4>
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_MAIN:
           alt_clk_freq_get_main_pll(&freq);
 10002a8:	e24b301c 	sub	r3, fp, #28
 10002ac:	e1a00003 	mov	r0, r3
 10002b0:	ebffff8b 	bl	10000e4 <alt_clk_freq_get_main_pll>
           /* There is no bypass for c15 to check for */
           freq /= (1 + alt_read_word(ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR));
 10002b4:	e304309c 	movw	r3, #16540	; 0x409c
 10002b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10002bc:	e5933000 	ldr	r3, [r3]
 10002c0:	e2832001 	add	r2, r3, #1
 10002c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10002c8:	e1a01002 	mov	r1, r2
 10002cc:	e1a00003 	mov	r0, r3
 10002d0:	eb001341 	bl	1004fdc <__udivsi3>
 10002d4:	e1a03000 	mov	r3, r0
 10002d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
           break;
 10002dc:	ea00000b 	b	1000310 <alt_clk_freq_get_peri_pll+0xd4>
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_INTOSC:
           ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(&freq);
 10002e0:	e24b301c 	sub	r3, fp, #28
 10002e4:	e1a00003 	mov	r0, r3
 10002e8:	ebffff53 	bl	100003c <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 10002ec:	e50b0008 	str	r0, [fp, #-8]
           break;
 10002f0:	ea000006 	b	1000310 <alt_clk_freq_get_peri_pll+0xd4>
       case ALT_CLKMGR_PERPLL_VCO0_PSRC_E_F2S:/* f2s_free */
           ret = alt_clk_freq_get_f2s_free_clk(&freq);
 10002f4:	e24b301c 	sub	r3, fp, #28
 10002f8:	e1a00003 	mov	r0, r3
 10002fc:	ebffff63 	bl	1000090 <alt_clk_freq_get_f2s_free_clk>
 1000300:	e50b0008 	str	r0, [fp, #-8]
           break;
 1000304:	ea000001 	b	1000310 <alt_clk_freq_get_peri_pll+0xd4>
       default:
           return ALT_E_ERROR;
 1000308:	e3e03000 	mvn	r3, #0
 100030c:	ea00002b 	b	10003c0 <alt_clk_freq_get_peri_pll+0x184>
   }

   if(ret != ALT_E_SUCCESS)
 1000310:	e51b3008 	ldr	r3, [fp, #-8]
 1000314:	e3530000 	cmp	r3, #0
 1000318:	0a000001 	beq	1000324 <alt_clk_freq_get_peri_pll+0xe8>
       return ret;
 100031c:	e51b3008 	ldr	r3, [fp, #-8]
 1000320:	ea000026 	b	10003c0 <alt_clk_freq_get_peri_pll+0x184>
   freq64 = freq;
 1000324:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000328:	e1a02003 	mov	r2, r3
 100032c:	e3a03000 	mov	r3, #0
 1000330:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   /* Step 2 - scale according to num/denom */
   vco1 = alt_read_word(ALT_CLKMGR_PERPLL_VCO1_ADDR);
 1000334:	e30430c4 	movw	r3, #16580	; 0x40c4
 1000338:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100033c:	e5933000 	ldr	r3, [r3]
 1000340:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   freq64 *= (ALT_CLKMGR_PERPLL_VCO1_NUMER_GET(vco1) + 1);
 1000344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000348:	e7ec3053 	ubfx	r3, r3, #0, #13
 100034c:	e2833001 	add	r3, r3, #1
 1000350:	e1a02003 	mov	r2, r3
 1000354:	e3a03000 	mov	r3, #0
 1000358:	e51b1010 	ldr	r1, [fp, #-16]
 100035c:	e0000192 	mul	r0, r2, r1
 1000360:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 1000364:	e0010193 	mul	r1, r3, r1
 1000368:	e0801001 	add	r1, r0, r1
 100036c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000370:	e0832290 	umull	r2, r3, r0, r2
 1000374:	e0811003 	add	r1, r1, r3
 1000378:	e1a03001 	mov	r3, r1
 100037c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
 1000380:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
   freq64 /= (ALT_CLKMGR_PERPLL_VCO1_DENOM_GET(vco1) + 1);
 1000384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000388:	e1a03823 	lsr	r3, r3, #16
 100038c:	e203303f 	and	r3, r3, #63	; 0x3f
 1000390:	e2833001 	add	r3, r3, #1
 1000394:	e1a02003 	mov	r2, r3
 1000398:	e3a03000 	mov	r3, #0
 100039c:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 10003a0:	eb001353 	bl	10050f4 <__aeabi_uldivmod>
 10003a4:	e1a02000 	mov	r2, r0
 10003a8:	e1a03001 	mov	r3, r1
 10003ac:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

   *pfreq = (alt_freq_t) freq64;
 10003b0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 10003b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10003b8:	e5832000 	str	r2, [r3]
   return ALT_E_SUCCESS;
 10003bc:	e3a03000 	mov	r3, #0
}
 10003c0:	e1a00003 	mov	r0, r3
 10003c4:	e24bd004 	sub	sp, fp, #4
 10003c8:	e8bd8800 	pop	{fp, pc}

010003cc <alt_clk_freq_get_device>:
                                      uint32_t *src_register,
                                      uint32_t *_pll_reg,
                                      uint32_t pll_shift,
                                      uint32_t *_main_reg,
                                      uint32_t main_shift)
{
 10003cc:	e92d4800 	push	{fp, lr}
 10003d0:	e28db004 	add	fp, sp, #4
 10003d4:	e24dd020 	sub	sp, sp, #32
 10003d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 10003dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 10003e0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 10003e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    alt_freq_t freq;
    uint32_t temp;
    ALT_STATUS_CODE ret;

    if(src_in_main)
 10003e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10003ec:	e3530000 	cmp	r3, #0
 10003f0:	0a000004 	beq	1000408 <alt_clk_freq_get_device+0x3c>
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
 10003f4:	e3043048 	movw	r3, #16456	; 0x4048
 10003f8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10003fc:	e5933000 	ldr	r3, [r3]
 1000400:	e50b3008 	str	r3, [fp, #-8]
 1000404:	ea000003 	b	1000418 <alt_clk_freq_get_device+0x4c>
    else
        temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
 1000408:	e30430c8 	movw	r3, #16584	; 0x40c8
 100040c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000410:	e5933000 	ldr	r3, [r3]
 1000414:	e50b3008 	str	r3, [fp, #-8]

    if((_enable_mask != 0) &&
 1000418:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100041c:	e3530000 	cmp	r3, #0
 1000420:	0a000009 	beq	100044c <alt_clk_freq_get_device+0x80>
       (0 == (_enable_mask & temp)))
 1000424:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 1000428:	e51b3008 	ldr	r3, [fp, #-8]
 100042c:	e0033002 	and	r3, r3, r2
    if((_enable_mask != 0) &&
 1000430:	e3530000 	cmp	r3, #0
 1000434:	1a000004 	bne	100044c <alt_clk_freq_get_device+0x80>
    {
        *pfreq = 0;/* device disabled */
 1000438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100043c:	e3a02000 	mov	r2, #0
 1000440:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
 1000444:	e3a03000 	mov	r3, #0
 1000448:	ea000064 	b	10005e0 <alt_clk_freq_get_device+0x214>
    }

    if(src_in_main)
 100044c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000450:	e3530000 	cmp	r3, #0
 1000454:	0a000004 	beq	100046c <alt_clk_freq_get_device+0xa0>
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_BYPASS_ADDR);
 1000458:	e3043054 	movw	r3, #16468	; 0x4054
 100045c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000460:	e5933000 	ldr	r3, [r3]
 1000464:	e50b3008 	str	r3, [fp, #-8]
 1000468:	ea000003 	b	100047c <alt_clk_freq_get_device+0xb0>
    else
        temp = alt_read_word(ALT_CLKMGR_PERPLL_BYPASS_ADDR);
 100046c:	e30430d4 	movw	r3, #16596	; 0x40d4
 1000470:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000474:	e5933000 	ldr	r3, [r3]
 1000478:	e50b3008 	str	r3, [fp, #-8]

    if(temp & _bypass_mask)
 100047c:	e51b2008 	ldr	r2, [fp, #-8]
 1000480:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1000484:	e0033002 	and	r3, r3, r2
 1000488:	e3530000 	cmp	r3, #0
 100048c:	0a000003 	beq	10004a0 <alt_clk_freq_get_device+0xd4>
    {
        return alt_clk_freq_get_osc1(pfreq);
 1000490:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1000494:	ebfffeda 	bl	1000004 <alt_clk_freq_get_osc1>
 1000498:	e1a03000 	mov	r3, r0
 100049c:	ea00004f 	b	10005e0 <alt_clk_freq_get_device+0x214>
    }
    switch(ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_GET(alt_read_word(src_register)))
 10004a0:	e59b3004 	ldr	r3, [fp, #4]
 10004a4:	e5933000 	ldr	r3, [r3]
 10004a8:	e1a03823 	lsr	r3, r3, #16
 10004ac:	e2033007 	and	r3, r3, #7
 10004b0:	e3530004 	cmp	r3, #4
 10004b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 10004b8:	ea000045 	b	10005d4 <alt_clk_freq_get_device+0x208>
 10004bc:	010004e0 	smlatteq	r0, r0, r4, r0
 10004c0:	01000548 	tsteq	r0, r8, asr #10
 10004c4:	010004d0 	ldrdeq	r0, [r0, -r0]
 10004c8:	010005b0 			; <UNDEFINED> instruction: 0x010005b0
 10004cc:	010005c4 	smlabteq	r0, r4, r5, r0
    {
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_OSC1:
            return alt_clk_freq_get_osc1(pfreq);
 10004d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10004d4:	ebfffeca 	bl	1000004 <alt_clk_freq_get_osc1>
 10004d8:	e1a03000 	mov	r3, r0
 10004dc:	ea00003f 	b	10005e0 <alt_clk_freq_get_device+0x214>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_MAIN:
            ret = alt_clk_freq_get_main_pll(&freq);
 10004e0:	e24b3010 	sub	r3, fp, #16
 10004e4:	e1a00003 	mov	r0, r3
 10004e8:	ebfffefd 	bl	10000e4 <alt_clk_freq_get_main_pll>
 10004ec:	e50b000c 	str	r0, [fp, #-12]
            if(ret != ALT_E_SUCCESS)
 10004f0:	e51b300c 	ldr	r3, [fp, #-12]
 10004f4:	e3530000 	cmp	r3, #0
 10004f8:	0a000001 	beq	1000504 <alt_clk_freq_get_device+0x138>
                return ret;
 10004fc:	e51b300c 	ldr	r3, [fp, #-12]
 1000500:	ea000036 	b	10005e0 <alt_clk_freq_get_device+0x214>
            temp = alt_read_word(_main_reg)>>main_shift;
 1000504:	e59b3010 	ldr	r3, [fp, #16]
 1000508:	e5932000 	ldr	r2, [r3]
 100050c:	e59b3014 	ldr	r3, [fp, #20]
 1000510:	e1a03332 	lsr	r3, r2, r3
 1000514:	e50b3008 	str	r3, [fp, #-8]
            *pfreq = freq/(1 + ALT_CLKMGR_MAINPLL_CNTR2CLK_CNT_GET(temp));
 1000518:	e51b2010 	ldr	r2, [fp, #-16]
 100051c:	e51b3008 	ldr	r3, [fp, #-8]
 1000520:	e7ea3053 	ubfx	r3, r3, #0, #11
 1000524:	e2833001 	add	r3, r3, #1
 1000528:	e1a01003 	mov	r1, r3
 100052c:	e1a00002 	mov	r0, r2
 1000530:	eb0012a9 	bl	1004fdc <__udivsi3>
 1000534:	e1a03000 	mov	r3, r0
 1000538:	e1a02003 	mov	r2, r3
 100053c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000540:	e5832000 	str	r2, [r3]
            break;
 1000544:	ea000024 	b	10005dc <alt_clk_freq_get_device+0x210>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_PERI:
            ret = alt_clk_freq_get_peri_pll(&freq);
 1000548:	e24b3010 	sub	r3, fp, #16
 100054c:	e1a00003 	mov	r0, r3
 1000550:	ebffff39 	bl	100023c <alt_clk_freq_get_peri_pll>
 1000554:	e50b000c 	str	r0, [fp, #-12]
            if(ret != ALT_E_SUCCESS)
 1000558:	e51b300c 	ldr	r3, [fp, #-12]
 100055c:	e3530000 	cmp	r3, #0
 1000560:	0a000001 	beq	100056c <alt_clk_freq_get_device+0x1a0>
                return ret;
 1000564:	e51b300c 	ldr	r3, [fp, #-12]
 1000568:	ea00001c 	b	10005e0 <alt_clk_freq_get_device+0x214>
            temp = alt_read_word(_pll_reg)>>pll_shift;
 100056c:	e59b3008 	ldr	r3, [fp, #8]
 1000570:	e5932000 	ldr	r2, [r3]
 1000574:	e59b300c 	ldr	r3, [fp, #12]
 1000578:	e1a03332 	lsr	r3, r2, r3
 100057c:	e50b3008 	str	r3, [fp, #-8]
            *pfreq = freq/(1 + ALT_CLKMGR_PERPLL_CNTR2CLK_CNT_GET(temp));
 1000580:	e51b2010 	ldr	r2, [fp, #-16]
 1000584:	e51b3008 	ldr	r3, [fp, #-8]
 1000588:	e7ea3053 	ubfx	r3, r3, #0, #11
 100058c:	e2833001 	add	r3, r3, #1
 1000590:	e1a01003 	mov	r1, r3
 1000594:	e1a00002 	mov	r0, r2
 1000598:	eb00128f 	bl	1004fdc <__udivsi3>
 100059c:	e1a03000 	mov	r3, r0
 10005a0:	e1a02003 	mov	r2, r3
 10005a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10005a8:	e5832000 	str	r2, [r3]
            break;
 10005ac:	ea00000a 	b	10005dc <alt_clk_freq_get_device+0x210>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_INTOSC:
            ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(&freq);
 10005b0:	e24b3010 	sub	r3, fp, #16
 10005b4:	e1a00003 	mov	r0, r3
 10005b8:	ebfffe9f 	bl	100003c <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 10005bc:	e50b000c 	str	r0, [fp, #-12]
            break;
 10005c0:	ea000005 	b	10005dc <alt_clk_freq_get_device+0x210>
        case ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_E_FPGA:
            alt_clk_freq_get_f2s_free_clk(&freq);
 10005c4:	e24b3010 	sub	r3, fp, #16
 10005c8:	e1a00003 	mov	r0, r3
 10005cc:	ebfffeaf 	bl	1000090 <alt_clk_freq_get_f2s_free_clk>
            /* This value has to come from quartus */
            break;
 10005d0:	ea000001 	b	10005dc <alt_clk_freq_get_device+0x210>
        default:
           return ALT_E_ERROR;
 10005d4:	e3e03000 	mvn	r3, #0
 10005d8:	ea000000 	b	10005e0 <alt_clk_freq_get_device+0x214>
    }
    return ALT_E_SUCCESS;
 10005dc:	e3a03000 	mov	r3, #0
}
 10005e0:	e1a00003 	mov	r0, r3
 10005e4:	e24bd004 	sub	sp, fp, #4
 10005e8:	e8bd8800 	pop	{fp, pc}

010005ec <alt_clk_freq_get_mpu>:

ALT_STATUS_CODE alt_clk_freq_get_mpu(alt_freq_t *pfreq)
{
 10005ec:	e92d4800 	push	{fp, lr}
 10005f0:	e28db004 	add	fp, sp, #4
 10005f4:	e24dd028 	sub	sp, sp, #40	; 0x28
 10005f8:	e50b0010 	str	r0, [fp, #-16]
    /* Step 1 - check the mainpllgrp.mpuclk->src for source
    // Step 2 - check bypass */

    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_device(pfreq,
 10005fc:	e3a03000 	mov	r3, #0
 1000600:	e58d3010 	str	r3, [sp, #16]
 1000604:	e3043140 	movw	r3, #16704	; 0x4140
 1000608:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100060c:	e58d300c 	str	r3, [sp, #12]
 1000610:	e3a03010 	mov	r3, #16
 1000614:	e58d3008 	str	r3, [sp, #8]
 1000618:	e3043140 	movw	r3, #16704	; 0x4140
 100061c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000620:	e58d3004 	str	r3, [sp, #4]
 1000624:	e3043060 	movw	r3, #16480	; 0x4060
 1000628:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100062c:	e58d3000 	str	r3, [sp]
 1000630:	e3a03001 	mov	r3, #1
 1000634:	e3a02001 	mov	r2, #1
 1000638:	e3a01001 	mov	r1, #1
 100063c:	e51b0010 	ldr	r0, [fp, #-16]
 1000640:	ebffff61 	bl	10003cc <alt_clk_freq_get_device>
 1000644:	e50b0008 	str	r0, [fp, #-8]
        ALT_CLKMGR_MAINPLL_EN_MPUCLKEN_SET_MSK,
        ALT_CLKMGR_MAINPLL_BYPASS_MPU_SET_MSK,
        ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
        ALT_CLKMGR_ALTERA_ADDR, ALT_CLKMGR_NOCCLK_PERICNT_LSB, /* No ALT_CLKMGR_MPUCLK_PERICNT_LSB defined*/
        ALT_CLKMGR_ALTERA_ADDR, 0);
    return ret;
 1000648:	e51b3008 	ldr	r3, [fp, #-8]
}
 100064c:	e1a00003 	mov	r0, r3
 1000650:	e24bd004 	sub	sp, fp, #4
 1000654:	e8bd8800 	pop	{fp, pc}

01000658 <alt_clk_freq_get_mpu_periph>:

ALT_STATUS_CODE alt_clk_freq_get_mpu_periph(alt_freq_t *pfreq)
{
 1000658:	e92d4800 	push	{fp, lr}
 100065c:	e28db004 	add	fp, sp, #4
 1000660:	e24dd010 	sub	sp, sp, #16
 1000664:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_mpu(pfreq);
 1000668:	e51b0010 	ldr	r0, [fp, #-16]
 100066c:	ebffffde 	bl	10005ec <alt_clk_freq_get_mpu>
 1000670:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=4;
 1000674:	e51b3010 	ldr	r3, [fp, #-16]
 1000678:	e5933000 	ldr	r3, [r3]
 100067c:	e1a02123 	lsr	r2, r3, #2
 1000680:	e51b3010 	ldr	r3, [fp, #-16]
 1000684:	e5832000 	str	r2, [r3]
    return ret;
 1000688:	e51b3008 	ldr	r3, [fp, #-8]
}
 100068c:	e1a00003 	mov	r0, r3
 1000690:	e24bd004 	sub	sp, fp, #4
 1000694:	e8bd8800 	pop	{fp, pc}

01000698 <alt_clk_freq_get_mpu_l2ram>:

ALT_STATUS_CODE alt_clk_freq_get_mpu_l2ram(alt_freq_t *pfreq)
{
 1000698:	e92d4800 	push	{fp, lr}
 100069c:	e28db004 	add	fp, sp, #4
 10006a0:	e24dd010 	sub	sp, sp, #16
 10006a4:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_mpu(pfreq);
 10006a8:	e51b0010 	ldr	r0, [fp, #-16]
 10006ac:	ebffffce 	bl	10005ec <alt_clk_freq_get_mpu>
 10006b0:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=2;
 10006b4:	e51b3010 	ldr	r3, [fp, #-16]
 10006b8:	e5933000 	ldr	r3, [r3]
 10006bc:	e1a020a3 	lsr	r2, r3, #1
 10006c0:	e51b3010 	ldr	r3, [fp, #-16]
 10006c4:	e5832000 	str	r2, [r3]
    return ret;
 10006c8:	e51b3008 	ldr	r3, [fp, #-8]
}
 10006cc:	e1a00003 	mov	r0, r3
 10006d0:	e24bd004 	sub	sp, fp, #4
 10006d4:	e8bd8800 	pop	{fp, pc}

010006d8 <alt_clk_freq_get_l3_main_free>:

/* Same as noc_clock */
ALT_STATUS_CODE alt_clk_freq_get_l3_main_free(alt_freq_t *pfreq)
{
 10006d8:	e92d4800 	push	{fp, lr}
 10006dc:	e28db004 	add	fp, sp, #4
 10006e0:	e24dd028 	sub	sp, sp, #40	; 0x28
 10006e4:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_device(pfreq,
 10006e8:	e3a03000 	mov	r3, #0
 10006ec:	e58d3010 	str	r3, [sp, #16]
 10006f0:	e3043144 	movw	r3, #16708	; 0x4144
 10006f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10006f8:	e58d300c 	str	r3, [sp, #12]
 10006fc:	e3a03010 	mov	r3, #16
 1000700:	e58d3008 	str	r3, [sp, #8]
 1000704:	e3043144 	movw	r3, #16708	; 0x4144
 1000708:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100070c:	e58d3004 	str	r3, [sp, #4]
 1000710:	e3043064 	movw	r3, #16484	; 0x4064
 1000714:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000718:	e58d3000 	str	r3, [sp]
 100071c:	e3a03002 	mov	r3, #2
 1000720:	e3a02000 	mov	r2, #0
 1000724:	e3a01001 	mov	r1, #1
 1000728:	e51b0010 	ldr	r0, [fp, #-16]
 100072c:	ebffff26 	bl	10003cc <alt_clk_freq_get_device>
 1000730:	e50b0008 	str	r0, [fp, #-8]
        ALT_CLKMGR_MAINPLL_BYPASS_NOC_SET_MSK,
        ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
        ALT_CLKMGR_NOCCLK_ADDR, ALT_CLKMGR_NOCCLK_PERICNT_LSB,
        ALT_CLKMGR_NOCCLK_ADDR, 0
        );
    return ret;
 1000734:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000738:	e1a00003 	mov	r0, r3
 100073c:	e24bd004 	sub	sp, fp, #4
 1000740:	e8bd8800 	pop	{fp, pc}

01000744 <alt_clk_freq_get_l4_sys_free>:

ALT_STATUS_CODE alt_clk_freq_get_l4_sys_free(alt_freq_t *pfreq)
{
 1000744:	e92d4800 	push	{fp, lr}
 1000748:	e28db004 	add	fp, sp, #4
 100074c:	e24dd010 	sub	sp, sp, #16
 1000750:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 1000754:	e51b0010 	ldr	r0, [fp, #-16]
 1000758:	ebffffde 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 100075c:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=4;
 1000760:	e51b3010 	ldr	r3, [fp, #-16]
 1000764:	e5933000 	ldr	r3, [r3]
 1000768:	e1a02123 	lsr	r2, r3, #2
 100076c:	e51b3010 	ldr	r3, [fp, #-16]
 1000770:	e5832000 	str	r2, [r3]
    return ret;
 1000774:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000778:	e1a00003 	mov	r0, r3
 100077c:	e24bd004 	sub	sp, fp, #4
 1000780:	e8bd8800 	pop	{fp, pc}

01000784 <alt_clk_freq_get_l4_main>:

ALT_STATUS_CODE alt_clk_freq_get_l4_main(alt_freq_t *pfreq)
{
 1000784:	e92d4800 	push	{fp, lr}
 1000788:	e28db004 	add	fp, sp, #4
 100078c:	e24dd010 	sub	sp, sp, #16
 1000790:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE 
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 1000794:	e51b0010 	ldr	r0, [fp, #-16]
 1000798:	ebffffce 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 100079c:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_L4MAINCLK_GET(
 10007a0:	e30430a8 	movw	r3, #16552	; 0x40a8
 10007a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10007a8:	e5933000 	ldr	r3, [r3]
 10007ac:	e2033003 	and	r3, r3, #3
 10007b0:	e3a02001 	mov	r2, #1
 10007b4:	e1a02312 	lsl	r2, r2, r3
 10007b8:	e51b3010 	ldr	r3, [fp, #-16]
 10007bc:	e5933000 	ldr	r3, [r3]
 10007c0:	e1a01002 	mov	r1, r2
 10007c4:	e1a00003 	mov	r0, r3
 10007c8:	eb001203 	bl	1004fdc <__udivsi3>
 10007cc:	e1a03000 	mov	r3, r0
 10007d0:	e1a02003 	mov	r2, r3
 10007d4:	e51b3010 	ldr	r3, [fp, #-16]
 10007d8:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 10007dc:	e51b3008 	ldr	r3, [fp, #-8]
}
 10007e0:	e1a00003 	mov	r0, r3
 10007e4:	e24bd004 	sub	sp, fp, #4
 10007e8:	e8bd8800 	pop	{fp, pc}

010007ec <alt_clk_freq_get_l4_mp>:

ALT_STATUS_CODE alt_clk_freq_get_l4_mp(alt_freq_t *pfreq)
{
 10007ec:	e92d4800 	push	{fp, lr}
 10007f0:	e28db004 	add	fp, sp, #4
 10007f4:	e24dd010 	sub	sp, sp, #16
 10007f8:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 10007fc:	e51b0010 	ldr	r0, [fp, #-16]
 1000800:	ebffffb4 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 1000804:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_L4MPCLK_GET(
 1000808:	e30430a8 	movw	r3, #16552	; 0x40a8
 100080c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000810:	e5933000 	ldr	r3, [r3]
 1000814:	e1a03423 	lsr	r3, r3, #8
 1000818:	e2033003 	and	r3, r3, #3
 100081c:	e3a02001 	mov	r2, #1
 1000820:	e1a02312 	lsl	r2, r2, r3
 1000824:	e51b3010 	ldr	r3, [fp, #-16]
 1000828:	e5933000 	ldr	r3, [r3]
 100082c:	e1a01002 	mov	r1, r2
 1000830:	e1a00003 	mov	r0, r3
 1000834:	eb0011e8 	bl	1004fdc <__udivsi3>
 1000838:	e1a03000 	mov	r3, r0
 100083c:	e1a02003 	mov	r2, r3
 1000840:	e51b3010 	ldr	r3, [fp, #-16]
 1000844:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 1000848:	e51b3008 	ldr	r3, [fp, #-8]
}
 100084c:	e1a00003 	mov	r0, r3
 1000850:	e24bd004 	sub	sp, fp, #4
 1000854:	e8bd8800 	pop	{fp, pc}

01000858 <alt_clk_freq_get_l4_sp>:

ALT_STATUS_CODE alt_clk_freq_get_l4_sp(alt_freq_t *pfreq)
{
 1000858:	e92d4800 	push	{fp, lr}
 100085c:	e28db004 	add	fp, sp, #4
 1000860:	e24dd010 	sub	sp, sp, #16
 1000864:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 1000868:	e51b0010 	ldr	r0, [fp, #-16]
 100086c:	ebffff99 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 1000870:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_L4SPCLK_GET(
 1000874:	e30430a8 	movw	r3, #16552	; 0x40a8
 1000878:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100087c:	e5933000 	ldr	r3, [r3]
 1000880:	e1a03823 	lsr	r3, r3, #16
 1000884:	e2033003 	and	r3, r3, #3
 1000888:	e3a02001 	mov	r2, #1
 100088c:	e1a02312 	lsl	r2, r2, r3
 1000890:	e51b3010 	ldr	r3, [fp, #-16]
 1000894:	e5933000 	ldr	r3, [r3]
 1000898:	e1a01002 	mov	r1, r2
 100089c:	e1a00003 	mov	r0, r3
 10008a0:	eb0011cd 	bl	1004fdc <__udivsi3>
 10008a4:	e1a03000 	mov	r3, r0
 10008a8:	e1a02003 	mov	r2, r3
 10008ac:	e51b3010 	ldr	r3, [fp, #-16]
 10008b0:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 10008b4:	e51b3008 	ldr	r3, [fp, #-8]
}
 10008b8:	e1a00003 	mov	r0, r3
 10008bc:	e24bd004 	sub	sp, fp, #4
 10008c0:	e8bd8800 	pop	{fp, pc}

010008c4 <alt_clk_freq_get_cs_timer>:

ALT_STATUS_CODE alt_clk_freq_get_cs_timer(alt_freq_t *pfreq)
{
 10008c4:	e92d4800 	push	{fp, lr}
 10008c8:	e28db004 	add	fp, sp, #4
 10008cc:	e24dd010 	sub	sp, sp, #16
 10008d0:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 10008d4:	e51b0010 	ldr	r0, [fp, #-16]
 10008d8:	ebffff7e 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 10008dc:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSATCLK_GET(
 10008e0:	e30430a8 	movw	r3, #16552	; 0x40a8
 10008e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10008e8:	e5933000 	ldr	r3, [r3]
 10008ec:	e1a03c23 	lsr	r3, r3, #24
 10008f0:	e2033003 	and	r3, r3, #3
 10008f4:	e3a02001 	mov	r2, #1
 10008f8:	e1a02312 	lsl	r2, r2, r3
 10008fc:	e51b3010 	ldr	r3, [fp, #-16]
 1000900:	e5933000 	ldr	r3, [r3]
 1000904:	e1a01002 	mov	r1, r2
 1000908:	e1a00003 	mov	r0, r3
 100090c:	eb0011b2 	bl	1004fdc <__udivsi3>
 1000910:	e1a03000 	mov	r3, r0
 1000914:	e1a02003 	mov	r2, r3
 1000918:	e51b3010 	ldr	r3, [fp, #-16]
 100091c:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 1000920:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000924:	e1a00003 	mov	r0, r3
 1000928:	e24bd004 	sub	sp, fp, #4
 100092c:	e8bd8800 	pop	{fp, pc}

01000930 <alt_clk_freq_get_cs_at>:

ALT_STATUS_CODE alt_clk_freq_get_cs_at(alt_freq_t *pfreq)
{
 1000930:	e92d4800 	push	{fp, lr}
 1000934:	e28db004 	add	fp, sp, #4
 1000938:	e24dd010 	sub	sp, sp, #16
 100093c:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_l3_main_free(pfreq);
 1000940:	e51b0010 	ldr	r0, [fp, #-16]
 1000944:	ebffff63 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
 1000948:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSATCLK_GET(
 100094c:	e30430a8 	movw	r3, #16552	; 0x40a8
 1000950:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000954:	e5933000 	ldr	r3, [r3]
 1000958:	e1a03c23 	lsr	r3, r3, #24
 100095c:	e2033003 	and	r3, r3, #3
 1000960:	e3a02001 	mov	r2, #1
 1000964:	e1a02312 	lsl	r2, r2, r3
 1000968:	e51b3010 	ldr	r3, [fp, #-16]
 100096c:	e5933000 	ldr	r3, [r3]
 1000970:	e1a01002 	mov	r1, r2
 1000974:	e1a00003 	mov	r0, r3
 1000978:	eb001197 	bl	1004fdc <__udivsi3>
 100097c:	e1a03000 	mov	r3, r0
 1000980:	e1a02003 	mov	r2, r3
 1000984:	e51b3010 	ldr	r3, [fp, #-16]
 1000988:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 100098c:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000990:	e1a00003 	mov	r0, r3
 1000994:	e24bd004 	sub	sp, fp, #4
 1000998:	e8bd8800 	pop	{fp, pc}

0100099c <alt_clk_freq_get_cs_pdbg>:

ALT_STATUS_CODE alt_clk_freq_get_cs_pdbg(alt_freq_t *pfreq)
{
 100099c:	e92d4800 	push	{fp, lr}
 10009a0:	e28db004 	add	fp, sp, #4
 10009a4:	e24dd010 	sub	sp, sp, #16
 10009a8:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_cs_timer(pfreq);
 10009ac:	e51b0010 	ldr	r0, [fp, #-16]
 10009b0:	ebffffc3 	bl	10008c4 <alt_clk_freq_get_cs_timer>
 10009b4:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSPDBGCLK_GET(
 10009b8:	e30430a8 	movw	r3, #16552	; 0x40a8
 10009bc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 10009c0:	e5933000 	ldr	r3, [r3]
 10009c4:	e1a03e23 	lsr	r3, r3, #28
 10009c8:	e2033001 	and	r3, r3, #1
 10009cc:	e3a02001 	mov	r2, #1
 10009d0:	e1a02312 	lsl	r2, r2, r3
 10009d4:	e51b3010 	ldr	r3, [fp, #-16]
 10009d8:	e5933000 	ldr	r3, [r3]
 10009dc:	e1a01002 	mov	r1, r2
 10009e0:	e1a00003 	mov	r0, r3
 10009e4:	eb00117c 	bl	1004fdc <__udivsi3>
 10009e8:	e1a03000 	mov	r3, r0
 10009ec:	e1a02003 	mov	r2, r3
 10009f0:	e51b3010 	ldr	r3, [fp, #-16]
 10009f4:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 10009f8:	e51b3008 	ldr	r3, [fp, #-8]
}
 10009fc:	e1a00003 	mov	r0, r3
 1000a00:	e24bd004 	sub	sp, fp, #4
 1000a04:	e8bd8800 	pop	{fp, pc}

01000a08 <alt_clk_freq_get_cs_trace>:

ALT_STATUS_CODE alt_clk_freq_get_cs_trace(alt_freq_t *pfreq)
{
 1000a08:	e92d4800 	push	{fp, lr}
 1000a0c:	e28db004 	add	fp, sp, #4
 1000a10:	e24dd010 	sub	sp, sp, #16
 1000a14:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_cs_timer(pfreq);
 1000a18:	e51b0010 	ldr	r0, [fp, #-16]
 1000a1c:	ebffffa8 	bl	10008c4 <alt_clk_freq_get_cs_timer>
 1000a20:	e50b0008 	str	r0, [fp, #-8]
    *pfreq/=(1 << ALT_CLKMGR_MAINPLL_NOCDIV_CSTRACECLK_GET(
 1000a24:	e30430a8 	movw	r3, #16552	; 0x40a8
 1000a28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000a2c:	e5933000 	ldr	r3, [r3]
 1000a30:	e1a03d23 	lsr	r3, r3, #26
 1000a34:	e2033003 	and	r3, r3, #3
 1000a38:	e3a02001 	mov	r2, #1
 1000a3c:	e1a02312 	lsl	r2, r2, r3
 1000a40:	e51b3010 	ldr	r3, [fp, #-16]
 1000a44:	e5933000 	ldr	r3, [r3]
 1000a48:	e1a01002 	mov	r1, r2
 1000a4c:	e1a00003 	mov	r0, r3
 1000a50:	eb001161 	bl	1004fdc <__udivsi3>
 1000a54:	e1a03000 	mov	r3, r0
 1000a58:	e1a02003 	mov	r2, r3
 1000a5c:	e51b3010 	ldr	r3, [fp, #-16]
 1000a60:	e5832000 	str	r2, [r3]
                   alt_read_word(ALT_CLKMGR_MAINPLL_NOCDIV_ADDR)));
    return ret;
 1000a64:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000a68:	e1a00003 	mov	r0, r3
 1000a6c:	e24bd004 	sub	sp, fp, #4
 1000a70:	e8bd8800 	pop	{fp, pc}

01000a74 <alt_clk_freq_get_emac01>:
********************************************************************/

static ALT_STATUS_CODE alt_clk_freq_get_emac01(alt_freq_t *pfreq,
                                      uint32_t enable_mask,
                                      uint32_t select_mask)
{
 1000a74:	e92d4800 	push	{fp, lr}
 1000a78:	e28db004 	add	fp, sp, #4
 1000a7c:	e24dd028 	sub	sp, sp, #40	; 0x28
 1000a80:	e50b0008 	str	r0, [fp, #-8]
 1000a84:	e50b100c 	str	r1, [fp, #-12]
 1000a88:	e50b2010 	str	r2, [fp, #-16]
    /* Step 1 - Check emac0_en */

    if(alt_read_word(ALT_CLKMGR_PERPLL_EMACCTL_ADDR) & select_mask)
 1000a8c:	e3043128 	movw	r3, #16680	; 0x4128
 1000a90:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000a94:	e5932000 	ldr	r2, [r3]
 1000a98:	e51b3010 	ldr	r3, [fp, #-16]
 1000a9c:	e0033002 	and	r3, r3, r2
 1000aa0:	e3530000 	cmp	r3, #0
 1000aa4:	0a000013 	beq	1000af8 <alt_clk_freq_get_emac01+0x84>
    { /* EmacB */
        return alt_clk_freq_get_device(pfreq,
 1000aa8:	e3a03000 	mov	r3, #0
 1000aac:	e58d3010 	str	r3, [sp, #16]
 1000ab0:	e304306c 	movw	r3, #16492	; 0x406c
 1000ab4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000ab8:	e58d300c 	str	r3, [sp, #12]
 1000abc:	e3a03000 	mov	r3, #0
 1000ac0:	e58d3008 	str	r3, [sp, #8]
 1000ac4:	e30430ec 	movw	r3, #16620	; 0x40ec
 1000ac8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000acc:	e58d3004 	str	r3, [sp, #4]
 1000ad0:	e30430ec 	movw	r3, #16620	; 0x40ec
 1000ad4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000ad8:	e58d3000 	str	r3, [sp]
 1000adc:	e3a03002 	mov	r3, #2
 1000ae0:	e51b200c 	ldr	r2, [fp, #-12]
 1000ae4:	e3a01000 	mov	r1, #0
 1000ae8:	e51b0008 	ldr	r0, [fp, #-8]
 1000aec:	ebfffe36 	bl	10003cc <alt_clk_freq_get_device>
 1000af0:	e1a03000 	mov	r3, r0
 1000af4:	ea000012 	b	1000b44 <alt_clk_freq_get_emac01+0xd0>
                   ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR, 0
                   );
    }
    else
    { /* EmacA */
        return alt_clk_freq_get_device(pfreq,
 1000af8:	e3a03000 	mov	r3, #0
 1000afc:	e58d3010 	str	r3, [sp, #16]
 1000b00:	e3043068 	movw	r3, #16488	; 0x4068
 1000b04:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000b08:	e58d300c 	str	r3, [sp, #12]
 1000b0c:	e3a03000 	mov	r3, #0
 1000b10:	e58d3008 	str	r3, [sp, #8]
 1000b14:	e30430e8 	movw	r3, #16616	; 0x40e8
 1000b18:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000b1c:	e58d3004 	str	r3, [sp, #4]
 1000b20:	e30430e8 	movw	r3, #16616	; 0x40e8
 1000b24:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000b28:	e58d3000 	str	r3, [sp]
 1000b2c:	e3a03001 	mov	r3, #1
 1000b30:	e51b200c 	ldr	r2, [fp, #-12]
 1000b34:	e3a01000 	mov	r1, #0
 1000b38:	e51b0008 	ldr	r0, [fp, #-8]
 1000b3c:	ebfffe22 	bl	10003cc <alt_clk_freq_get_device>
 1000b40:	e1a03000 	mov	r3, r0
                   ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
                   ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR, 0,
                   ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR, 0
                   );
    }
}
 1000b44:	e1a00003 	mov	r0, r3
 1000b48:	e24bd004 	sub	sp, fp, #4
 1000b4c:	e8bd8800 	pop	{fp, pc}

01000b50 <alt_clk_freq_get_emac0>:


ALT_STATUS_CODE alt_clk_freq_get_emac0(alt_freq_t *pfreq)
{
 1000b50:	e92d4800 	push	{fp, lr}
 1000b54:	e28db004 	add	fp, sp, #4
 1000b58:	e24dd008 	sub	sp, sp, #8
 1000b5c:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_emac01(pfreq,
 1000b60:	e3a02301 	mov	r2, #67108864	; 0x4000000
 1000b64:	e3a01001 	mov	r1, #1
 1000b68:	e51b0008 	ldr	r0, [fp, #-8]
 1000b6c:	ebffffc0 	bl	1000a74 <alt_clk_freq_get_emac01>
 1000b70:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_EN_EMAC0EN_SET_MSK,
        ALT_CLKMGR_PERPLL_EMACCTL_EMAC0SEL_SET_MSK);
}
 1000b74:	e1a00003 	mov	r0, r3
 1000b78:	e24bd004 	sub	sp, fp, #4
 1000b7c:	e8bd8800 	pop	{fp, pc}

01000b80 <alt_clk_freq_get_emac1>:

ALT_STATUS_CODE alt_clk_freq_get_emac1(alt_freq_t *pfreq)
{
 1000b80:	e92d4800 	push	{fp, lr}
 1000b84:	e28db004 	add	fp, sp, #4
 1000b88:	e24dd008 	sub	sp, sp, #8
 1000b8c:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_emac01(pfreq,
 1000b90:	e3a02302 	mov	r2, #134217728	; 0x8000000
 1000b94:	e3a01002 	mov	r1, #2
 1000b98:	e51b0008 	ldr	r0, [fp, #-8]
 1000b9c:	ebffffb4 	bl	1000a74 <alt_clk_freq_get_emac01>
 1000ba0:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_EN_EMAC1EN_SET_MSK,
        ALT_CLKMGR_PERPLL_EMACCTL_EMAC1SEL_SET_MSK);
}
 1000ba4:	e1a00003 	mov	r0, r3
 1000ba8:	e24bd004 	sub	sp, fp, #4
 1000bac:	e8bd8800 	pop	{fp, pc}

01000bb0 <alt_clk_freq_get_emac2>:

ALT_STATUS_CODE alt_clk_freq_get_emac2(alt_freq_t *pfreq)
{
 1000bb0:	e92d4800 	push	{fp, lr}
 1000bb4:	e28db004 	add	fp, sp, #4
 1000bb8:	e24dd008 	sub	sp, sp, #8
 1000bbc:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_emac01(pfreq,
 1000bc0:	e3a02201 	mov	r2, #268435456	; 0x10000000
 1000bc4:	e3a01004 	mov	r1, #4
 1000bc8:	e51b0008 	ldr	r0, [fp, #-8]
 1000bcc:	ebffffa8 	bl	1000a74 <alt_clk_freq_get_emac01>
 1000bd0:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_EN_EMAC2EN_SET_MSK,
        ALT_CLKMGR_PERPLL_EMACCTL_EMAC2SEL_SET_MSK);
}
 1000bd4:	e1a00003 	mov	r0, r3
 1000bd8:	e24bd004 	sub	sp, fp, #4
 1000bdc:	e8bd8800 	pop	{fp, pc}

01000be0 <alt_clk_freq_get_emac_ptp>:

ALT_STATUS_CODE alt_clk_freq_get_emac_ptp(alt_freq_t *pfreq)
{
 1000be0:	e92d4800 	push	{fp, lr}
 1000be4:	e28db004 	add	fp, sp, #4
 1000be8:	e24dd020 	sub	sp, sp, #32
 1000bec:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000bf0:	e3a03000 	mov	r3, #0
 1000bf4:	e58d3010 	str	r3, [sp, #16]
 1000bf8:	e3043070 	movw	r3, #16496	; 0x4070
 1000bfc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c00:	e58d300c 	str	r3, [sp, #12]
 1000c04:	e3a03000 	mov	r3, #0
 1000c08:	e58d3008 	str	r3, [sp, #8]
 1000c0c:	e30430f0 	movw	r3, #16624	; 0x40f0
 1000c10:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c14:	e58d3004 	str	r3, [sp, #4]
 1000c18:	e30430f0 	movw	r3, #16624	; 0x40f0
 1000c1c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c20:	e58d3000 	str	r3, [sp]
 1000c24:	e3a03004 	mov	r3, #4
 1000c28:	e3a02008 	mov	r2, #8
 1000c2c:	e3a01000 	mov	r1, #0
 1000c30:	e51b0008 	ldr	r0, [fp, #-8]
 1000c34:	ebfffde4 	bl	10003cc <alt_clk_freq_get_device>
 1000c38:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_BYPASS_EMACPTP_SET_MSK,
        ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR, 0
        );
}
 1000c3c:	e1a00003 	mov	r0, r3
 1000c40:	e24bd004 	sub	sp, fp, #4
 1000c44:	e8bd8800 	pop	{fp, pc}

01000c48 <alt_clk_freq_get_gpio>:

ALT_STATUS_CODE alt_clk_freq_get_gpio(alt_freq_t *pfreq)
{
 1000c48:	e92d4800 	push	{fp, lr}
 1000c4c:	e28db004 	add	fp, sp, #4
 1000c50:	e24dd028 	sub	sp, sp, #40	; 0x28
 1000c54:	e50b0010 	str	r0, [fp, #-16]
    ALT_STATUS_CODE ret;
    ret = alt_clk_freq_get_device(pfreq,
 1000c58:	e3a03000 	mov	r3, #0
 1000c5c:	e58d3010 	str	r3, [sp, #16]
 1000c60:	e3043074 	movw	r3, #16500	; 0x4074
 1000c64:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c68:	e58d300c 	str	r3, [sp, #12]
 1000c6c:	e3a03000 	mov	r3, #0
 1000c70:	e58d3008 	str	r3, [sp, #8]
 1000c74:	e30430f4 	movw	r3, #16628	; 0x40f4
 1000c78:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c7c:	e58d3004 	str	r3, [sp, #4]
 1000c80:	e30430f4 	movw	r3, #16628	; 0x40f4
 1000c84:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000c88:	e58d3000 	str	r3, [sp]
 1000c8c:	e3a03008 	mov	r3, #8
 1000c90:	e3a02010 	mov	r2, #16
 1000c94:	e3a01000 	mov	r1, #0
 1000c98:	e51b0010 	ldr	r0, [fp, #-16]
 1000c9c:	ebfffdca 	bl	10003cc <alt_clk_freq_get_device>
 1000ca0:	e50b0008 	str	r0, [fp, #-8]
        ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR, 0
        );
   /* GPIO has an extra external divider */
   *pfreq/=(1 + ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_GET(
 1000ca4:	e304312c 	movw	r3, #16684	; 0x412c
 1000ca8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000cac:	e5933000 	ldr	r3, [r3]
 1000cb0:	e6ff3073 	uxth	r3, r3
 1000cb4:	e2832001 	add	r2, r3, #1
 1000cb8:	e51b3010 	ldr	r3, [fp, #-16]
 1000cbc:	e5933000 	ldr	r3, [r3]
 1000cc0:	e1a01002 	mov	r1, r2
 1000cc4:	e1a00003 	mov	r0, r3
 1000cc8:	eb0010c3 	bl	1004fdc <__udivsi3>
 1000ccc:	e1a03000 	mov	r3, r0
 1000cd0:	e1a02003 	mov	r2, r3
 1000cd4:	e51b3010 	ldr	r3, [fp, #-16]
 1000cd8:	e5832000 	str	r2, [r3]
               alt_read_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR)));
   return ret;
 1000cdc:	e51b3008 	ldr	r3, [fp, #-8]
}
 1000ce0:	e1a00003 	mov	r0, r3
 1000ce4:	e24bd004 	sub	sp, fp, #4
 1000ce8:	e8bd8800 	pop	{fp, pc}

01000cec <alt_clk_freq_get_sdmmc>:

ALT_STATUS_CODE alt_clk_freq_get_sdmmc(alt_freq_t *pfreq)
{
 1000cec:	e92d4800 	push	{fp, lr}
 1000cf0:	e28db004 	add	fp, sp, #4
 1000cf4:	e24dd020 	sub	sp, sp, #32
 1000cf8:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000cfc:	e3a03000 	mov	r3, #0
 1000d00:	e58d3010 	str	r3, [sp, #16]
 1000d04:	e3043078 	movw	r3, #16504	; 0x4078
 1000d08:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d0c:	e58d300c 	str	r3, [sp, #12]
 1000d10:	e3a03000 	mov	r3, #0
 1000d14:	e58d3008 	str	r3, [sp, #8]
 1000d18:	e30430f8 	movw	r3, #16632	; 0x40f8
 1000d1c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d20:	e58d3004 	str	r3, [sp, #4]
 1000d24:	e30430f8 	movw	r3, #16632	; 0x40f8
 1000d28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d2c:	e58d3000 	str	r3, [sp]
 1000d30:	e3a03010 	mov	r3, #16
 1000d34:	e3a02020 	mov	r2, #32
 1000d38:	e3a01000 	mov	r1, #0
 1000d3c:	e51b0008 	ldr	r0, [fp, #-8]
 1000d40:	ebfffda1 	bl	10003cc <alt_clk_freq_get_device>
 1000d44:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_BYPASS_SDMMC_SET_MSK,
        ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR, 0
        );
}
 1000d48:	e1a00003 	mov	r0, r3
 1000d4c:	e24bd004 	sub	sp, fp, #4
 1000d50:	e8bd8800 	pop	{fp, pc}

01000d54 <alt_clk_freq_get_qspi>:

ALT_STATUS_CODE alt_clk_freq_get_qspi(alt_freq_t *pfreq)
{
 1000d54:	e92d4800 	push	{fp, lr}
 1000d58:	e28db004 	add	fp, sp, #4
 1000d5c:	e24dd008 	sub	sp, sp, #8
 1000d60:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_l4_main(pfreq);
 1000d64:	e51b0008 	ldr	r0, [fp, #-8]
 1000d68:	ebfffe85 	bl	1000784 <alt_clk_freq_get_l4_main>
 1000d6c:	e1a03000 	mov	r3, r0
}
 1000d70:	e1a00003 	mov	r0, r3
 1000d74:	e24bd004 	sub	sp, fp, #4
 1000d78:	e8bd8800 	pop	{fp, pc}

01000d7c <alt_clk_freq_get_s2f_user0>:
    *pfreq/=alt_read_word(ALT_SPIM1_BAUDR_ADDR);
    return ret;
}

ALT_STATUS_CODE alt_clk_freq_get_s2f_user0(alt_freq_t *pfreq)
{
 1000d7c:	e92d4800 	push	{fp, lr}
 1000d80:	e28db004 	add	fp, sp, #4
 1000d84:	e24dd020 	sub	sp, sp, #32
 1000d88:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000d8c:	e3a03000 	mov	r3, #0
 1000d90:	e58d3010 	str	r3, [sp, #16]
 1000d94:	e304307c 	movw	r3, #16508	; 0x407c
 1000d98:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000d9c:	e58d300c 	str	r3, [sp, #12]
 1000da0:	e3a03000 	mov	r3, #0
 1000da4:	e58d3008 	str	r3, [sp, #8]
 1000da8:	e30430fc 	movw	r3, #16636	; 0x40fc
 1000dac:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000db0:	e58d3004 	str	r3, [sp, #4]
 1000db4:	e304307c 	movw	r3, #16508	; 0x407c
 1000db8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000dbc:	e58d3000 	str	r3, [sp]
 1000dc0:	e3a03004 	mov	r3, #4
 1000dc4:	e3a02040 	mov	r2, #64	; 0x40
 1000dc8:	e3a01001 	mov	r1, #1
 1000dcc:	e51b0008 	ldr	r0, [fp, #-8]
 1000dd0:	ebfffd7d 	bl	10003cc <alt_clk_freq_get_device>
 1000dd4:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_MAINPLL_BYPASS_S2FUSER0_SET_MSK,
        ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR, 0
        );
}
 1000dd8:	e1a00003 	mov	r0, r3
 1000ddc:	e24bd004 	sub	sp, fp, #4
 1000de0:	e8bd8800 	pop	{fp, pc}

01000de4 <alt_clk_freq_get_s2f_user1>:

ALT_STATUS_CODE alt_clk_freq_get_s2f_user1(alt_freq_t *pfreq)
{
 1000de4:	e92d4800 	push	{fp, lr}
 1000de8:	e28db004 	add	fp, sp, #4
 1000dec:	e24dd020 	sub	sp, sp, #32
 1000df0:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000df4:	e3a03000 	mov	r3, #0
 1000df8:	e58d3010 	str	r3, [sp, #16]
 1000dfc:	e3043080 	movw	r3, #16512	; 0x4080
 1000e00:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e04:	e58d300c 	str	r3, [sp, #12]
 1000e08:	e3a03000 	mov	r3, #0
 1000e0c:	e58d3008 	str	r3, [sp, #8]
 1000e10:	e3a03c41 	mov	r3, #16640	; 0x4100
 1000e14:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e18:	e58d3004 	str	r3, [sp, #4]
 1000e1c:	e3a03c41 	mov	r3, #16640	; 0x4100
 1000e20:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e24:	e58d3000 	str	r3, [sp]
 1000e28:	e3a03020 	mov	r3, #32
 1000e2c:	e3a02040 	mov	r2, #64	; 0x40
 1000e30:	e3a01000 	mov	r1, #0
 1000e34:	e51b0008 	ldr	r0, [fp, #-8]
 1000e38:	ebfffd63 	bl	10003cc <alt_clk_freq_get_device>
 1000e3c:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_PERPLL_BYPASS_S2FUSER1_SET_MSK,
        ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR, 0
        );
}
 1000e40:	e1a00003 	mov	r0, r3
 1000e44:	e24bd004 	sub	sp, fp, #4
 1000e48:	e8bd8800 	pop	{fp, pc}

01000e4c <alt_clk_freq_get_hmc>:

ALT_STATUS_CODE alt_clk_freq_get_hmc(alt_freq_t *pfreq)
{
 1000e4c:	e92d4800 	push	{fp, lr}
 1000e50:	e28db004 	add	fp, sp, #4
 1000e54:	e24dd020 	sub	sp, sp, #32
 1000e58:	e50b0008 	str	r0, [fp, #-8]
    return alt_clk_freq_get_device(pfreq,
 1000e5c:	e3a03000 	mov	r3, #0
 1000e60:	e58d3010 	str	r3, [sp, #16]
 1000e64:	e3043084 	movw	r3, #16516	; 0x4084
 1000e68:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e6c:	e58d300c 	str	r3, [sp, #12]
 1000e70:	e3a03000 	mov	r3, #0
 1000e74:	e58d3008 	str	r3, [sp, #8]
 1000e78:	e3043104 	movw	r3, #16644	; 0x4104
 1000e7c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e80:	e58d3004 	str	r3, [sp, #4]
 1000e84:	e3043084 	movw	r3, #16516	; 0x4084
 1000e88:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1000e8c:	e58d3000 	str	r3, [sp]
 1000e90:	e3a03008 	mov	r3, #8
 1000e94:	e3a02000 	mov	r2, #0
 1000e98:	e3a01001 	mov	r1, #1
 1000e9c:	e51b0008 	ldr	r0, [fp, #-8]
 1000ea0:	ebfffd49 	bl	10003cc <alt_clk_freq_get_device>
 1000ea4:	e1a03000 	mov	r3, r0
        ALT_CLKMGR_MAINPLL_BYPASS_HMCPLLREF_SET_MSK,
        ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
        ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR, 0,
        ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR, 0
        );
}
 1000ea8:	e1a00003 	mov	r0, r3
 1000eac:	e24bd004 	sub	sp, fp, #4
 1000eb0:	e8bd8800 	pop	{fp, pc}

01000eb4 <alt_clk_freq_get>:

/*
// alt_clk_freq_get() returns the output frequency of the specified clock.
*/
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
 1000eb4:	e92d4800 	push	{fp, lr}
 1000eb8:	e28db004 	add	fp, sp, #4
 1000ebc:	e24dd010 	sub	sp, sp, #16
 1000ec0:	e1a03000 	mov	r3, r0
 1000ec4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 1000ec8:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE ret = ALT_E_SUCCESS; /*SALT_E_BAD_ARG;*/
 1000ecc:	e3a03000 	mov	r3, #0
 1000ed0:	e50b3008 	str	r3, [fp, #-8]

    if (freq == NULL)
 1000ed4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1000ed8:	e3530000 	cmp	r3, #0
 1000edc:	1a000001 	bne	1000ee8 <alt_clk_freq_get+0x34>
    {
        return ret;
 1000ee0:	e51b3008 	ldr	r3, [fp, #-8]
 1000ee4:	ea00007e 	b	10010e4 <alt_clk_freq_get+0x230>
    }

    switch (clk)
 1000ee8:	e55b300d 	ldrb	r3, [fp, #-13]
 1000eec:	e353001d 	cmp	r3, #29
 1000ef0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1000ef4:	ea000076 	b	10010d4 <alt_clk_freq_get+0x220>
 1000ef8:	01000f70 	tsteq	r0, r0, ror pc
 1000efc:	01000f80 	smlabbeq	r0, r0, pc, r0	; <UNPREDICTABLE>
 1000f00:	01000f90 			; <UNDEFINED> instruction: 0x01000f90
 1000f04:	01000fa0 	smlatbeq	r0, r0, pc, r0	; <UNPREDICTABLE>
 1000f08:	01000fb0 			; <UNDEFINED> instruction: 0x01000fb0
 1000f0c:	01000fc0 	smlabteq	r0, r0, pc, r0	; <UNPREDICTABLE>
 1000f10:	01000fd0 	ldrdeq	r0, [r0, -r0]
 1000f14:	01000fe0 	smlatteq	r0, r0, pc, r0	; <UNPREDICTABLE>
 1000f18:	01000ff0 	strdeq	r0, [r0, -r0]
 1000f1c:	01000ffc 	strdeq	r0, [r0, -ip]
 1000f20:	01001008 	tsteq	r0, r8
 1000f24:	01001014 	tsteq	r0, r4, lsl r0
 1000f28:	01001020 	tsteq	r0, r0, lsr #32
 1000f2c:	0100102c 	tsteq	r0, ip, lsr #32
 1000f30:	01001038 	tsteq	r0, r8, lsr r0
 1000f34:	01001044 	tsteq	r0, r4, asr #32
 1000f38:	01001050 	qaddeq	r1, r0, r0
 1000f3c:	0100105c 	qaddeq	r1, ip, r0
 1000f40:	01001068 	tsteq	r0, r8, rrx
 1000f44:	01001074 	tsteq	r0, r4, ror r0
 1000f48:	01001080 	smlabbeq	r0, r0, r0, r1
 1000f4c:	0100108c 	smlabbeq	r0, ip, r0, r1
 1000f50:	01001098 	swpeq	r1, r8, [r0]
 1000f54:	010010a4 	smlatbeq	r0, r4, r0, r1
 1000f58:	010010b0 	strheq	r1, [r0, -r0]
 1000f5c:	010010bc 	strheq	r1, [r0, -ip]
 1000f60:	010010d4 	ldrdeq	r1, [r0, -r4]
 1000f64:	010010d4 	ldrdeq	r1, [r0, -r4]
 1000f68:	010010d4 	ldrdeq	r1, [r0, -r4]
 1000f6c:	010010c8 	smlabteq	r0, r8, r0, r1
    {
        /* External Inputs */
    case ALT_CLK_OSC1:
        ret = alt_clk_freq_get_osc1(freq);
 1000f70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000f74:	ebfffc22 	bl	1000004 <alt_clk_freq_get_osc1>
 1000f78:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000f7c:	ea000057 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_F2S_FREE_CLK:
        ret = alt_clk_freq_get_f2s_free_clk(freq);
 1000f80:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000f84:	ebfffc41 	bl	1000090 <alt_clk_freq_get_f2s_free_clk>
 1000f88:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000f8c:	ea000053 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_INTOSC_HS_DIV2:
        ret = alt_clk_freq_get_cb_intosc_hs_div2_clk(freq);
 1000f90:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000f94:	ebfffc28 	bl	100003c <alt_clk_freq_get_cb_intosc_hs_div2_clk>
 1000f98:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000f9c:	ea00004f 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MAIN_PLL:
        ret = alt_clk_freq_get_main_pll(freq);
 1000fa0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000fa4:	ebfffc4e 	bl	10000e4 <alt_clk_freq_get_main_pll>
 1000fa8:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000fac:	ea00004b 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_PERIPHERAL_PLL:
        ret = alt_clk_freq_get_peri_pll(freq);
 1000fb0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000fb4:	ebfffca0 	bl	100023c <alt_clk_freq_get_peri_pll>
 1000fb8:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000fbc:	ea000047 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MPU:
        ret = alt_clk_freq_get_mpu(freq);
 1000fc0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000fc4:	ebfffd88 	bl	10005ec <alt_clk_freq_get_mpu>
 1000fc8:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000fcc:	ea000043 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MPU_PERIPH:
        ret = alt_clk_freq_get_mpu_periph(freq);
 1000fd0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000fd4:	ebfffd9f 	bl	1000658 <alt_clk_freq_get_mpu_periph>
 1000fd8:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000fdc:	ea00003f 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_MPU_L2_RAM:
        ret = alt_clk_freq_get_mpu_l2ram(freq);
 1000fe0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000fe4:	ebfffdab 	bl	1000698 <alt_clk_freq_get_mpu_l2ram>
 1000fe8:	e50b0008 	str	r0, [fp, #-8]
        break;
 1000fec:	ea00003b 	b	10010e0 <alt_clk_freq_get+0x22c>

    case ALT_CLK_L3_MAIN:
        alt_clk_freq_get_l3_main_free(freq);
 1000ff0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1000ff4:	ebfffdb7 	bl	10006d8 <alt_clk_freq_get_l3_main_free>
        break;
 1000ff8:	ea000038 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_SYS_FREE:
        alt_clk_freq_get_l4_sys_free(freq);
 1000ffc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001000:	ebfffdcf 	bl	1000744 <alt_clk_freq_get_l4_sys_free>
        break;
 1001004:	ea000035 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_MAIN:
        alt_clk_freq_get_l4_main(freq);
 1001008:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100100c:	ebfffddc 	bl	1000784 <alt_clk_freq_get_l4_main>
        break;
 1001010:	ea000032 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_MP:
        alt_clk_freq_get_l4_mp(freq);
 1001014:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001018:	ebfffdf3 	bl	10007ec <alt_clk_freq_get_l4_mp>
        break;
 100101c:	ea00002f 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_L4_SP:
        alt_clk_freq_get_l4_sp(freq);
 1001020:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001024:	ebfffe0b 	bl	1000858 <alt_clk_freq_get_l4_sp>
        break;
 1001028:	ea00002c 	b	10010e0 <alt_clk_freq_get+0x22c>

    case ALT_CLK_CS_TIMER:
        alt_clk_freq_get_cs_timer(freq);
 100102c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001030:	ebfffe23 	bl	10008c4 <alt_clk_freq_get_cs_timer>
        break;
 1001034:	ea000029 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_CS_AT:
        alt_clk_freq_get_cs_at(freq);
 1001038:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100103c:	ebfffe3b 	bl	1000930 <alt_clk_freq_get_cs_at>
        break;
 1001040:	ea000026 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_CS_PDBG:
        alt_clk_freq_get_cs_pdbg(freq);
 1001044:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001048:	ebfffe53 	bl	100099c <alt_clk_freq_get_cs_pdbg>
        break;
 100104c:	ea000023 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_CS_TRACE:
        alt_clk_freq_get_cs_trace(freq);
 1001050:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001054:	ebfffe6b 	bl	1000a08 <alt_clk_freq_get_cs_trace>
        break;
 1001058:	ea000020 	b	10010e0 <alt_clk_freq_get+0x22c>

    case ALT_CLK_S2F_USER0:
        alt_clk_freq_get_s2f_user0(freq);
 100105c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001060:	ebffff45 	bl	1000d7c <alt_clk_freq_get_s2f_user0>
        break;
 1001064:	ea00001d 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_S2F_USER1:
        alt_clk_freq_get_s2f_user1(freq);
 1001068:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100106c:	ebffff5c 	bl	1000de4 <alt_clk_freq_get_s2f_user1>
        break;
 1001070:	ea00001a 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_HMC_PLL_REF:
        alt_clk_freq_get_hmc(freq);
 1001074:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001078:	ebffff73 	bl	1000e4c <alt_clk_freq_get_hmc>
        break;
 100107c:	ea000017 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC0:
        alt_clk_freq_get_emac0(freq);
 1001080:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001084:	ebfffeb1 	bl	1000b50 <alt_clk_freq_get_emac0>
        break;
 1001088:	ea000014 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC1:
        alt_clk_freq_get_emac1(freq);
 100108c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1001090:	ebfffeba 	bl	1000b80 <alt_clk_freq_get_emac1>
        break;
 1001094:	ea000011 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC2:
        alt_clk_freq_get_emac2(freq);
 1001098:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100109c:	ebfffec3 	bl	1000bb0 <alt_clk_freq_get_emac2>
        break;
 10010a0:	ea00000e 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_EMAC_PTP:
        alt_clk_freq_get_emac_ptp(freq);
 10010a4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010a8:	ebfffecc 	bl	1000be0 <alt_clk_freq_get_emac_ptp>
        break;
 10010ac:	ea00000b 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_GPIO:
        alt_clk_freq_get_gpio(freq);
 10010b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010b4:	ebfffee3 	bl	1000c48 <alt_clk_freq_get_gpio>
        break;
 10010b8:	ea000008 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_SDMMC:
        alt_clk_freq_get_sdmmc(freq);
 10010bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010c0:	ebffff09 	bl	1000cec <alt_clk_freq_get_sdmmc>
        break;
 10010c4:	ea000005 	b	10010e0 <alt_clk_freq_get+0x22c>
    case ALT_CLK_QSPI:
        alt_clk_freq_get_qspi(freq);
 10010c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 10010cc:	ebffff20 	bl	1000d54 <alt_clk_freq_get_qspi>
        break;
 10010d0:	ea000002 	b	10010e0 <alt_clk_freq_get+0x22c>
    default:
        ret = ALT_E_BAD_ARG;
 10010d4:	e3e03008 	mvn	r3, #8
 10010d8:	e50b3008 	str	r3, [fp, #-8]
        break;
 10010dc:	e320f000 	nop	{0}

    }   /* end of switch-case construct */

    return ret;
 10010e0:	e51b3008 	ldr	r3, [fp, #-8]
}
 10010e4:	e1a00003 	mov	r0, r3
 10010e8:	e24bd004 	sub	sp, fp, #4
 10010ec:	e8bd8800 	pop	{fp, pc}

010010f0 <alt_clk_is_enabled_helper>:
        return ALT_E_BAD_ARG;
    }   /* end of switch-case construct */
}

static __inline ALT_STATUS_CODE alt_clk_is_enabled_helper(void *reg, uint32_t mask)
{
 10010f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10010f4:	e28db000 	add	fp, sp, #0
 10010f8:	e24dd00c 	sub	sp, sp, #12
 10010fc:	e50b0008 	str	r0, [fp, #-8]
 1001100:	e50b100c 	str	r1, [fp, #-12]
  if(mask & alt_read_word( reg ))
 1001104:	e51b3008 	ldr	r3, [fp, #-8]
 1001108:	e5932000 	ldr	r2, [r3]
 100110c:	e51b300c 	ldr	r3, [fp, #-12]
 1001110:	e0033002 	and	r3, r3, r2
 1001114:	e3530000 	cmp	r3, #0
 1001118:	0a000001 	beq	1001124 <alt_clk_is_enabled_helper+0x34>
      return ALT_E_TRUE;
 100111c:	e3a03001 	mov	r3, #1
 1001120:	ea000000 	b	1001128 <alt_clk_is_enabled_helper+0x38>
  else
      return ALT_E_FALSE;
 1001124:	e3a03000 	mov	r3, #0
}
 1001128:	e1a00003 	mov	r0, r3
 100112c:	e28bd000 	add	sp, fp, #0
 1001130:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001134:	e12fff1e 	bx	lr

01001138 <alt_clk_is_enabled>:

ALT_STATUS_CODE alt_clk_is_enabled(ALT_CLK_t clk)
{
 1001138:	e92d4800 	push	{fp, lr}
 100113c:	e28db004 	add	fp, sp, #4
 1001140:	e24dd008 	sub	sp, sp, #8
 1001144:	e1a03000 	mov	r3, r0
 1001148:	e54b3005 	strb	r3, [fp, #-5]
    switch (clk)
 100114c:	e55b3005 	ldrb	r3, [fp, #-5]
 1001150:	e2433005 	sub	r3, r3, #5
 1001154:	e3530018 	cmp	r3, #24
 1001158:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 100115c:	ea00008a 	b	100138c <alt_clk_is_enabled+0x254>
 1001160:	010011c4 	smlabteq	r0, r4, r1, r1
 1001164:	0100138c 	smlabbeq	r0, ip, r3, r1
 1001168:	0100138c 	smlabbeq	r0, ip, r3, r1
 100116c:	0100138c 	smlabbeq	r0, ip, r3, r1
 1001170:	0100138c 	smlabbeq	r0, ip, r3, r1
 1001174:	010011dc 	ldrdeq	r1, [r0, -ip]
 1001178:	010011f4 	strdeq	r1, [r0, -r4]
 100117c:	0100120c 	tsteq	r0, ip, lsl #4
 1001180:	01001224 	tsteq	r0, r4, lsr #4
 1001184:	0100123c 	tsteq	r0, ip, lsr r2
 1001188:	0100138c 	smlabbeq	r0, ip, r3, r1
 100118c:	0100138c 	smlabbeq	r0, ip, r3, r1
 1001190:	01001254 	tsteq	r0, r4, asr r2
 1001194:	0100126c 	tsteq	r0, ip, ror #4
 1001198:	01001284 	smlabbeq	r0, r4, r2, r1
 100119c:	0100129c 			; <UNDEFINED> instruction: 0x0100129c
 10011a0:	010012b4 			; <UNDEFINED> instruction: 0x010012b4
 10011a4:	010012cc 	smlabteq	r0, ip, r2, r1
 10011a8:	010012e4 	smlatteq	r0, r4, r2, r1
 10011ac:	010012fc 	strdeq	r1, [r0, -ip]
 10011b0:	01001314 	tsteq	r0, r4, lsl r3
 10011b4:	0100132c 	tsteq	r0, ip, lsr #6
 10011b8:	01001344 	tsteq	r0, r4, asr #6
 10011bc:	0100135c 	tsteq	r0, ip, asr r3
 10011c0:	01001374 	tsteq	r0, r4, ror r3
    {
        /* External Inputs */
    case ALT_CLK_MPU:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_MPUCLKEN_SET_MSK);
 10011c4:	e3a01001 	mov	r1, #1
 10011c8:	e3040048 	movw	r0, #16456	; 0x4048
 10011cc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10011d0:	ebffffc6 	bl	10010f0 <alt_clk_is_enabled_helper>
 10011d4:	e1a03000 	mov	r3, r0
 10011d8:	ea00006c 	b	1001390 <alt_clk_is_enabled+0x258>

    case ALT_CLK_L4_MAIN:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLKEN_SET_MSK);
 10011dc:	e3a01002 	mov	r1, #2
 10011e0:	e3040048 	movw	r0, #16456	; 0x4048
 10011e4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10011e8:	ebffffc0 	bl	10010f0 <alt_clk_is_enabled_helper>
 10011ec:	e1a03000 	mov	r3, r0
 10011f0:	ea000066 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_L4_MP:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLKEN_SET_MSK);
 10011f4:	e3a01004 	mov	r1, #4
 10011f8:	e3040048 	movw	r0, #16456	; 0x4048
 10011fc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001200:	ebffffba 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001204:	e1a03000 	mov	r3, r0
 1001208:	ea000060 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_L4_SP:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLKEN_SET_MSK);
 100120c:	e3a01008 	mov	r1, #8
 1001210:	e3040048 	movw	r0, #16456	; 0x4048
 1001214:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001218:	ebffffb4 	bl	10010f0 <alt_clk_is_enabled_helper>
 100121c:	e1a03000 	mov	r3, r0
 1001220:	ea00005a 	b	1001390 <alt_clk_is_enabled+0x258>

    case ALT_CLK_CS_TIMER:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CSTMRCLKEN_SET_MSK);
 1001224:	e3a01020 	mov	r1, #32
 1001228:	e3040048 	movw	r0, #16456	; 0x4048
 100122c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001230:	ebffffae 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001234:	e1a03000 	mov	r3, r0
 1001238:	ea000054 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_CS_AT:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CSCLKEN_SET_MSK);
 100123c:	e3a01010 	mov	r1, #16
 1001240:	e3040048 	movw	r0, #16456	; 0x4048
 1001244:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001248:	ebffffa8 	bl	10010f0 <alt_clk_is_enabled_helper>
 100124c:	e1a03000 	mov	r3, r0
 1001250:	ea00004e 	b	1001390 <alt_clk_is_enabled+0x258>

    case ALT_CLK_S2F_USER0:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLKEN_SET_MSK);
 1001254:	e3a01040 	mov	r1, #64	; 0x40
 1001258:	e3040048 	movw	r0, #16456	; 0x4048
 100125c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001260:	ebffffa2 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001264:	e1a03000 	mov	r3, r0
 1001268:	ea000048 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_S2F_USER1:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLKEN_SET_MSK);
 100126c:	e3a01040 	mov	r1, #64	; 0x40
 1001270:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001274:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001278:	ebffff9c 	bl	10010f0 <alt_clk_is_enabled_helper>
 100127c:	e1a03000 	mov	r3, r0
 1001280:	ea000042 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_HMC_PLL_REF:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_HMCPLLREFCLKEN_SET_MSK);
 1001284:	e3a01080 	mov	r1, #128	; 0x80
 1001288:	e3040048 	movw	r0, #16456	; 0x4048
 100128c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001290:	ebffff96 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001294:	e1a03000 	mov	r3, r0
 1001298:	ea00003c 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC0:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0EN_SET_MSK);
 100129c:	e3a01001 	mov	r1, #1
 10012a0:	e30400c8 	movw	r0, #16584	; 0x40c8
 10012a4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012a8:	ebffff90 	bl	10010f0 <alt_clk_is_enabled_helper>
 10012ac:	e1a03000 	mov	r3, r0
 10012b0:	ea000036 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC1:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1EN_SET_MSK);
 10012b4:	e3a01002 	mov	r1, #2
 10012b8:	e30400c8 	movw	r0, #16584	; 0x40c8
 10012bc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012c0:	ebffff8a 	bl	10010f0 <alt_clk_is_enabled_helper>
 10012c4:	e1a03000 	mov	r3, r0
 10012c8:	ea000030 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC2:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC2EN_SET_MSK);
 10012cc:	e3a01004 	mov	r1, #4
 10012d0:	e30400c8 	movw	r0, #16584	; 0x40c8
 10012d4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012d8:	ebffff84 	bl	10010f0 <alt_clk_is_enabled_helper>
 10012dc:	e1a03000 	mov	r3, r0
 10012e0:	ea00002a 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_EMAC_PTP:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMACPTPEN_SET_MSK);
 10012e4:	e3a01008 	mov	r1, #8
 10012e8:	e30400c8 	movw	r0, #16584	; 0x40c8
 10012ec:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 10012f0:	ebffff7e 	bl	10010f0 <alt_clk_is_enabled_helper>
 10012f4:	e1a03000 	mov	r3, r0
 10012f8:	ea000024 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_GPIO:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIODBEN_SET_MSK);
 10012fc:	e3a01010 	mov	r1, #16
 1001300:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001304:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001308:	ebffff78 	bl	10010f0 <alt_clk_is_enabled_helper>
 100130c:	e1a03000 	mov	r3, r0
 1001310:	ea00001e 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_SDMMC:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLKEN_SET_MSK);
 1001314:	e3a01020 	mov	r1, #32
 1001318:	e30400c8 	movw	r0, #16584	; 0x40c8
 100131c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001320:	ebffff72 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001324:	e1a03000 	mov	r3, r0
 1001328:	ea000018 	b	1001390 <alt_clk_is_enabled+0x258>

    case ALT_CLK_USB:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_USBCLKEN_SET_MSK);
 100132c:	e3a01c01 	mov	r1, #256	; 0x100
 1001330:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001334:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001338:	ebffff6c 	bl	10010f0 <alt_clk_is_enabled_helper>
 100133c:	e1a03000 	mov	r3, r0
 1001340:	ea000012 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_SPIM:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLKEN_SET_MSK);
 1001344:	e3a01c02 	mov	r1, #512	; 0x200
 1001348:	e30400c8 	movw	r0, #16584	; 0x40c8
 100134c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001350:	ebffff66 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001354:	e1a03000 	mov	r3, r0
 1001358:	ea00000c 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_NAND:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLKEN_SET_MSK);
 100135c:	e3a01b01 	mov	r1, #1024	; 0x400
 1001360:	e30400c8 	movw	r0, #16584	; 0x40c8
 1001364:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001368:	ebffff60 	bl	10010f0 <alt_clk_is_enabled_helper>
 100136c:	e1a03000 	mov	r3, r0
 1001370:	ea000006 	b	1001390 <alt_clk_is_enabled+0x258>
    case ALT_CLK_QSPI:
        return alt_clk_is_enabled_helper(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLKEN_SET_MSK);
 1001374:	e3a01b02 	mov	r1, #2048	; 0x800
 1001378:	e30400c8 	movw	r0, #16584	; 0x40c8
 100137c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
 1001380:	ebffff5a 	bl	10010f0 <alt_clk_is_enabled_helper>
 1001384:	e1a03000 	mov	r3, r0
 1001388:	ea000000 	b	1001390 <alt_clk_is_enabled+0x258>
    default:
        return ALT_E_BAD_ARG;
 100138c:	e3e03008 	mvn	r3, #8
    }   /* end of switch-case construct */
}
 1001390:	e1a00003 	mov	r0, r3
 1001394:	e24bd004 	sub	sp, fp, #4
 1001398:	e8bd8800 	pop	{fp, pc}

0100139c <alt_read_word_helper>:
// resolves to "*(volatile uint32_t *)src". As there is no assignment, this
// could potentially be optimized away. With the helper, the actual register
// read should occur and be returned (and subsequently discarded).
*/
static __inline uint32_t alt_read_word_helper(const void * addr)
{
 100139c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10013a0:	e28db000 	add	fp, sp, #0
 10013a4:	e24dd00c 	sub	sp, sp, #12
 10013a8:	e50b0008 	str	r0, [fp, #-8]
    return alt_read_word(addr);
 10013ac:	e51b3008 	ldr	r3, [fp, #-8]
 10013b0:	e5933000 	ldr	r3, [r3]
}
 10013b4:	e1a00003 	mov	r0, r3
 10013b8:	e28bd000 	add	sp, fp, #0
 10013bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10013c0:	e12fff1e 	bx	lr

010013c4 <alt_16550_write_divisor_helper>:
/*
// Helper function write the divisor in hardware.
*/
static ALT_STATUS_CODE alt_16550_write_divisor_helper(ALT_16550_HANDLE_t * handle,
                                                      uint32_t divisor)
{
 10013c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10013c8:	e28db000 	add	fp, sp, #0
 10013cc:	e24dd00c 	sub	sp, sp, #12
 10013d0:	e50b0008 	str	r0, [fp, #-8]
 10013d4:	e50b100c 	str	r1, [fp, #-12]
    /* Validate the divisor parameter. */
    if (divisor > 0xffff)
 10013d8:	e51b300c 	ldr	r3, [fp, #-12]
 10013dc:	e3530801 	cmp	r3, #65536	; 0x10000
 10013e0:	3a000001 	bcc	10013ec <alt_16550_write_divisor_helper+0x28>
    {
        /* This should never happen as it is verified in divisor_set. */
        return ALT_E_ERROR;
 10013e4:	e3e03000 	mvn	r3, #0
 10013e8:	ea000039 	b	10014d4 <alt_16550_write_divisor_helper+0x110>
    }

    switch (handle->device)
 10013ec:	e51b3008 	ldr	r3, [fp, #-8]
 10013f0:	e1d330b0 	ldrh	r3, [r3]
 10013f4:	e3530001 	cmp	r3, #1
 10013f8:	ca000002 	bgt	1001408 <alt_16550_write_divisor_helper+0x44>
 10013fc:	e3530000 	cmp	r3, #0
 1001400:	aa000002 	bge	1001410 <alt_16550_write_divisor_helper+0x4c>
 1001404:	ea000024 	b	100149c <alt_16550_write_divisor_helper+0xd8>
 1001408:	e3530c01 	cmp	r3, #256	; 0x100
 100140c:	1a000022 	bne	100149c <alt_16550_write_divisor_helper+0xd8>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Set LCR::DLAB (Line Control Register :: Divisor Latch Access Bit) */
        alt_setbits_word(ALT_UART_LCR_ADDR(handle->location), ALT_UART_LCR_DLAB_SET_MSK);
 1001410:	e51b3008 	ldr	r3, [fp, #-8]
 1001414:	e5933004 	ldr	r3, [r3, #4]
 1001418:	e283300c 	add	r3, r3, #12
 100141c:	e5932000 	ldr	r2, [r3]
 1001420:	e51b3008 	ldr	r3, [fp, #-8]
 1001424:	e5933004 	ldr	r3, [r3, #4]
 1001428:	e283300c 	add	r3, r3, #12
 100142c:	e3822080 	orr	r2, r2, #128	; 0x80
 1001430:	e5832000 	str	r2, [r3]

        /* Write DLL (Divisor Latch Low). */
        alt_write_word(ALT_UART_RBR_THR_DLL_ADDR(handle->location), ALT_UART_RBR_THR_DLL_VALUE_SET(divisor));
 1001434:	e51b3008 	ldr	r3, [fp, #-8]
 1001438:	e5933004 	ldr	r3, [r3, #4]
 100143c:	e51b200c 	ldr	r2, [fp, #-12]
 1001440:	e6ef2072 	uxtb	r2, r2
 1001444:	e5832000 	str	r2, [r3]

        /* Write DLH (Divisor Latch High). */
        alt_write_word(ALT_UART_IER_DLH_ADDR(handle->location), ALT_UART_IER_DLH_VALUE_SET(divisor >> 8));
 1001448:	e51b300c 	ldr	r3, [fp, #-12]
 100144c:	e1a02423 	lsr	r2, r3, #8
 1001450:	e51b3008 	ldr	r3, [fp, #-8]
 1001454:	e5933004 	ldr	r3, [r3, #4]
 1001458:	e2833004 	add	r3, r3, #4
 100145c:	e6ef2072 	uxtb	r2, r2
 1001460:	e5832000 	str	r2, [r3]

        /* Clear LCR::DLAB (Line Control Register :: Divisor Latch Access Bit) */
        alt_clrbits_word(ALT_UART_LCR_ADDR(handle->location), ALT_UART_LCR_DLAB_SET_MSK);
 1001464:	e51b3008 	ldr	r3, [fp, #-8]
 1001468:	e5933004 	ldr	r3, [r3, #4]
 100146c:	e283300c 	add	r3, r3, #12
 1001470:	e5932000 	ldr	r2, [r3]
 1001474:	e51b3008 	ldr	r3, [fp, #-8]
 1001478:	e5933004 	ldr	r3, [r3, #4]
 100147c:	e283300c 	add	r3, r3, #12
 1001480:	e3c22080 	bic	r2, r2, #128	; 0x80
 1001484:	e5832000 	str	r2, [r3]

        break;
 1001488:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    /* Update the enabled state in the handle data. */
    if (divisor != 0)
 100148c:	e51b300c 	ldr	r3, [fp, #-12]
 1001490:	e3530000 	cmp	r3, #0
 1001494:	0a000008 	beq	10014bc <alt_16550_write_divisor_helper+0xf8>
 1001498:	ea000001 	b	10014a4 <alt_16550_write_divisor_helper+0xe0>
        return ALT_E_ERROR;
 100149c:	e3e03000 	mvn	r3, #0
 10014a0:	ea00000b 	b	10014d4 <alt_16550_write_divisor_helper+0x110>
    {
        handle->data |= ALT_16550_HANDLE_DATA_UART_ENABLED_MSK;
 10014a4:	e51b3008 	ldr	r3, [fp, #-8]
 10014a8:	e593300c 	ldr	r3, [r3, #12]
 10014ac:	e3832102 	orr	r2, r3, #-2147483648	; 0x80000000
 10014b0:	e51b3008 	ldr	r3, [fp, #-8]
 10014b4:	e583200c 	str	r2, [r3, #12]
 10014b8:	ea000004 	b	10014d0 <alt_16550_write_divisor_helper+0x10c>
    }
    else
    {
        handle->data &= ~ALT_16550_HANDLE_DATA_UART_ENABLED_MSK;
 10014bc:	e51b3008 	ldr	r3, [fp, #-8]
 10014c0:	e593300c 	ldr	r3, [r3, #12]
 10014c4:	e3c32102 	bic	r2, r3, #-2147483648	; 0x80000000
 10014c8:	e51b3008 	ldr	r3, [fp, #-8]
 10014cc:	e583200c 	str	r2, [r3, #12]
    }

    return ALT_E_SUCCESS;
 10014d0:	e3a03000 	mov	r3, #0
}
 10014d4:	e1a00003 	mov	r0, r3
 10014d8:	e28bd000 	add	sp, fp, #0
 10014dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10014e0:	e12fff1e 	bx	lr

010014e4 <alt_16550_reset_helper>:

/*
// Helper function to reset the UART.
*/
static ALT_STATUS_CODE alt_16550_reset_helper(ALT_16550_HANDLE_t * handle, bool enable_init)
{
 10014e4:	e92d4800 	push	{fp, lr}
 10014e8:	e28db004 	add	fp, sp, #4
 10014ec:	e24dd010 	sub	sp, sp, #16
 10014f0:	e50b0010 	str	r0, [fp, #-16]
 10014f4:	e1a03001 	mov	r3, r1
 10014f8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    switch (handle->device)
 10014fc:	e51b3010 	ldr	r3, [fp, #-16]
 1001500:	e1d330b0 	ldrh	r3, [r3]
 1001504:	e3530001 	cmp	r3, #1
 1001508:	ca000002 	bgt	1001518 <alt_16550_reset_helper+0x34>
 100150c:	e3530000 	cmp	r3, #0
 1001510:	aa000003 	bge	1001524 <alt_16550_reset_helper+0x40>
 1001514:	ea00001a 	b	1001584 <alt_16550_reset_helper+0xa0>
 1001518:	e3530c01 	cmp	r3, #256	; 0x100
 100151c:	0a00000b 	beq	1001550 <alt_16550_reset_helper+0x6c>
 1001520:	ea000017 	b	1001584 <alt_16550_reset_helper+0xa0>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
        /* Write SRR::UR (Shadow Reset Register :: UART Reset) */
        alt_write_word(ALT_UART_SRR_ADDR(handle->location), ALT_UART_SRR_UR_SET_MSK);
 1001524:	e51b3010 	ldr	r3, [fp, #-16]
 1001528:	e5933004 	ldr	r3, [r3, #4]
 100152c:	e2833088 	add	r3, r3, #136	; 0x88
 1001530:	e3a02001 	mov	r2, #1
 1001534:	e5832000 	str	r2, [r3]

        /* Read the MSR to work around case:119085. */
        alt_read_word_helper(ALT_UART_MSR_ADDR(handle->location));
 1001538:	e51b3010 	ldr	r3, [fp, #-16]
 100153c:	e5933004 	ldr	r3, [r3, #4]
 1001540:	e2833018 	add	r3, r3, #24
 1001544:	e1a00003 	mov	r0, r3
 1001548:	ebffff93 	bl	100139c <alt_read_word_helper>
        break;
 100154c:	ea00000e 	b	100158c <alt_16550_reset_helper+0xa8>

    case ALT_16550_DEVICE_ALTERA_16550_UART:
        alt_16550_write_divisor_helper(handle, 0); /* Disable UART */
 1001550:	e3a01000 	mov	r1, #0
 1001554:	e51b0010 	ldr	r0, [fp, #-16]
 1001558:	ebffff99 	bl	10013c4 <alt_16550_write_divisor_helper>
        alt_16550_int_disable_all(handle);         /* Disable interrupts */
 100155c:	e51b0010 	ldr	r0, [fp, #-16]
 1001560:	eb00017b 	bl	1001b54 <alt_16550_int_disable_all>
        alt_16550_fifo_disable(handle);            /* Disable FIFOs */
 1001564:	e51b0010 	ldr	r0, [fp, #-16]
 1001568:	eb0000bc 	bl	1001860 <alt_16550_fifo_disable>
        alt_write_word(ALT_UART_MCR_ADDR(handle->location), 0); /* 0 -> MCR (AFCE, LP, OUT2, OUT1, RTS, DTR) */
 100156c:	e51b3010 	ldr	r3, [fp, #-16]
 1001570:	e5933004 	ldr	r3, [r3, #4]
 1001574:	e2833010 	add	r3, r3, #16
 1001578:	e3a02000 	mov	r2, #0
 100157c:	e5832000 	str	r2, [r3]
        break;
 1001580:	ea000001 	b	100158c <alt_16550_reset_helper+0xa8>

    default:
        return ALT_E_ERROR;
 1001584:	e3e03000 	mvn	r3, #0
 1001588:	ea000028 	b	1001630 <alt_16550_reset_helper+0x14c>
    }

    /* If we are initializing (as opposed to just uninitializing) */
    if (enable_init)
 100158c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1001590:	e3530000 	cmp	r3, #0
 1001594:	0a000024 	beq	100162c <alt_16550_reset_helper+0x148>
    {
        ALT_STATUS_CODE status;
        uint32_t divisor;

        /* Set bit IER::PTIME (Interrupt Enable Register :: Programmable THRE Mode Enable) */
        alt_setbits_word(ALT_UART_IER_DLH_ADDR(handle->location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
 1001598:	e51b3010 	ldr	r3, [fp, #-16]
 100159c:	e5933004 	ldr	r3, [r3, #4]
 10015a0:	e2833004 	add	r3, r3, #4
 10015a4:	e5932000 	ldr	r2, [r3]
 10015a8:	e51b3010 	ldr	r3, [fp, #-16]
 10015ac:	e5933004 	ldr	r3, [r3, #4]
 10015b0:	e2833004 	add	r3, r3, #4
 10015b4:	e3822080 	orr	r2, r2, #128	; 0x80
 10015b8:	e5832000 	str	r2, [r3]

        /* Set the line configuration to use 8-N-1. */
        status = alt_16550_line_config_set(handle, ALT_16550_DATABITS_8,
 10015bc:	e3a03000 	mov	r3, #0
 10015c0:	e3a02000 	mov	r2, #0
 10015c4:	e3a01003 	mov	r1, #3
 10015c8:	e51b0010 	ldr	r0, [fp, #-16]
 10015cc:	eb00016b 	bl	1001b80 <alt_16550_line_config_set>
 10015d0:	e50b0008 	str	r0, [fp, #-8]
                                                   ALT_16550_PARITY_DISABLE,
                                                   ALT_16550_STOPBITS_1);
        if (status != ALT_E_SUCCESS)
 10015d4:	e51b3008 	ldr	r3, [fp, #-8]
 10015d8:	e3530000 	cmp	r3, #0
 10015dc:	0a000001 	beq	10015e8 <alt_16550_reset_helper+0x104>
        {
            return status;
 10015e0:	e51b3008 	ldr	r3, [fp, #-8]
 10015e4:	ea000011 	b	1001630 <alt_16550_reset_helper+0x14c>
        }

        divisor = ALT_16550_HANDLE_DATA_DIVISOR_VALUE_GET(handle->data);
 10015e8:	e51b3010 	ldr	r3, [fp, #-16]
 10015ec:	e593300c 	ldr	r3, [r3, #12]
 10015f0:	e6ff3073 	uxth	r3, r3
 10015f4:	e50b300c 	str	r3, [fp, #-12]
        if (divisor == 0)
 10015f8:	e51b300c 	ldr	r3, [fp, #-12]
 10015fc:	e3530000 	cmp	r3, #0
 1001600:	1a000009 	bne	100162c <alt_16550_reset_helper+0x148>
        {
            status = alt_16550_baudrate_set(handle, DEFAULT_BAUD);
 1001604:	e3a01cc2 	mov	r1, #49664	; 0xc200
 1001608:	e3401001 	movt	r1, #1
 100160c:	e51b0010 	ldr	r0, [fp, #-16]
 1001610:	eb0000f3 	bl	10019e4 <alt_16550_baudrate_set>
 1001614:	e50b0008 	str	r0, [fp, #-8]
            if (status != ALT_E_SUCCESS)
 1001618:	e51b3008 	ldr	r3, [fp, #-8]
 100161c:	e3530000 	cmp	r3, #0
 1001620:	0a000001 	beq	100162c <alt_16550_reset_helper+0x148>
            {
                return status;
 1001624:	e51b3008 	ldr	r3, [fp, #-8]
 1001628:	ea000000 	b	1001630 <alt_16550_reset_helper+0x14c>
            }
        }
    }

    return ALT_E_SUCCESS;
 100162c:	e3a03000 	mov	r3, #0
}
 1001630:	e1a00003 	mov	r0, r3
 1001634:	e24bd004 	sub	sp, fp, #4
 1001638:	e8bd8800 	pop	{fp, pc}

0100163c <alt_16550_init>:

ALT_STATUS_CODE alt_16550_init(ALT_16550_DEVICE_t device,
                               void * location,
                               alt_freq_t clock_freq,
                               ALT_16550_HANDLE_t * handle)
{
 100163c:	e92d4800 	push	{fp, lr}
 1001640:	e28db004 	add	fp, sp, #4
 1001644:	e24dd018 	sub	sp, sp, #24
 1001648:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 100164c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 1001650:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
 1001654:	e1a03000 	mov	r3, r0
 1001658:	e14b30be 	strh	r3, [fp, #-14]
    handle->device = device;
 100165c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001660:	e15b20be 	ldrh	r2, [fp, #-14]
 1001664:	e1c320b0 	strh	r2, [r3]
    handle->data   = 0;
 1001668:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100166c:	e3a02000 	mov	r2, #0
 1001670:	e583200c 	str	r2, [r3, #12]
    handle->fcr    = 0;
 1001674:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001678:	e3a02000 	mov	r2, #0
 100167c:	e5832010 	str	r2, [r3, #16]

    switch (device)
 1001680:	e15b30be 	ldrh	r3, [fp, #-14]
 1001684:	e3530001 	cmp	r3, #1
 1001688:	ca000002 	bgt	1001698 <alt_16550_init+0x5c>
 100168c:	e3530000 	cmp	r3, #0
 1001690:	aa000003 	bge	10016a4 <alt_16550_init+0x68>
 1001694:	ea000036 	b	1001774 <alt_16550_init+0x138>
 1001698:	e3530c01 	cmp	r3, #256	; 0x100
 100169c:	0a00002d 	beq	1001758 <alt_16550_init+0x11c>
 10016a0:	ea000033 	b	1001774 <alt_16550_init+0x138>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
        /* The ALT_CLK_L4_SP is required for all SoCFPGA UARTs. Check that it's enabled. */
        if (alt_clk_is_enabled(ALT_CLK_L4_SP) != ALT_E_TRUE)
 10016a4:	e3a0000c 	mov	r0, #12
 10016a8:	ebfffea2 	bl	1001138 <alt_clk_is_enabled>
 10016ac:	e1a03000 	mov	r3, r0
 10016b0:	e3530001 	cmp	r3, #1
 10016b4:	0a000001 	beq	10016c0 <alt_16550_init+0x84>
        {
            return ALT_E_BAD_CLK;
 10016b8:	e3e0300d 	mvn	r3, #13
 10016bc:	ea000032 	b	100178c <alt_16550_init+0x150>
            ALT_STATUS_CODE status;
            #ifdef soc_cv_av
                uint32_t ucr;
            #endif

            status = alt_clk_freq_get(ALT_CLK_L4_SP, &handle->clock_freq);
 10016c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10016c4:	e2833008 	add	r3, r3, #8
 10016c8:	e1a01003 	mov	r1, r3
 10016cc:	e3a0000c 	mov	r0, #12
 10016d0:	ebfffdf7 	bl	1000eb4 <alt_clk_freq_get>
 10016d4:	e50b0008 	str	r0, [fp, #-8]
            if (status != ALT_E_SUCCESS)
 10016d8:	e51b3008 	ldr	r3, [fp, #-8]
 10016dc:	e3530000 	cmp	r3, #0
 10016e0:	0a000001 	beq	10016ec <alt_16550_init+0xb0>
            {
                return status;
 10016e4:	e51b3008 	ldr	r3, [fp, #-8]
 10016e8:	ea000027 	b	100178c <alt_16550_init+0x150>
            }

            if (device == ALT_16550_DEVICE_SOCFPGA_UART0)
 10016ec:	e15b30be 	ldrh	r3, [fp, #-14]
 10016f0:	e3530000 	cmp	r3, #0
 10016f4:	1a00000b 	bne	1001728 <alt_16550_init+0xec>
            {
                handle->location = ALT_UART0_ADDR;
 10016f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 10016fc:	e3a03a02 	mov	r3, #8192	; 0x2000
 1001700:	e34f3fc0 	movt	r3, #65472	; 0xffc0
 1001704:	e5823004 	str	r3, [r2, #4]

                /* Bring UART0 out of reset. */
#ifdef soc_cv_av
                alt_clrbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_UART0_SET_MSK);
#else
                alt_clrbits_word(ALT_RSTMGR_PER1MODRST_ADDR, ALT_RSTMGR_PER1MODRST_UART0_SET_MSK);
 1001708:	e3053028 	movw	r3, #20520	; 0x5028
 100170c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1001710:	e5932000 	ldr	r2, [r3]
 1001714:	e3053028 	movw	r3, #20520	; 0x5028
 1001718:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100171c:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 1001720:	e5832000 	str	r2, [r3]
            {
                return ALT_E_ERROR;
            }
#endif
        }
        break;
 1001724:	ea000014 	b	100177c <alt_16550_init+0x140>
                handle->location = ALT_UART1_ADDR;
 1001728:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 100172c:	e3a03c21 	mov	r3, #8448	; 0x2100
 1001730:	e34f3fc0 	movt	r3, #65472	; 0xffc0
 1001734:	e5823004 	str	r3, [r2, #4]
                alt_clrbits_word(ALT_RSTMGR_PER1MODRST_ADDR, ALT_RSTMGR_PER1MODRST_UART1_SET_MSK);
 1001738:	e3053028 	movw	r3, #20520	; 0x5028
 100173c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 1001740:	e5932000 	ldr	r2, [r3]
 1001744:	e3053028 	movw	r3, #20520	; 0x5028
 1001748:	e34f3fd0 	movt	r3, #65488	; 0xffd0
 100174c:	e3c22802 	bic	r2, r2, #131072	; 0x20000
 1001750:	e5832000 	str	r2, [r3]
        break;
 1001754:	ea000008 	b	100177c <alt_16550_init+0x140>
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        handle->location   = location;
 1001758:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100175c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1001760:	e5832004 	str	r2, [r3, #4]
        handle->clock_freq = clock_freq;
 1001764:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001768:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 100176c:	e5832008 	str	r2, [r3, #8]
        break;
 1001770:	ea000001 	b	100177c <alt_16550_init+0x140>
    default:
        return ALT_E_BAD_ARG;
 1001774:	e3e03008 	mvn	r3, #8
 1001778:	ea000003 	b	100178c <alt_16550_init+0x150>
    }

    return alt_16550_reset_helper(handle, true);
 100177c:	e3a01001 	mov	r1, #1
 1001780:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 1001784:	ebffff56 	bl	10014e4 <alt_16550_reset_helper>
 1001788:	e1a03000 	mov	r3, r0
}
 100178c:	e1a00003 	mov	r0, r3
 1001790:	e24bd004 	sub	sp, fp, #4
 1001794:	e8bd8800 	pop	{fp, pc}

01001798 <alt_16550_enable>:
{
    return alt_16550_reset_helper(handle, true);
}

ALT_STATUS_CODE alt_16550_enable(ALT_16550_HANDLE_t * handle)
{
 1001798:	e92d4800 	push	{fp, lr}
 100179c:	e28db004 	add	fp, sp, #4
 10017a0:	e24dd008 	sub	sp, sp, #8
 10017a4:	e50b0008 	str	r0, [fp, #-8]
    /* Enable Terminal*/
  alt_16550_modem_enable_dtr(handle);
 10017a8:	e51b0008 	ldr	r0, [fp, #-8]
 10017ac:	eb000173 	bl	1001d80 <alt_16550_modem_enable_dtr>
  alt_16550_modem_enable_rts(handle);
 10017b0:	e51b0008 	ldr	r0, [fp, #-8]
 10017b4:	eb000166 	bl	1001d54 <alt_16550_modem_enable_rts>

    /* Write the divisor cached in the handle data to the divisor registers. */
    /* This will effectively enable the UART. */
    return alt_16550_write_divisor_helper(handle,
                                          ALT_16550_HANDLE_DATA_DIVISOR_VALUE_GET(handle->data));
 10017b8:	e51b3008 	ldr	r3, [fp, #-8]
 10017bc:	e593300c 	ldr	r3, [r3, #12]
    return alt_16550_write_divisor_helper(handle,
 10017c0:	e6ff3073 	uxth	r3, r3
 10017c4:	e1a01003 	mov	r1, r3
 10017c8:	e51b0008 	ldr	r0, [fp, #-8]
 10017cc:	ebfffefc 	bl	10013c4 <alt_16550_write_divisor_helper>
 10017d0:	e1a03000 	mov	r3, r0

}
 10017d4:	e1a00003 	mov	r0, r3
 10017d8:	e24bd004 	sub	sp, fp, #4
 10017dc:	e8bd8800 	pop	{fp, pc}

010017e0 <alt_16550_fifo_enable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_16550_fifo_enable(ALT_16550_HANDLE_t * handle)
{
 10017e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10017e4:	e28db000 	add	fp, sp, #0
 10017e8:	e24dd00c 	sub	sp, sp, #12
 10017ec:	e50b0008 	str	r0, [fp, #-8]
    switch (handle->device)
 10017f0:	e51b3008 	ldr	r3, [fp, #-8]
 10017f4:	e1d330b0 	ldrh	r3, [r3]
 10017f8:	e3530001 	cmp	r3, #1
 10017fc:	ca000002 	bgt	100180c <alt_16550_fifo_enable+0x2c>
 1001800:	e3530000 	cmp	r3, #0
 1001804:	aa000002 	bge	1001814 <alt_16550_fifo_enable+0x34>
 1001808:	ea00000f 	b	100184c <alt_16550_fifo_enable+0x6c>
 100180c:	e3530c01 	cmp	r3, #256	; 0x100
 1001810:	1a00000d 	bne	100184c <alt_16550_fifo_enable+0x6c>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Set FCR::FIFOE (FIFO Control Register :: FIFO Enable) bit. */
        handle->fcr |= ALT_UART_FCR_FIFOE_SET_MSK | ALT_UART_FCR_RFIFOR_SET_MSK | ALT_UART_FCR_XFIFOR_SET_MSK;
 1001814:	e51b3008 	ldr	r3, [fp, #-8]
 1001818:	e5933010 	ldr	r3, [r3, #16]
 100181c:	e3832007 	orr	r2, r3, #7
 1001820:	e51b3008 	ldr	r3, [fp, #-8]
 1001824:	e5832010 	str	r2, [r3, #16]
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
 1001828:	e51b3008 	ldr	r3, [fp, #-8]
 100182c:	e5933004 	ldr	r3, [r3, #4]
 1001830:	e2833008 	add	r3, r3, #8
 1001834:	e51b2008 	ldr	r2, [fp, #-8]
 1001838:	e5922010 	ldr	r2, [r2, #16]
 100183c:	e5832000 	str	r2, [r3]
        break;
 1001840:	e320f000 	nop	{0}
        return ALT_E_ERROR;
    }

    /* No need to reset / clear the FIFOs. This is done automatically when */
    /* FCR::FIFOE is changed. */
    return ALT_E_SUCCESS;
 1001844:	e3a03000 	mov	r3, #0
 1001848:	ea000000 	b	1001850 <alt_16550_fifo_enable+0x70>
        return ALT_E_ERROR;
 100184c:	e3e03000 	mvn	r3, #0
}
 1001850:	e1a00003 	mov	r0, r3
 1001854:	e28bd000 	add	sp, fp, #0
 1001858:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100185c:	e12fff1e 	bx	lr

01001860 <alt_16550_fifo_disable>:

ALT_STATUS_CODE alt_16550_fifo_disable(ALT_16550_HANDLE_t * handle)
{
 1001860:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001864:	e28db000 	add	fp, sp, #0
 1001868:	e24dd00c 	sub	sp, sp, #12
 100186c:	e50b0008 	str	r0, [fp, #-8]
    switch (handle->device)
 1001870:	e51b3008 	ldr	r3, [fp, #-8]
 1001874:	e1d330b0 	ldrh	r3, [r3]
 1001878:	e3530001 	cmp	r3, #1
 100187c:	ca000002 	bgt	100188c <alt_16550_fifo_disable+0x2c>
 1001880:	e3530000 	cmp	r3, #0
 1001884:	aa000002 	bge	1001894 <alt_16550_fifo_disable+0x34>
 1001888:	ea00000f 	b	10018cc <alt_16550_fifo_disable+0x6c>
 100188c:	e3530c01 	cmp	r3, #256	; 0x100
 1001890:	1a00000d 	bne	10018cc <alt_16550_fifo_disable+0x6c>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Clear FCR::FIFOE (FIFO Control Register :: FIFO Enable) bit. */
        handle->fcr &= ~ALT_UART_FCR_FIFOE_SET_MSK;
 1001894:	e51b3008 	ldr	r3, [fp, #-8]
 1001898:	e5933010 	ldr	r3, [r3, #16]
 100189c:	e3c32001 	bic	r2, r3, #1
 10018a0:	e51b3008 	ldr	r3, [fp, #-8]
 10018a4:	e5832010 	str	r2, [r3, #16]
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
 10018a8:	e51b3008 	ldr	r3, [fp, #-8]
 10018ac:	e5933004 	ldr	r3, [r3, #4]
 10018b0:	e2833008 	add	r3, r3, #8
 10018b4:	e51b2008 	ldr	r2, [fp, #-8]
 10018b8:	e5922010 	ldr	r2, [r2, #16]
 10018bc:	e5832000 	str	r2, [r3]
        break;
 10018c0:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 10018c4:	e3a03000 	mov	r3, #0
 10018c8:	ea000000 	b	10018d0 <alt_16550_fifo_disable+0x70>
        return ALT_E_ERROR;
 10018cc:	e3e03000 	mvn	r3, #0
}
 10018d0:	e1a00003 	mov	r0, r3
 10018d4:	e28bd000 	add	sp, fp, #0
 10018d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10018dc:	e12fff1e 	bx	lr

010018e0 <alt_16550_fifo_write_safe>:

ALT_STATUS_CODE alt_16550_fifo_write_safe(ALT_16550_HANDLE_t * handle,
                                     const char * buffer,
                                     size_t count,
                                     bool safe)
{
 10018e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10018e4:	e28db000 	add	fp, sp, #0
 10018e8:	e24dd01c 	sub	sp, sp, #28
 10018ec:	e50b0010 	str	r0, [fp, #-16]
 10018f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 10018f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 10018f8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    size_t i;
    /* Verify that the UART is enabled */
    if (!(handle->data & ALT_16550_HANDLE_DATA_UART_ENABLED_MSK))
 10018fc:	e51b3010 	ldr	r3, [fp, #-16]
 1001900:	e593300c 	ldr	r3, [r3, #12]
 1001904:	e3530000 	cmp	r3, #0
 1001908:	ba000001 	blt	1001914 <alt_16550_fifo_write_safe+0x34>
    {
        return ALT_E_ERROR;
 100190c:	e3e03000 	mvn	r3, #0
 1001910:	ea00002f 	b	10019d4 <alt_16550_fifo_write_safe+0xf4>
    }

    /* Verify that the FIFO is enabled */
    if (!(handle->fcr & ALT_UART_FCR_FIFOE_SET_MSK))
 1001914:	e51b3010 	ldr	r3, [fp, #-16]
 1001918:	e5933010 	ldr	r3, [r3, #16]
 100191c:	e2033001 	and	r3, r3, #1
 1001920:	e3530000 	cmp	r3, #0
 1001924:	1a000001 	bne	1001930 <alt_16550_fifo_write_safe+0x50>
    {
        return ALT_E_ERROR;
 1001928:	e3e03000 	mvn	r3, #0
 100192c:	ea000028 	b	10019d4 <alt_16550_fifo_write_safe+0xf4>
    }

    switch (handle->device)
 1001930:	e51b3010 	ldr	r3, [fp, #-16]
 1001934:	e1d330b0 	ldrh	r3, [r3]
 1001938:	e3530001 	cmp	r3, #1
 100193c:	ca000002 	bgt	100194c <alt_16550_fifo_write_safe+0x6c>
 1001940:	e3530000 	cmp	r3, #0
 1001944:	aa000002 	bge	1001954 <alt_16550_fifo_write_safe+0x74>
 1001948:	ea00001e 	b	10019c8 <alt_16550_fifo_write_safe+0xe8>
 100194c:	e3530c01 	cmp	r3, #256	; 0x100
 1001950:	1a00001c 	bne	10019c8 <alt_16550_fifo_write_safe+0xe8>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Write the buffer into the THR (Transmit Holding Register) */
        for (i = 0; i < count; ++i)
 1001954:	e3a03000 	mov	r3, #0
 1001958:	e50b3008 	str	r3, [fp, #-8]
 100195c:	ea000014 	b	10019b4 <alt_16550_fifo_write_safe+0xd4>
        {
            if (safe)
 1001960:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 1001964:	e3530000 	cmp	r3, #0
 1001968:	0a000007 	beq	100198c <alt_16550_fifo_write_safe+0xac>
                while (ALT_UART_LSR_THRE_GET(alt_read_word(ALT_UART_LSR_ADDR(handle->location))))
 100196c:	e320f000 	nop	{0}
 1001970:	e51b3010 	ldr	r3, [fp, #-16]
 1001974:	e5933004 	ldr	r3, [r3, #4]
 1001978:	e2833014 	add	r3, r3, #20
 100197c:	e5933000 	ldr	r3, [r3]
 1001980:	e2033020 	and	r3, r3, #32
 1001984:	e3530000 	cmp	r3, #0
 1001988:	1afffff8 	bne	1001970 <alt_16550_fifo_write_safe+0x90>
                    ; /* Spin waiting for space */
            alt_write_word(ALT_UART_RBR_THR_DLL_ADDR(handle->location), buffer[i]);
 100198c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1001990:	e51b3008 	ldr	r3, [fp, #-8]
 1001994:	e0823003 	add	r3, r2, r3
 1001998:	e5d32000 	ldrb	r2, [r3]
 100199c:	e51b3010 	ldr	r3, [fp, #-16]
 10019a0:	e5933004 	ldr	r3, [r3, #4]
 10019a4:	e5832000 	str	r2, [r3]
        for (i = 0; i < count; ++i)
 10019a8:	e51b3008 	ldr	r3, [fp, #-8]
 10019ac:	e2833001 	add	r3, r3, #1
 10019b0:	e50b3008 	str	r3, [fp, #-8]
 10019b4:	e51b2008 	ldr	r2, [fp, #-8]
 10019b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10019bc:	e1520003 	cmp	r2, r3
 10019c0:	3affffe6 	bcc	1001960 <alt_16550_fifo_write_safe+0x80>
        }
        break;
 10019c4:	ea000001 	b	10019d0 <alt_16550_fifo_write_safe+0xf0>
    default:
        return ALT_E_ERROR;
 10019c8:	e3e03000 	mvn	r3, #0
 10019cc:	ea000000 	b	10019d4 <alt_16550_fifo_write_safe+0xf4>
    }

    return ALT_E_SUCCESS;
 10019d0:	e3a03000 	mov	r3, #0
}
 10019d4:	e1a00003 	mov	r0, r3
 10019d8:	e28bd000 	add	sp, fp, #0
 10019dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10019e0:	e12fff1e 	bx	lr

010019e4 <alt_16550_baudrate_set>:
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_16550_baudrate_set(ALT_16550_HANDLE_t * handle,
                                       uint32_t baudrate)
{
 10019e4:	e92d4800 	push	{fp, lr}
 10019e8:	e28db004 	add	fp, sp, #4
 10019ec:	e24dd010 	sub	sp, sp, #16
 10019f0:	e50b0010 	str	r0, [fp, #-16]
 10019f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t divisor;
    if (baudrate == 0)
 10019f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10019fc:	e3530000 	cmp	r3, #0
 1001a00:	1a000001 	bne	1001a0c <alt_16550_baudrate_set+0x28>
    {
        return ALT_E_ARG_RANGE;
 1001a04:	e3e03007 	mvn	r3, #7
 1001a08:	ea00000f 	b	1001a4c <alt_16550_baudrate_set+0x68>
    // => baudrate * 16 * divisor = clock
    // => divisor = clock / (baudrate * 16)
    // => divisor = (clock / 16) / baudrate */

    /* Add half of the denominator to address rounding errors. */
    divisor = ((handle->clock_freq + (8 * baudrate)) / (16 * baudrate));
 1001a0c:	e51b3010 	ldr	r3, [fp, #-16]
 1001a10:	e5932008 	ldr	r2, [r3, #8]
 1001a14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001a18:	e1a03183 	lsl	r3, r3, #3
 1001a1c:	e0822003 	add	r2, r2, r3
 1001a20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001a24:	e1a03203 	lsl	r3, r3, #4
 1001a28:	e1a01003 	mov	r1, r3
 1001a2c:	e1a00002 	mov	r0, r2
 1001a30:	eb000d69 	bl	1004fdc <__udivsi3>
 1001a34:	e1a03000 	mov	r3, r0
 1001a38:	e50b3008 	str	r3, [fp, #-8]

    /* Check for divisor range is in alt_16550_divisor_set(). */
    return alt_16550_divisor_set(handle, divisor);
 1001a3c:	e51b1008 	ldr	r1, [fp, #-8]
 1001a40:	e51b0010 	ldr	r0, [fp, #-16]
 1001a44:	eb000003 	bl	1001a58 <alt_16550_divisor_set>
 1001a48:	e1a03000 	mov	r3, r0
}
 1001a4c:	e1a00003 	mov	r0, r3
 1001a50:	e24bd004 	sub	sp, fp, #4
 1001a54:	e8bd8800 	pop	{fp, pc}

01001a58 <alt_16550_divisor_set>:
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_16550_divisor_set(ALT_16550_HANDLE_t * handle,
                                      uint32_t divisor)
{
 1001a58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001a5c:	e28db000 	add	fp, sp, #0
 1001a60:	e24dd00c 	sub	sp, sp, #12
 1001a64:	e50b0008 	str	r0, [fp, #-8]
 1001a68:	e50b100c 	str	r1, [fp, #-12]
    /* Verify divisor value is in range. */
    if ((divisor > 0xffff) || (divisor == 0))
 1001a6c:	e51b300c 	ldr	r3, [fp, #-12]
 1001a70:	e3530801 	cmp	r3, #65536	; 0x10000
 1001a74:	2a000002 	bcs	1001a84 <alt_16550_divisor_set+0x2c>
 1001a78:	e51b300c 	ldr	r3, [fp, #-12]
 1001a7c:	e3530000 	cmp	r3, #0
 1001a80:	1a000001 	bne	1001a8c <alt_16550_divisor_set+0x34>
    {
        return ALT_E_ARG_RANGE;
 1001a84:	e3e03007 	mvn	r3, #7
 1001a88:	ea00000c 	b	1001ac0 <alt_16550_divisor_set+0x68>
    }

    /* Set the divisor portion of the handle data. */
    handle->data &= ~(0xffff);
 1001a8c:	e51b3008 	ldr	r3, [fp, #-8]
 1001a90:	e593300c 	ldr	r3, [r3, #12]
 1001a94:	e1a03823 	lsr	r3, r3, #16
 1001a98:	e1a03803 	lsl	r3, r3, #16
 1001a9c:	e51b2008 	ldr	r2, [fp, #-8]
 1001aa0:	e582300c 	str	r3, [r2, #12]
    handle->data |= divisor;
 1001aa4:	e51b3008 	ldr	r3, [fp, #-8]
 1001aa8:	e593200c 	ldr	r2, [r3, #12]
 1001aac:	e51b300c 	ldr	r3, [fp, #-12]
 1001ab0:	e1822003 	orr	r2, r2, r3
 1001ab4:	e51b3008 	ldr	r3, [fp, #-8]
 1001ab8:	e583200c 	str	r2, [r3, #12]

    /* Even if the UART is enabled, don't do anything. It is documented that */
    /* the change will take effect when the UART move to the enabled state. */

    return ALT_E_SUCCESS;
 1001abc:	e3a03000 	mov	r3, #0
}
 1001ac0:	e1a00003 	mov	r0, r3
 1001ac4:	e28bd000 	add	sp, fp, #0
 1001ac8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001acc:	e12fff1e 	bx	lr

01001ad0 <alt_16550_ier_mask_clr_helper>:

    return ALT_E_SUCCESS;
}

static ALT_STATUS_CODE alt_16550_ier_mask_clr_helper(ALT_16550_HANDLE_t * handle, uint32_t setmask)
{
 1001ad0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001ad4:	e28db000 	add	fp, sp, #0
 1001ad8:	e24dd00c 	sub	sp, sp, #12
 1001adc:	e50b0008 	str	r0, [fp, #-8]
 1001ae0:	e50b100c 	str	r1, [fp, #-12]
    switch (handle->device)
 1001ae4:	e51b3008 	ldr	r3, [fp, #-8]
 1001ae8:	e1d330b0 	ldrh	r3, [r3]
 1001aec:	e3530001 	cmp	r3, #1
 1001af0:	ca000002 	bgt	1001b00 <alt_16550_ier_mask_clr_helper+0x30>
 1001af4:	e3530000 	cmp	r3, #0
 1001af8:	aa000002 	bge	1001b08 <alt_16550_ier_mask_clr_helper+0x38>
 1001afc:	ea00000f 	b	1001b40 <alt_16550_ier_mask_clr_helper+0x70>
 1001b00:	e3530c01 	cmp	r3, #256	; 0x100
 1001b04:	1a00000d 	bne	1001b40 <alt_16550_ier_mask_clr_helper+0x70>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Clear bit in IER (Interrupt Enable Register) */
        alt_clrbits_word(ALT_UART_IER_DLH_ADDR(handle->location), setmask);
 1001b08:	e51b3008 	ldr	r3, [fp, #-8]
 1001b0c:	e5933004 	ldr	r3, [r3, #4]
 1001b10:	e2833004 	add	r3, r3, #4
 1001b14:	e5931000 	ldr	r1, [r3]
 1001b18:	e51b300c 	ldr	r3, [fp, #-12]
 1001b1c:	e1e02003 	mvn	r2, r3
 1001b20:	e51b3008 	ldr	r3, [fp, #-8]
 1001b24:	e5933004 	ldr	r3, [r3, #4]
 1001b28:	e2833004 	add	r3, r3, #4
 1001b2c:	e0022001 	and	r2, r2, r1
 1001b30:	e5832000 	str	r2, [r3]
        break;
 1001b34:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 1001b38:	e3a03000 	mov	r3, #0
 1001b3c:	ea000000 	b	1001b44 <alt_16550_ier_mask_clr_helper+0x74>
        return ALT_E_ERROR;
 1001b40:	e3e03000 	mvn	r3, #0
}
 1001b44:	e1a00003 	mov	r0, r3
 1001b48:	e28bd000 	add	sp, fp, #0
 1001b4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001b50:	e12fff1e 	bx	lr

01001b54 <alt_16550_int_disable_all>:
    /* Clear the IER::EDSSI (Interrupt Enable Register :: Enable Modem Status Interrupt) bit. */
    return alt_16550_ier_mask_clr_helper(handle, ALT_UART_IER_DLH_EDSSI_DHL3_SET_MSK);
}

ALT_STATUS_CODE alt_16550_int_disable_all(ALT_16550_HANDLE_t * handle)
{
 1001b54:	e92d4800 	push	{fp, lr}
 1001b58:	e28db004 	add	fp, sp, #4
 1001b5c:	e24dd008 	sub	sp, sp, #8
 1001b60:	e50b0008 	str	r0, [fp, #-8]
    /* Clear the IER::(ERBFI | ETBEI | ELSI | EDSSI)
    //   (Interrupt Enable Register :: (Enable Receive Buffer Full Interrupt   |
    //                                  Enable Transmit Buffer Empty Interrupt |
    //                                  Enable Line Status Interrupt           |
    //                                  Enable Modem Status Interrupt)) bits   */
    return alt_16550_ier_mask_clr_helper(handle, ALT_UART_IER_DLH_ERBFI_DLH0_SET_MSK |
 1001b64:	e3a0100f 	mov	r1, #15
 1001b68:	e51b0008 	ldr	r0, [fp, #-8]
 1001b6c:	ebffffd7 	bl	1001ad0 <alt_16550_ier_mask_clr_helper>
 1001b70:	e1a03000 	mov	r3, r0
                                                 ALT_UART_IER_DLH_ETBEI_DLH1_SET_MSK |
                                                 ALT_UART_IER_DLH_ELSI_DHL2_SET_MSK  |
                                                 ALT_UART_IER_DLH_EDSSI_DHL3_SET_MSK);
}
 1001b74:	e1a00003 	mov	r0, r3
 1001b78:	e24bd004 	sub	sp, fp, #4
 1001b7c:	e8bd8800 	pop	{fp, pc}

01001b80 <alt_16550_line_config_set>:

ALT_STATUS_CODE alt_16550_line_config_set(ALT_16550_HANDLE_t * handle,
                                          ALT_16550_DATABITS_t databits,
                                          ALT_16550_PARITY_t parity,
                                          ALT_16550_STOPBITS_t stopbits)
{
 1001b80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001b84:	e28db000 	add	fp, sp, #0
 1001b88:	e24dd014 	sub	sp, sp, #20
 1001b8c:	e50b0010 	str	r0, [fp, #-16]
 1001b90:	e1a00001 	mov	r0, r1
 1001b94:	e1a01002 	mov	r1, r2
 1001b98:	e1a02003 	mov	r2, r3
 1001b9c:	e1a03000 	mov	r3, r0
 1001ba0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 1001ba4:	e1a03001 	mov	r3, r1
 1001ba8:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
 1001bac:	e1a03002 	mov	r3, r2
 1001bb0:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    /* LCR (Line Control Register) cache. */
    uint32_t lcr = 0;
 1001bb4:	e3a03000 	mov	r3, #0
 1001bb8:	e50b3008 	str	r3, [fp, #-8]

    /* Validate the databits parameter. */
    switch (databits)
 1001bbc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1001bc0:	e3530003 	cmp	r3, #3
 1001bc4:	9a000001 	bls	1001bd0 <alt_16550_line_config_set+0x50>
    case ALT_16550_DATABITS_6:
    case ALT_16550_DATABITS_7:
    case ALT_16550_DATABITS_8:
        break;
    default:
        return ALT_E_ERROR;
 1001bc8:	e3e03000 	mvn	r3, #0
 1001bcc:	ea00003c 	b	1001cc4 <alt_16550_line_config_set+0x144>
        break;
 1001bd0:	e320f000 	nop	{0}
    }

    /* Validate the parity parameter. */
    switch (parity)
 1001bd4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 1001bd8:	e3530002 	cmp	r3, #2
 1001bdc:	9a000001 	bls	1001be8 <alt_16550_line_config_set+0x68>
    case ALT_16550_PARITY_DISABLE:
    case ALT_16550_PARITY_ODD:
    case ALT_16550_PARITY_EVEN:
        break;
    default:
        return ALT_E_ERROR;
 1001be0:	e3e03000 	mvn	r3, #0
 1001be4:	ea000036 	b	1001cc4 <alt_16550_line_config_set+0x144>
        break;
 1001be8:	e320f000 	nop	{0}
    }

    /* Validate the stopbits parameter. */
    switch (stopbits)
 1001bec:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 1001bf0:	e3530001 	cmp	r3, #1
 1001bf4:	9a000001 	bls	1001c00 <alt_16550_line_config_set+0x80>
    {
    case ALT_16550_STOPBITS_1:
    case ALT_16550_STOPBITS_2:
        break;
    default:
        return ALT_E_ERROR;
 1001bf8:	e3e03000 	mvn	r3, #0
 1001bfc:	ea000030 	b	1001cc4 <alt_16550_line_config_set+0x144>
        break;
 1001c00:	e320f000 	nop	{0}
    }

    switch (handle->device)
 1001c04:	e51b3010 	ldr	r3, [fp, #-16]
 1001c08:	e1d330b0 	ldrh	r3, [r3]
 1001c0c:	e3530001 	cmp	r3, #1
 1001c10:	ca000002 	bgt	1001c20 <alt_16550_line_config_set+0xa0>
 1001c14:	e3530000 	cmp	r3, #0
 1001c18:	aa000002 	bge	1001c28 <alt_16550_line_config_set+0xa8>
 1001c1c:	ea000027 	b	1001cc0 <alt_16550_line_config_set+0x140>
 1001c20:	e3530c01 	cmp	r3, #256	; 0x100
 1001c24:	1a000025 	bne	1001cc0 <alt_16550_line_config_set+0x140>
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:

        /* Configure the number of databits */
        lcr |= ALT_UART_LCR_DLS_SET(databits);
 1001c28:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1001c2c:	e2033003 	and	r3, r3, #3
 1001c30:	e51b2008 	ldr	r2, [fp, #-8]
 1001c34:	e1823003 	orr	r3, r2, r3
 1001c38:	e50b3008 	str	r3, [fp, #-8]

        /* Configure the number of stopbits */
        lcr |= ALT_UART_LCR_STOP_SET(stopbits);
 1001c3c:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 1001c40:	e1a03103 	lsl	r3, r3, #2
 1001c44:	e2033004 	and	r3, r3, #4
 1001c48:	e51b2008 	ldr	r2, [fp, #-8]
 1001c4c:	e1823003 	orr	r3, r2, r3
 1001c50:	e50b3008 	str	r3, [fp, #-8]

        /* Configure the parity */
        if (parity != ALT_16550_PARITY_DISABLE)
 1001c54:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 1001c58:	e3530000 	cmp	r3, #0
 1001c5c:	0a000008 	beq	1001c84 <alt_16550_line_config_set+0x104>
        {
            /* Enable parity in LCR */
            lcr |= ALT_UART_LCR_PEN_SET_MSK;
 1001c60:	e51b3008 	ldr	r3, [fp, #-8]
 1001c64:	e3833008 	orr	r3, r3, #8
 1001c68:	e50b3008 	str	r3, [fp, #-8]

            if (parity == ALT_16550_PARITY_EVEN)
 1001c6c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 1001c70:	e3530002 	cmp	r3, #2
 1001c74:	1a000002 	bne	1001c84 <alt_16550_line_config_set+0x104>
            {
                /* Enable even parity in LCR; otherwise it's odd parity. */
                lcr |= ALT_UART_LCR_EPS_SET_MSK;
 1001c78:	e51b3008 	ldr	r3, [fp, #-8]
 1001c7c:	e3833010 	orr	r3, r3, #16
 1001c80:	e50b3008 	str	r3, [fp, #-8]
            }
        }

        /* Update LCR (Line Control Register) */
        alt_replbits_word(ALT_UART_LCR_ADDR(handle->location),
 1001c84:	e51b3010 	ldr	r3, [fp, #-16]
 1001c88:	e5933004 	ldr	r3, [r3, #4]
 1001c8c:	e283300c 	add	r3, r3, #12
 1001c90:	e5933000 	ldr	r3, [r3]
 1001c94:	e3c3101f 	bic	r1, r3, #31
 1001c98:	e51b3008 	ldr	r3, [fp, #-8]
 1001c9c:	e203201f 	and	r2, r3, #31
 1001ca0:	e51b3010 	ldr	r3, [fp, #-16]
 1001ca4:	e5933004 	ldr	r3, [r3, #4]
 1001ca8:	e283300c 	add	r3, r3, #12
 1001cac:	e1812002 	orr	r2, r1, r2
 1001cb0:	e5832000 	str	r2, [r3]
                        | ALT_UART_LCR_STOP_SET_MSK
                        | ALT_UART_LCR_PEN_SET_MSK
                        | ALT_UART_LCR_EPS_SET_MSK,
                        lcr);

        break;
 1001cb4:	e320f000 	nop	{0}

    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 1001cb8:	e3a03000 	mov	r3, #0
 1001cbc:	ea000000 	b	1001cc4 <alt_16550_line_config_set+0x144>
        return ALT_E_ERROR;
 1001cc0:	e3e03000 	mvn	r3, #0
}
 1001cc4:	e1a00003 	mov	r0, r3
 1001cc8:	e28bd000 	add	sp, fp, #0
 1001ccc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001cd0:	e12fff1e 	bx	lr

01001cd4 <alt_16550_mcr_mask_set_helper>:
    return ALT_E_SUCCESS;
}

static ALT_STATUS_CODE alt_16550_mcr_mask_set_helper(ALT_16550_HANDLE_t * handle,
                                                     uint32_t setmask)
{
 1001cd4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001cd8:	e28db000 	add	fp, sp, #0
 1001cdc:	e24dd00c 	sub	sp, sp, #12
 1001ce0:	e50b0008 	str	r0, [fp, #-8]
 1001ce4:	e50b100c 	str	r1, [fp, #-12]
    switch (handle->device)
 1001ce8:	e51b3008 	ldr	r3, [fp, #-8]
 1001cec:	e1d330b0 	ldrh	r3, [r3]
 1001cf0:	e3530001 	cmp	r3, #1
 1001cf4:	ca000002 	bgt	1001d04 <alt_16550_mcr_mask_set_helper+0x30>
 1001cf8:	e3530000 	cmp	r3, #0
 1001cfc:	aa000002 	bge	1001d0c <alt_16550_mcr_mask_set_helper+0x38>
 1001d00:	ea00000e 	b	1001d40 <alt_16550_mcr_mask_set_helper+0x6c>
 1001d04:	e3530c01 	cmp	r3, #256	; 0x100
 1001d08:	1a00000c 	bne	1001d40 <alt_16550_mcr_mask_set_helper+0x6c>
    {
    case ALT_16550_DEVICE_SOCFPGA_UART0:
    case ALT_16550_DEVICE_SOCFPGA_UART1:
    case ALT_16550_DEVICE_ALTERA_16550_UART:
        /* Set the bit in MCR (Modem Control Register). */
        alt_setbits_word(ALT_UART_MCR_ADDR(handle->location), setmask);
 1001d0c:	e51b3008 	ldr	r3, [fp, #-8]
 1001d10:	e5933004 	ldr	r3, [r3, #4]
 1001d14:	e2833010 	add	r3, r3, #16
 1001d18:	e5931000 	ldr	r1, [r3]
 1001d1c:	e51b3008 	ldr	r3, [fp, #-8]
 1001d20:	e5933004 	ldr	r3, [r3, #4]
 1001d24:	e2833010 	add	r3, r3, #16
 1001d28:	e51b200c 	ldr	r2, [fp, #-12]
 1001d2c:	e1812002 	orr	r2, r1, r2
 1001d30:	e5832000 	str	r2, [r3]
        break;
 1001d34:	e320f000 	nop	{0}
    default:
        return ALT_E_ERROR;
    }

    return ALT_E_SUCCESS;
 1001d38:	e3a03000 	mov	r3, #0
 1001d3c:	ea000000 	b	1001d44 <alt_16550_mcr_mask_set_helper+0x70>
        return ALT_E_ERROR;
 1001d40:	e3e03000 	mvn	r3, #0
}
 1001d44:	e1a00003 	mov	r0, r3
 1001d48:	e28bd000 	add	sp, fp, #0
 1001d4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001d50:	e12fff1e 	bx	lr

01001d54 <alt_16550_modem_enable_rts>:
    /* Clear MCR::Out2 (Modem Control Register :: Out2) bit. */
    return alt_16550_mcr_mask_clr_helper(handle, ALT_UART_MCR_OUT2_SET_MSK);
}

ALT_STATUS_CODE alt_16550_modem_enable_rts(ALT_16550_HANDLE_t * handle)
{
 1001d54:	e92d4800 	push	{fp, lr}
 1001d58:	e28db004 	add	fp, sp, #4
 1001d5c:	e24dd008 	sub	sp, sp, #8
 1001d60:	e50b0008 	str	r0, [fp, #-8]
    /* Set MCR::RTS (Modem Control Register :: Request To Send) bit. */
    return alt_16550_mcr_mask_set_helper(handle, ALT_UART_MCR_RTS_SET_MSK);
 1001d64:	e3a01002 	mov	r1, #2
 1001d68:	e51b0008 	ldr	r0, [fp, #-8]
 1001d6c:	ebffffd8 	bl	1001cd4 <alt_16550_mcr_mask_set_helper>
 1001d70:	e1a03000 	mov	r3, r0
}
 1001d74:	e1a00003 	mov	r0, r3
 1001d78:	e24bd004 	sub	sp, fp, #4
 1001d7c:	e8bd8800 	pop	{fp, pc}

01001d80 <alt_16550_modem_enable_dtr>:
    /* Clear MCR::RTS (Modem Control Register :: Request To Send) bit. */
    return alt_16550_mcr_mask_clr_helper(handle, ALT_UART_MCR_RTS_SET_MSK);
}

ALT_STATUS_CODE alt_16550_modem_enable_dtr(ALT_16550_HANDLE_t * handle)
{
 1001d80:	e92d4800 	push	{fp, lr}
 1001d84:	e28db004 	add	fp, sp, #4
 1001d88:	e24dd008 	sub	sp, sp, #8
 1001d8c:	e50b0008 	str	r0, [fp, #-8]
    /* Set MCR::DTR (Modem Control Register :: Data Terminal Ready) bit. */
    return alt_16550_mcr_mask_set_helper(handle, ALT_UART_MCR_DTR_SET_MSK);
 1001d90:	e3a01001 	mov	r1, #1
 1001d94:	e51b0008 	ldr	r0, [fp, #-8]
 1001d98:	ebffffcd 	bl	1001cd4 <alt_16550_mcr_mask_set_helper>
 1001d9c:	e1a03000 	mov	r3, r0
}
 1001da0:	e1a00003 	mov	r0, r3
 1001da4:	e24bd004 	sub	sp, fp, #4
 1001da8:	e8bd8800 	pop	{fp, pc}

01001dac <null_printf>:
#endif

extern FILE *term0;
extern FILE *term1;

static __inline int null_printf(__attribute__ ((unused))const char *format, ...){return 0;}
 1001dac:	e92d000f 	push	{r0, r1, r2, r3}
 1001db0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001db4:	e28db000 	add	fp, sp, #0
 1001db8:	e3a03000 	mov	r3, #0
 1001dbc:	e1a00003 	mov	r0, r3
 1001dc0:	e28bd000 	add	sp, fp, #0
 1001dc4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001dc8:	e28dd010 	add	sp, sp, #16
 1001dcc:	e12fff1e 	bx	lr

01001dd0 <alt_mmu_init>:
    __asm("MCR p15, 0, %0,       c2, c0, 1" : : "r" (ttbr1));
#endif
}

ALT_STATUS_CODE alt_mmu_init(void)
{
 1001dd0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001dd4:	e28db000 	add	fp, sp, #0
    return ALT_E_SUCCESS;
 1001dd8:	e3a03000 	mov	r3, #0
}
 1001ddc:	e1a00003 	mov	r0, r3
 1001de0:	e28bd000 	add	sp, fp, #0
 1001de4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001de8:	e12fff1e 	bx	lr

01001dec <alt_mmu_ttb1_init>:
{
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_ttb1_init(uint32_t* ttb1)
{
 1001dec:	e92d4800 	push	{fp, lr}
 1001df0:	e28db004 	add	fp, sp, #4
 1001df4:	e24dd018 	sub	sp, sp, #24
 1001df8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
 1001dfc:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
 1001e00:	e50b3010 	str	r3, [fp, #-16]
    return ttbcr;
 1001e04:	e51b3010 	ldr	r3, [fp, #-16]
    uint32_t ttbcr = ttbcr_get_helper();
 1001e08:	e50b3008 	str	r3, [fp, #-8]
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
 1001e0c:	e51b3008 	ldr	r3, [fp, #-8]
 1001e10:	e2033007 	and	r3, r3, #7
 1001e14:	e50b300c 	str	r3, [fp, #-12]

    /* Verify ttb1 buffer alignment. */
    if ((uintptr_t)ttb1 & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
 1001e18:	e51b300c 	ldr	r3, [fp, #-12]
 1001e1c:	e2833012 	add	r3, r3, #18
 1001e20:	e3a02001 	mov	r2, #1
 1001e24:	e1a03312 	lsl	r3, r2, r3
 1001e28:	e2432001 	sub	r2, r3, #1
 1001e2c:	e51b300c 	ldr	r3, [fp, #-12]
 1001e30:	e263300e 	rsb	r3, r3, #14
 1001e34:	e1a03312 	lsl	r3, r2, r3
 1001e38:	e1e03003 	mvn	r3, r3
 1001e3c:	e1a02003 	mov	r2, r3
 1001e40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001e44:	e0033002 	and	r3, r3, r2
 1001e48:	e3530000 	cmp	r3, #0
 1001e4c:	0a000001 	beq	1001e58 <alt_mmu_ttb1_init+0x6c>
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
 1001e50:	e3e03008 	mvn	r3, #8
 1001e54:	ea000004 	b	1001e6c <alt_mmu_ttb1_init+0x80>

    /* The TTB1 size really depends on TTBCR.N value and if it will be used for
     / TTBR0 or TTBR1. The documentation just states that it should be 16 KiB.
     / See ARMv7-A,R, section B3.5.4. */

    memset(ttb1, 0, ALT_MMU_TTB1_SIZE);
 1001e58:	e3a02901 	mov	r2, #16384	; 0x4000
 1001e5c:	e3a01000 	mov	r1, #0
 1001e60:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1001e64:	eb000b4f 	bl	1004ba8 <memset>

    return ALT_E_SUCCESS;
 1001e68:	e3a03000 	mov	r3, #0
}
 1001e6c:	e1a00003 	mov	r0, r3
 1001e70:	e24bd004 	sub	sp, fp, #4
 1001e74:	e8bd8800 	pop	{fp, pc}

01001e78 <alt_mmu_enable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_enable(void)
{
 1001e78:	e92d4800 	push	{fp, lr}
 1001e7c:	e28db004 	add	fp, sp, #4
 1001e80:	e24dd010 	sub	sp, sp, #16
    uint32_t sctlr;
    alt_mmu_tlb_invalidate();
 1001e84:	eb0000ac 	bl	100213c <alt_mmu_tlb_invalidate>
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
 1001e88:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
 1001e8c:	e50b3010 	str	r3, [fp, #-16]
    return sctlr;
 1001e90:	e51b3010 	ldr	r3, [fp, #-16]

    sctlr = sctlr_get_helper();
 1001e94:	e50b3008 	str	r3, [fp, #-8]
    sctlr |= ALT_CPU_SCTLR_M_SET_MSK;
 1001e98:	e51b3008 	ldr	r3, [fp, #-8]
 1001e9c:	e3833001 	orr	r3, r3, #1
 1001ea0:	e50b3008 	str	r3, [fp, #-8]
 1001ea4:	e51b3008 	ldr	r3, [fp, #-8]
 1001ea8:	e50b300c 	str	r3, [fp, #-12]
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
 1001eac:	e51b300c 	ldr	r3, [fp, #-12]
 1001eb0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 1001eb4:	e320f000 	nop	{0}
    sctlr_set_helper(sctlr);

    return ALT_E_SUCCESS;
 1001eb8:	e3a03000 	mov	r3, #0
}
 1001ebc:	e1a00003 	mov	r0, r3
 1001ec0:	e24bd004 	sub	sp, fp, #4
 1001ec4:	e8bd8800 	pop	{fp, pc}

01001ec8 <alt_mmu_TTBR0_set>:

    return (void *)(ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n) & ttbr0);
}

ALT_STATUS_CODE alt_mmu_TTBR0_set(const void* addr)
{
 1001ec8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001ecc:	e28db000 	add	fp, sp, #0
 1001ed0:	e24dd024 	sub	sp, sp, #36	; 0x24
 1001ed4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
 1001ed8:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
 1001edc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return ttbcr;
 1001ee0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    uint32_t ttbcr = ttbcr_get_helper();
 1001ee4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
 1001ee8:	e51b3008 	ldr	r3, [fp, #-8]
 1001eec:	e2033007 	and	r3, r3, #7
 1001ef0:	e50b300c 	str	r3, [fp, #-12]
    uint32_t ttbr0; 

    if ((uintptr_t)addr & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
 1001ef4:	e51b300c 	ldr	r3, [fp, #-12]
 1001ef8:	e2833012 	add	r3, r3, #18
 1001efc:	e3a02001 	mov	r2, #1
 1001f00:	e1a03312 	lsl	r3, r2, r3
 1001f04:	e2432001 	sub	r2, r3, #1
 1001f08:	e51b300c 	ldr	r3, [fp, #-12]
 1001f0c:	e263300e 	rsb	r3, r3, #14
 1001f10:	e1a03312 	lsl	r3, r2, r3
 1001f14:	e1e03003 	mvn	r3, r3
 1001f18:	e1a02003 	mov	r2, r3
 1001f1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001f20:	e0033002 	and	r3, r3, r2
 1001f24:	e3530000 	cmp	r3, #0
 1001f28:	0a000001 	beq	1001f34 <alt_mmu_TTBR0_set+0x6c>
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
 1001f2c:	e3e03008 	mvn	r3, #8
 1001f30:	ea000018 	b	1001f98 <alt_mmu_TTBR0_set+0xd0>
    }

    /* The Translation table must reside in Normal Memory, so pick the most
     / performant attributes. */
    ttbr0 =   ALT_CPU_TTBR0_RGN_WBA   /* Translation table is WBA for outer cacheability */
 1001f34:	e3a03048 	mov	r3, #72	; 0x48
 1001f38:	e50b3010 	str	r3, [fp, #-16]
              | ALT_CPU_TTBR0_IRGN_WBA; /* Translation table is WBA for inner cacheability */
    ttbr0 &= ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n);
 1001f3c:	e51b300c 	ldr	r3, [fp, #-12]
 1001f40:	e2833012 	add	r3, r3, #18
 1001f44:	e3a02001 	mov	r2, #1
 1001f48:	e1a03312 	lsl	r3, r2, r3
 1001f4c:	e2432001 	sub	r2, r3, #1
 1001f50:	e51b300c 	ldr	r3, [fp, #-12]
 1001f54:	e263300e 	rsb	r3, r3, #14
 1001f58:	e1a03312 	lsl	r3, r2, r3
 1001f5c:	e1e03003 	mvn	r3, r3
 1001f60:	e1a02003 	mov	r2, r3
 1001f64:	e51b3010 	ldr	r3, [fp, #-16]
 1001f68:	e0033002 	and	r3, r3, r2
 1001f6c:	e50b3010 	str	r3, [fp, #-16]
    ttbr0 |= (uint32_t)addr;
 1001f70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001f74:	e51b2010 	ldr	r2, [fp, #-16]
 1001f78:	e1823003 	orr	r3, r2, r3
 1001f7c:	e50b3010 	str	r3, [fp, #-16]
 1001f80:	e51b3010 	ldr	r3, [fp, #-16]
 1001f84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    __asm("MCR p15, 0, %0,       c2, c0, 0" : : "r" (ttbr0));
 1001f88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001f8c:	ee023f10 	mcr	15, 0, r3, cr2, cr0, {0}
}
 1001f90:	e320f000 	nop	{0}

    ttbr0_set_helper(ttbr0);

    return ALT_E_SUCCESS;
 1001f94:	e3a03000 	mov	r3, #0
}
 1001f98:	e1a00003 	mov	r0, r3
 1001f9c:	e28bd000 	add	sp, fp, #0
 1001fa0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001fa4:	e12fff1e 	bx	lr

01001fa8 <alt_mmu_TTBCR_set>:
}

ALT_STATUS_CODE alt_mmu_TTBCR_set(const bool enable_ttbr0_walk,
                                  const bool enable_ttbr1_walk,
                                  const uint32_t base_addr_width)
{
 1001fa8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001fac:	e28db000 	add	fp, sp, #0
 1001fb0:	e24dd014 	sub	sp, sp, #20
 1001fb4:	e1a03000 	mov	r3, r0
 1001fb8:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
 1001fbc:	e54b300d 	strb	r3, [fp, #-13]
 1001fc0:	e1a03001 	mov	r3, r1
 1001fc4:	e54b300e 	strb	r3, [fp, #-14]
    uint32_t ttbcr = 0;
 1001fc8:	e3a03000 	mov	r3, #0
 1001fcc:	e50b3008 	str	r3, [fp, #-8]

    if (!enable_ttbr0_walk)
 1001fd0:	e55b300d 	ldrb	r3, [fp, #-13]
 1001fd4:	e2233001 	eor	r3, r3, #1
 1001fd8:	e6ef3073 	uxtb	r3, r3
 1001fdc:	e3530000 	cmp	r3, #0
 1001fe0:	0a000002 	beq	1001ff0 <alt_mmu_TTBCR_set+0x48>
    {
        ttbcr |= ALT_CPU_TTBCR_PD0_SET_MSK;
 1001fe4:	e51b3008 	ldr	r3, [fp, #-8]
 1001fe8:	e3833010 	orr	r3, r3, #16
 1001fec:	e50b3008 	str	r3, [fp, #-8]
    }

    if (!enable_ttbr1_walk)
 1001ff0:	e55b300e 	ldrb	r3, [fp, #-14]
 1001ff4:	e2233001 	eor	r3, r3, #1
 1001ff8:	e6ef3073 	uxtb	r3, r3
 1001ffc:	e3530000 	cmp	r3, #0
 1002000:	0a000002 	beq	1002010 <alt_mmu_TTBCR_set+0x68>
    {
        ttbcr |= ALT_CPU_TTBCR_PD1_SET_MSK;
 1002004:	e51b3008 	ldr	r3, [fp, #-8]
 1002008:	e3833020 	orr	r3, r3, #32
 100200c:	e50b3008 	str	r3, [fp, #-8]
    }

    if (base_addr_width > 7)
 1002010:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002014:	e3530007 	cmp	r3, #7
 1002018:	9a000001 	bls	1002024 <alt_mmu_TTBCR_set+0x7c>
    {
        return ALT_E_BAD_ARG;
 100201c:	e3e03008 	mvn	r3, #8
 1002020:	ea000009 	b	100204c <alt_mmu_TTBCR_set+0xa4>
    }

    ttbcr |= base_addr_width;
 1002024:	e51b2008 	ldr	r2, [fp, #-8]
 1002028:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100202c:	e1823003 	orr	r3, r2, r3
 1002030:	e50b3008 	str	r3, [fp, #-8]
 1002034:	e51b3008 	ldr	r3, [fp, #-8]
 1002038:	e50b300c 	str	r3, [fp, #-12]
    __asm("MCR p15, 0, %0,       c2, c0, 2" : : "r" (ttbcr));
 100203c:	e51b300c 	ldr	r3, [fp, #-12]
 1002040:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
}
 1002044:	e320f000 	nop	{0}

    ttbcr_set_helper(ttbcr);

    return ALT_E_SUCCESS;
 1002048:	e3a03000 	mov	r3, #0
}
 100204c:	e1a00003 	mov	r0, r3
 1002050:	e28bd000 	add	sp, fp, #0
 1002054:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002058:	e12fff1e 	bx	lr

0100205c <alt_mmu_DACR_set>:

ALT_STATUS_CODE alt_mmu_DACR_set(const ALT_MMU_DAP_t domain_ap[],
                                 const size_t num_elem)
{
 100205c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002060:	e28db000 	add	fp, sp, #0
 1002064:	e24dd01c 	sub	sp, sp, #28
 1002068:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 100206c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t dacr = 0;
 1002070:	e3a03000 	mov	r3, #0
 1002074:	e50b3008 	str	r3, [fp, #-8]
    uint32_t i;

    if (num_elem > 16)
 1002078:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100207c:	e3530010 	cmp	r3, #16
 1002080:	9a000001 	bls	100208c <alt_mmu_DACR_set+0x30>
    {
        return ALT_E_BAD_ARG;
 1002084:	e3e03008 	mvn	r3, #8
 1002088:	ea000027 	b	100212c <alt_mmu_DACR_set+0xd0>
    }

    for (i = 0; i < num_elem; ++i)
 100208c:	e3a03000 	mov	r3, #0
 1002090:	e50b300c 	str	r3, [fp, #-12]
 1002094:	ea00001a 	b	1002104 <alt_mmu_DACR_set+0xa8>
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
 1002098:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 100209c:	e51b300c 	ldr	r3, [fp, #-12]
 10020a0:	e0823003 	add	r3, r2, r3
 10020a4:	e5d33000 	ldrb	r3, [r3]
 10020a8:	e54b300d 	strb	r3, [fp, #-13]

        switch (ap)
 10020ac:	e55b300d 	ldrb	r3, [fp, #-13]
 10020b0:	e3530001 	cmp	r3, #1
 10020b4:	ca000002 	bgt	10020c4 <alt_mmu_DACR_set+0x68>
 10020b8:	e3530000 	cmp	r3, #0
 10020bc:	aa000002 	bge	10020cc <alt_mmu_DACR_set+0x70>
 10020c0:	ea00000a 	b	10020f0 <alt_mmu_DACR_set+0x94>
 10020c4:	e3530003 	cmp	r3, #3
 10020c8:	1a000008 	bne	10020f0 <alt_mmu_DACR_set+0x94>
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
 10020cc:	e55b200d 	ldrb	r2, [fp, #-13]
 10020d0:	e51b300c 	ldr	r3, [fp, #-12]
 10020d4:	e1a03083 	lsl	r3, r3, #1
 10020d8:	e1a03312 	lsl	r3, r2, r3
 10020dc:	e1a02003 	mov	r2, r3
 10020e0:	e51b3008 	ldr	r3, [fp, #-8]
 10020e4:	e1833002 	orr	r3, r3, r2
 10020e8:	e50b3008 	str	r3, [fp, #-8]
            break;
 10020ec:	ea000001 	b	10020f8 <alt_mmu_DACR_set+0x9c>
        default:
        case ALT_MMU_DAP_RESERVED:
            return ALT_E_BAD_ARG;
 10020f0:	e3e03008 	mvn	r3, #8
 10020f4:	ea00000c 	b	100212c <alt_mmu_DACR_set+0xd0>
    for (i = 0; i < num_elem; ++i)
 10020f8:	e51b300c 	ldr	r3, [fp, #-12]
 10020fc:	e2833001 	add	r3, r3, #1
 1002100:	e50b300c 	str	r3, [fp, #-12]
 1002104:	e51b200c 	ldr	r2, [fp, #-12]
 1002108:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100210c:	e1520003 	cmp	r2, r3
 1002110:	3affffe0 	bcc	1002098 <alt_mmu_DACR_set+0x3c>
 1002114:	e51b3008 	ldr	r3, [fp, #-8]
 1002118:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    __asm("MCR p15, 0, %0,      c3, c0, 0" : : "r" (dacr));
 100211c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002120:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
}
 1002124:	e320f000 	nop	{0}
        }
    }

    dacr_set_helper(dacr);

    return ALT_E_SUCCESS;
 1002128:	e3a03000 	mov	r3, #0
}
 100212c:	e1a00003 	mov	r0, r3
 1002130:	e28bd000 	add	sp, fp, #0
 1002134:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002138:	e12fff1e 	bx	lr

0100213c <alt_mmu_tlb_invalidate>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_tlb_invalidate(void)
{
 100213c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002140:	e28db000 	add	fp, sp, #0
 1002144:	e24dd00c 	sub	sp, sp, #12
    /* Issue TLBIALL (TLB Invalidate All)
     / See ARMv7-A,R, section B4.1.135. */

    uint32_t dummy = 0;
 1002148:	e3a03000 	mov	r3, #0
 100214c:	e50b3008 	str	r3, [fp, #-8]
#if   defined(__ARMCOMPILER_VERSION)
    __asm("MCR p15, 0, %[dummy], c8, c3, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c8, c3, 0");
#else
    __asm("MCR p15, 0, %0,       c8, c3, 0" : : "r" (dummy));
 1002150:	e51b3008 	ldr	r3, [fp, #-8]
 1002154:	ee083f13 	mcr	15, 0, r3, cr8, cr3, {0}
#endif

    /* Ensure all TLB maintenance operations complete before returning. */
    __asm("dsb");
 1002158:	f57ff04f 	dsb	sy

    return ALT_E_SUCCESS;
 100215c:	e3a03000 	mov	r3, #0
}
 1002160:	e1a00003 	mov	r0, r3
 1002164:	e28bd000 	add	sp, fp, #0
 1002168:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100216c:	e12fff1e 	bx	lr

01002170 <alt_vregion_mark_pagetable>:
#define ALT_VREGION_1MIB         (2)                              /* 2 */
#define ALT_VREGION_PAGETABLE_S  ((int)ALT_MMU_TTB_NS_SECURE)     /* 0 */
#define ALT_VREGION_PAGETABLE_NS ((int)ALT_MMU_TTB_NS_NON_SECURE) /* 1 */

static ALT_STATUS_CODE alt_vregion_mark_pagetable(char * vregion, ALT_MMU_TTB_NS_t security)
{
 1002170:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002174:	e28db000 	add	fp, sp, #0
 1002178:	e24dd00c 	sub	sp, sp, #12
 100217c:	e50b0008 	str	r0, [fp, #-8]
 1002180:	e1a03001 	mov	r3, r1
 1002184:	e54b3009 	strb	r3, [fp, #-9]
    if (*vregion == ALT_VREGION_1MIB)
 1002188:	e51b3008 	ldr	r3, [fp, #-8]
 100218c:	e5d33000 	ldrb	r3, [r3]
 1002190:	e3530002 	cmp	r3, #2
 1002194:	1a000003 	bne	10021a8 <alt_vregion_mark_pagetable+0x38>
    {
        *vregion = (int)security;
 1002198:	e51b3008 	ldr	r3, [fp, #-8]
 100219c:	e55b2009 	ldrb	r2, [fp, #-9]
 10021a0:	e5c32000 	strb	r2, [r3]
 10021a4:	ea000006 	b	10021c4 <alt_vregion_mark_pagetable+0x54>
    }
    else if (*vregion != (int)security)
 10021a8:	e51b3008 	ldr	r3, [fp, #-8]
 10021ac:	e5d33000 	ldrb	r3, [r3]
 10021b0:	e55b2009 	ldrb	r2, [fp, #-9]
 10021b4:	e1520003 	cmp	r2, r3
 10021b8:	0a000001 	beq	10021c4 <alt_vregion_mark_pagetable+0x54>
    {
        return ALT_E_ERROR;
 10021bc:	e3e03000 	mvn	r3, #0
 10021c0:	ea000000 	b	10021c8 <alt_vregion_mark_pagetable+0x58>
    }

    return ALT_E_SUCCESS;
 10021c4:	e3a03000 	mov	r3, #0
}
 10021c8:	e1a00003 	mov	r0, r3
 10021cc:	e28bd000 	add	sp, fp, #0
 10021d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10021d4:	e12fff1e 	bx	lr

010021d8 <alt_mmu_va_space_storage_required_internal>:

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
                                                         const size_t num_mem_regions,
                                                         char * vregion)
{
 10021d8:	e92d4800 	push	{fp, lr}
 10021dc:	e28db004 	add	fp, sp, #4
 10021e0:	e24dd030 	sub	sp, sp, #48	; 0x30
 10021e4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
 10021e8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
 10021ec:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    size_t reqsize;
    uint32_t i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 10021f0:	e3a03000 	mov	r3, #0
 10021f4:	e50b300c 	str	r3, [fp, #-12]
 10021f8:	ea000007 	b	100221c <alt_mmu_va_space_storage_required_internal+0x44>
    {
        vregion[i] = ALT_VREGION_1MIB;
 10021fc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002200:	e51b300c 	ldr	r3, [fp, #-12]
 1002204:	e0823003 	add	r3, r2, r3
 1002208:	e3a02002 	mov	r2, #2
 100220c:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 1002210:	e51b300c 	ldr	r3, [fp, #-12]
 1002214:	e2833001 	add	r3, r3, #1
 1002218:	e50b300c 	str	r3, [fp, #-12]
 100221c:	e51b300c 	ldr	r3, [fp, #-12]
 1002220:	e3530a01 	cmp	r3, #4096	; 0x1000
 1002224:	3afffff4 	bcc	10021fc <alt_mmu_va_space_storage_required_internal+0x24>
    }

    /* For each region entry, mark the TTB1 as either fault, section, pagetable.
     * The total space required is the space required for the TTB1 (16 KiB) + pagetables * (1 KiB) */

    for (i = 0; i < num_mem_regions; ++i)
 1002228:	e3a03000 	mov	r3, #0
 100222c:	e50b300c 	str	r3, [fp, #-12]
 1002230:	ea000096 	b	1002490 <alt_mmu_va_space_storage_required_internal+0x2b8>
    {
        uintptr_t        va       = (uintptr_t)mem_regions[i].va;
 1002234:	e51b200c 	ldr	r2, [fp, #-12]
 1002238:	e1a03002 	mov	r3, r2
 100223c:	e1a03103 	lsl	r3, r3, #2
 1002240:	e0833002 	add	r3, r3, r2
 1002244:	e1a03103 	lsl	r3, r3, #2
 1002248:	e1a02003 	mov	r2, r3
 100224c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1002250:	e0833002 	add	r3, r3, r2
 1002254:	e5933000 	ldr	r3, [r3]
 1002258:	e50b3010 	str	r3, [fp, #-16]
        uintptr_t        pa       = (uintptr_t)mem_regions[i].pa;
 100225c:	e51b200c 	ldr	r2, [fp, #-12]
 1002260:	e1a03002 	mov	r3, r2
 1002264:	e1a03103 	lsl	r3, r3, #2
 1002268:	e0833002 	add	r3, r3, r2
 100226c:	e1a03103 	lsl	r3, r3, #2
 1002270:	e1a02003 	mov	r2, r3
 1002274:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1002278:	e0833002 	add	r3, r3, r2
 100227c:	e5933004 	ldr	r3, [r3, #4]
 1002280:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        uint32_t         size     = mem_regions[i].size;
 1002284:	e51b200c 	ldr	r2, [fp, #-12]
 1002288:	e1a03002 	mov	r3, r2
 100228c:	e1a03103 	lsl	r3, r3, #2
 1002290:	e0833002 	add	r3, r3, r2
 1002294:	e1a03103 	lsl	r3, r3, #2
 1002298:	e1a02003 	mov	r2, r3
 100229c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10022a0:	e0833002 	add	r3, r3, r2
 10022a4:	e5933008 	ldr	r3, [r3, #8]
 10022a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        ALT_MMU_TTB_NS_t security = mem_regions[i].security;
 10022ac:	e51b200c 	ldr	r2, [fp, #-12]
 10022b0:	e1a03002 	mov	r3, r2
 10022b4:	e1a03103 	lsl	r3, r3, #2
 10022b8:	e0833002 	add	r3, r3, r2
 10022bc:	e1a03103 	lsl	r3, r3, #2
 10022c0:	e1a02003 	mov	r2, r3
 10022c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10022c8:	e0833002 	add	r3, r3, r2
 10022cc:	e5d33010 	ldrb	r3, [r3, #16]
 10022d0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

        /* Verify [va] aligns to 4 KiB */
        if (va & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 10022d4:	e51b3010 	ldr	r3, [fp, #-16]
 10022d8:	e7eb3053 	ubfx	r3, r3, #0, #12
 10022dc:	e3530000 	cmp	r3, #0
 10022e0:	0a000001 	beq	10022ec <alt_mmu_va_space_storage_required_internal+0x114>
        {
            return 0;
 10022e4:	e3a03000 	mov	r3, #0
 10022e8:	ea000081 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Verify [pa] aligns to 4 KiB */
        if (pa & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 10022ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10022f0:	e7eb3053 	ubfx	r3, r3, #0, #12
 10022f4:	e3530000 	cmp	r3, #0
 10022f8:	0a000001 	beq	1002304 <alt_mmu_va_space_storage_required_internal+0x12c>
        {
            return 0;
 10022fc:	e3a03000 	mov	r3, #0
 1002300:	ea00007b 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Verify [size] aligns to 4 KiB */
        if (size & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 1002304:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002308:	e7eb3053 	ubfx	r3, r3, #0, #12
 100230c:	e3530000 	cmp	r3, #0
 1002310:	0a000001 	beq	100231c <alt_mmu_va_space_storage_required_internal+0x144>
        {
            return 0;
 1002314:	e3a03000 	mov	r3, #0
 1002318:	ea000075 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Mark the regions at the start of an unaligned 1 MiB as pagetable.
         * Align the [va] to 1 MiB and subtract that from the [size] left to describe. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
 100231c:	e51b3010 	ldr	r3, [fp, #-16]
 1002320:	e7f33053 	ubfx	r3, r3, #0, #20
 1002324:	e3530000 	cmp	r3, #0
 1002328:	0a000020 	beq	10023b0 <alt_mmu_va_space_storage_required_internal+0x1d8>
        {
            uint32_t segment = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
 100232c:	e51b3010 	ldr	r3, [fp, #-16]
 1002330:	e7f33053 	ubfx	r3, r3, #0, #20
 1002334:	e2633601 	rsb	r3, r3, #1048576	; 0x100000
 1002338:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 100233c:	e1520003 	cmp	r2, r3
 1002340:	31a03002 	movcc	r3, r2
 1002344:	21a03003 	movcs	r3, r3
 1002348:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

            /* Pagetables must be either S or NS. If the pagetable was
             * previously marked as something different, the regions described
             * will not be implementable. */
            if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 100234c:	e51b3010 	ldr	r3, [fp, #-16]
 1002350:	e1a03a23 	lsr	r3, r3, #20
 1002354:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002358:	e0823003 	add	r3, r2, r3
 100235c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 1002360:	e1a01002 	mov	r1, r2
 1002364:	e1a00003 	mov	r0, r3
 1002368:	ebffff80 	bl	1002170 <alt_vregion_mark_pagetable>
 100236c:	e1a03000 	mov	r3, r0
 1002370:	e3530000 	cmp	r3, #0
 1002374:	0a000001 	beq	1002380 <alt_mmu_va_space_storage_required_internal+0x1a8>
                                           security) != ALT_E_SUCCESS)
            {
                return 0;
 1002378:	e3a03000 	mov	r3, #0
 100237c:	ea00005c 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
            }

            va   += segment;
 1002380:	e51b2010 	ldr	r2, [fp, #-16]
 1002384:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002388:	e0823003 	add	r3, r2, r3
 100238c:	e50b3010 	str	r3, [fp, #-16]
            pa   += segment;
 1002390:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1002394:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002398:	e0823003 	add	r3, r2, r3
 100239c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            size -= segment;
 10023a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 10023a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10023a8:	e0423003 	sub	r3, r2, r3
 10023ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        /* Skip each 1 MiB aligned segment of size 1 MiB. These regions require
         * pagetable if the PA is not 1 MiB aligned. */

        /* [pa] is not used after this point. */

        if (pa & (ALT_MMU_SECTION_SIZE - 1))
 10023b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10023b4:	e7f33053 	ubfx	r3, r3, #0, #20
 10023b8:	e3530000 	cmp	r3, #0
 10023bc:	0a00001d 	beq	1002438 <alt_mmu_va_space_storage_required_internal+0x260>
        {
            /* PA is not 1 MiB aligned. Everything must use pagetables. */

            while (size >= ALT_MMU_SECTION_SIZE)
 10023c0:	ea000012 	b	1002410 <alt_mmu_va_space_storage_required_internal+0x238>
            {
                /* Pagetables must be either S or NS. If the pagetable was
                 * previously marked as something different, the regions described
                 * will not be implementable. */
                if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 10023c4:	e51b3010 	ldr	r3, [fp, #-16]
 10023c8:	e1a03a23 	lsr	r3, r3, #20
 10023cc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 10023d0:	e0823003 	add	r3, r2, r3
 10023d4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 10023d8:	e1a01002 	mov	r1, r2
 10023dc:	e1a00003 	mov	r0, r3
 10023e0:	ebffff62 	bl	1002170 <alt_vregion_mark_pagetable>
 10023e4:	e1a03000 	mov	r3, r0
 10023e8:	e3530000 	cmp	r3, #0
 10023ec:	0a000001 	beq	10023f8 <alt_mmu_va_space_storage_required_internal+0x220>
                                               security) != ALT_E_SUCCESS)
                {
                    return 0;
 10023f0:	e3a03000 	mov	r3, #0
 10023f4:	ea00003e 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
                }

                va   += ALT_MMU_SECTION_SIZE;
 10023f8:	e51b3010 	ldr	r3, [fp, #-16]
 10023fc:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1002400:	e50b3010 	str	r3, [fp, #-16]
                /* pa   += ALT_MMU_SECTION_SIZE; */
                size -= ALT_MMU_SECTION_SIZE;
 1002404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002408:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 100240c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            while (size >= ALT_MMU_SECTION_SIZE)
 1002410:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002414:	e3530601 	cmp	r3, #1048576	; 0x100000
 1002418:	2affffe9 	bcs	10023c4 <alt_mmu_va_space_storage_required_internal+0x1ec>
 100241c:	ea000008 	b	1002444 <alt_mmu_va_space_storage_required_internal+0x26c>
        {
            /* PA is 1 MiB aligned. Sections or supersections can be used. */

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                va   += ALT_MMU_SECTION_SIZE;
 1002420:	e51b3010 	ldr	r3, [fp, #-16]
 1002424:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1002428:	e50b3010 	str	r3, [fp, #-16]
                /* pa   += ALT_MMU_SECTION_SIZE; */
                size -= ALT_MMU_SECTION_SIZE;
 100242c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002430:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1002434:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            while (size >= ALT_MMU_SECTION_SIZE)
 1002438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100243c:	e3530601 	cmp	r3, #1048576	; 0x100000
 1002440:	2afffff6 	bcs	1002420 <alt_mmu_va_space_storage_required_internal+0x248>
            }
        }

        /* The remainder should be a 1 MiB aligned segment of less than 1 MiB. Mark that region as pagetable. */
        if (size)
 1002444:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002448:	e3530000 	cmp	r3, #0
 100244c:	0a00000c 	beq	1002484 <alt_mmu_va_space_storage_required_internal+0x2ac>
        {
            /* Pagetables must be either S or NS. If the pagetable was
             * previously marked as something different, the regions described
             * will not be implementable. */
            if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 1002450:	e51b3010 	ldr	r3, [fp, #-16]
 1002454:	e1a03a23 	lsr	r3, r3, #20
 1002458:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 100245c:	e0823003 	add	r3, r2, r3
 1002460:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 1002464:	e1a01002 	mov	r1, r2
 1002468:	e1a00003 	mov	r0, r3
 100246c:	ebffff3f 	bl	1002170 <alt_vregion_mark_pagetable>
 1002470:	e1a03000 	mov	r3, r0
 1002474:	e3530000 	cmp	r3, #0
 1002478:	0a000001 	beq	1002484 <alt_mmu_va_space_storage_required_internal+0x2ac>
                                           security) != ALT_E_SUCCESS)
            {
                return 0;
 100247c:	e3a03000 	mov	r3, #0
 1002480:	ea00001b 	b	10024f4 <alt_mmu_va_space_storage_required_internal+0x31c>
    for (i = 0; i < num_mem_regions; ++i)
 1002484:	e51b300c 	ldr	r3, [fp, #-12]
 1002488:	e2833001 	add	r3, r3, #1
 100248c:	e50b300c 	str	r3, [fp, #-12]
 1002490:	e51b200c 	ldr	r2, [fp, #-12]
 1002494:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 1002498:	e1520003 	cmp	r2, r3
 100249c:	3affff64 	bcc	1002234 <alt_mmu_va_space_storage_required_internal+0x5c>
            }
        }
    }

    /* Calculate the size as 16 KiB (TTB1) + 1 KiB * (TTB2 or the number of pagetables) */
    reqsize = ALT_MMU_TTB1_SIZE;
 10024a0:	e3a03901 	mov	r3, #16384	; 0x4000
 10024a4:	e50b3008 	str	r3, [fp, #-8]

    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 10024a8:	e3a03000 	mov	r3, #0
 10024ac:	e50b300c 	str	r3, [fp, #-12]
 10024b0:	ea00000b 	b	10024e4 <alt_mmu_va_space_storage_required_internal+0x30c>
    {
        if (vregion[i] != ALT_VREGION_1MIB)
 10024b4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 10024b8:	e51b300c 	ldr	r3, [fp, #-12]
 10024bc:	e0823003 	add	r3, r2, r3
 10024c0:	e5d33000 	ldrb	r3, [r3]
 10024c4:	e3530002 	cmp	r3, #2
 10024c8:	0a000002 	beq	10024d8 <alt_mmu_va_space_storage_required_internal+0x300>
        {
            reqsize += ALT_MMU_TTB2_SIZE;
 10024cc:	e51b3008 	ldr	r3, [fp, #-8]
 10024d0:	e2833b01 	add	r3, r3, #1024	; 0x400
 10024d4:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 10024d8:	e51b300c 	ldr	r3, [fp, #-12]
 10024dc:	e2833001 	add	r3, r3, #1
 10024e0:	e50b300c 	str	r3, [fp, #-12]
 10024e4:	e51b300c 	ldr	r3, [fp, #-12]
 10024e8:	e3530a01 	cmp	r3, #4096	; 0x1000
 10024ec:	3afffff0 	bcc	10024b4 <alt_mmu_va_space_storage_required_internal+0x2dc>
        }
    }

    return reqsize;
 10024f0:	e51b3008 	ldr	r3, [fp, #-8]
}
 10024f4:	e1a00003 	mov	r0, r3
 10024f8:	e24bd004 	sub	sp, fp, #4
 10024fc:	e8bd8800 	pop	{fp, pc}

01002500 <alt_mmu_va_space_storage_required>:

size_t alt_mmu_va_space_storage_required(const ALT_MMU_MEM_REGION_t* mem_regions,
                                         const size_t num_mem_regions)
{
 1002500:	e92d4800 	push	{fp, lr}
 1002504:	e28db004 	add	fp, sp, #4
 1002508:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 100250c:	e24dd008 	sub	sp, sp, #8
 1002510:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002514:	e2433004 	sub	r3, r3, #4
 1002518:	e5030004 	str	r0, [r3, #-4]
 100251c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002520:	e2433004 	sub	r3, r3, #4
 1002524:	e5031008 	str	r1, [r3, #-8]
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    return alt_mmu_va_space_storage_required_internal(mem_regions,
 1002528:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 100252c:	e2433004 	sub	r3, r3, #4
 1002530:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002534:	e2422004 	sub	r2, r2, #4
 1002538:	e1a01002 	mov	r1, r2
 100253c:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002540:	e2422004 	sub	r2, r2, #4
 1002544:	e1a00002 	mov	r0, r2
 1002548:	e1a02003 	mov	r2, r3
 100254c:	e5111008 	ldr	r1, [r1, #-8]
 1002550:	e5100004 	ldr	r0, [r0, #-4]
 1002554:	ebffff1f 	bl	10021d8 <alt_mmu_va_space_storage_required_internal>
 1002558:	e1a03000 	mov	r3, r0
                                                      num_mem_regions,
                                                      vregion);
}
 100255c:	e1a00003 	mov	r0, r3
 1002560:	e24bd004 	sub	sp, fp, #4
 1002564:	e8bd8800 	pop	{fp, pc}

01002568 <alt_mmu_va_space_gen_pagetable>:

static __inline uint32_t alt_mmu_va_space_gen_pagetable(uintptr_t pagetable,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 1002568:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 100256c:	e28db000 	add	fp, sp, #0
 1002570:	e24dd00c 	sub	sp, sp, #12
 1002574:	e50b0008 	str	r0, [fp, #-8]
 1002578:	e50b100c 	str	r1, [fp, #-12]
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 100257c:	e51b300c 	ldr	r3, [fp, #-12]
 1002580:	e5d3300d 	ldrb	r3, [r3, #13]
 1002584:	e35300ff 	cmp	r3, #255	; 0xff
 1002588:	1a000001 	bne	1002594 <alt_mmu_va_space_gen_pagetable+0x2c>
    {
        return 0;
 100258c:	e3a03000 	mov	r3, #0
 1002590:	ea000008 	b	10025b8 <alt_mmu_va_space_gen_pagetable+0x50>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x1)
        | ALT_MMU_TTB1_PAGE_TBL_NS_SET(mem->security)
 1002594:	e51b300c 	ldr	r3, [fp, #-12]
 1002598:	e5d33010 	ldrb	r3, [r3, #16]
 100259c:	e1a03183 	lsl	r3, r3, #3
        | ALT_MMU_TTB1_PAGE_TBL_DOMAIN_SET(0)
        | ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_SET(pagetable >> 10);
 10025a0:	e2032008 	and	r2, r3, #8
 10025a4:	e51b3008 	ldr	r3, [fp, #-8]
 10025a8:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10025ac:	e3c33003 	bic	r3, r3, #3
 10025b0:	e1823003 	orr	r3, r2, r3
 10025b4:	e3833001 	orr	r3, r3, #1
}
 10025b8:	e1a00003 	mov	r0, r3
 10025bc:	e28bd000 	add	sp, fp, #0
 10025c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10025c4:	e12fff1e 	bx	lr

010025c8 <alt_mmu_va_space_gen_section>:

static __inline uint32_t alt_mmu_va_space_gen_section(uintptr_t pa,
                                                    const ALT_MMU_MEM_REGION_t * mem)
{
 10025c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10025cc:	e28db000 	add	fp, sp, #0
 10025d0:	e24dd01c 	sub	sp, sp, #28
 10025d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 10025d8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 10025dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10025e0:	e5d3300d 	ldrb	r3, [r3, #13]
 10025e4:	e1a03223 	lsr	r3, r3, #4
 10025e8:	e6ef3073 	uxtb	r3, r3
 10025ec:	e2033007 	and	r3, r3, #7
 10025f0:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 10025f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10025f8:	e5d3300d 	ldrb	r3, [r3, #13]
 10025fc:	e1a030a3 	lsr	r3, r3, #1
 1002600:	e6ef3073 	uxtb	r3, r3
 1002604:	e2033001 	and	r3, r3, #1
 1002608:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 100260c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002610:	e5d3300d 	ldrb	r3, [r3, #13]
 1002614:	e2033001 	and	r3, r3, #1
 1002618:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 100261c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002620:	e5d3300d 	ldrb	r3, [r3, #13]
 1002624:	e35300ff 	cmp	r3, #255	; 0xff
 1002628:	1a000001 	bne	1002634 <alt_mmu_va_space_gen_section+0x6c>
    {
        return 0;
 100262c:	e3a03000 	mov	r3, #0
 1002630:	ea000029 	b	10026dc <alt_mmu_va_space_gen_section+0x114>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
 1002634:	e51b3010 	ldr	r3, [fp, #-16]
 1002638:	e1a03103 	lsl	r3, r3, #2
 100263c:	e2033004 	and	r3, r3, #4
 1002640:	e3832002 	orr	r2, r3, #2
        | ALT_MMU_TTB1_SECTION_C_SET(c)
 1002644:	e51b300c 	ldr	r3, [fp, #-12]
 1002648:	e1a03183 	lsl	r3, r3, #3
 100264c:	e2033008 	and	r3, r3, #8
 1002650:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
 1002654:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002658:	e5d3300f 	ldrb	r3, [r3, #15]
 100265c:	e1a03203 	lsl	r3, r3, #4
 1002660:	e2033010 	and	r3, r3, #16
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
 1002664:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
 1002668:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100266c:	e5d3300c 	ldrb	r3, [r3, #12]
 1002670:	e1a03683 	lsl	r3, r3, #13
 1002674:	e2031902 	and	r1, r3, #32768	; 0x8000
 1002678:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100267c:	e5d3300c 	ldrb	r3, [r3, #12]
 1002680:	e1a03503 	lsl	r3, r3, #10
 1002684:	e2033b03 	and	r3, r3, #3072	; 0xc00
 1002688:	e1813003 	orr	r3, r1, r3
 100268c:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
 1002690:	e51b3008 	ldr	r3, [fp, #-8]
 1002694:	e1a03603 	lsl	r3, r3, #12
 1002698:	e2033a07 	and	r3, r3, #28672	; 0x7000
 100269c:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
 10026a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10026a4:	e5d3300e 	ldrb	r3, [r3, #14]
 10026a8:	e1a03803 	lsl	r3, r3, #16
 10026ac:	e2033801 	and	r3, r3, #65536	; 0x10000
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
 10026b0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
 10026b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10026b8:	e5d33010 	ldrb	r3, [r3, #16]
 10026bc:	e1a03983 	lsl	r3, r3, #19
 10026c0:	e2033702 	and	r3, r3, #524288	; 0x80000
 10026c4:	e1823003 	orr	r3, r2, r3
 10026c8:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB1_SECTION_BASE_ADDR_SET(pa >> 20);
 10026cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10026d0:	e1a03a23 	lsr	r3, r3, #20
 10026d4:	e1a03a03 	lsl	r3, r3, #20
 10026d8:	e1823003 	orr	r3, r2, r3
}
 10026dc:	e1a00003 	mov	r0, r3
 10026e0:	e28bd000 	add	sp, fp, #0
 10026e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10026e8:	e12fff1e 	bx	lr

010026ec <alt_mmu_va_space_gen_supersection>:

static __inline uint32_t alt_mmu_va_space_gen_supersection(uintptr_t pa,
                                                         const ALT_MMU_MEM_REGION_t * mem)
{
 10026ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10026f0:	e28db000 	add	fp, sp, #0
 10026f4:	e24dd01c 	sub	sp, sp, #28
 10026f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 10026fc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1002700:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002704:	e5d3300d 	ldrb	r3, [r3, #13]
 1002708:	e1a03223 	lsr	r3, r3, #4
 100270c:	e6ef3073 	uxtb	r3, r3
 1002710:	e2033007 	and	r3, r3, #7
 1002714:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 1002718:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100271c:	e5d3300d 	ldrb	r3, [r3, #13]
 1002720:	e1a030a3 	lsr	r3, r3, #1
 1002724:	e6ef3073 	uxtb	r3, r3
 1002728:	e2033001 	and	r3, r3, #1
 100272c:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1002730:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002734:	e5d3300d 	ldrb	r3, [r3, #13]
 1002738:	e2033001 	and	r3, r3, #1
 100273c:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002740:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002744:	e5d3300d 	ldrb	r3, [r3, #13]
 1002748:	e35300ff 	cmp	r3, #255	; 0xff
 100274c:	1a000001 	bne	1002758 <alt_mmu_va_space_gen_supersection+0x6c>
    {
        return 0;
 1002750:	e3a03000 	mov	r3, #0
 1002754:	ea000029 	b	1002800 <alt_mmu_va_space_gen_supersection+0x114>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
 1002758:	e51b3010 	ldr	r3, [fp, #-16]
 100275c:	e1a03103 	lsl	r3, r3, #2
 1002760:	e2033004 	and	r3, r3, #4
 1002764:	e3833701 	orr	r3, r3, #262144	; 0x40000
 1002768:	e3833002 	orr	r3, r3, #2
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
 100276c:	e51b200c 	ldr	r2, [fp, #-12]
 1002770:	e1a02182 	lsl	r2, r2, #3
 1002774:	e2022008 	and	r2, r2, #8
 1002778:	e1832002 	orr	r2, r3, r2
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
 100277c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002780:	e5d3300f 	ldrb	r3, [r3, #15]
 1002784:	e1a03203 	lsl	r3, r3, #4
 1002788:	e2033010 	and	r3, r3, #16
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
 100278c:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
 1002790:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002794:	e5d3300c 	ldrb	r3, [r3, #12]
 1002798:	e1a03683 	lsl	r3, r3, #13
 100279c:	e2031902 	and	r1, r3, #32768	; 0x8000
 10027a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10027a4:	e5d3300c 	ldrb	r3, [r3, #12]
 10027a8:	e1a03503 	lsl	r3, r3, #10
 10027ac:	e2033b03 	and	r3, r3, #3072	; 0xc00
 10027b0:	e1813003 	orr	r3, r1, r3
 10027b4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
 10027b8:	e51b3008 	ldr	r3, [fp, #-8]
 10027bc:	e1a03603 	lsl	r3, r3, #12
 10027c0:	e2033a07 	and	r3, r3, #28672	; 0x7000
 10027c4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
 10027c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10027cc:	e5d3300e 	ldrb	r3, [r3, #14]
 10027d0:	e1a03803 	lsl	r3, r3, #16
 10027d4:	e2033801 	and	r3, r3, #65536	; 0x10000
        | ALT_MMU_TTB1_SUPERSECTION_NG_SET(0)
 10027d8:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_NS_SET(mem->security)
 10027dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10027e0:	e5d33010 	ldrb	r3, [r3, #16]
 10027e4:	e1a03983 	lsl	r3, r3, #19
 10027e8:	e2033702 	and	r3, r3, #524288	; 0x80000
 10027ec:	e1823003 	orr	r3, r2, r3
 10027f0:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_BASE_ADDR_SET(pa >> 24);
 10027f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10027f8:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
 10027fc:	e1823003 	orr	r3, r2, r3
}
 1002800:	e1a00003 	mov	r0, r3
 1002804:	e28bd000 	add	sp, fp, #0
 1002808:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100280c:	e12fff1e 	bx	lr

01002810 <alt_mmu_va_space_gen_smallpage>:

static __inline uint32_t alt_mmu_va_space_gen_smallpage(uintptr_t pa,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 1002810:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002814:	e28db000 	add	fp, sp, #0
 1002818:	e24dd01c 	sub	sp, sp, #28
 100281c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1002820:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1002824:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002828:	e5d3300d 	ldrb	r3, [r3, #13]
 100282c:	e1a03223 	lsr	r3, r3, #4
 1002830:	e6ef3073 	uxtb	r3, r3
 1002834:	e2033007 	and	r3, r3, #7
 1002838:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 100283c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002840:	e5d3300d 	ldrb	r3, [r3, #13]
 1002844:	e1a030a3 	lsr	r3, r3, #1
 1002848:	e6ef3073 	uxtb	r3, r3
 100284c:	e2033001 	and	r3, r3, #1
 1002850:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1002854:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002858:	e5d3300d 	ldrb	r3, [r3, #13]
 100285c:	e2033001 	and	r3, r3, #1
 1002860:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002864:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002868:	e5d3300d 	ldrb	r3, [r3, #13]
 100286c:	e35300ff 	cmp	r3, #255	; 0xff
 1002870:	1a000001 	bne	100287c <alt_mmu_va_space_gen_smallpage+0x6c>
    {
        return 0;
 1002874:	e3a03000 	mov	r3, #0
 1002878:	ea000023 	b	100290c <alt_mmu_va_space_gen_smallpage+0xfc>

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
 100287c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002880:	e5d3300f 	ldrb	r3, [r3, #15]
 1002884:	e2033001 	and	r3, r3, #1
 1002888:	e3832002 	orr	r2, r3, #2
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
 100288c:	e51b3010 	ldr	r3, [fp, #-16]
 1002890:	e1a03103 	lsl	r3, r3, #2
 1002894:	e2033004 	and	r3, r3, #4
 1002898:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
 100289c:	e51b300c 	ldr	r3, [fp, #-12]
 10028a0:	e1a03183 	lsl	r3, r3, #3
 10028a4:	e2033008 	and	r3, r3, #8
 10028a8:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
 10028ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10028b0:	e5d3300c 	ldrb	r3, [r3, #12]
 10028b4:	e1a03383 	lsl	r3, r3, #7
 10028b8:	e2031c02 	and	r1, r3, #512	; 0x200
 10028bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10028c0:	e5d3300c 	ldrb	r3, [r3, #12]
 10028c4:	e1a03203 	lsl	r3, r3, #4
 10028c8:	e2033030 	and	r3, r3, #48	; 0x30
 10028cc:	e1813003 	orr	r3, r1, r3
 10028d0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
 10028d4:	e51b3008 	ldr	r3, [fp, #-8]
 10028d8:	e1a03303 	lsl	r3, r3, #6
 10028dc:	e2033d07 	and	r3, r3, #448	; 0x1c0
 10028e0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
 10028e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10028e8:	e5d3300e 	ldrb	r3, [r3, #14]
 10028ec:	e1a03503 	lsl	r3, r3, #10
 10028f0:	e2033b01 	and	r3, r3, #1024	; 0x400
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
 10028f4:	e1823003 	orr	r3, r2, r3
 10028f8:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
 10028fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002900:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
 1002904:	e3c3300f 	bic	r3, r3, #15
 1002908:	e1823003 	orr	r3, r2, r3
}
 100290c:	e1a00003 	mov	r0, r3
 1002910:	e28bd000 	add	sp, fp, #0
 1002914:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002918:	e12fff1e 	bx	lr

0100291c <alt_mmu_va_space_gen_largepage>:

static __inline uint32_t alt_mmu_va_space_gen_largepage(uintptr_t pa,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 100291c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1002920:	e28db000 	add	fp, sp, #0
 1002924:	e24dd01c 	sub	sp, sp, #28
 1002928:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 100292c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1002930:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002934:	e5d3300d 	ldrb	r3, [r3, #13]
 1002938:	e1a03223 	lsr	r3, r3, #4
 100293c:	e6ef3073 	uxtb	r3, r3
 1002940:	e2033007 	and	r3, r3, #7
 1002944:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 1002948:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100294c:	e5d3300d 	ldrb	r3, [r3, #13]
 1002950:	e1a030a3 	lsr	r3, r3, #1
 1002954:	e6ef3073 	uxtb	r3, r3
 1002958:	e2033001 	and	r3, r3, #1
 100295c:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1002960:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002964:	e5d3300d 	ldrb	r3, [r3, #13]
 1002968:	e2033001 	and	r3, r3, #1
 100296c:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1002970:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002974:	e5d3300d 	ldrb	r3, [r3, #13]
 1002978:	e35300ff 	cmp	r3, #255	; 0xff
 100297c:	1a000001 	bne	1002988 <alt_mmu_va_space_gen_largepage+0x6c>
    {
        return 0;
 1002980:	e3a03000 	mov	r3, #0
 1002984:	ea000024 	b	1002a1c <alt_mmu_va_space_gen_largepage+0x100>

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
 1002988:	e51b3010 	ldr	r3, [fp, #-16]
 100298c:	e1a03103 	lsl	r3, r3, #2
 1002990:	e2033004 	and	r3, r3, #4
 1002994:	e3832001 	orr	r2, r3, #1
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
 1002998:	e51b300c 	ldr	r3, [fp, #-12]
 100299c:	e1a03183 	lsl	r3, r3, #3
 10029a0:	e2033008 	and	r3, r3, #8
 10029a4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
 10029a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029ac:	e5d3300c 	ldrb	r3, [r3, #12]
 10029b0:	e1a03383 	lsl	r3, r3, #7
 10029b4:	e2031c02 	and	r1, r3, #512	; 0x200
 10029b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029bc:	e5d3300c 	ldrb	r3, [r3, #12]
 10029c0:	e1a03203 	lsl	r3, r3, #4
 10029c4:	e2033030 	and	r3, r3, #48	; 0x30
 10029c8:	e1813003 	orr	r3, r1, r3
 10029cc:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
 10029d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029d4:	e5d3300e 	ldrb	r3, [r3, #14]
 10029d8:	e1a03503 	lsl	r3, r3, #10
 10029dc:	e2033b01 	and	r3, r3, #1024	; 0x400
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
 10029e0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
 10029e4:	e51b3008 	ldr	r3, [fp, #-8]
 10029e8:	e1a03603 	lsl	r3, r3, #12
 10029ec:	e2033a07 	and	r3, r3, #28672	; 0x7000
 10029f0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
 10029f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10029f8:	e5d3300f 	ldrb	r3, [r3, #15]
 10029fc:	e1a03783 	lsl	r3, r3, #15
 1002a00:	e6ff3073 	uxth	r3, r3
 1002a04:	e1823003 	orr	r3, r2, r3
 1002a08:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_BASE_ADDR_SET(pa >> 16);
 1002a0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002a10:	e1a03823 	lsr	r3, r3, #16
 1002a14:	e1a03803 	lsl	r3, r3, #16
 1002a18:	e1823003 	orr	r3, r2, r3
}
 1002a1c:	e1a00003 	mov	r0, r3
 1002a20:	e28bd000 	add	sp, fp, #0
 1002a24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1002a28:	e12fff1e 	bx	lr

01002a2c <alt_mmu_ttb2_init>:

static ALT_STATUS_CODE alt_mmu_ttb2_init(uint32_t * ttb2)
{
 1002a2c:	e92d4800 	push	{fp, lr}
 1002a30:	e28db004 	add	fp, sp, #4
 1002a34:	e24dd008 	sub	sp, sp, #8
 1002a38:	e50b0008 	str	r0, [fp, #-8]
    /* For TTB2 (page tables), the page table base address in TTB1 is
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    if ((uintptr_t)ttb2 & ((1 << 10) - 1))
 1002a3c:	e51b3008 	ldr	r3, [fp, #-8]
 1002a40:	e7e93053 	ubfx	r3, r3, #0, #10
 1002a44:	e3530000 	cmp	r3, #0
 1002a48:	0a000001 	beq	1002a54 <alt_mmu_ttb2_init+0x28>
    {
        return ALT_E_BAD_ARG;
 1002a4c:	e3e03008 	mvn	r3, #8
 1002a50:	ea000004 	b	1002a68 <alt_mmu_ttb2_init+0x3c>
    }

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
 1002a54:	e3a02b01 	mov	r2, #1024	; 0x400
 1002a58:	e3a01000 	mov	r1, #0
 1002a5c:	e51b0008 	ldr	r0, [fp, #-8]
 1002a60:	eb000850 	bl	1004ba8 <memset>
    return ALT_E_SUCCESS;
 1002a64:	e3a03000 	mov	r3, #0
}
 1002a68:	e1a00003 	mov	r0, r3
 1002a6c:	e24bd004 	sub	sp, fp, #4
 1002a70:	e8bd8800 	pop	{fp, pc}

01002a74 <alt_mmu_va_space_create>:
ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
                                        const ALT_MMU_MEM_REGION_t* mem_regions,
                                        const size_t num_mem_regions,
                                        alt_mmu_ttb_alloc_t ttb_alloc,
                                        void * ttb_alloc_context)
{
 1002a74:	e92d4800 	push	{fp, lr}
 1002a78:	e28db004 	add	fp, sp, #4
 1002a7c:	e24ddd43 	sub	sp, sp, #4288	; 0x10c0
 1002a80:	e24bca01 	sub	ip, fp, #4096	; 0x1000
 1002a84:	e24cc004 	sub	ip, ip, #4
 1002a88:	e50c00b4 	str	r0, [ip, #-180]	; 0xffffff4c
 1002a8c:	e24b0a01 	sub	r0, fp, #4096	; 0x1000
 1002a90:	e2400004 	sub	r0, r0, #4
 1002a94:	e50010b8 	str	r1, [r0, #-184]	; 0xffffff48
 1002a98:	e24b1a01 	sub	r1, fp, #4096	; 0x1000
 1002a9c:	e2411004 	sub	r1, r1, #4
 1002aa0:	e50120bc 	str	r2, [r1, #-188]	; 0xffffff44
 1002aa4:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002aa8:	e2422004 	sub	r2, r2, #4
 1002aac:	e50230c0 	str	r3, [r2, #-192]	; 0xffffff40
    int k;
    size_t i;
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    size_t reqsize = alt_mmu_va_space_storage_required_internal(mem_regions,
 1002ab0:	e24b3d42 	sub	r3, fp, #4224	; 0x1080
 1002ab4:	e2433004 	sub	r3, r3, #4
 1002ab8:	e243300c 	sub	r3, r3, #12
 1002abc:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002ac0:	e2422004 	sub	r2, r2, #4
 1002ac4:	e1a01002 	mov	r1, r2
 1002ac8:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1002acc:	e2422004 	sub	r2, r2, #4
 1002ad0:	e1a00002 	mov	r0, r2
 1002ad4:	e1a02003 	mov	r2, r3
 1002ad8:	e51110bc 	ldr	r1, [r1, #-188]	; 0xffffff44
 1002adc:	e51000b8 	ldr	r0, [r0, #-184]	; 0xffffff48
 1002ae0:	ebfffdbc 	bl	10021d8 <alt_mmu_va_space_storage_required_internal>
 1002ae4:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
                                                                num_mem_regions,
                                                                vregion);
    char * memory;
    size_t allocated = 0;
 1002ae8:	e3a03000 	mov	r3, #0
 1002aec:	e50b3010 	str	r3, [fp, #-16]
    if (reqsize == 0)
 1002af0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 1002af4:	e3530000 	cmp	r3, #0
 1002af8:	1a000001 	bne	1002b04 <alt_mmu_va_space_create+0x90>
    {
        return ALT_E_ERROR;
 1002afc:	e3e03000 	mvn	r3, #0
 1002b00:	ea00034e 	b	1003840 <alt_mmu_va_space_create+0xdcc>
    }

    memory    = ttb_alloc(reqsize, ttb_alloc_context);
 1002b04:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002b08:	e2433004 	sub	r3, r3, #4
 1002b0c:	e51330c0 	ldr	r3, [r3, #-192]	; 0xffffff40
 1002b10:	e59b1004 	ldr	r1, [fp, #4]
 1002b14:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1002b18:	e12fff33 	blx	r3
 1002b1c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0

    /* Verify allocation */

    if (memory == NULL)
 1002b20:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1002b24:	e3530000 	cmp	r3, #0
 1002b28:	1a000001 	bne	1002b34 <alt_mmu_va_space_create+0xc0>
    {
        return ALT_E_ERROR;
 1002b2c:	e3e03000 	mvn	r3, #0
 1002b30:	ea000342 	b	1003840 <alt_mmu_va_space_create+0xdcc>
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    /* The stricter of the two alignment is 16 KiB. */

    if ((uintptr_t)memory & ((1 << 14) - 1))
 1002b34:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1002b38:	e7ed3053 	ubfx	r3, r3, #0, #14
 1002b3c:	e3530000 	cmp	r3, #0
 1002b40:	0a000001 	beq	1002b4c <alt_mmu_va_space_create+0xd8>
    {
        return ALT_E_BAD_ARG;
 1002b44:	e3e03008 	mvn	r3, #8
 1002b48:	ea00033c 	b	1003840 <alt_mmu_va_space_create+0xdcc>
    }

    /* "allocate" space for the TTB1. */
    if (allocated + ALT_MMU_TTB1_SIZE > reqsize)
 1002b4c:	e51b3010 	ldr	r3, [fp, #-16]
 1002b50:	e2833901 	add	r3, r3, #16384	; 0x4000
 1002b54:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1002b58:	e1520003 	cmp	r2, r3
 1002b5c:	2a000001 	bcs	1002b68 <alt_mmu_va_space_create+0xf4>
    {
        return ALT_E_ERROR;
 1002b60:	e3e03000 	mvn	r3, #0
 1002b64:	ea000335 	b	1003840 <alt_mmu_va_space_create+0xdcc>
    }
    *ttb1 = (uint32_t *)memory;
 1002b68:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002b6c:	e2433004 	sub	r3, r3, #4
 1002b70:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002b74:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002b78:	e5832000 	str	r2, [r3]
    allocated += ALT_MMU_TTB1_SIZE;
 1002b7c:	e51b3010 	ldr	r3, [fp, #-16]
 1002b80:	e2833901 	add	r3, r3, #16384	; 0x4000
 1002b84:	e50b3010 	str	r3, [fp, #-16]

    if (alt_mmu_ttb1_init(*ttb1) != ALT_E_SUCCESS)
 1002b88:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002b8c:	e2433004 	sub	r3, r3, #4
 1002b90:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002b94:	e5933000 	ldr	r3, [r3]
 1002b98:	e1a00003 	mov	r0, r3
 1002b9c:	ebfffc92 	bl	1001dec <alt_mmu_ttb1_init>
 1002ba0:	e1a03000 	mov	r3, r0
 1002ba4:	e3530000 	cmp	r3, #0
 1002ba8:	0a000001 	beq	1002bb4 <alt_mmu_va_space_create+0x140>
    {
        return ALT_E_ERROR;
 1002bac:	e3e03000 	mvn	r3, #0
 1002bb0:	ea000322 	b	1003840 <alt_mmu_va_space_create+0xdcc>
    }

    /* "allocate" space for each pagetable in [vregion] */
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
 1002bb4:	e3a03000 	mov	r3, #0
 1002bb8:	e50b3008 	str	r3, [fp, #-8]
 1002bbc:	ea00003a 	b	1002cac <alt_mmu_va_space_create+0x238>
    {
        if (vregion[k] != ALT_VREGION_1MIB)
 1002bc0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002bc4:	e2433004 	sub	r3, r3, #4
 1002bc8:	e1a02003 	mov	r2, r3
 1002bcc:	e51b3008 	ldr	r3, [fp, #-8]
 1002bd0:	e0823003 	add	r3, r2, r3
 1002bd4:	e243308c 	sub	r3, r3, #140	; 0x8c
 1002bd8:	e5d33000 	ldrb	r3, [r3]
 1002bdc:	e3530002 	cmp	r3, #2
 1002be0:	0a00002e 	beq	1002ca0 <alt_mmu_va_space_create+0x22c>
        {
            uint32_t desc;
            ALT_MMU_MEM_REGION_t mem_region;
            uint32_t * pagetable = (uint32_t *)(memory + allocated);
 1002be4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1002be8:	e51b3010 	ldr	r3, [fp, #-16]
 1002bec:	e0823003 	add	r3, r2, r3
 1002bf0:	e50b308c 	str	r3, [fp, #-140]	; 0xffffff74
            if (allocated + ALT_MMU_TTB2_SIZE > reqsize)
 1002bf4:	e51b3010 	ldr	r3, [fp, #-16]
 1002bf8:	e2833b01 	add	r3, r3, #1024	; 0x400
 1002bfc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1002c00:	e1520003 	cmp	r2, r3
 1002c04:	2a000001 	bcs	1002c10 <alt_mmu_va_space_create+0x19c>
            {
                return ALT_E_ERROR;
 1002c08:	e3e03000 	mvn	r3, #0
 1002c0c:	ea00030b 	b	1003840 <alt_mmu_va_space_create+0xdcc>
            }
            allocated += ALT_MMU_TTB2_SIZE;
 1002c10:	e51b3010 	ldr	r3, [fp, #-16]
 1002c14:	e2833b01 	add	r3, r3, #1024	; 0x400
 1002c18:	e50b3010 	str	r3, [fp, #-16]
            alt_mmu_ttb2_init(pagetable);
 1002c1c:	e51b008c 	ldr	r0, [fp, #-140]	; 0xffffff74
 1002c20:	ebffff81 	bl	1002a2c <alt_mmu_ttb2_init>

            mem_region.attributes = ALT_MMU_ATTR_STRONG; /* Any non-FAULT will work. */
 1002c24:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002c28:	e2433004 	sub	r3, r3, #4
 1002c2c:	e3a02000 	mov	r2, #0
 1002c30:	e5432093 	strb	r2, [r3, #-147]	; 0xffffff6d
            mem_region.security   = (ALT_MMU_TTB_NS_t)vregion[k];
 1002c34:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002c38:	e2433004 	sub	r3, r3, #4
 1002c3c:	e1a02003 	mov	r2, r3
 1002c40:	e51b3008 	ldr	r3, [fp, #-8]
 1002c44:	e0823003 	add	r3, r2, r3
 1002c48:	e243308c 	sub	r3, r3, #140	; 0x8c
 1002c4c:	e5d32000 	ldrb	r2, [r3]
 1002c50:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002c54:	e2433004 	sub	r3, r3, #4
 1002c58:	e5432090 	strb	r2, [r3, #-144]	; 0xffffff70
            desc = alt_mmu_va_space_gen_pagetable((uintptr_t)pagetable, &mem_region);
 1002c5c:	e51b208c 	ldr	r2, [fp, #-140]	; 0xffffff74
 1002c60:	e24b3d42 	sub	r3, fp, #4224	; 0x1080
 1002c64:	e2433004 	sub	r3, r3, #4
 1002c68:	e2433020 	sub	r3, r3, #32
 1002c6c:	e1a01003 	mov	r1, r3
 1002c70:	e1a00002 	mov	r0, r2
 1002c74:	ebfffe3b 	bl	1002568 <alt_mmu_va_space_gen_pagetable>
 1002c78:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70

            (*ttb1)[k] = desc;
 1002c7c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002c80:	e2433004 	sub	r3, r3, #4
 1002c84:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002c88:	e5932000 	ldr	r2, [r3]
 1002c8c:	e51b3008 	ldr	r3, [fp, #-8]
 1002c90:	e1a03103 	lsl	r3, r3, #2
 1002c94:	e0823003 	add	r3, r2, r3
 1002c98:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
 1002c9c:	e5832000 	str	r2, [r3]
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
 1002ca0:	e51b3008 	ldr	r3, [fp, #-8]
 1002ca4:	e2833001 	add	r3, r3, #1
 1002ca8:	e50b3008 	str	r3, [fp, #-8]
 1002cac:	e51b3008 	ldr	r3, [fp, #-8]
 1002cb0:	e3530a01 	cmp	r3, #4096	; 0x1000
 1002cb4:	baffffc1 	blt	1002bc0 <alt_mmu_va_space_create+0x14c>
    }

    /* The allocated size should match the requested size. If not, this means
     * that the regions descriptor changed between calling
     * alt_mmu_va_space_storage_required() and alt_mmu_va_space_create(). */
    if (reqsize != allocated)
 1002cb8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1002cbc:	e51b3010 	ldr	r3, [fp, #-16]
 1002cc0:	e1520003 	cmp	r2, r3
 1002cc4:	0a000001 	beq	1002cd0 <alt_mmu_va_space_create+0x25c>
    {
        return ALT_E_ERROR;
 1002cc8:	e3e03000 	mvn	r3, #0
 1002ccc:	ea0002db 	b	1003840 <alt_mmu_va_space_create+0xdcc>
    }

    /* Iterate through all region descriptors */

    for (i = 0; i < num_mem_regions; ++i)
 1002cd0:	e3a03000 	mov	r3, #0
 1002cd4:	e50b300c 	str	r3, [fp, #-12]
 1002cd8:	ea0002d1 	b	1003824 <alt_mmu_va_space_create+0xdb0>
    {
        uintptr_t va   = (uintptr_t)mem_regions[i].va;
 1002cdc:	e51b200c 	ldr	r2, [fp, #-12]
 1002ce0:	e1a03002 	mov	r3, r2
 1002ce4:	e1a03103 	lsl	r3, r3, #2
 1002ce8:	e0833002 	add	r3, r3, r2
 1002cec:	e1a03103 	lsl	r3, r3, #2
 1002cf0:	e1a02003 	mov	r2, r3
 1002cf4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002cf8:	e2433004 	sub	r3, r3, #4
 1002cfc:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002d00:	e0833002 	add	r3, r3, r2
 1002d04:	e5933000 	ldr	r3, [r3]
 1002d08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        uintptr_t pa   = (uintptr_t)mem_regions[i].pa;
 1002d0c:	e51b200c 	ldr	r2, [fp, #-12]
 1002d10:	e1a03002 	mov	r3, r2
 1002d14:	e1a03103 	lsl	r3, r3, #2
 1002d18:	e0833002 	add	r3, r3, r2
 1002d1c:	e1a03103 	lsl	r3, r3, #2
 1002d20:	e1a02003 	mov	r2, r3
 1002d24:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002d28:	e2433004 	sub	r3, r3, #4
 1002d2c:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002d30:	e0833002 	add	r3, r3, r2
 1002d34:	e5933004 	ldr	r3, [r3, #4]
 1002d38:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        uint32_t  size = mem_regions[i].size;
 1002d3c:	e51b200c 	ldr	r2, [fp, #-12]
 1002d40:	e1a03002 	mov	r3, r2
 1002d44:	e1a03103 	lsl	r3, r3, #2
 1002d48:	e0833002 	add	r3, r3, r2
 1002d4c:	e1a03103 	lsl	r3, r3, #2
 1002d50:	e1a02003 	mov	r2, r3
 1002d54:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002d58:	e2433004 	sub	r3, r3, #4
 1002d5c:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002d60:	e0833002 	add	r3, r3, r2
 1002d64:	e5933008 	ldr	r3, [r3, #8]
 1002d68:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        uint32_t j;

        /* Determine the va/pa relative alignment: 4 KiB, 64 KiB, 1 MiB, 16 MiB */

        uint32_t alignopt[] =
 1002d6c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002d70:	e2433004 	sub	r3, r3, #4
 1002d74:	e1a02003 	mov	r2, r3
 1002d78:	e3053300 	movw	r3, #21248	; 0x5300
 1002d7c:	e3403100 	movt	r3, #256	; 0x100
 1002d80:	e242c0ac 	sub	ip, r2, #172	; 0xac
 1002d84:	e8930007 	ldm	r3, {r0, r1, r2}
 1002d88:	e88c0007 	stm	ip, {r0, r1, r2}
            ALT_MMU_SECTION_SIZE,
            ALT_MMU_LARGE_PAGE_SIZE
        };

        /* Relative alignment of [va] and [pa]. */
        uint32_t relalign = ALT_MMU_SMALL_PAGE_SIZE;
 1002d8c:	e3a03a01 	mov	r3, #4096	; 0x1000
 1002d90:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

        for (j = 0; j < ARRAY_COUNT(alignopt); ++j)
 1002d94:	e3a03000 	mov	r3, #0
 1002d98:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1002d9c:	ea000019 	b	1002e08 <alt_mmu_va_space_create+0x394>
        {
            if ( (va & (alignopt[j] - 1)) ==
 1002da0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1002da4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002da8:	e0222003 	eor	r2, r2, r3
 1002dac:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002db0:	e2433004 	sub	r3, r3, #4
 1002db4:	e1a01003 	mov	r1, r3
 1002db8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002dbc:	e1a03103 	lsl	r3, r3, #2
 1002dc0:	e0813003 	add	r3, r1, r3
 1002dc4:	e51330ac 	ldr	r3, [r3, #-172]	; 0xffffff54
 1002dc8:	e2433001 	sub	r3, r3, #1
 1002dcc:	e0033002 	and	r3, r3, r2
 1002dd0:	e3530000 	cmp	r3, #0
 1002dd4:	1a000008 	bne	1002dfc <alt_mmu_va_space_create+0x388>
                 (pa & (alignopt[j] - 1)) )
            {
                relalign = alignopt[j];
 1002dd8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002ddc:	e2433004 	sub	r3, r3, #4
 1002de0:	e1a02003 	mov	r2, r3
 1002de4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002de8:	e1a03103 	lsl	r3, r3, #2
 1002dec:	e0823003 	add	r3, r2, r3
 1002df0:	e51330ac 	ldr	r3, [r3, #-172]	; 0xffffff54
 1002df4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                break;
 1002df8:	ea000005 	b	1002e14 <alt_mmu_va_space_create+0x3a0>
        for (j = 0; j < ARRAY_COUNT(alignopt); ++j)
 1002dfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002e00:	e2833001 	add	r3, r3, #1
 1002e04:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1002e08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002e0c:	e3530002 	cmp	r3, #2
 1002e10:	9affffe2 	bls	1002da0 <alt_mmu_va_space_create+0x32c>
        }

        /* Page the 1 MiB unaligned segment of [va]. Areas requiring page tables
         * should already have those page tables created previously in this
         * function. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
 1002e14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002e18:	e7f33053 	ubfx	r3, r3, #0, #20
 1002e1c:	e3530000 	cmp	r3, #0
 1002e20:	0a00010f 	beq	1003264 <alt_mmu_va_space_create+0x7f0>
        {
            /* This is the size of the memory segment after paging which will cause the [va] to align to a 1 MiB,
             * or up to the size of the region being processed, whichever is smaller. */
            uint32_t segsize = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
 1002e24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002e28:	e7f33053 	ubfx	r3, r3, #0, #20
 1002e2c:	e2633601 	rsb	r3, r3, #1048576	; 0x100000
 1002e30:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 1002e34:	e1520003 	cmp	r2, r3
 1002e38:	31a03002 	movcc	r3, r2
 1002e3c:	21a03003 	movcs	r3, r3
 1002e40:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
 1002e44:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1002e48:	e3530801 	cmp	r3, #65536	; 0x10000
 1002e4c:	3a000101 	bcc	1003258 <alt_mmu_va_space_create+0x7e4>
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
 1002e50:	ea000038 	b	1002f38 <alt_mmu_va_space_create+0x4c4>
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1002e54:	e51b200c 	ldr	r2, [fp, #-12]
 1002e58:	e1a03002 	mov	r3, r2
 1002e5c:	e1a03103 	lsl	r3, r3, #2
 1002e60:	e0833002 	add	r3, r3, r2
 1002e64:	e1a03103 	lsl	r3, r3, #2
 1002e68:	e1a02003 	mov	r2, r3
 1002e6c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002e70:	e2433004 	sub	r3, r3, #4
 1002e74:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002e78:	e0833002 	add	r3, r3, r2
 1002e7c:	e1a01003 	mov	r1, r3
 1002e80:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1002e84:	ebfffe61 	bl	1002810 <alt_mmu_va_space_gen_smallpage>
 1002e88:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1002e8c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002e90:	e2433004 	sub	r3, r3, #4
 1002e94:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002e98:	e5932000 	ldr	r2, [r3]
 1002e9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002ea0:	e1a03a23 	lsr	r3, r3, #20
 1002ea4:	e1a03103 	lsl	r3, r3, #2
 1002ea8:	e0823003 	add	r3, r2, r3
 1002eac:	e5933000 	ldr	r3, [r3]
 1002eb0:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1002eb4:	e3c33003 	bic	r3, r3, #3
 1002eb8:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1002ebc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002ec0:	e1a03623 	lsr	r3, r3, #12
 1002ec4:	e6ef3073 	uxtb	r3, r3
 1002ec8:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8

                    /* Detect if an existing non-fault region has already been created.
                     * We cannot detect if a fault region is requested and a region description is already a fault,
                     * which it is by default. */
                    if (pagetable[ptindex] != 0)
 1002ecc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
 1002ed0:	e1a03103 	lsl	r3, r3, #2
 1002ed4:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
 1002ed8:	e0823003 	add	r3, r2, r3
 1002edc:	e5933000 	ldr	r3, [r3]
 1002ee0:	e3530000 	cmp	r3, #0
 1002ee4:	0a000001 	beq	1002ef0 <alt_mmu_va_space_create+0x47c>
                    {
                        return ALT_E_ERROR;
 1002ee8:	e3e03000 	mvn	r3, #0
 1002eec:	ea000253 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 1002ef0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
 1002ef4:	e1a03103 	lsl	r3, r3, #2
 1002ef8:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
 1002efc:	e0823003 	add	r3, r2, r3
 1002f00:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
 1002f04:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 1002f08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002f0c:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1002f10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 1002f14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002f18:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1002f1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 1002f20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1002f24:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1002f28:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 1002f2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1002f30:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1002f34:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
 1002f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002f3c:	e6ff3073 	uxth	r3, r3
 1002f40:	e3530000 	cmp	r3, #0
 1002f44:	0a000049 	beq	1003070 <alt_mmu_va_space_create+0x5fc>
 1002f48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1002f4c:	e3530a01 	cmp	r3, #4096	; 0x1000
 1002f50:	2affffbf 	bcs	1002e54 <alt_mmu_va_space_create+0x3e0>
                }

                /* Use large pages for the rest of the 64 KiB aligned areas. */
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
 1002f54:	ea000045 	b	1003070 <alt_mmu_va_space_create+0x5fc>
                {
                    uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);
 1002f58:	e51b200c 	ldr	r2, [fp, #-12]
 1002f5c:	e1a03002 	mov	r3, r2
 1002f60:	e1a03103 	lsl	r3, r3, #2
 1002f64:	e0833002 	add	r3, r3, r2
 1002f68:	e1a03103 	lsl	r3, r3, #2
 1002f6c:	e1a02003 	mov	r2, r3
 1002f70:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002f74:	e2433004 	sub	r3, r3, #4
 1002f78:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1002f7c:	e0833002 	add	r3, r3, r2
 1002f80:	e1a01003 	mov	r1, r3
 1002f84:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1002f88:	ebfffe63 	bl	100291c <alt_mmu_va_space_gen_largepage>
 1002f8c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1002f90:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1002f94:	e2433004 	sub	r3, r3, #4
 1002f98:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1002f9c:	e5932000 	ldr	r2, [r3]
 1002fa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002fa4:	e1a03a23 	lsr	r3, r3, #20
 1002fa8:	e1a03103 	lsl	r3, r3, #2
 1002fac:	e0823003 	add	r3, r2, r3
 1002fb0:	e5933000 	ldr	r3, [r3]
 1002fb4:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1002fb8:	e3c33003 	bic	r3, r3, #3
 1002fbc:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1002fc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1002fc4:	e1a03623 	lsr	r3, r3, #12
 1002fc8:	e6ef3073 	uxtb	r3, r3
 1002fcc:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0

                    for (j = 0; j < 16; ++j)
 1002fd0:	e3a03000 	mov	r3, #0
 1002fd4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1002fd8:	ea000015 	b	1003034 <alt_mmu_va_space_create+0x5c0>
                    {
                        if (pagetable[ptindex + j] != 0)
 1002fdc:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
 1002fe0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1002fe4:	e0823003 	add	r3, r2, r3
 1002fe8:	e1a03103 	lsl	r3, r3, #2
 1002fec:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
 1002ff0:	e0823003 	add	r3, r2, r3
 1002ff4:	e5933000 	ldr	r3, [r3]
 1002ff8:	e3530000 	cmp	r3, #0
 1002ffc:	0a000001 	beq	1003008 <alt_mmu_va_space_create+0x594>
                        {
                            return ALT_E_ERROR;
 1003000:	e3e03000 	mvn	r3, #0
 1003004:	ea00020d 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                        }

                        pagetable[ptindex + j] = desc;
 1003008:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
 100300c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003010:	e0823003 	add	r3, r2, r3
 1003014:	e1a03103 	lsl	r3, r3, #2
 1003018:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
 100301c:	e0823003 	add	r3, r2, r3
 1003020:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1003024:	e5832000 	str	r2, [r3]
                    for (j = 0; j < 16; ++j)
 1003028:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100302c:	e2833001 	add	r3, r3, #1
 1003030:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003034:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003038:	e353000f 	cmp	r3, #15
 100303c:	9affffe6 	bls	1002fdc <alt_mmu_va_space_create+0x568>
                    }

                    va      += ALT_MMU_LARGE_PAGE_SIZE;
 1003040:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003044:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003048:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_LARGE_PAGE_SIZE;
 100304c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003050:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003054:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_LARGE_PAGE_SIZE;
 1003058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 100305c:	e2433801 	sub	r3, r3, #65536	; 0x10000
 1003060:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
 1003064:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003068:	e2433801 	sub	r3, r3, #65536	; 0x10000
 100306c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
 1003070:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003074:	e3530801 	cmp	r3, #65536	; 0x10000
 1003078:	2affffb6 	bcs	1002f58 <alt_mmu_va_space_create+0x4e4>
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 100307c:	ea000038 	b	1003164 <alt_mmu_va_space_create+0x6f0>
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1003080:	e51b200c 	ldr	r2, [fp, #-12]
 1003084:	e1a03002 	mov	r3, r2
 1003088:	e1a03103 	lsl	r3, r3, #2
 100308c:	e0833002 	add	r3, r3, r2
 1003090:	e1a03103 	lsl	r3, r3, #2
 1003094:	e1a02003 	mov	r2, r3
 1003098:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 100309c:	e2433004 	sub	r3, r3, #4
 10030a0:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10030a4:	e0833002 	add	r3, r3, r2
 10030a8:	e1a01003 	mov	r1, r3
 10030ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10030b0:	ebfffdd6 	bl	1002810 <alt_mmu_va_space_gen_smallpage>
 10030b4:	e50b004c 	str	r0, [fp, #-76]	; 0xffffffb4

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10030b8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10030bc:	e2433004 	sub	r3, r3, #4
 10030c0:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10030c4:	e5932000 	ldr	r2, [r3]
 10030c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10030cc:	e1a03a23 	lsr	r3, r3, #20
 10030d0:	e1a03103 	lsl	r3, r3, #2
 10030d4:	e0823003 	add	r3, r2, r3
 10030d8:	e5933000 	ldr	r3, [r3]
 10030dc:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10030e0:	e3c33003 	bic	r3, r3, #3
 10030e4:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 10030e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10030ec:	e1a03623 	lsr	r3, r3, #12
 10030f0:	e6ef3073 	uxtb	r3, r3
 10030f4:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac

                    if (pagetable[ptindex] != 0)
 10030f8:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
 10030fc:	e1a03103 	lsl	r3, r3, #2
 1003100:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
 1003104:	e0823003 	add	r3, r2, r3
 1003108:	e5933000 	ldr	r3, [r3]
 100310c:	e3530000 	cmp	r3, #0
 1003110:	0a000001 	beq	100311c <alt_mmu_va_space_create+0x6a8>
                    {
                        return ALT_E_ERROR;
 1003114:	e3e03000 	mvn	r3, #0
 1003118:	ea0001c8 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 100311c:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
 1003120:	e1a03103 	lsl	r3, r3, #2
 1003124:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
 1003128:	e0823003 	add	r3, r2, r3
 100312c:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
 1003130:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 1003134:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003138:	e2833a01 	add	r3, r3, #4096	; 0x1000
 100313c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 1003140:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003144:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003148:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 100314c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003150:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003154:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 1003158:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100315c:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003160:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 1003164:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003168:	e3530a01 	cmp	r3, #4096	; 0x1000
 100316c:	2affffc3 	bcs	1003080 <alt_mmu_va_space_create+0x60c>
 1003170:	ea00003b 	b	1003264 <alt_mmu_va_space_create+0x7f0>
            else
            {
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1003174:	e51b200c 	ldr	r2, [fp, #-12]
 1003178:	e1a03002 	mov	r3, r2
 100317c:	e1a03103 	lsl	r3, r3, #2
 1003180:	e0833002 	add	r3, r3, r2
 1003184:	e1a03103 	lsl	r3, r3, #2
 1003188:	e1a02003 	mov	r2, r3
 100318c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003190:	e2433004 	sub	r3, r3, #4
 1003194:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1003198:	e0833002 	add	r3, r3, r2
 100319c:	e1a01003 	mov	r1, r3
 10031a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10031a4:	ebfffd99 	bl	1002810 <alt_mmu_va_space_gen_smallpage>
 10031a8:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10031ac:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10031b0:	e2433004 	sub	r3, r3, #4
 10031b4:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10031b8:	e5932000 	ldr	r2, [r3]
 10031bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10031c0:	e1a03a23 	lsr	r3, r3, #20
 10031c4:	e1a03103 	lsl	r3, r3, #2
 10031c8:	e0823003 	add	r3, r2, r3
 10031cc:	e5933000 	ldr	r3, [r3]
 10031d0:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10031d4:	e3c33003 	bic	r3, r3, #3
 10031d8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 10031dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10031e0:	e1a03623 	lsr	r3, r3, #12
 10031e4:	e6ef3073 	uxtb	r3, r3
 10031e8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

                    if (pagetable[ptindex] != 0)
 10031ec:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 10031f0:	e1a03103 	lsl	r3, r3, #2
 10031f4:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 10031f8:	e0823003 	add	r3, r2, r3
 10031fc:	e5933000 	ldr	r3, [r3]
 1003200:	e3530000 	cmp	r3, #0
 1003204:	0a000001 	beq	1003210 <alt_mmu_va_space_create+0x79c>
                    {
                        return ALT_E_ERROR;
 1003208:	e3e03000 	mvn	r3, #0
 100320c:	ea00018b 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 1003210:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 1003214:	e1a03103 	lsl	r3, r3, #2
 1003218:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 100321c:	e0823003 	add	r3, r2, r3
 1003220:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
 1003224:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 1003228:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100322c:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1003230:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 1003234:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003238:	e2833a01 	add	r3, r3, #4096	; 0x1000
 100323c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 1003240:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1003244:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003248:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 100324c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003250:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003254:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 1003258:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 100325c:	e3530a01 	cmp	r3, #4096	; 0x1000
 1003260:	2affffc3 	bcs	1003174 <alt_mmu_va_space_create+0x700>
        /* If [va] and [pa] are relatively 1 MiB aligned and the size remaining
         * to be described is greater than 1 MiB, use sections. */

        /* Otherwise use pagetables for everything remaining. */

        if (   (relalign >= ALT_MMU_SUPERSECTION_SIZE)
 1003264:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1003268:	e3530401 	cmp	r3, #16777216	; 0x1000000
 100326c:	3a0000aa 	bcc	100351c <alt_mmu_va_space_create+0xaa8>
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
 1003270:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003274:	e3530401 	cmp	r3, #16777216	; 0x1000000
 1003278:	3a0000a7 	bcc	100351c <alt_mmu_va_space_create+0xaa8>
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
 100327c:	ea00002d 	b	1003338 <alt_mmu_va_space_create+0x8c4>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 1003280:	e51b200c 	ldr	r2, [fp, #-12]
 1003284:	e1a03002 	mov	r3, r2
 1003288:	e1a03103 	lsl	r3, r3, #2
 100328c:	e0833002 	add	r3, r3, r2
 1003290:	e1a03103 	lsl	r3, r3, #2
 1003294:	e1a02003 	mov	r2, r3
 1003298:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 100329c:	e2433004 	sub	r3, r3, #4
 10032a0:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10032a4:	e0833002 	add	r3, r3, r2
 10032a8:	e1a01003 	mov	r1, r3
 10032ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10032b0:	ebfffcc4 	bl	10025c8 <alt_mmu_va_space_gen_section>
 10032b4:	e50b0064 	str	r0, [fp, #-100]	; 0xffffff9c

                if ((*ttb1)[va >> 20] != 0)
 10032b8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10032bc:	e2433004 	sub	r3, r3, #4
 10032c0:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10032c4:	e5932000 	ldr	r2, [r3]
 10032c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10032cc:	e1a03a23 	lsr	r3, r3, #20
 10032d0:	e1a03103 	lsl	r3, r3, #2
 10032d4:	e0823003 	add	r3, r2, r3
 10032d8:	e5933000 	ldr	r3, [r3]
 10032dc:	e3530000 	cmp	r3, #0
 10032e0:	0a000001 	beq	10032ec <alt_mmu_va_space_create+0x878>
                {
                    return ALT_E_ERROR;
 10032e4:	e3e03000 	mvn	r3, #0
 10032e8:	ea000154 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 10032ec:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10032f0:	e2433004 	sub	r3, r3, #4
 10032f4:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10032f8:	e5932000 	ldr	r2, [r3]
 10032fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003300:	e1a03a23 	lsr	r3, r3, #20
 1003304:	e1a03103 	lsl	r3, r3, #2
 1003308:	e0823003 	add	r3, r2, r3
 100330c:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
 1003310:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 1003314:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003318:	e2833601 	add	r3, r3, #1048576	; 0x100000
 100331c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 1003320:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003324:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1003328:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 100332c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003330:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1003334:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
 1003338:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100333c:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 1003340:	e3530000 	cmp	r3, #0
 1003344:	0a00003e 	beq	1003444 <alt_mmu_va_space_create+0x9d0>
 1003348:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100334c:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003350:	2affffca 	bcs	1003280 <alt_mmu_va_space_create+0x80c>
            }

            /* Use supersections for the 16 MiB aligned areas */
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
 1003354:	ea00003a 	b	1003444 <alt_mmu_va_space_create+0x9d0>
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);
 1003358:	e51b200c 	ldr	r2, [fp, #-12]
 100335c:	e1a03002 	mov	r3, r2
 1003360:	e1a03103 	lsl	r3, r3, #2
 1003364:	e0833002 	add	r3, r3, r2
 1003368:	e1a03103 	lsl	r3, r3, #2
 100336c:	e1a02003 	mov	r2, r3
 1003370:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003374:	e2433004 	sub	r3, r3, #4
 1003378:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 100337c:	e0833002 	add	r3, r3, r2
 1003380:	e1a01003 	mov	r1, r3
 1003384:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003388:	ebfffcd7 	bl	10026ec <alt_mmu_va_space_gen_supersection>
 100338c:	e50b006c 	str	r0, [fp, #-108]	; 0xffffff94

                for (j = 0; j < 16; ++j)
 1003390:	e3a03000 	mov	r3, #0
 1003394:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003398:	ea00001d 	b	1003414 <alt_mmu_va_space_create+0x9a0>
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
 100339c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10033a0:	e2433004 	sub	r3, r3, #4
 10033a4:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10033a8:	e5932000 	ldr	r2, [r3]
 10033ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10033b0:	e1a01a23 	lsr	r1, r3, #20
 10033b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10033b8:	e0813003 	add	r3, r1, r3
 10033bc:	e1a03103 	lsl	r3, r3, #2
 10033c0:	e0823003 	add	r3, r2, r3
 10033c4:	e5933000 	ldr	r3, [r3]
 10033c8:	e3530000 	cmp	r3, #0
 10033cc:	0a000001 	beq	10033d8 <alt_mmu_va_space_create+0x964>
                    {
                        return ALT_E_ERROR;
 10033d0:	e3e03000 	mvn	r3, #0
 10033d4:	ea000119 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
 10033d8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10033dc:	e2433004 	sub	r3, r3, #4
 10033e0:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10033e4:	e5932000 	ldr	r2, [r3]
 10033e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10033ec:	e1a01a23 	lsr	r1, r3, #20
 10033f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10033f4:	e0813003 	add	r3, r1, r3
 10033f8:	e1a03103 	lsl	r3, r3, #2
 10033fc:	e0823003 	add	r3, r2, r3
 1003400:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
 1003404:	e5832000 	str	r2, [r3]
                for (j = 0; j < 16; ++j)
 1003408:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100340c:	e2833001 	add	r3, r3, #1
 1003410:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003414:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1003418:	e353000f 	cmp	r3, #15
 100341c:	9affffde 	bls	100339c <alt_mmu_va_space_create+0x928>
                }

                va   += ALT_MMU_SUPERSECTION_SIZE;
 1003420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003424:	e2833401 	add	r3, r3, #16777216	; 0x1000000
 1003428:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SUPERSECTION_SIZE;
 100342c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003430:	e2833401 	add	r3, r3, #16777216	; 0x1000000
 1003434:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SUPERSECTION_SIZE;
 1003438:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100343c:	e28334ff 	add	r3, r3, #-16777216	; 0xff000000
 1003440:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
 1003444:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003448:	e3530401 	cmp	r3, #16777216	; 0x1000000
 100344c:	2affffc1 	bcs	1003358 <alt_mmu_va_space_create+0x8e4>
            }

            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
 1003450:	ea00002d 	b	100350c <alt_mmu_va_space_create+0xa98>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 1003454:	e51b200c 	ldr	r2, [fp, #-12]
 1003458:	e1a03002 	mov	r3, r2
 100345c:	e1a03103 	lsl	r3, r3, #2
 1003460:	e0833002 	add	r3, r3, r2
 1003464:	e1a03103 	lsl	r3, r3, #2
 1003468:	e1a02003 	mov	r2, r3
 100346c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003470:	e2433004 	sub	r3, r3, #4
 1003474:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1003478:	e0833002 	add	r3, r3, r2
 100347c:	e1a01003 	mov	r1, r3
 1003480:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003484:	ebfffc4f 	bl	10025c8 <alt_mmu_va_space_gen_section>
 1003488:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98

                if ((*ttb1)[va >> 20] != 0)
 100348c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003490:	e2433004 	sub	r3, r3, #4
 1003494:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1003498:	e5932000 	ldr	r2, [r3]
 100349c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10034a0:	e1a03a23 	lsr	r3, r3, #20
 10034a4:	e1a03103 	lsl	r3, r3, #2
 10034a8:	e0823003 	add	r3, r2, r3
 10034ac:	e5933000 	ldr	r3, [r3]
 10034b0:	e3530000 	cmp	r3, #0
 10034b4:	0a000001 	beq	10034c0 <alt_mmu_va_space_create+0xa4c>
                {
                    return ALT_E_ERROR;
 10034b8:	e3e03000 	mvn	r3, #0
 10034bc:	ea0000df 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 10034c0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10034c4:	e2433004 	sub	r3, r3, #4
 10034c8:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10034cc:	e5932000 	ldr	r2, [r3]
 10034d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10034d4:	e1a03a23 	lsr	r3, r3, #20
 10034d8:	e1a03103 	lsl	r3, r3, #2
 10034dc:	e0823003 	add	r3, r2, r3
 10034e0:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
 10034e4:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 10034e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10034ec:	e2833601 	add	r3, r3, #1048576	; 0x100000
 10034f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 10034f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10034f8:	e2833601 	add	r3, r3, #1048576	; 0x100000
 10034fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 1003500:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003504:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1003508:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SECTION_SIZE)
 100350c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003510:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003514:	2affffce 	bcs	1003454 <alt_mmu_va_space_create+0x9e0>
        if (   (relalign >= ALT_MMU_SUPERSECTION_SIZE)
 1003518:	ea000037 	b	10035fc <alt_mmu_va_space_create+0xb88>
            }
        }
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
 100351c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1003520:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003524:	3a000034 	bcc	10035fc <alt_mmu_va_space_create+0xb88>
                 && (size     >= ALT_MMU_SECTION_SIZE))
 1003528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100352c:	e3530601 	cmp	r3, #1048576	; 0x100000
 1003530:	3a000031 	bcc	10035fc <alt_mmu_va_space_create+0xb88>
        {
            /* No supersection possible. Use regular sections only. */

            while (size >= ALT_MMU_SECTION_SIZE)
 1003534:	ea00002d 	b	10035f0 <alt_mmu_va_space_create+0xb7c>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 1003538:	e51b200c 	ldr	r2, [fp, #-12]
 100353c:	e1a03002 	mov	r3, r2
 1003540:	e1a03103 	lsl	r3, r3, #2
 1003544:	e0833002 	add	r3, r3, r2
 1003548:	e1a03103 	lsl	r3, r3, #2
 100354c:	e1a02003 	mov	r2, r3
 1003550:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003554:	e2433004 	sub	r3, r3, #4
 1003558:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 100355c:	e0833002 	add	r3, r3, r2
 1003560:	e1a01003 	mov	r1, r3
 1003564:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003568:	ebfffc16 	bl	10025c8 <alt_mmu_va_space_gen_section>
 100356c:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90

                if ((*ttb1)[va >> 20] != 0)
 1003570:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003574:	e2433004 	sub	r3, r3, #4
 1003578:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 100357c:	e5932000 	ldr	r2, [r3]
 1003580:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003584:	e1a03a23 	lsr	r3, r3, #20
 1003588:	e1a03103 	lsl	r3, r3, #2
 100358c:	e0823003 	add	r3, r2, r3
 1003590:	e5933000 	ldr	r3, [r3]
 1003594:	e3530000 	cmp	r3, #0
 1003598:	0a000001 	beq	10035a4 <alt_mmu_va_space_create+0xb30>
                {
                    return ALT_E_ERROR;
 100359c:	e3e03000 	mvn	r3, #0
 10035a0:	ea0000a6 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 10035a4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10035a8:	e2433004 	sub	r3, r3, #4
 10035ac:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10035b0:	e5932000 	ldr	r2, [r3]
 10035b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10035b8:	e1a03a23 	lsr	r3, r3, #20
 10035bc:	e1a03103 	lsl	r3, r3, #2
 10035c0:	e0823003 	add	r3, r2, r3
 10035c4:	e51b2070 	ldr	r2, [fp, #-112]	; 0xffffff90
 10035c8:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 10035cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10035d0:	e2833601 	add	r3, r3, #1048576	; 0x100000
 10035d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 10035d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10035dc:	e2833601 	add	r3, r3, #1048576	; 0x100000
 10035e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 10035e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10035e8:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 10035ec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SECTION_SIZE)
 10035f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10035f4:	e3530601 	cmp	r3, #1048576	; 0x100000
 10035f8:	2affffce 	bcs	1003538 <alt_mmu_va_space_create+0xac4>

        /* The remainder should be [va] 1 MiB aligned segment not able to use
         * sections or supersections. Mark that region as pagetable. */

        /* Use large pages if it is suitable. */
        if ((relalign >= ALT_MMU_LARGE_PAGE_SIZE) && (size >= ALT_MMU_LARGE_PAGE_SIZE))
 10035fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1003600:	e3530801 	cmp	r3, #65536	; 0x10000
 1003604:	3a000080 	bcc	100380c <alt_mmu_va_space_create+0xd98>
 1003608:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100360c:	e3530801 	cmp	r3, #65536	; 0x10000
 1003610:	3a00007d 	bcc	100380c <alt_mmu_va_space_create+0xd98>
        {
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
 1003614:	ea000042 	b	1003724 <alt_mmu_va_space_create+0xcb0>
            {
                uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);
 1003618:	e51b200c 	ldr	r2, [fp, #-12]
 100361c:	e1a03002 	mov	r3, r2
 1003620:	e1a03103 	lsl	r3, r3, #2
 1003624:	e0833002 	add	r3, r3, r2
 1003628:	e1a03103 	lsl	r3, r3, #2
 100362c:	e1a02003 	mov	r2, r3
 1003630:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003634:	e2433004 	sub	r3, r3, #4
 1003638:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 100363c:	e0833002 	add	r3, r3, r2
 1003640:	e1a01003 	mov	r1, r3
 1003644:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003648:	ebfffcb3 	bl	100291c <alt_mmu_va_space_gen_largepage>
 100364c:	e50b0074 	str	r0, [fp, #-116]	; 0xffffff8c

                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1003650:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003654:	e2433004 	sub	r3, r3, #4
 1003658:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 100365c:	e5932000 	ldr	r2, [r3]
 1003660:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003664:	e1a03a23 	lsr	r3, r3, #20
 1003668:	e1a03103 	lsl	r3, r3, #2
 100366c:	e0823003 	add	r3, r2, r3
 1003670:	e5933000 	ldr	r3, [r3]
 1003674:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1003678:	e3c33003 	bic	r3, r3, #3
 100367c:	e50b3078 	str	r3, [fp, #-120]	; 0xffffff88
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1003680:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003684:	e1a03623 	lsr	r3, r3, #12
 1003688:	e6ef3073 	uxtb	r3, r3
 100368c:	e50b307c 	str	r3, [fp, #-124]	; 0xffffff84

                for (j = 0; j < 16; ++j)
 1003690:	e3a03000 	mov	r3, #0
 1003694:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1003698:	ea000015 	b	10036f4 <alt_mmu_va_space_create+0xc80>
                {
                    if (pagetable[ptindex + j] != 0)
 100369c:	e51b207c 	ldr	r2, [fp, #-124]	; 0xffffff84
 10036a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10036a4:	e0823003 	add	r3, r2, r3
 10036a8:	e1a03103 	lsl	r3, r3, #2
 10036ac:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
 10036b0:	e0823003 	add	r3, r2, r3
 10036b4:	e5933000 	ldr	r3, [r3]
 10036b8:	e3530000 	cmp	r3, #0
 10036bc:	0a000001 	beq	10036c8 <alt_mmu_va_space_create+0xc54>
                    {
                        return ALT_E_ERROR;
 10036c0:	e3e03000 	mvn	r3, #0
 10036c4:	ea00005d 	b	1003840 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex + j] = desc;
 10036c8:	e51b207c 	ldr	r2, [fp, #-124]	; 0xffffff84
 10036cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10036d0:	e0823003 	add	r3, r2, r3
 10036d4:	e1a03103 	lsl	r3, r3, #2
 10036d8:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
 10036dc:	e0823003 	add	r3, r2, r3
 10036e0:	e51b2074 	ldr	r2, [fp, #-116]	; 0xffffff8c
 10036e4:	e5832000 	str	r2, [r3]
                for (j = 0; j < 16; ++j)
 10036e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10036ec:	e2833001 	add	r3, r3, #1
 10036f0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 10036f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10036f8:	e353000f 	cmp	r3, #15
 10036fc:	9affffe6 	bls	100369c <alt_mmu_va_space_create+0xc28>
                }

                va   += ALT_MMU_LARGE_PAGE_SIZE;
 1003700:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003704:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003708:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
 100370c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003710:	e2833801 	add	r3, r3, #65536	; 0x10000
 1003714:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_LARGE_PAGE_SIZE;
 1003718:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100371c:	e2433801 	sub	r3, r3, #65536	; 0x10000
 1003720:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
 1003724:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003728:	e3530801 	cmp	r3, #65536	; 0x10000
 100372c:	2affffb9 	bcs	1003618 <alt_mmu_va_space_create+0xba4>
            }
        }

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
 1003730:	ea000035 	b	100380c <alt_mmu_va_space_create+0xd98>
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 1003734:	e51b200c 	ldr	r2, [fp, #-12]
 1003738:	e1a03002 	mov	r3, r2
 100373c:	e1a03103 	lsl	r3, r3, #2
 1003740:	e0833002 	add	r3, r3, r2
 1003744:	e1a03103 	lsl	r3, r3, #2
 1003748:	e1a02003 	mov	r2, r3
 100374c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003750:	e2433004 	sub	r3, r3, #4
 1003754:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1003758:	e0833002 	add	r3, r3, r2
 100375c:	e1a01003 	mov	r1, r3
 1003760:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1003764:	ebfffc29 	bl	1002810 <alt_mmu_va_space_gen_smallpage>
 1003768:	e50b0080 	str	r0, [fp, #-128]	; 0xffffff80

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 100376c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003770:	e2433004 	sub	r3, r3, #4
 1003774:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1003778:	e5932000 	ldr	r2, [r3]
 100377c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003780:	e1a03a23 	lsr	r3, r3, #20
 1003784:	e1a03103 	lsl	r3, r3, #2
 1003788:	e0823003 	add	r3, r2, r3
 100378c:	e5933000 	ldr	r3, [r3]
 1003790:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1003794:	e3c33003 	bic	r3, r3, #3
 1003798:	e50b3084 	str	r3, [fp, #-132]	; 0xffffff7c
            uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 100379c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10037a0:	e1a03623 	lsr	r3, r3, #12
 10037a4:	e6ef3073 	uxtb	r3, r3
 10037a8:	e50b3088 	str	r3, [fp, #-136]	; 0xffffff78

            if (pagetable[ptindex] != 0)
 10037ac:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
 10037b0:	e1a03103 	lsl	r3, r3, #2
 10037b4:	e51b2084 	ldr	r2, [fp, #-132]	; 0xffffff7c
 10037b8:	e0823003 	add	r3, r2, r3
 10037bc:	e5933000 	ldr	r3, [r3]
 10037c0:	e3530000 	cmp	r3, #0
 10037c4:	0a000001 	beq	10037d0 <alt_mmu_va_space_create+0xd5c>
            {
                return ALT_E_ERROR;
 10037c8:	e3e03000 	mvn	r3, #0
 10037cc:	ea00001b 	b	1003840 <alt_mmu_va_space_create+0xdcc>
            }

            pagetable[ptindex] = desc;
 10037d0:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
 10037d4:	e1a03103 	lsl	r3, r3, #2
 10037d8:	e51b2084 	ldr	r2, [fp, #-132]	; 0xffffff7c
 10037dc:	e0823003 	add	r3, r2, r3
 10037e0:	e51b2080 	ldr	r2, [fp, #-128]	; 0xffffff80
 10037e4:	e5832000 	str	r2, [r3]

            va   += ALT_MMU_SMALL_PAGE_SIZE;
 10037e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10037ec:	e2833a01 	add	r3, r3, #4096	; 0x1000
 10037f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            pa   += ALT_MMU_SMALL_PAGE_SIZE;
 10037f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10037f8:	e2833a01 	add	r3, r3, #4096	; 0x1000
 10037fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            size -= ALT_MMU_SMALL_PAGE_SIZE;
 1003800:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003804:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1003808:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
 100380c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003810:	e3530a01 	cmp	r3, #4096	; 0x1000
 1003814:	2affffc6 	bcs	1003734 <alt_mmu_va_space_create+0xcc0>
    for (i = 0; i < num_mem_regions; ++i)
 1003818:	e51b300c 	ldr	r3, [fp, #-12]
 100381c:	e2833001 	add	r3, r3, #1
 1003820:	e50b300c 	str	r3, [fp, #-12]
 1003824:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1003828:	e2433004 	sub	r3, r3, #4
 100382c:	e51b200c 	ldr	r2, [fp, #-12]
 1003830:	e51330bc 	ldr	r3, [r3, #-188]	; 0xffffff44
 1003834:	e1520003 	cmp	r2, r3
 1003838:	3afffd27 	bcc	1002cdc <alt_mmu_va_space_create+0x268>
        }

    } /* for (size_t i = 0; i < num_mem_regions; ++i) */

    return ALT_E_SUCCESS;
 100383c:	e3a03000 	mov	r3, #0
}
 1003840:	e1a00003 	mov	r0, r3
 1003844:	e24bd004 	sub	sp, fp, #4
 1003848:	e8bd8800 	pop	{fp, pc}

0100384c <alt_mmu_va_space_enable>:

ALT_STATUS_CODE alt_mmu_va_space_enable(const uint32_t * ttb1)
{
 100384c:	e92d4800 	push	{fp, lr}
 1003850:	e28db004 	add	fp, sp, #4
 1003854:	e24dd020 	sub	sp, sp, #32
 1003858:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
 100385c:	e3a03000 	mov	r3, #0
 1003860:	e50b3008 	str	r3, [fp, #-8]

    /* Set TTBCR to use N=0 */
    if (status == ALT_E_SUCCESS)
 1003864:	e51b3008 	ldr	r3, [fp, #-8]
 1003868:	e3530000 	cmp	r3, #0
 100386c:	1a00000b 	bne	10038a0 <alt_mmu_va_space_enable+0x54>
    {
        status = alt_mmu_TTBCR_set(true,
 1003870:	e3a02000 	mov	r2, #0
 1003874:	e3a01001 	mov	r1, #1
 1003878:	e3a00001 	mov	r0, #1
 100387c:	ebfff9c9 	bl	1001fa8 <alt_mmu_TTBCR_set>
 1003880:	e50b0008 	str	r0, [fp, #-8]
                                   true,
                                   0);
        if (status != ALT_E_SUCCESS)
 1003884:	e51b3008 	ldr	r3, [fp, #-8]
 1003888:	e3530000 	cmp	r3, #0
 100388c:	0a000003 	beq	10038a0 <alt_mmu_va_space_enable+0x54>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1003890:	e3a01d15 	mov	r1, #1344	; 0x540
 1003894:	e305030c 	movw	r0, #21260	; 0x530c
 1003898:	e3400100 	movt	r0, #256	; 0x100
 100389c:	ebfff942 	bl	1001dac <null_printf>
        }
    }

    /* Set TTBR0 to use ttb1 */

    if (status == ALT_E_SUCCESS)
 10038a0:	e51b3008 	ldr	r3, [fp, #-8]
 10038a4:	e3530000 	cmp	r3, #0
 10038a8:	1a000009 	bne	10038d4 <alt_mmu_va_space_enable+0x88>
    {
        status = alt_mmu_TTBR0_set(ttb1);
 10038ac:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 10038b0:	ebfff984 	bl	1001ec8 <alt_mmu_TTBR0_set>
 10038b4:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 10038b8:	e51b3008 	ldr	r3, [fp, #-8]
 10038bc:	e3530000 	cmp	r3, #0
 10038c0:	0a000003 	beq	10038d4 <alt_mmu_va_space_enable+0x88>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 10038c4:	e300154b 	movw	r1, #1355	; 0x54b
 10038c8:	e305030c 	movw	r0, #21260	; 0x530c
 10038cc:	e3400100 	movt	r0, #256	; 0x100
 10038d0:	ebfff935 	bl	1001dac <null_printf>
        }
    }

    /* Configure DACRs to be client domain. */

    if (status == ALT_E_SUCCESS)
 10038d4:	e51b3008 	ldr	r3, [fp, #-8]
 10038d8:	e3530000 	cmp	r3, #0
 10038dc:	1a000019 	bne	1003948 <alt_mmu_va_space_enable+0xfc>
    {
        int i;
        ALT_MMU_DAP_t domain_ap[16];
        for (i = 0; i < 16; ++i)
 10038e0:	e3a03000 	mov	r3, #0
 10038e4:	e50b300c 	str	r3, [fp, #-12]
 10038e8:	ea000007 	b	100390c <alt_mmu_va_space_enable+0xc0>
        {
            domain_ap[i] = ALT_MMU_DAP_CLIENT;
 10038ec:	e24b201c 	sub	r2, fp, #28
 10038f0:	e51b300c 	ldr	r3, [fp, #-12]
 10038f4:	e0823003 	add	r3, r2, r3
 10038f8:	e3a02001 	mov	r2, #1
 10038fc:	e5c32000 	strb	r2, [r3]
        for (i = 0; i < 16; ++i)
 1003900:	e51b300c 	ldr	r3, [fp, #-12]
 1003904:	e2833001 	add	r3, r3, #1
 1003908:	e50b300c 	str	r3, [fp, #-12]
 100390c:	e51b300c 	ldr	r3, [fp, #-12]
 1003910:	e353000f 	cmp	r3, #15
 1003914:	dafffff4 	ble	10038ec <alt_mmu_va_space_enable+0xa0>
        }

        status = alt_mmu_DACR_set(domain_ap, 16);
 1003918:	e24b301c 	sub	r3, fp, #28
 100391c:	e3a01010 	mov	r1, #16
 1003920:	e1a00003 	mov	r0, r3
 1003924:	ebfff9cc 	bl	100205c <alt_mmu_DACR_set>
 1003928:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 100392c:	e51b3008 	ldr	r3, [fp, #-8]
 1003930:	e3530000 	cmp	r3, #0
 1003934:	0a000003 	beq	1003948 <alt_mmu_va_space_enable+0xfc>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1003938:	e300155d 	movw	r1, #1373	; 0x55d
 100393c:	e305030c 	movw	r0, #21260	; 0x530c
 1003940:	e3400100 	movt	r0, #256	; 0x100
 1003944:	ebfff918 	bl	1001dac <null_printf>
        }
    }

    /* Enable MMU (implicitly invalidates TLBs) */

    if (status == ALT_E_SUCCESS)
 1003948:	e51b3008 	ldr	r3, [fp, #-8]
 100394c:	e3530000 	cmp	r3, #0
 1003950:	1a000008 	bne	1003978 <alt_mmu_va_space_enable+0x12c>
    {
        status = alt_mmu_enable();
 1003954:	ebfff947 	bl	1001e78 <alt_mmu_enable>
 1003958:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 100395c:	e51b3008 	ldr	r3, [fp, #-8]
 1003960:	e3530000 	cmp	r3, #0
 1003964:	0a000003 	beq	1003978 <alt_mmu_va_space_enable+0x12c>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1003968:	e3001568 	movw	r1, #1384	; 0x568
 100396c:	e305030c 	movw	r0, #21260	; 0x530c
 1003970:	e3400100 	movt	r0, #256	; 0x100
 1003974:	ebfff90c 	bl	1001dac <null_printf>
        }
    }

    return status;
 1003978:	e51b3008 	ldr	r3, [fp, #-8]
}
 100397c:	e1a00003 	mov	r0, r3
 1003980:	e24bd004 	sub	sp, fp, #4
 1003984:	e8bd8800 	pop	{fp, pc}

01003988 <alt_printf>:
}

#ifndef PRINTF_HOST
extern FILE *DEFAULT_TERM;
int alt_printf(const char *format, ...)
{
 1003988:	e92d000f 	push	{r0, r1, r2, r3}
 100398c:	e92d4800 	push	{fp, lr}
 1003990:	e28db004 	add	fp, sp, #4
 1003994:	e24dd008 	sub	sp, sp, #8
    int rc;
 
    va_list args;
    va_start( args, format );
 1003998:	e28b3008 	add	r3, fp, #8
 100399c:	e50b300c 	str	r3, [fp, #-12]
    rc=alt_vfprintf(DEFAULT_TERM, format, args);
 10039a0:	e3053624 	movw	r3, #22052	; 0x5624
 10039a4:	e3403100 	movt	r3, #256	; 0x100
 10039a8:	e5933000 	ldr	r3, [r3]
 10039ac:	e51b200c 	ldr	r2, [fp, #-12]
 10039b0:	e59b1004 	ldr	r1, [fp, #4]
 10039b4:	e1a00003 	mov	r0, r3
 10039b8:	eb000311 	bl	1004604 <alt_vfprintf>
 10039bc:	e50b0008 	str	r0, [fp, #-8]
    va_end(args);
 
    return rc;
 10039c0:	e51b3008 	ldr	r3, [fp, #-8]
}
 10039c4:	e1a00003 	mov	r0, r3
 10039c8:	e24bd004 	sub	sp, fp, #4
 10039cc:	e8bd4800 	pop	{fp, lr}
 10039d0:	e28dd010 	add	sp, sp, #16
 10039d4:	e12fff1e 	bx	lr

010039d8 <cput>:
    * @param pinfo            ALT_PRINTF_MEM_INFO_t structure
    * @param count            var to keep track of characters written
    * @return                 None 
    */
static void cput(ALT_PRINTF_MEM_INFO_t *pinfo, int * count, char c)
{
 10039d8:	e92d4800 	push	{fp, lr}
 10039dc:	e28db004 	add	fp, sp, #4
 10039e0:	e24dd010 	sub	sp, sp, #16
 10039e4:	e50b0008 	str	r0, [fp, #-8]
 10039e8:	e50b100c 	str	r1, [fp, #-12]
 10039ec:	e1a03002 	mov	r3, r2
 10039f0:	e54b300d 	strb	r3, [fp, #-13]
    if (pinfo!=NULL) 
 10039f4:	e51b3008 	ldr	r3, [fp, #-8]
 10039f8:	e3530000 	cmp	r3, #0
 10039fc:	0a000005 	beq	1003a18 <cput+0x40>
    {
      pinfo->putc_function(c,(FILE *)pinfo);
 1003a00:	e51b3008 	ldr	r3, [fp, #-8]
 1003a04:	e5933000 	ldr	r3, [r3]
 1003a08:	e55b200d 	ldrb	r2, [fp, #-13]
 1003a0c:	e51b1008 	ldr	r1, [fp, #-8]
 1003a10:	e1a00002 	mov	r0, r2
 1003a14:	e12fff33 	blx	r3
    }
    if (c!=0) *count+=1;
 1003a18:	e55b300d 	ldrb	r3, [fp, #-13]
 1003a1c:	e3530000 	cmp	r3, #0
 1003a20:	0a000004 	beq	1003a38 <cput+0x60>
 1003a24:	e51b300c 	ldr	r3, [fp, #-12]
 1003a28:	e5933000 	ldr	r3, [r3]
 1003a2c:	e2832001 	add	r2, r3, #1
 1003a30:	e51b300c 	ldr	r3, [fp, #-12]
 1003a34:	e5832000 	str	r2, [r3]
}
 1003a38:	e320f000 	nop	{0}
 1003a3c:	e24bd004 	sub	sp, fp, #4
 1003a40:	e8bd8800 	pop	{fp, pc}

01003a44 <nextchar>:
    * @API Type:              Internal
    * @param index            index of character to return
    * @return                 next character from format string 
    */
static char nextchar(const char *format,int * index)
{
 1003a44:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1003a48:	e28db000 	add	fp, sp, #0
 1003a4c:	e24dd014 	sub	sp, sp, #20
 1003a50:	e50b0010 	str	r0, [fp, #-16]
 1003a54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    char c;
    
    c  = *(format + *index);
 1003a58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003a5c:	e5933000 	ldr	r3, [r3]
 1003a60:	e1a02003 	mov	r2, r3
 1003a64:	e51b3010 	ldr	r3, [fp, #-16]
 1003a68:	e0833002 	add	r3, r3, r2
 1003a6c:	e5d33000 	ldrb	r3, [r3]
 1003a70:	e54b3005 	strb	r3, [fp, #-5]
    *index+=1;
 1003a74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003a78:	e5933000 	ldr	r3, [r3]
 1003a7c:	e2832001 	add	r2, r3, #1
 1003a80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003a84:	e5832000 	str	r2, [r3]
    
    return c;
 1003a88:	e55b3005 	ldrb	r3, [fp, #-5]
}
 1003a8c:	e1a00003 	mov	r0, r3
 1003a90:	e28bd000 	add	sp, fp, #0
 1003a94:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1003a98:	e12fff1e 	bx	lr

01003a9c <getdec>:
    * @param val              decimal value returned
    * @param c                current character pointed to be index
    * @return                 next character after decimal string 
    */
static char getdec(const char *format,int * index, int * val, char c)
{ 
 1003a9c:	e92d4800 	push	{fp, lr}
 1003aa0:	e28db004 	add	fp, sp, #4
 1003aa4:	e24dd010 	sub	sp, sp, #16
 1003aa8:	e50b0008 	str	r0, [fp, #-8]
 1003aac:	e50b100c 	str	r1, [fp, #-12]
 1003ab0:	e50b2010 	str	r2, [fp, #-16]
 1003ab4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   *val=0;
 1003ab8:	e51b3010 	ldr	r3, [fp, #-16]
 1003abc:	e3a02000 	mov	r2, #0
 1003ac0:	e5832000 	str	r2, [r3]
   while ((c >= '0') && (c <='9'))
 1003ac4:	ea000010 	b	1003b0c <getdec+0x70>
   {
     *val=*val * 10 + (c - '0');
 1003ac8:	e51b3010 	ldr	r3, [fp, #-16]
 1003acc:	e5932000 	ldr	r2, [r3]
 1003ad0:	e1a03002 	mov	r3, r2
 1003ad4:	e1a03103 	lsl	r3, r3, #2
 1003ad8:	e0833002 	add	r3, r3, r2
 1003adc:	e1a03083 	lsl	r3, r3, #1
 1003ae0:	e1a02003 	mov	r2, r3
 1003ae4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1003ae8:	e2433030 	sub	r3, r3, #48	; 0x30
 1003aec:	e0822003 	add	r2, r2, r3
 1003af0:	e51b3010 	ldr	r3, [fp, #-16]
 1003af4:	e5832000 	str	r2, [r3]
     c = nextchar(format,index);
 1003af8:	e51b100c 	ldr	r1, [fp, #-12]
 1003afc:	e51b0008 	ldr	r0, [fp, #-8]
 1003b00:	ebffffcf 	bl	1003a44 <nextchar>
 1003b04:	e1a03000 	mov	r3, r0
 1003b08:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   while ((c >= '0') && (c <='9'))
 1003b0c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1003b10:	e353002f 	cmp	r3, #47	; 0x2f
 1003b14:	9a000002 	bls	1003b24 <getdec+0x88>
 1003b18:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 1003b1c:	e3530039 	cmp	r3, #57	; 0x39
 1003b20:	9affffe8 	bls	1003ac8 <getdec+0x2c>
   }  
   
   return c;
 1003b24:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
}
 1003b28:	e1a00003 	mov	r0, r3
 1003b2c:	e24bd004 	sub	sp, fp, #4
 1003b30:	e8bd8800 	pop	{fp, pc}

01003b34 <int_to_asc>:
    * @param stg              string to be returned. must be at least 21 bytes.
    * @param isint            if 1 indicates val is signed, otherwise unsigned
    * @return                 number of characters in string 
    */
static int int_to_asc(int64_t val,char * stg,int isint)
{
 1003b34:	e92d4800 	push	{fp, lr}
 1003b38:	e28db004 	add	fp, sp, #4
 1003b3c:	e24dd018 	sub	sp, sp, #24
 1003b40:	e14b01f4 	strd	r0, [fp, #-20]	; 0xffffffec
 1003b44:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 1003b48:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int count=20,i=0;
 1003b4c:	e3a03014 	mov	r3, #20
 1003b50:	e50b3008 	str	r3, [fp, #-8]
 1003b54:	e3a03000 	mov	r3, #0
 1003b58:	e50b300c 	str	r3, [fp, #-12]
    
    if (isint && (val < 0)) 
 1003b5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1003b60:	e3530000 	cmp	r3, #0
 1003b64:	0a00001d 	beq	1003be0 <int_to_asc+0xac>
 1003b68:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
 1003b6c:	e3520000 	cmp	r2, #0
 1003b70:	e2d33000 	sbcs	r3, r3, #0
 1003b74:	aa000019 	bge	1003be0 <int_to_asc+0xac>
    {
      val = ~val + 1;
 1003b78:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
 1003b7c:	e2722000 	rsbs	r2, r2, #0
 1003b80:	e2e33000 	rsc	r3, r3, #0
 1003b84:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
    }
    
    while ((uint64_t)val > 0)
 1003b88:	ea000014 	b	1003be0 <int_to_asc+0xac>
    {
      stg[count]='0' + ((uint64_t)val%10);
 1003b8c:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 1003b90:	e3a0200a 	mov	r2, #10
 1003b94:	e3a03000 	mov	r3, #0
 1003b98:	eb000555 	bl	10050f4 <__aeabi_uldivmod>
 1003b9c:	e6ef2072 	uxtb	r2, r2
 1003ba0:	e51b3008 	ldr	r3, [fp, #-8]
 1003ba4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 1003ba8:	e0813003 	add	r3, r1, r3
 1003bac:	e2822030 	add	r2, r2, #48	; 0x30
 1003bb0:	e6ef2072 	uxtb	r2, r2
 1003bb4:	e5c32000 	strb	r2, [r3]
      val=(uint64_t)val/10;
 1003bb8:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
 1003bbc:	e3a0200a 	mov	r2, #10
 1003bc0:	e3a03000 	mov	r3, #0
 1003bc4:	eb00054a 	bl	10050f4 <__aeabi_uldivmod>
 1003bc8:	e1a02000 	mov	r2, r0
 1003bcc:	e1a03001 	mov	r3, r1
 1003bd0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
      count--;
 1003bd4:	e51b3008 	ldr	r3, [fp, #-8]
 1003bd8:	e2433001 	sub	r3, r3, #1
 1003bdc:	e50b3008 	str	r3, [fp, #-8]
    while ((uint64_t)val > 0)
 1003be0:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
 1003be4:	e1923003 	orrs	r3, r2, r3
 1003be8:	1affffe7 	bne	1003b8c <int_to_asc+0x58>
    }
    for (i=0;i<(20-count);i++)
 1003bec:	e3a03000 	mov	r3, #0
 1003bf0:	e50b300c 	str	r3, [fp, #-12]
 1003bf4:	ea00000e 	b	1003c34 <int_to_asc+0x100>
    {
      stg[i]=stg[ count + 1 + i];
 1003bf8:	e51b3008 	ldr	r3, [fp, #-8]
 1003bfc:	e2832001 	add	r2, r3, #1
 1003c00:	e51b300c 	ldr	r3, [fp, #-12]
 1003c04:	e0823003 	add	r3, r2, r3
 1003c08:	e1a02003 	mov	r2, r3
 1003c0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003c10:	e0832002 	add	r2, r3, r2
 1003c14:	e51b300c 	ldr	r3, [fp, #-12]
 1003c18:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 1003c1c:	e0813003 	add	r3, r1, r3
 1003c20:	e5d22000 	ldrb	r2, [r2]
 1003c24:	e5c32000 	strb	r2, [r3]
    for (i=0;i<(20-count);i++)
 1003c28:	e51b300c 	ldr	r3, [fp, #-12]
 1003c2c:	e2833001 	add	r3, r3, #1
 1003c30:	e50b300c 	str	r3, [fp, #-12]
 1003c34:	e51b3008 	ldr	r3, [fp, #-8]
 1003c38:	e2633014 	rsb	r3, r3, #20
 1003c3c:	e51b200c 	ldr	r2, [fp, #-12]
 1003c40:	e1520003 	cmp	r2, r3
 1003c44:	baffffeb 	blt	1003bf8 <int_to_asc+0xc4>
    }
    stg[i]=0;
 1003c48:	e51b300c 	ldr	r3, [fp, #-12]
 1003c4c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 1003c50:	e0823003 	add	r3, r2, r3
 1003c54:	e3a02000 	mov	r2, #0
 1003c58:	e5c32000 	strb	r2, [r3]
    
    return (20-count);
 1003c5c:	e51b3008 	ldr	r3, [fp, #-8]
 1003c60:	e2633014 	rsb	r3, r3, #20
}     
 1003c64:	e1a00003 	mov	r0, r3
 1003c68:	e24bd004 	sub	sp, fp, #4
 1003c6c:	e8bd8800 	pop	{fp, pc}

01003c70 <hex_to_asc>:
    * @param lengthmod        printf lengthmod format string specifier
    
    * @return                 number of characters in string 
    */
static int hex_to_asc(int64_t val,char * stg,char specifier,int lengthmod)
{
 1003c70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1003c74:	e28db000 	add	fp, sp, #0
 1003c78:	e24dd02c 	sub	sp, sp, #44	; 0x2c
 1003c7c:	e14b02f4 	strd	r0, [fp, #-36]	; 0xffffffdc
 1003c80:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
 1003c84:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
    int count=0,count2=0,startcount=0;  
 1003c88:	e3a03000 	mov	r3, #0
 1003c8c:	e50b3008 	str	r3, [fp, #-8]
 1003c90:	e3a03000 	mov	r3, #0
 1003c94:	e50b300c 	str	r3, [fp, #-12]
 1003c98:	e3a03000 	mov	r3, #0
 1003c9c:	e50b3010 	str	r3, [fp, #-16]
    int digits=8,digitvalue;
 1003ca0:	e3a03008 	mov	r3, #8
 1003ca4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
       
    if (specifier=='p') specifier='x';   
 1003ca8:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 1003cac:	e3530070 	cmp	r3, #112	; 0x70
 1003cb0:	1a000001 	bne	1003cbc <hex_to_asc+0x4c>
 1003cb4:	e3a03078 	mov	r3, #120	; 0x78
 1003cb8:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
    if (lengthmod==2)
 1003cbc:	e59b3004 	ldr	r3, [fp, #4]
 1003cc0:	e3530002 	cmp	r3, #2
 1003cc4:	1a000039 	bne	1003db0 <hex_to_asc+0x140>
    {
      digits=16;
 1003cc8:	e3a03010 	mov	r3, #16
 1003ccc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    while (count2 < digits)
 1003cd0:	ea000036 	b	1003db0 <hex_to_asc+0x140>
    {
      digitvalue=(int)(val>>((digits-count2)*4-4)) & 0xf;
 1003cd4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1003cd8:	e51b300c 	ldr	r3, [fp, #-12]
 1003cdc:	e0423003 	sub	r3, r2, r3
 1003ce0:	e2433001 	sub	r3, r3, #1
 1003ce4:	e1a01103 	lsl	r1, r3, #2
 1003ce8:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 1003cec:	e2610020 	rsb	r0, r1, #32
 1003cf0:	e251c020 	subs	ip, r1, #32
 1003cf4:	e1a02132 	lsr	r2, r2, r1
 1003cf8:	e1822013 	orr	r2, r2, r3, lsl r0
 1003cfc:	4a000000 	bmi	1003d04 <hex_to_asc+0x94>
 1003d00:	e1822c53 	orr	r2, r2, r3, asr ip
 1003d04:	e1a03153 	asr	r3, r3, r1
 1003d08:	e1a03002 	mov	r3, r2
 1003d0c:	e203300f 	and	r3, r3, #15
 1003d10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      stg[count]='0' + digitvalue;
 1003d14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003d18:	e6ef2073 	uxtb	r2, r3
 1003d1c:	e51b3008 	ldr	r3, [fp, #-8]
 1003d20:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 1003d24:	e0813003 	add	r3, r1, r3
 1003d28:	e2822030 	add	r2, r2, #48	; 0x30
 1003d2c:	e6ef2072 	uxtb	r2, r2
 1003d30:	e5c32000 	strb	r2, [r3]
      if (digitvalue > 9)
 1003d34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003d38:	e3530009 	cmp	r3, #9
 1003d3c:	da00000a 	ble	1003d6c <hex_to_asc+0xfc>
      {
        stg[count] = 'A' + (digitvalue - 10) + specifier - 'X';
 1003d40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003d44:	e6ef2073 	uxtb	r2, r3
 1003d48:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 1003d4c:	e0823003 	add	r3, r2, r3
 1003d50:	e6ef2073 	uxtb	r2, r3
 1003d54:	e51b3008 	ldr	r3, [fp, #-8]
 1003d58:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 1003d5c:	e0813003 	add	r3, r1, r3
 1003d60:	e2422021 	sub	r2, r2, #33	; 0x21
 1003d64:	e6ef2072 	uxtb	r2, r2
 1003d68:	e5c32000 	strb	r2, [r3]
      }
      if ((stg[count]!='0') || startcount)
 1003d6c:	e51b3008 	ldr	r3, [fp, #-8]
 1003d70:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 1003d74:	e0823003 	add	r3, r2, r3
 1003d78:	e5d33000 	ldrb	r3, [r3]
 1003d7c:	e3530030 	cmp	r3, #48	; 0x30
 1003d80:	1a000002 	bne	1003d90 <hex_to_asc+0x120>
 1003d84:	e51b3010 	ldr	r3, [fp, #-16]
 1003d88:	e3530000 	cmp	r3, #0
 1003d8c:	0a000004 	beq	1003da4 <hex_to_asc+0x134>
      {
        count+=1; 
 1003d90:	e51b3008 	ldr	r3, [fp, #-8]
 1003d94:	e2833001 	add	r3, r3, #1
 1003d98:	e50b3008 	str	r3, [fp, #-8]
        startcount=1;
 1003d9c:	e3a03001 	mov	r3, #1
 1003da0:	e50b3010 	str	r3, [fp, #-16]
      }
      count2++;
 1003da4:	e51b300c 	ldr	r3, [fp, #-12]
 1003da8:	e2833001 	add	r3, r3, #1
 1003dac:	e50b300c 	str	r3, [fp, #-12]
    while (count2 < digits)
 1003db0:	e51b200c 	ldr	r2, [fp, #-12]
 1003db4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1003db8:	e1520003 	cmp	r2, r3
 1003dbc:	baffffc4 	blt	1003cd4 <hex_to_asc+0x64>
    }  
    stg[count]=0;
 1003dc0:	e51b3008 	ldr	r3, [fp, #-8]
 1003dc4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 1003dc8:	e0823003 	add	r3, r2, r3
 1003dcc:	e3a02000 	mov	r2, #0
 1003dd0:	e5c32000 	strb	r2, [r3]
            
    return count;
 1003dd4:	e51b3008 	ldr	r3, [fp, #-8]
}
 1003dd8:	e1a00003 	mov	r0, r3
 1003ddc:	e28bd000 	add	sp, fp, #0
 1003de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1003de4:	e12fff1e 	bx	lr

01003de8 <printarg>:
    * @param c_count          count of characters output
    * @param args             argument list 
    * @return                 0 for success, 1 for failure 
    */  
static int printarg(ALT_PRINTF_MEM_INFO_t *pinfo,char specifier,char flag,int width,int length,int precision,int dot,int * c_count,va_list * args)
{
 1003de8:	e92d4800 	push	{fp, lr}
 1003dec:	e28db004 	add	fp, sp, #4
 1003df0:	e24dd060 	sub	sp, sp, #96	; 0x60
 1003df4:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
 1003df8:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
 1003dfc:	e1a03001 	mov	r3, r1
 1003e00:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf
 1003e04:	e1a03002 	mov	r3, r2
 1003e08:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    char ostg[32],pad=' ',leadchar=0,leadchar2=0;
 1003e0c:	e3a03020 	mov	r3, #32
 1003e10:	e54b3005 	strb	r3, [fp, #-5]
 1003e14:	e3a03000 	mov	r3, #0
 1003e18:	e54b3006 	strb	r3, [fp, #-6]
 1003e1c:	e3a03000 	mov	r3, #0
 1003e20:	e54b3007 	strb	r3, [fp, #-7]
    int count,i,adder=0,isint=1;
 1003e24:	e3a03000 	mov	r3, #0
 1003e28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1003e2c:	e3a03001 	mov	r3, #1
 1003e30:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    int max;
    int64_t val = 0;
 1003e34:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
 1003e38:	ed4b0b09 	vstr	d16, [fp, #-36]	; 0xffffffdc
    char * stgarg = NULL;
 1003e3c:	e3a03000 	mov	r3, #0
 1003e40:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
     
    if ((specifier=='d') || (specifier=='i') || (specifier=='u') || (specifier=='x') || (specifier=='X') || (specifier=='p')) 
 1003e44:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e48:	e3530064 	cmp	r3, #100	; 0x64
 1003e4c:	0a00000e 	beq	1003e8c <printarg+0xa4>
 1003e50:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e54:	e3530069 	cmp	r3, #105	; 0x69
 1003e58:	0a00000b 	beq	1003e8c <printarg+0xa4>
 1003e5c:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e60:	e3530075 	cmp	r3, #117	; 0x75
 1003e64:	0a000008 	beq	1003e8c <printarg+0xa4>
 1003e68:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e6c:	e3530078 	cmp	r3, #120	; 0x78
 1003e70:	0a000005 	beq	1003e8c <printarg+0xa4>
 1003e74:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e78:	e3530058 	cmp	r3, #88	; 0x58
 1003e7c:	0a000002 	beq	1003e8c <printarg+0xa4>
 1003e80:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e84:	e3530070 	cmp	r3, #112	; 0x70
 1003e88:	1a000148 	bne	10043b0 <printarg+0x5c8>
    {
      if ((specifier=='u') || (specifier=='p'))
 1003e8c:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e90:	e3530075 	cmp	r3, #117	; 0x75
 1003e94:	0a000002 	beq	1003ea4 <printarg+0xbc>
 1003e98:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003e9c:	e3530070 	cmp	r3, #112	; 0x70
 1003ea0:	1a000001 	bne	1003eac <printarg+0xc4>
      {
        isint=0;
 1003ea4:	e3a03000 	mov	r3, #0
 1003ea8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }
      
      if ((length==2) && isint)
 1003eac:	e59b3004 	ldr	r3, [fp, #4]
 1003eb0:	e3530002 	cmp	r3, #2
 1003eb4:	1a00000b 	bne	1003ee8 <printarg+0x100>
 1003eb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003ebc:	e3530000 	cmp	r3, #0
 1003ec0:	0a000008 	beq	1003ee8 <printarg+0x100>
      {
        val=va_arg( *args, int64_t );
 1003ec4:	e59b3014 	ldr	r3, [fp, #20]
 1003ec8:	e5933000 	ldr	r3, [r3]
 1003ecc:	e2833007 	add	r3, r3, #7
 1003ed0:	e3c33007 	bic	r3, r3, #7
 1003ed4:	e2831008 	add	r1, r3, #8
 1003ed8:	e59b2014 	ldr	r2, [fp, #20]
 1003edc:	e5821000 	str	r1, [r2]
 1003ee0:	e1c320d0 	ldrd	r2, [r3]
 1003ee4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }
      if ((length==2) && (!isint))
 1003ee8:	e59b3004 	ldr	r3, [fp, #4]
 1003eec:	e3530002 	cmp	r3, #2
 1003ef0:	1a00000b 	bne	1003f24 <printarg+0x13c>
 1003ef4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003ef8:	e3530000 	cmp	r3, #0
 1003efc:	1a000008 	bne	1003f24 <printarg+0x13c>
      {
        val=va_arg( *args, uint64_t );
 1003f00:	e59b3014 	ldr	r3, [fp, #20]
 1003f04:	e5933000 	ldr	r3, [r3]
 1003f08:	e2833007 	add	r3, r3, #7
 1003f0c:	e3c33007 	bic	r3, r3, #7
 1003f10:	e2831008 	add	r1, r3, #8
 1003f14:	e59b2014 	ldr	r2, [fp, #20]
 1003f18:	e5821000 	str	r1, [r2]
 1003f1c:	e1c320d0 	ldrd	r2, [r3]
 1003f20:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }
      if ((length!=2) && isint)
 1003f24:	e59b3004 	ldr	r3, [fp, #4]
 1003f28:	e3530002 	cmp	r3, #2
 1003f2c:	0a00000b 	beq	1003f60 <printarg+0x178>
 1003f30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003f34:	e3530000 	cmp	r3, #0
 1003f38:	0a000008 	beq	1003f60 <printarg+0x178>
      {
        val=(int64_t)va_arg( *args, int ); 
 1003f3c:	e59b3014 	ldr	r3, [fp, #20]
 1003f40:	e5933000 	ldr	r3, [r3]
 1003f44:	e2831004 	add	r1, r3, #4
 1003f48:	e59b2014 	ldr	r2, [fp, #20]
 1003f4c:	e5821000 	str	r1, [r2]
 1003f50:	e5933000 	ldr	r3, [r3]
 1003f54:	e1a02003 	mov	r2, r3
 1003f58:	e1a03fc2 	asr	r3, r2, #31
 1003f5c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }
      if ((length!=2) && (!isint))
 1003f60:	e59b3004 	ldr	r3, [fp, #4]
 1003f64:	e3530002 	cmp	r3, #2
 1003f68:	0a00000b 	beq	1003f9c <printarg+0x1b4>
 1003f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1003f70:	e3530000 	cmp	r3, #0
 1003f74:	1a000008 	bne	1003f9c <printarg+0x1b4>
      {
        val=(int64_t)va_arg( *args, unsigned int ); 
 1003f78:	e59b3014 	ldr	r3, [fp, #20]
 1003f7c:	e5933000 	ldr	r3, [r3]
 1003f80:	e2831004 	add	r1, r3, #4
 1003f84:	e59b2014 	ldr	r2, [fp, #20]
 1003f88:	e5821000 	str	r1, [r2]
 1003f8c:	e5933000 	ldr	r3, [r3]
 1003f90:	e1a02003 	mov	r2, r3
 1003f94:	e3a03000 	mov	r3, #0
 1003f98:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
      }      
      
      if ((val==0) && ((precision!=0) || (dot==0)))
 1003f9c:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 1003fa0:	e1923003 	orrs	r3, r2, r3
 1003fa4:	1a00000c 	bne	1003fdc <printarg+0x1f4>
 1003fa8:	e59b3008 	ldr	r3, [fp, #8]
 1003fac:	e3530000 	cmp	r3, #0
 1003fb0:	1a000002 	bne	1003fc0 <printarg+0x1d8>
 1003fb4:	e59b300c 	ldr	r3, [fp, #12]
 1003fb8:	e3530000 	cmp	r3, #0
 1003fbc:	1a000006 	bne	1003fdc <printarg+0x1f4>
      { 
        ostg[0]='0';
 1003fc0:	e3a03030 	mov	r3, #48	; 0x30
 1003fc4:	e54b3048 	strb	r3, [fp, #-72]	; 0xffffffb8
        ostg[1]=0;
 1003fc8:	e3a03000 	mov	r3, #0
 1003fcc:	e54b3047 	strb	r3, [fp, #-71]	; 0xffffffb9
        count=1;
 1003fd0:	e3a03001 	mov	r3, #1
 1003fd4:	e50b300c 	str	r3, [fp, #-12]
 1003fd8:	ea000016 	b	1004038 <printarg+0x250>
      }      
      else 
      {
        if ((specifier=='x') || (specifier=='X') || (specifier=='p'))
 1003fdc:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003fe0:	e3530078 	cmp	r3, #120	; 0x78
 1003fe4:	0a000005 	beq	1004000 <printarg+0x218>
 1003fe8:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003fec:	e3530058 	cmp	r3, #88	; 0x58
 1003ff0:	0a000002 	beq	1004000 <printarg+0x218>
 1003ff4:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1003ff8:	e3530070 	cmp	r3, #112	; 0x70
 1003ffc:	1a000008 	bne	1004024 <printarg+0x23c>
        {      
          count=hex_to_asc(val,ostg,specifier,length);
 1004000:	e55b1051 	ldrb	r1, [fp, #-81]	; 0xffffffaf
 1004004:	e24b2048 	sub	r2, fp, #72	; 0x48
 1004008:	e59b3004 	ldr	r3, [fp, #4]
 100400c:	e58d3000 	str	r3, [sp]
 1004010:	e1a03001 	mov	r3, r1
 1004014:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
 1004018:	ebffff14 	bl	1003c70 <hex_to_asc>
 100401c:	e50b000c 	str	r0, [fp, #-12]
 1004020:	ea000004 	b	1004038 <printarg+0x250>
        }
        else
        {
          count=int_to_asc(val,ostg,isint);
 1004024:	e24b2048 	sub	r2, fp, #72	; 0x48
 1004028:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100402c:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
 1004030:	ebfffebf 	bl	1003b34 <int_to_asc>
 1004034:	e50b000c 	str	r0, [fp, #-12]
        }
      }
      if ((specifier=='x') || (specifier=='X') || (specifier=='p'))
 1004038:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 100403c:	e3530078 	cmp	r3, #120	; 0x78
 1004040:	0a000005 	beq	100405c <printarg+0x274>
 1004044:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004048:	e3530058 	cmp	r3, #88	; 0x58
 100404c:	0a000002 	beq	100405c <printarg+0x274>
 1004050:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004054:	e3530070 	cmp	r3, #112	; 0x70
 1004058:	1a000020 	bne	10040e0 <printarg+0x2f8>
      {
        if (specifier=='p')
 100405c:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004060:	e3530070 	cmp	r3, #112	; 0x70
 1004064:	1a000007 	bne	1004088 <printarg+0x2a0>
        {
          leadchar='0';
 1004068:	e3a03030 	mov	r3, #48	; 0x30
 100406c:	e54b3006 	strb	r3, [fp, #-6]
          leadchar2='x';
 1004070:	e3a03078 	mov	r3, #120	; 0x78
 1004074:	e54b3007 	strb	r3, [fp, #-7]
          adder+=2;
 1004078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100407c:	e2833002 	add	r3, r3, #2
 1004080:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1004084:	ea00000c 	b	10040bc <printarg+0x2d4>
        }
        else
        {
          if  ((flag=='#') && (val!=0))
 1004088:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 100408c:	e3530023 	cmp	r3, #35	; 0x23
 1004090:	1a000009 	bne	10040bc <printarg+0x2d4>
 1004094:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 1004098:	e1923003 	orrs	r3, r2, r3
 100409c:	0a000006 	beq	10040bc <printarg+0x2d4>
          { 
            leadchar='0';
 10040a0:	e3a03030 	mov	r3, #48	; 0x30
 10040a4:	e54b3006 	strb	r3, [fp, #-6]
            leadchar2=specifier;
 10040a8:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10040ac:	e54b3007 	strb	r3, [fp, #-7]
            adder+=2;
 10040b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10040b4:	e2833002 	add	r3, r3, #2
 10040b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          }
        }        
        if ((flag=='0') && (dot==0))
 10040bc:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 10040c0:	e3530030 	cmp	r3, #48	; 0x30
 10040c4:	1a000036 	bne	10041a4 <printarg+0x3bc>
 10040c8:	e59b300c 	ldr	r3, [fp, #12]
 10040cc:	e3530000 	cmp	r3, #0
 10040d0:	1a000033 	bne	10041a4 <printarg+0x3bc>
        {
          pad='0';
 10040d4:	e3a03030 	mov	r3, #48	; 0x30
 10040d8:	e54b3005 	strb	r3, [fp, #-5]
        if ((flag=='0') && (dot==0))
 10040dc:	ea000030 	b	10041a4 <printarg+0x3bc>
        }
      }
      else
      {
        if ((val<0) && isint)
 10040e0:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 10040e4:	e3520000 	cmp	r2, #0
 10040e8:	e2d33000 	sbcs	r3, r3, #0
 10040ec:	aa000008 	bge	1004114 <printarg+0x32c>
 10040f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10040f4:	e3530000 	cmp	r3, #0
 10040f8:	0a000005 	beq	1004114 <printarg+0x32c>
        { 
          leadchar='-';
 10040fc:	e3a0302d 	mov	r3, #45	; 0x2d
 1004100:	e54b3006 	strb	r3, [fp, #-6]
          adder++;
 1004104:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004108:	e2833001 	add	r3, r3, #1
 100410c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1004110:	ea00001a 	b	1004180 <printarg+0x398>
        }    
        else if ((flag=='+') && (val>=0) && isint) 
 1004114:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004118:	e353002b 	cmp	r3, #43	; 0x2b
 100411c:	1a00000c 	bne	1004154 <printarg+0x36c>
 1004120:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
 1004124:	e3520000 	cmp	r2, #0
 1004128:	e2d33000 	sbcs	r3, r3, #0
 100412c:	ba000008 	blt	1004154 <printarg+0x36c>
 1004130:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004134:	e3530000 	cmp	r3, #0
 1004138:	0a000005 	beq	1004154 <printarg+0x36c>
        { 
          leadchar='+';
 100413c:	e3a0302b 	mov	r3, #43	; 0x2b
 1004140:	e54b3006 	strb	r3, [fp, #-6]
          adder++;
 1004144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004148:	e2833001 	add	r3, r3, #1
 100414c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 1004150:	ea00000a 	b	1004180 <printarg+0x398>
        }  
        else if ((flag==' ') && isint)
 1004154:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004158:	e3530020 	cmp	r3, #32
 100415c:	1a000007 	bne	1004180 <printarg+0x398>
 1004160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004164:	e3530000 	cmp	r3, #0
 1004168:	0a000004 	beq	1004180 <printarg+0x398>
        { 
          leadchar=' ';
 100416c:	e3a03020 	mov	r3, #32
 1004170:	e54b3006 	strb	r3, [fp, #-6]
          adder++;
 1004174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004178:	e2833001 	add	r3, r3, #1
 100417c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }    
      
        if ((flag=='0') && (dot==0))
 1004180:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004184:	e3530030 	cmp	r3, #48	; 0x30
 1004188:	1a000006 	bne	10041a8 <printarg+0x3c0>
 100418c:	e59b300c 	ldr	r3, [fp, #12]
 1004190:	e3530000 	cmp	r3, #0
 1004194:	1a000003 	bne	10041a8 <printarg+0x3c0>
        {
          pad='0';
 1004198:	e3a03030 	mov	r3, #48	; 0x30
 100419c:	e54b3005 	strb	r3, [fp, #-5]
 10041a0:	ea000000 	b	10041a8 <printarg+0x3c0>
        if ((flag=='0') && (dot==0))
 10041a4:	e320f000 	nop	{0}
        }
      }
      
      max=count;      
 10041a8:	e51b300c 	ldr	r3, [fp, #-12]
 10041ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      if (precision>count)
 10041b0:	e59b2008 	ldr	r2, [fp, #8]
 10041b4:	e51b300c 	ldr	r3, [fp, #-12]
 10041b8:	e1520003 	cmp	r2, r3
 10041bc:	da000001 	ble	10041c8 <printarg+0x3e0>
      {
        max=precision;     
 10041c0:	e59b3008 	ldr	r3, [fp, #8]
 10041c4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      }
      
      if ((leadchar!=0) && (pad=='0'))
 10041c8:	e55b3006 	ldrb	r3, [fp, #-6]
 10041cc:	e3530000 	cmp	r3, #0
 10041d0:	0a000007 	beq	10041f4 <printarg+0x40c>
 10041d4:	e55b3005 	ldrb	r3, [fp, #-5]
 10041d8:	e3530030 	cmp	r3, #48	; 0x30
 10041dc:	1a000004 	bne	10041f4 <printarg+0x40c>
      {
        cput(pinfo, c_count, leadchar);
 10041e0:	e55b3006 	ldrb	r3, [fp, #-6]
 10041e4:	e1a02003 	mov	r2, r3
 10041e8:	e59b1010 	ldr	r1, [fp, #16]
 10041ec:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10041f0:	ebfffdf8 	bl	10039d8 <cput>
      }
      if ((leadchar2!=0) && (pad=='0'))
 10041f4:	e55b3007 	ldrb	r3, [fp, #-7]
 10041f8:	e3530000 	cmp	r3, #0
 10041fc:	0a000007 	beq	1004220 <printarg+0x438>
 1004200:	e55b3005 	ldrb	r3, [fp, #-5]
 1004204:	e3530030 	cmp	r3, #48	; 0x30
 1004208:	1a000004 	bne	1004220 <printarg+0x438>
      {
        cput(pinfo, c_count, leadchar2); 
 100420c:	e55b3007 	ldrb	r3, [fp, #-7]
 1004210:	e1a02003 	mov	r2, r3
 1004214:	e59b1010 	ldr	r1, [fp, #16]
 1004218:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 100421c:	ebfffded 	bl	10039d8 <cput>
      }
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 1004220:	e3a03000 	mov	r3, #0
 1004224:	e50b3010 	str	r3, [fp, #-16]
 1004228:	ea000007 	b	100424c <printarg+0x464>
      {
        cput(pinfo, c_count, pad);
 100422c:	e55b3005 	ldrb	r3, [fp, #-5]
 1004230:	e1a02003 	mov	r2, r3
 1004234:	e59b1010 	ldr	r1, [fp, #16]
 1004238:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 100423c:	ebfffde5 	bl	10039d8 <cput>
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 1004240:	e51b3010 	ldr	r3, [fp, #-16]
 1004244:	e2833001 	add	r3, r3, #1
 1004248:	e50b3010 	str	r3, [fp, #-16]
 100424c:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1004250:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004254:	e0422003 	sub	r2, r2, r3
 1004258:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100425c:	e0423003 	sub	r3, r2, r3
 1004260:	e51b2010 	ldr	r2, [fp, #-16]
 1004264:	e1520003 	cmp	r2, r3
 1004268:	aa000002 	bge	1004278 <printarg+0x490>
 100426c:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004270:	e353002d 	cmp	r3, #45	; 0x2d
 1004274:	1affffec 	bne	100422c <printarg+0x444>
      }
      if ((leadchar!=0) && (pad==' '))
 1004278:	e55b3006 	ldrb	r3, [fp, #-6]
 100427c:	e3530000 	cmp	r3, #0
 1004280:	0a000007 	beq	10042a4 <printarg+0x4bc>
 1004284:	e55b3005 	ldrb	r3, [fp, #-5]
 1004288:	e3530020 	cmp	r3, #32
 100428c:	1a000004 	bne	10042a4 <printarg+0x4bc>
      {
        cput(pinfo, c_count, leadchar); 
 1004290:	e55b3006 	ldrb	r3, [fp, #-6]
 1004294:	e1a02003 	mov	r2, r3
 1004298:	e59b1010 	ldr	r1, [fp, #16]
 100429c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10042a0:	ebfffdcc 	bl	10039d8 <cput>
      }
      if ((leadchar2!=0) && (pad==' '))
 10042a4:	e55b3007 	ldrb	r3, [fp, #-7]
 10042a8:	e3530000 	cmp	r3, #0
 10042ac:	0a000007 	beq	10042d0 <printarg+0x4e8>
 10042b0:	e55b3005 	ldrb	r3, [fp, #-5]
 10042b4:	e3530020 	cmp	r3, #32
 10042b8:	1a000004 	bne	10042d0 <printarg+0x4e8>
      {
        cput(pinfo, c_count, leadchar2);   
 10042bc:	e55b3007 	ldrb	r3, [fp, #-7]
 10042c0:	e1a02003 	mov	r2, r3
 10042c4:	e59b1010 	ldr	r1, [fp, #16]
 10042c8:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10042cc:	ebfffdc1 	bl	10039d8 <cput>
      }            
      for (i=0;i<(precision-count);i++) 
 10042d0:	e3a03000 	mov	r3, #0
 10042d4:	e50b3010 	str	r3, [fp, #-16]
 10042d8:	ea000006 	b	10042f8 <printarg+0x510>
      {
        cput(pinfo, c_count, '0');
 10042dc:	e3a02030 	mov	r2, #48	; 0x30
 10042e0:	e59b1010 	ldr	r1, [fp, #16]
 10042e4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10042e8:	ebfffdba 	bl	10039d8 <cput>
      for (i=0;i<(precision-count);i++) 
 10042ec:	e51b3010 	ldr	r3, [fp, #-16]
 10042f0:	e2833001 	add	r3, r3, #1
 10042f4:	e50b3010 	str	r3, [fp, #-16]
 10042f8:	e59b2008 	ldr	r2, [fp, #8]
 10042fc:	e51b300c 	ldr	r3, [fp, #-12]
 1004300:	e0423003 	sub	r3, r2, r3
 1004304:	e51b2010 	ldr	r2, [fp, #-16]
 1004308:	e1520003 	cmp	r2, r3
 100430c:	bafffff2 	blt	10042dc <printarg+0x4f4>
      }
      for (i=0;i<count;i++)
 1004310:	e3a03000 	mov	r3, #0
 1004314:	e50b3010 	str	r3, [fp, #-16]
 1004318:	ea00000a 	b	1004348 <printarg+0x560>
      {
        cput(pinfo, c_count, ostg[i]);
 100431c:	e24b2048 	sub	r2, fp, #72	; 0x48
 1004320:	e51b3010 	ldr	r3, [fp, #-16]
 1004324:	e0823003 	add	r3, r2, r3
 1004328:	e5d33000 	ldrb	r3, [r3]
 100432c:	e1a02003 	mov	r2, r3
 1004330:	e59b1010 	ldr	r1, [fp, #16]
 1004334:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004338:	ebfffda6 	bl	10039d8 <cput>
      for (i=0;i<count;i++)
 100433c:	e51b3010 	ldr	r3, [fp, #-16]
 1004340:	e2833001 	add	r3, r3, #1
 1004344:	e50b3010 	str	r3, [fp, #-16]
 1004348:	e51b2010 	ldr	r2, [fp, #-16]
 100434c:	e51b300c 	ldr	r3, [fp, #-12]
 1004350:	e1520003 	cmp	r2, r3
 1004354:	bafffff0 	blt	100431c <printarg+0x534>
      }
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 1004358:	e3a03000 	mov	r3, #0
 100435c:	e50b3010 	str	r3, [fp, #-16]
 1004360:	ea000006 	b	1004380 <printarg+0x598>
      {
        cput(pinfo, c_count, ' ');    
 1004364:	e3a02020 	mov	r2, #32
 1004368:	e59b1010 	ldr	r1, [fp, #16]
 100436c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004370:	ebfffd98 	bl	10039d8 <cput>
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 1004374:	e51b3010 	ldr	r3, [fp, #-16]
 1004378:	e2833001 	add	r3, r3, #1
 100437c:	e50b3010 	str	r3, [fp, #-16]
 1004380:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 1004384:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004388:	e0422003 	sub	r2, r2, r3
 100438c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004390:	e0423003 	sub	r3, r2, r3
 1004394:	e51b2010 	ldr	r2, [fp, #-16]
 1004398:	e1520003 	cmp	r2, r3
 100439c:	aa000091 	bge	10045e8 <printarg+0x800>
 10043a0:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 10043a4:	e353002d 	cmp	r3, #45	; 0x2d
 10043a8:	0affffed 	beq	1004364 <printarg+0x57c>
    if ((specifier=='d') || (specifier=='i') || (specifier=='u') || (specifier=='x') || (specifier=='X') || (specifier=='p')) 
 10043ac:	ea00008d 	b	10045e8 <printarg+0x800>
      }  
    }
    else if ((specifier=='s') || (specifier=='c'))
 10043b0:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10043b4:	e3530073 	cmp	r3, #115	; 0x73
 10043b8:	0a000002 	beq	10043c8 <printarg+0x5e0>
 10043bc:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10043c0:	e3530063 	cmp	r3, #99	; 0x63
 10043c4:	1a000085 	bne	10045e0 <printarg+0x7f8>
    {
      if (specifier=='c')
 10043c8:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 10043cc:	e3530063 	cmp	r3, #99	; 0x63
 10043d0:	1a00000e 	bne	1004410 <printarg+0x628>
      {
        ostg[0]=va_arg( * args, int ) & 0xff;
 10043d4:	e59b3014 	ldr	r3, [fp, #20]
 10043d8:	e5933000 	ldr	r3, [r3]
 10043dc:	e2831004 	add	r1, r3, #4
 10043e0:	e59b2014 	ldr	r2, [fp, #20]
 10043e4:	e5821000 	str	r1, [r2]
 10043e8:	e5933000 	ldr	r3, [r3]
 10043ec:	e6ef3073 	uxtb	r3, r3
 10043f0:	e54b3048 	strb	r3, [fp, #-72]	; 0xffffffb8
        ostg[1]=0;
 10043f4:	e3a03000 	mov	r3, #0
 10043f8:	e54b3047 	strb	r3, [fp, #-71]	; 0xffffffb9
        count=1;
 10043fc:	e3a03001 	mov	r3, #1
 1004400:	e50b300c 	str	r3, [fp, #-12]
        dot=0;
 1004404:	e3a03000 	mov	r3, #0
 1004408:	e58b300c 	str	r3, [fp, #12]
 100440c:	ea000012 	b	100445c <printarg+0x674>
      }
      else {
        stgarg=va_arg( * args, char * ); 
 1004410:	e59b3014 	ldr	r3, [fp, #20]
 1004414:	e5933000 	ldr	r3, [r3]
 1004418:	e2831004 	add	r1, r3, #4
 100441c:	e59b2014 	ldr	r2, [fp, #20]
 1004420:	e5821000 	str	r1, [r2]
 1004424:	e5933000 	ldr	r3, [r3]
 1004428:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
        count=0;
 100442c:	e3a03000 	mov	r3, #0
 1004430:	e50b300c 	str	r3, [fp, #-12]
        while (*(stgarg+count)) 
 1004434:	ea000002 	b	1004444 <printarg+0x65c>
        {
          count++;
 1004438:	e51b300c 	ldr	r3, [fp, #-12]
 100443c:	e2833001 	add	r3, r3, #1
 1004440:	e50b300c 	str	r3, [fp, #-12]
        while (*(stgarg+count)) 
 1004444:	e51b300c 	ldr	r3, [fp, #-12]
 1004448:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 100444c:	e0823003 	add	r3, r2, r3
 1004450:	e5d33000 	ldrb	r3, [r3]
 1004454:	e3530000 	cmp	r3, #0
 1004458:	1afffff6 	bne	1004438 <printarg+0x650>
        }
      }        
       
      if (flag=='0') 
 100445c:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 1004460:	e3530030 	cmp	r3, #48	; 0x30
 1004464:	1a000001 	bne	1004470 <printarg+0x688>
      {
        pad='0';
 1004468:	e3a03030 	mov	r3, #48	; 0x30
 100446c:	e54b3005 	strb	r3, [fp, #-5]
      }        

      max=count;
 1004470:	e51b300c 	ldr	r3, [fp, #-12]
 1004474:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      if (dot && (precision<=count))
 1004478:	e59b300c 	ldr	r3, [fp, #12]
 100447c:	e3530000 	cmp	r3, #0
 1004480:	0a000005 	beq	100449c <printarg+0x6b4>
 1004484:	e59b2008 	ldr	r2, [fp, #8]
 1004488:	e51b300c 	ldr	r3, [fp, #-12]
 100448c:	e1520003 	cmp	r2, r3
 1004490:	ca000001 	bgt	100449c <printarg+0x6b4>
      {
        max=precision;
 1004494:	e59b3008 	ldr	r3, [fp, #8]
 1004498:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      }
      
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 100449c:	e3a03000 	mov	r3, #0
 10044a0:	e50b3010 	str	r3, [fp, #-16]
 10044a4:	ea000007 	b	10044c8 <printarg+0x6e0>
      {
         cput(pinfo, c_count, pad);
 10044a8:	e55b3005 	ldrb	r3, [fp, #-5]
 10044ac:	e1a02003 	mov	r2, r3
 10044b0:	e59b1010 	ldr	r1, [fp, #16]
 10044b4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10044b8:	ebfffd46 	bl	10039d8 <cput>
      for (i=0;((i<(width-max-adder)) && (flag!='-'));i++) 
 10044bc:	e51b3010 	ldr	r3, [fp, #-16]
 10044c0:	e2833001 	add	r3, r3, #1
 10044c4:	e50b3010 	str	r3, [fp, #-16]
 10044c8:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 10044cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10044d0:	e0422003 	sub	r2, r2, r3
 10044d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10044d8:	e0423003 	sub	r3, r2, r3
 10044dc:	e51b2010 	ldr	r2, [fp, #-16]
 10044e0:	e1520003 	cmp	r2, r3
 10044e4:	aa000002 	bge	10044f4 <printarg+0x70c>
 10044e8:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 10044ec:	e353002d 	cmp	r3, #45	; 0x2d
 10044f0:	1affffec 	bne	10044a8 <printarg+0x6c0>
      }           
       
      for (i=0;(i<count) && ((i<precision) || (dot==0));i++) 
 10044f4:	e3a03000 	mov	r3, #0
 10044f8:	e50b3010 	str	r3, [fp, #-16]
 10044fc:	ea000016 	b	100455c <printarg+0x774>
      {
        if (specifier=='c')
 1004500:	e55b3051 	ldrb	r3, [fp, #-81]	; 0xffffffaf
 1004504:	e3530063 	cmp	r3, #99	; 0x63
 1004508:	1a000008 	bne	1004530 <printarg+0x748>
        {
          cput(pinfo, c_count, ostg[i]);
 100450c:	e24b2048 	sub	r2, fp, #72	; 0x48
 1004510:	e51b3010 	ldr	r3, [fp, #-16]
 1004514:	e0823003 	add	r3, r2, r3
 1004518:	e5d33000 	ldrb	r3, [r3]
 100451c:	e1a02003 	mov	r2, r3
 1004520:	e59b1010 	ldr	r1, [fp, #16]
 1004524:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 1004528:	ebfffd2a 	bl	10039d8 <cput>
 100452c:	ea000007 	b	1004550 <printarg+0x768>
        }
        else
        {
          cput(pinfo, c_count, stgarg[i]);
 1004530:	e51b3010 	ldr	r3, [fp, #-16]
 1004534:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 1004538:	e0823003 	add	r3, r2, r3
 100453c:	e5d33000 	ldrb	r3, [r3]
 1004540:	e1a02003 	mov	r2, r3
 1004544:	e59b1010 	ldr	r1, [fp, #16]
 1004548:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 100454c:	ebfffd21 	bl	10039d8 <cput>
      for (i=0;(i<count) && ((i<precision) || (dot==0));i++) 
 1004550:	e51b3010 	ldr	r3, [fp, #-16]
 1004554:	e2833001 	add	r3, r3, #1
 1004558:	e50b3010 	str	r3, [fp, #-16]
 100455c:	e51b2010 	ldr	r2, [fp, #-16]
 1004560:	e51b300c 	ldr	r3, [fp, #-12]
 1004564:	e1520003 	cmp	r2, r3
 1004568:	aa000006 	bge	1004588 <printarg+0x7a0>
 100456c:	e51b2010 	ldr	r2, [fp, #-16]
 1004570:	e59b3008 	ldr	r3, [fp, #8]
 1004574:	e1520003 	cmp	r2, r3
 1004578:	baffffe0 	blt	1004500 <printarg+0x718>
 100457c:	e59b300c 	ldr	r3, [fp, #12]
 1004580:	e3530000 	cmp	r3, #0
 1004584:	0affffdd 	beq	1004500 <printarg+0x718>
        }
      }
      
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 1004588:	e3a03000 	mov	r3, #0
 100458c:	e50b3010 	str	r3, [fp, #-16]
 1004590:	ea000006 	b	10045b0 <printarg+0x7c8>
      {
        cput(pinfo, c_count, ' ');    
 1004594:	e3a02020 	mov	r2, #32
 1004598:	e59b1010 	ldr	r1, [fp, #16]
 100459c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
 10045a0:	ebfffd0c 	bl	10039d8 <cput>
      for (i=0;((i<(width-max-adder)) && (flag=='-'));i++) 
 10045a4:	e51b3010 	ldr	r3, [fp, #-16]
 10045a8:	e2833001 	add	r3, r3, #1
 10045ac:	e50b3010 	str	r3, [fp, #-16]
 10045b0:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 10045b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10045b8:	e0422003 	sub	r2, r2, r3
 10045bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10045c0:	e0423003 	sub	r3, r2, r3
 10045c4:	e51b2010 	ldr	r2, [fp, #-16]
 10045c8:	e1520003 	cmp	r2, r3
 10045cc:	aa000007 	bge	10045f0 <printarg+0x808>
 10045d0:	e55b3052 	ldrb	r3, [fp, #-82]	; 0xffffffae
 10045d4:	e353002d 	cmp	r3, #45	; 0x2d
 10045d8:	0affffed 	beq	1004594 <printarg+0x7ac>
    else if ((specifier=='s') || (specifier=='c'))
 10045dc:	ea000003 	b	10045f0 <printarg+0x808>
      }   
    }
    else
    {
       return 1;
 10045e0:	e3a03001 	mov	r3, #1
 10045e4:	ea000003 	b	10045f8 <printarg+0x810>
    if ((specifier=='d') || (specifier=='i') || (specifier=='u') || (specifier=='x') || (specifier=='X') || (specifier=='p')) 
 10045e8:	e320f000 	nop	{0}
 10045ec:	ea000000 	b	10045f4 <printarg+0x80c>
    else if ((specifier=='s') || (specifier=='c'))
 10045f0:	e320f000 	nop	{0}
    }     
    
    return 0;
 10045f4:	e3a03000 	mov	r3, #0
}
 10045f8:	e1a00003 	mov	r0, r3
 10045fc:	e24bd004 	sub	sp, fp, #4
 1004600:	e8bd8800 	pop	{fp, pc}

01004604 <alt_vfprintf>:
    This routine parses the format string and calls the printarg routine to print the args as
    encountered.
    * @return                 #characters output for success, -1 for failure 
    */  
int alt_vfprintf(FILE *stream, const char *format, va_list args)
{
 1004604:	e92d4800 	push	{fp, lr}
 1004608:	e28db004 	add	fp, sp, #4
 100460c:	e24dd048 	sub	sp, sp, #72	; 0x48
 1004610:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
 1004614:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
 1004618:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    ALT_PRINTF_MEM_INFO_t *pinfo = (ALT_PRINTF_MEM_INFO_t *)stream;
 100461c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1004620:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int index=0,length;
 1004624:	e3a03000 	mov	r3, #0
 1004628:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    int count=0,dot;
 100462c:	e3a03000 	mov	r3, #0
 1004630:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    char c,flag;
    int width,precision;
       
    while (1)
    {
       c  = nextchar(format,&index);
 1004634:	e24b3018 	sub	r3, fp, #24
 1004638:	e1a01003 	mov	r1, r3
 100463c:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004640:	ebfffcff 	bl	1003a44 <nextchar>
 1004644:	e1a03000 	mov	r3, r0
 1004648:	e54b300d 	strb	r3, [fp, #-13]
         
       if (c=='%')
 100464c:	e55b300d 	ldrb	r3, [fp, #-13]
 1004650:	e3530025 	cmp	r3, #37	; 0x25
 1004654:	1a000089 	bne	1004880 <alt_vfprintf+0x27c>
       {
          c = nextchar(format,&index);
 1004658:	e24b3018 	sub	r3, fp, #24
 100465c:	e1a01003 	mov	r1, r3
 1004660:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004664:	ebfffcf6 	bl	1003a44 <nextchar>
 1004668:	e1a03000 	mov	r3, r0
 100466c:	e54b300d 	strb	r3, [fp, #-13]
          if (c=='%')  
 1004670:	e55b300d 	ldrb	r3, [fp, #-13]
 1004674:	e3530025 	cmp	r3, #37	; 0x25
 1004678:	1a000005 	bne	1004694 <alt_vfprintf+0x90>
          {
            cput(pinfo,&count,c);
 100467c:	e55b200d 	ldrb	r2, [fp, #-13]
 1004680:	e24b301c 	sub	r3, fp, #28
 1004684:	e1a01003 	mov	r1, r3
 1004688:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 100468c:	ebfffcd1 	bl	10039d8 <cput>
            continue;
 1004690:	ea000082 	b	10048a0 <alt_vfprintf+0x29c>
          }
          
          flag=0;
 1004694:	e3a03000 	mov	r3, #0
 1004698:	e54b300e 	strb	r3, [fp, #-14]
          if ((c=='-') || (c=='+') || (c==' ') || (c=='#') || (c=='0')) 
 100469c:	e55b300d 	ldrb	r3, [fp, #-13]
 10046a0:	e353002d 	cmp	r3, #45	; 0x2d
 10046a4:	0a00000b 	beq	10046d8 <alt_vfprintf+0xd4>
 10046a8:	e55b300d 	ldrb	r3, [fp, #-13]
 10046ac:	e353002b 	cmp	r3, #43	; 0x2b
 10046b0:	0a000008 	beq	10046d8 <alt_vfprintf+0xd4>
 10046b4:	e55b300d 	ldrb	r3, [fp, #-13]
 10046b8:	e3530020 	cmp	r3, #32
 10046bc:	0a000005 	beq	10046d8 <alt_vfprintf+0xd4>
 10046c0:	e55b300d 	ldrb	r3, [fp, #-13]
 10046c4:	e3530023 	cmp	r3, #35	; 0x23
 10046c8:	0a000002 	beq	10046d8 <alt_vfprintf+0xd4>
 10046cc:	e55b300d 	ldrb	r3, [fp, #-13]
 10046d0:	e3530030 	cmp	r3, #48	; 0x30
 10046d4:	1a000007 	bne	10046f8 <alt_vfprintf+0xf4>
          {
            flag=c;
 10046d8:	e55b300d 	ldrb	r3, [fp, #-13]
 10046dc:	e54b300e 	strb	r3, [fp, #-14]
            c = nextchar(format,&index);
 10046e0:	e24b3018 	sub	r3, fp, #24
 10046e4:	e1a01003 	mov	r1, r3
 10046e8:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 10046ec:	ebfffcd4 	bl	1003a44 <nextchar>
 10046f0:	e1a03000 	mov	r3, r0
 10046f4:	e54b300d 	strb	r3, [fp, #-13]
          }
          
          width=0;
 10046f8:	e3a03000 	mov	r3, #0
 10046fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          if (c=='*')
 1004700:	e55b300d 	ldrb	r3, [fp, #-13]
 1004704:	e353002a 	cmp	r3, #42	; 0x2a
 1004708:	1a00000b 	bne	100473c <alt_vfprintf+0x138>
          {
            width=va_arg( args, int );
 100470c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1004710:	e2832004 	add	r2, r3, #4
 1004714:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
 1004718:	e5933000 	ldr	r3, [r3]
 100471c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            c = nextchar(format,&index);
 1004720:	e24b3018 	sub	r3, fp, #24
 1004724:	e1a01003 	mov	r1, r3
 1004728:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 100472c:	ebfffcc4 	bl	1003a44 <nextchar>
 1004730:	e1a03000 	mov	r3, r0
 1004734:	e54b300d 	strb	r3, [fp, #-13]
 1004738:	ea000006 	b	1004758 <alt_vfprintf+0x154>
          }
          else
          {          
            c = getdec(format,&index,&width,c);
 100473c:	e55b300d 	ldrb	r3, [fp, #-13]
 1004740:	e24b2020 	sub	r2, fp, #32
 1004744:	e24b1018 	sub	r1, fp, #24
 1004748:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 100474c:	ebfffcd2 	bl	1003a9c <getdec>
 1004750:	e1a03000 	mov	r3, r0
 1004754:	e54b300d 	strb	r3, [fp, #-13]
          }
                        
          precision=0;
 1004758:	e3a03000 	mov	r3, #0
 100475c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          dot=0;
 1004760:	e3a03000 	mov	r3, #0
 1004764:	e50b300c 	str	r3, [fp, #-12]
          if (c=='.')
 1004768:	e55b300d 	ldrb	r3, [fp, #-13]
 100476c:	e353002e 	cmp	r3, #46	; 0x2e
 1004770:	1a00001d 	bne	10047ec <alt_vfprintf+0x1e8>
          {
            dot=1;
 1004774:	e3a03001 	mov	r3, #1
 1004778:	e50b300c 	str	r3, [fp, #-12]
            c = nextchar(format,&index);
 100477c:	e24b3018 	sub	r3, fp, #24
 1004780:	e1a01003 	mov	r1, r3
 1004784:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004788:	ebfffcad 	bl	1003a44 <nextchar>
 100478c:	e1a03000 	mov	r3, r0
 1004790:	e54b300d 	strb	r3, [fp, #-13]
            if (c=='*')
 1004794:	e55b300d 	ldrb	r3, [fp, #-13]
 1004798:	e353002a 	cmp	r3, #42	; 0x2a
 100479c:	1a00000b 	bne	10047d0 <alt_vfprintf+0x1cc>
            {
              precision=va_arg( args, int );
 10047a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 10047a4:	e2832004 	add	r2, r3, #4
 10047a8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
 10047ac:	e5933000 	ldr	r3, [r3]
 10047b0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
              c = nextchar(format,&index);
 10047b4:	e24b3018 	sub	r3, fp, #24
 10047b8:	e1a01003 	mov	r1, r3
 10047bc:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 10047c0:	ebfffc9f 	bl	1003a44 <nextchar>
 10047c4:	e1a03000 	mov	r3, r0
 10047c8:	e54b300d 	strb	r3, [fp, #-13]
 10047cc:	ea000006 	b	10047ec <alt_vfprintf+0x1e8>
            }
            else
            {
              c = getdec(format,&index,&precision,c);
 10047d0:	e55b300d 	ldrb	r3, [fp, #-13]
 10047d4:	e24b2024 	sub	r2, fp, #36	; 0x24
 10047d8:	e24b1018 	sub	r1, fp, #24
 10047dc:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 10047e0:	ebfffcad 	bl	1003a9c <getdec>
 10047e4:	e1a03000 	mov	r3, r0
 10047e8:	e54b300d 	strb	r3, [fp, #-13]
            }
          }
          
          /*only l is implemented at this time*/
          length=0;
 10047ec:	e3a03000 	mov	r3, #0
 10047f0:	e50b3008 	str	r3, [fp, #-8]
          while (c=='l')
 10047f4:	ea000008 	b	100481c <alt_vfprintf+0x218>
          {
            length++;
 10047f8:	e51b3008 	ldr	r3, [fp, #-8]
 10047fc:	e2833001 	add	r3, r3, #1
 1004800:	e50b3008 	str	r3, [fp, #-8]
            c=nextchar(format,&index);
 1004804:	e24b3018 	sub	r3, fp, #24
 1004808:	e1a01003 	mov	r1, r3
 100480c:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1004810:	ebfffc8b 	bl	1003a44 <nextchar>
 1004814:	e1a03000 	mov	r3, r0
 1004818:	e54b300d 	strb	r3, [fp, #-13]
          while (c=='l')
 100481c:	e55b300d 	ldrb	r3, [fp, #-13]
 1004820:	e353006c 	cmp	r3, #108	; 0x6c
 1004824:	0afffff3 	beq	10047f8 <alt_vfprintf+0x1f4>
          }
          
          if (printarg(pinfo,c,flag,width,length,precision,dot,&count,&args))
 1004828:	e51bc020 	ldr	ip, [fp, #-32]	; 0xffffffe0
 100482c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1004830:	e55b000e 	ldrb	r0, [fp, #-14]
 1004834:	e55b100d 	ldrb	r1, [fp, #-13]
 1004838:	e24b2030 	sub	r2, fp, #48	; 0x30
 100483c:	e58d2010 	str	r2, [sp, #16]
 1004840:	e24b201c 	sub	r2, fp, #28
 1004844:	e58d200c 	str	r2, [sp, #12]
 1004848:	e51b200c 	ldr	r2, [fp, #-12]
 100484c:	e58d2008 	str	r2, [sp, #8]
 1004850:	e58d3004 	str	r3, [sp, #4]
 1004854:	e51b3008 	ldr	r3, [fp, #-8]
 1004858:	e58d3000 	str	r3, [sp]
 100485c:	e1a0300c 	mov	r3, ip
 1004860:	e1a02000 	mov	r2, r0
 1004864:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1004868:	ebfffd5e 	bl	1003de8 <printarg>
 100486c:	e1a03000 	mov	r3, r0
 1004870:	e3530000 	cmp	r3, #0
 1004874:	0a000006 	beq	1004894 <alt_vfprintf+0x290>
          {
            return -1;
 1004878:	e3e03000 	mvn	r3, #0
 100487c:	ea00000a 	b	10048ac <alt_vfprintf+0x2a8>
          }            
       }
       else 
       {
         cput(pinfo,&count,c);
 1004880:	e55b200d 	ldrb	r2, [fp, #-13]
 1004884:	e24b301c 	sub	r3, fp, #28
 1004888:	e1a01003 	mov	r1, r3
 100488c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 1004890:	ebfffc50 	bl	10039d8 <cput>
       }
       
       if (c==0)
 1004894:	e55b300d 	ldrb	r3, [fp, #-13]
 1004898:	e3530000 	cmp	r3, #0
 100489c:	0a000000 	beq	10048a4 <alt_vfprintf+0x2a0>
       c  = nextchar(format,&index);
 10048a0:	eaffff63 	b	1004634 <alt_vfprintf+0x30>
       {
         break;
 10048a4:	e320f000 	nop	{0}
       }
    }
    
    return count;
 10048a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
 10048ac:	e1a00003 	mov	r0, r3
 10048b0:	e24bd004 	sub	sp, fp, #4
 10048b4:	e8bd8800 	pop	{fp, pc}

010048b8 <uart_putc>:
FILE * term0 = (FILE *) &term0_info;
static UART_INFO_t term1_info = { uart_putc, 0, ALT_16550_DEVICE_SOCFPGA_UART1 };
FILE * term1 = (FILE *) &term1_info;

static void uart_putc(char pchar, FILE *info)
{
 10048b8:	e92d4800 	push	{fp, lr}
 10048bc:	e28db004 	add	fp, sp, #4
 10048c0:	e24dd010 	sub	sp, sp, #16
 10048c4:	e1a03000 	mov	r3, r0
 10048c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 10048cc:	e54b300d 	strb	r3, [fp, #-13]
  UART_INFO_t *port_info = (UART_INFO_t *) info;
 10048d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10048d4:	e50b3008 	str	r3, [fp, #-8]

  if (!port_info->init_done)
 10048d8:	e51b3008 	ldr	r3, [fp, #-8]
 10048dc:	e5933004 	ldr	r3, [r3, #4]
 10048e0:	e3530000 	cmp	r3, #0
 10048e4:	1a000004 	bne	10048fc <uart_putc+0x44>
  {
    port_info->init_done = 1;
 10048e8:	e51b3008 	ldr	r3, [fp, #-8]
 10048ec:	e3a02001 	mov	r2, #1
 10048f0:	e5832004 	str	r2, [r3, #4]
    init_uart(port_info);
 10048f4:	e51b0008 	ldr	r0, [fp, #-8]
 10048f8:	eb00000e 	bl	1004938 <init_uart>
  }

  if (pchar=='\n') uart_putc('\r', info);
 10048fc:	e55b300d 	ldrb	r3, [fp, #-13]
 1004900:	e353000a 	cmp	r3, #10
 1004904:	1a000002 	bne	1004914 <uart_putc+0x5c>
 1004908:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 100490c:	e3a0000d 	mov	r0, #13
 1004910:	ebffffe8 	bl	10048b8 <uart_putc>
  alt_16550_fifo_write_safe(&port_info->mUart, &pchar, 1, 1); 
 1004914:	e51b3008 	ldr	r3, [fp, #-8]
 1004918:	e283000c 	add	r0, r3, #12
 100491c:	e24b100d 	sub	r1, fp, #13
 1004920:	e3a03001 	mov	r3, #1
 1004924:	e3a02001 	mov	r2, #1
 1004928:	ebfff3ec 	bl	10018e0 <alt_16550_fifo_write_safe>

}
 100492c:	e320f000 	nop	{0}
 1004930:	e24bd004 	sub	sp, fp, #4
 1004934:	e8bd8800 	pop	{fp, pc}

01004938 <init_uart>:

static ALT_STATUS_CODE init_uart(UART_INFO_t *uartInfo)
{
 1004938:	e92d4800 	push	{fp, lr}
 100493c:	e28db004 	add	fp, sp, #4
 1004940:	e24dd010 	sub	sp, sp, #16
 1004944:	e50b0010 	str	r0, [fp, #-16]
    uint32_t uart_location = 0;
 1004948:	e3a03000 	mov	r3, #0
 100494c:	e50b300c 	str	r3, [fp, #-12]
    ALT_STATUS_CODE status;

    status = alt_16550_init( uartInfo->uart_ID, 
 1004950:	e51b3010 	ldr	r3, [fp, #-16]
 1004954:	e1d300b8 	ldrh	r0, [r3, #8]
 1004958:	e51b3010 	ldr	r3, [fp, #-16]
 100495c:	e283300c 	add	r3, r3, #12
 1004960:	e24b100c 	sub	r1, fp, #12
 1004964:	e3a0200c 	mov	r2, #12
 1004968:	ebfff333 	bl	100163c <alt_16550_init>
 100496c:	e50b0008 	str	r0, [fp, #-8]
                             (void *)&uart_location, 
                             ALT_CLK_L4_SP, 
                             &uartInfo->mUart);

    if (status == ALT_E_SUCCESS)
 1004970:	e51b3008 	ldr	r3, [fp, #-8]
 1004974:	e3530000 	cmp	r3, #0
 1004978:	1a000006 	bne	1004998 <init_uart+0x60>
    {   
        status = alt_16550_baudrate_set(&uartInfo->mUart, BAUD_RATE); 
 100497c:	e51b3010 	ldr	r3, [fp, #-16]
 1004980:	e283300c 	add	r3, r3, #12
 1004984:	e3a01cc2 	mov	r1, #49664	; 0xc200
 1004988:	e3401001 	movt	r1, #1
 100498c:	e1a00003 	mov	r0, r3
 1004990:	ebfff413 	bl	10019e4 <alt_16550_baudrate_set>
 1004994:	e50b0008 	str	r0, [fp, #-8]
    }

    if (status == ALT_E_SUCCESS)
 1004998:	e51b3008 	ldr	r3, [fp, #-8]
 100499c:	e3530000 	cmp	r3, #0
 10049a0:	1a000006 	bne	10049c0 <init_uart+0x88>
    {
        status = alt_16550_line_config_set(&uartInfo->mUart,  
 10049a4:	e51b3010 	ldr	r3, [fp, #-16]
 10049a8:	e283000c 	add	r0, r3, #12
 10049ac:	e3a03000 	mov	r3, #0
 10049b0:	e3a02000 	mov	r2, #0
 10049b4:	e3a01003 	mov	r1, #3
 10049b8:	ebfff470 	bl	1001b80 <alt_16550_line_config_set>
 10049bc:	e50b0008 	str	r0, [fp, #-8]
                                             ALT_16550_DATABITS_8, 
                                             ALT_16550_PARITY_DISABLE, 
                                             ALT_16550_STOPBITS_1); 
    }
    
    if (status == ALT_E_SUCCESS)
 10049c0:	e51b3008 	ldr	r3, [fp, #-8]
 10049c4:	e3530000 	cmp	r3, #0
 10049c8:	1a000004 	bne	10049e0 <init_uart+0xa8>
    {
        status = alt_16550_fifo_enable(&uartInfo->mUart);
 10049cc:	e51b3010 	ldr	r3, [fp, #-16]
 10049d0:	e283300c 	add	r3, r3, #12
 10049d4:	e1a00003 	mov	r0, r3
 10049d8:	ebfff380 	bl	10017e0 <alt_16550_fifo_enable>
 10049dc:	e50b0008 	str	r0, [fp, #-8]
    }

    if (status == ALT_E_SUCCESS)
 10049e0:	e51b3008 	ldr	r3, [fp, #-8]
 10049e4:	e3530000 	cmp	r3, #0
 10049e8:	1a000004 	bne	1004a00 <init_uart+0xc8>
    {
        status = alt_16550_enable(&uartInfo->mUart);
 10049ec:	e51b3010 	ldr	r3, [fp, #-16]
 10049f0:	e283300c 	add	r3, r3, #12
 10049f4:	e1a00003 	mov	r0, r3
 10049f8:	ebfff366 	bl	1001798 <alt_16550_enable>
 10049fc:	e50b0008 	str	r0, [fp, #-8]
    }
    return status;
 1004a00:	e51b3008 	ldr	r3, [fp, #-8]
}
 1004a04:	e1a00003 	mov	r0, r3
 1004a08:	e24bd004 	sub	sp, fp, #4
 1004a0c:	e8bd8800 	pop	{fp, pc}

01004a10 <zero_bss>:

#include "arm_mem_regions.h"
#include "shared_ipc.h"

static inline void zero_bss(void)
{
 1004a10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004a14:	e28db000 	add	fp, sp, #0
 1004a18:	e24dd00c 	sub	sp, sp, #12
    extern uint8_t __bss_start__;
    extern uint8_t __bss_end__;
    for (uint8_t *p = &__bss_start__; p < &__bss_end__; ++p) *p = 0;
 1004a1c:	e3083000 	movw	r3, #32768	; 0x8000
 1004a20:	e3403100 	movt	r3, #256	; 0x100
 1004a24:	e50b3008 	str	r3, [fp, #-8]
 1004a28:	ea000005 	b	1004a44 <zero_bss+0x34>
 1004a2c:	e51b3008 	ldr	r3, [fp, #-8]
 1004a30:	e3a02000 	mov	r2, #0
 1004a34:	e5c32000 	strb	r2, [r3]
 1004a38:	e51b3008 	ldr	r3, [fp, #-8]
 1004a3c:	e2833001 	add	r3, r3, #1
 1004a40:	e50b3008 	str	r3, [fp, #-8]
 1004a44:	e51b2008 	ldr	r2, [fp, #-8]
 1004a48:	e30c3000 	movw	r3, #49152	; 0xc000
 1004a4c:	e3403101 	movt	r3, #257	; 0x101
 1004a50:	e1520003 	cmp	r2, r3
 1004a54:	3afffff4 	bcc	1004a2c <zero_bss+0x1c>
}
 1004a58:	e320f000 	nop	{0}
 1004a5c:	e320f000 	nop	{0}
 1004a60:	e28bd000 	add	sp, fp, #0
 1004a64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004a68:	e12fff1e 	bx	lr

01004a6c <set_vbar>:

extern char _vectors;  // dichiarazione simbolo dal linker/HWLIB
static inline void set_vbar(void *addr) {
 1004a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004a70:	e28db000 	add	fp, sp, #0
 1004a74:	e24dd00c 	sub	sp, sp, #12
 1004a78:	e50b0008 	str	r0, [fp, #-8]
    __asm__ volatile ("mcr p15,0,%0,c12,c0,0" :: "r"(addr) : "memory");
 1004a7c:	e51b3008 	ldr	r3, [fp, #-8]
 1004a80:	ee0c3f10 	mcr	15, 0, r3, cr12, cr0, {0}
    __asm__ volatile ("isb");
 1004a84:	f57ff06f 	isb	sy
}
 1004a88:	e320f000 	nop	{0}
 1004a8c:	e28bd000 	add	sp, fp, #0
 1004a90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004a94:	e12fff1e 	bx	lr

01004a98 <core1_main>:


void core1_main(void)
{
 1004a98:	e92d4800 	push	{fp, lr}
 1004a9c:	e28db004 	add	fp, sp, #4
	set_vbar(&_vectors);
 1004aa0:	e3000000 	movw	r0, #0
 1004aa4:	e3400100 	movt	r0, #256	; 0x100
 1004aa8:	ebffffef 	bl	1004a6c <set_vbar>
    zero_bss();
 1004aac:	ebffffd7 	bl	1004a10 <zero_bss>

    // MMU di Core1 (crea le regioni: DDR WBWA + SHM NON-CACHEABLE + Device)
    (void)arm_mmu_setup_core1();
 1004ab0:	eb00013a 	bl	1004fa0 <arm_mmu_setup_core1>
    // UART (se Core0 l’ha già messa su, puoi solo usare printf;
    // in alternativa, re-inizializza uart1 qui)
    //uart_stdio_init_uart1(115200);

    // Attendi che Core0 abbia inizializzato tutto e “aperto” l’handshake
    while (SHM_CTRL->magic != SHM_MAGIC_BOOT) { /* spin */ }
 1004ab4:	e320f000 	nop	{0}
 1004ab8:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004abc:	e5932000 	ldr	r2, [r3]
 1004ac0:	e3013dea 	movw	r3, #7658	; 0x1dea
 1004ac4:	e34c30de 	movt	r3, #49374	; 0xc0de
 1004ac8:	e1520003 	cmp	r2, r3
 1004acc:	1afffff9 	bne	1004ab8 <core1_main+0x20>
    while (SHM_CTRL->core0_ready != 1u)        { /* spin */ }
 1004ad0:	e320f000 	nop	{0}
 1004ad4:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004ad8:	e5933004 	ldr	r3, [r3, #4]
 1004adc:	e3530001 	cmp	r3, #1
 1004ae0:	1afffffb 	bne	1004ad4 <core1_main+0x3c>

    // Saluta e dichiara “ready”
    printf("\n[Core1] hello from DDR low. SHM @ 0x%08X ready.", SHM_BASE);
 1004ae4:	e3a0143f 	mov	r1, #1056964608	; 0x3f000000
 1004ae8:	e3050544 	movw	r0, #21828	; 0x5544
 1004aec:	e3400100 	movt	r0, #256	; 0x100
 1004af0:	ebfffba4 	bl	1003988 <alt_printf>
    SHM_CTRL->core1_ready = 1u;
 1004af4:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004af8:	e5d32008 	ldrb	r2, [r3, #8]
 1004afc:	e3a02000 	mov	r2, #0
 1004b00:	e3822001 	orr	r2, r2, #1
 1004b04:	e5c32008 	strb	r2, [r3, #8]
 1004b08:	e5d32009 	ldrb	r2, [r3, #9]
 1004b0c:	e3a02000 	mov	r2, #0
 1004b10:	e5c32009 	strb	r2, [r3, #9]
 1004b14:	e5d3200a 	ldrb	r2, [r3, #10]
 1004b18:	e3a02000 	mov	r2, #0
 1004b1c:	e5c3200a 	strb	r2, [r3, #10]
 1004b20:	e5d3200b 	ldrb	r2, [r3, #11]
 1004b24:	e3a02000 	mov	r2, #0
 1004b28:	e5c3200b 	strb	r2, [r3, #11]
    __asm__ volatile("dmb sy" ::: "memory");
 1004b2c:	f57ff05f 	dmb	sy

    // Esempio d’uso: aggiorna un contatore condiviso
    for (;;) {
        SHM_CTRL->trig_count++;
 1004b30:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1004b34:	e593200c 	ldr	r2, [r3, #12]
 1004b38:	e2822001 	add	r2, r2, #1
 1004b3c:	e583200c 	str	r2, [r3, #12]
        __asm__ volatile("dmb sy" ::: "memory");
 1004b40:	f57ff05f 	dmb	sy
        SHM_CTRL->trig_count++;
 1004b44:	eafffff9 	b	1004b30 <core1_main+0x98>

01004b48 <core1_startup_body>:
extern unsigned long __data_start__, __data_end__, __data_load__;
extern void core1_main(void);

/* Entry linkata nel linker: ENTRY(_start_core1) */
static void __attribute__((used)) core1_startup_body(void)
{
 1004b48:	e92d4800 	push	{fp, lr}
 1004b4c:	e28db004 	add	fp, sp, #4
 1004b50:	e24dd008 	sub	sp, sp, #8

    /* azzera BSS */
    for (unsigned long *p = &__bss_start__; p < &__bss_end__; ++p) {
 1004b54:	e3083000 	movw	r3, #32768	; 0x8000
 1004b58:	e3403100 	movt	r3, #256	; 0x100
 1004b5c:	e50b3008 	str	r3, [fp, #-8]
 1004b60:	ea000005 	b	1004b7c <core1_startup_body+0x34>
        *p = 0UL;
 1004b64:	e51b3008 	ldr	r3, [fp, #-8]
 1004b68:	e3a02000 	mov	r2, #0
 1004b6c:	e5832000 	str	r2, [r3]
    for (unsigned long *p = &__bss_start__; p < &__bss_end__; ++p) {
 1004b70:	e51b3008 	ldr	r3, [fp, #-8]
 1004b74:	e2833004 	add	r3, r3, #4
 1004b78:	e50b3008 	str	r3, [fp, #-8]
 1004b7c:	e51b2008 	ldr	r2, [fp, #-8]
 1004b80:	e30c3000 	movw	r3, #49152	; 0xc000
 1004b84:	e3403101 	movt	r3, #257	; 0x101
 1004b88:	e1520003 	cmp	r2, r3
 1004b8c:	3afffff4 	bcc	1004b64 <core1_startup_body+0x1c>
       // uint32_t vectors = (uint32_t)&__vectors_start__;
       // __asm__ volatile ("mcr p15,0,%0,c12,c0,0" :: "r"(vectors) : "memory");
       // __asm__ volatile("isb");
    */

    (void)core1_main();
 1004b90:	ebffffc0 	bl	1004a98 <core1_main>

    for (;;) { /* stop */ }
 1004b94:	eafffffe 	b	1004b94 <core1_startup_body+0x4c>

01004b98 <_start_core1>:

/* Entry linkata nel linker: ENTRY(_start_core1) */
void __attribute__((naked)) _start_core1(void)
{
    /* set SP in cima alla regione DDR_PRIV */
    __asm__ volatile (
 1004b98:	e59fd004 	ldr	sp, [pc, #4]	; 1004ba4 <_start_core1+0xc>
 1004b9c:	eaffffe9 	b	1004b48 <core1_startup_body>
        "ldr sp, =__stack_top__\n\t"
        "b core1_startup_body\n\t"
        ::: "memory");
}
 1004ba0:	e320f000 	nop	{0}
 1004ba4:	3f000000 	svccc	0x00000000

01004ba8 <memset>:
// src/core1/libc_min.c
#include <stddef.h>
#include <stdint.h>

void *memset(void *s, int c, size_t n)
{
 1004ba8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004bac:	e28db000 	add	fp, sp, #0
 1004bb0:	e24dd01c 	sub	sp, sp, #28
 1004bb4:	e50b0010 	str	r0, [fp, #-16]
 1004bb8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 1004bbc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint8_t *p = (uint8_t *)s;
 1004bc0:	e51b3010 	ldr	r3, [fp, #-16]
 1004bc4:	e50b300c 	str	r3, [fp, #-12]
    for (size_t i = 0; i < n; ++i) p[i] = (uint8_t)c;
 1004bc8:	e3a03000 	mov	r3, #0
 1004bcc:	e50b3008 	str	r3, [fp, #-8]
 1004bd0:	ea000008 	b	1004bf8 <memset+0x50>
 1004bd4:	e51b200c 	ldr	r2, [fp, #-12]
 1004bd8:	e51b3008 	ldr	r3, [fp, #-8]
 1004bdc:	e0823003 	add	r3, r2, r3
 1004be0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1004be4:	e6ef2072 	uxtb	r2, r2
 1004be8:	e5c32000 	strb	r2, [r3]
 1004bec:	e51b3008 	ldr	r3, [fp, #-8]
 1004bf0:	e2833001 	add	r3, r3, #1
 1004bf4:	e50b3008 	str	r3, [fp, #-8]
 1004bf8:	e51b2008 	ldr	r2, [fp, #-8]
 1004bfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004c00:	e1520003 	cmp	r2, r3
 1004c04:	3afffff2 	bcc	1004bd4 <memset+0x2c>
    return s;
 1004c08:	e51b3010 	ldr	r3, [fp, #-16]
}
 1004c0c:	e1a00003 	mov	r0, r3
 1004c10:	e28bd000 	add	sp, fp, #0
 1004c14:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004c18:	e12fff1e 	bx	lr

01004c1c <memcpy>:

void *memcpy(void *dst, const void *src, size_t n)
{
 1004c1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004c20:	e28db000 	add	fp, sp, #0
 1004c24:	e24dd024 	sub	sp, sp, #36	; 0x24
 1004c28:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1004c2c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 1004c30:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    uint8_t *d = (uint8_t *)dst;
 1004c34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004c38:	e50b300c 	str	r3, [fp, #-12]
    const uint8_t *s = (const uint8_t *)src;
 1004c3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004c40:	e50b3010 	str	r3, [fp, #-16]
    for (size_t i = 0; i < n; ++i) d[i] = s[i];
 1004c44:	e3a03000 	mov	r3, #0
 1004c48:	e50b3008 	str	r3, [fp, #-8]
 1004c4c:	ea00000a 	b	1004c7c <memcpy+0x60>
 1004c50:	e51b2010 	ldr	r2, [fp, #-16]
 1004c54:	e51b3008 	ldr	r3, [fp, #-8]
 1004c58:	e0822003 	add	r2, r2, r3
 1004c5c:	e51b100c 	ldr	r1, [fp, #-12]
 1004c60:	e51b3008 	ldr	r3, [fp, #-8]
 1004c64:	e0813003 	add	r3, r1, r3
 1004c68:	e5d22000 	ldrb	r2, [r2]
 1004c6c:	e5c32000 	strb	r2, [r3]
 1004c70:	e51b3008 	ldr	r3, [fp, #-8]
 1004c74:	e2833001 	add	r3, r3, #1
 1004c78:	e50b3008 	str	r3, [fp, #-8]
 1004c7c:	e51b2008 	ldr	r2, [fp, #-8]
 1004c80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1004c84:	e1520003 	cmp	r2, r3
 1004c88:	3afffff0 	bcc	1004c50 <memcpy+0x34>
    return dst;
 1004c8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
 1004c90:	e1a00003 	mov	r0, r3
 1004c94:	e28bd000 	add	sp, fp, #0
 1004c98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004c9c:	e12fff1e 	bx	lr

01004ca0 <dsb>:

// ---------------------------
// Helpers CP15 / barriere
// ---------------------------
static inline void dmb(void){ __asm__ volatile("dmb sy" ::: "memory"); }
static inline void dsb(void){ __asm__ volatile("dsb sy" ::: "memory"); }
 1004ca0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004ca4:	e28db000 	add	fp, sp, #0
 1004ca8:	f57ff04f 	dsb	sy
 1004cac:	e320f000 	nop	{0}
 1004cb0:	e28bd000 	add	sp, fp, #0
 1004cb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004cb8:	e12fff1e 	bx	lr

01004cbc <isb>:
static inline void isb(void){ __asm__ volatile("isb" ::: "memory"); }
 1004cbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004cc0:	e28db000 	add	fp, sp, #0
 1004cc4:	f57ff06f 	isb	sy
 1004cc8:	e320f000 	nop	{0}
 1004ccc:	e28bd000 	add	sp, fp, #0
 1004cd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004cd4:	e12fff1e 	bx	lr

01004cd8 <a9_sanitize_before_mmu>:


// Disabilita MMU/I/D/BP e invalida TLB (presume IRQ/FIQ OFF e VBAR già ok)
static inline void a9_sanitize_before_mmu(void)
{
 1004cd8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004cdc:	e28db000 	add	fp, sp, #0
 1004ce0:	e24dd00c 	sub	sp, sp, #12
    // qui presumiamo già IRQ/FIQ disabilitati (cpsid if) e VBAR corretto
    uint32_t sctlr;
    __asm__ volatile("mrc p15,0,%0,c1,c0,0" : "=r"(sctlr));
 1004ce4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
 1004ce8:	e50b3008 	str	r3, [fp, #-8]

    // spegni MMU (M), D-cache (C), I-cache (I), Branch predictor (Z)
    sctlr &= ~( (1u<<0) | (1u<<2) | (1u<<12) | (1u<<11) );
 1004cec:	e51b3008 	ldr	r3, [fp, #-8]
 1004cf0:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
 1004cf4:	e3c33005 	bic	r3, r3, #5
 1004cf8:	e50b3008 	str	r3, [fp, #-8]
    __asm__ volatile("mcr p15,0,%0,c1,c0,0" :: "r"(sctlr));
 1004cfc:	e51b3008 	ldr	r3, [fp, #-8]
 1004d00:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    __asm__ volatile("dsb sy; isb");
 1004d04:	f57ff04f 	dsb	sy
 1004d08:	f57ff06f 	isb	sy

    // invalida TLB unificati
    __asm__ volatile("mcr p15,0,%0,c8,c7,0" :: "r"(0));
 1004d0c:	e3a03000 	mov	r3, #0
 1004d10:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    __asm__ volatile("dsb sy; isb");
 1004d14:	f57ff04f 	dsb	sy
 1004d18:	f57ff06f 	isb	sy
}
 1004d1c:	e320f000 	nop	{0}
 1004d20:	e28bd000 	add	sp, fp, #0
 1004d24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004d28:	e12fff1e 	bx	lr

01004d2c <arm_enable_smp_and_scu>:

// Abilita SMP + SCU (prima di accendere cache/MMU)
void arm_enable_smp_and_scu(void)
{
 1004d2c:	e92d4800 	push	{fp, lr}
 1004d30:	e28db004 	add	fp, sp, #4
 1004d34:	e24dd010 	sub	sp, sp, #16
    uint32_t actlr;
    __asm__ volatile("mrc p15,0,%0,c1,c0,1":"=r"(actlr));
 1004d38:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
 1004d3c:	e50b3008 	str	r3, [fp, #-8]
    actlr |= (1u<<6); // ACTLR.SMP=1
 1004d40:	e51b3008 	ldr	r3, [fp, #-8]
 1004d44:	e3833040 	orr	r3, r3, #64	; 0x40
 1004d48:	e50b3008 	str	r3, [fp, #-8]
    __asm__ volatile("mcr p15,0,%0,c1,c0,1"::"r"(actlr));
 1004d4c:	e51b3008 	ldr	r3, [fp, #-8]
 1004d50:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    dsb(); isb();
 1004d54:	ebffffd1 	bl	1004ca0 <dsb>
 1004d58:	ebffffd7 	bl	1004cbc <isb>
     * prova ad accedere ai registri privati della SCU.  In tal caso occorre
     * abilitare la SCU esclusivamente dal core 0, mentre è comunque necessario
     * impostare il bit SMP sugli altri core.
    */
    uint32_t mpidr;
    __asm__ volatile("mrc p15,0,%0,c0,c0,5" : "=r"(mpidr));
 1004d5c:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
 1004d60:	e50b300c 	str	r3, [fp, #-12]
    if ((mpidr & 0x3u) == 0u) {
 1004d64:	e51b300c 	ldr	r3, [fp, #-12]
 1004d68:	e2033003 	and	r3, r3, #3
 1004d6c:	e3530000 	cmp	r3, #0
 1004d70:	1a00000d 	bne	1004dac <arm_enable_smp_and_scu+0x80>
    	volatile uint32_t *SCU_CTRL = (volatile uint32_t *)(uintptr_t)(A9_SCU_BASE + 0x00u);
 1004d74:	e3a03903 	mov	r3, #49152	; 0xc000
 1004d78:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 1004d7c:	e50b3010 	str	r3, [fp, #-16]
        uint32_t val = *SCU_CTRL;
 1004d80:	e51b3010 	ldr	r3, [fp, #-16]
 1004d84:	e5933000 	ldr	r3, [r3]
 1004d88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        val |= 1u; // enable SCU
 1004d8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1004d90:	e3833001 	orr	r3, r3, #1
 1004d94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        *SCU_CTRL = val;
 1004d98:	e51b3010 	ldr	r3, [fp, #-16]
 1004d9c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1004da0:	e5832000 	str	r2, [r3]
        dsb(); isb();
 1004da4:	ebffffbd 	bl	1004ca0 <dsb>
 1004da8:	ebffffc3 	bl	1004cbc <isb>
    }
}
 1004dac:	e320f000 	nop	{0}
 1004db0:	e24bd004 	sub	sp, fp, #4
 1004db4:	e8bd8800 	pop	{fp, pc}

01004db8 <mmu_aux_alloc>:
static uint8_t   s_mmu_aux_pool[64 * 1024] __attribute__((aligned(16384)));
static mmu_pool_t s_mmu_pool = { s_mmu_aux_pool, sizeof(s_mmu_aux_pool), 0 };

/* Allocatore con la FIRMA CORRETTA: (const unsigned int size, void *user_ctx) */
static void *mmu_aux_alloc(const unsigned int size, void *user_ctx)
{
 1004db8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1004dbc:	e28db000 	add	fp, sp, #0
 1004dc0:	e24dd01c 	sub	sp, sp, #28
 1004dc4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1004dc8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mmu_pool_t *pool = (mmu_pool_t *)user_ctx;
 1004dcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1004dd0:	e50b3008 	str	r3, [fp, #-8]
    if (!pool) return NULL;
 1004dd4:	e51b3008 	ldr	r3, [fp, #-8]
 1004dd8:	e3530000 	cmp	r3, #0
 1004ddc:	1a000001 	bne	1004de8 <mmu_aux_alloc+0x30>
 1004de0:	e3a03000 	mov	r3, #0
 1004de4:	ea000023 	b	1004e78 <mmu_aux_alloc+0xc0>

    /* Allineo a 16KB per richieste grandi (TTB), altrimenti 64B */
    const size_t align = (size >= 16384u) ? 16384u : 64u;
 1004de8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004dec:	e3530901 	cmp	r3, #16384	; 0x4000
 1004df0:	3a000001 	bcc	1004dfc <mmu_aux_alloc+0x44>
 1004df4:	e3a03901 	mov	r3, #16384	; 0x4000
 1004df8:	ea000000 	b	1004e00 <mmu_aux_alloc+0x48>
 1004dfc:	e3a03040 	mov	r3, #64	; 0x40
 1004e00:	e50b300c 	str	r3, [fp, #-12]
    size_t off = (pool->off + (align - 1u)) & ~(align - 1u);
 1004e04:	e51b3008 	ldr	r3, [fp, #-8]
 1004e08:	e5932008 	ldr	r2, [r3, #8]
 1004e0c:	e51b300c 	ldr	r3, [fp, #-12]
 1004e10:	e0823003 	add	r3, r2, r3
 1004e14:	e2432001 	sub	r2, r3, #1
 1004e18:	e51b300c 	ldr	r3, [fp, #-12]
 1004e1c:	e2633000 	rsb	r3, r3, #0
 1004e20:	e0033002 	and	r3, r3, r2
 1004e24:	e50b3010 	str	r3, [fp, #-16]

    if (off + size > pool->size) return NULL;
 1004e28:	e51b2010 	ldr	r2, [fp, #-16]
 1004e2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004e30:	e0822003 	add	r2, r2, r3
 1004e34:	e51b3008 	ldr	r3, [fp, #-8]
 1004e38:	e5933004 	ldr	r3, [r3, #4]
 1004e3c:	e1520003 	cmp	r2, r3
 1004e40:	9a000001 	bls	1004e4c <mmu_aux_alloc+0x94>
 1004e44:	e3a03000 	mov	r3, #0
 1004e48:	ea00000a 	b	1004e78 <mmu_aux_alloc+0xc0>

    void *ptr = pool->base + off;
 1004e4c:	e51b3008 	ldr	r3, [fp, #-8]
 1004e50:	e5932000 	ldr	r2, [r3]
 1004e54:	e51b3010 	ldr	r3, [fp, #-16]
 1004e58:	e0823003 	add	r3, r2, r3
 1004e5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pool->off = off + size;
 1004e60:	e51b2010 	ldr	r2, [fp, #-16]
 1004e64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1004e68:	e0822003 	add	r2, r2, r3
 1004e6c:	e51b3008 	ldr	r3, [fp, #-8]
 1004e70:	e5832008 	str	r2, [r3, #8]
    return ptr;
 1004e74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
 1004e78:	e1a00003 	mov	r0, r3
 1004e7c:	e28bd000 	add	sp, fp, #0
 1004e80:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1004e84:	e12fff1e 	bx	lr

01004e88 <create_va_space_core1_ddr>:


// VA space per CORE1: Shared low DDR + DDR privata core1 + SHM non-cache + periferiche HPS.
static ALT_STATUS_CODE create_va_space_core1_ddr(uint32_t **ttb_out)
{
 1004e88:	e92d4800 	push	{fp, lr}
 1004e8c:	e28db004 	add	fp, sp, #4
 1004e90:	e24dd070 	sub	sp, sp, #112	; 0x70
 1004e94:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98
    ALT_STATUS_CODE s = alt_mmu_init();
 1004e98:	ebfff3cc 	bl	1001dd0 <alt_mmu_init>
 1004e9c:	e50b0008 	str	r0, [fp, #-8]
    if (s != ALT_E_SUCCESS) return s;
 1004ea0:	e51b3008 	ldr	r3, [fp, #-8]
 1004ea4:	e3530000 	cmp	r3, #0
 1004ea8:	0a000001 	beq	1004eb4 <create_va_space_core1_ddr+0x2c>
 1004eac:	e51b3008 	ldr	r3, [fp, #-8]
 1004eb0:	ea000037 	b	1004f94 <create_va_space_core1_ddr+0x10c>

    s_mmu_pool.off = 0;
 1004eb4:	e3053628 	movw	r3, #22056	; 0x5628
 1004eb8:	e3403100 	movt	r3, #256	; 0x100
 1004ebc:	e3a02000 	mov	r2, #0
 1004ec0:	e5832008 	str	r2, [r3, #8]

    ALT_MMU_MEM_REGION_t regions[] = {
 1004ec4:	e3053578 	movw	r3, #21880	; 0x5578
 1004ec8:	e3403100 	movt	r3, #256	; 0x100
 1004ecc:	e24b0060 	sub	r0, fp, #96	; 0x60
 1004ed0:	e1a01003 	mov	r1, r3
 1004ed4:	e3a03050 	mov	r3, #80	; 0x50
 1004ed8:	e1a02003 	mov	r2, r3
 1004edc:	ebffff4e 	bl	1004c1c <memcpy>
            .execute    = ALT_MMU_TTB_XN_ENABLE,
            .security   = ALT_MMU_TTB_NS_SECURE
        }
    };

    size_t region_count = sizeof(regions)/sizeof(regions[0]);
 1004ee0:	e3a03004 	mov	r3, #4
 1004ee4:	e50b300c 	str	r3, [fp, #-12]
    size_t need = alt_mmu_va_space_storage_required(regions, region_count);
 1004ee8:	e24b3060 	sub	r3, fp, #96	; 0x60
 1004eec:	e51b100c 	ldr	r1, [fp, #-12]
 1004ef0:	e1a00003 	mov	r0, r3
 1004ef4:	ebfff581 	bl	1002500 <alt_mmu_va_space_storage_required>
 1004ef8:	e50b0010 	str	r0, [fp, #-16]
    if (need > sizeof(s_ttb_storage)) return ALT_E_BAD_ARG;
 1004efc:	e51b3010 	ldr	r3, [fp, #-16]
 1004f00:	e3530801 	cmp	r3, #65536	; 0x10000
 1004f04:	9a000001 	bls	1004f10 <create_va_space_core1_ddr+0x88>
 1004f08:	e3e03008 	mvn	r3, #8
 1004f0c:	ea000020 	b	1004f94 <create_va_space_core1_ddr+0x10c>

    uint32_t *ttb1 = NULL;
 1004f10:	e3a03000 	mov	r3, #0
 1004f14:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    s = alt_mmu_va_space_create(&ttb1, regions, region_count,
 1004f18:	e24b1060 	sub	r1, fp, #96	; 0x60
 1004f1c:	e24b0064 	sub	r0, fp, #100	; 0x64
 1004f20:	e3053628 	movw	r3, #22056	; 0x5628
 1004f24:	e3403100 	movt	r3, #256	; 0x100
 1004f28:	e58d3000 	str	r3, [sp]
 1004f2c:	e3043db8 	movw	r3, #19896	; 0x4db8
 1004f30:	e3403100 	movt	r3, #256	; 0x100
 1004f34:	e51b200c 	ldr	r2, [fp, #-12]
 1004f38:	ebfff6cd 	bl	1002a74 <alt_mmu_va_space_create>
 1004f3c:	e50b0008 	str	r0, [fp, #-8]
                                /*ttb_alloc=*/mmu_aux_alloc,
                                /*ttb_alloc_user=*/&s_mmu_pool);
    if (s != ALT_E_SUCCESS) return s;
 1004f40:	e51b3008 	ldr	r3, [fp, #-8]
 1004f44:	e3530000 	cmp	r3, #0
 1004f48:	0a000001 	beq	1004f54 <create_va_space_core1_ddr+0xcc>
 1004f4c:	e51b3008 	ldr	r3, [fp, #-8]
 1004f50:	ea00000f 	b	1004f94 <create_va_space_core1_ddr+0x10c>

    s = alt_mmu_va_space_enable(ttb1);
 1004f54:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
 1004f58:	e1a00003 	mov	r0, r3
 1004f5c:	ebfffa3a 	bl	100384c <alt_mmu_va_space_enable>
 1004f60:	e50b0008 	str	r0, [fp, #-8]
    if (s != ALT_E_SUCCESS) return s;
 1004f64:	e51b3008 	ldr	r3, [fp, #-8]
 1004f68:	e3530000 	cmp	r3, #0
 1004f6c:	0a000001 	beq	1004f78 <create_va_space_core1_ddr+0xf0>
 1004f70:	e51b3008 	ldr	r3, [fp, #-8]
 1004f74:	ea000006 	b	1004f94 <create_va_space_core1_ddr+0x10c>

    if (ttb_out) *ttb_out = ttb1;
 1004f78:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
 1004f7c:	e3530000 	cmp	r3, #0
 1004f80:	0a000002 	beq	1004f90 <create_va_space_core1_ddr+0x108>
 1004f84:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
 1004f88:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
 1004f8c:	e5832000 	str	r2, [r3]
    return ALT_E_SUCCESS;
 1004f90:	e3a03000 	mov	r3, #0
}
 1004f94:	e1a00003 	mov	r0, r3
 1004f98:	e24bd004 	sub	sp, fp, #4
 1004f9c:	e8bd8800 	pop	{fp, pc}

01004fa0 <arm_mmu_setup_core1>:
	    return ALT_E_SUCCESS;
}

// Core1 → mappa [C1]
ALT_STATUS_CODE arm_mmu_setup_core1(void)
{
 1004fa0:	e92d4800 	push	{fp, lr}
 1004fa4:	e28db004 	add	fp, sp, #4
 1004fa8:	e24dd008 	sub	sp, sp, #8
    a9_sanitize_before_mmu();
 1004fac:	ebffff49 	bl	1004cd8 <a9_sanitize_before_mmu>
    arm_enable_smp_and_scu();
 1004fb0:	ebffff5d 	bl	1004d2c <arm_enable_smp_and_scu>

    uint32_t *ttb = NULL;
 1004fb4:	e3a03000 	mov	r3, #0
 1004fb8:	e50b300c 	str	r3, [fp, #-12]
    int s;
    s=create_va_space_core1_ddr(&ttb);
 1004fbc:	e24b300c 	sub	r3, fp, #12
 1004fc0:	e1a00003 	mov	r0, r3
 1004fc4:	ebffffaf 	bl	1004e88 <create_va_space_core1_ddr>
 1004fc8:	e50b0008 	str	r0, [fp, #-8]
    //return create_va_space_core1(&ttb);
    return s;
 1004fcc:	e51b3008 	ldr	r3, [fp, #-8]
}
 1004fd0:	e1a00003 	mov	r0, r3
 1004fd4:	e24bd004 	sub	sp, fp, #4
 1004fd8:	e8bd8800 	pop	{fp, pc}

01004fdc <__udivsi3>:
 1004fdc:	e2512001 	subs	r2, r1, #1
 1004fe0:	012fff1e 	bxeq	lr
 1004fe4:	3a000036 	bcc	10050c4 <__udivsi3+0xe8>
 1004fe8:	e1500001 	cmp	r0, r1
 1004fec:	9a000022 	bls	100507c <__udivsi3+0xa0>
 1004ff0:	e1110002 	tst	r1, r2
 1004ff4:	0a000023 	beq	1005088 <__udivsi3+0xac>
 1004ff8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 1004ffc:	01a01181 	lsleq	r1, r1, #3
 1005000:	03a03008 	moveq	r3, #8
 1005004:	13a03001 	movne	r3, #1
 1005008:	e3510201 	cmp	r1, #268435456	; 0x10000000
 100500c:	31510000 	cmpcc	r1, r0
 1005010:	31a01201 	lslcc	r1, r1, #4
 1005014:	31a03203 	lslcc	r3, r3, #4
 1005018:	3afffffa 	bcc	1005008 <__udivsi3+0x2c>
 100501c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 1005020:	31510000 	cmpcc	r1, r0
 1005024:	31a01081 	lslcc	r1, r1, #1
 1005028:	31a03083 	lslcc	r3, r3, #1
 100502c:	3afffffa 	bcc	100501c <__udivsi3+0x40>
 1005030:	e3a02000 	mov	r2, #0
 1005034:	e1500001 	cmp	r0, r1
 1005038:	20400001 	subcs	r0, r0, r1
 100503c:	21822003 	orrcs	r2, r2, r3
 1005040:	e15000a1 	cmp	r0, r1, lsr #1
 1005044:	204000a1 	subcs	r0, r0, r1, lsr #1
 1005048:	218220a3 	orrcs	r2, r2, r3, lsr #1
 100504c:	e1500121 	cmp	r0, r1, lsr #2
 1005050:	20400121 	subcs	r0, r0, r1, lsr #2
 1005054:	21822123 	orrcs	r2, r2, r3, lsr #2
 1005058:	e15001a1 	cmp	r0, r1, lsr #3
 100505c:	204001a1 	subcs	r0, r0, r1, lsr #3
 1005060:	218221a3 	orrcs	r2, r2, r3, lsr #3
 1005064:	e3500000 	cmp	r0, #0
 1005068:	11b03223 	lsrsne	r3, r3, #4
 100506c:	11a01221 	lsrne	r1, r1, #4
 1005070:	1affffef 	bne	1005034 <__udivsi3+0x58>
 1005074:	e1a00002 	mov	r0, r2
 1005078:	e12fff1e 	bx	lr
 100507c:	03a00001 	moveq	r0, #1
 1005080:	13a00000 	movne	r0, #0
 1005084:	e12fff1e 	bx	lr
 1005088:	e3510801 	cmp	r1, #65536	; 0x10000
 100508c:	21a01821 	lsrcs	r1, r1, #16
 1005090:	23a02010 	movcs	r2, #16
 1005094:	33a02000 	movcc	r2, #0
 1005098:	e3510c01 	cmp	r1, #256	; 0x100
 100509c:	21a01421 	lsrcs	r1, r1, #8
 10050a0:	22822008 	addcs	r2, r2, #8
 10050a4:	e3510010 	cmp	r1, #16
 10050a8:	21a01221 	lsrcs	r1, r1, #4
 10050ac:	22822004 	addcs	r2, r2, #4
 10050b0:	e3510004 	cmp	r1, #4
 10050b4:	82822003 	addhi	r2, r2, #3
 10050b8:	908220a1 	addls	r2, r2, r1, lsr #1
 10050bc:	e1a00230 	lsr	r0, r0, r2
 10050c0:	e12fff1e 	bx	lr
 10050c4:	e3500000 	cmp	r0, #0
 10050c8:	13e00000 	mvnne	r0, #0
 10050cc:	ea000007 	b	10050f0 <__aeabi_idiv0>

010050d0 <__aeabi_uidivmod>:
 10050d0:	e3510000 	cmp	r1, #0
 10050d4:	0afffffa 	beq	10050c4 <__udivsi3+0xe8>
 10050d8:	e92d4003 	push	{r0, r1, lr}
 10050dc:	ebffffbe 	bl	1004fdc <__udivsi3>
 10050e0:	e8bd4006 	pop	{r1, r2, lr}
 10050e4:	e0030092 	mul	r3, r2, r0
 10050e8:	e0411003 	sub	r1, r1, r3
 10050ec:	e12fff1e 	bx	lr

010050f0 <__aeabi_idiv0>:
 10050f0:	e12fff1e 	bx	lr

010050f4 <__aeabi_uldivmod>:
 10050f4:	e3530000 	cmp	r3, #0
 10050f8:	03520000 	cmpeq	r2, #0
 10050fc:	1a000004 	bne	1005114 <__aeabi_uldivmod+0x20>
 1005100:	e3510000 	cmp	r1, #0
 1005104:	03500000 	cmpeq	r0, #0
 1005108:	13e01000 	mvnne	r1, #0
 100510c:	13e00000 	mvnne	r0, #0
 1005110:	eafffff6 	b	10050f0 <__aeabi_idiv0>
 1005114:	e24dd008 	sub	sp, sp, #8
 1005118:	e92d6000 	push	{sp, lr}
 100511c:	eb000003 	bl	1005130 <__udivmoddi4>
 1005120:	e59de004 	ldr	lr, [sp, #4]
 1005124:	e28dd008 	add	sp, sp, #8
 1005128:	e8bd000c 	pop	{r2, r3}
 100512c:	e12fff1e 	bx	lr

01005130 <__udivmoddi4>:
 1005130:	e1510003 	cmp	r1, r3
 1005134:	01500002 	cmpeq	r0, r2
 1005138:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 100513c:	e1a04000 	mov	r4, r0
 1005140:	33a00000 	movcc	r0, #0
 1005144:	e1a05001 	mov	r5, r1
 1005148:	e59d8020 	ldr	r8, [sp, #32]
 100514c:	31a01000 	movcc	r1, r0
 1005150:	3a00003e 	bcc	1005250 <__udivmoddi4+0x120>
 1005154:	e1a01003 	mov	r1, r3
 1005158:	e1a00002 	mov	r0, r2
 100515c:	e1a06002 	mov	r6, r2
 1005160:	e1a07003 	mov	r7, r3
 1005164:	eb00003d 	bl	1005260 <__clzdi2>
 1005168:	e1a01005 	mov	r1, r5
 100516c:	e1a09000 	mov	r9, r0
 1005170:	e1a00004 	mov	r0, r4
 1005174:	eb000039 	bl	1005260 <__clzdi2>
 1005178:	e049c000 	sub	ip, r9, r0
 100517c:	e24c9020 	sub	r9, ip, #32
 1005180:	e1a03c17 	lsl	r3, r7, ip
 1005184:	e1833916 	orr	r3, r3, r6, lsl r9
 1005188:	e26ca020 	rsb	sl, ip, #32
 100518c:	e1833a36 	orr	r3, r3, r6, lsr sl
 1005190:	e1550003 	cmp	r5, r3
 1005194:	e1a02c16 	lsl	r2, r6, ip
 1005198:	01540002 	cmpeq	r4, r2
 100519c:	33a00000 	movcc	r0, #0
 10051a0:	31a01000 	movcc	r1, r0
 10051a4:	3a000005 	bcc	10051c0 <__udivmoddi4+0x90>
 10051a8:	e3a00001 	mov	r0, #1
 10051ac:	e0544002 	subs	r4, r4, r2
 10051b0:	e1a01910 	lsl	r1, r0, r9
 10051b4:	e1811a30 	orr	r1, r1, r0, lsr sl
 10051b8:	e0c55003 	sbc	r5, r5, r3
 10051bc:	e1a00c10 	lsl	r0, r0, ip
 10051c0:	e35c0000 	cmp	ip, #0
 10051c4:	0a000021 	beq	1005250 <__udivmoddi4+0x120>
 10051c8:	e1a060a2 	lsr	r6, r2, #1
 10051cc:	e1a0e00c 	mov	lr, ip
 10051d0:	e1866f83 	orr	r6, r6, r3, lsl #31
 10051d4:	e1a070a3 	lsr	r7, r3, #1
 10051d8:	ea000007 	b	10051fc <__udivmoddi4+0xcc>
 10051dc:	e0543006 	subs	r3, r4, r6
 10051e0:	e0c52007 	sbc	r2, r5, r7
 10051e4:	e0933003 	adds	r3, r3, r3
 10051e8:	e0a22002 	adc	r2, r2, r2
 10051ec:	e2934001 	adds	r4, r3, #1
 10051f0:	e2a25000 	adc	r5, r2, #0
 10051f4:	e25ee001 	subs	lr, lr, #1
 10051f8:	0a000006 	beq	1005218 <__udivmoddi4+0xe8>
 10051fc:	e1550007 	cmp	r5, r7
 1005200:	01540006 	cmpeq	r4, r6
 1005204:	2afffff4 	bcs	10051dc <__udivmoddi4+0xac>
 1005208:	e0944004 	adds	r4, r4, r4
 100520c:	e0a55005 	adc	r5, r5, r5
 1005210:	e25ee001 	subs	lr, lr, #1
 1005214:	1afffff8 	bne	10051fc <__udivmoddi4+0xcc>
 1005218:	e1a03c34 	lsr	r3, r4, ip
 100521c:	e1833a15 	orr	r3, r3, r5, lsl sl
 1005220:	e1833935 	orr	r3, r3, r5, lsr r9
 1005224:	e0900004 	adds	r0, r0, r4
 1005228:	e1a04003 	mov	r4, r3
 100522c:	e1a02c35 	lsr	r2, r5, ip
 1005230:	e0a11005 	adc	r1, r1, r5
 1005234:	e1a05002 	mov	r5, r2
 1005238:	e1a03c12 	lsl	r3, r2, ip
 100523c:	e1833914 	orr	r3, r3, r4, lsl r9
 1005240:	e1a0cc14 	lsl	ip, r4, ip
 1005244:	e050000c 	subs	r0, r0, ip
 1005248:	e1833a34 	orr	r3, r3, r4, lsr sl
 100524c:	e0c11003 	sbc	r1, r1, r3
 1005250:	e3580000 	cmp	r8, #0
 1005254:	18880030 	stmne	r8, {r4, r5}
 1005258:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 100525c:	e12fff1e 	bx	lr

01005260 <__clzdi2>:
 1005260:	e92d4010 	push	{r4, lr}
 1005264:	e3510000 	cmp	r1, #0
 1005268:	1a000002 	bne	1005278 <__clzdi2+0x18>
 100526c:	eb000005 	bl	1005288 <__clzsi2>
 1005270:	e2800020 	add	r0, r0, #32
 1005274:	ea000001 	b	1005280 <__clzdi2+0x20>
 1005278:	e1a00001 	mov	r0, r1
 100527c:	eb000001 	bl	1005288 <__clzsi2>
 1005280:	e8bd4010 	pop	{r4, lr}
 1005284:	e12fff1e 	bx	lr

01005288 <__clzsi2>:
 1005288:	e3a0101c 	mov	r1, #28
 100528c:	e3500801 	cmp	r0, #65536	; 0x10000
 1005290:	21a00820 	lsrcs	r0, r0, #16
 1005294:	22411010 	subcs	r1, r1, #16
 1005298:	e3500c01 	cmp	r0, #256	; 0x100
 100529c:	21a00420 	lsrcs	r0, r0, #8
 10052a0:	22411008 	subcs	r1, r1, #8
 10052a4:	e3500010 	cmp	r0, #16
 10052a8:	21a00220 	lsrcs	r0, r0, #4
 10052ac:	22411004 	subcs	r1, r1, #4
 10052b0:	e28f2008 	add	r2, pc, #8
 10052b4:	e7d20000 	ldrb	r0, [r2, r0]
 10052b8:	e0800001 	add	r0, r0, r1
 10052bc:	e12fff1e 	bx	lr
 10052c0:	02020304 	andeq	r0, r2, #4, 6	; 0x10000000
 10052c4:	01010101 	tsteq	r1, r1, lsl #2
	...

Disassembly of section .ARM.exidx:

010052d0 <__exidx_start>:
 10052d0:	7fffad30 	svcvc	0x00ffad30
 10052d4:	00000001 	andeq	r0, r0, r1

Disassembly of section .rodata:

010052d8 <__rodata_start__>:
 10052d8:	4e524157 	mrcmi	1, 2, r4, cr2, cr7, {2}
 10052dc:	554d4d5b 	strbpl	r4, [sp, #-3419]	; 0xfffff2a5
 10052e0:	44203a5d 	strtmi	r3, [r0], #-2653	; 0xfffff5a3
 10052e4:	20617461 	rsbcs	r7, r1, r1, ror #8
 10052e8:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
 10052ec:	74732065 	ldrbtvc	r2, [r3], #-101	; 0xffffff9b
 10052f0:	206c6c69 	rsbcs	r6, ip, r9, ror #24
 10052f4:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 10052f8:	0a2e6576 	beq	1b9e8d8 <__bss_end__+0xb828d8>
 10052fc:	00000000 	andeq	r0, r0, r0
 1005300:	01000000 	mrseq	r0, (UNDEF: 0)
 1005304:	00100000 	andseq	r0, r0, r0
 1005308:	00010000 	andeq	r0, r1, r0
 100530c:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 1005310:	4d4d5b47 	vstrmi	d21, [sp, #-284]	; 0xfffffee4
 1005314:	41563a55 	cmpmi	r6, r5, asr sl
 1005318:	46203a5d 			; <UNDEFINED> instruction: 0x46203a5d
 100531c:	756c6961 	strbvc	r6, [ip, #-2401]!	; 0xfffff69f
 1005320:	6f206572 	svcvs	0x00206572
 1005324:	696c206e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, sp}^
 1005328:	2520656e 	strcs	r6, [r0, #-1390]!	; 0xfffffa92
 100532c:	000a2e64 	andeq	r2, sl, r4, ror #28
 1005330:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 1005334:	61635b47 	cmnvs	r3, r7, asr #22
 1005338:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 100533c:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 1005340:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 1005344:	6146203a 	cmpvs	r6, sl, lsr r0
 1005348:	20746c75 	rsbscs	r6, r4, r5, ror ip
 100534c:	65746564 	ldrbvs	r6, [r4, #-1380]!	; 0xfffffa9c
 1005350:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 1005354:	4644202e 	strbmi	r2, [r4], -lr, lsr #32
 1005358:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	; 0xfffffeb4
 100535c:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 1005360:	0a2e786c 	beq	1ba3518 <__bss_end__+0xb87518>
 1005364:	00000000 	andeq	r0, r0, r0
 1005368:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 100536c:	61635b47 	cmnvs	r3, r7, asr #22
 1005370:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 1005374:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 1005378:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 100537c:	6170203a 	cmnvs	r0, sl, lsr r0
 1005380:	5d53535b 	ldclpl	3, cr5, [r3, #-364]	; 0xfffffe94
 1005384:	30203d20 	eorcc	r3, r0, r0, lsr #26
 1005388:	3b782578 	blcc	2e0e970 <__bss_end__+0x1df2970>
 100538c:	66666f20 	strbtvs	r6, [r6], -r0, lsr #30
 1005390:	20746573 	rsbscs	r6, r4, r3, ror r5
 1005394:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 1005398:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 100539c:	0000000a 	andeq	r0, r0, sl
 10053a0:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 10053a4:	61635b47 	cmnvs	r3, r7, asr #22
 10053a8:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 10053ac:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 10053b0:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 10053b4:	6170203a 	cmnvs	r0, sl, lsr r0
 10053b8:	6761705b 			; <UNDEFINED> instruction: 0x6761705b
 10053bc:	3d205d65 	stccc	13, cr5, [r0, #-404]!	; 0xfffffe6c
 10053c0:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 10053c4:	6f203b78 	svcvs	0x00203b78
 10053c8:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
 10053cc:	203d2074 	eorscs	r2, sp, r4, ror r0
 10053d0:	6c257830 	stcvs	8, cr7, [r5], #-192	; 0xffffff40
 10053d4:	000a2e78 	andeq	r2, sl, r8, ror lr
 10053d8:	5b554d4d 	blpl	2558914 <__bss_end__+0x153c914>
 10053dc:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 10053e0:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 10053e4:	62203a5d 	eorvs	r3, r0, #380928	; 0x5d000
 10053e8:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
 10053ec:	203a2928 	eorscs	r2, sl, r8, lsr #18
 10053f0:	61766e49 	cmnvs	r6, r9, asr #28
 10053f4:	2064696c 	rsbcs	r6, r4, ip, ror #18
 10053f8:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
 10053fc:	74616c73 	strbtvc	r6, [r1], #-3187	; 0xfffff38d
 1005400:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 1005404:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
 1005408:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
 100540c:	0000000a 	andeq	r0, r0, sl
 1005410:	5b554d4d 	blpl	255894c <__bss_end__+0x153c94c>
 1005414:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1005418:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 100541c:	62203a5d 	eorvs	r3, r0, #380928	; 0x5d000
 1005420:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
 1005424:	203a2928 	eorscs	r2, sl, r8, lsr #18
 1005428:	74204156 	strtvc	r4, [r0], #-342	; 0xfffffeaa
 100542c:	4150206f 	cmpmi	r0, pc, rrx
 1005430:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
 1005434:	6620726f 	strtvs	r7, [r0], -pc, ror #4
 1005438:	2520726f 	strcs	r7, [r0, #-623]!	; 0xfffffd91
 100543c:	44202e70 	strtmi	r2, [r0], #-3696	; 0xfffff190
 1005440:	20525346 	subscs	r5, r2, r6, asr #6
 1005444:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 1005448:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 100544c:	0000000a 	andeq	r0, r0, sl
 1005450:	5b554d4d 	blpl	255898c <__bss_end__+0x153c98c>
 1005454:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1005458:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 100545c:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 1005460:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 1005464:	54203a29 	strtpl	r3, [r0], #-2601	; 0xfffff5d7
 1005468:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
 100546c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
 1005470:	61206e6f 			; <UNDEFINED> instruction: 0x61206e6f
 1005474:	6165726c 	cmnvs	r5, ip, ror #4
 1005478:	63207964 			; <UNDEFINED> instruction: 0x63207964
 100547c:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
 1005480:	64657465 	strbtvs	r7, [r5], #-1125	; 0xfffffb9b
 1005484:	00000a2e 	andeq	r0, r0, lr, lsr #20
 1005488:	5b554d4d 	blpl	25589c4 <__bss_end__+0x153c9c4>
 100548c:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1005490:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1005494:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 1005498:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 100549c:	56203a29 	strtpl	r3, [r0], -r9, lsr #20
 10054a0:	6f742041 	svcvs	0x00742041
 10054a4:	20415020 	subcs	r5, r1, r0, lsr #32
 10054a8:	6f727265 	svcvs	0x00727265
 10054ac:	6f662072 	svcvs	0x00662072
 10054b0:	70252072 	eorvc	r2, r5, r2, ror r0
 10054b4:	4644202e 	strbmi	r2, [r4], -lr, lsr #32
 10054b8:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	; 0xfffffeb4
 10054bc:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 10054c0:	0a2e786c 	beq	1ba3678 <__bss_end__+0xb87678>
 10054c4:	00000000 	andeq	r0, r0, r0
 10054c8:	5b554d4d 	blpl	2558a04 <__bss_end__+0x153ca04>
 10054cc:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 10054d0:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 10054d4:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 10054d8:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 10054dc:	43203a29 			; <UNDEFINED> instruction: 0x43203a29
 10054e0:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
 10054e4:	64656373 	strbtvs	r6, [r5], #-883	; 0xfffffc8d
 10054e8:	78656e20 	stmdavc	r5!, {r5, r9, sl, fp, sp, lr}^
 10054ec:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 10054f0:	6e656d67 	cdpvs	13, 6, cr6, cr5, cr7, {3}
 10054f4:	4e202e74 	mcrmi	14, 1, r2, cr0, cr4, {3}
 10054f8:	73207765 			; <UNDEFINED> instruction: 0x73207765
 10054fc:	20657a69 	rsbcs	r7, r5, r9, ror #20
 1005500:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 1005504:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 1005508:	0000000a 	andeq	r0, r0, sl
 100550c:	5b554d4d 	blpl	2558a48 <__bss_end__+0x153ca48>
 1005510:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1005514:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1005518:	65203a5d 	strvs	r3, [r0, #-2653]!	; 0xfffff5a3
 100551c:	2928646e 	stmdbcs	r8!, {r1, r2, r3, r5, r6, sl, sp, lr}
 1005520:	7254203a 	subsvc	r2, r4, #58	; 0x3a
 1005524:	6c736e61 	ldclvs	14, cr6, [r3], #-388	; 0xfffffe7c
 1005528:	6f697461 	svcvs	0x00697461
 100552c:	7270206e 	rsbsvc	r2, r0, #110	; 0x6e
 1005530:	6572676f 	ldrbvs	r6, [r2, #-1903]!	; 0xfffff891
 1005534:	75207373 	strvc	r7, [r0, #-883]!	; 0xfffffc8d
 1005538:	6d6f636e 	stclvs	3, cr6, [pc, #-440]!	; 1005388 <__rodata_start__+0xb0>
 100553c:	74656c70 	strbtvc	r6, [r5], #-3184	; 0xfffff390
 1005540:	000a2e65 	andeq	r2, sl, r5, ror #28
 1005544:	6f435b0a 	svcvs	0x00435b0a
 1005548:	5d316572 	cfldr32pl	mvfx6, [r1, #-456]!	; 0xfffffe38
 100554c:	6c656820 	stclvs	8, cr6, [r5], #-128	; 0xffffff80
 1005550:	66206f6c 	strtvs	r6, [r0], -ip, ror #30
 1005554:	206d6f72 	rsbcs	r6, sp, r2, ror pc
 1005558:	20524444 	subscs	r4, r2, r4, asr #8
 100555c:	2e776f6c 	cdpcs	15, 7, cr6, cr7, cr12, {3}
 1005560:	4d485320 	stclmi	3, cr5, [r8, #-128]	; 0xffffff80
 1005564:	30204020 	eorcc	r4, r0, r0, lsr #32
 1005568:	38302578 	ldmdacc	r0!, {r3, r4, r5, r6, r8, sl, sp}
 100556c:	65722058 	ldrbvs	r2, [r2, #-88]!	; 0xffffffa8
 1005570:	2e796461 	cdpcs	4, 7, cr6, cr9, cr1, {3}
	...
 1005580:	01000000 	mrseq	r0, (UNDEF: 0)
 1005584:	00011303 	andeq	r1, r1, r3, lsl #6
 1005588:	00000000 	andeq	r0, r0, r0
 100558c:	01000000 	mrseq	r0, (UNDEF: 0)
 1005590:	01000000 	mrseq	r0, (UNDEF: 0)
 1005594:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 1005598:	00001303 	andeq	r1, r0, r3, lsl #6
 100559c:	00000000 	andeq	r0, r0, r0
 10055a0:	3f000000 	svccc	0x00000000
 10055a4:	3f000000 	svccc	0x00000000
 10055a8:	01000000 	mrseq	r0, (UNDEF: 0)
 10055ac:	00010103 	andeq	r0, r1, r3, lsl #2
 10055b0:	00000000 	andeq	r0, r0, r0
 10055b4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 10055b8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 10055bc:	01000000 	mrseq	r0, (UNDEF: 0)
 10055c0:	01010103 	tsteq	r1, r3, lsl #2
 10055c4:	00000000 	andeq	r0, r0, r0
 10055c8:	6361430a 	cmnvs	r1, #671088640	; 0x28000000
 10055cc:	53206568 			; <UNDEFINED> instruction: 0x53206568
 10055d0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 10055d4:	53203a73 			; <UNDEFINED> instruction: 0x53203a73
 10055d8:	524c5443 	subpl	r5, ip, #1124073472	; 0x43000000
 10055dc:	2578303d 	ldrbcs	r3, [r8, #-61]!	; 0xffffffc3
 10055e0:	586c3830 	stmdapl	ip!, {r4, r5, fp, ip, sp}^
 10055e4:	4d4d2020 	stclmi	0, cr2, [sp, #-128]	; 0xffffff80
 10055e8:	75253a55 	strvc	r3, [r5, #-2645]!	; 0xfffff5ab
 10055ec:	3a492020 	bcc	224d674 <__bss_end__+0x1231674>
 10055f0:	20207525 	eorcs	r7, r0, r5, lsr #10
 10055f4:	75253a44 	strvc	r3, [r5, #-2628]!	; 0xfffff5bc
 10055f8:	50422020 	subpl	r2, r2, r0, lsr #32
 10055fc:	0075253a 	rsbseq	r2, r5, sl, lsr r5

Disassembly of section .data:

01005600 <osc1_clock>:
 1005600:	017d7840 	cmneq	sp, r0, asr #16

01005604 <term1_info>:
static UART_INFO_t term1_info = { uart_putc, 0, ALT_16550_DEVICE_SOCFPGA_UART1 };
 1005604:	010048b8 			; <UNDEFINED> instruction: 0x010048b8
 1005608:	00000000 	andeq	r0, r0, r0
 100560c:	00000001 	andeq	r0, r0, r1
	...

01005624 <term1>:
 1005624:	01005604 	tsteq	r0, r4, lsl #12

01005628 <s_mmu_pool>:
static mmu_pool_t s_mmu_pool = { s_mmu_aux_pool, sizeof(s_mmu_aux_pool), 0 };
 1005628:	0100c000 	mrseq	ip, (UNDEF: 0)
 100562c:	00010000 	andeq	r0, r1, r0
 1005630:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

01008000 <cb_intosc_hs_div2>:
 1008000:	00000000 	andeq	r0, r0, r0

01008004 <f2s_free_clk>:
	...

0100c000 <s_mmu_aux_pool>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:

void alt_log_done(FILE *op)
{
       0:	000017e2 	andeq	r1, r0, r2, ror #15
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000003a 	andeq	r0, r0, sl, lsr r0
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	00049e0c 	andeq	r9, r4, ip, lsl #28
      14:	000bdf00 	andeq	sp, fp, r0, lsl #30
	...

    /* Ensure that the TX FIFO is empty. */

    do
    {
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000408 	andeq	r0, r0, r8, lsl #8
      2c:	70050202 	andvc	r0, r5, r2, lsl #4
      30:	0300000d 	movweq	r0, #13
      34:	00000e61 	andeq	r0, r0, r1, ror #28
      38:	3f182802 	svccc	0x00182802
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	02000000 	andeq	r0, r0, #0
      40:	08100504 	ldmdaeq	r0, {r2, r8, sl}
      44:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      48:	00080b05 	andeq	r0, r8, r5, lsl #22

    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	00000406 	andeq	r0, r0, r6, lsl #8
      54:	bd070202 	sfmlt	f0, 4, [r7, #-8]
      58:	0300000e 	movweq	r0, #14
      5c:	00000e60 	andeq	r0, r0, r0, ror #28
      60:	67193402 	ldrvs	r3, [r9, -r2, lsl #8]
      64:	02000000 	andeq	r0, r0, #0
      68:	0b460704 	bleq	1181c80 <__bss_end__+0x165c80>
      6c:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>

    /* Leave the UARTs enabled.
     * Many subsequent stages expect the UART to be already setup by preloader. */
}
      70:	0200000d 	andeq	r0, r0, #13
      74:	007a1937 	rsbseq	r1, sl, r7, lsr r9
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	000b4107 	andeq	r4, fp, r7, lsl #2
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	4b070402 	blmi	1c1098 <__core1_unwind_stub-0xe3ef68>
      8c:	0200000b 	andeq	r0, r0, #11
      90:	0aa30408 	beq	fe8c10b8 <__shm_end__+0xbe8c10b8>
      *(pmem->toptr)=0;
      94:	97050000 	strls	r0, [r5, -r0]
      98:	0300000c 	movweq	r0, #12
      9c:	8817015e 	ldmdahi	r7, {r1, r2, r3, r4, r6, r8}
      a0:	03000000 	movweq	r0, #0
}
      a4:	00000ea4 	andeq	r0, r0, r4, lsr #29
      a8:	3f0e2e04 	svccc	0x000e2e04
      ac:	03000000 	movweq	r0, #0
      b0:	00000ae3 	andeq	r0, r0, r3, ror #21
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	3f0e7404 	svccc	0x000e7404
      b8:	06000000 	streq	r0, [r0], -r0
        break;
      bc:	03a50404 			; <UNDEFINED> instruction: 0x03a50404
    return ALT_E_SUCCESS;
      c0:	000000dd 	ldrdeq	r0, [r0], -sp
      c4:	00023a07 	andeq	r3, r2, r7, lsl #20
        return ALT_E_ERROR;
      c8:	0ca70400 	cfstrseq	mvf0, [r7]
}
      cc:	00000096 	muleq	r0, r6, r0
      d0:	000aeb07 	andeq	lr, sl, r7, lsl #22
      d4:	13a80400 			; <UNDEFINED> instruction: 0x13a80400
      d8:	000000dd 	ldrdeq	r0, [r0], -sp
    const uint8_t *s = (const uint8_t *)src;
    if (d == s || n == 0) return dst;
    if (d < s) {
        for (size_t i = 0; i < n; ++i) d[i] = s[i];
    } else {
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	004d0800 	subeq	r0, sp, r0, lsl #16
      e0:	00ed0000 	rsceq	r0, sp, r0
      e4:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
      e8:	03000000 	movweq	r0, #0
      ec:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
      f0:	011109a2 	tsteq	r1, r2, lsr #19
    }
    return dst;
      f4:	6f0b0000 	svcvs	0x000b0000
}
      f8:	0400000a 	streq	r0, [r0], #-10
      fc:	008107a4 	addeq	r0, r1, r4, lsr #15
     100:	0b000000 	bleq	108 <__core1_unwind_stub-0xfffef8>
     104:	0000000b 	andeq	r0, r0, fp
    g_arm_msgdma0_desc = (volatile uint32_t*)(uintptr_t) MSGDMA0_DESC_BASE;
    g_arm_msgdma1_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA1_CSR_BASE;
    g_arm_msgdma1_desc = (volatile uint32_t*)(uintptr_t) MSGDMA1_DESC_BASE;
    g_arm_msgdma2_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA2_CSR_BASE;
    g_arm_msgdma2_desc = (volatile uint32_t*)(uintptr_t) MSGDMA2_DESC_BASE;
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
     108:	bb05a904 	bllt	16a520 <__core1_unwind_stub-0xe95ae0>
     10c:	04000000 	streq	r0, [r0], #-0
     110:	0c2f0300 	stceq	3, cr0, [pc], #-0	; 118 <__core1_unwind_stub-0xfffee8>
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
     114:	aa040000 	bge	10011c <__core1_unwind_stub-0xeffee4>
     118:	0000ed03 	andeq	lr, r0, r3, lsl #26
     11c:	03040c00 	movweq	r0, #19456	; 0x4c00
     120:	00000e58 	andeq	r0, r0, r8, asr lr
     124:	67191605 	ldrvs	r1, [r9, -r5, lsl #12]
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     128:	03000000 	movweq	r0, #0
     12c:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
     130:	810d0c06 	tsthi	sp, r6, lsl #24
     134:	03000000 	movweq	r0, #0
     138:	00000bd6 	ldrdeq	r0, [r0], -r6
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	2b1b2305 	blcs	6c8d58 <__core1_unwind_stub-0x9372a8>
     140:	0d000001 	stceq	0, cr0, [r0, #-4]
     144:	0000070e 	andeq	r0, r0, lr, lsl #14
     148:	08340518 	ldmdaeq	r4!, {r3, r4, r8, sl}
     14c:	0000019d 	muleq	r0, sp, r1
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	000a3a0b 	andeq	r3, sl, fp, lsl #20
     154:	13360500 	teqne	r6, #0, 10
     158:	0000019d 	muleq	r0, sp, r1
     15c:	6b5f0e00 	blvs	17c3964 <__bss_end__+0x7a7964>
     160:	07370500 	ldreq	r0, [r7, -r0, lsl #10]!
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	00000081 	andeq	r0, r0, r1, lsl #1
     168:	07670b04 	strbeq	r0, [r7, -r4, lsl #22]!
     16c:	37050000 	strcc	r0, [r5, -r0]
     170:	0000810b 	andeq	r8, r0, fp, lsl #2
     174:	c50b0800 	strgt	r0, [fp, #-2048]	; 0xfffff800

    return ALT_E_SUCCESS;
     178:	05000008 	streq	r0, [r0, #-8]
}
     17c:	00811437 	addeq	r1, r1, r7, lsr r4
     180:	0b0c0000 	bleq	300188 <__core1_unwind_stub-0xcffe78>
     184:	00000607 	andeq	r0, r0, r7, lsl #12
    }

    coalesce->va   += thissegsize;
    coalesce->size -= thissegsize;

    while (coalesce->size)
     188:	811b3705 	tsthi	fp, r5, lsl #14
     18c:	10000000 	andne	r0, r0, r0
            dprintf("MMU[coalesce]: next(): Coalesced next segment. New size = 0x%" PRIx32 ".\n", thissegsize);
        }
        else
        {
            /* Cannot coalesce. */
            break;
     190:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
        }
    }

    *segpa   = thissegpa;
     194:	a30b3805 	movwge	r3, #47109	; 0xb805
     198:	14000001 	strne	r0, [r0], #-1
     19c:	43040f00 	movwmi	r0, #20224	; 0x4f00
    *segsize = thissegsize;
     1a0:	08000001 	stmdaeq	r0, {r0}
     1a4:	0000011f 	andeq	r0, r0, pc, lsl r1
     1a8:	000001b3 			; <UNDEFINED> instruction: 0x000001b3

    return ALT_E_SUCCESS;
     1ac:	00008809 	andeq	r8, r0, r9, lsl #16
}
     1b0:	0d000000 	stceq	0, cr0, [r0, #-0]
     1b4:	00000140 	andeq	r0, r0, r0, asr #2
     1b8:	083c0524 	ldmdaeq	ip!, {r2, r5, r8, sl}
        overflow. Finally, we divide by 65536, giving us the numerator value that would result
        in 1200 MHz. If we exceed that, then we need to ramp up
  */
  clk100 = (3200000000u / (osc1_clock>>11)) * (1 + cfg->mainpll.vco1_denom ) * 2; /* /32k */

  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	00000236 	andeq	r0, r0, r6, lsr r2
     1c0:	00015c0b 	andeq	r5, r1, fp, lsl #24
     1c4:	093e0500 	ldmdbeq	lr!, {r8, sl}
     1c8:	00000081 	andeq	r0, r0, r1, lsl #1
     1cc:	0fae0b00 	svceq	0x00ae0b00
  {
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	3f050000 	svccc	0x00050000
     1d4:	00008109 	andeq	r8, r0, r9, lsl #2
     1d8:	d00b0400 	andle	r0, fp, r0, lsl #8
     1dc:	0500000e 	streq	r0, [r0, #-14]
     1e0:	00810940 	addeq	r0, r1, r0, asr #18
    do
    {
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	0b080000 	bleq	2001ec <__core1_unwind_stub-0xdffe14>
     1e8:	00000a01 	andeq	r0, r0, r1, lsl #20
     1ec:	81094105 	tsthi	r9, r5, lsl #2
     1f0:	0c000000 	stceq	0, cr0, [r0], {-0}
     1f4:	0003920b 	andeq	r9, r3, fp, lsl #4
     1f8:	09420500 	stmdbeq	r2, {r8, sl}^
     1fc:	00000081 	andeq	r0, r0, r1, lsl #1
     200:	0df30b10 			; <UNDEFINED> instruction: 0x0df30b10
     204:	43050000 	movwmi	r0, #20480	; 0x5000
     208:	00008109 	andeq	r8, r0, r9, lsl #2
     20c:	810b1400 	tsthi	fp, r0, lsl #8
     210:	0500000a 	streq	r0, [r0, #-10]
                     ALT_CLKMGR_MAINPLL_VCO1_DENOM_SET(cfg->mainpll.vco1_denom) |
                     ALT_CLKMGR_MAINPLL_VCO1_NUMER_SET((clkStep>>16) - 1));
        clkStep += clk100;
     214:	00810944 	addeq	r0, r1, r4, asr #18
     218:	0b180000 	bleq	600220 <__core1_unwind_stub-0x9ffde0>
     21c:	00000aaf 	andeq	r0, r0, pc, lsr #21
     220:	81094505 	tsthi	r9, r5, lsl #10
        /* sleep 5 ms for voltages to return to level */
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	1c000000 	stcne	0, cr0, [r0], {-0}
     228:	000f740b 	andeq	r7, pc, fp, lsl #8
     22c:	09460500 	stmdbeq	r6, {r8, sl}^
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	00000081 	andeq	r0, r0, r1, lsl #1
     234:	63100020 	tstvs	r0, #32
     238:	08000002 	stmdaeq	r0, {r1}
     23c:	084f0501 	stmdaeq	pc, {r0, r8, sl}^	; <UNPREDICTABLE>
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	0000027b 	andeq	r0, r0, fp, ror r2
     244:	000f600b 	andeq	r6, pc, fp
     248:	0a500500 	beq	1401650 <__bss_end__+0x3e5650>
     24c:	0000027b 	andeq	r0, r0, fp, ror r2
     250:	0b6c0b00 	bleq	1b02e58 <__bss_end__+0xae6e58>
     254:	51050000 	mrspl	r0, (UNDEF: 5)
     258:	00027b09 	andeq	r7, r2, r9, lsl #22
  }
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	e3118000 	tst	r1, #0
     260:	0500000d 	streq	r0, [r0, #-13]
     264:	011f0a53 	tsteq	pc, r3, asr sl	; <UNPREDICTABLE>
     268:	01000000 	mrseq	r0, (UNDEF: 0)
     26c:	000e1f11 	andeq	r1, lr, r1, lsl pc
     270:	0a560500 	beq	1581678 <__bss_end__+0x565678>
     274:	0000011f 	andeq	r0, r0, pc, lsl r1
     278:	08000104 	stmdaeq	r0, {r2, r8}
     27c:	0000011d 	andeq	r0, r0, sp, lsl r1
     280:	0000028b 	andeq	r0, r0, fp, lsl #5
     284:	00008809 	andeq	r8, r0, r9, lsl #16
                   ALT_CLKMGR_MAINPLL_VCO1_DENOM_SET(cfg->mainpll.vco1_denom) |
                   ALT_CLKMGR_MAINPLL_VCO1_NUMER_SET(cfg->mainpll.vco1_numer));

  /* sleep 5 ms for voltages to return to level */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	10001f00 	andne	r1, r0, r0, lsl #30
     28c:	00000a5a 	andeq	r0, r0, sl, asr sl
     290:	62050190 	andvs	r0, r5, #144, 2	; 0x24
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	0002ce08 	andeq	ip, r2, r8, lsl #28
     298:	0a3a0b00 	beq	e82ea0 <__core1_unwind_stub-0x17d160>
     29c:	63050000 	movwvs	r0, #20480	; 0x5000
     2a0:	0002ce12 	andeq	ip, r2, r2, lsl lr

  /* vco1 of perpllgrp */
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	130b0000 	movwne	r0, #45056	; 0xb000
     2a8:	0500000e 	streq	r0, [r0, #-14]
     2ac:	00810664 	addeq	r0, r1, r4, ror #12
     2b0:	0b040000 	bleq	1002b8 <__core1_unwind_stub-0xeffd48>
     2b4:	00000499 	muleq	r0, r9, r4
     2b8:	d4096605 	strle	r6, [r9], #-1541	; 0xfffff9fb
     2bc:	08000002 	stmdaeq	r0, {r1}
     2c0:	0002630b 	andeq	r6, r2, fp, lsl #6
     2c4:	1e670500 	cdpne	5, 6, cr0, cr7, cr0, {0}
     2c8:	00000236 	andeq	r0, r0, r6, lsr r2
     2cc:	040f0088 	streq	r0, [pc], #-136	; 2d4 <__core1_unwind_stub-0xfffd2c>
                   ALT_CLKMGR_PERPLL_VCO1_DENOM_SET(cfg->perpll.vco1_denom) |
                   ALT_CLKMGR_PERPLL_VCO1_NUMER_SET(cfg->perpll.vco1_numer));

  /* #############################################################
     Give enough time for software-managed clock to be reset    */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	0000028b 	andeq	r0, r0, fp, lsl #5
     2d4:	0002e408 	andeq	lr, r2, r8, lsl #8
     2d8:	0002e400 	andeq	lr, r2, r0, lsl #8
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	00880900 	addeq	r0, r8, r0, lsl #18
     2e0:	001f0000 	andseq	r0, pc, r0
     2e4:	02ea040f 	rsceq	r0, sl, #251658240	; 0xf000000
     2e8:	0d120000 	ldceq	0, cr0, [r2, #-0]

  /* ############################################################# */

  /* Power up Bandgap and Analog Circuitry */
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	00000e18 	andeq	r0, r0, r8, lsl lr
     2f0:	087a0508 	ldmdaeq	sl!, {r3, r8, sl}^
     2f4:	00000313 	andeq	r0, r0, r3, lsl r3
     2f8:	000bb40b 	andeq	fp, fp, fp, lsl #8
     2fc:	117b0500 	cmnne	fp, r0, lsl #10
     300:	00000313 	andeq	r0, r0, r3, lsl r3
     304:	02fb0b00 	rscseq	r0, fp, #0, 22
             ALT_CLKMGR_MAINPLL_VCO0_PWRDN_SET_MSK |
             ALT_CLKMGR_MAINPLL_VCO0_BGPWRDN_SET_MSK);
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	7c050000 	stcvc	0, cr0, [r5], {-0}
     30c:	00008106 	andeq	r8, r0, r6, lsl #2
     310:	0f000400 	svceq	0x00000400
     314:	00004d04 	andeq	r4, r0, r4, lsl #26
     318:	06870d00 	streq	r0, [r7], r0, lsl #26
     31c:	05680000 	strbeq	r0, [r8, #-0]!
     320:	045c08ba 	ldrbeq	r0, [ip], #-2234	; 0xfffff746
             ALT_CLKMGR_PERPLL_VCO0_PWRDN_SET_MSK |
             ALT_CLKMGR_PERPLL_VCO0_BGPWRDN_SET_MSK);

  /* #############################################################
     Give enough time for Bandgap and Analog Circuitry to power up */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	5f0e0000 	svcpl	0x000e0000
     328:	bb050070 	bllt	1404f0 <__core1_unwind_stub-0xebfb10>
     32c:	00031312 	andeq	r1, r3, r2, lsl r3
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	5f0e0000 	svcpl	0x000e0000
     334:	bc050072 	stclt	0, cr0, [r5], {114}	; 0x72
     338:	00008107 	andeq	r8, r0, r7, lsl #2
     33c:	5f0e0400 	svcpl	0x000e0400
   / Software should simulateously update the 'Enable' bit and the 'External Regulator Input Select'
   / in the same write access to the VCO register.
   / When the 'Enable' bit is clear, the 'External Regulator Input Select' should be set, and vice versa.
   / mainpllgrp 
  */
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	bd050077 	stclt	0, cr0, [r5, #-476]	; 0xfffffe24
     344:	00008107 	andeq	r8, r0, r7, lsl #2
     348:	400b0800 	andmi	r0, fp, r0, lsl #16
     34c:	0500000a 	streq	r0, [r0, #-10]
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	002c09be 	strhteq	r0, [ip], -lr
     354:	0b0c0000 	bleq	30035c <__core1_unwind_stub-0xcffca4>
     358:	0000025d 	andeq	r0, r0, sp, asr r2
     35c:	2c09bf05 	stccs	15, cr11, [r9], {5}
     360:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     364:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
                (data32 & ~ALT_CLKMGR_MAINPLL_VCO0_REGEXTSEL_SET_MSK)
                 | ALT_CLKMGR_MAINPLL_VCO0_EN_SET_MSK);

  /* perpllgrp */
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	11c00500 	bicne	r0, r0, r0, lsl #10
     36c:	000002eb 	andeq	r0, r0, fp, ror #5
     370:	0e050b10 	vmoveq.32	d5[0], r0
     374:	c1050000 	mrsgt	r0, (UNDEF: 5)
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	00008107 	andeq	r8, r0, r7, lsl #2
     37c:	ea0b1800 	b	2c6384 <__core1_unwind_stub-0xd39c7c>
     380:	05000005 	streq	r0, [r0, #-5]
     384:	011d0ac8 	tsteq	sp, r8, asr #21
     388:	0b1c0000 	bleq	700390 <__core1_unwind_stub-0x8ffc70>
     38c:	00001c5f 	andeq	r1, r0, pc, asr ip
                 (data32 & ~ALT_CLKMGR_PERPLL_VCO0_REGEXTSEL_SET_MSK)
                 | ALT_CLKMGR_PERPLL_VCO0_EN_SET_MSK);

  /* alteragrp.nocclk */
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	e01dca05 	ands	ip, sp, r5, lsl #20
     394:	20000005 	andcs	r0, r0, r5
     398:	0011a30b 	andseq	sl, r1, fp, lsl #6
     39c:	1dcc0500 	cfstr64ne	mvdx0, [ip]
     3a0:	0000060a 	andeq	r0, r0, sl, lsl #12
               cfg->alteragrp.mpuclk);
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	0acc0b24 	beq	ff30303c <__shm_end__+0xbf30303c>
     3a8:	cf050000 	svcgt	0x00050000
     3ac:	00062e0d 	andeq	r2, r6, sp, lsl #28
     3b0:	440b2800 	strmi	r2, [fp], #-2048	; 0xfffff800
     3b4:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
               cfg->alteragrp.nocclk);

  /* Main PLL Clock Source and Counters/Divider
     ------------------------------------------
     mainpll.c0 - pll0_mpu_base_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	064809d0 			; <UNDEFINED> instruction: 0x064809d0
     3bc:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
     3c0:	0062755f 	rsbeq	r7, r2, pc, asr r5
     3c4:	eb11d305 	bl	474fe0 <__core1_unwind_stub-0xb8b020>
     3c8:	30000002 	andcc	r0, r0, r2
     3cc:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
     3d0:	12d40500 	sbcsne	r0, r4, #0, 10
     3d4:	00000313 	andeq	r0, r0, r3, lsl r3
     3d8:	755f0e38 	ldrbvc	r0, [pc, #-3640]	; fffff5a8 <__shm_end__+0xbffff5a8>
     3dc:	d5050072 	strle	r0, [r5, #-114]	; 0xffffff8e
     3e0:	00008107 	andeq	r8, r0, r7, lsl #2
               ALT_CLKMGR_MAINPLL_MPUCLK_CNT_SET(cfg->mainpll.mpuclk_cnt) |
               ALT_CLKMGR_MAINPLL_MPUCLK_SRC_SET(cfg->mainpll.mpuclk_src));
  /* mainpll.c1 - pll0_noc _base_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	100b3c00 	andne	r3, fp, r0, lsl #24
     3e8:	0500000a 	streq	r0, [r0, #-10]
     3ec:	064e11d8 			; <UNDEFINED> instruction: 0x064e11d8
     3f0:	0b400000 	bleq	10003f8 <alt_clk_freq_get_device+0x2c>
     3f4:	00000156 	andeq	r0, r0, r6, asr r1
     3f8:	5e11d905 	vnmlspl.f16	s26, s2, s10	; <UNPREDICTABLE>
     3fc:	43000006 	movwmi	r0, #6
     400:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
     404:	11dc0500 	bicsne	r0, ip, r0, lsl #10
     408:	000002eb 	andeq	r0, r0, fp, ror #5
     40c:	0b950b44 	bleq	fe543124 <__shm_end__+0xbe543124>
               ALT_CLKMGR_MAINPLL_NOCCLK_CNT_SET(cfg->mainpll.nocclk_cnt) |
               ALT_CLKMGR_MAINPLL_NOCCLK_SRC_SET(cfg->mainpll.nocclk_src));
  /* mainpll.c2 - pll0_emaca_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	df050000 	svcle	0x00050000
     414:	00008107 	andeq	r8, r0, r7, lsl #2
     418:	2d0b4c00 	stccs	12, cr4, [fp, #-0]
     41c:	05000006 	streq	r0, [r0, #-6]
     420:	00a30ae0 	adceq	r0, r3, r0, ror #21
     424:	0b500000 	bleq	140042c <__bss_end__+0x3e442c>
               ALT_CLKMGR_MAINPLL_CNTR2CLK_CNT_SET(cfg->mainpll.cntr2clk_cnt));
  /* mainpll.c3 - pll0_emacb_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	00002b38 	andeq	r2, r0, r8, lsr fp
     42c:	7a12e305 	bvc	4b9048 <__core1_unwind_stub-0xb46fb8>
     430:	54000004 	strpl	r0, [r0], #-4
     434:	0001ab0b 	andeq	sl, r1, fp, lsl #22
     438:	0ce70500 	cfstr64eq	mvdx0, [r7]
     43c:	00000137 	andeq	r0, r0, r7, lsr r1
               ALT_CLKMGR_MAINPLL_CNTR3CLK_CNT_SET(cfg->mainpll.cntr3clk_cnt));
  /* mainpll.c4 - pll0_emac_ptp_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	0a2c0b58 	beq	b031a8 <__core1_unwind_stub-0x4fce58>
     444:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
     448:	0001110e 	andeq	r1, r1, lr, lsl #2
     44c:	9a0b5c00 	bls	2d7454 <__core1_unwind_stub-0xd28bac>
     450:	05000006 	streq	r0, [r0, #-6]
     454:	008109ea 	addeq	r0, r1, sl, ror #19
               ALT_CLKMGR_MAINPLL_CNTR4CLK_CNT_SET(cfg->mainpll.cntr4clk_cnt));
  /* mainpll.c5 - pll0_gpio_db_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	00640000 	rsbeq	r0, r4, r0
     45c:	00008113 	andeq	r8, r0, r3, lsl r1
     460:	00047a00 	andeq	r7, r4, r0, lsl #20
     464:	047a1400 	ldrbteq	r1, [sl], #-1024	; 0xfffffc00
     468:	1d140000 	ldcne	0, cr0, [r4, #-0]
     46c:	14000001 	strne	r0, [r0], #-1
               ALT_CLKMGR_MAINPLL_CNTR5CLK_CNT_SET(cfg->mainpll.cntr5clk_cnt));
  /* mainpll.c6 - pll0_sdmmc_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	000005ce 	andeq	r0, r0, lr, asr #11
     474:	00008114 	andeq	r8, r0, r4, lsl r1
     478:	040f0000 	streq	r0, [pc], #-0	; 480 <__core1_unwind_stub-0xfffb80>
     47c:	00000485 	andeq	r0, r0, r5, lsl #9
     480:	00047a15 	andeq	r7, r4, r5, lsl sl
     484:	044c1600 	strbeq	r1, [ip], #-1536	; 0xfffffa00
               ALT_CLKMGR_MAINPLL_CNTR6CLK_CNT_SET(cfg->mainpll.cntr6clk_cnt));
  /* mainpll.c7 - pll0_h2f_user0_clk (A.K.A. s2f_user0_clk) */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	04280000 	strteq	r0, [r8], #-0
     48c:	08026505 	stmdaeq	r2, {r0, r2, r8, sl, sp, lr}
     490:	000005ce 	andeq	r0, r0, lr, asr #11
     494:	00099817 	andeq	r9, r9, r7, lsl r8
     498:	02670500 	rsbeq	r0, r7, #0, 10
     49c:	00008107 	andeq	r8, r0, r7, lsl #2
     4a0:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
     4a4:	05000005 	streq	r0, [r0, #-5]
     4a8:	ba0b026c 	blt	2c0e60 <__core1_unwind_stub-0xd3f1a0>
     4ac:	04000006 	streq	r0, [r0], #-6
     4b0:	000b8d17 	andeq	r8, fp, r7, lsl sp
               ALT_CLKMGR_MAINPLL_CNTR7CLK_CNT_SET(cfg->mainpll.cntr7clk_cnt) |
               ALT_CLKMGR_MAINPLL_CNTR7CLK_SRC_SET(cfg->mainpll.cntr7clk_src));
  /* mainpll.c8 - pll0_h2f_user1_clk (A.K.A. s2f_user1_clk) */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	026c0500 	rsbeq	r0, ip, #0, 10
     4b8:	0006ba14 	andeq	fp, r6, r4, lsl sl
     4bc:	16170800 	ldrne	r0, [r7], -r0, lsl #16
     4c0:	0500000a 	streq	r0, [r0, #-10]
     4c4:	ba1e026c 	blt	780e7c <__core1_unwind_stub-0x87f184>
     4c8:	0c000006 	stceq	0, cr0, [r0], {6}
               ALT_CLKMGR_MAINPLL_CNTR8CLK_CNT_SET(cfg->mainpll.cntr8clk_cnt));
  /* mainpll.c9 - pll0_hmc_pll_ref_clk */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	000e0e17 	andeq	r0, lr, r7, lsl lr
     4d0:	026e0500 	rsbeq	r0, lr, #0, 10
     4d4:	00008108 	andeq	r8, r0, r8, lsl #2
     4d8:	00171000 	andseq	r1, r7, r0
     4dc:	05000008 	streq	r0, [r0, #-8]
     4e0:	ba08026f 	blt	200ea4 <__core1_unwind_stub-0xdff15c>
     4e4:	14000008 	strne	r0, [r0], #-8
     4e8:	00043317 	andeq	r3, r4, r7, lsl r3
     4ec:	02720500 	rsbseq	r0, r2, #0, 10
     4f0:	00008107 	andeq	r8, r0, r7, lsl #2
     4f4:	50173000 	andspl	r3, r7, r0
               ALT_CLKMGR_MAINPLL_CNTR9CLK_CNT_SET(cfg->mainpll.cntr9clk_cnt) |
               ALT_CLKMGR_MAINPLL_CNTR9CLK_SRC_SET(cfg->mainpll.cntr9clk_src));
  /* mainpll.c15 - periph_ref_clk
   * Comment out because C15 input for PLL1 is not supported (2014.12.15 A10_5v4.PDF) */
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	0500000e 	streq	r0, [r0, #-14]
     4fc:	cf160273 	svcgt	0x00160273
     500:	34000008 	strcc	r0, [r0], #-8
     504:	00068f17 	andeq	r8, r6, r7, lsl pc
     508:	02750500 	rsbseq	r0, r5, #0, 10
     50c:	00008107 	andeq	r8, r0, r7, lsl #2
               ALT_CLKMGR_MAINPLL_CNTR15CLK_CNT_SET(cfg->mainpll.cntr15clk_cnt));
  /*mainpll's NoC Clocks's divider */
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	83173800 	tsthi	r7, #0, 16
     514:	05000007 	streq	r0, [r0, #-7]
     518:	e00a0277 	and	r0, sl, r7, ror r2
     51c:	3c000008 	stccc	0, cr0, [r0], {8}
     520:	000e6917 	andeq	r6, lr, r7, lsl r9
     524:	027a0500 	rsbseq	r0, sl, #0, 10
     528:	00019d13 	andeq	r9, r1, r3, lsl sp
     52c:	f1174000 			; <UNDEFINED> instruction: 0xf1174000
     530:	05000002 	streq	r0, [r0, #-2]
     534:	8107027b 	tsthi	r7, fp, ror r2
     538:	44000000 	strmi	r0, [r0], #-0
     53c:	00067517 	andeq	r7, r6, r7, lsl r5
     540:	027c0500 	rsbseq	r0, ip, #0, 10
     544:	00019d13 	andeq	r9, r1, r3, lsl sp
     548:	af174800 	svcge	0x00174800
     54c:	05000008 	streq	r0, [r0, #-8]
     550:	e614027d 			; <UNDEFINED> instruction: 0xe614027d
     554:	4c000008 	stcmi	0, cr0, [r0], {8}
     558:	00011017 	andeq	r1, r1, r7, lsl r0
     55c:	02800500 	addeq	r0, r0, #0, 10
     560:	00008107 	andeq	r8, r0, r7, lsl #2
     564:	35175000 	ldrcc	r5, [r7, #-0]
     568:	05000006 	streq	r0, [r0, #-6]
     56c:	ce090281 	cdpgt	2, 0, cr0, cr9, cr1, {4}
     570:	54000005 	strpl	r0, [r0], #-5
     574:	000a0b17 	andeq	r0, sl, r7, lsl fp
     578:	02a40500 	adceq	r0, r4, #0, 10
     57c:	00089507 	andeq	r9, r8, r7, lsl #10
     580:	5a185800 	bpl	616588 <__core1_unwind_stub-0x9e9a78>
     584:	0500000a 	streq	r0, [r0, #-10]
     588:	ce1302a8 	cdpgt	2, 1, cr0, cr3, cr8, {5}

  /* Peripheral PLL Clock Source and Counters/Divider
     ------------------------------------------------
     perpll.c2 - pll1_emaca_clk 
  */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	48000002 	stmdami	r0, {r1}
     590:	078d1801 	streq	r1, [sp, r1, lsl #16]
     594:	a9050000 	stmdbge	r5, {}	; <UNPREDICTABLE>
     598:	028b1202 	addeq	r1, fp, #536870912	; 0x20000000
     59c:	014c0000 	mrseq	r0, (UNDEF: 76)
     5a0:	00062318 	andeq	r2, r6, r8, lsl r3
     5a4:	02ad0500 	adceq	r0, sp, #0, 10
     5a8:	0008f70c 	andeq	pc, r8, ip, lsl #14
     5ac:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
     5b0:	0000083a 	andeq	r0, r0, sl, lsr r8
     5b4:	1002b205 	andne	fp, r2, r5, lsl #4
               ALT_CLKMGR_PERPLL_CNTR2CLK_CNT_SET(cfg->perpll.cntr2clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR2CLK_SRC_SET(cfg->perpll.cntr2clk_src));
  /* perpll.c3 - pll1_emacb_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0000067b 	andeq	r0, r0, fp, ror r6
     5bc:	131802e0 	tstne	r8, #224, 4
     5c0:	05000000 	streq	r0, [r0, #-0]
     5c4:	030a02b4 	movweq	r0, #41652	; 0xa2b4
     5c8:	ec000009 	stc	0, cr0, [r0], {9}
     5cc:	040f0002 	streq	r0, [pc], #-2	; 5d4 <__core1_unwind_stub-0xfffa2c>
     5d0:	000005d4 	ldrdeq	r0, [r0], -r4
     5d4:	0f080102 	svceq	0x00080102
     5d8:	15000004 	strne	r0, [r0, #-4]
     5dc:	000005d4 	ldrdeq	r0, [r0], -r4
     5e0:	045c040f 	ldrbeq	r0, [ip], #-1039	; 0xfffffbf1
               ALT_CLKMGR_PERPLL_CNTR3CLK_CNT_SET(cfg->perpll.cntr3clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR3CLK_SRC_SET(cfg->perpll.cntr3clk_src));
  /* perpll.c4 - pll1_emac_ptp_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	81130000 	tsthi	r3, r0
     5e8:	04000000 	streq	r0, [r0], #-0
     5ec:	14000006 	strne	r0, [r0], #-6
     5f0:	0000047a 	andeq	r0, r0, sl, ror r4
     5f4:	00011d14 	andeq	r1, r1, r4, lsl sp
     5f8:	06041400 	streq	r1, [r4], -r0, lsl #8
     5fc:	81140000 	tsthi	r4, r0
     600:	00000000 	andeq	r0, r0, r0
     604:	05db040f 	ldrbeq	r0, [fp, #1039]	; 0x40f
     608:	040f0000 	streq	r0, [pc], #-0	; 610 <__core1_unwind_stub-0xfff9f0>
     60c:	000005e6 	andeq	r0, r0, r6, ror #11
               ALT_CLKMGR_PERPLL_CNTR4CLK_CNT_SET(cfg->perpll.cntr4clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR4CLK_SRC_SET(cfg->perpll.cntr4clk_src));
  /* perpll.c5 - pll1_gpio_db_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	0000af13 	andeq	sl, r0, r3, lsl pc
     614:	00062e00 	andeq	r2, r6, r0, lsl #28
     618:	047a1400 	ldrbteq	r1, [sl], #-1024	; 0xfffffc00
     61c:	1d140000 	ldcne	0, cr0, [r4, #-0]
     620:	14000001 	strne	r0, [r0], #-1
     624:	000000af 	andeq	r0, r0, pc, lsr #1
     628:	00008114 	andeq	r8, r0, r4, lsl r1
     62c:	040f0000 	streq	r0, [pc], #-0	; 634 <__core1_unwind_stub-0xfff9cc>
     630:	00000610 	andeq	r0, r0, r0, lsl r6
     634:	00008113 	andeq	r8, r0, r3, lsl r1
     638:	00064800 	andeq	r4, r6, r0, lsl #16
               ALT_CLKMGR_PERPLL_CNTR5CLK_CNT_SET(cfg->perpll.cntr5clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR5CLK_SRC_SET(cfg->perpll.cntr5clk_src));
  /* perpll.c6 - pll1_sdmmc_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	047a1400 	ldrbteq	r1, [sl], #-1024	; 0xfffffc00
     640:	1d140000 	ldcne	0, cr0, [r4, #-0]
     644:	00000001 	andeq	r0, r0, r1
     648:	0634040f 	ldrteq	r0, [r4], -pc, lsl #8
     64c:	4d080000 	stcmi	0, cr0, [r8, #-0]
     650:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
     654:	09000006 	stmdbeq	r0, {r1, r2}
     658:	00000088 	andeq	r0, r0, r8, lsl #1
     65c:	4d080002 	stcmi	0, cr0, [r8, #-8]
     660:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     664:	09000006 	stmdbeq	r0, {r1, r2}
               ALT_CLKMGR_PERPLL_CNTR6CLK_CNT_SET(cfg->perpll.cntr6clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR6CLK_SRC_SET(cfg->perpll.cntr6clk_src));
  /* perpll.c7 - pll1_h2f_user0_clk (A.K.A. s2f_user0_clk) */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	00000088 	andeq	r0, r0, r8, lsl #1
     66c:	21050000 	mrscs	r0, (UNDEF: 5)
     670:	0500000c 	streq	r0, [r0, #-12]
     674:	191a0124 	ldmdbne	sl, {r2, r5, r8}
     678:	19000003 	stmdbne	r0, {r0, r1}
     67c:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
               ALT_CLKMGR_PERPLL_CNTR7CLK_CNT_SET(cfg->perpll.cntr7clk_cnt));
  /* perpll.c8 - pll1_h2f_user1_clk (A.K.A. s2f_user1_clk) */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	0128050c 			; <UNDEFINED> instruction: 0x0128050c
     684:	0006b408 	andeq	fp, r6, r8, lsl #8
     688:	0a3a1700 	beq	e86290 <__core1_unwind_stub-0x179d70>
     68c:	2a050000 	bcs	140694 <__core1_unwind_stub-0xebf96c>
     690:	06b41101 	ldrteq	r1, [r4], r1, lsl #2
     694:	17000000 	strne	r0, [r0, -r0]
     698:	00000833 	andeq	r0, r0, r3, lsr r8
     69c:	07012b05 	streq	r2, [r1, -r5, lsl #22]
     6a0:	00000081 	andeq	r0, r0, r1, lsl #1
     6a4:	08b91704 	ldmeq	r9!, {r2, r8, r9, sl, ip}
     6a8:	2c050000 	stccs	0, cr0, [r5], {-0}
               ALT_CLKMGR_PERPLL_CNTR8CLK_CNT_SET(cfg->perpll.cntr8clk_cnt) |
               ALT_CLKMGR_PERPLL_CNTR8CLK_SRC_SET(cfg->perpll.cntr8clk_src));
  /* perpll.c9 - pll1_hmc_pll_ref_clk */
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	06ba0b01 	ldrteq	r0, [sl], r1, lsl #22
     6b0:	00080000 	andeq	r0, r8, r0
     6b4:	067b040f 	ldrbteq	r0, [fp], -pc, lsl #8
     6b8:	040f0000 	streq	r0, [pc], #-0	; 6c0 <__core1_unwind_stub-0xfff940>
     6bc:	0000066e 	andeq	r0, r0, lr, ror #12
     6c0:	000b8519 	andeq	r8, fp, r9, lsl r5
               ALT_CLKMGR_PERPLL_CNTR9CLK_CNT_SET(cfg->perpll.cntr9clk_cnt));

  /* Select EMAC clock source */
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	44050e00 	strmi	r0, [r5], #-3584	; 0xfffff200
     6c8:	06f90801 	ldrbteq	r0, [r9], r1, lsl #16
     6cc:	c6170000 	ldrgt	r0, [r7], -r0
     6d0:	0500000a 	streq	r0, [r0, #-10]
     6d4:	f9120145 			; <UNDEFINED> instruction: 0xf9120145
     6d8:	00000006 	andeq	r0, r0, r6
     6dc:	0001bf17 	andeq	fp, r1, r7, lsl pc
     6e0:	01460500 	cmpeq	r6, r0, lsl #10
     6e4:	0006f912 	andeq	pc, r6, r2, lsl r9	; <UNPREDICTABLE>
     6e8:	ab170600 	blge	5c1ef0 <__core1_unwind_stub-0xa3e110>
     6ec:	0500000e 	streq	r0, [r0, #-14]
     6f0:	54120147 	ldrpl	r0, [r2], #-327	; 0xfffffeb9
     6f4:	0c000000 	stceq	0, cr0, [r0], {-0}
     6f8:	00540800 	subseq	r0, r4, r0, lsl #16
     6fc:	07090000 	streq	r0, [r9, -r0]
     700:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
     704:	02000000 	andeq	r0, r0, #0
               ALT_CLKMGR_PERPLL_EMACCTL_EMAC0SEL_SET(cfg->perpll.emacctl_emac0sel) |
               ALT_CLKMGR_PERPLL_EMACCTL_EMAC1SEL_SET(cfg->perpll.emacctl_emac1sel) |
               ALT_CLKMGR_PERPLL_EMACCTL_EMAC2SEL_SET(cfg->perpll.emacctl_emac2sel));

  /* Init GPIO De-bounce Clock Divider */
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	05d01a00 	ldrbeq	r1, [r0, #2560]	; 0xa00
     70c:	1e070285 	cdpne	2, 0, cr0, cr7, cr5, {4}
     710:	17000008 	strne	r0, [r0, -r8]
     714:	000003d4 	ldrdeq	r0, [r0], -r4
     718:	18028705 	stmdane	r2, {r0, r2, r8, r9, sl, pc}
     71c:	00000088 	andeq	r0, r0, r8, lsl #1
               ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET(cfg->perpll.gpiodiv_gpiodbclk));

  /* #############################################################
     Wait until both the Main PLL and the Peripheral PLL is locked */
  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	0bba1700 	bleq	fee86328 <__shm_end__+0xbee86328>
     724:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
     728:	05ce1202 	strbeq	r1, [lr, #514]	; 0x202
     72c:	17040000 	strne	r0, [r4, -r0]
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	0000002d 	andeq	r0, r0, sp, lsr #32
     734:	10028905 	andne	r8, r2, r5, lsl #18
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	0000081e 	andeq	r0, r0, lr, lsl r8
     73c:	03161708 	tsteq	r6, #8, 14	; 0x200000
     740:	8a050000 	bhi	140748 <__core1_unwind_stub-0xebf8b8>
     744:	01b31702 			; <UNDEFINED> instruction: 0x01b31702
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	17240000 	strne	r0, [r4, -r0]!
     74c:	00000889 	andeq	r0, r0, r9, lsl #17


  /* Now PLL is locked, but before releasing Bypass,
     All Output Counter Reset must be set and cleared by software for correct clock operation.
     mainpll - Assert 'outresetall' */
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	0f028b05 	svceq	0x00028b05
     754:	00000081 	andeq	r0, r0, r1, lsl #1
     758:	0a351748 	beq	d46480 <__core1_unwind_stub-0x2b9b80>
     75c:	8c050000 	stchi	0, cr0, [r5], {-0}
     760:	007a2c02 	rsbseq	r2, sl, r2, lsl #24
     764:	17500000 	ldrbne	r0, [r0, -r0]
     768:	00000c85 	andeq	r0, r0, r5, lsl #25
            ALT_CLKMGR_MAINPLL_VCO0_OUTRSTALL_SET_MSK);
  /* perpll - Assert 'outresetall' */
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	1a028d05 	bne	a3b88 <__core1_unwind_stub-0xf5c478>
     770:	000006c0 	andeq	r0, r0, r0, asr #13
     774:	0d631758 	stcleq	7, cr1, [r3, #-352]!	; 0xfffffea0
     778:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
     77c:	01111602 	tsteq	r1, r2, lsl #12
     780:	17680000 	strbne	r0, [r8, -r0]!
     784:	00000b00 	andeq	r0, r0, r0, lsl #22
            ALT_CLKMGR_PERPLL_VCO0_OUTRSTALL_SET_MSK);
  /* mainpll - Deassert 'outresetall' */
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	16028f05 	strne	r8, [r2], -r5, lsl #30
     78c:	00000111 	andeq	r0, r0, r1, lsl r1
     790:	0a1e1770 	beq	786558 <__core1_unwind_stub-0x879aa8>
     794:	90050000 	andls	r0, r5, r0
     798:	01111602 	tsteq	r1, r2, lsl #12
     79c:	17780000 	ldrbne	r0, [r8, -r0]!
     7a0:	00000165 	andeq	r0, r0, r5, ror #2
             ALT_CLKMGR_MAINPLL_VCO0_OUTRSTALL_SET_MSK);
  /* perpll - Deassert 'outresetall' */
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	10029105 	andne	r9, r2, r5, lsl #2
     7a8:	0000082e 	andeq	r0, r0, lr, lsr #16
     7ac:	06e91780 	strbteq	r1, [r9], r0, lsl #15
     7b0:	92050000 	andls	r0, r5, #0
     7b4:	083e1002 	ldmdaeq	lr!, {r1, ip}
     7b8:	17880000 	strne	r0, [r8, r0]
     7bc:	00000fb7 			; <UNDEFINED> instruction: 0x00000fb7
  /* Release all PLL from Bypass and then clear Clock Manager's Bootmode bit
     Note: Bypass Register has bypass, bypassS (set), bypassR (clear) */

  /* =============================================================
     Release from Bypass all mainpllgrp's clocks */
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	0f029305 	svceq	0x00029305
     7c4:	00000081 	andeq	r0, r0, r1, lsl #1
     7c8:	02e317a0 	rsceq	r1, r3, #160, 14	; 0x2800000
     7cc:	94050000 	strls	r0, [r5], #-0
  /* Immediately following writes to
     CTRL.BOOTMODE, MAINPLLGRP.BYPASS.MPU or MAINPLLGRP.BYPASS.NOC register bits
     SW should wait 0.5 usecs and then poll this BUSY bit until it is IDLE
     before proceeding with any other register writes in the Clock Manager.
  */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	01111602 	tsteq	r1, r2, lsl #12
     7d4:	17a40000 	strne	r0, [r4, r0]!
     7d8:	00000bc7 	andeq	r0, r0, r7, asr #23
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	16029505 	strne	r9, [r2], -r5, lsl #10
     7e0:	00000111 	andeq	r0, r0, r1, lsl r1
     7e4:	0f2017ac 	svceq	0x002017ac
     7e8:	96050000 	strls	r0, [r5], -r0

  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	01111602 	tsteq	r1, r2, lsl #12
     7f0:	17b40000 	ldrne	r0, [r4, r0]!
     7f4:	000009f2 	strdeq	r0, [r0], -r2
     7f8:	16029705 	strne	r9, [r2], -r5, lsl #14
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	00000111 	andeq	r0, r0, r1, lsl r1
     800:	014517bc 	strheq	r1, [r5, #-124]	; 0xffffff84
     804:	98050000 	stmdals	r5, {}	; <UNPREDICTABLE>
     808:	01111602 	tsteq	r1, r2, lsl #12
  /* ============================================================= */


  /* =============================================================
     Release from Bypass all perpllgrp's clocks */
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	17c40000 	strbne	r0, [r4, r0]
     810:	00000996 	muleq	r0, r6, r9
     814:	08029905 	stmdaeq	r2, {r0, r2, r8, fp, ip, pc}
     818:	00000081 	andeq	r0, r0, r1, lsl #1
  /* Immediately following writes to
   / CTRL.BOOTMODE, MAINPLLGRP.BYPASS.MPU or MAINPLLGRP.BYPASS.NOC register bits
   / SW should wait 0.5 usecs and then poll this BUSY bit until it is IDLE
   / before proceeding with any other register writes in the Clock Manager.
  */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	d40800cc 	strle	r0, [r8], #-204	; 0xffffff34
     820:	2e000005 	cdpcs	0, 0, cr0, cr0, cr5, {0}
     824:	09000008 	stmdbeq	r0, {r3}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	00000088 	andeq	r0, r0, r8, lsl #1
     82c:	d4080019 	strle	r0, [r8], #-25	; 0xffffffe7
     830:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
     834:	09000008 	stmdbeq	r0, {r3}

  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	00000088 	andeq	r0, r0, r8, lsl #1
     83c:	d4080007 	strle	r0, [r8], #-7
     840:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
     844:	09000008 	stmdbeq	r0, {r3}
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	00000088 	andeq	r0, r0, r8, lsl #1
     84c:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
     850:	07029e05 	streq	r9, [r2, -r5, lsl #28]
     854:	00000875 	andeq	r0, r0, r5, ror r8


  /* =============================================================
   / Clear Clock Manager's Bootmode bit 
  */
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	000e2717 	andeq	r2, lr, r7, lsl r7
     85c:	02a10500 	adceq	r0, r1, #0, 10
     860:	0008751b 	andeq	r7, r8, fp, lsl r5
     864:	4e170000 	cdpmi	0, 1, cr0, cr7, cr0, {0}
     868:	05000008 	streq	r0, [r0, #-8]
     86c:	851802a2 	ldrhi	r0, [r8, #-674]	; 0xfffffd5e
     870:	78000008 	stmdavc	r0, {r3}
  /* Immediately following writes to
     CTRL.BOOTMODE, MAINPLLGRP.BYPASS.MPU or MAINPLLGRP.BYPASS.NOC register bits
     SW should wait 0.5 usecs and then poll this BUSY bit until it is IDLE
     before proceeding with any other register writes in the Clock Manager.
  */
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	03130800 	tsteq	r3, #0, 16
     878:	08850000 	stmeq	r5, {}	; <UNPREDICTABLE>
     87c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	1d000000 	stcne	0, cr0, [r0, #-0]
     884:	00880800 	addeq	r0, r8, r0, lsl #16
     888:	08950000 	ldmeq	r5, {}	; <UNPREDICTABLE>
     88c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>

  do {
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	1d000000 	stcne	0, cr0, [r0, #-0]
     894:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
     898:	ba030283 	blt	c12ac <__core1_unwind_stub-0xf3ed54>
     89c:	1c000008 	stcne	0, cr0, [r0], {8}
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	0000044c 	andeq	r0, r0, ip, asr #8
     8a4:	0b029a05 	bleq	a70c0 <__core1_unwind_stub-0xf58f40>
     8a8:	00000709 	andeq	r0, r0, r9, lsl #14
     8ac:	0001381c 	andeq	r3, r1, ip, lsl r8
  /* ============================================================= */

  /* Enable mainpllgrp's software-managed clock */
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	02a30500 	adceq	r0, r3, #0, 10
     8b4:	00084e0b 	andeq	r4, r8, fp, lsl #28
     8b8:	d4080000 	strle	r0, [r8], #-0
     8bc:	ca000005 	bgt	8d8 <__core1_unwind_stub-0xfff728>
               ALT_CLKMGR_MAINPLL_ENS_S2FUSER0CLKEN_SET_MSK |
               ALT_CLKMGR_MAINPLL_ENS_HMCPLLREFCLKEN_SET_MSK);

  /* Enable perpllgrp's software-managed clock */
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	09000008 	stmdbeq	r0, {r3}
     8c4:	00000088 	andeq	r0, r0, r8, lsl #1
     8c8:	001d0018 	andseq	r0, sp, r8, lsl r0
     8cc:	0f000000 	svceq	0x00000000
               ALT_CLKMGR_PERPLL_ENS_RESET);

  /* Clear all interrupt status register, loss lock and slip bits might set during configuration */
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	0008ca04 	andeq	ip, r8, r4, lsl #20
     8d4:	08e01e00 	stmiaeq	r0!, {r9, sl, fp, ip}^
     8d8:	7a140000 	bvc	5008e0 <__core1_unwind_stub-0xaff720>
     8dc:	00000004 	andeq	r0, r0, r4
               ALT_CLKMGR_CLKMGR_INTR_PERPLLRFSLIP_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_MAINPLLFBSLIP_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_PERPLLFBSLIP_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_MAINPLLACHIEVED_SET_MSK |
               ALT_CLKMGR_CLKMGR_INTR_PERPLLACHIEVED_SET_MSK);
    return ALT_E_SUCCESS;
     8e0:	08d5040f 	ldmeq	r5, {r0, r1, r2, r3, sl}^
}
     8e4:	040f0000 	streq	r0, [pc], #-0	; 8ec <__core1_unwind_stub-0xfff714>
     8e8:	0000019d 	muleq	r0, sp, r1
     8ec:	0008f71e 	andeq	pc, r8, lr, lsl r7	; <UNPREDICTABLE>
     8f0:	00811400 	addeq	r1, r1, r0, lsl #8
     8f4:	0f000000 	svceq	0x00000000
     8f8:	0008fd04 	andeq	pc, r8, r4, lsl #26
     8fc:	ec040f00 	stc	15, cr0, [r4], {-0}
     900:	08000008 	stmdaeq	r0, {r3}
     904:	0000066e 	andeq	r0, r0, lr, ror #12
     908:	00000913 	andeq	r0, r0, r3, lsl r9
     90c:	00008809 	andeq	r8, r0, r9, lsl #16
     910:	1f000200 	svcne	0x00000200
     914:	0000045a 	andeq	r0, r0, sl, asr r4
     918:	17033305 	strne	r3, [r3, -r5, lsl #6]
     91c:	0000047a 	andeq	r0, r0, sl, ror r4
     920:	0004531f 	andeq	r5, r4, pc, lsl r3
     924:	03340500 	teqeq	r4, #0, 10
     928:	0004801d 	andeq	r8, r4, sp, lsl r0
     92c:	0dcb2000 	stcleq	0, cr2, [fp]
     930:	67070000 	strvs	r0, [r7, -r0]
     934:	0005ce0e 	andeq	ip, r5, lr, lsl #28
     938:	0c230300 	stceq	3, cr0, [r3], #-0
     93c:	42080000 	andmi	r0, r8, #0
     940:	00066e10 	andeq	r6, r6, r0, lsl lr
     944:	04dc0300 	ldrbeq	r0, [ip], #768	; 0x300
     948:	41090000 	mrsmi	r0, (UNDEF: 9)
     94c:	0000331d 	andeq	r3, r0, sp, lsl r3
     950:	094b0300 	stmdbeq	fp, {r8, r9}^
     954:	2a0a0000 	bcs	28095c <__core1_unwind_stub-0xd7f6a4>
     958:	00005b12 	andeq	r5, r0, r2, lsl fp
     95c:	0a0c0a00 	beq	303164 <__core1_unwind_stub-0xcfce9c>
     960:	098e092f 	stmibeq	lr, {r0, r1, r2, r3, r5, r8, fp}
     964:	ca0b0000 	bgt	2c096c <__core1_unwind_stub-0xd3f694>
     968:	0a000004 	beq	980 <__core1_unwind_stub-0xfff680>
     96c:	005b0d30 	subseq	r0, fp, r0, lsr sp
     970:	0b000000 	bleq	978 <__core1_unwind_stub-0xfff688>
     974:	00000513 	andeq	r0, r0, r3, lsl r5
     978:	5b0d310a 	blpl	34cda8 <__core1_unwind_stub-0xcb3258>
     97c:	04000000 	streq	r0, [r0], #-0
     980:	0002210b 	andeq	r2, r2, fp, lsl #2
     984:	0d320a00 	vldmdbeq	r2!, {s0-s-1}
     988:	0000005b 	andeq	r0, r0, fp, asr r0
     98c:	2e030008 	cdpcs	0, 0, cr0, cr3, cr8, {0}
     990:	0a00000e 	beq	9d0 <__core1_unwind_stub-0xfff630>
     994:	095d0333 	ldmdbeq	sp, {r0, r1, r4, r5, r8, r9}^
     998:	600a0000 	andvs	r0, sl, r0
     99c:	dc09380a 	stcle	8, cr3, [r9], {10}
     9a0:	0b00000a 	bleq	9d0 <__core1_unwind_stub-0xfff630>
     9a4:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9a8:	5b0d390a 	blpl	34edd8 <__core1_unwind_stub-0xcb1228>
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	0003870b 	andeq	r8, r3, fp, lsl #14
     9b4:	0d3a0a00 	vldmdbeq	sl!, {s0-s-1}
     9b8:	0000005b 	andeq	r0, r0, fp, asr r0
     9bc:	0f500b04 	svceq	0x00500b04
     9c0:	3b0a0000 	blcc	2809c8 <__core1_unwind_stub-0xd7f638>
     9c4:	00005b0d 	andeq	r5, r0, sp, lsl #22
     9c8:	f20b0800 	vadd.i8	d0, d11, d0
     9cc:	0a000008 	beq	9f4 <__core1_unwind_stub-0xfff60c>
     9d0:	005b0d3c 	subseq	r0, fp, ip, lsr sp
     9d4:	0b0c0000 	bleq	3009dc <__core1_unwind_stub-0xcff624>
     9d8:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9dc:	5b0d3d0a 	blpl	34fe0c <__core1_unwind_stub-0xcb01f4>
     9e0:	10000000 	andne	r0, r0, r0
     9e4:	00072e0b 	andeq	r2, r7, fp, lsl #28
     9e8:	0d3e0a00 	vldmdbeq	lr!, {s0-s-1}
     9ec:	0000005b 	andeq	r0, r0, fp, asr r0
     9f0:	063d0b14 			; <UNDEFINED> instruction: 0x063d0b14
     9f4:	3f0a0000 	svccc	0x000a0000
     9f8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     9fc:	be0b1800 	cdplt	8, 0, cr1, cr11, cr0, {0}
     a00:	0a00000d 	beq	a3c <__core1_unwind_stub-0xfff5c4>
     a04:	005b0d40 	subseq	r0, fp, r0, asr #26
     a08:	0b1c0000 	bleq	700a10 <__core1_unwind_stub-0x8ff5f0>
     a0c:	00000776 	andeq	r0, r0, r6, ror r7
     a10:	5b0d410a 	blpl	350e40 <__core1_unwind_stub-0xcaf1c0>
     a14:	20000000 	andcs	r0, r0, r0
     a18:	0001fb0b 	andeq	pc, r1, fp, lsl #22
     a1c:	0d420a00 	vstreq	s1, [r2, #-0]
     a20:	0000005b 	andeq	r0, r0, fp, asr r0
     a24:	016f0b24 	cmneq	pc, r4, lsr #22
     a28:	430a0000 	movwmi	r0, #40960	; 0xa000
     a2c:	00005b0d 	andeq	r5, r0, sp, lsl #22
     a30:	780b2800 	stmdavc	fp, {fp, sp}
     a34:	0a00000b 	beq	a68 <__core1_unwind_stub-0xfff598>
     a38:	005b0d44 	subseq	r0, fp, r4, asr #26
     a3c:	0b2c0000 	bleq	b00a44 <__core1_unwind_stub-0x4ff5bc>
     a40:	000005c3 	andeq	r0, r0, r3, asr #11
     a44:	5b0d450a 	blpl	351e74 <__core1_unwind_stub-0xcae18c>
     a48:	30000000 	andcc	r0, r0, r0
     a4c:	000b340b 	andeq	r3, fp, fp, lsl #8
     a50:	0d460a00 	vstreq	s1, [r6, #-0]
     a54:	0000005b 	andeq	r0, r0, fp, asr r0
     a58:	0f7f0b34 	svceq	0x007f0b34
     a5c:	470a0000 	strmi	r0, [sl, -r0]
     a60:	00005b0d 	andeq	r5, r0, sp, lsl #22
     a64:	620b3800 	andvs	r3, fp, #0, 16
     a68:	0a00000a 	beq	a98 <__core1_unwind_stub-0xfff568>
     a6c:	005b0d48 	subseq	r0, fp, r8, asr #26
     a70:	0b3c0000 	bleq	f00a78 <__core1_unwind_stub-0xff588>
     a74:	00000f43 	andeq	r0, r0, r3, asr #30
     a78:	5b0d490a 	blpl	352ea8 <__core1_unwind_stub-0xcad158>
     a7c:	40000000 	andmi	r0, r0, r0
     a80:	000e420b 	andeq	r4, lr, fp, lsl #4
     a84:	0d4a0a00 	vstreq	s1, [sl, #-0]
     a88:	0000005b 	andeq	r0, r0, fp, asr r0
     a8c:	0b0e0b44 	bleq	3837a4 <__core1_unwind_stub-0xc7c85c>
     a90:	4b0a0000 	blmi	280a98 <__core1_unwind_stub-0xd7f568>
     a94:	00005b0d 	andeq	r5, r0, sp, lsl #22
     a98:	1e0b4800 	cdpne	8, 0, cr4, cr11, cr0, {0}
     a9c:	0a000000 	beq	aa4 <__core1_unwind_stub-0xfff55c>
     aa0:	005b0d4c 	subseq	r0, fp, ip, asr #26
     aa4:	0b4c0000 	bleq	1300aac <__bss_end__+0x2e4aac>
     aa8:	000001d7 	ldrdeq	r0, [r0], -r7
     aac:	5b0d4d0a 	blpl	353edc <__core1_unwind_stub-0xcac124>
     ab0:	50000000 	andpl	r0, r0, r0
     ab4:	0006660b 	andeq	r6, r6, fp, lsl #12
     ab8:	0d4e0a00 	vstreq	s1, [lr, #-0]
     abc:	0000005b 	andeq	r0, r0, fp, asr r0
     ac0:	0d7a0b54 	vldmdbeq	sl!, {d16-<overflow reg d57>}
     ac4:	4f0a0000 	svcmi	0x000a0000
     ac8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     acc:	830b5800 	movwhi	r5, #47104	; 0xb800
     ad0:	0a00000e 	beq	b10 <__core1_unwind_stub-0xfff4f0>
     ad4:	005b0d50 	subseq	r0, fp, r0, asr sp
     ad8:	005c0000 	subseq	r0, ip, r0
     adc:	00064803 	andeq	r4, r6, r3, lsl #16
     ae0:	03510a00 	cmpeq	r1, #0, 20
     ae4:	0000099a 	muleq	r0, sl, r9
     ae8:	560a540a 	strpl	r5, [sl], -sl, lsl #8
     aec:	000c0309 	andeq	r0, ip, r9, lsl #6
     af0:	05d00b00 	ldrbeq	r0, [r0, #2816]	; 0xb00
     af4:	570a0000 	strpl	r0, [sl, -r0]
     af8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     afc:	870b0000 	strhi	r0, [fp, -r0]
     b00:	0a000003 	beq	b14 <__core1_unwind_stub-0xfff4ec>
     b04:	005b0d58 	subseq	r0, fp, r8, asr sp
     b08:	0b040000 	bleq	100b10 <__core1_unwind_stub-0xeff4f0>
     b0c:	00000f50 	andeq	r0, r0, r0, asr pc
     b10:	5b0d590a 	blpl	356f40 <__core1_unwind_stub-0xca90c0>
     b14:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b18:	000dbe0b 	andeq	fp, sp, fp, lsl #28
     b1c:	0d5a0a00 	vldreq	s1, [sl, #-0]
     b20:	0000005b 	andeq	r0, r0, fp, asr r0
     b24:	03b60b0c 			; <UNDEFINED> instruction: 0x03b60b0c
     b28:	5b0a0000 	blpl	280b30 <__core1_unwind_stub-0xd7f4d0>
     b2c:	00005b0d 	andeq	r5, r0, sp, lsl #22
     b30:	760b1000 	strvc	r1, [fp], -r0
     b34:	0a000007 	beq	b58 <__core1_unwind_stub-0xfff4a8>
     b38:	005b0d5c 	subseq	r0, fp, ip, asr sp
     b3c:	0b140000 	bleq	500b44 <__core1_unwind_stub-0xaff4bc>
     b40:	00000d8c 	andeq	r0, r0, ip, lsl #27
     b44:	5b0d5d0a 	blpl	357f74 <__core1_unwind_stub-0xca808c>
     b48:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     b4c:	0001fb0b 	andeq	pc, r1, fp, lsl #22
     b50:	0d5e0a00 	vldreq	s1, [lr, #-0]
     b54:	0000005b 	andeq	r0, r0, fp, asr r0
     b58:	06f50b1c 	usateq	r0, #21, ip, lsl #22
     b5c:	5f0a0000 	svcpl	0x000a0000
     b60:	00005b0d 	andeq	r5, r0, sp, lsl #22
     b64:	6f0b2000 	svcvs	0x000b2000
     b68:	0a000001 	beq	b74 <__core1_unwind_stub-0xfff48c>
     b6c:	005b0d60 	subseq	r0, fp, r0, ror #26
     b70:	0b240000 	bleq	900b78 <__core1_unwind_stub-0x6ff488>
     b74:	0000067a 	andeq	r0, r0, sl, ror r6
     b78:	5b0d610a 	blpl	358fa8 <__core1_unwind_stub-0xca7058>
     b7c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     b80:	000b780b 	andeq	r7, fp, fp, lsl #16
     b84:	0d620a00 	vstmdbeq	r2!, {s1-s0}
     b88:	0000005b 	andeq	r0, r0, fp, asr r0
     b8c:	012b0b2c 			; <UNDEFINED> instruction: 0x012b0b2c
     b90:	630a0000 	movwvs	r0, #40960	; 0xa000
     b94:	00005b0d 	andeq	r5, r0, sp, lsl #22
     b98:	c30b3000 	movwgt	r3, #45056	; 0xb000
     b9c:	0a000005 	beq	bb8 <__core1_unwind_stub-0xfff448>
     ba0:	005b0d64 	subseq	r0, fp, r4, ror #26
     ba4:	0b340000 	bleq	d00bac <__core1_unwind_stub-0x2ff454>
     ba8:	00000f7f 	andeq	r0, r0, pc, ror pc
     bac:	5b0d650a 	blpl	359fdc <__core1_unwind_stub-0xca6024>
     bb0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     bb4:	0005990b 	andeq	r9, r5, fp, lsl #18
     bb8:	0d660a00 	vstmdbeq	r6!, {s1-s0}
     bbc:	0000005b 	andeq	r0, r0, fp, asr r0
     bc0:	0a620b3c 	beq	18838b8 <__bss_end__+0x8678b8>
     bc4:	670a0000 	strvs	r0, [sl, -r0]
     bc8:	00005b0d 	andeq	r5, r0, sp, lsl #22
     bcc:	700b4000 	andvc	r4, fp, r0
     bd0:	0a000009 	beq	bfc <__core1_unwind_stub-0xfff404>
     bd4:	005b0d68 	subseq	r0, fp, r8, ror #26
     bd8:	0b440000 	bleq	1100be0 <__bss_end__+0xe4be0>
     bdc:	0000017c 	andeq	r0, r0, ip, ror r1
     be0:	5b0d690a 	blpl	35b010 <__core1_unwind_stub-0xca4ff0>
     be4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     be8:	00099f0b 	andeq	r9, r9, fp, lsl #30
     bec:	0d6a0a00 	vstmdbeq	sl!, {s1-s0}
     bf0:	0000005b 	andeq	r0, r0, fp, asr r0
     bf4:	09e00b4c 	stmibeq	r0!, {r2, r3, r6, r8, r9, fp}^
     bf8:	6b0a0000 	blvs	280c00 <__core1_unwind_stub-0xd7f400>
     bfc:	00005b0d 	andeq	r5, r0, sp, lsl #22
     c00:	03005000 	movweq	r5, #0
     c04:	00000240 	andeq	r0, r0, r0, asr #4
     c08:	e8036c0a 	stmda	r3, {r1, r3, sl, fp, sp, lr}
     c0c:	0a00000a 	beq	c3c <__core1_unwind_stub-0xfff3c4>
     c10:	09710a08 	ldmdbeq	r1!, {r3, r9, fp}^
     c14:	00000c33 	andeq	r0, r0, r3, lsr ip
     c18:	0001b10b 	andeq	fp, r1, fp, lsl #2
     c1c:	0d720a00 	vldmdbeq	r2!, {s1-s0}
     c20:	0000005b 	andeq	r0, r0, fp, asr r0
     c24:	076f0b00 	strbeq	r0, [pc, -r0, lsl #22]!
     c28:	730a0000 	movwvc	r0, #40960	; 0xa000
     c2c:	00005b0d 	andeq	r5, r0, sp, lsl #22
     c30:	03000400 	movweq	r0, #1024	; 0x400
     c34:	0000092b 	andeq	r0, r0, fp, lsr #18
     c38:	0f03740a 	svceq	0x0003740a
     c3c:	0a00000c 	beq	c74 <__core1_unwind_stub-0xfff38c>
     c40:	097a0abc 	ldmdbeq	sl!, {r2, r3, r4, r5, r7, r9, fp}^
     c44:	00000c70 	andeq	r0, r0, r0, ror ip
     c48:	0005f20b 	andeq	pc, r5, fp, lsl #4
     c4c:	247b0a00 	ldrbtcs	r0, [fp], #-2560	; 0xfffff600
     c50:	00000adc 	ldrdeq	r0, [r0], -ip
     c54:	0dec0b00 			; <UNDEFINED> instruction: 0x0dec0b00
     c58:	7c0a0000 	stcvc	0, cr0, [sl], {-0}
     c5c:	000c0324 	andeq	r0, ip, r4, lsr #6
     c60:	e10b6000 	mrs	r6, (UNDEF: 11)
     c64:	0a000003 	beq	c78 <__core1_unwind_stub-0xfff388>
     c68:	0c33247d 	cfldrseq	mvf2, [r3], #-500	; 0xfffffe0c
     c6c:	00b40000 	adcseq	r0, r4, r0
     c70:	00030103 	andeq	r0, r3, r3, lsl #2
     c74:	037e0a00 	cmneq	lr, #0, 20
     c78:	00000c3f 	andeq	r0, r0, pc, lsr ip
     c7c:	000dfd21 	andeq	pc, sp, r1, lsr #26
     c80:	4d010700 	stcmi	7, cr0, [r1, #-0]
     c84:	0a000000 	beq	c8c <__core1_unwind_stub-0xfff374>
     c88:	0d490e8b 	stcleq	14, cr0, [r9, #-556]	; 0xfffffdd4
     c8c:	2f220000 	svccs	0x00220000
     c90:	00000005 	andeq	r0, r0, r5
     c94:	000cdb22 	andeq	sp, ip, r2, lsr #22
     c98:	fd220100 	stc2	1, cr0, [r2, #-0]
     c9c:	02000008 	andeq	r0, r0, #8
     ca0:	000ad222 	andeq	sp, sl, r2, lsr #4
     ca4:	82220300 	eorhi	r0, r2, #0, 6
     ca8:	04000005 	streq	r0, [r0], #-5
     cac:	000c9e22 	andeq	r9, ip, r2, lsr #28
     cb0:	c4220500 	strtgt	r0, [r2], #-1280	; 0xfffffb00
     cb4:	0600000f 	streq	r0, [r0], -pc
     cb8:	00011822 	andeq	r1, r1, r2, lsr #16
     cbc:	8c220700 	stchi	7, cr0, [r2], #-0
     cc0:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
     cc4:	0007ce22 	andeq	ip, r7, r2, lsr #28
     cc8:	94220900 	strtls	r0, [r2], #-2304	; 0xfffff700
     ccc:	0a00000e 	beq	d0c <__core1_unwind_stub-0xfff2f4>
     cd0:	00027122 	andeq	r7, r2, r2, lsr #2
     cd4:	f2220b00 	vqdmulh.s32	d0, d2, d0
     cd8:	0c00000a 	stceq	0, cr0, [r0], {10}
     cdc:	00027f22 	andeq	r7, r2, r2, lsr #30
     ce0:	90220d00 	eorls	r0, r2, r0, lsl #26
     ce4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     ce8:	0005da22 	andeq	sp, r5, r2, lsr #20
     cec:	c3220f00 			; <UNDEFINED> instruction: 0xc3220f00
     cf0:	10000003 	andne	r0, r0, r3
     cf4:	000e7122 	andeq	r7, lr, r2, lsr #2
     cf8:	9c221100 	stflss	f1, [r2], #-0
     cfc:	1200000f 	andne	r0, r0, #15
     d00:	000b5822 	andeq	r5, fp, r2, lsr #16
     d04:	20221300 	eorcs	r1, r2, r0, lsl #6
     d08:	1400000d 	strne	r0, [r0], #-13
     d0c:	000d2e22 	andeq	r2, sp, r2, lsr #28
     d10:	3c221500 	cfstr32cc	mvfx1, [r2], #-0
     d14:	1600000d 	strne	r0, [r0], -sp
     d18:	00037622 	andeq	r7, r3, r2, lsr #12
     d1c:	fa221700 	blx	886924 <__core1_unwind_stub-0x7796dc>
     d20:	18000005 	stmdane	r0, {r0, r2}
     d24:	000dd522 	andeq	sp, sp, r2, lsr #10
     d28:	02221900 	eoreq	r1, r2, #0, 18
     d2c:	1a000007 	bne	d50 <__core1_unwind_stub-0xfff2b0>
     d30:	000eb022 	andeq	fp, lr, r2, lsr #32
     d34:	e5221b00 	str	r1, [r2, #-2816]!	; 0xfffff500
     d38:	1c000008 	stcne	0, cr0, [r0], {8}
     d3c:	000c3a22 	andeq	r3, ip, r2, lsr #20
     d40:	66221d00 	strtvs	r1, [r2], -r0, lsl #26
     d44:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
     d48:	05090300 	streq	r0, [r9, #-768]	; 0xfffffd00
     d4c:	ae0a0000 	cdpge	0, 0, cr0, cr10, cr0, {0}
     d50:	000c7c03 	andeq	r7, ip, r3, lsl #24
     d54:	39040f00 	stmdbcc	r4, {r8, r9, sl, fp}
     d58:	20000009 	andcs	r0, r0, r9
     d5c:	00000842 	andeq	r0, r0, r2, asr #16
     d60:	550e360b 	strpl	r3, [lr, #-1547]	; 0xfffff9f5
     d64:	2000000d 	andcs	r0, r0, sp
     d68:	00000848 	andeq	r0, r0, r8, asr #16
     d6c:	550e370b 	strpl	r3, [lr, #-1803]	; 0xfffff8f5
     d70:	2100000d 	tstcs	r0, sp
     d74:	00000eec 	andeq	r0, r0, ip, ror #29
     d78:	004d0107 	subeq	r0, sp, r7, lsl #2
     d7c:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
     d80:	000db00e 	andeq	fp, sp, lr
     d84:	03252200 			; <UNDEFINED> instruction: 0x03252200
     d88:	22000000 	andcs	r0, r0, #0
     d8c:	0000053c 	andeq	r0, r0, ip, lsr r5
     d90:	04142201 	ldreq	r2, [r4], #-513	; 0xfffffdff
     d94:	22020000 	andcs	r0, r2, #0
     d98:	00000c47 	andeq	r0, r0, r7, asr #24
     d9c:	0c592203 	lfmeq	f2, 2, [r9], {3}
     da0:	22040000 	andcs	r0, r4, #0
     da4:	0000033c 	andeq	r0, r0, ip, lsr r3
     da8:	034c2205 	movteq	r2, #49669	; 0xc205
     dac:	00060000 	andeq	r0, r6, r0
     db0:	0006a221 	andeq	sl, r6, r1, lsr #4
     db4:	4d010700 	stcmi	7, cr0, [r1, #-0]
     db8:	0c000000 	stceq	0, cr0, [r0], {-0}
     dbc:	0dcf0e8e 	stcleq	14, cr0, [pc, #568]	; ffc <__core1_unwind_stub-0xfff004>
     dc0:	66220000 	strtvs	r0, [r2], -r0
     dc4:	00000004 	andeq	r0, r0, r4
     dc8:	0007e222 	andeq	lr, r7, r2, lsr #4
     dcc:	23000100 	movwcs	r0, #256	; 0x100
     dd0:	0000087e 	andeq	r0, r0, lr, ror r8
     dd4:	510c4c01 	tstpl	ip, r1, lsl #24
     dd8:	05000009 	streq	r0, [r0, #-9]
     ddc:	00560003 	subseq	r0, r6, r3
     de0:	0eda2301 	cdpeq	3, 13, cr2, cr10, cr1, {0}
     de4:	4d010000 	stcmi	0, cr0, [r1, #-0]
     de8:	0009510c 	andeq	r5, r9, ip, lsl #2
     dec:	00030500 	andeq	r0, r3, r0, lsl #10
     df0:	23010080 	movwcs	r0, #4224	; 0x1080
     df4:	0000019e 	muleq	r0, lr, r1
     df8:	510c4e01 	tstpl	ip, r1, lsl #28
     dfc:	05000009 	streq	r0, [r0, #-9]
     e00:	00800403 	addeq	r0, r0, r3, lsl #8
     e04:	01c52401 	biceq	r2, r5, r1, lsl #8
     e08:	6b010000 	blvs	40e10 <__core1_unwind_stub-0xfbf1f0>
     e0c:	09450103 	stmdbeq	r5, {r0, r1, r8}^
     e10:	00000000 	andeq	r0, r0, r0
     e14:	08f00000 	ldmeq	r0!, {}^	; <UNPREDICTABLE>
     e18:	9c010000 	stcls	0, cr0, [r1], {-0}
     e1c:	00000e81 	andeq	r0, r0, r1, lsl #29
     e20:	67666325 	strbvs	r6, [r6, -r5, lsr #6]!
     e24:	036c0100 	cmneq	ip, #0, 2
     e28:	000e811a 	andeq	r8, lr, sl, lsl r1
     e2c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     e30:	00050226 	andeq	r0, r5, r6, lsr #4
     e34:	036d0100 	cmneq	sp, #0, 2
     e38:	000e8718 	andeq	r8, lr, r8, lsl r7
     e3c:	60910200 	addsvs	r0, r1, r0, lsl #4
     e40:	000f3127 	andeq	r3, pc, r7, lsr #2
     e44:	03700100 	cmneq	r0, #0, 2
     e48:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e4c:	70910200 	addsvc	r0, r1, r0, lsl #4
     e50:	0001b827 	andeq	fp, r1, r7, lsr #16
     e54:	03710100 	cmneq	r1, #0, 2
     e58:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e5c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     e60:	00042b27 	andeq	r2, r4, r7, lsr #22
     e64:	03720100 	cmneq	r2, #0, 2
     e68:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     e70:	0006cb27 	andeq	ip, r6, r7, lsr #22
     e74:	03730100 	cmneq	r3, #0, 2
     e78:	00005b0c 	andeq	r5, r0, ip, lsl #22
     e7c:	68910200 	ldmvs	r1, {r9}
     e80:	70040f00 	andvc	r0, r4, r0, lsl #30
     e84:	0f00000c 	svceq	0x0000000c
     e88:	00098e04 	andeq	r8, r9, r4, lsl #28
     e8c:	0f0d2400 	svceq	0x000d2400
     e90:	31010000 	mrscc	r0, (UNDEF: 1)
     e94:	09451103 	stmdbeq	r5, {r0, r1, r8, ip}^
     e98:	11380000 	teqne	r8, r0
     e9c:	02640100 	rsbeq	r0, r4, #0, 2
     ea0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ea4:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
     ea8:	6b6c6325 	blvs	1b19b44 <__bss_end__+0xafdb44>
     eac:	03310100 	teqeq	r1, #0, 2
     eb0:	000d492e 	andeq	r4, sp, lr, lsr #18
     eb4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     eb8:	0c6b2800 	stcleq	8, cr2, [fp], #-0
     ebc:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     ec0:	09452103 	stmdbeq	r5, {r0, r1, r8, sp}^
     ec4:	10f00000 	rscsne	r0, r0, r0
     ec8:	00480100 	subeq	r0, r8, r0, lsl #2
     ecc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ed0:	00000ef5 	strdeq	r0, [r0], -r5
     ed4:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
     ed8:	03290100 			; <UNDEFINED> instruction: 0x03290100
     edc:	00011d41 	andeq	r1, r1, r1, asr #26
     ee0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ee4:	000f3e26 	andeq	r3, pc, r6, lsr #28
     ee8:	03290100 			; <UNDEFINED> instruction: 0x03290100
     eec:	00005b4f 	andeq	r5, r0, pc, asr #22
     ef0:	70910200 	addsvc	r0, r1, r0, lsl #4
     ef4:	01e62400 	mvneq	r2, r0, lsl #8
     ef8:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
     efc:	09451102 	stmdbeq	r5, {r1, r8, ip}^
     f00:	00000000 	andeq	r0, r0, r0
     f04:	02640000 	rsbeq	r0, r4, #0
     f08:	9c010000 	stcls	0, cr0, [r1], {-0}
     f0c:	00000f21 	andeq	r0, r0, r1, lsr #30
     f10:	6b6c6325 	blvs	1b19bac <__bss_end__+0xafdbac>
     f14:	02f50100 	rscseq	r0, r5, #0, 2
     f18:	000d4930 	andeq	r4, sp, r0, lsr r9
     f1c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f20:	02c72800 	sbceq	r2, r7, #0, 16
     f24:	ef010000 	svc	0x00010000
     f28:	09452102 	stmdbeq	r5, {r1, r8, sp}^
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	00340000 	eorseq	r0, r4, r0
     f34:	9c010000 	stcls	0, cr0, [r1], {-0}
     f38:	00000f5d 	andeq	r0, r0, sp, asr pc
     f3c:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
     f40:	02ef0100 	rsceq	r0, pc, #0, 2
     f44:	00011d43 	andeq	r1, r1, r3, asr #26
     f48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f4c:	000f3e26 	andeq	r3, pc, r6, lsr #28
     f50:	02ef0100 	rsceq	r0, pc, #0, 2
     f54:	00005b51 	andeq	r5, r0, r1, asr fp
     f58:	70910200 	addsvc	r0, r1, r0, lsl #4
     f5c:	0b9e2400 	bleq	fe789f64 <__shm_end__+0xbe789f64>
     f60:	bb010000 	bllt	40f68 <__core1_unwind_stub-0xfbf098>
     f64:	09451102 	stmdbeq	r5, {r1, r8, ip}^
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	02640000 	rsbeq	r0, r4, #0
     f70:	9c010000 	stcls	0, cr0, [r1], {-0}
     f74:	00000f89 	andeq	r0, r0, r9, lsl #31
     f78:	6b6c6325 	blvs	1b19c14 <__bss_end__+0xafdc14>
     f7c:	02bb0100 	adcseq	r0, fp, #0, 2
     f80:	000d4931 	andeq	r4, sp, r1, lsr r9
     f84:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f88:	02aa2800 	adceq	r2, sl, #0, 16
     f8c:	b4010000 	strlt	r0, [r1], #-0
     f90:	09452102 	stmdbeq	r5, {r1, r8, sp}^
     f94:	00000000 	andeq	r0, r0, r0
     f98:	00340000 	eorseq	r0, r4, r0
     f9c:	9c010000 	stcls	0, cr0, [r1], {-0}
     fa0:	00000fc5 	andeq	r0, r0, r5, asr #31
     fa4:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
     fa8:	02b40100 	adcseq	r0, r4, #0, 2
     fac:	00011d44 	andeq	r1, r1, r4, asr #26
     fb0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     fb4:	000f3e26 	andeq	r3, pc, r6, lsr #28
     fb8:	02b40100 	adcseq	r0, r4, #0, 2
     fbc:	00005b52 	andeq	r5, r0, r2, asr fp
     fc0:	70910200 	addsvc	r0, r1, r0, lsl #4
     fc4:	0efc2400 	cdpeq	4, 15, cr2, cr12, cr0, {0}
     fc8:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     fcc:	09451102 	stmdbeq	r5, {r1, r8, ip}^
     fd0:	0eb40000 	cdpeq	0, 11, cr0, cr4, cr0, {0}
     fd4:	023c0100 	eorseq	r0, ip, #0, 2
     fd8:	9c010000 	stcls	0, cr0, [r1], {-0}
     fdc:	00001011 	andeq	r1, r0, r1, lsl r0
     fe0:	6b6c6325 	blvs	1b19c7c <__bss_end__+0xafdc7c>
     fe4:	02490100 	subeq	r0, r9, #0, 2
     fe8:	000d492c 	andeq	r4, sp, ip, lsr #18
     fec:	6f910200 	svcvs	0x00910200
     ff0:	00151e26 	andseq	r1, r5, r6, lsr #28
     ff4:	02490100 	subeq	r0, r9, #0, 2
     ff8:	0010113d 	andseq	r1, r0, sp, lsr r1
     ffc:	68910200 	ldmvs	r1, {r9}
    1000:	74657229 	strbtvc	r7, [r5], #-553	; 0xfffffdd7
    1004:	024b0100 	subeq	r0, fp, #0, 2
    1008:	00094515 	andeq	r4, r9, r5, lsl r5
    100c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1010:	51040f00 	tstpl	r4, r0, lsl #30
    1014:	24000009 	strcs	r0, [r0], #-9
    1018:	00000981 	andeq	r0, r0, r1, lsl #19
    101c:	11023901 	tstne	r2, r1, lsl #18
    1020:	00000945 	andeq	r0, r0, r5, asr #18
    1024:	01000e4c 	tsteq	r0, ip, asr #28
    1028:	00000068 	andeq	r0, r0, r8, rrx
    102c:	10439c01 	subne	r9, r3, r1, lsl #24
    1030:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1034:	01000000 	mrseq	r0, (UNDEF: 0)
    1038:	11320239 	teqne	r2, r9, lsr r2
    103c:	02000010 	andeq	r0, r0, #16
    1040:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1044:	0000039b 	muleq	r0, fp, r3
    1048:	11022d01 	tstne	r2, r1, lsl #26
    104c:	00000945 	andeq	r0, r0, r5, asr #18
    1050:	01000de4 	smlatteq	r0, r4, sp, r0
    1054:	00000068 	andeq	r0, r0, r8, rrx
    1058:	106f9c01 	rsbne	r9, pc, r1, lsl #24
    105c:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1060:	01000000 	mrseq	r0, (UNDEF: 0)
    1064:	1138022d 	teqne	r8, sp, lsr #4
    1068:	02000010 	andeq	r0, r0, #16
    106c:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1070:	00000caa 	andeq	r0, r0, sl, lsr #25
    1074:	11022101 	tstne	r2, r1, lsl #2
    1078:	00000945 	andeq	r0, r0, r5, asr #18
    107c:	01000d7c 	tsteq	r0, ip, ror sp
    1080:	00000068 	andeq	r0, r0, r8, rrx
    1084:	109b9c01 	addsne	r9, fp, r1, lsl #24
    1088:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    108c:	01000000 	mrseq	r0, (UNDEF: 0)
    1090:	11380221 	teqne	r8, r1, lsr #4
    1094:	02000010 	andeq	r0, r0, #16
    1098:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    109c:	0000056b 	andeq	r0, r0, fp, ror #10
    10a0:	11021901 	tstne	r2, r1, lsl #18
    10a4:	00000945 	andeq	r0, r0, r5, asr #18
    10a8:	00000000 	andeq	r0, r0, r0
    10ac:	0000005c 	andeq	r0, r0, ip, asr r0
    10b0:	10d79c01 	sbcsne	r9, r7, r1, lsl #24
    10b4:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    10b8:	01000000 	mrseq	r0, (UNDEF: 0)
    10bc:	11340219 	teqne	r4, r9, lsl r2
    10c0:	02000010 	andeq	r0, r0, #16
    10c4:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    10c8:	01007465 	tsteq	r0, r5, ror #8
    10cc:	4515021b 	ldrmi	r0, [r5, #-539]	; 0xfffffde5
    10d0:	02000009 	andeq	r0, r0, #9
    10d4:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    10d8:	00000554 	andeq	r0, r0, r4, asr r5
    10dc:	11021101 	tstne	r2, r1, lsl #2
    10e0:	00000945 	andeq	r0, r0, r5, asr #18
    10e4:	00000000 	andeq	r0, r0, r0
    10e8:	0000005c 	andeq	r0, r0, ip, asr r0
    10ec:	11139c01 	tstne	r3, r1, lsl #24
    10f0:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    10f4:	01000000 	mrseq	r0, (UNDEF: 0)
    10f8:	11340211 	teqne	r4, r1, lsl r2
    10fc:	02000010 	andeq	r0, r0, #16
    1100:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1104:	01007465 	tsteq	r0, r5, ror #8
    1108:	45150213 	ldrmi	r0, [r5, #-531]	; 0xfffffded
    110c:	02000009 	andeq	r0, r0, #9
    1110:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1114:	00000483 	andeq	r0, r0, r3, lsl #9
    1118:	11020c01 	tstne	r2, r1, lsl #24
    111c:	00000945 	andeq	r0, r0, r5, asr #18
    1120:	01000d54 	tsteq	r0, r4, asr sp
    1124:	00000028 	andeq	r0, r0, r8, lsr #32
    1128:	113f9c01 	teqne	pc, r1, lsl #24
    112c:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1130:	01000000 	mrseq	r0, (UNDEF: 0)
    1134:	1133020c 	teqne	r3, ip, lsl #4
    1138:	02000010 	andeq	r0, r0, #16
    113c:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1140:	00000898 	muleq	r0, r8, r8
    1144:	11020001 	tstne	r2, r1
    1148:	00000945 	andeq	r0, r0, r5, asr #18
    114c:	01000cec 	smlatteq	r0, ip, ip, r0
    1150:	00000068 	andeq	r0, r0, r8, rrx
    1154:	116b9c01 	cmnne	fp, r1, lsl #24
    1158:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    115c:	01000000 	mrseq	r0, (UNDEF: 0)
    1160:	11340200 	teqne	r4, r0, lsl #4
    1164:	02000010 	andeq	r0, r0, #16
    1168:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    116c:	000004ec 	andeq	r0, r0, ip, ror #9
    1170:	1101ef01 	tstne	r1, r1, lsl #30
    1174:	00000945 	andeq	r0, r0, r5, asr #18
    1178:	01000c48 	tsteq	r0, r8, asr #24
    117c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1180:	11a79c01 			; <UNDEFINED> instruction: 0x11a79c01
    1184:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1188:	01000000 	mrseq	r0, (UNDEF: 0)
    118c:	113301ef 	teqne	r3, pc, ror #3
    1190:	02000010 	andeq	r0, r0, #16
    1194:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1198:	01007465 	tsteq	r0, r5, ror #8
    119c:	451501f1 	ldrmi	r0, [r5, #-497]	; 0xfffffe0f
    11a0:	02000009 	andeq	r0, r0, #9
    11a4:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    11a8:	00000956 	andeq	r0, r0, r6, asr r9
    11ac:	1101e301 	tstne	r1, r1, lsl #6
    11b0:	00000945 	andeq	r0, r0, r5, asr #18
    11b4:	01000be0 	smlatteq	r0, r0, fp, r0
    11b8:	00000068 	andeq	r0, r0, r8, rrx
    11bc:	11d39c01 	bicsne	r9, r3, r1, lsl #24
    11c0:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    11c4:	01000000 	mrseq	r0, (UNDEF: 0)
    11c8:	113701e3 	teqne	r7, r3, ror #3
    11cc:	02000010 	andeq	r0, r0, #16
    11d0:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    11d4:	00000750 	andeq	r0, r0, r0, asr r7
    11d8:	1101dc01 	tstne	r1, r1, lsl #24
    11dc:	00000945 	andeq	r0, r0, r5, asr #18
    11e0:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
    11e4:	00000030 	andeq	r0, r0, r0, lsr r0
    11e8:	11ff9c01 	mvnsne	r9, r1, lsl #24
    11ec:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    11f0:	01000000 	mrseq	r0, (UNDEF: 0)
    11f4:	113401dc 	teqne	r4, ip	; <illegal shifter operand>
    11f8:	02000010 	andeq	r0, r0, #16
    11fc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1200:	00000739 	andeq	r0, r0, r9, lsr r7
    1204:	1101d501 	tstne	r1, r1, lsl #10
    1208:	00000945 	andeq	r0, r0, r5, asr #18
    120c:	01000b80 	smlabbeq	r0, r0, fp, r0
    1210:	00000030 	andeq	r0, r0, r0, lsr r0
    1214:	122b9c01 	eorne	r9, fp, #256	; 0x100
    1218:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    121c:	01000000 	mrseq	r0, (UNDEF: 0)
    1220:	113401d5 	teqne	r4, r5	; <illegal shifter operand>
    1224:	02000010 	andeq	r0, r0, #16
    1228:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    122c:	000006d2 	ldrdeq	r0, [r0], -r2
    1230:	1101ce01 	tstne	r1, r1, lsl #28
    1234:	00000945 	andeq	r0, r0, r5, asr #18
    1238:	01000b50 	tsteq	r0, r0, asr fp
    123c:	00000030 	andeq	r0, r0, r0, lsr r0
    1240:	12579c01 	subsne	r9, r7, #256	; 0x100
    1244:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1248:	01000000 	mrseq	r0, (UNDEF: 0)
    124c:	113401ce 	teqne	r4, lr, asr #3
    1250:	02000010 	andeq	r0, r0, #16
    1254:	2a007491 	bcs	1e4a0 <__core1_unwind_stub-0xfe1b60>
    1258:	00000a8b 	andeq	r0, r0, fp, lsl #21
    125c:	1801af01 	stmdane	r1, {r0, r8, r9, sl, fp, sp, pc}
    1260:	00000945 	andeq	r0, r0, r5, asr #18
    1264:	01000a74 	tsteq	r0, r4, ror sl
    1268:	000000dc 	ldrdeq	r0, [r0], -ip
    126c:	12a39c01 	adcne	r9, r3, #256	; 0x100
    1270:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1274:	01000000 	mrseq	r0, (UNDEF: 0)
    1278:	113c01af 	teqne	ip, pc, lsr #3
    127c:	02000010 	andeq	r0, r0, #16
    1280:	37267491 			; <UNDEFINED> instruction: 0x37267491
    1284:	0100000f 	tsteq	r0, pc
    1288:	5b3001b0 	blpl	c01950 <__core1_unwind_stub-0x3fe6b0>
    128c:	02000000 	andeq	r0, r0, #0
    1290:	9e267091 	mcrls	0, 1, r7, cr6, cr1, {4}
    1294:	01000002 	tsteq	r0, r2
    1298:	5b3001b1 	blpl	c01964 <__core1_unwind_stub-0x3fe69c>
    129c:	02000000 	andeq	r0, r0, #0
    12a0:	24006c91 	strcs	r6, [r0], #-3217	; 0xfffff36f
    12a4:	000008cb 	andeq	r0, r0, fp, asr #17
    12a8:	11019401 	tstne	r1, r1, lsl #8
    12ac:	00000945 	andeq	r0, r0, r5, asr #18
    12b0:	01000a08 	tsteq	r0, r8, lsl #20
    12b4:	0000006c 	andeq	r0, r0, ip, rrx
    12b8:	12df9c01 	sbcsne	r9, pc, #256	; 0x100
    12bc:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    12c0:	01000000 	mrseq	r0, (UNDEF: 0)
    12c4:	11370194 	teqne	r7, r4	; <illegal shifter operand>
    12c8:	02000010 	andeq	r0, r0, #16
    12cc:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    12d0:	01007465 	tsteq	r0, r5, ror #8
    12d4:	45150196 	ldrmi	r0, [r5, #-406]	; 0xfffffe6a
    12d8:	02000009 	andeq	r0, r0, #9
    12dc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    12e0:	00000d4a 	andeq	r0, r0, sl, asr #26
    12e4:	11018b01 	tstne	r1, r1, lsl #22
    12e8:	00000945 	andeq	r0, r0, r5, asr #18
    12ec:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
    12f0:	0000006c 	andeq	r0, r0, ip, rrx
    12f4:	131b9c01 	tstne	fp, #256	; 0x100
    12f8:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    12fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1300:	1136018b 	teqne	r6, fp, lsl #3
    1304:	02000010 	andeq	r0, r0, #16
    1308:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    130c:	01007465 	tsteq	r0, r5, ror #8
    1310:	4515018d 	ldrmi	r0, [r5, #-397]	; 0xfffffe73
    1314:	02000009 	andeq	r0, r0, #9
    1318:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    131c:	0000060c 	andeq	r0, r0, ip, lsl #12
    1320:	11018201 	tstne	r1, r1, lsl #4
    1324:	00000945 	andeq	r0, r0, r5, asr #18
    1328:	01000930 	tsteq	r0, r0, lsr r9
    132c:	0000006c 	andeq	r0, r0, ip, rrx
    1330:	13579c01 	cmpne	r7, #256	; 0x100
    1334:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1338:	01000000 	mrseq	r0, (UNDEF: 0)
    133c:	11340182 	teqne	r4, r2, lsl #3
    1340:	02000010 	andeq	r0, r0, #16
    1344:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1348:	01007465 	tsteq	r0, r5, ror #8
    134c:	45150184 	ldrmi	r0, [r5, #-388]	; 0xfffffe7c
    1350:	02000009 	andeq	r0, r0, #9
    1354:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1358:	00000796 	muleq	r0, r6, r7
    135c:	11017901 	tstne	r1, r1, lsl #18
    1360:	00000945 	andeq	r0, r0, r5, asr #18
    1364:	010008c4 	smlabteq	r0, r4, r8, r0
    1368:	0000006c 	andeq	r0, r0, ip, rrx
    136c:	13939c01 	orrsne	r9, r3, #256	; 0x100
    1370:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1374:	01000000 	mrseq	r0, (UNDEF: 0)
    1378:	11370179 	teqne	r7, r9, ror r1
    137c:	02000010 	andeq	r0, r0, #16
    1380:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1384:	01007465 	tsteq	r0, r5, ror #8
    1388:	4515017b 	ldrmi	r0, [r5, #-379]	; 0xfffffe85
    138c:	02000009 	andeq	r0, r0, #9
    1390:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1394:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    1398:	11017001 	tstne	r1, r1
    139c:	00000945 	andeq	r0, r0, r5, asr #18
    13a0:	01000858 	tsteq	r0, r8, asr r8
    13a4:	0000006c 	andeq	r0, r0, ip, rrx
    13a8:	13cf9c01 	bicne	r9, pc, #256	; 0x100
    13ac:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    13b0:	01000000 	mrseq	r0, (UNDEF: 0)
    13b4:	11340170 	teqne	r4, r0, ror r1
    13b8:	02000010 	andeq	r0, r0, #16
    13bc:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    13c0:	01007465 	tsteq	r0, r5, ror #8
    13c4:	45150172 	ldrmi	r0, [r5, #-370]	; 0xfffffe8e
    13c8:	02000009 	andeq	r0, r0, #9
    13cc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    13d0:	00000914 	andeq	r0, r0, r4, lsl r9
    13d4:	11016701 	tstne	r1, r1, lsl #14
    13d8:	00000945 	andeq	r0, r0, r5, asr #18
    13dc:	010007ec 	smlatteq	r0, ip, r7, r0
    13e0:	0000006c 	andeq	r0, r0, ip, rrx
    13e4:	140b9c01 	strne	r9, [fp], #-3073	; 0xfffff3ff
    13e8:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    13ec:	01000000 	mrseq	r0, (UNDEF: 0)
    13f0:	11340167 	teqne	r4, r7, ror #2
    13f4:	02000010 	andeq	r0, r0, #16
    13f8:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    13fc:	01007465 	tsteq	r0, r5, ror #8
    1400:	45150169 	ldrmi	r0, [r5, #-361]	; 0xfffffe97
    1404:	02000009 	andeq	r0, r0, #9
    1408:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    140c:	00000208 	andeq	r0, r0, r8, lsl #4
    1410:	11015e01 	tstne	r1, r1, lsl #28
    1414:	00000945 	andeq	r0, r0, r5, asr #18
    1418:	01000784 	smlabbeq	r0, r4, r7, r0
    141c:	00000068 	andeq	r0, r0, r8, rrx
    1420:	14479c01 	strbne	r9, [r7], #-3073	; 0xfffff3ff
    1424:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1428:	01000000 	mrseq	r0, (UNDEF: 0)
    142c:	1136015e 	teqne	r6, lr, asr r1
    1430:	02000010 	andeq	r0, r0, #16
    1434:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1438:	01007465 	tsteq	r0, r5, ror #8
    143c:	45050161 	strmi	r0, [r5, #-353]	; 0xfffffe9f
    1440:	02000009 	andeq	r0, r0, #9
    1444:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1448:	000005a6 	andeq	r0, r0, r6, lsr #11
    144c:	11015601 	tstne	r1, r1, lsl #12
    1450:	00000945 	andeq	r0, r0, r5, asr #18
    1454:	01000744 	tsteq	r0, r4, asr #14
    1458:	00000040 	andeq	r0, r0, r0, asr #32
    145c:	14839c01 	strne	r9, [r3], #3073	; 0xc01
    1460:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1464:	01000000 	mrseq	r0, (UNDEF: 0)
    1468:	113a0156 	teqne	sl, r6, asr r1
    146c:	02000010 	andeq	r0, r0, #16
    1470:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1474:	01007465 	tsteq	r0, r5, ror #8
    1478:	45150158 	ldrmi	r0, [r5, #-344]	; 0xfffffea8
    147c:	02000009 	andeq	r0, r0, #9
    1480:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1484:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
    1488:	11014801 	tstne	r1, r1, lsl #16
    148c:	00000945 	andeq	r0, r0, r5, asr #18
    1490:	010006d8 	ldrdeq	r0, [r0, -r8]
    1494:	0000006c 	andeq	r0, r0, ip, rrx
    1498:	14bf9c01 	ldrtne	r9, [pc], #3073	; 14a0 <__core1_unwind_stub-0xffeb60>
    149c:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    14a0:	01000000 	mrseq	r0, (UNDEF: 0)
    14a4:	113b0148 	teqne	fp, r8, asr #2
    14a8:	02000010 	andeq	r0, r0, #16
    14ac:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    14b0:	01007465 	tsteq	r0, r5, ror #8
    14b4:	4515014a 	ldrmi	r0, [r5, #-330]	; 0xfffffeb6
    14b8:	02000009 	andeq	r0, r0, #9
    14bc:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    14c0:	000003eb 	andeq	r0, r0, fp, ror #7
    14c4:	11013f01 	tstne	r1, r1, lsl #30
    14c8:	00000945 	andeq	r0, r0, r5, asr #18
    14cc:	01000698 			; <UNDEFINED> instruction: 0x01000698
    14d0:	00000040 	andeq	r0, r0, r0, asr #32
    14d4:	14fb9c01 	ldrbtne	r9, [fp], #3073	; 0xc01
    14d8:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    14dc:	01000000 	mrseq	r0, (UNDEF: 0)
    14e0:	1138013f 	teqne	r8, pc, lsr r1
    14e4:	02000010 	andeq	r0, r0, #16
    14e8:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    14ec:	01007465 	tsteq	r0, r5, ror #8
    14f0:	45150141 	ldrmi	r0, [r5, #-321]	; 0xfffffebf
    14f4:	02000009 	andeq	r0, r0, #9
    14f8:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    14fc:	00000da2 	andeq	r0, r0, r2, lsr #27
    1500:	11013701 	tstne	r1, r1, lsl #14
    1504:	00000945 	andeq	r0, r0, r5, asr #18
    1508:	01000658 	tsteq	r0, r8, asr r6
    150c:	00000040 	andeq	r0, r0, r0, asr #32
    1510:	15379c01 	ldrne	r9, [r7, #-3073]!	; 0xfffff3ff
    1514:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1518:	01000000 	mrseq	r0, (UNDEF: 0)
    151c:	11390137 	teqne	r9, r7, lsr r1
    1520:	02000010 	andeq	r0, r0, #16
    1524:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1528:	01007465 	tsteq	r0, r5, ror #8
    152c:	45150139 	ldrmi	r0, [r5, #-313]	; 0xfffffec7
    1530:	02000009 	andeq	r0, r0, #9
    1534:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    1538:	00000b1f 	andeq	r0, r0, pc, lsl fp
    153c:	11012701 	tstne	r1, r1, lsl #14
    1540:	00000945 	andeq	r0, r0, r5, asr #18
    1544:	010005ec 	smlatteq	r0, ip, r5, r0
    1548:	0000006c 	andeq	r0, r0, ip, rrx
    154c:	15739c01 	ldrbne	r9, [r3, #-3073]!	; 0xfffff3ff
    1550:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    1554:	01000000 	mrseq	r0, (UNDEF: 0)
    1558:	11320127 	teqne	r2, r7, lsr #2
    155c:	02000010 	andeq	r0, r0, #16
    1560:	72296c91 	eorvc	r6, r9, #37120	; 0x9100
    1564:	01007465 	tsteq	r0, r5, ror #8
    1568:	4515012c 	ldrmi	r0, [r5, #-300]	; 0xfffffed4
    156c:	02000009 	andeq	r0, r0, #9
    1570:	2b007491 	blcs	1e7bc <__core1_unwind_stub-0xfe1844>
    1574:	00000716 	andeq	r0, r0, r6, lsl r7
    1578:	4518e501 	ldrmi	lr, [r8, #-1281]	; 0xfffffaff
    157c:	cc000009 	stcgt	0, cr0, [r0], {9}
    1580:	20010003 	andcs	r0, r1, r3
    1584:	01000002 	tsteq	r0, r2
    1588:	0016429c 	mulseq	r6, ip, r2
    158c:	00182c00 	andseq	r2, r8, r0, lsl #24
    1590:	e5010000 	str	r0, [r1, #-0]
    1594:	0010113c 	andseq	r1, r0, ip, lsr r1
    1598:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    159c:	000f682c 	andeq	r6, pc, ip, lsr #16
    15a0:	30e60100 	rsccc	r0, r6, r0, lsl #2
    15a4:	0000005b 	andeq	r0, r0, fp, asr r0
    15a8:	2c609102 	stfcsp	f1, [r0], #-8
    15ac:	00000f36 	andeq	r0, r0, r6, lsr pc
    15b0:	5b30e701 	blpl	c3b1bc <__core1_unwind_stub-0x3c4e44>
    15b4:	02000000 	andeq	r0, r0, #0
    15b8:	b92c5c91 	stmdblt	ip!, {r0, r4, r7, sl, fp, ip, lr}
    15bc:	0100000a 	tsteq	r0, sl
    15c0:	005b30e8 	subseq	r3, fp, r8, ror #1
    15c4:	91020000 	mrsls	r0, (UNDEF: 2)
    15c8:	0c8a2c58 	stceq	12, cr2, [sl], {88}	; 0x58
    15cc:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    15d0:	00164231 	andseq	r4, r6, r1, lsr r2
    15d4:	00910200 	addseq	r0, r1, r0, lsl #4
    15d8:	000a512c 	andeq	r5, sl, ip, lsr #2
    15dc:	31ea0100 	mvncc	r0, r0, lsl #2
    15e0:	00001642 	andeq	r1, r0, r2, asr #12
    15e4:	2c049102 	stfcsd	f1, [r4], {2}
    15e8:	0000035c 	andeq	r0, r0, ip, asr r3
    15ec:	5b30eb01 	blpl	c3c1f8 <__core1_unwind_stub-0x3c3e08>
    15f0:	02000000 	andeq	r0, r0, #0
    15f4:	772c0891 			; <UNDEFINED> instruction: 0x772c0891
    15f8:	0100000a 	tsteq	r0, sl
    15fc:	164231ec 	strbne	r3, [r2], -ip, ror #3
    1600:	91020000 	mrsls	r0, (UNDEF: 2)
    1604:	0cc52c0c 	stcleq	12, cr2, [r5], {12}
    1608:	ed010000 	stc	0, cr0, [r1, #-0]
    160c:	00005b30 	andeq	r5, r0, r0, lsr fp
    1610:	10910200 	addsne	r0, r1, r0, lsl #4
    1614:	00151e2d 	andseq	r1, r5, sp, lsr #28
    1618:	10ef0100 	rscne	r0, pc, r0, lsl #2
    161c:	00000951 	andeq	r0, r0, r1, asr r9
    1620:	2d6c9102 	stfcsp	f1, [ip, #-8]!
    1624:	00000f5b 	andeq	r0, r0, fp, asr pc
    1628:	5b0ef001 	blpl	3bd634 <__core1_unwind_stub-0xc429cc>
    162c:	02000000 	andeq	r0, r0, #0
    1630:	722e7491 	eorvc	r7, lr, #-1862270976	; 0x91000000
    1634:	01007465 	tsteq	r0, r5, ror #8
    1638:	094515f1 	stmdbeq	r5, {r0, r4, r5, r6, r7, r8, sl, ip}^
    163c:	91020000 	mrsls	r0, (UNDEF: 2)
    1640:	040f0070 	streq	r0, [pc], #-112	; 1648 <__core1_unwind_stub-0xffe9b8>
    1644:	0000005b 	andeq	r0, r0, fp, asr r0
    1648:	0008192f 	andeq	r1, r8, pc, lsr #18
    164c:	11ab0100 			; <UNDEFINED> instruction: 0x11ab0100
    1650:	00000945 	andeq	r0, r0, r5, asr #18
    1654:	0100023c 	tsteq	r0, ip, lsr r2
    1658:	00000190 	muleq	r0, r0, r1
    165c:	16bd9c01 	ldrtne	r9, [sp], r1, lsl #24
    1660:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    1664:	01000000 	mrseq	r0, (UNDEF: 0)
    1668:	101137ab 	andsne	r3, r1, fp, lsr #15
    166c:	91020000 	mrsls	r0, (UNDEF: 2)
    1670:	65722e5c 	ldrbvs	r2, [r2, #-3676]!	; 0xfffff1a4
    1674:	ad010074 	stcge	0, cr0, [r1, #-464]	; 0xfffffe30
    1678:	00094514 	andeq	r4, r9, r4, lsl r5
    167c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1680:	000c282d 	andeq	r2, ip, sp, lsr #16
    1684:	0dae0100 	stfeqs	f0, [lr]
    1688:	0000006e 	andeq	r0, r0, lr, rrx
    168c:	2d689102 	stfcsp	f1, [r8, #-8]!
    1690:	0000151e 	andeq	r1, r0, lr, lsl r5
    1694:	510faf01 	tstpl	pc, r1, lsl #30
    1698:	02000009 	andeq	r0, r0, #9
    169c:	4c2d6091 	stcmi	0, cr6, [sp], #-580	; 0xfffffdbc
    16a0:	0100000a 	tsteq	r0, sl
    16a4:	005b0db0 	ldrheq	r0, [fp], #-208	; 0xffffff30
    16a8:	91020000 	mrsls	r0, (UNDEF: 2)
    16ac:	0a472d64 	beq	11ccc44 <__bss_end__+0x1b0c44>
    16b0:	b5010000 	strlt	r0, [r1, #-0]
    16b4:	00005b0d 	andeq	r5, r0, sp, lsl #22
    16b8:	70910200 	addsvc	r0, r1, r0, lsl #4
    16bc:	0cf02f00 	ldcleq	15, cr2, [r0]
    16c0:	85010000 	strhi	r0, [r1, #-0]
    16c4:	00094511 	andeq	r4, r9, r1, lsl r5
    16c8:	0000e400 	andeq	lr, r0, r0, lsl #8
    16cc:	00015801 	andeq	r5, r1, r1, lsl #16
    16d0:	329c0100 	addscc	r0, ip, #0, 2
    16d4:	2c000017 	stccs	0, cr0, [r0], {23}
    16d8:	00000018 	andeq	r0, r0, r8, lsl r0
    16dc:	11378501 	teqne	r7, r1, lsl #10
    16e0:	02000010 	andeq	r0, r0, #16
    16e4:	722e5c91 	eorvc	r5, lr, #37120	; 0x9100
    16e8:	01007465 	tsteq	r0, r5, ror #8
    16ec:	09451487 	stmdbeq	r5, {r0, r1, r2, r7, sl, ip}^
    16f0:	91020000 	mrsls	r0, (UNDEF: 2)
    16f4:	0c282d74 	stceq	13, cr2, [r8], #-464	; 0xfffffe30
    16f8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    16fc:	00006e0d 	andeq	r6, r0, sp, lsl #28
    1700:	68910200 	ldmvs	r1, {r9}
    1704:	00151e2d 	andseq	r1, r5, sp, lsr #28
    1708:	0f890100 	svceq	0x00890100
    170c:	00000951 	andeq	r0, r0, r1, asr r9
    1710:	2d609102 	stfcsp	f1, [r0, #-8]!
    1714:	00000a4c 	andeq	r0, r0, ip, asr #20
    1718:	5b0d8a01 	blpl	363f24 <__core1_unwind_stub-0xc9c0dc>
    171c:	02000000 	andeq	r0, r0, #0
    1720:	472d6491 			; <UNDEFINED> instruction: 0x472d6491
    1724:	0100000a 	tsteq	r0, sl
    1728:	005b0d8e 	subseq	r0, fp, lr, lsl #27
    172c:	91020000 	mrsls	r0, (UNDEF: 2)
    1730:	8d300070 	ldchi	0, cr0, [r0, #-448]!	; 0xfffffe40
    1734:	01000001 	tsteq	r0, r1
    1738:	09451178 	stmdbeq	r5, {r3, r4, r5, r6, r8, ip}^
    173c:	00900000 	addseq	r0, r0, r0
    1740:	00540100 	subseq	r0, r4, r0, lsl #2
    1744:	9c010000 	stcls	0, cr0, [r1], {-0}
    1748:	0000175c 	andeq	r1, r0, ip, asr r7
    174c:	0000182c 	andeq	r1, r0, ip, lsr #16
    1750:	3b780100 	blcc	1e01b58 <__bss_end__+0xde5b58>
    1754:	00001011 	andeq	r1, r0, r1, lsl r0
    1758:	00749102 	rsbseq	r9, r4, r2, lsl #2
    175c:	00085730 	andeq	r5, r8, r0, lsr r7
    1760:	116e0100 	cmnne	lr, r0, lsl #2
    1764:	00000945 	andeq	r0, r0, r5, asr #18
    1768:	0100003c 	tsteq	r0, ip, lsr r0
    176c:	00000054 	andeq	r0, r0, r4, asr r0
    1770:	17869c01 	strne	r9, [r6, r1, lsl #24]
    1774:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    1778:	01000000 	mrseq	r0, (UNDEF: 0)
    177c:	1011446e 	andsne	r4, r1, lr, ror #8
    1780:	91020000 	mrsls	r0, (UNDEF: 2)
    1784:	0a300074 	beq	c0195c <__core1_unwind_stub-0x3fe6a4>
    1788:	0100000d 	tsteq	r0, sp
    178c:	09451168 	stmdbeq	r5, {r3, r5, r6, r8, ip}^
    1790:	00040000 	andeq	r0, r4, r0
    1794:	00380100 	eorseq	r0, r8, r0, lsl #2
    1798:	9c010000 	stcls	0, cr0, [r1], {-0}
    179c:	000017b0 			; <UNDEFINED> instruction: 0x000017b0
    17a0:	0000182c 	andeq	r1, r0, ip, lsr #16
    17a4:	33680100 	cmncc	r8, #0, 2
    17a8:	00001011 	andeq	r1, r0, r1, lsl r0
    17ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17b0:	0009c731 	andeq	ip, r9, r1, lsr r7
    17b4:	11520100 	cmpne	r2, r0, lsl #2
    17b8:	00000945 	andeq	r0, r0, r5, asr #18
    17bc:	00000000 	andeq	r0, r0, r0
    17c0:	00000098 	muleq	r0, r8, r0
    17c4:	63329c01 	teqvs	r2, #256	; 0x100
    17c8:	01006b6c 	tsteq	r0, ip, ror #22
    17cc:	0d493452 	cfstrdeq	mvd3, [r9, #-328]	; 0xfffffeb8
    17d0:	91020000 	mrsls	r0, (UNDEF: 2)
    17d4:	151e2c77 	ldrne	r2, [lr, #-3191]	; 0xfffff389
    17d8:	53010000 	movwpl	r0, #4096	; 0x1000
    17dc:	00095135 	andeq	r5, r9, r5, lsr r1
    17e0:	70910200 	addsvc	r0, r1, r0, lsl #4
    17e4:	11000000 	mrsne	r0, (UNDEF: 0)
    17e8:	00040000 	andeq	r0, r4, r0
    17ec:	00000338 	andeq	r0, r0, r8, lsr r3
    17f0:	003a0104 	eorseq	r0, sl, r4, lsl #2
    17f4:	de0c0000 	cdple	0, 0, cr0, cr12, cr0, {0}
    17f8:	df000013 	svcle	0x00000013
    17fc:	6000000b 	andvs	r0, r0, fp
    1800:	00000001 	andeq	r0, r0, r1
    1804:	81000000 	mrshi	r0, (UNDEF: 0)
    1808:	02000009 	andeq	r0, r0, #9
    180c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1810:	0d030074 	stceq	0, cr0, [r3, #-464]	; 0xfffffe30
    1814:	02000010 	andeq	r0, r0, #16
    1818:	003817d1 	ldrsbteq	r1, [r8], -r1
    181c:	04040000 	streq	r0, [r4], #-0
    1820:	000b4b07 	andeq	r4, fp, r7, lsl #22
    1824:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    1828:	0000080b 	andeq	r0, r0, fp, lsl #16
    182c:	a3040804 	movwge	r0, #18436	; 0x4804
    1830:	0400000a 	streq	r0, [r0], #-10
    1834:	04080601 	streq	r0, [r8], #-1537	; 0xfffff9ff
    1838:	02040000 	andeq	r0, r4, #0
    183c:	000d7005 	andeq	r7, sp, r5
    1840:	0e610300 	cdpeq	3, 6, cr0, cr1, cr0, {0}
    1844:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    1848:	00006718 	andeq	r6, r0, r8, lsl r7
    184c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1850:	00000810 	andeq	r0, r0, r0, lsl r8
    1854:	06080104 	streq	r0, [r8], -r4, lsl #2
    1858:	04000004 	streq	r0, [r0], #-4
    185c:	0ebd0702 	cdpeq	7, 11, cr0, cr13, cr2, {0}
    1860:	60030000 	andvs	r0, r3, r0
    1864:	0300000e 	movweq	r0, #14
    1868:	00881934 	addeq	r1, r8, r4, lsr r9
    186c:	04040000 	streq	r0, [r4], #-0
    1870:	000b4607 	andeq	r4, fp, r7, lsl #12
    1874:	07080400 	streq	r0, [r8, -r0, lsl #8]
    1878:	00000b41 	andeq	r0, r0, r1, asr #22
    187c:	0004dc03 	andeq	sp, r4, r3, lsl #24
    1880:	1d410400 	cfstrdne	mvd0, [r1, #-0]
    1884:	0000005b 	andeq	r0, r0, fp, asr r0
    1888:	00094b03 	andeq	r4, r9, r3, lsl #22
    188c:	122a0500 	eorne	r0, sl, #0, 10
    1890:	0000007c 	andeq	r0, r0, ip, ror r0
    1894:	000dfd05 	andeq	pc, sp, r5, lsl #26
    1898:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    189c:	05000000 	streq	r0, [r0, #-0]
    18a0:	017b0e8b 	cmneq	fp, fp, lsl #29
    18a4:	2f060000 	svccs	0x00060000
    18a8:	00000005 	andeq	r0, r0, r5
    18ac:	000cdb06 	andeq	sp, ip, r6, lsl #22
    18b0:	fd060100 	stc2	1, cr0, [r6, #-0]
    18b4:	02000008 	andeq	r0, r0, #8
    18b8:	000ad206 	andeq	sp, sl, r6, lsl #4
    18bc:	82060300 	andhi	r0, r6, #0, 6
    18c0:	04000005 	streq	r0, [r0], #-5
    18c4:	000c9e06 	andeq	r9, ip, r6, lsl #28
    18c8:	c4060500 	strgt	r0, [r6], #-1280	; 0xfffffb00
    18cc:	0600000f 	streq	r0, [r0], -pc
    18d0:	00011806 	andeq	r1, r1, r6, lsl #16
    18d4:	8c060700 	stchi	7, cr0, [r6], {-0}
    18d8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    18dc:	0007ce06 	andeq	ip, r7, r6, lsl #28
    18e0:	94060900 	strls	r0, [r6], #-2304	; 0xfffff700
    18e4:	0a00000e 	beq	1924 <__core1_unwind_stub-0xffe6dc>
    18e8:	00027106 	andeq	r7, r2, r6, lsl #2
    18ec:	f2060b00 	vqdmulh.s<illegal width 8>	d0, d6, d0
    18f0:	0c00000a 	stceq	0, cr0, [r0], {10}
    18f4:	00027f06 	andeq	r7, r2, r6, lsl #30
    18f8:	90060d00 	andls	r0, r6, r0, lsl #26
    18fc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1900:	0005da06 	andeq	sp, r5, r6, lsl #20
    1904:	c3060f00 	movwgt	r0, #28416	; 0x6f00
    1908:	10000003 	andne	r0, r0, r3
    190c:	000e7106 	andeq	r7, lr, r6, lsl #2
    1910:	9c061100 	stflss	f1, [r6], {-0}
    1914:	1200000f 	andne	r0, r0, #15
    1918:	000b5806 	andeq	r5, fp, r6, lsl #16
    191c:	20061300 	andcs	r1, r6, r0, lsl #6
    1920:	1400000d 	strne	r0, [r0], #-13
    1924:	000d2e06 	andeq	r2, sp, r6, lsl #28
    1928:	3c061500 	cfstr32cc	mvfx1, [r6], {-0}
    192c:	1600000d 	strne	r0, [r0], -sp
    1930:	00037606 	andeq	r7, r3, r6, lsl #12
    1934:	fa061700 	blx	18753c <__core1_unwind_stub-0xe78ac4>
    1938:	18000005 	stmdane	r0, {r0, r2}
    193c:	000dd506 	andeq	sp, sp, r6, lsl #10
    1940:	02061900 	andeq	r1, r6, #0, 18
    1944:	1a000007 	bne	1968 <__core1_unwind_stub-0xffe698>
    1948:	000eb006 	andeq	fp, lr, r6
    194c:	e5061b00 	str	r1, [r6, #-2816]	; 0xfffff500
    1950:	1c000008 	stcne	0, cr0, [r0], {8}
    1954:	000c3a06 	andeq	r3, ip, r6, lsl #20
    1958:	66061d00 	strvs	r1, [r6], -r0, lsl #26
    195c:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    1960:	1b030500 	blne	c2d68 <__core1_unwind_stub-0xf3d298>
    1964:	02070000 	andeq	r0, r7, #0
    1968:	00000075 	andeq	r0, r0, r5, ror r0
    196c:	a10e4d06 	tstge	lr, r6, lsl #26
    1970:	06000001 	streq	r0, [r0], -r1
    1974:	000015d5 	ldrdeq	r1, [r0], -r5
    1978:	15f40600 	ldrbne	r0, [r4, #1536]!	; 0x600
    197c:	07010000 	streq	r0, [r1, -r0]
    1980:	000013ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    1984:	03000100 	movweq	r0, #256	; 0x100
    1988:	00001b86 	andeq	r1, r0, r6, lsl #23
    198c:	7b015f06 	blvc	595ac <__core1_unwind_stub-0xfa6a54>
    1990:	08000001 	stmdaeq	r0, {r0}
    1994:	00001bb0 			; <UNDEFINED> instruction: 0x00001bb0
    1998:	10660614 	rsbne	r0, r6, r4, lsl r6
    199c:	000001fc 	strdeq	r0, [r0], -ip
    19a0:	00072709 	andeq	r2, r7, r9, lsl #14
    19a4:	18680600 	stmdane	r8!, {r9, sl}^
    19a8:	000001a1 	andeq	r0, r0, r1, lsr #3
    19ac:	285f0900 	ldmdacs	pc, {r8, fp}^	; <UNPREDICTABLE>
    19b0:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    19b4:	0001fc18 	andeq	pc, r1, r8, lsl ip	; <UNPREDICTABLE>
    19b8:	18090400 	stmdane	r9, {sl}
    19bc:	06000015 			; <UNDEFINED> instruction: 0x06000015
    19c0:	00a2186a 	adceq	r1, r2, sl, ror #16
    19c4:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    19c8:	00002b39 	andeq	r2, r0, r9, lsr fp
    19cc:	7c186b06 			; <UNDEFINED> instruction: 0x7c186b06
    19d0:	0c000000 	stceq	0, cr0, [r0], {-0}
    19d4:	7263660a 	rsbvc	r6, r3, #10485760	; 0xa00000
    19d8:	186c0600 	stmdane	ip!, {r9, sl}^
    19dc:	0000007c 	andeq	r0, r0, ip, ror r0
    19e0:	040b0010 	streq	r0, [fp], #-16
    19e4:	001bc303 	andseq	ip, fp, r3, lsl #6
    19e8:	016e0600 	cmneq	lr, r0, lsl #12
    19ec:	000001ad 	andeq	r0, r0, sp, lsr #3
    19f0:	0018a405 	andseq	sl, r8, r5, lsl #8
    19f4:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    19f8:	06000000 	streq	r0, [r0], -r0
    19fc:	02350eff 	eorseq	r0, r5, #4080	; 0xff0
    1a00:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    1a04:	0000001a 	andeq	r0, r0, sl, lsl r0
    1a08:	00137d06 	andseq	r7, r3, r6, lsl #26
    1a0c:	e6060100 	str	r0, [r6], -r0, lsl #2
    1a10:	02000019 	andeq	r0, r0, #25
    1a14:	001b3206 	andseq	r3, fp, r6, lsl #4
    1a18:	0c000300 	stceq	3, cr0, [r0], {-0}
    1a1c:	00001476 	andeq	r1, r0, r6, ror r4
    1a20:	01011806 	tsteq	r1, r6, lsl #16
    1a24:	0000020a 	andeq	r0, r0, sl, lsl #4
    1a28:	0016ba0d 	andseq	fp, r6, sp, lsl #20
    1a2c:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    1a30:	06000000 	streq	r0, [r0], -r0
    1a34:	6e0e011e 	mcrvs	1, 0, r0, cr14, cr14, {0}
    1a38:	06000002 	streq	r0, [r0], -r2
    1a3c:	0000102c 	andeq	r1, r0, ip, lsr #32
    1a40:	10b40600 	adcsne	r0, r4, r0, lsl #12
    1a44:	06010000 	streq	r0, [r1], -r0
    1a48:	00001158 	andeq	r1, r0, r8, asr r1
    1a4c:	133b0602 	teqne	fp, #2097152	; 0x200000
    1a50:	00030000 	andeq	r0, r3, r0
    1a54:	0017310c 	andseq	r3, r7, ip, lsl #2
    1a58:	01360600 	teqeq	r6, r0, lsl #12
    1a5c:	00024201 	andeq	r4, r2, r1, lsl #4
    1a60:	17980d00 	ldrne	r0, [r8, r0, lsl #26]
    1a64:	04070000 	streq	r0, [r7], #-0
    1a68:	00000038 	andeq	r0, r0, r8, lsr r0
    1a6c:	0e028f06 	cdpeq	15, 0, cr8, cr2, cr6, {0}
    1a70:	00000313 	andeq	r0, r0, r3, lsl r3
    1a74:	00132506 	andseq	r2, r3, r6, lsl #10
    1a78:	d6063200 	strle	r3, [r6], -r0, lsl #4
    1a7c:	4b000016 	blmi	1adc <__core1_unwind_stub-0xffe524>
    1a80:	001b9906 	andseq	r9, fp, r6, lsl #18
    1a84:	58079600 	stmdapl	r7, {r9, sl, ip, pc}
    1a88:	2c00001b 	stccs	0, cr0, [r0], {27}
    1a8c:	16600701 	strbtne	r0, [r0], -r1, lsl #14
    1a90:	02580000 	subseq	r0, r8, #0
    1a94:	001a0a07 	andseq	r0, sl, r7, lsl #20
    1a98:	07038400 	streq	r8, [r3, -r0, lsl #8]
    1a9c:	00001613 	andeq	r1, r0, r3, lsl r6
    1aa0:	ed0704b0 	cfstrs	mvf0, [r7, #-704]	; 0xfffffd40
    1aa4:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    1aa8:	17690707 	strbne	r0, [r9, -r7, lsl #14]!
    1aac:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    1ab0:	0010db07 	andseq	sp, r0, r7, lsl #22
    1ab4:	070e1000 	streq	r1, [lr, -r0]
    1ab8:	00001801 	andeq	r1, r0, r1, lsl #16
    1abc:	870712c0 	strhi	r1, [r7, -r0, asr #5]
    1ac0:	20000015 	andcs	r0, r0, r5, lsl r0
    1ac4:	159f071c 	ldrne	r0, [pc, #1820]	; 21e8 <__core1_unwind_stub-0xffde18>
    1ac8:	25800000 	strcs	r0, [r0]
    1acc:	00106607 	andseq	r6, r0, r7, lsl #12
    1ad0:	07384000 	ldreq	r4, [r8, -r0]!
    1ad4:	00001a90 	muleq	r0, r0, sl
    1ad8:	8b074b00 	blhi	1d46e0 <__core1_unwind_stub-0xe2b920>
    1adc:	80000018 	andhi	r0, r0, r8, lsl r0
    1ae0:	1aa90770 	bne	fea438a8 <__shm_end__+0xbea438a8>
    1ae4:	96000000 	strls	r0, [r0], -r0
    1ae8:	001ad807 	andseq	sp, sl, r7, lsl #16
    1aec:	0ee10000 	cdpeq	0, 14, cr0, cr1, cr0, {0}
    1af0:	0000198a 	andeq	r1, r0, sl, lsl #19
    1af4:	0001c200 	andeq	ip, r1, r0, lsl #4
    1af8:	1b6f0d00 	blne	1bc4f00 <__bss_end__+0xba8f00>
    1afc:	01070000 	mrseq	r0, (UNDEF: 7)
    1b00:	0000006e 	andeq	r0, r0, lr, rrx
    1b04:	0e031106 	adfeqs	f1, f3, f6
    1b08:	0000034b 	andeq	r0, r0, fp, asr #6
    1b0c:	00194c06 	andseq	r4, r9, r6, lsl #24
    1b10:	ad060600 	stcge	6, cr0, [r6, #-0]
    1b14:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    1b18:	001c1d06 	andseq	r1, ip, r6, lsl #26
    1b1c:	66060c00 	strvs	r0, [r6], -r0, lsl #24
    1b20:	02000019 	andeq	r0, r0, #25
    1b24:	00122b06 	andseq	r2, r2, r6, lsl #22
    1b28:	2b060000 	blcs	181b30 <__core1_unwind_stub-0xe7e4d0>
    1b2c:	01000016 	tsteq	r0, r6, lsl r0
    1b30:	1bd60c00 	blne	ff584b38 <__shm_end__+0xbf584b38>
    1b34:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1b38:	03130103 	tsteq	r3, #-1073741824	; 0xc0000000
    1b3c:	fd0d0000 	stc2	0, cr0, [sp, #-0]
    1b40:	07000014 	smladeq	r0, r4, r0, r0
    1b44:	00006e01 	andeq	r6, r0, r1, lsl #28
    1b48:	053c0600 	ldreq	r0, [ip, #-1536]!	; 0xfffffa00
    1b4c:	0003840e 	andeq	r8, r3, lr, lsl #8
    1b50:	14220600 	strtne	r0, [r2], #-1536	; 0xfffffa00
    1b54:	06000000 	streq	r0, [r0], -r0
    1b58:	00001437 	andeq	r1, r0, r7, lsr r4
    1b5c:	144c0601 	strbne	r0, [ip], #-1537	; 0xfffff9ff
    1b60:	06020000 	streq	r0, [r2], -r0
    1b64:	00001461 	andeq	r1, r0, r1, ror #8
    1b68:	3f0c0003 	svccc	0x000c0003
    1b6c:	06000015 			; <UNDEFINED> instruction: 0x06000015
    1b70:	58010552 	stmdapl	r1, {r1, r4, r6, r8, sl}
    1b74:	0d000003 	stceq	0, cr0, [r0, #-12]
    1b78:	0000129c 	muleq	r0, ip, r2
    1b7c:	006e0107 	rsbeq	r0, lr, r7, lsl #2
    1b80:	57060000 	strpl	r0, [r6, -r0]
    1b84:	03b10e05 			; <UNDEFINED> instruction: 0x03b10e05
    1b88:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    1b8c:	00000011 	andeq	r0, r0, r1, lsl r0
    1b90:	00114306 	andseq	r4, r1, r6, lsl #6
    1b94:	0c000100 	stfeqs	f0, [r0], {-0}
    1b98:	00001310 	andeq	r1, r0, r0, lsl r3
    1b9c:	01056406 	tsteq	r5, r6, lsl #8
    1ba0:	00000391 	muleq	r0, r1, r3
    1ba4:	001a560d 	andseq	r5, sl, sp, lsl #12
    1ba8:	6e010700 	cdpvs	7, 0, cr0, cr1, cr0, {0}
    1bac:	06000000 	streq	r0, [r0], -r0
    1bb0:	e40e0569 	str	r0, [lr], #-1385	; 0xfffffa97
    1bb4:	06000003 	streq	r0, [r0], -r3
    1bb8:	000015b7 			; <UNDEFINED> instruction: 0x000015b7
    1bbc:	168a0600 	strne	r0, [sl], r0, lsl #12
    1bc0:	06010000 	streq	r0, [r1], -r0
    1bc4:	00001a40 	andeq	r1, r0, r0, asr #20
    1bc8:	1f0c0002 	svcne	0x000c0002
    1bcc:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    1bd0:	be01057c 	cfrshl64lt	mvdx1, mvdx12, r0
    1bd4:	0f000003 	svceq	0x00000003
    1bd8:	0000169f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1bdc:	1104ad01 	tstne	r4, r1, lsl #26
    1be0:	00000096 	muleq	r0, r6, r0
    1be4:	00000000 	andeq	r0, r0, r0
    1be8:	0000006c 	andeq	r0, r0, ip, rrx
    1bec:	042d9c01 	strteq	r9, [sp], #-3073	; 0xfffff3ff
    1bf0:	71100000 	tstvc	r0, r0
    1bf4:	0100000b 	tsteq	r0, fp
    1bf8:	2d4104ad 	cfstrdcs	mvd0, [r1, #-692]	; 0xfffffd4c
    1bfc:	02000004 	andeq	r0, r0, #4
    1c00:	df107491 	svcle	0x00107491
    1c04:	01000027 	tsteq	r0, r7, lsr #32
    1c08:	333604ae 	teqcc	r6, #-1375731712	; 0xae000000
    1c0c:	02000004 	andeq	r0, r0, #4
    1c10:	11007091 	swpne	r7, r1, [r0]
    1c14:	0001fe04 	andeq	pc, r1, r4, lsl #28
    1c18:	7c041100 	stfvcs	f1, [r4], {-0}
    1c1c:	12000000 	andne	r0, r0, #0
    1c20:	000018c0 	andeq	r1, r0, r0, asr #17
    1c24:	1104a701 	tstne	r4, r1, lsl #14
    1c28:	00000096 	muleq	r0, r6, r0
    1c2c:	00000000 	andeq	r0, r0, r0
    1c30:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c34:	04659c01 	strbteq	r9, [r5], #-3073	; 0xfffff3ff
    1c38:	71100000 	tstvc	r0, r0
    1c3c:	0100000b 	tsteq	r0, fp
    1c40:	2d4204a7 	cfstrdcs	mvd0, [r2, #-668]	; 0xfffffd64
    1c44:	02000004 	andeq	r0, r0, #4
    1c48:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1c4c:	000011e2 	andeq	r1, r0, r2, ror #3
    1c50:	1104a101 	tstne	r4, r1, lsl #2
    1c54:	00000096 	muleq	r0, r6, r0
    1c58:	01001d80 	smlabbeq	r0, r0, sp, r1
    1c5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c60:	04919c01 	ldreq	r9, [r1], #3073	; 0xc01
    1c64:	71100000 	tstvc	r0, r0
    1c68:	0100000b 	tsteq	r0, fp
    1c6c:	2d4104a1 	cfstrdcs	mvd0, [r1, #-644]	; 0xfffffd7c
    1c70:	02000004 	andeq	r0, r0, #4
    1c74:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1c78:	000014cb 	andeq	r1, r0, fp, asr #9
    1c7c:	11049b01 	tstne	r4, r1, lsl #22
    1c80:	00000096 	muleq	r0, r6, r0
    1c84:	00000000 	andeq	r0, r0, r0
    1c88:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c8c:	04bd9c01 	ldrteq	r9, [sp], #3073	; 0xc01
    1c90:	71100000 	tstvc	r0, r0
    1c94:	0100000b 	tsteq	r0, fp
    1c98:	2d42049b 	cfstrdcs	mvd0, [r2, #-620]	; 0xfffffd94
    1c9c:	02000004 	andeq	r0, r0, #4
    1ca0:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1ca4:	00001554 	andeq	r1, r0, r4, asr r5
    1ca8:	11049501 	tstne	r4, r1, lsl #10
    1cac:	00000096 	muleq	r0, r6, r0
    1cb0:	01001d54 	tsteq	r0, r4, asr sp
    1cb4:	0000002c 	andeq	r0, r0, ip, lsr #32
    1cb8:	04e99c01 	strbteq	r9, [r9], #3073	; 0xc01
    1cbc:	71100000 	tstvc	r0, r0
    1cc0:	0100000b 	tsteq	r0, fp
    1cc4:	2d410495 	cfstrdcs	mvd0, [r1, #-596]	; 0xfffffdac
    1cc8:	02000004 	andeq	r0, r0, #4
    1ccc:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1cd0:	000013c1 	andeq	r1, r0, r1, asr #7
    1cd4:	11048f01 	tstne	r4, r1, lsl #30
    1cd8:	00000096 	muleq	r0, r6, r0
    1cdc:	00000000 	andeq	r0, r0, r0
    1ce0:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ce4:	05159c01 	ldreq	r9, [r5, #-3073]	; 0xfffff3ff
    1ce8:	71100000 	tstvc	r0, r0
    1cec:	0100000b 	tsteq	r0, fp
    1cf0:	2d43048f 	cfstrdcs	mvd0, [r3, #-572]	; 0xfffffdc4
    1cf4:	02000004 	andeq	r0, r0, #4
    1cf8:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1cfc:	00001262 	andeq	r1, r0, r2, ror #4
    1d00:	11048901 	tstne	r4, r1, lsl #18
    1d04:	00000096 	muleq	r0, r6, r0
    1d08:	00000000 	andeq	r0, r0, r0
    1d0c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d10:	05419c01 	strbeq	r9, [r1, #-3073]	; 0xfffff3ff
    1d14:	71100000 	tstvc	r0, r0
    1d18:	0100000b 	tsteq	r0, fp
    1d1c:	2d420489 	cfstrdcs	mvd0, [r2, #-548]	; 0xfffffddc
    1d20:	02000004 	andeq	r0, r0, #4
    1d24:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1d28:	000013a4 	andeq	r1, r0, r4, lsr #7
    1d2c:	11048301 	tstne	r4, r1, lsl #6
    1d30:	00000096 	muleq	r0, r6, r0
    1d34:	00000000 	andeq	r0, r0, r0
    1d38:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d3c:	056d9c01 	strbeq	r9, [sp, #-3073]!	; 0xfffff3ff
    1d40:	71100000 	tstvc	r0, r0
    1d44:	0100000b 	tsteq	r0, fp
    1d48:	2d430483 	cfstrdcs	mvd0, [r3, #-524]	; 0xfffffdf4
    1d4c:	02000004 	andeq	r0, r0, #4
    1d50:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1d54:	00001246 	andeq	r1, r0, r6, asr #4
    1d58:	11047d01 	tstne	r4, r1, lsl #26
    1d5c:	00000096 	muleq	r0, r6, r0
    1d60:	00000000 	andeq	r0, r0, r0
    1d64:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d68:	05999c01 	ldreq	r9, [r9, #3073]	; 0xc01
    1d6c:	71100000 	tstvc	r0, r0
    1d70:	0100000b 	tsteq	r0, fp
    1d74:	2d42047d 	cfstrdcs	mvd0, [r2, #-500]	; 0xfffffe0c
    1d78:	02000004 	andeq	r0, r0, #4
    1d7c:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1d80:	0000184a 	andeq	r1, r0, sl, asr #16
    1d84:	11047701 	tstne	r4, r1, lsl #14
    1d88:	00000096 	muleq	r0, r6, r0
    1d8c:	00000000 	andeq	r0, r0, r0
    1d90:	0000002c 	andeq	r0, r0, ip, lsr #32
    1d94:	05c59c01 	strbeq	r9, [r5, #3073]	; 0xc01
    1d98:	71100000 	tstvc	r0, r0
    1d9c:	0100000b 	tsteq	r0, fp
    1da0:	2d410477 	cfstrdcs	mvd0, [r1, #-476]	; 0xfffffe24
    1da4:	02000004 	andeq	r0, r0, #4
    1da8:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1dac:	0000104c 	andeq	r1, r0, ip, asr #32
    1db0:	11046b01 	tstne	r4, r1, lsl #22
    1db4:	00000096 	muleq	r0, r6, r0
    1db8:	00000000 	andeq	r0, r0, r0
    1dbc:	00000044 	andeq	r0, r0, r4, asr #32
    1dc0:	05f19c01 	ldrbeq	r9, [r1, #3073]!	; 0xc01
    1dc4:	71100000 	tstvc	r0, r0
    1dc8:	0100000b 	tsteq	r0, fp
    1dcc:	2d40046b 	cfstrdcs	mvd0, [r0, #-428]	; 0xfffffe54
    1dd0:	02000004 	andeq	r0, r0, #4
    1dd4:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1dd8:	000011aa 	andeq	r1, r0, sl, lsr #3
    1ddc:	11046501 	tstne	r4, r1, lsl #10
    1de0:	00000096 	muleq	r0, r6, r0
    1de4:	00000000 	andeq	r0, r0, r0
    1de8:	0000002c 	andeq	r0, r0, ip, lsr #32
    1dec:	061d9c01 	ldreq	r9, [sp], -r1, lsl #24
    1df0:	71100000 	tstvc	r0, r0
    1df4:	0100000b 	tsteq	r0, fp
    1df8:	2d440465 	cfstrdcs	mvd0, [r4, #-404]	; 0xfffffe6c
    1dfc:	02000004 	andeq	r0, r0, #4
    1e00:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1e04:	00001492 	muleq	r0, r2, r4
    1e08:	11044e01 	tstne	r4, r1, lsl #28
    1e0c:	00000096 	muleq	r0, r6, r0
    1e10:	00000000 	andeq	r0, r0, r0
    1e14:	00000080 	andeq	r0, r0, r0, lsl #1
    1e18:	06639c01 	strbteq	r9, [r3], -r1, lsl #24
    1e1c:	71100000 	tstvc	r0, r0
    1e20:	0100000b 	tsteq	r0, fp
    1e24:	2d43044e 	cfstrdcs	mvd0, [r3, #-312]	; 0xfffffec8
    1e28:	02000004 	andeq	r0, r0, #4
    1e2c:	00136c91 	mulseq	r3, r1, ip
    1e30:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1e34:	14000000 	strne	r0, [r0], #-0
    1e38:	00727063 	rsbseq	r7, r2, r3, rrx
    1e3c:	12045a01 	andne	r5, r4, #4096	; 0x1000
    1e40:	0000007c 	andeq	r0, r0, ip, ror r0
    1e44:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e48:	18dc1500 	ldmne	ip, {r8, sl, ip}^
    1e4c:	3d010000 	stccc	0, cr0, [r1, #-0]
    1e50:	00961804 	addseq	r1, r6, r4, lsl #16
    1e54:	00000000 	andeq	r0, r0, r0
    1e58:	00840000 	addeq	r0, r4, r0
    1e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e60:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1e64:	000b7110 	andeq	r7, fp, r0, lsl r1
    1e68:	043d0100 	ldrteq	r0, [sp], #-256	; 0xffffff00
    1e6c:	00042d4b 	andeq	r2, r4, fp, asr #26
    1e70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e74:	001a2110 	andseq	r2, sl, r0, lsl r1
    1e78:	043d0100 	ldrteq	r0, [sp], #-256	; 0xffffff00
    1e7c:	00007c5c 	andeq	r7, r0, ip, asr ip
    1e80:	70910200 	addsvc	r0, r1, r0, lsl #4
    1e84:	192e1500 	stmdbne	lr!, {r8, sl, ip}
    1e88:	2b010000 	blcs	41e90 <__core1_unwind_stub-0xfbe170>
    1e8c:	00961804 	addseq	r1, r6, r4, lsl #16
    1e90:	1cd40000 	ldclne	0, cr0, [r4], {0}
    1e94:	00800100 	addeq	r0, r0, r0, lsl #2
    1e98:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e9c:	000006db 	ldrdeq	r0, [r0], -fp
    1ea0:	000b7110 	andeq	r7, fp, r0, lsl r1
    1ea4:	042b0100 	strteq	r0, [fp], #-256	; 0xffffff00
    1ea8:	00042d4b 	andeq	r2, r4, fp, asr #26
    1eac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1eb0:	001a2110 	andseq	r2, sl, r0, lsl r1
    1eb4:	042c0100 	strteq	r0, [ip], #-256	; 0xffffff00
    1eb8:	00007c3f 	andeq	r7, r0, pc, lsr ip
    1ebc:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ec0:	11c80f00 	bicne	r0, r8, r0, lsl #30
    1ec4:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1ec8:	00961104 	addseq	r1, r6, r4, lsl #2
    1ecc:	00000000 	andeq	r0, r0, r0
    1ed0:	006c0000 	rsbeq	r0, ip, r0
    1ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ed8:	00000717 	andeq	r0, r0, r7, lsl r7
    1edc:	000b7110 	andeq	r7, fp, r0, lsl r1
    1ee0:	04190100 	ldreq	r0, [r9], #-256	; 0xffffff00
    1ee4:	00042d40 	andeq	r2, r4, r0, asr #26
    1ee8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1eec:	0027df10 	eoreq	sp, r7, r0, lsl pc
    1ef0:	041a0100 	ldreq	r0, [sl], #-256	; 0xffffff00
    1ef4:	00043336 	andeq	r3, r4, r6, lsr r3
    1ef8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1efc:	12d80f00 	sbcsne	r0, r8, #0, 30
    1f00:	06010000 	streq	r0, [r1], -r0
    1f04:	00961104 	addseq	r1, r6, r4, lsl #2
    1f08:	00000000 	andeq	r0, r0, r0
    1f0c:	00780000 	rsbseq	r0, r8, r0
    1f10:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f14:	00000743 	andeq	r0, r0, r3, asr #14
    1f18:	000b7110 	andeq	r7, fp, r0, lsl r1
    1f1c:	04060100 	streq	r0, [r6], #-256	; 0xffffff00
    1f20:	00042d43 	andeq	r2, r4, r3, asr #26
    1f24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f28:	15230f00 	strne	r0, [r3, #-3840]!	; 0xfffff100
    1f2c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    1f30:	00961103 	addseq	r1, r6, r3, lsl #2
    1f34:	00000000 	andeq	r0, r0, r0
    1f38:	00780000 	rsbseq	r0, r8, r0
    1f3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f40:	0000076f 	andeq	r0, r0, pc, ror #14
    1f44:	000b7110 	andeq	r7, fp, r0, lsl r1
    1f48:	03f40100 	mvnseq	r0, #0, 2
    1f4c:	00042d42 	andeq	r2, r4, r2, asr #26
    1f50:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f54:	19140f00 	ldmdbne	r4, {r8, r9, sl, fp}
    1f58:	a1010000 	mrsge	r0, (UNDEF: 1)
    1f5c:	00961103 	addseq	r1, r6, r3, lsl #2
    1f60:	1b800000 	blne	fe001f68 <__shm_end__+0xbe001f68>
    1f64:	01540100 	cmpeq	r4, r0, lsl #2
    1f68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f6c:	000007db 	ldrdeq	r0, [r0], -fp
    1f70:	000b7110 	andeq	r7, fp, r0, lsl r1
    1f74:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    1f78:	00042d40 	andeq	r2, r4, r0, asr #26
    1f7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1f80:	001b1610 	andseq	r1, fp, r0, lsl r6
    1f84:	03a20100 			; <UNDEFINED> instruction: 0x03a20100
    1f88:	00038440 	andeq	r8, r3, r0, asr #8
    1f8c:	6b910200 	blvs	fe442794 <__shm_end__+0xbe442794>
    1f90:	00167710 	andseq	r7, r6, r0, lsl r7
    1f94:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    1f98:	0003e43e 	andeq	lr, r3, lr, lsr r4
    1f9c:	6a910200 	bvs	fe4427a4 <__shm_end__+0xbe4427a4>
    1fa0:	001a8710 	andseq	r8, sl, r0, lsl r7
    1fa4:	03a40100 			; <UNDEFINED> instruction: 0x03a40100
    1fa8:	0003b140 	andeq	fp, r3, r0, asr #2
    1fac:	69910200 	ldmibvs	r1, {r9}
    1fb0:	72636c14 	rsbvc	r6, r3, #20, 24	; 0x1400
    1fb4:	03a70100 			; <UNDEFINED> instruction: 0x03a70100
    1fb8:	00007c0e 	andeq	r7, r0, lr, lsl #24
    1fbc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fc0:	12120f00 	andsne	r0, r2, #0, 30
    1fc4:	8f010000 	svchi	0x00010000
    1fc8:	00961103 	addseq	r1, r6, r3, lsl #2
    1fcc:	00000000 	andeq	r0, r0, r0
    1fd0:	007c0000 	rsbseq	r0, ip, r0
    1fd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fd8:	00000817 	andeq	r0, r0, r7, lsl r8
    1fdc:	000b7110 	andeq	r7, fp, r0, lsl r1
    1fe0:	038f0100 	orreq	r0, pc, #0, 2
    1fe4:	00042d3f 	andeq	r2, r4, pc, lsr sp
    1fe8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fec:	0027df10 	eoreq	sp, r7, r0, lsl pc
    1ff0:	03900100 	orrseq	r0, r0, #0, 2
    1ff4:	00081743 	andeq	r1, r8, r3, asr #14
    1ff8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ffc:	4b041100 	blmi	106404 <__core1_unwind_stub-0xef9bfc>
    2000:	12000003 	andne	r0, r0, #3
    2004:	000018fa 	strdeq	r1, [r0], -sl
    2008:	11038201 	tstne	r3, r1, lsl #4
    200c:	00000096 	muleq	r0, r6, r0
    2010:	01001b54 	tsteq	r0, r4, asr fp
    2014:	0000002c 	andeq	r0, r0, ip, lsr #32
    2018:	08499c01 	stmdaeq	r9, {r0, sl, fp, ip, pc}^
    201c:	71100000 	tstvc	r0, r0
    2020:	0100000b 	tsteq	r0, fp
    2024:	2d400382 	stclcs	3, cr0, [r0, #-520]	; 0xfffffdf8
    2028:	02000004 	andeq	r0, r0, #4
    202c:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2030:	0000174d 	andeq	r1, r0, sp, asr #14
    2034:	11037c01 	tstne	r3, r1, lsl #24
    2038:	00000096 	muleq	r0, r6, r0
    203c:	00000000 	andeq	r0, r0, r0
    2040:	0000002c 	andeq	r0, r0, ip, lsr #32
    2044:	08759c01 	ldmdaeq	r5!, {r0, sl, fp, ip, pc}^
    2048:	71100000 	tstvc	r0, r0
    204c:	0100000b 	tsteq	r0, fp
    2050:	2d42037c 	stclcs	3, cr0, [r2, #-496]	; 0xfffffe10
    2054:	02000004 	andeq	r0, r0, #4
    2058:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    205c:	00001819 	andeq	r1, r0, r9, lsl r8
    2060:	11037601 	tstne	r3, r1, lsl #12
    2064:	00000096 	muleq	r0, r6, r0
    2068:	00000000 	andeq	r0, r0, r0
    206c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2070:	08a19c01 	stmiaeq	r1!, {r0, sl, fp, ip, pc}
    2074:	71100000 	tstvc	r0, r0
    2078:	0100000b 	tsteq	r0, fp
    207c:	2d410376 	stclcs	3, cr0, [r1, #-472]	; 0xfffffe28
    2080:	02000004 	andeq	r0, r0, #4
    2084:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2088:	00001645 	andeq	r1, r0, r5, asr #12
    208c:	11037001 	tstne	r3, r1
    2090:	00000096 	muleq	r0, r6, r0
    2094:	00000000 	andeq	r0, r0, r0
    2098:	0000002c 	andeq	r0, r0, ip, lsr #32
    209c:	08cd9c01 	stmiaeq	sp, {r0, sl, fp, ip, pc}^
    20a0:	71100000 	tstvc	r0, r0
    20a4:	0100000b 	tsteq	r0, fp
    20a8:	2d410370 	stclcs	3, cr0, [r1, #-448]	; 0xfffffe40
    20ac:	02000004 	andeq	r0, r0, #4
    20b0:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    20b4:	000019a4 	andeq	r1, r0, r4, lsr #19
    20b8:	11036a01 	tstne	r3, r1, lsl #20
    20bc:	00000096 	muleq	r0, r6, r0
    20c0:	00000000 	andeq	r0, r0, r0
    20c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    20c8:	08f99c01 	ldmeq	r9!, {r0, sl, fp, ip, pc}^
    20cc:	71100000 	tstvc	r0, r0
    20d0:	0100000b 	tsteq	r0, fp
    20d4:	2d40036a 	stclcs	3, cr0, [r0, #-424]	; 0xfffffe58
    20d8:	02000004 	andeq	r0, r0, #4
    20dc:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    20e0:	0000109b 	muleq	r0, fp, r0
    20e4:	11036401 	tstne	r3, r1, lsl #8
    20e8:	00000096 	muleq	r0, r6, r0
    20ec:	00000000 	andeq	r0, r0, r0
    20f0:	0000002c 	andeq	r0, r0, ip, lsr #32
    20f4:	09259c01 	stmdbeq	r5!, {r0, sl, fp, ip, pc}
    20f8:	71100000 	tstvc	r0, r0
    20fc:	0100000b 	tsteq	r0, fp
    2100:	2d3f0364 	ldccs	3, cr0, [pc, #-400]!	; 1f78 <__core1_unwind_stub-0xffe088>
    2104:	02000004 	andeq	r0, r0, #4
    2108:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    210c:	000012b1 			; <UNDEFINED> instruction: 0x000012b1
    2110:	11035e01 	tstne	r3, r1, lsl #28
    2114:	00000096 	muleq	r0, r6, r0
    2118:	00000000 	andeq	r0, r0, r0
    211c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2120:	09519c01 	ldmdbeq	r1, {r0, sl, fp, ip, pc}^
    2124:	71100000 	tstvc	r0, r0
    2128:	0100000b 	tsteq	r0, fp
    212c:	2d3e035e 	ldccs	3, cr0, [lr, #-376]!	; 0xfffffe88
    2130:	02000004 	andeq	r0, r0, #4
    2134:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2138:	00001c3d 	andeq	r1, r0, sp, lsr ip
    213c:	11035801 	tstne	r3, r1, lsl #16
    2140:	00000096 	muleq	r0, r6, r0
    2144:	00000000 	andeq	r0, r0, r0
    2148:	0000002c 	andeq	r0, r0, ip, lsr #32
    214c:	097d9c01 	ldmdbeq	sp!, {r0, sl, fp, ip, pc}^
    2150:	71100000 	tstvc	r0, r0
    2154:	0100000b 	tsteq	r0, fp
    2158:	2d3f0358 	ldccs	3, cr0, [pc, #-352]!	; 2000 <__core1_unwind_stub-0xffe000>
    215c:	02000004 	andeq	r0, r0, #4
    2160:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2164:	00001c05 	andeq	r1, r0, r5, lsl #24
    2168:	11035201 	tstne	r3, r1, lsl #4
    216c:	00000096 	muleq	r0, r6, r0
    2170:	00000000 	andeq	r0, r0, r0
    2174:	0000002c 	andeq	r0, r0, ip, lsr #32
    2178:	09a99c01 	stmibeq	r9!, {r0, sl, fp, ip, pc}
    217c:	71100000 	tstvc	r0, r0
    2180:	0100000b 	tsteq	r0, fp
    2184:	2d3e0352 	ldccs	3, cr0, [lr, #-328]!	; 0xfffffeb8
    2188:	02000004 	andeq	r0, r0, #4
    218c:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    2190:	0000135f 	andeq	r1, r0, pc, asr r3
    2194:	18034101 	stmdane	r3, {r0, r8, lr}
    2198:	00000096 	muleq	r0, r6, r0
    219c:	01001ad0 	ldrdeq	r1, [r0, -r0]
    21a0:	00000084 	andeq	r0, r0, r4, lsl #1
    21a4:	09e59c01 	stmibeq	r5!, {r0, sl, fp, ip, pc}^
    21a8:	71100000 	tstvc	r0, r0
    21ac:	0100000b 	tsteq	r0, fp
    21b0:	2d4b0341 	stclcs	3, cr0, [fp, #-260]	; 0xfffffefc
    21b4:	02000004 	andeq	r0, r0, #4
    21b8:	21107491 			; <UNDEFINED> instruction: 0x21107491
    21bc:	0100001a 	tsteq	r0, sl, lsl r0
    21c0:	7c5c0341 	mrrcvc	3, 4, r0, ip, cr1
    21c4:	02000000 	andeq	r0, r0, #0
    21c8:	15007091 	strne	r7, [r0, #-145]	; 0xffffff6f
    21cc:	0000127e 	andeq	r1, r0, lr, ror r2
    21d0:	18033001 	stmdane	r3, {r0, ip, sp}
    21d4:	00000096 	muleq	r0, r6, r0
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	00000080 	andeq	r0, r0, r0, lsl #1
    21e0:	0a219c01 	beq	8691ec <__core1_unwind_stub-0x796e14>
    21e4:	71100000 	tstvc	r0, r0
    21e8:	0100000b 	tsteq	r0, fp
    21ec:	2d4b0330 	stclcs	3, cr0, [fp, #-192]	; 0xffffff40
    21f0:	02000004 	andeq	r0, r0, #4
    21f4:	21107491 			; <UNDEFINED> instruction: 0x21107491
    21f8:	0100001a 	tsteq	r0, sl, lsl r0
    21fc:	7c5c0330 	mrrcvc	3, 3, r0, ip, cr0
    2200:	02000000 	andeq	r0, r0, #0
    2204:	0f007091 	svceq	0x00007091
    2208:	00001ac2 	andeq	r1, r0, r2, asr #21
    220c:	11031d01 	tstne	r3, r1, lsl #26
    2210:	00000096 	muleq	r0, r6, r0
    2214:	01001a58 	tsteq	r0, r8, asr sl
    2218:	00000078 	andeq	r0, r0, r8, ror r0
    221c:	0a5d9c01 	beq	1769228 <__bss_end__+0x74d228>
    2220:	71100000 	tstvc	r0, r0
    2224:	0100000b 	tsteq	r0, fp
    2228:	2d3c031d 	ldccs	3, cr0, [ip, #-116]!	; 0xffffff8c
    222c:	02000004 	andeq	r0, r0, #4
    2230:	29107491 	ldmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    2234:	01000017 	tsteq	r0, r7, lsl r0
    2238:	7c30031e 	ldcvc	3, cr0, [r0], #-120	; 0xffffff88
    223c:	02000000 	andeq	r0, r0, #0
    2240:	0f007091 	svceq	0x00007091
    2244:	00000ff7 	strdeq	r0, [r0], -r7
    2248:	11031401 	tstne	r3, r1, lsl #8
    224c:	00000096 	muleq	r0, r6, r0
    2250:	00000000 	andeq	r0, r0, r0
    2254:	0000003c 	andeq	r0, r0, ip, lsr r0
    2258:	0a999c01 	beq	fe669264 <__shm_end__+0xbe669264>
    225c:	71100000 	tstvc	r0, r0
    2260:	0100000b 	tsteq	r0, fp
    2264:	2d3c0314 	ldccs	3, cr0, [ip, #-80]!	; 0xffffffb0
    2268:	02000004 	andeq	r0, r0, #4
    226c:	29107491 	ldmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    2270:	01000017 	tsteq	r0, r7, lsl r0
    2274:	33320315 	teqcc	r2, #1409286144	; 0x54000000
    2278:	02000004 	andeq	r0, r0, #4
    227c:	12007091 	andne	r7, r0, #145	; 0x91
    2280:	00001a29 	andeq	r1, r0, r9, lsr #20
    2284:	1102fe01 	tstne	r2, r1, lsl #28	; <UNPREDICTABLE>
    2288:	00000096 	muleq	r0, r6, r0
    228c:	010019e4 	smlatteq	r0, r4, r9, r1
    2290:	00000074 	andeq	r0, r0, r4, ror r0
    2294:	0ae59c01 	beq	ff9692a0 <__shm_end__+0xbf9692a0>
    2298:	71100000 	tstvc	r0, r0
    229c:	0100000b 	tsteq	r0, fp
    22a0:	2d3d02fe 	lfmcs	f0, 4, [sp, #-1016]!	; 0xfffffc08
    22a4:	02000004 	andeq	r0, r0, #4
    22a8:	ee106c91 	mrc	12, 0, r6, cr0, cr1, {4}
    22ac:	0100000f 	tsteq	r0, pc
    22b0:	7c3102ff 	lfmvc	f0, 4, [r1], #-1020	; 0xfffffc04
    22b4:	02000000 	andeq	r0, r0, #0
    22b8:	29166891 	ldmdbcs	r6, {r0, r4, r7, fp, sp, lr}
    22bc:	01000017 	tsteq	r0, r7, lsl r0
    22c0:	7c0e0301 	stcvc	3, cr0, [lr], {1}
    22c4:	02000000 	andeq	r0, r0, #0
    22c8:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    22cc:	00000fd7 	ldrdeq	r0, [r0], -r7
    22d0:	1102eb01 	tstne	r2, r1, lsl #22
    22d4:	00000096 	muleq	r0, r6, r0
    22d8:	00000000 	andeq	r0, r0, r0
    22dc:	0000005c 	andeq	r0, r0, ip, asr r0
    22e0:	0b319c01 	bleq	c692ec <__core1_unwind_stub-0x396d14>
    22e4:	71100000 	tstvc	r0, r0
    22e8:	0100000b 	tsteq	r0, fp
    22ec:	2d3d02eb 	lfmcs	f0, 4, [sp, #-940]!	; 0xfffffc54
    22f0:	02000004 	andeq	r0, r0, #4
    22f4:	ee106c91 	mrc	12, 0, r6, cr0, cr1, {4}
    22f8:	0100000f 	tsteq	r0, pc
    22fc:	333302ec 	teqcc	r3, #236, 4	; 0xc000000e
    2300:	02000004 	andeq	r0, r0, #4
    2304:	29166891 	ldmdbcs	r6, {r0, r4, r7, fp, sp, lr}
    2308:	01000017 	tsteq	r0, r7, lsl r0
    230c:	7c0e02ef 	sfmvc	f0, 4, [lr], {239}	; 0xef
    2310:	02000000 	andeq	r0, r0, #0
    2314:	0f007491 	svceq	0x00007491
    2318:	000017ca 	andeq	r1, r0, sl, asr #15
    231c:	1102c501 	tstne	r2, r1, lsl #10
    2320:	00000096 	muleq	r0, r6, r0
    2324:	00000000 	andeq	r0, r0, r0
    2328:	000000dc 	ldrdeq	r0, [r0], -ip
    232c:	0b6d9c01 	bleq	1b69338 <__bss_end__+0xb4d338>
    2330:	71100000 	tstvc	r0, r0
    2334:	0100000b 	tsteq	r0, fp
    2338:	2d4402c5 	sfmcs	f0, 2, [r4, #-788]	; 0xfffffcec
    233c:	02000004 	andeq	r0, r0, #4
    2340:	93107491 	tstls	r0, #-1862270976	; 0x91000000
    2344:	01000010 	tsteq	r0, r0, lsl r0
    2348:	6e4b02c6 	cdpvs	2, 4, cr0, cr11, cr6, {6}
    234c:	02000002 	andeq	r0, r0, #2
    2350:	0f007391 	svceq	0x00007391
    2354:	0000170b 	andeq	r1, r0, fp, lsl #14
    2358:	11029f01 	tstne	r2, r1, lsl #30
    235c:	00000096 	muleq	r0, r6, r0
    2360:	00000000 	andeq	r0, r0, r0
    2364:	000000dc 	ldrdeq	r0, [r0], -ip
    2368:	0ba99c01 	bleq	fea69374 <__shm_end__+0xbea69374>
    236c:	71100000 	tstvc	r0, r0
    2370:	0100000b 	tsteq	r0, fp
    2374:	2d44029f 	sfmcs	f0, 2, [r4, #-636]	; 0xfffffd84
    2378:	02000004 	andeq	r0, r0, #4
    237c:	93107491 	tstls	r0, #-1862270976	; 0x91000000
    2380:	01000010 	tsteq	r0, r0, lsl r0
    2384:	354b02a0 	strbcc	r0, [fp, #-672]	; 0xfffffd60
    2388:	02000002 	andeq	r0, r0, #2
    238c:	0f007391 	svceq	0x00007391
    2390:	000014af 	andeq	r1, r0, pc, lsr #9
    2394:	11028401 	tstne	r2, r1, lsl #8
    2398:	00000096 	muleq	r0, r6, r0
    239c:	00000000 	andeq	r0, r0, r0
    23a0:	0000009c 	muleq	r0, ip, r0
    23a4:	0be59c01 	bleq	ff9693b0 <__shm_end__+0xbf9693b0>
    23a8:	71100000 	tstvc	r0, r0
    23ac:	0100000b 	tsteq	r0, fp
    23b0:	2d420284 	sfmcs	f0, 2, [r2, #-528]	; 0xfffffdf0
    23b4:	02000004 	andeq	r0, r0, #4
    23b8:	12107491 	andsne	r7, r0, #-1862270976	; 0x91000000
    23bc:	01000015 	tsteq	r0, r5, lsl r0
    23c0:	33380285 	teqcc	r8, #1342177288	; 0x50000008
    23c4:	02000004 	andeq	r0, r0, #4
    23c8:	0f007091 	svceq	0x00007091
    23cc:	0000110d 	andeq	r1, r0, sp, lsl #2
    23d0:	11026901 	tstne	r2, r1, lsl #18
    23d4:	00000096 	muleq	r0, r6, r0
    23d8:	00000000 	andeq	r0, r0, r0
    23dc:	0000009c 	muleq	r0, ip, r0
    23e0:	0c219c01 	stceq	12, cr9, [r1], #-4
    23e4:	71100000 	tstvc	r0, r0
    23e8:	0100000b 	tsteq	r0, fp
    23ec:	2d420269 	sfmcs	f0, 2, [r2, #-420]	; 0xfffffe5c
    23f0:	02000004 	andeq	r0, r0, #4
    23f4:	12107491 	andsne	r7, r0, #-1862270976	; 0x91000000
    23f8:	01000015 	tsteq	r0, r5, lsl r0
    23fc:	3338026a 	teqcc	r8, #-1610612730	; 0xa0000006
    2400:	02000004 	andeq	r0, r0, #4
    2404:	0f007091 	svceq	0x00007091
    2408:	000012f5 	strdeq	r1, [r0], -r5
    240c:	11025101 	tstne	r2, r1, lsl #2
    2410:	00000096 	muleq	r0, r6, r0
    2414:	00000000 	andeq	r0, r0, r0
    2418:	000000a8 	andeq	r0, r0, r8, lsr #1
    241c:	0c5d9c01 	mrrceq	12, 0, r9, sp, cr1
    2420:	71100000 	tstvc	r0, r0
    2424:	0100000b 	tsteq	r0, fp
    2428:	2d410251 	sfmcs	f0, 2, [r1, #-324]	; 0xfffffebc
    242c:	02000004 	andeq	r0, r0, #4
    2430:	fc107491 	ldc2	4, cr7, [r0], {145}	; 0x91
    2434:	01000002 	tsteq	r0, r2
    2438:	33370252 	teqcc	r7, #536870917	; 0x20000005
    243c:	02000004 	andeq	r0, r0, #4
    2440:	0f007091 	svceq	0x00007091
    2444:	0000117f 	andeq	r1, r0, pc, ror r1
    2448:	11023a01 	tstne	r2, r1, lsl #20
    244c:	00000096 	muleq	r0, r6, r0
    2450:	00000000 	andeq	r0, r0, r0
    2454:	000000a8 	andeq	r0, r0, r8, lsr #1
    2458:	0c999c01 	ldceq	12, cr9, [r9], {1}
    245c:	71100000 	tstvc	r0, r0
    2460:	0100000b 	tsteq	r0, fp
    2464:	2d41023a 	sfmcs	f0, 2, [r1, #-232]	; 0xffffff18
    2468:	02000004 	andeq	r0, r0, #4
    246c:	fc107491 	ldc2	4, cr7, [r0], {145}	; 0x91
    2470:	01000002 	tsteq	r0, r2
    2474:	3337023b 	teqcc	r7, #-1342177277	; 0xb0000003
    2478:	02000004 	andeq	r0, r0, #4
    247c:	0f007091 	svceq	0x00007091
    2480:	000017e8 	andeq	r1, r0, r8, ror #15
    2484:	11021c01 	tstne	r2, r1, lsl #24
    2488:	00000096 	muleq	r0, r6, r0
    248c:	00000000 	andeq	r0, r0, r0
    2490:	000000a8 	andeq	r0, r0, r8, lsr #1
    2494:	0cc59c01 	stcleq	12, cr9, [r5], {1}
    2498:	71100000 	tstvc	r0, r0
    249c:	0100000b 	tsteq	r0, fp
    24a0:	2d3f021c 	lfmcs	f0, 4, [pc, #-112]!	; 2438 <__core1_unwind_stub-0xffdbc8>
    24a4:	02000004 	andeq	r0, r0, #4
    24a8:	0f007491 	svceq	0x00007491
    24ac:	00001014 	andeq	r1, r0, r4, lsl r0
    24b0:	11020201 	tstne	r2, r1, lsl #4
    24b4:	00000096 	muleq	r0, r6, r0
    24b8:	00000000 	andeq	r0, r0, r0
    24bc:	000000a8 	andeq	r0, r0, r8, lsr #1
    24c0:	0cf19c01 	ldcleq	12, cr9, [r1], #4
    24c4:	71100000 	tstvc	r0, r0
    24c8:	0100000b 	tsteq	r0, fp
    24cc:	2d3e0202 	lfmcs	f0, 4, [lr, #-8]!
    24d0:	02000004 	andeq	r0, r0, #4
    24d4:	0f007491 	svceq	0x00007491
    24d8:	0000156f 	andeq	r1, r0, pc, ror #10
    24dc:	1101e801 	tstne	r1, r1, lsl #16
    24e0:	00000096 	muleq	r0, r6, r0
    24e4:	00000000 	andeq	r0, r0, r0
    24e8:	000000a8 	andeq	r0, r0, r8, lsr #1
    24ec:	0d1d9c01 	ldceq	12, cr9, [sp, #-4]
    24f0:	71100000 	tstvc	r0, r0
    24f4:	0100000b 	tsteq	r0, fp
    24f8:	2d3e01e8 	ldfcss	f0, [lr, #-928]!	; 0xfffffc60
    24fc:	02000004 	andeq	r0, r0, #4
    2500:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    2504:	00001876 	andeq	r1, r0, r6, ror r8
    2508:	1101e101 	tstne	r1, r1, lsl #2
    250c:	00000096 	muleq	r0, r6, r0
    2510:	00000000 	andeq	r0, r0, r0
    2514:	0000003c 	andeq	r0, r0, ip, lsr r0
    2518:	0d699c01 	stcleq	12, cr9, [r9, #-4]!
    251c:	71100000 	tstvc	r0, r0
    2520:	0100000b 	tsteq	r0, fp
    2524:	2d3b01e1 	ldfcss	f0, [fp, #-900]!	; 0xfffffc7c
    2528:	02000004 	andeq	r0, r0, #4
    252c:	83107491 	tsthi	r0, #-1862270976	; 0x91000000
    2530:	01000019 	tsteq	r0, r9, lsl r0
    2534:	693301e2 	ldmdbvs	r3!, {r1, r5, r6, r7, r8}
    2538:	0200000d 	andeq	r0, r0, #13
    253c:	71107091 			; <UNDEFINED> instruction: 0x71107091
    2540:	0100000a 	tsteq	r0, sl
    2544:	2c2d01e3 	stfcss	f0, [sp], #-908	; 0xfffffc74
    2548:	02000000 	andeq	r0, r0, #0
    254c:	11006c91 			; <UNDEFINED> instruction: 0x11006c91
    2550:	000d7604 	andeq	r7, sp, r4, lsl #12
    2554:	08010400 	stmdaeq	r1, {sl}
    2558:	0000040f 	andeq	r0, r0, pc, lsl #8
    255c:	000d6f17 	andeq	r6, sp, r7, lsl pc
    2560:	10f30f00 	rscsne	r0, r3, r0, lsl #30
    2564:	ba010000 	blt	4256c <__core1_unwind_stub-0xfbda94>
    2568:	00961101 	addseq	r1, r6, r1, lsl #2
    256c:	18e00000 	stmiane	r0!, {}^	; <UNPREDICTABLE>
    2570:	01040100 	mrseq	r0, (UNDEF: 20)
    2574:	9c010000 	stcls	0, cr0, [r1], {-0}
    2578:	00000de5 	andeq	r0, r0, r5, ror #27
    257c:	000b7110 	andeq	r7, fp, r0, lsl r1
    2580:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    2584:	00042d40 	andeq	r2, r4, r0, asr #26
    2588:	6c910200 	lfmvs	f0, 4, [r1], {0}
    258c:	00198310 	andseq	r8, r9, r0, lsl r3
    2590:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
    2594:	000d6933 	andeq	r6, sp, r3, lsr r9
    2598:	68910200 	ldmvs	r1, {r9}
    259c:	000a7110 	andeq	r7, sl, r0, lsl r1
    25a0:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    25a4:	00002c2d 	andeq	r2, r0, sp, lsr #24
    25a8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    25ac:	00110810 	andseq	r0, r1, r0, lsl r8
    25b0:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
    25b4:	000de52b 	andeq	lr, sp, fp, lsr #10
    25b8:	63910200 	orrsvs	r0, r1, #0, 4
    25bc:	01006914 	tsteq	r0, r4, lsl r9
    25c0:	2c0c01bf 	stfcss	f0, [ip], {191}	; 0xbf
    25c4:	02000000 	andeq	r0, r0, #0
    25c8:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
    25cc:	18340201 	ldmdane	r4!, {r0, r9}
    25d0:	7f0f0000 	svcvc	0x000f0000
    25d4:	01000010 	tsteq	r0, r0, lsl r0
    25d8:	96110197 			; <UNDEFINED> instruction: 0x96110197
    25dc:	00000000 	andeq	r0, r0, r0
    25e0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    25e4:	01000000 	mrseq	r0, (UNDEF: 0)
    25e8:	000e469c 	muleq	lr, ip, r6
    25ec:	0b711000 	bleq	1c465f4 <__bss_end__+0xc2a5f4>
    25f0:	97010000 	strls	r0, [r1, -r0]
    25f4:	042d3a01 	strteq	r3, [sp], #-2561	; 0xfffff5ff
    25f8:	91020000 	mrsls	r0, (UNDEF: 2)
    25fc:	1983106c 	stmibne	r3, {r2, r3, r5, r6, ip}
    2600:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2604:	0e462c01 	cdpeq	12, 4, cr2, cr6, cr1, {0}
    2608:	91020000 	mrsls	r0, (UNDEF: 2)
    260c:	0a711068 	beq	1c467b4 <__bss_end__+0xc2a7b4>
    2610:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2614:	002c2c01 	eoreq	r2, ip, r1, lsl #24
    2618:	91020000 	mrsls	r0, (UNDEF: 2)
    261c:	00691464 	rsbeq	r1, r9, r4, ror #8
    2620:	0c019b01 			; <UNDEFINED> instruction: 0x0c019b01
    2624:	0000002c 	andeq	r0, r0, ip, lsr #32
    2628:	00749102 	rsbseq	r9, r4, r2, lsl #2
    262c:	0d6f0411 	cfstrdeq	mvd0, [pc, #-68]!	; 25f0 <__core1_unwind_stub-0xffda10>
    2630:	810f0000 	mrshi	r0, CPSR
    2634:	01000017 	tsteq	r0, r7, lsl r0
    2638:	96110185 	ldrls	r0, [r1], -r5, lsl #3
    263c:	60000000 	andvs	r0, r0, r0
    2640:	80010018 	andhi	r0, r1, r8, lsl r0
    2644:	01000000 	mrseq	r0, (UNDEF: 0)
    2648:	000e789c 	muleq	lr, ip, r8
    264c:	0b711000 	bleq	1c46654 <__bss_end__+0xc2a654>
    2650:	85010000 	strhi	r0, [r1, #-0]
    2654:	042d3d01 	strteq	r3, [sp], #-3329	; 0xfffff2ff
    2658:	91020000 	mrsls	r0, (UNDEF: 2)
    265c:	e70f0074 	smlsdx	pc, r4, r0, r0	; <UNPREDICTABLE>
    2660:	01000014 	tsteq	r0, r4, lsl r0
    2664:	96110171 			; <UNDEFINED> instruction: 0x96110171
    2668:	e0000000 	and	r0, r0, r0
    266c:	80010017 	andhi	r0, r1, r7, lsl r0
    2670:	01000000 	mrseq	r0, (UNDEF: 0)
    2674:	000ea49c 	muleq	lr, ip, r4
    2678:	0b711000 	bleq	1c46680 <__bss_end__+0xc2a680>
    267c:	71010000 	mrsvc	r0, (UNDEF: 1)
    2680:	042d3c01 	strteq	r3, [sp], #-3073	; 0xfffff3ff
    2684:	91020000 	mrsls	r0, (UNDEF: 2)
    2688:	9a0f0074 	bls	3c2860 <__core1_unwind_stub-0xc3d7a0>
    268c:	01000011 	tsteq	r0, r1, lsl r0
    2690:	96110153 			; <UNDEFINED> instruction: 0x96110153
    2694:	00000000 	andeq	r0, r0, r0
    2698:	a0000000 	andge	r0, r0, r0
    269c:	01000000 	mrseq	r0, (UNDEF: 0)
    26a0:	000ee09c 	muleq	lr, ip, r0
    26a4:	0b711000 	bleq	1c466ac <__bss_end__+0xc2a6ac>
    26a8:	53010000 	movwpl	r0, #4096	; 0x1000
    26ac:	042d3601 	strteq	r3, [sp], #-1537	; 0xfffff9ff
    26b0:	91020000 	mrsls	r0, (UNDEF: 2)
    26b4:	15d01074 	ldrbne	r1, [r0, #116]	; 0x74
    26b8:	54010000 	strpl	r0, [r1], #-0
    26bc:	0d6f2601 	stcleq	6, cr2, [pc, #-4]!	; 26c0 <__core1_unwind_stub-0xffd940>
    26c0:	91020000 	mrsls	r0, (UNDEF: 2)
    26c4:	560f0073 			; <UNDEFINED> instruction: 0x560f0073
    26c8:	0100001c 	tsteq	r0, ip, lsl r0
    26cc:	96110136 			; <UNDEFINED> instruction: 0x96110136
    26d0:	00000000 	andeq	r0, r0, r0
    26d4:	a4000000 	strge	r0, [r0], #-0
    26d8:	01000000 	mrseq	r0, (UNDEF: 0)
    26dc:	000f1c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    26e0:	0b711000 	bleq	1c466e8 <__bss_end__+0xc2a6e8>
    26e4:	36010000 	strcc	r0, [r1], -r0
    26e8:	042d3501 	strteq	r3, [sp], #-1281	; 0xfffffaff
    26ec:	91020000 	mrsls	r0, (UNDEF: 2)
    26f0:	15d01074 	ldrbne	r1, [r0, #116]	; 0x74
    26f4:	37010000 	strcc	r0, [r1, -r0]
    26f8:	0e462701 	cdpeq	7, 4, cr2, cr6, cr1, {0}
    26fc:	91020000 	mrsls	r0, (UNDEF: 2)
    2700:	f1120070 			; <UNDEFINED> instruction: 0xf1120070
    2704:	0100001a 	tsteq	r0, sl, lsl r0
    2708:	9611012f 	ldrls	r0, [r1], -pc, lsr #2
    270c:	00000000 	andeq	r0, r0, r0
    2710:	2c000000 	stccs	0, cr0, [r0], {-0}
    2714:	01000000 	mrseq	r0, (UNDEF: 0)
    2718:	000f489c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
    271c:	0b711000 	bleq	1c46724 <__bss_end__+0xc2a724>
    2720:	2f010000 	svccs	0x00010000
    2724:	042d3801 	strteq	r3, [sp], #-2049	; 0xfffff7ff
    2728:	91020000 	mrsls	r0, (UNDEF: 2)
    272c:	be120074 	mrclt	0, 0, r0, cr2, cr4, {3}
    2730:	01000019 	tsteq	r0, r9, lsl r0
    2734:	96110122 	ldrls	r0, [r1], -r2, lsr #2
    2738:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    273c:	48010017 	stmdami	r1, {r0, r1, r2, r4}
    2740:	01000000 	mrseq	r0, (UNDEF: 0)
    2744:	000f749c 	muleq	pc, ip, r4	; <UNPREDICTABLE>
    2748:	0b711000 	bleq	1c46750 <__bss_end__+0xc2a750>
    274c:	22010000 	andcs	r0, r1, #0
    2750:	042d3701 	strteq	r3, [sp], #-1793	; 0xfffff8ff
    2754:	91020000 	mrsls	r0, (UNDEF: 2)
    2758:	3a120074 	bcc	482930 <__core1_unwind_stub-0xb7d6d0>
    275c:	01000018 	tsteq	r0, r8, lsl r0
    2760:	9611011d 			; <UNDEFINED> instruction: 0x9611011d
    2764:	00000000 	andeq	r0, r0, r0
    2768:	2c000000 	stccs	0, cr0, [r0], {-0}
    276c:	01000000 	mrseq	r0, (UNDEF: 0)
    2770:	000fa09c 	muleq	pc, ip, r0	; <UNPREDICTABLE>
    2774:	0b711000 	bleq	1c4677c <__bss_end__+0xc2a77c>
    2778:	1d010000 	stcne	0, cr0, [r1, #-0]
    277c:	042d3601 	strteq	r3, [sp], #-1537	; 0xfffff9ff
    2780:	91020000 	mrsls	r0, (UNDEF: 2)
    2784:	65120074 	ldrvs	r0, [r2, #-116]	; 0xffffff8c
    2788:	01000018 	tsteq	r0, r8, lsl r0
    278c:	96110105 	ldrls	r0, [r1], -r5, lsl #2
    2790:	00000000 	andeq	r0, r0, r0
    2794:	90000000 	andls	r0, r0, r0
    2798:	01000000 	mrseq	r0, (UNDEF: 0)
    279c:	000fcc9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    27a0:	0b711000 	bleq	1c467a8 <__bss_end__+0xc2a7a8>
    27a4:	05010000 	streq	r0, [r1, #-0]
    27a8:	042d3701 	strteq	r3, [sp], #-1793	; 0xfffff8ff
    27ac:	91020000 	mrsls	r0, (UNDEF: 2)
    27b0:	c9180074 	ldmdbgt	r8, {r2, r4, r5, r6}
    27b4:	01000012 	tsteq	r0, r2, lsl r0
    27b8:	009611bb 			; <UNDEFINED> instruction: 0x009611bb
    27bc:	163c0000 	ldrtne	r0, [ip], -r0
    27c0:	015c0100 	cmpeq	ip, r0, lsl #2
    27c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    27c8:	00001038 	andeq	r1, r0, r8, lsr r0
    27cc:	00072719 	andeq	r2, r7, r9, lsl r7
    27d0:	33bb0100 			; <UNDEFINED> instruction: 0x33bb0100
    27d4:	000001a1 	andeq	r0, r0, r1, lsr #3
    27d8:	196e9102 	stmdbne	lr!, {r1, r8, ip, pc}^
    27dc:	0000285f 	andeq	r2, r0, pc, asr r8
    27e0:	fc27bc01 	stc2	12, cr11, [r7], #-4
    27e4:	02000001 	andeq	r0, r0, #1
    27e8:	18196891 	ldmdane	r9, {r0, r4, r7, fp, sp, lr}
    27ec:	01000015 	tsteq	r0, r5, lsl r0
    27f0:	00a22bbd 	strhteq	r2, [r2], sp
    27f4:	91020000 	mrsls	r0, (UNDEF: 2)
    27f8:	0b711964 	bleq	1c48d90 <__bss_end__+0xc2cd90>
    27fc:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    2800:	00042d35 	andeq	r2, r4, r5, lsr sp
    2804:	60910200 	addsvs	r0, r1, r0, lsl #4
    2808:	0001481a 	andeq	r4, r1, sl, lsl r8
    280c:	27df1b00 	ldrbcs	r1, [pc, r0, lsl #22]
    2810:	cf010000 	svcgt	0x00010000
    2814:	0000961d 	andeq	r9, r0, sp, lsl r6
    2818:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    281c:	cf1c0000 	svcgt	0x001c0000
    2820:	01000019 	tsteq	r0, r9, lsl r0
    2824:	00961883 	addseq	r1, r6, r3, lsl #17
    2828:	14e40000 	strbtne	r0, [r4], #0
    282c:	01580100 	cmpeq	r8, r0, lsl #2
    2830:	9c010000 	stcls	0, cr0, [r1], {-0}
    2834:	00001099 	muleq	r0, r9, r0
    2838:	000b7119 	andeq	r7, fp, r9, lsl r1
    283c:	44830100 	strmi	r0, [r3], #256	; 0x100
    2840:	0000042d 	andeq	r0, r0, sp, lsr #8
    2844:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    2848:	0000167e 	andeq	r1, r0, lr, ror r6
    284c:	e5518301 	ldrb	r8, [r1, #-769]	; 0xfffffcff
    2850:	0200000d 	andeq	r0, r0, #13
    2854:	98136b91 	ldmdals	r3, {r0, r4, r7, r8, r9, fp, sp, lr}
    2858:	94010015 	strls	r0, [r1], #-21	; 0xffffffeb
    285c:	1b000000 	blne	2864 <__core1_unwind_stub-0xffd79c>
    2860:	000027df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    2864:	96199e01 	ldrls	r9, [r9], -r1, lsl #28
    2868:	02000000 	andeq	r0, r0, #0
    286c:	291b7491 	ldmdbcs	fp, {r0, r4, r7, sl, ip, sp, lr}
    2870:	01000017 	tsteq	r0, r7, lsl r0
    2874:	007c129f 			; <UNDEFINED> instruction: 0x007c129f
    2878:	91020000 	mrsls	r0, (UNDEF: 2)
    287c:	1d000070 	stcne	0, cr0, [r0, #-448]	; 0xfffffe40
    2880:	000016ec 	andeq	r1, r0, ip, ror #13
    2884:	96185201 	ldrls	r5, [r8], -r1, lsl #4
    2888:	c4000000 	strgt	r0, [r0], #-0
    288c:	20010013 	andcs	r0, r1, r3, lsl r0
    2890:	01000001 	tsteq	r0, r1
    2894:	0010d29c 	mulseq	r0, ip, r2
    2898:	0b711900 	bleq	1c48ca0 <__bss_end__+0xc2cca0>
    289c:	52010000 	andpl	r0, r1, #0
    28a0:	00042d4c 	andeq	r2, r4, ip, asr #26
    28a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28a8:	00172919 	andseq	r2, r7, r9, lsl r9
    28ac:	40530100 	subsmi	r0, r3, r0, lsl #2
    28b0:	0000007c 	andeq	r0, r0, ip, ror r0
    28b4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    28b8:	0011fd1d 	andseq	pc, r1, sp, lsl sp	; <UNPREDICTABLE>
    28bc:	1a4a0100 	bne	1282cc4 <__bss_end__+0x266cc4>
    28c0:	0000007c 	andeq	r0, r0, ip, ror r0
    28c4:	0100139c 			; <UNDEFINED> instruction: 0x0100139c
    28c8:	00000028 	andeq	r0, r0, r8, lsr #32
    28cc:	10fc9c01 	rscsne	r9, ip, r1, lsl #24
    28d0:	29190000 	ldmdbcs	r9, {}	; <UNPREDICTABLE>
    28d4:	01000011 	tsteq	r0, r1, lsl r0
    28d8:	10fc3c4a 	rscsne	r3, ip, sl, asr #24
    28dc:	91020000 	mrsls	r0, (UNDEF: 2)
    28e0:	04110074 	ldreq	r0, [r1], #-116	; 0xffffff8c
    28e4:	00001102 	andeq	r1, r0, r2, lsl #2
    28e8:	1cec001e 	stclne	0, cr0, [ip], #120	; 0x78
    28ec:	00040000 	andeq	r0, r4, r0
    28f0:	00000527 	andeq	r0, r0, r7, lsr #10
    28f4:	003a0104 	eorseq	r0, sl, r4, lsl #2
    28f8:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    28fc:	df00001d 	svcle	0x0000001d
    2900:	5800000b 	stmdapl	r0, {r0, r1, r3}
    2904:	00000003 	andeq	r0, r0, r3
    2908:	0d000000 	stceq	0, cr0, [r0, #-0]
    290c:	02000014 	andeq	r0, r0, #20
    2910:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2914:	0d030074 	stceq	0, cr0, [r3, #-464]	; 0xfffffe30
    2918:	03000010 	movweq	r0, #16
    291c:	003d17d1 	ldrsbteq	r1, [sp], -r1
    2920:	2c040000 	stccs	0, cr0, [r4], {-0}
    2924:	05000000 	streq	r0, [r0, #-0]
    2928:	0b4b0704 	bleq	12c4540 <__bss_end__+0x2a8540>
    292c:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    2930:	00080b05 	andeq	r0, r8, r5, lsl #22
    2934:	04080500 	streq	r0, [r8], #-1280	; 0xfffffb00
    2938:	00000aa3 	andeq	r0, r0, r3, lsr #21
    293c:	08060105 	stmdaeq	r6, {r0, r2, r8}
    2940:	05000004 	streq	r0, [r0, #-4]
    2944:	0d700502 	cfldr64eq	mvdx0, [r0, #-8]!
    2948:	61030000 	mrsvs	r0, (UNDEF: 3)
    294c:	0400000e 	streq	r0, [r0], #-14
    2950:	006c1828 	rsbeq	r1, ip, r8, lsr #16
    2954:	04050000 	streq	r0, [r5], #-0
    2958:	00081005 	andeq	r1, r8, r5
    295c:	08010500 	stmdaeq	r1, {r8, sl}
    2960:	00000406 	andeq	r0, r0, r6, lsl #8
    2964:	bd070205 	sfmlt	f0, 4, [r7, #-20]	; 0xffffffec
    2968:	0300000e 	movweq	r0, #14
    296c:	00000e60 	andeq	r0, r0, r0, ror #28
    2970:	92193404 	andsls	r3, r9, #4, 8	; 0x4000000
    2974:	04000000 	streq	r0, [r0], #-0
    2978:	00000081 	andeq	r0, r0, r1, lsl #1
    297c:	46070405 	strmi	r0, [r7], -r5, lsl #8
    2980:	0500000b 	streq	r0, [r0, #-11]
    2984:	0b410708 	bleq	10445ac <__bss_end__+0x285ac>
    2988:	53030000 	movwpl	r0, #12288	; 0x3000
    298c:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    2990:	003d1a56 	eorseq	r1, sp, r6, asr sl
    2994:	dc030000 	stcle	0, cr0, [r3], {-0}
    2998:	05000004 	streq	r0, [r0, #-4]
    299c:	00601d41 	rsbeq	r1, r0, r1, asr #26
    29a0:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    29a4:	0700001e 	smladeq	r0, lr, r0, r0
    29a8:	00007301 	andeq	r7, r0, r1, lsl #6
    29ac:	0e650600 	cdpeq	6, 6, cr0, cr5, cr0, {0}
    29b0:	000000d7 	ldrdeq	r0, [r0], -r7
    29b4:	0023b207 	eoreq	fp, r3, r7, lsl #4
    29b8:	21070000 	mrscs	r0, (UNDEF: 7)
    29bc:	0100001e 	tsteq	r0, lr, lsl r0
    29c0:	1e6b0300 	cdpne	3, 6, cr0, cr11, cr0, {0}
    29c4:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    29c8:	0000b803 	andeq	fp, r0, r3, lsl #16
    29cc:	241e0600 	ldrcs	r0, [lr], #-1536	; 0xfffffa00
    29d0:	01070000 	mrseq	r0, (UNDEF: 7)
    29d4:	00000073 	andeq	r0, r0, r3, ror r0
    29d8:	020e7306 	andeq	r7, lr, #402653184	; 0x18000000
    29dc:	07000001 	streq	r0, [r0, -r1]
    29e0:	00002244 	andeq	r2, r0, r4, asr #4
    29e4:	212c0700 			; <UNDEFINED> instruction: 0x212c0700
    29e8:	00010000 	andeq	r0, r1, r0
    29ec:	00245203 	eoreq	r5, r4, r3, lsl #4
    29f0:	03770600 	cmneq	r7, #0, 12
    29f4:	000000e3 	andeq	r0, r0, r3, ror #1
    29f8:	00225a06 	eoreq	r5, r2, r6, lsl #20
    29fc:	73010700 	movwvc	r0, #5888	; 0x1700
    2a00:	06000000 	streq	r0, [r0], -r0
    2a04:	012d0e7e 			; <UNDEFINED> instruction: 0x012d0e7e
    2a08:	04070000 	streq	r0, [r7], #-0
    2a0c:	00000023 	andeq	r0, r0, r3, lsr #32
    2a10:	0025c707 	eoreq	ip, r5, r7, lsl #14
    2a14:	03000100 	movweq	r0, #256	; 0x100
    2a18:	0000227c 	andeq	r2, r0, ip, ror r2
    2a1c:	0e038d06 	cdpeq	13, 0, cr8, cr3, cr6, {0}
    2a20:	06000001 	streq	r0, [r0], -r1
    2a24:	00001cde 	ldrdeq	r1, [r0], -lr
    2a28:	00730107 	rsbseq	r0, r3, r7, lsl #2
    2a2c:	93060000 	movwls	r0, #24576	; 0x6000
    2a30:	0001640e 	andeq	r6, r1, lr, lsl #8
    2a34:	235d0700 	cmpcs	sp, #0, 14
    2a38:	07000000 	streq	r0, [r0, -r0]
    2a3c:	00001d87 	andeq	r1, r0, r7, lsl #27
    2a40:	25ed0701 	strbcs	r0, [sp, #1793]!	; 0x701
    2a44:	07020000 	streq	r0, [r2, -r0]
    2a48:	0000209c 	muleq	r0, ip, r0
    2a4c:	00030003 	andeq	r0, r3, r3
    2a50:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
    2a54:	013903a1 	teqeq	r9, r1, lsr #7
    2a58:	64040000 	strvs	r0, [r4], #-0
    2a5c:	06000001 	streq	r0, [r0], -r1
    2a60:	0000247e 	andeq	r2, r0, lr, ror r4
    2a64:	00730107 	rsbseq	r0, r3, r7, lsl #2
    2a68:	bc060000 	stclt	0, cr0, [r6], {-0}
    2a6c:	0001ac06 	andeq	sl, r1, r6, lsl #24
    2a70:	22bc0700 	adcscs	r0, ip, #0, 14
    2a74:	07000000 	streq	r0, [r0, -r0]
    2a78:	00002068 	andeq	r2, r0, r8, rrx
    2a7c:	21f00701 	mvnscs	r0, r1, lsl #14
    2a80:	07020000 	streq	r0, [r2, -r0]
    2a84:	00001cc7 	andeq	r1, r0, r7, asr #25
    2a88:	24d60703 	ldrbcs	r0, [r6], #1795	; 0x703
    2a8c:	07050000 	streq	r0, [r5, -r0]
    2a90:	000021c5 	andeq	r2, r0, r5, asr #3
    2a94:	9d030007 	stcls	0, cr0, [r3, #-28]	; 0xffffffe4
    2a98:	06000024 	streq	r0, [r0], -r4, lsr #32
    2a9c:	017521c6 	cmneq	r5, r6, asr #3
    2aa0:	c5060000 	strgt	r0, [r6, #-0]
    2aa4:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    2aa8:	00007301 	andeq	r7, r0, r1, lsl #6
    2aac:	06f70600 	ldrbteq	r0, [r7], r0, lsl #12
    2ab0:	0000025b 	andeq	r0, r0, fp, asr r2
    2ab4:	00232f07 	eoreq	r2, r3, r7, lsl #30
    2ab8:	b707ff00 	strlt	pc, [r7, -r0, lsl #30]
    2abc:	0000001e 	andeq	r0, r0, lr, lsl r0
    2ac0:	00221107 	eoreq	r1, r2, r7, lsl #2
    2ac4:	78070100 	stmdavc	r7, {r8}
    2ac8:	0200001c 	andeq	r0, r0, #28
    2acc:	0025dd07 	eoreq	sp, r5, r7, lsl #26
    2ad0:	58070300 	stmdapl	r7, {r8, r9}
    2ad4:	10000020 	andne	r0, r0, r0, lsr #32
    2ad8:	00234207 	eoreq	r4, r3, r7, lsl #4
    2adc:	cb071300 	blgt	1c76e4 <__core1_unwind_stub-0xe3891c>
    2ae0:	2000001e 	andcs	r0, r0, lr, lsl r0
    2ae4:	001e9207 	andseq	r9, lr, r7, lsl #4
    2ae8:	ec074000 	stc	0, cr4, [r7], {-0}
    2aec:	5000001c 	andpl	r0, r0, ip, lsl r0
    2af0:	0023ee07 	eoreq	lr, r3, r7, lsl #28
    2af4:	ce076000 	cdpgt	0, 0, cr6, cr7, cr0, {0}
    2af8:	70000023 	andvc	r0, r0, r3, lsr #32
    2afc:	0020d907 	eoreq	sp, r0, r7, lsl #18
    2b00:	6d074100 	stfvss	f4, [r7, #-0]
    2b04:	5100001f 	tstpl	r0, pc, lsl r0
    2b08:	001d7307 	andseq	r7, sp, r7, lsl #6
    2b0c:	5f076100 	svcpl	0x00076100
    2b10:	7100001d 	tstvc	r0, sp, lsl r0
    2b14:	00237307 	eoreq	r7, r3, r7, lsl #6
    2b18:	7c074200 	sfmvc	f4, 4, [r7], {-0}
    2b1c:	52000021 	andpl	r0, r0, #33	; 0x21
    2b20:	00201f07 	eoreq	r1, r0, r7, lsl #30
    2b24:	d4076200 	strle	r6, [r7], #-512	; 0xfffffe00
    2b28:	7200001f 	andvc	r0, r0, #31
    2b2c:	00204507 	eoreq	r4, r0, r7, lsl #10
    2b30:	0a074300 	beq	1d3738 <__core1_unwind_stub-0xe2c8c8>
    2b34:	53000024 	movwpl	r0, #36	; 0x24
    2b38:	001c6507 	andseq	r6, ip, r7, lsl #10
    2b3c:	32076300 	andcc	r6, r7, #0, 6
    2b40:	73000020 	movwvc	r0, #32
    2b44:	1ffe0800 	svcne	0x00fe0800
    2b48:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    2b4c:	01b82101 			; <UNDEFINED> instruction: 0x01b82101
    2b50:	f0090000 			; <UNDEFINED> instruction: 0xf0090000
    2b54:	14000024 	strne	r0, [r0], #-36	; 0xffffffdc
    2b58:	1005cf06 	andne	ip, r5, r6, lsl #30
    2b5c:	000002e5 	andeq	r0, r0, r5, ror #5
    2b60:	0061760a 	rsbeq	r7, r1, sl, lsl #12
    2b64:	1a05d106 	bne	176f84 <__core1_unwind_stub-0xe8907c>
    2b68:	000002e5 	andeq	r0, r0, r5, ror #5
    2b6c:	61700a00 	cmnvs	r0, r0, lsl #20
    2b70:	05d50600 	ldrbeq	r0, [r5, #1536]	; 0x600
    2b74:	0002e51a 	andeq	lr, r2, sl, lsl r5
    2b78:	fc0b0400 	stc2	4, cr0, [fp], {-0}
    2b7c:	06000002 	streq	r0, [r0], -r2
    2b80:	811a05da 			; <UNDEFINED> instruction: 0x811a05da
    2b84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2b88:	00220a0b 	eoreq	r0, r2, fp, lsl #20
    2b8c:	05de0600 	ldrbeq	r0, [lr, #1536]	; 0x600
    2b90:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    2b94:	630b0c00 	movwvs	r0, #48128	; 0xbc00
    2b98:	06000024 	streq	r0, [r0], -r4, lsr #32
    2b9c:	5b1a05df 	blpl	684320 <__core1_unwind_stub-0x97bce0>
    2ba0:	0d000002 	stceq	0, cr0, [r0, #-8]
    2ba4:	00229e0b 	eoreq	r9, r2, fp, lsl #28
    2ba8:	05e40600 	strbeq	r0, [r4, #1536]!	; 0x600
    2bac:	0000d71a 	andeq	sp, r0, sl, lsl r7
    2bb0:	ed0b0e00 	stc	14, cr0, [fp, #-0]
    2bb4:	06000020 	streq	r0, [r0], -r0, lsr #32
    2bb8:	2d1a05e5 	cfldr32cs	mvfx0, [sl, #-916]	; 0xfffffc6c
    2bbc:	0f000001 	svceq	0x00000001
    2bc0:	0023980b 	eoreq	r9, r3, fp, lsl #16
    2bc4:	05e80600 	strbeq	r0, [r8, #1536]!	; 0x600
    2bc8:	0001021a 	andeq	r0, r1, sl, lsl r2
    2bcc:	0c001000 	stceq	0, cr1, [r0], {-0}
    2bd0:	25050804 	strcs	r0, [r5, #-2052]	; 0xfffff7fc
    2bd4:	ec060000 	stc	0, cr0, [r6], {-0}
    2bd8:	02680305 	rsbeq	r0, r8, #335544320	; 0x14000000
    2bdc:	e7040000 	str	r0, [r4, -r0]
    2be0:	08000002 	stmdaeq	r0, {r1}
    2be4:	00002531 	andeq	r2, r0, r1, lsr r5
    2be8:	11060b06 	tstne	r6, r6, lsl #22
    2bec:	00000306 	andeq	r0, r0, r6, lsl #6
    2bf0:	030c040d 	movweq	r0, #50189	; 0xc40d
    2bf4:	e50e0000 	str	r0, [lr, #-0]
    2bf8:	20000002 	andcs	r0, r0, r2
    2bfc:	0f000003 	svceq	0x00000003
    2c00:	00000038 	andeq	r0, r0, r8, lsr r0
    2c04:	0002e50f 	andeq	lr, r2, pc, lsl #10
    2c08:	45090000 	strmi	r0, [r9, #-0]
    2c0c:	10000025 	andne	r0, r0, r5, lsr #32
    2c10:	10067b06 	andne	r7, r6, r6, lsl #22
    2c14:	00000366 	andeq	r0, r0, r6, ror #6
    2c18:	0061760a 	rsbeq	r7, r1, sl, lsl #12
    2c1c:	12067d06 	andne	r7, r6, #384	; 0x180
    2c20:	00000366 	andeq	r0, r0, r6, ror #6
    2c24:	02fc0b00 	rscseq	r0, ip, #0, 22
    2c28:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    2c2c:	002c1206 	eoreq	r1, ip, r6, lsl #4
    2c30:	0b040000 	bleq	102c38 <__core1_unwind_stub-0xefd3c8>
    2c34:	00002594 	muleq	r0, r4, r5
    2c38:	0f068006 	svceq	0x00068006
    2c3c:	000000a0 	andeq	r0, r0, r0, lsr #1
    2c40:	231b0b08 	tstcs	fp, #8, 22	; 0x2000
    2c44:	81060000 	mrshi	r0, (UNDEF: 6)
    2c48:	00810f06 	addeq	r0, r1, r6, lsl #30
    2c4c:	000c0000 	andeq	r0, ip, r0
    2c50:	0373040d 	cmneq	r3, #218103808	; 0xd000000
    2c54:	01050000 	mrseq	r0, (UNDEF: 5)
    2c58:	00040f08 	andeq	r0, r4, r8, lsl #30
    2c5c:	036c0400 	cmneq	ip, #0, 8
    2c60:	61080000 	mrsvs	r0, (UNDEF: 8)
    2c64:	06000025 	streq	r0, [r0], -r5, lsr #32
    2c68:	20030683 	andcs	r0, r3, r3, lsl #13
    2c6c:	08000003 	stmdaeq	r0, {r0, r1}
    2c70:	00000c97 	muleq	r0, r7, ip
    2c74:	17015e03 	strne	r5, [r1, -r3, lsl #28]
    2c78:	0000003d 	andeq	r0, r0, sp, lsr r0
    2c7c:	000ea403 	andeq	sl, lr, r3, lsl #8
    2c80:	0e2e0700 	cdpeq	7, 2, cr0, cr14, cr0, {0}
    2c84:	0000006c 	andeq	r0, r0, ip, rrx
    2c88:	000ae303 	andeq	lr, sl, r3, lsl #6
    2c8c:	0e740700 	cdpeq	7, 7, cr0, cr4, cr0, {0}
    2c90:	0000006c 	andeq	r0, r0, ip, rrx
    2c94:	a5070410 	strge	r0, [r7, #-1040]	; 0xfffffbf0
    2c98:	0003cc03 	andeq	ip, r3, r3, lsl #24
    2c9c:	023a1100 	eorseq	r1, sl, #0, 2
    2ca0:	a7070000 	strge	r0, [r7, -r0]
    2ca4:	0003850c 	andeq	r8, r3, ip, lsl #10
    2ca8:	0aeb1100 	beq	ffac70b0 <__shm_end__+0xbfac70b0>
    2cac:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    2cb0:	0003cc13 	andeq	ip, r3, r3, lsl ip
    2cb4:	73120000 	tstvc	r2, #0
    2cb8:	dc000000 	stcle	0, cr0, [r0], {-0}
    2cbc:	13000003 	movwne	r0, #3
    2cc0:	0000003d 	andeq	r0, r0, sp, lsr r0
    2cc4:	08140003 	ldmdaeq	r4, {r0, r1}
    2cc8:	0009a207 	andeq	sl, r9, r7, lsl #4
    2ccc:	15000004 	strne	r0, [r0, #-4]
    2cd0:	00000a6f 	andeq	r0, r0, pc, ror #20
    2cd4:	2507a407 	strcs	sl, [r7, #-1031]	; 0xfffffbf9
    2cd8:	00000000 	andeq	r0, r0, r0
    2cdc:	00000b15 	andeq	r0, r0, r5, lsl fp
    2ce0:	05a90700 	streq	r0, [r9, #1792]!	; 0x700
    2ce4:	000003aa 	andeq	r0, r0, sl, lsr #7
    2ce8:	2f030004 	svccs	0x00030004
    2cec:	0700000c 	streq	r0, [r0, -ip]
    2cf0:	03dc03aa 	bicseq	r0, ip, #-1476395006	; 0xa8000002
    2cf4:	58030000 	stmdapl	r3, {}	; <UNPREDICTABLE>
    2cf8:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2cfc:	00921916 	addseq	r1, r2, r6, lsl r9
    2d00:	b9030000 	stmdblt	r3, {}	; <UNPREDICTABLE>
    2d04:	09000006 	stmdbeq	r0, {r1, r2}
    2d08:	00250d0c 	eoreq	r0, r5, ip, lsl #26
    2d0c:	d6030000 	strle	r0, [r3], -r0
    2d10:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2d14:	04181b23 	ldreq	r1, [r8], #-2851	; 0xfffff4dd
    2d18:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    2d1c:	18000007 	stmdane	r0, {r0, r1, r2}
    2d20:	8a083408 	bhi	20fd48 <__core1_unwind_stub-0xdf02b8>
    2d24:	15000004 	strne	r0, [r0, #-4]
    2d28:	00000a3a 	andeq	r0, r0, sl, lsr sl
    2d2c:	8a133608 	bhi	4d0554 <__core1_unwind_stub-0xb2faac>
    2d30:	00000004 	andeq	r0, r0, r4
    2d34:	006b5f17 	rsbeq	r5, fp, r7, lsl pc
    2d38:	25073708 	strcs	r3, [r7, #-1800]	; 0xfffff8f8
    2d3c:	04000000 	streq	r0, [r0], #-0
    2d40:	00076715 	andeq	r6, r7, r5, lsl r7
    2d44:	0b370800 	bleq	dc4d4c <__core1_unwind_stub-0x23b2b4>
    2d48:	00000025 	andeq	r0, r0, r5, lsr #32
    2d4c:	08c51508 	stmiaeq	r5, {r3, r8, sl, ip}^
    2d50:	37080000 	strcc	r0, [r8, -r0]
    2d54:	00002514 	andeq	r2, r0, r4, lsl r5
    2d58:	07150c00 	ldreq	r0, [r5, -r0, lsl #24]
    2d5c:	08000006 	stmdaeq	r0, {r1, r2}
    2d60:	00251b37 	eoreq	r1, r5, r7, lsr fp
    2d64:	17100000 	ldrne	r0, [r0, -r0]
    2d68:	0800785f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    2d6c:	04900b38 	ldreq	r0, [r0], #2872	; 0xb38
    2d70:	00140000 	andseq	r0, r4, r0
    2d74:	0430040d 	ldrteq	r0, [r0], #-1037	; 0xfffffbf3
    2d78:	0c120000 	ldceq	0, cr0, [r2], {-0}
    2d7c:	a0000004 	andge	r0, r0, r4
    2d80:	13000004 	movwne	r0, #4
    2d84:	0000003d 	andeq	r0, r0, sp, lsr r0
    2d88:	40160000 	andsmi	r0, r6, r0
    2d8c:	24000001 	strcs	r0, [r0], #-1
    2d90:	23083c08 	movwcs	r3, #35848	; 0x8c08
    2d94:	15000005 	strne	r0, [r0, #-5]
    2d98:	0000015c 	andeq	r0, r0, ip, asr r1
    2d9c:	25093e08 	strcs	r3, [r9, #-3592]	; 0xfffff1f8
    2da0:	00000000 	andeq	r0, r0, r0
    2da4:	000fae15 	andeq	sl, pc, r5, lsl lr	; <UNPREDICTABLE>
    2da8:	093f0800 	ldmdbeq	pc!, {fp}	; <UNPREDICTABLE>
    2dac:	00000025 	andeq	r0, r0, r5, lsr #32
    2db0:	0ed01504 	cdpeq	5, 13, cr1, cr0, cr4, {0}
    2db4:	40080000 	andmi	r0, r8, r0
    2db8:	00002509 	andeq	r2, r0, r9, lsl #10
    2dbc:	01150800 	tsteq	r5, r0, lsl #16
    2dc0:	0800000a 	stmdaeq	r0, {r1, r3}
    2dc4:	00250941 	eoreq	r0, r5, r1, asr #18
    2dc8:	150c0000 	strne	r0, [ip, #-0]
    2dcc:	00000392 	muleq	r0, r2, r3
    2dd0:	25094208 	strcs	r4, [r9, #-520]	; 0xfffffdf8
    2dd4:	10000000 	andne	r0, r0, r0
    2dd8:	000df315 	andeq	pc, sp, r5, lsl r3	; <UNPREDICTABLE>
    2ddc:	09430800 	stmdbeq	r3, {fp}^
    2de0:	00000025 	andeq	r0, r0, r5, lsr #32
    2de4:	0a811514 	beq	fe04823c <__shm_end__+0xbe04823c>
    2de8:	44080000 	strmi	r0, [r8], #-0
    2dec:	00002509 	andeq	r2, r0, r9, lsl #10
    2df0:	af151800 	svcge	0x00151800
    2df4:	0800000a 	stmdaeq	r0, {r1, r3}
    2df8:	00250945 	eoreq	r0, r5, r5, asr #18
    2dfc:	151c0000 	ldrne	r0, [ip, #-0]
    2e00:	00000f74 	andeq	r0, r0, r4, ror pc
    2e04:	25094608 	strcs	r4, [r9, #-1544]	; 0xfffff9f8
    2e08:	20000000 	andcs	r0, r0, r0
    2e0c:	02631800 	rsbeq	r1, r3, #0, 16
    2e10:	01080000 	mrseq	r0, (UNDEF: 8)
    2e14:	68084f08 	stmdavs	r8, {r3, r8, r9, sl, fp, lr}
    2e18:	15000005 	strne	r0, [r0, #-5]
    2e1c:	00000f60 	andeq	r0, r0, r0, ror #30
    2e20:	680a5008 	stmdavs	sl, {r3, ip, lr}
    2e24:	00000005 	andeq	r0, r0, r5
    2e28:	000b6c15 	andeq	r6, fp, r5, lsl ip
    2e2c:	09510800 	ldmdbeq	r1, {fp}^
    2e30:	00000568 	andeq	r0, r0, r8, ror #10
    2e34:	0de31980 			; <UNDEFINED> instruction: 0x0de31980
    2e38:	53080000 	movwpl	r0, #32768	; 0x8000
    2e3c:	00040c0a 	andeq	r0, r4, sl, lsl #24
    2e40:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2e44:	00000e1f 	andeq	r0, r0, pc, lsl lr
    2e48:	0c0a5608 	stceq	6, cr5, [sl], {8}
    2e4c:	04000004 	streq	r0, [r0], #-4
    2e50:	e5120001 	ldr	r0, [r2, #-1]
    2e54:	78000002 	stmdavc	r0, {r1}
    2e58:	13000005 	movwne	r0, #5
    2e5c:	0000003d 	andeq	r0, r0, sp, lsr r0
    2e60:	5a18001f 	bpl	602ee4 <__core1_unwind_stub-0x9fd11c>
    2e64:	9000000a 	andls	r0, r0, sl
    2e68:	08620801 	stmdaeq	r2!, {r0, fp}^
    2e6c:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    2e70:	000a3a15 	andeq	r3, sl, r5, lsl sl
    2e74:	12630800 	rsbne	r0, r3, #0, 16
    2e78:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    2e7c:	0e131500 	cfmul32eq	mvfx1, mvfx3, mvfx0
    2e80:	64080000 	strvs	r0, [r8], #-0
    2e84:	00002506 	andeq	r2, r0, r6, lsl #10
    2e88:	99150400 	ldmdbls	r5, {sl}
    2e8c:	08000004 	stmdaeq	r0, {r2}
    2e90:	05c10966 	strbeq	r0, [r1, #2406]	; 0x966
    2e94:	15080000 	strne	r0, [r8, #-0]
    2e98:	00000263 	andeq	r0, r0, r3, ror #4
    2e9c:	231e6708 	tstcs	lr, #8, 14	; 0x200000
    2ea0:	88000005 	stmdahi	r0, {r0, r2}
    2ea4:	78040d00 	stmdavc	r4, {r8, sl, fp}
    2ea8:	12000005 	andne	r0, r0, #5
    2eac:	000005d1 	ldrdeq	r0, [r0], -r1
    2eb0:	000005d1 	ldrdeq	r0, [r0], -r1
    2eb4:	00003d13 	andeq	r3, r0, r3, lsl sp
    2eb8:	0d001f00 	stceq	15, cr1, [r0, #-0]
    2ebc:	0005d704 	andeq	sp, r5, r4, lsl #14
    2ec0:	18161a00 	ldmdane	r6, {r9, fp, ip}
    2ec4:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2ec8:	00087a08 	andeq	r7, r8, r8, lsl #20
    2ecc:	15000006 	strne	r0, [r0, #-6]
    2ed0:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    2ed4:	00117b08 	andseq	r7, r1, r8, lsl #22
    2ed8:	00000006 	andeq	r0, r0, r6
    2edc:	0002fb15 	andeq	pc, r2, r5, lsl fp	; <UNPREDICTABLE>
    2ee0:	067c0800 	ldrbteq	r0, [ip], -r0, lsl #16
    2ee4:	00000025 	andeq	r0, r0, r5, lsr #32
    2ee8:	040d0004 	streq	r0, [sp], #-4
    2eec:	00000073 	andeq	r0, r0, r3, ror r0
    2ef0:	00068716 	andeq	r8, r6, r6, lsl r7
    2ef4:	ba086800 	blt	21cefc <__core1_unwind_stub-0xde3104>
    2ef8:	00074908 	andeq	r4, r7, r8, lsl #18
    2efc:	705f1700 	subsvc	r1, pc, r0, lsl #14
    2f00:	12bb0800 	adcsne	r0, fp, #0, 16
    2f04:	00000600 	andeq	r0, r0, r0, lsl #12
    2f08:	725f1700 	subsvc	r1, pc, #0, 14
    2f0c:	07bc0800 	ldreq	r0, [ip, r0, lsl #16]!
    2f10:	00000025 	andeq	r0, r0, r5, lsr #32
    2f14:	775f1704 	ldrbvc	r1, [pc, -r4, lsl #14]
    2f18:	07bd0800 	ldreq	r0, [sp, r0, lsl #16]!
    2f1c:	00000025 	andeq	r0, r0, r5, lsr #32
    2f20:	0a401508 	beq	1008348 <f2s_free_clk+0x344>
    2f24:	be080000 	cdplt	0, 0, cr0, cr8, cr0, {0}
    2f28:	00005909 	andeq	r5, r0, r9, lsl #18
    2f2c:	5d150c00 	ldcpl	12, cr0, [r5, #-0]
    2f30:	08000002 	stmdaeq	r0, {r1}
    2f34:	005909bf 	ldrheq	r0, [r9], #-159	; 0xffffff61
    2f38:	170e0000 	strne	r0, [lr, -r0]
    2f3c:	0066625f 	rsbeq	r6, r6, pc, asr r2
    2f40:	d811c008 	ldmdale	r1, {r3, lr, pc}
    2f44:	10000005 	andne	r0, r0, r5
    2f48:	000e0515 	andeq	r0, lr, r5, lsl r5
    2f4c:	07c10800 	strbeq	r0, [r1, r0, lsl #16]
    2f50:	00000025 	andeq	r0, r0, r5, lsr #32
    2f54:	05ea1518 	strbeq	r1, [sl, #1304]!	; 0x518
    2f58:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    2f5c:	0002e50a 	andeq	lr, r2, sl, lsl #10
    2f60:	5f151c00 	svcpl	0x00151c00
    2f64:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    2f68:	08c11dca 	stmiaeq	r1, {r1, r3, r6, r7, r8, sl, fp, ip}^
    2f6c:	15200000 	strne	r0, [r0, #-0]!
    2f70:	000011a3 	andeq	r1, r0, r3, lsr #3
    2f74:	e51dcc08 	ldr	ip, [sp, #-3080]	; 0xfffff3f8
    2f78:	24000008 	strcs	r0, [r0], #-8
    2f7c:	000acc15 	andeq	ip, sl, r5, lsl ip
    2f80:	0dcf0800 	stcleq	8, cr0, [pc]	; 2f88 <__core1_unwind_stub-0xffd078>
    2f84:	00000909 	andeq	r0, r0, r9, lsl #18
    2f88:	2b441528 	blcs	1108430 <__bss_end__+0xec430>
    2f8c:	d0080000 	andle	r0, r8, r0
    2f90:	00092309 	andeq	r2, r9, r9, lsl #6
    2f94:	5f172c00 	svcpl	0x00172c00
    2f98:	08006275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
    2f9c:	05d811d3 	ldrbeq	r1, [r8, #467]	; 0x1d3
    2fa0:	17300000 	ldrne	r0, [r0, -r0]!
    2fa4:	0070755f 	rsbseq	r7, r0, pc, asr r5
    2fa8:	0012d408 	andseq	sp, r2, r8, lsl #8
    2fac:	38000006 	stmdacc	r0, {r1, r2}
    2fb0:	72755f17 	rsbsvc	r5, r5, #23, 30	; 0x5c
    2fb4:	07d50800 	ldrbeq	r0, [r5, r0, lsl #16]
    2fb8:	00000025 	andeq	r0, r0, r5, lsr #32
    2fbc:	0a10153c 	beq	4084b4 <__core1_unwind_stub-0xbf7b4c>
    2fc0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    2fc4:	00092911 	andeq	r2, r9, r1, lsl r9
    2fc8:	56154000 	ldrpl	r4, [r5], -r0
    2fcc:	08000001 	stmdaeq	r0, {r0}
    2fd0:	093911d9 	ldmdbeq	r9!, {r0, r3, r4, r6, r7, r8, ip}
    2fd4:	17430000 	strbne	r0, [r3, -r0]
    2fd8:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    2fdc:	d811dc08 	ldmdale	r1, {r3, sl, fp, ip, lr, pc}
    2fe0:	44000005 	strmi	r0, [r0], #-5
    2fe4:	000b9515 	andeq	r9, fp, r5, lsl r5
    2fe8:	07df0800 	ldrbeq	r0, [pc, r0, lsl #16]
    2fec:	00000025 	andeq	r0, r0, r5, lsr #32
    2ff0:	062d154c 	strteq	r1, [sp], -ip, asr #10
    2ff4:	e0080000 	and	r0, r8, r0
    2ff8:	0003920a 	andeq	r9, r3, sl, lsl #4
    2ffc:	38155000 	ldmdacc	r5, {ip, lr}
    3000:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    3004:	076712e3 	strbeq	r1, [r7, -r3, ror #5]!
    3008:	15540000 	ldrbne	r0, [r4, #-0]
    300c:	000001ab 	andeq	r0, r0, fp, lsr #3
    3010:	240ce708 	strcs	lr, [ip], #-1800	; 0xfffff8f8
    3014:	58000004 	stmdapl	r0, {r2}
    3018:	000a2c15 	andeq	r2, sl, r5, lsl ip
    301c:	0ee90800 	cdpeq	8, 14, cr0, cr9, cr0, {0}
    3020:	00000400 	andeq	r0, r0, r0, lsl #8
    3024:	069a155c 			; <UNDEFINED> instruction: 0x069a155c
    3028:	ea080000 	b	203030 <__core1_unwind_stub-0xdfcfd0>
    302c:	00002509 	andeq	r2, r0, r9, lsl #10
    3030:	0e006400 	cfcpyseq	mvf6, mvf0
    3034:	00000025 	andeq	r0, r0, r5, lsr #32
    3038:	00000767 	andeq	r0, r0, r7, ror #14
    303c:	0007670f 	andeq	r6, r7, pc, lsl #14
    3040:	02e50f00 	rsceq	r0, r5, #0, 30
    3044:	bb0f0000 	bllt	3c304c <__core1_unwind_stub-0xc3cfb4>
    3048:	0f000008 	svceq	0x00000008
    304c:	00000025 	andeq	r0, r0, r5, lsr #32
    3050:	72040d00 	andvc	r0, r4, #0, 26
    3054:	04000007 	streq	r0, [r0], #-7
    3058:	00000767 	andeq	r0, r0, r7, ror #14
    305c:	00044c1b 	andeq	r4, r4, fp, lsl ip
    3060:	08042800 	stmdaeq	r4, {fp, sp}
    3064:	bb080265 	bllt	203a00 <__core1_unwind_stub-0xdfc600>
    3068:	0b000008 	bleq	3090 <__core1_unwind_stub-0xffcf70>
    306c:	00000998 	muleq	r0, r8, r9
    3070:	07026708 	streq	r6, [r2, -r8, lsl #14]
    3074:	00000025 	andeq	r0, r0, r5, lsr #32
    3078:	05280b00 	streq	r0, [r8, #-2816]!	; 0xfffff500
    307c:	6c080000 	stcvs	0, cr0, [r8], {-0}
    3080:	09950b02 	ldmibeq	r5, {r1, r8, r9, fp}
    3084:	0b040000 	bleq	10308c <__core1_unwind_stub-0xefcf74>
    3088:	00000b8d 	andeq	r0, r0, sp, lsl #23
    308c:	14026c08 	strne	r6, [r2], #-3080	; 0xfffff3f8
    3090:	00000995 	muleq	r0, r5, r9
    3094:	0a160b08 	beq	585cbc <__core1_unwind_stub-0xa7a344>
    3098:	6c080000 	stcvs	0, cr0, [r8], {-0}
    309c:	09951e02 	ldmibeq	r5, {r1, r9, sl, fp, ip}
    30a0:	0b0c0000 	bleq	3030a8 <__core1_unwind_stub-0xcfcf58>
    30a4:	00000e0e 	andeq	r0, r0, lr, lsl #28
    30a8:	08026e08 	stmdaeq	r2, {r3, r9, sl, fp, sp, lr}
    30ac:	00000025 	andeq	r0, r0, r5, lsr #32
    30b0:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
    30b4:	6f080000 	svcvs	0x00080000
    30b8:	0b950802 	bleq	fe5450c8 <__shm_end__+0xbe5450c8>
    30bc:	0b140000 	bleq	5030c4 <__core1_unwind_stub-0xafcf3c>
    30c0:	00000433 	andeq	r0, r0, r3, lsr r4
    30c4:	07027208 	streq	r7, [r2, -r8, lsl #4]
    30c8:	00000025 	andeq	r0, r0, r5, lsr #32
    30cc:	0e500b30 	vmoveq.s8	r0, d0[1]
    30d0:	73080000 	movwvc	r0, #32768	; 0x8000
    30d4:	0baa1602 	bleq	fea888e4 <__shm_end__+0xbea888e4>
    30d8:	0b340000 	bleq	d030e0 <__core1_unwind_stub-0x2fcf20>
    30dc:	0000068f 	andeq	r0, r0, pc, lsl #13
    30e0:	07027508 	streq	r7, [r2, -r8, lsl #10]
    30e4:	00000025 	andeq	r0, r0, r5, lsr #32
    30e8:	07830b38 			; <UNDEFINED> instruction: 0x07830b38
    30ec:	77080000 	strvc	r0, [r8, -r0]
    30f0:	0bbb0a02 	bleq	feec5900 <__shm_end__+0xbeec5900>
    30f4:	0b3c0000 	bleq	f030fc <__core1_unwind_stub-0xfcf04>
    30f8:	00000e69 	andeq	r0, r0, r9, ror #28
    30fc:	13027a08 	movwne	r7, #10760	; 0x2a08
    3100:	0000048a 	andeq	r0, r0, sl, lsl #9
    3104:	02f10b40 	rscseq	r0, r1, #64, 22	; 0x10000
    3108:	7b080000 	blvc	203110 <__core1_unwind_stub-0xdfcef0>
    310c:	00250702 	eoreq	r0, r5, r2, lsl #14
    3110:	0b440000 	bleq	1103118 <__bss_end__+0xe7118>
    3114:	00000675 	andeq	r0, r0, r5, ror r6
    3118:	13027c08 	movwne	r7, #11272	; 0x2c08
    311c:	0000048a 	andeq	r0, r0, sl, lsl #9
    3120:	08af0b48 	stmiaeq	pc!, {r3, r6, r8, r9, fp}	; <UNPREDICTABLE>
    3124:	7d080000 	stcvc	0, cr0, [r8, #-0]
    3128:	0bc11402 	bleq	ff048138 <__shm_end__+0xbf048138>
    312c:	0b4c0000 	bleq	1303134 <__bss_end__+0x2e7134>
    3130:	00000110 	andeq	r0, r0, r0, lsl r1
    3134:	07028008 	streq	r8, [r2, -r8]
    3138:	00000025 	andeq	r0, r0, r5, lsr #32
    313c:	06350b50 			; <UNDEFINED> instruction: 0x06350b50
    3140:	81080000 	mrshi	r0, (UNDEF: 8)
    3144:	08bb0902 	ldmeq	fp!, {r1, r8, fp}
    3148:	0b540000 	bleq	1503150 <__bss_end__+0x4e7150>
    314c:	00000a0b 	andeq	r0, r0, fp, lsl #20
    3150:	0702a408 	streq	sl, [r2, -r8, lsl #8]
    3154:	00000b70 	andeq	r0, r0, r0, ror fp
    3158:	0a5a1c58 	beq	168a2c0 <__bss_end__+0x66e2c0>
    315c:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
    3160:	05bb1302 	ldreq	r1, [fp, #770]!	; 0x302
    3164:	01480000 	mrseq	r0, (UNDEF: 72)
    3168:	00078d1c 	andeq	r8, r7, ip, lsl sp
    316c:	02a90800 	adceq	r0, r9, #0, 16
    3170:	00057812 	andeq	r7, r5, r2, lsl r8
    3174:	1c014c00 	stcne	12, cr4, [r1], {-0}
    3178:	00000623 	andeq	r0, r0, r3, lsr #12
    317c:	0c02ad08 	stceq	13, cr10, [r2], {8}
    3180:	00000bd2 	ldrdeq	r0, [r0], -r2
    3184:	3a1c02dc 	bcc	703cfc <__core1_unwind_stub-0x8fc304>
    3188:	08000008 	stmdaeq	r0, {r3}
    318c:	561002b2 			; <UNDEFINED> instruction: 0x561002b2
    3190:	e0000009 	and	r0, r0, r9
    3194:	00131c02 	andseq	r1, r3, r2, lsl #24
    3198:	b4080000 	strlt	r0, [r8], #-0
    319c:	0bde0a02 	bleq	ff7859ac <__shm_end__+0xbf7859ac>
    31a0:	02ec0000 	rsceq	r0, ip, #0
    31a4:	6c040d00 	stcvs	13, cr0, [r4], {-0}
    31a8:	0d000003 	stceq	0, cr0, [r0, #-12]
    31ac:	00074904 	andeq	r4, r7, r4, lsl #18
    31b0:	00250e00 	eoreq	r0, r5, r0, lsl #28
    31b4:	08e50000 	stmiaeq	r5!, {}^	; <UNPREDICTABLE>
    31b8:	670f0000 	strvs	r0, [pc, -r0]
    31bc:	0f000007 	svceq	0x00000007
    31c0:	000002e5 	andeq	r0, r0, r5, ror #5
    31c4:	0003660f 	andeq	r6, r3, pc, lsl #12
    31c8:	00250f00 	eoreq	r0, r5, r0, lsl #30
    31cc:	0d000000 	stceq	0, cr0, [r0, #-0]
    31d0:	0008c704 	andeq	ip, r8, r4, lsl #14
    31d4:	039e0e00 	orrseq	r0, lr, #0, 28
    31d8:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    31dc:	670f0000 	strvs	r0, [pc, -r0]
    31e0:	0f000007 	svceq	0x00000007
    31e4:	000002e5 	andeq	r0, r0, r5, ror #5
    31e8:	00039e0f 	andeq	r9, r3, pc, lsl #28
    31ec:	00250f00 	eoreq	r0, r5, r0, lsl #30
    31f0:	0d000000 	stceq	0, cr0, [r0, #-0]
    31f4:	0008eb04 	andeq	lr, r8, r4, lsl #22
    31f8:	00250e00 	eoreq	r0, r5, r0, lsl #28
    31fc:	09230000 	stmdbeq	r3!, {}	; <UNPREDICTABLE>
    3200:	670f0000 	strvs	r0, [pc, -r0]
    3204:	0f000007 	svceq	0x00000007
    3208:	000002e5 	andeq	r0, r0, r5, ror #5
    320c:	0f040d00 	svceq	0x00040d00
    3210:	12000009 	andne	r0, r0, #9
    3214:	00000073 	andeq	r0, r0, r3, ror r0
    3218:	00000939 	andeq	r0, r0, r9, lsr r9
    321c:	00003d13 	andeq	r3, r0, r3, lsl sp
    3220:	12000200 	andne	r0, r0, #0, 4
    3224:	00000073 	andeq	r0, r0, r3, ror r0
    3228:	00000949 	andeq	r0, r0, r9, asr #18
    322c:	00003d13 	andeq	r3, r0, r3, lsl sp
    3230:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3234:	00000c21 	andeq	r0, r0, r1, lsr #24
    3238:	1a012408 	bne	4c260 <__core1_unwind_stub-0xfb3da0>
    323c:	00000606 	andeq	r0, r0, r6, lsl #12
    3240:	0008bf09 	andeq	fp, r8, r9, lsl #30
    3244:	28080c00 	stmdacs	r8, {sl, fp}
    3248:	098f0801 	stmibeq	pc, {r0, fp}	; <UNPREDICTABLE>
    324c:	3a0b0000 	bcc	2c3254 <__core1_unwind_stub-0xd3cdac>
    3250:	0800000a 	stmdaeq	r0, {r1, r3}
    3254:	8f11012a 	svchi	0x0011012a
    3258:	00000009 	andeq	r0, r0, r9
    325c:	0008330b 	andeq	r3, r8, fp, lsl #6
    3260:	012b0800 			; <UNDEFINED> instruction: 0x012b0800
    3264:	00002507 	andeq	r2, r0, r7, lsl #10
    3268:	b90b0400 	stmdblt	fp, {sl}
    326c:	08000008 	stmdaeq	r0, {r3}
    3270:	950b012c 	strls	r0, [fp, #-300]	; 0xfffffed4
    3274:	08000009 	stmdaeq	r0, {r0, r3}
    3278:	56040d00 	strpl	r0, [r4], -r0, lsl #26
    327c:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    3280:	00094904 	andeq	r4, r9, r4, lsl #18
    3284:	0b850900 	bleq	fe14568c <__shm_end__+0xbe14568c>
    3288:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    328c:	d4080144 	strle	r0, [r8], #-324	; 0xfffffebc
    3290:	0b000009 	bleq	32bc <__core1_unwind_stub-0xffcd44>
    3294:	00000ac6 	andeq	r0, r0, r6, asr #21
    3298:	12014508 	andne	r4, r1, #8, 10	; 0x2000000
    329c:	000009d4 	ldrdeq	r0, [r0], -r4
    32a0:	01bf0b00 			; <UNDEFINED> instruction: 0x01bf0b00
    32a4:	46080000 	strmi	r0, [r8], -r0
    32a8:	09d41201 	ldmibeq	r4, {r0, r9, ip}^
    32ac:	0b060000 	bleq	1832b4 <__core1_unwind_stub-0xe7cd4c>
    32b0:	00000eab 	andeq	r0, r0, fp, lsr #29
    32b4:	12014708 	andne	r4, r1, #8, 14	; 0x200000
    32b8:	0000007a 	andeq	r0, r0, sl, ror r0
    32bc:	7a12000c 	bvc	4832f4 <__core1_unwind_stub-0xb7cd0c>
    32c0:	e4000000 	str	r0, [r0], #-0
    32c4:	13000009 	movwne	r0, #9
    32c8:	0000003d 	andeq	r0, r0, sp, lsr r0
    32cc:	d01d0002 	andsle	r0, sp, r2
    32d0:	07028508 	streq	r8, [r2, -r8, lsl #10]
    32d4:	00000af9 	strdeq	r0, [r0], -r9
    32d8:	0003d40b 	andeq	sp, r3, fp, lsl #8
    32dc:	02870800 	addeq	r0, r7, #0, 16
    32e0:	00003d18 	andeq	r3, r0, r8, lsl sp
    32e4:	ba0b0000 	blt	2c32ec <__core1_unwind_stub-0xd3cd14>
    32e8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    32ec:	bb120288 	bllt	483d14 <__core1_unwind_stub-0xb7c2ec>
    32f0:	04000008 	streq	r0, [r0], #-8
    32f4:	00002d0b 	andeq	r2, r0, fp, lsl #26
    32f8:	02890800 	addeq	r0, r9, #0, 16
    32fc:	000af910 	andeq	pc, sl, r0, lsl r9	; <UNPREDICTABLE>
    3300:	160b0800 	strne	r0, [fp], -r0, lsl #16
    3304:	08000003 	stmdaeq	r0, {r0, r1}
    3308:	a017028a 	andsge	r0, r7, sl, lsl #5
    330c:	24000004 	strcs	r0, [r0], #-4
    3310:	0008890b 	andeq	r8, r8, fp, lsl #18
    3314:	028b0800 	addeq	r0, fp, #0, 16
    3318:	0000250f 	andeq	r2, r0, pc, lsl #10
    331c:	350b4800 	strcc	r4, [fp, #-2048]	; 0xfffff800
    3320:	0800000a 	stmdaeq	r0, {r1, r3}
    3324:	992c028c 	stmdbls	ip!, {r2, r3, r7, r9}
    3328:	50000000 	andpl	r0, r0, r0
    332c:	000c850b 	andeq	r8, ip, fp, lsl #10
    3330:	028d0800 	addeq	r0, sp, #0, 16
    3334:	00099b1a 	andeq	r9, r9, sl, lsl fp
    3338:	630b5800 	movwvs	r5, #47104	; 0xb800
    333c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    3340:	0016028e 	andseq	r0, r6, lr, lsl #5
    3344:	68000004 	stmdavs	r0, {r2}
    3348:	000b000b 	andeq	r0, fp, fp
    334c:	028f0800 	addeq	r0, pc, #0, 16
    3350:	00040016 	andeq	r0, r4, r6, lsl r0
    3354:	1e0b7000 	cdpne	0, 0, cr7, cr11, cr0, {0}
    3358:	0800000a 	stmdaeq	r0, {r1, r3}
    335c:	00160290 	mulseq	r6, r0, r2
    3360:	78000004 	stmdavc	r0, {r2}
    3364:	0001650b 	andeq	r6, r1, fp, lsl #10
    3368:	02910800 	addseq	r0, r1, #0, 16
    336c:	000b0910 	andeq	r0, fp, r0, lsl r9
    3370:	e90b8000 	stmdb	fp, {pc}
    3374:	08000006 	stmdaeq	r0, {r1, r2}
    3378:	19100292 	ldmdbne	r0, {r1, r4, r7, r9}
    337c:	8800000b 	stmdahi	r0, {r0, r1, r3}
    3380:	000fb70b 	andeq	fp, pc, fp, lsl #14
    3384:	02930800 	addseq	r0, r3, #0, 16
    3388:	0000250f 	andeq	r2, r0, pc, lsl #10
    338c:	e30ba000 	movw	sl, #45056	; 0xb000
    3390:	08000002 	stmdaeq	r0, {r1}
    3394:	00160294 	mulseq	r6, r4, r2
    3398:	a4000004 	strge	r0, [r0], #-4
    339c:	000bc70b 	andeq	ip, fp, fp, lsl #14
    33a0:	02950800 	addseq	r0, r5, #0, 16
    33a4:	00040016 	andeq	r0, r4, r6, lsl r0
    33a8:	200bac00 	andcs	sl, fp, r0, lsl #24
    33ac:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    33b0:	00160296 	mulseq	r6, r6, r2
    33b4:	b4000004 	strlt	r0, [r0], #-4
    33b8:	0009f20b 	andeq	pc, r9, fp, lsl #4
    33bc:	02970800 	addseq	r0, r7, #0, 16
    33c0:	00040016 	andeq	r0, r4, r6, lsl r0
    33c4:	450bbc00 	strmi	fp, [fp, #-3072]	; 0xfffff400
    33c8:	08000001 	stmdaeq	r0, {r0}
    33cc:	00160298 	mulseq	r6, r8, r2
    33d0:	c4000004 	strgt	r0, [r0], #-4
    33d4:	0009960b 	andeq	r9, r9, fp, lsl #12
    33d8:	02990800 	addseq	r0, r9, #0, 16
    33dc:	00002508 	andeq	r2, r0, r8, lsl #10
    33e0:	1200cc00 	andne	ip, r0, #0, 24
    33e4:	0000036c 	andeq	r0, r0, ip, ror #6
    33e8:	00000b09 	andeq	r0, r0, r9, lsl #22
    33ec:	00003d13 	andeq	r3, r0, r3, lsl sp
    33f0:	12001900 	andne	r1, r0, #0, 18
    33f4:	0000036c 	andeq	r0, r0, ip, ror #6
    33f8:	00000b19 	andeq	r0, r0, r9, lsl fp
    33fc:	00003d13 	andeq	r3, r0, r3, lsl sp
    3400:	12000700 	andne	r0, r0, #0, 14
    3404:	0000036c 	andeq	r0, r0, ip, ror #6
    3408:	00000b29 	andeq	r0, r0, r9, lsr #22
    340c:	00003d13 	andeq	r3, r0, r3, lsl sp
    3410:	1d001700 	stcne	7, cr1, [r0, #-0]
    3414:	029e08f0 	addseq	r0, lr, #240, 16	; 0xf00000
    3418:	000b5007 	andeq	r5, fp, r7
    341c:	0e270b00 	vmuleq.f64	d0, d7, d0
    3420:	a1080000 	mrsge	r0, (UNDEF: 8)
    3424:	0b501b02 	bleq	140a034 <__bss_end__+0x3ee034>
    3428:	0b000000 	bleq	3430 <__core1_unwind_stub-0xffcbd0>
    342c:	0000084e 	andeq	r0, r0, lr, asr #16
    3430:	1802a208 	stmdane	r2, {r3, r9, sp, pc}
    3434:	00000b60 	andeq	r0, r0, r0, ror #22
    3438:	00120078 	andseq	r0, r2, r8, ror r0
    343c:	60000006 	andvs	r0, r0, r6
    3440:	1300000b 	movwne	r0, #11
    3444:	0000003d 	andeq	r0, r0, sp, lsr r0
    3448:	3d12001d 	ldccc	0, cr0, [r2, #-116]	; 0xffffff8c
    344c:	70000000 	andvc	r0, r0, r0
    3450:	1300000b 	movwne	r0, #11
    3454:	0000003d 	andeq	r0, r0, sp, lsr r0
    3458:	f01e001d 			; <UNDEFINED> instruction: 0xf01e001d
    345c:	03028308 	movweq	r8, #8968	; 0x2308
    3460:	00000b95 	muleq	r0, r5, fp
    3464:	00044c1f 	andeq	r4, r4, pc, lsl ip
    3468:	029a0800 	addseq	r0, sl, #0, 16
    346c:	0009e40b 	andeq	lr, r9, fp, lsl #8
    3470:	01381f00 	teqeq	r8, r0, lsl #30
    3474:	a3080000 	movwge	r0, #32768	; 0x8000
    3478:	0b290b02 	bleq	a46088 <__core1_unwind_stub-0x5b9f78>
    347c:	12000000 	andne	r0, r0, #0
    3480:	0000036c 	andeq	r0, r0, ip, ror #6
    3484:	00000ba5 	andeq	r0, r0, r5, lsr #23
    3488:	00003d13 	andeq	r3, r0, r3, lsl sp
    348c:	20001800 	andcs	r1, r0, r0, lsl #16
    3490:	00000000 	andeq	r0, r0, r0
    3494:	0ba5040d 	bleq	fe9444d0 <__shm_end__+0xbe9444d0>
    3498:	bb210000 	bllt	8434a0 <__core1_unwind_stub-0x7bcb60>
    349c:	0f00000b 	svceq	0x0000000b
    34a0:	00000767 	andeq	r0, r0, r7, ror #14
    34a4:	b0040d00 	andlt	r0, r4, r0, lsl #26
    34a8:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    34ac:	00048a04 	andeq	r8, r4, r4, lsl #20
    34b0:	0bd22100 	bleq	ff48b8b8 <__shm_end__+0xbf48b8b8>
    34b4:	250f0000 	strcs	r0, [pc, #-0]	; 34bc <__core1_unwind_stub-0xffcb44>
    34b8:	00000000 	andeq	r0, r0, r0
    34bc:	0bd8040d 	bleq	ff6044f8 <__shm_end__+0xbf6044f8>
    34c0:	040d0000 	streq	r0, [sp], #-0
    34c4:	00000bc7 	andeq	r0, r0, r7, asr #23
    34c8:	00094912 	andeq	r4, r9, r2, lsl r9
    34cc:	000bee00 	andeq	lr, fp, r0, lsl #28
    34d0:	003d1300 	eorseq	r1, sp, r0, lsl #6
    34d4:	00020000 	andeq	r0, r2, r0
    34d8:	00045a22 	andeq	r5, r4, r2, lsr #20
    34dc:	03330800 	teqeq	r3, #0, 16
    34e0:	00076717 	andeq	r6, r7, r7, lsl r7
    34e4:	04532200 	ldrbeq	r2, [r3], #-512	; 0xfffffe00
    34e8:	34080000 	strcc	r0, [r8], #-0
    34ec:	076d1d03 	strbeq	r1, [sp, -r3, lsl #26]!
    34f0:	23030000 	movwcs	r0, #12288	; 0x3000
    34f4:	0a00000c 	beq	352c <__core1_unwind_stub-0xffcad4>
    34f8:	09491042 	stmdbeq	r9, {r1, r6, ip}^
    34fc:	040d0000 	streq	r0, [sp], #-0
    3500:	00000c08 	andeq	r0, r0, r8, lsl #24
    3504:	00084223 	andeq	r4, r8, r3, lsr #4
    3508:	0e360100 	rsfeqs	f0, f6, f0
    350c:	00000c14 	andeq	r0, r0, r4, lsl ip
    3510:	00084823 	andeq	r4, r8, r3, lsr #16
    3514:	0e370100 	rsfeqs	f0, f7, f0
    3518:	00000c14 	andeq	r0, r0, r4, lsl ip
    351c:	00219824 	eoreq	r9, r1, r4, lsr #16
    3520:	06030200 	streq	r0, [r3], -r0, lsl #4
    3524:	0000ac11 	andeq	sl, r0, r1, lsl ip
    3528:	00000000 	andeq	r0, r0, r0
    352c:	00004400 	andeq	r4, r0, r0, lsl #8
    3530:	5e9c0100 	fmlple	f0, f4, f0
    3534:	2500000c 	strcs	r0, [r0, #-12]
    3538:	00002401 	andeq	r2, r0, r1, lsl #8
    353c:	4d060302 	stcmi	3, cr0, [r6, #-8]
    3540:	00000c5e 	andeq	r0, r0, lr, asr ip
    3544:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3548:	0378040d 	cmneq	r8, #218103808	; 0xd000000
    354c:	9e240000 	cdpls	0, 2, cr0, cr4, cr0, {0}
    3550:	02000025 	andeq	r0, r0, #37	; 0x25
    3554:	ac1105d2 	cfldr32ge	mvfx0, [r1], {210}	; 0xd2
    3558:	00000000 	andeq	r0, r0, r0
    355c:	bc000000 	stclt	0, cr0, [r0], {-0}
    3560:	01000001 	tsteq	r0, r1
    3564:	000ce69c 	muleq	ip, ip, r6
    3568:	24012500 	strcs	r2, [r1], #-1280	; 0xfffffb00
    356c:	d2020000 	andle	r0, r2, #0
    3570:	0c5e4e05 	mrrceq	14, 0, r4, lr, cr5
    3574:	91020000 	mrsls	r0, (UNDEF: 2)
    3578:	22ac2564 	adccs	r2, ip, #100, 10	; 0x19000000
    357c:	d2020000 	andle	r0, r2, #0
    3580:	0ce66405 	cfstrdeq	mvd6, [r6], #20
    3584:	91020000 	mrsls	r0, (UNDEF: 2)
    3588:	22d52560 	sbcscs	r2, r5, #96, 10	; 0x18000000
    358c:	d2020000 	andle	r0, r2, #0
    3590:	0cec7605 	stcleq	6, cr7, [ip], #20
    3594:	91020000 	mrsls	r0, (UNDEF: 2)
    3598:	22a8265c 	adccs	r2, r8, #92, 12	; 0x5c00000
    359c:	d4020000 	strle	r0, [r2], #-0
    35a0:	00a00f05 	adceq	r0, r0, r5, lsl #30
    35a4:	91020000 	mrsls	r0, (UNDEF: 2)
    35a8:	22d12670 	sbcscs	r2, r1, #112, 12	; 0x7000000
    35ac:	d5020000 	strle	r0, [r2, #-0]
    35b0:	00810f05 	addeq	r0, r1, r5, lsl #30
    35b4:	91020000 	mrsls	r0, (UNDEF: 2)
    35b8:	03402774 	movteq	r2, #1908	; 0x774
    35bc:	f9260000 			; <UNDEFINED> instruction: 0xf9260000
    35c0:	0200001f 	andeq	r0, r0, #31
    35c4:	811205e2 	tsthi	r2, r2, ror #11
    35c8:	02000000 	andeq	r0, r0, #0
    35cc:	00006c91 	muleq	r0, r1, ip
    35d0:	00a0040d 	adceq	r0, r0, sp, lsl #8
    35d4:	040d0000 	streq	r0, [sp], #-0
    35d8:	00000081 	andeq	r0, r0, r1, lsl #1
    35dc:	001ee824 	andseq	lr, lr, r4, lsr #16
    35e0:	05b80200 	ldreq	r0, [r8, #512]!	; 0x200
    35e4:	0000ac11 	andeq	sl, r0, r1, lsl ip
    35e8:	00000000 	andeq	r0, r0, r0
    35ec:	0000e000 	andeq	lr, r0, r0
    35f0:	4d9c0100 	ldfmis	f0, [ip]
    35f4:	2500000d 	strcs	r0, [r0, #-13]
    35f8:	00002401 	andeq	r2, r0, r1, lsl #8
    35fc:	4f05b802 	svcmi	0x0005b802
    3600:	00000c5e 	andeq	r0, r0, lr, asr ip
    3604:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
    3608:	02006176 	andeq	r6, r0, #-2147483619	; 0x8000001d
    360c:	4d6605b8 	cfstr64mi	mvdx0, [r6, #-736]!	; 0xfffffd20
    3610:	0200000d 	andeq	r0, r0, #13
    3614:	fc256891 	vfmal.f16	d6, s11, s2
    3618:	02000002 	andeq	r0, r0, #2
    361c:	2c7105b8 	cfldr64cs	mvdx0, [r1], #-736	; 0xfffffd20
    3620:	02000000 	andeq	r0, r0, #0
    3624:	f9266491 			; <UNDEFINED> instruction: 0xf9266491
    3628:	0200001f 	andeq	r0, r0, #31
    362c:	810e05ba 			; <UNDEFINED> instruction: 0x810e05ba
    3630:	02000000 	andeq	r0, r0, #0
    3634:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
    3638:	000d5304 	andeq	r5, sp, r4, lsl #6
    363c:	82242900 	eorhi	r2, r4, #0, 18
    3640:	0200001f 	andeq	r0, r0, #31
    3644:	a00b0573 	andge	r0, fp, r3, ror r5
    3648:	00000000 	andeq	r0, r0, r0
    364c:	84000000 	strhi	r0, [r0], #-0
    3650:	01000001 	tsteq	r0, r1
    3654:	000e039c 	muleq	lr, ip, r3
    3658:	61762800 	cmnvs	r6, r0, lsl #16
    365c:	05730200 	ldrbeq	r0, [r3, #-512]!	; 0xfffffe00
    3660:	000d4d29 	andeq	r4, sp, r9, lsr #26
    3664:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3668:	001e0625 	andseq	r0, lr, r5, lsr #12
    366c:	05730200 	ldrbeq	r0, [r3, #-512]!	; 0xfffffe00
    3670:	000cec38 	andeq	lr, ip, r8, lsr ip
    3674:	60910200 	addsvs	r0, r1, r0, lsl #4
    3678:	001ff925 	andseq	pc, pc, r5, lsr #18
    367c:	05730200 	ldrbeq	r0, [r3, #-512]!	; 0xfffffe00
    3680:	000cec4e 	andeq	lr, ip, lr, asr #24
    3684:	5c910200 	lfmpl	f0, 4, [r1], {0}
    3688:	0061702a 	rsbeq	r7, r1, sl, lsr #32
    368c:	0f057502 	svceq	0x00057502
    3690:	000000a0 	andeq	r0, r0, r0, lsr #1
    3694:	2b749102 	blcs	1d27aa4 <__bss_end__+0xd0baa4>
    3698:	00000000 	andeq	r0, r0, r0
    369c:	00000050 	andeq	r0, r0, r0, asr r0
    36a0:	00000dca 	andeq	r0, r0, sl, asr #27
    36a4:	0073662a 	rsbseq	r6, r3, sl, lsr #12
    36a8:	12058d02 	andne	r8, r5, #2, 26	; 0x80
    36ac:	00000081 	andeq	r0, r0, r1, lsl #1
    36b0:	00689102 	rsbeq	r9, r8, r2, lsl #2
    36b4:	0000002b 	andeq	r0, r0, fp, lsr #32
    36b8:	00006000 	andeq	r6, r0, r0
    36bc:	000de800 	andeq	lr, sp, r0, lsl #16
    36c0:	062e2600 	strteq	r2, [lr], -r0, lsl #12
    36c4:	9a020000 	bls	836cc <__core1_unwind_stub-0xf7c934>
    36c8:	00811205 	addeq	r1, r1, r5, lsl #4
    36cc:	91020000 	mrsls	r0, (UNDEF: 2)
    36d0:	002c006c 	eoreq	r0, ip, ip, rrx
    36d4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    36d8:	26000000 	strcs	r0, [r0], -r0
    36dc:	0000062e 	andeq	r0, r0, lr, lsr #12
    36e0:	1205a902 	andne	sl, r5, #32768	; 0x8000
    36e4:	00000081 	andeq	r0, r0, r1, lsl #1
    36e8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    36ec:	1d282400 	cfstrsne	mvf2, [r8, #-0]
    36f0:	34020000 	strcc	r0, [r2], #-0
    36f4:	00ac1105 	adceq	r1, ip, r5, lsl #2
    36f8:	384c0000 	stmdacc	ip, {}^	; <UNPREDICTABLE>
    36fc:	013c0100 	teqeq	ip, r0, lsl #2
    3700:	9c010000 	stcls	0, cr0, [r1], {-0}
    3704:	00000e67 	andeq	r0, r0, r7, ror #28
    3708:	00249325 	eoreq	r9, r4, r5, lsr #6
    370c:	05340200 	ldreq	r0, [r4, #-512]!	; 0xfffffe00
    3710:	000e673a 	andeq	r6, lr, sl, lsr r7
    3714:	5c910200 	lfmpl	f0, 4, [r1], {0}
    3718:	0027df26 	eoreq	sp, r7, r6, lsr #30
    371c:	05360200 	ldreq	r0, [r6, #-512]!	; 0xfffffe00
    3720:	0000ac15 	andeq	sl, r0, r5, lsl ip
    3724:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3728:	0038e02c 	eorseq	lr, r8, ip, lsr #32
    372c:	00006801 	andeq	r6, r0, r1, lsl #16
    3730:	00692a00 	rsbeq	r2, r9, r0, lsl #20
    3734:	0d055302 	stceq	3, cr5, [r5, #-8]
    3738:	00000025 	andeq	r0, r0, r5, lsr #32
    373c:	26709102 	ldrbtcs	r9, [r0], -r2, lsl #2
    3740:	00002172 	andeq	r2, r0, r2, ror r1
    3744:	17055402 	strne	r5, [r5, -r2, lsl #8]
    3748:	00000e6d 	andeq	r0, r0, sp, ror #28
    374c:	00609102 	rsbeq	r9, r0, r2, lsl #2
    3750:	8d040d00 	stchi	13, cr0, [r4, #-0]
    3754:	12000000 	andne	r0, r0, #0
    3758:	00000164 	andeq	r0, r0, r4, ror #2
    375c:	00000e7d 	andeq	r0, r0, sp, ror lr
    3760:	00003d13 	andeq	r3, r0, r3, lsl sp
    3764:	24000f00 	strcs	r0, [r0], #-3840	; 0xfffff100
    3768:	0000242f 	andeq	r2, r0, pc, lsr #8
    376c:	1103be02 	tstne	r3, r2, lsl #28
    3770:	000000ac 	andeq	r0, r0, ip, lsr #1
    3774:	01002a74 	tsteq	r0, r4, ror sl
    3778:	00000dd8 	ldrdeq	r0, [r0], -r8
    377c:	12079c01 	andne	r9, r7, #256	; 0x100
    3780:	93250000 			; <UNDEFINED> instruction: 0x93250000
    3784:	02000024 	andeq	r0, r0, #36	; 0x24
    3788:	073403be 			; <UNDEFINED> instruction: 0x073403be
    378c:	03000012 	movweq	r0, #18
    3790:	255ec491 	ldrbcs	ip, [lr, #-1169]	; 0xfffffb6f
    3794:	00001e86 	andeq	r1, r0, r6, lsl #29
    3798:	4503bf02 	strmi	fp, [r3, #-3842]	; 0xfffff0fe
    379c:	0000120d 	andeq	r1, r0, sp, lsl #4
    37a0:	5ec09103 	acspls	f1, f3
    37a4:	001e8225 	andseq	r8, lr, r5, lsr #4
    37a8:	03c00200 	biceq	r0, r0, #0, 4
    37ac:	00003836 	andeq	r3, r0, r6, lsr r8
    37b0:	bc910300 	ldclt	3, cr0, [r1], {0}
    37b4:	25bd255e 	ldrcs	r2, [sp, #1374]!	; 0x55e
    37b8:	c1020000 	mrsgt	r0, (UNDEF: 2)
    37bc:	02f93d03 	rscseq	r3, r9, #3, 26	; 0xc0
    37c0:	91030000 	mrsls	r0, (UNDEF: 3)
    37c4:	1a255eb8 	bne	95b2ac <__core1_unwind_stub-0x6a4d54>
    37c8:	0200001f 	andeq	r0, r0, #31
    37cc:	e53003c2 	ldr	r0, [r0, #-962]!	; 0xfffffc3e
    37d0:	02000002 	andeq	r0, r0, #2
    37d4:	6b2a0091 	blvs	a83a20 <__core1_unwind_stub-0x57c5e0>
    37d8:	03c40200 	biceq	r0, r4, #0, 4
    37dc:	00002509 	andeq	r2, r0, r9, lsl #10
    37e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    37e4:	0200692a 	andeq	r6, r0, #688128	; 0xa8000
    37e8:	2c0c03c5 	stccs	3, cr0, [ip], {197}	; 0xc5
    37ec:	02000000 	andeq	r0, r0, #0
    37f0:	90267091 	mlals	r6, r1, r0, r7
    37f4:	02000021 	andeq	r0, r0, #33	; 0x21
    37f8:	130a03c6 	movwne	r0, #41926	; 0xa3c6
    37fc:	03000012 	movweq	r0, #18
    3800:	265eec91 			; <UNDEFINED> instruction: 0x265eec91
    3804:	000024aa 	andeq	r2, r0, sl, lsr #9
    3808:	0c03c802 	stceq	8, cr12, [r3], {2}
    380c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3810:	26509102 	ldrbcs	r9, [r0], -r2, lsl #2
    3814:	000023e1 	andeq	r2, r0, r1, ror #7
    3818:	0c03cb02 			; <UNDEFINED> instruction: 0x0c03cb02
    381c:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    3820:	264c9102 	strbcs	r9, [ip], -r2, lsl #2
    3824:	000022b2 			; <UNDEFINED> instruction: 0x000022b2
    3828:	0c03cc02 	stceq	12, cr12, [r3], {2}
    382c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3830:	2b6c9102 	blcs	1b27c40 <__bss_end__+0xb0bc40>
    3834:	01002be4 	smlatteq	r0, r4, fp, r2
    3838:	000000bc 	strheq	r0, [r0], -ip
    383c:	00000f8a 	andeq	r0, r0, sl, lsl #31
    3840:	002c8e26 	eoreq	r8, ip, r6, lsr #28
    3844:	03ff0200 	mvnseq	r0, #0, 4
    3848:	00008116 	andeq	r8, r0, r6, lsl r1
    384c:	ec910300 	ldc	3, cr0, [r1], {0}
    3850:	2447267e 	strbcs	r2, [r7], #-1662	; 0xfffff982
    3854:	00020000 	andeq	r0, r2, r0
    3858:	02e72204 	rsceq	r2, r7, #4, 4	; 0x40000000
    385c:	91030000 	mrsls	r0, (UNDEF: 3)
    3860:	c3265ed8 			; <UNDEFINED> instruction: 0xc3265ed8
    3864:	02000024 	andeq	r0, r0, #36	; 0x24
    3868:	ec180401 	cfldrs	mvf0, [r8], {1}
    386c:	0300000c 	movweq	r0, #12
    3870:	007ef091 			; <UNDEFINED> instruction: 0x007ef091
    3874:	002cdc2c 	eoreq	sp, ip, ip, lsr #24
    3878:	000b3c01 	andeq	r3, fp, r1, lsl #24
    387c:	61762a00 	cmnvs	r6, r0, lsl #20
    3880:	041d0200 	ldreq	r0, [sp], #-512	; 0xfffffe00
    3884:	0000a013 	andeq	sl, r0, r3, lsl r0
    3888:	68910200 	ldmvs	r1, {r9}
    388c:	0061702a 	rsbeq	r7, r1, sl, lsr #32
    3890:	13041e02 	movwne	r1, #19970	; 0x4e02
    3894:	000000a0 	andeq	r0, r0, r0, lsr #1
    3898:	26649102 	strbtcs	r9, [r4], -r2, lsl #2
    389c:	000002fc 	strdeq	r0, [r0], -ip
    38a0:	13041f02 	movwne	r1, #20226	; 0x4f02
    38a4:	00000081 	andeq	r0, r0, r1, lsl #1
    38a8:	2a609102 	bcs	1827cb8 <__bss_end__+0x80bcb8>
    38ac:	2002006a 	andcs	r0, r2, sl, rrx
    38b0:	00811204 	addeq	r1, r1, r4, lsl #4
    38b4:	91020000 	mrsls	r0, (UNDEF: 2)
    38b8:	2123265c 			; <UNDEFINED> instruction: 0x2123265c
    38bc:	24020000 	strcs	r0, [r2], #-0
    38c0:	12241204 	eorne	r1, r4, #4, 4	; 0x40000000
    38c4:	91030000 	mrsls	r0, (UNDEF: 3)
    38c8:	da265ecc 	ble	99b400 <__core1_unwind_stub-0x664c00>
    38cc:	02000021 	andeq	r0, r0, #33	; 0x21
    38d0:	8112042c 	tsthi	r2, ip, lsr #8
    38d4:	02000000 	andeq	r0, r0, #0
    38d8:	242b5891 	strtcs	r5, [fp], #-2193	; 0xfffff76f
    38dc:	4001002e 	andmi	r0, r1, lr, lsr #32
    38e0:	0b000004 	bleq	38f8 <__core1_unwind_stub-0xffc708>
    38e4:	26000011 			; <UNDEFINED> instruction: 0x26000011
    38e8:	000022d5 	ldrdeq	r2, [r0], -r5
    38ec:	16043f02 	strne	r3, [r4], -r2, lsl #30
    38f0:	00000081 	andeq	r0, r0, r1, lsl #1
    38f4:	2b549102 	blcs	1527d04 <__bss_end__+0x50bd04>
    38f8:	01002e54 	tsteq	r0, r4, asr lr
    38fc:	000000e4 	andeq	r0, r0, r4, ror #1
    3900:	0000104e 	andeq	r1, r0, lr, asr #32
    3904:	002c8e26 	eoreq	r8, ip, r6, lsr #28
    3908:	04480200 	strbeq	r0, [r8], #-512	; 0xfffffe00
    390c:	0000811e 	andeq	r8, r0, lr, lsl r1
    3910:	bc910300 	ldclt	3, cr0, [r1], {0}
    3914:	24c3267f 	strbcs	r2, [r3], #1663	; 0x67f
    3918:	4a020000 	bmi	83920 <__core1_unwind_stub-0xf7c6e0>
    391c:	0cec2004 	stcleq	0, cr2, [ip], #16
    3920:	91030000 	mrsls	r0, (UNDEF: 3)
    3924:	27267fb8 			; <UNDEFINED> instruction: 0x27267fb8
    3928:	02000023 	andeq	r0, r0, #35	; 0x23
    392c:	811e044b 	tsthi	lr, fp, asr #8
    3930:	03000000 	movweq	r0, #0
    3934:	007fb491 			; <UNDEFINED> instruction: 0x007fb491
    3938:	002f582b 	eoreq	r5, pc, fp, lsr #16
    393c:	00011801 	andeq	r1, r1, r1, lsl #16
    3940:	00108f00 	andseq	r8, r0, r0, lsl #30
    3944:	2c8e2600 	stccs	6, cr2, [lr], {0}
    3948:	60020000 	andvs	r0, r2, r0
    394c:	00811e04 	addeq	r1, r1, r4, lsl #28
    3950:	91030000 	mrsls	r0, (UNDEF: 3)
    3954:	c3267fa4 			; <UNDEFINED> instruction: 0xc3267fa4
    3958:	02000024 	andeq	r0, r0, #36	; 0x24
    395c:	ec200462 	cfstrs	mvf0, [r0], #-392	; 0xfffffe78
    3960:	0300000c 	movweq	r0, #12
    3964:	267fa091 			; <UNDEFINED> instruction: 0x267fa091
    3968:	00002327 	andeq	r2, r0, r7, lsr #6
    396c:	1e046302 	cdpne	3, 0, cr6, cr4, cr2, {0}
    3970:	00000081 	andeq	r0, r0, r1, lsl #1
    3974:	7f9c9103 	svcvc	0x009c9103
    3978:	30802b00 	addcc	r2, r0, r0, lsl #22
    397c:	00e40100 	rsceq	r0, r4, r0, lsl #2
    3980:	10d00000 	sbcsne	r0, r0, r0
    3984:	8e260000 	cdphi	0, 2, cr0, cr6, cr0, {0}
    3988:	0200002c 	andeq	r0, r0, #44	; 0x2c
    398c:	811e0479 	tsthi	lr, r9, ror r4
    3990:	03000000 	movweq	r0, #0
    3994:	267fb091 			; <UNDEFINED> instruction: 0x267fb091
    3998:	000024c3 	andeq	r2, r0, r3, asr #9
    399c:	20047b02 	andcs	r7, r4, r2, lsl #22
    39a0:	00000cec 	andeq	r0, r0, ip, ror #25
    39a4:	7fac9103 	svcvc	0x00ac9103
    39a8:	00232726 	eoreq	r2, r3, r6, lsr #14
    39ac:	047c0200 	ldrbteq	r0, [ip], #-512	; 0xfffffe00
    39b0:	0000811e 	andeq	r8, r0, lr, lsl r1
    39b4:	a8910300 	ldmge	r1, {r8, r9}
    39b8:	742c007f 	strtvc	r0, [ip], #-127	; 0xffffff81
    39bc:	e4010031 	str	r0, [r1], #-49	; 0xffffffcf
    39c0:	26000000 	strcs	r0, [r0], -r0
    39c4:	00002c8e 	andeq	r2, r0, lr, lsl #25
    39c8:	1e049002 	cdpne	0, 0, cr9, cr4, cr2, {0}
    39cc:	00000081 	andeq	r0, r0, r1, lsl #1
    39d0:	26489102 	strbcs	r9, [r8], -r2, lsl #2
    39d4:	000024c3 	andeq	r2, r0, r3, asr #9
    39d8:	20049202 	andcs	r9, r4, r2, lsl #4
    39dc:	00000cec 	andeq	r0, r0, ip, ror #25
    39e0:	26449102 	strbcs	r9, [r4], -r2, lsl #2
    39e4:	00002327 	andeq	r2, r0, r7, lsr #6
    39e8:	1e049302 	cdpne	3, 0, cr9, cr4, cr2, {0}
    39ec:	00000081 	andeq	r0, r0, r1, lsl #1
    39f0:	00409102 	subeq	r9, r0, r2, lsl #2
    39f4:	32802b00 	addcc	r2, r0, #0, 22
    39f8:	00b80100 	adcseq	r0, r8, r0, lsl #2
    39fc:	112a0000 			; <UNDEFINED> instruction: 0x112a0000
    3a00:	8e260000 	cdphi	0, 2, cr0, cr6, cr0, {0}
    3a04:	0200002c 	andeq	r0, r0, #44	; 0x2c
    3a08:	811a04b6 			; <UNDEFINED> instruction: 0x811a04b6
    3a0c:	03000000 	movweq	r0, #0
    3a10:	007f9891 			; <UNDEFINED> instruction: 0x007f9891
    3a14:	0033582b 	eorseq	r5, r3, fp, lsr #16
    3a18:	0000ec01 	andeq	lr, r0, r1, lsl #24
    3a1c:	00114900 	andseq	r4, r1, r0, lsl #18
    3a20:	2c8e2600 	stccs	6, cr2, [lr], {0}
    3a24:	c7020000 	strgt	r0, [r2, -r0]
    3a28:	00811a04 	addeq	r1, r1, r4, lsl #20
    3a2c:	91030000 	mrsls	r0, (UNDEF: 3)
    3a30:	2b007f90 	blcs	23878 <__core1_unwind_stub-0xfdc788>
    3a34:	01003454 	tsteq	r0, r4, asr r4
    3a38:	000000b8 	strheq	r0, [r0], -r8
    3a3c:	00001168 	andeq	r1, r0, r8, ror #2
    3a40:	002c8e26 	eoreq	r8, ip, r6, lsr #28
    3a44:	04db0200 	ldrbeq	r0, [fp], #512	; 0x200
    3a48:	0000811a 	andeq	r8, r0, sl, lsl r1
    3a4c:	94910300 	ldrls	r0, [r1], #768	; 0x300
    3a50:	382b007f 	stmdacc	fp!, {r0, r1, r2, r3, r4, r5, r6}
    3a54:	b8010035 	stmdalt	r1, {r0, r2, r4, r5}
    3a58:	87000000 	strhi	r0, [r0, -r0]
    3a5c:	26000011 			; <UNDEFINED> instruction: 0x26000011
    3a60:	00002c8e 	andeq	r2, r0, lr, lsl #25
    3a64:	1a04f002 	bne	13fa74 <__core1_unwind_stub-0xec058c>
    3a68:	00000081 	andeq	r0, r0, r1, lsl #1
    3a6c:	7f8c9103 	svcvc	0x008c9103
    3a70:	36182b00 	ldrcc	r2, [r8], -r0, lsl #22
    3a74:	010c0100 	mrseq	r0, (UNDEF: 28)
    3a78:	11c80000 	bicne	r0, r8, r0
    3a7c:	8e260000 	cdphi	0, 2, cr0, cr6, cr0, {0}
    3a80:	0200002c 	andeq	r0, r0, #44	; 0x2c
    3a84:	811a0507 	tsthi	sl, r7, lsl #10
    3a88:	03000000 	movweq	r0, #0
    3a8c:	267f8891 			; <UNDEFINED> instruction: 0x267f8891
    3a90:	000024c3 	andeq	r2, r0, r3, asr #9
    3a94:	1c050902 			; <UNDEFINED> instruction: 0x1c050902
    3a98:	00000cec 	andeq	r0, r0, ip, ror #25
    3a9c:	7f849103 	svcvc	0x00849103
    3aa0:	00232726 	eoreq	r2, r3, r6, lsr #14
    3aa4:	050a0200 	streq	r0, [sl, #-512]	; 0xfffffe00
    3aa8:	0000811a 	andeq	r8, r0, sl, lsl r1
    3aac:	80910300 	addshi	r0, r1, r0, lsl #6
    3ab0:	342c007f 	strtcc	r0, [ip], #-127	; 0xffffff81
    3ab4:	d8010037 	stmdale	r1, {r0, r1, r2, r4, r5}
    3ab8:	26000000 	strcs	r0, [r0], -r0
    3abc:	00002c8e 	andeq	r2, r0, lr, lsl #25
    3ac0:	16051e02 	strne	r1, [r5], -r2, lsl #28
    3ac4:	00000081 	andeq	r0, r0, r1, lsl #1
    3ac8:	7efc9103 	nrmvce	f1, f3
    3acc:	0024c326 	eoreq	ip, r4, r6, lsr #6
    3ad0:	05200200 	streq	r0, [r0, #-512]!	; 0xfffffe00
    3ad4:	000cec18 	andeq	lr, ip, r8, lsl ip
    3ad8:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
    3adc:	2327267e 			; <UNDEFINED> instruction: 0x2327267e
    3ae0:	21020000 	mrscs	r0, (UNDEF: 2)
    3ae4:	00811605 	addeq	r1, r1, r5, lsl #12
    3ae8:	91030000 	mrsls	r0, (UNDEF: 3)
    3aec:	00007ef4 	strdeq	r7, [r0], -r4
    3af0:	ec040d00 	stc	13, cr0, [r4], {-0}
    3af4:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    3af8:	0002f404 	andeq	pc, r2, r4, lsl #8
    3afc:	036c1200 	cmneq	ip, #0, 4
    3b00:	12240000 	eorne	r0, r4, #0
    3b04:	3d2d0000 	stccc	0, cr0, [sp, #-0]
    3b08:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    3b0c:	8112000f 	tsthi	r2, pc
    3b10:	34000000 	strcc	r0, [r0], #-0
    3b14:	13000012 	movwne	r0, #18
    3b18:	0000003d 	andeq	r0, r0, sp, lsr r0
    3b1c:	a32e0002 			; <UNDEFINED> instruction: 0xa32e0002
    3b20:	0200001c 	andeq	r0, r0, #28
    3b24:	ac1803af 	ldcge	3, cr0, [r8], {175}	; 0xaf
    3b28:	2c000000 	stccs	0, cr0, [r0], {-0}
    3b2c:	4801002a 	stmdami	r1, {r1, r3, r5}
    3b30:	01000000 	mrseq	r0, (UNDEF: 0)
    3b34:	0012609c 	mulseq	r2, ip, r0
    3b38:	24982500 	ldrcs	r2, [r8], #1280	; 0x500
    3b3c:	af020000 	svcge	0x00020000
    3b40:	0cec3503 	cfstr64eq	mvdx3, [ip], #12
    3b44:	91020000 	mrsls	r0, (UNDEF: 2)
    3b48:	252f0074 	strcs	r0, [pc, #-116]!	; 3adc <__core1_unwind_stub-0xffc524>
    3b4c:	02000022 	andeq	r0, r0, #34	; 0x22
    3b50:	811a0395 			; <UNDEFINED> instruction: 0x811a0395
    3b54:	1c000000 	stcne	0, cr0, [r0], {-0}
    3b58:	10010029 	andne	r0, r1, r9, lsr #32
    3b5c:	01000001 	tsteq	r0, r1
    3b60:	0012c79c 	mulseq	r2, ip, r7
    3b64:	61702800 	cmnvs	r0, r0, lsl #16
    3b68:	03950200 	orrseq	r0, r5, #0, 4
    3b6c:	0000a043 	andeq	sl, r0, r3, asr #32
    3b70:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3b74:	6d656d28 	stclvs	13, cr6, [r5, #-160]!	; 0xffffff60
    3b78:	03960200 	orrseq	r0, r6, #0, 4
    3b7c:	00120d54 	andseq	r0, r2, r4, asr sp
    3b80:	60910200 	addsvs	r0, r1, r0, lsl #4
    3b84:	7865742a 	stmdavc	r5!, {r1, r3, r5, sl, ip, sp, lr}^
    3b88:	03980200 	orrseq	r0, r8, #0, 4
    3b8c:	00002509 	andeq	r2, r0, r9, lsl #10
    3b90:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3b94:	0200632a 	andeq	r6, r0, #-1476395008	; 0xa8000000
    3b98:	25090399 	strcs	r0, [r9, #-921]	; 0xfffffc67
    3b9c:	02000000 	andeq	r0, r0, #0
    3ba0:	622a7091 	eorvs	r7, sl, #145	; 0x91
    3ba4:	039a0200 	orrseq	r0, sl, #0, 4
    3ba8:	00002509 	andeq	r2, r0, r9, lsl #10
    3bac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3bb0:	1d402f00 	stclne	15, cr2, [r0, #-0]
    3bb4:	7b020000 	blvc	83bbc <__core1_unwind_stub-0xf7c444>
    3bb8:	00811a03 	addeq	r1, r1, r3, lsl #20
    3bbc:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
    3bc0:	010c0100 	mrseq	r0, (UNDEF: 28)
    3bc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bc8:	0000132e 	andeq	r1, r0, lr, lsr #6
    3bcc:	00617028 	rsbeq	r7, r1, r8, lsr #32
    3bd0:	43037b02 	movwmi	r7, #15106	; 0x3b02
    3bd4:	000000a0 	andeq	r0, r0, r0, lsr #1
    3bd8:	28649102 	stmdacs	r4!, {r1, r8, ip, pc}^
    3bdc:	006d656d 	rsbeq	r6, sp, sp, ror #10
    3be0:	54037c02 	strpl	r7, [r3], #-3074	; 0xfffff3fe
    3be4:	0000120d 	andeq	r1, r0, sp, lsl #4
    3be8:	2a609102 	bcs	1827ff8 <__bss_end__+0x80bff8>
    3bec:	00786574 	rsbseq	r6, r8, r4, ror r5
    3bf0:	09037e02 	stmdbeq	r3, {r1, r9, sl, fp, ip, sp, lr}
    3bf4:	00000025 	andeq	r0, r0, r5, lsr #32
    3bf8:	2a749102 	bcs	1d28008 <__bss_end__+0xd0c008>
    3bfc:	7f020063 	svcvc	0x00020063
    3c00:	00250903 	eoreq	r0, r5, r3, lsl #18
    3c04:	91020000 	mrsls	r0, (UNDEF: 2)
    3c08:	00622a70 	rsbeq	r2, r2, r0, ror sl
    3c0c:	09038002 	stmdbeq	r3, {r1, pc}
    3c10:	00000025 	andeq	r0, r0, r5, lsr #32
    3c14:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3c18:	0020f52f 	eoreq	pc, r0, pc, lsr #10
    3c1c:	03610200 	cmneq	r1, #0, 4
    3c20:	0000811a 	andeq	r8, r0, sl, lsl r1
    3c24:	0026ec00 	eoreq	lr, r6, r0, lsl #24
    3c28:	00012401 	andeq	r2, r1, r1, lsl #8
    3c2c:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    3c30:	28000013 	stmdacs	r0, {r0, r1, r4}
    3c34:	02006170 	andeq	r6, r0, #112, 2
    3c38:	a0460361 	subge	r0, r6, r1, ror #6
    3c3c:	02000000 	andeq	r0, r0, #0
    3c40:	6d286491 	cfstrsvs	mvf6, [r8, #-580]!	; 0xfffffdbc
    3c44:	02006d65 	andeq	r6, r0, #6464	; 0x1940
    3c48:	0d570362 	ldcleq	3, cr0, [r7, #-392]	; 0xfffffe78
    3c4c:	02000012 	andeq	r0, r0, #18
    3c50:	742a6091 	strtvc	r6, [sl], #-145	; 0xffffff6f
    3c54:	02007865 	andeq	r7, r0, #6619136	; 0x650000
    3c58:	25090364 	strcs	r0, [r9, #-868]	; 0xfffffc9c
    3c5c:	02000000 	andeq	r0, r0, #0
    3c60:	632a7491 			; <UNDEFINED> instruction: 0x632a7491
    3c64:	03650200 	cmneq	r5, #0, 4
    3c68:	00002509 	andeq	r2, r0, r9, lsl #10
    3c6c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3c70:	0200622a 	andeq	r6, r0, #-1610612734	; 0xa0000002
    3c74:	25090366 	strcs	r0, [r9, #-870]	; 0xfffffc9a
    3c78:	02000000 	andeq	r0, r0, #0
    3c7c:	2f006c91 	svccs	0x00006c91
    3c80:	0000207f 	andeq	r2, r0, pc, ror r0
    3c84:	1a034702 	bne	d5894 <__core1_unwind_stub-0xf2a76c>
    3c88:	00000081 	andeq	r0, r0, r1, lsl #1
    3c8c:	010025c8 	smlabteq	r0, r8, r5, r2
    3c90:	00000124 	andeq	r0, r0, r4, lsr #2
    3c94:	13fc9c01 	mvnsne	r9, #256	; 0x100
    3c98:	70280000 	eorvc	r0, r8, r0
    3c9c:	47020061 	strmi	r0, [r2, -r1, rrx]
    3ca0:	00a04103 	adceq	r4, r0, r3, lsl #2
    3ca4:	91020000 	mrsls	r0, (UNDEF: 2)
    3ca8:	656d2864 	strbvs	r2, [sp, #-2148]!	; 0xfffff79c
    3cac:	4802006d 	stmdami	r2, {r0, r2, r3, r5, r6}
    3cb0:	120d5203 	andne	r5, sp, #805306368	; 0x30000000
    3cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    3cb8:	65742a60 	ldrbvs	r2, [r4, #-2656]!	; 0xfffff5a0
    3cbc:	4a020078 	bmi	83ea4 <__core1_unwind_stub-0xf7c15c>
    3cc0:	00250903 	eoreq	r0, r5, r3, lsl #18
    3cc4:	91020000 	mrsls	r0, (UNDEF: 2)
    3cc8:	00632a74 	rsbeq	r2, r3, r4, ror sl
    3ccc:	09034b02 	stmdbeq	r3, {r1, r8, r9, fp, lr}
    3cd0:	00000025 	andeq	r0, r0, r5, lsr #32
    3cd4:	2a709102 	bcs	1c280e4 <__bss_end__+0xc0c0e4>
    3cd8:	4c020062 	stcmi	0, cr0, [r2], {98}	; 0x62
    3cdc:	00250903 	eoreq	r0, r5, r3, lsl #18
    3ce0:	91020000 	mrsls	r0, (UNDEF: 2)
    3ce4:	4e2f006c 	cdpmi	0, 2, cr0, cr15, cr12, {3}
    3ce8:	0200001f 	andeq	r0, r0, #31
    3cec:	811a0338 	tsthi	sl, r8, lsr r3
    3cf0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    3cf4:	60010025 	andvs	r0, r1, r5, lsr #32
    3cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    3cfc:	0014389c 	mulseq	r4, ip, r8
    3d00:	24c32500 	strbcs	r2, [r3], #1280	; 0x500
    3d04:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    3d08:	00a04303 	adceq	r4, r0, r3, lsl #6
    3d0c:	91020000 	mrsls	r0, (UNDEF: 2)
    3d10:	656d2874 	strbvs	r2, [sp, #-2164]!	; 0xfffff78c
    3d14:	3902006d 	stmdbcc	r2, {r0, r2, r3, r5, r6}
    3d18:	120d5403 	andne	r5, sp, #50331648	; 0x3000000
    3d1c:	91020000 	mrsls	r0, (UNDEF: 2)
    3d20:	93240070 			; <UNDEFINED> instruction: 0x93240070
    3d24:	0200001f 	andeq	r0, r0, #31
    3d28:	2c08032e 	stccs	3, cr0, [r8], {46}	; 0x2e
    3d2c:	00000000 	andeq	r0, r0, r0
    3d30:	68010025 	stmdavs	r1, {r0, r2, r5}
    3d34:	01000000 	mrseq	r0, (UNDEF: 0)
    3d38:	0014879c 	mulseq	r4, ip, r7
    3d3c:	1e862500 	cdpne	5, 8, cr2, cr6, cr0, {0}
    3d40:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    3d44:	120d4603 	andne	r4, sp, #3145728	; 0x300000
    3d48:	91030000 	mrsls	r0, (UNDEF: 3)
    3d4c:	82255ff4 	eorhi	r5, r5, #244, 30	; 0x3d0
    3d50:	0200001e 	andeq	r0, r0, #30
    3d54:	3837032f 	ldmdacc	r7!, {r0, r1, r2, r3, r5, r8, r9}
    3d58:	03000000 	movweq	r0, #0
    3d5c:	265ff091 			; <UNDEFINED> instruction: 0x265ff091
    3d60:	00002190 	muleq	r0, r0, r1
    3d64:	0a033102 	beq	d0174 <__core1_unwind_stub-0xf2fe8c>
    3d68:	00001213 	andeq	r1, r0, r3, lsl r2
    3d6c:	5ff89103 	svcpl	0x00f89103
    3d70:	1dca2e00 	stclne	14, cr2, [sl]
    3d74:	b2020000 	andlt	r0, r2, #0
    3d78:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    3d7c:	21d80000 	bicscs	r0, r8, r0
    3d80:	03280100 			; <UNDEFINED> instruction: 0x03280100
    3d84:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d88:	00001553 	andeq	r1, r0, r3, asr r5
    3d8c:	001e8625 	andseq	r8, lr, r5, lsr #12
    3d90:	02b20200 	adcseq	r0, r2, #0, 4
    3d94:	00120d56 	andseq	r0, r2, r6, asr sp
    3d98:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3d9c:	001e8225 	andseq	r8, lr, r5, lsr #4
    3da0:	02b30200 	adcseq	r0, r3, #0, 4
    3da4:	00003847 	andeq	r3, r0, r7, asr #16
    3da8:	50910200 	addspl	r0, r1, r0, lsl #4
    3dac:	00219025 	eoreq	r9, r1, r5, lsr #32
    3db0:	02b40200 	adcseq	r0, r4, #0, 4
    3db4:	0008bb41 	andeq	fp, r8, r1, asr #22
    3db8:	4c910200 	lfmmi	f0, 4, [r1], {0}
    3dbc:	0024aa26 	eoreq	sl, r4, r6, lsr #20
    3dc0:	02b60200 	adcseq	r0, r6, #0, 4
    3dc4:	00002c0c 	andeq	r2, r0, ip, lsl #24
    3dc8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3dcc:	0200692a 	andeq	r6, r0, #688128	; 0xa8000
    3dd0:	810e02b7 			; <UNDEFINED> instruction: 0x810e02b7
    3dd4:	02000000 	andeq	r0, r0, #0
    3dd8:	342c7091 	strtcc	r7, [ip], #-145	; 0xffffff6f
    3ddc:	50010022 	andpl	r0, r1, r2, lsr #32
    3de0:	2a000002 	bcs	3df0 <__core1_unwind_stub-0xffc210>
    3de4:	02006176 	andeq	r6, r0, #-2147483619	; 0x8000001d
    3de8:	a01a02c2 	andsge	r0, sl, r2, asr #5
    3dec:	02000000 	andeq	r0, r0, #0
    3df0:	702a6c91 	mlavc	sl, r1, ip, r6
    3df4:	c3020061 	movwgt	r0, #8289	; 0x2061
    3df8:	00a01a02 	adceq	r1, r0, r2, lsl #20
    3dfc:	91020000 	mrsls	r0, (UNDEF: 2)
    3e00:	02fc2668 	rscseq	r2, ip, #104, 12	; 0x6800000
    3e04:	c4020000 	strgt	r0, [r2], #-0
    3e08:	00811a02 	addeq	r1, r1, r2, lsl #20
    3e0c:	91020000 	mrsls	r0, (UNDEF: 2)
    3e10:	23982664 	orrscs	r2, r8, #100, 12	; 0x6400000
    3e14:	c5020000 	strgt	r0, [r2, #-0]
    3e18:	01021a02 	tsteq	r2, r2, lsl #20
    3e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    3e20:	232c2c63 			; <UNDEFINED> instruction: 0x232c2c63
    3e24:	00840100 	addeq	r0, r4, r0, lsl #2
    3e28:	ab260000 	blge	983e30 <__core1_unwind_stub-0x67c1d0>
    3e2c:	0200001d 	andeq	r0, r0, #29
    3e30:	811602dd 			; <UNDEFINED> instruction: 0x811602dd
    3e34:	02000000 	andeq	r0, r0, #0
    3e38:	00005c91 	muleq	r0, r1, ip
    3e3c:	24b22f00 	ldrtcs	r2, [r2], #3840	; 0xf00
    3e40:	a4020000 	strge	r0, [r2], #-0
    3e44:	00ac1802 	adceq	r1, ip, r2, lsl #16
    3e48:	21700000 	cmncs	r0, r0
    3e4c:	00680100 	rsbeq	r0, r8, r0, lsl #2
    3e50:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e54:	0000158f 	andeq	r1, r0, pc, lsl #11
    3e58:	00219025 	eoreq	r9, r1, r5, lsr #32
    3e5c:	02a40200 	adceq	r0, r4, #0, 4
    3e60:	0008bb3a 	andeq	fp, r8, sl, lsr fp
    3e64:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3e68:	00239825 	eoreq	r9, r3, r5, lsr #16
    3e6c:	02a40200 	adceq	r0, r4, #0, 4
    3e70:	00010254 	andeq	r0, r1, r4, asr r2
    3e74:	73910200 	orrsvc	r0, r1, #0, 4
    3e78:	20bf3000 	adcscs	r3, pc, r0
    3e7c:	8a020000 	bhi	83e84 <__core1_unwind_stub-0xf7c17c>
    3e80:	00ac1102 	adceq	r1, ip, r2, lsl #2
    3e84:	00000000 	andeq	r0, r0, r0
    3e88:	00340000 	eorseq	r0, r4, r0
    3e8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e90:	000015bb 			; <UNDEFINED> instruction: 0x000015bb
    3e94:	001ee226 	andseq	lr, lr, r6, lsr #4
    3e98:	028f0200 	addeq	r0, pc, #0, 4
    3e9c:	0000810e 	andeq	r8, r0, lr, lsl #2
    3ea0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3ea4:	257d3000 	ldrbcs	r3, [sp, #-0]!
    3ea8:	75020000 	strvc	r0, [r2, #-0]
    3eac:	00ac1102 	adceq	r1, ip, r2, lsl #2
    3eb0:	213c0000 	teqcs	ip, r0
    3eb4:	00340100 	eorseq	r0, r4, r0, lsl #2
    3eb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ebc:	000015e7 	andeq	r1, r0, r7, ror #11
    3ec0:	001ee226 	andseq	lr, lr, r6, lsr #4
    3ec4:	027a0200 	rsbseq	r0, sl, #0, 4
    3ec8:	0000810e 	andeq	r8, r0, lr, lsl #2
    3ecc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3ed0:	251a3000 	ldrcs	r3, [sl, #-0]
    3ed4:	62020000 	andvs	r0, r2, #0
    3ed8:	00ac1102 	adceq	r1, ip, r2, lsl #2
    3edc:	00000000 	andeq	r0, r0, r0
    3ee0:	00780000 	rsbseq	r0, r8, r0
    3ee4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ee8:	0000164d 	andeq	r1, r0, sp, asr #12
    3eec:	001e7b25 	andseq	r7, lr, r5, lsr #22
    3ef0:	02620200 	rsbeq	r0, r2, #0, 4
    3ef4:	00008d37 	andeq	r8, r0, r7, lsr sp
    3ef8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3efc:	001dc525 	andseq	ip, sp, r5, lsr #10
    3f00:	02620200 	rsbeq	r0, r2, #0, 4
    3f04:	00008d4e 	andeq	r8, r0, lr, asr #26
    3f08:	68910200 	ldmvs	r1, {r9}
    3f0c:	0022dd26 	eoreq	sp, r2, r6, lsr #26
    3f10:	02640200 	rsbeq	r0, r4, #0, 4
    3f14:	0000810e 	andeq	r8, r0, lr, lsl #2
    3f18:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3f1c:	001c7631 	andseq	r7, ip, r1, lsr r6
    3f20:	00000000 	andeq	r0, r0, r0
    3f24:	00000c00 	andeq	r0, r0, r0, lsl #24
    3f28:	02700200 	rsbseq	r0, r0, #0, 4
    3f2c:	1c833205 	sfmne	f3, 4, [r3], {5}
    3f30:	91020000 	mrsls	r0, (UNDEF: 2)
    3f34:	30000070 	andcc	r0, r0, r0, ror r0
    3f38:	00001e5a 	andeq	r1, r0, sl, asr lr
    3f3c:	11024102 	tstne	r2, r2, lsl #2
    3f40:	000000ac 	andeq	r0, r0, ip, lsr #1
    3f44:	0100205c 	qaddeq	r2, ip, r0
    3f48:	000000e0 	andeq	r0, r0, r0, ror #1
    3f4c:	16de9c01 	ldrbne	r9, [lr], r1, lsl #24
    3f50:	72250000 	eorvc	r0, r5, #0
    3f54:	02000021 	andeq	r0, r0, #33	; 0x21
    3f58:	de360241 	cdple	2, 3, cr0, cr6, cr1, {2}
    3f5c:	02000016 	andeq	r0, r0, #22
    3f60:	cd256491 	cfstrsgt	mvf6, [r5, #-580]!	; 0xfffffdbc
    3f64:	02000024 	andeq	r0, r0, #36	; 0x24
    3f68:	382f0242 	stmdacc	pc!, {r1, r6, r9}	; <UNPREDICTABLE>
    3f6c:	02000000 	andeq	r0, r0, #0
    3f70:	49266091 	stmdbmi	r6!, {r0, r4, r7, sp, lr}
    3f74:	0200001f 	andeq	r0, r0, #31
    3f78:	810e0244 	tsthi	lr, r4, asr #4
    3f7c:	02000000 	andeq	r0, r0, #0
    3f80:	692a7491 	stmdbvs	sl!, {r0, r4, r7, sl, ip, sp, lr}
    3f84:	02450200 	subeq	r0, r5, #0, 4
    3f88:	0000810e 	andeq	r8, r0, lr, lsl #2
    3f8c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3f90:	0020982b 	eoreq	r9, r0, fp, lsr #16
    3f94:	00006001 	andeq	r6, r0, r1
    3f98:	0016c300 	andseq	ip, r6, r0, lsl #6
    3f9c:	70612a00 	rsbvc	r2, r1, r0, lsl #20
    3fa0:	024e0200 	subeq	r0, lr, #0, 4
    3fa4:	00016417 	andeq	r6, r1, r7, lsl r4
    3fa8:	6f910200 	svcvs	0x00910200
    3fac:	1c5c3100 	ldfnee	f3, [ip], {-0}
    3fb0:	211c0000 	tstcs	ip, r0
    3fb4:	000c0100 	andeq	r0, ip, r0, lsl #2
    3fb8:	5d020000 	stcpl	0, cr0, [r2, #-0]
    3fbc:	69320502 	ldmdbvs	r2!, {r1, r8, sl}
    3fc0:	0200001c 	andeq	r0, r0, #28
    3fc4:	00006891 	muleq	r0, r1, r8
    3fc8:	0170040d 	cmneq	r0, sp, lsl #8
    3fcc:	a5300000 	ldrge	r0, [r0, #-0]!
    3fd0:	0200001e 	andeq	r0, r0, #30
    3fd4:	ac110225 	lfmge	f0, 4, [r1], {37}	; 0x25
    3fd8:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    3fdc:	b401001f 	strlt	r0, [r1], #-31	; 0xffffffe1
    3fe0:	01000000 	mrseq	r0, (UNDEF: 0)
    3fe4:	00175a9c 	mulseq	r7, ip, sl
    3fe8:	1f082500 	svcne	0x00082500
    3fec:	25020000 	strcs	r0, [r2, #-0]
    3ff0:	17612e02 	strbne	r2, [r1, -r2, lsl #28]!
    3ff4:	91020000 	mrsls	r0, (UNDEF: 2)
    3ff8:	2602256f 	strcs	r2, [r2], -pc, ror #10
    3ffc:	26020000 	strcs	r0, [r2], -r0
    4000:	17612e02 	strbne	r2, [r1, -r2, lsl #28]!
    4004:	91020000 	mrsls	r0, (UNDEF: 2)
    4008:	246e256e 	strbtcs	r2, [lr], #-1390	; 0xfffffa92
    400c:	27020000 	strcs	r0, [r2, -r0]
    4010:	008d3202 	addeq	r3, sp, r2, lsl #4
    4014:	91020000 	mrsls	r0, (UNDEF: 2)
    4018:	23e82668 	mvncs	r2, #104, 12	; 0x6800000
    401c:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    4020:	00810e02 	addeq	r0, r1, r2, lsl #28
    4024:	91020000 	mrsls	r0, (UNDEF: 2)
    4028:	1c243174 	stfnes	f3, [r4], #-464	; 0xfffffe30
    402c:	203c0000 	eorscs	r0, ip, r0
    4030:	000c0100 	andeq	r0, ip, r0, lsl #2
    4034:	3c020000 	stccc	0, cr0, [r2], {-0}
    4038:	31320502 	teqcc	r2, r2, lsl #10
    403c:	0200001c 	andeq	r0, r0, #28
    4040:	00007091 	muleq	r0, r1, r0
    4044:	34020105 	strcc	r0, [r2], #-261	; 0xfffffefb
    4048:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    404c:	0000175a 	andeq	r1, r0, sl, asr r7
    4050:	00238630 	eoreq	r8, r3, r0, lsr r6
    4054:	02120200 	andseq	r0, r2, #0, 4
    4058:	0000ac11 	andeq	sl, r0, r1, lsl ip
    405c:	00000000 	andeq	r0, r0, r0
    4060:	00007c00 	andeq	r7, r0, r0, lsl #24
    4064:	da9c0100 	ble	fe70446c <__shm_end__+0xbe70446c>
    4068:	25000017 	strcs	r0, [r0, #-23]	; 0xffffffe9
    406c:	00001129 	andeq	r1, r0, r9, lsr #2
    4070:	2f021202 	svccs	0x00021202
    4074:	00000d4d 	andeq	r0, r0, sp, asr #26
    4078:	26649102 	strbtcs	r9, [r4], -r2, lsl #2
    407c:	000022ee 	andeq	r2, r0, lr, ror #5
    4080:	0e021402 	cdpeq	4, 0, cr1, cr2, cr2, {0}
    4084:	00000081 	andeq	r0, r0, r1, lsl #1
    4088:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
    408c:	00001bcc 	andeq	r1, r0, ip, asr #23
    4090:	00000000 	andeq	r0, r0, r0
    4094:	0000000c 	andeq	r0, r0, ip
    4098:	0d021c02 	stceq	12, cr1, [r2, #-8]
    409c:	000017bf 			; <UNDEFINED> instruction: 0x000017bf
    40a0:	001bde34 	andseq	sp, fp, r4, lsr lr
    40a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    40a8:	1bb03100 	blne	fec104b0 <__shm_end__+0xbec104b0>
    40ac:	00000000 	andeq	r0, r0, r0
    40b0:	000c0000 	andeq	r0, ip, r0
    40b4:	20020000 	andcs	r0, r2, r0
    40b8:	be320502 	cdplt	5, 3, cr0, cr2, cr2, {0}
    40bc:	0200001b 	andeq	r0, r0, #27
    40c0:	00007091 	muleq	r0, r1, r0
    40c4:	001cb530 	andseq	fp, ip, r0, lsr r5
    40c8:	020b0200 	andeq	r0, fp, #0, 4
    40cc:	0002e508 	andeq	lr, r2, r8, lsl #10
    40d0:	00000000 	andeq	r0, r0, r0
    40d4:	00003800 	andeq	r3, r0, r0, lsl #16
    40d8:	209c0100 	addscs	r0, ip, r0, lsl #2
    40dc:	26000018 			; <UNDEFINED> instruction: 0x26000018
    40e0:	000022ee 	andeq	r2, r0, lr, ror #5
    40e4:	0e020d02 	cdpeq	13, 0, cr0, cr2, cr2, {0}
    40e8:	00000081 	andeq	r0, r0, r1, lsl #1
    40ec:	31749102 	cmncc	r4, r2, lsl #2
    40f0:	00001bcc 	andeq	r1, r0, ip, asr #23
    40f4:	00000000 	andeq	r0, r0, r0
    40f8:	0000000c 	andeq	r0, r0, ip
    40fc:	16020d02 	strne	r0, [r2], -r2, lsl #26
    4100:	001bde34 	andseq	sp, fp, r4, lsr lr
    4104:	70910200 	addsvc	r0, r1, r0, lsl #4
    4108:	b3300000 	teqlt	r0, #0
    410c:	0200001d 	andeq	r0, r0, #29
    4110:	ac1101f3 	ldfges	f0, [r1], {243}	; 0xf3
    4114:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    4118:	e001001e 	and	r0, r1, lr, lsl r0
    411c:	01000000 	mrseq	r0, (UNDEF: 0)
    4120:	0018b49c 	mulseq	r8, ip, r4
    4124:	11292500 			; <UNDEFINED> instruction: 0x11292500
    4128:	f3020000 	vhadd.u8	d0, d2, d0
    412c:	0d4d2f01 	stcleq	15, cr2, [sp, #-4]
    4130:	91020000 	mrsls	r0, (UNDEF: 2)
    4134:	23e8265c 	mvncs	r2, #92, 12	; 0x5c00000
    4138:	f5020000 			; <UNDEFINED> instruction: 0xf5020000
    413c:	00810e01 	addeq	r0, r1, r1, lsl #28
    4140:	91020000 	mrsls	r0, (UNDEF: 2)
    4144:	248b2674 	strcs	r2, [fp], #1652	; 0x674
    4148:	f6020000 			; <UNDEFINED> instruction: 0xf6020000
    414c:	00810e01 	addeq	r0, r1, r1, lsl #28
    4150:	91020000 	mrsls	r0, (UNDEF: 2)
    4154:	22e82670 	rsccs	r2, r8, #112, 12	; 0x7000000
    4158:	f7020000 			; <UNDEFINED> instruction: 0xf7020000
    415c:	00810e01 	addeq	r0, r1, r1, lsl #28
    4160:	91020000 	mrsls	r0, (UNDEF: 2)
    4164:	1c3e336c 	ldcne	3, cr3, [lr], #-432	; 0xfffffe50
    4168:	1ed80000 	cdpne	0, 13, cr0, cr8, cr0, {0}
    416c:	000c0100 	andeq	r0, ip, r0, lsl #2
    4170:	f5020000 			; <UNDEFINED> instruction: 0xf5020000
    4174:	18991601 	ldmne	r9, {r0, r9, sl, ip}
    4178:	4f340000 	svcmi	0x00340000
    417c:	0200001c 	andeq	r0, r0, #28
    4180:	31006891 			; <UNDEFINED> instruction: 0x31006891
    4184:	00001bec 	andeq	r1, r0, ip, ror #23
    4188:	01001f88 	smlabbeq	r0, r8, pc, r1	; <UNPREDICTABLE>
    418c:	0000000c 	andeq	r0, r0, ip
    4190:	05020602 	streq	r0, [r2, #-1538]	; 0xfffff9fe
    4194:	001bf932 	andseq	pc, fp, r2, lsr r9	; <UNPREDICTABLE>
    4198:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    419c:	e7300000 	ldr	r0, [r0, -r0]!
    41a0:	0200001f 	andeq	r0, r0, #31
    41a4:	e50801ea 	str	r0, [r8, #-490]	; 0xfffffe16
    41a8:	00000002 	andeq	r0, r0, r2
    41ac:	74000000 	strvc	r0, [r0], #-0
    41b0:	01000000 	mrseq	r0, (UNDEF: 0)
    41b4:	0019389c 	mulseq	r9, ip, r8
    41b8:	23e82600 	mvncs	r2, #0, 12
    41bc:	ec020000 	stc	0, cr0, [r2], {-0}
    41c0:	00810e01 	addeq	r0, r1, r1, lsl #28
    41c4:	91020000 	mrsls	r0, (UNDEF: 2)
    41c8:	248b2674 	strcs	r2, [fp], #1652	; 0x674
    41cc:	ed020000 	stc	0, cr0, [r2, #-0]
    41d0:	00810e01 	addeq	r0, r1, r1, lsl #28
    41d4:	91020000 	mrsls	r0, (UNDEF: 2)
    41d8:	22e82670 	rsccs	r2, r8, #112, 12	; 0x7000000
    41dc:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
    41e0:	00810e01 	addeq	r0, r1, r1, lsl #28
    41e4:	91020000 	mrsls	r0, (UNDEF: 2)
    41e8:	1c3e336c 	ldcne	3, cr3, [lr], #-432	; 0xfffffe50
    41ec:	00000000 	andeq	r0, r0, r0
    41f0:	000c0000 	andeq	r0, ip, r0
    41f4:	ec020000 	stc	0, cr0, [r2], {-0}
    41f8:	191d1601 	ldmdbne	sp, {r0, r9, sl, ip}
    41fc:	4f340000 	svcmi	0x00340000
    4200:	0200001c 	andeq	r0, r0, #28
    4204:	31006491 			; <UNDEFINED> instruction: 0x31006491
    4208:	00001c06 	andeq	r1, r0, r6, lsl #24
    420c:	00000000 	andeq	r0, r0, r0
    4210:	0000000c 	andeq	r0, r0, ip
    4214:	1601ee02 	strne	lr, [r1], -r2, lsl #28
    4218:	001c1734 	andseq	r1, ip, r4, lsr r7
    421c:	68910200 	ldmvs	r1, {r9}
    4220:	b6240000 	strtlt	r0, [r4], -r0
    4224:	02000021 	andeq	r0, r0, #33	; 0x21
    4228:	ac1101de 	ldfges	f0, [r1], {222}	; 0xde
    422c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    4230:	5001001e 	andpl	r0, r1, lr, lsl r0
    4234:	01000000 	mrseq	r0, (UNDEF: 0)
    4238:	00199c9c 	mulseq	r9, ip, ip
    423c:	2cf52600 	ldclcs	6, cr2, [r5]
    4240:	e0020000 	and	r0, r2, r0
    4244:	00810e01 	addeq	r0, r1, r1, lsl #28
    4248:	91020000 	mrsls	r0, (UNDEF: 2)
    424c:	1caa3374 	stcne	3, cr3, [sl], #464	; 0x1d0
    4250:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    4254:	000c0100 	andeq	r0, ip, r0, lsl #2
    4258:	e3020000 	movw	r0, #8192	; 0x2000
    425c:	19810d01 	stmibne	r1, {r0, r8, sl, fp}
    4260:	bb340000 	bllt	d04268 <__core1_unwind_stub-0x2fbd98>
    4264:	0200001c 	andeq	r0, r0, #28
    4268:	31006c91 			; <UNDEFINED> instruction: 0x31006c91
    426c:	00001c90 	muleq	r0, r0, ip
    4270:	01001eac 	smlatbeq	r0, ip, lr, r1
    4274:	0000000c 	andeq	r0, r0, ip
    4278:	0501e502 	streq	lr, [r1, #-1282]	; 0xfffffafe
    427c:	001c9d32 	andseq	r9, ip, r2, lsr sp
    4280:	70910200 	addsvc	r0, r1, r0, lsl #4
    4284:	f4240000 	vld4.8	{d0-d3}, [r4], r0
    4288:	02000022 	andeq	r0, r0, #34	; 0x22
    428c:	ac1101d1 	ldfges	f0, [r1], {209}	; 0xd1
    4290:	00000000 	andeq	r0, r0, r0
    4294:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4298:	01000000 	mrseq	r0, (UNDEF: 0)
    429c:	001a009c 	mulseq	sl, ip, r0
    42a0:	2cf52600 	ldclcs	6, cr2, [r5]
    42a4:	d3020000 	movwle	r0, #8192	; 0x2000
    42a8:	00810e01 	addeq	r0, r1, r1, lsl #28
    42ac:	91020000 	mrsls	r0, (UNDEF: 2)
    42b0:	1caa3374 	stcne	3, cr3, [sl], #464	; 0x1d0
    42b4:	00000000 	andeq	r0, r0, r0
    42b8:	000c0000 	andeq	r0, ip, r0
    42bc:	d3020000 	movwle	r0, #8192	; 0x2000
    42c0:	19e51601 	stmibne	r5!, {r0, r9, sl, ip}^
    42c4:	bb340000 	bllt	d042cc <__core1_unwind_stub-0x2fbd34>
    42c8:	0200001c 	andeq	r0, r0, #28
    42cc:	31007091 	swpcc	r7, r1, [r0]
    42d0:	00001c90 	muleq	r0, r0, ip
    42d4:	00000000 	andeq	r0, r0, r0
    42d8:	0000000c 	andeq	r0, r0, ip
    42dc:	0501d902 	streq	sp, [r1, #-2306]	; 0xfffff6fe
    42e0:	001c9d32 	andseq	r9, ip, r2, lsr sp
    42e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    42e8:	46300000 	ldrtmi	r0, [r0], -r0
    42ec:	02000021 	andeq	r0, r0, #33	; 0x21
    42f0:	ac110190 	ldfges	f0, [r1], {144}	; 0x90
    42f4:	00000000 	andeq	r0, r0, r0
    42f8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    42fc:	01000001 	tsteq	r0, r1
    4300:	001aa39c 	mulseq	sl, ip, r3
    4304:	24932500 	ldrcs	r2, [r3], #1280	; 0x500
    4308:	90020000 	andls	r0, r2, r0
    430c:	0e673701 	cdpeq	7, 6, cr3, cr7, cr1, {0}
    4310:	91020000 	mrsls	r0, (UNDEF: 2)
    4314:	6176285c 	cmnvs	r6, ip, asr r8
    4318:	01910200 	orrseq	r0, r1, r0, lsl #4
    431c:	000d4d33 	andeq	r4, sp, r3, lsr sp
    4320:	58910200 	ldmpl	r1, {r9}
    4324:	002c8e25 	eoreq	r8, ip, r5, lsr #28
    4328:	01920200 	orrseq	r0, r2, r0, lsl #4
    432c:	00008d36 	andeq	r8, r0, r6, lsr sp
    4330:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    4334:	00223a26 	eoreq	r3, r2, r6, lsr #20
    4338:	01940200 	orrseq	r0, r4, r0, lsl #4
    433c:	00175a0a 	andseq	r5, r7, sl, lsl #20
    4340:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4344:	001c8826 	andseq	r8, ip, r6, lsr #16
    4348:	01950200 	orrseq	r0, r5, r0, lsl #4
    434c:	0000810e 	andeq	r8, r0, lr, lsl #2
    4350:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4354:	00249826 	eoreq	r9, r4, r6, lsr #16
    4358:	01960200 	orrseq	r0, r6, r0, lsl #4
    435c:	000cec0f 	andeq	lr, ip, pc, lsl #24
    4360:	68910200 	ldmvs	r1, {r9}
    4364:	00232926 	eoreq	r2, r3, r6, lsr #18
    4368:	01970200 	orrseq	r0, r7, r0, lsl #4
    436c:	0000810e 	andeq	r8, r0, lr, lsl #2
    4370:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4374:	0000002c 	andeq	r0, r0, ip, lsr #32
    4378:	00004400 	andeq	r4, r0, r0, lsl #8
    437c:	00692a00 	rsbeq	r2, r9, r0, lsl #20
    4380:	0d01c602 	stceq	6, cr12, [r1, #-8]
    4384:	00000025 	andeq	r0, r0, r5, lsr #32
    4388:	00709102 	rsbseq	r9, r0, r2, lsl #2
    438c:	1f2c3000 	svcne	0x002c3000
    4390:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    4394:	00ac1101 	adceq	r1, ip, r1, lsl #2
    4398:	00000000 	andeq	r0, r0, r0
    439c:	01500000 	cmpeq	r0, r0
    43a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    43a4:	00001b1c 	andeq	r1, r0, ip, lsl fp
    43a8:	00249325 	eoreq	r9, r4, r5, lsr #6
    43ac:	01490200 	mrseq	r0, (UNDEF: 105)
    43b0:	000cec31 	andeq	lr, ip, r1, lsr ip
    43b4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    43b8:	00617628 	rsbeq	r7, r1, r8, lsr #12
    43bc:	33014a02 	movwcc	r4, #6658	; 0x1a02
    43c0:	00000d4d 	andeq	r0, r0, sp, asr #26
    43c4:	25609102 	strbcs	r9, [r0, #-258]!	; 0xfffffefe
    43c8:	00002c8e 	andeq	r2, r0, lr, lsl #25
    43cc:	36014b02 	strcc	r4, [r1], -r2, lsl #22
    43d0:	0000008d 	andeq	r0, r0, sp, lsl #1
    43d4:	2a5c9102 	bcs	17287e4 <__bss_end__+0x70c7e4>
    43d8:	4d020069 	stcmi	0, cr0, [r2, #-420]	; 0xfffffe5c
    43dc:	00250901 	eoreq	r0, r5, r1, lsl #18
    43e0:	91020000 	mrsls	r0, (UNDEF: 2)
    43e4:	23292674 			; <UNDEFINED> instruction: 0x23292674
    43e8:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    43ec:	00810e01 	addeq	r0, r1, r1, lsl #28
    43f0:	91020000 	mrsls	r0, (UNDEF: 2)
    43f4:	210a266c 	tstcs	sl, ip, ror #12
    43f8:	4f020000 	svcmi	0x00020000
    43fc:	175a0a01 	ldrbne	r0, [sl, -r1, lsl #20]
    4400:	91020000 	mrsls	r0, (UNDEF: 2)
    4404:	0d240073 	stceq	0, cr0, [r4, #-460]!	; 0xfffffe34
    4408:	02000020 	andeq	r0, r0, #32
    440c:	ac110134 	ldfges	f0, [r1], {52}	; 0x34
    4410:	ec000000 	stc	0, cr0, [r0], {-0}
    4414:	8c01001d 	stchi	0, cr0, [r1], {29}
    4418:	01000000 	mrseq	r0, (UNDEF: 0)
    441c:	001b829c 	mulseq	fp, ip, r2
    4420:	24932500 	ldrcs	r2, [r3], #1280	; 0x500
    4424:	34020000 	strcc	r0, [r2], #-0
    4428:	0cec2d01 	stcleq	13, cr2, [ip], #4
    442c:	91020000 	mrsls	r0, (UNDEF: 2)
    4430:	23e82664 	mvncs	r2, #100, 12	; 0x6400000
    4434:	36020000 	strcc	r0, [r2], -r0
    4438:	00810e01 	addeq	r0, r1, r1, lsl #28
    443c:	91020000 	mrsls	r0, (UNDEF: 2)
    4440:	248b2674 	strcs	r2, [fp], #1652	; 0x674
    4444:	37020000 	strcc	r0, [r2, -r0]
    4448:	00810e01 	addeq	r0, r1, r1, lsl #28
    444c:	91020000 	mrsls	r0, (UNDEF: 2)
    4450:	1c3e3170 	ldfnes	f3, [lr], #-448	; 0xfffffe40
    4454:	1dfc0000 	ldclne	0, cr0, [ip]
    4458:	000c0100 	andeq	r0, ip, r0, lsl #2
    445c:	36020000 	strcc	r0, [r2], -r0
    4460:	4f341601 	svcmi	0x00341601
    4464:	0200001c 	andeq	r0, r0, #28
    4468:	00006c91 	muleq	r0, r1, ip
    446c:	0020b035 	eoreq	fp, r0, r5, lsr r0
    4470:	012f0200 			; <UNDEFINED> instruction: 0x012f0200
    4474:	0000ac11 	andeq	sl, r0, r1, lsl ip
    4478:	00000000 	andeq	r0, r0, r0
    447c:	00001c00 	andeq	r1, r0, r0, lsl #24
    4480:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    4484:	000021e3 	andeq	r2, r0, r3, ror #3
    4488:	11012a02 	tstne	r1, r2, lsl #20
    448c:	000000ac 	andeq	r0, r0, ip, lsr #1
    4490:	01001dd0 	ldrdeq	r1, [r0, -r0]
    4494:	0000001c 	andeq	r0, r0, ip, lsl r0
    4498:	a1369c01 	teqge	r6, r1, lsl #24
    449c:	02000023 	andeq	r0, r0, #35	; 0x23
    44a0:	0335011c 	teqeq	r5, #28, 2
    44a4:	00001bcc 	andeq	r1, r0, ip, asr #23
    44a8:	0022ee37 	eoreq	lr, r2, r7, lsr lr
    44ac:	011c0200 	tsteq	ip, r0, lsl #4
    44b0:	0000814f 	andeq	r8, r0, pc, asr #2
    44b4:	8d380000 	ldchi	0, cr0, [r8, #-0]
    44b8:	02000022 	andeq	r0, r0, #34	; 0x22
    44bc:	8139010a 	teqhi	r9, sl, lsl #2
    44c0:	03000000 	movweq	r0, #0
    44c4:	00001bec 	andeq	r1, r0, ip, ror #23
    44c8:	0022ee39 	eoreq	lr, r2, r9, lsr lr
    44cc:	010f0200 	mrseq	r0, (UNDEF: 47)
    44d0:	0000810e 	andeq	r8, r0, lr, lsl #2
    44d4:	6b3a0000 	blvs	e844dc <__core1_unwind_stub-0x17bb24>
    44d8:	02000022 	andeq	r0, r0, #34	; 0x22
    44dc:	060335fc 			; <UNDEFINED> instruction: 0x060335fc
    44e0:	3b00001c 	blcc	4558 <__core1_unwind_stub-0xffbaa8>
    44e4:	000022e8 	andeq	r2, r0, r8, ror #5
    44e8:	814ffc02 	cmphi	pc, r2, lsl #24	; <UNPREDICTABLE>
    44ec:	00000000 	andeq	r0, r0, r0
    44f0:	001d9a3c 	andseq	r9, sp, ip, lsr sl
    44f4:	39ea0200 	stmibcc	sl!, {r9}^
    44f8:	00000081 	andeq	r0, r0, r1, lsl #1
    44fc:	001c2403 	andseq	r2, ip, r3, lsl #8
    4500:	22e83d00 	rsccs	r3, r8, #0, 26
    4504:	ef020000 	svc	0x00020000
    4508:	0000810e 	andeq	r8, r0, lr, lsl #2
    450c:	f53a0000 			; <UNDEFINED> instruction: 0xf53a0000
    4510:	0200001d 	andeq	r0, r0, #29
    4514:	3e0335dc 	mcrcc	5, 0, r3, cr3, cr12, {6}
    4518:	3b00001c 	blcc	4590 <__core1_unwind_stub-0xffba70>
    451c:	000023e8 	andeq	r2, r0, r8, ror #7
    4520:	814fdc02 	cmphi	pc, r2, lsl #24
    4524:	00000000 	andeq	r0, r0, r0
    4528:	001e103c 	andseq	r1, lr, ip, lsr r0
    452c:	39ca0200 	stmibcc	sl, {r9}^
    4530:	00000081 	andeq	r0, r0, r1, lsl #1
    4534:	001c5c03 	andseq	r5, ip, r3, lsl #24
    4538:	23e83d00 	mvncs	r3, #0, 26
    453c:	cf020000 	svcgt	0x00020000
    4540:	0000810e 	andeq	r8, r0, lr, lsl #2
    4544:	b53a0000 	ldrlt	r0, [sl, #-0]!
    4548:	0200001f 	andeq	r0, r0, #31
    454c:	760335bc 			; <UNDEFINED> instruction: 0x760335bc
    4550:	3b00001c 	blcc	45c8 <__core1_unwind_stub-0xffba38>
    4554:	00001f49 	andeq	r1, r0, r9, asr #30
    4558:	814ebc02 	cmphi	lr, r2, lsl #24
    455c:	00000000 	andeq	r0, r0, r0
    4560:	00215c3a 	eoreq	r5, r1, sl, lsr ip
    4564:	359a0200 	ldrcc	r0, [sl, #512]	; 0x200
    4568:	001c9003 	andseq	r9, ip, r3
    456c:	22dd3b00 	sbcscs	r3, sp, #0, 22
    4570:	9a020000 	bls	84578 <__core1_unwind_stub-0xf7ba88>
    4574:	00008154 	andeq	r8, r0, r4, asr r1
    4578:	923a0000 	eorsls	r0, sl, #0
    457c:	0200001c 	andeq	r0, r0, #28
    4580:	aa033578 	bge	d1b68 <__core1_unwind_stub-0xf2e498>
    4584:	3b00001c 	blcc	45fc <__core1_unwind_stub-0xffba04>
    4588:	00002cf5 	strdeq	r2, [r0], -r5
    458c:	814f7802 	cmphi	pc, r2, lsl #16
    4590:	00000000 	andeq	r0, r0, r0
    4594:	001e493c 	andseq	r4, lr, ip, lsr r9
    4598:	39660200 	stmdbcc	r6!, {r9}^
    459c:	00000081 	andeq	r0, r0, r1, lsl #1
    45a0:	001cc803 	andseq	ip, ip, r3, lsl #16
    45a4:	2cf53d00 	ldclcs	13, cr3, [r5]
    45a8:	6b020000 	blvs	845b0 <__core1_unwind_stub-0xf7ba50>
    45ac:	0000810e 	andeq	r8, r0, lr, lsl #2
    45b0:	173e0000 	ldrne	r0, [lr, -r0]!
    45b4:	01000021 	tsteq	r0, r1, lsr #32
    45b8:	00251539 	eoreq	r1, r5, r9, lsr r5
    45bc:	1dac0000 	stcne	0, cr0, [ip]
    45c0:	00240100 	eoreq	r0, r4, r0, lsl #2
    45c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    45c8:	001f423f 	andseq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
    45cc:	45390100 	ldrmi	r0, [r9, #-256]!	; 0xffffff00
    45d0:	00000366 	andeq	r0, r0, r6, ror #6
    45d4:	40709102 	rsbsmi	r9, r0, r2, lsl #2
    45d8:	10a00000 	adcne	r0, r0, r0
    45dc:	00040000 	andeq	r0, r4, r0
    45e0:	000008fa 	strdeq	r0, [r0], -sl
    45e4:	003a0104 	eorseq	r0, sl, r4, lsl #2
    45e8:	7f0c0000 	svcvc	0x000c0000
    45ec:	df000026 	svcle	0x00000026
    45f0:	6000000b 	andvs	r0, r0, fp
    45f4:	00000004 	andeq	r0, r0, r4
    45f8:	54000000 	strpl	r0, [r0], #-0
    45fc:	02000022 	andeq	r0, r0, #34	; 0x22
    4600:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4604:	0d030074 	stceq	0, cr0, [r3, #-464]	; 0xfffffe30
    4608:	02000010 	andeq	r0, r0, #16
    460c:	003817d1 	ldrsbteq	r1, [r8], -r1
    4610:	04040000 	streq	r0, [r4], #-0
    4614:	000b4b07 	andeq	r4, fp, r7, lsl #22
    4618:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    461c:	0000080b 	andeq	r0, r0, fp, lsl #16
    4620:	a3040804 	movwge	r0, #18436	; 0x4804
    4624:	0400000a 	streq	r0, [r0], #-10
    4628:	04080601 	streq	r0, [r8], #-1537	; 0xfffff9ff
    462c:	02040000 	andeq	r0, r4, #0
    4630:	000d7005 	andeq	r7, sp, r5
    4634:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4638:	00000810 	andeq	r0, r0, r0, lsl r8
    463c:	000d9a03 	andeq	r9, sp, r3, lsl #20
    4640:	182b0300 	stmdane	fp!, {r8, r9}
    4644:	0000003f 	andeq	r0, r0, pc, lsr r0
    4648:	06080104 	streq	r0, [r8], -r4, lsl #2
    464c:	04000004 	streq	r0, [r0], #-4
    4650:	0ebd0702 	cdpeq	7, 11, cr0, cr13, cr2, {0}
    4654:	04040000 	streq	r0, [r4], #-0
    4658:	000b4607 	andeq	r4, fp, r7, lsl #12
    465c:	0d990300 	ldceq	3, cr0, [r9]
    4660:	37030000 	strcc	r0, [r3, -r0]
    4664:	00008f19 	andeq	r8, r0, r9, lsl pc
    4668:	07080400 	streq	r0, [r8, -r0, lsl #8]
    466c:	00000b41 	andeq	r0, r0, r1, asr #22
    4670:	0026b703 	eoreq	fp, r6, r3, lsl #14
    4674:	1b280400 	blne	a0567c <__core1_unwind_stub-0x5fa984>
    4678:	000000a2 	andeq	r0, r0, r2, lsr #1
    467c:	00264305 	eoreq	r4, r6, r5, lsl #6
    4680:	000a0400 	andeq	r0, sl, r0, lsl #8
    4684:	000000b9 	strheq	r0, [r0], -r9
    4688:	00273a06 	eoreq	r3, r7, r6, lsl #20
    468c:	0000b900 	andeq	fp, r0, r0, lsl #18
    4690:	07000000 	streq	r0, [r0, -r0]
    4694:	26450304 	strbcs	r0, [r5], -r4, lsl #6
    4698:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    469c:	00009618 	andeq	r9, r0, r8, lsl r6
    46a0:	0c970800 	ldceq	8, cr0, [r7], {0}
    46a4:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    46a8:	00381701 	eorseq	r1, r8, r1, lsl #14
    46ac:	a4030000 	strge	r0, [r3], #-0
    46b0:	0600000e 	streq	r0, [r0], -lr
    46b4:	005b0e2e 	subseq	r0, fp, lr, lsr #28
    46b8:	e3030000 	movw	r0, #12288	; 0x3000
    46bc:	0600000a 	streq	r0, [r0], -sl
    46c0:	005b0e74 	subseq	r0, fp, r4, ror lr
    46c4:	04090000 	streq	r0, [r9], #-0
    46c8:	0e03a506 	cfsh32eq	mvfx10, mvfx3, #6
    46cc:	0a000001 	beq	46d8 <__core1_unwind_stub-0xffb928>
    46d0:	0000023a 	andeq	r0, r0, sl, lsr r2
    46d4:	c70ca706 	strgt	sl, [ip, -r6, lsl #14]
    46d8:	0a000000 	beq	46e0 <__core1_unwind_stub-0xffb920>
    46dc:	00000aeb 	andeq	r0, r0, fp, ror #21
    46e0:	0e13a806 	cdpeq	8, 1, cr10, cr3, cr6, {0}
    46e4:	00000001 	andeq	r0, r0, r1
    46e8:	00006e0b 	andeq	r6, r0, fp, lsl #28
    46ec:	00011e00 	andeq	r1, r1, r0, lsl #28
    46f0:	00380c00 	eorseq	r0, r8, r0, lsl #24
    46f4:	00030000 	andeq	r0, r3, r0
    46f8:	a206080d 	andge	r0, r6, #851968	; 0xd0000
    46fc:	00014209 	andeq	r4, r1, r9, lsl #4
    4700:	0a6f0e00 	beq	1bc7f08 <__bss_end__+0xbabf08>
    4704:	a4060000 	strge	r0, [r6], #-0
    4708:	00002507 	andeq	r2, r0, r7, lsl #10
    470c:	0b0e0000 	bleq	384714 <__core1_unwind_stub-0xc7b8ec>
    4710:	06000000 	streq	r0, [r0], -r0
    4714:	00ec05a9 	rsceq	r0, ip, r9, lsr #11
    4718:	00040000 	andeq	r0, r4, r0
    471c:	000c2f03 	andeq	r2, ip, r3, lsl #30
    4720:	03aa0600 			; <UNDEFINED> instruction: 0x03aa0600
    4724:	0000011e 	andeq	r0, r0, lr, lsl r1
    4728:	000e5803 	andeq	r5, lr, r3, lsl #16
    472c:	19160700 	ldmdbne	r6, {r8, r9, sl}
    4730:	0000007c 	andeq	r0, r0, ip, ror r0
    4734:	0006b903 	andeq	fp, r6, r3, lsl #18
    4738:	0d0c0800 	stceq	8, cr0, [ip, #-0]
    473c:	00000025 	andeq	r0, r0, r5, lsr #32
    4740:	000bd603 	andeq	sp, fp, r3, lsl #12
    4744:	1b230700 	blne	8c634c <__core1_unwind_stub-0x739cb4>
    4748:	0000015a 	andeq	r0, r0, sl, asr r1
    474c:	00070e0f 	andeq	r0, r7, pc, lsl #28
    4750:	34071800 	strcc	r1, [r7], #-2048	; 0xfffff800
    4754:	0001cc08 	andeq	ip, r1, r8, lsl #24
    4758:	0a3a0e00 	beq	e87f60 <__core1_unwind_stub-0x1780a0>
    475c:	36070000 	strcc	r0, [r7], -r0
    4760:	0001cc13 	andeq	ip, r1, r3, lsl ip
    4764:	5f100000 	svcpl	0x00100000
    4768:	3707006b 	strcc	r0, [r7, -fp, rrx]
    476c:	00002507 	andeq	r2, r0, r7, lsl #10
    4770:	670e0400 	strvs	r0, [lr, -r0, lsl #8]
    4774:	07000007 	streq	r0, [r0, -r7]
    4778:	00250b37 	eoreq	r0, r5, r7, lsr fp
    477c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    4780:	000008c5 	andeq	r0, r0, r5, asr #17
    4784:	25143707 	ldrcs	r3, [r4, #-1799]	; 0xfffff8f9
    4788:	0c000000 	stceq	0, cr0, [r0], {-0}
    478c:	0006070e 	andeq	r0, r6, lr, lsl #14
    4790:	1b370700 	blne	dc6398 <__core1_unwind_stub-0x239c68>
    4794:	00000025 	andeq	r0, r0, r5, lsr #32
    4798:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    479c:	0b380700 	bleq	e063a4 <__core1_unwind_stub-0x1f9c5c>
    47a0:	000001d2 	ldrdeq	r0, [r0], -r2
    47a4:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
    47a8:	00000172 	andeq	r0, r0, r2, ror r1
    47ac:	00014e0b 	andeq	r4, r1, fp, lsl #28
    47b0:	0001e200 	andeq	lr, r1, r0, lsl #4
    47b4:	00380c00 	eorseq	r0, r8, r0, lsl #24
    47b8:	00000000 	andeq	r0, r0, r0
    47bc:	0001400f 	andeq	r4, r1, pc
    47c0:	3c072400 	cfstrscc	mvf2, [r7], {-0}
    47c4:	00026508 	andeq	r6, r2, r8, lsl #10
    47c8:	015c0e00 	cmpeq	ip, r0, lsl #28
    47cc:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    47d0:	00002509 	andeq	r2, r0, r9, lsl #10
    47d4:	ae0e0000 	cdpge	0, 0, cr0, cr14, cr0, {0}
    47d8:	0700000f 	streq	r0, [r0, -pc]
    47dc:	0025093f 	eoreq	r0, r5, pc, lsr r9
    47e0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    47e4:	00000ed0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    47e8:	25094007 	strcs	r4, [r9, #-7]
    47ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    47f0:	000a010e 	andeq	r0, sl, lr, lsl #2
    47f4:	09410700 	stmdbeq	r1, {r8, r9, sl}^
    47f8:	00000025 	andeq	r0, r0, r5, lsr #32
    47fc:	03920e0c 	orrseq	r0, r2, #12, 28	; 0xc0
    4800:	42070000 	andmi	r0, r7, #0
    4804:	00002509 	andeq	r2, r0, r9, lsl #10
    4808:	f30e1000 	vhadd.u8	d1, d14, d0
    480c:	0700000d 	streq	r0, [r0, -sp]
    4810:	00250943 	eoreq	r0, r5, r3, asr #18
    4814:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    4818:	00000a81 	andeq	r0, r0, r1, lsl #21
    481c:	25094407 	strcs	r4, [r9, #-1031]	; 0xfffffbf9
    4820:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4824:	000aaf0e 	andeq	sl, sl, lr, lsl #30
    4828:	09450700 	stmdbeq	r5, {r8, r9, sl}^
    482c:	00000025 	andeq	r0, r0, r5, lsr #32
    4830:	0f740e1c 	svceq	0x00740e1c
    4834:	46070000 	strmi	r0, [r7], -r0
    4838:	00002509 	andeq	r2, r0, r9, lsl #10
    483c:	12002000 	andne	r2, r0, #0
    4840:	00000263 	andeq	r0, r0, r3, ror #4
    4844:	4f070108 	svcmi	0x00070108
    4848:	0002aa08 	andeq	sl, r2, r8, lsl #20
    484c:	0f600e00 	svceq	0x00600e00
    4850:	50070000 	andpl	r0, r7, r0
    4854:	0002aa0a 	andeq	sl, r2, sl, lsl #20
    4858:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    485c:	0700000b 	streq	r0, [r0, -fp]
    4860:	02aa0951 	adceq	r0, sl, #1327104	; 0x144000
    4864:	13800000 	orrne	r0, r0, #0
    4868:	00000de3 	andeq	r0, r0, r3, ror #27
    486c:	4e0a5307 	cdpmi	3, 0, cr5, cr10, cr7, {0}
    4870:	00000001 	andeq	r0, r0, r1
    4874:	0e1f1301 	cdpeq	3, 1, cr1, cr15, cr1, {0}
    4878:	56070000 	strpl	r0, [r7], -r0
    487c:	00014e0a 	andeq	r4, r1, sl, lsl #28
    4880:	00010400 	andeq	r0, r1, r0, lsl #8
    4884:	0000b90b 	andeq	fp, r0, fp, lsl #18
    4888:	0002ba00 	andeq	fp, r2, r0, lsl #20
    488c:	00380c00 	eorseq	r0, r8, r0, lsl #24
    4890:	001f0000 	andseq	r0, pc, r0
    4894:	000a5a12 	andeq	r5, sl, r2, lsl sl
    4898:	07019000 	streq	r9, [r1, -r0]
    489c:	02fd0862 	rscseq	r0, sp, #6422528	; 0x620000
    48a0:	3a0e0000 	bcc	3848a8 <__core1_unwind_stub-0xc7b758>
    48a4:	0700000a 	streq	r0, [r0, -sl]
    48a8:	02fd1263 	rscseq	r1, sp, #805306374	; 0x30000006
    48ac:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    48b0:	00000e13 	andeq	r0, r0, r3, lsl lr
    48b4:	25066407 	strcs	r6, [r6, #-1031]	; 0xfffffbf9
    48b8:	04000000 	streq	r0, [r0], #-0
    48bc:	0004990e 	andeq	r9, r4, lr, lsl #18
    48c0:	09660700 	stmdbeq	r6!, {r8, r9, sl}^
    48c4:	00000303 	andeq	r0, r0, r3, lsl #6
    48c8:	02630e08 	rsbeq	r0, r3, #8, 28	; 0x80
    48cc:	67070000 	strvs	r0, [r7, -r0]
    48d0:	0002651e 	andeq	r6, r2, lr, lsl r5
    48d4:	11008800 	tstne	r0, r0, lsl #16
    48d8:	0002ba04 	andeq	fp, r2, r4, lsl #20
    48dc:	03130b00 	tsteq	r3, #0, 22
    48e0:	03130000 	tsteq	r3, #0
    48e4:	380c0000 	stmdacc	ip, {}	; <UNPREDICTABLE>
    48e8:	1f000000 	svcne	0x00000000
    48ec:	19041100 	stmdbne	r4, {r8, ip}
    48f0:	14000003 	strne	r0, [r0], #-3
    48f4:	000e180f 	andeq	r1, lr, pc, lsl #16
    48f8:	7a070800 	bvc	1c6900 <__core1_unwind_stub-0xe39700>
    48fc:	00034208 	andeq	r4, r3, r8, lsl #4
    4900:	0bb40e00 	bleq	fed08108 <__shm_end__+0xbed08108>
    4904:	7b070000 	blvc	1c490c <__core1_unwind_stub-0xe3b6f4>
    4908:	00034211 	andeq	r4, r3, r1, lsl r2
    490c:	fb0e0000 	blx	384916 <__core1_unwind_stub-0xc7b6ea>
    4910:	07000002 	streq	r0, [r0, -r2]
    4914:	0025067c 	eoreq	r0, r5, ip, ror r6
    4918:	00040000 	andeq	r0, r4, r0
    491c:	006e0411 	rsbeq	r0, lr, r1, lsl r4
    4920:	870f0000 	strhi	r0, [pc, -r0]
    4924:	68000006 	stmdavs	r0, {r1, r2}
    4928:	8b08ba07 	blhi	23314c <__core1_unwind_stub-0xdcceb4>
    492c:	10000004 	andne	r0, r0, r4
    4930:	0700705f 	smlsdeq	r0, pc, r0, r7	; <UNPREDICTABLE>
    4934:	034212bb 	movteq	r1, #8891	; 0x22bb
    4938:	10000000 	andne	r0, r0, r0
    493c:	0700725f 	smlsdeq	r0, pc, r2, r7	; <UNPREDICTABLE>
    4940:	002507bc 	strhteq	r0, [r5], -ip
    4944:	10040000 	andne	r0, r4, r0
    4948:	0700775f 	smlsdeq	r0, pc, r7, r7	; <UNPREDICTABLE>
    494c:	002507bd 	strhteq	r0, [r5], -sp
    4950:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    4954:	00000a40 	andeq	r0, r0, r0, asr #20
    4958:	5409be07 	strpl	fp, [r9], #-3591	; 0xfffff1f9
    495c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4960:	00025d0e 	andeq	r5, r2, lr, lsl #26
    4964:	09bf0700 	ldmibeq	pc!, {r8, r9, sl}	; <UNPREDICTABLE>
    4968:	00000054 	andeq	r0, r0, r4, asr r0
    496c:	625f100e 	subsvs	r1, pc, #14
    4970:	c0070066 	andgt	r0, r7, r6, rrx
    4974:	00031a11 	andeq	r1, r3, r1, lsl sl
    4978:	050e1000 	streq	r1, [lr, #-0]
    497c:	0700000e 	streq	r0, [r0, -lr]
    4980:	002507c1 	eoreq	r0, r5, r1, asr #15
    4984:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    4988:	000005ea 	andeq	r0, r0, sl, ror #11
    498c:	b90ac807 	stmdblt	sl, {r0, r1, r2, fp, lr, pc}
    4990:	1c000000 	stcne	0, cr0, [r0], {-0}
    4994:	001c5f0e 	andseq	r5, ip, lr, lsl #30
    4998:	1dca0700 	stclne	7, cr0, [sl]
    499c:	0000060f 	andeq	r0, r0, pc, lsl #12
    49a0:	11a30e20 			; <UNDEFINED> instruction: 0x11a30e20
    49a4:	cc070000 	stcgt	0, cr0, [r7], {-0}
    49a8:	0006391d 	andeq	r3, r6, sp, lsl r9
    49ac:	cc0e2400 	cfstrsgt	mvf2, [lr], {-0}
    49b0:	0700000a 	streq	r0, [r0, -sl]
    49b4:	065d0dcf 	ldrbeq	r0, [sp], -pc, asr #27
    49b8:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    49bc:	00002b44 	andeq	r2, r0, r4, asr #22
    49c0:	7709d007 	strvc	sp, [r9, -r7]
    49c4:	2c000006 	stccs	0, cr0, [r0], {6}
    49c8:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
    49cc:	11d30700 	bicsne	r0, r3, r0, lsl #14
    49d0:	0000031a 	andeq	r0, r0, sl, lsl r3
    49d4:	755f1030 	ldrbvc	r1, [pc, #-48]	; 49ac <__core1_unwind_stub-0xffb654>
    49d8:	d4070070 	strle	r0, [r7], #-112	; 0xffffff90
    49dc:	00034212 	andeq	r4, r3, r2, lsl r2
    49e0:	5f103800 	svcpl	0x00103800
    49e4:	07007275 	smlsdxeq	r0, r5, r2, r7
    49e8:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
    49ec:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
    49f0:	00000a10 	andeq	r0, r0, r0, lsl sl
    49f4:	7d11d807 	ldcvc	8, cr13, [r1, #-28]	; 0xffffffe4
    49f8:	40000006 	andmi	r0, r0, r6
    49fc:	0001560e 	andeq	r5, r1, lr, lsl #12
    4a00:	11d90700 	bicsne	r0, r9, r0, lsl #14
    4a04:	0000068d 	andeq	r0, r0, sp, lsl #13
    4a08:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
    4a0c:	dc070062 	stcle	0, cr0, [r7], {98}	; 0x62
    4a10:	00031a11 	andeq	r1, r3, r1, lsl sl
    4a14:	950e4400 	strls	r4, [lr, #-1024]	; 0xfffffc00
    4a18:	0700000b 	streq	r0, [r0, -fp]
    4a1c:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
    4a20:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    4a24:	0000062d 	andeq	r0, r0, sp, lsr #12
    4a28:	d40ae007 	strle	lr, [sl], #-7
    4a2c:	50000000 	andpl	r0, r0, r0
    4a30:	002b380e 	eoreq	r3, fp, lr, lsl #16
    4a34:	12e30700 	rscne	r0, r3, #0, 14
    4a38:	000004a9 	andeq	r0, r0, r9, lsr #9
    4a3c:	01ab0e54 			; <UNDEFINED> instruction: 0x01ab0e54
    4a40:	e7070000 	str	r0, [r7, -r0]
    4a44:	0001660c 	andeq	r6, r1, ip, lsl #12
    4a48:	2c0e5800 	stccs	8, cr5, [lr], {-0}
    4a4c:	0700000a 	streq	r0, [r0, -sl]
    4a50:	01420ee9 	smlaltteq	r0, r2, r9, lr
    4a54:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    4a58:	0000069a 	muleq	r0, sl, r6
    4a5c:	2509ea07 	strcs	lr, [r9, #-2567]	; 0xfffff5f9
    4a60:	64000000 	strvs	r0, [r0], #-0
    4a64:	00251500 	eoreq	r1, r5, r0, lsl #10
    4a68:	04a90000 	strteq	r0, [r9], #0
    4a6c:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
    4a70:	16000004 	strne	r0, [r0], -r4
    4a74:	000000b9 	strheq	r0, [r0], -r9
    4a78:	0005fd16 	andeq	pc, r5, r6, lsl sp	; <UNPREDICTABLE>
    4a7c:	00251600 	eoreq	r1, r5, r0, lsl #12
    4a80:	11000000 	mrsne	r0, (UNDEF: 0)
    4a84:	0004b404 	andeq	fp, r4, r4, lsl #8
    4a88:	04a91700 	strteq	r1, [r9], #1792	; 0x700
    4a8c:	4c180000 	ldcmi	0, cr0, [r8], {-0}
    4a90:	28000004 	stmdacs	r0, {r2}
    4a94:	02650704 	rsbeq	r0, r5, #4, 14	; 0x100000
    4a98:	0005fd08 	andeq	pc, r5, r8, lsl #26
    4a9c:	09981900 	ldmibeq	r8, {r8, fp, ip}
    4aa0:	67070000 	strvs	r0, [r7, -r0]
    4aa4:	00250702 	eoreq	r0, r5, r2, lsl #14
    4aa8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4aac:	00000528 	andeq	r0, r0, r8, lsr #10
    4ab0:	0b026c07 	bleq	9fad4 <__core1_unwind_stub-0xf6052c>
    4ab4:	000006e9 	andeq	r0, r0, r9, ror #13
    4ab8:	0b8d1904 	bleq	fe34aed0 <__shm_end__+0xbe34aed0>
    4abc:	6c070000 	stcvs	0, cr0, [r7], {-0}
    4ac0:	06e91402 	strbteq	r1, [r9], r2, lsl #8
    4ac4:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    4ac8:	00000a16 	andeq	r0, r0, r6, lsl sl
    4acc:	1e026c07 	cdpne	12, 0, cr6, cr2, cr7, {0}
    4ad0:	000006e9 	andeq	r0, r0, r9, ror #13
    4ad4:	0e0e190c 	vmlaeq.f16	s2, s28, s24	; <UNPREDICTABLE>
    4ad8:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    4adc:	00250802 	eoreq	r0, r5, r2, lsl #16
    4ae0:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
    4ae4:	00000800 	andeq	r0, r0, r0, lsl #16
    4ae8:	08026f07 	stmdaeq	r2, {r0, r1, r2, r8, r9, sl, fp, sp, lr}
    4aec:	000008e9 	andeq	r0, r0, r9, ror #17
    4af0:	04331914 	ldrteq	r1, [r3], #-2324	; 0xfffff6ec
    4af4:	72070000 	andvc	r0, r7, #0
    4af8:	00250702 	eoreq	r0, r5, r2, lsl #14
    4afc:	19300000 	ldmdbne	r0!, {}	; <UNPREDICTABLE>
    4b00:	00000e50 	andeq	r0, r0, r0, asr lr
    4b04:	16027307 	strne	r7, [r2], -r7, lsl #6
    4b08:	000008fe 	strdeq	r0, [r0], -lr
    4b0c:	068f1934 			; <UNDEFINED> instruction: 0x068f1934
    4b10:	75070000 	strvc	r0, [r7, #-0]
    4b14:	00250702 	eoreq	r0, r5, r2, lsl #14
    4b18:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
    4b1c:	00000783 	andeq	r0, r0, r3, lsl #15
    4b20:	0a027707 	beq	a2744 <__core1_unwind_stub-0xf5d8bc>
    4b24:	0000090f 	andeq	r0, r0, pc, lsl #18
    4b28:	0e69193c 			; <UNDEFINED> instruction: 0x0e69193c
    4b2c:	7a070000 	bvc	1c4b34 <__core1_unwind_stub-0xe3b4cc>
    4b30:	01cc1302 	biceq	r1, ip, r2, lsl #6
    4b34:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    4b38:	000002f1 	strdeq	r0, [r0], -r1
    4b3c:	07027b07 	streq	r7, [r2, -r7, lsl #22]
    4b40:	00000025 	andeq	r0, r0, r5, lsr #32
    4b44:	06751944 	ldrbteq	r1, [r5], -r4, asr #18
    4b48:	7c070000 	stcvc	0, cr0, [r7], {-0}
    4b4c:	01cc1302 	biceq	r1, ip, r2, lsl #6
    4b50:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
    4b54:	000008af 	andeq	r0, r0, pc, lsr #17
    4b58:	14027d07 	strne	r7, [r2], #-3335	; 0xfffff2f9
    4b5c:	00000915 	andeq	r0, r0, r5, lsl r9
    4b60:	0110194c 	tsteq	r0, ip, asr #18
    4b64:	80070000 	andhi	r0, r7, r0
    4b68:	00250702 	eoreq	r0, r5, r2, lsl #14
    4b6c:	19500000 	ldmdbne	r0, {}^	; <UNPREDICTABLE>
    4b70:	00000635 	andeq	r0, r0, r5, lsr r6
    4b74:	09028107 	stmdbeq	r2, {r0, r1, r2, r8, pc}
    4b78:	000005fd 	strdeq	r0, [r0], -sp
    4b7c:	0a0b1954 	beq	2cb0d4 <__core1_unwind_stub-0xd34f2c>
    4b80:	a4070000 	strge	r0, [r7], #-0
    4b84:	08c40702 	stmiaeq	r4, {r1, r8, r9, sl}^
    4b88:	1a580000 	bne	1604b90 <__bss_end__+0x5e8b90>
    4b8c:	00000a5a 	andeq	r0, r0, sl, asr sl
    4b90:	1302a807 	movwne	sl, #10247	; 0x2807
    4b94:	000002fd 	strdeq	r0, [r0], -sp
    4b98:	8d1a0148 	ldfhis	f0, [sl, #-288]	; 0xfffffee0
    4b9c:	07000007 	streq	r0, [r0, -r7]
    4ba0:	ba1202a9 	blt	48564c <__core1_unwind_stub-0xb7a9b4>
    4ba4:	4c000002 	stcmi	0, cr0, [r0], {2}
    4ba8:	06231a01 	strteq	r1, [r3], -r1, lsl #20
    4bac:	ad070000 	stcge	0, cr0, [r7, #-0]
    4bb0:	09260c02 	stmdbeq	r6!, {r1, sl, fp}
    4bb4:	02dc0000 	sbcseq	r0, ip, #0
    4bb8:	00083a1a 	andeq	r3, r8, sl, lsl sl
    4bbc:	02b20700 	adcseq	r0, r2, #0, 14
    4bc0:	0006aa10 	andeq	sl, r6, r0, lsl sl
    4bc4:	1a02e000 	bne	bcbcc <__core1_unwind_stub-0xf43434>
    4bc8:	00000013 	andeq	r0, r0, r3, lsl r0
    4bcc:	0a02b407 	beq	b1bf0 <__core1_unwind_stub-0xf4e410>
    4bd0:	00000932 	andeq	r0, r0, r2, lsr r9
    4bd4:	110002ec 	smlattne	r0, ip, r2, r0
    4bd8:	00060304 	andeq	r0, r6, r4, lsl #6
    4bdc:	08010400 	stmdaeq	r1, {sl}
    4be0:	0000040f 	andeq	r0, r0, pc, lsl #8
    4be4:	00060317 	andeq	r0, r6, r7, lsl r3
    4be8:	8b041100 	blhi	108ff0 <__core1_unwind_stub-0xef7010>
    4bec:	15000004 	strne	r0, [r0, #-4]
    4bf0:	00000025 	andeq	r0, r0, r5, lsr #32
    4bf4:	00000633 	andeq	r0, r0, r3, lsr r6
    4bf8:	0004a916 	andeq	sl, r4, r6, lsl r9
    4bfc:	00b91600 	adcseq	r1, r9, r0, lsl #12
    4c00:	33160000 	tstcc	r6, #0
    4c04:	16000006 	strne	r0, [r0], -r6
    4c08:	00000025 	andeq	r0, r0, r5, lsr #32
    4c0c:	0a041100 	beq	109014 <__core1_unwind_stub-0xef6fec>
    4c10:	11000006 	tstne	r0, r6
    4c14:	00061504 	andeq	r1, r6, r4, lsl #10
    4c18:	00e01500 	rsceq	r1, r0, r0, lsl #10
    4c1c:	065d0000 	ldrbeq	r0, [sp], -r0
    4c20:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
    4c24:	16000004 	strne	r0, [r0], -r4
    4c28:	000000b9 	strheq	r0, [r0], -r9
    4c2c:	0000e016 	andeq	lr, r0, r6, lsl r0
    4c30:	00251600 	eoreq	r1, r5, r0, lsl #12
    4c34:	11000000 	mrsne	r0, (UNDEF: 0)
    4c38:	00063f04 	andeq	r3, r6, r4, lsl #30
    4c3c:	00251500 	eoreq	r1, r5, r0, lsl #10
    4c40:	06770000 	ldrbteq	r0, [r7], -r0
    4c44:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
    4c48:	16000004 	strne	r0, [r0], -r4
    4c4c:	000000b9 	strheq	r0, [r0], -r9
    4c50:	63041100 	movwvs	r1, #16640	; 0x4100
    4c54:	0b000006 	bleq	4c74 <__core1_unwind_stub-0xffb38c>
    4c58:	0000006e 	andeq	r0, r0, lr, rrx
    4c5c:	0000068d 	andeq	r0, r0, sp, lsl #13
    4c60:	0000380c 	andeq	r3, r0, ip, lsl #16
    4c64:	0b000200 	bleq	546c <__core1_unwind_stub-0xffab94>
    4c68:	0000006e 	andeq	r0, r0, lr, rrx
    4c6c:	0000069d 	muleq	r0, sp, r6
    4c70:	0000380c 	andeq	r3, r0, ip, lsl #16
    4c74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4c78:	00000c21 	andeq	r0, r0, r1, lsr #24
    4c7c:	1a012407 	bne	4dca0 <__core1_unwind_stub-0xfb2360>
    4c80:	00000348 	andeq	r0, r0, r8, asr #6
    4c84:	0008bf1b 	andeq	fp, r8, fp, lsl pc
    4c88:	28070c00 	stmdacs	r7, {sl, fp}
    4c8c:	06e30801 	strbteq	r0, [r3], r1, lsl #16
    4c90:	3a190000 	bcc	644c98 <__core1_unwind_stub-0x9bb368>
    4c94:	0700000a 	streq	r0, [r0, -sl]
    4c98:	e311012a 	tst	r1, #-2147483638	; 0x8000000a
    4c9c:	00000006 	andeq	r0, r0, r6
    4ca0:	00083319 	andeq	r3, r8, r9, lsl r3
    4ca4:	012b0700 			; <UNDEFINED> instruction: 0x012b0700
    4ca8:	00002507 	andeq	r2, r0, r7, lsl #10
    4cac:	b9190400 	ldmdblt	r9, {sl}
    4cb0:	07000008 	streq	r0, [r0, -r8]
    4cb4:	e90b012c 	stmdb	fp, {r2, r3, r5, r8}
    4cb8:	08000006 	stmdaeq	r0, {r1, r2}
    4cbc:	aa041100 	bge	1090c4 <__core1_unwind_stub-0xef6f3c>
    4cc0:	11000006 	tstne	r0, r6
    4cc4:	00069d04 	andeq	r9, r6, r4, lsl #26
    4cc8:	0b851b00 	bleq	fe14b8d0 <__shm_end__+0xbe14b8d0>
    4ccc:	070e0000 	streq	r0, [lr, -r0]
    4cd0:	28080144 	stmdacs	r8, {r2, r6, r8}
    4cd4:	19000007 	stmdbne	r0, {r0, r1, r2}
    4cd8:	00000ac6 	andeq	r0, r0, r6, asr #21
    4cdc:	12014507 	andne	r4, r1, #29360128	; 0x1c00000
    4ce0:	00000728 	andeq	r0, r0, r8, lsr #14
    4ce4:	01bf1900 			; <UNDEFINED> instruction: 0x01bf1900
    4ce8:	46070000 	strmi	r0, [r7], -r0
    4cec:	07281201 	streq	r1, [r8, -r1, lsl #4]!
    4cf0:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
    4cf4:	00000eab 	andeq	r0, r0, fp, lsr #29
    4cf8:	12014707 	andne	r4, r1, #1835008	; 0x1c0000
    4cfc:	00000075 	andeq	r0, r0, r5, ror r0
    4d00:	750b000c 	strvc	r0, [fp, #-12]
    4d04:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4d08:	0c000007 	stceq	0, cr0, [r0], {7}
    4d0c:	00000038 	andeq	r0, r0, r8, lsr r0
    4d10:	d01c0002 	andsle	r0, ip, r2
    4d14:	07028507 	streq	r8, [r2, -r7, lsl #10]
    4d18:	0000084d 	andeq	r0, r0, sp, asr #16
    4d1c:	0003d419 	andeq	sp, r3, r9, lsl r4
    4d20:	02870700 	addeq	r0, r7, #0, 14
    4d24:	00003818 	andeq	r3, r0, r8, lsl r8
    4d28:	ba190000 	blt	644d30 <__core1_unwind_stub-0x9bb2d0>
    4d2c:	0700000b 	streq	r0, [r0, -fp]
    4d30:	fd120288 	ldc2	2, cr0, [r2, #-544]	; 0xfffffde0
    4d34:	04000005 	streq	r0, [r0], #-5
    4d38:	00002d19 	andeq	r2, r0, r9, lsl sp
    4d3c:	02890700 	addeq	r0, r9, #0, 14
    4d40:	00084d10 	andeq	r4, r8, r0, lsl sp
    4d44:	16190800 	ldrne	r0, [r9], -r0, lsl #16
    4d48:	07000003 	streq	r0, [r0, -r3]
    4d4c:	e217028a 	ands	r0, r7, #-1610612728	; 0xa0000008
    4d50:	24000001 	strcs	r0, [r0], #-1
    4d54:	00088919 	andeq	r8, r8, r9, lsl r9
    4d58:	028b0700 	addeq	r0, fp, #0, 14
    4d5c:	0000250f 	andeq	r2, r0, pc, lsl #10
    4d60:	35194800 	ldrcc	r4, [r9, #-2048]	; 0xfffff800
    4d64:	0700000a 	streq	r0, [r0, -sl]
    4d68:	8f2c028c 	svchi	0x002c028c
    4d6c:	50000000 	andpl	r0, r0, r0
    4d70:	000c8519 	andeq	r8, ip, r9, lsl r5
    4d74:	028d0700 	addeq	r0, sp, #0, 14
    4d78:	0006ef1a 	andeq	lr, r6, sl, lsl pc
    4d7c:	63195800 	tstvs	r9, #0, 16
    4d80:	0700000d 	streq	r0, [r0, -sp]
    4d84:	4216028e 	andsmi	r0, r6, #-536870904	; 0xe0000008
    4d88:	68000001 	stmdavs	r0, {r0}
    4d8c:	000b0019 	andeq	r0, fp, r9, lsl r0
    4d90:	028f0700 	addeq	r0, pc, #0, 14
    4d94:	00014216 	andeq	r4, r1, r6, lsl r2
    4d98:	1e197000 	cdpne	0, 1, cr7, cr9, cr0, {0}
    4d9c:	0700000a 	streq	r0, [r0, -sl]
    4da0:	42160290 	andsmi	r0, r6, #144, 4
    4da4:	78000001 	stmdavc	r0, {r0}
    4da8:	00016519 	andeq	r6, r1, r9, lsl r5
    4dac:	02910700 	addseq	r0, r1, #0, 14
    4db0:	00085d10 	andeq	r5, r8, r0, lsl sp
    4db4:	e9198000 	ldmdb	r9, {pc}
    4db8:	07000006 	streq	r0, [r0, -r6]
    4dbc:	6d100292 	lfmvs	f0, 4, [r0, #-584]	; 0xfffffdb8
    4dc0:	88000008 	stmdahi	r0, {r3}
    4dc4:	000fb719 	andeq	fp, pc, r9, lsl r7	; <UNPREDICTABLE>
    4dc8:	02930700 	addseq	r0, r3, #0, 14
    4dcc:	0000250f 	andeq	r2, r0, pc, lsl #10
    4dd0:	e319a000 	tst	r9, #0
    4dd4:	07000002 	streq	r0, [r0, -r2]
    4dd8:	42160294 	andsmi	r0, r6, #148, 4	; 0x40000009
    4ddc:	a4000001 	strge	r0, [r0], #-1
    4de0:	000bc719 	andeq	ip, fp, r9, lsl r7
    4de4:	02950700 	addseq	r0, r5, #0, 14
    4de8:	00014216 	andeq	r4, r1, r6, lsl r2
    4dec:	2019ac00 	andscs	sl, r9, r0, lsl #24
    4df0:	0700000f 	streq	r0, [r0, -pc]
    4df4:	42160296 	andsmi	r0, r6, #1610612745	; 0x60000009
    4df8:	b4000001 	strlt	r0, [r0], #-1
    4dfc:	0009f219 	andeq	pc, r9, r9, lsl r2	; <UNPREDICTABLE>
    4e00:	02970700 	addseq	r0, r7, #0, 14
    4e04:	00014216 	andeq	r4, r1, r6, lsl r2
    4e08:	4519bc00 	ldrmi	fp, [r9, #-3072]	; 0xfffff400
    4e0c:	07000001 	streq	r0, [r0, -r1]
    4e10:	42160298 	andsmi	r0, r6, #152, 4	; 0x80000009
    4e14:	c4000001 	strgt	r0, [r0], #-1
    4e18:	00099619 	andeq	r9, r9, r9, lsl r6
    4e1c:	02990700 	addseq	r0, r9, #0, 14
    4e20:	00002508 	andeq	r2, r0, r8, lsl #10
    4e24:	0b00cc00 	bleq	37e2c <__core1_unwind_stub-0xfc81d4>
    4e28:	00000603 	andeq	r0, r0, r3, lsl #12
    4e2c:	0000085d 	andeq	r0, r0, sp, asr r8
    4e30:	0000380c 	andeq	r3, r0, ip, lsl #16
    4e34:	0b001900 	bleq	b23c <__core1_unwind_stub-0xff4dc4>
    4e38:	00000603 	andeq	r0, r0, r3, lsl #12
    4e3c:	0000086d 	andeq	r0, r0, sp, ror #16
    4e40:	0000380c 	andeq	r3, r0, ip, lsl #16
    4e44:	0b000700 	bleq	6a4c <__core1_unwind_stub-0xff95b4>
    4e48:	00000603 	andeq	r0, r0, r3, lsl #12
    4e4c:	0000087d 	andeq	r0, r0, sp, ror r8
    4e50:	0000380c 	andeq	r3, r0, ip, lsl #16
    4e54:	1c001700 	stcne	7, cr1, [r0], {-0}
    4e58:	029e07f0 	addseq	r0, lr, #240, 14	; 0x3c00000
    4e5c:	0008a407 	andeq	sl, r8, r7, lsl #8
    4e60:	0e271900 	vmuleq.f16	s2, s14, s0	; <UNPREDICTABLE>
    4e64:	a1070000 	mrsge	r0, (UNDEF: 7)
    4e68:	08a41b02 	stmiaeq	r4!, {r1, r8, r9, fp, ip}
    4e6c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4e70:	0000084e 	andeq	r0, r0, lr, asr #16
    4e74:	1802a207 	stmdane	r2, {r0, r1, r2, r9, sp, pc}
    4e78:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    4e7c:	420b0078 	andmi	r0, fp, #120	; 0x78
    4e80:	b4000003 	strlt	r0, [r0], #-3
    4e84:	0c000008 	stceq	0, cr0, [r0], {8}
    4e88:	00000038 	andeq	r0, r0, r8, lsr r0
    4e8c:	380b001d 	stmdacc	fp, {r0, r2, r3, r4}
    4e90:	c4000000 	strgt	r0, [r0], #-0
    4e94:	0c000008 	stceq	0, cr0, [r0], {8}
    4e98:	00000038 	andeq	r0, r0, r8, lsr r0
    4e9c:	f01d001d 			; <UNDEFINED> instruction: 0xf01d001d
    4ea0:	03028307 	movweq	r8, #8967	; 0x2307
    4ea4:	000008e9 	andeq	r0, r0, r9, ror #17
    4ea8:	00044c1e 	andeq	r4, r4, lr, lsl ip
    4eac:	029a0700 	addseq	r0, sl, #0, 14
    4eb0:	0007380b 	andeq	r3, r7, fp, lsl #16
    4eb4:	01381e00 	teqeq	r8, r0, lsl #28
    4eb8:	a3070000 	movwge	r0, #28672	; 0x7000
    4ebc:	087d0b02 	ldmdaeq	sp!, {r1, r8, r9, fp}^
    4ec0:	0b000000 	bleq	4ec8 <__core1_unwind_stub-0xffb138>
    4ec4:	00000603 	andeq	r0, r0, r3, lsl #12
    4ec8:	000008f9 	strdeq	r0, [r0], -r9
    4ecc:	0000380c 	andeq	r3, r0, ip, lsl #16
    4ed0:	1f001800 	svcne	0x00001800
    4ed4:	00000000 	andeq	r0, r0, r0
    4ed8:	08f90411 	ldmeq	r9!, {r0, r4, sl}^
    4edc:	0f200000 	svceq	0x00200000
    4ee0:	16000009 	strne	r0, [r0], -r9
    4ee4:	000004a9 	andeq	r0, r0, r9, lsr #9
    4ee8:	04041100 	streq	r1, [r4], #-256	; 0xffffff00
    4eec:	11000009 	tstne	r0, r9
    4ef0:	0001cc04 	andeq	ip, r1, r4, lsl #24
    4ef4:	09262000 	stmdbeq	r6!, {sp}
    4ef8:	25160000 	ldrcs	r0, [r6, #-0]
    4efc:	00000000 	andeq	r0, r0, r0
    4f00:	092c0411 	stmdbeq	ip!, {r0, r4, sl}
    4f04:	04110000 	ldreq	r0, [r1], #-0
    4f08:	0000091b 	andeq	r0, r0, fp, lsl r9
    4f0c:	00069d0b 	andeq	r9, r6, fp, lsl #26
    4f10:	00094200 	andeq	r4, r9, r0, lsl #4
    4f14:	00380c00 	eorseq	r0, r8, r0, lsl #24
    4f18:	00020000 	andeq	r0, r2, r0
    4f1c:	00045a21 	andeq	r5, r4, r1, lsr #20
    4f20:	03330700 	teqeq	r3, #0, 14
    4f24:	0004a917 	andeq	sl, r4, r7, lsl r9
    4f28:	04532100 	ldrbeq	r2, [r3], #-256	; 0xffffff00
    4f2c:	34070000 	strcc	r0, [r7], #-0
    4f30:	04af1d03 	strteq	r1, [pc], #3331	; 4f38 <__core1_unwind_stub-0xffb0c8>
    4f34:	23030000 	movwcs	r0, #12288	; 0x3000
    4f38:	0500000c 	streq	r0, [r0, #-12]
    4f3c:	069d1042 	ldreq	r1, [sp], r2, asr #32
    4f40:	d10f0000 	mrsle	r0, CPSR
    4f44:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
    4f48:	9d102709 	ldcls	7, cr2, [r0, #-36]	; 0xffffffdc
    4f4c:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    4f50:	00002654 	andeq	r2, r0, r4, asr r6
    4f54:	b30c2909 	movwlt	r2, #51465	; 0xc909
    4f58:	00000009 	andeq	r0, r0, r9
    4f5c:	0026f50e 	eoreq	pc, r6, lr, lsl #10
    4f60:	0b2a0900 	bleq	a87368 <__core1_unwind_stub-0x578c98>
    4f64:	000005fd 	strdeq	r0, [r0], -sp
    4f68:	26ee0e04 	strbtcs	r0, [lr], r4, lsl #28
    4f6c:	2b090000 	blcs	244f74 <__core1_unwind_stub-0xdbb08c>
    4f70:	0005fd0b 	andeq	pc, r5, fp, lsl #26
    4f74:	20000800 	andcs	r0, r0, r0, lsl #16
    4f78:	000009ad 	andeq	r0, r0, sp, lsr #19
    4f7c:	00060316 	andeq	r0, r6, r6, lsl r3
    4f80:	09ad1600 	stmibeq	sp!, {r9, sl, ip}
    4f84:	11000000 	mrsne	r0, (UNDEF: 0)
    4f88:	00095c04 	andeq	r5, r9, r4, lsl #24
    4f8c:	9d041100 	stflss	f1, [r4, #-0]
    4f90:	03000009 	movweq	r0, #9
    4f94:	0000278c 	andeq	r2, r0, ip, lsl #15
    4f98:	68032c09 	stmdavs	r3, {r0, r3, sl, fp, sp}
    4f9c:	22000009 	andcs	r0, r0, #9
    4fa0:	00000842 	andeq	r0, r0, r2, asr #16
    4fa4:	ad0e3609 	stcge	6, cr3, [lr, #-36]	; 0xffffffdc
    4fa8:	22000009 	andcs	r0, r0, #9
    4fac:	00000848 	andeq	r0, r0, r8, asr #16
    4fb0:	ad0e3709 	stcge	7, cr3, [lr, #-36]	; 0xffffffdc
    4fb4:	23000009 	movwcs	r0, #9
    4fb8:	000009c5 	andeq	r0, r0, r5, asr #19
    4fbc:	051d2d01 	ldreq	r2, [sp, #-3329]	; 0xfffff2ff
    4fc0:	00000003 	andeq	r0, r0, r3
    4fc4:	09d12300 	ldmibeq	r1, {r8, r9, sp}^
    4fc8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    4fcc:	2403051d 	strcs	r0, [r3], #-1309	; 0xfffffae3
    4fd0:	24010056 	strcs	r0, [r1], #-86	; 0xffffffaa
    4fd4:	000026a1 	andeq	r2, r0, r1, lsr #13
    4fd8:	05022901 	streq	r2, [r2, #-2305]	; 0xfffff6ff
    4fdc:	00000025 	andeq	r0, r0, r5, lsr #32
    4fe0:	01004604 	tsteq	r0, r4, lsl #12
    4fe4:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    4fe8:	0ad39c01 	beq	ff4ebff4 <__shm_end__+0xbf4ebff4>
    4fec:	24250000 	strtcs	r0, [r5], #-0
    4ff0:	01000026 	tsteq	r0, r6, lsr #32
    4ff4:	ad180229 	lfmge	f0, 4, [r8, #-164]	; 0xffffff5c
    4ff8:	02000009 	andeq	r0, r0, #9
    4ffc:	42255491 	eormi	r5, r5, #-1862270976	; 0x91000000
    5000:	0100001f 	tsteq	r0, pc, lsl r0
    5004:	332c0229 			; <UNDEFINED> instruction: 0x332c0229
    5008:	02000006 	andeq	r0, r0, #6
    500c:	6c255091 	stcvs	0, cr5, [r5], #-580	; 0xfffffdbc
    5010:	01000002 	tsteq	r0, r2
    5014:	bb3c0229 	bllt	f058c0 <__core1_unwind_stub-0xfa740>
    5018:	02000000 	andeq	r0, r0, #0
    501c:	1e264c91 	mcrne	12, 1, r4, cr6, cr1, {4}
    5020:	01000026 	tsteq	r0, r6, lsr #32
    5024:	d31c022b 	tstle	ip, #-1342177278	; 0xb0000002
    5028:	0200000a 	andeq	r0, r0, #10
    502c:	29266891 	stmdbcs	r6!, {r0, r4, r7, fp, sp, lr}
    5030:	01000023 	tsteq	r0, r3, lsr #32
    5034:	2509022c 	strcs	r0, [r9, #-556]	; 0xfffffdd4
    5038:	02000000 	andeq	r0, r0, #0
    503c:	09266491 	stmdbeq	r6!, {r0, r4, r7, sl, sp, lr}
    5040:	0100001e 	tsteq	r0, lr, lsl r0
    5044:	2511022c 	ldrcs	r0, [r1, #-556]	; 0xfffffdd4
    5048:	02000000 	andeq	r0, r0, #0
    504c:	71267491 			; <UNDEFINED> instruction: 0x71267491
    5050:	0100000a 	tsteq	r0, sl
    5054:	2509022d 	strcs	r0, [r9, #-557]	; 0xfffffdd3
    5058:	02000000 	andeq	r0, r0, #0
    505c:	64276091 	strtvs	r6, [r7], #-145	; 0xffffff6f
    5060:	0100746f 	tsteq	r0, pc, ror #8
    5064:	2511022d 	ldrcs	r0, [r1, #-557]	; 0xfffffdd3
    5068:	02000000 	andeq	r0, r0, #0
    506c:	63277091 			; <UNDEFINED> instruction: 0x63277091
    5070:	022e0100 	eoreq	r0, lr, #0, 2
    5074:	0006030a 	andeq	r0, r6, sl, lsl #6
    5078:	6f910200 	svcvs	0x00910200
    507c:	00271126 	eoreq	r1, r7, r6, lsr #2
    5080:	022e0100 	eoreq	r0, lr, #0, 2
    5084:	0006030c 	andeq	r0, r6, ip, lsl #6
    5088:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    508c:	00247826 	eoreq	r7, r4, r6, lsr #16
    5090:	022f0100 	eoreq	r0, pc, #0, 2
    5094:	00002509 	andeq	r2, r0, r9, lsl #10
    5098:	5c910200 	lfmpl	f0, 4, [r1], {0}
    509c:	00271d26 	eoreq	r1, r7, r6, lsr #26
    50a0:	022f0100 	eoreq	r0, pc, #0, 2
    50a4:	0000250f 	andeq	r2, r0, pc, lsl #10
    50a8:	58910200 	ldmpl	r1, {r9}
    50ac:	b9041100 	stmdblt	r4, {r8, ip}
    50b0:	28000009 	stmdacs	r0, {r0, r3}
    50b4:	00002708 	andeq	r2, r0, r8, lsl #14
    50b8:	0c016201 	sfmeq	f6, 4, [r1], {1}
    50bc:	00000025 	andeq	r0, r0, r5, lsr #32
    50c0:	01003de8 	smlatteq	r0, r8, sp, r3
    50c4:	0000081c 	andeq	r0, r0, ip, lsl r8
    50c8:	0c389c01 	ldceq	12, cr9, [r8], #-4
    50cc:	1e250000 	cdpne	0, 2, cr0, cr5, cr0, {0}
    50d0:	01000026 	tsteq	r0, r6, lsr #32
    50d4:	d32c0162 			; <UNDEFINED> instruction: 0xd32c0162
    50d8:	0300000a 	movweq	r0, #10
    50dc:	257fac91 	ldrbcs	sl, [pc, #-3217]!	; 4453 <__core1_unwind_stub-0xffbbad>
    50e0:	00002782 	andeq	r2, r0, r2, lsl #15
    50e4:	37016201 	strcc	r6, [r1, -r1, lsl #4]
    50e8:	00000603 	andeq	r0, r0, r3, lsl #12
    50ec:	7fab9103 	svcvc	0x00ab9103
    50f0:	00271125 	eoreq	r1, r7, r5, lsr #2
    50f4:	01620100 	cmneq	r2, r0, lsl #2
    50f8:	00060346 	andeq	r0, r6, r6, asr #6
    50fc:	aa910300 	bge	fe445d04 <__shm_end__+0xbe445d04>
    5100:	2478257f 	ldrbtcs	r2, [r8], #-1407	; 0xfffffa81
    5104:	62010000 	andvs	r0, r1, #0
    5108:	00254f01 	eoreq	r4, r5, r1, lsl #30
    510c:	91030000 	mrsls	r0, (UNDEF: 3)
    5110:	09257fa4 	stmdbeq	r5!, {r2, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    5114:	0100001e 	tsteq	r0, lr, lsl r0
    5118:	25590162 	ldrbcs	r0, [r9, #-354]	; 0xfffffe9e
    511c:	02000000 	andeq	r0, r0, #0
    5120:	1d250091 	stcne	0, cr0, [r5, #-580]!	; 0xfffffdbc
    5124:	01000027 	tsteq	r0, r7, lsr #32
    5128:	25640162 	strbcs	r0, [r4, #-354]!	; 0xfffffe9e
    512c:	02000000 	andeq	r0, r0, #0
    5130:	64290491 	strtvs	r0, [r9], #-1169	; 0xfffffb6f
    5134:	0100746f 	tsteq	r0, pc, ror #8
    5138:	25720162 	ldrbcs	r0, [r2, #-354]!	; 0xfffffe9e
    513c:	02000000 	andeq	r0, r0, #0
    5140:	27250891 			; <UNDEFINED> instruction: 0x27250891
    5144:	01000027 	tsteq	r0, r7, lsr #32
    5148:	387c0162 	ldmdacc	ip!, {r1, r5, r6, r8}^
    514c:	0200000c 	andeq	r0, r0, #12
    5150:	6c250c91 	stcvs	12, cr0, [r5], #-580	; 0xfffffdbc
    5154:	01000002 	tsteq	r0, r2
    5158:	3e8e0162 	rmfccez	f0, f6, f2
    515c:	0200000c 	andeq	r0, r0, #12
    5160:	78261091 	stmdavc	r6!, {r0, r4, r7, ip}
    5164:	01000027 	tsteq	r0, r7, lsr #32
    5168:	440a0164 	strmi	r0, [sl], #-356	; 0xfffffe9c
    516c:	0300000c 	movweq	r0, #12
    5170:	277fb491 			; <UNDEFINED> instruction: 0x277fb491
    5174:	00646170 	rsbeq	r6, r4, r0, ror r1
    5178:	13016401 	movwne	r6, #5121	; 0x1401
    517c:	00000603 	andeq	r0, r0, r3, lsl #12
    5180:	26779102 	ldrbtcs	r9, [r7], -r2, lsl #2
    5184:	0000263a 	andeq	r2, r0, sl, lsr r6
    5188:	1b016401 	blne	5e194 <__core1_unwind_stub-0xfa1e6c>
    518c:	00000603 	andeq	r0, r0, r3, lsl #12
    5190:	26769102 	ldrbtcs	r9, [r6], -r2, lsl #2
    5194:	00002614 	andeq	r2, r0, r4, lsl r6
    5198:	26016401 	strcs	r6, [r1], -r1, lsl #8
    519c:	00000603 	andeq	r0, r0, r3, lsl #12
    51a0:	26759102 	ldrbtcs	r9, [r5], -r2, lsl #2
    51a4:	00000a71 	andeq	r0, r0, r1, ror sl
    51a8:	09016501 	stmdbeq	r1, {r0, r8, sl, sp, lr}
    51ac:	00000025 	andeq	r0, r0, r5, lsr #32
    51b0:	27709102 	ldrbcs	r9, [r0, -r2, lsl #2]!
    51b4:	65010069 	strvs	r0, [r1, #-105]	; 0xffffff97
    51b8:	00250f01 	eoreq	r0, r5, r1, lsl #30
    51bc:	91020000 	mrsls	r0, (UNDEF: 2)
    51c0:	273f266c 	ldrcs	r2, [pc, -ip, ror #12]!
    51c4:	65010000 	strvs	r0, [r1, #-0]
    51c8:	00251101 	eoreq	r1, r5, r1, lsl #2
    51cc:	91020000 	mrsls	r0, (UNDEF: 2)
    51d0:	275c2668 	ldrbcs	r2, [ip, -r8, ror #12]
    51d4:	65010000 	strvs	r0, [r1, #-0]
    51d8:	00251901 	eoreq	r1, r5, r1, lsl #18
    51dc:	91020000 	mrsls	r0, (UNDEF: 2)
    51e0:	616d2764 	cmnvs	sp, r4, ror #14
    51e4:	66010078 			; <UNDEFINED> instruction: 0x66010078
    51e8:	00250901 	eoreq	r0, r5, r1, lsl #18
    51ec:	91020000 	mrsls	r0, (UNDEF: 2)
    51f0:	61762760 	cmnvs	r6, r0, ror #14
    51f4:	6701006c 	strvs	r0, [r1, -ip, rrx]
    51f8:	00620d01 	rsbeq	r0, r2, r1, lsl #26
    51fc:	91020000 	mrsls	r0, (UNDEF: 2)
    5200:	264d2658 			; <UNDEFINED> instruction: 0x264d2658
    5204:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    5208:	05fd0c01 	ldrbeq	r0, [sp, #3073]!	; 0xc01
    520c:	91020000 	mrsls	r0, (UNDEF: 2)
    5210:	04110054 	ldreq	r0, [r1], #-84	; 0xffffffac
    5214:	00000025 	andeq	r0, r0, r5, lsr #32
    5218:	00bb0411 	adcseq	r0, fp, r1, lsl r4
    521c:	030b0000 	movweq	r0, #45056	; 0xb000
    5220:	54000006 	strpl	r0, [r0], #-6
    5224:	0c00000c 	stceq	0, cr0, [r0], {12}
    5228:	00000038 	andeq	r0, r0, r8, lsr r0
    522c:	622a001f 	eorvs	r0, sl, #31
    5230:	01000026 	tsteq	r0, r6, lsr #32
    5234:	250c0137 	strcs	r0, [ip, #-311]	; 0xfffffec9
    5238:	70000000 	andvc	r0, r0, r0
    523c:	7801003c 	stmdavc	r1, {r2, r3, r4, r5}
    5240:	01000001 	tsteq	r0, r1
    5244:	000d009c 	muleq	sp, ip, r0
    5248:	61762900 	cmnvs	r6, r0, lsl #18
    524c:	3701006c 	strcc	r0, [r1, -ip, rrx]
    5250:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    5254:	91020000 	mrsls	r0, (UNDEF: 2)
    5258:	74732958 	ldrbtvc	r2, [r3], #-2392	; 0xfffff6a8
    525c:	37010067 	strcc	r0, [r1, -r7, rrx]
    5260:	05fd2a01 	ldrbeq	r2, [sp, #2561]!	; 0xa01
    5264:	91020000 	mrsls	r0, (UNDEF: 2)
    5268:	27822554 			; <UNDEFINED> instruction: 0x27822554
    526c:	37010000 	strcc	r0, [r1, -r0]
    5270:	06033301 	streq	r3, [r3], -r1, lsl #6
    5274:	91020000 	mrsls	r0, (UNDEF: 2)
    5278:	27622553 			; <UNDEFINED> instruction: 0x27622553
    527c:	37010000 	strcc	r0, [r1, -r0]
    5280:	00254101 	eoreq	r4, r5, r1, lsl #2
    5284:	91020000 	mrsls	r0, (UNDEF: 2)
    5288:	0a712600 	beq	1c4ea90 <__bss_end__+0xc32a90>
    528c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    5290:	00250901 	eoreq	r0, r5, r1, lsl #18
    5294:	91020000 	mrsls	r0, (UNDEF: 2)
    5298:	27502674 			; <UNDEFINED> instruction: 0x27502674
    529c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    52a0:	00251101 	eoreq	r1, r5, r1, lsl #2
    52a4:	91020000 	mrsls	r0, (UNDEF: 2)
    52a8:	27452670 	smlsldxcs	r2, r5, r0, r6
    52ac:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    52b0:	00251a01 	eoreq	r1, r5, r1, lsl #20
    52b4:	91020000 	mrsls	r0, (UNDEF: 2)
    52b8:	26e7266c 	strbtcs	r2, [r7], ip, ror #12
    52bc:	3a010000 	bcc	452c4 <__core1_unwind_stub-0xfbad3c>
    52c0:	00250901 	eoreq	r0, r5, r1, lsl #18
    52c4:	91020000 	mrsls	r0, (UNDEF: 2)
    52c8:	272f2668 	strcs	r2, [pc, -r8, ror #12]!
    52cc:	3a010000 	bcc	452d4 <__core1_unwind_stub-0xfbad2c>
    52d0:	00251201 	eoreq	r1, r5, r1, lsl #4
    52d4:	91020000 	mrsls	r0, (UNDEF: 2)
    52d8:	c6280064 	strtgt	r0, [r8], -r4, rrx
    52dc:	01000026 	tsteq	r0, r6, lsr #32
    52e0:	250c0115 	strcs	r0, [ip, #-277]	; 0xfffffeeb
    52e4:	34000000 	strcc	r0, [r0], #-0
    52e8:	3c01003b 	stccc	0, cr0, [r1], {59}	; 0x3b
    52ec:	01000001 	tsteq	r0, r1
    52f0:	000d6a9c 	muleq	sp, ip, sl
    52f4:	61762900 	cmnvs	r6, r0, lsl #18
    52f8:	1501006c 	strne	r0, [r1, #-108]	; 0xffffff94
    52fc:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    5300:	91020000 	mrsls	r0, (UNDEF: 2)
    5304:	74732968 	ldrbtvc	r2, [r3], #-2408	; 0xfffff698
    5308:	15010067 	strne	r0, [r1, #-103]	; 0xffffff99
    530c:	05fd2a01 	ldrbeq	r2, [sp, #2561]!	; 0xa01
    5310:	91020000 	mrsls	r0, (UNDEF: 2)
    5314:	275c2564 	ldrbcs	r2, [ip, -r4, ror #10]
    5318:	15010000 	strne	r0, [r1, #-0]
    531c:	00253201 	eoreq	r3, r5, r1, lsl #4
    5320:	91020000 	mrsls	r0, (UNDEF: 2)
    5324:	0a712660 	beq	1c4ecac <__bss_end__+0xc32cac>
    5328:	17010000 	strne	r0, [r1, -r0]
    532c:	00250901 	eoreq	r0, r5, r1, lsl #18
    5330:	91020000 	mrsls	r0, (UNDEF: 2)
    5334:	00692774 	rsbeq	r2, r9, r4, ror r7
    5338:	12011701 	andne	r1, r1, #262144	; 0x40000
    533c:	00000025 	andeq	r0, r0, r5, lsr #32
    5340:	00709102 	rsbseq	r9, r0, r2, lsl #2
    5344:	0026782b 	eoreq	r7, r6, fp, lsr #16
    5348:	0dbe0100 	ldfeqs	f0, [lr]
    534c:	00000603 	andeq	r0, r0, r3, lsl #12
    5350:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
    5354:	00000098 	muleq	r0, r8, r0
    5358:	0dbf9c01 	ldceq	12, cr9, [pc, #4]!	; 5364 <__core1_unwind_stub-0xffac9c>
    535c:	422c0000 	eormi	r0, ip, #0
    5360:	0100001f 	tsteq	r0, pc, lsl r0
    5364:	063320be 			; <UNDEFINED> instruction: 0x063320be
    5368:	91020000 	mrsls	r0, (UNDEF: 2)
    536c:	23292c74 			; <UNDEFINED> instruction: 0x23292c74
    5370:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    5374:	000c382d 	andeq	r3, ip, sp, lsr #16
    5378:	70910200 	addsvc	r0, r1, r0, lsl #4
    537c:	6c61762d 	stclvs	6, cr7, [r1], #-180	; 0xffffff4c
    5380:	3abe0100 	bcc	fef85788 <__shm_end__+0xbef85788>
    5384:	00000c38 	andeq	r0, r0, r8, lsr ip
    5388:	2d6c9102 	stfcsp	f1, [ip, #-8]!
    538c:	be010063 	cdplt	0, 0, cr0, cr1, cr3, {3}
    5390:	00060344 	andeq	r0, r6, r4, asr #6
    5394:	6b910200 	blvs	fe445b9c <__shm_end__+0xbe445b9c>
    5398:	26ae2e00 	strtcs	r2, [lr], r0, lsl #28
    539c:	ad010000 	stcge	0, cr0, [r1, #-0]
    53a0:	0006030d 	andeq	r0, r6, sp, lsl #6
    53a4:	003a4400 	eorseq	r4, sl, r0, lsl #8
    53a8:	00005801 	andeq	r5, r0, r1, lsl #16
    53ac:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    53b0:	2c00000e 	stccs	0, cr0, [r0], {14}
    53b4:	00001f42 	andeq	r1, r0, r2, asr #30
    53b8:	3322ad01 			; <UNDEFINED> instruction: 0x3322ad01
    53bc:	02000006 	andeq	r0, r0, #6
    53c0:	292c6c91 	stmdbcs	ip!, {r0, r4, r7, sl, fp, sp, lr}
    53c4:	01000023 	tsteq	r0, r3, lsr #32
    53c8:	0c382fad 	ldceq	15, cr2, [r8], #-692	; 0xfffffd4c
    53cc:	91020000 	mrsls	r0, (UNDEF: 2)
    53d0:	00632f68 	rsbeq	r2, r3, r8, ror #30
    53d4:	030aaf01 	movweq	sl, #44801	; 0xaf01
    53d8:	02000006 	andeq	r0, r0, #6
    53dc:	30007791 	mulcc	r0, r1, r7
    53e0:	00002757 	andeq	r2, r0, r7, asr r7
    53e4:	d80d9f01 	stmdale	sp, {r0, r8, r9, sl, fp, ip, pc}
    53e8:	6c010039 	stcvs	0, cr0, [r1], {57}	; 0x39
    53ec:	01000000 	mrseq	r0, (UNDEF: 0)
    53f0:	000e479c 	muleq	lr, ip, r7
    53f4:	261e2c00 	ldrcs	r2, [lr], -r0, lsl #24
    53f8:	9f010000 	svcls	0x00010000
    53fc:	000ad329 	andeq	sp, sl, r9, lsr #6
    5400:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5404:	000a712c 	andeq	r7, sl, ip, lsr #2
    5408:	369f0100 	ldrcc	r0, [pc], r0, lsl #2
    540c:	00000c38 	andeq	r0, r0, r8, lsr ip
    5410:	2d709102 	ldfcsp	f1, [r0, #-8]!
    5414:	9f010063 	svcls	0x00010063
    5418:	00060342 	andeq	r0, r6, r2, asr #6
    541c:	6f910200 	svcvs	0x00910200
    5420:	26a63100 	strtcs	r3, [r6], r0, lsl #2
    5424:	c4050000 	strgt	r0, [r5], #-0
    5428:	00002505 	andeq	r2, r0, r5, lsl #10
    542c:	00000000 	andeq	r0, r0, r0
    5430:	00004800 	andeq	r4, r0, r0, lsl #16
    5434:	9e9c0100 	fmllse	f0, f4, f0
    5438:	2c00000e 	stccs	0, cr0, [r0], {14}
    543c:	00002624 	andeq	r2, r0, r4, lsr #12
    5440:	ad138c01 	ldcge	12, cr8, [r3, #-4]
    5444:	02000009 	andeq	r0, r0, #9
    5448:	422c5c91 	eormi	r5, ip, #37120	; 0x9100
    544c:	0100001f 	tsteq	r0, pc, lsl r0
    5450:	0633278c 	ldrteq	r2, [r3], -ip, lsl #15
    5454:	91020000 	mrsls	r0, (UNDEF: 2)
    5458:	722f3274 	eorvc	r3, pc, #116, 4	; 0x40000007
    545c:	8e010063 	cdphi	0, 0, cr0, cr1, cr3, {3}
    5460:	00002509 	andeq	r2, r0, r9, lsl #10
    5464:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5468:	00026c33 	andeq	r6, r2, r3, lsr ip
    546c:	0d900100 	ldfeqs	f0, [r0]
    5470:	000000bb 	strheq	r0, [r0], -fp
    5474:	00609102 	rsbeq	r9, r0, r2, lsl #2
    5478:	00266d31 	eoreq	r6, r6, r1, lsr sp
    547c:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 5384 <__core1_unwind_stub-0xffac7c>
    5480:	00000025 	andeq	r0, r0, r5, lsr #32
    5484:	01003988 	smlabbeq	r0, r8, r9, r3
    5488:	00000050 	andeq	r0, r0, r0, asr r0
    548c:	0ee69c01 	cdpeq	12, 14, cr9, cr6, cr1, {0}
    5490:	422c0000 	eormi	r0, ip, #0
    5494:	0100001f 	tsteq	r0, pc, lsl r0
    5498:	06331c7f 			; <UNDEFINED> instruction: 0x06331c7f
    549c:	91020000 	mrsls	r0, (UNDEF: 2)
    54a0:	722f3270 	eorvc	r3, pc, #112, 4
    54a4:	81010063 	tsthi	r1, r3, rrx
    54a8:	00002509 	andeq	r2, r0, r9, lsl #10
    54ac:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    54b0:	00026c33 	andeq	r6, r2, r3, lsr ip
    54b4:	0d830100 	stfeqs	f0, [r3]
    54b8:	000000bb 	strheq	r0, [r0], -fp
    54bc:	00609102 	rsbeq	r9, r0, r2, lsl #2
    54c0:	00276c31 	eoreq	r6, r7, r1, lsr ip
    54c4:	056b0100 	strbeq	r0, [fp, #-256]!	; 0xffffff00
    54c8:	00000025 	andeq	r0, r0, r5, lsr #32
    54cc:	00000000 	andeq	r0, r0, r0
    54d0:	00000068 	andeq	r0, r0, r8, rrx
    54d4:	0f4b9c01 	svceq	0x004b9c01
    54d8:	742d0000 	strtvc	r0, [sp], #-0
    54dc:	6b01006f 	blvs	456a0 <__core1_unwind_stub-0xfba960>
    54e0:	0005fd17 	andeq	pc, r5, r7, lsl sp	; <UNPREDICTABLE>
    54e4:	4c910200 	lfmmi	f0, 4, [r1], {0}
    54e8:	001f422c 	andseq	r4, pc, ip, lsr #4
    54ec:	276b0100 	strbcs	r0, [fp, -r0, lsl #2]!
    54f0:	00000633 	andeq	r0, r0, r3, lsr r6
    54f4:	32749102 	rsbscc	r9, r4, #-2147483648	; 0x80000000
    54f8:	00277d33 	eoreq	r7, r7, r3, lsr sp
    54fc:	1b6d0100 	blne	1b45904 <__bss_end__+0xb29904>
    5500:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
    5504:	2f589102 	svccs	0x00589102
    5508:	01006372 	tsteq	r0, r2, ror r3
    550c:	0025096e 	eoreq	r0, r5, lr, ror #18
    5510:	91020000 	mrsls	r0, (UNDEF: 2)
    5514:	026c3364 	rsbeq	r3, ip, #100, 6	; 0x90000001
    5518:	70010000 	andvc	r0, r1, r0
    551c:	0000bb0d 	andeq	fp, r0, sp, lsl #22
    5520:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    5524:	26fb3100 	ldrbtcs	r3, [fp], r0, lsl #2
    5528:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    552c:	00002505 	andeq	r2, r0, r5, lsl #10
    5530:	00000000 	andeq	r0, r0, r0
    5534:	00007800 	andeq	r7, r0, r0, lsl #16
    5538:	bd9c0100 	ldflts	f0, [ip]
    553c:	2d00000f 	stccs	0, cr0, [r0, #-60]	; 0xffffffc4
    5540:	01006f74 	tsteq	r0, r4, ror pc
    5544:	05fd1859 	ldrbeq	r1, [sp, #2137]!	; 0x859
    5548:	91020000 	mrsls	r0, (UNDEF: 2)
    554c:	006e2d54 	rsbeq	r2, lr, r4, asr sp
    5550:	2c235901 			; <UNDEFINED> instruction: 0x2c235901
    5554:	02000000 	andeq	r0, r0, #0
    5558:	422c5091 	eormi	r5, ip, #145	; 0x91
    555c:	0100001f 	tsteq	r0, pc, lsl r0
    5560:	06333259 			; <UNDEFINED> instruction: 0x06333259
    5564:	91020000 	mrsls	r0, (UNDEF: 2)
    5568:	7d333278 	lfmvc	f3, 4, [r3, #-480]!	; 0xfffffe20
    556c:	01000027 	tsteq	r0, r7, lsr #32
    5570:	09b91b5b 	ldmibeq	r9!, {r0, r1, r3, r4, r6, r8, r9, fp, ip}
    5574:	91020000 	mrsls	r0, (UNDEF: 2)
    5578:	63722f60 	cmnvs	r2, #96, 30	; 0x180
    557c:	095c0100 	ldmdbeq	ip, {r8}^
    5580:	00000025 	andeq	r0, r0, r5, lsr #32
    5584:	336c9102 	cmncc	ip, #-2147483648	; 0x80000000
    5588:	0000026c 	andeq	r0, r0, ip, ror #4
    558c:	bb0d5e01 	bllt	35cd98 <__core1_unwind_stub-0xca3268>
    5590:	02000000 	andeq	r0, r0, #0
    5594:	34005c91 	strcc	r5, [r0], #-3217	; 0xfffff36f
    5598:	0000262b 	andeq	r2, r0, fp, lsr #12
    559c:	000d4901 	andeq	r4, sp, r1, lsl #18
    55a0:	b4000000 	strlt	r0, [r0], #-0
    55a4:	01000000 	mrseq	r0, (UNDEF: 0)
    55a8:	0010019c 	mulseq	r0, ip, r1
    55ac:	26342c00 	ldrtcs	r2, [r4], -r0, lsl #24
    55b0:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    55b4:	0006031b 	andeq	r0, r6, fp, lsl r3
    55b8:	6f910200 	svcvs	0x00910200
    55bc:	0029052c 	eoreq	r0, r9, ip, lsr #10
    55c0:	28490100 	stmdacs	r9, {r8}^
    55c4:	000009ad 	andeq	r0, r0, sp, lsr #19
    55c8:	33689102 	cmncc	r8, #-2147483648	; 0x80000000
    55cc:	0000277d 	andeq	r2, r0, sp, ror r7
    55d0:	d31c4b01 	tstle	ip, #1024	; 0x400
    55d4:	0200000a 	andeq	r0, r0, #10
    55d8:	31007491 			; <UNDEFINED> instruction: 0x31007491
    55dc:	00002716 	andeq	r2, r0, r6, lsl r7
    55e0:	2c08e005 	stccs	0, cr14, [r8], {5}
    55e4:	00000000 	andeq	r0, r0, r0
    55e8:	90000000 	andls	r0, r0, r0
    55ec:	01000000 	mrseq	r0, (UNDEF: 0)
    55f0:	0010769c 	mulseq	r0, ip, r6
    55f4:	74702d00 	ldrbtvc	r2, [r0], #-3328	; 0xfffff300
    55f8:	35010072 	strcc	r0, [r1, #-114]	; 0xffffff8e
    55fc:	0010761b 	andseq	r7, r0, fp, lsl r6
    5600:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5604:	0002fc2c 	andeq	pc, r2, ip, lsr #24
    5608:	27350100 	ldrcs	r0, [r5, -r0, lsl #2]!
    560c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5610:	2c689102 	stfcsp	f1, [r8], #-8
    5614:	00000a71 	andeq	r0, r0, r1, ror sl
    5618:	2c343501 	cfldr32cs	mvfx3, [r4], #-4
    561c:	02000000 	andeq	r0, r0, #0
    5620:	242c6491 	strtcs	r6, [ip], #-1169	; 0xfffffb6f
    5624:	01000026 	tsteq	r0, r6, lsr #32
    5628:	09ad4135 	stmibeq	sp!, {r0, r2, r4, r5, r8, lr}
    562c:	91020000 	mrsls	r0, (UNDEF: 2)
    5630:	261e3360 	ldrcs	r3, [lr], -r0, ror #6
    5634:	37010000 	strcc	r0, [r1, -r0]
    5638:	000ad31c 	andeq	sp, sl, ip, lsl r3
    563c:	70910200 	addsvc	r0, r1, r0, lsl #4
    5640:	00232933 	eoreq	r2, r3, r3, lsr r9
    5644:	09380100 	ldmdbeq	r8!, {r8}
    5648:	00000025 	andeq	r0, r0, r5, lsr #32
    564c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    5650:	107c0411 	rsbsne	r0, ip, r1, lsl r4
    5654:	36350000 	ldrtcc	r0, [r5], -r0
    5658:	0000269c 	muleq	r0, ip, r6
    565c:	2505dd05 	strcs	sp, [r5, #-3333]	; 0xfffff2fb
    5660:	00000000 	andeq	r0, r0, r0
    5664:	30000000 	andcc	r0, r0, r0
    5668:	01000000 	mrseq	r0, (UNDEF: 0)
    566c:	74732d9c 	ldrbtvc	r2, [r3], #-3484	; 0xfffff264
    5670:	30010072 	andcc	r0, r1, r2, ror r0
    5674:	00063316 	andeq	r3, r6, r6, lsl r3
    5678:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    567c:	0ce50000 	stcleq	0, cr0, [r5]
    5680:	00040000 	andeq	r0, r4, r0
    5684:	00000c68 	andeq	r0, r0, r8, ror #24
    5688:	003a0104 	eorseq	r0, sl, r4, lsl #2
    568c:	680c0000 	stmdavs	ip, {}	; <UNPREDICTABLE>
    5690:	df000028 	svcle	0x00000028
    5694:	d800000b 	stmdale	r0, {r0, r1, r3}
    5698:	00000004 	andeq	r0, r0, r4
    569c:	06000000 	streq	r0, [r0], -r0
    56a0:	0200002a 	andeq	r0, r0, #42	; 0x2a
    56a4:	04080601 	streq	r0, [r8], #-1537	; 0xfffff9ff
    56a8:	02020000 	andeq	r0, r2, #0
    56ac:	000d7005 	andeq	r7, sp, r5
    56b0:	0e610300 	cdpeq	3, 6, cr0, cr1, cr0, {0}
    56b4:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    56b8:	00003f18 	andeq	r3, r0, r8, lsl pc
    56bc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    56c0:	00000810 	andeq	r0, r0, r0, lsl r8
    56c4:	0b050802 	bleq	1476d4 <__core1_unwind_stub-0xeb892c>
    56c8:	02000008 	andeq	r0, r0, #8
    56cc:	04060801 	streq	r0, [r6], #-2049	; 0xfffff7ff
    56d0:	02020000 	andeq	r0, r2, #0
    56d4:	000ebd07 	andeq	fp, lr, r7, lsl #26
    56d8:	0e600300 	cdpeq	3, 6, cr0, cr0, cr0, {0}
    56dc:	34020000 	strcc	r0, [r2], #-0
    56e0:	00006719 	andeq	r6, r0, r9, lsl r7
    56e4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    56e8:	00000b46 	andeq	r0, r0, r6, asr #22
    56ec:	41070802 	tstmi	r7, r2, lsl #16
    56f0:	0400000b 	streq	r0, [r0], #-11
    56f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    56f8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    56fc:	000b4b07 	andeq	r4, fp, r7, lsl #22
    5700:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    5704:	00000aa3 	andeq	r0, r0, r3, lsr #21
    5708:	0004dc03 	andeq	sp, r4, r3, lsl #24
    570c:	1d410300 	stclne	3, cr0, [r1, #-0]
    5710:	00000033 	andeq	r0, r0, r3, lsr r0
    5714:	00094b03 	andeq	r4, r9, r3, lsl #22
    5718:	122a0400 	eorne	r0, sl, #0, 8
    571c:	0000005b 	andeq	r0, r0, fp, asr r0
    5720:	000dfd05 	andeq	pc, sp, r5, lsl #26
    5724:	4d010700 	stcmi	7, cr0, [r1, #-0]
    5728:	04000000 	streq	r0, [r0], #-0
    572c:	016f0e8b 	smulbbeq	pc, fp, lr	; <UNPREDICTABLE>
    5730:	2f060000 	svccs	0x00060000
    5734:	00000005 	andeq	r0, r0, r5
    5738:	000cdb06 	andeq	sp, ip, r6, lsl #22
    573c:	fd060100 	stc2	1, cr0, [r6, #-0]
    5740:	02000008 	andeq	r0, r0, #8
    5744:	000ad206 	andeq	sp, sl, r6, lsl #4
    5748:	82060300 	andhi	r0, r6, #0, 6
    574c:	04000005 	streq	r0, [r0], #-5
    5750:	000c9e06 	andeq	r9, ip, r6, lsl #28
    5754:	c4060500 	strgt	r0, [r6], #-1280	; 0xfffffb00
    5758:	0600000f 	streq	r0, [r0], -pc
    575c:	00011806 	andeq	r1, r1, r6, lsl #16
    5760:	8c060700 	stchi	7, cr0, [r6], {-0}
    5764:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5768:	0007ce06 	andeq	ip, r7, r6, lsl #28
    576c:	94060900 	strls	r0, [r6], #-2304	; 0xfffff700
    5770:	0a00000e 	beq	57b0 <__core1_unwind_stub-0xffa850>
    5774:	00027106 	andeq	r7, r2, r6, lsl #2
    5778:	f2060b00 	vqdmulh.s<illegal width 8>	d0, d6, d0
    577c:	0c00000a 	stceq	0, cr0, [r0], {10}
    5780:	00027f06 	andeq	r7, r2, r6, lsl #30
    5784:	90060d00 	andls	r0, r6, r0, lsl #26
    5788:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    578c:	0005da06 	andeq	sp, r5, r6, lsl #20
    5790:	c3060f00 	movwgt	r0, #28416	; 0x6f00
    5794:	10000003 	andne	r0, r0, r3
    5798:	000e7106 	andeq	r7, lr, r6, lsl #2
    579c:	9c061100 	stflss	f1, [r6], {-0}
    57a0:	1200000f 	andne	r0, r0, #15
    57a4:	000b5806 	andeq	r5, fp, r6, lsl #16
    57a8:	20061300 	andcs	r1, r6, r0, lsl #6
    57ac:	1400000d 	strne	r0, [r0], #-13
    57b0:	000d2e06 	andeq	r2, sp, r6, lsl #28
    57b4:	3c061500 	cfstr32cc	mvfx1, [r6], {-0}
    57b8:	1600000d 	strne	r0, [r0], -sp
    57bc:	00037606 	andeq	r7, r3, r6, lsl #12
    57c0:	fa061700 	blx	18b3c8 <__core1_unwind_stub-0xe74c38>
    57c4:	18000005 	stmdane	r0, {r0, r2}
    57c8:	000dd506 	andeq	sp, sp, r6, lsl #10
    57cc:	02061900 	andeq	r1, r6, #0, 18
    57d0:	1a000007 	bne	57f4 <__core1_unwind_stub-0xffa80c>
    57d4:	000eb006 	andeq	fp, lr, r6
    57d8:	e5061b00 	str	r1, [r6, #-2816]	; 0xfffff500
    57dc:	1c000008 	stcne	0, cr0, [r0], {8}
    57e0:	000c3a06 	andeq	r3, ip, r6, lsl #20
    57e4:	66061d00 	strvs	r1, [r6], -r0, lsl #26
    57e8:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    57ec:	1b030500 	blne	c6bf4 <__core1_unwind_stub-0xf3940c>
    57f0:	02070000 	andeq	r0, r7, #0
    57f4:	00000054 	andeq	r0, r0, r4, asr r0
    57f8:	950e4d05 	strls	r4, [lr, #-3333]	; 0xfffff2fb
    57fc:	06000001 	streq	r0, [r0], -r1
    5800:	000015d5 	ldrdeq	r1, [r0], -r5
    5804:	15f40600 	ldrbne	r0, [r4, #1536]!	; 0x600
    5808:	07010000 	streq	r0, [r1, -r0]
    580c:	000013ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    5810:	03000100 	movweq	r0, #256	; 0x100
    5814:	00001b86 	andeq	r1, r0, r6, lsl #23
    5818:	6f015f05 	svcvs	0x00015f05
    581c:	08000001 	stmdaeq	r0, {r0}
    5820:	00001bb0 			; <UNDEFINED> instruction: 0x00001bb0
    5824:	10660514 	rsbne	r0, r6, r4, lsl r5
    5828:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    582c:	00072709 	andeq	r2, r7, r9, lsl #14
    5830:	18680500 	stmdane	r8!, {r8, sl}^
    5834:	00000195 	muleq	r0, r5, r1
    5838:	285f0900 	ldmdacs	pc, {r8, fp}^	; <UNPREDICTABLE>
    583c:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    5840:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5844:	18090400 	stmdane	r9, {sl}
    5848:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    584c:	0096186a 	addseq	r1, r6, sl, ror #16
    5850:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    5854:	00002b39 	andeq	r2, r0, r9, lsr fp
    5858:	5b186b05 	blpl	620474 <__core1_unwind_stub-0x9dfb8c>
    585c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5860:	7263660a 	rsbvc	r6, r3, #10485760	; 0xa00000
    5864:	186c0500 	stmdane	ip!, {r8, sl}^
    5868:	0000005b 	andeq	r0, r0, fp, asr r0
    586c:	040b0010 	streq	r0, [fp], #-16
    5870:	001bc303 	andseq	ip, fp, r3, lsl #6
    5874:	016e0500 	cmneq	lr, r0, lsl #10
    5878:	000001a1 	andeq	r0, r0, r1, lsr #3
    587c:	0014fd0c 	andseq	pc, r4, ip, lsl #26
    5880:	4d010700 	stcmi	7, cr0, [r1, #-0]
    5884:	05000000 	streq	r0, [r0, #-0]
    5888:	2a0e053c 	bcs	386d80 <__core1_unwind_stub-0xc79280>
    588c:	06000002 	streq	r0, [r0], -r2
    5890:	00001422 	andeq	r1, r0, r2, lsr #8
    5894:	14370600 	ldrtne	r0, [r7], #-1536	; 0xfffffa00
    5898:	06010000 	streq	r0, [r1], -r0
    589c:	0000144c 	andeq	r1, r0, ip, asr #8
    58a0:	14610602 	strbtne	r0, [r1], #-1538	; 0xfffff9fe
    58a4:	00030000 	andeq	r0, r3, r0
    58a8:	00129c0c 	andseq	r9, r2, ip, lsl #24
    58ac:	4d010700 	stcmi	7, cr0, [r1, #-0]
    58b0:	05000000 	streq	r0, [r0, #-0]
    58b4:	4a0e0557 	bmi	386e18 <__core1_unwind_stub-0xc791e8>
    58b8:	06000002 	streq	r0, [r0], -r2
    58bc:	0000112e 	andeq	r1, r0, lr, lsr #2
    58c0:	11430600 	cmpne	r3, r0, lsl #12
    58c4:	00010000 	andeq	r0, r1, r0
    58c8:	001a560c 	andseq	r5, sl, ip, lsl #12
    58cc:	4d010700 	stcmi	7, cr0, [r1, #-0]
    58d0:	05000000 	streq	r0, [r0, #-0]
    58d4:	700e0569 	andvc	r0, lr, r9, ror #10
    58d8:	06000002 	streq	r0, [r0], -r2
    58dc:	000015b7 			; <UNDEFINED> instruction: 0x000015b7
    58e0:	168a0600 	strne	r0, [sl], r0, lsl #12
    58e4:	06010000 	streq	r0, [r1], -r0
    58e8:	00001a40 	andeq	r1, r0, r0, asr #20
    58ec:	b00c0002 	andlt	r0, ip, r2
    58f0:	07000028 	streq	r0, [r0, -r8, lsr #32]
    58f4:	00004d01 	andeq	r4, r0, r1, lsl #26
    58f8:	05820500 	streq	r0, [r2, #1280]	; 0x500
    58fc:	0002b40e 	andeq	fp, r2, lr, lsl #8
    5900:	29250600 	stmdbcs	r5!, {r9, sl}
    5904:	06800000 	streq	r0, [r0], r0
    5908:	00002826 	andeq	r2, r0, r6, lsr #16
    590c:	290a0640 	stmdbcs	sl, {r6, r9, sl}
    5910:	06200000 	strteq	r0, [r0], -r0
    5914:	00002803 	andeq	r2, r0, r3, lsl #16
    5918:	28970610 	ldmcs	r7, {r4, r9, sl}
    591c:	06080000 	streq	r0, [r8], -r0
    5920:	000027c1 	andeq	r2, r0, r1, asr #15
    5924:	27a80604 	strcs	r0, [r8, r4, lsl #12]!
    5928:	06020000 	streq	r0, [r2], -r0
    592c:	00002841 	andeq	r2, r0, r1, asr #16
    5930:	970d0001 	strls	r0, [sp, -r1]
    5934:	0600000c 	streq	r0, [r0], -ip
    5938:	7c17015e 	ldfvcs	f0, [r7], {94}	; 0x5e
    593c:	03000000 	movweq	r0, #0
    5940:	00000ea4 	andeq	r0, r0, r4, lsr #29
    5944:	3f0e2e07 	svccc	0x000e2e07
    5948:	03000000 	movweq	r0, #0
    594c:	00000ae3 	andeq	r0, r0, r3, ror #21
    5950:	3f0e7407 	svccc	0x000e7407
    5954:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5958:	03a50704 			; <UNDEFINED> instruction: 0x03a50704
    595c:	000002fb 	strdeq	r0, [r0], -fp
    5960:	00023a0f 	andeq	r3, r2, pc, lsl #20
    5964:	0ca70700 	stceq	7, cr0, [r7]
    5968:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    596c:	000aeb0f 	andeq	lr, sl, pc, lsl #22
    5970:	13a80700 			; <UNDEFINED> instruction: 0x13a80700
    5974:	000002fb 	strdeq	r0, [r0], -fp
    5978:	004d1000 	subeq	r1, sp, r0
    597c:	030b0000 	movweq	r0, #45056	; 0xb000
    5980:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    5984:	03000000 	movweq	r0, #0
    5988:	07081200 	streq	r1, [r8, -r0, lsl #4]
    598c:	032f09a2 			; <UNDEFINED> instruction: 0x032f09a2
    5990:	6f090000 	svcvs	0x00090000
    5994:	0700000a 	streq	r0, [r0, -sl]
    5998:	007507a4 	rsbseq	r0, r5, r4, lsr #15
    599c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    59a0:	0000000b 	andeq	r0, r0, fp
    59a4:	d905a907 	stmdble	r5, {r0, r1, r2, r8, fp, sp, pc}
    59a8:	04000002 	streq	r0, [r0], #-2
    59ac:	0c2f0300 	stceq	3, cr0, [pc], #-0	; 59b4 <__core1_unwind_stub-0xffa64c>
    59b0:	aa070000 	bge	1c59b8 <__core1_unwind_stub-0xe3a648>
    59b4:	00030b03 	andeq	r0, r3, r3, lsl #22
    59b8:	0e580300 	cdpeq	3, 5, cr0, cr8, cr0, {0}
    59bc:	16080000 	strne	r0, [r8], -r0
    59c0:	00006719 	andeq	r6, r0, r9, lsl r7
    59c4:	06b90300 	ldrteq	r0, [r9], r0, lsl #6
    59c8:	0c090000 	stceq	0, cr0, [r9], {-0}
    59cc:	0000750d 	andeq	r7, r0, sp, lsl #10
    59d0:	0bd60300 	bleq	ff5865d8 <__shm_end__+0xbf5865d8>
    59d4:	23080000 	movwcs	r0, #32768	; 0x8000
    59d8:	0003471b 	andeq	r4, r3, fp, lsl r7
    59dc:	070e0800 	streq	r0, [lr, -r0, lsl #16]
    59e0:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    59e4:	03b90834 			; <UNDEFINED> instruction: 0x03b90834
    59e8:	3a090000 	bcc	2459f0 <__core1_unwind_stub-0xdba610>
    59ec:	0800000a 	stmdaeq	r0, {r1, r3}
    59f0:	03b91336 			; <UNDEFINED> instruction: 0x03b91336
    59f4:	0a000000 	beq	59fc <__core1_unwind_stub-0xffa604>
    59f8:	08006b5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
    59fc:	00750737 	rsbseq	r0, r5, r7, lsr r7
    5a00:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    5a04:	00000767 	andeq	r0, r0, r7, ror #14
    5a08:	750b3708 	strvc	r3, [fp, #-1800]	; 0xfffff8f8
    5a0c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5a10:	0008c509 	andeq	ip, r8, r9, lsl #10
    5a14:	14370800 	ldrtne	r0, [r7], #-2048	; 0xfffff800
    5a18:	00000075 	andeq	r0, r0, r5, ror r0
    5a1c:	0607090c 	streq	r0, [r7], -ip, lsl #18
    5a20:	37080000 	strcc	r0, [r8, -r0]
    5a24:	0000751b 	andeq	r7, r0, fp, lsl r5
    5a28:	5f0a1000 	svcpl	0x000a1000
    5a2c:	38080078 	stmdacc	r8, {r3, r4, r5, r6}
    5a30:	0003bf0b 	andeq	fp, r3, fp, lsl #30
    5a34:	13001400 	movwne	r1, #1024	; 0x400
    5a38:	00035f04 	andeq	r5, r3, r4, lsl #30
    5a3c:	033b1000 	teqeq	fp, #0
    5a40:	03cf0000 	biceq	r0, pc, #0
    5a44:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    5a48:	00000000 	andeq	r0, r0, r0
    5a4c:	01400800 	cmpeq	r0, r0, lsl #16
    5a50:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    5a54:	0452083c 	ldrbeq	r0, [r2], #-2108	; 0xfffff7c4
    5a58:	5c090000 	stcpl	0, cr0, [r9], {-0}
    5a5c:	08000001 	stmdaeq	r0, {r0}
    5a60:	0075093e 	rsbseq	r0, r5, lr, lsr r9
    5a64:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5a68:	00000fae 	andeq	r0, r0, lr, lsr #31
    5a6c:	75093f08 	strvc	r3, [r9, #-3848]	; 0xfffff0f8
    5a70:	04000000 	streq	r0, [r0], #-0
    5a74:	000ed009 	andeq	sp, lr, r9
    5a78:	09400800 	stmdbeq	r0, {fp}^
    5a7c:	00000075 	andeq	r0, r0, r5, ror r0
    5a80:	0a010908 	beq	47ea8 <__core1_unwind_stub-0xfb8158>
    5a84:	41080000 	mrsmi	r0, (UNDEF: 8)
    5a88:	00007509 	andeq	r7, r0, r9, lsl #10
    5a8c:	92090c00 	andls	r0, r9, #0, 24
    5a90:	08000003 	stmdaeq	r0, {r0, r1}
    5a94:	00750942 	rsbseq	r0, r5, r2, asr #18
    5a98:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    5a9c:	00000df3 	strdeq	r0, [r0], -r3
    5aa0:	75094308 	strvc	r4, [r9, #-776]	; 0xfffffcf8
    5aa4:	14000000 	strne	r0, [r0], #-0
    5aa8:	000a8109 	andeq	r8, sl, r9, lsl #2
    5aac:	09440800 	stmdbeq	r4, {fp}^
    5ab0:	00000075 	andeq	r0, r0, r5, ror r0
    5ab4:	0aaf0918 	beq	febc7f1c <__shm_end__+0xbebc7f1c>
    5ab8:	45080000 	strmi	r0, [r8, #-0]
    5abc:	00007509 	andeq	r7, r0, r9, lsl #10
    5ac0:	74091c00 	strvc	r1, [r9], #-3072	; 0xfffff400
    5ac4:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5ac8:	00750946 	rsbseq	r0, r5, r6, asr #18
    5acc:	00200000 	eoreq	r0, r0, r0
    5ad0:	00026314 	andeq	r6, r2, r4, lsl r3
    5ad4:	08010800 	stmdaeq	r1, {fp}
    5ad8:	0497084f 	ldreq	r0, [r7], #2127	; 0x84f
    5adc:	60090000 	andvs	r0, r9, r0
    5ae0:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5ae4:	04970a50 	ldreq	r0, [r7], #2640	; 0xa50
    5ae8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5aec:	00000b6c 	andeq	r0, r0, ip, ror #22
    5af0:	97095108 	strls	r5, [r9, -r8, lsl #2]
    5af4:	80000004 	andhi	r0, r0, r4
    5af8:	000de315 	andeq	lr, sp, r5, lsl r3
    5afc:	0a530800 	beq	14c7b04 <__bss_end__+0x4abb04>
    5b00:	0000033b 	andeq	r0, r0, fp, lsr r3
    5b04:	1f150100 	svcne	0x00150100
    5b08:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    5b0c:	033b0a56 	teqeq	fp, #352256	; 0x56000
    5b10:	01040000 	mrseq	r0, (UNDEF: 4)
    5b14:	01f01000 	mvnseq	r1, r0
    5b18:	04a70000 	strteq	r0, [r7], #0
    5b1c:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    5b20:	1f000000 	svcne	0x00000000
    5b24:	0a5a1400 	beq	168ab2c <__bss_end__+0x66eb2c>
    5b28:	01900000 	orrseq	r0, r0, r0
    5b2c:	ea086208 	b	21e354 <__core1_unwind_stub-0xde1cac>
    5b30:	09000004 	stmdbeq	r0, {r2}
    5b34:	00000a3a 	andeq	r0, r0, sl, lsr sl
    5b38:	ea126308 	b	49e760 <__core1_unwind_stub-0xb618a0>
    5b3c:	00000004 	andeq	r0, r0, r4
    5b40:	000e1309 	andeq	r1, lr, r9, lsl #6
    5b44:	06640800 	strbteq	r0, [r4], -r0, lsl #16
    5b48:	00000075 	andeq	r0, r0, r5, ror r0
    5b4c:	04990904 	ldreq	r0, [r9], #2308	; 0x904
    5b50:	66080000 	strvs	r0, [r8], -r0
    5b54:	0004f009 	andeq	pc, r4, r9
    5b58:	63090800 	movwvs	r0, #38912	; 0x9800
    5b5c:	08000002 	stmdaeq	r0, {r1}
    5b60:	04521e67 	ldrbeq	r1, [r2], #-3687	; 0xfffff199
    5b64:	00880000 	addeq	r0, r8, r0
    5b68:	04a70413 	strteq	r0, [r7], #1043	; 0x413
    5b6c:	00100000 	andseq	r0, r0, r0
    5b70:	00000005 	andeq	r0, r0, r5
    5b74:	11000005 	tstne	r0, r5
    5b78:	0000007c 	andeq	r0, r0, ip, ror r0
    5b7c:	0413001f 	ldreq	r0, [r3], #-31	; 0xffffffe1
    5b80:	00000506 	andeq	r0, r0, r6, lsl #10
    5b84:	0e180816 	mrceq	8, 0, r0, cr8, cr6, {0}
    5b88:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    5b8c:	052f087a 	streq	r0, [pc, #-2170]!	; 531a <__core1_unwind_stub-0xfface6>
    5b90:	b4090000 	strlt	r0, [r9], #-0
    5b94:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    5b98:	052f117b 	streq	r1, [pc, #-379]!	; 5a25 <__core1_unwind_stub-0xffa5db>
    5b9c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5ba0:	000002fb 	strdeq	r0, [r0], -fp
    5ba4:	75067c08 	strvc	r7, [r6, #-3080]	; 0xfffff3f8
    5ba8:	04000000 	streq	r0, [r0], #-0
    5bac:	4d041300 	stcmi	3, cr1, [r4, #-0]
    5bb0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5bb4:	00000687 	andeq	r0, r0, r7, lsl #13
    5bb8:	08ba0868 	ldmeq	sl!, {r3, r5, r6, fp}
    5bbc:	00000678 	andeq	r0, r0, r8, ror r6
    5bc0:	00705f0a 	rsbseq	r5, r0, sl, lsl #30
    5bc4:	2f12bb08 	svccs	0x0012bb08
    5bc8:	00000005 	andeq	r0, r0, r5
    5bcc:	00725f0a 	rsbseq	r5, r2, sl, lsl #30
    5bd0:	7507bc08 	strvc	fp, [r7, #-3080]	; 0xfffff3f8
    5bd4:	04000000 	streq	r0, [r0], #-0
    5bd8:	00775f0a 	rsbseq	r5, r7, sl, lsl #30
    5bdc:	7507bd08 	strvc	fp, [r7, #-3336]	; 0xfffff2f8
    5be0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5be4:	000a4009 	andeq	r4, sl, r9
    5be8:	09be0800 	ldmibeq	lr!, {fp}
    5bec:	0000002c 	andeq	r0, r0, ip, lsr #32
    5bf0:	025d090c 	subseq	r0, sp, #12, 18	; 0x30000
    5bf4:	bf080000 	svclt	0x00080000
    5bf8:	00002c09 	andeq	r2, r0, r9, lsl #24
    5bfc:	5f0a0e00 	svcpl	0x000a0e00
    5c00:	08006662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp, lr}
    5c04:	050711c0 	streq	r1, [r7, #-448]	; 0xfffffe40
    5c08:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    5c0c:	00000e05 	andeq	r0, r0, r5, lsl #28
    5c10:	7507c108 	strvc	ip, [r7, #-264]	; 0xfffffef8
    5c14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5c18:	0005ea09 	andeq	lr, r5, r9, lsl #20
    5c1c:	0ac80800 	beq	ff207c24 <__shm_end__+0xbf207c24>
    5c20:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5c24:	1c5f091c 	mrrcne	9, 1, r0, pc, cr12	; <UNPREDICTABLE>
    5c28:	ca080000 	bgt	205c30 <__core1_unwind_stub-0xdfa3d0>
    5c2c:	0007fc1d 	andeq	pc, r7, sp, lsl ip	; <UNPREDICTABLE>
    5c30:	a3092000 	movwge	r2, #36864	; 0x9000
    5c34:	08000011 	stmdaeq	r0, {r0, r4}
    5c38:	08261dcc 	stmdaeq	r6!, {r2, r3, r6, r7, r8, sl, fp, ip}
    5c3c:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    5c40:	00000acc 	andeq	r0, r0, ip, asr #21
    5c44:	4a0dcf08 	bmi	37986c <__core1_unwind_stub-0xc86794>
    5c48:	28000008 	stmdacs	r0, {r3}
    5c4c:	002b4409 	eoreq	r4, fp, r9, lsl #8
    5c50:	09d00800 	ldmibeq	r0, {fp}^
    5c54:	00000864 	andeq	r0, r0, r4, ror #16
    5c58:	755f0a2c 	ldrbvc	r0, [pc, #-2604]	; 5234 <__core1_unwind_stub-0xffadcc>
    5c5c:	d3080062 	movwle	r0, #32866	; 0x8062
    5c60:	00050711 	andeq	r0, r5, r1, lsl r7
    5c64:	5f0a3000 	svcpl	0x000a3000
    5c68:	08007075 	stmdaeq	r0, {r0, r2, r4, r5, r6, ip, sp, lr}
    5c6c:	052f12d4 	streq	r1, [pc, #-724]!	; 59a0 <__core1_unwind_stub-0xffa660>
    5c70:	0a380000 	beq	e05c78 <__core1_unwind_stub-0x1fa388>
    5c74:	0072755f 	rsbseq	r7, r2, pc, asr r5
    5c78:	7507d508 	strvc	sp, [r7, #-1288]	; 0xfffffaf8
    5c7c:	3c000000 	stccc	0, cr0, [r0], {-0}
    5c80:	000a1009 	andeq	r1, sl, r9
    5c84:	11d80800 	bicsne	r0, r8, r0, lsl #16
    5c88:	0000086a 	andeq	r0, r0, sl, ror #16
    5c8c:	01560940 	cmpeq	r6, r0, asr #18
    5c90:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    5c94:	00087a11 	andeq	r7, r8, r1, lsl sl
    5c98:	5f0a4300 	svcpl	0x000a4300
    5c9c:	0800626c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp, lr}
    5ca0:	050711dc 	streq	r1, [r7, #-476]	; 0xfffffe24
    5ca4:	09440000 	stmdbeq	r4, {}^	; <UNPREDICTABLE>
    5ca8:	00000b95 	muleq	r0, r5, fp
    5cac:	7507df08 	strvc	sp, [r7, #-3848]	; 0xfffff0f8
    5cb0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5cb4:	00062d09 	andeq	r2, r6, r9, lsl #26
    5cb8:	0ae00800 	beq	ff807cc0 <__shm_end__+0xbf807cc0>
    5cbc:	000002c1 	andeq	r0, r0, r1, asr #5
    5cc0:	2b380950 	blcs	e08208 <__core1_unwind_stub-0x1f7df8>
    5cc4:	e3080000 	movw	r0, #32768	; 0x8000
    5cc8:	00069612 	andeq	r9, r6, r2, lsl r6
    5ccc:	ab095400 	blge	25acd4 <__core1_unwind_stub-0xda532c>
    5cd0:	08000001 	stmdaeq	r0, {r0}
    5cd4:	03530ce7 	cmpeq	r3, #59136	; 0xe700
    5cd8:	09580000 	ldmdbeq	r8, {}^	; <UNPREDICTABLE>
    5cdc:	00000a2c 	andeq	r0, r0, ip, lsr #20
    5ce0:	2f0ee908 	svccs	0x000ee908
    5ce4:	5c000003 	stcpl	0, cr0, [r0], {3}
    5ce8:	00069a09 	andeq	r9, r6, r9, lsl #20
    5cec:	09ea0800 	stmibeq	sl!, {fp}^
    5cf0:	00000075 	andeq	r0, r0, r5, ror r0
    5cf4:	75170064 	ldrvc	r0, [r7, #-100]	; 0xffffff9c
    5cf8:	96000000 	strls	r0, [r0], -r0
    5cfc:	18000006 	stmdane	r0, {r1, r2}
    5d00:	00000696 	muleq	r0, r6, r6
    5d04:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5d08:	07ea1800 	strbeq	r1, [sl, r0, lsl #16]!
    5d0c:	75180000 	ldrvc	r0, [r8, #-0]
    5d10:	00000000 	andeq	r0, r0, r0
    5d14:	06a10413 	ssateq	r0, #2, r3, lsl #8
    5d18:	96190000 	ldrls	r0, [r9], -r0
    5d1c:	1a000006 	bne	5d3c <__core1_unwind_stub-0xffa2c4>
    5d20:	0000044c 	andeq	r0, r0, ip, asr #8
    5d24:	65080428 	strvs	r0, [r8, #-1064]	; 0xfffffbd8
    5d28:	07ea0802 	strbeq	r0, [sl, r2, lsl #16]!
    5d2c:	981b0000 	ldmdals	fp, {}	; <UNPREDICTABLE>
    5d30:	08000009 	stmdaeq	r0, {r0, r3}
    5d34:	75070267 	strvc	r0, [r7, #-615]	; 0xfffffd99
    5d38:	00000000 	andeq	r0, r0, r0
    5d3c:	0005281b 	andeq	r2, r5, fp, lsl r8
    5d40:	026c0800 	rsbeq	r0, ip, #0, 16
    5d44:	0008d60b 	andeq	sp, r8, fp, lsl #12
    5d48:	8d1b0400 	cfldrshi	mvf0, [fp, #-0]
    5d4c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    5d50:	d614026c 	ldrle	r0, [r4], -ip, ror #4
    5d54:	08000008 	stmdaeq	r0, {r3}
    5d58:	000a161b 	andeq	r1, sl, fp, lsl r6
    5d5c:	026c0800 	rsbeq	r0, ip, #0, 16
    5d60:	0008d61e 	andeq	sp, r8, lr, lsl r6
    5d64:	0e1b0c00 	cdpeq	12, 1, cr0, cr11, cr0, {0}
    5d68:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    5d6c:	7508026e 	strvc	r0, [r8, #-622]	; 0xfffffd92
    5d70:	10000000 	andne	r0, r0, r0
    5d74:	0008001b 	andeq	r0, r8, fp, lsl r0
    5d78:	026f0800 	rsbeq	r0, pc, #0, 16
    5d7c:	000ad608 	andeq	sp, sl, r8, lsl #12
    5d80:	331b1400 	tstcc	fp, #0, 8
    5d84:	08000004 	stmdaeq	r0, {r2}
    5d88:	75070272 	strvc	r0, [r7, #-626]	; 0xfffffd8e
    5d8c:	30000000 	andcc	r0, r0, r0
    5d90:	000e501b 	andeq	r5, lr, fp, lsl r0
    5d94:	02730800 	rsbseq	r0, r3, #0, 16
    5d98:	000aeb16 	andeq	lr, sl, r6, lsl fp
    5d9c:	8f1b3400 	svchi	0x001b3400
    5da0:	08000006 	stmdaeq	r0, {r1, r2}
    5da4:	75070275 	strvc	r0, [r7, #-629]	; 0xfffffd8b
    5da8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5dac:	0007831b 	andeq	r8, r7, fp, lsl r3
    5db0:	02770800 	rsbseq	r0, r7, #0, 16
    5db4:	000afc0a 	andeq	pc, sl, sl, lsl #24
    5db8:	691b3c00 	ldmdbvs	fp, {sl, fp, ip, sp}
    5dbc:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    5dc0:	b913027a 	ldmdblt	r3, {r1, r3, r4, r5, r6, r9}
    5dc4:	40000003 	andmi	r0, r0, r3
    5dc8:	0002f11b 	andeq	pc, r2, fp, lsl r1	; <UNPREDICTABLE>
    5dcc:	027b0800 	rsbseq	r0, fp, #0, 16
    5dd0:	00007507 	andeq	r7, r0, r7, lsl #10
    5dd4:	751b4400 	ldrvc	r4, [fp, #-1024]	; 0xfffffc00
    5dd8:	08000006 	stmdaeq	r0, {r1, r2}
    5ddc:	b913027c 	ldmdblt	r3, {r2, r3, r4, r5, r6, r9}
    5de0:	48000003 	stmdami	r0, {r0, r1}
    5de4:	0008af1b 	andeq	sl, r8, fp, lsl pc
    5de8:	027d0800 	rsbseq	r0, sp, #0, 16
    5dec:	000b0214 	andeq	r0, fp, r4, lsl r2
    5df0:	101b4c00 	andsne	r4, fp, r0, lsl #24
    5df4:	08000001 	stmdaeq	r0, {r0}
    5df8:	75070280 	strvc	r0, [r7, #-640]	; 0xfffffd80
    5dfc:	50000000 	andpl	r0, r0, r0
    5e00:	0006351b 	andeq	r3, r6, fp, lsl r5
    5e04:	02810800 	addeq	r0, r1, #0, 16
    5e08:	0007ea09 	andeq	lr, r7, r9, lsl #20
    5e0c:	0b1b5400 	bleq	6dae14 <__core1_unwind_stub-0x9251ec>
    5e10:	0800000a 	stmdaeq	r0, {r1, r3}
    5e14:	b10702a4 	smlatblt	r7, r4, r2, r0
    5e18:	5800000a 	stmdapl	r0, {r1, r3}
    5e1c:	000a5a1c 	andeq	r5, sl, ip, lsl sl
    5e20:	02a80800 	adceq	r0, r8, #0, 16
    5e24:	0004ea13 	andeq	lr, r4, r3, lsl sl
    5e28:	1c014800 	stcne	8, cr4, [r1], {-0}
    5e2c:	0000078d 	andeq	r0, r0, sp, lsl #15
    5e30:	1202a908 	andne	sl, r2, #8, 18	; 0x20000
    5e34:	000004a7 	andeq	r0, r0, r7, lsr #9
    5e38:	231c014c 	tstcs	ip, #76, 2
    5e3c:	08000006 	stmdaeq	r0, {r1, r2}
    5e40:	130c02ad 	movwne	r0, #49837	; 0xc2ad
    5e44:	dc00000b 	stcle	0, cr0, [r0], {11}
    5e48:	083a1c02 	ldmdaeq	sl!, {r1, sl, fp, ip}
    5e4c:	b2080000 	andlt	r0, r8, #0
    5e50:	08971002 	ldmeq	r7, {r1, ip}
    5e54:	02e00000 	rsceq	r0, r0, #0
    5e58:	0000131c 	andeq	r1, r0, ip, lsl r3
    5e5c:	02b40800 	adcseq	r0, r4, #0, 16
    5e60:	000b1f0a 	andeq	r1, fp, sl, lsl #30
    5e64:	0002ec00 	andeq	lr, r2, r0, lsl #24
    5e68:	07f00413 			; <UNDEFINED> instruction: 0x07f00413
    5e6c:	01020000 	mrseq	r0, (UNDEF: 2)
    5e70:	00040f08 	andeq	r0, r4, r8, lsl #30
    5e74:	07f01900 	ldrbeq	r1, [r0, r0, lsl #18]!
    5e78:	04130000 	ldreq	r0, [r3], #-0
    5e7c:	00000678 	andeq	r0, r0, r8, ror r6
    5e80:	00007517 	andeq	r7, r0, r7, lsl r5
    5e84:	00082000 	andeq	r2, r8, r0
    5e88:	06961800 	ldreq	r1, [r6], r0, lsl #16
    5e8c:	f0180000 			; <UNDEFINED> instruction: 0xf0180000
    5e90:	18000001 	stmdane	r0, {r0}
    5e94:	00000820 	andeq	r0, r0, r0, lsr #16
    5e98:	00007518 	andeq	r7, r0, r8, lsl r5
    5e9c:	04130000 	ldreq	r0, [r3], #-0
    5ea0:	000007f7 	strdeq	r0, [r0], -r7
    5ea4:	08020413 	stmdaeq	r2, {r0, r1, r4, sl}
    5ea8:	cd170000 	ldcgt	0, cr0, [r7, #-0]
    5eac:	4a000002 	bmi	5ebc <__core1_unwind_stub-0xffa144>
    5eb0:	18000008 	stmdane	r0, {r3}
    5eb4:	00000696 	muleq	r0, r6, r6
    5eb8:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5ebc:	02cd1800 	sbceq	r1, sp, #0, 16
    5ec0:	75180000 	ldrvc	r0, [r8, #-0]
    5ec4:	00000000 	andeq	r0, r0, r0
    5ec8:	082c0413 	stmdaeq	ip!, {r0, r1, r4, sl}
    5ecc:	75170000 	ldrvc	r0, [r7, #-0]
    5ed0:	64000000 	strvs	r0, [r0], #-0
    5ed4:	18000008 	stmdane	r0, {r3}
    5ed8:	00000696 	muleq	r0, r6, r6
    5edc:	0001f018 	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
    5ee0:	04130000 	ldreq	r0, [r3], #-0
    5ee4:	00000850 	andeq	r0, r0, r0, asr r8
    5ee8:	00004d10 	andeq	r4, r0, r0, lsl sp
    5eec:	00087a00 	andeq	r7, r8, r0, lsl #20
    5ef0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    5ef4:	00020000 	andeq	r0, r2, r0
    5ef8:	00004d10 	andeq	r4, r0, r0, lsl sp
    5efc:	00088a00 	andeq	r8, r8, r0, lsl #20
    5f00:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    5f04:	00000000 	andeq	r0, r0, r0
    5f08:	000c210d 	andeq	r2, ip, sp, lsl #2
    5f0c:	01240800 			; <UNDEFINED> instruction: 0x01240800
    5f10:	0005351a 	andeq	r3, r5, sl, lsl r5
    5f14:	08bf1d00 	ldmeq	pc!, {r8, sl, fp, ip}	; <UNPREDICTABLE>
    5f18:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    5f1c:	d0080128 	andle	r0, r8, r8, lsr #2
    5f20:	1b000008 	blne	5f48 <__core1_unwind_stub-0xffa0b8>
    5f24:	00000a3a 	andeq	r0, r0, sl, lsr sl
    5f28:	11012a08 	tstne	r1, r8, lsl #20
    5f2c:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5f30:	08331b00 	ldmdaeq	r3!, {r8, r9, fp, ip}
    5f34:	2b080000 	blcs	205f3c <__core1_unwind_stub-0xdfa0c4>
    5f38:	00750701 	rsbseq	r0, r5, r1, lsl #14
    5f3c:	1b040000 	blne	105f44 <__core1_unwind_stub-0xefa0bc>
    5f40:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    5f44:	0b012c08 	bleq	50f6c <__core1_unwind_stub-0xfaf094>
    5f48:	000008d6 	ldrdeq	r0, [r0], -r6
    5f4c:	04130008 	ldreq	r0, [r3], #-8
    5f50:	00000897 	muleq	r0, r7, r8
    5f54:	088a0413 	stmeq	sl, {r0, r1, r4, sl}
    5f58:	851d0000 	ldrhi	r0, [sp, #-0]
    5f5c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    5f60:	08014408 	stmdaeq	r1, {r3, sl, lr}
    5f64:	00000915 	andeq	r0, r0, r5, lsl r9
    5f68:	000ac61b 	andeq	ip, sl, fp, lsl r6
    5f6c:	01450800 	cmpeq	r5, r0, lsl #16
    5f70:	00091512 	andeq	r1, r9, r2, lsl r5
    5f74:	bf1b0000 	svclt	0x001b0000
    5f78:	08000001 	stmdaeq	r0, {r0}
    5f7c:	15120146 	ldrne	r0, [r2, #-326]	; 0xfffffeba
    5f80:	06000009 	streq	r0, [r0], -r9
    5f84:	000eab1b 	andeq	sl, lr, fp, lsl fp
    5f88:	01470800 	cmpeq	r7, r0, lsl #16
    5f8c:	00005412 	andeq	r5, r0, r2, lsl r4
    5f90:	10000c00 	andne	r0, r0, r0, lsl #24
    5f94:	00000054 	andeq	r0, r0, r4, asr r0
    5f98:	00000925 	andeq	r0, r0, r5, lsr #18
    5f9c:	00007c11 	andeq	r7, r0, r1, lsl ip
    5fa0:	1e000200 	cdpne	2, 0, cr0, cr0, cr0, {0}
    5fa4:	028508d0 	addeq	r0, r5, #208, 16	; 0xd00000
    5fa8:	000a3a07 	andeq	r3, sl, r7, lsl #20
    5fac:	03d41b00 	bicseq	r1, r4, #0, 22
    5fb0:	87080000 	strhi	r0, [r8, -r0]
    5fb4:	007c1802 	rsbseq	r1, ip, r2, lsl #16
    5fb8:	1b000000 	blne	5fc0 <__core1_unwind_stub-0xffa040>
    5fbc:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    5fc0:	12028808 	andne	r8, r2, #8, 16	; 0x80000
    5fc4:	000007ea 	andeq	r0, r0, sl, ror #15
    5fc8:	002d1b04 	eoreq	r1, sp, r4, lsl #22
    5fcc:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    5fd0:	0a3a1002 	beq	e89fe0 <__core1_unwind_stub-0x176020>
    5fd4:	1b080000 	blne	205fdc <__core1_unwind_stub-0xdfa024>
    5fd8:	00000316 	andeq	r0, r0, r6, lsl r3
    5fdc:	17028a08 	strne	r8, [r2, -r8, lsl #20]
    5fe0:	000003cf 	andeq	r0, r0, pc, asr #7
    5fe4:	08891b24 	stmeq	r9, {r2, r5, r8, r9, fp, ip}
    5fe8:	8b080000 	blhi	205ff0 <__core1_unwind_stub-0xdfa010>
    5fec:	00750f02 	rsbseq	r0, r5, r2, lsl #30
    5ff0:	1b480000 	blne	1205ff8 <__bss_end__+0x1e9ff8>
    5ff4:	00000a35 	andeq	r0, r0, r5, lsr sl
    5ff8:	2c028c08 	stccs	12, cr8, [r2], {8}
    5ffc:	0000006e 	andeq	r0, r0, lr, rrx
    6000:	0c851b50 	vstmiaeq	r5, {d1-<overflow reg d40>}
    6004:	8d080000 	stchi	0, cr0, [r8, #-0]
    6008:	08dc1a02 	ldmeq	ip, {r1, r9, fp, ip}^
    600c:	1b580000 	blne	1606014 <__bss_end__+0x5ea014>
    6010:	00000d63 	andeq	r0, r0, r3, ror #26
    6014:	16028e08 	strne	r8, [r2], -r8, lsl #28
    6018:	0000032f 	andeq	r0, r0, pc, lsr #6
    601c:	0b001b68 	bleq	cdc4 <__core1_unwind_stub-0xff323c>
    6020:	8f080000 	svchi	0x00080000
    6024:	032f1602 			; <UNDEFINED> instruction: 0x032f1602
    6028:	1b700000 	blne	1c06030 <__bss_end__+0xbea030>
    602c:	00000a1e 	andeq	r0, r0, lr, lsl sl
    6030:	16029008 	strne	r9, [r2], -r8
    6034:	0000032f 	andeq	r0, r0, pc, lsr #6
    6038:	01651b78 	smceq	20920	; 0x51b8
    603c:	91080000 	mrsls	r0, (UNDEF: 8)
    6040:	0a4a1002 	beq	128a050 <__bss_end__+0x26e050>
    6044:	1b800000 	blne	fe00604c <__shm_end__+0xbe00604c>
    6048:	000006e9 	andeq	r0, r0, r9, ror #13
    604c:	10029208 	andne	r9, r2, r8, lsl #4
    6050:	00000a5a 	andeq	r0, r0, sl, asr sl
    6054:	0fb71b88 	svceq	0x00b71b88
    6058:	93080000 	movwls	r0, #32768	; 0x8000
    605c:	00750f02 	rsbseq	r0, r5, r2, lsl #30
    6060:	1ba00000 	blne	fe806068 <__shm_end__+0xbe806068>
    6064:	000002e3 	andeq	r0, r0, r3, ror #5
    6068:	16029408 	strne	r9, [r2], -r8, lsl #8
    606c:	0000032f 	andeq	r0, r0, pc, lsr #6
    6070:	0bc71ba4 	bleq	ff1ccf08 <__shm_end__+0xbf1ccf08>
    6074:	95080000 	strls	r0, [r8, #-0]
    6078:	032f1602 			; <UNDEFINED> instruction: 0x032f1602
    607c:	1bac0000 	blne	feb06084 <__shm_end__+0xbeb06084>
    6080:	00000f20 	andeq	r0, r0, r0, lsr #30
    6084:	16029608 	strne	r9, [r2], -r8, lsl #12
    6088:	0000032f 	andeq	r0, r0, pc, lsr #6
    608c:	09f21bb4 	ldmibeq	r2!, {r2, r4, r5, r7, r8, r9, fp, ip}^
    6090:	97080000 	strls	r0, [r8, -r0]
    6094:	032f1602 			; <UNDEFINED> instruction: 0x032f1602
    6098:	1bbc0000 	blne	fef060a0 <__shm_end__+0xbef060a0>
    609c:	00000145 	andeq	r0, r0, r5, asr #2
    60a0:	16029808 	strne	r9, [r2], -r8, lsl #16
    60a4:	0000032f 	andeq	r0, r0, pc, lsr #6
    60a8:	09961bc4 	ldmibeq	r6, {r2, r6, r7, r8, r9, fp, ip}
    60ac:	99080000 	stmdbls	r8, {}	; <UNPREDICTABLE>
    60b0:	00750802 	rsbseq	r0, r5, r2, lsl #16
    60b4:	00cc0000 	sbceq	r0, ip, r0
    60b8:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    60bc:	000a4a00 	andeq	r4, sl, r0, lsl #20
    60c0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    60c4:	00190000 	andseq	r0, r9, r0
    60c8:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    60cc:	000a5a00 	andeq	r5, sl, r0, lsl #20
    60d0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    60d4:	00070000 	andeq	r0, r7, r0
    60d8:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    60dc:	000a6a00 	andeq	r6, sl, r0, lsl #20
    60e0:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    60e4:	00170000 	andseq	r0, r7, r0
    60e8:	9e08f01e 	mcrls	0, 0, pc, cr8, cr14, {0}	; <UNPREDICTABLE>
    60ec:	0a910702 	beq	fe447cfc <__shm_end__+0xbe447cfc>
    60f0:	271b0000 	ldrcs	r0, [fp, -r0]
    60f4:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    60f8:	911b02a1 	tstls	fp, r1, lsr #5
    60fc:	0000000a 	andeq	r0, r0, sl
    6100:	00084e1b 	andeq	r4, r8, fp, lsl lr
    6104:	02a20800 	adceq	r0, r2, #0, 16
    6108:	000aa118 	andeq	sl, sl, r8, lsl r1
    610c:	10007800 	andne	r7, r0, r0, lsl #16
    6110:	0000052f 	andeq	r0, r0, pc, lsr #10
    6114:	00000aa1 	andeq	r0, r0, r1, lsr #21
    6118:	00007c11 	andeq	r7, r0, r1, lsl ip
    611c:	10001d00 	andne	r1, r0, r0, lsl #26
    6120:	0000007c 	andeq	r0, r0, ip, ror r0
    6124:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    6128:	00007c11 	andeq	r7, r0, r1, lsl ip
    612c:	1f001d00 	svcne	0x00001d00
    6130:	028308f0 	addeq	r0, r3, #240, 16	; 0xf00000
    6134:	000ad603 	andeq	sp, sl, r3, lsl #12
    6138:	044c2000 	strbeq	r2, [ip], #-0
    613c:	9a080000 	bls	206144 <__core1_unwind_stub-0xdf9ebc>
    6140:	09250b02 	stmdbeq	r5!, {r1, r8, r9, fp}
    6144:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
    6148:	08000001 	stmdaeq	r0, {r0}
    614c:	6a0b02a3 	bvs	2c6be0 <__core1_unwind_stub-0xd39420>
    6150:	0000000a 	andeq	r0, r0, sl
    6154:	0007f010 	andeq	pc, r7, r0, lsl r0	; <UNPREDICTABLE>
    6158:	000ae600 	andeq	lr, sl, r0, lsl #12
    615c:	007c1100 	rsbseq	r1, ip, r0, lsl #2
    6160:	00180000 	andseq	r0, r8, r0
    6164:	00000021 	andeq	r0, r0, r1, lsr #32
    6168:	e6041300 	str	r1, [r4], -r0, lsl #6
    616c:	2200000a 	andcs	r0, r0, #10
    6170:	00000afc 	strdeq	r0, [r0], -ip
    6174:	00069618 	andeq	r9, r6, r8, lsl r6
    6178:	04130000 	ldreq	r0, [r3], #-0
    617c:	00000af1 	strdeq	r0, [r0], -r1
    6180:	03b90413 			; <UNDEFINED> instruction: 0x03b90413
    6184:	13220000 			; <UNDEFINED> instruction: 0x13220000
    6188:	1800000b 	stmdane	r0, {r0, r1, r3}
    618c:	00000075 	andeq	r0, r0, r5, ror r0
    6190:	19041300 	stmdbne	r4, {r8, r9, ip}
    6194:	1300000b 	movwne	r0, #11
    6198:	000b0804 	andeq	r0, fp, r4, lsl #16
    619c:	088a1000 	stmeq	sl, {ip}
    61a0:	0b2f0000 	bleq	bc61a8 <__core1_unwind_stub-0x439e58>
    61a4:	7c110000 	ldcvc	0, cr0, [r1], {-0}
    61a8:	02000000 	andeq	r0, r0, #0
    61ac:	045a2300 	ldrbeq	r2, [sl], #-768	; 0xfffffd00
    61b0:	33080000 	movwcc	r0, #32768	; 0x8000
    61b4:	06961703 	ldreq	r1, [r6], r3, lsl #14
    61b8:	53230000 			; <UNDEFINED> instruction: 0x53230000
    61bc:	08000004 	stmdaeq	r0, {r2}
    61c0:	9c1d0334 	ldcls	3, cr0, [sp], {52}	; 0x34
    61c4:	03000006 	movweq	r0, #6
    61c8:	00000c23 	andeq	r0, r0, r3, lsr #24
    61cc:	8a10420a 	bhi	4169fc <__core1_unwind_stub-0xbe9604>
    61d0:	22000008 	andcs	r0, r0, #8
    61d4:	00000b65 	andeq	r0, r0, r5, ror #22
    61d8:	0007f018 	andeq	pc, r7, r8, lsl r0	; <UNPREDICTABLE>
    61dc:	0b651800 	bleq	194c1e4 <__bss_end__+0x9301e4>
    61e0:	13000000 	movwne	r0, #0
    61e4:	000b4904 	andeq	r4, fp, r4, lsl #18
    61e8:	55041300 	strpl	r1, [r4, #-768]	; 0xfffffd00
    61ec:	2400000b 	strcs	r0, [r0], #-11
    61f0:	00000842 	andeq	r0, r0, r2, asr #16
    61f4:	650e360b 	strvs	r3, [lr, #-1547]	; 0xfffff9f5
    61f8:	2400000b 	strcs	r0, [r0], #-11
    61fc:	00000848 	andeq	r0, r0, r8, asr #16
    6200:	650e370b 	strvs	r3, [lr, #-1803]	; 0xfffff8f5
    6204:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    6208:	000028c8 	andeq	r2, r0, r8, asr #17
    620c:	102c0120 	eorne	r0, ip, r0, lsr #2
    6210:	00000bcb 	andeq	r0, r0, fp, asr #23
    6214:	00265409 	eoreq	r5, r6, r9, lsl #8
    6218:	0a2e0100 	beq	b86620 <__core1_unwind_stub-0x4799e0>
    621c:	00000b6b 	andeq	r0, r0, fp, ror #22
    6220:	28f50900 	ldmcs	r5!, {r8, fp}^
    6224:	2f010000 	svccs	0x00010000
    6228:	0000750a 	andeq	r7, r0, sl, lsl #10
    622c:	ed090400 	cfstrs	mvf0, [r9, #-0]
    6230:	01000028 	tsteq	r0, r8, lsr #32
    6234:	01951630 	orrseq	r1, r5, r0, lsr r6
    6238:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    623c:	000027a2 	andeq	r2, r0, r2, lsr #15
    6240:	f2163101 	vrhadd.s16	d3, d6, d1
    6244:	0c000001 	stceq	0, cr0, [r0], {1}
    6248:	28d40300 	ldmcs	r4, {r8, r9}^
    624c:	32010000 	andcc	r0, r1, #0
    6250:	000b8903 	andeq	r8, fp, r3, lsl #18
    6254:	28ff2500 	ldmcs	pc!, {r8, sl, sp}^	; <UNPREDICTABLE>
    6258:	37010000 	strcc	r0, [r1, -r0]
    625c:	000bcb14 	andeq	ip, fp, r4, lsl fp
    6260:	00030500 	andeq	r0, r3, r0, lsl #10
    6264:	26000000 	strcs	r0, [r0], -r0
    6268:	00000b71 	andeq	r0, r0, r1, ror fp
    626c:	05083801 	streq	r3, [r8, #-2049]	; 0xfffff7ff
    6270:	00000003 	andeq	r0, r0, r3
    6274:	288c2500 	stmcs	ip, {r8, sl, sp}
    6278:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    627c:	000bcb14 	andeq	ip, fp, r4, lsl fp
    6280:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    6284:	26010056 			; <UNDEFINED> instruction: 0x26010056
    6288:	00000b7d 	andeq	r0, r0, sp, ror fp
    628c:	05083a01 	streq	r3, [r8, #-2561]	; 0xfffff5ff
    6290:	00562403 	subseq	r2, r6, r3, lsl #8
    6294:	28e02701 	stmiacs	r0!, {r0, r8, r9, sl, sp}^
    6298:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    629c:	00000006 	andeq	r0, r0, r6
    62a0:	00007c00 	andeq	r7, r0, r0, lsl #24
    62a4:	5a9c0100 	bpl	fe7066ac <__shm_end__+0xbe7066ac>
    62a8:	2800000c 	stmdacs	r0, {r2, r3}
    62ac:	0100706f 	tsteq	r0, pc, rrx
    62b0:	0b65196e 	bleq	194c870 <__bss_end__+0x930870>
    62b4:	91020000 	mrsls	r0, (UNDEF: 2)
    62b8:	2885256c 	stmcs	r5, {r2, r3, r5, r6, r8, sl, sp}
    62bc:	70010000 	andvc	r0, r1, r0
    62c0:	000c5a12 	andeq	r5, ip, r2, lsl sl
    62c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    62c8:	0027da25 	eoreq	sp, r7, r5, lsr #20
    62cc:	0e710100 	rpweqs	f0, f1, f0
    62d0:	0000005b 	andeq	r0, r0, fp, asr r0
    62d4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    62d8:	0bcb0413 	bleq	ff2c732c <__shm_end__+0xbf2c732c>
    62dc:	1c290000 	stcne	0, cr0, [r9], #-0
    62e0:	01000028 	tsteq	r0, r8, lsr #32
    62e4:	008a184b 	addeq	r1, sl, fp, asr #16
    62e8:	49380000 	ldmdbmi	r8!, {}	; <UNPREDICTABLE>
    62ec:	00d80100 	sbcseq	r0, r8, r0, lsl #2
    62f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    62f4:	00000ca8 	andeq	r0, r0, r8, lsr #25
    62f8:	0027e62a 	eoreq	lr, r7, sl, lsr #12
    62fc:	2f4b0100 	svccs	0x004b0100
    6300:	00000c5a 	andeq	r0, r0, sl, asr ip
    6304:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
    6308:	0000285a 	andeq	r2, r0, sl, asr r8
    630c:	5b0e4d01 	blpl	399718 <__core1_unwind_stub-0xc668e8>
    6310:	02000000 	andeq	r0, r0, #0
    6314:	df257091 	svcle	0x00257091
    6318:	01000027 	tsteq	r0, r7, lsr #32
    631c:	008a154e 	addeq	r1, sl, lr, asr #10
    6320:	91020000 	mrsls	r0, (UNDEF: 2)
    6324:	f92b0074 			; <UNDEFINED> instruction: 0xf92b0074
    6328:	01000027 	tsteq	r0, r7, lsr #32
    632c:	48b80d3c 	ldmmi	r8!, {r2, r3, r4, r5, r8, sl, fp}
    6330:	00800100 	addeq	r0, r0, r0, lsl #2
    6334:	9c010000 	stcls	0, cr0, [r1], {-0}
    6338:	0026342a 	eoreq	r3, r6, sl, lsr #8
    633c:	1c3c0100 	ldfnes	f0, [ip], #-0
    6340:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6344:	2a6f9102 	bcs	1bea754 <__bss_end__+0xbce754>
    6348:	00002905 	andeq	r2, r0, r5, lsl #18
    634c:	65293c01 	strvs	r3, [r9, #-3073]!	; 0xfffff3ff
    6350:	0200000b 	andeq	r0, r0, #11
    6354:	ef256891 	svc	0x00256891
    6358:	01000027 	tsteq	r0, r7, lsr #32
    635c:	0c5a103e 	mrrceq	0, 3, r1, sl, cr14
    6360:	91020000 	mrsls	r0, (UNDEF: 2)
    6364:	09000074 	stmdbeq	r0, {r2, r4, r5, r6}
    6368:	0400000b 	streq	r0, [r0], #-11
    636c:	000eeb00 	andeq	lr, lr, r0, lsl #22
    6370:	3a010400 	bcc	47378 <__core1_unwind_stub-0xfb8c88>
    6374:	0c000000 	stceq	0, cr0, [r0], {-0}
    6378:	00002a0f 	andeq	r2, r0, pc, lsl #20
    637c:	00000bdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6380:	000004f8 	strdeq	r0, [r0], -r8
    6384:	00000000 	andeq	r0, r0, r0
    6388:	00002bdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    638c:	69050402 	stmdbvs	r5, {r1, sl}
    6390:	0300746e 	movweq	r7, #1134	; 0x46e
    6394:	0b4b0704 	bleq	12c7fac <__bss_end__+0x2abfac>
    6398:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    639c:	00080b05 	andeq	r0, r8, r5, lsl #22
    63a0:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    63a4:	00000aa3 	andeq	r0, r0, r3, lsr #21
    63a8:	000c9704 	andeq	r9, ip, r4, lsl #14
    63ac:	015e0200 	cmpeq	lr, r0, lsl #4
    63b0:	00002c17 	andeq	r2, r0, r7, lsl ip
    63b4:	06010300 	streq	r0, [r1], -r0, lsl #6
    63b8:	00000408 	andeq	r0, r0, r8, lsl #8
    63bc:	06080103 	streq	r0, [r8], -r3, lsl #2
    63c0:	03000004 	movweq	r0, #4
    63c4:	0d700502 	cfldr64eq	mvdx0, [r0, #-8]!
    63c8:	02030000 	andeq	r0, r3, #0
    63cc:	000ebd07 	andeq	fp, lr, r7, lsl #26
    63d0:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    63d4:	00000810 	andeq	r0, r0, r0, lsl r8
    63d8:	46070403 	strmi	r0, [r7], -r3, lsl #8
    63dc:	0300000b 	movweq	r0, #11
    63e0:	0b410708 	bleq	1048008 <__bss_end__+0x2c008>
    63e4:	a4050000 	strge	r0, [r5], #-0
    63e8:	0300000e 	movweq	r0, #14
    63ec:	006a0e2e 	rsbeq	r0, sl, lr, lsr #28
    63f0:	e3050000 	movw	r0, #20480	; 0x5000
    63f4:	0300000a 	movweq	r0, #10
    63f8:	006a0e74 	rsbeq	r0, sl, r4, ror lr
    63fc:	04060000 	streq	r0, [r6], #-0
    6400:	b903a503 	stmdblt	r3, {r0, r1, r8, sl, sp, pc}
    6404:	07000000 	streq	r0, [r0, -r0]
    6408:	0000023a 	andeq	r0, r0, sl, lsr r2
    640c:	410ca703 	tstmi	ip, r3, lsl #14
    6410:	07000000 	streq	r0, [r0, -r0]
    6414:	00000aeb 	andeq	r0, r0, fp, ror #21
    6418:	b913a803 	ldmdblt	r3, {r0, r1, fp, sp, pc}
    641c:	00000000 	andeq	r0, r0, r0
    6420:	00005508 	andeq	r5, r0, r8, lsl #10
    6424:	0000c900 	andeq	ip, r0, r0, lsl #18
    6428:	002c0900 	eoreq	r0, ip, r0, lsl #18
    642c:	00030000 	andeq	r0, r3, r0
    6430:	a203080a 	andge	r0, r3, #655360	; 0xa0000
    6434:	0000ed09 	andeq	lr, r0, r9, lsl #26
    6438:	0a6f0b00 	beq	1bc9040 <__bss_end__+0xbad040>
    643c:	a4030000 	strge	r0, [r3], #-0
    6440:	00002507 	andeq	r2, r0, r7, lsl #10
    6444:	0b0b0000 	bleq	2c644c <__core1_unwind_stub-0xd39bb4>
    6448:	03000000 	movweq	r0, #0
    644c:	009705a9 	addseq	r0, r7, r9, lsr #11
    6450:	00040000 	andeq	r0, r4, r0
    6454:	000c2f05 	andeq	r2, ip, r5, lsl #30
    6458:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    645c:	000000c9 	andeq	r0, r0, r9, asr #1
    6460:	5805040c 	stmdapl	r5, {r2, r3, sl}
    6464:	0400000e 	streq	r0, [r0], #-14
    6468:	00711916 	rsbseq	r1, r1, r6, lsl r9
    646c:	b9050000 	stmdblt	r5, {}	; <UNPREDICTABLE>
    6470:	05000006 	streq	r0, [r0, #-6]
    6474:	00250d0c 	eoreq	r0, r5, ip, lsl #26
    6478:	d6050000 	strle	r0, [r5], -r0
    647c:	0400000b 	streq	r0, [r0], #-11
    6480:	01071b23 	tsteq	r7, r3, lsr #22
    6484:	0e0d0000 	cdpeq	0, 0, cr0, cr13, cr0, {0}
    6488:	18000007 	stmdane	r0, {r0, r1, r2}
    648c:	79083404 	stmdbvc	r8, {r2, sl, ip, sp}
    6490:	0b000001 	bleq	649c <__core1_unwind_stub-0xff9b64>
    6494:	00000a3a 	andeq	r0, r0, sl, lsr sl
    6498:	79133604 	ldmdbvc	r3, {r2, r9, sl, ip, sp}
    649c:	00000001 	andeq	r0, r0, r1
    64a0:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
    64a4:	25073704 	strcs	r3, [r7, #-1796]	; 0xfffff8fc
    64a8:	04000000 	streq	r0, [r0], #-0
    64ac:	0007670b 	andeq	r6, r7, fp, lsl #14
    64b0:	0b370400 	bleq	dc74b8 <__core1_unwind_stub-0x238b48>
    64b4:	00000025 	andeq	r0, r0, r5, lsr #32
    64b8:	08c50b08 	stmiaeq	r5, {r3, r8, r9, fp}^
    64bc:	37040000 	strcc	r0, [r4, -r0]
    64c0:	00002514 	andeq	r2, r0, r4, lsl r5
    64c4:	070b0c00 	streq	r0, [fp, -r0, lsl #24]
    64c8:	04000006 	streq	r0, [r0], #-6
    64cc:	00251b37 	eoreq	r1, r5, r7, lsr fp
    64d0:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    64d4:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    64d8:	017f0b38 	cmneq	pc, r8, lsr fp	; <UNPREDICTABLE>
    64dc:	00140000 	andseq	r0, r4, r0
    64e0:	011f040f 	tsteq	pc, pc, lsl #8
    64e4:	fb080000 	blx	2064ee <__core1_unwind_stub-0xdf9b12>
    64e8:	8f000000 	svchi	0x00000000
    64ec:	09000001 	stmdbeq	r0, {r0}
    64f0:	0000002c 	andeq	r0, r0, ip, lsr #32
    64f4:	400d0000 	andmi	r0, sp, r0
    64f8:	24000001 	strcs	r0, [r0], #-1
    64fc:	12083c04 	andne	r3, r8, #4, 24	; 0x400
    6500:	0b000002 	bleq	6510 <__core1_unwind_stub-0xff9af0>
    6504:	0000015c 	andeq	r0, r0, ip, asr r1
    6508:	25093e04 	strcs	r3, [r9, #-3588]	; 0xfffff1fc
    650c:	00000000 	andeq	r0, r0, r0
    6510:	000fae0b 	andeq	sl, pc, fp, lsl #28
    6514:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    6518:	00000025 	andeq	r0, r0, r5, lsr #32
    651c:	0ed00b04 	vfnmseq.f64	d16, d0, d4
    6520:	40040000 	andmi	r0, r4, r0
    6524:	00002509 	andeq	r2, r0, r9, lsl #10
    6528:	010b0800 	tsteq	fp, r0, lsl #16
    652c:	0400000a 	streq	r0, [r0], #-10
    6530:	00250941 	eoreq	r0, r5, r1, asr #18
    6534:	0b0c0000 	bleq	30653c <__core1_unwind_stub-0xcf9ac4>
    6538:	00000392 	muleq	r0, r2, r3
    653c:	25094204 	strcs	r4, [r9, #-516]	; 0xfffffdfc
    6540:	10000000 	andne	r0, r0, r0
    6544:	000df30b 	andeq	pc, sp, fp, lsl #6
    6548:	09430400 	stmdbeq	r3, {sl}^
    654c:	00000025 	andeq	r0, r0, r5, lsr #32
    6550:	0a810b14 	beq	fe0491a8 <__shm_end__+0xbe0491a8>
    6554:	44040000 	strmi	r0, [r4], #-0
    6558:	00002509 	andeq	r2, r0, r9, lsl #10
    655c:	af0b1800 	svcge	0x000b1800
    6560:	0400000a 	streq	r0, [r0], #-10
    6564:	00250945 	eoreq	r0, r5, r5, asr #18
    6568:	0b1c0000 	bleq	706570 <__core1_unwind_stub-0x8f9a90>
    656c:	00000f74 	andeq	r0, r0, r4, ror pc
    6570:	25094604 	strcs	r4, [r9, #-1540]	; 0xfffff9fc
    6574:	20000000 	andcs	r0, r0, r0
    6578:	02631000 	rsbeq	r1, r3, #0
    657c:	01080000 	mrseq	r0, (UNDEF: 8)
    6580:	57084f04 	strpl	r4, [r8, -r4, lsl #30]
    6584:	0b000002 	bleq	6594 <__core1_unwind_stub-0xff9a6c>
    6588:	00000f60 	andeq	r0, r0, r0, ror #30
    658c:	570a5004 	strpl	r5, [sl, -r4]
    6590:	00000002 	andeq	r0, r0, r2
    6594:	000b6c0b 	andeq	r6, fp, fp, lsl #24
    6598:	09510400 	ldmdbeq	r1, {sl}^
    659c:	00000257 	andeq	r0, r0, r7, asr r2
    65a0:	0de31180 	stfeqe	f1, [r3, #512]!	; 0x200
    65a4:	53040000 	movwpl	r0, #16384	; 0x4000
    65a8:	0000fb0a 	andeq	pc, r0, sl, lsl #22
    65ac:	11010000 	mrsne	r0, (UNDEF: 1)
    65b0:	00000e1f 	andeq	r0, r0, pc, lsl lr
    65b4:	fb0a5604 	blx	29bdce <__core1_unwind_stub-0xd64232>
    65b8:	04000000 	streq	r0, [r0], #-0
    65bc:	f9080001 			; <UNDEFINED> instruction: 0xf9080001
    65c0:	67000000 	strvs	r0, [r0, -r0]
    65c4:	09000002 	stmdbeq	r0, {r1}
    65c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    65cc:	5a10001f 	bpl	406650 <__core1_unwind_stub-0xbf99b0>
    65d0:	9000000a 	andls	r0, r0, sl
    65d4:	08620401 	stmdaeq	r2!, {r0, sl}^
    65d8:	000002aa 	andeq	r0, r0, sl, lsr #5
    65dc:	000a3a0b 	andeq	r3, sl, fp, lsl #20
    65e0:	12630400 	rsbne	r0, r3, #0, 8
    65e4:	000002aa 	andeq	r0, r0, sl, lsr #5
    65e8:	0e130b00 	vnmlseq.f64	d0, d3, d0
    65ec:	64040000 	strvs	r0, [r4], #-0
    65f0:	00002506 	andeq	r2, r0, r6, lsl #10
    65f4:	990b0400 	stmdbls	fp, {sl}
    65f8:	04000004 	streq	r0, [r0], #-4
    65fc:	02b00966 	adcseq	r0, r0, #1671168	; 0x198000
    6600:	0b080000 	bleq	206608 <__core1_unwind_stub-0xdf99f8>
    6604:	00000263 	andeq	r0, r0, r3, ror #4
    6608:	121e6704 	andsne	r6, lr, #4, 14	; 0x100000
    660c:	88000002 	stmdahi	r0, {r1}
    6610:	67040f00 	strvs	r0, [r4, -r0, lsl #30]
    6614:	08000002 	stmdaeq	r0, {r1}
    6618:	000002c0 	andeq	r0, r0, r0, asr #5
    661c:	000002c0 	andeq	r0, r0, r0, asr #5
    6620:	00002c09 	andeq	r2, r0, r9, lsl #24
    6624:	0f001f00 	svceq	0x00001f00
    6628:	0002c604 	andeq	ip, r2, r4, lsl #12
    662c:	180d1200 	stmdane	sp, {r9, ip}
    6630:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    6634:	ef087a04 	svc	0x00087a04
    6638:	0b000002 	bleq	6648 <__core1_unwind_stub-0xff99b8>
    663c:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    6640:	ef117b04 	svc	0x00117b04
    6644:	00000002 	andeq	r0, r0, r2
    6648:	0002fb0b 	andeq	pc, r2, fp, lsl #22
    664c:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
    6650:	00000025 	andeq	r0, r0, r5, lsr #32
    6654:	040f0004 	streq	r0, [pc], #-4	; 665c <__core1_unwind_stub-0xff99a4>
    6658:	00000055 	andeq	r0, r0, r5, asr r0
    665c:	0006870d 	andeq	r8, r6, sp, lsl #14
    6660:	ba046800 	blt	120668 <__core1_unwind_stub-0xedf998>
    6664:	00043808 	andeq	r3, r4, r8, lsl #16
    6668:	705f0e00 	subsvc	r0, pc, r0, lsl #28
    666c:	12bb0400 	adcsne	r0, fp, #0, 8
    6670:	000002ef 	andeq	r0, r0, pc, ror #5
    6674:	725f0e00 	subsvc	r0, pc, #0, 28
    6678:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
    667c:	00000025 	andeq	r0, r0, r5, lsr #32
    6680:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
    6684:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
    6688:	00000025 	andeq	r0, r0, r5, lsr #32
    668c:	0a400b08 	beq	10092b4 <f2s_free_clk+0x12b0>
    6690:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    6694:	00005c09 	andeq	r5, r0, r9, lsl #24
    6698:	5d0b0c00 	stcpl	12, cr0, [fp, #-0]
    669c:	04000002 	streq	r0, [r0], #-2
    66a0:	005c09bf 	ldrheq	r0, [ip], #-159	; 0xffffff61
    66a4:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    66a8:	0066625f 	rsbeq	r6, r6, pc, asr r2
    66ac:	c711c004 	ldrgt	ip, [r1, -r4]
    66b0:	10000002 	andne	r0, r0, r2
    66b4:	000e050b 	andeq	r0, lr, fp, lsl #10
    66b8:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
    66bc:	00000025 	andeq	r0, r0, r5, lsr #32
    66c0:	05ea0b18 	strbeq	r0, [sl, #2840]!	; 0xb18
    66c4:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
    66c8:	0000f90a 	andeq	pc, r0, sl, lsl #18
    66cc:	5f0b1c00 	svcpl	0x000b1c00
    66d0:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    66d4:	05bc1dca 	ldreq	r1, [ip, #3530]!	; 0xdca
    66d8:	0b200000 	bleq	8066e0 <__core1_unwind_stub-0x7f9920>
    66dc:	000011a3 	andeq	r1, r0, r3, lsr #3
    66e0:	e61dcc04 	ldr	ip, [sp], -r4, lsl #24
    66e4:	24000005 	strcs	r0, [r0], #-5
    66e8:	000acc0b 	andeq	ip, sl, fp, lsl #24
    66ec:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 66f4 <__core1_unwind_stub-0xff990c>
    66f0:	0000060a 	andeq	r0, r0, sl, lsl #12
    66f4:	2b440b28 	blcs	110939c <__bss_end__+0xed39c>
    66f8:	d0040000 	andle	r0, r4, r0
    66fc:	00062409 	andeq	r2, r6, r9, lsl #8
    6700:	5f0e2c00 	svcpl	0x000e2c00
    6704:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
    6708:	02c711d3 	sbceq	r1, r7, #-1073741772	; 0xc0000034
    670c:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    6710:	0070755f 	rsbseq	r7, r0, pc, asr r5
    6714:	ef12d404 	svc	0x0012d404
    6718:	38000002 	stmdacc	r0, {r1}
    671c:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
    6720:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
    6724:	00000025 	andeq	r0, r0, r5, lsr #32
    6728:	0a100b3c 	beq	409420 <__core1_unwind_stub-0xbf6be0>
    672c:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    6730:	00062a11 	andeq	r2, r6, r1, lsl sl
    6734:	560b4000 	strpl	r4, [fp], -r0
    6738:	04000001 	streq	r0, [r0], #-1
    673c:	063a11d9 			; <UNDEFINED> instruction: 0x063a11d9
    6740:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
    6744:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    6748:	c711dc04 	ldrgt	sp, [r1, -r4, lsl #24]
    674c:	44000002 	strmi	r0, [r0], #-2
    6750:	000b950b 	andeq	r9, fp, fp, lsl #10
    6754:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
    6758:	00000025 	andeq	r0, r0, r5, lsr #32
    675c:	062d0b4c 	strteq	r0, [sp], -ip, asr #22
    6760:	e0040000 	and	r0, r4, r0
    6764:	00007f0a 	andeq	r7, r0, sl, lsl #30
    6768:	380b5000 	stmdacc	fp, {ip, lr}
    676c:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    6770:	045612e3 	ldrbeq	r1, [r6], #-739	; 0xfffffd1d
    6774:	0b540000 	bleq	150677c <__bss_end__+0x4ea77c>
    6778:	000001ab 	andeq	r0, r0, fp, lsr #3
    677c:	130ce704 	movwne	lr, #50948	; 0xc704
    6780:	58000001 	stmdapl	r0, {r0}
    6784:	000a2c0b 	andeq	r2, sl, fp, lsl #24
    6788:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
    678c:	000000ed 	andeq	r0, r0, sp, ror #1
    6790:	069a0b5c 			; <UNDEFINED> instruction: 0x069a0b5c
    6794:	ea040000 	b	10679c <__core1_unwind_stub-0xef9864>
    6798:	00002509 	andeq	r2, r0, r9, lsl #10
    679c:	13006400 	movwne	r6, #1024	; 0x400
    67a0:	00000025 	andeq	r0, r0, r5, lsr #32
    67a4:	00000456 	andeq	r0, r0, r6, asr r4
    67a8:	00045614 	andeq	r5, r4, r4, lsl r6
    67ac:	00f91400 	rscseq	r1, r9, r0, lsl #8
    67b0:	aa140000 	bge	5067b8 <__core1_unwind_stub-0xaf9848>
    67b4:	14000005 	strne	r0, [r0], #-5
    67b8:	00000025 	andeq	r0, r0, r5, lsr #32
    67bc:	61040f00 	tstvs	r4, r0, lsl #30
    67c0:	15000004 	strne	r0, [r0, #-4]
    67c4:	00000456 	andeq	r0, r0, r6, asr r4
    67c8:	00044c16 	andeq	r4, r4, r6, lsl ip
    67cc:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
    67d0:	aa080265 	bge	20716c <__core1_unwind_stub-0xdf8e94>
    67d4:	17000005 	strne	r0, [r0, -r5]
    67d8:	00000998 	muleq	r0, r8, r9
    67dc:	07026704 	streq	r6, [r2, -r4, lsl #14]
    67e0:	00000025 	andeq	r0, r0, r5, lsr #32
    67e4:	05281700 	streq	r1, [r8, #-1792]!	; 0xfffff900
    67e8:	6c040000 	stcvs	0, cr0, [r4], {-0}
    67ec:	06960b02 	ldreq	r0, [r6], r2, lsl #22
    67f0:	17040000 	strne	r0, [r4, -r0]
    67f4:	00000b8d 	andeq	r0, r0, sp, lsl #23
    67f8:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
    67fc:	00000696 	muleq	r0, r6, r6
    6800:	0a161708 	beq	58c428 <__core1_unwind_stub-0xa73bd8>
    6804:	6c040000 	stcvs	0, cr0, [r4], {-0}
    6808:	06961e02 	ldreq	r1, [r6], r2, lsl #28
    680c:	170c0000 	strne	r0, [ip, -r0]
    6810:	00000e0e 	andeq	r0, r0, lr, lsl #28
    6814:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
    6818:	00000025 	andeq	r0, r0, r5, lsr #32
    681c:	08001710 	stmdaeq	r0, {r4, r8, r9, sl, ip}
    6820:	6f040000 	svcvs	0x00040000
    6824:	08960802 	ldmeq	r6, {r1, fp}
    6828:	17140000 	ldrne	r0, [r4, -r0]
    682c:	00000433 	andeq	r0, r0, r3, lsr r4
    6830:	07027204 	streq	r7, [r2, -r4, lsl #4]
    6834:	00000025 	andeq	r0, r0, r5, lsr #32
    6838:	0e501730 	mrceq	7, 2, r1, cr0, cr0, {1}
    683c:	73040000 	movwvc	r0, #16384	; 0x4000
    6840:	08ab1602 	stmiaeq	fp!, {r1, r9, sl, ip}
    6844:	17340000 	ldrne	r0, [r4, -r0]!
    6848:	0000068f 	andeq	r0, r0, pc, lsl #13
    684c:	07027504 	streq	r7, [r2, -r4, lsl #10]
    6850:	00000025 	andeq	r0, r0, r5, lsr #32
    6854:	07831738 			; <UNDEFINED> instruction: 0x07831738
    6858:	77040000 	strvc	r0, [r4, -r0]
    685c:	08bc0a02 	ldmeq	ip!, {r1, r9, fp}
    6860:	173c0000 	ldrne	r0, [ip, -r0]!
    6864:	00000e69 	andeq	r0, r0, r9, ror #28
    6868:	13027a04 	movwne	r7, #10756	; 0x2a04
    686c:	00000179 	andeq	r0, r0, r9, ror r1
    6870:	02f11740 	rscseq	r1, r1, #64, 14	; 0x1000000
    6874:	7b040000 	blvc	10687c <__core1_unwind_stub-0xef9784>
    6878:	00250702 	eoreq	r0, r5, r2, lsl #14
    687c:	17440000 	strbne	r0, [r4, -r0]
    6880:	00000675 	andeq	r0, r0, r5, ror r6
    6884:	13027c04 	movwne	r7, #11268	; 0x2c04
    6888:	00000179 	andeq	r0, r0, r9, ror r1
    688c:	08af1748 	stmiaeq	pc!, {r3, r6, r8, r9, sl, ip}	; <UNPREDICTABLE>
    6890:	7d040000 	stcvc	0, cr0, [r4, #-0]
    6894:	08c21402 	stmiaeq	r2, {r1, sl, ip}^
    6898:	174c0000 	strbne	r0, [ip, -r0]
    689c:	00000110 	andeq	r0, r0, r0, lsl r1
    68a0:	07028004 	streq	r8, [r2, -r4]
    68a4:	00000025 	andeq	r0, r0, r5, lsr #32
    68a8:	06351750 			; <UNDEFINED> instruction: 0x06351750
    68ac:	81040000 	mrshi	r0, (UNDEF: 4)
    68b0:	05aa0902 	streq	r0, [sl, #2306]!	; 0x902
    68b4:	17540000 	ldrbne	r0, [r4, -r0]
    68b8:	00000a0b 	andeq	r0, r0, fp, lsl #20
    68bc:	0702a404 	streq	sl, [r2, -r4, lsl #8]
    68c0:	00000871 	andeq	r0, r0, r1, ror r8
    68c4:	0a5a1858 	beq	168ca2c <__bss_end__+0x670a2c>
    68c8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    68cc:	02aa1302 	adceq	r1, sl, #134217728	; 0x8000000
    68d0:	01480000 	mrseq	r0, (UNDEF: 72)
    68d4:	00078d18 	andeq	r8, r7, r8, lsl sp
    68d8:	02a90400 	adceq	r0, r9, #0, 8
    68dc:	00026712 	andeq	r6, r2, r2, lsl r7
    68e0:	18014c00 	stmdane	r1, {sl, fp, lr}
    68e4:	00000623 	andeq	r0, r0, r3, lsr #12
    68e8:	0c02ad04 	stceq	13, cr10, [r2], {4}
    68ec:	000008d3 	ldrdeq	r0, [r0], -r3
    68f0:	3a1802dc 	bcc	607468 <__core1_unwind_stub-0x9f8b98>
    68f4:	04000008 	streq	r0, [r0], #-8
    68f8:	571002b2 			; <UNDEFINED> instruction: 0x571002b2
    68fc:	e0000006 	and	r0, r0, r6
    6900:	00131802 	andseq	r1, r3, r2, lsl #16
    6904:	b4040000 	strlt	r0, [r4], #-0
    6908:	08df0a02 	ldmeq	pc, {r1, r9, fp}^	; <UNPREDICTABLE>
    690c:	02ec0000 	rsceq	r0, ip, #0
    6910:	b0040f00 	andlt	r0, r4, r0, lsl #30
    6914:	03000005 	movweq	r0, #5
    6918:	040f0801 	streq	r0, [pc], #-2049	; 6920 <__core1_unwind_stub-0xff96e0>
    691c:	b0150000 	andslt	r0, r5, r0
    6920:	0f000005 	svceq	0x00000005
    6924:	00043804 	andeq	r3, r4, r4, lsl #16
    6928:	00251300 	eoreq	r1, r5, r0, lsl #6
    692c:	05e00000 	strbeq	r0, [r0, #0]!
    6930:	56140000 	ldrpl	r0, [r4], -r0
    6934:	14000004 	strne	r0, [r0], #-4
    6938:	000000f9 	strdeq	r0, [r0], -r9
    693c:	0005e014 	andeq	lr, r5, r4, lsl r0
    6940:	00251400 	eoreq	r1, r5, r0, lsl #8
    6944:	0f000000 	svceq	0x00000000
    6948:	0005b704 	andeq	fp, r5, r4, lsl #14
    694c:	c2040f00 	andgt	r0, r4, #0, 30
    6950:	13000005 	movwne	r0, #5
    6954:	0000008b 	andeq	r0, r0, fp, lsl #1
    6958:	0000060a 	andeq	r0, r0, sl, lsl #12
    695c:	00045614 	andeq	r5, r4, r4, lsl r6
    6960:	00f91400 	rscseq	r1, r9, r0, lsl #8
    6964:	8b140000 	blhi	50696c <__core1_unwind_stub-0xaf9694>
    6968:	14000000 	strne	r0, [r0], #-0
    696c:	00000025 	andeq	r0, r0, r5, lsr #32
    6970:	ec040f00 	stc	15, cr0, [r4], {-0}
    6974:	13000005 	movwne	r0, #5
    6978:	00000025 	andeq	r0, r0, r5, lsr #32
    697c:	00000624 	andeq	r0, r0, r4, lsr #12
    6980:	00045614 	andeq	r5, r4, r4, lsl r6
    6984:	00f91400 	rscseq	r1, r9, r0, lsl #8
    6988:	0f000000 	svceq	0x00000000
    698c:	00061004 	andeq	r1, r6, r4
    6990:	00550800 	subseq	r0, r5, r0, lsl #16
    6994:	063a0000 	ldrteq	r0, [sl], -r0
    6998:	2c090000 	stccs	0, cr0, [r9], {-0}
    699c:	02000000 	andeq	r0, r0, #0
    69a0:	00550800 	subseq	r0, r5, r0, lsl #16
    69a4:	064a0000 	strbeq	r0, [sl], -r0
    69a8:	2c090000 	stccs	0, cr0, [r9], {-0}
    69ac:	00000000 	andeq	r0, r0, r0
    69b0:	0c210400 	cfstrseq	mvf0, [r1], #-0
    69b4:	24040000 	strcs	r0, [r4], #-0
    69b8:	02f51a01 	rscseq	r1, r5, #4096	; 0x1000
    69bc:	bf190000 	svclt	0x00190000
    69c0:	0c000008 	stceq	0, cr0, [r0], {8}
    69c4:	08012804 	stmdaeq	r1, {r2, fp, sp}
    69c8:	00000690 	muleq	r0, r0, r6
    69cc:	000a3a17 	andeq	r3, sl, r7, lsl sl
    69d0:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
    69d4:	00069011 	andeq	r9, r6, r1, lsl r0
    69d8:	33170000 	tstcc	r7, #0
    69dc:	04000008 	streq	r0, [r0], #-8
    69e0:	2507012b 	strcs	r0, [r7, #-299]	; 0xfffffed5
    69e4:	04000000 	streq	r0, [r0], #-0
    69e8:	0008b917 	andeq	fp, r8, r7, lsl r9
    69ec:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
    69f0:	0006960b 	andeq	r9, r6, fp, lsl #12
    69f4:	0f000800 	svceq	0x00000800
    69f8:	00065704 	andeq	r5, r6, r4, lsl #14
    69fc:	4a040f00 	bmi	10a604 <__core1_unwind_stub-0xef59fc>
    6a00:	19000006 	stmdbne	r0, {r1, r2}
    6a04:	00000b85 	andeq	r0, r0, r5, lsl #23
    6a08:	0144040e 	cmpeq	r4, lr, lsl #8
    6a0c:	0006d508 	andeq	sp, r6, r8, lsl #10
    6a10:	0ac61700 	beq	ff18c618 <__shm_end__+0xbf18c618>
    6a14:	45040000 	strmi	r0, [r4, #-0]
    6a18:	06d51201 	ldrbeq	r1, [r5], r1, lsl #4
    6a1c:	17000000 	strne	r0, [r0, -r0]
    6a20:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    6a24:	12014604 	andne	r4, r1, #4, 12	; 0x400000
    6a28:	000006d5 	ldrdeq	r0, [r0], -r5
    6a2c:	0eab1706 	cdpeq	7, 10, cr1, cr11, cr6, {0}
    6a30:	47040000 	strmi	r0, [r4, -r0]
    6a34:	00631201 	rsbeq	r1, r3, r1, lsl #4
    6a38:	000c0000 	andeq	r0, ip, r0
    6a3c:	00006308 	andeq	r6, r0, r8, lsl #6
    6a40:	0006e500 	andeq	lr, r6, r0, lsl #10
    6a44:	002c0900 	eoreq	r0, ip, r0, lsl #18
    6a48:	00020000 	andeq	r0, r2, r0
    6a4c:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
    6a50:	07fa0702 	ldrbeq	r0, [sl, r2, lsl #14]!
    6a54:	d4170000 	ldrle	r0, [r7], #-0
    6a58:	04000003 	streq	r0, [r0], #-3
    6a5c:	2c180287 	lfmcs	f0, 4, [r8], {135}	; 0x87
    6a60:	00000000 	andeq	r0, r0, r0
    6a64:	000bba17 	andeq	fp, fp, r7, lsl sl
    6a68:	02880400 	addeq	r0, r8, #0, 8
    6a6c:	0005aa12 	andeq	sl, r5, r2, lsl sl
    6a70:	2d170400 	cfldrscs	mvf0, [r7, #-0]
    6a74:	04000000 	streq	r0, [r0], #-0
    6a78:	fa100289 	blx	4074a4 <__core1_unwind_stub-0xbf8b5c>
    6a7c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    6a80:	00031617 	andeq	r1, r3, r7, lsl r6
    6a84:	028a0400 	addeq	r0, sl, #0, 8
    6a88:	00018f17 	andeq	r8, r1, r7, lsl pc
    6a8c:	89172400 	ldmdbhi	r7, {sl, sp}
    6a90:	04000008 	streq	r0, [r0], #-8
    6a94:	250f028b 	strcs	r0, [pc, #-651]	; 6811 <__core1_unwind_stub-0xff97ef>
    6a98:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    6a9c:	000a3517 	andeq	r3, sl, r7, lsl r5
    6aa0:	028c0400 	addeq	r0, ip, #0, 8
    6aa4:	0000782c 	andeq	r7, r0, ip, lsr #16
    6aa8:	85175000 	ldrhi	r5, [r7, #-0]
    6aac:	0400000c 	streq	r0, [r0], #-12
    6ab0:	9c1a028d 	lfmls	f0, 4, [sl], {141}	; 0x8d
    6ab4:	58000006 	stmdapl	r0, {r1, r2}
    6ab8:	000d6317 	andeq	r6, sp, r7, lsl r3
    6abc:	028e0400 	addeq	r0, lr, #0, 8
    6ac0:	0000ed16 	andeq	lr, r0, r6, lsl sp
    6ac4:	00176800 	andseq	r6, r7, r0, lsl #16
    6ac8:	0400000b 	streq	r0, [r0], #-11
    6acc:	ed16028f 	lfm	f0, 4, [r6, #-572]	; 0xfffffdc4
    6ad0:	70000000 	andvc	r0, r0, r0
    6ad4:	000a1e17 	andeq	r1, sl, r7, lsl lr
    6ad8:	02900400 	addseq	r0, r0, #0, 8
    6adc:	0000ed16 	andeq	lr, r0, r6, lsl sp
    6ae0:	65177800 	ldrvs	r7, [r7, #-2048]	; 0xfffff800
    6ae4:	04000001 	streq	r0, [r0], #-1
    6ae8:	0a100291 	beq	407534 <__core1_unwind_stub-0xbf8acc>
    6aec:	80000008 	andhi	r0, r0, r8
    6af0:	0006e917 	andeq	lr, r6, r7, lsl r9
    6af4:	02920400 	addseq	r0, r2, #0, 8
    6af8:	00081a10 	andeq	r1, r8, r0, lsl sl
    6afc:	b7178800 	ldrlt	r8, [r7, -r0, lsl #16]
    6b00:	0400000f 	streq	r0, [r0], #-15
    6b04:	250f0293 	strcs	r0, [pc, #-659]	; 6879 <__core1_unwind_stub-0xff9787>
    6b08:	a0000000 	andge	r0, r0, r0
    6b0c:	0002e317 	andeq	lr, r2, r7, lsl r3
    6b10:	02940400 	addseq	r0, r4, #0, 8
    6b14:	0000ed16 	andeq	lr, r0, r6, lsl sp
    6b18:	c717a400 	ldrgt	sl, [r7, -r0, lsl #8]
    6b1c:	0400000b 	streq	r0, [r0], #-11
    6b20:	ed160295 	lfm	f0, 4, [r6, #-596]	; 0xfffffdac
    6b24:	ac000000 	stcge	0, cr0, [r0], {-0}
    6b28:	000f2017 	andeq	r2, pc, r7, lsl r0	; <UNPREDICTABLE>
    6b2c:	02960400 	addseq	r0, r6, #0, 8
    6b30:	0000ed16 	andeq	lr, r0, r6, lsl sp
    6b34:	f217b400 	vshl.s16	d11, d0, d7
    6b38:	04000009 	streq	r0, [r0], #-9
    6b3c:	ed160297 	lfm	f0, 4, [r6, #-604]	; 0xfffffda4
    6b40:	bc000000 	stclt	0, cr0, [r0], {-0}
    6b44:	00014517 	andeq	r4, r1, r7, lsl r5
    6b48:	02980400 	addseq	r0, r8, #0, 8
    6b4c:	0000ed16 	andeq	lr, r0, r6, lsl sp
    6b50:	9617c400 	ldrls	ip, [r7], -r0, lsl #8
    6b54:	04000009 	streq	r0, [r0], #-9
    6b58:	25080299 	strcs	r0, [r8, #-665]	; 0xfffffd67
    6b5c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    6b60:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
    6b64:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    6b68:	2c090000 	stccs	0, cr0, [r9], {-0}
    6b6c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    6b70:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
    6b74:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
    6b78:	2c090000 	stccs	0, cr0, [r9], {-0}
    6b7c:	07000000 	streq	r0, [r0, -r0]
    6b80:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
    6b84:	082a0000 	stmdaeq	sl!, {}	; <UNPREDICTABLE>
    6b88:	2c090000 	stccs	0, cr0, [r9], {-0}
    6b8c:	17000000 	strne	r0, [r0, -r0]
    6b90:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
    6b94:	5107029e 			; <UNDEFINED> instruction: 0x5107029e
    6b98:	17000008 	strne	r0, [r0, -r8]
    6b9c:	00000e27 	andeq	r0, r0, r7, lsr #28
    6ba0:	1b02a104 	blne	aefb8 <__core1_unwind_stub-0xf51048>
    6ba4:	00000851 	andeq	r0, r0, r1, asr r8
    6ba8:	084e1700 	stmdaeq	lr, {r8, r9, sl, ip}^
    6bac:	a2040000 	andge	r0, r4, #0
    6bb0:	08611802 	stmdaeq	r1!, {r1, fp, ip}^
    6bb4:	00780000 	rsbseq	r0, r8, r0
    6bb8:	0002ef08 	andeq	lr, r2, r8, lsl #30
    6bbc:	00086100 	andeq	r6, r8, r0, lsl #2
    6bc0:	002c0900 	eoreq	r0, ip, r0, lsl #18
    6bc4:	001d0000 	andseq	r0, sp, r0
    6bc8:	00002c08 	andeq	r2, r0, r8, lsl #24
    6bcc:	00087100 	andeq	r7, r8, r0, lsl #2
    6bd0:	002c0900 	eoreq	r0, ip, r0, lsl #18
    6bd4:	001d0000 	andseq	r0, sp, r0
    6bd8:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
    6bdc:	08960302 	ldmeq	r6, {r1, r8, r9}
    6be0:	4c1c0000 	ldcmi	0, cr0, [ip], {-0}
    6be4:	04000004 	streq	r0, [r0], #-4
    6be8:	e50b029a 	str	r0, [fp, #-666]	; 0xfffffd66
    6bec:	1c000006 	stcne	0, cr0, [r0], {6}
    6bf0:	00000138 	andeq	r0, r0, r8, lsr r1
    6bf4:	0b02a304 	bleq	af80c <__core1_unwind_stub-0xf507f4>
    6bf8:	0000082a 	andeq	r0, r0, sl, lsr #16
    6bfc:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
    6c00:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
    6c04:	2c090000 	stccs	0, cr0, [r9], {-0}
    6c08:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6c0c:	00001d00 	andeq	r1, r0, r0, lsl #26
    6c10:	040f0000 	streq	r0, [pc], #-0	; 6c18 <__core1_unwind_stub-0xff93e8>
    6c14:	000008a6 	andeq	r0, r0, r6, lsr #17
    6c18:	0008bc1e 	andeq	fp, r8, lr, lsl ip
    6c1c:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
    6c20:	0f000000 	svceq	0x00000000
    6c24:	0008b104 	andeq	fp, r8, r4, lsl #2
    6c28:	79040f00 	stmdbvc	r4, {r8, r9, sl, fp}
    6c2c:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    6c30:	000008d3 	ldrdeq	r0, [r0], -r3
    6c34:	00002514 	andeq	r2, r0, r4, lsl r5
    6c38:	040f0000 	streq	r0, [pc], #-0	; 6c40 <__core1_unwind_stub-0xff93c0>
    6c3c:	000008d9 	ldrdeq	r0, [r0], -r9
    6c40:	08c8040f 	stmiaeq	r8, {r0, r1, r2, r3, sl}^
    6c44:	4a080000 	bmi	206c4c <__core1_unwind_stub-0xdf93b4>
    6c48:	ef000006 	svc	0x00000006
    6c4c:	09000008 	stmdbeq	r0, {r3}
    6c50:	0000002c 	andeq	r0, r0, ip, lsr #32
    6c54:	5a1f0002 	bpl	7c6c64 <__core1_unwind_stub-0x83939c>
    6c58:	04000004 	streq	r0, [r0], #-4
    6c5c:	56170333 			; <UNDEFINED> instruction: 0x56170333
    6c60:	1f000004 	svcne	0x00000004
    6c64:	00000453 	andeq	r0, r0, r3, asr r4
    6c68:	1d033404 	cfstrsne	mvf3, [r3, #-16]
    6c6c:	0000045c 	andeq	r0, r0, ip, asr r4
    6c70:	000e6105 	andeq	r6, lr, r5, lsl #2
    6c74:	18280600 	stmdane	r8!, {r9, sl}
    6c78:	0000006a 	andeq	r0, r0, sl, rrx
    6c7c:	002a4105 	eoreq	r4, sl, r5, lsl #2
    6c80:	182e0600 	stmdane	lr!, {r9, sl}
    6c84:	00000055 	andeq	r0, r0, r5, asr r0
    6c88:	000e6005 	andeq	r6, lr, r5
    6c8c:	19340600 	ldmdbne	r4!, {r9, sl}
    6c90:	00000071 	andeq	r0, r0, r1, ror r0
    6c94:	00092115 	andeq	r2, r9, r5, lsl r1
    6c98:	09212000 	stmdbeq	r1!, {sp}
    6c9c:	53050000 	movwpl	r0, #20480	; 0x5000
    6ca0:	06000023 	streq	r0, [r0], -r3, lsr #32
    6ca4:	002c1a56 	eoreq	r1, ip, r6, asr sl
    6ca8:	23050000 	movwcs	r0, #20480	; 0x5000
    6cac:	0700000c 	streq	r0, [r0, -ip]
    6cb0:	064a1042 	strbeq	r1, [sl], -r2, asr #32
    6cb4:	040f0000 	streq	r0, [pc], #-0	; 6cbc <__core1_unwind_stub-0xff9344>
    6cb8:	00000943 	andeq	r0, r0, r3, asr #18
    6cbc:	00084221 	andeq	r4, r8, r1, lsr #4
    6cc0:	0e360800 	cdpeq	8, 3, cr0, cr6, cr0, {0}
    6cc4:	0000094f 	andeq	r0, r0, pc, asr #18
    6cc8:	00084821 	andeq	r4, r8, r1, lsr #16
    6ccc:	0e370800 	cdpeq	8, 3, cr0, cr7, cr0, {0}
    6cd0:	0000094f 	andeq	r0, r0, pc, asr #18
    6cd4:	34020103 	strcc	r0, [r2], #-259	; 0xfffffefd
    6cd8:	08000018 	stmdaeq	r0, {r3, r4}
    6cdc:	0000092d 	andeq	r0, r0, sp, lsr #18
    6ce0:	00000984 	andeq	r0, r0, r4, lsl #19
    6ce4:	00002c09 	andeq	r2, r0, r9, lsl #24
    6ce8:	15000300 	strne	r0, [r0, #-768]	; 0xfffffd00
    6cec:	00000974 	andeq	r0, r0, r4, ror r9
    6cf0:	002a2622 	eoreq	r2, sl, r2, lsr #12
    6cf4:	17080900 	strne	r0, [r8, -r0, lsl #18]
    6cf8:	00000984 	andeq	r0, r0, r4, lsl #19
    6cfc:	00000305 	andeq	r0, r0, r5, lsl #6
    6d00:	3f220000 	svccc	0x00220000
    6d04:	09000029 	stmdbeq	r0, {r0, r3, r5}
    6d08:	0984170a 	stmibeq	r4, {r1, r3, r8, r9, sl, ip}
    6d0c:	03050000 	movweq	r0, #20480	; 0x5000
    6d10:	00000000 	andeq	r0, r0, r0
    6d14:	0029cf22 	eoreq	ip, r9, r2, lsr #30
    6d18:	170d0900 	strne	r0, [sp, -r0, lsl #18]
    6d1c:	00000984 	andeq	r0, r0, r4, lsl #19
    6d20:	00000305 	andeq	r0, r0, r5, lsl #6
    6d24:	ba220000 	blt	886d2c <__core1_unwind_stub-0x7792d4>
    6d28:	09000029 	stmdbeq	r0, {r0, r3, r5}
    6d2c:	0984170e 	stmibeq	r4, {r1, r2, r3, r8, r9, sl, ip}
    6d30:	03050000 	movweq	r0, #20480	; 0x5000
    6d34:	00000000 	andeq	r0, r0, r0
    6d38:	00295321 	eoreq	r5, r9, r1, lsr #6
    6d3c:	1a110900 	bne	449144 <__core1_unwind_stub-0xbb6ebc>
    6d40:	00000932 	andeq	r0, r0, r2, lsr r9
    6d44:	002a0221 	eoreq	r0, sl, r1, lsr #4
    6d48:	1a120900 	bne	489150 <__core1_unwind_stub-0xb76eb0>
    6d4c:	00000932 	andeq	r0, r0, r2, lsr r9
    6d50:	002a5221 	eoreq	r5, sl, r1, lsr #4
    6d54:	1a130900 	bne	4c915c <__core1_unwind_stub-0xb36ea4>
    6d58:	00000932 	andeq	r0, r0, r2, lsr r9
    6d5c:	0a010023 	beq	46df0 <__core1_unwind_stub-0xfb9210>
    6d60:	0a5b0907 	beq	16c9184 <__bss_end__+0x6ad184>
    6d64:	fc0b0000 	stc2	0, cr0, [fp], {-0}
    6d68:	0a000029 	beq	6e14 <__core1_unwind_stub-0xff91ec>
    6d6c:	09321709 	ldmdbeq	r2!, {r0, r3, r8, r9, sl, ip}
    6d70:	0b000000 	bleq	6d78 <__core1_unwind_stub-0xff9288>
    6d74:	0000297c 	andeq	r2, r0, ip, ror r9
    6d78:	32170a0a 	andscc	r0, r7, #40960	; 0xa000
    6d7c:	04000009 	streq	r0, [r0], #-9
    6d80:	0029880b 	eoreq	r8, r9, fp, lsl #16
    6d84:	170b0a00 	strne	r0, [fp, -r0, lsl #20]
    6d88:	00000932 	andeq	r0, r0, r2, lsr r9
    6d8c:	29710b08 	ldmdbcs	r1!, {r3, r8, r9, fp}^
    6d90:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    6d94:	00093217 	andeq	r3, r9, r7, lsl r2
    6d98:	380b0c00 	stmdacc	fp, {sl, fp}
    6d9c:	0a00002a 	beq	6e4c <__core1_unwind_stub-0xff91b4>
    6da0:	0932170d 	ldmdbeq	r2!, {r0, r2, r3, r8, r9, sl, ip}
    6da4:	0b100000 	bleq	406dac <__core1_unwind_stub-0xbf9254>
    6da8:	00002994 	muleq	r0, r4, r9
    6dac:	32170e0a 	andscc	r0, r7, #10, 28	; 0xa0
    6db0:	14000009 	strne	r0, [r0], #-9
    6db4:	0029a80b 	eoreq	sl, r9, fp, lsl #16
    6db8:	170f0a00 	strne	r0, [pc, -r0, lsl #20]
    6dbc:	00000a6b 	andeq	r0, r0, fp, ror #20
    6dc0:	32080018 	andcc	r0, r8, #24
    6dc4:	6b000009 	blvs	6df0 <__core1_unwind_stub-0xff9210>
    6dc8:	0900000a 	stmdbeq	r0, {r1, r3}
    6dcc:	0000002c 	andeq	r0, r0, ip, lsr #32
    6dd0:	5b200039 	blpl	806ebc <__core1_unwind_stub-0x7f9144>
    6dd4:	0500000a 	streq	r0, [r0, #-10]
    6dd8:	0000295d 	andeq	r2, r0, sp, asr r9
    6ddc:	f503110a 			; <UNDEFINED> instruction: 0xf503110a
    6de0:	21000009 	tstcs	r0, r9
    6de4:	00002968 	andeq	r2, r0, r8, ror #18
    6de8:	b00d2301 	andlt	r2, sp, r1, lsl #6
    6dec:	24000005 	strcs	r0, [r0], #-5
    6df0:	0000299d 	muleq	r0, sp, r9
    6df4:	98062a01 	stmdals	r6, {r0, r9, fp, sp}
    6df8:	b001004a 	andlt	r0, r1, sl, asr #32
    6dfc:	01000000 	mrseq	r0, (UNDEF: 0)
    6e00:	29b1259c 	ldmibcs	r1!, {r2, r3, r4, r7, r8, sl, sp}
    6e04:	24010000 	strcs	r0, [r1], #-0
    6e08:	004a6c14 	subeq	r6, sl, r4, lsl ip
    6e0c:	00002c01 	andeq	r2, r0, r1, lsl #24
    6e10:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    6e14:	2600000a 	strcs	r0, [r0], -sl
    6e18:	00001129 	andeq	r1, r0, r9, lsr #2
    6e1c:	f9232401 			; <UNDEFINED> instruction: 0xf9232401
    6e20:	02000000 	andeq	r0, r0, #0
    6e24:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    6e28:	00002a49 	andeq	r2, r0, r9, asr #20
    6e2c:	10141c01 	andsne	r1, r4, r1, lsl #24
    6e30:	5c01004a 	stcpl	0, cr0, [r1], {74}	; 0x4a
    6e34:	01000000 	mrseq	r0, (UNDEF: 0)
    6e38:	000b069c 	muleq	fp, ip, r6
    6e3c:	29e22100 	stmibcs	r2!, {r8, sp}^
    6e40:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    6e44:	00091514 	andeq	r1, r9, r4, lsl r5
    6e48:	29f02100 	ldmibcs	r0!, {r8, sp}^
    6e4c:	1f010000 	svcne	0x00010000
    6e50:	00091514 	andeq	r1, r9, r4, lsl r5
    6e54:	4a1c2700 	bmi	710a5c <__core1_unwind_stub-0x8ef5a4>
    6e58:	003c0100 	eorseq	r0, ip, r0, lsl #2
    6e5c:	70280000 	eorvc	r0, r8, r0
    6e60:	13200100 	nopne	{0}	; <UNPREDICTABLE>
    6e64:	00000b06 	andeq	r0, r0, r6, lsl #22
    6e68:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6e6c:	15040f00 	strne	r0, [r4, #-3840]	; 0xfffff100
    6e70:	00000009 	andeq	r0, r0, r9
    6e74:	000000f6 	strdeq	r0, [r0], -r6
    6e78:	11260004 			; <UNDEFINED> instruction: 0x11260004
    6e7c:	01040000 	mrseq	r0, (UNDEF: 4)
    6e80:	0000003a 	andeq	r0, r0, sl, lsr r0
    6e84:	002aab0c 	eoreq	sl, sl, ip, lsl #22
    6e88:	000bdf00 	andeq	sp, fp, r0, lsl #30
    6e8c:	00051800 	andeq	r1, r5, r0, lsl #16
    6e90:	00000000 	andeq	r0, r0, r0
    6e94:	002d9900 	eoreq	r9, sp, r0, lsl #18
    6e98:	06010200 	streq	r0, [r1], -r0, lsl #4
    6e9c:	00000408 	andeq	r0, r0, r8, lsl #8
    6ea0:	70050202 	andvc	r0, r5, r2, lsl #4
    6ea4:	0200000d 	andeq	r0, r0, #13
    6ea8:	08100504 	ldmdaeq	r0, {r2, r8, sl}
    6eac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6eb0:	00080b05 	andeq	r0, r8, r5, lsl #22
    6eb4:	08010200 	stmdaeq	r1, {r9}
    6eb8:	00000406 	andeq	r0, r0, r6, lsl #8
    6ebc:	bd070202 	sfmlt	f0, 4, [r7, #-8]
    6ec0:	0200000e 	andeq	r0, r0, #14
    6ec4:	0b460704 	bleq	1188adc <__bss_end__+0x16cadc>
    6ec8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6ecc:	000b4107 	andeq	r4, fp, r7, lsl #2
    6ed0:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    6ed4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6ed8:	4b070402 	blmi	1c7ee8 <__core1_unwind_stub-0xe38118>
    6edc:	0400000b 	streq	r0, [r0], #-11
    6ee0:	000029e2 	andeq	r2, r0, r2, ror #19
    6ee4:	4f160301 	svcmi	0x00160301
    6ee8:	04000000 	streq	r0, [r0], #-0
    6eec:	000029f0 	strdeq	r2, [r0], -r0
    6ef0:	4f250301 	svcmi	0x00250301
    6ef4:	04000000 	streq	r0, [r0], #-0
    6ef8:	00002a8e 	andeq	r2, r0, lr, lsl #21
    6efc:	4f320301 	svcmi	0x00320301
    6f00:	04000000 	streq	r0, [r0], #-0
    6f04:	00002a9c 	muleq	r0, ip, sl
    6f08:	4f160401 	svcmi	0x00160401
    6f0c:	04000000 	streq	r0, [r0], #-0
    6f10:	00002a6e 	andeq	r2, r0, lr, ror #20
    6f14:	4f260401 	svcmi	0x00260401
    6f18:	04000000 	streq	r0, [r0], #-0
    6f1c:	00002a60 	andeq	r2, r0, r0, ror #20
    6f20:	4f340401 	svcmi	0x00340401
    6f24:	05000000 	streq	r0, [r0, #-0]
    6f28:	00002ac5 	andeq	r2, r0, r5, asr #21
    6f2c:	981d1c01 	ldmdals	sp, {r0, sl, fp, ip}
    6f30:	0c01004b 	stceq	0, cr0, [r1], {75}	; 0x4b
    6f34:	01000000 	mrseq	r0, (UNDEF: 0)
    6f38:	2a7b069c 	bcs	1ec89b0 <__bss_end__+0xeac9b0>
    6f3c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    6f40:	004b4823 	subeq	r4, fp, r3, lsr #16
    6f44:	00005001 	andeq	r5, r0, r1
    6f48:	f39c0100 	vaddw.u16	q0, q6, d0
    6f4c:	07000000 	streq	r0, [r0, -r0]
    6f50:	01004b54 	tsteq	r0, r4, asr fp
    6f54:	0000003c 	andeq	r0, r0, ip, lsr r0
    6f58:	01007008 	tsteq	r0, r8
    6f5c:	00f3190c 	rscseq	r1, r3, ip, lsl #18
    6f60:	91020000 	mrsls	r0, (UNDEF: 2)
    6f64:	09000074 	stmdbeq	r0, {r2, r4, r5, r6}
    6f68:	00004f04 	andeq	r4, r0, r4, lsl #30
    6f6c:	020c0000 	andeq	r0, ip, #0
    6f70:	00040000 	andeq	r0, r4, r0
    6f74:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
    6f78:	003a0104 	eorseq	r0, sl, r4, lsl #2
    6f7c:	e10c0000 	mrs	r0, (UNDEF: 12)
    6f80:	df00002a 	svcle	0x0000002a
    6f84:	3000000b 	andcc	r0, r0, fp
    6f88:	00000005 	andeq	r0, r0, r5
    6f8c:	1c000000 	stcne	0, cr0, [r0], {-0}
    6f90:	0200002e 	andeq	r0, r0, #46	; 0x2e
    6f94:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6f98:	0d030074 	stceq	0, cr0, [r3, #-464]	; 0xfffffe30
    6f9c:	02000010 	andeq	r0, r0, #16
    6fa0:	003817d1 	ldrsbteq	r1, [r8], -r1
    6fa4:	04040000 	streq	r0, [r4], #-0
    6fa8:	000b4b07 	andeq	r4, fp, r7, lsl #22
    6fac:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    6fb0:	0000080b 	andeq	r0, r0, fp, lsl #16
    6fb4:	a3040804 	movwge	r0, #18436	; 0x4804
    6fb8:	0400000a 	streq	r0, [r0], #-10
    6fbc:	04080601 	streq	r0, [r8], #-1537	; 0xfffff9ff
    6fc0:	02040000 	andeq	r0, r4, #0
    6fc4:	000d7005 	andeq	r7, sp, r5
    6fc8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6fcc:	00000810 	andeq	r0, r0, r0, lsl r8
    6fd0:	002a4103 	eoreq	r4, sl, r3, lsl #2
    6fd4:	182e0300 	stmdane	lr!, {r8, r9}
    6fd8:	00000073 	andeq	r0, r0, r3, ror r0
    6fdc:	00006205 	andeq	r6, r0, r5, lsl #4
    6fe0:	08010400 	stmdaeq	r1, {sl}
    6fe4:	00000406 	andeq	r0, r0, r6, lsl #8
    6fe8:	bd070204 	sfmlt	f0, 4, [r7, #-16]
    6fec:	0400000e 	streq	r0, [r0], #-14
    6ff0:	0b460704 	bleq	1188c08 <__bss_end__+0x16cc08>
    6ff4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    6ff8:	000b4107 	andeq	r4, fp, r7, lsl #2
    6ffc:	2ad20600 	bcs	ff488804 <__shm_end__+0xbf488804>
    7000:	14010000 	strne	r0, [r1], #-0
    7004:	00012107 	andeq	r2, r1, r7, lsl #2
    7008:	00000000 	andeq	r0, r0, r0
    700c:	00010800 	andeq	r0, r1, r0, lsl #16
    7010:	219c0100 	orrscs	r0, ip, r0, lsl #2
    7014:	07000001 	streq	r0, [r0, -r1]
    7018:	00747364 	rsbseq	r7, r4, r4, ror #6
    701c:	21151401 	tstcs	r5, r1, lsl #8
    7020:	02000001 	andeq	r0, r0, #1
    7024:	73076491 	movwvc	r6, #29841	; 0x7491
    7028:	01006372 	tsteq	r0, r2, ror r3
    702c:	01232614 			; <UNDEFINED> instruction: 0x01232614
    7030:	91020000 	mrsls	r0, (UNDEF: 2)
    7034:	006e0760 	rsbeq	r0, lr, r0, ror #14
    7038:	2c321401 	cfldrscs	mvf1, [r2], #-4
    703c:	02000000 	andeq	r0, r0, #0
    7040:	64085c91 	strvs	r5, [r8], #-3217	; 0xfffff36f
    7044:	0e160100 	mufeqs	f0, f6, f0
    7048:	0000012a 	andeq	r0, r0, sl, lsr #2
    704c:	086c9102 	stmdaeq	ip!, {r1, r8, ip, pc}^
    7050:	17010073 	smlsdxne	r1, r3, r0, r0
    7054:	00013014 	andeq	r3, r1, r4, lsl r0
    7058:	68910200 	ldmvs	r1, {r9}
    705c:	00000009 	andeq	r0, r0, r9
    7060:	00004c00 	andeq	r4, r0, r0, lsl #24
    7064:	00010900 	andeq	r0, r1, r0, lsl #18
    7068:	00690800 	rsbeq	r0, r9, r0, lsl #16
    706c:	2c151a01 			; <UNDEFINED> instruction: 0x2c151a01
    7070:	02000000 	andeq	r0, r0, #0
    7074:	0a007491 	beq	242c0 <__core1_unwind_stub-0xfdbd40>
    7078:	00000000 	andeq	r0, r0, r0
    707c:	0000004c 	andeq	r0, r0, ip, asr #32
    7080:	01006908 	tsteq	r0, r8, lsl #18
    7084:	002c151c 	eoreq	r1, ip, ip, lsl r5
    7088:	91020000 	mrsls	r0, (UNDEF: 2)
    708c:	0b000070 	bleq	7254 <__core1_unwind_stub-0xff8dac>
    7090:	29040c04 	stmdbcs	r4, {r2, sl, fp}
    7094:	0d000001 	stceq	0, cr0, [r0, #-4]
    7098:	0062040c 	rsbeq	r0, r2, ip, lsl #8
    709c:	040c0000 	streq	r0, [ip], #-0
    70a0:	0000006e 	andeq	r0, r0, lr, rrx
    70a4:	002af606 	eoreq	pc, sl, r6, lsl #12
    70a8:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    70ac:	00000121 	andeq	r0, r0, r1, lsr #2
    70b0:	01004c1c 	tsteq	r0, ip, lsl ip
    70b4:	00000084 	andeq	r0, r0, r4, lsl #1
    70b8:	01ad9c01 			; <UNDEFINED> instruction: 0x01ad9c01
    70bc:	64070000 	strvs	r0, [r7], #-0
    70c0:	01007473 	tsteq	r0, r3, ror r4
    70c4:	0121140c 			; <UNDEFINED> instruction: 0x0121140c
    70c8:	91020000 	mrsls	r0, (UNDEF: 2)
    70cc:	72730764 	rsbsvc	r0, r3, #100, 14	; 0x1900000
    70d0:	0c010063 	stceq	0, cr0, [r1], {99}	; 0x63
    70d4:	00012325 	andeq	r2, r1, r5, lsr #6
    70d8:	60910200 	addsvs	r0, r1, r0, lsl #4
    70dc:	01006e07 	tsteq	r0, r7, lsl #28
    70e0:	002c310c 	eoreq	r3, ip, ip, lsl #2
    70e4:	91020000 	mrsls	r0, (UNDEF: 2)
    70e8:	0064085c 	rsbeq	r0, r4, ip, asr r8
    70ec:	2a0e0e01 	bcs	38a8f8 <__core1_unwind_stub-0xc75708>
    70f0:	02000001 	andeq	r0, r0, #1
    70f4:	73087091 	movwvc	r7, #32913	; 0x8091
    70f8:	140f0100 	strne	r0, [pc], #-256	; 7100 <__core1_unwind_stub-0xff8f00>
    70fc:	00000130 	andeq	r0, r0, r0, lsr r1
    7100:	0a6c9102 	beq	1b2b510 <__bss_end__+0xb0f510>
    7104:	01004c44 	tsteq	r0, r4, asr #24
    7108:	00000048 	andeq	r0, r0, r8, asr #32
    710c:	01006908 	tsteq	r0, r8, lsl #18
    7110:	002c1110 	eoreq	r1, ip, r0, lsl r1
    7114:	91020000 	mrsls	r0, (UNDEF: 2)
    7118:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    711c:	00002ada 	ldrdeq	r2, [r0], -sl
    7120:	21070501 	tstcs	r7, r1, lsl #10
    7124:	a8000001 	stmdage	r0, {r0}
    7128:	7401004b 	strvc	r0, [r1], #-75	; 0xffffffb5
    712c:	01000000 	mrseq	r0, (UNDEF: 0)
    7130:	0073079c 			; <UNDEFINED> instruction: 0x0073079c
    7134:	21140501 	tstcs	r4, r1, lsl #10
    7138:	02000001 	andeq	r0, r0, #1
    713c:	63076c91 	movwvs	r6, #31889	; 0x7c91
    7140:	1b050100 	blne	147548 <__core1_unwind_stub-0xeb8ab8>
    7144:	00000025 	andeq	r0, r0, r5, lsr #32
    7148:	07689102 	strbeq	r9, [r8, -r2, lsl #2]!
    714c:	0501006e 	streq	r0, [r1, #-110]	; 0xffffff92
    7150:	00002c25 	andeq	r2, r0, r5, lsr #24
    7154:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    7158:	01007008 	tsteq	r0, r8
    715c:	012a0e07 			; <UNDEFINED> instruction: 0x012a0e07
    7160:	91020000 	mrsls	r0, (UNDEF: 2)
    7164:	4bc80a70 	blmi	ff209b2c <__shm_end__+0xbf209b2c>
    7168:	00400100 	subeq	r0, r0, r0, lsl #2
    716c:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    7170:	11080100 	mrsne	r0, (UNDEF: 24)
    7174:	0000002c 	andeq	r0, r0, ip, lsr #32
    7178:	00749102 	rsbseq	r9, r4, r2, lsl #2
    717c:	00220000 	eoreq	r0, r2, r0
    7180:	00020000 	andeq	r0, r2, r0
    7184:	0000127f 	andeq	r1, r0, pc, ror r2
    7188:	2fb10104 	svccs	0x00b10104
    718c:	00000000 	andeq	r0, r0, r0
    7190:	00040100 	andeq	r0, r4, r0, lsl #2
    7194:	2afd0100 	bcs	fff4759c <__shm_end__+0xbff4759c>
    7198:	0bdf0000 	bleq	ff7c71a0 <__shm_end__+0xbf7c71a0>
    719c:	2b1a0000 	blcs	6871a4 <__core1_unwind_stub-0x978e5c>
    71a0:	80010000 	andhi	r0, r1, r0
    71a4:	0000126d 	andeq	r1, r0, sp, ror #4
    71a8:	12930004 	addsne	r0, r3, #4
    71ac:	01040000 	mrseq	r0, (UNDEF: 4)
    71b0:	0000003a 	andeq	r0, r0, sl, lsr r0
    71b4:	002d320c 	eoreq	r3, sp, ip, lsl #4
    71b8:	000bdf00 	andeq	sp, fp, r0, lsl #30
    71bc:	00056800 	andeq	r6, r5, r0, lsl #16
    71c0:	00000000 	andeq	r0, r0, r0
    71c4:	002ffd00 	eoreq	pc, pc, r0, lsl #26
    71c8:	06010200 	streq	r0, [r1], -r0, lsl #4
    71cc:	00000408 	andeq	r0, r0, r8, lsl #8
    71d0:	70050202 	andvc	r0, r5, r2, lsl #4
    71d4:	0300000d 	movweq	r0, #13
    71d8:	00000e61 	andeq	r0, r0, r1, ror #28
    71dc:	3f182802 	svccc	0x00182802
    71e0:	02000000 	andeq	r0, r0, #0
    71e4:	08100504 	ldmdaeq	r0, {r2, r8, sl}
    71e8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    71ec:	00080b05 	andeq	r0, r8, r5, lsl #22
    71f0:	2a410300 	bcs	1047df8 <__bss_end__+0x2bdf8>
    71f4:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    71f8:	00005918 	andeq	r5, r0, r8, lsl r9
    71fc:	08010200 	stmdaeq	r1, {r9}
    7200:	00000406 	andeq	r0, r0, r6, lsl #8
    7204:	bd070202 	sfmlt	f0, 4, [r7, #-8]
    7208:	0300000e 	movweq	r0, #14
    720c:	00000e60 	andeq	r0, r0, r0, ror #28
    7210:	78193402 	ldmdavc	r9, {r1, sl, ip, sp}
    7214:	04000000 	streq	r0, [r0], #-0
    7218:	00000067 	andeq	r0, r0, r7, rrx
    721c:	46070402 	strmi	r0, [r7], -r2, lsl #8
    7220:	0200000b 	andeq	r0, r0, #11
    7224:	0b410708 	bleq	1048e4c <__bss_end__+0x2ce4c>
    7228:	04050000 	streq	r0, [r5], #-0
    722c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    7230:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7234:	00000b4b 	andeq	r0, r0, fp, asr #22
    7238:	00008d06 	andeq	r8, r0, r6, lsl #26
    723c:	23530300 	cmpcs	r3, #0, 6
    7240:	56020000 	strpl	r0, [r2], -r0
    7244:	00008d1a 	andeq	r8, r0, sl, lsl sp
    7248:	100d0300 	andne	r0, sp, r0, lsl #6
    724c:	d1030000 	mrsle	r0, (UNDEF: 3)
    7250:	00008d17 	andeq	r8, r0, r7, lsl sp
    7254:	00a50600 	adceq	r0, r5, r0, lsl #12
    7258:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    725c:	000aa304 	andeq	sl, sl, r4, lsl #6
    7260:	04dc0300 	ldrbeq	r0, [ip], #768	; 0x300
    7264:	41040000 	mrsmi	r0, (UNDEF: 4)
    7268:	0000331d 	andeq	r3, r0, sp, lsl r3
    726c:	1e390700 	cdpne	7, 3, cr0, cr9, cr0, {0}
    7270:	01070000 	mrseq	r0, (UNDEF: 7)
    7274:	00000059 	andeq	r0, r0, r9, asr r0
    7278:	e80e6505 	stmda	lr, {r0, r2, r8, sl, sp, lr}
    727c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7280:	000023b2 			; <UNDEFINED> instruction: 0x000023b2
    7284:	1e210800 	cdpne	8, 2, cr0, cr1, cr0, {0}
    7288:	00010000 	andeq	r0, r1, r0
    728c:	001e6b03 	andseq	r6, lr, r3, lsl #22
    7290:	03690500 	cmneq	r9, #0, 10
    7294:	000000c9 	andeq	r0, r0, r9, asr #1
    7298:	00241e07 	eoreq	r1, r4, r7, lsl #28
    729c:	59010700 	stmdbpl	r1, {r8, r9, sl}
    72a0:	05000000 	streq	r0, [r0, #-0]
    72a4:	01130e73 	tsteq	r3, r3, ror lr
    72a8:	44080000 	strmi	r0, [r8], #-0
    72ac:	00000022 	andeq	r0, r0, r2, lsr #32
    72b0:	00212c08 	eoreq	r2, r1, r8, lsl #24
    72b4:	03000100 	movweq	r0, #256	; 0x100
    72b8:	00002452 	andeq	r2, r0, r2, asr r4
    72bc:	f4037705 	vst1.8	{d7}, [r3], r5
    72c0:	07000000 	streq	r0, [r0, -r0]
    72c4:	0000225a 	andeq	r2, r0, sl, asr r2
    72c8:	00590107 	subseq	r0, r9, r7, lsl #2
    72cc:	7e050000 	cdpvc	0, 0, cr0, cr5, cr0, {0}
    72d0:	00013e0e 	andeq	r3, r1, lr, lsl #28
    72d4:	23040800 	movwcs	r0, #18432	; 0x4800
    72d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    72dc:	000025c7 	andeq	r2, r0, r7, asr #11
    72e0:	7c030001 	stcvc	0, cr0, [r3], {1}
    72e4:	05000022 	streq	r0, [r0, #-34]	; 0xffffffde
    72e8:	011f038d 	tsteq	pc, sp, lsl #7
    72ec:	7e070000 	cdpvc	0, 0, cr0, cr7, cr0, {0}
    72f0:	07000024 	streq	r0, [r0, -r4, lsr #32]
    72f4:	00005901 	andeq	r5, r0, r1, lsl #18
    72f8:	06bc0500 	ldrteq	r0, [ip], r0, lsl #10
    72fc:	00000181 	andeq	r0, r0, r1, lsl #3
    7300:	0022bc08 	eoreq	fp, r2, r8, lsl #24
    7304:	68080000 	stmdavs	r8, {}	; <UNPREDICTABLE>
    7308:	01000020 	tsteq	r0, r0, lsr #32
    730c:	0021f008 	eoreq	pc, r1, r8
    7310:	c7080200 	strgt	r0, [r8, -r0, lsl #4]
    7314:	0300001c 	movweq	r0, #28
    7318:	0024d608 	eoreq	sp, r4, r8, lsl #12
    731c:	c5080500 	strgt	r0, [r8, #-1280]	; 0xfffffb00
    7320:	07000021 	streq	r0, [r0, -r1, lsr #32]
    7324:	249d0300 	ldrcs	r0, [sp], #768	; 0x300
    7328:	c6050000 	strgt	r0, [r5], -r0
    732c:	00014a21 	andeq	r4, r1, r1, lsr #20
    7330:	1fc50700 	svcne	0x00c50700
    7334:	01070000 	mrseq	r0, (UNDEF: 7)
    7338:	00000059 	andeq	r0, r0, r9, asr r0
    733c:	3006f705 	andcc	pc, r6, r5, lsl #14
    7340:	08000002 	stmdaeq	r0, {r1}
    7344:	0000232f 	andeq	r2, r0, pc, lsr #6
    7348:	1eb708ff 	mrcne	8, 5, r0, cr7, cr15, {7}
    734c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7350:	00002211 	andeq	r2, r0, r1, lsl r2
    7354:	1c780801 	ldclne	8, cr0, [r8], #-4
    7358:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    735c:	000025dd 	ldrdeq	r2, [r0], -sp
    7360:	20580803 	subscs	r0, r8, r3, lsl #16
    7364:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    7368:	00002342 	andeq	r2, r0, r2, asr #6
    736c:	1ecb0813 	mcrne	8, 6, r0, cr11, cr3, {0}
    7370:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    7374:	00001e92 	muleq	r0, r2, lr
    7378:	1cec0840 	stclne	8, cr0, [ip], #256	; 0x100
    737c:	08500000 	ldmdaeq	r0, {}^	; <UNPREDICTABLE>
    7380:	000023ee 	andeq	r2, r0, lr, ror #7
    7384:	23ce0860 	biccs	r0, lr, #96, 16	; 0x600000
    7388:	08700000 	ldmdaeq	r0!, {}^	; <UNPREDICTABLE>
    738c:	000020d9 	ldrdeq	r2, [r0], -r9
    7390:	1f6d0841 	svcne	0x006d0841
    7394:	08510000 	ldmdaeq	r1, {}^	; <UNPREDICTABLE>
    7398:	00001d73 	andeq	r1, r0, r3, ror sp
    739c:	1d5f0861 	ldclne	8, cr0, [pc, #-388]	; 7220 <__core1_unwind_stub-0xff8de0>
    73a0:	08710000 	ldmdaeq	r1!, {}^	; <UNPREDICTABLE>
    73a4:	00002373 	andeq	r2, r0, r3, ror r3
    73a8:	217c0842 	cmncs	ip, r2, asr #16
    73ac:	08520000 	ldmdaeq	r2, {}^	; <UNPREDICTABLE>
    73b0:	0000201f 	andeq	r2, r0, pc, lsl r0
    73b4:	1fd40862 	svcne	0x00d40862
    73b8:	08720000 	ldmdaeq	r2!, {}^	; <UNPREDICTABLE>
    73bc:	00002045 	andeq	r2, r0, r5, asr #32
    73c0:	240a0843 	strcs	r0, [sl], #-2115	; 0xfffff7bd
    73c4:	08530000 	ldmdaeq	r3, {}^	; <UNPREDICTABLE>
    73c8:	00001c65 	andeq	r1, r0, r5, ror #24
    73cc:	20320863 	eorscs	r0, r2, r3, ror #16
    73d0:	00730000 	rsbseq	r0, r3, r0
    73d4:	001ffe09 	andseq	pc, pc, r9, lsl #28
    73d8:	01180500 	tsteq	r8, r0, lsl #10
    73dc:	00018d21 	andeq	r8, r1, r1, lsr #26
    73e0:	24f00a00 	ldrbtcs	r0, [r0], #2560	; 0xa00
    73e4:	05140000 	ldreq	r0, [r4, #-0]
    73e8:	ba1005cf 	blt	408b2c <__core1_unwind_stub-0xbf74d4>
    73ec:	0b000002 	bleq	73fc <__core1_unwind_stub-0xff8c04>
    73f0:	05006176 	streq	r6, [r0, #-374]	; 0xfffffe8a
    73f4:	ba1a05d1 	blt	688b40 <__core1_unwind_stub-0x9774c0>
    73f8:	00000002 	andeq	r0, r0, r2
    73fc:	0061700b 	rsbeq	r7, r1, fp
    7400:	1a05d505 	bne	17c81c <__core1_unwind_stub-0xe837e4>
    7404:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    7408:	02fc0c04 	rscseq	r0, ip, #4, 24	; 0x400
    740c:	da050000 	ble	147414 <__core1_unwind_stub-0xeb8bec>
    7410:	00671a05 	rsbeq	r1, r7, r5, lsl #20
    7414:	0c080000 	stceq	0, cr0, [r8], {-0}
    7418:	0000220a 	andeq	r2, r0, sl, lsl #4
    741c:	1a05de05 	bne	17ec38 <__core1_unwind_stub-0xe813c8>
    7420:	00000181 	andeq	r0, r0, r1, lsl #3
    7424:	24630c0c 	strbtcs	r0, [r3], #-3084	; 0xfffff3f4
    7428:	df050000 	svcle	0x00050000
    742c:	02301a05 	eorseq	r1, r0, #20480	; 0x5000
    7430:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    7434:	0000229e 	muleq	r0, lr, r2
    7438:	1a05e405 	bne	180454 <__core1_unwind_stub-0xe7fbac>
    743c:	000000e8 	andeq	r0, r0, r8, ror #1
    7440:	20ed0c0e 	rsccs	r0, sp, lr, lsl #24
    7444:	e5050000 	str	r0, [r5, #-0]
    7448:	013e1a05 	teqeq	lr, r5, lsl #20
    744c:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    7450:	00002398 	muleq	r0, r8, r3
    7454:	1a05e805 	bne	181470 <__core1_unwind_stub-0xe7eb90>
    7458:	00000113 	andeq	r0, r0, r3, lsl r1
    745c:	040d0010 	streq	r0, [sp], #-16
    7460:	00250509 	eoreq	r0, r5, r9, lsl #10
    7464:	05ec0500 	strbeq	r0, [ip, #1280]!	; 0x500
    7468:	00023d03 	andeq	r3, r2, r3, lsl #26
    746c:	d6040e00 	strle	r0, [r4], -r0, lsl #28
    7470:	02000002 	andeq	r0, r0, #2
    7474:	040f0801 	streq	r0, [pc], #-2049	; 747c <__core1_unwind_stub-0xff8b84>
    7478:	cf060000 	svcgt	0x00060000
    747c:	07000002 	streq	r0, [r0, -r2]
    7480:	00002e92 	muleq	r0, r2, lr
    7484:	00590107 	subseq	r0, r9, r7, lsl #2
    7488:	41060000 	mrsmi	r0, (UNDEF: 6)
    748c:	0003060e 	andeq	r0, r3, lr, lsl #12
    7490:	2c710800 	ldclcs	8, cr0, [r1], #-0
    7494:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7498:	00002b92 	muleq	r0, r2, fp
    749c:	2cc90801 	stclcs	8, cr0, [r9], {1}
    74a0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    74a4:	00002ca5 	andeq	r2, r0, r5, lsr #25
    74a8:	97090003 	strls	r0, [r9, -r3]
    74ac:	0300000c 	movweq	r0, #12
    74b0:	8d17015e 	ldfhis	f0, [r7, #-376]	; 0xfffffe88
    74b4:	03000000 	movweq	r0, #0
    74b8:	00000ea4 	andeq	r0, r0, r4, lsr #29
    74bc:	3f0e2e07 	svccc	0x000e2e07
    74c0:	03000000 	movweq	r0, #0
    74c4:	00000ae3 	andeq	r0, r0, r3, ror #21
    74c8:	3f0e7407 	svccc	0x000e7407
    74cc:	0f000000 	svceq	0x00000000
    74d0:	03a50704 			; <UNDEFINED> instruction: 0x03a50704
    74d4:	0000034d 	andeq	r0, r0, sp, asr #6
    74d8:	00023a10 	andeq	r3, r2, r0, lsl sl
    74dc:	0ca70700 	stceq	7, cr0, [r7]
    74e0:	00000306 	andeq	r0, r0, r6, lsl #6
    74e4:	000aeb10 	andeq	lr, sl, r0, lsl fp
    74e8:	13a80700 			; <UNDEFINED> instruction: 0x13a80700
    74ec:	0000034d 	andeq	r0, r0, sp, asr #6
    74f0:	00591100 	subseq	r1, r9, r0, lsl #2
    74f4:	035d0000 	cmpeq	sp, #0
    74f8:	8d120000 	ldchi	0, cr0, [r2, #-0]
    74fc:	03000000 	movweq	r0, #0
    7500:	07081300 	streq	r1, [r8, -r0, lsl #6]
    7504:	038109a2 	orreq	r0, r1, #2654208	; 0x288000
    7508:	6f140000 	svcvs	0x00140000
    750c:	0700000a 	streq	r0, [r0, -sl]
    7510:	008607a4 	addeq	r0, r6, r4, lsr #15
    7514:	14000000 	strne	r0, [r0], #-0
    7518:	0000000b 	andeq	r0, r0, fp
    751c:	2b05a907 	blcs	171940 <__core1_unwind_stub-0xe8e6c0>
    7520:	04000003 	streq	r0, [r0], #-3
    7524:	0c2f0300 	stceq	3, cr0, [pc], #-0	; 752c <__core1_unwind_stub-0xff8ad4>
    7528:	aa070000 	bge	1c7530 <__core1_unwind_stub-0xe38ad0>
    752c:	00035d03 	andeq	r5, r3, r3, lsl #26
    7530:	0e580300 	cdpeq	3, 5, cr0, cr8, cr0, {0}
    7534:	16080000 	strne	r0, [r8], -r0
    7538:	00007819 	andeq	r7, r0, r9, lsl r8
    753c:	06b90300 	ldrteq	r0, [r9], r0, lsl #6
    7540:	0c090000 	stceq	0, cr0, [r9], {-0}
    7544:	0000860d 	andeq	r8, r0, sp, lsl #12
    7548:	0bd60300 	bleq	ff588150 <__shm_end__+0xbf588150>
    754c:	23080000 	movwcs	r0, #32768	; 0x8000
    7550:	0003991b 	andeq	r9, r3, fp, lsl r9
    7554:	070e1500 	streq	r1, [lr, -r0, lsl #10]
    7558:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    755c:	040b0834 	streq	r0, [fp], #-2100	; 0xfffff7cc
    7560:	3a140000 	bcc	507568 <__core1_unwind_stub-0xaf8a98>
    7564:	0800000a 	stmdaeq	r0, {r1, r3}
    7568:	040b1336 	streq	r1, [fp], #-822	; 0xfffffcca
    756c:	16000000 	strne	r0, [r0], -r0
    7570:	08006b5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
    7574:	00860737 	addeq	r0, r6, r7, lsr r7
    7578:	14040000 	strne	r0, [r4], #-0
    757c:	00000767 	andeq	r0, r0, r7, ror #14
    7580:	860b3708 	strhi	r3, [fp], -r8, lsl #14
    7584:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7588:	0008c514 	andeq	ip, r8, r4, lsl r5
    758c:	14370800 	ldrtne	r0, [r7], #-2048	; 0xfffff800
    7590:	00000086 	andeq	r0, r0, r6, lsl #1
    7594:	0607140c 	streq	r1, [r7], -ip, lsl #8
    7598:	37080000 	strcc	r0, [r8, -r0]
    759c:	0000861b 	andeq	r8, r0, fp, lsl r6
    75a0:	5f161000 	svcpl	0x00161000
    75a4:	38080078 	stmdacc	r8, {r3, r4, r5, r6}
    75a8:	0004110b 	andeq	r1, r4, fp, lsl #2
    75ac:	0e001400 	cfcpyseq	mvf1, mvf0
    75b0:	0003b104 	andeq	fp, r3, r4, lsl #2
    75b4:	038d1100 	orreq	r1, sp, #0, 2
    75b8:	04210000 	strteq	r0, [r1], #-0
    75bc:	8d120000 	ldchi	0, cr0, [r2, #-0]
    75c0:	00000000 	andeq	r0, r0, r0
    75c4:	01401500 	cmpeq	r0, r0, lsl #10
    75c8:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    75cc:	04a4083c 	strteq	r0, [r4], #2108	; 0x83c
    75d0:	5c140000 	ldcpl	0, cr0, [r4], {-0}
    75d4:	08000001 	stmdaeq	r0, {r0}
    75d8:	0086093e 	addeq	r0, r6, lr, lsr r9
    75dc:	14000000 	strne	r0, [r0], #-0
    75e0:	00000fae 	andeq	r0, r0, lr, lsr #31
    75e4:	86093f08 	strhi	r3, [r9], -r8, lsl #30
    75e8:	04000000 	streq	r0, [r0], #-0
    75ec:	000ed014 	andeq	sp, lr, r4, lsl r0
    75f0:	09400800 	stmdbeq	r0, {fp}^
    75f4:	00000086 	andeq	r0, r0, r6, lsl #1
    75f8:	0a011408 	beq	4c620 <__core1_unwind_stub-0xfb39e0>
    75fc:	41080000 	mrsmi	r0, (UNDEF: 8)
    7600:	00008609 	andeq	r8, r0, r9, lsl #12
    7604:	92140c00 	andsls	r0, r4, #0, 24
    7608:	08000003 	stmdaeq	r0, {r0, r1}
    760c:	00860942 	addeq	r0, r6, r2, asr #18
    7610:	14100000 	ldrne	r0, [r0], #-0
    7614:	00000df3 	strdeq	r0, [r0], -r3
    7618:	86094308 	strhi	r4, [r9], -r8, lsl #6
    761c:	14000000 	strne	r0, [r0], #-0
    7620:	000a8114 	andeq	r8, sl, r4, lsl r1
    7624:	09440800 	stmdbeq	r4, {fp}^
    7628:	00000086 	andeq	r0, r0, r6, lsl #1
    762c:	0aaf1418 	beq	febcc694 <__shm_end__+0xbebcc694>
    7630:	45080000 	strmi	r0, [r8, #-0]
    7634:	00008609 	andeq	r8, r0, r9, lsl #12
    7638:	74141c00 	ldrvc	r1, [r4], #-3072	; 0xfffff400
    763c:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    7640:	00860946 	addeq	r0, r6, r6, asr #18
    7644:	00200000 	eoreq	r0, r0, r0
    7648:	00026317 	andeq	r6, r2, r7, lsl r3
    764c:	08010800 	stmdaeq	r1, {fp}
    7650:	04e9084f 	strbteq	r0, [r9], #2127	; 0x84f
    7654:	60140000 	andsvs	r0, r4, r0
    7658:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    765c:	04e90a50 	strbteq	r0, [r9], #2640	; 0xa50
    7660:	14000000 	strne	r0, [r0], #-0
    7664:	00000b6c 	andeq	r0, r0, ip, ror #22
    7668:	e9095108 	stmdb	r9, {r3, r8, ip, lr}
    766c:	80000004 	andhi	r0, r0, r4
    7670:	000de318 	andeq	lr, sp, r8, lsl r3
    7674:	0a530800 	beq	14c967c <__bss_end__+0x4ad67c>
    7678:	0000038d 	andeq	r0, r0, sp, lsl #7
    767c:	1f180100 	svcne	0x00180100
    7680:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    7684:	038d0a56 	orreq	r0, sp, #352256	; 0x56000
    7688:	01040000 	mrseq	r0, (UNDEF: 4)
    768c:	02ba1100 	adcseq	r1, sl, #0, 2
    7690:	04f90000 	ldrbteq	r0, [r9], #0
    7694:	8d120000 	ldchi	0, cr0, [r2, #-0]
    7698:	1f000000 	svcne	0x00000000
    769c:	0a5a1700 	beq	168d2a4 <__bss_end__+0x6712a4>
    76a0:	01900000 	orrseq	r0, r0, r0
    76a4:	3c086208 	sfmcc	f6, 4, [r8], {8}
    76a8:	14000005 	strne	r0, [r0], #-5
    76ac:	00000a3a 	andeq	r0, r0, sl, lsr sl
    76b0:	3c126308 	ldccc	3, cr6, [r2], {8}
    76b4:	00000005 	andeq	r0, r0, r5
    76b8:	000e1314 	andeq	r1, lr, r4, lsl r3
    76bc:	06640800 	strbteq	r0, [r4], -r0, lsl #16
    76c0:	00000086 	andeq	r0, r0, r6, lsl #1
    76c4:	04991404 	ldreq	r1, [r9], #1028	; 0x404
    76c8:	66080000 	strvs	r0, [r8], -r0
    76cc:	00054209 	andeq	r4, r5, r9, lsl #4
    76d0:	63140800 	tstvs	r4, #0, 16
    76d4:	08000002 	stmdaeq	r0, {r1}
    76d8:	04a41e67 	strteq	r1, [r4], #3687	; 0xe67
    76dc:	00880000 	addeq	r0, r8, r0
    76e0:	04f9040e 	ldrbteq	r0, [r9], #1038	; 0x40e
    76e4:	52110000 	andspl	r0, r1, #0
    76e8:	52000005 	andpl	r0, r0, #5
    76ec:	12000005 	andne	r0, r0, #5
    76f0:	0000008d 	andeq	r0, r0, sp, lsl #1
    76f4:	040e001f 	streq	r0, [lr], #-31	; 0xffffffe1
    76f8:	00000558 	andeq	r0, r0, r8, asr r5
    76fc:	0e181519 	mrceq	5, 0, r1, cr8, cr9, {0}
    7700:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    7704:	0581087a 	streq	r0, [r1, #2170]	; 0x87a
    7708:	b4140000 	ldrlt	r0, [r4], #-0
    770c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    7710:	0581117b 	streq	r1, [r1, #379]	; 0x17b
    7714:	14000000 	strne	r0, [r0], #-0
    7718:	000002fb 	strdeq	r0, [r0], -fp
    771c:	86067c08 	strhi	r7, [r6], -r8, lsl #24
    7720:	04000000 	streq	r0, [r0], #-0
    7724:	59040e00 	stmdbpl	r4, {r9, sl, fp}
    7728:	15000000 	strne	r0, [r0, #-0]
    772c:	00000687 	andeq	r0, r0, r7, lsl #13
    7730:	08ba0868 	ldmeq	sl!, {r3, r5, r6, fp}
    7734:	000006ca 	andeq	r0, r0, sl, asr #13
    7738:	00705f16 	rsbseq	r5, r0, r6, lsl pc
    773c:	8112bb08 	tsthi	r2, r8, lsl #22
    7740:	00000005 	andeq	r0, r0, r5
    7744:	00725f16 	rsbseq	r5, r2, r6, lsl pc
    7748:	8607bc08 	strhi	fp, [r7], -r8, lsl #24
    774c:	04000000 	streq	r0, [r0], #-0
    7750:	00775f16 	rsbseq	r5, r7, r6, lsl pc
    7754:	8607bd08 	strhi	fp, [r7], -r8, lsl #26
    7758:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    775c:	000a4014 	andeq	r4, sl, r4, lsl r0
    7760:	09be0800 	ldmibeq	lr!, {fp}
    7764:	0000002c 	andeq	r0, r0, ip, lsr #32
    7768:	025d140c 	subseq	r1, sp, #12, 8	; 0xc000000
    776c:	bf080000 	svclt	0x00080000
    7770:	00002c09 	andeq	r2, r0, r9, lsl #24
    7774:	5f160e00 	svcpl	0x00160e00
    7778:	08006662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp, lr}
    777c:	055911c0 	ldrbeq	r1, [r9, #-448]	; 0xfffffe40
    7780:	14100000 	ldrne	r0, [r0], #-0
    7784:	00000e05 	andeq	r0, r0, r5, lsl #28
    7788:	8607c108 	strhi	ip, [r7], -r8, lsl #2
    778c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7790:	0005ea14 	andeq	lr, r5, r4, lsl sl
    7794:	0ac80800 	beq	ff20979c <__shm_end__+0xbf20979c>
    7798:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    779c:	1c5f141c 	cfldrdne	mvd1, [pc], {28}
    77a0:	ca080000 	bgt	2077a8 <__core1_unwind_stub-0xdf8858>
    77a4:	0008421d 	andeq	r4, r8, sp, lsl r2
    77a8:	a3142000 	tstge	r4, #0
    77ac:	08000011 	stmdaeq	r0, {r0, r4}
    77b0:	08661dcc 	stmdaeq	r6!, {r2, r3, r6, r7, r8, sl, fp, ip}^
    77b4:	14240000 	strtne	r0, [r4], #-0
    77b8:	00000acc 	andeq	r0, r0, ip, asr #21
    77bc:	8a0dcf08 	bhi	37b3e4 <__core1_unwind_stub-0xc84c1c>
    77c0:	28000008 	stmdacs	r0, {r3}
    77c4:	002b4414 	eoreq	r4, fp, r4, lsl r4
    77c8:	09d00800 	ldmibeq	r0, {fp}^
    77cc:	000008a4 	andeq	r0, r0, r4, lsr #17
    77d0:	755f162c 	ldrbvc	r1, [pc, #-1580]	; 71ac <__core1_unwind_stub-0xff8e54>
    77d4:	d3080062 	movwle	r0, #32866	; 0x8062
    77d8:	00055911 	andeq	r5, r5, r1, lsl r9
    77dc:	5f163000 	svcpl	0x00163000
    77e0:	08007075 	stmdaeq	r0, {r0, r2, r4, r5, r6, ip, sp, lr}
    77e4:	058112d4 	streq	r1, [r1, #724]	; 0x2d4
    77e8:	16380000 	ldrtne	r0, [r8], -r0
    77ec:	0072755f 	rsbseq	r7, r2, pc, asr r5
    77f0:	8607d508 	strhi	sp, [r7], -r8, lsl #10
    77f4:	3c000000 	stccc	0, cr0, [r0], {-0}
    77f8:	000a1014 	andeq	r1, sl, r4, lsl r0
    77fc:	11d80800 	bicsne	r0, r8, r0, lsl #16
    7800:	000008aa 	andeq	r0, r0, sl, lsr #17
    7804:	01561440 	cmpeq	r6, r0, asr #8
    7808:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    780c:	0008ba11 	andeq	fp, r8, r1, lsl sl
    7810:	5f164300 	svcpl	0x00164300
    7814:	0800626c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp, lr}
    7818:	055911dc 	ldrbeq	r1, [r9, #-476]	; 0xfffffe24
    781c:	14440000 	strbne	r0, [r4], #-0
    7820:	00000b95 	muleq	r0, r5, fp
    7824:	8607df08 	strhi	sp, [r7], -r8, lsl #30
    7828:	4c000000 	stcmi	0, cr0, [r0], {-0}
    782c:	00062d14 	andeq	r2, r6, r4, lsl sp
    7830:	0ae00800 	beq	ff809838 <__shm_end__+0xbf809838>
    7834:	00000313 	andeq	r0, r0, r3, lsl r3
    7838:	2b381450 	blcs	e0c980 <__core1_unwind_stub-0x1f3680>
    783c:	e3080000 	movw	r0, #32768	; 0x8000
    7840:	0006e812 	andeq	lr, r6, r2, lsl r8
    7844:	ab145400 	blge	51c84c <__core1_unwind_stub-0xae37b4>
    7848:	08000001 	stmdaeq	r0, {r0}
    784c:	03a50ce7 			; <UNDEFINED> instruction: 0x03a50ce7
    7850:	14580000 	ldrbne	r0, [r8], #-0
    7854:	00000a2c 	andeq	r0, r0, ip, lsr #20
    7858:	810ee908 	tsthi	lr, r8, lsl #18
    785c:	5c000003 	stcpl	0, cr0, [r0], {3}
    7860:	00069a14 	andeq	r9, r6, r4, lsl sl
    7864:	09ea0800 	stmibeq	sl!, {fp}^
    7868:	00000086 	andeq	r0, r0, r6, lsl #1
    786c:	861a0064 	ldrhi	r0, [sl], -r4, rrx
    7870:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    7874:	1b000006 	blne	7894 <__core1_unwind_stub-0xff876c>
    7878:	000006e8 	andeq	r0, r0, r8, ror #13
    787c:	0002ba1b 	andeq	fp, r2, fp, lsl sl
    7880:	083c1b00 	ldmdaeq	ip!, {r8, r9, fp, ip}
    7884:	861b0000 	ldrhi	r0, [fp], -r0
    7888:	00000000 	andeq	r0, r0, r0
    788c:	06f3040e 	ldrbteq	r0, [r3], lr, lsl #8
    7890:	e8060000 	stmda	r6, {}	; <UNPREDICTABLE>
    7894:	1c000006 	stcne	0, cr0, [r0], {6}
    7898:	0000044c 	andeq	r0, r0, ip, asr #8
    789c:	65080428 	strvs	r0, [r8, #-1064]	; 0xfffffbd8
    78a0:	083c0802 	ldmdaeq	ip!, {r1, fp}
    78a4:	980c0000 	stmdals	ip, {}	; <UNPREDICTABLE>
    78a8:	08000009 	stmdaeq	r0, {r0, r3}
    78ac:	86070267 	strhi	r0, [r7], -r7, ror #4
    78b0:	00000000 	andeq	r0, r0, r0
    78b4:	0005280c 	andeq	r2, r5, ip, lsl #16
    78b8:	026c0800 	rsbeq	r0, ip, #0, 16
    78bc:	0009160b 	andeq	r1, r9, fp, lsl #12
    78c0:	8d0c0400 	cfstrshi	mvf0, [ip, #-0]
    78c4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    78c8:	1614026c 	ldrne	r0, [r4], -ip, ror #4
    78cc:	08000009 	stmdaeq	r0, {r0, r3}
    78d0:	000a160c 	andeq	r1, sl, ip, lsl #12
    78d4:	026c0800 	rsbeq	r0, ip, #0, 16
    78d8:	0009161e 	andeq	r1, r9, lr, lsl r6
    78dc:	0e0c0c00 	cdpeq	12, 0, cr0, cr12, cr0, {0}
    78e0:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    78e4:	8608026e 	strhi	r0, [r8], -lr, ror #4
    78e8:	10000000 	andne	r0, r0, r0
    78ec:	0008000c 	andeq	r0, r8, ip
    78f0:	026f0800 	rsbeq	r0, pc, #0, 16
    78f4:	000b1608 	andeq	r1, fp, r8, lsl #12
    78f8:	330c1400 	movwcc	r1, #50176	; 0xc400
    78fc:	08000004 	stmdaeq	r0, {r2}
    7900:	86070272 			; <UNDEFINED> instruction: 0x86070272
    7904:	30000000 	andcc	r0, r0, r0
    7908:	000e500c 	andeq	r5, lr, ip
    790c:	02730800 	rsbseq	r0, r3, #0, 16
    7910:	000b2b16 	andeq	r2, fp, r6, lsl fp
    7914:	8f0c3400 	svchi	0x000c3400
    7918:	08000006 	stmdaeq	r0, {r1, r2}
    791c:	86070275 			; <UNDEFINED> instruction: 0x86070275
    7920:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    7924:	0007830c 	andeq	r8, r7, ip, lsl #6
    7928:	02770800 	rsbseq	r0, r7, #0, 16
    792c:	000b3c0a 	andeq	r3, fp, sl, lsl #24
    7930:	690c3c00 	stmdbvs	ip, {sl, fp, ip, sp}
    7934:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    7938:	0b13027a 	bleq	4c8328 <__core1_unwind_stub-0xb37cd8>
    793c:	40000004 	andmi	r0, r0, r4
    7940:	0002f10c 	andeq	pc, r2, ip, lsl #2
    7944:	027b0800 	rsbseq	r0, fp, #0, 16
    7948:	00008607 	andeq	r8, r0, r7, lsl #12
    794c:	750c4400 	strvc	r4, [ip, #-1024]	; 0xfffffc00
    7950:	08000006 	stmdaeq	r0, {r1, r2}
    7954:	0b13027c 	bleq	4c834c <__core1_unwind_stub-0xb37cb4>
    7958:	48000004 	stmdami	r0, {r2}
    795c:	0008af0c 	andeq	sl, r8, ip, lsl #30
    7960:	027d0800 	rsbseq	r0, sp, #0, 16
    7964:	000b4214 	andeq	r4, fp, r4, lsl r2
    7968:	100c4c00 	andne	r4, ip, r0, lsl #24
    796c:	08000001 	stmdaeq	r0, {r0}
    7970:	86070280 	strhi	r0, [r7], -r0, lsl #5
    7974:	50000000 	andpl	r0, r0, r0
    7978:	0006350c 	andeq	r3, r6, ip, lsl #10
    797c:	02810800 	addeq	r0, r1, #0, 16
    7980:	00083c09 	andeq	r3, r8, r9, lsl #24
    7984:	0b0c5400 	bleq	31c98c <__core1_unwind_stub-0xce3674>
    7988:	0800000a 	stmdaeq	r0, {r1, r3}
    798c:	f10702a4 			; <UNDEFINED> instruction: 0xf10702a4
    7990:	5800000a 	stmdapl	r0, {r1, r3}
    7994:	000a5a1d 	andeq	r5, sl, sp, lsl sl
    7998:	02a80800 	adceq	r0, r8, #0, 16
    799c:	00053c13 	andeq	r3, r5, r3, lsl ip
    79a0:	1d014800 	stcne	8, cr4, [r1, #-0]
    79a4:	0000078d 	andeq	r0, r0, sp, lsl #15
    79a8:	1202a908 	andne	sl, r2, #8, 18	; 0x20000
    79ac:	000004f9 	strdeq	r0, [r0], -r9
    79b0:	231d014c 	tstcs	sp, #76, 2
    79b4:	08000006 	stmdaeq	r0, {r1, r2}
    79b8:	530c02ad 	movwpl	r0, #49837	; 0xc2ad
    79bc:	dc00000b 	stcle	0, cr0, [r0], {11}
    79c0:	083a1d02 	ldmdaeq	sl!, {r1, r8, sl, fp, ip}
    79c4:	b2080000 	andlt	r0, r8, #0
    79c8:	08d71002 	ldmeq	r7, {r1, ip}^
    79cc:	02e00000 	rsceq	r0, r0, #0
    79d0:	0000131d 	andeq	r1, r0, sp, lsl r3
    79d4:	02b40800 	adcseq	r0, r4, #0, 16
    79d8:	000b5f0a 	andeq	r5, fp, sl, lsl #30
    79dc:	0002ec00 	andeq	lr, r2, r0, lsl #24
    79e0:	02cf040e 	sbceq	r0, pc, #234881024	; 0xe000000
    79e4:	040e0000 	streq	r0, [lr], #-0
    79e8:	000006ca 	andeq	r0, r0, sl, asr #13
    79ec:	0000861a 	andeq	r8, r0, sl, lsl r6
    79f0:	00086600 	andeq	r6, r8, r0, lsl #12
    79f4:	06e81b00 	strbteq	r1, [r8], r0, lsl #22
    79f8:	ba1b0000 	blt	6c7a00 <__core1_unwind_stub-0x938600>
    79fc:	1b000002 	blne	7a0c <__core1_unwind_stub-0xff85f4>
    7a00:	000002c9 	andeq	r0, r0, r9, asr #5
    7a04:	0000861b 	andeq	r8, r0, fp, lsl r6
    7a08:	040e0000 	streq	r0, [lr], #-0
    7a0c:	00000848 	andeq	r0, r0, r8, asr #16
    7a10:	00031f1a 	andeq	r1, r3, sl, lsl pc
    7a14:	00088a00 	andeq	r8, r8, r0, lsl #20
    7a18:	06e81b00 	strbteq	r1, [r8], r0, lsl #22
    7a1c:	ba1b0000 	blt	6c7a24 <__core1_unwind_stub-0x9385dc>
    7a20:	1b000002 	blne	7a30 <__core1_unwind_stub-0xff85d0>
    7a24:	0000031f 	andeq	r0, r0, pc, lsl r3
    7a28:	0000861b 	andeq	r8, r0, fp, lsl r6
    7a2c:	040e0000 	streq	r0, [lr], #-0
    7a30:	0000086c 	andeq	r0, r0, ip, ror #16
    7a34:	0000861a 	andeq	r8, r0, sl, lsl r6
    7a38:	0008a400 	andeq	sl, r8, r0, lsl #8
    7a3c:	06e81b00 	strbteq	r1, [r8], r0, lsl #22
    7a40:	ba1b0000 	blt	6c7a48 <__core1_unwind_stub-0x9385b8>
    7a44:	00000002 	andeq	r0, r0, r2
    7a48:	0890040e 	ldmeq	r0, {r1, r2, r3, sl}
    7a4c:	59110000 	ldmdbpl	r1, {}	; <UNPREDICTABLE>
    7a50:	ba000000 	blt	7a58 <__core1_unwind_stub-0xff85a8>
    7a54:	12000008 	andne	r0, r0, #8
    7a58:	0000008d 	andeq	r0, r0, sp, lsl #1
    7a5c:	59110002 	ldmdbpl	r1, {r1}
    7a60:	ca000000 	bgt	7a68 <__core1_unwind_stub-0xff8598>
    7a64:	12000008 	andne	r0, r0, #8
    7a68:	0000008d 	andeq	r0, r0, sp, lsl #1
    7a6c:	21090000 	mrscs	r0, (UNDEF: 9)
    7a70:	0800000c 	stmdaeq	r0, {r2, r3}
    7a74:	871a0124 	ldrhi	r0, [sl, -r4, lsr #2]
    7a78:	0a000005 	beq	7a94 <__core1_unwind_stub-0xff856c>
    7a7c:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    7a80:	0128080c 			; <UNDEFINED> instruction: 0x0128080c
    7a84:	00091008 	andeq	r1, r9, r8
    7a88:	0a3a0c00 	beq	e8aa90 <__core1_unwind_stub-0x175570>
    7a8c:	2a080000 	bcs	207a94 <__core1_unwind_stub-0xdf856c>
    7a90:	09101101 	ldmdbeq	r0, {r0, r8, ip}
    7a94:	0c000000 	stceq	0, cr0, [r0], {-0}
    7a98:	00000833 	andeq	r0, r0, r3, lsr r8
    7a9c:	07012b08 	streq	r2, [r1, -r8, lsl #22]
    7aa0:	00000086 	andeq	r0, r0, r6, lsl #1
    7aa4:	08b90c04 	ldmeq	r9!, {r2, sl, fp}
    7aa8:	2c080000 	stccs	0, cr0, [r8], {-0}
    7aac:	09160b01 	ldmdbeq	r6, {r0, r8, r9, fp}
    7ab0:	00080000 	andeq	r0, r8, r0
    7ab4:	08d7040e 	ldmeq	r7, {r1, r2, r3, sl}^
    7ab8:	040e0000 	streq	r0, [lr], #-0
    7abc:	000008ca 	andeq	r0, r0, sl, asr #17
    7ac0:	000b850a 	andeq	r8, fp, sl, lsl #10
    7ac4:	44080e00 	strmi	r0, [r8], #-3584	; 0xfffff200
    7ac8:	09550801 	ldmdbeq	r5, {r0, fp}^
    7acc:	c60c0000 	strgt	r0, [ip], -r0
    7ad0:	0800000a 	stmdaeq	r0, {r1, r3}
    7ad4:	55120145 	ldrpl	r0, [r2, #-325]	; 0xfffffebb
    7ad8:	00000009 	andeq	r0, r0, r9
    7adc:	0001bf0c 	andeq	fp, r1, ip, lsl #30
    7ae0:	01460800 	cmpeq	r6, r0, lsl #16
    7ae4:	00095512 	andeq	r5, r9, r2, lsl r5
    7ae8:	ab0c0600 	blge	3092f0 <__core1_unwind_stub-0xcf6d10>
    7aec:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    7af0:	60120147 	andsvs	r0, r2, r7, asr #2
    7af4:	0c000000 	stceq	0, cr0, [r0], {-0}
    7af8:	00601100 	rsbeq	r1, r0, r0, lsl #2
    7afc:	09650000 	stmdbeq	r5!, {}^	; <UNPREDICTABLE>
    7b00:	8d120000 	ldchi	0, cr0, [r2, #-0]
    7b04:	02000000 	andeq	r0, r0, #0
    7b08:	08d01e00 	ldmeq	r0, {r9, sl, fp, ip}^
    7b0c:	7a070285 	bvc	1c8528 <__core1_unwind_stub-0xe37ad8>
    7b10:	0c00000a 	stceq	0, cr0, [r0], {10}
    7b14:	000003d4 	ldrdeq	r0, [r0], -r4
    7b18:	18028708 	stmdane	r2, {r3, r8, r9, sl, pc}
    7b1c:	0000008d 	andeq	r0, r0, sp, lsl #1
    7b20:	0bba0c00 	bleq	fee8ab28 <__shm_end__+0xbee8ab28>
    7b24:	88080000 	stmdahi	r8, {}	; <UNPREDICTABLE>
    7b28:	083c1202 	ldmdaeq	ip!, {r1, r9, ip}
    7b2c:	0c040000 	stceq	0, cr0, [r4], {-0}
    7b30:	0000002d 	andeq	r0, r0, sp, lsr #32
    7b34:	10028908 	andne	r8, r2, r8, lsl #18
    7b38:	00000a7a 	andeq	r0, r0, sl, ror sl
    7b3c:	03160c08 	tsteq	r6, #8, 24	; 0x800
    7b40:	8a080000 	bhi	207b48 <__core1_unwind_stub-0xdf84b8>
    7b44:	04211702 	strteq	r1, [r1], #-1794	; 0xfffff8fe
    7b48:	0c240000 	stceq	0, cr0, [r4], #-0
    7b4c:	00000889 	andeq	r0, r0, r9, lsl #17
    7b50:	0f028b08 	svceq	0x00028b08
    7b54:	00000086 	andeq	r0, r0, r6, lsl #1
    7b58:	0a350c48 	beq	d4ac80 <__core1_unwind_stub-0x2b5380>
    7b5c:	8c080000 	stchi	0, cr0, [r8], {-0}
    7b60:	007f2c02 	rsbseq	r2, pc, r2, lsl #24
    7b64:	0c500000 	mraeq	r0, r0, acc0
    7b68:	00000c85 	andeq	r0, r0, r5, lsl #25
    7b6c:	1a028d08 	bne	aaf94 <__core1_unwind_stub-0xf5506c>
    7b70:	0000091c 	andeq	r0, r0, ip, lsl r9
    7b74:	0d630c58 	stcleq	12, cr0, [r3, #-352]!	; 0xfffffea0
    7b78:	8e080000 	cdphi	0, 0, cr0, cr8, cr0, {0}
    7b7c:	03811602 	orreq	r1, r1, #2097152	; 0x200000
    7b80:	0c680000 	stcleq	0, cr0, [r8], #-0
    7b84:	00000b00 	andeq	r0, r0, r0, lsl #22
    7b88:	16028f08 	strne	r8, [r2], -r8, lsl #30
    7b8c:	00000381 	andeq	r0, r0, r1, lsl #7
    7b90:	0a1e0c70 	beq	78ad58 <__core1_unwind_stub-0x8752a8>
    7b94:	90080000 	andls	r0, r8, r0
    7b98:	03811602 	orreq	r1, r1, #2097152	; 0x200000
    7b9c:	0c780000 	ldcleq	0, cr0, [r8], #-0
    7ba0:	00000165 	andeq	r0, r0, r5, ror #2
    7ba4:	10029108 	andne	r9, r2, r8, lsl #2
    7ba8:	00000a8a 	andeq	r0, r0, sl, lsl #21
    7bac:	06e90c80 	strbteq	r0, [r9], r0, lsl #25
    7bb0:	92080000 	andls	r0, r8, #0
    7bb4:	0a9a1002 	beq	fe68bbc4 <__shm_end__+0xbe68bbc4>
    7bb8:	0c880000 	stceq	0, cr0, [r8], {0}
    7bbc:	00000fb7 			; <UNDEFINED> instruction: 0x00000fb7
    7bc0:	0f029308 	svceq	0x00029308
    7bc4:	00000086 	andeq	r0, r0, r6, lsl #1
    7bc8:	02e30ca0 	rsceq	r0, r3, #160, 24	; 0xa000
    7bcc:	94080000 	strls	r0, [r8], #-0
    7bd0:	03811602 	orreq	r1, r1, #2097152	; 0x200000
    7bd4:	0ca40000 	stceq	0, cr0, [r4]
    7bd8:	00000bc7 	andeq	r0, r0, r7, asr #23
    7bdc:	16029508 	strne	r9, [r2], -r8, lsl #10
    7be0:	00000381 	andeq	r0, r0, r1, lsl #7
    7be4:	0f200cac 	svceq	0x00200cac
    7be8:	96080000 	strls	r0, [r8], -r0
    7bec:	03811602 	orreq	r1, r1, #2097152	; 0x200000
    7bf0:	0cb40000 	ldceq	0, cr0, [r4]
    7bf4:	000009f2 	strdeq	r0, [r0], -r2
    7bf8:	16029708 	strne	r9, [r2], -r8, lsl #14
    7bfc:	00000381 	andeq	r0, r0, r1, lsl #7
    7c00:	01450cbc 	strheq	r0, [r5, #-204]	; 0xffffff34
    7c04:	98080000 	stmdals	r8, {}	; <UNPREDICTABLE>
    7c08:	03811602 	orreq	r1, r1, #2097152	; 0x200000
    7c0c:	0cc40000 	stcleq	0, cr0, [r4], {0}
    7c10:	00000996 	muleq	r0, r6, r9
    7c14:	08029908 	stmdaeq	r2, {r3, r8, fp, ip, pc}
    7c18:	00000086 	andeq	r0, r0, r6, lsl #1
    7c1c:	cf1100cc 	svcgt	0x001100cc
    7c20:	8a000002 	bhi	7c30 <__core1_unwind_stub-0xff83d0>
    7c24:	1200000a 	andne	r0, r0, #10
    7c28:	0000008d 	andeq	r0, r0, sp, lsl #1
    7c2c:	cf110019 	svcgt	0x00110019
    7c30:	9a000002 	bls	7c40 <__core1_unwind_stub-0xff83c0>
    7c34:	1200000a 	andne	r0, r0, #10
    7c38:	0000008d 	andeq	r0, r0, sp, lsl #1
    7c3c:	cf110007 	svcgt	0x00110007
    7c40:	aa000002 	bge	7c50 <__core1_unwind_stub-0xff83b0>
    7c44:	1200000a 	andne	r0, r0, #10
    7c48:	0000008d 	andeq	r0, r0, sp, lsl #1
    7c4c:	f01e0017 			; <UNDEFINED> instruction: 0xf01e0017
    7c50:	07029e08 	streq	r9, [r2, -r8, lsl #28]
    7c54:	00000ad1 	ldrdeq	r0, [r0], -r1
    7c58:	000e270c 	andeq	r2, lr, ip, lsl #14
    7c5c:	02a10800 	adceq	r0, r1, #0, 16
    7c60:	000ad11b 	andeq	sp, sl, fp, lsl r1
    7c64:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
    7c68:	08000008 	stmdaeq	r0, {r3}
    7c6c:	e11802a2 	tst	r8, r2, lsr #5
    7c70:	7800000a 	stmdavc	r0, {r1, r3}
    7c74:	05811100 	streq	r1, [r1, #256]	; 0x100
    7c78:	0ae10000 	beq	ff847c80 <__shm_end__+0xbf847c80>
    7c7c:	8d120000 	ldchi	0, cr0, [r2, #-0]
    7c80:	1d000000 	stcne	0, cr0, [r0, #-0]
    7c84:	008d1100 	addeq	r1, sp, r0, lsl #2
    7c88:	0af10000 	beq	ffc47c90 <__shm_end__+0xbfc47c90>
    7c8c:	8d120000 	ldchi	0, cr0, [r2, #-0]
    7c90:	1d000000 	stcne	0, cr0, [r0, #-0]
    7c94:	08f01f00 	ldmeq	r0!, {r8, r9, sl, fp, ip}^
    7c98:	16030283 	strne	r0, [r3], -r3, lsl #5
    7c9c:	2000000b 	andcs	r0, r0, fp
    7ca0:	0000044c 	andeq	r0, r0, ip, asr #8
    7ca4:	0b029a08 	bleq	ae4cc <__core1_unwind_stub-0xf51b34>
    7ca8:	00000965 	andeq	r0, r0, r5, ror #18
    7cac:	00013820 	andeq	r3, r1, r0, lsr #16
    7cb0:	02a30800 	adceq	r0, r3, #0, 16
    7cb4:	000aaa0b 	andeq	sl, sl, fp, lsl #20
    7cb8:	cf110000 	svcgt	0x00110000
    7cbc:	26000002 	strcs	r0, [r0], -r2
    7cc0:	1200000b 	andne	r0, r0, #11
    7cc4:	0000008d 	andeq	r0, r0, sp, lsl #1
    7cc8:	00210018 	eoreq	r0, r1, r8, lsl r0
    7ccc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7cd0:	000b2604 	andeq	r2, fp, r4, lsl #12
    7cd4:	0b3c2200 	bleq	f104dc <__core1_unwind_stub-0xefb24>
    7cd8:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    7cdc:	00000006 	andeq	r0, r0, r6
    7ce0:	0b31040e 	bleq	c48d20 <__core1_unwind_stub-0x3b72e0>
    7ce4:	040e0000 	streq	r0, [lr], #-0
    7ce8:	0000040b 	andeq	r0, r0, fp, lsl #8
    7cec:	000b5322 	andeq	r5, fp, r2, lsr #6
    7cf0:	00861b00 	addeq	r1, r6, r0, lsl #22
    7cf4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7cf8:	000b5904 	andeq	r5, fp, r4, lsl #18
    7cfc:	48040e00 	stmdami	r4, {r9, sl, fp}
    7d00:	1100000b 	tstne	r0, fp
    7d04:	000008ca 	andeq	r0, r0, sl, asr #17
    7d08:	00000b6f 	andeq	r0, r0, pc, ror #22
    7d0c:	00008d12 	andeq	r8, r0, r2, lsl sp
    7d10:	23000200 	movwcs	r0, #512	; 0x200
    7d14:	0000045a 	andeq	r0, r0, sl, asr r4
    7d18:	17033308 	strne	r3, [r3, -r8, lsl #6]
    7d1c:	000006e8 	andeq	r0, r0, r8, ror #13
    7d20:	00045323 	andeq	r5, r4, r3, lsr #6
    7d24:	03340800 	teqeq	r4, #0, 16
    7d28:	0006ee1d 	andeq	lr, r6, sp, lsl lr
    7d2c:	0c230300 	stceq	3, cr0, [r3], #-0
    7d30:	420a0000 	andmi	r0, sl, #0
    7d34:	0008ca10 	andeq	ip, r8, r0, lsl sl
    7d38:	89040e00 	stmdbhi	r4, {r9, sl, fp}
    7d3c:	2400000b 	strcs	r0, [r0], #-11
    7d40:	00000842 	andeq	r0, r0, r2, asr #16
    7d44:	950e360b 	strls	r3, [lr, #-1547]	; 0xfffff9f5
    7d48:	2400000b 	strcs	r0, [r0], #-11
    7d4c:	00000848 	andeq	r0, r0, r8, asr #16
    7d50:	950e370b 	strls	r3, [lr, #-1803]	; 0xfffff8f5
    7d54:	1100000b 	tstne	r0, fp
    7d58:	00000067 	andeq	r0, r0, r7, rrx
    7d5c:	00000bc4 	andeq	r0, r0, r4, asr #23
    7d60:	00008d25 	andeq	r8, r0, r5, lsr #26
    7d64:	003fff00 	eorseq	pc, pc, r0, lsl #30
    7d68:	002c6326 	eoreq	r6, ip, r6, lsr #6
    7d6c:	11500100 	cmpne	r0, r0, lsl #2
    7d70:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    7d74:	03054000 	movweq	r4, #20480	; 0x5000
    7d78:	00000000 	andeq	r0, r0, r0
    7d7c:	54010c13 	strpl	r0, [r1], #-3091	; 0xfffff3ed
    7d80:	000c0909 	andeq	r0, ip, r9, lsl #18
    7d84:	0bb51400 	bleq	fed4cd8c <__shm_end__+0xbed4cd8c>
    7d88:	55010000 	strpl	r0, [r1, #-0]
    7d8c:	000c090e 	andeq	r0, ip, lr, lsl #18
    7d90:	fc140000 	ldc2	0, cr0, [r4], {-0}
    7d94:	01000002 	tsteq	r0, r2
    7d98:	00a50e56 	adceq	r0, r5, r6, asr lr
    7d9c:	16040000 	strne	r0, [r4], -r0
    7da0:	0066666f 	rsbeq	r6, r6, pc, ror #12
    7da4:	a50e5701 	strge	r5, [lr, #-1793]	; 0xfffff8ff
    7da8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7dac:	4d040e00 	stcmi	14, cr0, [r4, #-0]
    7db0:	03000000 	movweq	r0, #0
    7db4:	00002bac 	andeq	r2, r0, ip, lsr #23
    7db8:	d8035801 	stmdale	r3, {r0, fp, ip, lr}
    7dbc:	1100000b 	tstne	r0, fp
    7dc0:	0000004d 	andeq	r0, r0, sp, asr #32
    7dc4:	00000c2c 	andeq	r0, r0, ip, lsr #24
    7dc8:	00008d25 	andeq	r8, r0, r5, lsr #26
    7dcc:	00ffff00 	rscseq	pc, pc, r0, lsl #30
    7dd0:	002b6926 	eoreq	r6, fp, r6, lsr #18
    7dd4:	125a0100 	subsne	r0, sl, #0, 2
    7dd8:	00000c1b 	andeq	r0, r0, fp, lsl ip
    7ddc:	03054000 	movweq	r4, #20480	; 0x5000
    7de0:	0100c000 	mrseq	ip, (UNDEF: 0)
    7de4:	002e6127 	eoreq	r6, lr, r7, lsr #2
    7de8:	135b0100 	cmpne	fp, #0, 2
    7dec:	00000c0f 	andeq	r0, r0, pc, lsl #24
    7df0:	56280305 	strtpl	r0, [r8], -r5, lsl #6
    7df4:	51280100 			; <UNDEFINED> instruction: 0x51280100
    7df8:	0100002e 	tsteq	r0, lr, lsr #32
    7dfc:	6514015d 	ldrvs	r0, [r4, #-349]	; 0xfffffea3
    7e00:	0500000c 	streq	r0, [r0, #-12]
    7e04:	00000003 	andeq	r0, r0, r3
    7e08:	73040e00 	movwvc	r0, #19968	; 0x4e00
    7e0c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7e10:	00002b81 	andeq	r2, r0, r1, lsl #23
    7e14:	14015e01 	strne	r5, [r1], #-3585	; 0xfffff1ff
    7e18:	00000c65 	andeq	r0, r0, r5, ror #24
    7e1c:	00000305 	andeq	r0, r0, r5, lsl #6
    7e20:	2f280000 	svccs	0x00280000
    7e24:	0100002b 	tsteq	r0, fp, lsr #32
    7e28:	6514015f 	ldrvs	r0, [r4, #-351]	; 0xfffffea1
    7e2c:	0500000c 	streq	r0, [r0, #-12]
    7e30:	00000003 	andeq	r0, r0, r3
    7e34:	2c932800 	ldccs	8, cr2, [r3], {0}
    7e38:	60010000 	andvs	r0, r1, r0
    7e3c:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    7e40:	03050000 	movweq	r0, #20480	; 0x5000
    7e44:	00000000 	andeq	r0, r0, r0
    7e48:	002c8028 	eoreq	r8, ip, r8, lsr #32
    7e4c:	01610100 	cmneq	r1, r0, lsl #2
    7e50:	000c6514 	andeq	r6, ip, r4, lsl r5
    7e54:	00030500 	andeq	r0, r3, r0, lsl #10
    7e58:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7e5c:	00002eb8 			; <UNDEFINED> instruction: 0x00002eb8
    7e60:	14016201 	strne	r6, [r1], #-513	; 0xfffffdff
    7e64:	00000c65 	andeq	r0, r0, r5, ror #24
    7e68:	00000305 	andeq	r0, r0, r5, lsl #6
    7e6c:	fb280000 	blx	a07e76 <__core1_unwind_stub-0x5f818a>
    7e70:	0100002c 	tsteq	r0, ip, lsr #32
    7e74:	65140163 	ldrvs	r0, [r4, #-355]	; 0xfffffe9d
    7e78:	0500000c 	streq	r0, [r0, #-12]
    7e7c:	00000003 	andeq	r0, r0, r3
    7e80:	2d932800 	ldccs	8, cr2, [r3]
    7e84:	64010000 	strvs	r0, [r1], #-0
    7e88:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    7e8c:	03050000 	movweq	r0, #20480	; 0x5000
    7e90:	00000000 	andeq	r0, r0, r0
    7e94:	002d1f28 	eoreq	r1, sp, r8, lsr #30
    7e98:	01650100 	cmneq	r5, r0, lsl #2
    7e9c:	000c6514 	andeq	r6, ip, r4, lsl r5
    7ea0:	00030500 	andeq	r0, r3, r0, lsl #10
    7ea4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7ea8:	00002c33 	andeq	r2, r0, r3, lsr ip
    7eac:	14016601 	strne	r6, [r1], #-1537	; 0xfffff9ff
    7eb0:	00000c65 	andeq	r0, r0, r5, ror #24
    7eb4:	00000305 	andeq	r0, r0, r5, lsl #6
    7eb8:	b7280000 	strlt	r0, [r8, -r0]!
    7ebc:	0100002b 	tsteq	r0, fp, lsr #32
    7ec0:	65140167 	ldrvs	r0, [r4, #-359]	; 0xfffffe99
    7ec4:	0500000c 	streq	r0, [r0, #-12]
    7ec8:	00000003 	andeq	r0, r0, r3
    7ecc:	2e9f2800 	cdpcs	8, 9, cr2, cr15, cr0, {0}
    7ed0:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    7ed4:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    7ed8:	03050000 	movweq	r0, #20480	; 0x5000
    7edc:	00000000 	andeq	r0, r0, r0
    7ee0:	002e3128 	eoreq	r3, lr, r8, lsr #2
    7ee4:	01690100 	cmneq	r9, r0, lsl #2
    7ee8:	000c6514 	andeq	r6, ip, r4, lsl r5
    7eec:	00030500 	andeq	r0, r3, r0, lsl #10
    7ef0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7ef4:	00002cda 	ldrdeq	r2, [r0], -sl
    7ef8:	14016a01 	strne	r6, [r1], #-2561	; 0xfffff5ff
    7efc:	00000c65 	andeq	r0, r0, r5, ror #24
    7f00:	00000305 	andeq	r0, r0, r5, lsl #6
    7f04:	1f280000 	svcne	0x00280000
    7f08:	0100002e 	tsteq	r0, lr, lsr #32
    7f0c:	6514016b 	ldrvs	r0, [r4, #-363]	; 0xfffffe95
    7f10:	0500000c 	streq	r0, [r0, #-12]
    7f14:	00000003 	andeq	r0, r0, r3
    7f18:	2d482900 	vstrcs.16	s5, [r8, #-0]	; <UNPREDICTABLE>
    7f1c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    7f20:	0d880d01 	stceq	13, cr0, [r8, #4]
    7f24:	03050000 	movweq	r0, #20480	; 0x5000
    7f28:	00000000 	andeq	r0, r0, r0
    7f2c:	34020102 	strcc	r0, [r2], #-258	; 0xfffffefe
    7f30:	2a000018 	bcs	7f98 <__core1_unwind_stub-0xff8068>
    7f34:	00002b3e 	andeq	r2, r0, lr, lsr fp
    7f38:	1101a301 	tstne	r1, r1, lsl #6
    7f3c:	000000bd 	strheq	r0, [r0], -sp
    7f40:	00000000 	andeq	r0, r0, r0
    7f44:	000000ac 	andeq	r0, r0, ip, lsr #1
    7f48:	bf2b9c01 	svclt	0x002b9c01
    7f4c:	0100002d 	tsteq	r0, sp, lsr #32
    7f50:	bd110186 	ldflts	f0, [r1, #-536]	; 0xfffffde8
    7f54:	00000000 	andeq	r0, r0, r0
    7f58:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    7f5c:	01000001 	tsteq	r0, r1
    7f60:	000dd09c 	muleq	sp, ip, r0
    7f64:	00732c00 	rsbseq	r2, r3, r0, lsl #24
    7f68:	15018801 	strne	r8, [r1, #-2049]	; 0xfffff7ff
    7f6c:	000000bd 	strheq	r0, [r0], -sp
    7f70:	00749102 	rsbseq	r9, r4, r2, lsl #2
    7f74:	002c1a2b 	eoreq	r1, ip, fp, lsr #20
    7f78:	01780100 	cmneq	r8, r0, lsl #2
    7f7c:	0000bd11 	andeq	fp, r0, r1, lsl sp
    7f80:	00000000 	andeq	r0, r0, r0
    7f84:	00006c00 	andeq	r6, r0, r0, lsl #24
    7f88:	fa9c0100 	blx	fe708390 <__shm_end__+0xbe708390>
    7f8c:	2c00000d 	stccs	0, cr0, [r0], {13}
    7f90:	7b010073 	blvc	48164 <__core1_unwind_stub-0xfb7e9c>
    7f94:	00bd1501 	adcseq	r1, sp, r1, lsl #10
    7f98:	91020000 	mrsls	r0, (UNDEF: 2)
    7f9c:	452a0074 	strmi	r0, [sl, #-116]!	; 0xffffff8c
    7fa0:	0100002c 	tsteq	r0, ip, lsr #32
    7fa4:	bd11016f 	ldflts	f0, [r1, #-444]	; 0xfffffe44
    7fa8:	00000000 	andeq	r0, r0, r0
    7fac:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    7fb0:	01000000 	mrseq	r0, (UNDEF: 0)
    7fb4:	2c082d9c 	stccs	13, cr2, [r8], {156}	; 0x9c
    7fb8:	4f010000 	svcmi	0x00010000
    7fbc:	0d880601 	stceq	6, cr0, [r8, #4]
    7fc0:	00000000 	andeq	r0, r0, r0
    7fc4:	00440000 	subeq	r0, r4, r0
    7fc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7fcc:	00000e3d 	andeq	r0, r0, sp, lsr lr
    7fd0:	002b7829 	eoreq	r7, fp, r9, lsr #16
    7fd4:	01520100 	cmpeq	r2, r0, lsl #2
    7fd8:	000c6518 	andeq	r6, ip, r8, lsl r5
    7fdc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7fe0:	2bd82e00 	blcs	ff6137e8 <__shm_end__+0xbf6137e8>
    7fe4:	47010000 	strmi	r0, [r1, -r0]
    7fe8:	00000601 	andeq	r0, r0, r1, lsl #12
    7fec:	006c0000 	rsbeq	r0, ip, r0
    7ff0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7ff4:	00000e63 	andeq	r0, r0, r3, ror #28
    7ff8:	0100732c 	tsteq	r0, ip, lsr #6
    7ffc:	670e0149 	strvs	r0, [lr, -r9, asr #2]
    8000:	02000000 	andeq	r0, r0, #0
    8004:	2e007491 	mcrcs	4, 0, r7, cr0, cr1, {4}
    8008:	00002cb4 			; <UNDEFINED> instruction: 0x00002cb4
    800c:	06013e01 	streq	r3, [r1], -r1, lsl #28
    8010:	00000000 	andeq	r0, r0, r0
    8014:	000000ec 	andeq	r0, r0, ip, ror #1
    8018:	0ec99c01 	cdpeq	12, 12, cr9, cr9, cr1, {0}
    801c:	622f0000 	eorvs	r0, pc, #0
    8020:	0100002b 	tsteq	r0, fp, lsr #32
    8024:	c921013e 	stmdbgt	r1!, {r1, r2, r3, r4, r5, r8}
    8028:	0200000e 	andeq	r0, r0, #14
    802c:	292f6c91 	stmdbcs	pc!, {r0, r4, r7, sl, fp, sp, lr}	; <UNPREDICTABLE>
    8030:	0100002c 	tsteq	r0, ip, lsr #32
    8034:	c92f013e 	stmdbgt	pc!, {r1, r2, r3, r4, r5, r8}	; <UNPREDICTABLE>
    8038:	0200000e 	andeq	r0, r0, #14
    803c:	882f6891 	stmdahi	pc!, {r0, r4, r7, fp, sp, lr}	; <UNPREDICTABLE>
    8040:	0100002e 	tsteq	r0, lr, lsr #32
    8044:	c940013e 	stmdbgt	r0, {r1, r2, r3, r4, r5, r8}^
    8048:	0200000e 	andeq	r0, r0, #14
    804c:	142f6491 	strtne	r6, [pc], #-1169	; 8054 <__core1_unwind_stub-0xff7fac>
    8050:	0100002d 	tsteq	r0, sp, lsr #32
    8054:	c951013e 	ldmdbgt	r1, {r1, r2, r3, r4, r5, r8}^
    8058:	0200000e 	andeq	r0, r0, #14
    805c:	732c6091 			; <UNDEFINED> instruction: 0x732c6091
    8060:	01400100 	mrseq	r0, (UNDEF: 80)
    8064:	0000670e 	andeq	r6, r0, lr, lsl #14
    8068:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    806c:	88040e00 	stmdahi	r4, {r9, sl, fp}
    8070:	3000000d 	andcc	r0, r0, sp
    8074:	00002cec 	andeq	r2, r0, ip, ror #25
    8078:	18013701 	stmdane	r1, {r0, r8, r9, sl, ip, sp}
    807c:	00000067 	andeq	r0, r0, r7, rrx
    8080:	00000000 	andeq	r0, r0, r0
    8084:	00000028 	andeq	r0, r0, r8, lsr #32
    8088:	0ef99c01 	cdpeq	12, 15, cr9, cr9, cr1, {0}
    808c:	732c0000 			; <UNDEFINED> instruction: 0x732c0000
    8090:	01390100 	teqeq	r9, r0, lsl #2
    8094:	0000670e 	andeq	r6, r0, lr, lsl #14
    8098:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    809c:	2e6c2b00 	vmulcs.f64	d18, d12, d0
    80a0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    80a4:	00bd1101 	adcseq	r1, sp, r1, lsl #2
    80a8:	00000000 	andeq	r0, r0, r0
    80ac:	00840000 	addeq	r0, r4, r0
    80b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    80b4:	00000f5d 	andeq	r0, r0, sp, asr pc
    80b8:	0019c82f 	andseq	ip, r9, pc, lsr #16
    80bc:	01190100 	tsteq	r9, r0, lsl #2
    80c0:	000d882c 	andeq	r8, sp, ip, lsr #16
    80c4:	6f910200 	svcvs	0x00910200
    80c8:	00000031 	andeq	r0, r0, r1, lsr r0
    80cc:	00002800 	andeq	r2, r0, r0, lsl #16
    80d0:	000f4200 	andeq	r4, pc, r0, lsl #4
    80d4:	2d1a2900 	vldrcs.16	s4, [sl, #-0]	; <UNPREDICTABLE>
    80d8:	20010000 	andcs	r0, r1, r0
    80dc:	00671201 	rsbeq	r1, r7, r1, lsl #4
    80e0:	91020000 	mrsls	r0, (UNDEF: 2)
    80e4:	00320070 	eorseq	r0, r2, r0, ror r0
    80e8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    80ec:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    80f0:	00002d1a 	andeq	r2, r0, sl, lsl sp
    80f4:	12012a01 	andne	r2, r1, #4096	; 0x1000
    80f8:	00000067 	andeq	r0, r0, r7, rrx
    80fc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    8100:	2dec3300 	stclcs	3, cr3, [ip]
    8104:	07010000 	streq	r0, [r1, -r0]
    8108:	00001401 	andeq	r1, r0, r1, lsl #8
    810c:	00900000 	addseq	r0, r0, r0
    8110:	9c010000 	stcls	0, cr0, [r1], {-0}
    8114:	00000f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    8118:	0019c82f 	andseq	ip, r9, pc, lsr #16
    811c:	01070100 	mrseq	r0, (UNDEF: 23)
    8120:	000d882c 	andeq	r8, sp, ip, lsr #16
    8124:	6f910200 	svcvs	0x00910200
    8128:	002cf529 	eoreq	pc, ip, r9, lsr #10
    812c:	01090100 	mrseq	r0, (UNDEF: 25)
    8130:	0000670e 	andeq	r6, r0, lr, lsl #14
    8134:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8138:	2dff3400 	cfldrdcs	mvd3, [pc]	; 8140 <__core1_unwind_stub-0xff7ec0>
    813c:	ea010000 	b	48144 <__core1_unwind_stub-0xfb7ebc>
    8140:	00000006 	andeq	r0, r0, r6
    8144:	0000dc00 	andeq	sp, r0, r0, lsl #24
    8148:	299c0100 	ldmibcs	ip, {r8}
    814c:	27000010 	smladcs	r0, r0, r0, r0
    8150:	00002d87 	andeq	r2, r0, r7, lsl #27
    8154:	670eec01 	strvs	lr, [lr, -r1, lsl #24]
    8158:	02000000 	andeq	r0, r0, #0
    815c:	6b276891 	blvs	9e23a8 <__core1_unwind_stub-0x61dc58>
    8160:	0100002d 	tsteq	r0, sp, lsr #32
    8164:	006716ec 	rsbeq	r1, r7, ip, ror #13
    8168:	91020000 	mrsls	r0, (UNDEF: 2)
    816c:	2d8e2760 	stccs	7, cr2, [lr, #384]	; 0x180
    8170:	ec010000 	stc	0, cr0, [r1], {-0}
    8174:	0000671c 	andeq	r6, r0, ip, lsl r7
    8178:	5c910200 	lfmpl	f0, 4, [r1], {0}
    817c:	74657335 	strbtvc	r7, [r5], #-821	; 0xfffffccb
    8180:	22ec0100 	rsccs	r0, ip, #0, 2
    8184:	00000067 	andeq	r0, r0, r7, rrx
    8188:	35749102 	ldrbcc	r9, [r4, #-258]!	; 0xfffffefe
    818c:	00796177 	rsbseq	r6, r9, r7, ror r1
    8190:	6727ec01 	strvs	lr, [r7, -r1, lsl #24]!
    8194:	02000000 	andeq	r0, r0, #0
    8198:	a1277091 			; <UNDEFINED> instruction: 0xa1277091
    819c:	0100002b 	tsteq	r0, fp, lsr #32
    81a0:	00672cec 	rsbeq	r2, r7, ip, ror #25
    81a4:	91020000 	mrsls	r0, (UNDEF: 2)
    81a8:	2eb12764 	cdpcs	7, 11, cr2, cr1, cr4, {3}
    81ac:	ef010000 	svc	0x00010000
    81b0:	0000670e 	andeq	r6, r0, lr, lsl #14
    81b4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    81b8:	00055036 	andeq	r5, r5, r6, lsr r0
    81bc:	77733500 	ldrbvc	r3, [r3, -r0, lsl #10]!
    81c0:	16fd0100 	ldrbtne	r0, [sp], r0, lsl #2
    81c4:	00000067 	andeq	r0, r0, r7, rrx
    81c8:	00589102 	subseq	r9, r8, r2, lsl #2
    81cc:	2bee3400 	blcs	ffb951d4 <__shm_end__+0xbfb951d4>
    81d0:	e2010000 	and	r0, r1, #0
    81d4:	00000006 	andeq	r0, r0, r6
    81d8:	00003000 	andeq	r3, r0, r0
    81dc:	4f9c0100 	svcmi	0x009c0100
    81e0:	27000010 	smladcs	r0, r0, r0, r0
    81e4:	00002d1a 	andeq	r2, r0, sl, lsl sp
    81e8:	670ee401 	strvs	lr, [lr, -r1, lsl #8]
    81ec:	02000000 	andeq	r0, r0, #0
    81f0:	37007491 			; <UNDEFINED> instruction: 0x37007491
    81f4:	00002d57 	andeq	r2, r0, r7, asr sp
    81f8:	bd11d201 	lfmlt	f5, 1, [r1, #-4]
    81fc:	a0000000 	andge	r0, r0, r0
    8200:	3c01004f 	stccc	0, cr0, [r1], {79}	; 0x4f
    8204:	01000000 	mrseq	r0, (UNDEF: 0)
    8208:	0010869c 	mulseq	r0, ip, r6
    820c:	74743500 	ldrbtvc	r3, [r4], #-1280	; 0xfffffb00
    8210:	d7010062 	strle	r0, [r1, -r2, rrx]
    8214:	0010860f 	andseq	r8, r0, pc, lsl #12
    8218:	70910200 	addsvc	r0, r1, r0, lsl #4
    821c:	01007335 	tsteq	r0, r5, lsr r3
    8220:	008609d8 	ldrdeq	r0, [r6], r8
    8224:	91020000 	mrsls	r0, (UNDEF: 2)
    8228:	040e0074 	streq	r0, [lr], #-116	; 0xffffff8c
    822c:	00000067 	andeq	r0, r0, r7, rrx
    8230:	002dd838 	eoreq	sp, sp, r8, lsr r8
    8234:	11bb0100 			; <UNDEFINED> instruction: 0x11bb0100
    8238:	000000bd 	strheq	r0, [r0], -sp
    823c:	00000000 	andeq	r0, r0, r0
    8240:	0000005c 	andeq	r0, r0, ip, asr r0
    8244:	10c29c01 	sbcne	r9, r2, r1, lsl #24
    8248:	68240000 	stmdavs	r4!, {}	; <UNPREDICTABLE>
    824c:	01000029 	tsteq	r0, r9, lsr #32
    8250:	02cf0ebd 	sbceq	r0, pc, #3024	; 0xbd0
    8254:	f5270000 			; <UNDEFINED> instruction: 0xf5270000
    8258:	0100002c 	tsteq	r0, ip, lsr #32
    825c:	00670fc7 	rsbeq	r0, r7, r7, asr #31
    8260:	91020000 	mrsls	r0, (UNDEF: 2)
    8264:	a5390074 	ldrge	r0, [r9, #-116]!	; 0xffffff8c
    8268:	0100002d 	tsteq	r0, sp, lsr #32
    826c:	00bd1870 	adcseq	r1, sp, r0, ror r8
    8270:	4e880000 	cdpmi	0, 8, cr0, cr8, cr0, {0}
    8274:	01180100 	tsteq	r8, r0, lsl #2
    8278:	9c010000 	stcls	0, cr0, [r1], {-0}
    827c:	00001138 	andeq	r1, r0, r8, lsr r1
    8280:	002e493a 	eoreq	r4, lr, sl, lsr r9
    8284:	3d700100 	ldfcce	f0, [r0, #-0]
    8288:	00001138 	andeq	r1, r0, r8, lsr r1
    828c:	7f949103 	svcvc	0x00949103
    8290:	01007335 	tsteq	r0, r5, lsr r3
    8294:	00bd1572 	adcseq	r1, sp, r2, ror r5
    8298:	91020000 	mrsls	r0, (UNDEF: 2)
    829c:	1e8a2774 	mcrne	7, 4, r2, cr10, cr4, {3}
    82a0:	77010000 	strvc	r0, [r1, -r0]
    82a4:	00113e1a 	andseq	r3, r1, sl, lsl lr
    82a8:	9c910300 	ldcls	3, cr0, [r1], {0}
    82ac:	2dcb277f 	stclcs	7, cr2, [fp, #508]	; 0x1fc
    82b0:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    82b4:	0000a50c 	andeq	sl, r0, ip, lsl #10
    82b8:	70910200 	addsvc	r0, r1, r0, lsl #4
    82bc:	002e4427 	eoreq	r4, lr, r7, lsr #8
    82c0:	0ca90100 	stfeqs	f0, [r9]
    82c4:	000000a5 	andeq	r0, r0, r5, lsr #1
    82c8:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    82cc:	00002493 	muleq	r0, r3, r4
    82d0:	860fac01 	strhi	sl, [pc], -r1, lsl #24
    82d4:	03000010 	movweq	r0, #16
    82d8:	007f9891 			; <UNDEFINED> instruction: 0x007f9891
    82dc:	1086040e 	addne	r0, r6, lr, lsl #8
    82e0:	bc110000 	ldclt	0, cr0, [r1], {-0}
    82e4:	4e000002 	cdpmi	0, 0, cr0, cr0, cr2, {0}
    82e8:	12000011 	andne	r0, r0, #17
    82ec:	0000008d 	andeq	r0, r0, sp, lsl #1
    82f0:	ca3b0003 	bgt	ec8304 <__core1_unwind_stub-0x137cfc>
    82f4:	0100002b 	tsteq	r0, fp, lsr #32
    82f8:	02ba0e5e 	adcseq	r0, sl, #1504	; 0x5e0
    82fc:	4db80000 	ldcmi	0, cr0, [r8]
    8300:	00d00100 	sbcseq	r0, r0, r0, lsl #2
    8304:	9c010000 	stcls	0, cr0, [r1], {-0}
    8308:	000011c3 	andeq	r1, r0, r3, asr #3
    830c:	0002fc3a 	andeq	pc, r2, sl, lsr ip	; <UNPREDICTABLE>
    8310:	2f5e0100 	svccs	0x005e0100
    8314:	00000094 	muleq	r0, r4, r0
    8318:	3a649102 	bcc	192c728 <__bss_end__+0x910728>
    831c:	00002c5a 	andeq	r2, r0, sl, asr ip
    8320:	ba3b5e01 	blt	edfb2c <__core1_unwind_stub-0x1204d4>
    8324:	02000002 	andeq	r0, r0, #2
    8328:	67276091 			; <UNDEFINED> instruction: 0x67276091
    832c:	0100002e 	tsteq	r0, lr, lsr #32
    8330:	11c31160 	bicne	r1, r3, r0, ror #2
    8334:	91020000 	mrsls	r0, (UNDEF: 2)
    8338:	21dd2774 	bicscs	r2, sp, r4, ror r7
    833c:	64010000 	strvs	r0, [r1], #-0
    8340:	0000b112 	andeq	fp, r0, r2, lsl r1
    8344:	70910200 	addsvc	r0, r1, r0, lsl #4
    8348:	66666f35 	uqasxvs	r6, r6, r5
    834c:	0c650100 	stfeqe	f0, [r5], #-0
    8350:	000000a5 	andeq	r0, r0, r5, lsr #1
    8354:	356c9102 	strbcc	r9, [ip, #-258]!	; 0xfffffefe
    8358:	00727470 	rsbseq	r7, r2, r0, ror r4
    835c:	ba0b6901 	blt	2e2768 <__core1_unwind_stub-0xd1d898>
    8360:	02000002 	andeq	r0, r0, #2
    8364:	0e006891 	mcreq	8, 0, r6, cr0, cr1, {4}
    8368:	000c0f04 	andeq	r0, ip, r4, lsl #30
    836c:	2d703400 	cfldrdcs	mvd3, [r0, #-0]
    8370:	30010000 	andcc	r0, r1, r0
    8374:	004d2c06 	subeq	r2, sp, r6, lsl #24
    8378:	00008c01 	andeq	r8, r0, r1, lsl #24
    837c:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    8380:	27000012 	smladcs	r0, r2, r0, r0
    8384:	00002d0e 	andeq	r2, r0, lr, lsl #26
    8388:	670e3201 	strvs	r3, [lr, -r1, lsl #4]
    838c:	02000000 	andeq	r0, r0, #0
    8390:	82277491 	eorhi	r7, r7, #-1862270976	; 0x91000000
    8394:	0100002e 	tsteq	r0, lr, lsr #32
    8398:	00670e42 	rsbeq	r0, r7, r2, asr #28
    839c:	91020000 	mrsls	r0, (UNDEF: 2)
    83a0:	4d743270 	lfmmi	f3, 2, [r4, #-448]!	; 0xfffffe40
    83a4:	00380100 	eorseq	r0, r8, r0, lsl #2
    83a8:	26270000 	strtcs	r0, [r7], -r0
    83ac:	0100002b 	tsteq	r0, fp, lsr #32
    83b0:	0c651945 			; <UNDEFINED> instruction: 0x0c651945
    83b4:	91020000 	mrsls	r0, (UNDEF: 2)
    83b8:	6176356c 	cmnvs	r6, ip, ror #10
    83bc:	4601006c 	strmi	r0, [r1], -ip, rrx
    83c0:	00006712 	andeq	r6, r0, r2, lsl r7
    83c4:	68910200 	ldmvs	r1, {r9}
    83c8:	4b3c0000 	blmi	f083d0 <__core1_unwind_stub-0xf7c30>
    83cc:	0100002b 	tsteq	r0, fp, lsr #32
    83d0:	4cd8141f 	cfldrdmi	mvd1, [r8], {31}
    83d4:	00540100 	subseq	r0, r4, r0, lsl #2
    83d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    83dc:	0000124c 	andeq	r1, r0, ip, asr #4
    83e0:	002cf527 	eoreq	pc, ip, r7, lsr #10
    83e4:	0e220100 	sufeqs	f0, f2, f0
    83e8:	00000067 	andeq	r0, r0, r7, rrx
    83ec:	00749102 	rsbseq	r9, r4, r2, lsl #2
    83f0:	6273693d 	rsbsvs	r6, r3, #999424	; 0xf4000
    83f4:	141b0100 	ldrne	r0, [fp], #-256	; 0xffffff00
    83f8:	01004cbc 			; <UNDEFINED> instruction: 0x01004cbc
    83fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    8400:	643d9c01 	ldrtvs	r9, [sp], #-3073	; 0xfffff3ff
    8404:	01006273 	tsteq	r0, r3, ror r2
    8408:	4ca0141a 	cfstrsmi	mvf1, [r0], #104	; 0x68
    840c:	001c0100 	andseq	r0, ip, r0, lsl #2
    8410:	9c010000 	stcls	0, cr0, [r1], {-0}
    8414:	00002200 	andeq	r2, r0, r0, lsl #4
    8418:	9b000200 	blls	8c20 <__core1_unwind_stub-0xff73e0>
    841c:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    8420:	00358a01 	eorseq	r8, r5, r1, lsl #20
    8424:	004fdc00 	subeq	sp, pc, r0, lsl #24
    8428:	0050f001 	subseq	pc, r0, r1
    842c:	002eca01 	eoreq	ip, lr, r1, lsl #20
    8430:	002ef100 	eoreq	pc, lr, r0, lsl #2
    8434:	002b1a00 	eoreq	r1, fp, r0, lsl #20
    8438:	22800100 	addcs	r0, r0, #0, 2
    843c:	02000000 	andeq	r0, r0, #0
    8440:	0016af00 	andseq	sl, r6, r0, lsl #30
    8444:	fe010400 	cdp2	4, 0, cr0, cr1, cr0, {0}
    8448:	f0000035 			; <UNDEFINED> instruction: 0xf0000035
    844c:	f4010050 	vst4.16	{d0-d3}, [r1 :64], r0
    8450:	ca010050 	bgt	48598 <__core1_unwind_stub-0xfb7a68>
    8454:	f100002e 			; <UNDEFINED> instruction: 0xf100002e
    8458:	1a00002e 	bne	8518 <__core1_unwind_stub-0xff7ae8>
    845c:	0100002b 	tsteq	r0, fp, lsr #32
    8460:	00002280 	andeq	r2, r0, r0, lsl #5
    8464:	c3000200 	movwgt	r0, #512	; 0x200
    8468:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    846c:	00365501 	eorseq	r5, r6, r1, lsl #10
    8470:	0050f400 	subseq	pc, r0, r0, lsl #8
    8474:	00513001 	subseq	r3, r1, r1
    8478:	002f4801 	eoreq	r4, pc, r1, lsl #16
    847c:	002ef100 	eoreq	pc, lr, r0, lsl #2
    8480:	002b1a00 	eoreq	r1, fp, r0, lsl #20
    8484:	e5800100 	str	r0, [r0, #256]	; 0x100
    8488:	04000009 	streq	r0, [r0], #-9
    848c:	0016d700 	andseq	sp, r6, r0, lsl #14
    8490:	71010400 	tstvc	r1, r0, lsl #8
    8494:	0c00003b 	stceq	0, cr0, [r0], {59}	; 0x3b
    8498:	00003f28 	andeq	r3, r0, r8, lsr #30
    849c:	00002ef1 	strdeq	r2, [r0], -r1
    84a0:	01005130 	tsteq	r0, r0, lsr r1
    84a4:	00000130 	andeq	r0, r0, r0, lsr r1
    84a8:	000036ac 	andeq	r3, r0, ip, lsr #13
    84ac:	41070802 	tstmi	r7, r2, lsl #16
    84b0:	0300000b 	movweq	r0, #11
    84b4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    84b8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    84bc:	000b4b07 	andeq	r4, fp, r7, lsl #22
    84c0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    84c4:	0000080b 	andeq	r0, r0, fp, lsl #16
    84c8:	a3040802 	movwge	r0, #18434	; 0x4802
    84cc:	0400000a 	streq	r0, [r0], #-10
    84d0:	00003255 	andeq	r3, r0, r5, asr r2
    84d4:	33162a02 	tstcc	r6, #8192	; 0x2000
    84d8:	04000000 	streq	r0, [r0], #-0
    84dc:	0000362c 	andeq	r3, r0, ip, lsr #12
    84e0:	60152f02 	andsvs	r2, r5, r2, lsl #30
    84e4:	05000000 	streq	r0, [r0, #-0]
    84e8:	00006604 	andeq	r6, r0, r4, lsl #12
    84ec:	00480600 	subeq	r0, r8, r0, lsl #12
    84f0:	00750000 	rsbseq	r0, r5, r0
    84f4:	75070000 	strvc	r0, [r7, #-0]
    84f8:	00000000 	andeq	r0, r0, r0
    84fc:	007b0405 	rsbseq	r0, fp, r5, lsl #8
    8500:	04080000 	streq	r0, [r8], #-0
    8504:	00003e0d 	andeq	r3, r0, sp, lsl #28
    8508:	880f3602 	stmdahi	pc, {r1, r9, sl, ip, sp}	; <UNPREDICTABLE>
    850c:	05000000 	streq	r0, [r0, #-0]
    8510:	00008e04 	andeq	r8, r0, r4, lsl #28
    8514:	002c0600 	eoreq	r0, ip, r0, lsl #12
    8518:	00a20000 	adceq	r0, r2, r0
    851c:	75070000 	strvc	r0, [r7, #-0]
    8520:	07000000 	streq	r0, [r0, -r0]
    8524:	00000075 	andeq	r0, r0, r5, ror r0
    8528:	08010200 	stmdaeq	r1, {r9}
    852c:	00000406 	andeq	r0, r0, r6, lsl #8
    8530:	00385409 	eorseq	r5, r8, r9, lsl #8
    8534:	12bb0200 	adcsne	r0, fp, #0, 4
    8538:	00000054 	andeq	r0, r0, r4, asr r0
    853c:	003e3b09 	eorseq	r3, lr, r9, lsl #22
    8540:	10be0200 	adcsne	r0, lr, r0, lsl #4
    8544:	0000007c 	andeq	r0, r0, ip, ror r0
    8548:	08060102 	stmdaeq	r6, {r1, r8}
    854c:	0a000004 	beq	8564 <__core1_unwind_stub-0xff7a9c>
    8550:	0000354c 	andeq	r3, r0, ip, asr #10
    8554:	00a20107 	adceq	r0, r2, r7, lsl #2
    8558:	17030000 	strne	r0, [r3, -r0]
    855c:	0001f506 	andeq	pc, r1, r6, lsl #10
    8560:	30e40b00 	rsccc	r0, r4, r0, lsl #22
    8564:	0b000000 	bleq	856c <__core1_unwind_stub-0xff7a94>
    8568:	0000344b 	andeq	r3, r0, fp, asr #8
    856c:	391f0b01 	ldmdbcc	pc, {r0, r8, r9, fp}	; <UNPREDICTABLE>
    8570:	0b020000 	bleq	88578 <__core1_unwind_stub-0xf77a88>
    8574:	00003d58 	andeq	r3, r0, r8, asr sp
    8578:	38c30b03 	stmiacc	r3, {r0, r1, r8, r9, fp}^
    857c:	0b040000 	bleq	108584 <__core1_unwind_stub-0xef7a7c>
    8580:	00003c61 	andeq	r3, r0, r1, ror #24
    8584:	3ae40b05 	bcc	ff90b1a0 <__shm_end__+0xbf90b1a0>
    8588:	0b060000 	bleq	188590 <__core1_unwind_stub-0xe77a70>
    858c:	0000372e 	andeq	r3, r0, lr, lsr #14
    8590:	3c760b07 			; <UNDEFINED> instruction: 0x3c760b07
    8594:	0b080000 	bleq	20859c <__core1_unwind_stub-0xdf7a64>
    8598:	00003c84 	andeq	r3, r0, r4, lsl #25
    859c:	3d4b0b09 	vstrcc	d16, [fp, #-36]	; 0xffffffdc
    85a0:	0b0a0000 	bleq	2885a8 <__core1_unwind_stub-0xd77a58>
    85a4:	0000381a 	andeq	r3, r0, sl, lsl r8
    85a8:	32960b0b 	addscc	r0, r6, #11264	; 0x2c00
    85ac:	0b0c0000 	bleq	3085b4 <__core1_unwind_stub-0xcf7a4c>
    85b0:	000032aa 	andeq	r3, r0, sl, lsr #5
    85b4:	35900b0d 	ldrcc	r0, [r0, #2829]	; 0xb0d
    85b8:	0b0e0000 	bleq	3885c0 <__core1_unwind_stub-0xc77a40>
    85bc:	000035a6 	andeq	r3, r0, r6, lsr #11
    85c0:	34850b0f 	strcc	r0, [r5], #2831	; 0xb0f
    85c4:	0b100000 	bleq	4085cc <__core1_unwind_stub-0xbf7a34>
    85c8:	000038a7 	andeq	r3, r0, r7, lsr #17
    85cc:	350f0b11 	strcc	r0, [pc, #-2833]	; 7ac3 <__core1_unwind_stub-0xff853d>
    85d0:	0b120000 	bleq	4885d8 <__core1_unwind_stub-0xb77a28>
    85d4:	00003fee 	andeq	r3, r0, lr, ror #31
    85d8:	31600b13 	cmncc	r0, r3, lsl fp
    85dc:	0b140000 	bleq	5085e4 <__core1_unwind_stub-0xaf7a1c>
    85e0:	00003533 	andeq	r3, r0, r3, lsr r5
    85e4:	30a30b15 	adccc	r0, r3, r5, lsl fp
    85e8:	0b160000 	bleq	5885f0 <__core1_unwind_stub-0xa77a10>
    85ec:	00003d7b 	andeq	r3, r0, fp, ror sp
    85f0:	3e940b17 	vmovcc.32	r0, d4[0]
    85f4:	0b180000 	bleq	6085fc <__core1_unwind_stub-0x9f7a04>
    85f8:	00003558 	andeq	r3, r0, r8, asr r5
    85fc:	39910b19 	ldmibcc	r1, {r0, r3, r4, r8, r9, fp}
    8600:	0b1a0000 	bleq	688608 <__core1_unwind_stub-0x9779f8>
    8604:	00003d89 	andeq	r3, r0, r9, lsl #27
    8608:	2fbd0b1b 	svccs	0x00bd0b1b
    860c:	0b1c0000 	bleq	708614 <__core1_unwind_stub-0x8f79ec>
    8610:	00003d97 	muleq	r0, r7, sp
    8614:	3da50b1d 			; <UNDEFINED> instruction: 0x3da50b1d
    8618:	0b1e0000 	bleq	788620 <__core1_unwind_stub-0x8779e0>
    861c:	00002f6b 	andeq	r2, r0, fp, ror #30
    8620:	3dcf0b1f 	vstrcc	d16, [pc, #124]	; 86a4 <__core1_unwind_stub-0xff795c>
    8624:	0b200000 	bleq	80862c <__core1_unwind_stub-0x7f79d4>
    8628:	00003345 	andeq	r3, r0, r5, asr #6
    862c:	38790b21 	ldmdacc	r9!, {r0, r5, r8, r9, fp}^
    8630:	0b220000 	bleq	888638 <__core1_unwind_stub-0x7779c8>
    8634:	00003d6e 	andeq	r3, r0, lr, ror #26
    8638:	379b0b23 	ldrcc	r0, [fp, r3, lsr #22]
    863c:	0b240000 	bleq	908644 <__core1_unwind_stub-0x6f79bc>
    8640:	0000368f 	andeq	r3, r0, pc, lsl #13
    8644:	336e0b25 	cmncc	lr, #37888	; 0x9400
    8648:	0b260000 	bleq	988650 <__core1_unwind_stub-0x6779b0>
    864c:	000036ad 	andeq	r3, r0, sp, lsr #13
    8650:	34270b27 	strtcc	r0, [r7], #-2855	; 0xfffff4d9
    8654:	0b280000 	bleq	a0865c <__core1_unwind_stub-0x5f79a4>
    8658:	000036bd 			; <UNDEFINED> instruction: 0x000036bd
    865c:	36cd0b29 	strbcc	r0, [sp], r9, lsr #22
    8660:	0b2a0000 	bleq	a88668 <__core1_unwind_stub-0x577998>
    8664:	00003800 	andeq	r3, r0, r0, lsl #16
    8668:	36360b2b 	ldrtcc	r0, [r6], -fp, lsr #22
    866c:	0b2c0000 	bleq	b08674 <__core1_unwind_stub-0x4f798c>
    8670:	00003a32 	andeq	r3, r0, r2, lsr sl
    8674:	33cc0b2d 	biccc	r0, ip, #46080	; 0xb400
    8678:	002e0000 	eoreq	r0, lr, r0
    867c:	0035c80a 	eorseq	ip, r5, sl, lsl #16
    8680:	a2010700 	andge	r0, r1, #0, 14
    8684:	04000000 	streq	r0, [r0], #-0
    8688:	03d60617 	bicseq	r0, r6, #24117248	; 0x1700000
    868c:	cc0b0000 	stcgt	0, cr0, [fp], {-0}
    8690:	00000032 	andeq	r0, r0, r2, lsr r0
    8694:	0030100b 	eorseq	r1, r0, fp
    8698:	9c0b0100 	stflss	f0, [fp], {-0}
    869c:	0200003f 	andeq	r0, r0, #63	; 0x3f
    86a0:	003e150b 	eorseq	r1, lr, fp, lsl #10
    86a4:	ec0b0300 	stc	3, cr0, [fp], {-0}
    86a8:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    86ac:	0030d00b 	eorseq	sp, r0, fp
    86b0:	a80b0500 	stmdage	fp, {r8, sl}
    86b4:	06000033 			; <UNDEFINED> instruction: 0x06000033
    86b8:	0032dc0b 	eorseq	sp, r2, fp, lsl #24
    86bc:	b20b0700 	andlt	r0, fp, #0, 14
    86c0:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    86c4:	003dfa0b 	eorseq	pc, sp, fp, lsl #20
    86c8:	080b0900 	stmdaeq	fp, {r8, fp}
    86cc:	0a00003b 	beq	87c0 <__core1_unwind_stub-0xff7840>
    86d0:	0031150b 	eorseq	r1, r1, fp, lsl #10
    86d4:	1f0b0b00 	svcne	0x000b0b00
    86d8:	0c000033 	stceq	0, cr0, [r0], {51}	; 0x33
    86dc:	0030910b 	eorseq	r9, r0, fp, lsl #2
    86e0:	d10b0d00 	tstle	fp, r0, lsl #26
    86e4:	0e00003f 	mcreq	0, 0, r0, cr0, cr15, {1}
    86e8:	0037ed0b 	eorseq	lr, r7, fp, lsl #26
    86ec:	da0b0f00 	ble	2cc2f4 <__core1_unwind_stub-0xd33d0c>
    86f0:	10000034 	andne	r0, r0, r4, lsr r0
    86f4:	00382a0b 	eorseq	r2, r8, fp, lsl #20
    86f8:	d60b1100 	strle	r1, [fp], -r0, lsl #2
    86fc:	1200003e 	andne	r0, r0, #62	; 0x3e
    8700:	0031d80b 	eorseq	sp, r1, fp, lsl #16
    8704:	ed0b1300 	stc	3, cr1, [fp, #-0]
    8708:	14000034 	strne	r0, [r0], #-52	; 0xffffffcc
    870c:	00375e0b 	eorseq	r5, r7, fp, lsl #28
    8710:	b70b1500 	strlt	r1, [fp, -r0, lsl #10]
    8714:	16000032 			; <UNDEFINED> instruction: 0x16000032
    8718:	0037aa0b 	eorseq	sl, r7, fp, lsl #20
    871c:	b20b1700 	andlt	r1, fp, #0, 14
    8720:	18000035 	stmdane	r0, {r0, r2, r4, r5}
    8724:	0030ee0b 	eorseq	lr, r0, fp, lsl #28
    8728:	7d0b1900 	vstrvc.16	s2, [fp, #-0]	; <UNPREDICTABLE>
    872c:	1a00003e 	bne	882c <__core1_unwind_stub-0xff77d4>
    8730:	00371c0b 	eorseq	r1, r7, fp, lsl #24
    8734:	a60b1b00 	strge	r1, [fp], -r0, lsl #22
    8738:	1c000034 	stcne	0, cr0, [r0], {52}	; 0x34
    873c:	002fa60b 	eoreq	sl, pc, fp, lsl #12
    8740:	670b1d00 	strvs	r1, [fp, -r0, lsl #26]
    8744:	1e000036 	mcrne	0, 0, r0, cr0, cr6, {1}
    8748:	0036530b 	eorseq	r5, r6, fp, lsl #6
    874c:	c50b1f00 	strgt	r1, [fp, #-3840]	; 0xfffff100
    8750:	2000003a 	andcs	r0, r0, sl, lsr r0
    8754:	003b500b 	eorseq	r5, fp, fp
    8758:	5c0b2100 	stfpls	f2, [fp], {-0}
    875c:	2200003e 	andcs	r0, r0, #62	; 0x3e
    8760:	0033d90b 	eorseq	sp, r3, fp, lsl #18
    8764:	410b2300 	mrsmi	r2, (UNDEF: 59)
    8768:	24000039 	strcs	r0, [r0], #-57	; 0xffffffc7
    876c:	003b1d0b 	eorseq	r1, fp, fp, lsl #26
    8770:	410b2500 	tstmi	fp, r0, lsl #10
    8774:	2600003a 			; <UNDEFINED> instruction: 0x2600003a
    8778:	003a550b 	eorseq	r5, sl, fp, lsl #10
    877c:	690b2700 	stmdbvs	fp, {r8, r9, sl, sp}
    8780:	2800003a 	stmdacs	r0, {r1, r3, r4, r5}
    8784:	0032400b 	eorseq	r4, r2, fp
    8788:	c30b2900 	movwgt	r2, #47360	; 0xb900
    878c:	2a000031 	bcs	8858 <__core1_unwind_stub-0xff77a8>
    8790:	0031eb0b 	eorseq	lr, r1, fp, lsl #22
    8794:	fb0b2b00 	blx	2d339e <__core1_unwind_stub-0xd2cc62>
    8798:	2c00003c 	stccs	0, cr0, [r0], {60}	; 0x3c
    879c:	00321d0b 	eorseq	r1, r2, fp, lsl #26
    87a0:	0f0b2d00 	svceq	0x000b2d00
    87a4:	2e00003d 	mcrcs	0, 0, r0, cr0, cr13, {1}
    87a8:	003d230b 	eorseq	r2, sp, fp, lsl #6
    87ac:	370b2f00 	strcc	r2, [fp, -r0, lsl #30]
    87b0:	3000003d 	andcc	r0, r0, sp, lsr r0
    87b4:	0033310b 	eorseq	r3, r3, fp, lsl #2
    87b8:	0b0b3100 	bleq	2d4bc0 <__core1_unwind_stub-0xd2b440>
    87bc:	32000033 	andcc	r0, r0, #51	; 0x33
    87c0:	00367b0b 	eorseq	r7, r6, fp, lsl #22
    87c4:	3d0b3300 	stccc	3, cr3, [fp, #-0]
    87c8:	34000038 	strcc	r0, [r0], #-56	; 0xffffffc8
    87cc:	003f0b0b 	eorseq	r0, pc, fp, lsl #22
    87d0:	8b0b3500 	blhi	2d5bd8 <__core1_unwind_stub-0xd2a428>
    87d4:	36000033 			; <UNDEFINED> instruction: 0x36000033
    87d8:	00345b0b 	eorseq	r5, r4, fp, lsl #22
    87dc:	700b3700 	andvc	r3, fp, r0, lsl #14
    87e0:	38000034 	stmdacc	r0, {r2, r4, r5}
    87e4:	0036dd0b 	eorseq	sp, r6, fp, lsl #26
    87e8:	070b3900 	streq	r3, [fp, -r0, lsl #18]
    87ec:	3a000037 	bcc	88d0 <__core1_unwind_stub-0xff7730>
    87f0:	003f4e0b 	eorseq	r4, pc, fp, lsl #28
    87f4:	2c0b3b00 			; <UNDEFINED> instruction: 0x2c0b3b00
    87f8:	3c000039 	stccc	0, cr0, [r0], {57}	; 0x39
    87fc:	0033fe0b 	eorseq	pc, r3, fp, lsl #28
    8800:	220b3d00 	andcs	r3, fp, #0, 26
    8804:	3e000030 	mcrcc	0, 0, r0, cr0, cr0, {1}
    8808:	002fd30b 	eoreq	sp, pc, fp, lsl #6
    880c:	890b3f00 	stmdbhi	fp, {r8, r9, sl, fp, ip, sp}
    8810:	40000038 	andmi	r0, r0, r8, lsr r0
    8814:	0039ad0b 	eorseq	sl, r9, fp, lsl #26
    8818:	a70b4100 	strge	r4, [fp, -r0, lsl #2]
    881c:	4200003a 	andmi	r0, r0, #58	; 0x3a
    8820:	0036f20b 	eorseq	pc, r6, fp, lsl #4
    8824:	870b4300 	strhi	r4, [fp, -r0, lsl #6]
    8828:	4400003f 	strmi	r0, [r0], #-63	; 0xffffffc1
    882c:	0039570b 	eorseq	r5, r9, fp, lsl #14
    8830:	070b4500 	streq	r4, [fp, -r0, lsl #10]
    8834:	46000032 			; <UNDEFINED> instruction: 0x46000032
    8838:	0034bc0b 	eorseq	fp, r4, fp, lsl #24
    883c:	000b4700 	andeq	r4, fp, r0, lsl #14
    8840:	48000036 	stmdami	r0, {r1, r2, r4, r5}
    8844:	002f8a0b 	eoreq	r8, pc, fp, lsl #20
    8848:	b30b4900 	movwlt	r4, #47360	; 0xb900
    884c:	4a000030 	bmi	8914 <__core1_unwind_stub-0xff76ec>
    8850:	0034120b 	eorseq	r1, r4, fp, lsl #4
    8854:	3c0b4b00 			; <UNDEFINED> instruction: 0x3c0b4b00
    8858:	4c000037 	stcmi	0, cr0, [r0], {55}	; 0x37
    885c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8860:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    8864:	0003f30c 	andeq	pc, r3, ip, lsl #6
    8868:	0003e800 	andeq	lr, r3, r0, lsl #16
    886c:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    8870:	000003dd 	ldrdeq	r0, [r0], -sp
    8874:	03ff0405 	mvnseq	r0, #83886080	; 0x5000000
    8878:	ed0e0000 	stc	0, cr0, [lr, #-0]
    887c:	02000003 	andeq	r0, r0, #3
    8880:	040f0801 	streq	r0, [pc], #-2049	; 8888 <__core1_unwind_stub-0xff7778>
    8884:	f80e0000 			; <UNDEFINED> instruction: 0xf80e0000
    8888:	0f000003 	svceq	0x00000003
    888c:	00003151 	andeq	r3, r0, r1, asr r1
    8890:	1a014c05 	bne	5b8ac <__core1_unwind_stub-0xfa4754>
    8894:	000003e8 	andeq	r0, r0, r8, ror #7
    8898:	0034960f 	eorseq	r9, r4, pc, lsl #12
    889c:	01820500 	orreq	r0, r2, r0, lsl #10
    88a0:	0003e81a 	andeq	lr, r3, sl, lsl r8
    88a4:	03f80c00 	mvnseq	r0, #0, 24
    88a8:	04290000 	strteq	r0, [r9], #-0
    88ac:	000d0000 	andeq	r0, sp, r0
    88b0:	00369f09 	eorseq	r9, r6, r9, lsl #30
    88b4:	0d2d0600 	stceq	6, cr0, [sp, #-0]
    88b8:	0000041e 	andeq	r0, r0, lr, lsl r4
    88bc:	003ddf09 	eorseq	sp, sp, r9, lsl #30
    88c0:	1c380600 	ldcne	6, cr0, [r8], #-0
    88c4:	000001f5 	strdeq	r0, [r0], -r5
    88c8:	0033520a 	eorseq	r5, r3, sl, lsl #4
    88cc:	a2010700 	andge	r0, r1, #0, 14
    88d0:	06000000 	streq	r0, [r0], -r0
    88d4:	04b40e3a 	ldrteq	r0, [r4], #3642	; 0xe3a
    88d8:	9f0b0000 	svcls	0x000b0000
    88dc:	0000002f 	andeq	r0, r0, pc, lsr #32
    88e0:	00359f0b 	eorseq	r9, r5, fp, lsl #30
    88e4:	e80b0100 	stmda	fp, {r8}
    88e8:	0200003e 	andeq	r0, r0, #62	; 0x3e
    88ec:	003eab0b 	eorseq	sl, lr, fp, lsl #22
    88f0:	e60b0300 	str	r0, [fp], -r0, lsl #6
    88f4:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    88f8:	003c6f0b 	eorseq	r6, ip, fp, lsl #30
    88fc:	940b0500 	strls	r0, [fp], #-1280	; 0xfffffb00
    8900:	06000031 			; <UNDEFINED> instruction: 0x06000031
    8904:	0031760b 	eorseq	r7, r1, fp, lsl #12
    8908:	a30b0700 	movwge	r0, #46848	; 0xb700
    890c:	08000032 	stmdaeq	r0, {r1, r4, r5}
    8910:	0037c00b 	eorseq	ip, r7, fp
    8914:	9b0b0900 	blls	2cad1c <__core1_unwind_stub-0xd352e4>
    8918:	0a000031 	beq	89e4 <__core1_unwind_stub-0xff761c>
    891c:	0037c70b 	eorseq	ip, r7, fp, lsl #14
    8920:	000b0b00 	andeq	r0, fp, r0, lsl #22
    8924:	0c000032 	stceq	0, cr0, [r0], {50}	; 0x32
    8928:	00318d0b 	eorseq	r8, r1, fp, lsl #26
    892c:	c60b0d00 	strgt	r0, [fp], -r0, lsl #26
    8930:	0e00003c 	mcreq	0, 0, r0, cr0, cr12, {1}
    8934:	0039cb0b 	eorseq	ip, r9, fp, lsl #22
    8938:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
    893c:	00003add 	ldrdeq	r3, [r0], -sp
    8940:	41013f06 	tstmi	r1, r6, lsl #30
    8944:	09000004 	stmdbeq	r0, {r2}
    8948:	00003c52 	andeq	r3, r0, r2, asr ip
    894c:	b40f4106 	strlt	r4, [pc], #-262	; 8954 <__core1_unwind_stub-0xff76ac>
    8950:	09000004 	stmdbeq	r0, {r2}
    8954:	00003cda 	ldrdeq	r3, [r0], -sl
    8958:	2c0c4a06 			; <UNDEFINED> instruction: 0x2c0c4a06
    895c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8960:	00003135 	andeq	r3, r0, r5, lsr r1
    8964:	2c0c4b06 			; <UNDEFINED> instruction: 0x2c0c4b06
    8968:	10000000 	andne	r0, r0, r0
    896c:	00003db3 			; <UNDEFINED> instruction: 0x00003db3
    8970:	003ceb09 	eorseq	lr, ip, r9, lsl #22
    8974:	144c0600 	strbne	r0, [ip], #-1536	; 0xfffffa00
    8978:	000004f5 	strdeq	r0, [r0], -r5
    897c:	04e40405 	strbteq	r0, [r4], #1029	; 0x405
    8980:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
    8984:	00003569 	andeq	r3, r0, r9, ror #10
    8988:	080f4e06 	stmdaeq	pc, {r1, r2, r9, sl, fp, lr}	; <UNPREDICTABLE>
    898c:	05000005 	streq	r0, [r0, #-5]
    8990:	0004fb04 	andeq	pc, r4, r4, lsl #22
    8994:	3af31200 	bcc	ffccd19c <__shm_end__+0xbfccd19c>
    8998:	d3090000 	movwle	r0, #36864	; 0x9000
    899c:	06000038 			; <UNDEFINED> instruction: 0x06000038
    89a0:	051f0d52 	ldreq	r0, [pc, #-3410]	; 7c56 <__core1_unwind_stub-0xff83aa>
    89a4:	04050000 	streq	r0, [r5], #-0
    89a8:	0000050e 	andeq	r0, r0, lr, lsl #10
    89ac:	00328913 	eorseq	r8, r2, r3, lsl r9
    89b0:	67063400 	strvs	r3, [r6, -r0, lsl #8]
    89b4:	05501501 	ldrbeq	r1, [r0, #-1281]	; 0xfffffaff
    89b8:	a8140000 	ldmdage	r4, {}	; <UNPREDICTABLE>
    89bc:	06000036 			; <UNDEFINED> instruction: 0x06000036
    89c0:	ed0f0169 	stfs	f0, [pc, #-420]	; 8824 <__core1_unwind_stub-0xff77dc>
    89c4:	00000003 	andeq	r0, r0, r3
    89c8:	00326d14 	eorseq	r6, r2, r4, lsl sp
    89cc:	016a0600 	cmneq	sl, r0, lsl #12
    89d0:	00055514 	andeq	r5, r5, r4, lsl r5
    89d4:	0e000400 	cfcpyseq	mvf0, mvf0
    89d8:	00000525 	andeq	r0, r0, r5, lsr #10
    89dc:	0000c80c 	andeq	ip, r0, ip, lsl #16
    89e0:	00056500 	andeq	r6, r5, r0, lsl #10
    89e4:	00331500 	eorseq	r1, r3, r0, lsl #10
    89e8:	002d0000 	eoreq	r0, sp, r0
    89ec:	0005500c 	andeq	r5, r5, ip
    89f0:	00057000 	andeq	r7, r5, r0
    89f4:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    89f8:	00000565 	andeq	r0, r0, r5, ror #10
    89fc:	0035d70f 	eorseq	sp, r5, pc, lsl #14
    8a00:	016b0600 	cmneq	fp, r0, lsl #12
    8a04:	00057003 	andeq	r7, r5, r3
    8a08:	380d0f00 	stmdacc	sp, {r8, r9, sl, fp}
    8a0c:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    8a10:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    8a14:	31160000 	tstcc	r6, r0
    8a18:	0700003b 	smladxeq	r0, fp, r0, r0
    8a1c:	0000a201 	andeq	sl, r0, r1, lsl #4
    8a20:	01810600 	orreq	r0, r1, r0, lsl #12
    8a24:	00063906 	andeq	r3, r6, r6, lsl #18
    8a28:	30490b00 	subcc	r0, r9, r0, lsl #22
    8a2c:	0b000000 	bleq	8a34 <__core1_unwind_stub-0xff75cc>
    8a30:	00003055 	andeq	r3, r0, r5, asr r0
    8a34:	30610b02 	rsbcc	r0, r1, r2, lsl #22
    8a38:	0b030000 	bleq	c8a40 <__core1_unwind_stub-0xf375c0>
    8a3c:	0000337e 	andeq	r3, r0, lr, ror r3
    8a40:	306d0b03 	rsbcc	r0, sp, r3, lsl #22
    8a44:	0b040000 	bleq	108a4c <__core1_unwind_stub-0xef75b4>
    8a48:	00003502 	andeq	r3, r0, r2, lsl #10
    8a4c:	35e80b04 	strbcc	r0, [r8, #2820]!	; 0xb04
    8a50:	0b050000 	bleq	148a58 <__core1_unwind_stub-0xeb75a8>
    8a54:	0000353e 	andeq	r3, r0, lr, lsr r5
    8a58:	31260b05 			; <UNDEFINED> instruction: 0x31260b05
    8a5c:	0b050000 	bleq	148a64 <__core1_unwind_stub-0xeb759c>
    8a60:	00003079 	andeq	r3, r0, r9, ror r0
    8a64:	37740b06 	ldrbcc	r0, [r4, -r6, lsl #22]!
    8a68:	0b060000 	bleq	188a70 <__core1_unwind_stub-0xe77590>
    8a6c:	0000325f 	andeq	r3, r0, pc, asr r2
    8a70:	37810b06 	strcc	r0, [r1, r6, lsl #22]
    8a74:	0b060000 	bleq	188a7c <__core1_unwind_stub-0xe77584>
    8a78:	00003c92 	muleq	r0, r2, ip
    8a7c:	378e0b06 	strcc	r0, [lr, r6, lsl #22]
    8a80:	0b060000 	bleq	188a88 <__core1_unwind_stub-0xe77578>
    8a84:	000037ce 	andeq	r3, r0, lr, asr #15
    8a88:	30850b06 	addcc	r0, r5, r6, lsl #22
    8a8c:	0b070000 	bleq	1c8a94 <__core1_unwind_stub-0xe3756c>
    8a90:	000038b6 			; <UNDEFINED> instruction: 0x000038b6
    8a94:	39030b07 	stmdbcc	r3, {r0, r1, r2, r8, r9, fp}
    8a98:	0b070000 	bleq	1c8aa0 <__core1_unwind_stub-0xe37560>
    8a9c:	00003ccd 	andeq	r3, r0, sp, asr #25
    8aa0:	32320b07 	eorscc	r0, r2, #7168	; 0x1c00
    8aa4:	0b070000 	bleq	1c8aac <__core1_unwind_stub-0xe37554>
    8aa8:	00003984 	andeq	r3, r0, r4, lsl #19
    8aac:	2ffe0b08 	svccs	0x00fe0b08
    8ab0:	0b080000 	bleq	208ab8 <__core1_unwind_stub-0xdf7548>
    8ab4:	00003ca0 	andeq	r3, r0, r0, lsr #25
    8ab8:	39a00b08 	stmibcc	r0!, {r3, r8, r9, fp}
    8abc:	00080000 	andeq	r0, r8, r0
    8ac0:	003efd0f 	eorseq	pc, lr, pc, lsl #26
    8ac4:	019f0600 	orrseq	r0, pc, r0, lsl #12
    8ac8:	00058f1f 	andeq	r8, r5, pc, lsl pc
    8acc:	39d20f00 	ldmibcc	r2, {r8, r9, sl, fp}^
    8ad0:	a2060000 	andge	r0, r6, #0
    8ad4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    8ad8:	f50f0000 			; <UNDEFINED> instruction: 0xf50f0000
    8adc:	06000035 			; <UNDEFINED> instruction: 0x06000035
    8ae0:	2c0c01a5 	stfcss	f0, [ip], {165}	; 0xa5
    8ae4:	0f000000 	svceq	0x00000000
    8ae8:	00003fe3 	andeq	r3, r0, r3, ror #31
    8aec:	0c01a806 	stceq	8, cr10, [r1], {6}
    8af0:	0000002c 	andeq	r0, r0, ip, lsr #32
    8af4:	0031450f 	eorseq	r4, r1, pc, lsl #10
    8af8:	01ab0600 			; <UNDEFINED> instruction: 0x01ab0600
    8afc:	00002c0c 	andeq	r2, r0, ip, lsl #24
    8b00:	39dc0f00 	ldmibcc	ip, {r8, r9, sl, fp}^
    8b04:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
    8b08:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    8b0c:	ed0f0000 	stc	0, cr0, [pc, #-0]	; 8b14 <__core1_unwind_stub-0xff74ec>
    8b10:	06000038 			; <UNDEFINED> instruction: 0x06000038
    8b14:	2c0c01b1 	stfcss	f0, [ip], {177}	; 0xb1
    8b18:	0f000000 	svceq	0x00000000
    8b1c:	000038f8 	strdeq	r3, [r0], -r8
    8b20:	0c01b406 	cfstrseq	mvf11, [r1], {6}
    8b24:	0000002c 	andeq	r0, r0, ip, lsr #32
    8b28:	0039e60f 	eorseq	lr, r9, pc, lsl #12
    8b2c:	01b70600 			; <UNDEFINED> instruction: 0x01b70600
    8b30:	00002c0c 	andeq	r2, r0, ip, lsl #24
    8b34:	37500f00 	ldrbcc	r0, [r0, -r0, lsl #30]
    8b38:	ba060000 	blt	188b40 <__core1_unwind_stub-0xe774c0>
    8b3c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    8b40:	420f0000 	andmi	r0, pc, #0
    8b44:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
    8b48:	2c0c01bd 	stfcss	f0, [ip], {189}	; 0xbd
    8b4c:	0f000000 	svceq	0x00000000
    8b50:	000039f0 	strdeq	r3, [r0], -r0
    8b54:	0c01c006 	stceq	0, cr12, [r1], {6}
    8b58:	0000002c 	andeq	r0, r0, ip, lsr #32
    8b5c:	0040060f 	subeq	r0, r0, pc, lsl #12
    8b60:	01c30600 	biceq	r0, r3, r0, lsl #12
    8b64:	00002c0c 	andeq	r2, r0, ip, lsl #24
    8b68:	3eb20f00 	cdpcc	15, 11, cr0, cr2, cr0, {0}
    8b6c:	c6060000 	strgt	r0, [r6], -r0
    8b70:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    8b74:	be0f0000 	cdplt	0, 0, cr0, cr15, cr0, {0}
    8b78:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
    8b7c:	2c0c01c9 	stfcss	f0, [ip], {201}	; 0xc9
    8b80:	0f000000 	svceq	0x00000000
    8b84:	00003eca 	andeq	r3, r0, sl, asr #29
    8b88:	0c01cc06 	stceq	12, cr12, [r1], {6}
    8b8c:	0000002c 	andeq	r0, r0, ip, lsr #32
    8b90:	003eef0f 	eorseq	lr, lr, pc, lsl #30
    8b94:	01d00600 	bicseq	r0, r0, r0, lsl #12
    8b98:	00002c0c 	andeq	r2, r0, ip, lsl #24
    8b9c:	3ff90f00 	svccc	0x00f90f00
    8ba0:	d3060000 	movwle	r0, #24576	; 0x6000
    8ba4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    8ba8:	a20f0000 	andge	r0, pc, #0
    8bac:	06000031 			; <UNDEFINED> instruction: 0x06000031
    8bb0:	2c0c01d6 	stfcss	f0, [ip], {214}	; 0xd6
    8bb4:	0f000000 	svceq	0x00000000
    8bb8:	00002f7a 	andeq	r2, r0, sl, ror pc
    8bbc:	0c01d906 			; <UNDEFINED> instruction: 0x0c01d906
    8bc0:	0000002c 	andeq	r0, r0, ip, lsr #32
    8bc4:	0033bb0f 	eorseq	fp, r3, pc, lsl #22
    8bc8:	01dc0600 	bicseq	r0, ip, r0, lsl #12
    8bcc:	00002c0c 	andeq	r2, r0, ip, lsl #24
    8bd0:	317d0f00 	cmncc	sp, r0, lsl #30
    8bd4:	df060000 	svcle	0x00060000
    8bd8:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    8bdc:	fa0f0000 	blx	3c8be4 <__core1_unwind_stub-0xc3741c>
    8be0:	06000039 			; <UNDEFINED> instruction: 0x06000039
    8be4:	2c0c01e2 	stfcss	f0, [ip], {226}	; 0xe2
    8be8:	0f000000 	svceq	0x00000000
    8bec:	0000361e 	andeq	r3, r0, lr, lsl r6
    8bf0:	0c01e506 	cfstr32eq	mvfx14, [r1], {6}
    8bf4:	0000002c 	andeq	r0, r0, ip, lsr #32
    8bf8:	0038660f 	eorseq	r6, r8, pc, lsl #12
    8bfc:	01e80600 	mvneq	r0, r0, lsl #12
    8c00:	00002c0c 	andeq	r2, r0, ip, lsl #24
    8c04:	3de80f00 	stclcc	15, cr0, [r8]
    8c08:	ef060000 	svc	0x00060000
    8c0c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    8c10:	b10f0000 	mrslt	r0, CPSR
    8c14:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
    8c18:	2c0c01f2 	stfcss	f0, [ip], {242}	; 0xf2
    8c1c:	0f000000 	svceq	0x00000000
    8c20:	00003fc1 	andeq	r3, r0, r1, asr #31
    8c24:	0c01f506 	cfstr32eq	mvfx15, [r1], {6}
    8c28:	0000002c 	andeq	r0, r0, ip, lsr #32
    8c2c:	0032760f 	eorseq	r7, r2, pc, lsl #12
    8c30:	01f80600 	mvnseq	r0, r0, lsl #12
    8c34:	00002c0c 	andeq	r2, r0, ip, lsl #24
    8c38:	3e260f00 	cdpcc	15, 2, cr0, cr6, cr0, {0}
    8c3c:	fb060000 	blx	188c46 <__core1_unwind_stub-0xe773ba>
    8c40:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    8c44:	6c0f0000 	stcvs	0, cr0, [pc], {-0}
    8c48:	06000039 			; <UNDEFINED> instruction: 0x06000039
    8c4c:	2c0c01fe 	stfcss	f0, [ip], {254}	; 0xfe
    8c50:	0f000000 	svceq	0x00000000
    8c54:	00003434 	andeq	r3, r0, r4, lsr r4
    8c58:	0c020206 	sfmeq	f0, 4, [r2], {6}
    8c5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    8c60:	003b430f 	eorseq	r4, fp, pc, lsl #6
    8c64:	020a0600 	andeq	r0, sl, #0, 12
    8c68:	00002c0c 	andeq	r2, r0, ip, lsl #24
    8c6c:	32fd0f00 	rscscc	r0, sp, #0, 30
    8c70:	0d060000 	stceq	0, cr0, [r6, #-0]
    8c74:	002c0c02 	eoreq	r0, ip, r2, lsl #24
    8c78:	2c0c0000 	stccs	0, cr0, [ip], {-0}
    8c7c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    8c80:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    8c84:	351e0f00 	ldrcc	r0, [lr, #-3840]	; 0xfffff100
    8c88:	fb060000 	blx	188c92 <__core1_unwind_stub-0xe7736e>
    8c8c:	07f30c03 	ldrbeq	r0, [r3, r3, lsl #24]!
    8c90:	f50c0000 			; <UNDEFINED> instruction: 0xf50c0000
    8c94:	1b000004 	blne	8cac <__core1_unwind_stub-0xff7354>
    8c98:	15000008 	strne	r0, [r0, #-8]
    8c9c:	00000033 	andeq	r0, r0, r3, lsr r0
    8ca0:	1d0f000d 	stcne	0, cr0, [pc, #-52]	; 8c74 <__core1_unwind_stub-0xff738c>
    8ca4:	0600003a 			; <UNDEFINED> instruction: 0x0600003a
    8ca8:	0b140584 	bleq	50a2c0 <__core1_unwind_stub-0xaf5d40>
    8cac:	16000008 	strne	r0, [r0], -r8
    8cb0:	000035e0 	andeq	r3, r0, r0, ror #11
    8cb4:	00a20107 	adceq	r0, r2, r7, lsl #2
    8cb8:	8b060000 	blhi	188cc0 <__core1_unwind_stub-0xe77340>
    8cbc:	08660605 	stmdaeq	r6!, {r0, r2, r9, sl}^
    8cc0:	600b0000 	andvs	r0, fp, r0
    8cc4:	00000033 	andeq	r0, r0, r3, lsr r0
    8cc8:	0037db0b 	eorseq	sp, r7, fp, lsl #22
    8ccc:	340b0100 	strcc	r0, [fp], #-256	; 0xffffff00
    8cd0:	02000030 	andeq	r0, r0, #48	; 0x30
    8cd4:	003f730b 	eorseq	r7, pc, fp, lsl #6
    8cd8:	8a0b0300 	bhi	2c98e0 <__core1_unwind_stub-0xd36720>
    8cdc:	0400003a 	streq	r0, [r0], #-58	; 0xffffffc6
    8ce0:	003a7d0b 	eorseq	r7, sl, fp, lsl #26
    8ce4:	050b0500 	streq	r0, [fp, #-1280]	; 0xfffffb00
    8ce8:	06000031 			; <UNDEFINED> instruction: 0x06000031
    8cec:	3f630f00 	svccc	0x00630f00
    8cf0:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
    8cf4:	08281505 	stmdaeq	r8!, {r0, r2, r8, sl, ip}
    8cf8:	4b0f0000 	blmi	3c8d00 <__core1_unwind_stub-0xc37300>
    8cfc:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
    8d00:	33110799 	tstcc	r1, #40108032	; 0x2640000
    8d04:	0f000000 	svceq	0x00000000
    8d08:	00003a0a 	andeq	r3, r0, sl, lsl #20
    8d0c:	0c07ae06 	stceq	14, cr10, [r7], {6}
    8d10:	0000002c 	andeq	r0, r0, ip, lsr #32
    8d14:	003dc704 	eorseq	ip, sp, r4, lsl #14
    8d18:	167b0700 	ldrbtne	r0, [fp], -r0, lsl #14
    8d1c:	000000a2 	andeq	r0, r0, r2, lsr #1
    8d20:	00088d0e 	andeq	r8, r8, lr, lsl #26
    8d24:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    8d28:	00000d70 	andeq	r0, r0, r0, ror sp
    8d2c:	0030c804 	eorseq	ip, r0, r4, lsl #16
    8d30:	16810700 	strne	r0, [r1], r0, lsl #14
    8d34:	00000033 	andeq	r0, r0, r3, lsr r0
    8d38:	002fcb04 	eoreq	ip, pc, r4, lsl #22
    8d3c:	16850700 	strne	r0, [r5], r0, lsl #14
    8d40:	00000025 	andeq	r0, r0, r5, lsr #32
    8d44:	bd040402 	cfstrslt	mvf0, [r4, #-8]
    8d48:	02000031 	andeq	r0, r0, #49	; 0x31
    8d4c:	31b50308 			; <UNDEFINED> instruction: 0x31b50308
    8d50:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8d54:	000aa804 	andeq	sl, sl, r4, lsl #16
    8d58:	03100200 	tsteq	r0, #0, 4
    8d5c:	00003a98 	muleq	r0, r8, sl
    8d60:	0008990c 	andeq	r9, r8, ip, lsl #18
    8d64:	0008e900 	andeq	lr, r8, r0, lsl #18
    8d68:	00331500 	eorseq	r1, r3, r0, lsl #10
    8d6c:	00ff0000 	rscseq	r0, pc, r0
    8d70:	0008d90e 	andeq	sp, r8, lr, lsl #18
    8d74:	39100f00 	ldmdbcc	r0, {r8, r9, sl, fp}
    8d78:	fc070000 	stc2	0, cr0, [r7], {-0}
    8d7c:	08e91601 	stmiaeq	r9!, {r0, r9, sl, ip}^
    8d80:	6c0f0000 	stcvs	0, cr0, [pc], {-0}
    8d84:	07000031 	smladxeq	r0, r1, r0, r0
    8d88:	e9160202 	ldmdb	r6, {r1, r9}
    8d8c:	17000008 	strne	r0, [r0, -r8]
    8d90:	00002ff1 	strdeq	r2, [r0], -r1
    8d94:	0103b301 	tsteq	r3, r1, lsl #6
    8d98:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    8d9c:	01005130 	tsteq	r0, r0, lsr r1
    8da0:	00000130 	andeq	r0, r0, r0, lsr r1
    8da4:	09e29c01 	stmibeq	r2!, {r0, sl, fp, ip, pc}^
    8da8:	6e180000 	cdpvs	0, 1, cr0, cr8, cr0, {0}
    8dac:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    8db0:	0008b117 	andeq	fp, r8, r7, lsl r1
    8db4:	00000400 	andeq	r0, r0, r0, lsl #8
    8db8:	00000000 	andeq	r0, r0, r0
    8dbc:	00641800 	rsbeq	r1, r4, r0, lsl #16
    8dc0:	2203b301 	andcs	fp, r3, #67108864	; 0x4000000
    8dc4:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    8dc8:	00000030 	andeq	r0, r0, r0, lsr r0
    8dcc:	0000002c 	andeq	r0, r0, ip, lsr #32
    8dd0:	00707219 	rsbseq	r7, r0, r9, lsl r2
    8dd4:	2e03b301 	cdpcs	3, 0, cr11, cr3, cr1, {0}
    8dd8:	000009e2 	andeq	r0, r0, r2, ror #19
    8ddc:	1a009102 	bne	2d1ec <__core1_unwind_stub-0xfd2e14>
    8de0:	b5010071 	strlt	r0, [r1, #-113]	; 0xffffff8f
    8de4:	08b10b03 	ldmeq	r1!, {r0, r1, r8, r9, fp}
    8de8:	00600000 	rsbeq	r0, r0, r0
    8dec:	00580000 	subseq	r0, r8, r0
    8df0:	721a0000 	andsvc	r0, sl, #0
    8df4:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    8df8:	0008b112 	andeq	fp, r8, r2, lsl r1
    8dfc:	0000b600 	andeq	fp, r0, r0, lsl #12
    8e00:	0000ac00 	andeq	sl, r0, r0, lsl #24
    8e04:	00791a00 	rsbseq	r1, r9, r0, lsl #20
    8e08:	1903b501 	stmdbne	r3, {r0, r8, sl, ip, sp, pc}
    8e0c:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    8e10:	00000112 	andeq	r0, r0, r2, lsl r1
    8e14:	0000010e 	andeq	r0, r0, lr, lsl #2
    8e18:	317a6c1a 	cmncc	sl, sl, lsl ip
    8e1c:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    8e20:	0008a50a 	andeq	sl, r8, sl, lsl #10
    8e24:	00013e00 	andeq	r3, r1, r0, lsl #28
    8e28:	00013a00 	andeq	r3, r1, r0, lsl #20
    8e2c:	7a6c1a00 	bvc	1b0f634 <__bss_end__+0xaf3634>
    8e30:	b6010032 			; <UNDEFINED> instruction: 0xb6010032
    8e34:	08a50f03 	stmiaeq	r5!, {r0, r1, r8, r9, sl, fp}
    8e38:	015e0000 	cmpeq	lr, r0
    8e3c:	015c0000 	cmpeq	ip, r0
    8e40:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    8e44:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    8e48:	0008a514 	andeq	sl, r8, r4, lsl r5
    8e4c:	00017b00 	andeq	r7, r1, r0, lsl #22
    8e50:	00017100 	andeq	r7, r1, r0, lsl #2
    8e54:	006b1a00 	rsbeq	r1, fp, r0, lsl #20
    8e58:	1703b601 	strne	fp, [r3, -r1, lsl #12]
    8e5c:	000008a5 	andeq	r0, r0, r5, lsr #17
    8e60:	000001c2 	andeq	r0, r0, r2, asr #3
    8e64:	000001be 			; <UNDEFINED> instruction: 0x000001be
    8e68:	b1040500 	tstlt	r4, r0, lsl #10
    8e6c:	00000008 	andeq	r0, r0, r8
    8e70:	00000022 	andeq	r0, r0, r2, lsr #32
    8e74:	18390002 	ldmdane	r9!, {r1}
    8e78:	01040000 	mrseq	r0, (UNDEF: 4)
    8e7c:	00003899 	muleq	r0, r9, r8
    8e80:	01005260 	tsteq	r0, r0, ror #4
    8e84:	01005288 	smlabbeq	r0, r8, r2, r5
    8e88:	00002eca 	andeq	r2, r0, sl, asr #29
    8e8c:	00002ef1 	strdeq	r2, [r0], -r1
    8e90:	00002b1a 	andeq	r2, r0, sl, lsl fp
    8e94:	00228001 	eoreq	r8, r2, r1
    8e98:	00020000 	andeq	r0, r2, r0
    8e9c:	0000184d 	andeq	r1, r0, sp, asr #16
    8ea0:	38fa0104 	ldmcc	sl!, {r2, r8}^
    8ea4:	52880000 	addpl	r0, r8, #0
    8ea8:	52d00100 	sbcspl	r0, r0, #0, 2
    8eac:	2eca0100 	polcse	f0, f2, f0
    8eb0:	2ef10000 	cdpcs	0, 15, cr0, cr1, cr0, {0}
    8eb4:	2b1a0000 	blcs	688ebc <__core1_unwind_stub-0x977144>
    8eb8:	80010000 	andhi	r0, r1, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
{
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011117 	andne	r1, r1, r7, lsl r1
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__core1_unwind_stub-0xd3ff54>
    ALT_PRINTF("\n");
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__core1_unwind_stub-0xc7f3d8>
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__core1_unwind_stub-0x7d39c>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	03001605 	movweq	r1, #1541	; 0x605
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	3b0b3a0e 	blcc	2ce87c <__core1_unwind_stub-0xd31784>
      40:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__core1_unwind_stub-0xd3fb54>
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	0b3b0b3a 	bleq	ec2d3c <__core1_unwind_stub-0x13d2c4>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
      58:	3a0e0300 	bcc	380c60 <__core1_unwind_stub-0xc7f3a0>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
}
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <__core1_unwind_stub-0xffff58>
      78:	0b0b0113 	bleq	2c04cc <__core1_unwind_stub-0xd3fb34>
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	0b3b0b3a 	bleq	ec2d6c <__core1_unwind_stub-0x13d294>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__core1_unwind_stub-0xc7f370>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      *(pmem->toptr)=0;
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__core1_unwind_stub-0xd3ff24>
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__core1_unwind_stub-0xc7f354>
}
      a4:	3b0b3a0b 	blcc	2ce8d8 <__core1_unwind_stub-0xd31728>
      a8:	010b390b 	tsteq	fp, fp, lsl #18
      ac:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      b0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	0b3b0b3a 	bleq	ec2da4 <__core1_unwind_stub-0x13d25c>
      b8:	13490b39 	movtne	r0, #39737	; 0x9b39
        break;
      bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    return ALT_E_SUCCESS;
      c0:	0b000f0f 	bleq	3d04 <__core1_unwind_stub-0xffc2fc>
      c4:	0013490b 	andseq	r4, r3, fp, lsl #18
        return ALT_E_ERROR;
      c8:	01131000 	tsteq	r3, r0
}
      cc:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
      d0:	0b3b0b3a 	bleq	ec2dc0 <__core1_unwind_stub-0x13d240>
      d4:	13010b39 	movwne	r0, #6969	; 0x1b39
      d8:	0d110000 	ldceq	0, cr0, [r1, #-0]
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	3a0e0300 	bcc	380ce4 <__core1_unwind_stub-0xc7f31c>
      e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      e4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      e8:	12000005 	andne	r0, r0, #5
      ec:	19270015 	stmdbne	r7!, {r0, r2, r4}
      f0:	15130000 	ldrne	r0, [r3, #-0]
    return dst;
      f4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
}
      f8:	00130113 	andseq	r0, r3, r3, lsl r1
      fc:	00051400 	andeq	r1, r5, r0, lsl #8
     100:	00001349 	andeq	r1, r0, r9, asr #6
     104:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
     108:	16000013 			; <UNDEFINED> instruction: 0x16000013
     10c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     110:	0b3a050b 	bleq	e81544 <__core1_unwind_stub-0x17eabc>
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
     114:	0b39053b 	bleq	e41608 <__core1_unwind_stub-0x1be9f8>
     118:	00001301 	andeq	r1, r0, r1, lsl #6
     11c:	03000d17 	movweq	r0, #3351	; 0xd17
     120:	3b0b3a0e 	blcc	2ce960 <__core1_unwind_stub-0xd316a0>
     124:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     128:	000b3813 	andeq	r3, fp, r3, lsl r8
     12c:	000d1800 	andeq	r1, sp, r0, lsl #16
     130:	0b3a0e03 	bleq	e83944 <__core1_unwind_stub-0x17c6bc>
     134:	0b39053b 	bleq	e41628 <__core1_unwind_stub-0x1be9d8>
     138:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	13190000 	tstne	r9, #0
     140:	0b0e0301 	bleq	380d4c <__core1_unwind_stub-0xc7f2b4>
     144:	3b0b3a0b 	blcc	2ce978 <__core1_unwind_stub-0xd31688>
     148:	010b3905 	tsteq	fp, r5, lsl #18
     14c:	1a000013 	bne	1a0 <__core1_unwind_stub-0xfffe60>
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	0b0b0113 	bleq	2c05a4 <__core1_unwind_stub-0xd3fa5c>
     154:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     158:	13010b39 	movwne	r0, #6969	; 0x1b39
     15c:	171b0000 	ldrne	r0, [fp, -r0]
     160:	3a0b0b01 	bcc	2c2d6c <__core1_unwind_stub-0xd3d294>
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     168:	0013010b 	andseq	r0, r3, fp, lsl #2
     16c:	000d1c00 	andeq	r1, sp, r0, lsl #24
     170:	0b3a0e03 	bleq	e83984 <__core1_unwind_stub-0x17c67c>
     174:	0b39053b 	bleq	e41668 <__core1_unwind_stub-0x1be998>
    return ALT_E_SUCCESS;
     178:	00001349 	andeq	r1, r0, r9, asr #6
}
     17c:	0300131d 	movweq	r1, #797	; 0x31d
     180:	00193c0e 	andseq	r3, r9, lr, lsl #24
     184:	01151e00 	tsteq	r5, r0, lsl #28
    while (coalesce->size)
     188:	13011927 	movwne	r1, #6439	; 0x1927
     18c:	341f0000 	ldrcc	r0, [pc], #-0	; 194 <__core1_unwind_stub-0xfffe6c>
            break;
     190:	3a0e0300 	bcc	380d98 <__core1_unwind_stub-0xc7f268>
    *segpa   = thissegpa;
     194:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	3f13490b 	svccc	0x0013490b
     19c:	00193c19 	andseq	r3, r9, r9, lsl ip
    *segsize = thissegsize;
     1a0:	00342000 	eorseq	r2, r4, r0
     1a4:	0b3a0e03 	bleq	e839b8 <__core1_unwind_stub-0x17c648>
     1a8:	0b390b3b 	bleq	e42e9c <__core1_unwind_stub-0x1bd164>
    return ALT_E_SUCCESS;
     1ac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
}
     1b0:	0000193c 	andeq	r1, r0, ip, lsr r9
     1b4:	03010421 	movweq	r0, #5153	; 0x1421
     1b8:	0b0b3e0e 	bleq	2cf9f8 <__core1_unwind_stub-0xd30608>
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	3a13490b 	bcc	4d25f0 <__core1_unwind_stub-0xb2da10>
     1c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1c4:	0013010b 	andseq	r0, r3, fp, lsl #2
     1c8:	00282200 	eoreq	r2, r8, r0, lsl #4
     1cc:	0b1c0e03 	bleq	7039e0 <__core1_unwind_stub-0x8fc620>
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	34230000 	strtcc	r0, [r3], #-0
     1d4:	3a0e0300 	bcc	380ddc <__core1_unwind_stub-0xc7f224>
     1d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1dc:	3f13490b 	svccc	0x0013490b
     1e0:	00180219 	andseq	r0, r8, r9, lsl r2
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
     1e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     1ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     1f0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     1f4:	01111349 	tsteq	r1, r9, asr #6
     1f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1fc:	01194296 			; <UNDEFINED> instruction: 0x01194296
     200:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     204:	08030005 	stmdaeq	r3, {r0, r2}
     208:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     20c:	13490b39 	movtne	r0, #39737	; 0x9b39
     210:	00001802 	andeq	r1, r0, r2, lsl #16
        clkStep += clk100;
     214:	03000526 	movweq	r0, #1318	; 0x526
     218:	3b0b3a0e 	blcc	2cea58 <__core1_unwind_stub-0xd315a8>
     21c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     220:	00180213 	andseq	r0, r8, r3, lsl r2
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	00342700 	eorseq	r2, r4, r0, lsl #14
     228:	0b3a0e03 	bleq	e83a3c <__core1_unwind_stub-0x17c5c4>
     22c:	0b39053b 	bleq	e41720 <__core1_unwind_stub-0x1be8e0>
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     234:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     238:	3a0e0301 	bcc	380e44 <__core1_unwind_stub-0xc7f1bc>
     23c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     244:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     248:	97184006 	ldrls	r4, [r8, -r6]
     24c:	13011942 	movwne	r1, #6466	; 0x1942
     250:	34290000 	strtcc	r0, [r9], #-0
     254:	3a080300 	bcc	200e5c <__core1_unwind_stub-0xdff1a4>
     258:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     260:	2a000018 	bcs	2c8 <__core1_unwind_stub-0xfffd38>
     264:	0e03012e 	adfeqsp	f0, f3, #0.5
     268:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     26c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     270:	01111349 	tsteq	r1, r9, asr #6
     274:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     278:	01194296 			; <UNDEFINED> instruction: 0x01194296
     27c:	2b000013 	blcs	2d0 <__core1_unwind_stub-0xfffd30>
     280:	0e03012e 	adfeqsp	f0, f3, #0.5
     284:	0b3b0b3a 	bleq	ec2f74 <__core1_unwind_stub-0x13d08c>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     28c:	01111349 	tsteq	r1, r9, asr #6
     290:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	01194296 			; <UNDEFINED> instruction: 0x01194296
     298:	2c000013 	stccs	0, cr0, [r0], {19}
     29c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     2a0:	0b3b0b3a 	bleq	ec2f90 <__core1_unwind_stub-0x13d070>
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	13490b39 	movtne	r0, #39737	; 0x9b39
     2a8:	00001802 	andeq	r1, r0, r2, lsl #16
     2ac:	0300342d 	movweq	r3, #1069	; 0x42d
     2b0:	3b0b3a0e 	blcc	2ceaf0 <__core1_unwind_stub-0xd31510>
     2b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     2b8:	00180213 	andseq	r0, r8, r3, lsl r2
     2bc:	00342e00 	eorseq	r2, r4, r0, lsl #28
     2c0:	0b3a0803 	bleq	e822d4 <__core1_unwind_stub-0x17dd2c>
     2c4:	0b390b3b 	bleq	e42fb8 <__core1_unwind_stub-0x1bd048>
     2c8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     2cc:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	03193f01 	tsteq	r9, #1, 30
     2d4:	3b0b3a0e 	blcc	2ceb14 <__core1_unwind_stub-0xd314ec>
     2d8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	11134919 	tstne	r3, r9, lsl r9
     2e0:	40061201 	andmi	r1, r6, r1, lsl #4
     2e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     2e8:	00001301 	andeq	r1, r0, r1, lsl #6
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	3f012e30 	svccc	0x00012e30
     2f0:	3a0e0319 	bcc	380f5c <__core1_unwind_stub-0xc7f0a4>
     2f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2f8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     2fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     300:	97184006 	ldrls	r4, [r8, -r6]
     304:	13011942 	movwne	r1, #6466	; 0x1942
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
     30c:	03193f01 	tsteq	r9, #1, 30
     310:	3b0b3a0e 	blcc	2ceb50 <__core1_unwind_stub-0xd314b0>
     314:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     318:	11134919 	tstne	r3, r9, lsl r9
     31c:	40061201 	andmi	r1, r6, r1, lsl #4
     320:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	05320000 	ldreq	r0, [r2, #-0]!
     328:	3a080300 	bcc	200f30 <__core1_unwind_stub-0xdff0d0>
     32c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     334:	00000018 	andeq	r0, r0, r8, lsl r0
     338:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     33c:	030b130e 	movweq	r1, #45838	; 0xb30e
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     344:	10011117 	andne	r1, r1, r7, lsl r1
     348:	02000017 	andeq	r0, r0, #23
     34c:	0b0b0024 	bleq	2c03e4 <__core1_unwind_stub-0xd3fc1c>
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     354:	16030000 	strne	r0, [r3], -r0
     358:	3a0e0300 	bcc	380f60 <__core1_unwind_stub-0xc7f0a0>
     35c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     360:	0013490b 	andseq	r4, r3, fp, lsl #18
     364:	00240400 	eoreq	r0, r4, r0, lsl #8
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	0b3e0b0b 	bleq	f82f9c <__core1_unwind_stub-0x7d064>
     36c:	00000e03 	andeq	r0, r0, r3, lsl #28
     370:	03010405 	movweq	r0, #5125	; 0x1405
     374:	0b0b3e0e 	bleq	2cfbb4 <__core1_unwind_stub-0xd3044c>
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	3a13490b 	bcc	4d27ac <__core1_unwind_stub-0xb2d854>
     37c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     380:	0013010b 	andseq	r0, r3, fp, lsl #2
     384:	00280600 	eoreq	r0, r8, r0, lsl #12
     388:	0b1c0e03 	bleq	703b9c <__core1_unwind_stub-0x8fc464>
     38c:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     394:	08000005 	stmdaeq	r0, {r0, r2}
     398:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     39c:	0b3a0b0b 	bleq	e82fd0 <__core1_unwind_stub-0x17d030>
     3a0:	0b390b3b 	bleq	e43094 <__core1_unwind_stub-0x1bcf6c>
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	00001301 	andeq	r1, r0, r1, lsl #6
     3a8:	03000d09 	movweq	r0, #3337	; 0xd09
     3ac:	3b0b3a0e 	blcc	2cebec <__core1_unwind_stub-0xd31414>
     3b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     3b4:	000b3813 	andeq	r3, fp, r3, lsl r8
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	000d0a00 	andeq	r0, sp, r0, lsl #20
     3bc:	0b3a0803 	bleq	e823d0 <__core1_unwind_stub-0x17dc30>
     3c0:	0b390b3b 	bleq	e430b4 <__core1_unwind_stub-0x1bcf4c>
     3c4:	0b381349 	bleq	e050f0 <__core1_unwind_stub-0x1faf10>
     3c8:	0f0b0000 	svceq	0x000b0000
     3cc:	000b0b00 	andeq	r0, fp, r0, lsl #22
     3d0:	00160c00 	andseq	r0, r6, r0, lsl #24
     3d4:	0b3a0e03 	bleq	e83be8 <__core1_unwind_stub-0x17c418>
     3d8:	0b39053b 	bleq	e418cc <__core1_unwind_stub-0x1be734>
     3dc:	00001349 	andeq	r1, r0, r9, asr #6
     3e0:	0301040d 	movweq	r0, #5133	; 0x140d
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	0b0b3e0e 	bleq	2cfc24 <__core1_unwind_stub-0xd303dc>
     3e8:	3a13490b 	bcc	4d281c <__core1_unwind_stub-0xb2d7e4>
     3ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3f0:	0013010b 	andseq	r0, r3, fp, lsl #2
     3f4:	00280e00 	eoreq	r0, r8, r0, lsl #28
     3f8:	061c0e03 	ldreq	r0, [ip], -r3, lsl #28
     3fc:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     400:	03193f01 	tsteq	r9, #1, 30
     404:	3b0b3a0e 	blcc	2cec44 <__core1_unwind_stub-0xd313bc>
     408:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     40c:	11134919 	tstne	r3, r9, lsl r9
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	40061201 	andmi	r1, r6, r1, lsl #4
     414:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     418:	00001301 	andeq	r1, r0, r1, lsl #6
     41c:	03000510 	movweq	r0, #1296	; 0x510
     420:	3b0b3a0e 	blcc	2cec60 <__core1_unwind_stub-0xd313a0>
     424:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	00180213 	andseq	r0, r8, r3, lsl r2
     42c:	000f1100 	andeq	r1, pc, r0, lsl #2
     430:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     434:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     438:	03193f01 	tsteq	r9, #1, 30
     43c:	3b0b3a0e 	blcc	2cec7c <__core1_unwind_stub-0xd31384>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     444:	11134919 	tstne	r3, r9, lsl r9
     448:	40061201 	andmi	r1, r6, r1, lsl #4
     44c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     450:	00001301 	andeq	r1, r0, r1, lsl #6
     454:	11010b13 	tstne	r1, r3, lsl fp
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	00061201 	andeq	r1, r6, r1, lsl #4
     45c:	00341400 	eorseq	r1, r4, r0, lsl #8
     460:	0b3a0803 	bleq	e82474 <__core1_unwind_stub-0x17db8c>
     464:	0b39053b 	bleq	e41958 <__core1_unwind_stub-0x1be6a8>
     468:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     46c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	3a0e0301 	bcc	38107c <__core1_unwind_stub-0xc7ef84>
     474:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     478:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     47c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     480:	97184006 	ldrls	r4, [r8, -r6]
     484:	13011942 	movwne	r1, #6466	; 0x1942
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	34160000 	ldrcc	r0, [r6], #-0
     48c:	3a0e0300 	bcc	381094 <__core1_unwind_stub-0xc7ef6c>
     490:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     494:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     498:	17000018 	smladne	r0, r8, r0, r0
     49c:	13490026 	movtne	r0, #36902	; 0x9026
     4a0:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     4a4:	03193f01 	tsteq	r9, #1, 30
     4a8:	3b0b3a0e 	blcc	2cece8 <__core1_unwind_stub-0xd31318>
     4ac:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     4b0:	11134919 	tstne	r3, r9, lsl r9
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	40061201 	andmi	r1, r6, r1, lsl #4
     4b8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     4bc:	00001301 	andeq	r1, r0, r1, lsl #6
     4c0:	03000519 	movweq	r0, #1305	; 0x519
     4c4:	3b0b3a0e 	blcc	2ced04 <__core1_unwind_stub-0xd312fc>
     4c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	00180213 	andseq	r0, r8, r3, lsl r2
     4d0:	010b1a00 	tsteq	fp, r0, lsl #20
     4d4:	00001755 	andeq	r1, r0, r5, asr r7
     4d8:	0300341b 	movweq	r3, #1051	; 0x41b
     4dc:	3b0b3a0e 	blcc	2ced1c <__core1_unwind_stub-0xd312e4>
     4e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     4e4:	00180213 	andseq	r0, r8, r3, lsl r2
     4e8:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
     4ec:	0b3a0e03 	bleq	e83d00 <__core1_unwind_stub-0x17c300>
     4f0:	0b390b3b 	bleq	e431e4 <__core1_unwind_stub-0x1bce1c>
     4f4:	13491927 	movtne	r1, #39207	; 0x9927
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     4fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     500:	00130119 	andseq	r0, r3, r9, lsl r1
     504:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
     508:	0b3a0e03 	bleq	e83d1c <__core1_unwind_stub-0x17c2e4>
     50c:	0b390b3b 	bleq	e43200 <__core1_unwind_stub-0x1bce00>
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	13491927 	movtne	r1, #39207	; 0x9927
     514:	06120111 			; <UNDEFINED> instruction: 0x06120111
     518:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     51c:	00130119 	andseq	r0, r3, r9, lsl r1
     520:	00261e00 	eoreq	r1, r6, r0, lsl #28
     524:	01000000 	mrseq	r0, (UNDEF: 0)
     528:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     52c:	0e030b13 	vmoveq.32	d3[0], r0
     530:	17550e1b 	smmlane	r5, fp, lr, r0
     534:	17100111 			; <UNDEFINED> instruction: 0x17100111
     538:	24020000 	strcs	r0, [r2], #-0
     53c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     540:	0008030b 	andeq	r0, r8, fp, lsl #6
     544:	00160300 	andseq	r0, r6, r0, lsl #6
     548:	0b3a0e03 	bleq	e83d5c <__core1_unwind_stub-0x17c2a4>
     54c:	0b390b3b 	bleq	e43240 <__core1_unwind_stub-0x1bcdc0>
     550:	00001349 	andeq	r1, r0, r9, asr #6
     554:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
     558:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     55c:	0b0b0024 	bleq	2c05f4 <__core1_unwind_stub-0xd3fa0c>
     560:	0e030b3e 	vmoveq.16	d3[0], r0
     564:	04060000 	streq	r0, [r6], #-0
     568:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
     56c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
     570:	3b0b3a13 	blcc	2cedc4 <__core1_unwind_stub-0xd3123c>
     574:	010b390b 	tsteq	fp, fp, lsl #18
     578:	07000013 	smladeq	r0, r3, r0, r0
     57c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     580:	00000b1c 	andeq	r0, r0, ip, lsl fp
     584:	03001608 	movweq	r1, #1544	; 0x608
     588:	3b0b3a0e 	blcc	2cedc8 <__core1_unwind_stub-0xd31238>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     590:	09000013 	stmdbeq	r0, {r0, r1, r4}
     594:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     598:	0b3a0b0b 	bleq	e831cc <__core1_unwind_stub-0x17ce34>
     59c:	0b39053b 	bleq	e41a90 <__core1_unwind_stub-0x1be570>
     5a0:	00001301 	andeq	r1, r0, r1, lsl #6
     5a4:	03000d0a 	movweq	r0, #3338	; 0xd0a
     5a8:	3b0b3a08 	blcc	2cedd0 <__core1_unwind_stub-0xd31230>
     5ac:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     5b0:	000b3813 	andeq	r3, fp, r3, lsl r8
     5b4:	000d0b00 	andeq	r0, sp, r0, lsl #22
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0b3a0e03 	bleq	e83dcc <__core1_unwind_stub-0x17c234>
     5bc:	0b39053b 	bleq	e41ab0 <__core1_unwind_stub-0x1be550>
     5c0:	0b381349 	bleq	e052ec <__core1_unwind_stub-0x1fad14>
     5c4:	0f0c0000 	svceq	0x000c0000
     5c8:	000b0b00 	andeq	r0, fp, r0, lsl #22
     5cc:	000f0d00 	andeq	r0, pc, r0, lsl #26
     5d0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     5d4:	150e0000 	strne	r0, [lr, #-0]
     5d8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     5dc:	00130113 	andseq	r0, r3, r3, lsl r1
     5e0:	00050f00 	andeq	r0, r5, r0, lsl #30
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	00001349 	andeq	r1, r0, r9, asr #6
     5e8:	0b011710 	bleq	46230 <__core1_unwind_stub-0xfb9dd0>
     5ec:	3b0b3a0b 	blcc	2cee20 <__core1_unwind_stub-0xd311e0>
     5f0:	010b390b 	tsteq	fp, fp, lsl #18
     5f4:	11000013 	tstne	r0, r3, lsl r0
     5f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     5fc:	0b3b0b3a 	bleq	ec32ec <__core1_unwind_stub-0x13cd14>
     600:	13490b39 	movtne	r0, #39737	; 0x9b39
     604:	01120000 	tsteq	r2, r0
     608:	01134901 	tsteq	r3, r1, lsl #18
     60c:	13000013 	movwne	r0, #19
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	13490021 	movtne	r0, #36897	; 0x9021
     614:	00000b2f 	andeq	r0, r0, pc, lsr #22
     618:	0b011314 	bleq	45270 <__core1_unwind_stub-0xfbad90>
     61c:	3b0b3a0b 	blcc	2cee50 <__core1_unwind_stub-0xd311b0>
     620:	010b390b 	tsteq	fp, fp, lsl #18
     624:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     628:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     62c:	0b3b0b3a 	bleq	ec331c <__core1_unwind_stub-0x13cce4>
     630:	13490b39 	movtne	r0, #39737	; 0x9b39
     634:	00000b38 	andeq	r0, r0, r8, lsr fp
     638:	03011316 	movweq	r1, #4886	; 0x1316
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	3a0b0b0e 	bcc	2c327c <__core1_unwind_stub-0xd3cd84>
     640:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     644:	0013010b 	andseq	r0, r3, fp, lsl #2
     648:	000d1700 	andeq	r1, sp, r0, lsl #14
     64c:	0b3a0803 	bleq	e82660 <__core1_unwind_stub-0x17d9a0>
     650:	0b390b3b 	bleq	e43344 <__core1_unwind_stub-0x1bccbc>
     654:	0b381349 	bleq	e05380 <__core1_unwind_stub-0x1fac80>
     658:	13180000 	tstne	r8, #0
     65c:	0b0e0301 	bleq	381268 <__core1_unwind_stub-0xc7ed98>
     660:	3b0b3a05 	blcc	2cee7c <__core1_unwind_stub-0xd31184>
     664:	010b390b 	tsteq	fp, fp, lsl #18
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	19000013 	stmdbne	r0, {r0, r1, r4}
     66c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     670:	0b3b0b3a 	bleq	ec3360 <__core1_unwind_stub-0x13cca0>
     674:	13490b39 	movtne	r0, #39737	; 0x9b39
     678:	00000538 	andeq	r0, r0, r8, lsr r5
     67c:	2700151a 	smladcs	r0, sl, r5, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	1b000019 	blne	6ec <__core1_unwind_stub-0xfff914>
     684:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     688:	0b3a050b 	bleq	e81abc <__core1_unwind_stub-0x17e544>
     68c:	0b39053b 	bleq	e41b80 <__core1_unwind_stub-0x1be480>
     690:	00001301 	andeq	r1, r0, r1, lsl #6
     694:	03000d1c 	movweq	r0, #3356	; 0xd1c
     698:	3b0b3a0e 	blcc	2ceed8 <__core1_unwind_stub-0xd31128>
     69c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     6a0:	00053813 	andeq	r3, r5, r3, lsl r8
     6a4:	01131d00 	tsteq	r3, r0, lsl #26
     6a8:	0b3a0b0b 	bleq	e832dc <__core1_unwind_stub-0x17cd24>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	0b39053b 	bleq	e41ba0 <__core1_unwind_stub-0x1be460>
     6b0:	00001301 	andeq	r1, r0, r1, lsl #6
     6b4:	0b01171e 	bleq	46334 <__core1_unwind_stub-0xfb9ccc>
     6b8:	3b0b3a0b 	blcc	2ceeec <__core1_unwind_stub-0xd31114>
     6bc:	010b3905 	tsteq	fp, r5, lsl #18
     6c0:	1f000013 	svcne	0x00000013
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     6c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6cc:	13490b39 	movtne	r0, #39737	; 0x9b39
     6d0:	13200000 	nopne	{0}	; <UNPREDICTABLE>
     6d4:	3c0e0300 	stccc	3, cr0, [lr], {-0}
     6d8:	21000019 	tstcs	r0, r9, lsl r0
     6dc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     6e0:	00001301 	andeq	r1, r0, r1, lsl #6
     6e4:	03003422 	movweq	r3, #1058	; 0x422
     6e8:	3b0b3a0e 	blcc	2cef28 <__core1_unwind_stub-0xd310d8>
     6ec:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     6f0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     6f4:	23000019 	movwcs	r0, #25
     6f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     6fc:	0b3b0b3a 	bleq	ec33ec <__core1_unwind_stub-0x13cc14>
     700:	13490b39 	movtne	r0, #39737	; 0x9b39
     704:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     70c:	03193f01 	tsteq	r9, #1, 30
     710:	3b0b3a0e 	blcc	2cef50 <__core1_unwind_stub-0xd310b0>
     714:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     718:	11134919 	tstne	r3, r9, lsl r9
     71c:	40061201 	andmi	r1, r6, r1, lsl #4
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     724:	00001301 	andeq	r1, r0, r1, lsl #6
     728:	03000525 	movweq	r0, #1317	; 0x525
     72c:	3b0b3a0e 	blcc	2cef6c <__core1_unwind_stub-0xd31094>
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     734:	00180213 	andseq	r0, r8, r3, lsl r2
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	00342600 	eorseq	r2, r4, r0, lsl #12
     73c:	0b3a0e03 	bleq	e83f50 <__core1_unwind_stub-0x17c0b0>
     740:	0b39053b 	bleq	e41c34 <__core1_unwind_stub-0x1be3cc>
     744:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	0b270000 	bleq	9c0750 <__core1_unwind_stub-0x63f8b0>
     74c:	00175501 	andseq	r5, r7, r1, lsl #10
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	00052800 	andeq	r2, r5, r0, lsl #16
     754:	0b3a0803 	bleq	e82768 <__core1_unwind_stub-0x17d898>
     758:	0b39053b 	bleq	e41c4c <__core1_unwind_stub-0x1be3b4>
     75c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     760:	26290000 	strtcs	r0, [r9], -r0
     764:	2a000000 	bcs	76c <__core1_unwind_stub-0xfff894>
     768:	08030034 	stmdaeq	r3, {r2, r4, r5}
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     770:	13490b39 	movtne	r0, #39737	; 0x9b39
     774:	00001802 	andeq	r1, r0, r2, lsl #16
     778:	11010b2b 	tstne	r1, fp, lsr #22
     77c:	01061201 	tsteq	r6, r1, lsl #4
     780:	2c000013 	stccs	0, cr0, [r0], {19}
     784:	0111010b 	tsteq	r1, fp, lsl #2
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	00000612 	andeq	r0, r0, r2, lsl r6
     78c:	4900212d 	stmdbmi	r0, {r0, r2, r3, r5, r8, sp}
     790:	00052f13 	andeq	r2, r5, r3, lsl pc
     794:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     798:	0b3a0e03 	bleq	e83fac <__core1_unwind_stub-0x17c054>
     79c:	0b39053b 	bleq	e41c90 <__core1_unwind_stub-0x1be370>
     7a0:	13491927 	movtne	r1, #39207	; 0x9927
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7ac:	00130119 	andseq	r0, r3, r9, lsl r1
     7b0:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
     7b4:	0b3a0e03 	bleq	e83fc8 <__core1_unwind_stub-0x17c038>
     7b8:	0b39053b 	bleq	e41cac <__core1_unwind_stub-0x1be354>
     7bc:	13491927 	movtne	r1, #39207	; 0x9927
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     7c8:	00130119 	andseq	r0, r3, r9, lsl r1
     7cc:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     7d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7d8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	01111349 	tsteq	r1, r9, asr #6
     7e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     7e4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     7e8:	31000013 	tstcc	r0, r3, lsl r0
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     7f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7f4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     7f8:	00000b57 	andeq	r0, r0, r7, asr fp
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	31000532 	tstcc	r0, r2, lsr r5
     800:	00180213 	andseq	r0, r8, r3, lsl r2
     804:	011d3300 	tsteq	sp, r0, lsl #6
     808:	01111331 	tsteq	r1, r1, lsr r3
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	0b580612 	bleq	160205c <__bss_end__+0x5e605c>
     810:	0b570559 	bleq	15c1d7c <__bss_end__+0x5a5d7c>
     814:	00001301 	andeq	r1, r0, r1, lsl #6
     818:	31003434 	tstcc	r0, r4, lsr r4
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	00180213 	andseq	r0, r8, r3, lsl r2
     820:	002e3500 	eoreq	r3, lr, r0, lsl #10
     824:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     82c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     830:	01111349 	tsteq	r1, r9, asr #6
     834:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	00194297 	mulseq	r9, r7, r2
     83c:	012e3600 			; <UNDEFINED> instruction: 0x012e3600
     840:	0b3a0e03 	bleq	e84054 <__core1_unwind_stub-0x17bfac>
     844:	0b39053b 	bleq	e41d38 <__core1_unwind_stub-0x1be2c8>
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	0b201927 	bleq	806cec <__core1_unwind_stub-0x7f9314>
     84c:	00001301 	andeq	r1, r0, r1, lsl #6
     850:	03000537 	movweq	r0, #1335	; 0x537
     854:	3b0b3a0e 	blcc	2cf094 <__core1_unwind_stub-0xd30f6c>
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     85c:	38000013 	stmdacc	r0, {r0, r1, r4}
     860:	0e03012e 	adfeqsp	f0, f3, #0.5
     864:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     868:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     86c:	0b201349 	bleq	805598 <__core1_unwind_stub-0x7faa68>
     870:	00001301 	andeq	r1, r0, r1, lsl #6
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	03003439 	movweq	r3, #1081	; 0x439
     878:	3b0b3a0e 	blcc	2cf0b8 <__core1_unwind_stub-0xd30f48>
     87c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	3a000013 	bcc	8d4 <__core1_unwind_stub-0xfff72c>
     884:	0e03012e 	adfeqsp	f0, f3, #0.5
     888:	0b3b0b3a 	bleq	ec3578 <__core1_unwind_stub-0x13ca88>
     88c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	13010b20 	movwne	r0, #6944	; 0x1b20
     894:	053b0000 	ldreq	r0, [fp, #-0]!
     898:	3a0e0300 	bcc	3814a0 <__core1_unwind_stub-0xc7eb60>
     89c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	0013490b 	andseq	r4, r3, fp, lsl #18
     8a4:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
     8a8:	0b3a0e03 	bleq	e840bc <__core1_unwind_stub-0x17bf44>
     8ac:	0b390b3b 	bleq	e435a0 <__core1_unwind_stub-0x1bca60>
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	13491927 	movtne	r1, #39207	; 0x9927
     8b4:	13010b20 	movwne	r0, #6944	; 0x1b20
     8b8:	343d0000 	ldrtcc	r0, [sp], #-0
     8bc:	3a0e0300 	bcc	3814c4 <__core1_unwind_stub-0xc7eb3c>
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     8c8:	012e3e00 			; <UNDEFINED> instruction: 0x012e3e00
     8cc:	0b3a0e03 	bleq	e840e0 <__core1_unwind_stub-0x17bf20>
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	0b390b3b 	bleq	e435c4 <__core1_unwind_stub-0x1bca3c>
     8d4:	13491927 	movtne	r1, #39207	; 0x9927
     8d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    return ALT_E_SUCCESS;
     8e0:	3f000019 	svccc	0x00000019
}
     8e4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     8e8:	0b3b0b3a 	bleq	ec35d8 <__core1_unwind_stub-0x13ca28>
     8ec:	13490b39 	movtne	r0, #39737	; 0x9b39
     8f0:	00001802 	andeq	r1, r0, r2, lsl #16
     8f4:	00001840 	andeq	r1, r0, r0, asr #16
     8f8:	11010000 	mrsne	r0, (UNDEF: 1)
     8fc:	130e2501 	movwne	r2, #58625	; 0xe501
     900:	1b0e030b 	blne	381534 <__core1_unwind_stub-0xc7eacc>
     904:	1117550e 	tstne	r7, lr, lsl #10
     908:	00171001 	andseq	r1, r7, r1
     90c:	00240200 	eoreq	r0, r4, r0, lsl #4
     910:	0b3e0b0b 	bleq	f83544 <__core1_unwind_stub-0x7cabc>
     914:	00000803 	andeq	r0, r0, r3, lsl #16
     918:	03001603 	movweq	r1, #1539	; 0x603
     91c:	3b0b3a0e 	blcc	2cf15c <__core1_unwind_stub-0xd30ea4>
     920:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     924:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     928:	0b0b0024 	bleq	2c09c0 <__core1_unwind_stub-0xd3f640>
     92c:	0e030b3e 	vmoveq.16	d3[0], r0
     930:	13050000 	movwne	r0, #20480	; 0x5000
     934:	0b0e0301 	bleq	381540 <__core1_unwind_stub-0xc7eac0>
     938:	3b0b3a0b 	blcc	2cf16c <__core1_unwind_stub-0xd30e94>
     93c:	0013010b 	andseq	r0, r3, fp, lsl #2
     940:	000d0600 	andeq	r0, sp, r0, lsl #12
     944:	13490e03 	movtne	r0, #40451	; 0x9e03
     948:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
     94c:	0f070000 	svceq	0x00070000
     950:	000b0b00 	andeq	r0, fp, r0, lsl #22
     954:	00160800 	andseq	r0, r6, r0, lsl #16
     958:	0b3a0e03 	bleq	e8416c <__core1_unwind_stub-0x17be94>
     95c:	0b39053b 	bleq	e41e50 <__core1_unwind_stub-0x1be1b0>
     960:	00001349 	andeq	r1, r0, r9, asr #6
     964:	0b011709 	bleq	46590 <__core1_unwind_stub-0xfb9a70>
     968:	3b0b3a0b 	blcc	2cf19c <__core1_unwind_stub-0xd30e64>
     96c:	010b390b 	tsteq	fp, fp, lsl #18
     970:	0a000013 	beq	9c4 <__core1_unwind_stub-0xfff63c>
     974:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     978:	0b3b0b3a 	bleq	ec3668 <__core1_unwind_stub-0x13c998>
     97c:	13490b39 	movtne	r0, #39737	; 0x9b39
     980:	010b0000 	mrseq	r0, (UNDEF: 11)
     984:	01134901 	tsteq	r3, r1, lsl #18
     988:	0c000013 	stceq	0, cr0, [r0], {19}
     98c:	13490021 	movtne	r0, #36897	; 0x9021
     990:	00000b2f 	andeq	r0, r0, pc, lsr #22
     994:	0b01130d 	bleq	455d0 <__core1_unwind_stub-0xfbaa30>
     998:	3b0b3a0b 	blcc	2cf1cc <__core1_unwind_stub-0xd30e34>
     99c:	010b390b 	tsteq	fp, fp, lsl #18
     9a0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     9a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     9a8:	0b3b0b3a 	bleq	ec3698 <__core1_unwind_stub-0x13c968>
     9ac:	13490b39 	movtne	r0, #39737	; 0x9b39
     9b0:	00000b38 	andeq	r0, r0, r8, lsr fp
     9b4:	0301130f 	movweq	r1, #4879	; 0x130f
     9b8:	3a0b0b0e 	bcc	2c35f8 <__core1_unwind_stub-0xd3ca08>
     9bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9c0:	0013010b 	andseq	r0, r3, fp, lsl #2
     9c4:	000d1000 	andeq	r1, sp, r0
     9c8:	0b3a0803 	bleq	e829dc <__core1_unwind_stub-0x17d624>
     9cc:	0b390b3b 	bleq	e436c0 <__core1_unwind_stub-0x1bc940>
     9d0:	0b381349 	bleq	e056fc <__core1_unwind_stub-0x1fa904>
     9d4:	0f110000 	svceq	0x00110000
     9d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     9dc:	12000013 	andne	r0, r0, #19
     9e0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     9e4:	0b3a050b 	bleq	e81e18 <__core1_unwind_stub-0x17e1e8>
     9e8:	0b390b3b 	bleq	e436dc <__core1_unwind_stub-0x1bc924>
     9ec:	00001301 	andeq	r1, r0, r1, lsl #6
     9f0:	03000d13 	movweq	r0, #3347	; 0xd13
     9f4:	3b0b3a0e 	blcc	2cf234 <__core1_unwind_stub-0xd30dcc>
     9f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     9fc:	00053813 	andeq	r3, r5, r3, lsl r8
     a00:	00151400 	andseq	r1, r5, r0, lsl #8
     a04:	00001927 	andeq	r1, r0, r7, lsr #18
     a08:	27011515 	smladcs	r1, r5, r5, r1
     a0c:	01134919 	tsteq	r3, r9, lsl r9
     a10:	16000013 			; <UNDEFINED> instruction: 0x16000013
     a14:	13490005 	movtne	r0, #36869	; 0x9005
     a18:	26170000 	ldrcs	r0, [r7], -r0
     a1c:	00134900 	andseq	r4, r3, r0, lsl #18
     a20:	01131800 	tsteq	r3, r0, lsl #16
     a24:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     a28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a2c:	13010b39 	movwne	r0, #6969	; 0x1b39
     a30:	0d190000 	ldceq	0, cr0, [r9, #-0]
     a34:	3a0e0300 	bcc	38163c <__core1_unwind_stub-0xc7e9c4>
     a38:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a3c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     a40:	1a00000b 	bne	a74 <__core1_unwind_stub-0xfff58c>
     a44:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a4c:	13490b39 	movtne	r0, #39737	; 0x9b39
     a50:	00000538 	andeq	r0, r0, r8, lsr r5
     a54:	0301131b 	movweq	r1, #4891	; 0x131b
     a58:	3a0b0b0e 	bcc	2c3698 <__core1_unwind_stub-0xd3c968>
     a5c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a60:	0013010b 	andseq	r0, r3, fp, lsl #2
     a64:	01131c00 	tsteq	r3, r0, lsl #24
     a68:	0b3a0b0b 	bleq	e8369c <__core1_unwind_stub-0x17c964>
     a6c:	0b39053b 	bleq	e41f60 <__core1_unwind_stub-0x1be0a0>
     a70:	00001301 	andeq	r1, r0, r1, lsl #6
     a74:	0b01171d 	bleq	466f0 <__core1_unwind_stub-0xfb9910>
     a78:	3b0b3a0b 	blcc	2cf2ac <__core1_unwind_stub-0xd30d54>
     a7c:	010b3905 	tsteq	fp, r5, lsl #18
     a80:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     a84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a8c:	13490b39 	movtne	r0, #39737	; 0x9b39
     a90:	131f0000 	tstne	pc, #0
     a94:	3c0e0300 	stccc	3, cr0, [lr], {-0}
     a98:	20000019 	andcs	r0, r0, r9, lsl r0
     a9c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     aa0:	00001301 	andeq	r1, r0, r1, lsl #6
     aa4:	03003421 	movweq	r3, #1057	; 0x421
     aa8:	3b0b3a0e 	blcc	2cf2e8 <__core1_unwind_stub-0xd30d18>
     aac:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ab0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     ab4:	22000019 	andcs	r0, r0, #25
     ab8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     abc:	0b3b0b3a 	bleq	ec37ac <__core1_unwind_stub-0x13c854>
     ac0:	13490b39 	movtne	r0, #39737	; 0x9b39
     ac4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     ac8:	34230000 	strtcc	r0, [r3], #-0
     acc:	3a134700 	bcc	4d26d4 <__core1_unwind_stub-0xb2d92c>
     ad0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ad4:	0018020b 	andseq	r0, r8, fp, lsl #4
     ad8:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
     adc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     ae0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ae4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     ae8:	01111349 	tsteq	r1, r9, asr #6
     aec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     af0:	01194296 			; <UNDEFINED> instruction: 0x01194296
     af4:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     af8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     afc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b00:	13490b39 	movtne	r0, #39737	; 0x9b39
     b04:	00001802 	andeq	r1, r0, r2, lsl #16
     b08:	03003426 	movweq	r3, #1062	; 0x426
     b0c:	3b0b3a0e 	blcc	2cf34c <__core1_unwind_stub-0xd30cb4>
     b10:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     b14:	00180213 	andseq	r0, r8, r3, lsl r2
     b18:	00342700 	eorseq	r2, r4, r0, lsl #14
     b1c:	0b3a0803 	bleq	e82b30 <__core1_unwind_stub-0x17d4d0>
     b20:	0b39053b 	bleq	e42014 <__core1_unwind_stub-0x1bdfec>
     b24:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b28:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     b2c:	3a0e0301 	bcc	381738 <__core1_unwind_stub-0xc7e8c8>
     b30:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b34:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b38:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b3c:	96184006 	ldrls	r4, [r8], -r6
     b40:	13011942 	movwne	r1, #6466	; 0x1942
     b44:	05290000 	streq	r0, [r9, #-0]!
     b48:	3a080300 	bcc	201750 <__core1_unwind_stub-0xdfe8b0>
     b4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b50:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b54:	2a000018 	bcs	bbc <__core1_unwind_stub-0xfff444>
     b58:	0e03012e 	adfeqsp	f0, f3, #0.5
     b5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b60:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     b64:	01111349 	tsteq	r1, r9, asr #6
     b68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b6c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b70:	2b000013 	blcs	bc4 <__core1_unwind_stub-0xfff43c>
     b74:	0e03012e 	adfeqsp	f0, f3, #0.5
     b78:	0b3b0b3a 	bleq	ec3868 <__core1_unwind_stub-0x13c798>
     b7c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     b80:	01111349 	tsteq	r1, r9, asr #6
     b84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b88:	01194296 			; <UNDEFINED> instruction: 0x01194296
     b8c:	2c000013 	stccs	0, cr0, [r0], {19}
     b90:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b94:	0b3b0b3a 	bleq	ec3884 <__core1_unwind_stub-0x13c77c>
     b98:	13490b39 	movtne	r0, #39737	; 0x9b39
     b9c:	00001802 	andeq	r1, r0, r2, lsl #16
     ba0:	0300052d 	movweq	r0, #1325	; 0x52d
     ba4:	3b0b3a08 	blcc	2cf3cc <__core1_unwind_stub-0xd30c34>
     ba8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     bac:	00180213 	andseq	r0, r8, r3, lsl r2
     bb0:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     bb4:	0b3a0e03 	bleq	e843c8 <__core1_unwind_stub-0x17bc38>
     bb8:	0b390b3b 	bleq	e438ac <__core1_unwind_stub-0x1bc754>
     bbc:	13491927 	movtne	r1, #39207	; 0x9927
     bc0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     bc4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     bc8:	00130119 	andseq	r0, r3, r9, lsl r1
     bcc:	00342f00 	eorseq	r2, r4, r0, lsl #30
     bd0:	0b3a0803 	bleq	e82be4 <__core1_unwind_stub-0x17d41c>
     bd4:	0b390b3b 	bleq	e438c8 <__core1_unwind_stub-0x1bc738>
     bd8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     bdc:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
     be0:	3a0e0301 	bcc	3817ec <__core1_unwind_stub-0xc7e814>
     be4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     be8:	1119270b 	tstne	r9, fp, lsl #14
     bec:	40061201 	andmi	r1, r6, r1, lsl #4
     bf0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     bf4:	00001301 	andeq	r1, r0, r1, lsl #6
     bf8:	3f012e31 	svccc	0x00012e31
     bfc:	3a0e0319 	bcc	381868 <__core1_unwind_stub-0xc7e798>
     c00:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c04:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     c08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c0c:	96184006 	ldrls	r4, [r8], -r6
     c10:	13011942 	movwne	r1, #6466	; 0x1942
     c14:	18320000 	ldmdane	r2!, {}	; <UNPREDICTABLE>
     c18:	33000000 	movwcc	r0, #0
     c1c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c20:	0b3b0b3a 	bleq	ec3910 <__core1_unwind_stub-0x13c6f0>
     c24:	13490b39 	movtne	r0, #39737	; 0x9b39
     c28:	00001802 	andeq	r1, r0, r2, lsl #16
     c2c:	03012e34 	movweq	r2, #7732	; 0x1e34
     c30:	3b0b3a0e 	blcc	2cf470 <__core1_unwind_stub-0xd30b90>
     c34:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     c38:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c3c:	97184006 	ldrls	r4, [r8, -r6]
     c40:	13011942 	movwne	r1, #6466	; 0x1942
     c44:	26350000 	ldrtcs	r0, [r5], -r0
     c48:	36000000 	strcc	r0, [r0], -r0
     c4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c50:	0b3a0e03 	bleq	e84464 <__core1_unwind_stub-0x17bb9c>
     c54:	0b390b3b 	bleq	e43948 <__core1_unwind_stub-0x1bc6b8>
     c58:	13491927 	movtne	r1, #39207	; 0x9927
     c5c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c60:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     c64:	00000019 	andeq	r0, r0, r9, lsl r0
     c68:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     c6c:	030b130e 	movweq	r1, #45838	; 0xb30e
     c70:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     c74:	10011117 	andne	r1, r1, r7, lsl r1
     c78:	02000017 	andeq	r0, r0, #23
     c7c:	0b0b0024 	bleq	2c0d14 <__core1_unwind_stub-0xd3f2ec>
     c80:	0e030b3e 	vmoveq.16	d3[0], r0
     c84:	16030000 	strne	r0, [r3], -r0
     c88:	3a0e0300 	bcc	381890 <__core1_unwind_stub-0xc7e770>
     c8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c90:	0013490b 	andseq	r4, r3, fp, lsl #18
     c94:	00240400 	eoreq	r0, r4, r0, lsl #8
     c98:	0b3e0b0b 	bleq	f838cc <__core1_unwind_stub-0x7c734>
     c9c:	00000803 	andeq	r0, r0, r3, lsl #16
     ca0:	03010405 	movweq	r0, #5125	; 0x1405
     ca4:	0b0b3e0e 	bleq	2d04e4 <__core1_unwind_stub-0xd2fb1c>
     ca8:	3a13490b 	bcc	4d30dc <__core1_unwind_stub-0xb2cf24>
     cac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cb0:	0013010b 	andseq	r0, r3, fp, lsl #2
     cb4:	00280600 	eoreq	r0, r8, r0, lsl #12
     cb8:	0b1c0e03 	bleq	7044cc <__core1_unwind_stub-0x8fbb34>
     cbc:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     cc0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     cc4:	08000005 	stmdaeq	r0, {r0, r2}
     cc8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     ccc:	0b3a0b0b 	bleq	e83900 <__core1_unwind_stub-0x17c700>
     cd0:	0b390b3b 	bleq	e439c4 <__core1_unwind_stub-0x1bc63c>
     cd4:	00001301 	andeq	r1, r0, r1, lsl #6
     cd8:	03000d09 	movweq	r0, #3337	; 0xd09
     cdc:	3b0b3a0e 	blcc	2cf51c <__core1_unwind_stub-0xd30ae4>
     ce0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ce4:	000b3813 	andeq	r3, fp, r3, lsl r8
     ce8:	000d0a00 	andeq	r0, sp, r0, lsl #20
     cec:	0b3a0803 	bleq	e82d00 <__core1_unwind_stub-0x17d300>
     cf0:	0b390b3b 	bleq	e439e4 <__core1_unwind_stub-0x1bc61c>
     cf4:	0b381349 	bleq	e05a20 <__core1_unwind_stub-0x1fa5e0>
     cf8:	0f0b0000 	svceq	0x000b0000
     cfc:	000b0b00 	andeq	r0, fp, r0, lsl #22
     d00:	01040c00 	tsteq	r4, r0, lsl #24
     d04:	0b3e0e03 	bleq	f84518 <__core1_unwind_stub-0x7bae8>
     d08:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     d0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d10:	13010b39 	movwne	r0, #6969	; 0x1b39
     d14:	160d0000 	strne	r0, [sp], -r0
     d18:	3a0e0300 	bcc	381920 <__core1_unwind_stub-0xc7e6e0>
     d1c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d20:	0013490b 	andseq	r4, r3, fp, lsl #18
     d24:	01170e00 	tsteq	r7, r0, lsl #28
     d28:	0b3a0b0b 	bleq	e8395c <__core1_unwind_stub-0x17c6a4>
     d2c:	0b390b3b 	bleq	e43a20 <__core1_unwind_stub-0x1bc5e0>
     d30:	00001301 	andeq	r1, r0, r1, lsl #6
     d34:	03000d0f 	movweq	r0, #3343	; 0xd0f
     d38:	3b0b3a0e 	blcc	2cf578 <__core1_unwind_stub-0xd30a88>
     d3c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d40:	10000013 	andne	r0, r0, r3, lsl r0
     d44:	13490101 	movtne	r0, #37121	; 0x9101
     d48:	00001301 	andeq	r1, r0, r1, lsl #6
     d4c:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
     d50:	000b2f13 	andeq	r2, fp, r3, lsl pc
     d54:	01131200 	tsteq	r3, r0, lsl #4
     d58:	0b3a0b0b 	bleq	e8398c <__core1_unwind_stub-0x17c674>
     d5c:	0b390b3b 	bleq	e43a50 <__core1_unwind_stub-0x1bc5b0>
     d60:	00001301 	andeq	r1, r0, r1, lsl #6
     d64:	0b000f13 	bleq	49b8 <__core1_unwind_stub-0xffb648>
     d68:	0013490b 	andseq	r4, r3, fp, lsl #18
     d6c:	01131400 	tsteq	r3, r0, lsl #8
     d70:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     d74:	0b3b0b3a 	bleq	ec3a64 <__core1_unwind_stub-0x13c59c>
     d78:	13010b39 	movwne	r0, #6969	; 0x1b39
     d7c:	0d150000 	ldceq	0, cr0, [r5, #-0]
     d80:	3a0e0300 	bcc	381988 <__core1_unwind_stub-0xc7e678>
     d84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d88:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d8c:	16000005 	strne	r0, [r0], -r5
     d90:	19270015 	stmdbne	r7!, {r0, r2, r4}
     d94:	15170000 	ldrne	r0, [r7, #-0]
     d98:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     d9c:	00130113 	andseq	r0, r3, r3, lsl r1
     da0:	00051800 	andeq	r1, r5, r0, lsl #16
     da4:	00001349 	andeq	r1, r0, r9, asr #6
     da8:	49002619 	stmdbmi	r0, {r0, r3, r4, r9, sl, sp}
     dac:	1a000013 	bne	e00 <__core1_unwind_stub-0xfff200>
     db0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     db4:	0b3a050b 	bleq	e821e8 <__core1_unwind_stub-0x17de18>
     db8:	0b39053b 	bleq	e422ac <__core1_unwind_stub-0x1bdd54>
     dbc:	00001301 	andeq	r1, r0, r1, lsl #6
     dc0:	03000d1b 	movweq	r0, #3355	; 0xd1b
     dc4:	3b0b3a0e 	blcc	2cf604 <__core1_unwind_stub-0xd309fc>
     dc8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     dcc:	000b3813 	andeq	r3, fp, r3, lsl r8
     dd0:	000d1c00 	andeq	r1, sp, r0, lsl #24
     dd4:	0b3a0e03 	bleq	e845e8 <__core1_unwind_stub-0x17ba18>
     dd8:	0b39053b 	bleq	e422cc <__core1_unwind_stub-0x1bdd34>
     ddc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     de0:	131d0000 	tstne	sp, #0
     de4:	0b0e0301 	bleq	3819f0 <__core1_unwind_stub-0xc7e610>
     de8:	3b0b3a0b 	blcc	2cf61c <__core1_unwind_stub-0xd309e4>
     dec:	010b3905 	tsteq	fp, r5, lsl #18
     df0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     df4:	0b0b0113 	bleq	2c1248 <__core1_unwind_stub-0xd3edb8>
     df8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     dfc:	13010b39 	movwne	r0, #6969	; 0x1b39
     e00:	171f0000 	ldrne	r0, [pc, -r0]
     e04:	3a0b0b01 	bcc	2c3a10 <__core1_unwind_stub-0xd3c5f0>
     e08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e0c:	0013010b 	andseq	r0, r3, fp, lsl #2
     e10:	000d2000 	andeq	r2, sp, r0
     e14:	0b3a0e03 	bleq	e84628 <__core1_unwind_stub-0x17b9d8>
     e18:	0b39053b 	bleq	e4230c <__core1_unwind_stub-0x1bdcf4>
     e1c:	00001349 	andeq	r1, r0, r9, asr #6
     e20:	03001321 	movweq	r1, #801	; 0x321
     e24:	00193c0e 	andseq	r3, r9, lr, lsl #24
     e28:	01152200 	tsteq	r5, r0, lsl #4
     e2c:	13011927 	movwne	r1, #6439	; 0x1927
     e30:	34230000 	strtcc	r0, [r3], #-0
     e34:	3a0e0300 	bcc	381a3c <__core1_unwind_stub-0xc7e5c4>
     e38:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e3c:	3f13490b 	svccc	0x0013490b
     e40:	00193c19 	andseq	r3, r9, r9, lsl ip
     e44:	00342400 	eorseq	r2, r4, r0, lsl #8
     e48:	0b3a0e03 	bleq	e8465c <__core1_unwind_stub-0x17b9a4>
     e4c:	0b390b3b 	bleq	e43b40 <__core1_unwind_stub-0x1bc4c0>
     e50:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     e54:	0000193c 	andeq	r1, r0, ip, lsr r9
     e58:	03003425 	movweq	r3, #1061	; 0x425
     e5c:	3b0b3a0e 	blcc	2cf69c <__core1_unwind_stub-0xd30964>
     e60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e64:	00180213 	andseq	r0, r8, r3, lsl r2
     e68:	00342600 	eorseq	r2, r4, r0, lsl #12
     e6c:	0b3a1347 	bleq	e85b90 <__core1_unwind_stub-0x17a470>
     e70:	0b390b3b 	bleq	e43b64 <__core1_unwind_stub-0x1bc49c>
     e74:	00001802 	andeq	r1, r0, r2, lsl #16
     e78:	3f012e27 	svccc	0x00012e27
     e7c:	3a0e0319 	bcc	381ae8 <__core1_unwind_stub-0xc7e518>
     e80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e84:	1119270b 	tstne	r9, fp, lsl #14
     e88:	40061201 	andmi	r1, r6, r1, lsl #4
     e8c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     e90:	00001301 	andeq	r1, r0, r1, lsl #6
     e94:	03000528 	movweq	r0, #1320	; 0x528
     e98:	3b0b3a08 	blcc	2cf6c0 <__core1_unwind_stub-0xd30940>
     e9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ea0:	00180213 	andseq	r0, r8, r3, lsl r2
     ea4:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
     ea8:	0b3a0e03 	bleq	e846bc <__core1_unwind_stub-0x17b944>
     eac:	0b390b3b 	bleq	e43ba0 <__core1_unwind_stub-0x1bc460>
     eb0:	13491927 	movtne	r1, #39207	; 0x9927
     eb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     eb8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     ebc:	00130119 	andseq	r0, r3, r9, lsl r1
     ec0:	00052a00 	andeq	r2, r5, r0, lsl #20
     ec4:	0b3a0e03 	bleq	e846d8 <__core1_unwind_stub-0x17b928>
     ec8:	0b390b3b 	bleq	e43bbc <__core1_unwind_stub-0x1bc444>
     ecc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ed0:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     ed4:	3a0e0301 	bcc	381ae0 <__core1_unwind_stub-0xc7e520>
     ed8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     edc:	1119270b 	tstne	r9, fp, lsl #14
     ee0:	40061201 	andmi	r1, r6, r1, lsl #4
     ee4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     ee8:	01000000 	mrseq	r0, (UNDEF: 0)
     eec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     ef0:	0e030b13 	vmoveq.32	d3[0], r0
     ef4:	17550e1b 	smmlane	r5, fp, lr, r0
     ef8:	17100111 			; <UNDEFINED> instruction: 0x17100111
     efc:	24020000 	strcs	r0, [r2], #-0
     f00:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f04:	0008030b 	andeq	r0, r8, fp, lsl #6
     f08:	00240300 	eoreq	r0, r4, r0, lsl #6
     f0c:	0b3e0b0b 	bleq	f83b40 <__core1_unwind_stub-0x7c4c0>
     f10:	00000e03 	andeq	r0, r0, r3, lsl #28
     f14:	03001604 	movweq	r1, #1540	; 0x604
     f18:	3b0b3a0e 	blcc	2cf758 <__core1_unwind_stub-0xd308a8>
     f1c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f20:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     f24:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f28:	0b3b0b3a 	bleq	ec3c18 <__core1_unwind_stub-0x13c3e8>
     f2c:	13490b39 	movtne	r0, #39737	; 0x9b39
     f30:	17060000 	strne	r0, [r6, -r0]
     f34:	3a0b0b01 	bcc	2c3b40 <__core1_unwind_stub-0xd3c4c0>
     f38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f3c:	0013010b 	andseq	r0, r3, fp, lsl #2
     f40:	000d0700 	andeq	r0, sp, r0, lsl #14
     f44:	0b3a0e03 	bleq	e84758 <__core1_unwind_stub-0x17b8a8>
     f48:	0b390b3b 	bleq	e43c3c <__core1_unwind_stub-0x1bc3c4>
     f4c:	00001349 	andeq	r1, r0, r9, asr #6
     f50:	49010108 	stmdbmi	r1, {r3, r8}
     f54:	00130113 	andseq	r0, r3, r3, lsl r1
     f58:	00210900 	eoreq	r0, r1, r0, lsl #18
     f5c:	0b2f1349 	bleq	bc5c88 <__core1_unwind_stub-0x43a378>
     f60:	130a0000 	movwne	r0, #40960	; 0xa000
     f64:	3a0b0b01 	bcc	2c3b70 <__core1_unwind_stub-0xd3c490>
     f68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f6c:	0013010b 	andseq	r0, r3, fp, lsl #2
     f70:	000d0b00 	andeq	r0, sp, r0, lsl #22
     f74:	0b3a0e03 	bleq	e84788 <__core1_unwind_stub-0x17b878>
     f78:	0b390b3b 	bleq	e43c6c <__core1_unwind_stub-0x1bc394>
     f7c:	0b381349 	bleq	e05ca8 <__core1_unwind_stub-0x1fa358>
     f80:	0f0c0000 	svceq	0x000c0000
     f84:	000b0b00 	andeq	r0, fp, r0, lsl #22
     f88:	01130d00 	tsteq	r3, r0, lsl #26
     f8c:	0b0b0e03 	bleq	2c47a0 <__core1_unwind_stub-0xd3b860>
     f90:	0b3b0b3a 	bleq	ec3c80 <__core1_unwind_stub-0x13c380>
     f94:	13010b39 	movwne	r0, #6969	; 0x1b39
     f98:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     f9c:	3a080300 	bcc	201ba4 <__core1_unwind_stub-0xdfe45c>
     fa0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fa4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     fa8:	0f00000b 	svceq	0x0000000b
     fac:	0b0b000f 	bleq	2c0ff0 <__core1_unwind_stub-0xd3f010>
     fb0:	00001349 	andeq	r1, r0, r9, asr #6
     fb4:	03011310 	movweq	r1, #4880	; 0x1310
     fb8:	3a050b0e 	bcc	143bf8 <__core1_unwind_stub-0xebc408>
     fbc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fc0:	0013010b 	andseq	r0, r3, fp, lsl #2
     fc4:	000d1100 	andeq	r1, sp, r0, lsl #2
     fc8:	0b3a0e03 	bleq	e847dc <__core1_unwind_stub-0x17b824>
     fcc:	0b390b3b 	bleq	e43cc0 <__core1_unwind_stub-0x1bc340>
     fd0:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     fd4:	15120000 	ldrne	r0, [r2, #-0]
     fd8:	00192700 	andseq	r2, r9, r0, lsl #14
     fdc:	01151300 	tsteq	r5, r0, lsl #6
     fe0:	13491927 	movtne	r1, #39207	; 0x9927
     fe4:	00001301 	andeq	r1, r0, r1, lsl #6
     fe8:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
     fec:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     ff0:	13490026 	movtne	r0, #36902	; 0x9026
     ff4:	13160000 	tstne	r6, #0
     ff8:	0b0e0301 	bleq	381c04 <__core1_unwind_stub-0xc7e3fc>
     ffc:	3b0b3a05 	blcc	2cf818 <__core1_unwind_stub-0xd307e8>
    1000:	010b3905 	tsteq	fp, r5, lsl #18
    1004:	17000013 	smladne	r0, r3, r0, r0
    1008:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    100c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1010:	13490b39 	movtne	r0, #39737	; 0x9b39
    1014:	00000b38 	andeq	r0, r0, r8, lsr fp
    1018:	03000d18 	movweq	r0, #3352	; 0xd18
    101c:	3b0b3a0e 	blcc	2cf85c <__core1_unwind_stub-0xd307a4>
    1020:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1024:	00053813 	andeq	r3, r5, r3, lsl r8
    1028:	01131900 	tsteq	r3, r0, lsl #18
    102c:	0b0b0e03 	bleq	2c4840 <__core1_unwind_stub-0xd3b7c0>
    1030:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1034:	13010b39 	movwne	r0, #6969	; 0x1b39
    1038:	131a0000 	tstne	sl, #0
    103c:	3a0b0b01 	bcc	2c3c48 <__core1_unwind_stub-0xd3c3b8>
    1040:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1044:	0013010b 	andseq	r0, r3, fp, lsl #2
    1048:	01171b00 	tsteq	r7, r0, lsl #22
    104c:	0b3a0b0b 	bleq	e83c80 <__core1_unwind_stub-0x17c380>
    1050:	0b39053b 	bleq	e42544 <__core1_unwind_stub-0x1bdabc>
    1054:	00001301 	andeq	r1, r0, r1, lsl #6
    1058:	03000d1c 	movweq	r0, #3356	; 0xd1c
    105c:	3b0b3a0e 	blcc	2cf89c <__core1_unwind_stub-0xd30764>
    1060:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1064:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1068:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    106c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1070:	2701151e 	smladcs	r1, lr, r5, r1
    1074:	00130119 	andseq	r0, r3, r9, lsl r1
    1078:	00341f00 	eorseq	r1, r4, r0, lsl #30
    107c:	0b3a0e03 	bleq	e84890 <__core1_unwind_stub-0x17b770>
    1080:	0b39053b 	bleq	e42574 <__core1_unwind_stub-0x1bda8c>
    1084:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1088:	0000193c 	andeq	r1, r0, ip, lsr r9
    108c:	49003520 	stmdbmi	r0, {r5, r8, sl, ip, sp}
    1090:	21000013 	tstcs	r0, r3, lsl r0
    1094:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1098:	0b3b0b3a 	bleq	ec3d88 <__core1_unwind_stub-0x13c278>
    109c:	13490b39 	movtne	r0, #39737	; 0x9b39
    10a0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    10a4:	34220000 	strtcc	r0, [r2], #-0
    10a8:	3a0e0300 	bcc	381cb0 <__core1_unwind_stub-0xc7e350>
    10ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10b4:	23000018 	movwcs	r0, #24
    10b8:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
    10bc:	0b3b0b3a 	bleq	ec3dac <__core1_unwind_stub-0x13c254>
    10c0:	13010b39 	movwne	r0, #6969	; 0x1b39
    10c4:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    10c8:	03193f00 	tsteq	r9, #0, 30
    10cc:	3b0b3a0e 	blcc	2cf90c <__core1_unwind_stub-0xd306f4>
    10d0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    10d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10d8:	96184006 	ldrls	r4, [r8], -r6
    10dc:	00001942 	andeq	r1, r0, r2, asr #18
    10e0:	03012e25 	movweq	r2, #7717	; 0x1e25
    10e4:	3b0b3a0e 	blcc	2cf924 <__core1_unwind_stub-0xd306dc>
    10e8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    10ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10f0:	97184006 	ldrls	r4, [r8, -r6]
    10f4:	13011942 	movwne	r1, #6466	; 0x1942
    10f8:	05260000 	streq	r0, [r6, #-0]!
    10fc:	3a0e0300 	bcc	381d04 <__core1_unwind_stub-0xc7e2fc>
    1100:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1104:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1108:	27000018 	smladcs	r0, r8, r0, r0
    110c:	0111010b 	tsteq	r1, fp, lsl #2
    1110:	00000612 	andeq	r0, r0, r2, lsl r6
    1114:	03003428 	movweq	r3, #1064	; 0x428
    1118:	3b0b3a08 	blcc	2cf940 <__core1_unwind_stub-0xd306c0>
    111c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1120:	00180213 	andseq	r0, r8, r3, lsl r2
    1124:	11010000 	mrsne	r0, (UNDEF: 1)
    1128:	130e2501 	movwne	r2, #58625	; 0xe501
    112c:	1b0e030b 	blne	381d60 <__core1_unwind_stub-0xc7e2a0>
    1130:	1117550e 	tstne	r7, lr, lsl #10
    1134:	00171001 	andseq	r1, r7, r1
    1138:	00240200 	eoreq	r0, r4, r0, lsl #4
    113c:	0b3e0b0b 	bleq	f83d70 <__core1_unwind_stub-0x7c290>
    1140:	00000e03 	andeq	r0, r0, r3, lsl #28
    1144:	0b002403 	bleq	a158 <__core1_unwind_stub-0xff5ea8>
    1148:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    114c:	04000008 	streq	r0, [r0], #-8
    1150:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1154:	0b3b0b3a 	bleq	ec3e44 <__core1_unwind_stub-0x13c1bc>
    1158:	13490b39 	movtne	r0, #39737	; 0x9b39
    115c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1160:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1164:	03193f00 	tsteq	r9, #0, 30
    1168:	3b0b3a0e 	blcc	2cf9a8 <__core1_unwind_stub-0xd30658>
    116c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1170:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1174:	97184006 	ldrls	r4, [r8, -r6]
    1178:	00001942 	andeq	r1, r0, r2, asr #18
    117c:	03012e06 	movweq	r2, #7686	; 0x1e06
    1180:	3b0b3a0e 	blcc	2cf9c0 <__core1_unwind_stub-0xd30640>
    1184:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1188:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    118c:	96184006 	ldrls	r4, [r8], -r6
    1190:	13011942 	movwne	r1, #6466	; 0x1942
    1194:	0b070000 	bleq	1c119c <__core1_unwind_stub-0xe3ee64>
    1198:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    119c:	08000006 	stmdaeq	r0, {r1, r2}
    11a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    11a4:	0b3b0b3a 	bleq	ec3e94 <__core1_unwind_stub-0x13c16c>
    11a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    11ac:	00001802 	andeq	r1, r0, r2, lsl #16
    11b0:	0b000f09 	bleq	4ddc <__core1_unwind_stub-0xffb224>
    11b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    11b8:	11010000 	mrsne	r0, (UNDEF: 1)
    11bc:	130e2501 	movwne	r2, #58625	; 0xe501
    11c0:	1b0e030b 	blne	381df4 <__core1_unwind_stub-0xc7e20c>
    11c4:	1117550e 	tstne	r7, lr, lsl #10
    11c8:	00171001 	andseq	r1, r7, r1
    11cc:	00240200 	eoreq	r0, r4, r0, lsl #4
    11d0:	0b3e0b0b 	bleq	f83e04 <__core1_unwind_stub-0x7c1fc>
    11d4:	00000803 	andeq	r0, r0, r3, lsl #16
    11d8:	03001603 	movweq	r1, #1539	; 0x603
    11dc:	3b0b3a0e 	blcc	2cfa1c <__core1_unwind_stub-0xd305e4>
    11e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    11e4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    11e8:	0b0b0024 	bleq	2c1280 <__core1_unwind_stub-0xd3ed80>
    11ec:	0e030b3e 	vmoveq.16	d3[0], r0
    11f0:	26050000 	strcs	r0, [r5], -r0
    11f4:	00134900 	andseq	r4, r3, r0, lsl #18
    11f8:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
    11fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1200:	0b3b0b3a 	bleq	ec3ef0 <__core1_unwind_stub-0x13c110>
    1204:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1208:	01111349 	tsteq	r1, r9, asr #6
    120c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1210:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1214:	07000013 	smladeq	r0, r3, r0, r0
    1218:	08030005 	stmdaeq	r3, {r0, r2}
    121c:	0b3b0b3a 	bleq	ec3f0c <__core1_unwind_stub-0x13c0f4>
    1220:	13490b39 	movtne	r0, #39737	; 0x9b39
    1224:	00001802 	andeq	r1, r0, r2, lsl #16
    1228:	03003408 	movweq	r3, #1032	; 0x408
    122c:	3b0b3a08 	blcc	2cfa54 <__core1_unwind_stub-0xd305ac>
    1230:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1234:	00180213 	andseq	r0, r8, r3, lsl r2
    1238:	010b0900 	tsteq	fp, r0, lsl #18
    123c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1240:	00001301 	andeq	r1, r0, r1, lsl #6
    1244:	11010b0a 	tstne	r1, sl, lsl #22
    1248:	00061201 	andeq	r1, r6, r1, lsl #4
    124c:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1250:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1254:	0b000f0c 	bleq	4e8c <__core1_unwind_stub-0xffb174>
    1258:	0013490b 	andseq	r4, r3, fp, lsl #18
    125c:	00260d00 	eoreq	r0, r6, r0, lsl #26
    1260:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    1264:	03193f01 	tsteq	r9, #1, 30
    1268:	3b0b3a0e 	blcc	2cfaa8 <__core1_unwind_stub-0xd30558>
    126c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1270:	11134919 	tstne	r3, r9, lsl r9
    1274:	40061201 	andmi	r1, r6, r1, lsl #4
    1278:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    127c:	01000000 	mrseq	r0, (UNDEF: 0)
    1280:	06100011 			; <UNDEFINED> instruction: 0x06100011
    1284:	01120111 	tsteq	r2, r1, lsl r1
    1288:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    128c:	05130e25 	ldreq	r0, [r3, #-3621]	; 0xfffff1db
    1290:	01000000 	mrseq	r0, (UNDEF: 0)
    1294:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1298:	0e030b13 	vmoveq.32	d3[0], r0
    129c:	17550e1b 	smmlane	r5, fp, lr, r0
    12a0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    12a4:	24020000 	strcs	r0, [r2], #-0
    12a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    12ac:	000e030b 	andeq	r0, lr, fp, lsl #6
    12b0:	00160300 	andseq	r0, r6, r0, lsl #6
    12b4:	0b3a0e03 	bleq	e84ac8 <__core1_unwind_stub-0x17b538>
    12b8:	0b390b3b 	bleq	e43fac <__core1_unwind_stub-0x1bc054>
    12bc:	00001349 	andeq	r1, r0, r9, asr #6
    12c0:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    12c4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    12c8:	0b0b0024 	bleq	2c1360 <__core1_unwind_stub-0xd3eca0>
    12cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    12d0:	26060000 	strcs	r0, [r6], -r0
    12d4:	00134900 	andseq	r4, r3, r0, lsl #18
    12d8:	01040700 	tsteq	r4, r0, lsl #14
    12dc:	0b3e0e03 	bleq	f84af0 <__core1_unwind_stub-0x7b510>
    12e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    12e4:	0b3b0b3a 	bleq	ec3fd4 <__core1_unwind_stub-0x13c02c>
    12e8:	13010b39 	movwne	r0, #6969	; 0x1b39
    12ec:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    12f0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    12f4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    12f8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    12fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1300:	13490b39 	movtne	r0, #39737	; 0x9b39
    1304:	130a0000 	movwne	r0, #40960	; 0xa000
    1308:	0b0e0301 	bleq	381f14 <__core1_unwind_stub-0xc7e0ec>
    130c:	3b0b3a0b 	blcc	2cfb40 <__core1_unwind_stub-0xd304c0>
    1310:	010b3905 	tsteq	fp, r5, lsl #18
    1314:	0b000013 	bleq	1368 <__core1_unwind_stub-0xffec98>
    1318:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    131c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1320:	13490b39 	movtne	r0, #39737	; 0x9b39
    1324:	00000b38 	andeq	r0, r0, r8, lsr fp
    1328:	03000d0c 	movweq	r0, #3340	; 0xd0c
    132c:	3b0b3a0e 	blcc	2cfb6c <__core1_unwind_stub-0xd30494>
    1330:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1334:	000b3813 	andeq	r3, fp, r3, lsl r8
    1338:	000f0d00 	andeq	r0, pc, r0, lsl #26
    133c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1340:	0b000f0e 	bleq	4f80 <__core1_unwind_stub-0xffb080>
    1344:	0013490b 	andseq	r4, r3, fp, lsl #18
    1348:	01170f00 	tsteq	r7, r0, lsl #30
    134c:	0b3a0b0b 	bleq	e83f80 <__core1_unwind_stub-0x17c080>
    1350:	0b390b3b 	bleq	e44044 <__core1_unwind_stub-0x1bbfbc>
    1354:	00001301 	andeq	r1, r0, r1, lsl #6
    1358:	03000d10 	movweq	r0, #3344	; 0xd10
    135c:	3b0b3a0e 	blcc	2cfb9c <__core1_unwind_stub-0xd30464>
    1360:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1364:	11000013 	tstne	r0, r3, lsl r0
    1368:	13490101 	movtne	r0, #37121	; 0x9101
    136c:	00001301 	andeq	r1, r0, r1, lsl #6
    1370:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
    1374:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1378:	01131300 	tsteq	r3, r0, lsl #6
    137c:	0b3a0b0b 	bleq	e83fb0 <__core1_unwind_stub-0x17c050>
    1380:	0b390b3b 	bleq	e44074 <__core1_unwind_stub-0x1bbf8c>
    1384:	00001301 	andeq	r1, r0, r1, lsl #6
    1388:	03000d14 	movweq	r0, #3348	; 0xd14
    138c:	3b0b3a0e 	blcc	2cfbcc <__core1_unwind_stub-0xd30434>
    1390:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1394:	000b3813 	andeq	r3, fp, r3, lsl r8
    1398:	01131500 	tsteq	r3, r0, lsl #10
    139c:	0b0b0e03 	bleq	2c4bb0 <__core1_unwind_stub-0xd3b450>
    13a0:	0b3b0b3a 	bleq	ec4090 <__core1_unwind_stub-0x13bf70>
    13a4:	13010b39 	movwne	r0, #6969	; 0x1b39
    13a8:	0d160000 	ldceq	0, cr0, [r6, #-0]
    13ac:	3a080300 	bcc	201fb4 <__core1_unwind_stub-0xdfe04c>
    13b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    13b8:	1700000b 	strne	r0, [r0, -fp]
    13bc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    13c0:	0b3a050b 	bleq	e827f4 <__core1_unwind_stub-0x17d80c>
    13c4:	0b390b3b 	bleq	e440b8 <__core1_unwind_stub-0x1bbf48>
    13c8:	00001301 	andeq	r1, r0, r1, lsl #6
    13cc:	03000d18 	movweq	r0, #3352	; 0xd18
    13d0:	3b0b3a0e 	blcc	2cfc10 <__core1_unwind_stub-0xd303f0>
    13d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    13d8:	00053813 	andeq	r3, r5, r3, lsl r8
    13dc:	00151900 	andseq	r1, r5, r0, lsl #18
    13e0:	00001927 	andeq	r1, r0, r7, lsr #18
    13e4:	2701151a 	smladcs	r1, sl, r5, r1
    13e8:	01134919 	tsteq	r3, r9, lsl r9
    13ec:	1b000013 	blne	1440 <__core1_unwind_stub-0xffebc0>
    13f0:	13490005 	movtne	r0, #36869	; 0x9005
    13f4:	131c0000 	tstne	ip, #0
    13f8:	0b0e0301 	bleq	382004 <__core1_unwind_stub-0xc7dffc>
    13fc:	3b0b3a05 	blcc	2cfc18 <__core1_unwind_stub-0xd303e8>
    1400:	010b3905 	tsteq	fp, r5, lsl #18
    1404:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1408:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    140c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1410:	13490b39 	movtne	r0, #39737	; 0x9b39
    1414:	00000538 	andeq	r0, r0, r8, lsr r5
    1418:	0b01131e 	bleq	46098 <__core1_unwind_stub-0xfb9f68>
    141c:	3b0b3a0b 	blcc	2cfc50 <__core1_unwind_stub-0xd303b0>
    1420:	010b3905 	tsteq	fp, r5, lsl #18
    1424:	1f000013 	svcne	0x00000013
    1428:	0b0b0117 	bleq	2c188c <__core1_unwind_stub-0xd3e774>
    142c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1430:	13010b39 	movwne	r0, #6969	; 0x1b39
    1434:	0d200000 	stceq	0, cr0, [r0, #-0]
    1438:	3a0e0300 	bcc	382040 <__core1_unwind_stub-0xc7dfc0>
    143c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1440:	0013490b 	andseq	r4, r3, fp, lsl #18
    1444:	00132100 	andseq	r2, r3, r0, lsl #2
    1448:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    144c:	15220000 	strne	r0, [r2, #-0]!
    1450:	01192701 	tsteq	r9, r1, lsl #14
    1454:	23000013 	movwcs	r0, #19
    1458:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    145c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1460:	13490b39 	movtne	r0, #39737	; 0x9b39
    1464:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1468:	34240000 	strtcc	r0, [r4], #-0
    146c:	3a0e0300 	bcc	382074 <__core1_unwind_stub-0xc7df8c>
    1470:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1474:	3f13490b 	svccc	0x0013490b
    1478:	00193c19 	andseq	r3, r9, r9, lsl ip
    147c:	00212500 	eoreq	r2, r1, r0, lsl #10
    1480:	052f1349 	streq	r1, [pc, #-841]!	; 113f <__core1_unwind_stub-0xffeec1>
    1484:	34260000 	strtcc	r0, [r6], #-0
    1488:	3a0e0300 	bcc	382090 <__core1_unwind_stub-0xc7df70>
    148c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1490:	8813490b 	ldmdahi	r3, {r0, r1, r3, r8, fp, lr}
    1494:	18020501 	stmdane	r2, {r0, r8, sl}
    1498:	34270000 	strtcc	r0, [r7], #-0
    149c:	3a0e0300 	bcc	3820a4 <__core1_unwind_stub-0xc7df5c>
    14a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    14a8:	28000018 	stmdacs	r0, {r3, r4}
    14ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    14b8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    14bc:	34290000 	strtcc	r0, [r9], #-0
    14c0:	3a0e0300 	bcc	3820c8 <__core1_unwind_stub-0xc7df38>
    14c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    14cc:	2a000018 	bcs	1534 <__core1_unwind_stub-0xffeacc>
    14d0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    14d4:	0b3a0e03 	bleq	e84ce8 <__core1_unwind_stub-0x17b318>
    14d8:	0b39053b 	bleq	e429cc <__core1_unwind_stub-0x1bd634>
    14dc:	13491927 	movtne	r1, #39207	; 0x9927
    14e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    14e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    14e8:	2b000019 	blcs	1554 <__core1_unwind_stub-0xffeaac>
    14ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    14f0:	0b3a0e03 	bleq	e84d04 <__core1_unwind_stub-0x17b2fc>
    14f4:	0b39053b 	bleq	e429e8 <__core1_unwind_stub-0x1bd618>
    14f8:	13491927 	movtne	r1, #39207	; 0x9927
    14fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1500:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1504:	00130119 	andseq	r0, r3, r9, lsl r1
    1508:	00342c00 	eorseq	r2, r4, r0, lsl #24
    150c:	0b3a0803 	bleq	e83520 <__core1_unwind_stub-0x17cae0>
    1510:	0b39053b 	bleq	e42a04 <__core1_unwind_stub-0x1bd5fc>
    1514:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1518:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
    151c:	03193f01 	tsteq	r9, #1, 30
    1520:	3b0b3a0e 	blcc	2cfd60 <__core1_unwind_stub-0xd302a0>
    1524:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1528:	11134919 	tstne	r3, r9, lsl r9
    152c:	40061201 	andmi	r1, r6, r1, lsl #4
    1530:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1534:	00001301 	andeq	r1, r0, r1, lsl #6
    1538:	3f012e2e 	svccc	0x00012e2e
    153c:	3a0e0319 	bcc	3821a8 <__core1_unwind_stub-0xc7de58>
    1540:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1544:	1119270b 	tstne	r9, fp, lsl #14
    1548:	40061201 	andmi	r1, r6, r1, lsl #4
    154c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1550:	00001301 	andeq	r1, r0, r1, lsl #6
    1554:	0300052f 	movweq	r0, #1327	; 0x52f
    1558:	3b0b3a0e 	blcc	2cfd98 <__core1_unwind_stub-0xd30268>
    155c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1560:	00180213 	andseq	r0, r8, r3, lsl r2
    1564:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
    1568:	0b3a0e03 	bleq	e84d7c <__core1_unwind_stub-0x17b284>
    156c:	0b39053b 	bleq	e42a60 <__core1_unwind_stub-0x1bd5a0>
    1570:	13491927 	movtne	r1, #39207	; 0x9927
    1574:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1578:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    157c:	00130119 	andseq	r0, r3, r9, lsl r1
    1580:	010b3100 	mrseq	r3, (UNDEF: 27)
    1584:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1588:	00001301 	andeq	r1, r0, r1, lsl #6
    158c:	11010b32 	tstne	r1, r2, lsr fp
    1590:	00061201 	andeq	r1, r6, r1, lsl #4
    1594:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
    1598:	0b3a0e03 	bleq	e84dac <__core1_unwind_stub-0x17b254>
    159c:	0b39053b 	bleq	e42a90 <__core1_unwind_stub-0x1bd570>
    15a0:	01111927 	tsteq	r1, r7, lsr #18
    15a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15a8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    15ac:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
    15b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    15b4:	0b3a0e03 	bleq	e84dc8 <__core1_unwind_stub-0x17b238>
    15b8:	0b390b3b 	bleq	e442ac <__core1_unwind_stub-0x1bbd54>
    15bc:	01111927 	tsteq	r1, r7, lsr #18
    15c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
    15c8:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
    15cc:	08030034 	stmdaeq	r3, {r2, r4, r5}
    15d0:	0b3b0b3a 	bleq	ec42c0 <__core1_unwind_stub-0x13bd40>
    15d4:	13490b39 	movtne	r0, #39737	; 0x9b39
    15d8:	00001802 	andeq	r1, r0, r2, lsl #16
    15dc:	55010b36 	strpl	r0, [r1, #-2870]	; 0xfffff4ca
    15e0:	37000017 	smladcc	r0, r7, r0, r0
    15e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    15e8:	0b3a0e03 	bleq	e84dfc <__core1_unwind_stub-0x17b204>
    15ec:	0b390b3b 	bleq	e442e0 <__core1_unwind_stub-0x1bbd20>
    15f0:	13491927 	movtne	r1, #39207	; 0x9927
    15f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    15f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    15fc:	00130119 	andseq	r0, r3, r9, lsl r1
    1600:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
    1604:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1608:	0b3b0b3a 	bleq	ec42f8 <__core1_unwind_stub-0x13bd08>
    160c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1610:	01111349 	tsteq	r1, r9, asr #6
    1614:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1618:	01194297 			; <UNDEFINED> instruction: 0x01194297
    161c:	39000013 	stmdbcc	r0, {r0, r1, r4}
    1620:	0e03012e 	adfeqsp	f0, f3, #0.5
    1624:	0b3b0b3a 	bleq	ec4314 <__core1_unwind_stub-0x13bcec>
    1628:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    162c:	01111349 	tsteq	r1, r9, asr #6
    1630:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1634:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1638:	3a000013 	bcc	168c <__core1_unwind_stub-0xffe974>
    163c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1640:	0b3b0b3a 	bleq	ec4330 <__core1_unwind_stub-0x13bcd0>
    1644:	13490b39 	movtne	r0, #39737	; 0x9b39
    1648:	00001802 	andeq	r1, r0, r2, lsl #16
    164c:	03012e3b 	movweq	r2, #7739	; 0x1e3b
    1650:	3b0b3a0e 	blcc	2cfe90 <__core1_unwind_stub-0xd30170>
    1654:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1658:	11134919 	tstne	r3, r9, lsl r9
    165c:	40061201 	andmi	r1, r6, r1, lsl #4
    1660:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1664:	00001301 	andeq	r1, r0, r1, lsl #6
    1668:	03012e3c 	movweq	r2, #7740	; 0x1e3c
    166c:	3b0b3a0e 	blcc	2cfeac <__core1_unwind_stub-0xd30154>
    1670:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1674:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1678:	97184006 	ldrls	r4, [r8, -r6]
    167c:	13011942 	movwne	r1, #6466	; 0x1942
    1680:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
    1684:	3a080300 	bcc	20228c <__core1_unwind_stub-0xdfdd74>
    1688:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    168c:	1119270b 	tstne	r9, fp, lsl #14
    1690:	40061201 	andmi	r1, r6, r1, lsl #4
    1694:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1698:	01000000 	mrseq	r0, (UNDEF: 0)
    169c:	06100011 			; <UNDEFINED> instruction: 0x06100011
    16a0:	01120111 	tsteq	r2, r1, lsl r1
    16a4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    16a8:	05130e25 	ldreq	r0, [r3, #-3621]	; 0xfffff1db
    16ac:	01000000 	mrseq	r0, (UNDEF: 0)
    16b0:	06100011 			; <UNDEFINED> instruction: 0x06100011
    16b4:	01120111 	tsteq	r2, r1, lsl r1
    16b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    16bc:	05130e25 	ldreq	r0, [r3, #-3621]	; 0xfffff1db
    16c0:	01000000 	mrseq	r0, (UNDEF: 0)
    16c4:	06100011 			; <UNDEFINED> instruction: 0x06100011
    16c8:	01120111 	tsteq	r2, r1, lsl r1
    16cc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    16d0:	05130e25 	ldreq	r0, [r3, #-3621]	; 0xfffff1db
    16d4:	01000000 	mrseq	r0, (UNDEF: 0)
    16d8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    16dc:	0e030b13 	vmoveq.32	d3[0], r0
    16e0:	01110e1b 	tsteq	r1, fp, lsl lr
    16e4:	17100612 			; <UNDEFINED> instruction: 0x17100612
    16e8:	24020000 	strcs	r0, [r2], #-0
    16ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    16f0:	000e030b 	andeq	r0, lr, fp, lsl #6
    16f4:	00240300 	eoreq	r0, r4, r0, lsl #6
    16f8:	0b3e0b0b 	bleq	f8432c <__core1_unwind_stub-0x7bcd4>
    16fc:	00000803 	andeq	r0, r0, r3, lsl #16
    1700:	03001604 	movweq	r1, #1540	; 0x604
    1704:	3b0b3a0e 	blcc	2cff44 <__core1_unwind_stub-0xd300bc>
    1708:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    170c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    1710:	0b0b000f 	bleq	2c1754 <__core1_unwind_stub-0xd3e8ac>
    1714:	00001349 	andeq	r1, r0, r9, asr #6
    1718:	27011506 	strcs	r1, [r1, -r6, lsl #10]
    171c:	01134919 	tsteq	r3, r9, lsl r9
    1720:	07000013 	smladeq	r0, r3, r0, r0
    1724:	13490005 	movtne	r0, #36869	; 0x9005
    1728:	26080000 	strcs	r0, [r8], -r0
    172c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1730:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1734:	0b3b0b3a 	bleq	ec4424 <__core1_unwind_stub-0x13bbdc>
    1738:	13490b39 	movtne	r0, #39737	; 0x9b39
    173c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1740:	040a0000 	streq	r0, [sl], #-0
    1744:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
    1748:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
    174c:	3b0b3a13 	blcc	2cffa0 <__core1_unwind_stub-0xd30060>
    1750:	010b390b 	tsteq	fp, fp, lsl #18
    1754:	0b000013 	bleq	17a8 <__core1_unwind_stub-0xffe858>
    1758:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    175c:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1760:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1764:	00130113 	andseq	r0, r3, r3, lsl r1
    1768:	00210d00 	eoreq	r0, r1, r0, lsl #26
    176c:	260e0000 	strcs	r0, [lr], -r0
    1770:	00134900 	andseq	r4, r3, r0, lsl #18
    1774:	00340f00 	eorseq	r0, r4, r0, lsl #30
    1778:	0b3a0e03 	bleq	e84f8c <__core1_unwind_stub-0x17b074>
    177c:	0b39053b 	bleq	e42c70 <__core1_unwind_stub-0x1bd390>
    1780:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1784:	0000193c 	andeq	r1, r0, ip, lsr r9
    1788:	03001310 	movweq	r1, #784	; 0x310
    178c:	00193c0e 	andseq	r3, r9, lr, lsl #24
    1790:	00151100 	andseq	r1, r5, r0, lsl #2
    1794:	00001927 	andeq	r1, r0, r7, lsr #18
    1798:	03001712 	movweq	r1, #1810	; 0x712
    179c:	00193c0e 	andseq	r3, r9, lr, lsl #24
    17a0:	01131300 	tsteq	r3, r0, lsl #6
    17a4:	0b0b0e03 	bleq	2c4fb8 <__core1_unwind_stub-0xd3b048>
    17a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    17ac:	13010b39 	movwne	r0, #6969	; 0x1b39
    17b0:	0d140000 	ldceq	0, cr0, [r4, #-0]
    17b4:	3a0e0300 	bcc	3823bc <__core1_unwind_stub-0xc7dc44>
    17b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17bc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    17c0:	1500000b 	strne	r0, [r0, #-11]
    17c4:	13490021 	movtne	r0, #36897	; 0x9021
    17c8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    17cc:	03010416 	movweq	r0, #5142	; 0x1416
    17d0:	0b0b3e0e 	bleq	2d1010 <__core1_unwind_stub-0xd2eff0>
    17d4:	3a13490b 	bcc	4d3c08 <__core1_unwind_stub-0xb2c3f8>
    17d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17dc:	0013010b 	andseq	r0, r3, fp, lsl #2
    17e0:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    17e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    17e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    17ec:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    17f0:	01111349 	tsteq	r1, r9, asr #6
    17f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    17f8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    17fc:	18000013 	stmdane	r0, {r0, r1, r4}
    1800:	08030005 	stmdaeq	r3, {r0, r2}
    1804:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1808:	13490b39 	movtne	r0, #39737	; 0x9b39
    180c:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1810:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    1814:	08030005 	stmdaeq	r3, {r0, r2}
    1818:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    181c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1820:	00001802 	andeq	r1, r0, r2, lsl #16
    1824:	0300341a 	movweq	r3, #1050	; 0x41a
    1828:	3b0b3a08 	blcc	2d0050 <__core1_unwind_stub-0xd2ffb0>
    182c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1830:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    1834:	00001742 	andeq	r1, r0, r2, asr #14
    1838:	00110100 	andseq	r0, r1, r0, lsl #2
    183c:	01110610 	tsteq	r1, r0, lsl r6
    1840:	0e030112 	mcreq	1, 0, r0, cr3, cr2, {0}
    1844:	0e250e1b 	mcreq	14, 1, r0, cr5, cr11, {0}
    1848:	00000513 	andeq	r0, r0, r3, lsl r5
    184c:	00110100 	andseq	r0, r1, r0, lsl #2
    1850:	01110610 	tsteq	r1, r0, lsl r6
    1854:	0e030112 	mcreq	1, 0, r0, cr3, cr2, {0}
    1858:	0e250e1b 	mcreq	14, 1, r0, cr5, cr11, {0}
    185c:	00000513 	andeq	r0, r0, r3, lsl r5
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
{
   0:	00000154 	andeq	r0, r0, r4, asr r1
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  14:	00000098 	muleq	r0, r8, r0
    ALT_PRINTF("\n");
  18:	01000004 	tsteq	r0, r4
  1c:	00000038 	andeq	r0, r0, r8, lsr r0
  20:	0100003c 	tsteq	r0, ip, lsr r0
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	00000054 	andeq	r0, r0, r4, asr r0
  28:	01000090 	swpeq	r0, r0, [r0]	; <UNPREDICTABLE>
  2c:	00000054 	andeq	r0, r0, r4, asr r0
  30:	010000e4 	smlatteq	r0, r4, r0, r0
  34:	00000158 	andeq	r0, r0, r8, asr r1
  38:	0100023c 	tsteq	r0, ip, lsr r2
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	00000190 	muleq	r0, r0, r1
  40:	010003cc 	smlabteq	r0, ip, r3, r0
  44:	00000220 	andeq	r0, r0, r0, lsr #4
  48:	010005ec 	smlatteq	r0, ip, r5, r0
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	0000006c 	andeq	r0, r0, ip, rrx
  50:	01000658 	tsteq	r0, r8, asr r6
  54:	00000040 	andeq	r0, r0, r0, asr #32
  58:	01000698 			; <UNDEFINED> instruction: 0x01000698
  5c:	00000040 	andeq	r0, r0, r0, asr #32
  60:	010006d8 	ldrdeq	r0, [r0, -r8]
  64:	0000006c 	andeq	r0, r0, ip, rrx
  68:	01000744 	tsteq	r0, r4, asr #14
  6c:	00000040 	andeq	r0, r0, r0, asr #32
}
  70:	01000784 	smlabbeq	r0, r4, r7, r0
  74:	00000068 	andeq	r0, r0, r8, rrx
  78:	010007ec 	smlatteq	r0, ip, r7, r0
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
  7c:	0000006c 	andeq	r0, r0, ip, rrx
  80:	01000858 	tsteq	r0, r8, asr r8
  84:	0000006c 	andeq	r0, r0, ip, rrx
  88:	010008c4 	smlabteq	r0, r4, r8, r0
  8c:	0000006c 	andeq	r0, r0, ip, rrx
  90:	01000930 	tsteq	r0, r0, lsr r9
      *(pmem->toptr)=0;
  94:	0000006c 	andeq	r0, r0, ip, rrx
  98:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
  9c:	0000006c 	andeq	r0, r0, ip, rrx
  a0:	01000a08 	tsteq	r0, r8, lsl #20
}
  a4:	0000006c 	andeq	r0, r0, ip, rrx
  a8:	01000a74 	tsteq	r0, r4, ror sl
  ac:	000000dc 	ldrdeq	r0, [r0], -ip
  b0:	01000b50 	tsteq	r0, r0, asr fp
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
  b4:	00000030 	andeq	r0, r0, r0, lsr r0
  b8:	01000b80 	smlabbeq	r0, r0, fp, r0
        break;
  bc:	00000030 	andeq	r0, r0, r0, lsr r0
    return ALT_E_SUCCESS;
  c0:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
  c4:	00000030 	andeq	r0, r0, r0, lsr r0
        return ALT_E_ERROR;
  c8:	01000be0 	smlatteq	r0, r0, fp, r0
}
  cc:	00000068 	andeq	r0, r0, r8, rrx
  d0:	01000c48 	tsteq	r0, r8, asr #24
  d4:	000000a4 	andeq	r0, r0, r4, lsr #1
  d8:	01000cec 	smlatteq	r0, ip, ip, r0
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  dc:	00000068 	andeq	r0, r0, r8, rrx
  e0:	01000d54 	tsteq	r0, r4, asr sp
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	00000000 	andeq	r0, r0, r0
  ec:	0000005c 	andeq	r0, r0, ip, asr r0
  f0:	00000000 	andeq	r0, r0, r0
    return dst;
  f4:	0000005c 	andeq	r0, r0, ip, asr r0
}
  f8:	01000d7c 	tsteq	r0, ip, ror sp
  fc:	00000068 	andeq	r0, r0, r8, rrx
 100:	01000de4 	smlatteq	r0, r4, sp, r0
 104:	00000068 	andeq	r0, r0, r8, rrx
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
 108:	01000e4c 	tsteq	r0, ip, asr #28
 10c:	00000068 	andeq	r0, r0, r8, rrx
 110:	01000eb4 			; <UNDEFINED> instruction: 0x01000eb4
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
 114:	0000023c 	andeq	r0, r0, ip, lsr r2
 118:	00000000 	andeq	r0, r0, r0
 11c:	00000034 	andeq	r0, r0, r4, lsr r0
 120:	00000000 	andeq	r0, r0, r0
 124:	00000264 	andeq	r0, r0, r4, ror #4
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 128:	00000000 	andeq	r0, r0, r0
 12c:	00000034 	andeq	r0, r0, r4, lsr r0
 130:	00000000 	andeq	r0, r0, r0
 134:	00000264 	andeq	r0, r0, r4, ror #4
 138:	010010f0 	strdeq	r1, [r0, -r0]
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	00000048 	andeq	r0, r0, r8, asr #32
 140:	01001138 	tsteq	r0, r8, lsr r1
 144:	00000264 	andeq	r0, r0, r4, ror #4
 148:	00000000 	andeq	r0, r0, r0
 14c:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 158:	000001ec 	andeq	r0, r0, ip, ror #3
 15c:	17e60002 	strbne	r0, [r6, r2]!
 160:	00040000 	andeq	r0, r4, r0
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	00000000 	andeq	r0, r0, r0
 168:	0100139c 			; <UNDEFINED> instruction: 0x0100139c
 16c:	00000028 	andeq	r0, r0, r8, lsr #32
 170:	010013c4 	smlabteq	r0, r4, r3, r1
 174:	00000120 	andeq	r0, r0, r0, lsr #2
    return ALT_E_SUCCESS;
 178:	010014e4 	smlatteq	r0, r4, r4, r1
}
 17c:	00000158 	andeq	r0, r0, r8, asr r1
 180:	0100163c 	tsteq	r0, ip, lsr r6
 184:	0000015c 	andeq	r0, r0, ip, asr r1
    while (coalesce->size)
 188:	00000000 	andeq	r0, r0, r0
 18c:	00000090 	muleq	r0, r0, r0
            break;
 190:	00000000 	andeq	r0, r0, r0
    *segpa   = thissegpa;
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
 198:	01001798 			; <UNDEFINED> instruction: 0x01001798
 19c:	00000048 	andeq	r0, r0, r8, asr #32
    *segsize = thissegsize;
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1a8:	00000000 	andeq	r0, r0, r0
    return ALT_E_SUCCESS;
 1ac:	000000a4 	andeq	r0, r0, r4, lsr #1
}
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	000000a0 	andeq	r0, r0, r0, lsr #1
 1b8:	010017e0 	smlatteq	r0, r0, r7, r1
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
 1bc:	00000080 	andeq	r0, r0, r0, lsl #1
 1c0:	01001860 	tsteq	r0, r0, ror #16
 1c4:	00000080 	andeq	r0, r0, r0, lsl #1
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	000000d8 	ldrdeq	r0, [r0], -r8
    clkStep = 9 * clk100; /* 900MHz */
 1d0:	010018e0 	smlatteq	r0, r0, r8, r1
 1d4:	00000104 	andeq	r0, r0, r4, lsl #2
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	0000003c 	andeq	r0, r0, ip, lsr r0
 1e0:	00000000 	andeq	r0, r0, r0
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 1e4:	000000a8 	andeq	r0, r0, r8, lsr #1
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	000000a8 	andeq	r0, r0, r8, lsr #1
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	000000a8 	andeq	r0, r0, r8, lsr #1
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	000000a8 	andeq	r0, r0, r8, lsr #1
 200:	00000000 	andeq	r0, r0, r0
 204:	000000a8 	andeq	r0, r0, r8, lsr #1
 208:	00000000 	andeq	r0, r0, r0
 20c:	0000009c 	muleq	r0, ip, r0
 210:	00000000 	andeq	r0, r0, r0
        clkStep += clk100;
 214:	0000009c 	muleq	r0, ip, r0
 218:	00000000 	andeq	r0, r0, r0
 21c:	000000dc 	ldrdeq	r0, [r0], -ip
 220:	00000000 	andeq	r0, r0, r0
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 224:	000000dc 	ldrdeq	r0, [r0], -ip
 228:	00000000 	andeq	r0, r0, r0
 22c:	0000005c 	andeq	r0, r0, ip, asr r0
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 230:	010019e4 	smlatteq	r0, r4, r9, r1
 234:	00000074 	andeq	r0, r0, r4, ror r0
 238:	00000000 	andeq	r0, r0, r0
 23c:	0000003c 	andeq	r0, r0, ip, lsr r0
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
 240:	01001a58 	tsteq	r0, r8, asr sl
 244:	00000078 	andeq	r0, r0, r8, ror r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	00000080 	andeq	r0, r0, r0, lsl #1
 250:	01001ad0 	ldrdeq	r1, [r0, -r0]
 254:	00000084 	andeq	r0, r0, r4, lsl #1
 258:	00000000 	andeq	r0, r0, r0
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 25c:	0000002c 	andeq	r0, r0, ip, lsr #32
 260:	00000000 	andeq	r0, r0, r0
 264:	0000002c 	andeq	r0, r0, ip, lsr #32
 268:	00000000 	andeq	r0, r0, r0
 26c:	0000002c 	andeq	r0, r0, ip, lsr #32
 270:	00000000 	andeq	r0, r0, r0
 274:	0000002c 	andeq	r0, r0, ip, lsr #32
 278:	00000000 	andeq	r0, r0, r0
 27c:	0000002c 	andeq	r0, r0, ip, lsr #32
 280:	00000000 	andeq	r0, r0, r0
 284:	0000002c 	andeq	r0, r0, ip, lsr #32
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 288:	00000000 	andeq	r0, r0, r0
 28c:	0000002c 	andeq	r0, r0, ip, lsr #32
 290:	00000000 	andeq	r0, r0, r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 294:	0000002c 	andeq	r0, r0, ip, lsr #32
 298:	01001b54 	tsteq	r0, r4, asr fp
 29c:	0000002c 	andeq	r0, r0, ip, lsr #32
 2a0:	00000000 	andeq	r0, r0, r0
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
 2a4:	0000007c 	andeq	r0, r0, ip, ror r0
 2a8:	01001b80 	smlabbeq	r0, r0, fp, r1
 2ac:	00000154 	andeq	r0, r0, r4, asr r1
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000078 	andeq	r0, r0, r8, ror r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	00000078 	andeq	r0, r0, r8, ror r0
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
 2c8:	01001cd4 	ldrdeq	r1, [r0, -r4]
 2cc:	00000080 	andeq	r0, r0, r0, lsl #1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000084 	andeq	r0, r0, r4, lsl #1
 2d8:	00000000 	andeq	r0, r0, r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 2dc:	00000080 	andeq	r0, r0, r0, lsl #1
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2e8:	00000000 	andeq	r0, r0, r0
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 2ec:	00000044 	andeq	r0, r0, r4, asr #32
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 300:	00000000 	andeq	r0, r0, r0
 304:	0000002c 	andeq	r0, r0, ip, lsr #32
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
 310:	00000000 	andeq	r0, r0, r0
 314:	0000002c 	andeq	r0, r0, ip, lsr #32
 318:	01001d54 	tsteq	r0, r4, asr sp
 31c:	0000002c 	andeq	r0, r0, ip, lsr #32
 320:	00000000 	andeq	r0, r0, r0
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
 328:	01001d80 	smlabbeq	r0, r0, sp, r1
 32c:	0000002c 	andeq	r0, r0, ip, lsr #32
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
 330:	00000000 	andeq	r0, r0, r0
 334:	0000002c 	andeq	r0, r0, ip, lsr #32
 338:	00000000 	andeq	r0, r0, r0
 33c:	0000006c 	andeq	r0, r0, ip, rrx
	...
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
 348:	00000114 	andeq	r0, r0, r4, lsl r1
 34c:	28ea0002 	stmiacs	sl!, {r1}^
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 350:	00040000 	andeq	r0, r4, r0
 354:	00000000 	andeq	r0, r0, r0
 358:	01001dac 	smlatbeq	r0, ip, sp, r1
 35c:	00000024 	andeq	r0, r0, r4, lsr #32
 360:	01001dd0 	ldrdeq	r1, [r0, -r0]
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
 368:	00000000 	andeq	r0, r0, r0
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	01001dec 	smlatteq	r0, ip, sp, r1
 374:	0000008c 	andeq	r0, r0, ip, lsl #1
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 378:	00000000 	andeq	r0, r0, r0
 37c:	00000150 	andeq	r0, r0, r0, asr r1
 380:	00000000 	andeq	r0, r0, r0
 384:	00000168 	andeq	r0, r0, r8, ror #2
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000068 	andeq	r0, r0, r8, rrx
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
 390:	01001e78 	tsteq	r0, r8, ror lr
 394:	00000050 	andeq	r0, r0, r0, asr r0
 398:	00000000 	andeq	r0, r0, r0
 39c:	00000074 	andeq	r0, r0, r4, ror r0
 3a0:	01001ec8 	smlabteq	r0, r8, lr, r1
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
 3a4:	000000e0 	andeq	r0, r0, r0, ror #1
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	00000038 	andeq	r0, r0, r8, lsr r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	0000007c 	andeq	r0, r0, ip, ror r0
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
 3b8:	01001fa8 	smlatbeq	r0, r8, pc, r1	; <UNPREDICTABLE>
 3bc:	000000b4 	strheq	r0, [r0], -r4
 3c0:	0100205c 	qaddeq	r2, ip, r0
 3c4:	000000e0 	andeq	r0, r0, r0, ror #1
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	00000078 	andeq	r0, r0, r8, ror r0
 3d0:	0100213c 	tsteq	r0, ip, lsr r1
 3d4:	00000034 	andeq	r0, r0, r4, lsr r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	00000034 	andeq	r0, r0, r4, lsr r0
 3e0:	01002170 	tsteq	r0, r0, ror r1
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
 3e4:	00000068 	andeq	r0, r0, r8, rrx
 3e8:	010021d8 	ldrdeq	r2, [r0, -r8]
 3ec:	00000328 	andeq	r0, r0, r8, lsr #6
 3f0:	01002500 	tsteq	r0, r0, lsl #10
 3f4:	00000068 	andeq	r0, r0, r8, rrx
 3f8:	01002568 	tsteq	r0, r8, ror #10
 3fc:	00000060 	andeq	r0, r0, r0, rrx
 400:	010025c8 	smlabteq	r0, r8, r5, r2
 404:	00000124 	andeq	r0, r0, r4, lsr #2
 408:	010026ec 	smlatteq	r0, ip, r6, r2
 40c:	00000124 	andeq	r0, r0, r4, lsr #2
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
 410:	01002810 	tsteq	r0, r0, lsl r8
 414:	0000010c 	andeq	r0, r0, ip, lsl #2
 418:	0100291c 	tsteq	r0, ip, lsl r9
 41c:	00000110 	andeq	r0, r0, r0, lsl r1
 420:	01002a2c 	tsteq	r0, ip, lsr #20
 424:	00000048 	andeq	r0, r0, r8, asr #32
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
 428:	01002a74 	tsteq	r0, r4, ror sl
 42c:	00000dd8 	ldrdeq	r0, [r0], -r8
 430:	0100384c 	tsteq	r0, ip, asr #16
 434:	0000013c 	andeq	r0, r0, ip, lsr r1
 438:	00000000 	andeq	r0, r0, r0
 43c:	00000184 	andeq	r0, r0, r4, lsl #3
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
 440:	00000000 	andeq	r0, r0, r0
 444:	000000e0 	andeq	r0, r0, r0, ror #1
 448:	00000000 	andeq	r0, r0, r0
 44c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 450:	00000000 	andeq	r0, r0, r0
 454:	00000044 	andeq	r0, r0, r4, asr #32
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
 460:	00000084 	andeq	r0, r0, r4, lsl #1
 464:	45da0002 	ldrbmi	r0, [sl, #2]
 468:	00040000 	andeq	r0, r4, r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
 474:	00000030 	andeq	r0, r0, r0, lsr r0
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000090 	muleq	r0, r0, r0
 480:	00000000 	andeq	r0, r0, r0
 484:	000000b4 	strheq	r0, [r0], -r4
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000078 	andeq	r0, r0, r8, ror r0
 490:	00000000 	andeq	r0, r0, r0
 494:	00000068 	andeq	r0, r0, r8, rrx
 498:	01003988 	smlabbeq	r0, r8, r9, r3
 49c:	00000050 	andeq	r0, r0, r0, asr r0
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	00000048 	andeq	r0, r0, r8, asr #32
 4a8:	010039d8 	ldrdeq	r3, [r0, -r8]
 4ac:	0000006c 	andeq	r0, r0, ip, rrx
 4b0:	01003a44 	tsteq	r0, r4, asr #20
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
 4b4:	00000058 	andeq	r0, r0, r8, asr r0
 4b8:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
 4bc:	00000098 	muleq	r0, r8, r0
 4c0:	01003b34 	tsteq	r0, r4, lsr fp
 4c4:	0000013c 	andeq	r0, r0, ip, lsr r1
 4c8:	01003c70 	tsteq	r0, r0, ror ip
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
 4cc:	00000178 	andeq	r0, r0, r8, ror r1
 4d0:	01003de8 	smlatteq	r0, r8, sp, r3
 4d4:	0000081c 	andeq	r0, r0, ip, lsl r8
 4d8:	01004604 	tsteq	r0, r4, lsl #12
 4dc:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
	...
 4e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 4ec:	567e0002 	ldrbtpl	r0, [lr], -r2
 4f0:	00040000 	andeq	r0, r4, r0
 4f4:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
 4f8:	010048b8 			; <UNDEFINED> instruction: 0x010048b8
 4fc:	00000080 	andeq	r0, r0, r0, lsl #1
 500:	01004938 	tsteq	r0, r8, lsr r9
 504:	000000d8 	ldrdeq	r0, [r0], -r8
 508:	00000000 	andeq	r0, r0, r0
 50c:	0000007c 	andeq	r0, r0, ip, ror r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
 518:	0000002c 	andeq	r0, r0, ip, lsr #32
 51c:	63670002 	cmnvs	r7, #2
 520:	00040000 	andeq	r0, r4, r0
 524:	00000000 	andeq	r0, r0, r0
 528:	01004a10 	tsteq	r0, r0, lsl sl
 52c:	0000005c 	andeq	r0, r0, ip, asr r0
 530:	01004a6c 	tsteq	r0, ip, ror #20
 534:	0000002c 	andeq	r0, r0, ip, lsr #32
 538:	01004a98 			; <UNDEFINED> instruction: 0x01004a98
 53c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 548:	00000024 	andeq	r0, r0, r4, lsr #32
 54c:	6e740002 	cdpvs	0, 7, cr0, cr4, cr2, {0}
 550:	00040000 	andeq	r0, r4, r0
 554:	00000000 	andeq	r0, r0, r0
 558:	01004b48 	tsteq	r0, r8, asr #22
 55c:	00000050 	andeq	r0, r0, r0, asr r0
 560:	01004b98 			; <UNDEFINED> instruction: 0x01004b98
 564:	0000000c 	andeq	r0, r0, ip
	...
 570:	0000002c 	andeq	r0, r0, ip, lsr #32
 574:	6f6e0002 	svcvs	0x006e0002
 578:	00040000 	andeq	r0, r4, r0
 57c:	00000000 	andeq	r0, r0, r0
 580:	01004ba8 	smlatbeq	r0, r8, fp, r4
 584:	00000074 	andeq	r0, r0, r4, ror r0
 588:	01004c1c 	tsteq	r0, ip, lsl ip
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
 58c:	00000084 	andeq	r0, r0, r4, lsl #1
 590:	00000000 	andeq	r0, r0, r0
 594:	00000108 	andeq	r0, r0, r8, lsl #2
	...
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	717e0002 	cmnvc	lr, r2
 5a8:	00040000 	andeq	r0, r4, r0
 5ac:	00000000 	andeq	r0, r0, r0
 5b0:	01000000 	mrseq	r0, (UNDEF: 0)
 5b4:	00000004 	andeq	r0, r0, r4
	...
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
 5c0:	000000b4 	strheq	r0, [r0], -r4
 5c4:	71a40002 			; <UNDEFINED> instruction: 0x71a40002
 5c8:	00040000 	andeq	r0, r4, r0
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	01004ca0 	smlatbeq	r0, r0, ip, r4
 5d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d8:	01004cbc 			; <UNDEFINED> instruction: 0x01004cbc
 5dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e0:	01004cd8 	ldrdeq	r4, [r0, -r8]
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
 5e4:	00000054 	andeq	r0, r0, r4, asr r0
 5e8:	01004d2c 	tsteq	r0, ip, lsr #26
 5ec:	0000008c 	andeq	r0, r0, ip, lsl #1
 5f0:	01004db8 			; <UNDEFINED> instruction: 0x01004db8
 5f4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5f8:	01004e88 	smlabbeq	r0, r8, lr, r4
 5fc:	00000118 	andeq	r0, r0, r8, lsl r1
 600:	00000000 	andeq	r0, r0, r0
 604:	0000005c 	andeq	r0, r0, ip, asr r0
 608:	01004fa0 	smlatbeq	r0, r0, pc, r4	; <UNPREDICTABLE>
 60c:	0000003c 	andeq	r0, r0, ip, lsr r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
 610:	00000000 	andeq	r0, r0, r0
 614:	00000030 	andeq	r0, r0, r0, lsr r0
 618:	00000000 	andeq	r0, r0, r0
 61c:	000000dc 	ldrdeq	r0, [r0], -ip
 620:	00000000 	andeq	r0, r0, r0
 624:	00000090 	muleq	r0, r0, r0
 628:	00000000 	andeq	r0, r0, r0
 62c:	00000084 	andeq	r0, r0, r4, lsl #1
 630:	00000000 	andeq	r0, r0, r0
 634:	00000028 	andeq	r0, r0, r8, lsr #32
 638:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
 63c:	000000ec 	andeq	r0, r0, ip, ror #1
 640:	00000000 	andeq	r0, r0, r0
 644:	0000006c 	andeq	r0, r0, ip, rrx
 648:	00000000 	andeq	r0, r0, r0
 64c:	00000044 	andeq	r0, r0, r4, asr #32
 650:	00000000 	andeq	r0, r0, r0
 654:	00000088 	andeq	r0, r0, r8, lsl #1
 658:	00000000 	andeq	r0, r0, r0
 65c:	0000006c 	andeq	r0, r0, ip, rrx
 660:	00000000 	andeq	r0, r0, r0
 664:	00000188 	andeq	r0, r0, r8, lsl #3
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
 668:	00000000 	andeq	r0, r0, r0
 66c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
 678:	0000001c 	andeq	r0, r0, ip, lsl r0
 67c:	84150002 	ldrhi	r0, [r5], #-2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
 680:	00040000 	andeq	r0, r4, r0
 684:	00000000 	andeq	r0, r0, r0
 688:	01004fdc 	ldrdeq	r4, [r0, -ip]
 68c:	00000114 	andeq	r0, r0, r4, lsl r1
	...
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	843b0002 	ldrthi	r0, [fp], #-2
 6a0:	00040000 	andeq	r0, r4, r0
 6a4:	00000000 	andeq	r0, r0, r0
 6a8:	010050f0 	strdeq	r5, [r0, -r0]
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
 6ac:	00000004 	andeq	r0, r0, r4
	...
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	84610002 	strbthi	r0, [r1], #-2
 6c0:	00040000 	andeq	r0, r4, r0
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
 6c4:	00000000 	andeq	r0, r0, r0
 6c8:	010050f4 	strdeq	r5, [r0, -r4]
 6cc:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
 6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6dc:	84870002 	strhi	r0, [r7], #2
 6e0:	00040000 	andeq	r0, r4, r0
 6e4:	00000000 	andeq	r0, r0, r0
 6e8:	01005130 	tsteq	r0, r0, lsr r1
 6ec:	00000130 	andeq	r0, r0, r0, lsr r1
	...
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	8e700002 	cdphi	0, 7, cr0, cr0, cr2, {0}
 700:	00040000 	andeq	r0, r4, r0
 704:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
 708:	01005260 	tsteq	r0, r0, ror #4
 70c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
 71c:	8e960002 	cdphi	0, 9, cr0, cr6, cr2, {0}
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
 720:	00040000 	andeq	r0, r4, r0
 724:	00000000 	andeq	r0, r0, r0
 728:	01005288 	smlabbeq	r0, r8, r2, r5
 72c:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
{
   0:	00000001 	andeq	r0, r0, r1
   4:	00000001 	andeq	r0, r0, r1
   8:	01000004 	tsteq	r0, r4
   c:	0100003c 	tsteq	r0, ip, lsr r0
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	0100003c 	tsteq	r0, ip, lsr r0
  14:	01000090 	swpeq	r0, r0, [r0]	; <UNPREDICTABLE>
    ALT_PRINTF("\n");
  18:	01000090 	swpeq	r0, r0, [r0]	; <UNPREDICTABLE>
  1c:	010000e4 	smlatteq	r0, r4, r0, r0
  20:	010000e4 	smlatteq	r0, r4, r0, r0
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	0100023c 	tsteq	r0, ip, lsr r2
  28:	0100023c 	tsteq	r0, ip, lsr r2
  2c:	010003cc 	smlabteq	r0, ip, r3, r0
  30:	010003cc 	smlabteq	r0, ip, r3, r0
  34:	010005ec 	smlatteq	r0, ip, r5, r0
  38:	010005ec 	smlatteq	r0, ip, r5, r0
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	01000658 	tsteq	r0, r8, asr r6
  40:	01000658 	tsteq	r0, r8, asr r6
  44:	01000698 			; <UNDEFINED> instruction: 0x01000698
  48:	01000698 			; <UNDEFINED> instruction: 0x01000698
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	010006d8 	ldrdeq	r0, [r0, -r8]
  50:	010006d8 	ldrdeq	r0, [r0, -r8]
  54:	01000744 	tsteq	r0, r4, asr #14
  58:	01000744 	tsteq	r0, r4, asr #14
  5c:	01000784 	smlabbeq	r0, r4, r7, r0
  60:	01000784 	smlabbeq	r0, r4, r7, r0
  64:	010007ec 	smlatteq	r0, ip, r7, r0
  68:	010007ec 	smlatteq	r0, ip, r7, r0
  6c:	01000858 	tsteq	r0, r8, asr r8
}
  70:	01000858 	tsteq	r0, r8, asr r8
  74:	010008c4 	smlabteq	r0, r4, r8, r0
  78:	010008c4 	smlabteq	r0, r4, r8, r0
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
  7c:	01000930 	tsteq	r0, r0, lsr r9
  80:	01000930 	tsteq	r0, r0, lsr r9
  84:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
  88:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
  8c:	01000a08 	tsteq	r0, r8, lsl #20
  90:	01000a08 	tsteq	r0, r8, lsl #20
      *(pmem->toptr)=0;
  94:	01000a74 	tsteq	r0, r4, ror sl
  98:	01000a74 	tsteq	r0, r4, ror sl
  9c:	01000b50 	tsteq	r0, r0, asr fp
  a0:	01000b50 	tsteq	r0, r0, asr fp
}
  a4:	01000b80 	smlabbeq	r0, r0, fp, r0
  a8:	01000b80 	smlabbeq	r0, r0, fp, r0
  ac:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
  b0:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
  b4:	01000be0 	smlatteq	r0, r0, fp, r0
  b8:	01000be0 	smlatteq	r0, r0, fp, r0
        break;
  bc:	01000c48 	tsteq	r0, r8, asr #24
    return ALT_E_SUCCESS;
  c0:	01000c48 	tsteq	r0, r8, asr #24
  c4:	01000cec 	smlatteq	r0, ip, ip, r0
        return ALT_E_ERROR;
  c8:	01000cec 	smlatteq	r0, ip, ip, r0
}
  cc:	01000d54 	tsteq	r0, r4, asr sp
  d0:	01000d54 	tsteq	r0, r4, asr sp
  d4:	01000d7c 	tsteq	r0, ip, ror sp
  d8:	00000001 	andeq	r0, r0, r1
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  dc:	00000001 	andeq	r0, r0, r1
  e0:	00000001 	andeq	r0, r0, r1
  e4:	00000001 	andeq	r0, r0, r1
  e8:	01000d7c 	tsteq	r0, ip, ror sp
  ec:	01000de4 	smlatteq	r0, r4, sp, r0
  f0:	01000de4 	smlatteq	r0, r4, sp, r0
    return dst;
  f4:	01000e4c 	tsteq	r0, ip, asr #28
}
  f8:	01000e4c 	tsteq	r0, ip, asr #28
  fc:	01000eb4 			; <UNDEFINED> instruction: 0x01000eb4
 100:	01000eb4 			; <UNDEFINED> instruction: 0x01000eb4
 104:	010010f0 	strdeq	r1, [r0, -r0]
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
 108:	00000001 	andeq	r0, r0, r1
 10c:	00000001 	andeq	r0, r0, r1
 110:	00000001 	andeq	r0, r0, r1
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
 114:	00000001 	andeq	r0, r0, r1
 118:	00000001 	andeq	r0, r0, r1
 11c:	00000001 	andeq	r0, r0, r1
 120:	00000001 	andeq	r0, r0, r1
 124:	00000001 	andeq	r0, r0, r1
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 128:	010010f0 	strdeq	r1, [r0, -r0]
 12c:	01001138 	tsteq	r0, r8, lsr r1
 130:	01001138 	tsteq	r0, r8, lsr r1
 134:	0100139c 			; <UNDEFINED> instruction: 0x0100139c
 138:	00000001 	andeq	r0, r0, r1
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	00000001 	andeq	r0, r0, r1
	...
 148:	010016c0 	smlabteq	r0, r0, r6, r1
 14c:	01001724 	tsteq	r0, r4, lsr #14
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 150:	01001728 	tsteq	r0, r8, lsr #14
 154:	01001754 	tsteq	r0, r4, asr r7
	...
 160:	0100139c 			; <UNDEFINED> instruction: 0x0100139c
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	010013c4 	smlabteq	r0, r4, r3, r1
 168:	010013c4 	smlabteq	r0, r4, r3, r1
 16c:	010014e4 	smlatteq	r0, r4, r4, r1
 170:	010014e4 	smlatteq	r0, r4, r4, r1
 174:	0100163c 	tsteq	r0, ip, lsr r6
    return ALT_E_SUCCESS;
 178:	0100163c 	tsteq	r0, ip, lsr r6
}
 17c:	01001798 			; <UNDEFINED> instruction: 0x01001798
 180:	00000001 	andeq	r0, r0, r1
 184:	00000001 	andeq	r0, r0, r1
    while (coalesce->size)
 188:	00000001 	andeq	r0, r0, r1
 18c:	00000001 	andeq	r0, r0, r1
            break;
 190:	01001798 			; <UNDEFINED> instruction: 0x01001798
    *segpa   = thissegpa;
 194:	010017e0 	smlatteq	r0, r0, r7, r1
 198:	00000001 	andeq	r0, r0, r1
 19c:	00000001 	andeq	r0, r0, r1
    *segsize = thissegsize;
 1a0:	00000001 	andeq	r0, r0, r1
 1a4:	00000001 	andeq	r0, r0, r1
 1a8:	00000001 	andeq	r0, r0, r1
    return ALT_E_SUCCESS;
 1ac:	00000001 	andeq	r0, r0, r1
}
 1b0:	010017e0 	smlatteq	r0, r0, r7, r1
 1b4:	01001860 	tsteq	r0, r0, ror #16
 1b8:	01001860 	tsteq	r0, r0, ror #16
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
 1bc:	010018e0 	smlatteq	r0, r0, r8, r1
 1c0:	00000001 	andeq	r0, r0, r1
 1c4:	00000001 	andeq	r0, r0, r1
 1c8:	010018e0 	smlatteq	r0, r0, r8, r1
 1cc:	010019e4 	smlatteq	r0, r4, r9, r1
    clkStep = 9 * clk100; /* 900MHz */
 1d0:	00000001 	andeq	r0, r0, r1
 1d4:	00000001 	andeq	r0, r0, r1
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	00000001 	andeq	r0, r0, r1
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 1e4:	00000001 	andeq	r0, r0, r1
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	00000001 	andeq	r0, r0, r1
 1f0:	00000001 	andeq	r0, r0, r1
 1f4:	00000001 	andeq	r0, r0, r1
 1f8:	00000001 	andeq	r0, r0, r1
 1fc:	00000001 	andeq	r0, r0, r1
 200:	00000001 	andeq	r0, r0, r1
 204:	00000001 	andeq	r0, r0, r1
 208:	00000001 	andeq	r0, r0, r1
 20c:	00000001 	andeq	r0, r0, r1
 210:	00000001 	andeq	r0, r0, r1
        clkStep += clk100;
 214:	00000001 	andeq	r0, r0, r1
 218:	00000001 	andeq	r0, r0, r1
 21c:	00000001 	andeq	r0, r0, r1
 220:	00000001 	andeq	r0, r0, r1
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 224:	00000001 	andeq	r0, r0, r1
 228:	010019e4 	smlatteq	r0, r4, r9, r1
 22c:	01001a58 	tsteq	r0, r8, asr sl
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 230:	00000001 	andeq	r0, r0, r1
 234:	00000001 	andeq	r0, r0, r1
 238:	01001a58 	tsteq	r0, r8, asr sl
 23c:	01001ad0 	ldrdeq	r1, [r0, -r0]
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
 240:	00000001 	andeq	r0, r0, r1
 244:	00000001 	andeq	r0, r0, r1
 248:	01001ad0 	ldrdeq	r1, [r0, -r0]
 24c:	01001b54 	tsteq	r0, r4, asr fp
 250:	00000001 	andeq	r0, r0, r1
 254:	00000001 	andeq	r0, r0, r1
 258:	00000001 	andeq	r0, r0, r1
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
 25c:	00000001 	andeq	r0, r0, r1
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	00000001 	andeq	r0, r0, r1
 26c:	00000001 	andeq	r0, r0, r1
 270:	00000001 	andeq	r0, r0, r1
 274:	00000001 	andeq	r0, r0, r1
 278:	00000001 	andeq	r0, r0, r1
 27c:	00000001 	andeq	r0, r0, r1
 280:	00000001 	andeq	r0, r0, r1
 284:	00000001 	andeq	r0, r0, r1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 288:	00000001 	andeq	r0, r0, r1
 28c:	00000001 	andeq	r0, r0, r1
 290:	01001b54 	tsteq	r0, r4, asr fp
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 294:	01001b80 	smlabbeq	r0, r0, fp, r1
 298:	00000001 	andeq	r0, r0, r1
 29c:	00000001 	andeq	r0, r0, r1
 2a0:	01001b80 	smlabbeq	r0, r0, fp, r1
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
 2a4:	01001cd4 	ldrdeq	r1, [r0, -r4]
 2a8:	00000001 	andeq	r0, r0, r1
 2ac:	00000001 	andeq	r0, r0, r1
 2b0:	00000001 	andeq	r0, r0, r1
 2b4:	00000001 	andeq	r0, r0, r1
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	01001cd4 	ldrdeq	r1, [r0, -r4]
 2c4:	01001d54 	tsteq	r0, r4, asr sp
 2c8:	00000001 	andeq	r0, r0, r1
 2cc:	00000001 	andeq	r0, r0, r1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
 2dc:	00000001 	andeq	r0, r0, r1
 2e0:	00000001 	andeq	r0, r0, r1
 2e4:	00000001 	andeq	r0, r0, r1
 2e8:	00000001 	andeq	r0, r0, r1
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 2ec:	00000001 	andeq	r0, r0, r1
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
 300:	00000001 	andeq	r0, r0, r1
 304:	00000001 	andeq	r0, r0, r1
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 308:	00000001 	andeq	r0, r0, r1
 30c:	00000001 	andeq	r0, r0, r1
 310:	01001d54 	tsteq	r0, r4, asr sp
 314:	01001d80 	smlabbeq	r0, r0, sp, r1
 318:	00000001 	andeq	r0, r0, r1
 31c:	00000001 	andeq	r0, r0, r1
 320:	01001d80 	smlabbeq	r0, r0, sp, r1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
 324:	01001dac 	smlatbeq	r0, ip, sp, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
 330:	00000001 	andeq	r0, r0, r1
 334:	00000001 	andeq	r0, r0, r1
	...
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
 340:	00000001 	andeq	r0, r0, r1
 344:	00000001 	andeq	r0, r0, r1
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
	...
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
 358:	01001dac 	smlatbeq	r0, ip, sp, r1
 35c:	01001dd0 	ldrdeq	r1, [r0, -r0]
 360:	01001dd0 	ldrdeq	r1, [r0, -r0]
 364:	01001dec 	smlatteq	r0, ip, sp, r1
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
 370:	01001dec 	smlatteq	r0, ip, sp, r1
 374:	01001e78 	tsteq	r0, r8, ror lr
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	00000001 	andeq	r0, r0, r1
 38c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
 390:	01001e78 	tsteq	r0, r8, ror lr
 394:	01001ec8 	smlabteq	r0, r8, lr, r1
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	01001ec8 	smlabteq	r0, r8, lr, r1
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
 3a4:	01001fa8 	smlatbeq	r0, r8, pc, r1	; <UNPREDICTABLE>
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
 3b8:	01001fa8 	smlatbeq	r0, r8, pc, r1	; <UNPREDICTABLE>
 3bc:	0100205c 	qaddeq	r2, ip, r0
 3c0:	0100205c 	qaddeq	r2, ip, r0
 3c4:	0100213c 	tsteq	r0, ip, lsr r1
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	0100213c 	tsteq	r0, ip, lsr r1
 3d4:	01002170 	tsteq	r0, r0, ror r1
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	01002170 	tsteq	r0, r0, ror r1
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
 3e4:	010021d8 	ldrdeq	r2, [r0, -r8]
 3e8:	010021d8 	ldrdeq	r2, [r0, -r8]
 3ec:	01002500 	tsteq	r0, r0, lsl #10
 3f0:	01002500 	tsteq	r0, r0, lsl #10
 3f4:	01002568 	tsteq	r0, r8, ror #10
 3f8:	01002568 	tsteq	r0, r8, ror #10
 3fc:	010025c8 	smlabteq	r0, r8, r5, r2
 400:	010025c8 	smlabteq	r0, r8, r5, r2
 404:	010026ec 	smlatteq	r0, ip, r6, r2
 408:	010026ec 	smlatteq	r0, ip, r6, r2
 40c:	01002810 	tsteq	r0, r0, lsl r8
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
 410:	01002810 	tsteq	r0, r0, lsl r8
 414:	0100291c 	tsteq	r0, ip, lsl r9
 418:	0100291c 	tsteq	r0, ip, lsl r9
 41c:	01002a2c 	tsteq	r0, ip, lsr #20
 420:	01002a2c 	tsteq	r0, ip, lsr #20
 424:	01002a74 	tsteq	r0, r4, ror sl
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
 428:	01002a74 	tsteq	r0, r4, ror sl
 42c:	0100384c 	tsteq	r0, ip, asr #16
 430:	0100384c 	tsteq	r0, ip, asr #16
 434:	01003988 	smlabbeq	r0, r8, r9, r3
 438:	00000001 	andeq	r0, r0, r1
 43c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
 440:	00000001 	andeq	r0, r0, r1
 444:	00000001 	andeq	r0, r0, r1
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	00000001 	andeq	r0, r0, r1
 46c:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
 470:	00000001 	andeq	r0, r0, r1
 474:	00000001 	andeq	r0, r0, r1
 478:	00000001 	andeq	r0, r0, r1
 47c:	00000001 	andeq	r0, r0, r1
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
 488:	01003988 	smlabbeq	r0, r8, r9, r3
 48c:	010039d8 	ldrdeq	r3, [r0, -r8]
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	010039d8 	ldrdeq	r3, [r0, -r8]
 49c:	01003a44 	tsteq	r0, r4, asr #20
 4a0:	01003a44 	tsteq	r0, r4, asr #20
 4a4:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
 4a8:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
 4ac:	01003b34 	tsteq	r0, r4, lsr fp
 4b0:	01003b34 	tsteq	r0, r4, lsr fp
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
 4b4:	01003c70 	tsteq	r0, r0, ror ip
 4b8:	01003c70 	tsteq	r0, r0, ror ip
 4bc:	01003de8 	smlatteq	r0, r8, sp, r3
 4c0:	01003de8 	smlatteq	r0, r8, sp, r3
 4c4:	01004604 	tsteq	r0, r4, lsl #12
 4c8:	01004604 	tsteq	r0, r4, lsl #12
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
 4cc:	010048b8 			; <UNDEFINED> instruction: 0x010048b8
	...
 4d8:	010048b8 			; <UNDEFINED> instruction: 0x010048b8
 4dc:	01004938 	tsteq	r0, r8, lsr r9
 4e0:	01004938 	tsteq	r0, r8, lsr r9
 4e4:	01004a10 	tsteq	r0, r0, lsl sl
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
 4f8:	01004a10 	tsteq	r0, r0, lsl sl
 4fc:	01004a6c 	tsteq	r0, ip, ror #20
 500:	01004a6c 	tsteq	r0, ip, ror #20
 504:	01004a98 			; <UNDEFINED> instruction: 0x01004a98
 508:	01004a98 			; <UNDEFINED> instruction: 0x01004a98
 50c:	01004b48 	tsteq	r0, r8, asr #22
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
 518:	01004b48 	tsteq	r0, r8, asr #22
 51c:	01004b98 			; <UNDEFINED> instruction: 0x01004b98
 520:	01004b98 			; <UNDEFINED> instruction: 0x01004b98
 524:	01004ba4 	smlatbeq	r0, r4, fp, r4
	...
 530:	01004ba8 	smlatbeq	r0, r8, fp, r4
 534:	01004c1c 	tsteq	r0, ip, lsl ip
 538:	01004c1c 	tsteq	r0, ip, lsl ip
 53c:	01004ca0 	smlatbeq	r0, r0, ip, r4
 540:	00000001 	andeq	r0, r0, r1
 544:	00000001 	andeq	r0, r0, r1
	...
 550:	00000001 	andeq	r0, r0, r1
 554:	00000001 	andeq	r0, r0, r1
 558:	00000001 	andeq	r0, r0, r1
 55c:	00000001 	andeq	r0, r0, r1
	...
 568:	01004ca0 	smlatbeq	r0, r0, ip, r4
 56c:	01004cbc 			; <UNDEFINED> instruction: 0x01004cbc
 570:	01004cbc 			; <UNDEFINED> instruction: 0x01004cbc
 574:	01004cd8 	ldrdeq	r4, [r0, -r8]
 578:	01004cd8 	ldrdeq	r4, [r0, -r8]
 57c:	01004d2c 	tsteq	r0, ip, lsr #26
 580:	01004d2c 	tsteq	r0, ip, lsr #26
 584:	01004db8 			; <UNDEFINED> instruction: 0x01004db8
 588:	01004db8 			; <UNDEFINED> instruction: 0x01004db8
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
 58c:	01004e88 	smlabbeq	r0, r8, lr, r4
 590:	01004e88 	smlabbeq	r0, r8, lr, r4
 594:	01004fa0 	smlatbeq	r0, r0, pc, r4	; <UNPREDICTABLE>
 598:	00000001 	andeq	r0, r0, r1
 59c:	00000001 	andeq	r0, r0, r1
 5a0:	01004fa0 	smlatbeq	r0, r0, pc, r4	; <UNPREDICTABLE>
 5a4:	01004fdc 	ldrdeq	r4, [r0, -ip]
 5a8:	00000001 	andeq	r0, r0, r1
 5ac:	00000001 	andeq	r0, r0, r1
 5b0:	00000001 	andeq	r0, r0, r1
 5b4:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
 5b8:	00000001 	andeq	r0, r0, r1
 5bc:	00000001 	andeq	r0, r0, r1
 5c0:	00000001 	andeq	r0, r0, r1
 5c4:	00000001 	andeq	r0, r0, r1
 5c8:	00000001 	andeq	r0, r0, r1
 5cc:	00000001 	andeq	r0, r0, r1
 5d0:	00000001 	andeq	r0, r0, r1
 5d4:	00000001 	andeq	r0, r0, r1
 5d8:	00000001 	andeq	r0, r0, r1
 5dc:	00000001 	andeq	r0, r0, r1
 5e0:	00000001 	andeq	r0, r0, r1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
 5e4:	00000001 	andeq	r0, r0, r1
 5e8:	00000001 	andeq	r0, r0, r1
 5ec:	00000001 	andeq	r0, r0, r1
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
 5f8:	00000001 	andeq	r0, r0, r1
 5fc:	00000001 	andeq	r0, r0, r1
 600:	00000001 	andeq	r0, r0, r1
 604:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
{
       0:	0000097d 	andeq	r0, r0, sp, ror r9
       4:	014d0003 	cmpeq	sp, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    ALT_PRINTF("\n");
      18:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
      1c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
      20:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	6d77682f 	ldclvs	8, cr6, [r7, #-188]!	; 0xffffff44
      28:	732f7267 			; <UNDEFINED> instruction: 0x732f7267
      2c:	615f636f 	cmpvs	pc, pc, ror #6
      30:	2f003031 	svccs	0x00003031
      34:	2f727375 	svccs	0x00727375
      38:	2f62696c 	svccs	0x0062696c
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	2f636367 	svccs	0x00636367
      40:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      44:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      48:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      50:	2f312e32 	svccs	0x00312e32
      54:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      58:	00656475 	rsbeq	r6, r5, r5, ror r4
      5c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      60:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      64:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      68:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      6c:	2f62696c 	svccs	0x0062696c
}
      70:	00737973 	rsbseq	r7, r3, r3, ror r9
      74:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      80:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      84:	0062696c 	rsbeq	r6, r2, ip, ror #18
      88:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
      8c:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
      90:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      *(pmem->toptr)=0;
      94:	77680065 	strbvc	r0, [r8, -r5, rrx]!
      98:	2f62696c 	svccs	0x0062696c
      9c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      a0:	2f656475 	svccs	0x00656475
}
      a4:	5f636f73 	svcpl	0x00636f73
      a8:	00303161 	eorseq	r3, r0, r1, ror #2
      ac:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
      b0:	6f6c635f 	svcvs	0x006c635f
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	6d5f6b63 	vldrvs	d22, [pc, #-396]	; ffffff30 <__shm_end__+0xbfffff30>
      b8:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
        break;
      bc:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
    return ALT_E_SUCCESS;
      c0:	00000100 	andeq	r0, r0, r0, lsl #2
      c4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
        return ALT_E_ERROR;
      c8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
}
      cc:	00000200 	andeq	r0, r0, r0, lsl #4
      d0:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
      d4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
      d8:	00000200 	andeq	r0, r0, r0, lsl #4
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
      e0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
      e4:	00000300 	andeq	r0, r0, r0, lsl #6
      e8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
      ec:	00682e74 	rsbeq	r2, r8, r4, ror lr
      f0:	6c000003 	stcvs	0, cr0, [r0], {3}
    return dst;
      f4:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
}
      f8:	00030068 	andeq	r0, r3, r8, rrx
      fc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     100:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     104:	00040068 	andeq	r0, r4, r8, rrx
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
     108:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     10c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     110:	00000400 	andeq	r0, r0, r0, lsl #8
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
     114:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     118:	00682e62 	rsbeq	r2, r8, r2, ror #28
     11c:	61000005 	tstvs	r0, r5
     120:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     124:	6b636f6c 	blvs	18dbedc <__bss_end__+0x8bfedc>
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     128:	6e616d5f 	mcrvs	13, 3, r6, cr1, cr15, {2}
     12c:	72656761 	rsbvc	r6, r5, #25427968	; 0x1840000
     130:	0600682e 	streq	r6, [r0], -lr, lsr #16
     134:	6c610000 	stclvs	0, cr0, [r1], #-0
     138:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
     140:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     144:	6c610000 	stclvs	0, cr0, [r1], #-0
     148:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     14c:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     154:	05000000 	streq	r0, [r0, #-0]
     158:	02050001 	andeq	r0, r5, #1
     15c:	00000000 	andeq	r0, r0, r0
     160:	0100d303 	tsteq	r0, r3, lsl #6
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	05bb0505 	ldreq	r0, [fp, #1285]!	; 0x505
     168:	053f0814 	ldreq	r0, [pc, #-2068]!	; fffff95c <__shm_end__+0xbffff95c>
     16c:	1b058309 	blne	160d98 <__core1_unwind_stub-0xe9f268>
     170:	83090530 	movwhi	r0, #38192	; 0x9530
     174:	05301605 	ldreq	r1, [r0, #-1541]!	; 0xfffff9fb
    return ALT_E_SUCCESS;
     178:	10058309 	andne	r8, r5, r9, lsl #6
}
     17c:	4c0c0530 	cfstr32mi	mvfx0, [ip], {48}	; 0x30
     180:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     184:	01010008 	tsteq	r1, r8
    while (coalesce->size)
     188:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     18c:	00000402 	andeq	r0, r0, r2, lsl #8
            break;
     190:	00e80301 	rsceq	r0, r8, r1, lsl #6
    *segpa   = thissegpa;
     194:	830c0501 	movwhi	r0, #50433	; 0xc501
     198:	2f01059f 	svccs	0x0001059f
     19c:	01000802 	tsteq	r0, r2, lsl #16
    *segsize = thissegsize;
     1a0:	00010501 	andeq	r0, r1, r1, lsl #10
     1a4:	003c0205 	eorseq	r0, ip, r5, lsl #4
     1a8:	ee030100 	adfs	f0, f3, f0
    return ALT_E_SUCCESS;
     1ac:	08050100 	stmdaeq	r5, {r8}
}
     1b0:	66070583 	strvs	r0, [r7], -r3, lsl #11
     1b4:	9f4c1005 	svcls	0x004c1005
     1b8:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     1c0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     1c4:	02050001 	andeq	r0, r5, #1
     1c8:	01000090 	swpeq	r0, r0, [r0]	; <UNPREDICTABLE>
     1cc:	0100f803 	tsteq	r0, r3, lsl #16	; <UNPREDICTABLE>
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	05830805 	streq	r0, [r3, #2053]	; 0x805
     1d4:	10056607 	andne	r6, r5, r7, lsl #12
     1d8:	0c059f4c 	stceq	15, cr9, [r5], {76}	; 0x4c
     1dc:	2f01054c 	svccs	0x0001054c
     1e0:	01000802 	tsteq	r0, r2, lsl #16
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	00010501 	andeq	r0, r1, r1, lsl #10
     1e8:	00e40205 	rsceq	r0, r4, r5, lsl #4
     1ec:	85030100 	strhi	r0, [r3, #-256]	; 0xffffff00
     1f0:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
     1f4:	0d055183 	stfeqs	f5, [r5, #-524]	; 0xfffffdf4
     1f8:	4b0b054a 	blmi	2c1728 <__core1_unwind_stub-0xd3e8d8>
     1fc:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
     200:	05230812 	streq	r0, [r3, #-2066]!	; 0xfffff7ee
     204:	1205830c 	andne	r8, r5, #12, 6	; 0x30000000
     208:	830c0530 	movwhi	r0, #50480	; 0xc530
     20c:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
     210:	1305830c 	movwne	r8, #21260	; 0x530c
        clkStep += clk100;
     214:	4d060530 	cfstr32mi	mvfx0, [r6, #-192]	; 0xffffff40
     218:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
     21c:	05854b0b 	streq	r4, [r5, #2827]	; 0xb0b
     220:	0f054a09 	svceq	0x00054a09
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	4a37054b 	bmi	dc1758 <__core1_unwind_stub-0x23e8a8>
     228:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
     22c:	0559080f 	ldrbeq	r0, [r9, #-2063]	; 0xfffff7f1
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	0b056637 	bleq	159b14 <__core1_unwind_stub-0xea64ec>
     234:	a00d0566 	andge	r0, sp, r6, ror #10
     238:	4b2e0b05 	blmi	b82e54 <__core1_unwind_stub-0x47d1ac>
     23c:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	022f0104 	eoreq	r0, pc, #4, 2
     244:	01010006 	tsteq	r1, r6
     248:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     24c:	00023c02 	andeq	r3, r2, r2, lsl #24
     250:	01ab0301 			; <UNDEFINED> instruction: 0x01ab0301
     254:	83140501 	tsthi	r4, #4194304	; 0x400000
     258:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	0d055014 	stceq	0, cr5, [r5, #-80]	; 0xffffffb0
     260:	4b0b054a 	blmi	2c1790 <__core1_unwind_stub-0xd3e870>
     264:	3f081205 	svccc	0x00081205
     268:	30830c05 	addcc	r0, r3, r5, lsl #24
     26c:	05681905 	strbeq	r1, [r8, #-2309]!	; 0xfffff6fb
     270:	11056617 	tstne	r5, r7, lsl r6
     274:	bb0c052e 	bllt	301734 <__core1_unwind_stub-0xcfe8cc>
     278:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
     27c:	1205830c 	andne	r8, r5, #12, 6	; 0x30000000
     280:	830c0530 	movwhi	r0, #50480	; 0xc530
     284:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	0f054d06 	svceq	0x00054d06
     28c:	4b0b0567 	blmi	2c1830 <__core1_unwind_stub-0xd3e7d0>
     290:	4a090585 	bmi	2418ac <__core1_unwind_stub-0xdbe754>
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
     298:	0b054a36 	bleq	152b78 <__core1_unwind_stub-0xead488>
     29c:	080f0566 	stmdaeq	pc, {r1, r2, r5, r6, r8, sl}	; <UNPREDICTABLE>
     2a0:	66360559 			; <UNDEFINED> instruction: 0x66360559
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
     2a8:	0b05a00d 	bleq	1682e4 <__core1_unwind_stub-0xe97d1c>
     2ac:	01054b2e 	tsteq	r5, lr, lsr #22
     2b0:	01040200 	mrseq	r0, R12_usr
     2b4:	0006022f 	andeq	r0, r6, pc, lsr #4
     2b8:	01050101 	tsteq	r5, r1, lsl #2
     2bc:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
     2c0:	03010003 	movweq	r0, #4099	; 0x1003
     2c4:	050101ed 	streq	r0, [r1, #-493]	; 0xfffffe13
     2c8:	1005db07 	andne	sp, r5, r7, lsl #22
     2cc:	4a0e0567 	bmi	381870 <__core1_unwind_stub-0xc7e790>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	05681005 	strbeq	r1, [r8, #-5]!
     2d4:	07054a0e 	streq	r4, [r5, -lr, lsl #20]
     2d8:	001c054c 	andseq	r0, ip, ip, asr #10
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     2e0:	01040200 	mrseq	r0, R12_usr
     2e4:	4d100565 	cfldr32mi	mvfx0, [r0, #-404]	; 0xfffffe6c
     2e8:	4d070567 	cfstr32mi	mvfx0, [r7, #-412]	; 0xfffffe64
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	05671005 	strbeq	r1, [r7, #-5]!
     2f0:	10054a0e 	andne	r4, r5, lr, lsl #20
     2f4:	4a0e0568 	bmi	38189c <__core1_unwind_stub-0xc7e764>
     2f8:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
     2fc:	10056607 	andne	r6, r5, r7, lsl #12
     300:	840c054c 	strhi	r0, [ip], #-1356	; 0xfffffab4
     304:	77081405 	strvc	r1, [r8, -r5, lsl #8]
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	05841305 	streq	r1, [r4, #773]	; 0x305
     30c:	1805830f 	stmdane	r5, {r0, r1, r2, r3, r8, r9, pc}
     310:	4b140567 	blmi	5018b4 <__core1_unwind_stub-0xafe74c>
     314:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     318:	2005671a 	andcs	r6, r5, sl, lsl r7
     31c:	4a1e052e 	bmi	7817dc <__core1_unwind_stub-0x87e824>
     320:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	0d059e14 	stceq	14, cr9, [r5, #-80]	; 0xffffffb0
     328:	3013054b 	andscc	r0, r3, fp, asr #10
     32c:	05830f05 	streq	r0, [r3, #3845]	; 0xf05
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	14056718 	strne	r6, [r5], #-1816	; 0xfffff8e8
     334:	4a12054b 	bmi	481868 <__core1_unwind_stub-0xb7e798>
     338:	05671a05 	strbeq	r1, [r7, #-2565]!	; 0xfffff5fb
     33c:	1e052e20 	cdpne	14, 0, cr2, cr5, cr0, {1}
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	2e1a054a 	cfmac32cs	mvfx0, mvfx10, mvfx10
     344:	059e1405 	ldreq	r1, [lr, #1029]	; 0x405
     348:	13054b0d 	movwne	r4, #23309	; 0x5b0d
     34c:	830d0530 	movwhi	r0, #54576	; 0xd530
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	13056830 	movwne	r6, #22576	; 0x5830
     354:	4c0c0530 	cfstr32mi	mvfx0, [ip], {48}	; 0x30
     358:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
     35c:	022f0104 	eoreq	r0, pc, #4, 2
     360:	01010006 	tsteq	r1, r6
     364:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	0005ec02 	andeq	lr, r5, r2, lsl #24
     36c:	02a70301 	adceq	r0, r7, #67108864	; 0x4000000
     370:	870b0501 	strhi	r0, [fp, -r1, lsl #10]
     374:	26020c05 	strcs	r0, [r2], -r5, lsl #24
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	2f010519 	svccs	0x00010519
     37c:	01000602 	tsteq	r0, r2, lsl #12
     380:	00010501 	andeq	r0, r1, r1, lsl #10
     384:	06580205 	ldrbeq	r0, [r8], -r5, lsl #4
     388:	b7030100 	strlt	r0, [r3, -r0, lsl #2]
     38c:	0b050102 	bleq	14079c <__core1_unwind_stub-0xebf864>
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	0c056784 	stceq	7, cr6, [r5], {132}	; 0x84
     394:	2f01059f 	svccs	0x0001059f
     398:	01000602 	tsteq	r0, r2, lsl #12
     39c:	00010501 	andeq	r0, r1, r1, lsl #10
     3a0:	06980205 	ldreq	r0, [r8], r5, lsl #4
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	bf030100 	svclt	0x00030100
     3a8:	0b050102 	bleq	1407b8 <__core1_unwind_stub-0xebf848>
     3ac:	0c056784 	stceq	7, cr6, [r5], {132}	; 0x84
     3b0:	2f01059f 	svccs	0x0001059f
     3b4:	01000602 	tsteq	r0, r2, lsl #12
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	00010501 	andeq	r0, r1, r1, lsl #10
     3bc:	06d80205 	ldrbeq	r0, [r8], r5, lsl #4
     3c0:	c8030100 	stmdagt	r3, {r8}
     3c4:	0b050102 	bleq	1407d4 <__core1_unwind_stub-0xebf82c>
     3c8:	020c0584 	andeq	r0, ip, #132, 10	; 0x21000000
     3cc:	01051a26 	tsteq	r5, r6, lsr #20
     3d0:	0006022f 	andeq	r0, r6, pc, lsr #4
     3d4:	01050101 	tsteq	r5, r1, lsl #2
     3d8:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
     3dc:	03010007 	movweq	r0, #4103	; 0x1007
     3e0:	050102d6 	streq	r0, [r1, #-726]	; 0xfffffd2a
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	0567840b 	strbeq	r8, [r7, #-1035]!	; 0xfffffbf5
     3e8:	01059f0c 	tsteq	r5, ip, lsl #30
     3ec:	0006022f 	andeq	r0, r6, pc, lsr #4
     3f0:	01050101 	tsteq	r5, r1, lsl #2
     3f4:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
     3f8:	03010007 	movweq	r0, #4103	; 0x1007
     3fc:	050102de 	streq	r0, [r1, #-734]	; 0xfffffd22
     400:	1305840b 	movwne	r8, #21515	; 0x540b
     404:	82100567 	andshi	r0, r0, #432013312	; 0x19c00000
     408:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
     40c:	0522080c 	streq	r0, [r2, #-2060]!	; 0xfffff7f4
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	06022f01 	streq	r2, [r2], -r1, lsl #30
     414:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     418:	02050001 	andeq	r0, r5, #1
     41c:	010007ec 	smlatteq	r0, ip, r7, r0
     420:	0102e703 	tsteq	r2, r3, lsl #14
     424:	05840b05 	streq	r0, [r4, #2821]	; 0xb05
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	10056713 	andne	r6, r5, r3, lsl r7
     42c:	4a0b059e 	bmi	2c1aac <__core1_unwind_stub-0xd3e554>
     430:	22080c05 	andcs	r0, r8, #1280	; 0x500
     434:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     438:	01010006 	tsteq	r1, r6
     43c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	00085802 	andeq	r5, r8, r2, lsl #16
     444:	02f00301 	rscseq	r0, r0, #67108864	; 0x4000000
     448:	840b0501 	strhi	r0, [fp], #-1281	; 0xfffffaff
     44c:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
     450:	0b059e10 	bleq	167c98 <__core1_unwind_stub-0xe98368>
     454:	080c054a 	stmdaeq	ip, {r1, r3, r6, r8, sl}
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	2f010522 	svccs	0x00010522
     45c:	01000602 	tsteq	r0, r2, lsl #12
     460:	00010501 	andeq	r0, r1, r1, lsl #10
     464:	08c40205 	stmiaeq	r4, {r0, r2, r9}^
     468:	f9030100 			; <UNDEFINED> instruction: 0xf9030100
     46c:	0b050102 	bleq	14087c <__core1_unwind_stub-0xebf784>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	67130584 	ldrvs	r0, [r3, -r4, lsl #11]
     474:	059e1005 	ldreq	r1, [lr, #5]
     478:	0c054a0b 			; <UNDEFINED> instruction: 0x0c054a0b
     47c:	01052208 	tsteq	r5, r8, lsl #4
     480:	0006022f 	andeq	r0, r6, pc, lsr #4
     484:	01050101 	tsteq	r5, r1, lsl #2
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	30020500 	andcc	r0, r2, r0, lsl #10
     48c:	03010009 	movweq	r0, #4105	; 0x1009
     490:	05010382 	streq	r0, [r1, #-898]	; 0xfffffc7e
     494:	1305840b 	movwne	r8, #21515	; 0x540b
     498:	9e100567 	cfmsc32ls	mvfx0, mvfx0, mvfx7
     49c:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
     4a0:	0522080c 	streq	r0, [r2, #-2060]!	; 0xfffff7f4
     4a4:	06022f01 	streq	r2, [r2], -r1, lsl #30
     4a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     4ac:	02050001 	andeq	r0, r5, #1
     4b0:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	01038b03 	tsteq	r3, r3, lsl #22
     4b8:	05840b05 	streq	r0, [r4, #2821]	; 0xb05
     4bc:	10056713 	andne	r6, r5, r3, lsl r7
     4c0:	4a0b059e 	bmi	2c1b40 <__core1_unwind_stub-0xd3e4c0>
     4c4:	22080c05 	andcs	r0, r8, #1280	; 0x500
     4c8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	01010006 	tsteq	r1, r6
     4d0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     4d4:	000a0802 	andeq	r0, sl, r2, lsl #16
     4d8:	03940301 	orrseq	r0, r4, #67108864	; 0x4000000
     4dc:	840b0501 	strhi	r0, [fp], #-1281	; 0xfffffaff
     4e0:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
     4e4:	0b059e10 	bleq	167d2c <__core1_unwind_stub-0xe982d4>
     4e8:	080c054a 	stmdaeq	ip, {r1, r3, r6, r8, sl}
     4ec:	2f010522 	svccs	0x00010522
     4f0:	01000602 	tsteq	r0, r2, lsl #12
     4f4:	00010501 	andeq	r0, r1, r1, lsl #10
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	0a740205 	beq	1d00d14 <__bss_end__+0xce4d14>
     4fc:	b1030100 	mrslt	r0, (UNDEF: 19)
     500:	08050103 	stmdaeq	r5, {r0, r1, r8}
     504:	663605bd 			; <UNDEFINED> instruction: 0x663605bd
     508:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     50c:	0b034c10 	bleq	d3554 <__core1_unwind_stub-0xf2caac>
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	05012802 	streq	r2, [r1, #-2050]	; 0xfffff7fe
     514:	02090301 	andeq	r0, r9, #67108864	; 0x4000000
     518:	06020126 	streq	r0, [r2], -r6, lsr #2
     51c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     520:	02050001 	andeq	r0, r5, #1
     524:	01000b50 	tsteq	r0, r0, asr fp
     528:	0103ce03 	tsteq	r3, r3, lsl #28
     52c:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     530:	0602a101 	streq	sl, [r2], -r1, lsl #2
     534:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     538:	02050001 	andeq	r0, r5, #1
     53c:	01000b80 	smlabbeq	r0, r0, fp, r0
     540:	0103d503 	tsteq	r3, r3, lsl #10
     544:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     548:	0602a101 	streq	sl, [r2], -r1, lsl #2
     54c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     550:	02050001 	andeq	r0, r5, #1
     554:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
     558:	0103dc03 	tsteq	r3, r3, lsl #24
     55c:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     560:	0602a101 	streq	sl, [r2], -r1, lsl #2
     564:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     568:	02050001 	andeq	r0, r5, #1
     56c:	01000be0 	smlatteq	r0, r0, fp, r0
     570:	0103e303 	tsteq	r3, r3, lsl #6
     574:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     578:	1a260201 	bne	980d84 <__core1_unwind_stub-0x67f27c>
     57c:	01000602 	tsteq	r0, r2, lsl #12
     580:	00010501 	andeq	r0, r1, r1, lsl #10
     584:	0c480205 	sfmeq	f0, 2, [r8], {5}
     588:	ef030100 	svc	0x00030100
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	0b050103 	bleq	1409a0 <__core1_unwind_stub-0xebf660>
     590:	03110584 	tsteq	r1, #132, 10	; 0x21000000
     594:	01260209 			; <UNDEFINED> instruction: 0x01260209
     598:	05820f05 	streq	r0, [r2, #3845]	; 0xf05
     59c:	0b052e0a 	bleq	14bdcc <__core1_unwind_stub-0xeb4234>
     5a0:	01052208 	tsteq	r5, r8, lsl #4
     5a4:	0006022f 	andeq	r0, r6, pc, lsr #4
     5a8:	01050101 	tsteq	r5, r1, lsl #2
     5ac:	ec020500 	cfstr32	mvfx0, [r2], {-0}
     5b0:	0301000c 	movweq	r0, #4108	; 0x100c
     5b4:	05010480 	streq	r0, [r1, #-1152]	; 0xfffffb80
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0105830c 	tsteq	r5, ip, lsl #6
     5bc:	021a2602 	andseq	r2, sl, #2097152	; 0x200000
     5c0:	01010006 	tsteq	r1, r6
     5c4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     5c8:	000d5402 	andeq	r5, sp, r2, lsl #8
     5cc:	048c0301 	streq	r0, [ip], #769	; 0x301
     5d0:	830c0501 	movwhi	r0, #50433	; 0xc501
     5d4:	02670105 	rsbeq	r0, r7, #1073741825	; 0x40000001
     5d8:	01010006 	tsteq	r1, r6
     5dc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     5e0:	00000002 	andeq	r0, r0, r2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	04910300 	ldreq	r0, [r1], #768	; 0x300
     5e8:	840b0501 	strhi	r0, [fp], #-1281	; 0xfffffaff
     5ec:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
     5f0:	0c05660b 	stceq	6, cr6, [r5], {11}
     5f4:	01052108 	tsteq	r5, r8, lsl #2
     5f8:	0006022f 	andeq	r0, r6, pc, lsr #4
     5fc:	01050101 	tsteq	r5, r1, lsl #2
     600:	00020500 	andeq	r0, r2, r0, lsl #10
     604:	03000000 	movweq	r0, #0
     608:	05010499 	streq	r0, [r1, #-1177]	; 0xfffffb67
     60c:	0d05840b 	cfstrseq	mvf8, [r5, #-44]	; 0xffffffd4
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	660b0567 	strvs	r0, [fp], -r7, ror #10
     614:	21080c05 	tstcs	r8, r5, lsl #24
     618:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     61c:	01010006 	tsteq	r1, r6
     620:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     624:	000d7c02 	andeq	r7, sp, r2, lsl #24
     628:	04a10301 	strteq	r0, [r1], #769	; 0x301
     62c:	830c0501 	movwhi	r0, #50433	; 0xc501
     630:	26020105 	strcs	r0, [r2], -r5, lsl #2
     634:	0006021a 	andeq	r0, r6, sl, lsl r2
     638:	01050101 	tsteq	r5, r1, lsl #2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
     640:	0301000d 	movweq	r0, #4109	; 0x100d
     644:	050104ad 	streq	r0, [r1, #-1197]	; 0xfffffb53
     648:	0105830c 	tsteq	r5, ip, lsl #6
     64c:	021a2602 	andseq	r2, sl, #2097152	; 0x200000
     650:	01010006 	tsteq	r1, r6
     654:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     658:	000e4c02 	andeq	r4, lr, r2, lsl #24
     65c:	04b90301 	ldrteq	r0, [r9], #769	; 0x301
     660:	830c0501 	movwhi	r0, #50433	; 0xc501
     664:	26020105 	strcs	r0, [r2], -r5, lsl #2
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	0006021a 	andeq	r0, r6, sl, lsl r2
     66c:	01050101 	tsteq	r5, r1, lsl #2
     670:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
     674:	0301000e 	movweq	r0, #4110	; 0x100e
     678:	050104c9 	streq	r0, [r1, #-1225]	; 0xfffffb37
     67c:	0805bb15 	stmdaeq	r5, {r0, r2, r4, r8, r9, fp, ip, sp, pc}
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	6810054c 	ldmdavs	r0, {r2, r3, r6, r8, sl}
     684:	054d0505 	strbeq	r0, [sp, #-1285]	; 0xfffffafb
     688:	1644020f 	strbne	r0, [r4], -pc, lsl #4
     68c:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     690:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
     694:	300f0567 	andcc	r0, pc, r7, ror #10
     698:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     69c:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
     6a0:	300f0567 	andcc	r0, pc, r7, ror #10
     6a4:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     6a8:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	300f0567 	andcc	r0, pc, r7, ror #10
     6b0:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     6b4:	0905300f 	stmdbeq	r5, {r0, r1, r2, r3, ip, sp}
     6b8:	304b3167 	subcc	r3, fp, r7, ror #2
     6bc:	304b304b 	subcc	r3, fp, fp, asr #32
     6c0:	314b304b 	cmpcc	fp, fp, asr #32
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	304b304b 	subcc	r3, fp, fp, asr #32
     6c8:	314b304b 	cmpcc	fp, fp, asr #32
     6cc:	304b304b 	subcc	r3, fp, fp, asr #32
     6d0:	304b304b 	subcc	r3, fp, fp, asr #32
     6d4:	304b304b 	subcc	r3, fp, fp, asr #32
     6d8:	304b304b 	subcc	r3, fp, fp, asr #32
     6dc:	054b304b 	strbeq	r3, [fp, #-75]	; 0xffffffb5
     6e0:	0905300d 	stmdbeq	r5, {r0, r2, r3, ip, sp}
     6e4:	320c054b 	andcc	r0, ip, #314572800	; 0x12c00000
     6e8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     6ec:	01010006 	tsteq	r1, r6
     6f0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     6f4:	00000002 	andeq	r0, r0, r2
     6f8:	05b40300 	ldreq	r0, [r4, #768]!	; 0x300
     6fc:	9f050501 	svcls	0x00050501
     700:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
     704:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     70c:	02050001 	andeq	r0, r5, #1
     710:	00000000 	andeq	r0, r0, r0
     714:	0105bb03 	tsteq	r5, r3, lsl #22
     718:	059f0505 	ldreq	r0, [pc, #1285]	; c25 <__core1_unwind_stub-0xfff3db>
     71c:	163c0210 			; <UNDEFINED> instruction: 0x163c0210
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	bdbcbcbd 	ldclt	12, cr11, [ip, #756]!	; 0x2f4
     724:	bcbcbdbc 	ldclt	13, cr11, [ip], #752	; 0x2f0
     728:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
     72c:	bcbdbcbc 	ldclt	12, cr11, [sp], #752	; 0x2f0
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	05bcbcbc 	ldreq	fp, [ip, #3260]!	; 0xcbc
     734:	06023001 	streq	r3, [r2], -r1
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     73c:	02050001 	andeq	r0, r5, #1
     740:	00000000 	andeq	r0, r0, r0
     744:	0105ef03 	tsteq	r5, r3, lsl #30
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	059f0505 	ldreq	r0, [pc, #1285]	; c55 <__core1_unwind_stub-0xfff3ab>
     74c:	0105670c 	tsteq	r5, ip, lsl #14
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	0008022f 	andeq	r0, r8, pc, lsr #4
     754:	01050101 	tsteq	r5, r1, lsl #2
     758:	00020500 	andeq	r0, r2, r0, lsl #10
     75c:	03000000 	movweq	r0, #0
     760:	050105f5 	streq	r0, [r1, #-1525]	; 0xfffffa0b
     764:	10059f05 	andne	r9, r5, r5, lsl #30
     768:	bd163c02 	ldclt	12, cr3, [r6, #-8]
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	bcbdbcbc 	ldclt	12, cr11, [sp], #752	; 0x2f0
     770:	bcbcbcbd 	ldclt	12, cr11, [ip], #756	; 0x2f4
     774:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
     778:	bcbcbdbc 	ldclt	13, cr11, [ip], #752	; 0x2f0
     77c:	0105bcbc 			; <UNDEFINED> instruction: 0x0105bcbc
     780:	00060230 	andeq	r0, r6, r0, lsr r2
     784:	01050101 	tsteq	r5, r1, lsl #2
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     78c:	03010010 	movweq	r0, #4112	; 0x1010
     790:	050106a9 	streq	r0, [r1, #-1705]	; 0xfffff957
     794:	0b059f0d 	bleq	1683d0 <__core1_unwind_stub-0xe97c30>
     798:	4a05054a 	bmi	141cc8 <__core1_unwind_stub-0xebe338>
     79c:	4c4b0e05 	mcrrmi	14, 0, r0, fp, cr5
     7a0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	01010008 	tsteq	r1, r8
     7a8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     7ac:	00113802 	andseq	r3, r1, r2, lsl #16
     7b0:	06b10301 	ldrteq	r0, [r1], r1, lsl #6
     7b4:	9f050501 	svcls	0x00050501
     7b8:	3c021005 	stccc	0, cr1, [r2], {5}
     7bc:	bcbcbd16 	ldclt	13, cr11, [ip], #88	; 0x58
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	bcbdbcbd 	ldclt	12, cr11, [sp], #756	; 0x2f4
     7c4:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
     7c8:	bdbcbcbc 	ldclt	12, cr11, [ip, #752]!	; 0x2f0
     7cc:	bcbcbcbc 	ldclt	12, cr11, [ip], #752	; 0x2f0
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	02300105 	eorseq	r0, r0, #1073741825	; 0x40000001
     7d4:	01010006 	tsteq	r1, r6
     7d8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	00000002 	andeq	r0, r0, r2
     7e0:	06ee0300 	strbteq	r0, [lr], r0, lsl #6
     7e4:	03050501 	movweq	r0, #21761	; 0x5501
     7e8:	18059e25 	stmdane	r5, {r0, r2, r5, r9, sl, fp, ip, pc}
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	4a100568 	bmi	401d94 <__core1_unwind_stub-0xbfe26c>
     7f0:	05671f05 	strbeq	r1, [r7, #-3845]!	; 0xfffff0fb
     7f4:	1a054a17 	bne	153058 <__core1_unwind_stub-0xeacfa8>
     7f8:	4a120567 	bmi	481d9c <__core1_unwind_stub-0xb7e264>
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	d9690305 	stmdble	r9!, {r0, r2, r8, r9}^
     800:	05676731 	strbeq	r6, [r7, #-1841]!	; 0xfffff8cf
     804:	03054b0a 	movweq	r4, #23306	; 0x5b0a
     808:	86878769 	strhi	r8, [r7], r9, ror #14
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	05860c05 	streq	r0, [r6, #3077]	; 0xc05
     810:	35054a0a 	strcc	r4, [r5, #-2570]	; 0xfffff5f6
     814:	4a06054d 	bmi	181d50 <__core1_unwind_stub-0xe7e2b0>
     818:	c04c0505 	subgt	r0, ip, r5, lsl #10
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	26080305 	strcs	r0, [r8], -r5, lsl #6
     820:	27032605 	strcs	r2, [r3, -r5, lsl #12]
     824:	19052008 	stmdbne	r5, {r3, sp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	ba400582 	blt	1001e38 <alt_mmu_ttb1_init+0x4c>
     82c:	054a3205 	strbeq	r3, [sl, #-517]	; 0xfffffdfb
     830:	0a052e2d 	beq	14c0ec <__core1_unwind_stub-0xeb3f14>
     834:	4c12052e 	cfldr32mi	mvfx0, [r2], {46}	; 0x2e
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
     83c:	30052e2c 	andcc	r2, r5, ip, lsr #28
     840:	2e050582 	cfsh32cs	mvfx0, mvfx5, #-62
     844:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	04020009 	streq	r0, [r2], #-9
     84c:	1105a101 	tstne	r5, r1, lsl #2
     850:	01040200 	mrseq	r0, R12_usr
     854:	10057708 	andne	r7, r5, r8, lsl #14
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	01040200 	mrseq	r0, R12_usr
     85c:	00090584 	andeq	r0, r9, r4, lsl #11
     860:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     864:	02001905 	andeq	r1, r0, #81920	; 0x14000
     868:	05830104 	streq	r0, [r3, #260]	; 0x104
     86c:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
     870:	38054a01 	stmdacc	r5, {r0, r9, fp, lr}
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	01040200 	mrseq	r0, R12_usr
     878:	0005054a 	andeq	r0, r5, sl, asr #10
     87c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
     884:	055d080a 	ldrbeq	r0, [sp, #-2058]	; 0xfffff7f6
     888:	05856703 	streq	r6, [r5, #1795]	; 0x703
     88c:	055e080a 	ldrbeq	r0, [lr, #-2058]	; 0xfffff7f6
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	d9876703 	stmible	r7, {r0, r1, r8, r9, sl, sp, lr}
     894:	05dc0a05 	ldrbeq	r0, [ip, #2565]	; 0xa05
     898:	0c056703 	stceq	7, cr6, [r5], {3}
     89c:	05820d03 	streq	r0, [r2, #3331]	; 0xd03
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	03054a0a 	movweq	r4, #23050	; 0x5a0a
     8a4:	bf0c054b 	svclt	0x000c054b
     8a8:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
     8ac:	a0bf4b03 	adcsge	r4, pc, r3, lsl #22
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	085c08a4 	ldmdaeq	ip, {r2, r5, r7, fp}^
     8b4:	bdbdbd5c 	ldclt	13, cr11, [sp, #368]!	; 0x170
     8b8:	5c08bdbd 	stcpl	13, cr11, [r8], {189}	; 0xbd
     8bc:	bd5d08bd 	ldcllt	8, cr0, [sp, #-756]	; 0xfffffd0c
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	3e020c03 	cdpcc	12, 0, cr0, cr2, cr3, {0}
     8c4:	085c0801 	ldmdaeq	ip, {r0, fp}^
     8c8:	085c085c 	ldmdaeq	ip, {r2, r3, r4, r6, fp}^
     8cc:	bd5c085c 	ldcllt	8, cr0, [ip, #-368]	; 0xfffffe90
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	02be5c08 	adcseq	r5, lr, #8, 24	; 0x800
     8d4:	0e051822 	cdpeq	8, 0, cr1, cr5, cr2, {1}
     8d8:	01040200 	mrseq	r0, R12_usr
     8dc:	000c05c0 	andeq	r0, ip, r0, asr #11
    return ALT_E_SUCCESS;
     8e0:	4a010402 	bmi	418f0 <__core1_unwind_stub-0xfbe710>
}
     8e4:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
     8e8:	054b0104 	strbeq	r0, [fp, #-260]	; 0xfffffefc
     8ec:	0402000c 	streq	r0, [r2], #-12
     8f0:	3d054b01 	vstrcc	d4, [r5, #-4]
     8f4:	02040200 	andeq	r0, r4, #0, 4
     8f8:	0044054a 	subeq	r0, r4, sl, asr #10
     8fc:	49020402 	stmdbmi	r2, {r1, sl}
     900:	d9520305 	ldmdble	r2, {r0, r2, r8, r9}^
     904:	0903d9d9 	stmdbeq	r3, {r0, r3, r4, r6, r7, r8, fp, ip, lr, pc}
     908:	890a05d6 	stmdbhi	sl, {r1, r2, r4, r6, r7, r8, sl}
     90c:	05670305 	strbeq	r0, [r7, #-773]!	; 0xfffffcfb
     910:	0402000e 	streq	r0, [r2], #-14
     914:	0c058501 	cfstr32eq	mvfx8, [r5], {1}
     918:	01040200 	mrseq	r0, R12_usr
     91c:	000d054a 	andeq	r0, sp, sl, asr #10
     920:	4b010402 	blmi	41930 <__core1_unwind_stub-0xfbe6d0>
     924:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
     928:	504a0104 	subpl	r0, sl, r4, lsl #2
     92c:	05890a05 	streq	r0, [r9, #2565]	; 0xa05
     930:	0e056703 	cdpeq	7, 0, cr6, cr5, cr3, {0}
     934:	01040200 	mrseq	r0, R12_usr
     938:	000c0585 	andeq	r0, ip, r5, lsl #11
     93c:	4a010402 	bmi	4194c <__core1_unwind_stub-0xfbe6b4>
     940:	02000d05 	andeq	r0, r0, #320	; 0x140
     944:	054b0104 	strbeq	r0, [fp, #-260]	; 0xfffffefc
     948:	04020003 	streq	r0, [r2], #-3
     94c:	05514a01 	ldrbeq	r4, [r1, #-2561]	; 0xfffff5ff
     950:	0305de0a 	movweq	sp, #24074	; 0x5e0a
     954:	000e0567 	andeq	r0, lr, r7, ror #10
     958:	85010402 	strhi	r0, [r1, #-1026]	; 0xfffffbfe
     95c:	02000c05 	andeq	r0, r0, #1280	; 0x500
     960:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     964:	0402000d 	streq	r0, [r2], #-13
     968:	03054b01 	movweq	r4, #23297	; 0x5b01
     96c:	01040200 	mrseq	r0, R12_usr
     970:	86874e4a 	strhi	r4, [r7], sl, asr #28
     974:	09030c05 	stmdbeq	r3, {r0, r2, sl, fp}
     978:	2f010582 	svccs	0x00010582
     97c:	01000602 	tsteq	r0, r2, lsl #12
     980:	000a8801 	andeq	r8, sl, r1, lsl #16
     984:	d2000300 	andle	r0, r0, #0, 6
     988:	02000000 	andeq	r0, r0, #0
     98c:	0d0efb01 	vstreq	d15, [lr, #-4]
     990:	01010100 	mrseq	r0, (UNDEF: 17)
     994:	00000001 	andeq	r0, r0, r1
     998:	01000001 	tsteq	r0, r1
     99c:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     9a0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     9a4:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
     9a8:	0072676d 	rsbseq	r6, r2, sp, ror #14
     9ac:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     9b0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     9b4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     9b8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     9bc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     9c0:	61652d65 	cmnvs	r5, r5, ror #26
     9c4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     9c8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     9cc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     9d0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     9d4:	6c776800 	ldclvs	8, cr6, [r7], #-0
     9d8:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     9dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     9e0:	68006564 	stmdavs	r0, {r2, r5, r6, r8, sl, sp, lr}
     9e4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     9e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     9ec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     9f0:	636f732f 	cmnvs	pc, #-1140850688	; 0xbc000000
     9f4:	3031615f 	eorscc	r6, r1, pc, asr r1
     9f8:	6c610000 	stclvs	0, cr0, [r1], #-0
     9fc:	36315f74 	shsub16cc	r5, r1, r4
     a00:	5f303535 	svcpl	0x00303535
     a04:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     a08:	0100632e 	tsteq	r0, lr, lsr #6
     a0c:	74730000 	ldrbtvc	r0, [r3], #-0
     a10:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     a14:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a18:	74730000 	ldrbtvc	r0, [r3], #-0
     a1c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     a20:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a24:	77680000 	strbvc	r0, [r8, -r0]!
     a28:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     a2c:	00030068 	andeq	r0, r3, r8, rrx
     a30:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     a34:	6f6c635f 	svcvs	0x006c635f
     a38:	6d5f6b63 	vldrvs	d22, [pc, #-396]	; 8b4 <__core1_unwind_stub-0xfff74c>
     a3c:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     a40:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
     a44:	00000400 	andeq	r0, r0, r0, lsl #8
     a48:	5f746c61 	svcpl	0x00746c61
     a4c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
     a50:	61755f30 	cmnvs	r5, r0, lsr pc
     a54:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     a58:	00000300 	andeq	r0, r0, r0, lsl #6
     a5c:	00010500 	andeq	r0, r1, r0, lsl #10
     a60:	139c0205 	orrsne	r0, ip, #1342177280	; 0x50000000
     a64:	ca030100 	bgt	c0e6c <__core1_unwind_stub-0xf3f194>
     a68:	0c050100 	stfeqs	f0, [r5], {-0}
     a6c:	4b010583 	blmi	42080 <__core1_unwind_stub-0xfbdf80>
     a70:	01000802 	tsteq	r0, r2, lsl #16
     a74:	00010501 	andeq	r0, r1, r1, lsl #10
     a78:	13c40205 	bicne	r0, r4, #1342177280	; 0x50000000
     a7c:	d3030100 	movwle	r0, #12544	; 0x3100
     a80:	08050100 	stmdaeq	r5, {r8}
     a84:	691005a0 	ldmdbvs	r0, {r5, r7, r8, sl}
     a88:	054d1305 	strbeq	r1, [sp, #-773]	; 0xfffffcfb
     a8c:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
     a90:	a12308dc 	ldrdge	r0, [r3, -ip]!
     a94:	052208d9 	streq	r0, [r2, #-2265]!	; 0xfffff727
     a98:	10053508 	andne	r3, r5, r8, lsl #10
     a9c:	5016057e 	andspl	r0, r6, lr, ror r5
     aa0:	a10c05be 			; <UNDEFINED> instruction: 0xa10c05be
     aa4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     aa8:	01010008 	tsteq	r1, r8
     aac:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     ab0:	0014e402 	andseq	lr, r4, r2, lsl #8
     ab4:	01830301 	orreq	r0, r3, r1, lsl #6
     ab8:	bb130501 	bllt	4c1ec4 <__core1_unwind_stub-0xb3e13c>
     abc:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ac0:	1e05f709 	cdpne	7, 0, cr15, cr5, cr9, {0}
     ac4:	660905a1 	strvs	r0, [r9], -r1, lsr #11
     ac8:	4b67314b 	blmi	19ccffc <__bss_end__+0x9b0ffc>
     acc:	10059f4b 	andne	r9, r5, fp, asr #30
     ad0:	4e080531 	mcrmi	5, 0, r0, cr8, cr1, {1}
     ad4:	056c0905 	strbeq	r0, [ip, #-2309]!	; 0xfffff6fb
     ad8:	05230812 	streq	r0, [r3, #-2066]!	; 0xfffff7ee
     adc:	1405bd0c 	strne	fp, [r5], #-3340	; 0xfffff2f4
     ae0:	4d130568 	cfldr32mi	mvfx0, [r3, #-416]	; 0xfffffe60
     ae4:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
     ae8:	16054b0c 	strne	r4, [r5], -ip, lsl #22
     aec:	9f100568 	svcls	0x00100568
     af0:	05681805 	strbeq	r1, [r8, #-2053]!	; 0xfffff7fb
     af4:	01054f0c 	tsteq	r5, ip, lsl #30
     af8:	0006022f 	andeq	r0, r6, pc, lsr #4
     afc:	01050101 	tsteq	r5, r1, lsl #2
     b00:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
     b04:	03010016 	movweq	r0, #4118	; 0x1016
     b08:	050101be 	streq	r0, [r1, #-446]	; 0xfffffe42
     b0c:	6767f314 			; <UNDEFINED> instruction: 0x6767f314
     b10:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     b14:	0525080d 	streq	r0, [r5, #-2061]!	; 0xfffff7f3
     b18:	1405660c 	strne	r6, [r5], #-1548	; 0xfffff9f4
     b1c:	0336054c 	teqeq	r6, #76, 10	; 0x13000000
     b20:	16054a09 	strne	r4, [r5], -r9, lsl #20
     b24:	8310054a 	tsthi	r0, #310378496	; 0x12800000
     b28:	05681805 	strbeq	r1, [r8, #-2053]!	; 0xfffff7fb
     b2c:	22054d10 	andcs	r4, r5, #16, 26	; 0x400
     b30:	88110568 	ldmdahi	r1, {r3, r5, r6, r8, sl}
     b34:	17030905 	strne	r0, [r3, -r5, lsl #18]
     b38:	032205d6 			; <UNDEFINED> instruction: 0x032205d6
     b3c:	11052e6e 	tstne	r5, lr, ror #28
     b40:	03090588 	movweq	r0, #38280	; 0x9588
     b44:	1c05d60c 	stcne	6, cr13, [r5], {12}
     b48:	09056730 	stmdbeq	r5, {r4, r5, r8, r9, sl, sp, lr}
     b4c:	30100567 	andscc	r0, r0, r7, ror #10
     b50:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     b54:	06028301 	streq	r8, [r2], -r1, lsl #6
     b58:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     b5c:	02050001 	andeq	r0, r5, #1
     b60:	00000000 	andeq	r0, r0, r0
     b64:	01028503 	tsteq	r2, r3, lsl #10
     b68:	05831305 	streq	r1, [r3, #773]	; 0x305
     b6c:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
     b70:	d81005a4 	ldmdale	r0, {r2, r5, r7, r8, sl}
     b74:	054f0905 	strbeq	r0, [pc, #-2309]	; 277 <__core1_unwind_stub-0xfffd89>
     b78:	054dd810 	strbeq	sp, [sp, #-2064]	; 0xfffff7f0
     b7c:	06028401 	streq	r8, [r2], -r1, lsl #8
     b80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     b84:	02050001 	andeq	r0, r5, #1
     b88:	00000000 	andeq	r0, r0, r0
     b8c:	01029d03 	tsteq	r2, r3, lsl #26
     b90:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     b94:	06028301 	streq	r8, [r2], -r1, lsl #6
     b98:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     b9c:	02050001 	andeq	r0, r5, #1
     ba0:	01001798 			; <UNDEFINED> instruction: 0x01001798
     ba4:	0102a203 	tsteq	r2, r3, lsl #4
     ba8:	4b840305 	blmi	fe1017c4 <__shm_end__+0xbe1017c4>
     bac:	054f2b05 	strbeq	r2, [pc, #-2821]	; af <__core1_unwind_stub-0xffff51>
     bb0:	0105490c 	tsteq	r5, ip, lsl #18
     bb4:	000602a1 	andeq	r0, r6, r1, lsr #5
     bb8:	01050101 	tsteq	r5, r1, lsl #2
     bbc:	00020500 	andeq	r0, r2, r0, lsl #10
     bc0:	03000000 	movweq	r0, #0
     bc4:	050102af 	streq	r0, [r1, #-687]	; 0xfffffd51
     bc8:	0105850c 	tsteq	r5, ip, lsl #10
     bcc:	00060283 	andeq	r0, r6, r3, lsl #5
     bd0:	01050101 	tsteq	r5, r1, lsl #2
     bd4:	00020500 	andeq	r0, r2, r0, lsl #10
     bd8:	03000000 	movweq	r0, #0
     bdc:	050102b7 	streq	r0, [r1, #-695]	; 0xfffffd49
     be0:	0805a011 	stmdaeq	r5, {r0, r4, sp, pc}
     be4:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
     be8:	054e0f05 	strbeq	r0, [lr, #-3845]	; 0xfffff0fb
     bec:	08054a15 	stmdaeq	r5, {r0, r2, r4, r9, fp, lr}
     bf0:	4c10052e 	cfldr32mi	mvfx0, [r0], {46}	; 0x2e
     bf4:	054d1305 	strbeq	r1, [sp, #-773]	; 0xfffffcfb
     bf8:	11054a05 	tstne	r5, r5, lsl #20
     bfc:	660f05dc 			; <UNDEFINED> instruction: 0x660f05dc
     c00:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
     c04:	1005320c 	andne	r3, r5, ip, lsl #4
     c08:	31010548 	tstcc	r1, r8, asr #10
     c0c:	01000802 	tsteq	r0, r2, lsl #16
     c10:	00010501 	andeq	r0, r1, r1, lsl #10
     c14:	00000205 	andeq	r0, r0, r5, lsl #4
     c18:	d4030000 	strle	r0, [r3], #-0
     c1c:	11050102 	tstne	r5, r2, lsl #2
     c20:	4a0805bc 	bmi	202318 <__core1_unwind_stub-0xdfdce8>
     c24:	054c1005 	strbeq	r1, [ip, #-5]
     c28:	15054e0f 	strne	r4, [r5, #-3599]	; 0xfffff1f1
     c2c:	2e08054a 	cfsh32cs	mvfx0, mvfx8, #42
     c30:	054c1005 	strbeq	r1, [ip, #-5]
     c34:	05054d13 	streq	r4, [r5, #-3347]	; 0xfffff2ed
     c38:	dc09054a 	cfstr32le	mvfx0, [r9], {74}	; 0x4a
     c3c:	330c0583 	movwcc	r0, #50563	; 0xc583
     c40:	05471005 	strbeq	r1, [r7, #-5]
     c44:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
     c48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c4c:	02050001 	andeq	r0, r5, #1
     c50:	010017e0 	smlatteq	r0, r0, r7, r1
     c54:	0102f103 	tsteq	r2, r3, lsl #2	; <UNPREDICTABLE>
     c58:	05831305 	streq	r1, [r3, #773]	; 0x305
     c5c:	15054a05 	strne	r4, [r5, #-2565]	; 0xfffff5fb
     c60:	9f0905dc 	svcls	0x000905dc
     c64:	350c05bb 	strcc	r0, [ip, #-1467]	; 0xfffffa45
     c68:	05451005 	strbeq	r1, [r5, #-5]
     c6c:	08023401 	stmdaeq	r2, {r0, sl, ip, sp}
     c70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c74:	02050001 	andeq	r0, r5, #1
     c78:	01001860 	tsteq	r0, r0, ror #16
     c7c:	01038503 	tsteq	r3, r3, lsl #10
     c80:	05831305 	streq	r1, [r3, #773]	; 0x305
     c84:	15054a05 	strne	r4, [r5, #-2565]	; 0xfffff5fb
     c88:	9f0905dc 	svcls	0x000905dc
     c8c:	330c05bb 	movwcc	r0, #50619	; 0xc5bb
     c90:	05471005 	strbeq	r1, [r7, #-5]
     c94:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
     c98:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c9c:	02050001 	andeq	r0, r5, #1
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	01039903 	tsteq	r3, r3, lsl #18
     ca8:	05bd1105 	ldreq	r1, [sp, #261]!	; 0x105
     cac:	10054a08 	andne	r4, r5, r8, lsl #20
     cb0:	4e11054c 	cfmac32mi	mvfx0, mvfx1, mvfx12
     cb4:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     cb8:	10052e08 	andne	r2, r5, r8, lsl #28
     cbc:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     cc0:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     cc4:	0905dc10 	stmdbeq	r5, {r4, sl, fp, ip, lr, pc}
     cc8:	0019054a 	andseq	r0, r9, sl, asr #10
     ccc:	30030402 	andcc	r0, r3, r2, lsl #8
     cd0:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
     cd4:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
     cd8:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
     cdc:	20056603 	andcs	r6, r5, r3, lsl #12
     ce0:	03040200 	movweq	r0, #16896	; 0x4200
     ce4:	00090548 	andeq	r0, r9, r8, asr #10
     ce8:	66010402 	strvs	r0, [r1], -r2, lsl #8
     cec:	30100586 	andscc	r0, r0, r6, lsl #11
     cf0:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     cf4:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     cf8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     cfc:	02050001 	andeq	r0, r5, #1
     d00:	010018e0 	smlatteq	r0, r0, r8, r1
     d04:	0103bd03 	tsteq	r3, r3, lsl #26
     d08:	05d91105 	ldrbeq	r1, [r9, #261]	; 0x105
     d0c:	10054a08 	andne	r4, r5, r8, lsl #20
     d10:	4e11054c 	cfmac32mi	mvfx0, mvfx1, mvfx12
     d14:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     d18:	10052e08 	andne	r2, r5, r8, lsl #28
     d1c:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     d20:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     d24:	0905dc10 	stmdbeq	r5, {r4, sl, fp, ip, lr, pc}
     d28:	3010054a 	andscc	r0, r0, sl, asr #10
     d2c:	05671705 	strbeq	r1, [r7, #-1797]!	; 0xfffff8fb
     d30:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
     d34:	17052e01 	strne	r2, [r5, -r1, lsl #28]
     d38:	01040200 	mrseq	r0, R12_usr
     d3c:	000d059e 	muleq	sp, lr, r5
     d40:	4c020402 	cfstrsmi	mvf0, [r2], {2}
     d44:	02002005 	andeq	r2, r0, #5
     d48:	05d10204 	ldrbeq	r0, [r1, #516]	; 0x204
     d4c:	04020009 	streq	r0, [r2], #-9
     d50:	05896601 	streq	r6, [r9, #1537]	; 0x601
     d54:	0c053010 	stceq	0, cr3, [r5], {16}
     d58:	2f01054d 	svccs	0x0001054d
     d5c:	01000802 	tsteq	r0, r2, lsl #16
     d60:	00010501 	andeq	r0, r1, r1, lsl #10
     d64:	00000205 	andeq	r0, r0, r5, lsl #4
     d68:	e3030000 	movw	r0, #12288	; 0x3000
     d6c:	0c050103 	stfeqs	f0, [r5], {3}
     d70:	bb0105bb 	bllt	42464 <__core1_unwind_stub-0xfbdb9c>
     d74:	01000602 	tsteq	r0, r2, lsl #12
     d78:	00010501 	andeq	r0, r1, r1, lsl #10
     d7c:	00000205 	andeq	r0, r0, r5, lsl #4
     d80:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
     d84:	11050103 	tstne	r5, r3, lsl #2
     d88:	4a170584 	bmi	5c23a0 <__core1_unwind_stub-0xa3dc60>
     d8c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
     d90:	13054c10 	movwne	r4, #23568	; 0x5c10
     d94:	4a05054d 	bmi	1422d0 <__core1_unwind_stub-0xebdd30>
     d98:	9ff70905 	svcls	0x00f70905
     d9c:	1005d731 	andne	sp, r5, r1, lsr r7
     da0:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     da4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     da8:	01010008 	tsteq	r1, r8
     dac:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     db0:	00000002 	andeq	r0, r0, r2
     db4:	04820300 	streq	r0, [r2], #768	; 0x300
     db8:	84110501 	ldrhi	r0, [r1], #-1281	; 0xfffffaff
     dbc:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     dc0:	10052e08 	andne	r2, r5, r8, lsl #28
     dc4:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     dc8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     dcc:	319ff709 	orrscc	pc, pc, r9, lsl #14
     dd0:	301005d7 			; <UNDEFINED> instruction: 0x301005d7
     dd4:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     dd8:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     ddc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     de0:	02050001 	andeq	r0, r5, #1
     de4:	00000000 	andeq	r0, r0, r0
     de8:	01049c03 	tsteq	r4, r3, lsl #24
     dec:	05841105 	streq	r1, [r4, #261]	; 0x105
     df0:	08054a17 	stmdaeq	r5, {r0, r1, r2, r4, r9, fp, lr}
     df4:	4c10052e 	cfldr32mi	mvfx0, [r0], {46}	; 0x2e
     df8:	054d1305 	strbeq	r1, [sp, #-773]	; 0xfffffcfb
     dfc:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
     e00:	d832a0f8 	ldmdale	r2!, {r3, r4, r5, r6, r7, sp, pc}
     e04:	05301005 	ldreq	r1, [r0, #-5]!
     e08:	01054d0c 	tsteq	r5, ip, lsl #26
     e0c:	0008022f 	andeq	r0, r8, pc, lsr #4
     e10:	01050101 	tsteq	r5, r1, lsl #2
     e14:	00020500 	andeq	r0, r2, r0, lsl #10
     e18:	03000000 	movweq	r0, #0
     e1c:	050104bb 	streq	r0, [r1, #-1211]	; 0xfffffb45
     e20:	05059f13 	streq	r9, [r5, #-3859]	; 0xfffff0ed
     e24:	f811054a 			; <UNDEFINED> instruction: 0xf811054a
     e28:	059e5f05 	ldreq	r5, [lr, #3845]	; 0xf05
     e2c:	09054a0f 	stmdbeq	r5, {r0, r1, r2, r3, r9, fp, lr}
     e30:	3211054b 	andscc	r0, r1, #314572800	; 0x12c00000
     e34:	059e7005 	ldreq	r7, [lr, #5]
     e38:	09054a0f 	stmdbeq	r5, {r0, r1, r2, r3, r9, fp, lr}
     e3c:	3010054b 	andscc	r0, r0, fp, asr #10
     e40:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     e44:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     e48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     e4c:	02050001 	andeq	r0, r5, #1
     e50:	00000000 	andeq	r0, r0, r0
     e54:	0104d203 	tsteq	r4, r3, lsl #4
     e58:	059f1305 	ldreq	r1, [pc, #773]	; 1165 <__core1_unwind_stub-0xffee9b>
     e5c:	11054a05 	tstne	r5, r5, lsl #20
     e60:	9e5f05f8 	mrcls	5, 2, r0, cr15, cr8, {7}
     e64:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
     e68:	11054b09 	tstne	r5, r9, lsl #22
     e6c:	9e700533 	mrcls	5, 3, r0, cr0, cr3, {1}
     e70:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
     e74:	10054b09 	andne	r4, r5, r9, lsl #22
     e78:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     e7c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     e80:	01010008 	tsteq	r1, r8
     e84:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     e88:	00000002 	andeq	r0, r0, r2
     e8c:	04ea0300 	strbteq	r0, [sl], #768	; 0x300
     e90:	a0110501 	andsge	r0, r1, r1, lsl #10
     e94:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     e98:	10052e08 	andne	r2, r5, r8, lsl #28
     e9c:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     ea0:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ea4:	1005f712 	andne	pc, r5, r2, lsl r7	; <UNPREDICTABLE>
     ea8:	6709054a 	strvs	r0, [r9, -sl, asr #10]
     eac:	05311005 	ldreq	r1, [r1, #-5]!
     eb0:	10056709 	andne	r6, r5, r9, lsl #14
     eb4:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     eb8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     ebc:	01010008 	tsteq	r1, r8
     ec0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     ec4:	00000002 	andeq	r0, r0, r2
     ec8:	05850300 	streq	r0, [r5, #768]	; 0x300
     ecc:	a0110501 	andsge	r0, r1, r1, lsl #10
     ed0:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     ed4:	10052e08 	andne	r2, r5, r8, lsl #28
     ed8:	4d13054c 	cfldr32mi	mvfx0, [r3, #-304]	; 0xfffffed0
     edc:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ee0:	1005f712 	andne	pc, r5, r2, lsl r7	; <UNPREDICTABLE>
     ee4:	6709054a 	strvs	r0, [r9, -sl, asr #10]
     ee8:	05311005 	ldreq	r1, [r1, #-5]!
     eec:	10056709 	andne	r6, r5, r9, lsl #14
     ef0:	4d0c0530 	cfstr32mi	mvfx0, [ip, #-192]	; 0xffffff40
     ef4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     ef8:	01010008 	tsteq	r1, r8
     efc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     f00:	00000002 	andeq	r0, r0, r2
     f04:	05a00300 	streq	r0, [r0, #768]!	; 0x300
     f08:	bc110501 	cfldr32lt	mvfx0, [r1], {1}
     f0c:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     f10:	10052e08 	andne	r2, r5, r8, lsl #28
     f14:	4e05054c 	cfsh32mi	mvfx0, mvfx5, #44
     f18:	056e1005 	strbeq	r1, [lr, #-5]!
     f1c:	13054809 	movwne	r4, #22537	; 0x5809
     f20:	4a050533 	bmi	1423f4 <__core1_unwind_stub-0xebdc0c>
     f24:	9fdc1505 	svcls	0x00dc1505
     f28:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     f2c:	09056615 	stmdbeq	r5, {r0, r2, r4, r9, sl, sp, lr}
     f30:	0c05bb67 			; <UNDEFINED> instruction: 0x0c05bb67
     f34:	47100533 			; <UNDEFINED> instruction: 0x47100533
     f38:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
     f3c:	01010008 	tsteq	r1, r8
     f40:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     f44:	00000002 	andeq	r0, r0, r2
     f48:	05c60300 	strbeq	r0, [r6, #768]	; 0x300
     f4c:	bc110501 	cfldr32lt	mvfx0, [r1], {1}
     f50:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     f54:	10052e08 	andne	r2, r5, r8, lsl #28
     f58:	4e05054c 	cfsh32mi	mvfx0, mvfx5, #44
     f5c:	056e1005 	strbeq	r1, [lr, #-5]!
     f60:	13054809 	movwne	r4, #22537	; 0x5809
     f64:	4a050533 	bmi	142438 <__core1_unwind_stub-0xebdbc8>
     f68:	9fdc1505 	svcls	0x00dc1505
     f6c:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     f70:	09056615 	stmdbeq	r5, {r0, r2, r4, r9, sl, sp, lr}
     f74:	0c05bb67 			; <UNDEFINED> instruction: 0x0c05bb67
     f78:	47100533 			; <UNDEFINED> instruction: 0x47100533
     f7c:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
     f80:	01010008 	tsteq	r1, r8
     f84:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     f88:	00000002 	andeq	r0, r0, r2
     f8c:	05ec0300 	strbeq	r0, [ip, #768]!	; 0x300
     f90:	a0180501 	andsge	r0, r8, r1, lsl #10
     f94:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
     f98:	4a0a0318 	bmi	281c00 <__core1_unwind_stub-0xd7e400>
     f9c:	054a2505 	strbeq	r2, [sl, #-1285]	; 0xfffffafb
     fa0:	0f052e2b 	svceq	0x00052e2b
     fa4:	4c0c059e 	cfstr32mi	mvfx0, [ip], {158}	; 0x9e
     fa8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     fac:	01010006 	tsteq	r1, r6
     fb0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     fb4:	0019e402 	andseq	lr, r9, r2, lsl #8
     fb8:	05ff0301 	ldrbeq	r0, [pc, #769]!	; 12c1 <__core1_unwind_stub-0xffed3f>
     fbc:	a0080501 	andge	r0, r8, r1, lsl #10
     fc0:	05681005 	strbeq	r1, [r8, #-5]!
     fc4:	4a0a0317 	bmi	281c28 <__core1_unwind_stub-0xd7e3d8>
     fc8:	054a2905 	strbeq	r2, [sl, #-2309]	; 0xfffff6fb
     fcc:	3c054a24 			; <UNDEFINED> instruction: 0x3c054a24
     fd0:	4a0d052e 	bmi	342490 <__core1_unwind_stub-0xcbdb70>
     fd4:	05a10c05 	streq	r0, [r1, #3077]!	; 0xc05
     fd8:	06028301 	streq	r8, [r2], -r1, lsl #6
     fdc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     fe0:	02050001 	andeq	r0, r5, #1
     fe4:	00000000 	andeq	r0, r0, r0
     fe8:	01069503 	tsteq	r6, r3, lsl #10
     fec:	05a01005 	streq	r1, [r0, #5]!
     ff0:	0c05660e 	stceq	6, cr6, [r5], {14}
     ff4:	2f01054c 	svccs	0x0001054c
     ff8:	01000802 	tsteq	r0, r2, lsl #16
     ffc:	00010501 	andeq	r0, r1, r1, lsl #10
    1000:	1a580205 	bne	160181c <__bss_end__+0x5e581c>
    1004:	9e030100 	adflss	f0, f3, f0
    1008:	08050106 	stmdaeq	r5, {r1, r2, r8}
    100c:	001c05a0 	andseq	r0, ip, r0, lsr #11
    1010:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1014:	05681005 	strbeq	r1, [r8, #-5]!
    1018:	05bb4e12 	ldreq	r4, [fp, #3602]!	; 0xe12
    101c:	0105bf0c 	tsteq	r5, ip, lsl #30
    1020:	0008022f 	andeq	r0, r8, pc, lsr #4
    1024:	01050101 	tsteq	r5, r1, lsl #2
    1028:	00020500 	andeq	r0, r2, r0, lsl #10
    102c:	03000000 	movweq	r0, #0
    1030:	050106b0 	streq	r0, [r1, #-1712]	; 0xfffff950
    1034:	05059f13 	streq	r9, [r5, #-3859]	; 0xfffff0ed
    1038:	dc09054a 	cfstr32le	mvfx0, [r9], {74}	; 0x4a
    103c:	0c053d08 	stceq	13, cr3, [r5], {8}
    1040:	47100533 			; <UNDEFINED> instruction: 0x47100533
    1044:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    1048:	01010008 	tsteq	r1, r8
    104c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1050:	001ad002 	andseq	sp, sl, r2
    1054:	06c10301 	strbeq	r0, [r1], r1, lsl #6
    1058:	9f130501 	svcls	0x00130501
    105c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    1060:	5908dc09 	stmdbpl	r8, {r0, r3, sl, fp, ip, lr, pc}
    1064:	05330c05 	ldreq	r0, [r3, #-3077]!	; 0xfffff3fb
    1068:	01054710 	tsteq	r5, r0, lsl r7
    106c:	00080232 	andeq	r0, r8, r2, lsr r2
    1070:	01050101 	tsteq	r5, r1, lsl #2
    1074:	00020500 	andeq	r0, r2, r0, lsl #10
    1078:	03000000 	movweq	r0, #0
    107c:	050106d2 	streq	r0, [r1, #-1746]	; 0xfffff92e
    1080:	0105840c 	tsteq	r5, ip, lsl #8
    1084:	00060283 	andeq	r0, r6, r3, lsl #5
    1088:	01050101 	tsteq	r5, r1, lsl #2
    108c:	00020500 	andeq	r0, r2, r0, lsl #10
    1090:	03000000 	movweq	r0, #0
    1094:	050106d8 	streq	r0, [r1, #-1752]	; 0xfffff928
    1098:	0105840c 	tsteq	r5, ip, lsl #8
    109c:	00060283 	andeq	r0, r6, r3, lsl #5
    10a0:	01050101 	tsteq	r5, r1, lsl #2
    10a4:	00020500 	andeq	r0, r2, r0, lsl #10
    10a8:	03000000 	movweq	r0, #0
    10ac:	050106de 	streq	r0, [r1, #-1758]	; 0xfffff922
    10b0:	0105840c 	tsteq	r5, ip, lsl #8
    10b4:	00060283 	andeq	r0, r6, r3, lsl #5
    10b8:	01050101 	tsteq	r5, r1, lsl #2
    10bc:	00020500 	andeq	r0, r2, r0, lsl #10
    10c0:	03000000 	movweq	r0, #0
    10c4:	050106e4 	streq	r0, [r1, #-1764]	; 0xfffff91c
    10c8:	0105840c 	tsteq	r5, ip, lsl #8
    10cc:	00060283 	andeq	r0, r6, r3, lsl #5
    10d0:	01050101 	tsteq	r5, r1, lsl #2
    10d4:	00020500 	andeq	r0, r2, r0, lsl #10
    10d8:	03000000 	movweq	r0, #0
    10dc:	050106ea 	streq	r0, [r1, #-1770]	; 0xfffff916
    10e0:	0105840c 	tsteq	r5, ip, lsl #8
    10e4:	00060283 	andeq	r0, r6, r3, lsl #5
    10e8:	01050101 	tsteq	r5, r1, lsl #2
    10ec:	00020500 	andeq	r0, r2, r0, lsl #10
    10f0:	03000000 	movweq	r0, #0
    10f4:	050106f0 	streq	r0, [r1, #-1776]	; 0xfffff910
    10f8:	0105840c 	tsteq	r5, ip, lsl #8
    10fc:	00060283 	andeq	r0, r6, r3, lsl #5
    1100:	01050101 	tsteq	r5, r1, lsl #2
    1104:	00020500 	andeq	r0, r2, r0, lsl #10
    1108:	03000000 	movweq	r0, #0
    110c:	050106f6 	streq	r0, [r1, #-1782]	; 0xfffff90a
    1110:	0105840c 	tsteq	r5, ip, lsl #8
    1114:	00060283 	andeq	r0, r6, r3, lsl #5
    1118:	01050101 	tsteq	r5, r1, lsl #2
    111c:	00020500 	andeq	r0, r2, r0, lsl #10
    1120:	03000000 	movweq	r0, #0
    1124:	050106fc 	streq	r0, [r1, #-1788]	; 0xfffff904
    1128:	0105840c 	tsteq	r5, ip, lsl #8
    112c:	00060283 	andeq	r0, r6, r3, lsl #5
    1130:	01050101 	tsteq	r5, r1, lsl #2
    1134:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    1138:	0301001b 	movweq	r0, #4123	; 0x101b
    113c:	05010782 	streq	r0, [r1, #-1922]	; 0xfffff87e
    1140:	0105880c 	tsteq	r5, ip, lsl #16
    1144:	00060286 	andeq	r0, r6, r6, lsl #5
    1148:	01050101 	tsteq	r5, r1, lsl #2
    114c:	00020500 	andeq	r0, r2, r0, lsl #10
    1150:	03000000 	movweq	r0, #0
    1154:	05010790 	streq	r0, [r1, #-1936]	; 0xfffff870
    1158:	05059f13 	streq	r9, [r5, #-3859]	; 0xfffff0ed
    115c:	dc2c054a 	cfstr32le	mvfx0, [ip], #-296	; 0xfffffed8
    1160:	05821305 	streq	r1, [r2, #773]	; 0x305
    1164:	11052e2c 	tstne	r5, ip, lsr #28
    1168:	4b09054a 	blmi	242698 <__core1_unwind_stub-0xdbd968>
    116c:	05330c05 	ldreq	r0, [r3, #-3077]!	; 0xfffff3fb
    1170:	01054710 	tsteq	r5, r0, lsl r7
    1174:	00080232 	andeq	r0, r8, r2, lsr r2
    1178:	01050101 	tsteq	r5, r1, lsl #2
    117c:	80020500 	andhi	r0, r2, r0, lsl #10
    1180:	0301001b 	movweq	r0, #4123	; 0x101b
    1184:	050107a4 	streq	r0, [r1, #-1956]	; 0xfffff85c
    1188:	0592080e 	ldreq	r0, [r2, #2062]	; 0x80e
    118c:	10054d05 	andne	r4, r5, r5, lsl #26
    1190:	4809056e 	stmdami	r9, {r1, r2, r3, r5, r6, r8, sl}
    1194:	05340505 	ldreq	r0, [r4, #-1285]!	; 0xfffffafb
    1198:	09056d10 	stmdbeq	r5, {r4, r8, sl, fp, sp, lr}
    119c:	34050548 	strcc	r0, [r5], #-1352	; 0xfffffab8
    11a0:	056c1005 	strbeq	r1, [ip, #-5]!
    11a4:	13054809 	movwne	r4, #22537	; 0x5809
    11a8:	4a050533 	bmi	14267c <__core1_unwind_stub-0xebd984>
    11ac:	05dd1005 	ldrbeq	r1, [sp, #5]
    11b0:	10054a0d 	andne	r4, r5, sp, lsl #20
    11b4:	660d0569 	strvs	r0, [sp], -r9, ror #10
    11b8:	05690c05 	strbeq	r0, [r9, #-3077]!	; 0xfffff3fb
    11bc:	10056911 	andne	r6, r5, r1, lsl r9
    11c0:	69150568 	ldmdbvs	r5, {r3, r5, r6, r8, sl}
    11c4:	086b0905 	stmdaeq	fp!, {r0, r2, r8, fp}^
    11c8:	340c057b 	strcc	r0, [ip], #-1403	; 0xfffffa85
    11cc:	05471005 	strbeq	r1, [r7, #-5]
    11d0:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
    11d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    11d8:	02050001 	andeq	r0, r5, #1
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	0107f403 	tsteq	r7, r3, lsl #8	; <UNPREDICTABLE>
    11e4:	05831305 	streq	r1, [r3, #773]	; 0x305
    11e8:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
    11ec:	052108dc 	streq	r0, [r1, #-2268]!	; 0xfffff724
    11f0:	1005340c 	andne	r3, r5, ip, lsl #8
    11f4:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    11f8:	01000802 	tsteq	r0, r2, lsl #16
    11fc:	00010501 	andeq	r0, r1, r1, lsl #10
    1200:	00000205 	andeq	r0, r0, r5, lsl #4
    1204:	86030000 	strhi	r0, [r3], -r0
    1208:	13050108 	movwne	r0, #20744	; 0x5108
    120c:	4a050583 	bmi	142820 <__core1_unwind_stub-0xebd7e0>
    1210:	08dc0905 	ldmeq	ip, {r0, r2, r8, fp}^
    1214:	350c0521 	strcc	r0, [ip, #-1313]	; 0xfffffadf
    1218:	05461005 	strbeq	r1, [r6, #-5]
    121c:	08023301 	stmdaeq	r2, {r0, r8, r9, ip, sp}
    1220:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1224:	02050001 	andeq	r0, r5, #1
    1228:	00000000 	andeq	r0, r0, r0
    122c:	01089a03 	tsteq	r8, r3, lsl #20
    1230:	059f1305 	ldreq	r1, [pc, #773]	; 153d <__core1_unwind_stub-0xffeac3>
    1234:	13054a05 	movwne	r4, #23045	; 0x5a05
    1238:	4a1105dc 	bmi	4429b0 <__core1_unwind_stub-0xbbd650>
    123c:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    1240:	1005330c 	andne	r3, r5, ip, lsl #6
    1244:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    1248:	01000802 	tsteq	r0, r2, lsl #16
    124c:	00010501 	andeq	r0, r1, r1, lsl #10
    1250:	1cd40205 	lfmne	f0, 2, [r4], {5}
    1254:	ac030100 	stfges	f0, [r3], {-0}
    1258:	13050108 	movwne	r0, #20744	; 0x5108
    125c:	4a05059f 	bmi	1428e0 <__core1_unwind_stub-0xebd720>
    1260:	08dc0905 	ldmeq	ip, {r0, r2, r8, fp}^
    1264:	330c053d 	movwcc	r0, #50493	; 0xc53d
    1268:	05471005 	strbeq	r1, [r7, #-5]
    126c:	08023201 	stmdaeq	r2, {r0, r9, ip, sp}
    1270:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1274:	02050001 	andeq	r0, r5, #1
    1278:	00000000 	andeq	r0, r0, r0
    127c:	0108bd03 	tsteq	r8, r3, lsl #26
    1280:	059f1305 	ldreq	r1, [pc, #773]	; 158d <__core1_unwind_stub-0xffea73>
    1284:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
    1288:	055908dc 	ldrbeq	r0, [r9, #-2268]	; 0xfffff724
    128c:	1005330c 	andne	r3, r5, ip, lsl #6
    1290:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    1294:	01000802 	tsteq	r0, r2, lsl #16
    1298:	00010501 	andeq	r0, r1, r1, lsl #10
    129c:	00000205 	andeq	r0, r0, r5, lsl #4
    12a0:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    12a4:	11050108 	tstne	r5, r8, lsl #2
    12a8:	4a170584 	bmi	5c28c0 <__core1_unwind_stub-0xa3d740>
    12ac:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    12b0:	0f054c10 	svceq	0x00054c10
    12b4:	4a08054e 	bmi	2027f4 <__core1_unwind_stub-0xdfd80c>
    12b8:	054d1805 	strbeq	r1, [sp, #-2053]	; 0xfffff7fb
    12bc:	36054a12 			; <UNDEFINED> instruction: 0x36054a12
    12c0:	4a0c054b 	bmi	3027f4 <__core1_unwind_stub-0xcfd80c>
    12c4:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    12c8:	01054f0c 	tsteq	r5, ip, lsl #30
    12cc:	00060283 	andeq	r0, r6, r3, lsl #5
    12d0:	01050101 	tsteq	r5, r1, lsl #2
    12d4:	00020500 	andeq	r0, r2, r0, lsl #10
    12d8:	03000000 	movweq	r0, #0
    12dc:	050108e5 	streq	r0, [r1, #-2277]	; 0xfffff71b
    12e0:	0105840c 	tsteq	r5, ip, lsl #8
    12e4:	00060283 	andeq	r0, r6, r3, lsl #5
    12e8:	01050101 	tsteq	r5, r1, lsl #2
    12ec:	00020500 	andeq	r0, r2, r0, lsl #10
    12f0:	03000000 	movweq	r0, #0
    12f4:	050108eb 	streq	r0, [r1, #-2283]	; 0xfffff715
    12f8:	0805840f 	stmdaeq	r5, {r0, r1, r2, r3, sl, pc}
    12fc:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
    1300:	054e0c05 	strbeq	r0, [lr, #-3077]	; 0xfffff3fb
    1304:	06028301 	streq	r8, [r2], -r1, lsl #6
    1308:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    130c:	02050001 	andeq	r0, r5, #1
    1310:	00000000 	andeq	r0, r0, r0
    1314:	0108f703 	tsteq	r8, r3, lsl #14	; <UNPREDICTABLE>
    1318:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    131c:	06028301 	streq	r8, [r2], -r1, lsl #6
    1320:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1324:	02050001 	andeq	r0, r5, #1
    1328:	00000000 	andeq	r0, r0, r0
    132c:	0108fd03 	tsteq	r8, r3, lsl #26	; <UNPREDICTABLE>
    1330:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    1334:	06028301 	streq	r8, [r2], -r1, lsl #6
    1338:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    133c:	02050001 	andeq	r0, r5, #1
    1340:	00000000 	andeq	r0, r0, r0
    1344:	01098303 	tsteq	r9, r3, lsl #6
    1348:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    134c:	06028301 	streq	r8, [r2], -r1, lsl #6
    1350:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1354:	02050001 	andeq	r0, r5, #1
    1358:	00000000 	andeq	r0, r0, r0
    135c:	01098903 	tsteq	r9, r3, lsl #18
    1360:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    1364:	06028301 	streq	r8, [r2], -r1, lsl #6
    1368:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    136c:	02050001 	andeq	r0, r5, #1
    1370:	00000000 	andeq	r0, r0, r0
    1374:	01098f03 	tsteq	r9, r3, lsl #30
    1378:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    137c:	06028301 	streq	r8, [r2], -r1, lsl #6
    1380:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1384:	02050001 	andeq	r0, r5, #1
    1388:	01001d54 	tsteq	r0, r4, asr sp
    138c:	01099503 	tsteq	r9, r3, lsl #10
    1390:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    1394:	06028301 	streq	r8, [r2], -r1, lsl #6
    1398:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    139c:	02050001 	andeq	r0, r5, #1
    13a0:	00000000 	andeq	r0, r0, r0
    13a4:	01099b03 	tsteq	r9, r3, lsl #22
    13a8:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    13ac:	06028301 	streq	r8, [r2], -r1, lsl #6
    13b0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13b4:	02050001 	andeq	r0, r5, #1
    13b8:	01001d80 	smlabbeq	r0, r0, sp, r1
    13bc:	0109a103 	tsteq	r9, r3, lsl #2
    13c0:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    13c4:	06028301 	streq	r8, [r2], -r1, lsl #6
    13c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13cc:	02050001 	andeq	r0, r5, #1
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	0109a703 	tsteq	r9, r3, lsl #14
    13d8:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    13dc:	06028301 	streq	r8, [r2], -r1, lsl #6
    13e0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13e4:	02050001 	andeq	r0, r5, #1
    13e8:	00000000 	andeq	r0, r0, r0
    13ec:	0109ae03 	tsteq	r9, r3, lsl #28
    13f0:	059f1305 	ldreq	r1, [pc, #773]	; 16fd <__core1_unwind_stub-0xffe903>
    13f4:	13054a05 	movwne	r4, #23045	; 0x5a05
    13f8:	4a1105dc 	bmi	442b70 <__core1_unwind_stub-0xbbd490>
    13fc:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    1400:	1005330c 	andne	r3, r5, ip, lsl #6
    1404:	32010547 	andcc	r0, r1, #297795584	; 0x11c00000
    1408:	01000802 	tsteq	r0, r2, lsl #16
    140c:	000e4301 	andeq	r4, lr, r1, lsl #6
    1410:	ff000300 			; <UNDEFINED> instruction: 0xff000300
    1414:	02000000 	andeq	r0, r0, #0
    1418:	0d0efb01 	vstreq	d15, [lr, #-4]
    141c:	01010100 	mrseq	r0, (UNDEF: 17)
    1420:	00000001 	andeq	r0, r0, r1
    1424:	01000001 	tsteq	r0, r1
    1428:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    142c:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    1430:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1434:	77680065 	strbvc	r0, [r8, -r5, rrx]!
    1438:	2f62696c 	svccs	0x0062696c
    143c:	2f637273 	svccs	0x00637273
    1440:	676d7768 	strbvs	r7, [sp, -r8, ror #14]!
    1444:	752f0072 	strvc	r0, [pc, #-114]!	; 13da <__core1_unwind_stub-0xffec26>
    1448:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1284 <__core1_unwind_stub-0xffed7c>
    144c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1450:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    1454:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1458:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    145c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1460:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    1464:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    1468:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    146c:	2f006564 	svccs	0x00006564
    1470:	2f727375 	svccs	0x00727375
    1474:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1478:	2f656475 	svccs	0x00656475
    147c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1480:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1484:	2f007379 	svccs	0x00007379
    1488:	2f727375 	svccs	0x00727375
    148c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1490:	2f656475 	svccs	0x00656475
    1494:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1498:	00006269 	andeq	r6, r0, r9, ror #4
    149c:	5f746c61 	svcpl	0x00746c61
    14a0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    14a4:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
    14a8:	00000100 	andeq	r0, r0, r0, lsl #2
    14ac:	5f746c61 	svcpl	0x00746c61
    14b0:	2e756d6d 	cdpcs	13, 7, cr6, cr5, cr13, {3}
    14b4:	00020063 	andeq	r0, r2, r3, rrx
    14b8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    14bc:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    14c0:	00030068 	andeq	r0, r3, r8, rrx
    14c4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    14c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    14cc:	00030068 	andeq	r0, r3, r8, rrx
    14d0:	6c776800 	ldclvs	8, cr6, [r7], #-0
    14d4:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    14d8:	00000100 	andeq	r0, r0, r0, lsl #2
    14dc:	5f746c61 	svcpl	0x00746c61
    14e0:	2e756d6d 	cdpcs	13, 7, cr6, cr5, cr13, {3}
    14e4:	00010068 	andeq	r0, r1, r8, rrx
    14e8:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    14ec:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    14f0:	00040068 	andeq	r0, r4, r8, rrx
    14f4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    14f8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    14fc:	00000400 	andeq	r0, r0, r0, lsl #8
    1500:	6b636f6c 	blvs	18dd2b8 <__bss_end__+0x8c12b8>
    1504:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1508:	74730000 	ldrbtvc	r0, [r3], #-0
    150c:	2e6f6964 	vnmulcs.f16	s13, s30, s9	; <UNPREDICTABLE>
    1510:	00050068 	andeq	r0, r5, r8, rrx
    1514:	51050000 	mrspl	r0, (UNDEF: 5)
    1518:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    151c:	0301001d 	movweq	r0, #4125	; 0x101d
    1520:	59050138 	stmdbpl	r5, {r3, r4, r5, r8}
    1524:	2e010566 	cfsh32cs	mvfx0, mvfx1, #54
    1528:	01000a02 	tsteq	r0, r2, lsl #20
    152c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1530:	02050001 	andeq	r0, r5, #1
    1534:	01001dd0 	ldrdeq	r1, [r0, -r0]
    1538:	0102aa03 	tsteq	r2, r3, lsl #20
    153c:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    1540:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1544:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1548:	00010502 	andeq	r0, r1, r2, lsl #10
    154c:	00000205 	andeq	r0, r0, r5, lsl #4
    1550:	af030000 	svcge	0x00030000
    1554:	0c050102 	stfeqs	f0, [r5], {2}
    1558:	2f01054b 	svccs	0x0001054b
    155c:	01000802 	tsteq	r0, r2, lsl #16
    1560:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1564:	02050001 	andeq	r0, r5, #1
    1568:	01001dec 	smlatteq	r0, ip, sp, r1
    156c:	0102b403 	tsteq	r2, r3, lsl #8
    1570:	a1030505 	tstge	r3, r5, lsl #10
    1574:	0c05827f 	sfmeq	f0, 1, [r5], {127}	; 0x7f
    1578:	0316054d 	tsteq	r6, #322961408	; 0x13400000
    157c:	052e00dd 	streq	r0, [lr, #-221]!	; 0xffffff23
    1580:	1c052f0e 	stcne	15, cr2, [r5], {14}
    1584:	f21b0569 	vrshl.s16	q0, <illegal reg q12.5>, <illegal reg q5.5>
    1588:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    158c:	08052e19 	stmdaeq	r5, {r0, r3, r4, r9, sl, fp, sp}
    1590:	4d10052e 	cfldr32mi	mvfx0, [r0, #-184]	; 0xffffff48
    1594:	05510505 	ldrbeq	r0, [r1, #-1285]	; 0xfffffafb
    1598:	0105840c 	tsteq	r5, ip, lsl #8
    159c:	0006022f 	andeq	r0, r6, pc, lsr #4
    15a0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    15a4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    15a8:	00000002 	andeq	r0, r0, r2
    15ac:	02cb0300 	sbceq	r0, fp, #0, 6
    15b0:	bd0a0501 	cfstr32lt	mvfx0, [sl, #-4]
    15b4:	05510d05 	ldrbeq	r0, [r1, #-3333]	; 0xfffff2fb
    15b8:	12054a05 	andne	r4, r5, #20480	; 0x5000
    15bc:	4a0c05f6 	bmi	302d9c <__core1_unwind_stub-0xcfd264>
    15c0:	054d1a05 	strbeq	r1, [sp, #-2565]	; 0xfffff5fb
    15c4:	1f054d11 	svcne	0x00054d11
    15c8:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
    15cc:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
    15d0:	1f055011 	svcne	0x00055011
    15d4:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
    15d8:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
    15dc:	1b05510d 	blne	155a18 <__core1_unwind_stub-0xeaa5e8>
    15e0:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
    15e4:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    15e8:	09054f10 	stmdbeq	r5, {r4, r8, r9, sl, fp, lr}
    15ec:	524a7503 	subpl	r7, sl, #12582912	; 0xc00000
    15f0:	09030d05 	stmdbeq	r3, {r0, r2, r8, sl, fp}
    15f4:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
    15f8:	054c1605 	strbeq	r1, [ip, #-1541]	; 0xfffff9fb
    15fc:	0d056608 	stceq	6, cr6, [r5, #-32]	; 0xffffffe0
    1600:	8215054c 	andshi	r0, r5, #76, 10	; 0x13000000
    1604:	056b1005 	strbeq	r1, [fp, #-5]!
    1608:	18054a09 	stmdane	r5, {r0, r3, r9, fp, lr}
    160c:	03040200 	movweq	r0, #16896	; 0x4200
    1610:	00110530 	andseq	r0, r1, r0, lsr r5
    1614:	66030402 	strvs	r0, [r3], -r2, lsl #8
    1618:	02001d05 	andeq	r1, r0, #320	; 0x140
    161c:	00660304 	rsbeq	r0, r6, r4, lsl #6
    1620:	48030402 	stmdami	r3, {r1, sl}
    1624:	02000905 	andeq	r0, r0, #81920	; 0x14000
    1628:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    162c:	01056c0c 	tsteq	r5, ip, lsl #24
    1630:	0008022f 	andeq	r0, r8, pc, lsr #4
    1634:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    1638:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    163c:	00000002 	andeq	r0, r0, r2
    1640:	03920300 	orrseq	r0, r2, #0, 6
    1644:	bb0a0501 	bllt	282a50 <__core1_unwind_stub-0xd7d5b0>
    1648:	09030d05 	stmdbeq	r3, {r0, r2, r8, sl, fp}
    164c:	4a05054a 	bmi	142b7c <__core1_unwind_stub-0xebd484>
    1650:	25080d05 	strcs	r0, [r8, #-3333]	; 0xfffff2fb
    1654:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
    1658:	14052e0c 	strne	r2, [r5], #-3596	; 0xfffff1f4
    165c:	4e0d054c 	cfsh32mi	mvfx0, mvfx13, #44
    1660:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
    1664:	14052e0c 	strne	r2, [r5], #-3596	; 0xfffff1f4
    1668:	4c13054c 	cfldr32mi	mvfx0, [r3], {76}	; 0x4c
    166c:	034b0905 	movteq	r0, #47365	; 0xb905
    1670:	16052e79 			; <UNDEFINED> instruction: 0x16052e79
    1674:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    1678:	15052e24 	strne	r2, [r5, #-3620]	; 0xfffff1dc
    167c:	660f052e 	strvs	r0, [pc], -lr, lsr #10
    1680:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    1684:	10054a08 	andne	r4, r5, r8, lsl #20
    1688:	4e23054c 	cfsh64mi	mvdx0, mvdx3, #44
    168c:	05660a05 	strbeq	r0, [r6, #-2565]!	; 0xfffff5fb
    1690:	0b05310d 	bleq	14dacc <__core1_unwind_stub-0xeb2534>
    1694:	4b13054a 	blmi	4c2bc4 <__core1_unwind_stub-0xb3d43c>
    1698:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    169c:	15054c0d 	strne	r4, [r5, #-3085]	; 0xfffff3f3
    16a0:	6c100582 	cfldr32vs	mvfx0, [r0], {130}	; 0x82
    16a4:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    16a8:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    16ac:	11053003 	tstne	r5, r3
    16b0:	03040200 	movweq	r0, #16896	; 0x4200
    16b4:	001d0566 	andseq	r0, sp, r6, ror #10
    16b8:	66030402 	strvs	r0, [r3], -r2, lsl #8
    16bc:	03040200 	movweq	r0, #16896	; 0x4200
    16c0:	00090548 	andeq	r0, r9, r8, asr #10
    16c4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    16c8:	056c0c05 	strbeq	r0, [ip, #-3077]!	; 0xfffff3fb
    16cc:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    16d0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    16d4:	00010502 	andeq	r0, r1, r2, lsl #10
    16d8:	00000205 	andeq	r0, r0, r5, lsl #4
    16dc:	d1030000 	mrsle	r0, (UNDEF: 3)
    16e0:	05050103 	streq	r0, [r5, #-259]	; 0xfffffefd
    16e4:	667da003 	ldrbtvs	sl, [sp], -r3
    16e8:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    16ec:	02de0316 	sbcseq	r0, lr, #1476395008	; 0x58000000
    16f0:	2f0f052e 	svccs	0x000f052e
    16f4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    16f8:	0b054c09 	bleq	154724 <__core1_unwind_stub-0xeab8dc>
    16fc:	03050568 	movweq	r0, #21864	; 0x5568
    1700:	059e7daa 	ldreq	r7, [lr, #3498]	; 0xdaa
    1704:	0c054c01 	stceq	12, cr4, [r5], {1}
    1708:	2e02d703 	cdpcs	7, 0, cr13, cr2, cr3, {0}
    170c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1710:	01010006 	tsteq	r1, r6
    1714:	01050204 	tsteq	r5, r4, lsl #4
    1718:	78020500 	stmdavc	r2, {r8, sl}
    171c:	0301001e 	movweq	r0, #4126	; 0x101e
    1720:	050103de 	streq	r0, [r1, #-990]	; 0xfffffc22
    1724:	91036805 	tstls	r3, r5, lsl #16
    1728:	0c052e7d 	stceq	14, cr2, [r5], {125}	; 0x7d
    172c:	030d054d 	movweq	r0, #54605	; 0xd54d
    1730:	052e02ee 	streq	r0, [lr, #-750]!	; 0xfffffd12
    1734:	05052f0b 	streq	r2, [r5, #-3851]	; 0xfffff0f5
    1738:	9e7d9e03 	cdpls	14, 7, cr9, cr13, cr3, {0}
    173c:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
    1740:	02e3030c 	rsceq	r0, r3, #12, 6	; 0x30000000
    1744:	2f01052e 	svccs	0x0001052e
    1748:	01000602 	tsteq	r0, r2, lsl #12
    174c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1750:	02050001 	andeq	r0, r5, #1
    1754:	00000000 	andeq	r0, r0, r0
    1758:	0103ea03 	tsteq	r3, r3, lsl #20
    175c:	eb030505 	bl	c2b78 <__core1_unwind_stub-0xf3d488>
    1760:	0c05667d 	stceq	6, cr6, [r5], {125}	; 0x7d
    1764:	0316054d 	tsteq	r6, #322961408	; 0x13400000
    1768:	052e0293 	streq	r0, [lr, #-659]!	; 0xfffffd6d
    176c:	05052f0e 	streq	r2, [r5, #-3854]	; 0xfffff0f2
    1770:	667e8903 	ldrbtvs	r8, [lr], -r3, lsl #18
    1774:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    1778:	01f50316 	mvnseq	r0, r6, lsl r3
    177c:	3015052e 	andscc	r0, r5, lr, lsr #10
    1780:	20084105 	andcs	r4, r8, r5, lsl #2
    1784:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    1788:	01010008 	tsteq	r1, r8
    178c:	01050204 	tsteq	r5, r4, lsl #4
    1790:	c8020500 	stmdagt	r2, {r8, sl}
    1794:	0301001e 	movweq	r0, #4126	; 0x101e
    1798:	050103f3 	streq	r0, [r1, #-1011]	; 0xfffffc0d
    179c:	7de20305 	stclvc	3, cr0, [r2, #20]!
    17a0:	4d0c0582 	cfstr32mi	mvfx0, [ip, #-520]	; 0xfffffdf8
    17a4:	9c031605 	stcls	6, cr1, [r3], {5}
    17a8:	0e052e02 	cdpeq	14, 0, cr2, cr5, cr2, {0}
    17ac:	691c052f 	ldmdbvs	ip, {r0, r1, r2, r3, r5, r8, sl}
    17b0:	05f21b05 	ldrbeq	r1, [r2, #2821]!	; 0xb05
    17b4:	19054a09 	stmdbne	r5, {r0, r3, r9, fp, lr}
    17b8:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    17bc:	054d1005 	strbeq	r1, [sp, #-5]
    17c0:	0f054f0b 	svceq	0x00054f0b
    17c4:	f20e054c 	vrshl.s8	q0, q6, q7
    17c8:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    17cc:	0b05670e 	bleq	15b40c <__core1_unwind_stub-0xea4bf4>
    17d0:	0305052e 	movweq	r0, #21806	; 0x552e
    17d4:	059e7e82 	ldreq	r7, [lr, #3714]	; 0xe82
    17d8:	0c054c01 	stceq	12, cr4, [r5], {1}
    17dc:	2e028003 	cdpcs	0, 0, cr8, cr2, cr3, {0}
    17e0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    17e4:	01010008 	tsteq	r1, r8
    17e8:	01050204 	tsteq	r5, r4, lsl #4
    17ec:	00020500 	andeq	r0, r2, r0, lsl #10
    17f0:	03000000 	movweq	r0, #0
    17f4:	0501048b 	streq	r0, [r1, #-1163]	; 0xfffffb75
    17f8:	7e8a0305 	cdpvc	3, 8, cr0, cr10, cr5, {0}
    17fc:	4d0c0566 	cfstr32mi	mvfx0, [ip, #-408]	; 0xfffffe68
    1800:	f4031605 	vst1.8	{d1-d3}, [r3], r5
    1804:	38052e01 	stmdacc	r5, {r0, r9, sl, fp, sp}
    1808:	67010530 	smladxvs	r1, r0, r5, r0
    180c:	01000802 	tsteq	r0, r2, lsl #16
    1810:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1814:	02050001 	andeq	r0, r5, #1
    1818:	00000000 	andeq	r0, r0, r0
    181c:	01049203 	tsteq	r4, r3, lsl #4
    1820:	05850905 	streq	r0, [r5, #2309]	; 0x905
    1824:	08052e19 	stmdaeq	r5, {r0, r3, r4, r9, sl, fp, sp}
    1828:	4d10052e 	cfldr32mi	mvfx0, [r0, #-184]	; 0xffffff48
    182c:	fd030505 	stc2	5, cr0, [r3, #-20]	; 0xffffffec
    1830:	0c054a7d 			; <UNDEFINED> instruction: 0x0c054a7d
    1834:	030d054d 	movweq	r0, #54605	; 0xd54d
    1838:	052e0283 	streq	r0, [lr, #-643]!	; 0xfffffd7d
    183c:	0e052f0b 	cdpeq	15, 0, cr2, cr5, cr11, {0}
    1840:	2e0b0567 	cfsh32cs	mvfx0, mvfx11, #55
    1844:	88030505 	stmdahi	r3, {r0, r2, r8, sl}
    1848:	01059e7e 	tsteq	r5, lr, ror lr
    184c:	030c054c 	movweq	r0, #50508	; 0xc54c
    1850:	052e01fa 	streq	r0, [lr, #-506]!	; 0xfffffe06
    1854:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1858:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    185c:	00010502 	andeq	r0, r1, r2, lsl #10
    1860:	1fa80205 	svcne	0x00a80205
    1864:	a7030100 	strge	r0, [r3, -r0, lsl #2]
    1868:	0e050104 	adfeqs	f0, f5, f4
    186c:	4c0905f3 	cfstr32mi	mvfx0, [r9], {243}	; 0xf3
    1870:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    1874:	09054c0f 	stmdbeq	r5, {r0, r1, r2, r3, sl, fp, lr}
    1878:	66080569 	strvs	r0, [r8], -r9, ror #10
    187c:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    1880:	10056908 	andne	r6, r5, r8, lsl #18
    1884:	4d0b0568 	cfstr32mi	mvfx0, [fp, #-416]	; 0xfffffe60
    1888:	ac030505 	cfstr32ge	mvfx0, [r3], {5}
    188c:	0105ba7d 	tsteq	r5, sp, ror sl
    1890:	030c054c 	movweq	r0, #50508	; 0xc54c
    1894:	052e02d6 	streq	r0, [lr, #-726]!	; 0xfffffd2a
    1898:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    189c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    18a0:	00010502 	andeq	r0, r1, r2, lsl #10
    18a4:	205c0205 	subscs	r0, ip, r5, lsl #4
    18a8:	c2030100 	andgt	r0, r3, #0, 2
    18ac:	0e050104 	adfeqs	f0, f5, f4
    18b0:	4d08059f 	cfstr32mi	mvfx0, [r8, #-636]	; 0xfffffd84
    18b4:	05681005 	strbeq	r1, [r8, #-5]!
    18b8:	05054d0c 	streq	r4, [r5, #-3340]	; 0xfffff2f4
    18bc:	3025054a 	eorcc	r0, r5, sl, asr #10
    18c0:	05661705 	strbeq	r1, [r6, #-1797]!	; 0xfffff8fb
    18c4:	18054c09 	stmdane	r5, {r0, r3, sl, fp, lr}
    18c8:	2e1e05f7 	mrccs	5, 0, r0, cr14, cr7, {7}
    18cc:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    18d0:	0d054a12 	vstreq	s8, [r5, #-72]	; 0xffffffb8
    18d4:	31140567 	tstcc	r4, r7, ror #10
    18d8:	02001f05 	andeq	r1, r0, #5, 30
    18dc:	73030204 	movwvc	r0, #12804	; 0x3204
    18e0:	0005054a 	andeq	r0, r5, sl, asr #10
    18e4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    18e8:	ba7cfa03 	blt	1f400fc <__bss_end__+0xf240fc>
    18ec:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
    18f0:	0397030c 	orrseq	r0, r7, #12, 6	; 0x30000000
    18f4:	2f01052e 	svccs	0x0001052e
    18f8:	01000802 	tsteq	r0, r2, lsl #16
    18fc:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1900:	02050001 	andeq	r0, r5, #1
    1904:	00000000 	andeq	r0, r0, r0
    1908:	0104e203 	tsteq	r4, r3, lsl #4
    190c:	059f2305 	ldreq	r2, [pc, #773]	; 1c19 <__core1_unwind_stub-0xffe3e7>
    1910:	08054a0e 	stmdaeq	r5, {r1, r2, r3, r9, fp, lr}
    1914:	68100568 	ldmdavs	r0, {r3, r5, r6, r8, sl}
    1918:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
    191c:	05056810 	streq	r6, [r5, #-2064]	; 0xfffff7f0
    1920:	827cb703 	rsbshi	fp, ip, #786432	; 0xc0000
    1924:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
    1928:	03cc030c 	biceq	r0, ip, #12, 6	; 0x30000000
    192c:	2f01052e 	svccs	0x0001052e
    1930:	01000802 	tsteq	r0, r2, lsl #16
    1934:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1938:	02050001 	andeq	r0, r5, #1
    193c:	0100213c 	tsteq	r0, ip, lsr r1
    1940:	0104f503 	tsteq	r4, r3, lsl #10	; <UNPREDICTABLE>
    1944:	056a0e05 	strbeq	r0, [sl, #-3589]!	; 0xfffff1fb
    1948:	054e5105 	strbeq	r5, [lr, #-261]	; 0xfffffefb
    194c:	0105300c 	tsteq	r5, ip
    1950:	0008022f 	andeq	r0, r8, pc, lsr #4
    1954:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    1958:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    195c:	00000002 	andeq	r0, r0, r2
    1960:	058a0300 	streq	r0, [sl, #768]	; 0x300
    1964:	6a0e0501 	bvs	382d70 <__core1_unwind_stub-0xc7d290>
    1968:	4e510505 	cdpmi	5, 5, cr0, cr1, cr5, {0}
    196c:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
    1970:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1974:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1978:	00010502 	andeq	r0, r1, r2, lsl #10
    197c:	21700205 	cmncs	r0, r5, lsl #4
    1980:	a4030100 	strge	r0, [r3], #-256	; 0xffffff00
    1984:	09050105 	stmdbeq	r5, {r0, r2, r8}
    1988:	4a0805bb 	bmi	20307c <__core1_unwind_stub-0xdfcf84>
    198c:	054c1205 	strbeq	r1, [ip, #-517]	; 0xfffffdfb
    1990:	0d05840e 	cfstrseq	mvf8, [r5, #-56]	; 0xffffffc8
    1994:	6810054a 	ldmdavs	r0, {r1, r3, r6, r8, sl}
    1998:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    199c:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    19a0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    19a4:	00010502 	andeq	r0, r1, r2, lsl #10
    19a8:	21d80205 	bicscs	r0, r8, r5, lsl #4
    19ac:	b4030100 	strlt	r0, [r3], #-256	; 0xffffff00
    19b0:	0c050105 	stfeqs	f0, [r5], {5}
    19b4:	4a0505bd 	bmi	1430b0 <__core1_unwind_stub-0xebcf50>
    19b8:	02001005 	andeq	r1, r0, #5
    19bc:	05300304 	ldreq	r0, [r0, #-772]!	; 0xfffffcfc
    19c0:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    19c4:	31056603 	tstcc	r5, r3, lsl #12
    19c8:	03040200 	movweq	r0, #16896	; 0x4200
    19cc:	00050548 	andeq	r0, r5, r8, asr #10
    19d0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    19d4:	056e0c05 	strbeq	r0, [lr, #-3077]!	; 0xfffff3fb
    19d8:	3b054a05 	blcc	1541f4 <__core1_unwind_stub-0xeabe0c>
    19dc:	f23e0530 	vqrshl.s64	d0, d16, d14
    19e0:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
    19e4:	3e052f3b 	mcrcc	15, 0, r2, cr5, cr11, {1}
    19e8:	2e1a05f2 	mrccs	5, 0, r0, cr10, cr2, {7}
    19ec:	052f3005 	streq	r3, [pc, #-5]!	; 19ef <__core1_unwind_stub-0xffe611>
    19f0:	3005f21a 	andcc	pc, r5, sl, lsl r2	; <UNPREDICTABLE>
    19f4:	f21a054b 	vrshl.s16	q0, <illegal reg q5.5>, q5
    19f8:	054d1005 	strbeq	r1, [sp, #-5]
    19fc:	14054a0c 	strne	r4, [r5], #-2572	; 0xfffff5f4
    1a00:	4e10054c 	cfmac32mi	mvfx0, mvfx0, mvfx12
    1a04:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1a08:	12054c14 	andne	r4, r5, #20, 24	; 0x1400
    1a0c:	4a0c054e 	bmi	302f4c <__core1_unwind_stub-0xcfd0b4>
    1a10:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    1a14:	0c054f10 	stceq	15, cr4, [r5], {16}
    1a18:	4c20054a 	cfstr32mi	mvfx0, [r0], #-296	; 0xfffffed8
    1a1c:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    1a20:	1105a338 	tstne	r5, r8, lsr r3
    1a24:	d610054a 	ldrle	r0, [r0], -sl, asr #10
    1a28:	054d1805 	strbeq	r1, [sp, #-2053]	; 0xfffff7fb
    1a2c:	83834d12 	orrhi	r4, r3, #1152	; 0x480
    1a30:	058a1005 	streq	r1, [sl, #5]
    1a34:	13054a0c 	movwne	r4, #23052	; 0x5a0c
    1a38:	333c054e 	teqcc	ip, #327155712	; 0x13800000
    1a3c:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
    1a40:	1c05d614 	stcne	6, cr13, [r5], {20}
    1a44:	4d16054d 	cfldr32mi	mvfx0, [r6, #-308]	; 0xfffffecc
    1a48:	03130568 	tsteq	r3, #104, 10	; 0x1a000000
    1a4c:	16056673 			; <UNDEFINED> instruction: 0x16056673
    1a50:	68821603 	stmvs	r2, {r0, r1, r9, sl, ip}
    1a54:	05621305 	strbeq	r1, [r2, #-773]!	; 0xfffffcfb
    1a58:	6609030c 	strvs	r0, [r9], -ip, lsl #6
    1a5c:	056b3805 	strbeq	r3, [fp, #-2053]!	; 0xfffff7fb
    1a60:	10054a11 	andne	r4, r5, r1, lsl sl
    1a64:	4d1805d6 	cfldr32mi	mvfx0, [r8, #-856]	; 0xfffffca8
    1a68:	02002605 	andeq	r2, r0, #5242880	; 0x500000
    1a6c:	a5030204 	strge	r0, [r3, #-516]	; 0xfffffdfc
    1a70:	05054a7f 	streq	r4, [r5, #-2687]	; 0xfffff581
    1a74:	01040200 	mrseq	r0, R12_usr
    1a78:	030d0566 	movweq	r0, #54630	; 0xd566
    1a7c:	058200e1 	streq	r0, [r2, #225]	; 0xe1
    1a80:	05054c0c 	streq	r4, [r5, #-3084]	; 0xfffff3f4
    1a84:	3014054a 	andscc	r0, r4, sl, asr #10
    1a88:	05820c05 	streq	r0, [r2, #3077]	; 0xc05
    1a8c:	31054c15 	tstcc	r5, r5, lsl ip
    1a90:	02040200 	andeq	r0, r4, #0, 4
    1a94:	00050562 	andeq	r0, r5, r2, ror #10
    1a98:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1a9c:	056e0c05 	strbeq	r0, [lr, #-3077]!	; 0xfffff3fb
    1aa0:	06022f01 	streq	r2, [r2], -r1, lsl #30
    1aa4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1aa8:	00010502 	andeq	r0, r1, r2, lsl #10
    1aac:	25000205 	strcs	r0, [r0, #-517]	; 0xfffffdfb
    1ab0:	af030100 	svcge	0x00030100
    1ab4:	0c050106 	stfeqs	f0, [r5], {6}
    1ab8:	01053f08 	tsteq	r5, r8, lsl #30
    1abc:	06029308 	streq	r9, [r2], -r8, lsl #6
    1ac0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1ac4:	00010502 	andeq	r0, r1, r2, lsl #10
    1ac8:	25680205 	strbcs	r0, [r8, #-517]!	; 0xfffffdfb
    1acc:	b9030100 	stmdblt	r3, {r8}
    1ad0:	0c050106 	stfeqs	f0, [r5], {6}
    1ad4:	4a08059f 	bmi	203158 <__core1_unwind_stub-0xdfcea8>
    1ad8:	054c1005 	strbeq	r1, [ip, #-5]
    1adc:	09054f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, lr}
    1ae0:	2e0b0568 	cfsh32cs	mvfx0, mvfx11, #56
    1ae4:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1ae8:	08024b01 	stmdaeq	r2, {r0, r8, r9, fp, lr}
    1aec:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1af0:	00010502 	andeq	r0, r1, r2, lsl #10
    1af4:	25c80205 	strbcs	r0, [r8, #517]	; 0x205
    1af8:	c8030100 	stmdagt	r3, {r8}
    1afc:	13050106 	movwne	r0, #20742	; 0x5106
    1b00:	4a26059f 	bmi	983184 <__core1_unwind_stub-0x67ce7c>
    1b04:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1b08:	26054b13 			; <UNDEFINED> instruction: 0x26054b13
    1b0c:	4a09054a 	bmi	24303c <__core1_unwind_stub-0xdbcfc4>
    1b10:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    1b14:	0c054a09 			; <UNDEFINED> instruction: 0x0c054a09
    1b18:	4a08054c 	bmi	203050 <__core1_unwind_stub-0xdfcfb0>
    1b1c:	054c1005 	strbeq	r1, [ip, #-5]
    1b20:	09054f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, lr}
    1b24:	2f0b0566 	svccs	0x000b0566
    1b28:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1b2c:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1b30:	2f0b0583 	svccs	0x000b0583
    1b34:	20080905 	andcs	r0, r8, r5, lsl #18
    1b38:	052f0b05 	streq	r0, [pc, #-2821]!	; 103b <__core1_unwind_stub-0xffefc5>
    1b3c:	0b056609 	bleq	15b368 <__core1_unwind_stub-0xea4c98>
    1b40:	8309052f 	movwhi	r0, #38191	; 0x952f
    1b44:	052f0b05 	streq	r0, [pc, #-2821]!	; 1047 <__core1_unwind_stub-0xffefb9>
    1b48:	0b058209 	bleq	162374 <__core1_unwind_stub-0xe9dc8c>
    1b4c:	6609054b 	strvs	r0, [r9], -fp, asr #10
    1b50:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1b54:	01010008 	tsteq	r1, r8
    1b58:	01050204 	tsteq	r5, r4, lsl #4
    1b5c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    1b60:	03010026 	movweq	r0, #4134	; 0x1026
    1b64:	050106e2 	streq	r0, [r1, #-1762]	; 0xfffff91e
    1b68:	26059f13 			; <UNDEFINED> instruction: 0x26059f13
    1b6c:	4a09054a 	bmi	24309c <__core1_unwind_stub-0xdbcf64>
    1b70:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    1b74:	09054a26 	stmdbeq	r5, {r1, r2, r5, r9, fp, lr}
    1b78:	4b13054a 	blmi	4c30a8 <__core1_unwind_stub-0xb3cf58>
    1b7c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1b80:	08054c0c 	stmdaeq	r5, {r2, r3, sl, fp, lr}
    1b84:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
    1b88:	054f0b05 	strbeq	r0, [pc, #-2821]	; 108b <__core1_unwind_stub-0xffef75>
    1b8c:	0b056609 	bleq	15b3b8 <__core1_unwind_stub-0xea4c48>
    1b90:	6609054b 	strvs	r0, [r9], -fp, asr #10
    1b94:	052f0b05 	streq	r0, [pc, #-2821]!	; 1097 <__core1_unwind_stub-0xffef69>
    1b98:	0b058309 	bleq	1627c4 <__core1_unwind_stub-0xe9d83c>
    1b9c:	0809052f 	stmdaeq	r9, {r0, r1, r2, r3, r5, r8, sl}
    1ba0:	2f0b0520 	svccs	0x000b0520
    1ba4:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1ba8:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1bac:	2f0b0583 	svccs	0x000b0583
    1bb0:	05820905 	streq	r0, [r2, #2309]	; 0x905
    1bb4:	09054b0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, fp, lr}
    1bb8:	2f01054a 	svccs	0x0001054a
    1bbc:	01000802 	tsteq	r0, r2, lsl #16
    1bc0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1bc4:	02050001 	andeq	r0, r5, #1
    1bc8:	01002810 	tsteq	r0, r0, lsl r8
    1bcc:	0106fc03 	tsteq	r6, r3, lsl #24	; <UNPREDICTABLE>
    1bd0:	059f1305 	ldreq	r1, [pc, #773]	; 1edd <__core1_unwind_stub-0xffe123>
    1bd4:	09054a26 	stmdbeq	r5, {r1, r2, r5, r9, fp, lr}
    1bd8:	4b13054a 	blmi	4c3108 <__core1_unwind_stub-0xb3cef8>
    1bdc:	054a2605 	strbeq	r2, [sl, #-1541]	; 0xfffff9fb
    1be0:	13054a09 	movwne	r4, #23049	; 0x5a09
    1be4:	4a09054b 	bmi	243118 <__core1_unwind_stub-0xdbcee8>
    1be8:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
    1bec:	10054a08 	andne	r4, r5, r8, lsl #20
    1bf0:	510b054c 	tstpl	fp, ip, asr #10
    1bf4:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1bf8:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1bfc:	2f0b0566 	svccs	0x000b0566
    1c00:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1c04:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1c08:	0b052008 	bleq	149c30 <__core1_unwind_stub-0xeb63d0>
    1c0c:	6609052f 	strvs	r0, [r9], -pc, lsr #10
    1c10:	052f0b05 	streq	r0, [pc, #-2821]!	; 1113 <__core1_unwind_stub-0xffeeed>
    1c14:	0b058309 	bleq	162840 <__core1_unwind_stub-0xe9d7c0>
    1c18:	6609054b 	strvs	r0, [r9], -fp, asr #10
    1c1c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1c20:	01010008 	tsteq	r1, r8
    1c24:	01050204 	tsteq	r5, r4, lsl #4
    1c28:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    1c2c:	03010029 	movweq	r0, #4137	; 0x1029
    1c30:	05010796 	streq	r0, [r1, #-1942]	; 0xfffff86a
    1c34:	26059f13 			; <UNDEFINED> instruction: 0x26059f13
    1c38:	4a09054a 	bmi	243168 <__core1_unwind_stub-0xdbce98>
    1c3c:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    1c40:	09054a26 	stmdbeq	r5, {r1, r2, r5, r9, fp, lr}
    1c44:	4b13054a 	blmi	4c3174 <__core1_unwind_stub-0xb3ce8c>
    1c48:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c4c:	08054c0c 	stmdaeq	r5, {r2, r3, sl, fp, lr}
    1c50:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
    1c54:	05510b05 	ldrbeq	r0, [r1, #-2821]	; 0xfffff4fb
    1c58:	0b056609 	bleq	15b484 <__core1_unwind_stub-0xea4b7c>
    1c5c:	6609052f 	strvs	r0, [r9], -pc, lsr #10
    1c60:	052f0b05 	streq	r0, [pc, #-2821]!	; 1163 <__core1_unwind_stub-0xffee9d>
    1c64:	05200809 	streq	r0, [r0, #-2057]!	; 0xfffff7f7
    1c68:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1c6c:	2f0b0583 	svccs	0x000b0583
    1c70:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1c74:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
    1c78:	4b0b0582 	blmi	2c3288 <__core1_unwind_stub-0xd3cd78>
    1c7c:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1c80:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    1c84:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1c88:	00010502 	andeq	r0, r1, r2, lsl #10
    1c8c:	2a2c0205 	bcs	b024a8 <__core1_unwind_stub-0x4fdb58>
    1c90:	af030100 	svcge	0x00030100
    1c94:	09050107 	stmdbeq	r5, {r0, r1, r2, r8}
    1c98:	2e190587 	cdpcs	5, 1, cr0, cr9, cr7, {4}
    1c9c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    1ca0:	05054c10 	streq	r4, [r5, #-3088]	; 0xfffff3f0
    1ca4:	830c054d 	movwhi	r0, #50509	; 0xc54d
    1ca8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1cac:	01010006 	tsteq	r1, r6
    1cb0:	01050204 	tsteq	r5, r4, lsl #4
    1cb4:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    1cb8:	0301002a 	movweq	r0, #4138	; 0x102a
    1cbc:	050107c2 	streq	r0, [r1, #-1986]	; 0xfffff83e
    1cc0:	05cd0816 	strbeq	r0, [sp, #2070]	; 0x816
    1cc4:	05b0080c 	ldreq	r0, [r0, #2060]!	; 0x80c
    1cc8:	10054b08 	andne	r4, r5, r8, lsl #22
    1ccc:	4d110568 	cfldr32mi	mvfx0, [r1, #-416]	; 0xfffffe60
    1cd0:	05da0805 	ldrbeq	r0, [sl, #2053]	; 0x805
    1cd4:	09056810 	stmdbeq	r5, {r4, fp, sp, lr}
    1cd8:	054a1003 	strbeq	r1, [sl, #-3]
    1cdc:	08052e1b 	stmdaeq	r5, {r0, r1, r3, r4, r9, sl, fp, sp}
    1ce0:	4c10052e 	cfldr32mi	mvfx0, [r0], {46}	; 0x2e
    1ce4:	054e1305 	strbeq	r1, [lr, #-773]	; 0xfffffcfb
    1ce8:	10054a08 	andne	r4, r5, r8, lsl #20
    1cec:	4c0b0568 	cfstr32mi	mvfx0, [fp], {104}	; 0x68
    1cf0:	059f0f05 	ldreq	r0, [pc, #3845]	; 2bfd <__core1_unwind_stub-0xffd403>
    1cf4:	08056809 	stmdaeq	r5, {r0, r3, fp, sp, lr}
    1cf8:	4c1005d6 	cfldr32mi	mvfx0, [r0], {214}	; 0xd6
    1cfc:	054e0c05 	strbeq	r0, [lr, #-3077]	; 0xfffff3fb
    1d00:	14054a05 	strne	r4, [r5], #-2565	; 0xfffff5fb
    1d04:	d60c0530 			; <UNDEFINED> instruction: 0xd60c0530
    1d08:	054e1805 	strbeq	r1, [lr, #-2053]	; 0xfffff7fb
    1d0c:	1005831b 	andne	r8, r5, fp, lsl r3
    1d10:	6818054a 	ldmdavs	r8, {r1, r3, r6, r8, sl}
    1d14:	054c1705 	strbeq	r1, [ip, #-1797]	; 0xfffff8fb
    1d18:	2305670d 	movwcs	r6, #22285	; 0x570d
    1d1c:	833e054c 	teqhi	lr, #76, 10	; 0x13000000
    1d20:	05d62305 	ldrbeq	r2, [r6, #773]	; 0x305
    1d24:	0e056714 	mcreq	7, 0, r6, cr5, cr4, {0}
    1d28:	821405f4 	andshi	r0, r4, #244, 10	; 0x3d000000
    1d2c:	05661805 	strbeq	r1, [r6, #-2053]!	; 0xfffff7fb
    1d30:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    1d34:	4a6e0302 	bmi	1b82944 <__bss_end__+0xb66944>
    1d38:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    1d3c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1d40:	66190308 	ldrvs	r0, [r9], -r8, lsl #6
    1d44:	05841005 	streq	r1, [r4, #5]
    1d48:	05054f0c 	streq	r4, [r5, #-3852]	; 0xfffff0f4
    1d4c:	3030054a 	eorscc	r0, r0, sl, asr #10
    1d50:	3c083305 	stccc	3, cr3, [r8], {5}
    1d54:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    1d58:	33052f30 	movwcc	r2, #24368	; 0x5f30
    1d5c:	13053c08 	movwne	r3, #23560	; 0x5c08
    1d60:	2f25052e 	svccs	0x0025052e
    1d64:	3c081305 	stccc	3, cr1, [r8], {5}
    1d68:	fa4f1205 	blx	13c6584 <__bss_end__+0x3aa584>
    1d6c:	054c1005 	strbeq	r1, [ip, #-5]
    1d70:	2b054a09 	blcs	15459c <__core1_unwind_stub-0xeaba64>
    1d74:	66210530 			; <UNDEFINED> instruction: 0x66210530
    1d78:	05d62505 	ldrbeq	r2, [r6, #1285]	; 0x505
    1d7c:	10052e2b 	andne	r2, r5, fp, lsr #28
    1d80:	4d1a052e 	cfldr32mi	mvfx0, [sl, #-184]	; 0xffffff48
    1d84:	05f31105 	ldrbeq	r1, [r3, #261]!	; 0x105
    1d88:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    1d8c:	2e7a0302 	cdpcs	3, 7, cr0, cr10, cr2, {0}
    1d90:	02000905 	andeq	r0, r0, #81920	; 0x14000
    1d94:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1d98:	660d0310 			; <UNDEFINED> instruction: 0x660d0310
    1d9c:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1da0:	16054e20 	strne	r4, [r5], -r0, lsr #28
    1da4:	a0100566 	andsge	r0, r0, r6, ror #10
    1da8:	056b1705 	strbeq	r1, [fp, #-1797]!	; 0xfffff8fb
    1dac:	25053054 	strcs	r3, [r5, #-84]	; 0xffffffac
    1db0:	f43a05ba 			; <UNDEFINED> instruction: 0xf43a05ba
    1db4:	05824405 	streq	r4, [r2, #1029]	; 0x405
    1db8:	4b054a40 	blmi	1546c0 <__core1_unwind_stub-0xeab940>
    1dbc:	4a200566 	bmi	80335c <__core1_unwind_stub-0x7fcca4>
    1dc0:	052f2805 	streq	r2, [pc, #-2053]!	; 15c3 <__core1_unwind_stub-0xffea3d>
    1dc4:	22054a1e 	andcs	r4, r5, #122880	; 0x1e000
    1dc8:	9e18054f 	cfmac32ls	mvfx0, mvfx8, mvfx15
    1dcc:	054c2005 	strbeq	r2, [ip, #-5]
    1dd0:	28054d1e 	stmdacs	r5, {r1, r2, r3, r4, r8, sl, fp, lr}
    1dd4:	4c1d0582 	cfldr32mi	mvfx0, [sp], {130}	; 0x82
    1dd8:	03676767 	cmneq	r7, #27000832	; 0x19c0000
    1ddc:	1705666c 	strne	r6, [r5, -ip, ror #12]
    1de0:	0044054a 	subeq	r0, r4, sl, asr #10
    1de4:	4a010402 	bmi	42df4 <__core1_unwind_stub-0xfbd20c>
    1de8:	18031705 	stmdane	r3, {r0, r2, r8, r9, sl, ip}
    1dec:	30540566 	subscc	r0, r4, r6, ror #10
    1df0:	05ba2505 	ldreq	r2, [sl, #1285]!	; 0x505
    1df4:	4405f43a 	strmi	pc, [r5], #-1082	; 0xfffffbc6
    1df8:	4a400582 	bmi	1003408 <alt_mmu_va_space_create+0x994>
    1dfc:	05664b05 	strbeq	r4, [r6, #-2821]!	; 0xfffff4fb
    1e00:	28054a20 	stmdacs	r5, {r5, r9, fp, lr}
    1e04:	4a1e052f 	bmi	7832c8 <__core1_unwind_stub-0x87cd38>
    1e08:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
    1e0c:	2f054a15 	svccs	0x00054a15
    1e10:	66260530 			; <UNDEFINED> instruction: 0x66260530
    1e14:	05821c05 	streq	r1, [r2, #3077]	; 0xc05
    1e18:	2b054c24 	blcs	154eb0 <__core1_unwind_stub-0xeab150>
    1e1c:	02040200 	andeq	r0, r4, #0, 4
    1e20:	0022054d 	eoreq	r0, r2, sp, asr #10
    1e24:	66020402 	strvs	r0, [r2], -r2, lsl #8
    1e28:	02003005 	andeq	r3, r0, #5
    1e2c:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    1e30:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    1e34:	4a790302 	bmi	1e42a44 <__bss_end__+0xe26a44>
    1e38:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    1e3c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1e40:	660a031d 			; <UNDEFINED> instruction: 0x660a031d
    1e44:	05676767 	strbeq	r6, [r7, #-1895]!	; 0xfffff899
    1e48:	666c0317 			; <UNDEFINED> instruction: 0x666c0317
    1e4c:	05661903 	strbeq	r1, [r6, #-2307]!	; 0xfffff6fd
    1e50:	25053054 	strcs	r3, [r5, #-84]	; 0xffffffac
    1e54:	f43a05ba 			; <UNDEFINED> instruction: 0xf43a05ba
    1e58:	05824405 	streq	r4, [r2, #1029]	; 0x405
    1e5c:	4b054a40 	blmi	154764 <__core1_unwind_stub-0xeab89c>
    1e60:	4a200566 	bmi	803400 <__core1_unwind_stub-0x7fcc00>
    1e64:	052f2805 	streq	r2, [pc, #-2053]!	; 1667 <__core1_unwind_stub-0xffe999>
    1e68:	22054a1e 	andcs	r4, r5, #122880	; 0x1e000
    1e6c:	9e18054c 	cfmac32ls	mvfx0, mvfx8, mvfx12
    1e70:	054c2005 	strbeq	r2, [ip, #-5]
    1e74:	28054d1e 	stmdacs	r5, {r1, r2, r3, r4, r8, sl, fp, lr}
    1e78:	4c1d0582 	cfldr32mi	mvfx0, [sp], {130}	; 0x82
    1e7c:	05676767 	strbeq	r6, [r7, #-1895]!	; 0xfffff899
    1e80:	666f0317 			; <UNDEFINED> instruction: 0x666f0317
    1e84:	19035405 	stmdbne	r3, {r0, r2, sl, ip, lr}
    1e88:	ba250582 	blt	943498 <__core1_unwind_stub-0x6bcb68>
    1e8c:	05f43a05 	ldrbeq	r3, [r4, #2565]!	; 0xa05
    1e90:	40058244 	andmi	r8, r5, r4, asr #4
    1e94:	664b054a 	strbvs	r0, [fp], -sl, asr #10
    1e98:	054a2005 	strbeq	r2, [sl, #-5]
    1e9c:	1e052f28 	cdpne	15, 0, cr2, cr5, cr8, {1}
    1ea0:	4c22054a 	cfstr32mi	mvfx0, [r2], #-296	; 0xfffffed8
    1ea4:	059e1805 	ldreq	r1, [lr, #2053]	; 0x805
    1ea8:	1e054c20 	cdpne	12, 0, cr4, cr5, cr0, {1}
    1eac:	8228054d 	eorhi	r0, r8, #322961408	; 0x13400000
    1eb0:	674c1d05 	strbvs	r1, [ip, -r5, lsl #26]
    1eb4:	17056767 	strne	r6, [r5, -r7, ror #14]
    1eb8:	05666f03 	strbeq	r6, [r6, #-3843]!	; 0xfffff0fd
    1ebc:	6620030c 	strtvs	r0, [r0], -ip, lsl #6
    1ec0:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    1ec4:	4e056b13 	vmovmi.32	d5[0], r6
    1ec8:	ba210530 	blt	843390 <__core1_unwind_stub-0x7bcc70>
    1ecc:	05f41605 	ldrbeq	r1, [r4, #1541]!	; 0x605
    1ed0:	1c058220 	sfmne	f0, 1, [r5], {32}
    1ed4:	6614054a 	ldrvs	r0, [r4], -sl, asr #10
    1ed8:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
    1edc:	1c054d12 	stcne	13, cr4, [r5], {18}
    1ee0:	4a180582 	bmi	6034f0 <__core1_unwind_stub-0x9fcb10>
    1ee4:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
    1ee8:	67674c16 			; <UNDEFINED> instruction: 0x67674c16
    1eec:	73031905 	movwvc	r1, #14597	; 0x3905
    1ef0:	4a130566 	bmi	4c3490 <__core1_unwind_stub-0xb3cb70>
    1ef4:	02004205 	andeq	r4, r0, #1342177280	; 0x50000000
    1ef8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1efc:	66110313 			; <UNDEFINED> instruction: 0x66110313
    1f00:	05305305 	ldreq	r5, [r0, #-773]!	; 0xfffffcfb
    1f04:	1805ba21 	stmdane	r5, {r0, r5, r9, fp, ip, sp, pc}
    1f08:	4a1105f4 	bmi	4436e0 <__core1_unwind_stub-0xbbc920>
    1f0c:	05301a05 	ldreq	r1, [r0, #-2565]!	; 0xfffff5fb
    1f10:	2c058225 	sfmcs	f0, 1, [r5], {37}	; 0x25
    1f14:	4a20054a 	bmi	803444 <__core1_unwind_stub-0x7fcbbc>
    1f18:	05661805 	strbeq	r1, [r6, #-2053]!	; 0xfffff7fb
    1f1c:	16054c20 	strne	r4, [r5], -r0, lsr #24
    1f20:	02040200 	andeq	r0, r4, #0, 4
    1f24:	0021054d 	eoreq	r0, r1, sp, asr #10
    1f28:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    1f2c:	02002805 	andeq	r2, r0, #327680	; 0x50000
    1f30:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    1f34:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    1f38:	2d054a02 	vstrcs	s8, [r5, #-8]
    1f3c:	02040200 	andeq	r0, r4, #0, 4
    1f40:	0025054a 	eoreq	r0, r5, sl, asr #10
    1f44:	03020402 	movweq	r0, #9218	; 0x2402
    1f48:	11054a79 	tstne	r5, r9, ror sl
    1f4c:	01040200 	mrseq	r0, R12_usr
    1f50:	03160566 	tsteq	r6, #427819008	; 0x19800000
    1f54:	6767660a 	strbvs	r6, [r7, -sl, lsl #12]!
    1f58:	70031305 	andvc	r1, r3, r5, lsl #6
    1f5c:	66140366 	ldrvs	r0, [r4], -r6, ror #6
    1f60:	05304e05 	ldreq	r4, [r0, #-3589]!	; 0xfffff1fb
    1f64:	1605ba21 	strne	fp, [r5], -r1, lsr #20
    1f68:	822005f4 	eorhi	r0, r0, #244, 10	; 0x3d000000
    1f6c:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
    1f70:	1c056614 	stcne	6, cr6, [r5], {20}
    1f74:	4d12054c 	cfldr32mi	mvfx0, [r2, #-304]	; 0xfffffed0
    1f78:	05821c05 	streq	r1, [r2, #3077]	; 0xc05
    1f7c:	23054a18 	movwcs	r4, #23064	; 0x5a18
    1f80:	4c16054a 	cfldr32mi	mvfx0, [r6], {74}	; 0x4a
    1f84:	13056767 	movwne	r6, #22375	; 0x5767
    1f88:	05667303 	strbeq	r7, [r6, #-771]!	; 0xfffffcfd
    1f8c:	6655030c 	ldrbvs	r0, [r5], -ip, lsl #6
    1f90:	3b031105 	blcc	c63ac <__core1_unwind_stub-0xf39c54>
    1f94:	6712052e 	ldrvs	r0, [r2, -lr, lsr #10]
    1f98:	056a1305 	strbeq	r1, [sl, #-773]!	; 0xfffffcfb
    1f9c:	2105304e 	tstcs	r5, lr, asr #32
    1fa0:	f41605ba 			; <UNDEFINED> instruction: 0xf41605ba
    1fa4:	05822005 	streq	r2, [r2, #5]
    1fa8:	14054a1c 	strne	r4, [r5], #-2588	; 0xfffff5e4
    1fac:	4c1c0566 	cfldr32mi	mvfx0, [ip], {102}	; 0x66
    1fb0:	054d1205 	strbeq	r1, [sp, #-517]	; 0xfffffdfb
    1fb4:	1805821c 	stmdane	r5, {r2, r3, r4, r9, pc}
    1fb8:	4a23054a 	bmi	8c34e8 <__core1_unwind_stub-0x73cb18>
    1fbc:	674c1605 	strbvs	r1, [ip, -r5, lsl #12]
    1fc0:	03130567 	tsteq	r3, #432013312	; 0x19c00000
    1fc4:	0c056673 	stceq	6, cr6, [r5], {115}	; 0x73
    1fc8:	05661503 	strbeq	r1, [r6, #-1283]!	; 0xfffffafd
    1fcc:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    1fd0:	13056601 	movwne	r6, #22017	; 0x5601
    1fd4:	30500568 	subscc	r0, r0, r8, ror #10
    1fd8:	05ba2105 	ldreq	r2, [sl, #261]!	; 0x105
    1fdc:	4005f436 	andmi	pc, r5, r6, lsr r4	; <UNPREDICTABLE>
    1fe0:	4a3c0582 	bmi	f035f0 <__core1_unwind_stub-0xfca10>
    1fe4:	05664705 	strbeq	r4, [r6, #-1797]!	; 0xfffff8fb
    1fe8:	24054a1c 	strcs	r4, [r5], #-2588	; 0xfffff5e4
    1fec:	4a1a052f 	bmi	6834b0 <__core1_unwind_stub-0x97cb50>
    1ff0:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
    1ff4:	2b054a11 	blcs	154840 <__core1_unwind_stub-0xeab7c0>
    1ff8:	66220530 			; <UNDEFINED> instruction: 0x66220530
    1ffc:	05821805 	streq	r1, [r2, #2053]	; 0x805
    2000:	27054c20 	strcs	r4, [r5, -r0, lsr #24]
    2004:	02040200 	andeq	r0, r4, #0, 4
    2008:	001e054d 	andseq	r0, lr, sp, asr #10
    200c:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2010:	02002c05 	andeq	r2, r0, #1280	; 0x500
    2014:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    2018:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    201c:	4a790302 	bmi	1e42c2c <__bss_end__+0xe26c2c>
    2020:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
    2024:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2028:	660a0316 			; <UNDEFINED> instruction: 0x660a0316
    202c:	13056767 	movwne	r6, #22375	; 0x5767
    2030:	05666d03 	strbeq	r6, [r6, #-3331]!	; 0xfffff2fd
    2034:	6617030f 	ldrvs	r0, [r7], -pc, lsl #6
    2038:	05304c05 	ldreq	r4, [r0, #-3077]!	; 0xfffff3fb
    203c:	3205ba1d 	andcc	fp, r5, #118784	; 0x1d000
    2040:	823c05f4 	eorshi	r0, ip, #244, 10	; 0x3d000000
    2044:	054a3805 	strbeq	r3, [sl, #-2053]	; 0xfffff7fb
    2048:	18056643 	stmdane	r5, {r0, r1, r6, r9, sl, sp, lr}
    204c:	2f20054a 	svccs	0x0020054a
    2050:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
    2054:	10054c1a 	andne	r4, r5, sl, lsl ip
    2058:	4c18059e 	cfldr32mi	mvfx0, [r8], {158}	; 0x9e
    205c:	054d1605 	strbeq	r1, [sp, #-1541]	; 0xfffff9fb
    2060:	12058220 	andne	r8, r5, #32, 4
    2064:	0567674c 	strbeq	r6, [r7, #-1868]!	; 0xfffff8b4
    2068:	6670030f 	ldrbtvs	r0, [r0], -pc, lsl #6
    206c:	ff032605 			; <UNDEFINED> instruction: 0xff032605
    2070:	0505667d 	streq	r6, [r5, #-1661]	; 0xfffff983
    2074:	01040200 	mrseq	r0, R12_usr
    2078:	030c0566 	movweq	r0, #50534	; 0xc566
    207c:	05ba0296 	ldreq	r0, [sl, #662]!	; 0x296
    2080:	04020001 	streq	r0, [r2], #-1
    2084:	06022f01 	streq	r2, [r2], -r1, lsl #30
    2088:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    208c:	00010502 	andeq	r0, r1, r2, lsl #10
    2090:	384c0205 	stmdacc	ip, {r0, r2, r9}^
    2094:	b4030100 	strlt	r0, [r3], #-256	; 0xffffff00
    2098:	1505010a 	strne	r0, [r5, #-266]	; 0xfffffef6
    209c:	4d080583 	cfstr32mi	mvfx0, [r8, #-524]	; 0xfffffdf4
    20a0:	05681205 	strbeq	r1, [r8, #-517]!	; 0xfffffdfb
    20a4:	0d05a10c 	stfeqd	f2, [r5, #-48]	; 0xffffffd0
    20a8:	88080568 	stmdahi	r8, {r3, r5, r6, r8, sl}
    20ac:	05681205 	strbeq	r1, [r8, #-517]!	; 0xfffffdfb
    20b0:	0d05670c 	stceq	7, cr6, [r5, #-48]	; 0xffffffd0
    20b4:	88080568 	stmdahi	r8, {r3, r5, r6, r8, sl}
    20b8:	056a1005 	strbeq	r1, [sl, #-5]!
    20bc:	1a054a09 	bne	1548e8 <__core1_unwind_stub-0xeab718>
    20c0:	03040200 	movweq	r0, #16896	; 0x4200
    20c4:	001d0530 	andseq	r0, sp, r0, lsr r5
    20c8:	9c030402 	cfstrsls	mvf0, [r3], {2}
    20cc:	02000905 	andeq	r0, r0, #81920	; 0x14000
    20d0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    20d4:	0c056b12 			; <UNDEFINED> instruction: 0x0c056b12
    20d8:	680d059f 	stmdavs	sp, {r0, r1, r2, r3, r4, r7, r8, sl}
    20dc:	05880805 	streq	r0, [r8, #2053]	; 0x805
    20e0:	0c056812 	stceq	8, cr6, [r5], {18}
    20e4:	680d054b 	stmdavs	sp, {r0, r1, r3, r6, r8, sl}
    20e8:	05860c05 	streq	r0, [r6, #3077]	; 0xc05
    20ec:	06022f01 	streq	r2, [r2], -r1, lsl #30
    20f0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    20f4:	00010502 	andeq	r0, r1, r2, lsl #10
    20f8:	00000205 	andeq	r0, r0, r5, lsl #4
    20fc:	f3030000 	vhadd.u8	d0, d3, d0
    2100:	0f05010a 	svceq	0x0005010a
    2104:	030505bb 	movweq	r0, #21947	; 0x55bb
    2108:	2f4b4a0e 	svccs	0x004b4a0e
    210c:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    2110:	17054a08 	strne	r4, [r5, -r8, lsl #20]
    2114:	4a12054f 	bmi	483658 <__core1_unwind_stub-0xb7c9a8>
    2118:	674d1e05 	strbvs	r1, [sp, -r5, lsl #28]
    211c:	05652405 	strbeq	r2, [r5, #-1029]!	; 0xfffffbfb
    2120:	2405301e 	strcs	r3, [r5], #-30	; 0xffffffe2
    2124:	2d0f0549 	cfstr32cs	mvfx0, [pc, #-292]	; 2008 <__core1_unwind_stub-0xffdff8>
    2128:	054e0905 	strbeq	r0, [lr, #-2309]	; 0xfffff6fb
    212c:	0d05a011 	stceq	0, cr10, [r5, #-68]	; 0xffffffbc
    2130:	4e1b054a 	cfmac32mi	mvfx0, mvfx11, mvfx10
    2134:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    2138:	05674b0c 	strbeq	r4, [r7, #-2828]!	; 0xfffff4f4
    213c:	30058409 	andcc	r8, r5, r9, lsl #8
    2140:	4a1405da 	bmi	5038b0 <__core1_unwind_stub-0xafc750>
    2144:	881b054b 	ldmdahi	fp, {r0, r1, r3, r6, r8, sl}
    2148:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    214c:	05834b0c 	streq	r4, [r3, #2828]	; 0xb0c
    2150:	2e058409 	cdpcs	4, 0, cr8, cr5, cr9, {0}
    2154:	4a1405f6 	bmi	503934 <__core1_unwind_stub-0xafc6cc>
    2158:	690c054b 	stmdbvs	ip, {r0, r1, r3, r6, r8, sl}
    215c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    2160:	01010006 	tsteq	r1, r6
    2164:	01050204 	tsteq	r5, r4, lsl #4
    2168:	00020500 	andeq	r0, r2, r0, lsl #10
    216c:	03000000 	movweq	r0, #0
    2170:	05010bb8 	streq	r0, [r1, #-3000]	; 0xfffff448
    2174:	1705bd09 	strne	fp, [r5, -r9, lsl #26]
    2178:	4a1e052e 	bmi	783638 <__core1_unwind_stub-0x87c9c8>
    217c:	052e2405 	streq	r2, [lr, #-1029]!	; 0xfffffbfb
    2180:	09052e08 	stmdbeq	r5, {r3, r9, sl, fp, sp}
    2184:	6710054c 	ldrvs	r0, [r0, -ip, asr #10]
    2188:	054d1b05 	strbeq	r1, [sp, #-2821]	; 0xfffff4fb
    218c:	0905d619 	stmdbeq	r5, {r0, r3, r4, r9, sl, ip, lr, pc}
    2190:	2e08054b 	cfsh32cs	mvfx0, mvfx8, #43
    2194:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
    2198:	1d05bc10 	stcne	12, cr11, [r5, #-64]	; 0xffffffc0
    219c:	ba1b054d 	blt	6c36d8 <__core1_unwind_stub-0x93c928>
    21a0:	674c1405 	strbvs	r1, [ip, -r5, lsl #8]
    21a4:	05680c05 	strbeq	r0, [r8, #-3077]!	; 0xfffff3fb
    21a8:	04020001 	streq	r0, [r2], #-1
    21ac:	06022f01 	streq	r2, [r2], -r1, lsl #30
    21b0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    21b4:	00010502 	andeq	r0, r1, r2, lsl #10
    21b8:	00000205 	andeq	r0, r0, r5, lsl #4
    21bc:	d2030000 	andle	r0, r3, #0
    21c0:	0f05010b 	svceq	0x0005010b
    21c4:	110567bb 			; <UNDEFINED> instruction: 0x110567bb
    21c8:	4a080568 	bmi	203770 <__core1_unwind_stub-0xdfc890>
    21cc:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
    21d0:	14056710 	strne	r6, [r5], #-1808	; 0xfffff8f0
    21d4:	0b05bb4d 	bleq	170f10 <__core1_unwind_stub-0xe8f0f0>
    21d8:	313805bc 	teqcc	r8, ip	; <illegal shifter operand>
    21dc:	054a1f05 	strbeq	r1, [sl, #-3845]	; 0xfffff0fb
    21e0:	0d05ba1d 	vstreq	s22, [r5, #-116]	; 0xffffff8c
    21e4:	2e0c054b 	cfsh32cs	mvfx0, mvfx12, #43
    21e8:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    21ec:	2105d814 	tstcs	r5, r4, lsl r8
    21f0:	d61f054d 	ldrle	r0, [pc], -sp, asr #10
    21f4:	054c1505 	strbeq	r1, [ip, #-1285]	; 0xfffffafb
    21f8:	0c054a2e 			; <UNDEFINED> instruction: 0x0c054a2e
    21fc:	4d270566 	cfstr32mi	mvfx0, [r7, #-408]!	; 0xfffffe68
    2200:	674a1c05 	strbvs	r1, [sl, -r5, lsl #24]
    2204:	054a2705 	strbeq	r2, [sl, #-1797]	; 0xfffff8fb
    2208:	05674a1c 	strbeq	r4, [r7, #-2588]!	; 0xfffff5e4
    220c:	1c054a27 			; <UNDEFINED> instruction: 0x1c054a27
    2210:	680d054a 	stmdavs	sp, {r1, r3, r6, r8, sl}
    2214:	6c031405 	cfstrsvs	mvf1, [r3], {5}
    2218:	4a0b0582 	bmi	2c3828 <__core1_unwind_stub-0xd3c7d8>
    221c:	19030d05 	stmdbne	r3, {r0, r2, r8, sl, fp}
    2220:	320e0566 	andcc	r0, lr, #427819008	; 0x19800000
    2224:	680c0567 	stmdavs	ip, {r0, r1, r2, r5, r6, r8, sl}
    2228:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    222c:	01010006 	tsteq	r1, r6
    2230:	01050204 	tsteq	r5, r4, lsl #4
    2234:	00020500 	andeq	r0, r2, r0, lsl #10
    2238:	03000000 	movweq	r0, #0
    223c:	05010c83 	streq	r0, [r1, #-3203]	; 0xfffff37d
    2240:	08058311 	stmdaeq	r5, {r0, r4, r8, r9, pc}
    2244:	4c09054a 	cfstr32mi	mvfx0, [r9], {74}	; 0x4a
    2248:	4e671005 	cdpmi	0, 6, cr1, cr7, cr5, {0}
    224c:	02300105 	eorseq	r0, r0, #1073741825	; 0x40000001
    2250:	01010006 	tsteq	r1, r6
    2254:	000007ae 	andeq	r0, r0, lr, lsr #15
    2258:	01040003 	tsteq	r4, r3
    225c:	01020000 	mrseq	r0, (UNDEF: 2)
    2260:	000d0efb 	strdeq	r0, [sp], -fp
    2264:	01010101 	tsteq	r1, r1, lsl #2
    2268:	01000000 	mrseq	r0, (UNDEF: 0)
    226c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    2270:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2274:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2278:	6974752f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, sp, lr}^
    227c:	2f00736c 	svccs	0x0000736c
    2280:	2f727375 	svccs	0x00727375
    2284:	2f62696c 	svccs	0x0062696c
    2288:	2f636367 	svccs	0x00636367
    228c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2290:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    2294:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2298:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    229c:	2f312e32 	svccs	0x00312e32
    22a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    22a4:	00656475 	rsbeq	r6, r5, r5, ror r4
    22a8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    22ac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    22b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    22b4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    22b8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    22bc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    22c0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    22c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    22c8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    22cc:	2f62696c 	svccs	0x0062696c
    22d0:	00737973 	rsbseq	r7, r3, r3, ror r9
    22d4:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    22d8:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    22dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    22e0:	61000065 	tstvs	r0, r5, rrx
    22e4:	705f746c 	subsvc	r7, pc, ip, ror #8
    22e8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    22ec:	00632e66 	rsbeq	r2, r3, r6, ror #28
    22f0:	73000001 	movwvc	r0, #1
    22f4:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    22f8:	00682e66 	rsbeq	r2, r8, r6, ror #28
    22fc:	73000002 	movwvc	r0, #2
    2300:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2304:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2308:	73000002 	movwvc	r0, #2
    230c:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    2310:	00682e67 	rsbeq	r2, r8, r7, ror #28
    2314:	73000002 	movwvc	r0, #2
    2318:	6f696474 	svcvs	0x00696474
    231c:	0300682e 	movweq	r6, #2094	; 0x82e
    2320:	745f0000 	ldrbvc	r0, [pc], #-0	; 2328 <__core1_unwind_stub-0xffdcd8>
    2324:	73657079 	cmnvc	r5, #121	; 0x79
    2328:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    232c:	65720000 	ldrbvs	r0, [r2, #-0]!
    2330:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    2334:	00040068 	andeq	r0, r4, r8, rrx
    2338:	636f6c00 	cmnvs	pc, #0, 24
    233c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    2340:	61000004 	tstvs	r0, r4
    2344:	705f746c 	subsvc	r7, pc, ip, ror #8
    2348:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    234c:	00682e66 	rsbeq	r2, r8, r6, ror #28
    2350:	3c000005 	stccc	0, cr0, [r0], {5}
    2354:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2358:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    235c:	0000003e 	andeq	r0, r0, lr, lsr r0
    2360:	01050000 	mrseq	r0, (UNDEF: 5)
    2364:	00020500 	andeq	r0, r2, r0, lsl #10
    2368:	03000000 	movweq	r0, #0
    236c:	0c050130 	stfeqs	f0, [r5], {48}	; 0x30
    2370:	9f010583 	svcls	0x00010583
    2374:	01000602 	tsteq	r0, r2, lsl #12
    2378:	00010501 	andeq	r0, r1, r1, lsl #10
    237c:	00000205 	andeq	r0, r0, r5, lsl #4
    2380:	35030000 	strcc	r0, [r3, #-0]
    2384:	d71c0501 	ldrle	r0, [ip, -r1, lsl #10]
    2388:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    238c:	0d054c0b 	stceq	12, cr4, [r5, #-44]	; 0xffffffd4
    2390:	4a1e0530 	bmi	783858 <__core1_unwind_stub-0x87c7a8>
    2394:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    2398:	1a05830d 	bne	162fd4 <__core1_unwind_stub-0xe9d02c>
    239c:	66120563 	ldrvs	r0, [r2], -r3, ror #10
    23a0:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    23a4:	01055010 	tsteq	r5, r0, lsl r0
    23a8:	00060267 	andeq	r0, r6, r7, ror #4
    23ac:	01050101 	tsteq	r5, r1, lsl #2
    23b0:	00020500 	andeq	r0, r2, r0, lsl #10
    23b4:	03000000 	movweq	r0, #0
    23b8:	050100c9 	streq	r0, [r1, #-201]	; 0xffffff37
    23bc:	0e05bb1c 	vmoveq.32	d5[0], fp
    23c0:	4a1c054c 	bmi	7038f8 <__core1_unwind_stub-0x8fc708>
    23c4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    23c8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    23cc:	26054a01 	strcs	r4, [r5], -r1, lsl #20
    23d0:	01040200 	mrseq	r0, R12_usr
    23d4:	4c0d054a 	cfstr32mi	mvfx0, [sp], {74}	; 0x4a
    23d8:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
    23dc:	12054b0b 	andne	r4, r5, #11264	; 0x2c00
    23e0:	690e054a 	stmdbvs	lr, {r1, r3, r6, r8, sl}
    23e4:	054a1d05 	strbeq	r1, [sl, #-3333]	; 0xfffff2fb
    23e8:	2f054a08 	svccs	0x00054a08
    23ec:	01040200 	mrseq	r0, R12_usr
    23f0:	0027054a 	eoreq	r0, r7, sl, asr #10
    23f4:	4a010402 	bmi	43404 <__core1_unwind_stub-0xfbcbfc>
    23f8:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    23fc:	01054a15 	tsteq	r5, r5, lsl sl
    2400:	0008024c 	andeq	r0, r8, ip, asr #4
    2404:	01050101 	tsteq	r5, r1, lsl #2
    2408:	00020500 	andeq	r0, r2, r0, lsl #10
    240c:	03000000 	movweq	r0, #0
    2410:	050100d9 	streq	r0, [r1, #-217]	; 0xffffff27
    2414:	0f05bf05 	svceq	0x0005bf05
    2418:	4b19054c 	blmi	643950 <__core1_unwind_stub-0x9bc6b0>
    241c:	05821005 	streq	r1, [r2, #5]
    2420:	08052f17 	stmdaeq	r5, {r0, r1, r2, r4, r8, r9, sl, fp, sp}
    2424:	bd0c0568 	cfstr32lt	mvfx0, [ip, #-416]	; 0xfffffe60
    2428:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    242c:	0101000a 	tsteq	r1, sl
    2430:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2434:	00000002 	andeq	r0, r0, r2
    2438:	00eb0300 	rsceq	r0, fp, r0, lsl #6
    243c:	a3050501 	movwge	r0, #21761	; 0x5501
    2440:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    2444:	17054b10 	smladne	r5, r0, fp, r4
    2448:	6808054b 	stmdavs	r8, {r0, r1, r3, r6, r8, sl}
    244c:	05bd0c05 	ldreq	r0, [sp, #3077]!	; 0xc05
    2450:	0a022f01 	beq	8e05c <__core1_unwind_stub-0xf71fa4>
    2454:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2458:	02050001 	andeq	r0, r5, #1
    245c:	01003988 	smlabbeq	r0, r8, r9, r3
    2460:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    2464:	05860505 	streq	r0, [r6, #1285]	; 0x505
    2468:	0c054b08 			; <UNDEFINED> instruction: 0x0c054b08
    246c:	2f0105f5 	svccs	0x000105f5
    2470:	01000a02 	tsteq	r0, r2, lsl #20
    2474:	00010501 	andeq	r0, r1, r1, lsl #10
    2478:	00000205 	andeq	r0, r0, r5, lsl #4
    247c:	8c030000 	stchi	0, cr0, [r3], {-0}
    2480:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    2484:	4b0805a2 	blmi	203b14 <__core1_unwind_stub-0xdfc4ec>
    2488:	05a10c05 	streq	r0, [r1, #3077]!	; 0xc05
    248c:	0a022f01 	beq	8e098 <__core1_unwind_stub-0xf71f68>
    2490:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2494:	02050001 	andeq	r0, r5, #1
    2498:	010039d8 	ldrdeq	r3, [r0, -r8]
    249c:	01019f03 	tsteq	r1, r3, lsl #30
    24a0:	05d70805 	ldrbeq	r0, [r7, #2053]	; 0x805
    24a4:	0705680c 	streq	r6, [r5, -ip, lsl #16]
    24a8:	8408054a 	strhi	r0, [r8], #-1354	; 0xfffffab6
    24ac:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    24b0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    24b4:	06029f01 	streq	r9, [r2], -r1, lsl #30
    24b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    24bc:	02050001 	andeq	r0, r5, #1
    24c0:	01003a44 	tsteq	r0, r4, asr #20
    24c4:	0101ad03 	tsteq	r1, r3, lsl #26
    24c8:	05a11505 	streq	r1, [r1, #1285]!	; 0x505
    24cc:	08056613 	stmdaeq	r5, {r0, r1, r4, r9, sl, sp, lr}
    24d0:	4b0b054a 	blmi	2c3a00 <__core1_unwind_stub-0xd3c600>
    24d4:	05a00c05 	streq	r0, [r0, #3077]!	; 0xc05
    24d8:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    24dc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    24e0:	02050001 	andeq	r0, r5, #1
    24e4:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
    24e8:	0101be03 	tsteq	r1, r3, lsl #28
    24ec:	05d70805 	ldrbeq	r0, [r7, #2053]	; 0x805
    24f0:	0b05670a 	bleq	15c120 <__core1_unwind_stub-0xea3ee0>
    24f4:	4a100530 	bmi	4039bc <__core1_unwind_stub-0xbfc644>
    24f8:	059e1a05 	ldreq	r1, [lr, #2565]	; 0xa05
    24fc:	0a054a15 	beq	154d58 <__core1_unwind_stub-0xeab2a8>
    2500:	059b4b2e 	ldreq	r4, [fp, #2862]	; 0xb2e
    2504:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    2508:	0b056601 	bleq	15bd14 <__core1_unwind_stub-0xea42ec>
    250c:	2f01056c 	svccs	0x0001056c
    2510:	01000602 	tsteq	r0, r2, lsl #12
    2514:	00010501 	andeq	r0, r1, r1, lsl #10
    2518:	3b340205 	blcc	d02d34 <__core1_unwind_stub-0x2fd2cc>
    251c:	95030100 	strls	r0, [r3, #-256]	; 0xffffff00
    2520:	09050102 	stmdbeq	r5, {r1, r8}
    2524:	4a1205bb 	bmi	483c18 <__core1_unwind_stub-0xb7c3e8>
    2528:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
    252c:	0402000f 	streq	r0, [r2], #-15
    2530:	0b056601 	bleq	15bd3c <__core1_unwind_stub-0xea42c4>
    2534:	19058584 	stmdbne	r5, {r2, r7, r8, sl, pc}
    2538:	2e260530 	mcrcs	5, 1, r0, cr6, cr0, {1}
    253c:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    2540:	16052e0a 	strne	r2, [r5], -sl, lsl #28
    2544:	4a110566 	bmi	443ae4 <__core1_unwind_stub-0xbbc51c>
    2548:	052f0b05 	streq	r0, [pc, #-2821]!	; 1a4b <__core1_unwind_stub-0xffe5b5>
    254c:	0a052e18 	beq	14ddb4 <__core1_unwind_stub-0xeb224c>
    2550:	2f0c059e 	svccs	0x000c059e
    2554:	6c620b05 			; <UNDEFINED> instruction: 0x6c620b05
    2558:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    255c:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
    2560:	1d053003 	stcne	0, cr3, [r5, #-12]
    2564:	03040200 	movweq	r0, #16896	; 0x4200
    2568:	0011054a 	andseq	r0, r1, sl, asr #10
    256c:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2570:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    2574:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    2578:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
    257c:	0d056603 	stceq	6, cr6, [r5, #-12]
    2580:	03040200 	movweq	r0, #16896	; 0x4200
    2584:	001c052e 	andseq	r0, ip, lr, lsr #10
    2588:	2c030402 	cfstrscs	mvf0, [r3], {2}
    258c:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    2590:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2594:	04020005 	streq	r0, [r2], #-5
    2598:	08054a01 	stmdaeq	r5, {r0, r9, fp, lr}
    259c:	660b056a 	strvs	r0, [fp], -sl, ror #10
    25a0:	054c0f05 	strbeq	r0, [ip, #-3845]	; 0xfffff0fb
    25a4:	06024b01 	streq	r4, [r2], -r1, lsl #22
    25a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    25ac:	02050001 	andeq	r0, r5, #1
    25b0:	01003c70 	tsteq	r0, r0, ror ip
    25b4:	0102b703 	tsteq	r2, r3, lsl #14
    25b8:	05bb0905 	ldreq	r0, [fp, #2309]!	; 0x905
    25bc:	1a054a11 	bne	154e08 <__core1_unwind_stub-0xeab1f8>
    25c0:	4b09054a 	blmi	243af0 <__core1_unwind_stub-0xdbc510>
    25c4:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
    25c8:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    25cc:	08056601 	stmdaeq	r5, {r0, r9, sl, sp, lr}
    25d0:	680d054b 	stmdavs	sp, {r0, r1, r3, r6, r8, sl}
    25d4:	054c0b05 	strbeq	r0, [ip, #-2821]	; 0xfffff4fb
    25d8:	2f053025 	svccs	0x00053025
    25dc:	4a1b0566 	bmi	6c3b7c <__core1_unwind_stub-0x93c484>
    25e0:	05f21205 	ldrbeq	r1, [r2, #517]!	; 0x205
    25e4:	16052e11 			; <UNDEFINED> instruction: 0x16052e11
    25e8:	4a0a054b 	bmi	283b1c <__core1_unwind_stub-0xd7c4e4>
    25ec:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    25f0:	0a054a11 	beq	154e3c <__core1_unwind_stub-0xeab1c4>
    25f4:	682e052f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r8, sl}
    25f8:	059e0c05 	ldreq	r0, [lr, #3077]	; 0xc05
    25fc:	1405663a 	strne	r6, [r5], #-1594	; 0xfffff9c6
    2600:	300f054a 	andcc	r0, pc, sl, asr #10
    2604:	05820a05 	streq	r0, [r2, #2565]	; 0xa05
    2608:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    260c:	0e054a01 	vmlaeq.f32	s8, s10, s2
    2610:	67130568 	ldrvs	r0, [r3, -r8, ror #10]
    2614:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    2618:	6673030b 	ldrbtvs	r0, [r3], -fp, lsl #6
    261c:	0f030805 	svceq	0x00030805
    2620:	660f0582 	strvs	r0, [pc], -r2, lsl #11
    2624:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
    2628:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    262c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2630:	02050001 	andeq	r0, r5, #1
    2634:	01003de8 	smlatteq	r0, r8, sp, r3
    2638:	0102e203 	tsteq	r2, r3, lsl #4
    263c:	21081305 	tstcs	r8, r5, lsl #6
    2640:	054a1b05 	strbeq	r1, [sl, #-2821]	; 0xfffff4fb
    2644:	11054a26 	tstne	r5, r6, lsr #20
    2648:	4a19054b 	bmi	643b7c <__core1_unwind_stub-0x9bc484>
    264c:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    2650:	08054b0c 	stmdaeq	r5, {r2, r3, r8, r9, fp, lr}
    2654:	001a054c 	andseq	r0, sl, ip, asr #10
    2658:	66010402 	strvs	r0, [r1], -r2, lsl #8
    265c:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
    2660:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    2664:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
    2668:	56056603 	strpl	r6, [r5], -r3, lsl #12
    266c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2670:	006a0566 	rsbeq	r0, sl, r6, ror #10
    2674:	66050402 	strvs	r0, [r5], -r2, lsl #8
    2678:	05680a05 	strbeq	r0, [r8, #-2565]!	; 0xfffff5fb
    267c:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    2680:	0e056601 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx1
    2684:	4d0a0568 	cfstr32mi	mvfx0, [sl, #-416]	; 0xfffffe60
    2688:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    268c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2690:	0a05680c 	beq	15c6c8 <__core1_unwind_stub-0xea3938>
    2694:	17052208 	strne	r2, [r5, -r8, lsl #4]
    2698:	01040200 	mrseq	r0, R12_usr
    269c:	680d0566 	stmdavs	sp, {r1, r2, r5, r6, r8, sl}
    26a0:	05f20c05 	ldrbeq	r0, [r2, #3077]!	; 0xc05
    26a4:	1705300a 	strne	r3, [r5, -sl]
    26a8:	01040200 	mrseq	r0, R12_usr
    26ac:	68160566 	ldmdavs	r6, {r1, r2, r5, r6, r8, sl}
    26b0:	05ba0c05 	ldreq	r0, [sl, #3077]!	; 0xc05
    26b4:	1705680a 	strne	r6, [r5, -sl, lsl #16]
    26b8:	01040200 	mrseq	r0, R12_usr
    26bc:	68160566 	ldmdavs	r6, {r1, r2, r5, r6, r8, sl}
    26c0:	05ba0c05 	ldreq	r0, [sl, #3077]!	; 0xc05
    26c4:	1405690a 	strne	r6, [r5], #-2314	; 0xfffff6f6
    26c8:	01040200 	mrseq	r0, R12_usr
    26cc:	00270566 	eoreq	r0, r7, r6, ror #10
    26d0:	66020402 	strvs	r0, [r2], -r2, lsl #8
    26d4:	4b681005 	blmi	1a066f0 <__bss_end__+0x9ea6f0>
    26d8:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    26dc:	1e056a0c 	vmlane.f32	s12, s10, s24
    26e0:	01040200 	mrseq	r0, R12_usr
    26e4:	00320566 	eorseq	r0, r2, r6, ror #10
    26e8:	66020402 	strvs	r0, [r2], -r2, lsl #8
    26ec:	05681105 	strbeq	r1, [r8, #-261]!	; 0xfffffefb
    26f0:	1105f210 	tstne	r5, r0, lsl r2	; <UNPREDICTABLE>
    26f4:	a10a0532 	tstge	sl, r2, lsr r5
    26f8:	02001c05 	andeq	r1, r0, #1280	; 0x500
    26fc:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2700:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    2704:	0c056602 	stceq	6, cr6, [r5], {2}
    2708:	68130568 	ldmdavs	r3, {r3, r5, r6, r8, sl}
    270c:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
    2710:	0f054b10 	svceq	0x00054b10
    2714:	001c0586 	andseq	r0, ip, r6, lsl #11
    2718:	66010402 	strvs	r0, [r1], -r2, lsl #8
    271c:	05681505 	strbeq	r1, [r8, #-1285]!	; 0xfffffafb
    2720:	12054b16 	andne	r4, r5, #22528	; 0x5800
    2724:	690c054b 	stmdbvs	ip, {r0, r1, r3, r6, r8, sl}
    2728:	02001905 	andeq	r1, r0, #81920	; 0x14000
    272c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2730:	0c05680e 	stceq	8, cr6, [r5], {14}
    2734:	15053548 	strne	r3, [r5, #-1352]	; 0xfffffab8
    2738:	01040200 	mrseq	r0, R12_usr
    273c:	68130582 	ldmdavs	r3, {r1, r7, r8, sl}
    2740:	054b1005 	strbeq	r1, [fp, #-5]
    2744:	1e058411 	cfmvdlrne	mvd5, r8
    2748:	01040200 	mrseq	r0, R12_usr
    274c:	002a0566 	eoreq	r0, sl, r6, ror #10
    2750:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    2754:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
    2758:	11054b10 	tstne	r5, r0, lsl fp
    275c:	001e0584 	andseq	r0, lr, r4, lsl #11
    2760:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2764:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
    2768:	0c054b10 			; <UNDEFINED> instruction: 0x0c054b10
    276c:	00190569 	andseq	r0, r9, r9, ror #10
    2770:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2774:	05680e05 	strbeq	r0, [r8, #-3589]!	; 0xfffff1fb
    2778:	6667030c 	strbtvs	r0, [r7], -ip, lsl #6
    277c:	1d030a05 	vstrne	s0, [r3, #-20]	; 0xffffffec
    2780:	0c054b2e 			; <UNDEFINED> instruction: 0x0c054b2e
    2784:	4d0a0584 	cfstr32mi	mvfx0, [sl, #-528]	; 0xfffffdf0
    2788:	02001905 	andeq	r1, r0, #81920	; 0x14000
    278c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2790:	0a056809 	beq	15c7bc <__core1_unwind_stub-0xea3844>
    2794:	001a05a0 	andseq	r0, sl, r0, lsr #11
    2798:	66010402 	strvs	r0, [r1], -r2, lsl #8
    279c:	05680905 	strbeq	r0, [r8, #-2309]!	; 0xfffff6fb
    27a0:	0705a00d 	streq	sl, [r5, -sp]
    27a4:	0009054a 	andeq	r0, r9, sl, asr #10
    27a8:	30040402 	andcc	r0, r4, r2, lsl #8
    27ac:	02003805 	andeq	r3, r0, #327680	; 0x50000
    27b0:	059c0404 	ldreq	r0, [ip, #1028]	; 0x404
    27b4:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    27b8:	1e056601 	cfmadd32ne	mvax0, mvfx6, mvfx5, mvfx1
    27bc:	01040200 	mrseq	r0, R12_usr
    27c0:	00070566 	andeq	r0, r7, r6, ror #10
    27c4:	4a010402 	bmi	437d4 <__core1_unwind_stub-0xfbc82c>
    27c8:	02002705 	andeq	r2, r0, #1310720	; 0x140000
    27cc:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    27d0:	19056a0a 	stmdbne	r5, {r1, r3, r9, fp, sp, lr}
    27d4:	01040200 	mrseq	r0, R12_usr
    27d8:	68090566 	stmdavs	r9, {r1, r2, r5, r6, r8, sl}
    27dc:	05a00a05 	streq	r0, [r0, #2565]!	; 0xa05
    27e0:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    27e4:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    27e8:	a00d0568 	andge	r0, sp, r8, ror #10
    27ec:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    27f0:	04020009 	streq	r0, [r2], #-9
    27f4:	25053003 	strcs	r3, [r5, #-3]
    27f8:	03040200 	movweq	r0, #16896	; 0x4200
    27fc:	001c0580 	andseq	r0, ip, r0, lsl #11
    2800:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2804:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    2808:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    280c:	07056a0d 	streq	r6, [r5, -sp, lsl #20]
    2810:	0009054a 	andeq	r0, r9, sl, asr #10
    2814:	30030402 	andcc	r0, r3, r2, lsl #8
    2818:	02001905 	andeq	r1, r0, #81920	; 0x14000
    281c:	05f00304 	ldrbeq	r0, [r0, #772]!	; 0x304
    2820:	04020007 	streq	r0, [r2], #-7
    2824:	0d056601 	stceq	6, cr6, [r5, #-4]
    2828:	4a070586 	bmi	1c3e48 <__core1_unwind_stub-0xe3c1b8>
    282c:	02000905 	andeq	r0, r0, #81920	; 0x14000
    2830:	05300404 	ldreq	r0, [r0, #-1028]!	; 0xfffffbfc
    2834:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    2838:	1a058004 	bne	162850 <__core1_unwind_stub-0xe9d7b0>
    283c:	01040200 	mrseq	r0, R12_usr
    2840:	001e0566 	andseq	r0, lr, r6, ror #10
    2844:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2848:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    284c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2850:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    2854:	08056603 	stmdaeq	r5, {r0, r1, r9, sl, sp, lr}
    2858:	667f8703 	ldrbtvs	r8, [pc], -r3, lsl #14
    285c:	fe030d05 	vdot.bf16	d0, d3, d5[0]
    2860:	1f052e00 	svcne	0x00052e00
    2864:	01040200 	mrseq	r0, R12_usr
    2868:	680a0566 	stmdavs	sl, {r1, r2, r5, r6, r8, sl}
    286c:	05681105 	strbeq	r1, [r8, #-261]!	; 0xfffffefb
    2870:	054bba10 	strbeq	fp, [fp, #-2576]	; 0xfffff5f0
    2874:	0c054b0e 			; <UNDEFINED> instruction: 0x0c054b0e
    2878:	690f054b 	stmdbvs	pc, {r0, r1, r3, r6, r8, sl}	; <UNPREDICTABLE>
    287c:	05d70e05 	ldrbeq	r0, [r7, #3589]	; 0xe05
    2880:	10054b0f 	andne	r4, r5, pc, lsl #22
    2884:	64180530 	ldrvs	r0, [r8], #-1328	; 0xfffffad0
    2888:	05661005 	strbeq	r1, [r6, #-5]!
    288c:	0a052e0f 	beq	14e0d0 <__core1_unwind_stub-0xeb1f30>
    2890:	680c0550 	stmdavs	ip, {r4, r6, r8, sl}
    2894:	4b4d0a05 	blmi	13450b0 <__bss_end__+0x3290b0>
    2898:	02000f05 	andeq	r0, r0, #5, 30
    289c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    28a0:	0d05840c 	cfstrseq	mvf8, [r5, #-48]	; 0xffffffd0
    28a4:	4a07054d 	bmi	1c3de0 <__core1_unwind_stub-0xe3c220>
    28a8:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    28ac:	05300404 	ldreq	r0, [r0, #-1028]!	; 0xfffffbfc
    28b0:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    28b4:	1a059c04 	bne	1698cc <__core1_unwind_stub-0xe96734>
    28b8:	01040200 	mrseq	r0, R12_usr
    28bc:	001e0566 	andseq	r0, lr, r6, ror #10
    28c0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    28c4:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    28c8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    28cc:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    28d0:	0d056603 	stceq	6, cr6, [r5, #-12]
    28d4:	4a07056b 	bmi	1c3e88 <__core1_unwind_stub-0xe3c178>
    28d8:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
    28dc:	2605680b 	strcs	r6, [r5], -fp, lsl #16
    28e0:	0b052408 	bleq	14b908 <__core1_unwind_stub-0xeb46f8>
    28e4:	003a0566 	eorseq	r0, sl, r6, ror #10
    28e8:	03020402 	movweq	r0, #9218	; 0x2402
    28ec:	07059e78 	smlsdxeq	r5, r8, lr, r9
    28f0:	01040200 	mrseq	r0, R12_usr
    28f4:	001a0566 	andseq	r0, sl, r6, ror #10
    28f8:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
    28fc:	02002c05 	andeq	r2, r0, #1280	; 0x500
    2900:	05820404 	streq	r0, [r2, #1028]	; 0x404
    2904:	660c030d 	strvs	r0, [ip], -sp, lsl #6
    2908:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    290c:	04020009 	streq	r0, [r2], #-9
    2910:	38053004 	stmdacc	r5, {r2, ip, sp}
    2914:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2918:	001a0580 	andseq	r0, sl, r0, lsl #11
    291c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2920:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
    2924:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2928:	04020007 	streq	r0, [r2], #-7
    292c:	27054a01 	strcs	r4, [r5, -r1, lsl #20]
    2930:	03040200 	movweq	r0, #16896	; 0x4200
    2934:	030d0566 	movweq	r0, #54630	; 0xd566
    2938:	0f056652 	svceq	0x00056652
    293c:	052e3503 	streq	r3, [lr, #-1283]!	; 0xfffffafd
    2940:	7ecd0308 	cdpvc	3, 12, cr0, cr13, cr8, {0}
    2944:	030d054a 	movweq	r0, #54602	; 0xd54a
    2948:	054a00fe 	strbeq	r0, [sl, #-254]	; 0xffffff02
    294c:	2e38030c 	cdpcs	3, 3, cr0, cr8, cr12, {0}
    2950:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    2954:	022f0104 	eoreq	r0, pc, #4, 2
    2958:	01010006 	tsteq	r1, r6
    295c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2960:	00460402 	subeq	r0, r6, r2, lsl #8
    2964:	04a90301 	strteq	r0, [r9], #769	; 0x301
    2968:	bb1c0501 	bllt	703d74 <__core1_unwind_stub-0x8fc28c>
    296c:	4b4b0905 	blmi	12c4d88 <__bss_end__+0x2a8d88>
    2970:	05500d05 	ldrbeq	r0, [r0, #-3333]	; 0xfffff2fb
    2974:	0f05bc0b 	svceq	0x0005bc0b
    2978:	bb0e0568 	bllt	383f20 <__core1_unwind_stub-0xc7c0e0>
    297c:	9f680d05 	svcls	0x00680d05
    2980:	05310f05 	ldreq	r0, [r1, #-3845]!	; 0xfffff0fb
    2984:	18054b0e 	stmdane	r5, {r1, r2, r3, r8, r9, fp, lr}
    2988:	01040200 	mrseq	r0, R12_usr
    298c:	00240566 	eoreq	r0, r4, r6, ror #10
    2990:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2994:	02003005 	andeq	r3, r0, #5
    2998:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    299c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    29a0:	11056604 	tstne	r5, r4, lsl #12
    29a4:	10054b68 	andne	r4, r5, r8, ror #22
    29a8:	4b0e05bd 	blmi	3840a4 <__core1_unwind_stub-0xc7bf5c>
    29ac:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
    29b0:	11058212 	tstne	r5, r2, lsl r2
    29b4:	1405da2f 	strne	sp, [r5], #-2607	; 0xfffff5d1
    29b8:	4b0e05d9 	blmi	384124 <__core1_unwind_stub-0xc7bedc>
    29bc:	6810054b 	ldmdavs	r0, {r0, r1, r3, r6, r8, sl}
    29c0:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
    29c4:	1905bb10 	stmdbne	r5, {r4, r8, r9, fp, ip, sp, pc}
    29c8:	82180568 	andshi	r0, r8, #104, 10	; 0x1a000000
    29cc:	da2f1305 	ble	bc75e8 <__core1_unwind_stub-0x438a18>
    29d0:	4bdb1105 	blmi	ff6c6dec <__shm_end__+0xbf6c6dec>
    29d4:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
    29d8:	1105670f 	tstne	r5, pc, lsl #14
    29dc:	6c0f05b7 	cfstr32vs	mvfx0, [pc], {183}	; 0xb7
    29e0:	24020e05 	strcs	r0, [r2], #-3589	; 0xfffff1fb
    29e4:	4c140512 	cfldr32mi	mvfx0, [r4], {18}
    29e8:	054f0a05 	strbeq	r0, [pc, #-2565]	; 1feb <__core1_unwind_stub-0xffe015>
    29ec:	4003a10b 	andmi	sl, r3, fp, lsl #2
    29f0:	030a0566 	movweq	r0, #42342	; 0xa566
    29f4:	052e00c2 	streq	r0, [lr, #-194]!	; 0xffffff3e
    29f8:	0105320c 	tsteq	r5, ip, lsl #4
    29fc:	01040200 	mrseq	r0, R12_usr
    2a00:	0006022f 	andeq	r0, r6, pc, lsr #4
    2a04:	01d50101 	bicseq	r0, r5, r1, lsl #2
    2a08:	00030000 	andeq	r0, r3, r0
    2a0c:	00000136 	andeq	r0, r0, r6, lsr r1
    2a10:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2a14:	0101000d 	tsteq	r1, sp
    2a18:	00000101 	andeq	r0, r0, r1, lsl #2
    2a1c:	00000100 	andeq	r0, r0, r0, lsl #2
    2a20:	6c776801 	ldclvs	8, cr6, [r7], #-4
    2a24:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2a28:	752f6372 	strvc	r6, [pc, #-882]!	; 26be <__core1_unwind_stub-0xffd942>
    2a2c:	736c6974 	cmnvc	ip, #116, 18	; 0x1d0000
    2a30:	73752f00 	cmnvc	r5, #0, 30
    2a34:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    2a38:	63672f62 	cmnvs	r7, #392	; 0x188
    2a3c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    2a40:	6f6e2d6d 	svcvs	0x006e2d6d
    2a44:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    2a48:	2f696261 	svccs	0x00696261
    2a4c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    2a50:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    2a54:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2a58:	77680065 	strbvc	r0, [r8, -r5, rrx]!
    2a5c:	2f62696c 	svccs	0x0062696c
    2a60:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2a64:	00656475 	rsbeq	r6, r5, r5, ror r4
    2a68:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    2a6c:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    2a70:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2a74:	6f732f65 	svcvs	0x00732f65
    2a78:	31615f63 	cmncc	r1, r3, ror #30
    2a7c:	752f0030 	strvc	r0, [pc, #-48]!	; 2a54 <__core1_unwind_stub-0xffd5ac>
    2a80:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2a84:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2a88:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2a8c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2a90:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2a94:	752f0073 	strvc	r0, [pc, #-115]!	; 2a29 <__core1_unwind_stub-0xffd5d7>
    2a98:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2a9c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2aa0:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2aa4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2aa8:	61000062 	tstvs	r0, r2, rrx
    2aac:	705f746c 	subsvc	r7, pc, ip, ror #8
    2ab0:	72617532 	rsbvc	r7, r1, #209715200	; 0xc800000
    2ab4:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2ab8:	73000001 	movwvc	r0, #1
    2abc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2ac0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2ac4:	68000002 	stmdavs	r0, {r1}
    2ac8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2acc:	0300682e 	movweq	r6, #2094	; 0x82e
    2ad0:	6c610000 	stclvs	0, cr0, [r1], #-0
    2ad4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    2ad8:	5f6b636f 	svcpl	0x006b636f
    2adc:	616e616d 	cmnvs	lr, sp, ror #2
    2ae0:	2e726567 	cdpcs	5, 7, cr6, cr2, cr7, {3}
    2ae4:	00040068 	andeq	r0, r4, r8, rrx
    2ae8:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2aec:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    2af0:	755f3035 	ldrbvc	r3, [pc, #-53]	; 2ac3 <__core1_unwind_stub-0xffd53d>
    2af4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    2af8:	00030068 	andeq	r0, r3, r8, rrx
    2afc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2b00:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    2b04:	00020068 	andeq	r0, r2, r8, rrx
    2b08:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    2b0c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2b10:	00050068 	andeq	r0, r5, r8, rrx
    2b14:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    2b18:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2b1c:	00000500 	andeq	r0, r0, r0, lsl #10
    2b20:	6b636f6c 	blvs	18de8d8 <__bss_end__+0x8c28d8>
    2b24:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    2b28:	74730000 	ldrbtvc	r0, [r3], #-0
    2b2c:	2e6f6964 	vnmulcs.f16	s13, s30, s9	; <UNPREDICTABLE>
    2b30:	00060068 	andeq	r0, r6, r8, rrx
    2b34:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2b38:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2b3c:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    2b40:	00030068 	andeq	r0, r3, r8, rrx
    2b44:	01050000 	mrseq	r0, (UNDEF: 5)
    2b48:	b8020500 	stmdalt	r2, {r8, sl}
    2b4c:	03010048 	movweq	r0, #4168	; 0x1048
    2b50:	1005013c 	andne	r0, r5, ip, lsr r1
    2b54:	4c1105bb 	cfldr32mi	mvfx0, [r1], {187}	; 0xbb
    2b58:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    2b5c:	05054c1a 	streq	r4, [r5, #-3098]	; 0xfffff3e6
    2b60:	4d0c0567 	cfstr32mi	mvfx0, [ip, #-412]	; 0xfffffe64
    2b64:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2b68:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    2b6c:	03054a01 	movweq	r4, #23041	; 0x5a01
    2b70:	bc010567 	cfstr32lt	mvfx0, [r1], {103}	; 0x67
    2b74:	01000602 	tsteq	r0, r2, lsl #12
    2b78:	00010501 	andeq	r0, r1, r1, lsl #10
    2b7c:	49380205 	ldmdbmi	r8!, {r0, r2, r9}
    2b80:	cb030100 	blgt	c2f88 <__core1_unwind_stub-0xf3d078>
    2b84:	0e050100 	adfeqs	f0, f5, f0
    2b88:	08054d83 	stmdaeq	r5, {r0, r1, r7, r8, sl, fp, lr}
    2b8c:	681205f7 	ldmdavs	r2, {r0, r1, r2, r4, r5, r6, r7, r8, sl}
    2b90:	05d90805 	ldrbeq	r0, [r9, #2053]	; 0x805
    2b94:	08056812 	stmdaeq	r5, {r1, r4, fp, sp, lr}
    2b98:	681205dc 	ldmdavs	r2, {r2, r3, r4, r6, r7, r8, sl}
    2b9c:	05a10805 	streq	r0, [r1, #2053]!	; 0x805
    2ba0:	0c056812 	stceq	8, cr6, [r5], {18}
    2ba4:	2f0105a0 	svccs	0x000105a0
    2ba8:	01000602 	tsteq	r0, r2, lsl #12
    2bac:	00010501 	andeq	r0, r1, r1, lsl #10
    2bb0:	00000205 	andeq	r0, r0, r5, lsl #4
    2bb4:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    2bb8:	12050100 	andne	r0, r5, #0, 2
    2bbc:	4d050583 	cfstr32mi	mvfx0, [r5, #-524]	; 0xfffffdf4
    2bc0:	02000905 	andeq	r0, r0, #81920	; 0x14000
    2bc4:	056c0104 	strbeq	r0, [ip, #-260]!	; 0xfffffefc
    2bc8:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    2bcc:	0505bb01 	streq	fp, [r5, #-2817]	; 0xfffff4ff
    2bd0:	01040200 	mrseq	r0, R12_usr
    2bd4:	01054c4a 	tsteq	r5, sl, asr #24
    2bd8:	06022408 	streq	r2, [r2], -r8, lsl #8
    2bdc:	b6010100 	strlt	r0, [r1], -r0, lsl #2
    2be0:	03000001 	movweq	r0, #1
    2be4:	00010800 	andeq	r0, r1, r0, lsl #16
    2be8:	fb010200 	blx	433f2 <__core1_unwind_stub-0xfbcc0e>
    2bec:	01000d0e 	tsteq	r0, lr, lsl #26
    2bf0:	00010101 	andeq	r0, r1, r1, lsl #2
    2bf4:	00010000 	andeq	r0, r1, r0
    2bf8:	72730100 	rsbsvc	r0, r3, #0, 2
    2bfc:	6f632f63 	svcvs	0x00632f63
    2c00:	00316572 	eorseq	r6, r1, r2, ror r5
    2c04:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2c08:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2c0c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2c10:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2c14:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2c18:	61652d65 	cmnvs	r5, r5, ror #26
    2c1c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    2c20:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    2c24:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2c28:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    2c2c:	73752f00 	cmnvc	r5, #0, 30
    2c30:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2c34:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2c38:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    2c3c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2c40:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    2c44:	73752f00 	cmnvc	r5, #0, 30
    2c48:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2c4c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2c50:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    2c54:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2c58:	6c776800 	ldclvs	8, cr6, [r7], #-0
    2c5c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    2c60:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2c64:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
    2c68:	0000636e 	andeq	r6, r0, lr, ror #6
    2c6c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2c70:	616d5f31 	cmnvs	sp, r1, lsr pc
    2c74:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    2c78:	00000100 	andeq	r0, r0, r0, lsl #2
    2c7c:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    2c80:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    2c84:	00000200 	andeq	r0, r0, r0, lsl #4
    2c88:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2c8c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2c90:	00000300 	andeq	r0, r0, r0, lsl #6
    2c94:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2c98:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2c9c:	6c000003 	stcvs	0, cr0, [r0], {3}
    2ca0:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    2ca4:	00030068 	andeq	r0, r3, r8, rrx
    2ca8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2cac:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2cb0:	00020068 	andeq	r0, r2, r8, rrx
    2cb4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2cb8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    2cbc:	00000400 	andeq	r0, r0, r0, lsl #8
    2cc0:	5f746c61 	svcpl	0x00746c61
    2cc4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    2cc8:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
    2ccc:	00000500 	andeq	r0, r0, r0, lsl #10
    2cd0:	5f616d64 	svcpl	0x00616d64
    2cd4:	6f79616c 	svcvs	0x0079616c
    2cd8:	682e7475 	stmdavs	lr!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
    2cdc:	00000600 	andeq	r0, r0, r0, lsl #12
    2ce0:	72616873 	rsbvc	r6, r1, #7536640	; 0x730000
    2ce4:	695f6465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    2ce8:	682e6370 	stmdavs	lr!, {r4, r5, r6, r8, r9, sp, lr}
    2cec:	00000600 	andeq	r0, r0, r0, lsl #12
    2cf0:	00010500 	andeq	r0, r1, r0, lsl #10
    2cf4:	4a100205 	bmi	403510 <__core1_unwind_stub-0xbfcaf0>
    2cf8:	1c030100 	stfnes	f0, [r3], {-0}
    2cfc:	69130501 	ldmdbvs	r3, {r0, r8, sl}
    2d00:	05660505 	strbeq	r0, [r6, #-1285]!	; 0xfffffafb
    2d04:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    2d08:	39052e03 	stmdbcc	r5, {r0, r1, r9, sl, fp, sp}
    2d0c:	03040200 	movweq	r0, #16896	; 0x4200
    2d10:	00050566 	andeq	r0, r5, r6, ror #10
    2d14:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2d18:	029f0105 	addseq	r0, pc, #1073741825	; 0x40000001
    2d1c:	0101000a 	tsteq	r1, sl
    2d20:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    2d24:	004a6c02 	subeq	r6, sl, r2, lsl #24
    2d28:	01230301 			; <UNDEFINED> instruction: 0x01230301
    2d2c:	4b830505 	blmi	fe0c4148 <__shm_end__+0xbe0c4148>
    2d30:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    2d34:	01010008 	tsteq	r1, r8
    2d38:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2d3c:	004a9802 	subeq	r9, sl, r2, lsl #16
    2d40:	012a0301 			; <UNDEFINED> instruction: 0x012a0301
    2d44:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
    2d48:	0b056705 	bleq	15c964 <__core1_unwind_stub-0xea369c>
    2d4c:	14053531 	strne	r3, [r5], #-1329	; 0xfffffacf
    2d50:	01040200 	mrseq	r0, R12_usr
    2d54:	000b052e 	andeq	r0, fp, lr, lsr #10
    2d58:	4a010402 	bmi	43d68 <__core1_unwind_stub-0xfbc298>
    2d5c:	00140583 	andseq	r0, r4, r3, lsl #11
    2d60:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    2d64:	02000b05 	andeq	r0, r0, #5120	; 0x1400
    2d68:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2d6c:	0d054d05 	stceq	13, cr4, [r5, #-20]	; 0xffffffec
    2d70:	2e1b0583 	cdpcs	5, 1, cr0, cr11, cr3, {4}
    2d74:	91080505 	tstls	r8, r5, lsl #10
    2d78:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
    2d7c:	05320104 	ldreq	r0, [r2, #-260]!	; 0xfffffefc
    2d80:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    2d84:	09054a01 	stmdbeq	r5, {r0, r9, fp, lr}
    2d88:	01040200 	mrseq	r0, R12_usr
    2d8c:	001d054b 	andseq	r0, sp, fp, asr #10
    2d90:	2d010402 	cfstrscs	mvf0, [r1, #-8]
    2d94:	01000202 	tsteq	r0, r2, lsl #4
    2d98:	00007f01 	andeq	r7, r0, r1, lsl #30
    2d9c:	30000300 	andcc	r0, r0, r0, lsl #6
    2da0:	02000000 	andeq	r0, r0, #0
    2da4:	0d0efb01 	vstreq	d15, [lr, #-4]
    2da8:	01010100 	mrseq	r0, (UNDEF: 17)
    2dac:	00000001 	andeq	r0, r0, r1
    2db0:	01000001 	tsteq	r0, r1
    2db4:	2f637273 	svccs	0x00637273
    2db8:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2dbc:	63000031 	movwvs	r0, #49	; 0x31
    2dc0:	3165726f 	cmncc	r5, pc, ror #4
    2dc4:	6174735f 	cmnvs	r4, pc, asr r3
    2dc8:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2dcc:	0100632e 	tsteq	r0, lr, lsr #6
    2dd0:	05000000 	streq	r0, [r0, #-0]
    2dd4:	02050001 	andeq	r0, r5, #1
    2dd8:	01004b48 	tsteq	r0, r8, asr #22
    2ddc:	6919051a 	ldmdbvs	r9, {r1, r3, r4, r8, sl}
    2de0:	05660505 	strbeq	r0, [r6, #-1285]!	; 0xfffffafb
    2de4:	0402000c 	streq	r0, [r2], #-12
    2de8:	3f052f03 	svccc	0x00052f03
    2dec:	03040200 	movweq	r0, #16896	; 0x4200
    2df0:	00050565 	andeq	r0, r5, r5, ror #10
    2df4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2df8:	009e0a03 	addseq	r0, lr, r3, lsl #20
    2dfc:	30010402 	andcc	r0, r1, r2, lsl #8
    2e00:	01000202 	tsteq	r0, r2, lsl #4
    2e04:	00010501 	andeq	r0, r1, r1, lsl #10
    2e08:	4b980205 	blmi	fe603624 <__shm_end__+0xbe603624>
    2e0c:	1c030100 	stfnes	f0, [r3], {-0}
    2e10:	14050501 	strne	r0, [r5], #-1281	; 0xfffffaff
    2e14:	024e0105 	subeq	r0, lr, #1073741825	; 0x40000001
    2e18:	01010004 	tsteq	r1, r4
    2e1c:	00000191 	muleq	r0, r1, r1
    2e20:	006c0003 	rsbeq	r0, ip, r3
    2e24:	01020000 	mrseq	r0, (UNDEF: 2)
    2e28:	000d0efb 	strdeq	r0, [sp], -fp
    2e2c:	01010101 	tsteq	r1, r1, lsl #2
    2e30:	01000000 	mrseq	r0, (UNDEF: 0)
    2e34:	73010000 	movwvc	r0, #4096	; 0x1000
    2e38:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    2e3c:	3165726f 	cmncc	r5, pc, ror #4
    2e40:	73752f00 	cmnvc	r5, #0, 30
    2e44:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    2e48:	63672f62 	cmnvs	r7, #392	; 0x188
    2e4c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    2e50:	6f6e2d6d 	svcvs	0x006e2d6d
    2e54:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    2e58:	2f696261 	svccs	0x00696261
    2e5c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    2e60:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    2e64:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2e68:	6c000065 	stcvs	0, cr0, [r0], {101}	; 0x65
    2e6c:	5f636269 	svcpl	0x00636269
    2e70:	2e6e696d 	vnmulcs.f16	s13, s28, s27	; <UNPREDICTABLE>
    2e74:	00010063 	andeq	r0, r1, r3, rrx
    2e78:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2e7c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    2e80:	00020068 	andeq	r0, r2, r8, rrx
    2e84:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2e88:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2e8c:	00020068 	andeq	r0, r2, r8, rrx
    2e90:	01050000 	mrseq	r0, (UNDEF: 5)
    2e94:	a8020500 	stmdage	r2, {r8, sl}
    2e98:	1701004b 	strne	r0, [r1, -fp, asr #32]
    2e9c:	05bb0e05 	ldreq	r0, [fp, #3589]!	; 0xe05
    2ea0:	05054b11 	streq	r4, [r5, #-2833]	; 0xfffff4ef
    2ea4:	0025054a 	eoreq	r0, r5, sl, asr #10
    2ea8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2eac:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    2eb0:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    2eb4:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    2eb8:	1f054a03 	svcne	0x00054a03
    2ebc:	03040200 	movweq	r0, #16896	; 0x4200
    2ec0:	0005052e 	andeq	r0, r5, lr, lsr #10
    2ec4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2ec8:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
    2ecc:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    2ed0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2ed4:	02050001 	andeq	r0, r5, #1
    2ed8:	01004c1c 	tsteq	r0, ip, lsl ip
    2edc:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    2ee0:	1405bb0e 	strne	fp, [r5], #-2830	; 0xfffff4f2
    2ee4:	4b11054b 	blmi	444418 <__core1_unwind_stub-0xbbbbe8>
    2ee8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    2eec:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    2ef0:	25052e03 	strcs	r2, [r5, #-3587]	; 0xfffff1fd
    2ef4:	03040200 	movweq	r0, #16896	; 0x4200
    2ef8:	002c0566 	eoreq	r0, ip, r6, ror #10
    2efc:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2f00:	02002905 	andeq	r2, r0, #81920	; 0x14000
    2f04:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    2f08:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    2f0c:	05052e03 	streq	r2, [r5, #-3587]	; 0xfffff1fd
    2f10:	01040200 	mrseq	r0, R12_usr
    2f14:	830c0566 	movwhi	r0, #50534	; 0xc566
    2f18:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    2f1c:	01010008 	tsteq	r1, r8
    2f20:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    2f24:	00000002 	andeq	r0, r0, r2
    2f28:	01140300 	tsteq	r4, r0, lsl #6
    2f2c:	05bb0e05 	ldreq	r0, [fp, #3589]!	; 0xe05
    2f30:	08054b14 	stmdaeq	r5, {r2, r4, r8, r9, fp, lr}
    2f34:	0010054b 	andseq	r0, r0, fp, asr #10
    2f38:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    2f3c:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
    2f40:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    2f44:	15054b08 	strne	r4, [r5, #-2824]	; 0xfffff4f8
    2f48:	4a090583 	bmi	24455c <__core1_unwind_stub-0xdbbaa4>
    2f4c:	02003005 	andeq	r3, r0, #5
    2f50:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    2f54:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    2f58:	30056603 	andcc	r6, r5, r3, lsl #12
    2f5c:	03040200 	movweq	r0, #16896	; 0x4200
    2f60:	002d0566 	eoreq	r0, sp, r6, ror #10
    2f64:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2f68:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
    2f6c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    2f70:	04020009 	streq	r0, [r2], #-9
    2f74:	15056601 	strne	r6, [r5, #-1537]	; 0xfffff9ff
    2f78:	4a0905a0 	bmi	244600 <__core1_unwind_stub-0xdbba00>
    2f7c:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
    2f80:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    2f84:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    2f88:	32058203 	andcc	r8, r5, #805306368	; 0x30000000
    2f8c:	03040200 	movweq	r0, #16896	; 0x4200
    2f90:	002f0582 	eoreq	r0, pc, r2, lsl #11
    2f94:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    2f98:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
    2f9c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    2fa0:	04020009 	streq	r0, [r2], #-9
    2fa4:	0c056601 	stceq	6, cr6, [r5], {1}
    2fa8:	2f010568 	svccs	0x00010568
    2fac:	01000802 	tsteq	r0, r2, lsl #16
    2fb0:	00004801 	andeq	r4, r0, r1, lsl #16
    2fb4:	33000300 	movwcc	r0, #768	; 0x300
    2fb8:	02000000 	andeq	r0, r0, #0
    2fbc:	0d0efb01 	vstreq	d15, [lr, #-4]
    2fc0:	01010100 	mrseq	r0, (UNDEF: 17)
    2fc4:	00000001 	andeq	r0, r0, r1
    2fc8:	01000001 	tsteq	r0, r1
    2fcc:	2f637273 	svccs	0x00637273
    2fd0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2fd4:	63000031 	movwvs	r0, #49	; 0x31
    2fd8:	3165726f 	cmncc	r5, pc, ror #4
    2fdc:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    2fe0:	735f7864 	cmpvc	pc, #100, 16	; 0x640000
    2fe4:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    2fe8:	00010053 	andeq	r0, r1, r3, asr r0
    2fec:	05000000 	streq	r0, [r0, #-0]
    2ff0:	00000002 	andeq	r0, r0, r2
    2ff4:	01150301 	tsteq	r5, r1, lsl #6
    2ff8:	01000202 	tsteq	r0, r2, lsl #4
    2ffc:	00058901 	andeq	r8, r5, r1, lsl #18
    3000:	29000300 	stmdbcs	r0, {r8, r9}
    3004:	02000001 	andeq	r0, r0, #1
    3008:	0d0efb01 	vstreq	d15, [lr, #-4]
    300c:	01010100 	mrseq	r0, (UNDEF: 17)
    3010:	00000001 	andeq	r0, r0, r1
    3014:	01000001 	tsteq	r0, r1
    3018:	00637273 	rsbeq	r7, r3, r3, ror r2
    301c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3020:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3024:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3028:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    302c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3030:	61652d65 	cmnvs	r5, r5, ror #26
    3034:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3038:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    303c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3040:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3044:	6c776800 	ldclvs	8, cr6, [r7], #-0
    3048:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    304c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3050:	68006564 	stmdavs	r0, {r2, r5, r6, r8, sl, sp, lr}
    3054:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3058:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    305c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3060:	636f732f 	cmnvs	pc, #-1140850688	; 0xbc000000
    3064:	3031615f 	eorscc	r6, r1, pc, asr r1
    3068:	73752f00 	cmnvc	r5, #0, 30
    306c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3070:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3074:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3078:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    307c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    3080:	73752f00 	cmnvc	r5, #0, 30
    3084:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3088:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    308c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3090:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3094:	72610000 	rsbvc	r0, r1, #0
    3098:	656d5f6d 	strbvs	r5, [sp, #-3949]!	; 0xfffff093
    309c:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    30a0:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
    30a4:	00632e73 	rsbeq	r2, r3, r3, ror lr
    30a8:	73000001 	movwvc	r0, #1
    30ac:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    30b0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    30b4:	73000002 	movwvc	r0, #2
    30b8:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    30bc:	00682e66 	rsbeq	r2, r8, r6, ror #28
    30c0:	68000002 	stmdavs	r0, {r1}
    30c4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    30c8:	0300682e 	movweq	r6, #2094	; 0x82e
    30cc:	6c610000 	stclvs	0, cr0, [r1], #-0
    30d0:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    30d4:	00682e75 	rsbeq	r2, r8, r5, ror lr
    30d8:	61000003 	tstvs	r0, r3
    30dc:	625f746c 	subsvs	r7, pc, #108, 8	; 0x6c000000
    30e0:	67646972 			; <UNDEFINED> instruction: 0x67646972
    30e4:	616d5f65 	cmnvs	sp, r5, ror #30
    30e8:	6567616e 	strbvs	r6, [r7, #-366]!	; 0xfffffe92
    30ec:	00682e72 	rsbeq	r2, r8, r2, ror lr
    30f0:	5f000004 	svcpl	0x00000004
    30f4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    30f8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    30fc:	72000005 	andvc	r0, r0, #5
    3100:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    3104:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3108:	6f6c0000 	svcvs	0x006c0000
    310c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    3110:	00000500 	andeq	r0, r0, r0, lsl #10
    3114:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3118:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    311c:	61000006 	tstvs	r0, r6
    3120:	705f746c 	subsvc	r7, pc, ip, ror #8
    3124:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    3128:	00682e66 	rsbeq	r2, r8, r6, ror #28
    312c:	00000003 	andeq	r0, r0, r3
    3130:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
    3134:	004ca002 	subeq	sl, ip, r2
    3138:	01190301 	tsteq	r9, r1, lsl #6
    313c:	054a1f05 	strbeq	r1, [sl, #-3845]	; 0xfffff0fb
    3140:	08022e01 	stmdaeq	r2, {r0, r9, sl, fp, sp}
    3144:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3148:	0205001d 	andeq	r0, r5, #29
    314c:	01004cbc 			; <UNDEFINED> instruction: 0x01004cbc
    3150:	05011a03 	streq	r1, [r1, #-2563]	; 0xfffff5fd
    3154:	01054a1f 	tsteq	r5, pc, lsl sl
    3158:	0008022e 	andeq	r0, r8, lr, lsr #4
    315c:	01050101 	tsteq	r5, r1, lsl #2
    3160:	d8020500 	stmdale	r2, {r8, sl}
    3164:	0301004c 	movweq	r0, #4172	; 0x104c
    3168:	0505011f 	streq	r0, [r5, #-287]	; 0xfffffee1
    316c:	4d0b0569 	cfstr32mi	mvfx0, [fp, #-420]	; 0xfffffe5c
    3170:	4b830505 	blmi	fe0c458c <__shm_end__+0xbe0c458c>
    3174:	01054b4d 	tsteq	r5, sp, asr #22
    3178:	0008024b 	andeq	r0, r8, fp, asr #4
    317c:	01050101 	tsteq	r5, r1, lsl #2
    3180:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    3184:	0301004d 	movweq	r0, #4173	; 0x104d
    3188:	05050130 	streq	r0, [r5, #-304]	; 0xfffffed0
    318c:	4b0b0568 	blmi	2c4734 <__core1_unwind_stub-0xd3b8cc>
    3190:	4b670505 	blmi	19c45ac <__bss_end__+0x9a85ac>
    3194:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    3198:	2e0d0305 	cdpcs	3, 0, cr0, cr13, cr5, {0}
    319c:	054b1005 	strbeq	r1, [fp, #-5]
    31a0:	19054a08 	stmdbne	r5, {r3, r9, fp, lr}
    31a4:	6712054b 	ldrvs	r0, [r2, -fp, asr #10]
    31a8:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    31ac:	09056713 	stmdbeq	r5, {r0, r1, r4, r8, r9, sl, sp, lr}
    31b0:	2e100567 	cfmsc32cs	mvfx0, mvfx0, mvfx7
    31b4:	02300105 	eorseq	r0, r0, #1073741825	; 0x40000001
    31b8:	01010006 	tsteq	r1, r6
    31bc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    31c0:	004db802 	subeq	fp, sp, r2, lsl #16
    31c4:	00de0301 	sbcseq	r0, lr, r1, lsl #6
    31c8:	9f110501 	svcls	0x00110501
    31cc:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    31d0:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
    31d4:	34056601 	strcc	r6, [r5], #-1537	; 0xfffff9ff
    31d8:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    31dc:	00660601 	rsbeq	r0, r6, r1, lsl #12
    31e0:	4a020402 	bmi	841f0 <__core1_unwind_stub-0xf7be10>
    31e4:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
    31e8:	2e060404 	cdpcs	4, 0, cr0, cr6, cr4, {0}
    31ec:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    31f0:	052f0404 	streq	r0, [pc, #-1028]!	; 2df4 <__core1_unwind_stub-0xffd20c>
    31f4:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    31f8:	2f054a04 	svccs	0x00054a04
    31fc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3200:	000c0566 	andeq	r0, ip, r6, ror #10
    3204:	4a040402 	bmi	104214 <__core1_unwind_stub-0xefbdec>
    3208:	02000d05 	andeq	r0, r0, #320	; 0x140
    320c:	054c0404 	strbeq	r0, [ip, #-1028]	; 0xfffffbfc
    3210:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    3214:	08056604 	stmdaeq	r5, {r2, r9, sl, sp, lr}
    3218:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    321c:	0029054a 	eoreq	r0, r9, sl, asr #10
    3220:	4a010402 	bmi	44230 <__core1_unwind_stub-0xfbbdd0>
    3224:	054c1505 	strbeq	r1, [ip, #-1285]	; 0xfffffafb
    3228:	15054a0b 	strne	r4, [r5, #-2571]	; 0xfffff5f5
    322c:	660f0567 	strvs	r0, [pc], -r7, ror #10
    3230:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    3234:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    3238:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    323c:	02050001 	andeq	r0, r5, #1
    3240:	01004e88 	smlabbeq	r0, r8, lr, r4
    3244:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
    3248:	05831905 	streq	r1, [r3, #2309]	; 0x905
    324c:	24054b08 	strcs	r4, [r5], #-2824	; 0xfffff4f8
    3250:	01040200 	mrseq	r0, R12_usr
    3254:	4c140566 	cfldr32mi	mvfx0, [r4], {102}	; 0x66
    3258:	05841a05 	streq	r1, [r4, #2565]	; 0xa05
    325c:	d631030c 	ldrtle	r0, [r1], -ip, lsl #6
    3260:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    3264:	2e059f08 	cdpcs	15, 0, cr9, cr5, cr8, {0}
    3268:	01040200 	mrseq	r0, R12_usr
    326c:	4c0f0566 	cfstr32mi	mvfx0, [pc], {102}	; 0x66
    3270:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    3274:	053f0808 	ldreq	r0, [pc, #-2056]!	; 2a74 <__core1_unwind_stub-0xffd58c>
    3278:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    327c:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    3280:	8308054c 	movwhi	r0, #34124	; 0x854c
    3284:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    3288:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    328c:	1b054c08 	blne	1562b4 <__core1_unwind_stub-0xea9d4c>
    3290:	01040200 	mrseq	r0, R12_usr
    3294:	670c0566 	strvs	r0, [ip, -r6, ror #10]
    3298:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    329c:	022f0104 	eoreq	r0, pc, #4, 2
    32a0:	01010006 	tsteq	r1, r6
    32a4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    32a8:	00000002 	andeq	r0, r0, r2
    32ac:	01bb0300 			; <UNDEFINED> instruction: 0x01bb0300
    32b0:	6a060501 	bvs	1846bc <__core1_unwind_stub-0xe7b944>
    32b4:	05326731 	ldreq	r6, [r2, #-1841]!	; 0xfffff8cf
    32b8:	06054b0c 	streq	r4, [r5], -ip, lsl #22
    32bc:	0d054b83 	vstreq	d4, [r5, #-524]	; 0xfffffdf4
    32c0:	2f01054d 	svccs	0x0001054d
    32c4:	01000802 	tsteq	r0, r2, lsl #16
    32c8:	00010501 	andeq	r0, r1, r1, lsl #10
    32cc:	4fa00205 	svcmi	0x00a00205
    32d0:	d2030100 	andle	r0, r3, #0, 2
    32d4:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    32d8:	0f052f67 	svceq	0x00052f67
    32dc:	4c070530 	cfstr32mi	mvfx0, [r7], {48}	; 0x30
    32e0:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    32e4:	06022f01 	streq	r2, [r2], -r1, lsl #30
    32e8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    32ec:	02050001 	andeq	r0, r5, #1
    32f0:	00000000 	andeq	r0, r0, r0
    32f4:	0101e203 	tsteq	r1, r3, lsl #4
    32f8:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    32fc:	054b4b05 	strbeq	r4, [fp, #-2821]	; 0xfffff4fb
    3300:	01052e0c 	tsteq	r5, ip, lsl #28
    3304:	0006022f 	andeq	r0, r6, pc, lsr #4
    3308:	01050101 	tsteq	r5, r1, lsl #2
    330c:	00020500 	andeq	r0, r2, r0, lsl #10
    3310:	03000000 	movweq	r0, #0
    3314:	050101ea 	streq	r0, [r1, #-490]	; 0xfffffe16
    3318:	05056a0e 	streq	r6, [r5, #-2574]	; 0xfffff5f2
    331c:	05314b4b 	ldreq	r4, [r1, #-2891]!	; 0xfffff4b5
    3320:	10054d1b 	andne	r4, r5, fp, lsl sp
    3324:	4b1b054a 	blmi	6c4854 <__core1_unwind_stub-0x93b7ac>
    3328:	054a1005 	strbeq	r1, [sl, #-5]
    332c:	10054b1b 	andne	r4, r5, fp, lsl fp
    3330:	4c0e054a 	cfstr32mi	mvfx0, [lr], {74}	; 0x4a
    3334:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
    3338:	2e054b20 	vmlacs.f64	d4, d5, d16
    333c:	6616054a 	ldrvs	r0, [r6], -sl, asr #10
    3340:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    3344:	1f054b10 	svcne	0x00054b10
    3348:	66230563 	strtvs	r0, [r3], -r3, ror #10
    334c:	05310d05 	ldreq	r0, [r1, #-3333]!	; 0xfffff2fb
    3350:	1b05300c 	blne	14f388 <__core1_unwind_stub-0xeb0c78>
    3354:	05667a03 	strbeq	r7, [r6, #-2563]!	; 0xfffff5fd
    3358:	09056712 	stmdbeq	r5, {r1, r4, r8, r9, sl, sp, lr}
    335c:	30050533 	andcc	r0, r5, r3, lsr r5
    3360:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    3364:	01010006 	tsteq	r1, r6
    3368:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    336c:	00000002 	andeq	r0, r0, r2
    3370:	02870300 	addeq	r0, r7, #0, 6
    3374:	a0050501 	andge	r0, r5, r1, lsl #10
    3378:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    337c:	6767670f 	strbvs	r6, [r7, -pc, lsl #14]!
    3380:	05676784 	strbeq	r6, [r7, #-1924]!	; 0xfffff87c
    3384:	054b6805 	strbeq	r6, [fp, #-2053]	; 0xfffff7fb
    3388:	01052e0c 	tsteq	r5, ip, lsl #28
    338c:	0006022f 	andeq	r0, r6, pc, lsr #4
    3390:	01050101 	tsteq	r5, r1, lsl #2
    3394:	00020500 	andeq	r0, r2, r0, lsl #10
    3398:	03000000 	movweq	r0, #0
    339c:	05010299 	streq	r0, [r1, #-665]	; 0xfffffd67
    33a0:	09059f08 	stmdbeq	r5, {r3, r8, r9, sl, fp, ip, pc}
    33a4:	12052f68 	andne	r2, r5, #104, 30	; 0x1a0
    33a8:	4b090530 	blmi	244870 <__core1_unwind_stub-0xdbb790>
    33ac:	2e10054b 	cfmac32cs	mvfx0, mvfx0, mvfx11
    33b0:	69300905 	ldmdbvs	r0!, {r0, r2, r8, fp}
    33b4:	2f120530 	svccs	0x00120530
    33b8:	4b4b0905 	blmi	12c57d4 <__bss_end__+0x2a97d4>
    33bc:	052e1005 	streq	r1, [lr, #-5]!
    33c0:	0c053009 	stceq	0, cr3, [r5], {9}
    33c4:	2f01054c 	svccs	0x0001054c
    33c8:	01000602 	tsteq	r0, r2, lsl #12
    33cc:	00010501 	andeq	r0, r1, r1, lsl #10
    33d0:	00000205 	andeq	r0, r0, r5, lsl #4
    33d4:	b7030000 	strlt	r0, [r3, -r0]
    33d8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    33dc:	4b0c0568 	blmi	304984 <__core1_unwind_stub-0xcfb67c>
    33e0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    33e4:	01010008 	tsteq	r1, r8
    33e8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    33ec:	00000002 	andeq	r0, r0, r2
    33f0:	02be0300 	adcseq	r0, lr, #0, 6
    33f4:	d7120501 	ldrle	r0, [r2, -r1, lsl #10]
    33f8:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    33fc:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    3400:	1f056601 	svcne	0x00056601
    3404:	01040200 	mrseq	r0, R12_usr
    3408:	4b0805ba 	blmi	204af8 <__core1_unwind_stub-0xdfb508>
    340c:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    3410:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3414:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    3418:	1f054a01 	svcne	0x00054a01
    341c:	01040200 	mrseq	r0, R12_usr
    3420:	4b08059e 	blmi	204aa0 <__core1_unwind_stub-0xdfb560>
    3424:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    3428:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    342c:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    3430:	1f054a01 	svcne	0x00054a01
    3434:	01040200 	mrseq	r0, R12_usr
    3438:	4b08059e 	blmi	204ab8 <__core1_unwind_stub-0xdfb548>
    343c:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    3440:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3444:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    3448:	1f054a01 	svcne	0x00054a01
    344c:	01040200 	mrseq	r0, R12_usr
    3450:	4b01059e 	blmi	44ad0 <__core1_unwind_stub-0xfbb530>
    3454:	01000602 	tsteq	r0, r2, lsl #12
    3458:	00010501 	andeq	r0, r1, r1, lsl #10
    345c:	00000205 	andeq	r0, r0, r5, lsl #4
    3460:	c7030000 	strgt	r0, [r3, -r0]
    3464:	12050102 	andne	r0, r5, #-2147483648	; 0x80000000
    3468:	4c050567 	cfstr32mi	mvfx0, [r5], {103}	; 0x67
    346c:	054b1b05 	strbeq	r1, [fp, #-2821]	; 0xfffff4fb
    3470:	26054905 	strcs	r4, [r5], -r5, lsl #18
    3474:	4905052f 	stmdbmi	r5, {r0, r1, r2, r3, r5, r8, sl}
    3478:	052f3005 	streq	r3, [pc, #-5]!	; 347b <__core1_unwind_stub-0xffcb85>
    347c:	01054905 	tsteq	r5, r5, lsl #18
    3480:	06022208 	streq	r2, [r2], -r8, lsl #4
    3484:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3488:	02050001 	andeq	r0, r5, #1
    348c:	00000000 	andeq	r0, r0, r0
    3490:	0102cf03 	tsteq	r2, r3, lsl #30
    3494:	05681805 	strbeq	r1, [r8, #-2053]!	; 0xfffff7fb
    3498:	1905670e 	stmdbne	r5, {r1, r2, r3, r8, r9, sl, sp, lr}
    349c:	2e1f054a 	cfmac32cs	mvfx0, mvfx15, mvfx10
    34a0:	02860105 	addeq	r0, r6, #1073741825	; 0x40000001
    34a4:	01010008 	tsteq	r1, r8
    34a8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    34ac:	00000002 	andeq	r0, r0, r2
    34b0:	02ef0300 	rsceq	r0, pc, #0, 6
    34b4:	4b090501 	blmi	2448c0 <__core1_unwind_stub-0xdbb740>
    34b8:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    34bc:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    34c0:	1b054a01 	blne	155ccc <__core1_unwind_stub-0xeaa334>
    34c4:	0031059f 	mlaseq	r1, pc, r5, r0	; <UNPREDICTABLE>
    34c8:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    34cc:	059f1b05 	ldreq	r1, [pc, #2821]	; 3fd9 <__core1_unwind_stub-0xffc027>
    34d0:	0c059f10 	stceq	15, cr9, [r5], {16}
    34d4:	2f01054b 	svccs	0x0001054b
    34d8:	01000802 	tsteq	r0, r2, lsl #16
    34dc:	00010501 	andeq	r0, r1, r1, lsl #10
    34e0:	00000205 	andeq	r0, r0, r5, lsl #4
    34e4:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    34e8:	19050102 	stmdbne	r5, {r1, r8}
    34ec:	67080568 	strvs	r0, [r8, -r8, ror #10]
    34f0:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    34f4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    34f8:	08054d09 	stmdaeq	r5, {r0, r3, r8, sl, fp, lr}
    34fc:	00240567 	eoreq	r0, r4, r7, ror #10
    3500:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3504:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    3508:	0105830c 	tsteq	r5, ip, lsl #6
    350c:	0006022f 	andeq	r0, r6, pc, lsr #4
    3510:	01050101 	tsteq	r5, r1, lsl #2
    3514:	00020500 	andeq	r0, r2, r0, lsl #10
    3518:	03000000 	movweq	r0, #0
    351c:	05010386 	streq	r0, [r1, #-902]	; 0xfffffc7a
    3520:	09056715 	stmdbeq	r5, {r0, r2, r4, r8, r9, sl, sp, lr}
    3524:	9e08054c 	cfsh32ls	mvfx0, mvfx8, #44
    3528:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    352c:	28054b0c 	stmdacs	r5, {r2, r3, r8, r9, fp, lr}
    3530:	01040200 	mrseq	r0, R12_usr
    3534:	4e180566 	cfmsc32mi	mvfx0, mvfx8, mvfx6
    3538:	9f9f9f9f 	svcls	0x009f9f9f
    353c:	9f9f9f9f 	svcls	0x009f9f9f
    3540:	9f15059f 	svcls	0x0015059f
    3544:	9f16059f 	svcls	0x0016059f
    3548:	9f9f1805 	svcls	0x009f1805
    354c:	05a00c05 	streq	r0, [r0, #3077]!	; 0xc05
    3550:	06022f01 	streq	r2, [r2], -r1, lsl #30
    3554:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3558:	02050001 	andeq	r0, r5, #1
    355c:	00000000 	andeq	r0, r0, r0
    3560:	0103a303 	tsteq	r3, r3, lsl #6
    3564:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
    3568:	14058313 	strne	r8, [r5], #-787	; 0xfffffced
    356c:	83170583 	tsthi	r7, #549453824	; 0x20c00000
    3570:	05831805 	streq	r1, [r3, #2053]	; 0x805
    3574:	18058317 	stmdane	r5, {r0, r1, r2, r4, r8, r9, pc}
    3578:	83170583 	tsthi	r7, #549453824	; 0x20c00000
    357c:	05831405 	streq	r1, [r3, #1029]	; 0x405
    3580:	0105840c 	tsteq	r5, ip, lsl #8
    3584:	0008022f 	andeq	r0, r8, pc, lsr #4
    3588:	00700101 	rsbseq	r0, r0, r1, lsl #2
    358c:	00030000 	andeq	r0, r3, r0
    3590:	0000003d 	andeq	r0, r0, sp, lsr r0
    3594:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3598:	0101000d 	tsteq	r1, sp
    359c:	00000101 	andeq	r0, r0, r1, lsl #2
    35a0:	00000100 	andeq	r0, r0, r0, lsl #2
    35a4:	2f2e2e01 	svccs	0x002e2e01
    35a8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    35ac:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    35b0:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    35b4:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    35b8:	2f676966 	svccs	0x00676966
    35bc:	006d7261 	rsbeq	r7, sp, r1, ror #4
    35c0:	62696c00 	rsbvs	r6, r9, #0, 24
    35c4:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
    35c8:	532e7363 			; <UNDEFINED> instruction: 0x532e7363
    35cc:	00000100 	andeq	r0, r0, r0, lsl #2
    35d0:	02050000 	andeq	r0, r5, #0
    35d4:	01004fdc 	ldrdeq	r4, [r0, -ip]
    35d8:	0108ca03 	tsteq	r8, r3, lsl #20
    35dc:	2f2f2f30 	svccs	0x002f2f30
    35e0:	02302f2f 	eorseq	r2, r0, #47, 30	; 0xbc
    35e4:	312f143e 			; <UNDEFINED> instruction: 0x312f143e
    35e8:	08302f2f 	ldmdaeq	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    35ec:	03322f92 	teqeq	r2, #584	; 0x248
    35f0:	2f2f661f 	svccs	0x002f661f
    35f4:	2f2f2f2f 	svccs	0x002f2f2f
    35f8:	0002022f 	andeq	r0, r2, pc, lsr #4
    35fc:	00530101 	subseq	r0, r3, r1, lsl #2
    3600:	00030000 	andeq	r0, r3, r0
    3604:	0000003d 	andeq	r0, r0, sp, lsr r0
    3608:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    360c:	0101000d 	tsteq	r1, sp
    3610:	00000101 	andeq	r0, r0, r1, lsl #2
    3614:	00000100 	andeq	r0, r0, r0, lsl #2
    3618:	2f2e2e01 	svccs	0x002e2e01
    361c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3620:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    3624:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    3628:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    362c:	2f676966 	svccs	0x00676966
    3630:	006d7261 	rsbeq	r7, sp, r1, ror #4
    3634:	62696c00 	rsbvs	r6, r9, #0, 24
    3638:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
    363c:	532e7363 			; <UNDEFINED> instruction: 0x532e7363
    3640:	00000100 	andeq	r0, r0, r0, lsl #2
    3644:	02050000 	andeq	r0, r5, #0
    3648:	010050f0 	strdeq	r5, [r0, -r0]
    364c:	010bb403 	tsteq	fp, r3, lsl #8
    3650:	01000202 	tsteq	r0, r2, lsl #4
    3654:	00005301 	andeq	r5, r0, r1, lsl #6
    3658:	39000300 	stmdbcc	r0, {r8, r9}
    365c:	02000000 	andeq	r0, r0, #0
    3660:	0d0efb01 	vstreq	d15, [lr, #-4]
    3664:	01010100 	mrseq	r0, (UNDEF: 17)
    3668:	00000001 	andeq	r0, r0, r1
    366c:	01000001 	tsteq	r0, r1
    3670:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3674:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3678:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    367c:	2f636367 	svccs	0x00636367
    3680:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    3684:	612f6769 			; <UNDEFINED> instruction: 0x612f6769
    3688:	00006d72 	andeq	r6, r0, r2, ror sp
    368c:	62617062 	rsbvs	r7, r1, #98	; 0x62
    3690:	00532e69 	subseq	r2, r3, r9, ror #28
    3694:	00000001 	andeq	r0, r0, r1
    3698:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    369c:	03010050 	movweq	r0, #4176	; 0x1050
    36a0:	f40101fd 	vst4.<illegal width 64>	{d0,d2,d4,d6}, [r1 :256]!
    36a4:	02672f4c 	rsbeq	r2, r7, #76, 30	; 0x130
    36a8:	01010002 	tsteq	r1, r2
    36ac:	000001e9 	andeq	r0, r0, r9, ror #3
    36b0:	00ca0003 	sbceq	r0, sl, r3
    36b4:	01020000 	mrseq	r0, (UNDEF: 2)
    36b8:	000d0efb 	strdeq	r0, [sp], -fp
    36bc:	01010101 	tsteq	r1, r1, lsl #2
    36c0:	01000000 	mrseq	r0, (UNDEF: 0)
    36c4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    36c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    36cc:	2f2e2e2f 	svccs	0x002e2e2f
    36d0:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    36d4:	2e006363 	cdpcs	3, 0, cr6, cr0, cr3, {3}
    36d8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    36dc:	2f2e2e2f 	svccs	0x002e2e2f
    36e0:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    36e4:	2e2f6363 	cdpcs	3, 2, cr6, cr15, cr3, {3}
    36e8:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    36ec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    36f0:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    36f4:	2f2e2e2f 	svccs	0x002e2e2f
    36f8:	63672f2e 	cmnvs	r7, #46, 30	; 0xb8
    36fc:	2e2e0063 	cdpcs	0, 2, cr0, cr14, cr3, {3}
    3700:	2f2e2e2f 	svccs	0x002e2e2f
    3704:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 3654 <__core1_unwind_stub-0xffc9ac>
    3708:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    370c:	2e2e2f63 	cdpcs	15, 2, cr2, cr14, cr3, {3}
    3710:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3714:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    3718:	2f676966 	svccs	0x00676966
    371c:	006d7261 	rsbeq	r7, sp, r1, ror #4
    3720:	62696c00 	rsbvs	r6, r9, #0, 24
    3724:	32636367 	rsbcc	r6, r3, #-1677721599	; 0x9c000001
    3728:	0100632e 	tsteq	r0, lr, lsr #6
    372c:	61680000 	cmnvs	r8, r0
    3730:	61746873 	cmnvs	r4, r3, ror r8
    3734:	00682e62 	rsbeq	r2, r8, r2, ror #28
    3738:	61000002 	tstvs	r0, r2
    373c:	692d6d72 	pushvs	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
    3740:	682e6173 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, sp, lr}
    3744:	00000300 	andeq	r0, r0, r0, lsl #6
    3748:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    374c:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    3750:	00030068 	andeq	r0, r3, r8, rrx
    3754:	736e6900 	cmnvc	lr, #0, 18
    3758:	6f632d6e 	svcvs	0x00632d6e
    375c:	6174736e 	cmnvs	r4, lr, ror #6
    3760:	2e73746e 	cdpcs	4, 7, cr7, cr3, cr14, {3}
    3764:	00030068 	andeq	r0, r3, r8, rrx
    3768:	6d726100 	ldfvse	f6, [r2, #-0]
    376c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3770:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    3774:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    3778:	00682e32 	rsbeq	r2, r8, r2, lsr lr
    377c:	00000001 	andeq	r0, r0, r1
    3780:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3784:	00513002 	subseq	r3, r1, r2
    3788:	07b30301 	ldreq	r0, [r3, r1, lsl #6]!
    378c:	13030501 	movwne	r0, #13569	; 0x3501
    3790:	03060605 	movweq	r0, #26117	; 0x6605
    3794:	0105010b 	tsteq	r5, fp, lsl #2
    3798:	2e4a7403 	cdpcs	4, 4, cr7, cr10, cr3, {0}
    379c:	052f0b05 	streq	r0, [pc, #-2821]!	; 2c9f <__core1_unwind_stub-0xffd361>
    37a0:	03052d01 	movweq	r2, #23809	; 0x5d01
    37a4:	0a033006 	beq	cf7c4 <__core1_unwind_stub-0xf3083c>
    37a8:	06010501 	streq	r0, [r1], -r1, lsl #10
    37ac:	05017403 	streq	r7, [r1, #-1027]	; 0xfffffbfd
    37b0:	06052f0b 	streq	r2, [r5], -fp, lsl #30
    37b4:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
    37b8:	05300607 	ldreq	r0, [r0, #-1543]!	; 0xfffff9f9
    37bc:	9f01060d 	svcls	0x0001060d
    37c0:	0607052d 	streq	r0, [r7], -sp, lsr #10
    37c4:	060d052f 	streq	r0, [sp], -pc, lsr #10
    37c8:	07052e01 	streq	r2, [r5, -r1, lsl #28]
    37cc:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
    37d0:	07050106 	streq	r0, [r5, -r6, lsl #2]
    37d4:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    37d8:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    37dc:	0905890a 	stmdbeq	r5, {r1, r3, r8, fp, pc}
    37e0:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    37e4:	05350607 	ldreq	r0, [r5, #-1543]!	; 0xfffff9f9
    37e8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    37ec:	2e68030b 	cdpcs	3, 6, cr0, cr8, cr11, {0}
    37f0:	030a052e 	movweq	r0, #42286	; 0xa52e
    37f4:	04052e18 	streq	r2, [r5], #-3608	; 0xfffff1e8
    37f8:	06053006 	streq	r3, [r5], -r6
    37fc:	2f2d1306 	svccs	0x002d1306
    3800:	06040549 	streq	r0, [r4], -r9, asr #10
    3804:	0606052f 	streq	r0, [r6], -pc, lsr #10
    3808:	06070501 	streq	r0, [r7], -r1, lsl #10
    380c:	060a0531 			; <UNDEFINED> instruction: 0x060a0531
    3810:	06040501 	streq	r0, [r4], -r1, lsl #10
    3814:	0606054c 	streq	r0, [r6], -ip, asr #10
    3818:	06040501 	streq	r0, [r4], -r1, lsl #10
    381c:	05010686 	streq	r0, [r1, #-1670]	; 0xfffff97a
    3820:	1005320b 	andne	r3, r5, fp, lsl #4
    3824:	4a05054a 	bmi	144d54 <__core1_unwind_stub-0xebb2ac>
    3828:	0608052e 	streq	r0, [r8], -lr, lsr #10
    382c:	130e0531 	movwne	r0, #58673	; 0xe531
    3830:	01060605 	tsteq	r6, r5, lsl #12
    3834:	0604052e 	streq	r0, [r4], -lr, lsr #10
    3838:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    383c:	03051408 	movweq	r1, #21512	; 0x5408
    3840:	0b051413 	bleq	148894 <__core1_unwind_stub-0xeb776c>
    3844:	05050f06 	streq	r0, [r5, #-3846]	; 0xfffff0fa
    3848:	08052e69 	stmdaeq	r5, {r0, r3, r5, r6, r9, sl, fp, sp}
    384c:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    3850:	06060513 			; <UNDEFINED> instruction: 0x06060513
    3854:	04052e01 	streq	r2, [r5], #-3585	; 0xfffff1ff
    3858:	06053206 	streq	r3, [r5], -r6, lsl #4
    385c:	2f651306 	svccs	0x00651306
    3860:	04052d2e 	streq	r2, [r5], #-3374	; 0xfffff2d2
    3864:	06052f06 	streq	r2, [r5], -r6, lsl #30
    3868:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    386c:	0f052f06 	svceq	0x00052f06
    3870:	06050106 	streq	r0, [r5], -r6, lsl #2
    3874:	2e0f0566 	cfsh32cs	mvfx0, mvfx15, #54
    3878:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    387c:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    3880:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3884:	052f0605 	streq	r0, [pc, #-1541]!	; 3287 <__core1_unwind_stub-0xffcd79>
    3888:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    388c:	052f0603 	streq	r0, [pc, #-1539]!	; 3291 <__core1_unwind_stub-0xffcd6f>
    3890:	2e130601 	cfmsub32cs	mvax0, mvfx0, mvfx3, mvfx1
    3894:	01000202 	tsteq	r0, r2, lsl #4
    3898:	00005d01 	andeq	r5, r0, r1, lsl #26
    389c:	3d000300 	stccc	3, cr0, [r0, #-0]
    38a0:	02000000 	andeq	r0, r0, #0
    38a4:	0d0efb01 	vstreq	d15, [lr, #-4]
    38a8:	01010100 	mrseq	r0, (UNDEF: 17)
    38ac:	00000001 	andeq	r0, r0, r1
    38b0:	01000001 	tsteq	r0, r1
    38b4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    38b8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    38bc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    38c0:	2f636367 	svccs	0x00636367
    38c4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    38c8:	612f6769 			; <UNDEFINED> instruction: 0x612f6769
    38cc:	00006d72 	andeq	r6, r0, r2, ror sp
    38d0:	3162696c 	cmncc	r2, ip, ror #18
    38d4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    38d8:	00532e73 	subseq	r2, r3, r3, ror lr
    38dc:	00000001 	andeq	r0, r0, r1
    38e0:	60020500 	andvs	r0, r2, r0, lsl #10
    38e4:	03010052 	movweq	r0, #4178	; 0x1052
    38e8:	30010de1 	andcc	r0, r1, r1, ror #27
    38ec:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    38f0:	2f302f2f 	svccs	0x00302f2f
    38f4:	00040234 	andeq	r0, r4, r4, lsr r2
    38f8:	00600101 	rsbeq	r0, r0, r1, lsl #2
    38fc:	00030000 	andeq	r0, r3, r0
    3900:	0000003d 	andeq	r0, r0, sp, lsr r0
    3904:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3908:	0101000d 	tsteq	r1, sp
    390c:	00000101 	andeq	r0, r0, r1, lsl #2
    3910:	00000100 	andeq	r0, r0, r0, lsl #2
    3914:	2f2e2e01 	svccs	0x002e2e01
    3918:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    391c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    3920:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    3924:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    3928:	2f676966 	svccs	0x00676966
    392c:	006d7261 	rsbeq	r7, sp, r1, ror #4
    3930:	62696c00 	rsbvs	r6, r9, #0, 24
    3934:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
    3938:	532e7363 			; <UNDEFINED> instruction: 0x532e7363
    393c:	00000100 	andeq	r0, r0, r0, lsl #2
    3940:	02050000 	andeq	r0, r5, #0
    3944:	01005288 	smlabbeq	r0, r8, r2, r5
    3948:	010dc003 	tsteq	sp, r3
    394c:	2f2f302f 	svccs	0x002f302f
    3950:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
    3954:	2f2f2f2f 	svccs	0x002f2f2f
    3958:	000a022f 	andeq	r0, sl, pc, lsr #4
    395c:	Address 0x000000000000395c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
{
       0:	6f6c5f5f 	svcvs	0x006c5f5f
       4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
       8:	5f00745f 	svcpl	0x0000745f
       c:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	5f006575 	svcpl	0x00006575
      14:	0066735f 	rsbeq	r7, r6, pc, asr r3
    ALT_PRINTF("\n");
      18:	65726670 	ldrbvs	r6, [r2, #-1648]!	; 0xfffff990
      1c:	6f6e0071 	svcvs	0x006e0071
      20:	76696463 	strbtvc	r6, [r9], -r3, ror #8
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	6d346c5f 	ldcvs	12, cr6, [r4, #-380]!	; 0xfffffe84
      28:	6b6c6370 	blvs	1b18df0 <__bss_end__+0xafcdf0>
      2c:	73615f00 	cmnvc	r1, #0, 30
      30:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
      34:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
      38:	4e470066 	cdpmi	0, 4, cr0, cr7, cr6, {3}
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	31432055 	qdaddcc	r2, r5, r3
      40:	2e392037 	mrccs	0, 1, r2, cr9, cr7, {1}
      44:	20312e32 	eorscs	r2, r1, r2, lsr lr
      48:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
      50:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
      54:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
      58:	5b202965 	blpl	80a5f4 <__core1_unwind_stub-0x7f5a0c>
      5c:	2f4d5241 	svccs	0x004d5241
      60:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      64:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
      68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
      6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
}
      70:	6f697369 	svcvs	0x00697369
      74:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
      78:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
      80:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
      84:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
      88:	612d7865 			; <UNDEFINED> instruction: 0x612d7865
      8c:	6d2d2039 	stcvs	0, cr2, [sp, #-228]!	; 0xffffff1c
      90:	616f6c66 	cmnvs	pc, r6, ror #24
      *(pmem->toptr)=0;
      94:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
      98:	6f733d69 	svcvs	0x00733d69
      9c:	70667466 	rsbvc	r7, r6, r6, ror #8
      a0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
}
      a4:	6e3d7570 	mrcvs	5, 1, r7, cr13, cr0, {3}
      a8:	206e6f65 	rsbcs	r6, lr, r5, ror #30
      ac:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      b0:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      b8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
        break;
      bc:	612d3776 			; <UNDEFINED> instruction: 0x612d3776
    return ALT_E_SUCCESS;
      c0:	2b706d2b 	blcs	1c1b574 <__bss_end__+0xbff574>
      c4:	2b636573 	blcs	18d9698 <__bss_end__+0x8bd698>
        return ALT_E_ERROR;
      c8:	646d6973 	strbtvs	r6, [sp], #-2419	; 0xfffff68d
}
      cc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      d0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
      d4:	6164662d 	cmnvs	r4, sp, lsr #12
      d8:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
      e0:	20736e6f 	rsbscs	r6, r3, pc, ror #28
      e4:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
      e8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
      ec:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
      f0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    return dst;
      f4:	20736e6f 	rsbscs	r6, r3, pc, ror #28
}
      f8:	7266662d 	rsbvc	r6, r6, #47185920	; 0x2d00000
      fc:	74736565 	ldrbtvc	r6, [r3], #-1381	; 0xfffffa9b
     100:	69646e61 	stmdbvs	r4!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     104:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
     108:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; ffffff78 <__shm_end__+0xbfffff78>
     10c:	00656970 	rsbeq	r6, r5, r0, ror r9
     110:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
     114:	006e656c 	rsbeq	r6, lr, ip, ror #10
     118:	5f544c41 	svcpl	0x00544c41
     11c:	5f4b4c43 	svcpl	0x004b4c43
     120:	5f55504d 	svcpl	0x0055504d
     124:	525f324c 	subspl	r3, pc, #76, 4	; 0xc0000004
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     128:	63004d41 	movwvs	r4, #3393	; 0xd41
     12c:	3672746e 	ldrbtcc	r7, [r2], -lr, ror #8
     130:	5f6b6c63 	svcpl	0x006b6c63
     134:	00637273 	rsbeq	r7, r3, r3, ror r2
     138:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	00646573 	rsbeq	r6, r4, r3, ror r5
     140:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     144:	63775f00 	cmnvs	r7, #0, 30
     148:	6f747273 	svcvs	0x00747273
     14c:	5f73626d 	svcpl	0x0073626d
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     154:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
     158:	00667562 	rsbeq	r7, r6, r2, ror #10
     15c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     160:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
     168:	625f6134 	subsvs	r6, pc, #52, 2
     16c:	63006675 	movwvs	r6, #1653	; 0x675
     170:	3572746e 	ldrbcc	r7, [r2, #-1134]!	; 0xfffffb92
     174:	5f6b6c63 	svcpl	0x006b6c63
    return ALT_E_SUCCESS;
     178:	00746e63 	rsbseq	r6, r4, r3, ror #28
}
     17c:	63616d65 	cmnvs	r1, #6464	; 0x1940
     180:	5f6c7463 	svcpl	0x006c7463
     184:	63616d65 	cmnvs	r1, #6464	; 0x1940
    while (coalesce->size)
     188:	6c657331 	stclvs	3, cr7, [r5], #-196	; 0xffffff3c
     18c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
            break;
     190:	6b6c635f 	blvs	1b18f14 <__bss_end__+0xafcf14>
    *segpa   = thissegpa;
     194:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     198:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     19c:	32665f74 	rsbcc	r5, r6, #116, 30	; 0x1d0
    *segsize = thissegsize;
     1a0:	72665f73 	rsbvc	r5, r6, #460	; 0x1cc
     1a4:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
     1a8:	5f006b6c 	svcpl	0x00006b6c
    return ALT_E_SUCCESS;
     1ac:	6b636f6c 	blvs	18dbf64 <__bss_end__+0x8bff64>
}
     1b0:	75706d00 	ldrbvc	r6, [r0, #-3328]!	; 0xfffff300
     1b4:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     1b8:	61746164 	cmnvs	r4, r4, ror #2
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	5f003233 	svcpl	0x00003233
     1c0:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
     1c4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     1c8:	6b6c635f 	blvs	1b18f4c <__bss_end__+0xafcf4c>
     1cc:	5f72676d 	svcpl	0x0072676d
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     1d4:	6e006769 	cdpvs	7, 0, cr6, cr0, cr9, {3}
     1d8:	6964636f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     1dc:	346c5f76 	strbtcc	r5, [ip], #-3958	; 0xfffff08a
     1e0:	6c637073 	stclvs	0, cr7, [r3], #-460	; 0xfffffe34
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	6c61006b 	stclvs	0, cr0, [r1], #-428	; 0xfffffe54
     1e8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     1ec:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
     1f0:	5f6b636f 	svcpl	0x006b636f
     1f4:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     1f8:	6300656c 	movwvs	r6, #1388	; 0x56c
     1fc:	3472746e 	ldrbtcc	r7, [r2], #-1134	; 0xfffffb92
     200:	5f6b6c63 	svcpl	0x006b6c63
     204:	00746e63 	rsbseq	r6, r4, r3, ror #28
     208:	5f746c61 	svcpl	0x00746c61
     20c:	5f6b6c63 	svcpl	0x006b6c63
     210:	71657266 	cmnvc	r5, r6, ror #4
        clkStep += clk100;
     214:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     218:	5f346c5f 	svcpl	0x00346c5f
     21c:	6e69616d 	powvsez	f6, f1, #5.0
     220:	6b6c6300 	blvs	1b18e28 <__bss_end__+0xafce28>
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     228:	666f5f71 	uqsub16vs	r5, pc, r1	; <UNPREDICTABLE>
     22c:	5f62635f 	svcpl	0x0062635f
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	6f746e69 	svcvs	0x00746e69
     234:	6c5f6373 	mrrcvs	3, 7, r6, pc, cr3	; <UNPREDICTABLE>
     238:	5f5f0073 	svcpl	0x005f0073
     23c:	00686377 	rsbeq	r6, r8, r7, ror r3
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	434f4c43 	movtmi	r4, #64579	; 0xfc43
     244:	414d5f4b 	cmpmi	sp, fp, asr #30
     248:	4547414e 	strbmi	r4, [r7, #-334]	; 0xfffffeb2
     24c:	45505f52 	ldrbmi	r5, [r0, #-3922]	; 0xfffff0ae
     250:	4c505f52 	mrrcmi	15, 5, r5, r0, cr2
     254:	4f435f4c 	svcmi	0x00435f4c
     258:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
     260:	5f00656c 	svcpl	0x0000656c
     264:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; fffff3fd <__shm_end__+0xbffff3fd>
     268:	5f746978 	svcpl	0x00746978
     26c:	73677261 	cmnvc	r7, #268435462	; 0x10000006
     270:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     274:	4b4c435f 	blmi	1310ff8 <__bss_end__+0x2f4ff8>
     278:	5f344c5f 	svcpl	0x00344c5f
     27c:	4100504d 	tstmi	r0, sp, asr #32
     280:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     284:	435f4b4c 	cmpmi	pc, #76, 22	; 0x13000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	49545f53 	ldmdbmi	r4, {r0, r1, r4, r6, r8, r9, sl, fp, ip, lr}^
     28c:	0052454d 	subseq	r4, r2, sp, asr #10
     290:	5f544c41 	svcpl	0x00544c41
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	5f4b4c43 	svcpl	0x004b4c43
     298:	415f5343 	cmpmi	pc, r3, asr #6
     29c:	65730054 	ldrbvs	r0, [r3, #-84]!	; 0xffffffac
     2a0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	73616d5f 	cmnvc	r1, #6080	; 0x17c0
     2a8:	6c61006b 	stclvs	0, cr0, [r1], #-428	; 0xfffffe54
     2ac:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     2b0:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
     2b4:	5f6b636f 	svcpl	0x006b636f
     2b8:	61736964 	cmnvs	r3, r4, ror #18
     2bc:	5f656c62 	svcpl	0x00656c62
     2c0:	706c6568 	rsbvc	r6, ip, r8, ror #10
     2c4:	61007265 	tstvs	r0, r5, ror #4
     2c8:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     2cc:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	6b636f6c 	blvs	18dc088 <__bss_end__+0x8c0088>
     2d4:	616e655f 	cmnvs	lr, pc, asr r5
     2d8:	5f656c62 	svcpl	0x00656c62
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	706c6568 	rsbvc	r6, ip, r8, ror #10
     2e0:	5f007265 	svcpl	0x00007265
     2e4:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
     2e8:	735f6e65 	cmpvc	pc, #1616	; 0x650
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     2f0:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     2f4:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
     2f8:	5f006b5f 	svcpl	0x00006b5f
     2fc:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     300:	4f4c4300 	svcmi	0x004c4300
     304:	4d5f4b43 	vldrmi	d20, [pc, #-268]	; 200 <__core1_unwind_stub-0xfffe00>
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	47414e41 	strbmi	r4, [r1, -r1, asr #28]
     30c:	435f5245 	cmpmi	pc, #1342177284	; 0x50000004
     310:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     314:	6c5f0047 	mrrcvs	0, 4, r0, pc, cr7	; <UNPREDICTABLE>
     318:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     31c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     320:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     328:	5450475f 	ldrbpl	r4, [r0], #-1887	; 0xfffff8a1
     32c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	4f4c475f 	svcmi	0x004c475f
     334:	5f4c4142 	svcpl	0x004c4142
     338:	00524d54 	subseq	r4, r2, r4, asr sp
     33c:	5f544c41 	svcpl	0x00544c41
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	5f545047 	svcpl	0x00545047
     344:	545f5053 	ldrbpl	r5, [pc], #-83	; 34c <__core1_unwind_stub-0xfffcb4>
     348:	0030524d 	eorseq	r5, r0, sp, asr #4
     34c:	5f544c41 	svcpl	0x00544c41
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	5f545047 	svcpl	0x00545047
     354:	545f5053 	ldrbpl	r5, [pc], #-83	; 35c <__core1_unwind_stub-0xfffca4>
     358:	0031524d 	eorseq	r5, r1, sp, asr #4
     35c:	5f6c6c70 	svcpl	0x006c6c70
     360:	66696873 			; <UNDEFINED> instruction: 0x66696873
     364:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     36c:	4e555f4b 	cdpmi	15, 5, cr5, cr5, cr11, {2}
     370:	574f4e4b 	strbpl	r4, [pc, -fp, asr #28]
     374:	4c41004e 	mcrrmi	0, 4, r0, r1, cr14
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     378:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     37c:	4d455f4b 	stclmi	15, cr5, [r5, #-300]	; 0xfffffed4
     380:	505f4341 	subspl	r4, pc, r1, asr #6
     384:	76005054 			; <UNDEFINED> instruction: 0x76005054
     388:	5f316f63 	svcpl	0x00316f63
     38c:	6f6e6564 	svcvs	0x006e6564
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	5f5f006d 	svcpl	0x005f006d
     394:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 1cc <__core1_unwind_stub-0xfffe34>
     398:	61006e6f 	tstvs	r0, pc, ror #28
     39c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     3a0:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	5f716572 	svcpl	0x00716572
     3a8:	5f746567 	svcpl	0x00746567
     3ac:	5f663273 	svcpl	0x00663273
     3b0:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     3b4:	6e630031 	mcrvs	0, 3, r0, cr3, cr1, {1}
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	63327274 	teqvs	r2, #116, 4	; 0x40000007
     3bc:	735f6b6c 	cmpvc	pc, #108, 22	; 0x1b000
     3c0:	41006372 	tstmi	r0, r2, ror r3
     3c4:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     3c8:	435f4b4c 	cmpmi	pc, #76, 22	; 0x13000
     3cc:	52545f53 	subspl	r5, r4, #332	; 0x14c
     3d0:	00454341 	subeq	r4, r5, r1, asr #6
     3d4:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
     3d8:	5f646573 	svcpl	0x00646573
     3dc:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     3e0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	67617265 	strbvs	r7, [r1, -r5, ror #4]!
     3e8:	61007072 	tstvs	r0, r2, ror r0
     3ec:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     3f0:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     3f4:	5f716572 	svcpl	0x00716572
     3f8:	5f746567 	svcpl	0x00746567
     3fc:	5f75706d 	svcpl	0x0075706d
     400:	6172326c 	cmnvs	r2, ip, ror #4
     404:	6e75006d 	cdpvs	0, 7, cr0, cr5, cr13, {3}
     408:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     40c:	63206465 			; <UNDEFINED> instruction: 0x63206465
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	00726168 	rsbseq	r6, r2, r8, ror #2
     414:	5f544c41 	svcpl	0x00544c41
     418:	5f545047 	svcpl	0x00545047
     41c:	5f555043 	svcpl	0x00555043
     420:	47544457 			; <UNDEFINED> instruction: 0x47544457
     424:	545f5450 	ldrbpl	r5, [pc], #-1104	; 42c <__core1_unwind_stub-0xfffbd4>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	6300524d 	movwvs	r5, #589	; 0x24d
     42c:	74536b6c 	ldrbvc	r6, [r3], #-2924	; 0xfffff494
     430:	5f007065 	svcpl	0x00007065
     434:	70736e75 	rsbsvc	r6, r3, r5, ror lr
     438:	66696365 	strbtvs	r6, [r9], -r5, ror #6
     43c:	5f646569 	svcpl	0x00646569
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     440:	61636f6c 	cmnvs	r3, ip, ror #30
     444:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     448:	006f666e 	rsbeq	r6, pc, lr, ror #12
     44c:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
     450:	5f00746e 	svcpl	0x0000746e
     454:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     45c:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
     460:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
     464:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
     468:	50475f54 	subpl	r5, r7, r4, asr pc
     46c:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xfffff0ac
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
     474:	4f4d5f54 	svcmi	0x004d5f54
     478:	4f5f4544 	svcmi	0x005f4544
     47c:	4853454e 	ldmdami	r3, {r1, r2, r3, r6, r8, sl, lr}^
     480:	6100544f 	tstvs	r0, pc, asr #8
     484:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     48c:	5f716572 	svcpl	0x00716572
     490:	5f746567 	svcpl	0x00746567
     494:	69707371 	ldmdbvs	r0!, {r0, r4, r5, r6, r8, r9, ip, sp, lr}^
     498:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     49c:	77680073 			; <UNDEFINED> instruction: 0x77680073
     4a0:	2f62696c 	svccs	0x0062696c
     4a4:	2f637273 	svccs	0x00637273
     4a8:	676d7768 	strbvs	r7, [sp, -r8, ror #14]!
     4ac:	6f732f72 	svcvs	0x00732f72
     4b0:	31615f63 	cmncc	r1, r3, ror #30
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	6c612f30 	stclvs	15, cr2, [r1], #-192	; 0xffffff40
     4b8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     4bc:	5f6b636f 	svcpl	0x006b636f
     4c0:	616e616d 	cmnvs	lr, sp, ror #2
     4c4:	2e726567 	cdpcs	5, 7, cr6, cr2, cr7, {3}
     4c8:	6c630063 	stclvs	0, cr0, [r3], #-396	; 0xfffffe74
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     4d0:	6f5f7165 	svcvs	0x005f7165
     4d4:	6f655f66 	svcvs	0x00655f66
     4d8:	00316373 	eorseq	r6, r1, r3, ror r3
     4dc:	5f544c41 	svcpl	0x00544c41
     4e0:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
     4e4:	435f5355 	cmpmi	pc, #1409286145	; 0x54000001
     4e8:	0045444f 	subeq	r4, r5, pc, asr #8
     4ec:	5f746c61 	svcpl	0x00746c61
     4f0:	5f6b6c63 	svcpl	0x006b6c63
     4f4:	71657266 	cmnvc	r5, r6, ror #4
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     4fc:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     500:	6e69006f 	cdpvs	0, 6, cr0, cr9, cr15, {3}
     504:	736b6c63 	cmnvc	fp, #25344	; 0x6300
     508:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     50c:	4b4c435f 	blmi	1311290 <__bss_end__+0x2f5290>
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	6300745f 	movwvs	r7, #1119	; 0x45f
     514:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     518:	5f716572 	svcpl	0x00716572
     51c:	665f666f 	ldrbvs	r6, [pc], -pc, ror #12
     520:	665f6832 			; <UNDEFINED> instruction: 0x665f6832
     524:	00656572 	rsbeq	r6, r5, r2, ror r5
     528:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     52c:	41006e69 	tstmi	r0, r9, ror #28
     530:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     534:	4f5f4b4c 	svcmi	0x005f4b4c
     538:	00314353 	eorseq	r4, r1, r3, asr r3
     53c:	5f544c41 	svcpl	0x00544c41
     540:	5f545047 	svcpl	0x00545047
     544:	5f555043 	svcpl	0x00555043
     548:	56495250 			; <UNDEFINED> instruction: 0x56495250
     54c:	5f455441 	svcpl	0x00455441
     550:	00524d54 	subseq	r4, r2, r4, asr sp
     554:	5f746c61 	svcpl	0x00746c61
     558:	5f6b6c63 	svcpl	0x006b6c63
     55c:	71657266 	cmnvc	r5, r6, ror #4
     560:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     564:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     568:	6100306d 	tstvs	r0, sp, rrx
     56c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     570:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     574:	5f716572 	svcpl	0x00716572
     578:	5f746567 	svcpl	0x00746567
     57c:	6d697073 	stclvs	0, cr7, [r9, #-460]!	; 0xfffffe34
     580:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
     584:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     588:	45505f4b 	ldrbmi	r5, [r0, #-3915]	; 0xfffff0b5
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	48504952 	ldmdami	r0, {r1, r4, r6, r8, fp, lr}^
     590:	4c415245 	sfmmi	f5, 2, [r1], {69}	; 0x45
     594:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     598:	746e6300 	strbtvc	r6, [lr], #-768	; 0xfffffd00
     59c:	6c633872 	stclvs	8, cr3, [r3], #-456	; 0xfffffe38
     5a0:	72735f6b 	rsbsvc	r5, r3, #428	; 0x1ac
     5a4:	6c610063 	stclvs	0, cr0, [r1], #-396	; 0xfffffe74
     5a8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     5ac:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     5b0:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     5b4:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	79735f34 	ldmdbvc	r3!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     5bc:	72665f73 	rsbvc	r5, r6, #460	; 0x1cc
     5c0:	63006565 	movwvs	r6, #1381	; 0x565
     5c4:	3772746e 	ldrbcc	r7, [r2, -lr, ror #8]!
     5c8:	5f6b6c63 	svcpl	0x006b6c63
     5cc:	00746e63 	rsbseq	r6, r4, r3, ror #28
     5d0:	306f6376 	rsbcc	r6, pc, r6, ror r3	; <UNPREDICTABLE>
     5d4:	7273705f 	rsbsvc	r7, r3, #95	; 0x5f
     5d8:	4c410063 	mcrrmi	0, 6, r0, r1, cr3
     5dc:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     5e0:	53435f4b 	movtpl	r5, #16203	; 0x3f4b
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	4244505f 	submi	r5, r4, #95	; 0x5f
     5e8:	635f0047 	cmpvs	pc, #71	; 0x47
     5ec:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     5f0:	616d0065 	cmnvs	sp, r5, rrx
     5f4:	6c706e69 	ldclvs	14, cr6, [r0], #-420	; 0xfffffe5c
     5f8:	4c41006c 	mcrrmi	0, 6, r0, r1, cr12
     5fc:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     600:	50475f4b 	subpl	r5, r7, fp, asr #30
     604:	5f004f49 	svcpl	0x00004f49
     608:	00736477 	rsbseq	r6, r3, r7, ror r4
     60c:	5f746c61 	svcpl	0x00746c61
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	5f6b6c63 	svcpl	0x006b6c63
     614:	71657266 	cmnvc	r5, r6, ror #4
     618:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     61c:	5f73635f 	svcpl	0x0073635f
     620:	5f007461 	svcpl	0x00007461
     624:	5f676973 	svcpl	0x00676973
     628:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     62c:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
     630:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
     634:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
     638:	66756274 			; <UNDEFINED> instruction: 0x66756274
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	636f6e00 	cmnvs	pc, #0, 28
     640:	5f6b6c63 	svcpl	0x006b6c63
     644:	00637273 	rsbeq	r7, r3, r3, ror r2
     648:	434f4c43 	movtmi	r4, #64579	; 0xfc43
     64c:	414d5f4b 	cmpmi	sp, fp, asr #30
     650:	4547414e 	strbmi	r4, [r7, #-334]	; 0xfffffeb2
     654:	414d5f52 	cmpmi	sp, r2, asr pc
     658:	505f4e49 	subspl	r4, pc, r9, asr #28
     65c:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
     660:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     664:	6f6e0047 	svcvs	0x006e0047
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	76696463 	strbtvc	r6, [r9], -r3, ror #8
     66c:	6173635f 	cmnvs	r3, pc, asr r3
     670:	6b6c6374 	blvs	1b19448 <__bss_end__+0xafd448>
     674:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
     678:	6e630073 	mcrvs	0, 3, r0, cr3, cr3, {3}
     67c:	63357274 	teqvs	r5, #116, 4	; 0x40000007
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	735f6b6c 	cmpvc	pc, #108, 22	; 0x1b000
     684:	5f006372 	svcpl	0x00006372
     688:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     68c:	5f00454c 	svcpl	0x0000454c
     690:	6964735f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     694:	696e6964 	stmdbvs	lr!, {r2, r5, r6, r8, fp, sp, lr}^
     698:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     69c:	7367616c 	cmnvc	r7, #108, 2
     6a0:	4c410032 	mcrrmi	0, 3, r0, r1, cr2
     6a4:	50475f54 	subpl	r5, r7, r4, asr pc
     6a8:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xfffff0ac
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
     6b0:	4f4d5f54 	svcmi	0x004d5f54
     6b4:	655f4544 	ldrbvs	r4, [pc, #-1348]	; 178 <__core1_unwind_stub-0xfffe88>
     6b8:	4f4c5f00 	svcmi	0x004c5f00
     6bc:	525f4b43 	subspl	r4, pc, #68608	; 0x10c00
     6c0:	52554345 	subspl	r4, r5, #335544321	; 0x14000001
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	45564953 	ldrbmi	r4, [r6, #-2387]	; 0xfffff6ad
     6c8:	6300545f 	movwvs	r5, #1119	; 0x45f
     6cc:	30316b6c 	eorscc	r6, r1, ip, ror #22
     6d0:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
     6d4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     6d8:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     6dc:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     6e0:	655f7465 	ldrbvs	r7, [pc, #-1125]	; 283 <__core1_unwind_stub-0xfffd7d>
     6e4:	3063616d 	rsbcc	r6, r3, sp, ror #2
     6e8:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     6ec:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
     6f0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     6f4:	746e6300 	strbtvc	r6, [lr], #-768	; 0xfffffd00
     6f8:	6c633472 	cfstrdvs	mvd3, [r3], #-456	; 0xfffffe38
     6fc:	72735f6b 	rsbsvc	r5, r3, #428	; 0x1ac
     700:	4c410063 	mcrrmi	0, 6, r0, r1, cr3
     704:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	53555f4b 	cmppl	r5, #300	; 0x12c
     70c:	425f0042 	subsmi	r0, pc, #66	; 0x42
     710:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     714:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
     718:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     71c:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     724:	645f7465 	ldrbvs	r7, [pc], #-1125	; 72c <__core1_unwind_stub-0xfff8d4>
     728:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     72c:	6f6e0065 	svcvs	0x006e0065
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	6b6c6363 	blvs	1b194c4 <__bss_end__+0xafd4c4>
     734:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     73c:	6b6c635f 	blvs	1b194c0 <__bss_end__+0xafd4c0>
     740:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     744:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	6d655f74 	stclvs	15, cr5, [r5, #-464]!	; 0xfffffe30
     74c:	00316361 	eorseq	r6, r1, r1, ror #6
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	5f746c61 	svcpl	0x00746c61
     754:	5f6b6c63 	svcpl	0x006b6c63
     758:	71657266 	cmnvc	r5, r6, ror #4
     75c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     760:	616d655f 	cmnvs	sp, pc, asr r5
     764:	5f003263 	svcpl	0x00003263
     768:	7778616d 	ldrbvc	r6, [r8, -sp, ror #2]!
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	6e007364 	cdpvs	3, 0, cr7, cr0, cr4, {3}
     770:	6c63636f 	stclvs	3, cr6, [r3], #-444	; 0xfffffe44
     774:	6e63006b 	cdpvs	0, 6, cr0, cr3, cr11, {3}
     778:	63337274 	teqvs	r3, #116, 4	; 0x40000007
     77c:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
     780:	5f00746e 	svcpl	0x0000746e
     784:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	70756e61 	rsbsvc	r6, r5, r1, ror #28
     78c:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
     790:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
     794:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
     798:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     79c:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     7a0:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
     7a8:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7ac:	0072656d 	rsbseq	r6, r2, sp, ror #10
     7b0:	5f746c61 	svcpl	0x00746c61
     7b4:	5f6b6c63 	svcpl	0x006b6c63
     7b8:	71657266 	cmnvc	r5, r6, ror #4
     7bc:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	5f336c5f 	svcpl	0x00336c5f
     7c4:	6e69616d 	powvsez	f6, f1, #5.0
     7c8:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     7cc:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     7d4:	344c5f4b 	strbcc	r5, [ip], #-3915	; 0xfffff0b5
     7d8:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	4552465f 	ldrbmi	r4, [r2, #-1631]	; 0xfffff9a1
     7e0:	4c410045 	mcrrmi	0, 4, r0, r1, cr5
     7e4:	50475f54 	subpl	r5, r7, r4, asr pc
     7e8:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xfffff0ac
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
     7f0:	4f4d5f54 	svcmi	0x004d5f54
     7f4:	505f4544 	subspl	r4, pc, r4, asr #10
     7f8:	4f495245 	svcmi	0x00495245
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	00434944 	subeq	r4, r3, r4, asr #18
     800:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
     804:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
     808:	6c007963 			; <UNDEFINED> instruction: 0x6c007963
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     810:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     814:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     818:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	6b6c635f 	blvs	1b195a0 <__bss_end__+0xafd5a0>
     820:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     824:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	65705f74 	ldrbvs	r5, [r0, #-3956]!	; 0xfffff08c
     82c:	705f6972 	subsvc	r6, pc, r2, ror r9	; <UNPREDICTABLE>
     830:	5f006c6c 	svcpl	0x00006c6c
     834:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	5f5f0073 	svcpl	0x005f0073
     83c:	756c6773 	strbvc	r6, [ip, #-1907]!	; 0xfffff88d
     840:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     844:	00306d72 	eorseq	r6, r0, r2, ror sp
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!	; 0xfffffe30
     84c:	6e5f0031 	mrcvs	0, 2, r0, cr15, cr1, {1}
     850:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
     854:	6100636f 	tstvs	r0, pc, ror #6
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     85c:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     860:	5f716572 	svcpl	0x00716572
     864:	5f746567 	svcpl	0x00746567
     868:	695f6263 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     86c:	736f746e 	cmnvc	pc, #1845493760	; 0x6e000000
     870:	73685f63 	cmnvc	r8, #396	; 0x18c
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	7669645f 			; <UNDEFINED> instruction: 0x7669645f
     878:	6c635f32 	stclvs	15, cr5, [r3], #-200	; 0xffffff38
     87c:	736f006b 	cmnvc	pc, #107	; 0x6b
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	635f3163 	cmpvs	pc, #-1073741800	; 0xc0000018
     884:	6b636f6c 	blvs	18dc63c <__bss_end__+0x8c063c>
     888:	61675f00 	cmnvs	r7, r0, lsl #30
     88c:	5f616d6d 	svcpl	0x00616d6d
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     894:	006d6167 	rsbeq	r6, sp, r7, ror #2
     898:	5f746c61 	svcpl	0x00746c61
     89c:	5f6b6c63 	svcpl	0x006b6c63
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	71657266 	cmnvc	r5, r6, ror #4
     8a4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     8a8:	6d64735f 	stclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     8ac:	5f00636d 	svcpl	0x0000636d
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     8b4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     8b8:	6f695f00 	svcvs	0x00695f00
     8bc:	5f007362 	svcpl	0x00007362
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
     8c4:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     8c8:	61006e67 	tstvs	r0, r7, ror #28
     8cc:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     8d4:	5f716572 	svcpl	0x00716572
     8d8:	5f746567 	svcpl	0x00746567
     8dc:	745f7363 	ldrbvc	r7, [pc], #-867	; 8e4 <__core1_unwind_stub-0xfff71c>
    return ALT_E_SUCCESS;
     8e0:	65636172 	strbvs	r6, [r3, #-370]!	; 0xfffffe8e
}
     8e4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     8e8:	4b4c435f 	blmi	131166c <__bss_end__+0x2f566c>
     8ec:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
     8f0:	706d0044 	rsbvc	r0, sp, r4, asr #32
     8f4:	6b6c6375 	blvs	1b196d0 <__bss_end__+0xafd6d0>
     8f8:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
     8fc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     900:	4b4c435f 	blmi	1311684 <__bss_end__+0x2f5684>
     904:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
     908:	5f43534f 	svcpl	0x0043534f
     90c:	445f5348 	ldrbmi	r5, [pc], #-840	; 914 <__core1_unwind_stub-0xfff6ec>
     910:	00325649 	eorseq	r5, r2, r9, asr #12
     914:	5f746c61 	svcpl	0x00746c61
     918:	5f6b6c63 	svcpl	0x006b6c63
     91c:	71657266 	cmnvc	r5, r6, ror #4
     920:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     924:	5f346c5f 	svcpl	0x00346c5f
     928:	4300706d 	movwmi	r7, #109	; 0x6d
     92c:	4b434f4c 	blmi	10d4664 <__bss_end__+0xb8664>
     930:	4e414d5f 	mcrmi	13, 2, r4, cr1, cr15, {2}
     934:	52454741 	subpl	r4, r5, #17039360	; 0x1040000
     938:	544c415f 	strbpl	r4, [ip], #-351	; 0xfffffea1
     93c:	5f415245 	svcpl	0x00415245
     940:	5f505247 	svcpl	0x00505247
     944:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     948:	61004749 	tstvs	r0, r9, asr #14
     94c:	665f746c 	ldrbvs	r7, [pc], -ip, ror #8
     950:	5f716572 	svcpl	0x00716572
     954:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
     958:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     95c:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     960:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     964:	655f7465 	ldrbvs	r7, [pc, #-1125]	; 507 <__core1_unwind_stub-0xfffaf9>
     968:	5f63616d 	svcpl	0x0063616d
     96c:	00707470 	rsbseq	r7, r0, r0, ror r4
     970:	63616d65 	cmnvs	r1, #6464	; 0x1940
     974:	5f6c7463 	svcpl	0x006c7463
     978:	63616d65 	cmnvs	r1, #6464	; 0x1940
     97c:	6c657330 	stclvs	3, cr7, [r5], #-192	; 0xffffff40
     980:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     984:	6b6c635f 	blvs	1b19708 <__bss_end__+0xafd708>
     988:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     98c:	65675f71 	strbvs	r5, [r7, #-3953]!	; 0xfffff08f
     990:	6d685f74 	stclvs	15, cr5, [r8, #-464]!	; 0xfffffe30
     994:	685f0063 	ldmdavs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
     998:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     99c:	65006f6e 	strvs	r6, [r0, #-3950]	; 0xfffff092
     9a0:	6363616d 	cmnvs	r3, #1073741851	; 0x4000001b
     9a4:	655f6c74 	ldrbvs	r6, [pc, #-3188]	; fffffd38 <__shm_end__+0xbffffd38>
     9a8:	3263616d 	rsbcc	r6, r3, #1073741851	; 0x4000001b
     9ac:	006c6573 	rsbeq	r6, ip, r3, ror r5
     9b0:	5f746c61 	svcpl	0x00746c61
     9b4:	5f6b6c63 	svcpl	0x006b6c63
     9b8:	71657266 	cmnvc	r5, r6, ror #4
     9bc:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     9c0:	5f346c5f 	svcpl	0x00346c5f
     9c4:	61007073 	tstvs	r0, r3, ror r0
     9c8:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     9cc:	655f6b6c 	ldrbvs	r6, [pc, #-2924]	; fffffe68 <__shm_end__+0xbffffe68>
     9d0:	635f7478 	cmpvs	pc, #120, 8	; 0x78000000
     9d4:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     9d8:	5f716572 	svcpl	0x00716572
     9dc:	00746573 	rsbseq	r6, r4, r3, ror r5
     9e0:	6f697067 	svcvs	0x00697067
     9e4:	5f766964 	svcpl	0x00766964
     9e8:	6f697067 	svcvs	0x00697067
     9ec:	6c636264 	sfmvs	f6, 2, [r3], #-400	; 0xfffffe70
     9f0:	775f006b 	ldrbvc	r0, [pc, -fp, rrx]
     9f4:	6f747263 	svcvs	0x00747263
     9f8:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
     9fc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     a00:	745f5f00 	ldrbvc	r5, [pc], #-3840	; a08 <__core1_unwind_stub-0xfff5f8>
     a04:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xfffff093
     a08:	5f007961 	svcpl	0x00007961
     a0c:	0077656e 	rsbseq	r6, r7, lr, ror #10
     a10:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
     a14:	735f0066 	cmpvc	pc, #102	; 0x66
     a18:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
     a1c:	775f0072 			; <UNDEFINED> instruction: 0x775f0072
     a20:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 89c <__core1_unwind_stub-0xfff764>
     a24:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
     a28:	00657461 	rsbeq	r7, r5, r1, ror #8
     a2c:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
     a30:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     a34:	61725f00 	cmnvs	r2, r0, lsl #30
     a38:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
     a3c:	00747865 	rsbseq	r7, r4, r5, ror #16
     a40:	616c665f 	cmnvs	ip, pc, asr r6
     a44:	76007367 	strvc	r7, [r0], -r7, ror #6
     a48:	00306f63 	eorseq	r6, r0, r3, ror #30
     a4c:	316f6376 	smccc	63030	; 0xf636
     a50:	6c705f00 	ldclvs	15, cr5, [r0], #-0
     a54:	65725f6c 	ldrbvs	r5, [r2, #-3948]!	; 0xfffff094
     a58:	615f0067 	cmpvs	pc, r7, rrx
     a5c:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     a60:	6e630074 	mcrvs	0, 3, r0, cr3, cr4, {3}
     a64:	63397274 	teqvs	r9, #116, 4	; 0x40000007
     a68:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
     a6c:	5f00746e 	svcpl	0x0000746e
     a70:	756f635f 	strbvc	r6, [pc, #-863]!	; 719 <__core1_unwind_stub-0xfff8e7>
     a74:	5f00746e 	svcpl	0x0000746e
     a78:	6e69616d 	powvsez	f6, f1, #5.0
     a7c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     a80:	745f5f00 	ldrbvc	r5, [pc], #-3840	; a88 <__core1_unwind_stub-0xfff578>
     a84:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
     a88:	61007961 	tstvs	r0, r1, ror #18
     a8c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     a90:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     a94:	5f716572 	svcpl	0x00716572
     a98:	5f746567 	svcpl	0x00746567
     a9c:	63616d65 	cmnvs	r1, #6464	; 0x1940
     aa0:	6c003130 	stfvss	f3, [r0], {48}	; 0x30
     aa4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     aa8:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
     aac:	5f00656c 	svcpl	0x0000656c
     ab0:	5f6d745f 	svcpl	0x006d745f
     ab4:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
     ab8:	79625f00 	stmdbvc	r2!, {r8, r9, sl, fp, ip, lr}^
     abc:	73736170 	cmnvc	r3, #112, 2
     ac0:	73616d5f 	cmnvc	r1, #6080	; 0x17c0
     ac4:	735f006b 	cmpvc	pc, #107	; 0x6b
     ac8:	00646565 	rsbeq	r6, r4, r5, ror #10
     acc:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
     ad0:	4c41006b 	mcrrmi	0, 6, r0, r1, cr11
     ad4:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     ad8:	414d5f4b 	cmpmi	sp, fp, asr #30
     adc:	505f4e49 	subspl	r4, pc, r9, asr #28
     ae0:	5f004c4c 	svcpl	0x00004c4c
     ae4:	736f7066 	cmnvc	pc, #102	; 0x66
     ae8:	5f00745f 	svcpl	0x0000745f
     aec:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     af0:	4c410062 	mcrrmi	0, 6, r0, r1, cr2
     af4:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     af8:	344c5f4b 	strbcc	r5, [ip], #-3915	; 0xfffff0b5
     afc:	0050535f 	subseq	r5, r0, pc, asr r3
     b00:	74626d5f 	strbtvc	r6, [r2], #-3423	; 0xfffff2a1
     b04:	5f63776f 	svcpl	0x0063776f
     b08:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     b0c:	6f6e0065 	svcvs	0x006e0065
     b10:	76696463 	strbtvc	r6, [r9], -r3, ror #8
     b14:	6d346c5f 	ldcvs	12, cr6, [r4, #-380]!	; 0xfffffe84
     b18:	636e6961 	cmnvs	lr, #1589248	; 0x184000
     b1c:	61006b6c 	tstvs	r0, ip, ror #22
     b20:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     b24:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     b28:	5f716572 	svcpl	0x00716572
     b2c:	5f746567 	svcpl	0x00746567
     b30:	0075706d 	rsbseq	r7, r5, sp, rrx
     b34:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     b38:	6b6c6337 	blvs	1b1981c <__bss_end__+0xafd81c>
     b3c:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
     b40:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     b44:	6f6c2067 	svcvs	0x006c2067
     b48:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     b4c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     b50:	2064656e 	rsbcs	r6, r4, lr, ror #10
     b54:	00746e69 	rsbseq	r6, r4, r9, ror #28
     b58:	5f544c41 	svcpl	0x00544c41
     b5c:	5f4b4c43 	svcpl	0x004b4c43
     b60:	5f434d48 	svcpl	0x00434d48
     b64:	5f4c4c50 	svcpl	0x004c4c50
     b68:	00464552 	subeq	r4, r6, r2, asr r5
     b6c:	6f73645f 	svcvs	0x0073645f
     b70:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
     b74:	00656c64 	rsbeq	r6, r5, r4, ror #24
     b78:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     b7c:	6b6c6336 	blvs	1b1985c <__bss_end__+0xafd85c>
     b80:	746e635f 	strbtvc	r6, [lr], #-863	; 0xfffffca1
     b84:	61725f00 	cmnvs	r2, r0, lsl #30
     b88:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
     b8c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     b90:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
     b94:	6c625f00 	stclvs	15, cr5, [r2], #-0
     b98:	7a69736b 	bvc	1a5d94c <__bss_end__+0xa4194c>
     b9c:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
     ba0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     ba4:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
     ba8:	5f6b636f 	svcpl	0x006b636f
     bac:	61736964 	cmnvs	r3, r4, ror #18
     bb0:	00656c62 	rsbeq	r6, r5, r2, ror #24
     bb4:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
     bb8:	735f0065 	cmpvc	pc, #101	; 0x65
     bbc:	6f747274 	svcvs	0x00747274
     bc0:	616c5f6b 	cmnvs	ip, fp, ror #30
     bc4:	5f007473 	svcpl	0x00007473
     bc8:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
     bcc:	5f63776f 	svcpl	0x0063776f
     bd0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     bd4:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     bd8:	6b636f6c 	blvs	18dc990 <__bss_end__+0x8c0990>
     bdc:	2f00745f 	svccs	0x0000745f
     be0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     be4:	726f6d2f 	rsbvc	r6, pc, #3008	; 0xbc0
     be8:	696c6c65 	stmdbvs	ip!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     bec:	746e612f 	strbtvc	r6, [lr], #-303	; 0xfffffed1
     bf0:	31612f6f 	cmncc	r1, pc, ror #30
     bf4:	63695f30 	cmnvs	r9, #48, 30	; 0xc0
     bf8:	31612f73 	smccc	4851	; 0x12f3
     bfc:	6d665f30 	stclvs	15, cr5, [r6, #-192]!	; 0xffffff40
     c00:	30303463 	eorscc	r3, r0, r3, ror #8
     c04:	666f732f 	strbtvs	r7, [pc], -pc, lsr #6
     c08:	72617774 	rsbvc	r7, r1, #116, 14	; 0x1d00000
     c0c:	70682f65 	rsbvc	r2, r8, r5, ror #30
     c10:	6d462d73 	stclvs	13, cr2, [r6, #-460]	; 0xfffffe34
     c14:	30303463 	eorscc	r3, r0, r3, ror #8
     c18:	2d77732d 	ldclcs	3, cr7, [r7, #-180]!	; 0xffffff4c
     c1c:	2f313076 	svccs	0x00313076
     c20:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
     c24:	00454c49 	subeq	r4, r5, r9, asr #24
     c28:	71657266 	cmnvc	r5, r6, ror #4
     c2c:	5f003436 	svcpl	0x00003436
     c30:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
     c34:	5f657461 	svcpl	0x00657461
     c38:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
     c3c:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     c40:	53515f4b 	cmppl	r1, #300	; 0x12c
     c44:	41004950 	tstmi	r0, r0, asr r9
     c48:	475f544c 	ldrbmi	r5, [pc, -ip, asr #8]
     c4c:	4f5f5450 	svcmi	0x005f5450
     c50:	5f314353 	svcpl	0x00314353
     c54:	30524d54 	subscc	r4, r2, r4, asr sp
     c58:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     c5c:	5450475f 	ldrbpl	r4, [r0], #-1887	; 0xfffff8a1
     c60:	43534f5f 	cmpmi	r3, #380	; 0x17c
     c64:	4d545f31 	ldclmi	15, cr5, [r4, #-196]	; 0xffffff3c
     c68:	61003152 	tstvs	r0, r2, asr r1
     c6c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     c70:	695f6b6c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     c74:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
     c78:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     c7c:	65685f64 	strbvs	r5, [r8, #-3940]!	; 0xfffff09c
     c80:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
     c84:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
     c88:	72730038 	rsbsvc	r0, r3, #56	; 0x38
     c8c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
     c90:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
     c94:	77007265 	strvc	r7, [r0, -r5, ror #4]
     c98:	5f746e69 	svcpl	0x00746e69
     c9c:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
     ca0:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     ca4:	504d5f4b 	subpl	r5, sp, fp, asr #30
     ca8:	6c610055 	stclvs	0, cr0, [r1], #-340	; 0xfffffeac
     cac:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     cb0:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     cb4:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     cb8:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
     cbc:	755f6632 	ldrbvc	r6, [pc, #-1586]	; 692 <__core1_unwind_stub-0xfff96e>
     cc0:	30726573 	rsbscc	r6, r2, r3, ror r5
     cc4:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     cc8:	68735f6e 	ldmdavs	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     ccc:	00746669 	rsbseq	r6, r4, r9, ror #12
     cd0:	6375706d 	cmnvs	r5, #109	; 0x6d
     cd4:	735f6b6c 	cmpvc	pc, #108, 22	; 0x1b000
     cd8:	41006372 	tstmi	r0, r2, ror r3
     cdc:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     ce0:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
     ce4:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
     ce8:	5f454552 	svcpl	0x00454552
     cec:	004b4c43 	subeq	r4, fp, r3, asr #24
     cf0:	5f746c61 	svcpl	0x00746c61
     cf4:	5f6b6c63 	svcpl	0x006b6c63
     cf8:	71657266 	cmnvc	r5, r6, ror #4
     cfc:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     d00:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
     d04:	6c705f6e 	ldclvs	15, cr5, [r0], #-440	; 0xfffffe48
     d08:	6c61006c 	stclvs	0, cr0, [r1], #-432	; 0xfffffe50
     d0c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     d10:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     d14:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     d18:	6f5f7465 	svcvs	0x005f7465
     d1c:	00316373 	eorseq	r6, r1, r3, ror r3
     d20:	5f544c41 	svcpl	0x00544c41
     d24:	5f4b4c43 	svcpl	0x004b4c43
     d28:	43414d45 	movtmi	r4, #7493	; 0x1d45
     d2c:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
     d30:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     d34:	4d455f4b 	stclmi	15, cr5, [r5, #-300]	; 0xfffffed4
     d38:	00314341 	eorseq	r4, r1, r1, asr #6
     d3c:	5f544c41 	svcpl	0x00544c41
     d40:	5f4b4c43 	svcpl	0x004b4c43
     d44:	43414d45 	movtmi	r4, #7493	; 0x1d45
     d48:	6c610032 	stclvs	0, cr0, [r1], #-200	; 0xffffff38
     d4c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     d50:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     d54:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     d58:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
     d5c:	64705f73 	ldrbtvs	r5, [r0], #-3955	; 0xfffff08d
     d60:	5f006762 	svcpl	0x00006762
     d64:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
     d68:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
     d6c:	00657461 	rsbeq	r7, r5, r1, ror #8
     d70:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     d74:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     d78:	6f6e0074 	svcvs	0x006e0074
     d7c:	76696463 	strbtvc	r6, [r9], -r3, ror #8
     d80:	7473635f 	ldrbtvc	r6, [r3], #-863	; 0xfffffca1
     d84:	65636172 	strbvs	r6, [r3, #-370]!	; 0xfffffe8e
     d88:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     d8c:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     d90:	6b6c6333 	blvs	1b19a64 <__bss_end__+0xafda64>
     d94:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
     d98:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
     d9c:	5f343674 	svcpl	0x00343674
     da0:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
     da4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     da8:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
     dac:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
     db0:	6d5f7465 	cfldrdvs	mvd7, [pc, #-404]	; c24 <__core1_unwind_stub-0xfff3dc>
     db4:	705f7570 	subsvc	r7, pc, r0, ror r5	; <UNPREDICTABLE>
     db8:	70697265 	rsbvc	r7, r9, r5, ror #4
     dbc:	6e630068 	cdpvs	0, 6, cr0, cr3, cr8, {3}
     dc0:	63327274 	teqvs	r2, #116, 4	; 0x40000007
     dc4:	635f6b6c 	cmpvs	pc, #108, 22	; 0x1b000
     dc8:	7300746e 	movwvc	r7, #1134	; 0x46e
     dcc:	706f6275 	rsbvc	r6, pc, r5, ror r2	; <UNPREDICTABLE>
     dd0:	67726174 			; <UNDEFINED> instruction: 0x67726174
     dd4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     dd8:	4b4c435f 	blmi	1311b5c <__bss_end__+0x2f5b5c>
     ddc:	4d44535f 	stclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     de0:	5f00434d 	svcpl	0x0000434d
     de4:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
     de8:	00736570 	rsbseq	r6, r3, r0, ror r5
     dec:	70726570 	rsbsvc	r6, r2, r0, ror r5
     df0:	5f006c6c 	svcpl	0x00006c6c
     df4:	5f6d745f 	svcpl	0x006d745f
     df8:	72616579 	rsbvc	r6, r1, #507510784	; 0x1e400000
     dfc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     e00:	4b4c435f 	blmi	1311b84 <__bss_end__+0x2f5b84>
     e04:	626c5f00 	rsbvs	r5, ip, #0, 30
     e08:	7a697366 	bvc	1a5dba8 <__bss_end__+0xa41ba8>
     e0c:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^	; <UNPREDICTABLE>
     e10:	5f00636e 	svcpl	0x0000636e
     e14:	00646e69 	rsbeq	r6, r4, r9, ror #28
     e18:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
     e1c:	5f006675 	svcpl	0x00006675
     e20:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
     e24:	5f006178 	svcpl	0x00006178
     e28:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     e2c:	4c430066 	mcrrmi	0, 6, r0, r3, cr6
     e30:	5f4b434f 	svcpl	0x004b434f
     e34:	52554f53 	subspl	r4, r5, #332	; 0x14c
     e38:	435f4543 	cmpmi	pc, #281018368	; 0x10c00000
     e3c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     e40:	6e630047 	cdpvs	0, 6, cr0, cr3, cr7, {2}
     e44:	35317274 	ldrcc	r7, [r1, #-628]!	; 0xfffffd8c
     e48:	5f6b6c63 	svcpl	0x006b6c63
     e4c:	00746e63 	rsbseq	r6, r4, r3, ror #28
     e50:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     e54:	00656c61 	rsbeq	r6, r5, r1, ror #24
     e58:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15	; <UNPREDICTABLE>
     e5c:	00676e6f 	rsbeq	r6, r7, pc, ror #28
     e60:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     e64:	745f3233 	ldrbvc	r3, [pc], #-563	; e6c <__core1_unwind_stub-0xfff194>
     e68:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     e6c:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
     e70:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     e74:	4b4c435f 	blmi	1311bf8 <__bss_end__+0x2f5bf8>
     e78:	4632535f 			; <UNDEFINED> instruction: 0x4632535f
     e7c:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0xfffffaa1
     e80:	6e003052 	mcrvs	0, 0, r3, cr0, cr2, {2}
     e84:	6964636f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     e88:	73635f76 	cmnvc	r3, #472	; 0x1d8
     e8c:	67626470 			; <UNDEFINED> instruction: 0x67626470
     e90:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     e94:	5f544c41 	svcpl	0x00544c41
     e98:	5f4b4c43 	svcpl	0x004b4c43
     e9c:	4d5f344c 	cfldrdmi	mvd3, [pc, #-304]	; d74 <__core1_unwind_stub-0xfff28c>
     ea0:	004e4941 	subeq	r4, lr, r1, asr #18
     ea4:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     ea8:	5f00745f 	svcpl	0x0000745f
     eac:	00646461 	rsbeq	r6, r4, r1, ror #8
     eb0:	5f544c41 	svcpl	0x00544c41
     eb4:	5f4b4c43 	svcpl	0x004b4c43
     eb8:	4d495053 	stclmi	0, cr5, [r9, #-332]	; 0xfffffeb4
     ebc:	6f687300 	svcvs	0x00687300
     ec0:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     ec4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     ec8:	2064656e 	rsbcs	r6, r4, lr, ror #10
     ecc:	00746e69 	rsbseq	r6, r4, r9, ror #28
     ed0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     ed4:	756f685f 	strbvc	r6, [pc, #-2143]!	; 67d <__core1_unwind_stub-0xfff983>
     ed8:	62630072 	rsbvs	r0, r3, #114	; 0x72
     edc:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     ee0:	5f63736f 	svcpl	0x0063736f
     ee4:	645f7368 	ldrbvs	r7, [pc], #-872	; eec <__core1_unwind_stub-0xfff114>
     ee8:	00327669 	eorseq	r7, r2, r9, ror #12
     eec:	5f544c41 	svcpl	0x00544c41
     ef0:	5f545047 	svcpl	0x00545047
     ef4:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     ef8:	00655f52 	rsbeq	r5, r5, r2, asr pc
     efc:	5f746c61 	svcpl	0x00746c61
     f00:	5f6b6c63 	svcpl	0x006b6c63
     f04:	71657266 	cmnvc	r5, r6, ror #4
     f08:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     f0c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     f10:	6b6c635f 	blvs	1b19c94 <__bss_end__+0xafdc94>
     f14:	5f73695f 	svcpl	0x0073695f
     f18:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     f1c:	0064656c 	rsbeq	r6, r4, ip, ror #10
     f20:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
     f24:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
     f28:	735f7363 	cmpvc	pc, #-1946157055	; 0x8c000001
     f2c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     f30:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     f34:	655f0065 	ldrbvs	r0, [pc, #-101]	; ed7 <__core1_unwind_stub-0xfff129>
     f38:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     f3c:	616d5f65 	cmnvs	sp, r5, ror #30
     f40:	63006b73 	movwvs	r6, #2931	; 0xb73
     f44:	3972746e 	ldmdbcc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     f48:	5f6b6c63 	svcpl	0x006b6c63
     f4c:	00637273 	rsbeq	r7, r3, r3, ror r2
     f50:	316f6376 	smccc	63030	; 0xf636
     f54:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
     f58:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     f5c:	00706d65 	rsbseq	r6, r0, r5, ror #26
     f60:	616e665f 	cmnvs	lr, pc, asr r6
     f64:	00736772 	rsbseq	r6, r3, r2, ror r7
     f68:	5f637273 	svcpl	0x00637273
     f6c:	6d5f6e69 	ldclvs	14, cr6, [pc, #-420]	; dd0 <__core1_unwind_stub-0xfff230>
     f70:	006e6961 	rsbeq	r6, lr, r1, ror #18
     f74:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     f78:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
     f7c:	63007473 	movwvs	r7, #1139	; 0x473
     f80:	3872746e 	ldmdacc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     f84:	5f6b6c63 	svcpl	0x006b6c63
     f88:	00746e63 	rsbseq	r6, r4, r3, ror #28
     f8c:	5f544c41 	svcpl	0x00544c41
     f90:	5f4b4c43 	svcpl	0x004b4c43
     f94:	4d5f334c 	ldclmi	3, cr3, [pc, #-304]	; e6c <__core1_unwind_stub-0xfff194>
     f98:	004e4941 	subeq	r4, lr, r1, asr #18
     f9c:	5f544c41 	svcpl	0x00544c41
     fa0:	5f4b4c43 	svcpl	0x004b4c43
     fa4:	5f463253 	svcpl	0x00463253
     fa8:	52455355 	subpl	r5, r5, #1409286145	; 0x54000001
     fac:	5f5f0031 	svcpl	0x005f0031
     fb0:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; de8 <__core1_unwind_stub-0xfff218>
     fb4:	5f006e69 	svcpl	0x00006e69
     fb8:	64746567 	ldrbtvs	r6, [r4], #-1383	; 0xfffffa99
     fbc:	5f657461 	svcpl	0x00657461
     fc0:	00727265 	rsbseq	r7, r2, r5, ror #4
     fc4:	5f544c41 	svcpl	0x00544c41
     fc8:	5f4b4c43 	svcpl	0x004b4c43
     fcc:	5f55504d 	svcpl	0x0055504d
     fd0:	49524550 	ldmdbmi	r2, {r4, r6, r8, sl, lr}^
     fd4:	61004850 	tstvs	r0, r0, asr r8
     fd8:	315f746c 	cmpcc	pc, ip, ror #8
     fdc:	30353536 	eorscc	r3, r5, r6, lsr r5
     fe0:	7561625f 	strbvc	r6, [r1, #-607]!	; 0xfffffda1
     fe4:	74617264 	strbtvc	r7, [r1], #-612	; 0xfffffd9c
     fe8:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
     fec:	61620074 	smcvs	8196	; 0x2004
     ff0:	61726475 	cmnvs	r2, r5, ror r4
     ff4:	61006574 	tstvs	r0, r4, ror r5
     ff8:	315f746c 	cmpcc	pc, ip, ror #8
     ffc:	30353536 	eorscc	r3, r5, r6, lsr r5
    1000:	7669645f 			; <UNDEFINED> instruction: 0x7669645f
    1004:	726f7369 	rsbvc	r7, pc, #-1543503871	; 0xa4000001
    1008:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    100c:	7a697300 	bvc	1a5dc14 <__bss_end__+0xa41c14>
    1010:	00745f65 	rsbseq	r5, r4, r5, ror #30
    1014:	5f746c61 	svcpl	0x00746c61
    1018:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    101c:	69665f30 	stmdbvs	r6!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    1020:	635f6f66 	cmpvs	pc, #408	; 0x198
    1024:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1028:	0078745f 	rsbseq	r7, r8, pc, asr r4
    102c:	5f544c41 	svcpl	0x00544c41
    1030:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1034:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    1038:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 1040 <__core1_unwind_stub-0xffefc0>
    103c:	47474952 	smlsldmi	r4, r7, r2, r9
    1040:	545f5245 	ldrbpl	r5, [pc], #-581	; 1048 <__core1_unwind_stub-0xffefb8>
    1044:	4d455f58 	stclmi	15, cr5, [r5, #-352]	; 0xfffffea0
    1048:	00595450 	subseq	r5, r9, r0, asr r4
    104c:	5f746c61 	svcpl	0x00746c61
    1050:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1054:	6f6c5f30 	svcvs	0x006c5f30
    1058:	6162706f 	cmnvs	r2, pc, rrx
    105c:	655f6b63 	ldrbvs	r6, [pc, #-2915]	; 501 <__core1_unwind_stub-0xfffaff>
    1060:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1064:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    1068:	36315f54 	shsaxcc	r5, r1, r4
    106c:	5f303535 	svcpl	0x00303535
    1070:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1074:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    1078:	3434315f 	ldrtcc	r3, [r4], #-351	; 0xfffffea1
    107c:	61003030 	tstvs	r0, r0, lsr r0
    1080:	315f746c 	cmpcc	pc, ip, ror #8
    1084:	30353536 	eorscc	r3, r5, r6, lsr r5
    1088:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    108c:	65725f6f 	ldrbvs	r5, [r2, #-3951]!	; 0xfffff091
    1090:	74006461 	strvc	r6, [r0], #-1121	; 0xfffffb9f
    1094:	67676972 			; <UNDEFINED> instruction: 0x67676972
    1098:	61007265 	tstvs	r0, r5, ror #4
    109c:	315f746c 	cmpcc	pc, ip, ror #8
    10a0:	30353536 	eorscc	r3, r5, r6, lsr r5
    10a4:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    10a8:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    10ac:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    10b0:	0078745f 	rsbseq	r7, r8, pc, asr r4
    10b4:	5f544c41 	svcpl	0x00544c41
    10b8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    10bc:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    10c0:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 10c8 <__core1_unwind_stub-0xffef38>
    10c4:	47474952 	smlsldmi	r4, r7, r2, r9
    10c8:	545f5245 	ldrbpl	r5, [pc], #-581	; 10d0 <__core1_unwind_stub-0xffef30>
    10cc:	4c415f58 	mcrrmi	15, 5, r5, r1, cr8
    10d0:	54534f4d 	ldrbpl	r4, [r3], #-3917	; 0xfffff0b3
    10d4:	504d455f 	subpl	r4, sp, pc, asr r5
    10d8:	41005954 	tstmi	r0, r4, asr r9
    10dc:	315f544c 	cmpcc	pc, ip, asr #8
    10e0:	30353536 	eorscc	r3, r5, r6, lsr r5
    10e4:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    10e8:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    10ec:	36335f45 	ldrtcc	r5, [r3], -r5, asr #30
    10f0:	61003030 	tstvs	r0, r0, lsr r0
    10f4:	315f746c 	cmpcc	pc, ip, ror #8
    10f8:	30353536 	eorscc	r3, r5, r6, lsr r5
    10fc:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    1100:	72775f6f 	rsbsvc	r5, r7, #444	; 0x1bc
    1104:	5f657469 	svcpl	0x00657469
    1108:	65666173 	strbvs	r6, [r6, #-371]!	; 0xfffffe8d
    110c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1110:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1114:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    1118:	5f6f6669 	svcpl	0x006f6669
    111c:	6576656c 	ldrbvs	r6, [r6, #-1388]!	; 0xfffffa94
    1120:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
    1124:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1128:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    112c:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    1130:	36315f54 	shsaxcc	r5, r1, r4
    1134:	5f303535 	svcpl	0x00303535
    1138:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    113c:	53544942 	cmppl	r4, #1081344	; 0x108000
    1140:	4100315f 	tstmi	r0, pc, asr r1
    1144:	315f544c 	cmpcc	pc, ip, asr #8
    1148:	30353536 	eorscc	r3, r5, r6, lsr r5
    114c:	4f54535f 	svcmi	0x0054535f
    1150:	54494250 	strbpl	r4, [r9], #-592	; 0xfffffdb0
    1154:	00325f53 	eorseq	r5, r2, r3, asr pc
    1158:	5f544c41 	svcpl	0x00544c41
    115c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1160:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    1164:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 116c <__core1_unwind_stub-0xffee94>
    1168:	47474952 	smlsldmi	r4, r7, r2, r9
    116c:	545f5245 	ldrbpl	r5, [pc], #-581	; 1174 <__core1_unwind_stub-0xffee8c>
    1170:	55515f58 	ldrbpl	r5, [r1, #-3928]	; 0xfffff0a8
    1174:	45545241 	ldrbmi	r5, [r4, #-577]	; 0xfffffdbf
    1178:	55465f52 	strbpl	r5, [r6, #-3922]	; 0xfffff0ae
    117c:	61004c4c 	tstvs	r0, ip, asr #24
    1180:	315f746c 	cmpcc	pc, ip, ror #8
    1184:	30353536 	eorscc	r3, r5, r6, lsr r5
    1188:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    118c:	69735f6f 	ldmdbvs	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1190:	675f657a 			; <UNDEFINED> instruction: 0x675f657a
    1194:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
    1198:	6c610078 	stclvs	0, cr0, [r1], #-480	; 0xfffffe20
    119c:	36315f74 	shsub16cc	r5, r1, r4
    11a0:	5f303535 	svcpl	0x00303535
    11a4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    11a8:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    11ac:	36315f74 	shsub16cc	r5, r1, r4
    11b0:	5f303535 	svcpl	0x00303535
    11b4:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    11b8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    11bc:	5f6c6f72 	svcpl	0x006c6f72
    11c0:	61736964 	cmnvs	r3, r4, ror #18
    11c4:	00656c62 	rsbeq	r6, r5, r2, ror #24
    11c8:	5f746c61 	svcpl	0x00746c61
    11cc:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    11d0:	696c5f30 	stmdbvs	ip!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    11d4:	735f656e 	cmpvc	pc, #461373440	; 0x1b800000
    11d8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    11dc:	65675f73 	strbvs	r5, [r7, #-3955]!	; 0xfffff08d
    11e0:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    11e4:	36315f74 	shsub16cc	r5, r1, r4
    11e8:	5f303535 	svcpl	0x00303535
    11ec:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    11f0:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
    11f4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    11f8:	7274645f 	rsbsvc	r6, r4, #1593835520	; 0x5f000000
    11fc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1200:	6165725f 	cmnvs	r5, pc, asr r2
    1204:	6f775f64 	svcvs	0x00775f64
    1208:	685f6472 	ldmdavs	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    120c:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    1210:	6c610072 	stclvs	0, cr0, [r1], #-456	; 0xfffffe38
    1214:	36315f74 	shsub16cc	r5, r1, r4
    1218:	5f303535 	svcpl	0x00303535
    121c:	5f746e69 	svcpl	0x00746e69
    1220:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1224:	675f7375 			; <UNDEFINED> instruction: 0x675f7375
    1228:	41007465 	tstmi	r0, r5, ror #8
    122c:	315f544c 	cmpcc	pc, ip, asr #8
    1230:	30353536 	eorscc	r3, r5, r6, lsr r5
    1234:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1238:	4154535f 	cmpmi	r4, pc, asr r3
    123c:	5f535554 	svcpl	0x00535554
    1240:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
    1244:	6c61004d 	stclvs	0, cr0, [r1], #-308	; 0xfffffecc
    1248:	36315f74 	shsub16cc	r5, r1, r4
    124c:	5f303535 	svcpl	0x00303535
    1250:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    1254:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
    1258:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    125c:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    1260:	6c610031 	stclvs	0, cr0, [r1], #-196	; 0xffffff3c
    1264:	36315f74 	shsub16cc	r5, r1, r4
    1268:	5f303535 	svcpl	0x00303535
    126c:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    1270:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
    1274:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1278:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    127c:	6c610032 	stclvs	0, cr0, [r1], #-200	; 0xffffff38
    1280:	36315f74 	shsub16cc	r5, r1, r4
    1284:	5f303535 	svcpl	0x00303535
    1288:	5f726569 	svcpl	0x00726569
    128c:	6b73616d 	blvs	1cd9848 <__bss_end__+0xcbd848>
    1290:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1294:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    1298:	00726570 	rsbseq	r6, r2, r0, ror r5
    129c:	5f544c41 	svcpl	0x00544c41
    12a0:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    12a4:	54535f30 	ldrbpl	r5, [r3], #-3888	; 0xfffff0d0
    12a8:	4942504f 	stmdbmi	r2, {r0, r1, r2, r3, r6, ip, lr}^
    12ac:	655f5354 	ldrbvs	r5, [pc, #-852]	; f60 <__core1_unwind_stub-0xfff0a0>
    12b0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    12b4:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    12b8:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    12bc:	655f746e 	ldrbvs	r7, [pc, #-1134]	; e56 <__core1_unwind_stub-0xfff1aa>
    12c0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    12c4:	78745f65 	ldmdavc	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    12c8:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    12cc:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    12d0:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    12d4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    12d8:	5f746c61 	svcpl	0x00746c61
    12dc:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    12e0:	696c5f30 	stmdbvs	ip!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    12e4:	625f656e 	subsvs	r6, pc, #461373440	; 0x1b800000
    12e8:	6b616572 	blvs	185a8b8 <__bss_end__+0x83e8b8>
    12ec:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    12f0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    12f4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    12f8:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    12fc:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    1300:	5f6f6669 	svcpl	0x006f6669
    1304:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    1308:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    130c:	0078745f 	rsbseq	r7, r8, pc, asr r4
    1310:	5f544c41 	svcpl	0x00544c41
    1314:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1318:	54535f30 	ldrbpl	r5, [r3], #-3888	; 0xfffff0d0
    131c:	4942504f 	stmdbmi	r2, {r0, r1, r2, r3, r6, ip, lr}^
    1320:	745f5354 	ldrbvc	r5, [pc], #-852	; 1328 <__core1_unwind_stub-0xffecd8>
    1324:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1328:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    132c:	425f3035 	subsmi	r3, pc, #53	; 0x35
    1330:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1334:	5f455441 	svcpl	0x00455441
    1338:	41003035 	tstmi	r0, r5, lsr r0
    133c:	315f544c 	cmpcc	pc, ip, asr #8
    1340:	30353536 	eorscc	r3, r5, r6, lsr r5
    1344:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
    1348:	52545f4f 	subspl	r5, r4, #316	; 0x13c
    134c:	45474749 	strbmi	r4, [r7, #-1865]	; 0xfffff8b7
    1350:	58545f52 	ldmdapl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1354:	4c41485f 	mcrrmi	8, 5, r4, r1, cr15
    1358:	55465f46 	strbpl	r5, [r6, #-3910]	; 0xfffff0ba
    135c:	61004c4c 	tstvs	r0, ip, asr #24
    1360:	315f746c 	cmpcc	pc, ip, ror #8
    1364:	30353536 	eorscc	r3, r5, r6, lsr r5
    1368:	7265695f 	rsbvc	r6, r5, #1556480	; 0x17c000
    136c:	73616d5f 	cmnvc	r1, #6080	; 0x17c0
    1370:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
    1374:	65685f72 	strbvs	r5, [r8, #-3954]!	; 0xfffff08e
    1378:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
    137c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1380:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1384:	465f3035 			; <UNDEFINED> instruction: 0x465f3035
    1388:	5f4f4649 	svcpl	0x004f4649
    138c:	47495254 	smlsldmi	r5, r9, r4, r2
    1390:	5f524547 	svcpl	0x00524547
    1394:	515f5852 	cmppl	pc, r2, asr r8	; <UNPREDICTABLE>
    1398:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    139c:	465f5245 	ldrbmi	r5, [pc], -r5, asr #4
    13a0:	004c4c55 	subeq	r4, ip, r5, asr ip
    13a4:	5f746c61 	svcpl	0x00746c61
    13a8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    13ac:	6f6d5f30 	svcvs	0x006d5f30
    13b0:	5f6d6564 	svcpl	0x006d6564
    13b4:	61736964 	cmnvs	r3, r4, ror #18
    13b8:	5f656c62 	svcpl	0x00656c62
    13bc:	3174756f 	cmncc	r4, pc, ror #10
    13c0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    13c4:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    13c8:	6d5f3035 	ldclvs	0, cr3, [pc, #-212]	; 12fc <__core1_unwind_stub-0xffed04>
    13cc:	6d65646f 	cfstrdvs	mvd6, [r5, #-444]!	; 0xfffffe44
    13d0:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    13d4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    13d8:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    13dc:	77680032 			; <UNDEFINED> instruction: 0x77680032
    13e0:	2f62696c 	svccs	0x0062696c
    13e4:	2f637273 	svccs	0x00637273
    13e8:	676d7768 	strbvs	r7, [sp, -r8, ror #14]!
    13ec:	6c612f72 	stclvs	15, cr2, [r1], #-456	; 0xfffffe38
    13f0:	36315f74 	shsub16cc	r5, r1, r4
    13f4:	5f303535 	svcpl	0x00303535
    13f8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    13fc:	4100632e 	tstmi	r0, lr, lsr #6
    1400:	315f544c 	cmpcc	pc, ip, asr #8
    1404:	30353536 	eorscc	r3, r5, r6, lsr r5
    1408:	5645445f 			; <UNDEFINED> instruction: 0x5645445f
    140c:	5f454349 	svcpl	0x00454349
    1410:	45544c41 	ldrbmi	r4, [r4, #-3137]	; 0xfffff3bf
    1414:	315f4152 	cmpcc	pc, r2, asr r1	; <UNPREDICTABLE>
    1418:	30353536 	eorscc	r3, r5, r6, lsr r5
    141c:	5241555f 	subpl	r5, r1, #398458880	; 0x17c00000
    1420:	4c410054 	mcrrmi	0, 5, r0, r1, cr4
    1424:	36315f54 	shsaxcc	r5, r1, r4
    1428:	5f303535 	svcpl	0x00303535
    142c:	41544144 	cmpmi	r4, r4, asr #2
    1430:	53544942 	cmppl	r4, #1081344	; 0x108000
    1434:	4100355f 	tstmi	r0, pc, asr r5
    1438:	315f544c 	cmpcc	pc, ip, asr #8
    143c:	30353536 	eorscc	r3, r5, r6, lsr r5
    1440:	5441445f 	strbpl	r4, [r1], #-1119	; 0xfffffba1
    1444:	54494241 	strbpl	r4, [r9], #-577	; 0xfffffdbf
    1448:	00365f53 	eorseq	r5, r6, r3, asr pc
    144c:	5f544c41 	svcpl	0x00544c41
    1450:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1454:	41445f30 	cmpmi	r4, r0, lsr pc
    1458:	49424154 	stmdbmi	r2, {r2, r4, r6, r8, lr}^
    145c:	375f5354 			; <UNDEFINED> instruction: 0x375f5354
    1460:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1464:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1468:	445f3035 	ldrbmi	r3, [pc], #-53	; 1470 <__core1_unwind_stub-0xffeb90>
    146c:	42415441 	submi	r5, r1, #1090519040	; 0x41000000
    1470:	5f535449 	svcpl	0x00535449
    1474:	4c410038 	mcrrmi	0, 3, r0, r1, cr8
    1478:	36315f54 	shsaxcc	r5, r1, r4
    147c:	5f303535 	svcpl	0x00303535
    1480:	4f464946 	svcmi	0x00464946
    1484:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1488:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    148c:	5f58525f 	svcpl	0x0058525f
    1490:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    1494:	36315f74 	shsub16cc	r5, r1, r4
    1498:	5f303535 	svcpl	0x00303535
    149c:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    14a0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    14a4:	5f6c6f72 	svcpl	0x006c6f72
    14a8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    14ac:	6100656c 	tstvs	r0, ip, ror #10
    14b0:	315f746c 	cmpcc	pc, ip, ror #8
    14b4:	30353536 	eorscc	r3, r5, r6, lsr r5
    14b8:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    14bc:	656c5f6f 	strbvs	r5, [ip, #-3951]!	; 0xfffff091
    14c0:	5f6c6576 	svcpl	0x006c6576
    14c4:	5f746567 	svcpl	0x00746567
    14c8:	61007874 	tstvs	r0, r4, ror r8
    14cc:	315f746c 	cmpcc	pc, ip, ror #8
    14d0:	30353536 	eorscc	r3, r5, r6, lsr r5
    14d4:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 14dc <__core1_unwind_stub-0xffeb24>
    14d8:	645f6d65 	ldrbvs	r6, [pc], #-3429	; 14e0 <__core1_unwind_stub-0xffeb20>
    14dc:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    14e0:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
    14e4:	61007374 	tstvs	r0, r4, ror r3
    14e8:	315f746c 	cmpcc	pc, ip, ror #8
    14ec:	30353536 	eorscc	r3, r5, r6, lsr r5
    14f0:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    14f4:	6e655f6f 	cdpvs	15, 6, cr5, cr5, cr15, {3}
    14f8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    14fc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1500:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1504:	445f3035 	ldrbmi	r3, [pc], #-53	; 150c <__core1_unwind_stub-0xffeaf4>
    1508:	42415441 	submi	r5, r1, #1090519040	; 0x41000000
    150c:	5f535449 	svcpl	0x00535449
    1510:	656c0065 	strbvs	r0, [ip, #-101]!	; 0xffffff9b
    1514:	006c6576 	rsbeq	r6, ip, r6, ror r5
    1518:	636f6c63 	cmnvs	pc, #25344	; 0x6300
    151c:	72665f6b 	rsbvc	r5, r6, #428	; 0x1ac
    1520:	61007165 	tstvs	r0, r5, ror #2
    1524:	315f746c 	cmpcc	pc, ip, ror #8
    1528:	30353536 	eorscc	r3, r5, r6, lsr r5
    152c:	6e696c5f 	mcrvs	12, 3, r6, cr9, cr15, {2}
    1530:	72625f65 	rsbvc	r5, r2, #404	; 0x194
    1534:	5f6b6165 	svcpl	0x006b6165
    1538:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    153c:	4100656c 	tstmi	r0, ip, ror #10
    1540:	315f544c 	cmpcc	pc, ip, asr #8
    1544:	30353536 	eorscc	r3, r5, r6, lsr r5
    1548:	5441445f 	strbpl	r4, [r1], #-1119	; 0xfffffba1
    154c:	54494241 	strbpl	r4, [r9], #-577	; 0xfffffdbf
    1550:	00745f53 	rsbseq	r5, r4, r3, asr pc
    1554:	5f746c61 	svcpl	0x00746c61
    1558:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    155c:	6f6d5f30 	svcvs	0x006d5f30
    1560:	5f6d6564 	svcpl	0x006d6564
    1564:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    1568:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
    156c:	61007374 	tstvs	r0, r4, ror r3
    1570:	315f746c 	cmpcc	pc, ip, ror #8
    1574:	30353536 	eorscc	r3, r5, r6, lsr r5
    1578:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    157c:	6c635f6f 	stclvs	15, cr5, [r3], #-444	; 0xfffffe44
    1580:	5f726165 	svcpl	0x00726165
    1584:	41007872 	tstmi	r0, r2, ror r8
    1588:	315f544c 	cmpcc	pc, ip, asr #8
    158c:	30353536 	eorscc	r3, r5, r6, lsr r5
    1590:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1594:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1598:	32375f45 	eorscc	r5, r7, #276	; 0x114
    159c:	41003030 	tstmi	r0, r0, lsr r0
    15a0:	315f544c 	cmpcc	pc, ip, asr #8
    15a4:	30353536 	eorscc	r3, r5, r6, lsr r5
    15a8:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    15ac:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    15b0:	36395f45 	ldrtcc	r5, [r9], -r5, asr #30
    15b4:	41003030 	tstmi	r0, r0, lsr r0
    15b8:	315f544c 	cmpcc	pc, ip, asr #8
    15bc:	30353536 	eorscc	r3, r5, r6, lsr r5
    15c0:	5241505f 	subpl	r5, r1, #95	; 0x5f
    15c4:	5f595449 	svcpl	0x00595449
    15c8:	41534944 	cmpmi	r3, r4, asr #18
    15cc:	00454c42 	subeq	r4, r5, r2, asr #24
    15d0:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
    15d4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    15d8:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    15dc:	445f3035 	ldrbmi	r3, [pc], #-53	; 15e4 <__core1_unwind_stub-0xffea1c>
    15e0:	43495645 	movtmi	r5, #38469	; 0x9645
    15e4:	4f535f45 	svcmi	0x00535f45
    15e8:	47504643 	ldrbmi	r4, [r0, -r3, asr #12]
    15ec:	41555f41 	cmpmi	r5, r1, asr #30
    15f0:	00305452 	eorseq	r5, r0, r2, asr r4
    15f4:	5f544c41 	svcpl	0x00544c41
    15f8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    15fc:	45445f30 	strbmi	r5, [r4, #-3888]	; 0xfffff0d0
    1600:	45434956 	strbmi	r4, [r3, #-2390]	; 0xfffff6aa
    1604:	434f535f 	movtmi	r5, #62303	; 0xf35f
    1608:	41475046 	cmpmi	r7, r6, asr #32
    160c:	5241555f 	subpl	r5, r1, #398458880	; 0x17c00000
    1610:	41003154 	tstmi	r0, r4, asr r1
    1614:	315f544c 	cmpcc	pc, ip, asr #8
    1618:	30353536 	eorscc	r3, r5, r6, lsr r5
    161c:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1620:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    1624:	32315f45 	eorscc	r5, r1, #276	; 0x114
    1628:	41003030 	tstmi	r0, r0, lsr r0
    162c:	315f544c 	cmpcc	pc, ip, asr #8
    1630:	30353536 	eorscc	r3, r5, r6, lsr r5
    1634:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1638:	4154535f 	cmpmi	r4, pc, asr r3
    163c:	5f535554 	svcpl	0x00535554
    1640:	454e4f4e 	strbmi	r4, [lr, #-3918]	; 0xfffff0b2
    1644:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1648:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    164c:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1650:	645f746e 	ldrbvs	r7, [pc], #-1134	; 1658 <__core1_unwind_stub-0xffe9a8>
    1654:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1658:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
    165c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1660:	5f544c41 	svcpl	0x00544c41
    1664:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1668:	41425f30 	cmpmi	r2, r0, lsr pc
    166c:	41524455 	cmpmi	r2, r5, asr r4
    1670:	365f4554 			; <UNDEFINED> instruction: 0x365f4554
    1674:	70003030 	andvc	r3, r0, r0, lsr r0
    1678:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    167c:	6e650079 	mcrvs	0, 3, r0, cr5, cr9, {3}
    1680:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1684:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1688:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    168c:	36315f54 	shsaxcc	r5, r1, r4
    1690:	5f303535 	svcpl	0x00303535
    1694:	49524150 	ldmdbmi	r2, {r4, r6, r8, lr}^
    1698:	4f5f5954 	svcmi	0x005f5954
    169c:	61004444 	tstvs	r0, r4, asr #8
    16a0:	315f746c 	cmpcc	pc, ip, ror #8
    16a4:	30353536 	eorscc	r3, r5, r6, lsr r5
    16a8:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 16b0 <__core1_unwind_stub-0xffe950>
    16ac:	735f6d65 	cmpvc	pc, #6464	; 0x1940
    16b0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    16b4:	65675f73 	strbvs	r5, [r7, #-3955]!	; 0xfffff08d
    16b8:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    16bc:	36315f54 	shsaxcc	r5, r1, r4
    16c0:	5f303535 	svcpl	0x00303535
    16c4:	4f464946 	svcmi	0x00464946
    16c8:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    16cc:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    16d0:	5f58545f 	svcpl	0x0058545f
    16d4:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    16d8:	36315f54 	shsaxcc	r5, r1, r4
    16dc:	5f303535 	svcpl	0x00303535
    16e0:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    16e4:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    16e8:	0035375f 	eorseq	r3, r5, pc, asr r7
    16ec:	5f746c61 	svcpl	0x00746c61
    16f0:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    16f4:	72775f30 	rsbsvc	r5, r7, #48, 30	; 0xc0
    16f8:	5f657469 	svcpl	0x00657469
    16fc:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    1700:	5f726f73 	svcpl	0x00726f73
    1704:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1708:	61007265 	tstvs	r0, r5, ror #4
    170c:	315f746c 	cmpcc	pc, ip, ror #8
    1710:	30353536 	eorscc	r3, r5, r6, lsr r5
    1714:	6669665f 			; <UNDEFINED> instruction: 0x6669665f
    1718:	72745f6f 	rsbsvc	r5, r4, #444	; 0x1bc
    171c:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    1720:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
    1724:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1728:	76696400 	strbtvc	r6, [r9], -r0, lsl #8
    172c:	726f7369 	rsbvc	r7, pc, #-1543503871	; 0xa4000001
    1730:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1734:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1738:	465f3035 			; <UNDEFINED> instruction: 0x465f3035
    173c:	5f4f4649 	svcpl	0x004f4649
    1740:	47495254 	smlsldmi	r5, r9, r4, r2
    1744:	5f524547 	svcpl	0x00524547
    1748:	745f5854 	ldrbvc	r5, [pc], #-2132	; 1750 <__core1_unwind_stub-0xffe8b0>
    174c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1750:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1754:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1758:	645f746e 	ldrbvs	r7, [pc], #-1134	; 1760 <__core1_unwind_stub-0xffe8a0>
    175c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1760:	6d5f656c 	cfldr64vs	mvdx6, [pc, #-432]	; 15b8 <__core1_unwind_stub-0xffea48>
    1764:	6d65646f 	cfstrdvs	mvd6, [r5, #-444]!	; 0xfffffe44
    1768:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    176c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1770:	425f3035 	subsmi	r3, pc, #53	; 0x35
    1774:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1778:	5f455441 	svcpl	0x00455441
    177c:	30303432 	eorscc	r3, r0, r2, lsr r4
    1780:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1784:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1788:	665f3035 			; <UNDEFINED> instruction: 0x665f3035
    178c:	5f6f6669 	svcpl	0x006f6669
    1790:	61736964 	cmnvs	r3, r4, ror #18
    1794:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1798:	5f544c41 	svcpl	0x00544c41
    179c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    17a0:	41425f30 	cmpmi	r2, r0, lsr pc
    17a4:	41524455 	cmpmi	r2, r5, asr r4
    17a8:	655f4554 	ldrbvs	r4, [pc, #-1364]	; 125c <__core1_unwind_stub-0xffeda4>
    17ac:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    17b0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    17b4:	495f3035 	ldmdbmi	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    17b8:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    17bc:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    17c0:	58525f53 	ldmdapl	r2, {r0, r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    17c4:	5441445f 	strbpl	r4, [r1], #-1119	; 0xfffffba1
    17c8:	6c610041 	stclvs	0, cr0, [r1], #-260	; 0xfffffefc
    17cc:	36315f74 	shsub16cc	r5, r1, r4
    17d0:	5f303535 	svcpl	0x00303535
    17d4:	6f666966 	svcvs	0x00666966
    17d8:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    17dc:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    17e0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    17e4:	0078745f 	rsbseq	r7, r8, pc, asr r4
    17e8:	5f746c61 	svcpl	0x00746c61
    17ec:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    17f0:	69665f30 	stmdbvs	r6!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    17f4:	635f6f66 	cmpvs	pc, #408	; 0x198
    17f8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    17fc:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    1800:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1804:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1808:	425f3035 	subsmi	r3, pc, #53	; 0x35
    180c:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1810:	5f455441 	svcpl	0x00455441
    1814:	30303834 	eorscc	r3, r0, r4, lsr r8
    1818:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    181c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1820:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1824:	655f746e 	ldrbvs	r7, [pc, #-1134]	; 13be <__core1_unwind_stub-0xffec42>
    1828:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    182c:	6f6d5f65 	svcvs	0x006d5f65
    1830:	006d6564 	rsbeq	r6, sp, r4, ror #10
    1834:	6f6f425f 	svcvs	0x006f425f
    1838:	6c61006c 	stclvs	0, cr0, [r1], #-432	; 0xfffffe50
    183c:	36315f74 	shsub16cc	r5, r1, r4
    1840:	5f303535 	svcpl	0x00303535
    1844:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    1848:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    184c:	36315f74 	shsub16cc	r5, r1, r4
    1850:	5f303535 	svcpl	0x00303535
    1854:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
    1858:	6b636162 	blvs	18d9de8 <__bss_end__+0x8bdde8>
    185c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1860:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1864:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1868:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    186c:	755f3035 	ldrbvc	r3, [pc, #-53]	; 183f <__core1_unwind_stub-0xffe7c1>
    1870:	696e696e 	stmdbvs	lr!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    1874:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    1878:	36315f74 	shsub16cc	r5, r1, r4
    187c:	5f303535 	svcpl	0x00303535
    1880:	6f666966 	svcvs	0x00666966
    1884:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1888:	41006574 	tstmi	r0, r4, ror r5
    188c:	315f544c 	cmpcc	pc, ip, asr #8
    1890:	30353536 	eorscc	r3, r5, r6, lsr r5
    1894:	5541425f 	strbpl	r4, [r1, #-607]	; 0xfffffda1
    1898:	54415244 	strbpl	r5, [r1], #-580	; 0xfffffdbc
    189c:	38325f45 	ldmdacc	r2!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    18a0:	00303038 	eorseq	r3, r0, r8, lsr r0
    18a4:	5f544c41 	svcpl	0x00544c41
    18a8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    18ac:	49465f30 	stmdbmi	r6, {r4, r5, r8, r9, sl, fp, ip, lr}^
    18b0:	545f4f46 	ldrbpl	r4, [pc], #-3910	; 18b8 <__core1_unwind_stub-0xffe748>
    18b4:	47474952 	smlsldmi	r4, r7, r2, r9
    18b8:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
    18bc:	00655f58 	rsbeq	r5, r5, r8, asr pc
    18c0:	5f746c61 	svcpl	0x00746c61
    18c4:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    18c8:	6f6d5f30 	svcvs	0x006d5f30
    18cc:	5f6d6564 	svcpl	0x006d6564
    18d0:	61736964 	cmnvs	r3, r4, ror #18
    18d4:	5f656c62 	svcpl	0x00656c62
    18d8:	00727464 	rsbseq	r7, r2, r4, ror #8
    18dc:	5f746c61 	svcpl	0x00746c61
    18e0:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    18e4:	636d5f30 	cmnvs	sp, #48, 30	; 0xc0
    18e8:	616d5f72 	smcvs	54770	; 0xd5f2
    18ec:	635f6b73 	cmpvs	pc, #117760	; 0x1cc00
    18f0:	685f726c 	ldmdavs	pc, {r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    18f4:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    18f8:	6c610072 	stclvs	0, cr0, [r1], #-456	; 0xfffffe38
    18fc:	36315f74 	shsub16cc	r5, r1, r4
    1900:	5f303535 	svcpl	0x00303535
    1904:	5f746e69 	svcpl	0x00746e69
    1908:	61736964 	cmnvs	r3, r4, ror #18
    190c:	5f656c62 	svcpl	0x00656c62
    1910:	006c6c61 	rsbeq	r6, ip, r1, ror #24
    1914:	5f746c61 	svcpl	0x00746c61
    1918:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    191c:	696c5f30 	stmdbvs	ip!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    1920:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
    1924:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1928:	65735f67 	ldrbvs	r5, [r3, #-3943]!	; 0xfffff099
    192c:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    1930:	36315f74 	shsub16cc	r5, r1, r4
    1934:	5f303535 	svcpl	0x00303535
    1938:	5f72636d 	svcpl	0x0072636d
    193c:	6b73616d 	blvs	1cd9ef8 <__bss_end__+0xcbdef8>
    1940:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1944:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    1948:	00726570 	rsbseq	r6, r2, r0, ror r5
    194c:	5f544c41 	svcpl	0x00544c41
    1950:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1954:	4e495f30 	mcrmi	15, 2, r5, cr9, cr0, {1}
    1958:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xfffff0ac
    195c:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    1960:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1964:	4c410045 	mcrrmi	0, 4, r0, r1, cr5
    1968:	36315f54 	shsaxcc	r5, r1, r4
    196c:	5f303535 	svcpl	0x00303535
    1970:	5f544e49 	svcpl	0x00544e49
    1974:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    1978:	545f5355 	ldrbpl	r5, [pc], #-853	; 1980 <__core1_unwind_stub-0xffe680>
    197c:	44495f58 	strbmi	r5, [r9], #-3928	; 0xfffff0a8
    1980:	6200454c 	andvs	r4, r0, #76, 10	; 0x13000000
    1984:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1988:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    198c:	36315f54 	shsaxcc	r5, r1, r4
    1990:	5f303535 	svcpl	0x00303535
    1994:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1998:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    199c:	3531315f 	ldrcc	r3, [r1, #-351]!	; 0xfffffea1
    19a0:	00303032 	eorseq	r3, r0, r2, lsr r0
    19a4:	5f746c61 	svcpl	0x00746c61
    19a8:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    19ac:	6e695f30 	mcrvs	15, 3, r5, cr9, cr0, {1}
    19b0:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
    19b4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    19b8:	6e696c5f 	mcrvs	12, 3, r6, cr9, cr15, {2}
    19bc:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    19c0:	36315f74 	shsub16cc	r5, r1, r4
    19c4:	5f303535 	svcpl	0x00303535
    19c8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    19cc:	6100656c 	tstvs	r0, ip, ror #10
    19d0:	315f746c 	cmpcc	pc, ip, ror #8
    19d4:	30353536 	eorscc	r3, r5, r6, lsr r5
    19d8:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    19dc:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    19e0:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    19e4:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    19e8:	36315f54 	shsaxcc	r5, r1, r4
    19ec:	5f303535 	svcpl	0x00303535
    19f0:	4f464946 	svcmi	0x00464946
    19f4:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    19f8:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    19fc:	5f58525f 	svcpl	0x0058525f
    1a00:	464c4148 	strbmi	r4, [ip], -r8, asr #2
    1a04:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
    1a08:	4c41004c 	mcrrmi	0, 4, r0, r1, cr12
    1a0c:	36315f54 	shsaxcc	r5, r1, r4
    1a10:	5f303535 	svcpl	0x00303535
    1a14:	44554142 	ldrbmi	r4, [r5], #-322	; 0xfffffebe
    1a18:	45544152 	ldrbmi	r4, [r4, #-338]	; 0xfffffeae
    1a1c:	3030395f 	eorscc	r3, r0, pc, asr r9
    1a20:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    1a24:	6b73616d 	blvs	1cd9fe0 <__bss_end__+0xcbdfe0>
    1a28:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1a2c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1a30:	625f3035 	subsvs	r3, pc, #53	; 0x35
    1a34:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
    1a38:	5f657461 	svcpl	0x00657461
    1a3c:	00746573 	rsbseq	r6, r4, r3, ror r5
    1a40:	5f544c41 	svcpl	0x00544c41
    1a44:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1a48:	41505f30 	cmpmi	r0, r0, lsr pc
    1a4c:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    1a50:	4556455f 	ldrbmi	r4, [r6, #-1375]	; 0xfffffaa1
    1a54:	4c41004e 	mcrrmi	0, 4, r0, r1, cr14
    1a58:	36315f54 	shsaxcc	r5, r1, r4
    1a5c:	5f303535 	svcpl	0x00303535
    1a60:	49524150 	ldmdbmi	r2, {r4, r6, r8, lr}^
    1a64:	655f5954 	ldrbvs	r5, [pc, #-2388]	; 1118 <__core1_unwind_stub-0xffeee8>
    1a68:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1a6c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1a70:	465f3035 			; <UNDEFINED> instruction: 0x465f3035
    1a74:	5f4f4649 	svcpl	0x004f4649
    1a78:	47495254 	smlsldmi	r5, r9, r4, r2
    1a7c:	5f524547 	svcpl	0x00524547
    1a80:	415f5852 	cmpmi	pc, r2, asr r8	; <UNPREDICTABLE>
    1a84:	7300594e 	movwvc	r5, #2382	; 0x94e
    1a88:	62706f74 	rsbsvs	r6, r0, #116, 30	; 0x1d0
    1a8c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1a90:	5f544c41 	svcpl	0x00544c41
    1a94:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1a98:	41425f30 	cmpmi	r2, r0, lsr pc
    1a9c:	41524455 	cmpmi	r2, r5, asr r4
    1aa0:	315f4554 	cmpcc	pc, r4, asr r5	; <UNPREDICTABLE>
    1aa4:	30303239 	eorscc	r3, r0, r9, lsr r2
    1aa8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1aac:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1ab0:	425f3035 	subsmi	r3, pc, #53	; 0x35
    1ab4:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1ab8:	5f455441 	svcpl	0x00455441
    1abc:	30343833 	eorscc	r3, r4, r3, lsr r8
    1ac0:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    1ac4:	36315f74 	shsub16cc	r5, r1, r4
    1ac8:	5f303535 	svcpl	0x00303535
    1acc:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    1ad0:	5f726f73 	svcpl	0x00726f73
    1ad4:	00746573 	rsbseq	r6, r4, r3, ror r5
    1ad8:	5f544c41 	svcpl	0x00544c41
    1adc:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1ae0:	41425f30 	cmpmi	r2, r0, lsr pc
    1ae4:	41524455 	cmpmi	r2, r5, asr r4
    1ae8:	355f4554 	ldrbcc	r4, [pc, #-1364]	; 159c <__core1_unwind_stub-0xffea64>
    1aec:	30303637 	eorscc	r3, r0, r7, lsr r6
    1af0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1af4:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1af8:	645f3035 	ldrbvs	r3, [pc], #-53	; 1b00 <__core1_unwind_stub-0xffe500>
    1afc:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1b00:	4100656c 	tstmi	r0, ip, ror #10
    1b04:	315f544c 	cmpcc	pc, ip, asr #8
    1b08:	30353536 	eorscc	r3, r5, r6, lsr r5
    1b0c:	5645445f 			; <UNDEFINED> instruction: 0x5645445f
    1b10:	5f454349 	svcpl	0x00454349
    1b14:	61640065 	cmnvs	r4, r5, rrx
    1b18:	69626174 	stmdbvs	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    1b1c:	41007374 	tstmi	r0, r4, ror r3
    1b20:	315f544c 	cmpcc	pc, ip, asr #8
    1b24:	30353536 	eorscc	r3, r5, r6, lsr r5
    1b28:	5241505f 	subpl	r5, r1, #95	; 0x5f
    1b2c:	5f595449 	svcpl	0x00595449
    1b30:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    1b34:	36315f54 	shsaxcc	r5, r1, r4
    1b38:	5f303535 	svcpl	0x00303535
    1b3c:	4f464946 	svcmi	0x00464946
    1b40:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1b44:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
    1b48:	5f58525f 	svcpl	0x0058525f
    1b4c:	4f4d4c41 	svcmi	0x004d4c41
    1b50:	465f5453 			; <UNDEFINED> instruction: 0x465f5453
    1b54:	004c4c55 	subeq	r4, ip, r5, asr ip
    1b58:	5f544c41 	svcpl	0x00544c41
    1b5c:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1b60:	41425f30 	cmpmi	r2, r0, lsr pc
    1b64:	41524455 	cmpmi	r2, r5, asr r4
    1b68:	335f4554 	cmpcc	pc, #84, 10	; 0x15000000
    1b6c:	41003030 	tstmi	r0, r0, lsr r0
    1b70:	315f544c 	cmpcc	pc, ip, asr #8
    1b74:	30353536 	eorscc	r3, r5, r6, lsr r5
    1b78:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1b7c:	4154535f 	cmpmi	r4, pc, asr r3
    1b80:	5f535554 	svcpl	0x00535554
    1b84:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    1b88:	36315f54 	shsaxcc	r5, r1, r4
    1b8c:	5f303535 	svcpl	0x00303535
    1b90:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    1b94:	745f4543 	ldrbvc	r4, [pc], #-1347	; 1b9c <__core1_unwind_stub-0xffe464>
    1b98:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1b9c:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1ba0:	425f3035 	subsmi	r3, pc, #53	; 0x35
    1ba4:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1ba8:	5f455441 	svcpl	0x00455441
    1bac:	00303531 	eorseq	r3, r0, r1, lsr r5
    1bb0:	5f544c41 	svcpl	0x00544c41
    1bb4:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    1bb8:	41485f30 	cmpmi	r8, r0, lsr pc
    1bbc:	454c444e 	strbmi	r4, [ip, #-1102]	; 0xfffffbb2
    1bc0:	4100735f 	tstmi	r0, pc, asr r3
    1bc4:	315f544c 	cmpcc	pc, ip, asr #8
    1bc8:	30353536 	eorscc	r3, r5, r6, lsr r5
    1bcc:	4e41485f 	mcrmi	8, 2, r4, cr1, cr15, {2}
    1bd0:	5f454c44 	svcpl	0x00454c44
    1bd4:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    1bd8:	36315f54 	shsaxcc	r5, r1, r4
    1bdc:	5f303535 	svcpl	0x00303535
    1be0:	5f544e49 	svcpl	0x00544e49
    1be4:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    1be8:	745f5355 	ldrbvc	r5, [pc], #-853	; 1bf0 <__core1_unwind_stub-0xffe410>
    1bec:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1bf0:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1bf4:	425f3035 	subsmi	r3, pc, #53	; 0x35
    1bf8:	52445541 	subpl	r5, r4, #272629760	; 0x10400000
    1bfc:	5f455441 	svcpl	0x00455441
    1c00:	30303831 	eorscc	r3, r0, r1, lsr r8
    1c04:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1c08:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1c0c:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1c10:	655f746e 	ldrbvs	r7, [pc, #-1134]	; 17aa <__core1_unwind_stub-0xffe856>
    1c14:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1c18:	78725f65 	ldmdavc	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c1c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1c20:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1c24:	495f3035 	ldmdbmi	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1c28:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    1c2c:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    1c30:	58525f53 	ldmdapl	r2, {r0, r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1c34:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    1c38:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xfffff0bb
    1c3c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1c40:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    1c44:	695f3035 	ldmdbvs	pc, {r0, r2, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    1c48:	645f746e 	ldrbvs	r7, [pc], #-1134	; 1c50 <__core1_unwind_stub-0xffe3b0>
    1c4c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1c50:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
    1c54:	6c610078 	stclvs	0, cr0, [r1], #-480	; 0xfffffe20
    1c58:	36315f74 	shsub16cc	r5, r1, r4
    1c5c:	5f303535 	svcpl	0x00303535
    1c60:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1c64:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1c68:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1c6c:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1c70:	42575f52 	subsmi	r5, r7, #328	; 0x148
    1c74:	0054575f 	subseq	r5, r4, pc, asr r7
    1c78:	5f544c41 	svcpl	0x00544c41
    1c7c:	5f554d4d 	svcpl	0x00554d4d
    1c80:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    1c84:	0054575f 	subseq	r5, r4, pc, asr r7
    1c88:	31627474 	smccc	10052	; 0x2744
    1c8c:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    1c90:	63730063 	cmnvs	r3, #99	; 0x63
    1c94:	5f726c74 	svcpl	0x00726c74
    1c98:	5f746573 	svcpl	0x00746573
    1c9c:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1ca0:	61007265 	tstvs	r0, r5, ror #4
    1ca4:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1afc <__core1_unwind_stub-0xffe504>
    1ca8:	745f756d 	ldrbvc	r7, [pc], #-1389	; 1cb0 <__core1_unwind_stub-0xffe350>
    1cac:	5f326274 	svcpl	0x00326274
    1cb0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1cb4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1cb8:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    1cbc:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    1cc0:	675f3152 			; <UNDEFINED> instruction: 0x675f3152
    1cc4:	41007465 	tstmi	r0, r5, ror #8
    1cc8:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1ba0 <__core1_unwind_stub-0xffe460>
    1ccc:	415f554d 	cmpmi	pc, sp, asr #10
    1cd0:	55465f50 	strbpl	r5, [r6, #-3920]	; 0xfffff0b0
    1cd4:	415f4c4c 	cmpmi	pc, ip, asr #24
    1cd8:	53454343 	movtpl	r4, #21315	; 0x5343
    1cdc:	4c410053 	mcrrmi	0, 5, r0, r1, cr3
    1ce0:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    1ce4:	41445f55 	cmpmi	r4, r5, asr pc
    1ce8:	00655f50 	rsbeq	r5, r5, r0, asr pc
    1cec:	5f544c41 	svcpl	0x00544c41
    1cf0:	5f554d4d 	svcpl	0x00554d4d
    1cf4:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    1cf8:	5f434e5f 	svcpl	0x00434e5f
    1cfc:	00414257 	subeq	r4, r1, r7, asr r2
    1d00:	5f544c41 	svcpl	0x00544c41
    1d04:	5f554d4d 	svcpl	0x00554d4d
    1d08:	5f504144 	svcpl	0x00504144
    1d0c:	77680074 			; <UNDEFINED> instruction: 0x77680074
    1d10:	2f62696c 	svccs	0x0062696c
    1d14:	2f637273 	svccs	0x00637273
    1d18:	676d7768 	strbvs	r7, [sp, -r8, ror #14]!
    1d1c:	6c612f72 	stclvs	15, cr2, [r1], #-456	; 0xfffffe38
    1d20:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1d24:	00632e75 	rsbeq	r2, r3, r5, ror lr
    1d28:	5f746c61 	svcpl	0x00746c61
    1d2c:	5f756d6d 	svcpl	0x00756d6d
    1d30:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
    1d34:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    1d38:	616e655f 	cmnvs	lr, pc, asr r5
    1d3c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1d40:	5f746c61 	svcpl	0x00746c61
    1d44:	5f756d6d 	svcpl	0x00756d6d
    1d48:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
    1d4c:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    1d50:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    1d54:	616d735f 	cmnvs	sp, pc, asr r3
    1d58:	61706c6c 	cmnvs	r0, ip, ror #24
    1d5c:	41006567 	tstmi	r0, r7, ror #10
    1d60:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1c38 <__core1_unwind_stub-0xffe3c8>
    1d64:	415f554d 	cmpmi	pc, sp, asr #10
    1d68:	5f525454 	svcpl	0x00525454
    1d6c:	5f414257 	svcpl	0x00414257
    1d70:	41004257 	tstmi	r0, r7, asr r2
    1d74:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1c4c <__core1_unwind_stub-0xffe3b4>
    1d78:	415f554d 	cmpmi	pc, sp, asr #10
    1d7c:	5f525454 	svcpl	0x00525454
    1d80:	5f414257 	svcpl	0x00414257
    1d84:	41005457 	tstmi	r0, r7, asr r4
    1d88:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1c60 <__core1_unwind_stub-0xffe3a0>
    1d8c:	445f554d 	ldrbmi	r5, [pc], #-1357	; 1d94 <__core1_unwind_stub-0xffe26c>
    1d90:	435f5041 	cmpmi	pc, #65	; 0x41
    1d94:	4e45494c 	vmlsmi.f16	s9, s10, s24	; <UNPREDICTABLE>
    1d98:	74740054 	ldrbtvc	r0, [r4], #-84	; 0xffffffac
    1d9c:	5f307262 	svcpl	0x00307262
    1da0:	5f746567 	svcpl	0x00746567
    1da4:	706c6568 	rsbvc	r6, ip, r8, ror #10
    1da8:	73007265 	movwvc	r7, #613	; 0x265
    1dac:	656d6765 	strbvs	r6, [sp, #-1893]!	; 0xfffff89b
    1db0:	6100746e 	tstvs	r0, lr, ror #8
    1db4:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1c0c <__core1_unwind_stub-0xffe3f4>
    1db8:	545f756d 	ldrbpl	r7, [pc], #-1389	; 1dc0 <__core1_unwind_stub-0xffe240>
    1dbc:	30524254 	subscc	r4, r2, r4, asr r2
    1dc0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1dc4:	69736100 	ldmdbvs	r3!, {r8, sp, lr}^
    1dc8:	6c610064 	stclvs	0, cr0, [r1], #-400	; 0xfffffe70
    1dcc:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1dd0:	61765f75 	cmnvs	r6, r5, ror pc
    1dd4:	6170735f 	cmnvs	r0, pc, asr r3
    1dd8:	735f6563 	cmpvc	pc, #415236096	; 0x18c00000
    1ddc:	61726f74 	cmnvs	r2, r4, ror pc
    1de0:	725f6567 	subsvc	r6, pc, #432013312	; 0x19c00000
    1de4:	69757165 	ldmdbvs	r5!, {r0, r2, r5, r6, r8, ip, sp, lr}^
    1de8:	5f646572 	svcpl	0x00646572
    1dec:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    1df0:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1df4:	62747400 	rsbsvs	r7, r4, #0, 8
    1df8:	735f7263 	cmpvc	pc, #805306374	; 0x30000006
    1dfc:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1e00:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    1e04:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
    1e08:	6e656c67 	cdpvs	12, 6, cr6, cr5, cr7, {3}
    1e0c:	00687467 	rsbeq	r7, r8, r7, ror #8
    1e10:	63627474 	cmnvs	r2, #116, 8	; 0x74000000
    1e14:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xfffff08e
    1e18:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xfffff08c
    1e1c:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
    1e20:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1e24:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1e28:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    1e2c:	535f535f 	cmppl	pc, #2080374785	; 0x7c000001
    1e30:	45524148 	ldrbmi	r4, [r2, #-328]	; 0xfffffeb8
    1e34:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
    1e38:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1e3c:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1e40:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    1e44:	655f535f 	ldrbvs	r5, [pc, #-863]	; 1aed <__core1_unwind_stub-0xffe513>
    1e48:	74637300 	strbtvc	r7, [r3], #-768	; 0xfffffd00
    1e4c:	675f726c 	ldrbvs	r7, [pc, -ip, ror #4]
    1e50:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1e54:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    1e58:	6c610072 	stclvs	0, cr0, [r1], #-456	; 0xfffffe38
    1e5c:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1e60:	41445f75 	hvcmi	17909	; 0x45f5
    1e64:	735f5243 	cmpvc	pc, #805306372	; 0x30000004
    1e68:	41007465 	tstmi	r0, r5, ror #8
    1e6c:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1d44 <__core1_unwind_stub-0xffe2bc>
    1e70:	545f554d 	ldrbpl	r5, [pc], #-1357	; 1e78 <__core1_unwind_stub-0xffe188>
    1e74:	535f4254 	cmppl	pc, #84, 4	; 0x40000005
    1e78:	7000745f 	andvc	r7, r0, pc, asr r4
    1e7c:	69636f72 	stmdbvs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1e80:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
    1e84:	656d5f6d 	strbvs	r5, [sp, #-3949]!	; 0xfffff093
    1e88:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    1e8c:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
    1e90:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
    1e94:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    1e98:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    1e9c:	4e5f5254 	mrcmi	2, 2, r5, cr15, cr4, {2}
    1ea0:	434e5f43 	movtmi	r5, #61251	; 0xef43
    1ea4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1ea8:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    1eac:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
    1eb0:	735f5243 	cmpvc	pc, #805306372	; 0x30000004
    1eb4:	41007465 	tstmi	r0, r5, ror #8
    1eb8:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1d90 <__core1_unwind_stub-0xffe270>
    1ebc:	415f554d 	cmpmi	pc, sp, asr #10
    1ec0:	5f525454 	svcpl	0x00525454
    1ec4:	4f525453 	svcmi	0x00525453
    1ec8:	4100474e 	tstmi	r0, lr, asr #14
    1ecc:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1da4 <__core1_unwind_stub-0xffe25c>
    1ed0:	415f554d 	cmpmi	pc, sp, asr #10
    1ed4:	5f525454 	svcpl	0x00525454
    1ed8:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    1edc:	4e5f4543 	cdpmi	5, 5, cr4, cr15, cr3, {2}
    1ee0:	75640053 	strbvc	r0, [r4, #-83]!	; 0xffffffad
    1ee4:	00796d6d 	rsbseq	r6, r9, sp, ror #26
    1ee8:	5f746c61 	svcpl	0x00746c61
    1eec:	5f756d6d 	svcpl	0x00756d6d
    1ef0:	745f6176 	ldrbvc	r6, [pc], #-374	; 1ef8 <__core1_unwind_stub-0xffe108>
    1ef4:	61705f6f 	cmnvs	r0, pc, ror #30
    1ef8:	616f635f 	cmnvs	pc, pc, asr r3	; <UNPREDICTABLE>
    1efc:	6373656c 	cmnvs	r3, #108, 10	; 0x1b000000
    1f00:	65625f65 	strbvs	r5, [r2, #-3941]!	; 0xfffff09b
    1f04:	006e6967 	rsbeq	r6, lr, r7, ror #18
    1f08:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    1f0c:	745f656c 	ldrbvc	r6, [pc], #-1388	; 1f14 <__core1_unwind_stub-0xffe0ec>
    1f10:	30726274 	rsbscc	r6, r2, r4, ror r2
    1f14:	6c61775f 	stclvs	7, cr7, [r1], #-380	; 0xfffffe84
    1f18:	7474006b 	ldrbtvc	r0, [r4], #-107	; 0xffffff95
    1f1c:	6c615f62 	stclvs	15, cr5, [r1], #-392	; 0xfffffe78
    1f20:	5f636f6c 	svcpl	0x00636f6c
    1f24:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    1f28:	00747865 	rsbseq	r7, r4, r5, ror #16
    1f2c:	5f746c61 	svcpl	0x00746c61
    1f30:	5f756d6d 	svcpl	0x00756d6d
    1f34:	31627474 	smccc	10052	; 0x2744
    1f38:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    1f3c:	65735f63 	ldrbvs	r5, [r3, #-3939]!	; 0xfffff09d
    1f40:	6f660074 	svcvs	0x00660074
    1f44:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
    1f48:	63616400 	cmnvs	r1, #0, 8
    1f4c:	6c610072 	stclvs	0, cr0, [r1], #-456	; 0xfffffe38
    1f50:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1f54:	61765f75 	cmnvs	r6, r5, ror pc
    1f58:	6170735f 	cmnvs	r0, pc, asr r3
    1f5c:	675f6563 	ldrbvs	r6, [pc, -r3, ror #10]
    1f60:	705f6e65 	subsvc	r6, pc, r5, ror #28
    1f64:	74656761 	strbtvc	r6, [r5], #-1889	; 0xfffff89f
    1f68:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1f6c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1f70:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1f74:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1f78:	42575f52 	subsmi	r5, r7, #328	; 0x148
    1f7c:	42575f41 	subsmi	r5, r7, #260	; 0x104
    1f80:	6c610041 	stclvs	0, cr0, [r1], #-260	; 0xfffffefc
    1f84:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    1f88:	61765f75 	cmnvs	r6, r5, ror pc
    1f8c:	5f6f745f 	svcpl	0x006f745f
    1f90:	61006170 	tstvs	r0, r0, ror r1
    1f94:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1dec <__core1_unwind_stub-0xffe214>
    1f98:	765f756d 	ldrbvc	r7, [pc], -sp, ror #10
    1f9c:	70735f61 	rsbsvc	r5, r3, r1, ror #30
    1fa0:	5f656361 	svcpl	0x00656361
    1fa4:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    1fa8:	5f656761 	svcpl	0x00656761
    1fac:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1fb0:	64657269 	strbtvs	r7, [r5], #-617	; 0xfffffd97
    1fb4:	63616400 	cmnvs	r1, #0, 8
    1fb8:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
    1fbc:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xfffff08c
    1fc0:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
    1fc4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1fc8:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    1fcc:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    1fd0:	00655f52 	rsbeq	r5, r5, r2, asr pc
    1fd4:	5f544c41 	svcpl	0x00544c41
    1fd8:	5f554d4d 	svcpl	0x00554d4d
    1fdc:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    1fe0:	5f54575f 	svcpl	0x0054575f
    1fe4:	61004257 	tstvs	r0, r7, asr r2
    1fe8:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1e40 <__core1_unwind_stub-0xffe1c0>
    1fec:	545f756d 	ldrbpl	r7, [pc], #-1389	; 1ff4 <__core1_unwind_stub-0xffe00c>
    1ff0:	30524254 	subscc	r4, r2, r4, asr r2
    1ff4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1ff8:	73666400 	cmnvc	r6, #0, 8
    1ffc:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    2000:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2004:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    2008:	745f5254 	ldrbvc	r5, [pc], #-596	; 2010 <__core1_unwind_stub-0xffdff0>
    200c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2010:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2014:	6274745f 	rsbsvs	r7, r4, #1593835520	; 0x5f000000
    2018:	6e695f31 	mcrvs	15, 3, r5, cr9, cr1, {1}
    201c:	41007469 	tstmi	r0, r9, ror #8
    2020:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1ef8 <__core1_unwind_stub-0xffe108>
    2024:	415f554d 	cmpmi	pc, sp, asr #10
    2028:	5f525454 	svcpl	0x00525454
    202c:	575f5457 			; <UNDEFINED> instruction: 0x575f5457
    2030:	4c410054 	mcrrmi	0, 5, r0, r1, cr4
    2034:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2038:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    203c:	575f5254 			; <UNDEFINED> instruction: 0x575f5254
    2040:	42575f42 	subsmi	r5, r7, #264	; 0x108
    2044:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2048:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    204c:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    2050:	42575f52 	subsmi	r5, r7, #328	; 0x148
    2054:	00434e5f 	subeq	r4, r3, pc, asr lr
    2058:	5f544c41 	svcpl	0x00544c41
    205c:	5f554d4d 	svcpl	0x00554d4d
    2060:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    2064:	00434e5f 	subeq	r4, r3, pc, asr lr
    2068:	5f544c41 	svcpl	0x00544c41
    206c:	5f554d4d 	svcpl	0x00554d4d
    2070:	505f5041 	subspl	r5, pc, r1, asr #32
    2074:	5f564952 	svcpl	0x00564952
    2078:	45434341 	strbmi	r4, [r3, #-833]	; 0xfffffcbf
    207c:	61005353 	tstvs	r0, r3, asr r3
    2080:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1ed8 <__core1_unwind_stub-0xffe128>
    2084:	765f756d 	ldrbvc	r7, [pc], -sp, ror #10
    2088:	70735f61 	rsbsvc	r5, r3, r1, ror #30
    208c:	5f656361 	svcpl	0x00656361
    2090:	5f6e6567 	svcpl	0x006e6567
    2094:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
    2098:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    209c:	5f544c41 	svcpl	0x00544c41
    20a0:	5f554d4d 	svcpl	0x00554d4d
    20a4:	5f504144 	svcpl	0x00504144
    20a8:	414e414d 	cmpmi	lr, sp, asr #2
    20ac:	00524547 	subseq	r4, r2, r7, asr #10
    20b0:	5f746c61 	svcpl	0x00746c61
    20b4:	5f756d6d 	svcpl	0x00756d6d
    20b8:	6e696e75 	mcrvs	14, 3, r6, cr9, cr5, {3}
    20bc:	61007469 	tstvs	r0, r9, ror #8
    20c0:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 1f18 <__core1_unwind_stub-0xffe0e8>
    20c4:	745f756d 	ldrbvc	r7, [pc], #-1389	; 20cc <__core1_unwind_stub-0xffdf34>
    20c8:	695f626c 	ldmdbvs	pc, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    20cc:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    20d0:	74616469 	strbtvc	r6, [r1], #-1129	; 0xfffffb97
    20d4:	73695f65 	cmnvc	r9, #404	; 0x194
    20d8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    20dc:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    20e0:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    20e4:	42575f52 	subsmi	r5, r7, #328	; 0x148
    20e8:	434e5f41 	movtmi	r5, #61249	; 0xef41
    20ec:	65786500 	ldrbvs	r6, [r8, #-1280]!	; 0xfffffb00
    20f0:	65747563 	ldrbvs	r7, [r4, #-1379]!	; 0xfffffa9d
    20f4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    20f8:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    20fc:	5f61765f 	svcpl	0x0061765f
    2100:	63617073 	cmnvs	r1, #115	; 0x73
    2104:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    2108:	75735f6e 	ldrbvc	r5, [r3, #-3950]!	; 0xfffff092
    210c:	73726570 	cmnvc	r2, #112, 10	; 0x1c000000
    2110:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2114:	6e006e6f 	cdpvs	14, 0, cr6, cr0, cr15, {3}
    2118:	5f6c6c75 	svcpl	0x006c6c75
    211c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    2120:	61006674 	tstvs	r0, r4, ror r6
    2124:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    2128:	0074706f 	rsbseq	r7, r4, pc, rrx
    212c:	5f544c41 	svcpl	0x00544c41
    2130:	5f554d4d 	svcpl	0x00554d4d
    2134:	5f425454 	svcpl	0x00425454
    2138:	4e5f534e 	cdpmi	3, 5, cr5, cr15, cr14, {2}
    213c:	535f4e4f 	cmppl	pc, #1264	; 0x4f0
    2140:	52554345 	subspl	r4, r5, #335544321	; 0x14000001
    2144:	6c610045 	stclvs	0, cr0, [r1], #-276	; 0xfffffeec
    2148:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    214c:	74745f75 	ldrbtvc	r5, [r4], #-3957	; 0xfffff08b
    2150:	645f3262 	ldrbvs	r3, [pc], #-610	; 2158 <__core1_unwind_stub-0xffdea8>
    2154:	5f637365 	svcpl	0x00637365
    2158:	00746573 	rsbseq	r6, r4, r3, ror r5
    215c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    2160:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    2164:	735f7264 	cmpvc	pc, #100, 4	; 0x40000006
    2168:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    216c:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    2170:	6f640072 	svcvs	0x00640072
    2174:	6e69616d 	powvsez	f6, f1, #5.0
    2178:	0070615f 	rsbseq	r6, r0, pc, asr r1
    217c:	5f544c41 	svcpl	0x00544c41
    2180:	5f554d4d 	svcpl	0x00554d4d
    2184:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
    2188:	5f54575f 	svcpl	0x0054575f
    218c:	00414257 	subeq	r4, r1, r7, asr r2
    2190:	67657276 			; <UNDEFINED> instruction: 0x67657276
    2194:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2198:	5f746c61 	svcpl	0x00746c61
    219c:	5f756d6d 	svcpl	0x00756d6d
    21a0:	745f6176 	ldrbvc	r6, [pc], #-374	; 21a8 <__core1_unwind_stub-0xffde58>
    21a4:	61705f6f 	cmnvs	r0, pc, ror #30
    21a8:	616f635f 	cmnvs	pc, pc, asr r3	; <UNPREDICTABLE>
    21ac:	6373656c 	cmnvs	r3, #108, 10	; 0x1b000000
    21b0:	6e655f65 	cdpvs	15, 6, cr5, cr5, cr5, {3}
    21b4:	6c610064 	stclvs	0, cr0, [r1], #-400	; 0xfffffe70
    21b8:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    21bc:	6e655f75 	mcrvs	15, 3, r5, cr5, cr5, {3}
    21c0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    21c4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    21c8:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    21cc:	5f50415f 	svcpl	0x0050415f
    21d0:	44414552 	strbmi	r4, [r1], #-1362	; 0xfffffaae
    21d4:	4c4e4f5f 	mcrrmi	15, 5, r4, lr, cr15
    21d8:	65720059 	ldrbvs	r0, [r2, #-89]!	; 0xffffffa7
    21dc:	696c616c 	stmdbvs	ip!, {r2, r3, r5, r6, r8, sp, lr}^
    21e0:	61006e67 	tstvs	r0, r7, ror #28
    21e4:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 203c <__core1_unwind_stub-0xffdfc4>
    21e8:	695f756d 	ldmdbvs	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    21ec:	0074696e 	rsbseq	r6, r4, lr, ror #18
    21f0:	5f544c41 	svcpl	0x00544c41
    21f4:	5f554d4d 	svcpl	0x00554d4d
    21f8:	555f5041 	ldrbpl	r5, [pc, #-65]	; 21bf <__core1_unwind_stub-0xffde41>
    21fc:	5f524553 	svcpl	0x00524553
    2200:	44414552 	strbmi	r4, [r1], #-1362	; 0xfffffaae
    2204:	4c4e4f5f 	mcrrmi	15, 5, r4, lr, cr15
    2208:	63610059 	cmnvs	r1, #89	; 0x59
    220c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    2210:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2214:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    2218:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    221c:	45445f52 	strbmi	r5, [r4, #-3922]	; 0xfffff0ae
    2220:	45434956 	strbmi	r4, [r3, #-2390]	; 0xfffff6aa
    2224:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2228:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    222c:	5f61765f 	svcpl	0x0061765f
    2230:	63617073 	cmnvs	r1, #115	; 0x73
    2234:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    2238:	616c5f6e 	cmnvs	ip, lr, ror #30
    223c:	70656772 	rsbvc	r6, r5, r2, ror r7
    2240:	00656761 	rsbeq	r6, r5, r1, ror #14
    2244:	5f544c41 	svcpl	0x00544c41
    2248:	5f554d4d 	svcpl	0x00554d4d
    224c:	5f425454 	svcpl	0x00425454
    2250:	535f534e 	cmppl	pc, #939524097	; 0x38000001
    2254:	52554345 	subspl	r4, r5, #335544321	; 0x14000001
    2258:	4c410045 	mcrrmi	0, 4, r0, r1, cr5
    225c:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2260:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    2264:	4e585f42 	cdpmi	15, 5, cr5, cr8, cr2, {2}
    2268:	7400655f 	strvc	r6, [r0], #-1375	; 0xfffffaa1
    226c:	30726274 	rsbscc	r6, r2, r4, ror r2
    2270:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2274:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
    2278:	00726570 	rsbseq	r6, r2, r0, ror r5
    227c:	5f544c41 	svcpl	0x00544c41
    2280:	5f554d4d 	svcpl	0x00554d4d
    2284:	5f425454 	svcpl	0x00425454
    2288:	745f4e58 	ldrbvc	r4, [pc], #-3672	; 2290 <__core1_unwind_stub-0xffdd70>
    228c:	62747400 	rsbsvs	r7, r4, #0, 8
    2290:	675f3172 			; <UNDEFINED> instruction: 0x675f3172
    2294:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2298:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    229c:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
    22a0:	61657261 	cmnvs	r5, r1, ror #4
    22a4:	00656c62 	rsbeq	r6, r5, r2, ror #24
    22a8:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    22ac:	70676573 	rsbvc	r6, r7, r3, ror r5
    22b0:	6c610061 	stclvs	0, cr0, [r1], #-388	; 0xfffffe7c
    22b4:	61636f6c 	cmnvs	r3, ip, ror #30
    22b8:	00646574 	rsbeq	r6, r4, r4, ror r5
    22bc:	5f544c41 	svcpl	0x00544c41
    22c0:	5f554d4d 	svcpl	0x00554d4d
    22c4:	4e5f5041 	cdpmi	0, 5, cr5, cr15, cr1, {2}
    22c8:	43415f4f 	movtmi	r5, #8015	; 0x1f4f
    22cc:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    22d0:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
    22d4:	67657373 			; <UNDEFINED> instruction: 0x67657373
    22d8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    22dc:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    22e0:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
    22e4:	00726469 	rsbseq	r6, r2, r9, ror #8
    22e8:	72627474 	rsbvc	r7, r2, #116, 8	; 0x74000000
    22ec:	74740030 	ldrbtvc	r0, [r4], #-48	; 0xffffffd0
    22f0:	00317262 	eorseq	r7, r1, r2, ror #4
    22f4:	5f746c61 	svcpl	0x00746c61
    22f8:	5f756d6d 	svcpl	0x00756d6d
    22fc:	61736964 	cmnvs	r3, r4, ror #18
    2300:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2304:	5f544c41 	svcpl	0x00544c41
    2308:	5f554d4d 	svcpl	0x00554d4d
    230c:	5f425454 	svcpl	0x00425454
    2310:	445f4e58 	ldrbmi	r4, [pc], #-3672	; 2318 <__core1_unwind_stub-0xffdce8>
    2314:	42415349 	submi	r5, r1, #603979777	; 0x24000001
    2318:	6e00454c 	cfsh32vs	mvfx4, mvfx0, #44
    231c:	73747865 	cmnvc	r4, #6619136	; 0x650000
    2320:	69736765 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, sp, lr}^
    2324:	7000657a 	andvc	r6, r0, sl, ror r5
    2328:	646e6974 	strbtvs	r6, [lr], #-2420	; 0xfffff68c
    232c:	41007865 	tstmi	r0, r5, ror #16
    2330:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 2208 <__core1_unwind_stub-0xffddf8>
    2334:	415f554d 	cmpmi	pc, sp, asr #10
    2338:	5f525454 	svcpl	0x00525454
    233c:	4c554146 	ldfmie	f4, [r5], {70}	; 0x46
    2340:	4c410054 	mcrrmi	0, 5, r0, r1, cr4
    2344:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2348:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    234c:	575f5254 			; <UNDEFINED> instruction: 0x575f5254
    2350:	75004142 	strvc	r4, [r0, #-322]	; 0xfffffebe
    2354:	70746e69 	rsbsvc	r6, r4, r9, ror #28
    2358:	745f7274 	ldrbvc	r7, [pc], #-628	; 2360 <__core1_unwind_stub-0xffdca0>
    235c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2360:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    2364:	5041445f 	subpl	r4, r1, pc, asr r4
    2368:	5f4f4e5f 	svcpl	0x004f4e5f
    236c:	45434341 	strbmi	r4, [r3, #-833]	; 0xfffffcbf
    2370:	41005353 	tstmi	r0, r3, asr r3
    2374:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 224c <__core1_unwind_stub-0xffddb4>
    2378:	415f554d 	cmpmi	pc, sp, asr #10
    237c:	5f525454 	svcpl	0x00525454
    2380:	4e5f5457 	mrcmi	4, 2, r5, cr15, cr7, {2}
    2384:	6c610043 	stclvs	0, cr0, [r1], #-268	; 0xfffffef4
    2388:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    238c:	54545f75 	ldrbpl	r5, [r4], #-3957	; 0xfffff08b
    2390:	5f315242 	svcpl	0x00315242
    2394:	00746573 	rsbseq	r6, r4, r3, ror r5
    2398:	75636573 	strbvc	r6, [r3, #-1395]!	; 0xfffffa8d
    239c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    23a0:	62747400 	rsbsvs	r7, r4, #0, 8
    23a4:	735f3172 	cmpvc	pc, #-2147483620	; 0x8000001c
    23a8:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    23ac:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
    23b0:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    23b4:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    23b8:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    23bc:	5f535f42 	svcpl	0x00535f42
    23c0:	5f4e4f4e 	svcpl	0x004e4f4e
    23c4:	52414853 	subpl	r4, r1, #5439488	; 0x530000
    23c8:	4c424145 	stfmie	f4, [r2], {69}	; 0x45
    23cc:	4c410045 	mcrrmi	0, 4, r0, r1, cr5
    23d0:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    23d4:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    23d8:	4e5f5254 	mrcmi	2, 2, r5, cr15, cr4, {2}
    23dc:	42575f43 	subsmi	r5, r7, #268	; 0x10c
    23e0:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    23e4:	0079726f 	rsbseq	r7, r9, pc, ror #4
    23e8:	63627474 	cmnvs	r2, #116, 8	; 0x74000000
    23ec:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    23f0:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    23f4:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    23f8:	4e5f5254 	mrcmi	2, 2, r5, cr15, cr4, {2}
    23fc:	54575f43 	ldrbpl	r5, [r7], #-3907	; 0xfffff0bd
    2400:	616f6300 	cmnvs	pc, r0, lsl #6
    2404:	6373656c 	cmnvs	r3, #108, 10	; 0x1b000000
    2408:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    240c:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2410:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
    2414:	575f5254 			; <UNDEFINED> instruction: 0x575f5254
    2418:	42575f42 	subsmi	r5, r7, #264	; 0x108
    241c:	4c410041 	mcrrmi	0, 4, r0, r1, cr1
    2420:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2424:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    2428:	534e5f42 	movtpl	r5, #61250	; 0xef42
    242c:	6100655f 	tstvs	r0, pc, asr r5
    2430:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 2288 <__core1_unwind_stub-0xffdd78>
    2434:	765f756d 	ldrbvc	r7, [pc], -sp, ror #10
    2438:	70735f61 	rsbsvc	r5, r3, r1, ror #30
    243c:	5f656361 	svcpl	0x00656361
    2440:	61657263 	cmnvs	r5, r3, ror #4
    2444:	6d006574 	cfstr32vs	mvfx6, [r0, #-464]	; 0xfffffe30
    2448:	725f6d65 	subsvc	r6, pc, #6464	; 0x1940
    244c:	6f696765 	svcvs	0x00696765
    2450:	4c41006e 	mcrrmi	0, 6, r0, r1, cr14
    2454:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2458:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
    245c:	534e5f42 	movtpl	r5, #61250	; 0xef42
    2460:	6100745f 	tstvs	r0, pc, asr r4
    2464:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
    2468:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
    246c:	61620073 	smcvs	8195	; 0x2003
    2470:	615f6573 	cmpvs	pc, r3, ror r5	; <UNPREDICTABLE>
    2474:	5f726464 	svcpl	0x00726464
    2478:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
    247c:	4c410068 	mcrrmi	0, 6, r0, r1, cr8
    2480:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    2484:	50415f55 	subpl	r5, r1, r5, asr pc
    2488:	7400655f 	strvc	r6, [r0], #-1375	; 0xfffffaa1
    248c:	72636274 	rsbvc	r6, r3, #116, 4	; 0x40000007
    2490:	74006e5f 	strvc	r6, [r0], #-3679	; 0xfffff1a1
    2494:	00316274 	eorseq	r6, r1, r4, ror r2
    2498:	32627474 	rsbcc	r7, r2, #116, 8	; 0x74000000
    249c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    24a0:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    24a4:	5f50415f 	svcpl	0x0050415f
    24a8:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
    24ac:	7a697371 	bvc	1a5f278 <__bss_end__+0xa43278>
    24b0:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    24b4:	72765f74 	rsbsvc	r5, r6, #116, 30	; 0x1d0
    24b8:	6f696765 	svcvs	0x00696765
    24bc:	616d5f6e 	cmnvs	sp, lr, ror #30
    24c0:	705f6b72 	subsvc	r6, pc, r2, ror fp	; <UNPREDICTABLE>
    24c4:	74656761 	strbtvc	r6, [r5], #-1889	; 0xfffff89f
    24c8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    24cc:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    24d0:	656c655f 	strbvs	r6, [ip, #-1375]!	; 0xfffffaa1
    24d4:	4c41006d 	mcrrmi	0, 6, r0, r1, cr13
    24d8:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
    24dc:	50415f55 	subpl	r5, r1, r5, asr pc
    24e0:	4952505f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, ip, lr}^
    24e4:	45525f56 	ldrbmi	r5, [r2, #-3926]	; 0xfffff0aa
    24e8:	4f5f4441 	svcmi	0x005f4441
    24ec:	00594c4e 	subseq	r4, r9, lr, asr #24
    24f0:	5f544c41 	svcpl	0x00544c41
    24f4:	5f554d4d 	svcpl	0x00554d4d
    24f8:	5f4d454d 	svcpl	0x004d454d
    24fc:	49474552 	stmdbmi	r7, {r1, r4, r6, r8, sl, lr}^
    2500:	735f4e4f 	cmpvc	pc, #1264	; 0x4f0
    2504:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2508:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    250c:	4d454d5f 	stclmi	13, cr4, [r5, #-380]	; 0xfffffe84
    2510:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
    2514:	5f4e4f49 	svcpl	0x004e4f49
    2518:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    251c:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    2520:	4f435f75 	svcmi	0x00435f75
    2524:	5845544e 	stmdapl	r5, {r1, r2, r3, r6, sl, ip, lr}^
    2528:	52444954 	subpl	r4, r4, #84, 18	; 0x150000
    252c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2530:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2534:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2538:	6274745f 	rsbsvs	r7, r4, #1593835520	; 0x5f000000
    253c:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    2540:	745f636f 	ldrbvc	r6, [pc], #-879	; 2548 <__core1_unwind_stub-0xffdab8>
    2544:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2548:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    254c:	5f41565f 	svcpl	0x0041565f
    2550:	505f4f54 	subspl	r4, pc, r4, asr pc	; <UNPREDICTABLE>
    2554:	4f435f41 	svcmi	0x00435f41
    2558:	53454c41 	movtpl	r4, #23617	; 0x5c41
    255c:	735f4543 	cmpvc	pc, #281018368	; 0x10c00000
    2560:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2564:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    2568:	5f41565f 	svcpl	0x0041565f
    256c:	505f4f54 	subspl	r4, pc, r4, asr pc	; <UNPREDICTABLE>
    2570:	4f435f41 	svcmi	0x00435f41
    2574:	53454c41 	movtpl	r4, #23617	; 0x5c41
    2578:	745f4543 	ldrbvc	r4, [pc], #-1347	; 2580 <__core1_unwind_stub-0xffda80>
    257c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2580:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
    2584:	626c745f 	rsbvs	r7, ip, #1593835520	; 0x5f000000
    2588:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    258c:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
    2590:	00657461 	rsbeq	r7, r5, r1, ror #8
    2594:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
    2598:	70676573 	rsbvc	r6, r7, r3, ror r5
    259c:	6c610061 	stclvs	0, cr0, [r1], #-388	; 0xfffffe7c
    25a0:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
    25a4:	61765f75 	cmnvs	r6, r5, ror pc
    25a8:	5f6f745f 	svcpl	0x006f745f
    25ac:	635f6170 	cmpvs	pc, #112, 2
    25b0:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
    25b4:	5f656373 	svcpl	0x00656373
    25b8:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
    25bc:	62747400 	rsbsvs	r7, r4, #0, 8
    25c0:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    25c4:	4100636f 	tstmi	r0, pc, ror #6
    25c8:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 24a0 <__core1_unwind_stub-0xffdb60>
    25cc:	545f554d 	ldrbpl	r5, [pc], #-1357	; 25d4 <__core1_unwind_stub-0xffda2c>
    25d0:	585f4254 	ldmdapl	pc, {r2, r4, r6, r9, lr}^	; <UNPREDICTABLE>
    25d4:	4e455f4e 	cdpmi	15, 4, cr5, cr5, cr14, {2}
    25d8:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
    25dc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    25e0:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    25e4:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
    25e8:	42575f52 	subsmi	r5, r7, #328	; 0x148
    25ec:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    25f0:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
    25f4:	5041445f 	subpl	r4, r1, pc, asr r4
    25f8:	5345525f 	movtpl	r5, #21087	; 0x525f
    25fc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2600:	6e650044 	cdpvs	0, 6, cr0, cr5, cr4, {2}
    2604:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2608:	6274745f 	rsbsvs	r7, r4, #1593835520	; 0x5f000000
    260c:	775f3172 			; <UNDEFINED> instruction: 0x775f3172
    2610:	006b6c61 	rsbeq	r6, fp, r1, ror #24
    2614:	6461656c 	strbtvs	r6, [r1], #-1388	; 0xfffffa94
    2618:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    261c:	69700032 	ldmdbvs	r0!, {r1, r4, r5}^
    2620:	006f666e 	rsbeq	r6, pc, lr, ror #12
    2624:	65727473 	ldrbvs	r7, [r2, #-1139]!	; 0xfffffb8d
    2628:	6d006d61 	stcvs	13, cr6, [r0, #-388]	; 0xfffffe7c
    262c:	705f6d65 	subsvc	r6, pc, r5, ror #26
    2630:	00637475 	rsbeq	r7, r3, r5, ror r4
    2634:	61686370 	smcvs	34352	; 0x8630
    2638:	656c0072 	strbvs	r0, [ip, #-114]!	; 0xffffff8e
    263c:	68636461 	stmdavs	r3!, {r0, r5, r6, sl, sp, lr}^
    2640:	5f007261 	svcpl	0x00007261
    2644:	5f61765f 	svcpl	0x0061765f
    2648:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    264c:	67747300 	ldrbvs	r7, [r4, -r0, lsl #6]!
    2650:	00677261 	rsbeq	r7, r7, r1, ror #4
    2654:	63747570 	cmnvs	r4, #112, 10	; 0x1c000000
    2658:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
    265c:	6f697463 	svcvs	0x00697463
    2660:	6568006e 	strbvs	r0, [r8, #-110]!	; 0xffffff92
    2664:	6f745f78 	svcvs	0x00745f78
    2668:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    266c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2670:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2674:	0066746e 	rsbeq	r7, r6, lr, ror #8
    2678:	64746567 	ldrbtvs	r6, [r4], #-1383	; 0xfffffa99
    267c:	68006365 	stmdavs	r0, {r0, r2, r5, r6, r8, r9, sp, lr}
    2680:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2684:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2688:	6974752f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, sp, lr}^
    268c:	612f736c 			; <UNDEFINED> instruction: 0x612f736c
    2690:	705f746c 	subsvc	r7, pc, ip, ror #8
    2694:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    2698:	00632e66 	rsbeq	r2, r3, r6, ror #28
    269c:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
    26a0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    26a4:	7066765f 	rsbvc	r7, r6, pc, asr r6
    26a8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    26ac:	656e0066 	strbvs	r0, [lr, #-102]!	; 0xffffff9a
    26b0:	68637478 	stmdavs	r3!, {r3, r4, r5, r6, sl, ip, sp, lr}^
    26b4:	5f007261 	svcpl	0x00007261
    26b8:	756e675f 	strbvc	r6, [lr, #-1887]!	; 0xfffff8a1
    26bc:	61765f63 	cmnvs	r6, r3, ror #30
    26c0:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    26c4:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    26c8:	6f745f74 	svcvs	0x00745f74
    26cc:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    26d0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    26d4:	4952505f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, ip, lr}^
    26d8:	5f46544e 	svcpl	0x0046544e
    26dc:	5f4d454d 	svcpl	0x004d454d
    26e0:	4f464e49 	svcmi	0x00464e49
    26e4:	6400735f 	strvs	r7, [r0], #-863	; 0xfffffca1
    26e8:	74696769 	strbtvc	r6, [r9], #-1897	; 0xfffff897
    26ec:	616d0073 	smcvs	53251	; 0xd003
    26f0:	72747078 	rsbsvc	r7, r4, #120	; 0x78
    26f4:	706f7400 	rsbvc	r7, pc, r0, lsl #8
    26f8:	61007274 	tstvs	r0, r4, ror r2
    26fc:	735f746c 	cmpvc	pc, #108, 8	; 0x6c000000
    2700:	6972706e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, sp, lr}^
    2704:	0066746e 	rsbeq	r7, r6, lr, ror #8
    2708:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    270c:	67726174 			; <UNDEFINED> instruction: 0x67726174
    2710:	616c6600 	cmnvs	ip, r0, lsl #12
    2714:	77660067 	strbvc	r0, [r6, -r7, rrx]!
    2718:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    271c:	65727000 	ldrbvs	r7, [r2, #-0]!
    2720:	69736963 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, fp, sp, lr}^
    2724:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    2728:	756f635f 	strbvc	r6, [pc, #-863]!	; 23d1 <__core1_unwind_stub-0xffdc2f>
    272c:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
    2730:	74696769 	strbtvc	r6, [r9], #-1897	; 0xfffff897
    2734:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    2738:	5f5f0065 	svcpl	0x005f0065
    273c:	61007061 	tstvs	r0, r1, rrx
    2740:	72656464 	rsbvc	r6, r5, #100, 8	; 0x64000000
    2744:	61747300 	cmnvs	r4, r0, lsl #6
    2748:	6f637472 	svcvs	0x00637472
    274c:	00746e75 	rsbseq	r6, r4, r5, ror lr
    2750:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2754:	63003274 	movwvs	r3, #628	; 0x274
    2758:	00747570 	rsbseq	r7, r4, r0, ror r5
    275c:	6e697369 	cdpvs	3, 6, cr7, cr9, cr9, {3}
    2760:	656c0074 	strbvs	r0, [ip, #-116]!	; 0xffffff8c
    2764:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2768:	00646f6d 	rsbeq	r6, r4, sp, ror #30
    276c:	5f746c61 	svcpl	0x00746c61
    2770:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    2774:	0066746e 	rsbeq	r7, r6, lr, ror #8
    2778:	6774736f 	ldrbvs	r7, [r4, -pc, ror #6]!
    277c:	656d7000 	strbvs	r7, [sp, #-0]!
    2780:	7073006d 	rsbsvc	r0, r3, sp, rrx
    2784:	66696365 	strbtvs	r6, [r9], -r5, ror #6
    2788:	00726569 	rsbseq	r6, r2, r9, ror #10
    278c:	5f544c41 	svcpl	0x00544c41
    2790:	4e495250 	mcrmi	2, 2, r5, cr9, cr0, {2}
    2794:	4d5f4654 	ldclmi	6, cr4, [pc, #-336]	; 264c <__core1_unwind_stub-0xffd9b4>
    2798:	495f4d45 	ldmdbmi	pc, {r0, r2, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    279c:	5f4f464e 	svcpl	0x004f464e
    27a0:	556d0074 	strbpl	r0, [sp, #-116]!	; 0xffffff8c
    27a4:	00747261 	rsbseq	r7, r4, r1, ror #4
    27a8:	5f544c41 	svcpl	0x00544c41
    27ac:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    27b0:	494c5f30 	stmdbmi	ip, {r4, r5, r8, r9, sl, fp, ip, lr}^
    27b4:	535f454e 	cmppl	pc, #327155712	; 0x13800000
    27b8:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    27bc:	454f5f53 	strbmi	r5, [pc, #-3923]	; 1871 <__core1_unwind_stub-0xffe78f>
    27c0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    27c4:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    27c8:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    27cc:	5f454e49 	svcpl	0x00454e49
    27d0:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    27d4:	505f5355 	subspl	r5, pc, r5, asr r3	; <UNPREDICTABLE>
    27d8:	696c0045 	stmdbvs	ip!, {r0, r2, r6}^
    27dc:	735f656e 	cmpvc	pc, #461373440	; 0x1b800000
    27e0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    27e4:	61750073 	cmnvs	r5, r3, ror r0
    27e8:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
    27ec:	70006f66 	andvc	r6, r0, r6, ror #30
    27f0:	5f74726f 	svcpl	0x0074726f
    27f4:	6f666e69 	svcvs	0x00666e69
    27f8:	72617500 	rsbvc	r7, r1, #0, 10
    27fc:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
    2800:	41006374 	tstmi	r0, r4, ror r3
    2804:	315f544c 	cmpcc	pc, ip, asr #8
    2808:	30353536 	eorscc	r3, r5, r6, lsr r5
    280c:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2810:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xfffff0bb
    2814:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    2818:	0049425f 	subeq	r4, r9, pc, asr r2
    281c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    2820:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    2824:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    2828:	36315f54 	shsaxcc	r5, r1, r4
    282c:	5f303535 	svcpl	0x00303535
    2830:	454e494c 	strbmi	r4, [lr, #-2380]	; 0xfffff6b4
    2834:	4154535f 	cmpmi	r4, pc, asr r3
    2838:	5f535554 	svcpl	0x00535554
    283c:	544d4554 	strbpl	r4, [sp], #-1364	; 0xfffffaac
    2840:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2844:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    2848:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    284c:	5f454e49 	svcpl	0x00454e49
    2850:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    2854:	445f5355 	ldrbmi	r5, [pc], #-853	; 285c <__core1_unwind_stub-0xffd7a4>
    2858:	61750052 	cmnvs	r5, r2, asr r0
    285c:	6c5f7472 	cfldrdvs	mvd7, [pc], {114}	; 0x72
    2860:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2864:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2868:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    286c:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    2870:	74752f63 	ldrbtvc	r2, [r5], #-3939	; 0xfffff09d
    2874:	2f736c69 	svccs	0x00736c69
    2878:	5f746c61 	svcpl	0x00746c61
    287c:	61753270 	cmnvs	r5, r0, ror r2
    2880:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
    2884:	755f7000 	ldrbvc	r7, [pc, #-0]	; 288c <__core1_unwind_stub-0xffd774>
    2888:	00747261 	rsbseq	r7, r4, r1, ror #4
    288c:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!	; 0xfffffe30
    2890:	6e695f31 	mcrvs	15, 3, r5, cr9, cr1, {1}
    2894:	41006f66 	tstmi	r0, r6, ror #30
    2898:	315f544c 	cmpcc	pc, ip, asr #8
    289c:	30353536 	eorscc	r3, r5, r6, lsr r5
    28a0:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    28a4:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xfffff0bb
    28a8:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    28ac:	0045465f 	subeq	r4, r5, pc, asr r6
    28b0:	5f544c41 	svcpl	0x00544c41
    28b4:	35353631 	ldrcc	r3, [r5, #-1585]!	; 0xfffff9cf
    28b8:	494c5f30 	stmdbmi	ip, {r4, r5, r8, r9, sl, fp, ip, lr}^
    28bc:	535f454e 	cmppl	pc, #327155712	; 0x13800000
    28c0:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
    28c4:	00655f53 	rsbeq	r5, r5, r3, asr pc
    28c8:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    28cc:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
    28d0:	00735f4f 	rsbseq	r5, r3, pc, asr #30
    28d4:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    28d8:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
    28dc:	00745f4f 	rsbseq	r5, r4, pc, asr #30
    28e0:	5f746c61 	svcpl	0x00746c61
    28e4:	5f676f6c 	svcpl	0x00676f6c
    28e8:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xfffff09c
    28ec:	72617500 	rsbvc	r7, r1, #0, 10
    28f0:	44495f74 	strbmi	r5, [r9], #-3956	; 0xfffff08c
    28f4:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    28f8:	6f645f74 	svcvs	0x00645f74
    28fc:	7400656e 	strvc	r6, [r0], #-1390	; 0xfffffa92
    2900:	306d7265 	rsbcc	r7, sp, r5, ror #4
    2904:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    2908:	4c41006f 	mcrrmi	0, 6, r0, r1, cr15
    290c:	36315f54 	shsaxcc	r5, r1, r4
    2910:	5f303535 	svcpl	0x00303535
    2914:	454e494c 	strbmi	r4, [lr, #-2380]	; 0xfffff6b4
    2918:	4154535f 	cmpmi	r4, pc, asr r3
    291c:	5f535554 	svcpl	0x00535554
    2920:	45524854 	ldrbmi	r4, [r2, #-2132]	; 0xfffff7ac
    2924:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2928:	3536315f 	ldrcc	r3, [r6, #-351]!	; 0xfffffea1
    292c:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    2930:	5f454e49 	svcpl	0x00454e49
    2934:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    2938:	525f5355 	subspl	r5, pc, #1409286145	; 0x54000001
    293c:	67004546 	strvs	r4, [r0, -r6, asr #10]
    2940:	656f635f 	strbvs	r6, [pc, #-863]!	; 25e9 <__core1_unwind_stub-0xffda17>
    2944:	74735f66 	ldrbtvc	r5, [r3], #-3942	; 0xfffff09a
    2948:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    294c:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
    2950:	67007365 	strvs	r7, [r0, -r5, ror #6]
    2954:	6168635f 	cmnvs	r8, pc, asr r3
    2958:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    295c:	6d687300 	stclvs	3, cr7, [r8, #-0]
    2960:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    2964:	00745f6c 	rsbseq	r5, r4, ip, ror #30
    2968:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
    296c:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
    2970:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    2974:	6f635f67 	svcvs	0x00635f67
    2978:	00746e75 	rsbseq	r6, r4, r5, ror lr
    297c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2980:	65725f30 	ldrbvs	r5, [r2, #-3888]!	; 0xfffff0d0
    2984:	00796461 	rsbseq	r6, r9, r1, ror #8
    2988:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    298c:	65725f31 	ldrbvs	r5, [r2, #-3889]!	; 0xfffff0cf
    2990:	00796461 	rsbseq	r6, r9, r1, ror #8
    2994:	5f676f6c 	svcpl	0x00676f6c
    2998:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
    299c:	726f6300 	rsbvc	r6, pc, #0, 6
    29a0:	6d5f3165 	ldfvse	f3, [pc, #-404]	; 2814 <__core1_unwind_stub-0xffd7ec>
    29a4:	006e6961 	rsbeq	r6, lr, r1, ror #18
    29a8:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    29ac:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    29b0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    29b4:	6162765f 	cmnvs	r2, pc, asr r6
    29b8:	5f670072 	svcpl	0x00670072
    29bc:	736c7570 	cmnvc	ip, #112, 10	; 0x1c000000
    29c0:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    29c4:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    29c8:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
    29cc:	67007365 	strvs	r7, [r0, -r5, ror #6]
    29d0:	6c75705f 	ldclvs	0, cr7, [r5], #-380	; 0xfffffe84
    29d4:	705f6573 	subsvc	r6, pc, r3, ror r5	; <UNPREDICTABLE>
    29d8:	5f726961 	svcpl	0x00726961
    29dc:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    29e0:	5f5f0073 	svcpl	0x005f0073
    29e4:	5f737362 	svcpl	0x00737362
    29e8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    29ec:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
    29f0:	73625f5f 	cmnvc	r2, #380	; 0x17c
    29f4:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
    29f8:	005f5f64 	subseq	r5, pc, r4, ror #30
    29fc:	6967616d 	stmdbvs	r7!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2a00:	5f670063 	svcpl	0x00670063
    2a04:	66656f63 	strbtvs	r6, [r5], -r3, ror #30
    2a08:	756f635f 	strbvc	r6, [pc, #-863]!	; 26b1 <__core1_unwind_stub-0xffd94f>
    2a0c:	7300746e 	movwvc	r7, #1134	; 0x46e
    2a10:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    2a14:	3165726f 	cmncc	r5, pc, ror #4
    2a18:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2a1c:	6d5f3165 	ldfvse	f3, [pc, #-404]	; 2890 <__core1_unwind_stub-0xffd770>
    2a20:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
    2a24:	5f670063 	svcpl	0x00670063
    2a28:	66656f63 	strbtvs	r6, [r5], -r3, ror #30
    2a2c:	6961705f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    2a30:	79625f72 	stmdbvc	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2a34:	00736574 	rsbseq	r6, r3, r4, ror r5
    2a38:	5f676f6c 	svcpl	0x00676f6c
    2a3c:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
    2a40:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
    2a44:	745f3874 	ldrbvc	r3, [pc], #-2164	; 2a4c <__core1_unwind_stub-0xffd5b4>
    2a48:	72657a00 	rsbvc	r7, r5, #0, 20
    2a4c:	73625f6f 	cmnvc	r2, #444	; 0x1bc
    2a50:	5f670073 	svcpl	0x00670073
    2a54:	736c7570 	cmnvc	ip, #112, 10	; 0x1c000000
    2a58:	6f635f65 	svcvs	0x00635f65
    2a5c:	00746e75 	rsbseq	r6, r4, r5, ror lr
    2a60:	61645f5f 	cmnvs	r4, pc, asr pc
    2a64:	6c5f6174 	ldfvse	f6, [pc], {116}	; 0x74
    2a68:	5f64616f 	svcpl	0x0064616f
    2a6c:	5f5f005f 	svcpl	0x005f005f
    2a70:	61746164 	cmnvs	r4, r4, ror #2
    2a74:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
    2a78:	63005f5f 	movwvs	r5, #3935	; 0xf5f
    2a7c:	3165726f 	cmncc	r5, pc, ror #4
    2a80:	6174735f 	cmnvs	r4, pc, asr r3
    2a84:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2a88:	646f625f 	strbtvs	r6, [pc], #-607	; 2a90 <__core1_unwind_stub-0xffd570>
    2a8c:	5f5f0079 	svcpl	0x005f0079
    2a90:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    2a94:	6f745f6b 	svcvs	0x00745f6b
    2a98:	005f5f70 	subseq	r5, pc, r0, ror pc	; <UNPREDICTABLE>
    2a9c:	61645f5f 	cmnvs	r4, pc, asr pc
    2aa0:	735f6174 	cmpvc	pc, #116, 2
    2aa4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2aa8:	73005f5f 	movwvc	r5, #3935	; 0xf5f
    2aac:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    2ab0:	3165726f 	cmncc	r5, pc, ror #4
    2ab4:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2ab8:	735f3165 	cmpvc	pc, #1073741849	; 0x40000019
    2abc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2ac0:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    2ac4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    2ac8:	5f747261 	svcpl	0x00747261
    2acc:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2ad0:	656d0031 	strbvs	r0, [sp, #-49]!	; 0xffffffcf
    2ad4:	766f6d6d 	strbtvc	r6, [pc], -sp, ror #26
    2ad8:	656d0065 	strbvs	r0, [sp, #-101]!	; 0xffffff9b
    2adc:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
    2ae0:	63727300 	cmnvs	r2, #0, 6
    2ae4:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2ae8:	6c2f3165 	stfvss	f3, [pc], #-404	; 295c <__core1_unwind_stub-0xffd6a4>
    2aec:	5f636269 	svcpl	0x00636269
    2af0:	2e6e696d 	vnmulcs.f16	s13, s28, s27	; <UNPREDICTABLE>
    2af4:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
    2af8:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    2afc:	63727300 	cmnvs	r2, #0, 6
    2b00:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    2b04:	632f3165 			; <UNDEFINED> instruction: 0x632f3165
    2b08:	3165726f 	cmncc	r5, pc, ror #4
    2b0c:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    2b10:	735f7864 	cmpvc	pc, #100, 16	; 0x640000
    2b14:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    2b18:	4e470053 	mcrmi	0, 2, r0, cr7, cr3, {2}
    2b1c:	53412055 	movtpl	r2, #4181	; 0x1055
    2b20:	332e3220 			; <UNDEFINED> instruction: 0x332e3220
    2b24:	43530034 	cmpmi	r3, #52	; 0x34
    2b28:	54435f55 	strbpl	r5, [r3], #-3925	; 0xfffff0ab
    2b2c:	67004c52 	smlsdvs	r0, r2, ip, r4
    2b30:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2b34:	6f69705f 	svcvs	0x0069705f
    2b38:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    2b3c:	72610061 	rsbvc	r0, r1, #97	; 0x61
    2b40:	6d6d5f6d 	stclvs	15, cr5, [sp, #-436]!	; 0xfffffe4c
    2b44:	6f6c635f 	svcvs	0x006c635f
    2b48:	61006573 	tstvs	r0, r3, ror r5
    2b4c:	61735f39 	cmnvs	r3, r9, lsr pc
    2b50:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    2b54:	625f657a 	subsvs	r6, pc, #511705088	; 0x1e800000
    2b58:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    2b5c:	6d6d5f65 	stclvs	15, cr5, [sp, #-404]!	; 0xfffffe6c
    2b60:	6d6d0075 	stclvs	0, cr0, [sp, #-468]!	; 0xfffffe2c
    2b64:	6e6f5f75 	mcrvs	15, 3, r5, cr15, cr5, {3}
    2b68:	6d5f7300 	ldclvs	3, cr7, [pc, #-0]	; 2b70 <__core1_unwind_stub-0xffd490>
    2b6c:	615f756d 	cmpvs	pc, sp, ror #10
    2b70:	705f7875 	subsvc	r7, pc, r5, ror r8	; <UNPREDICTABLE>
    2b74:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
    2b78:	5f43324c 	svcpl	0x0043324c
    2b7c:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
    2b80:	625f6700 	subsvs	r6, pc, #0, 14
    2b84:	5f6b6e61 	svcpl	0x006b6e61
    2b88:	736c7570 	cmnvc	ip, #112, 10	; 0x1c000000
    2b8c:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xfffff09b
    2b90:	4c41006c 	mcrrmi	0, 6, r0, r1, cr12
    2b94:	52425f54 	subpl	r5, r2, #84, 30	; 0x150
    2b98:	45474449 	strbmi	r4, [r7, #-1097]	; 0xfffffbb7
    2b9c:	4632485f 			; <UNDEFINED> instruction: 0x4632485f
    2ba0:	6e696c00 	cdpvs	12, 6, cr6, cr9, cr0, {0}
    2ba4:	68735f65 	ldmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    2ba8:	00746669 	rsbseq	r6, r4, r9, ror #12
    2bac:	5f756d6d 	svcpl	0x00756d6d
    2bb0:	6c6f6f70 	stclvs	15, cr6, [pc], #-448	; 29f8 <__core1_unwind_stub-0xffd608>
    2bb4:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
    2bb8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2bbc:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    2bc0:	33616d64 	cmncc	r1, #100, 26	; 0x1900
    2bc4:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    2bc8:	6d6d0063 	stclvs	0, cr0, [sp, #-396]!	; 0xfffffe74
    2bcc:	75615f75 	strbvc	r5, [r1, #-3957]!	; 0xfffff08b
    2bd0:	6c615f78 	stclvs	15, cr5, [r1], #-480	; 0xfffffe20
    2bd4:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    2bd8:	5f6d7261 	svcpl	0x006d7261
    2bdc:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    2be0:	75645f65 	strbvc	r5, [r4, #-3941]!	; 0xfffff09b
    2be4:	735f706d 	cmpvc	pc, #109	; 0x6d
    2be8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    2bec:	72610073 	rsbvc	r0, r1, #115	; 0x73
    2bf0:	63695f6d 	cmnvs	r9, #436	; 0x1b4
    2bf4:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
    2bf8:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    2bfc:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
    2c00:	5f657461 	svcpl	0x00657461
    2c04:	006c6c61 	rsbeq	r6, ip, r1, ror #24
    2c08:	5f6d7261 	svcpl	0x006d7261
    2c0c:	695f326c 	ldmdbvs	pc, {r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    2c10:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
    2c14:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2c18:	72610064 	rsbvc	r0, r1, #100	; 0x64
    2c1c:	6d6d5f6d 	stclvs	15, cr5, [sp, #-436]!	; 0xfffffe4c
    2c20:	5f77685f 	svcpl	0x0077685f
    2c24:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    2c28:	61636900 	cmnvs	r3, r0, lsl #18
    2c2c:	5f656863 	svcpl	0x00656863
    2c30:	67006e6f 	strvs	r6, [r0, -pc, ror #28]
    2c34:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2c38:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    2c3c:	33616d64 	cmncc	r1, #100, 26	; 0x1900
    2c40:	7273635f 	rsbsvc	r6, r3, #2080374785	; 0x7c000001
    2c44:	6d726100 	ldfvse	f6, [r2, #-0]
    2c48:	5f6d6d5f 	svcpl	0x006d6d5f
    2c4c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2c50:	5f657269 	svcpl	0x00657269
    2c54:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    2c58:	73750079 	cmnvc	r5, #121	; 0x79
    2c5c:	635f7265 	cmpvs	pc, #1342177286	; 0x50000006
    2c60:	73007874 	movwvc	r7, #2164	; 0x874
    2c64:	6274745f 	rsbsvs	r7, r4, #1593835520	; 0x5f000000
    2c68:	6f74735f 	svcvs	0x0074735f
    2c6c:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    2c70:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2c74:	4952425f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r9, lr}^
    2c78:	5f454744 	svcpl	0x00454744
    2c7c:	00483246 	subeq	r3, r8, r6, asr #4
    2c80:	72615f67 	rsbvc	r5, r1, #412	; 0x19c
    2c84:	736d5f6d 	cmnvc	sp, #436	; 0x1b4
    2c88:	616d6467 	cmnvs	sp, r7, ror #8
    2c8c:	65645f30 	strbvs	r5, [r4, #-3888]!	; 0xfffff0d0
    2c90:	67006373 	smlsdxvs	r0, r3, r3, r6
    2c94:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2c98:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    2c9c:	30616d64 	rsbcc	r6, r1, r4, ror #26
    2ca0:	7273635f 	rsbsvc	r6, r3, #2080374785	; 0x7c000001
    2ca4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2ca8:	4952425f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r9, lr}^
    2cac:	5f454744 	svcpl	0x00454744
    2cb0:	00533246 	subseq	r3, r3, r6, asr #4
    2cb4:	5f6d7261 	svcpl	0x006d7261
    2cb8:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    2cbc:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    2cc0:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
    2cc4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2cc8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2ccc:	4952425f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r9, lr}^
    2cd0:	5f454744 	svcpl	0x00454744
    2cd4:	3248574c 	subcc	r5, r8, #76, 14	; 0x1300000
    2cd8:	5f670046 	svcpl	0x00670046
    2cdc:	5f6d7261 	svcpl	0x006d7261
    2ce0:	5f683266 	svcpl	0x00683266
    2ce4:	30717269 	rsbscc	r7, r1, r9, ror #4
    2ce8:	006e655f 	rsbeq	r6, lr, pc, asr r5
    2cec:	5f6d7261 	svcpl	0x006d7261
    2cf0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    2cf4:	7463735f 	strbtvc	r7, [r3], #-863	; 0xfffffca1
    2cf8:	6700726c 	strvs	r7, [r0, -ip, ror #4]
    2cfc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2d00:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    2d04:	31616d64 	cmncc	r1, r4, ror #26
    2d08:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    2d0c:	63610063 	cmnvs	r1, #99	; 0x63
    2d10:	00726c74 	rsbseq	r6, r2, r4, ror ip
    2d14:	6f5f7062 	svcvs	0x005f7062
    2d18:	657a006e 	ldrbvs	r0, [sl, #-110]!	; 0xffffff92
    2d1c:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
    2d20:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2d24:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    2d28:	32616d64 	rsbcc	r6, r1, #100, 26	; 0x1900
    2d2c:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    2d30:	72730063 	rsbsvc	r0, r3, #99	; 0x63
    2d34:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    2d38:	656d5f6d 	strbvs	r5, [sp, #-3949]!	; 0xfffff093
    2d3c:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    2d40:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
    2d44:	00632e73 	rsbeq	r2, r3, r3, ror lr
    2d48:	72625f67 	rsbvc	r5, r2, #412	; 0x19c
    2d4c:	65676469 	strbvs	r6, [r7, #-1129]!	; 0xfffffb97
    2d50:	6165725f 	cmnvs	r5, pc, asr r2
    2d54:	61007964 	tstvs	r0, r4, ror #18
    2d58:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2b98 <__core1_unwind_stub-0xffd468>
    2d5c:	735f756d 	cmpvc	pc, #457179136	; 0x1b400000
    2d60:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2d64:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    2d68:	73003165 	movwvc	r3, #357	; 0x165
    2d6c:	00737465 	rsbseq	r7, r3, r5, ror #8
    2d70:	5f6d7261 	svcpl	0x006d7261
    2d74:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    2d78:	735f656c 	cmpvc	pc, #108, 10	; 0x1b000000
    2d7c:	615f706d 	cmpvs	pc, sp, rrx
    2d80:	735f646e 	cmpvc	pc, #1845493760	; 0x6e000000
    2d84:	63007563 	movwvs	r7, #1379	; 0x563
    2d88:	64697363 	strbtvs	r7, [r9], #-867	; 0xfffffc9d
    2d8c:	61770072 	cmnvs	r7, r2, ror r0
    2d90:	67007379 	smlsdxvs	r0, r9, r3, r7
    2d94:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2d98:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    2d9c:	32616d64 	rsbcc	r6, r1, #100, 26	; 0x1900
    2da0:	7273635f 	rsbsvc	r6, r3, #2080374785	; 0x7c000001
    2da4:	65726300 	ldrbvs	r6, [r2, #-768]!	; 0xfffffd00
    2da8:	5f657461 	svcpl	0x00657461
    2dac:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
    2db0:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    2db4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    2db8:	645f3165 	ldrbvs	r3, [pc], #-357	; 2dc0 <__core1_unwind_stub-0xffd240>
    2dbc:	61007264 	tstvs	r0, r4, ror #4
    2dc0:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2c00 <__core1_unwind_stub-0xffd400>
    2dc4:	706f5f6d 	rsbvc	r5, pc, sp, ror #30
    2dc8:	72006e65 	andvc	r6, r0, #1616	; 0x650
    2dcc:	6f696765 	svcvs	0x00696765
    2dd0:	6f635f6e 	svcvs	0x00635f6e
    2dd4:	00746e75 	rsbseq	r6, r4, r5, ror lr
    2dd8:	5f6d7261 	svcpl	0x006d7261
    2ddc:	5f756d6d 	svcpl	0x00756d6d
    2de0:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    2de4:	6f635f70 	svcvs	0x00635f70
    2de8:	00306572 	eorseq	r6, r0, r2, ror r5
    2dec:	5f6d7261 	svcpl	0x006d7261
    2df0:	5f746573 	svcpl	0x00746573
    2df4:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    2df8:	69625f65 	stmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    2dfc:	61007374 	tstvs	r0, r4, ror r3
    2e00:	645f6d72 	ldrbvs	r6, [pc], #-3442	; 2e08 <__core1_unwind_stub-0xffd1f8>
    2e04:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    2e08:	6c635f65 	stclvs	15, cr5, [r3], #-404	; 0xfffffe6c
    2e0c:	5f6e6165 	svcpl	0x006e6165
    2e10:	61766e69 	cmnvs	r6, r9, ror #28
    2e14:	6164696c 	cmnvs	r4, ip, ror #18
    2e18:	615f6574 	cmpvs	pc, r4, ror r5	; <UNPREDICTABLE>
    2e1c:	67006c6c 	strvs	r6, [r0, -ip, ror #24]
    2e20:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2e24:	6672705f 			; <UNDEFINED> instruction: 0x6672705f
    2e28:	756f635f 	strbvc	r6, [pc, #-863]!	; 2ad1 <__core1_unwind_stub-0xffd52f>
    2e2c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2e30:	615f6700 	cmpvs	pc, r0, lsl #14
    2e34:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 2c74 <__core1_unwind_stub-0xffd38c>
    2e38:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    2e3c:	645f3461 	ldrbvs	r3, [pc], #-1121	; 2e44 <__core1_unwind_stub-0xffd1bc>
    2e40:	00637365 	rsbeq	r7, r3, r5, ror #6
    2e44:	6465656e 	strbtvs	r6, [r5], #-1390	; 0xfffffa92
    2e48:	62747400 	rsbsvs	r7, r4, #0, 8
    2e4c:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    2e50:	625f6700 	subsvs	r6, pc, #0, 14
    2e54:	5f6b6e61 	svcpl	0x006b6e61
    2e58:	66656f63 	strbtvs	r6, [r5], -r3, ror #30
    2e5c:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
    2e60:	6d5f7300 	ldclvs	3, cr7, [pc, #-0]	; 2e68 <__core1_unwind_stub-0xffd198>
    2e64:	705f756d 	subsvc	r7, pc, sp, ror #10
    2e68:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
    2e6c:	5f6d7261 	svcpl	0x006d7261
    2e70:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    2e74:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xfffff09b
    2e78:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
    2e7c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2e80:	706d0064 	rsbvc	r0, sp, r4, rrx
    2e84:	00726469 	rsbseq	r6, r2, r9, ror #8
    2e88:	63616364 	cmnvs	r1, #100, 6	; 0x90000001
    2e8c:	6f5f6568 	svcvs	0x005f6568
    2e90:	4c41006e 	mcrrmi	0, 6, r0, r1, cr14
    2e94:	52425f54 	subpl	r5, r2, #84, 30	; 0x150
    2e98:	45474449 	strbmi	r4, [r7, #-1097]	; 0xfffffbb7
    2e9c:	6700655f 	smlsdvs	r0, pc, r5, r6	; <UNPREDICTABLE>
    2ea0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2ea4:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    2ea8:	34616d64 	strbtcc	r6, [r1], #-3428	; 0xfffff29c
    2eac:	7273635f 	rsbsvc	r6, r3, #2080374785	; 0x7c000001
    2eb0:	73736300 	cmnvc	r3, #0, 6
    2eb4:	00726c65 	rsbseq	r6, r2, r5, ror #24
    2eb8:	72615f67 	rsbvc	r5, r1, #412	; 0x19c
    2ebc:	736d5f6d 	cmnvc	sp, #436	; 0x1b4
    2ec0:	616d6467 	cmnvs	sp, r7, ror #8
    2ec4:	73635f31 	cmnvc	r3, #49, 30	; 0xc4
    2ec8:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    2ecc:	2f2e2e2f 	svccs	0x002e2e2f
    2ed0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 2e20 <__core1_unwind_stub-0xffd1e0>
    2ed4:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    2ed8:	6f632f63 	svcvs	0x00632f63
    2edc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2ee0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2ee4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2ee8:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
    2eec:	532e7363 			; <UNDEFINED> instruction: 0x532e7363
    2ef0:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    2ef4:	2f646c69 	svccs	0x00646c69
    2ef8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    2efc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2f00:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    2f04:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2f08:	6c472d69 	mcrrvs	13, 6, r2, r7, cr9
    2f0c:	39546b39 	ldmdbcc	r4, {r0, r3, r4, r5, r8, r9, fp, sp, lr}^
    2f10:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2f14:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    2f18:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2f1c:	61652d65 	cmnvs	r5, r5, ror #26
    2f20:	392d6962 	pushcc	{r1, r5, r6, r8, fp, sp, lr}
    2f24:	3130322d 	teqcc	r0, sp, lsr #4
    2f28:	34712d39 	ldrbtcc	r2, [r1], #-3385	; 0xfffff2c7
    2f2c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    2f30:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    2f34:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    2f38:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2f3c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2f40:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2f44:	00636367 	rsbeq	r6, r3, r7, ror #6
    2f48:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2f4c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2f50:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2f54:	2f636367 	svccs	0x00636367
    2f58:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    2f5c:	612f6769 			; <UNDEFINED> instruction: 0x612f6769
    2f60:	622f6d72 	eorvs	r6, pc, #7296	; 0x1c80
    2f64:	69626170 	stmdbvs	r2!, {r4, r5, r6, r8, sp, lr}^
    2f68:	6900532e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, ip, lr}
    2f6c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    2f70:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    2f74:	62645f70 	rsbvs	r5, r4, #112, 30	; 0x1c0
    2f78:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    2f7c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    2f80:	695f6863 	ldmdbvs	pc, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    2f84:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    2f88:	41540074 	cmpmi	r4, r4, ror r0
    2f8c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    2f90:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2f94:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    2f98:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    2f9c:	41003332 	tstmi	r0, r2, lsr r3
    2fa0:	455f4d52 	ldrbmi	r4, [pc, #-3410]	; 2256 <__core1_unwind_stub-0xffddaa>
    2fa4:	41540051 	cmpmi	r4, r1, asr r0
    2fa8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    2fac:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2fb0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2fb4:	36353131 			; <UNDEFINED> instruction: 0x36353131
    2fb8:	73663274 	cmnvc	r6, #116, 4	; 0x40000007
    2fbc:	61736900 	cmnvs	r3, r0, lsl #18
    2fc0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    2fc4:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    2fc8:	5500626d 	strpl	r6, [r0, #-621]	; 0xfffffd93
    2fcc:	79744944 	ldmdbvc	r4!, {r2, r6, r8, fp, lr}^
    2fd0:	54006570 	strpl	r6, [r0], #-1392	; 0xfffffa90
    2fd4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    2fd8:	50435f54 	subpl	r5, r3, r4, asr pc
    2fdc:	6f635f55 	svcvs	0x00635f55
    2fe0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    2fe4:	63373561 	teqvs	r7, #406847488	; 0x18400000
    2fe8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    2fec:	33356178 	teqcc	r5, #120, 2
    2ff0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 20f8 <__core1_unwind_stub-0xffdf08>
    2ff4:	6d766964 			; <UNDEFINED> instruction: 0x6d766964
    2ff8:	6964646f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
    2ffc:	41420034 	cmpmi	r2, r4, lsr r0
    3000:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3004:	5f484352 	svcpl	0x00484352
    3008:	425f4d38 	subsmi	r4, pc, #56, 26	; 0xe00
    300c:	00455341 	subeq	r5, r5, r1, asr #6
    3010:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3014:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3018:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    301c:	31386d72 	teqcc	r8, r2, ror sp
    3020:	41540030 	cmpmi	r4, r0, lsr r0
    3024:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3028:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    302c:	6567785f 	strbvs	r7, [r7, #-2143]!	; 0xfffff7a1
    3030:	0031656e 	eorseq	r6, r1, lr, ror #10
    3034:	5f4d5241 	svcpl	0x004d5241
    3038:	5f534350 	svcpl	0x00534350
    303c:	43504141 	cmpmi	r0, #1073741840	; 0x40000010
    3040:	57495f53 	smlsldpl	r5, r9, r3, pc	; <UNPREDICTABLE>
    3044:	54584d4d 	ldrbpl	r4, [r8], #-3405	; 0xfffff2b3
    3048:	53414200 	movtpl	r4, #4608	; 0x1200
    304c:	52415f45 	subpl	r5, r1, #276	; 0x114
    3050:	305f4843 	subscc	r4, pc, r3, asr #16
    3054:	53414200 	movtpl	r4, #4608	; 0x1200
    3058:	52415f45 	subpl	r5, r1, #276	; 0x114
    305c:	325f4843 	subscc	r4, pc, #4390912	; 0x430000
    3060:	53414200 	movtpl	r4, #4608	; 0x1200
    3064:	52415f45 	subpl	r5, r1, #276	; 0x114
    3068:	335f4843 	cmpcc	pc, #4390912	; 0x430000
    306c:	53414200 	movtpl	r4, #4608	; 0x1200
    3070:	52415f45 	subpl	r5, r1, #276	; 0x114
    3074:	345f4843 	ldrbcc	r4, [pc], #-2115	; 307c <__core1_unwind_stub-0xffcf84>
    3078:	53414200 	movtpl	r4, #4608	; 0x1200
    307c:	52415f45 	subpl	r5, r1, #276	; 0x114
    3080:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    3084:	53414200 	movtpl	r4, #4608	; 0x1200
    3088:	52415f45 	subpl	r5, r1, #276	; 0x114
    308c:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    3090:	52415400 	subpl	r5, r1, #0, 8
    3094:	5f544547 	svcpl	0x00544547
    3098:	5f555043 	svcpl	0x00555043
    309c:	61637378 	smcvs	14136	; 0x3738
    30a0:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    30a4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    30a8:	705f7469 	subsvc	r7, pc, r9, ror #8
    30ac:	72646572 	rsbvc	r6, r4, #478150656	; 0x1c800000
    30b0:	54007365 	strpl	r7, [r0], #-869	; 0xfffffc9b
    30b4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    30b8:	50435f54 	subpl	r5, r3, r4, asr pc
    30bc:	6f635f55 	svcvs	0x00635f55
    30c0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    30c4:	0033336d 	eorseq	r3, r3, sp, ror #6
    30c8:	74495355 	strbvc	r5, [r9], #-853	; 0xfffffcab
    30cc:	00657079 	rsbeq	r7, r5, r9, ror r0
    30d0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    30d4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    30d8:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    30dc:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    30e0:	00696d64 	rsbeq	r6, r9, r4, ror #26
    30e4:	5f617369 	svcpl	0x00617369
    30e8:	69626f6e 	stmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    30ec:	41540074 	cmpmi	r4, r4, ror r0
    30f0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    30f4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    30f8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    30fc:	36373131 			; <UNDEFINED> instruction: 0x36373131
    3100:	73667a6a 	cmnvc	r6, #434176	; 0x6a000
    3104:	4d524100 	ldfmie	f4, [r2, #-0]
    3108:	5343505f 	movtpl	r5, #12383	; 0x305f
    310c:	4b4e555f 	blmi	1398690 <__bss_end__+0x37c690>
    3110:	4e574f4e 	cdpmi	15, 5, cr4, cr7, cr14, {2}
    3114:	52415400 	subpl	r5, r1, #0, 8
    3118:	5f544547 	svcpl	0x00544547
    311c:	5f555043 	svcpl	0x00555043
    3120:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    3124:	41420065 	cmpmi	r2, r5, rrx
    3128:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    312c:	5f484352 	svcpl	0x00484352
    3130:	4a455435 	bmi	115820c <__bss_end__+0x13c20c>
    3134:	6d726100 	ldfvse	f6, [r2, #-0]
    3138:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    313c:	735f6d73 	cmpvc	pc, #7360	; 0x1cc0
    3140:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    3144:	6d726100 	ldfvse	f6, [r2, #-0]
    3148:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    314c:	65743568 	ldrbvs	r3, [r4, #-1384]!	; 0xfffffa98
    3150:	736e7500 	cmnvc	lr, #0, 10
    3154:	5f636570 	svcpl	0x00636570
    3158:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    315c:	0073676e 	rsbseq	r6, r3, lr, ror #14
    3160:	5f617369 	svcpl	0x00617369
    3164:	5f746962 	svcpl	0x00746962
    3168:	00636573 	rsbeq	r6, r3, r3, ror r5
    316c:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
    3170:	61745f7a 	cmnvs	r4, sl, ror pc
    3174:	52410062 	subpl	r0, r1, #98	; 0x62
    3178:	43565f4d 	cmpmi	r6, #308	; 0x134
    317c:	6d726100 	ldfvse	f6, [r2, #-0]
    3180:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    3184:	73785f68 	cmnvc	r8, #104, 30	; 0x1a0
    3188:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    318c:	4d524100 	ldfmie	f4, [r2, #-0]
    3190:	00454c5f 	subeq	r4, r5, pc, asr ip
    3194:	5f4d5241 	svcpl	0x004d5241
    3198:	41005356 	tstmi	r0, r6, asr r3
    319c:	475f4d52 			; <UNDEFINED> instruction: 0x475f4d52
    31a0:	72610045 	rsbvc	r0, r1, #69	; 0x45
    31a4:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    31a8:	735f656e 	cmpvc	pc, #461373440	; 0x1b800000
    31ac:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    31b0:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    31b4:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 31bc <__core1_unwind_stub-0xffce44>
    31b8:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    31bc:	6f6c6620 	svcvs	0x006c6620
    31c0:	54007461 	strpl	r7, [r0], #-1121	; 0xfffffb9f
    31c4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    31c8:	50435f54 	subpl	r5, r3, r4, asr pc
    31cc:	6f635f55 	svcvs	0x00635f55
    31d0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    31d4:	00353161 	eorseq	r3, r5, r1, ror #2
    31d8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    31dc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    31e0:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    31e4:	36323761 	ldrtcc	r3, [r2], -r1, ror #14
    31e8:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    31ec:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    31f0:	50435f54 	subpl	r5, r3, r4, asr pc
    31f4:	6f635f55 	svcvs	0x00635f55
    31f8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    31fc:	00373161 	eorseq	r3, r7, r1, ror #2
    3200:	5f4d5241 	svcpl	0x004d5241
    3204:	54005447 	strpl	r5, [r0], #-1095	; 0xfffffbb9
    3208:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    320c:	50435f54 	subpl	r5, r3, r4, asr pc
    3210:	656e5f55 	strbvs	r5, [lr, #-3925]!	; 0xfffff0ab
    3214:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    3218:	316e6573 	smccc	58963	; 0xe653
    321c:	52415400 	subpl	r5, r1, #0, 8
    3220:	5f544547 	svcpl	0x00544547
    3224:	5f555043 	svcpl	0x00555043
    3228:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    322c:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    3230:	41420066 	cmpmi	r2, r6, rrx
    3234:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3238:	5f484352 	svcpl	0x00484352
    323c:	004d4537 	subeq	r4, sp, r7, lsr r5
    3240:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3244:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3248:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    324c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3250:	32316178 	eorscc	r6, r1, #120, 2
    3254:	73616800 	cmnvc	r1, #0, 16
    3258:	6c617668 	stclvs	6, cr7, [r1], #-416	; 0xfffffe60
    325c:	4200745f 	andmi	r7, r0, #1593835520	; 0x5f000000
    3260:	5f455341 	svcpl	0x00455341
    3264:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    3268:	5a4b365f 	bpl	12d0bec <__bss_end__+0x2b4bec>
    326c:	61736900 	cmnvs	r3, r0, lsl #18
    3270:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3274:	72610073 	rsbvc	r0, r1, #115	; 0x73
    3278:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    327c:	615f6863 	cmpvs	pc, r3, ror #16
    3280:	685f6d72 	ldmdavs	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    3284:	76696477 			; <UNDEFINED> instruction: 0x76696477
    3288:	6d726100 	ldfvse	f6, [r2, #-0]
    328c:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    3290:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    3294:	73690063 	cmnvc	r9, #99	; 0x63
    3298:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    329c:	70665f74 	rsbvc	r5, r6, r4, ror pc
    32a0:	41003631 	tstmi	r0, r1, lsr r6
    32a4:	485f4d52 	ldmdami	pc, {r1, r4, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    32a8:	73690049 	cmnvc	r9, #73	; 0x49
    32ac:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    32b0:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
    32b4:	54007669 	strpl	r7, [r0], #-1641	; 0xfffff997
    32b8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    32bc:	50435f54 	subpl	r5, r3, r4, asr pc
    32c0:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    32c4:	3331316d 	teqcc	r1, #1073741851	; 0x4000001b
    32c8:	00736a36 	rsbseq	r6, r3, r6, lsr sl
    32cc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    32d0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    32d4:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    32d8:	00386d72 	eorseq	r6, r8, r2, ror sp
    32dc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    32e0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    32e4:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    32e8:	00396d72 	eorseq	r6, r9, r2, ror sp
    32ec:	47524154 			; <UNDEFINED> instruction: 0x47524154
    32f0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    32f4:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    32f8:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    32fc:	6d726100 	ldfvse	f6, [r2, #-0]
    3300:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    3304:	6d635f68 	stclvs	15, cr5, [r3, #-416]!	; 0xfffffe60
    3308:	54006573 	strpl	r6, [r0], #-1395	; 0xfffffa8d
    330c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3310:	50435f54 	subpl	r5, r3, r4, asr pc
    3314:	6f635f55 	svcvs	0x00635f55
    3318:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    331c:	5400346d 	strpl	r3, [r0], #-1133	; 0xfffffb93
    3320:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3324:	50435f54 	subpl	r5, r3, r4, asr pc
    3328:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    332c:	6530316d 	ldrvs	r3, [r0, #-365]!	; 0xfffffe93
    3330:	52415400 	subpl	r5, r1, #0, 8
    3334:	5f544547 	svcpl	0x00544547
    3338:	5f555043 	svcpl	0x00555043
    333c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3340:	376d7865 	strbcc	r7, [sp, -r5, ror #16]!
    3344:	61736900 	cmnvs	r3, r0, lsl #18
    3348:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    334c:	7670665f 			; <UNDEFINED> instruction: 0x7670665f
    3350:	72610035 	rsbvc	r0, r1, #53	; 0x35
    3354:	6f635f6d 	svcvs	0x00635f6d
    3358:	635f646e 	cmpvs	pc, #1845493760	; 0x6e000000
    335c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3360:	5f4d5241 	svcpl	0x004d5241
    3364:	5f534350 	svcpl	0x00534350
    3368:	43504141 	cmpmi	r0, #1073741840	; 0x40000010
    336c:	73690053 	cmnvc	r9, #83	; 0x53
    3370:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3374:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    3378:	5f38766d 	svcpl	0x0038766d
    337c:	41420032 	cmpmi	r2, r2, lsr r0
    3380:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3384:	5f484352 	svcpl	0x00484352
    3388:	54004d33 	strpl	r4, [r0], #-3379	; 0xfffff2cd
    338c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3390:	50435f54 	subpl	r5, r3, r4, asr pc
    3394:	6f635f55 	svcvs	0x00635f55
    3398:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    339c:	63373161 	teqvs	r7, #1073741848	; 0x40000018
    33a0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    33a4:	00376178 	eorseq	r6, r7, r8, ror r1
    33a8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    33ac:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    33b0:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    33b4:	31376d72 	teqcc	r7, r2, ror sp
    33b8:	61007430 	tstvs	r0, r0, lsr r4
    33bc:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    33c0:	5f686372 	svcpl	0x00686372
    33c4:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    33c8:	00327478 	eorseq	r7, r2, r8, ror r4
    33cc:	5f617369 	svcpl	0x00617369
    33d0:	5f6d756e 	svcpl	0x006d756e
    33d4:	73746962 	cmnvc	r4, #1605632	; 0x188000
    33d8:	52415400 	subpl	r5, r1, #0, 8
    33dc:	5f544547 	svcpl	0x00544547
    33e0:	5f555043 	svcpl	0x00555043
    33e4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    33e8:	306d7865 	rsbcc	r7, sp, r5, ror #16
    33ec:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    33f0:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    33f4:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    33f8:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    33fc:	41540079 	cmpmi	r4, r9, ror r0
    3400:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3404:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3408:	7978655f 	ldmdbvc	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    340c:	6d736f6e 	ldclvs	15, cr6, [r3, #-440]!	; 0xfffffe48
    3410:	41540031 	cmpmi	r4, r1, lsr r0
    3414:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3418:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    341c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3420:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    3424:	69003235 	stmdbvs	r0, {r0, r2, r4, r5, r9, ip, sp}
    3428:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    342c:	745f7469 	ldrbvc	r7, [pc], #-1129	; 3434 <__core1_unwind_stub-0xffcbcc>
    3430:	00766964 	rsbseq	r6, r6, r4, ror #18
    3434:	66657270 			; <UNDEFINED> instruction: 0x66657270
    3438:	6e5f7265 	cdpvs	2, 5, cr7, cr15, cr5, {3}
    343c:	5f6e6f65 	svcpl	0x006e6f65
    3440:	5f726f66 	svcpl	0x00726f66
    3444:	69623436 	stmdbvs	r2!, {r1, r2, r4, r5, sl, ip, sp}^
    3448:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    344c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3450:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    3454:	66363170 			; <UNDEFINED> instruction: 0x66363170
    3458:	54006c6d 	strpl	r6, [r0], #-3181	; 0xfffff393
    345c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3460:	50435f54 	subpl	r5, r3, r4, asr pc
    3464:	6f635f55 	svcvs	0x00635f55
    3468:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    346c:	00323361 	eorseq	r3, r2, r1, ror #6
    3470:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3474:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3478:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    347c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3480:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    3484:	61736900 	cmnvs	r3, r0, lsl #18
    3488:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    348c:	3170665f 	cmncc	r0, pc, asr r6
    3490:	6e6f6336 	mcrvs	3, 3, r6, cr15, cr6, {1}
    3494:	6e750076 	mrcvs	0, 3, r0, cr5, cr6, {3}
    3498:	63657073 	cmnvs	r5, #115	; 0x73
    349c:	74735f76 	ldrbtvc	r5, [r3], #-3958	; 0xfffff08a
    34a0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    34a4:	41540073 	cmpmi	r4, r3, ror r0
    34a8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    34ac:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    34b0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    34b4:	36353131 			; <UNDEFINED> instruction: 0x36353131
    34b8:	00733274 	rsbseq	r3, r3, r4, ror r2
    34bc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    34c0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    34c4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    34c8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    34cc:	35376178 	ldrcc	r6, [r7, #-376]!	; 0xfffffe88
    34d0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    34d4:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    34d8:	41540035 	cmpmi	r4, r5, lsr r0
    34dc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    34e0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    34e4:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    34e8:	65743630 	ldrbvs	r3, [r4, #-1584]!	; 0xfffff9d0
    34ec:	52415400 	subpl	r5, r1, #0, 8
    34f0:	5f544547 	svcpl	0x00544547
    34f4:	5f555043 	svcpl	0x00555043
    34f8:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    34fc:	6a653632 	bvs	1950dcc <__bss_end__+0x934dcc>
    3500:	41420073 	hvcmi	8195	; 0x2003
    3504:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3508:	5f484352 	svcpl	0x00484352
    350c:	69005434 	stmdbvs	r0, {r2, r4, r5, sl, ip, lr}
    3510:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3514:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    3518:	74707972 	ldrbtvc	r7, [r0], #-2418	; 0xfffff68e
    351c:	7261006f 	rsbvc	r0, r1, #111	; 0x6f
    3520:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    3524:	695f7367 	ldmdbvs	pc, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    3528:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    352c:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    3530:	69006563 	stmdbvs	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    3534:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3538:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    353c:	41420062 	cmpmi	r2, r2, rrx
    3540:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3544:	5f484352 	svcpl	0x00484352
    3548:	00455435 	subeq	r5, r5, r5, lsr r4
    354c:	5f617369 	svcpl	0x00617369
    3550:	74616566 	strbtvc	r6, [r1], #-1382	; 0xfffffa9a
    3554:	00657275 	rsbeq	r7, r5, r5, ror r2
    3558:	5f617369 	svcpl	0x00617369
    355c:	5f746962 	svcpl	0x00746962
    3560:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    3564:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    3568:	6d726100 	ldfvse	f6, [r2, #-0]
    356c:	6e616c5f 	mcrvs	12, 3, r6, cr1, cr15, {2}
    3570:	756f5f67 	strbvc	r5, [pc, #-3943]!	; 2611 <__core1_unwind_stub-0xffd9ef>
    3574:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    3578:	6a626f5f 	bvs	189f2fc <__bss_end__+0x8832fc>
    357c:	5f746365 	svcpl	0x00746365
    3580:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    3584:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
    3588:	685f7365 	ldmdavs	pc, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    358c:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    3590:	5f617369 	svcpl	0x00617369
    3594:	5f746962 	svcpl	0x00746962
    3598:	645f7066 	ldrbvs	r7, [pc], #-102	; 35a0 <__core1_unwind_stub-0xffca60>
    359c:	41003233 	tstmi	r0, r3, lsr r2
    35a0:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    35a4:	73690045 	cmnvc	r9, #69	; 0x45
    35a8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    35ac:	65625f74 	strbvs	r5, [r2, #-3956]!	; 0xfffff08c
    35b0:	41540038 	cmpmi	r4, r8, lsr r0
    35b4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    35b8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    35bc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    35c0:	36373131 			; <UNDEFINED> instruction: 0x36373131
    35c4:	00737a6a 	rsbseq	r7, r3, sl, ror #20
    35c8:	636f7270 	cmnvs	pc, #112, 4
    35cc:	6f737365 	svcvs	0x00737365
    35d0:	79745f72 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    35d4:	61006570 	tstvs	r0, r0, ror r5
    35d8:	665f6c6c 	ldrbvs	r6, [pc], -ip, ror #24
    35dc:	00737570 	rsbseq	r7, r3, r0, ror r5
    35e0:	5f6d7261 	svcpl	0x006d7261
    35e4:	00736370 	rsbseq	r6, r3, r0, ror r3
    35e8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    35ec:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    35f0:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    35f4:	6d726100 	ldfvse	f6, [r2, #-0]
    35f8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    35fc:	00743468 	rsbseq	r3, r4, r8, ror #8
    3600:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3604:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3608:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    360c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3610:	36376178 			; <UNDEFINED> instruction: 0x36376178
    3614:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3618:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    361c:	72610035 	rsbvc	r0, r1, #53	; 0x35
    3620:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    3624:	775f656e 	ldrbvc	r6, [pc, -lr, ror #10]
    3628:	00667562 	rsbeq	r7, r6, r2, ror #10
    362c:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    3630:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    3634:	73690068 	cmnvc	r9, #104	; 0x68
    3638:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    363c:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    3640:	5f6b7269 	svcpl	0x006b7269
    3644:	765f6f6e 	ldrbvc	r6, [pc], -lr, ror #30
    3648:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    364c:	5f656c69 	svcpl	0x00656c69
    3650:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    3654:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3658:	50435f54 	subpl	r5, r3, r4, asr pc
    365c:	6f635f55 	svcvs	0x00635f55
    3660:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3664:	5400306d 	strpl	r3, [r0], #-109	; 0xffffff93
    3668:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    366c:	50435f54 	subpl	r5, r3, r4, asr pc
    3670:	6f635f55 	svcvs	0x00635f55
    3674:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3678:	5400316d 	strpl	r3, [r0], #-365	; 0xfffffe93
    367c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3680:	50435f54 	subpl	r5, r3, r4, asr pc
    3684:	6f635f55 	svcvs	0x00635f55
    3688:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    368c:	6900336d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    3690:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3694:	615f7469 	cmpvs	pc, r9, ror #8
    3698:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    369c:	6100315f 	tstvs	r0, pc, asr r1
    36a0:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    36a4:	5f686372 	svcpl	0x00686372
    36a8:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    36ac:	61736900 	cmnvs	r3, r0, lsl #18
    36b0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    36b4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    36b8:	335f3876 	cmpcc	pc, #7733248	; 0x760000
    36bc:	61736900 	cmnvs	r3, r0, lsl #18
    36c0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    36c4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    36c8:	345f3876 	ldrbcc	r3, [pc], #-2166	; 36d0 <__core1_unwind_stub-0xffc930>
    36cc:	61736900 	cmnvs	r3, r0, lsl #18
    36d0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    36d4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    36d8:	355f3876 	ldrbcc	r3, [pc, #-2166]	; 2e6a <__core1_unwind_stub-0xffd196>
    36dc:	52415400 	subpl	r5, r1, #0, 8
    36e0:	5f544547 	svcpl	0x00544547
    36e4:	5f555043 	svcpl	0x00555043
    36e8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    36ec:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    36f0:	41540033 	cmpmi	r4, r3, lsr r0
    36f4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    36f8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    36fc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3700:	61786574 	cmnvs	r8, r4, ror r5
    3704:	54003535 	strpl	r3, [r0], #-1333	; 0xfffffacb
    3708:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    370c:	50435f54 	subpl	r5, r3, r4, asr pc
    3710:	6f635f55 	svcvs	0x00635f55
    3714:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3718:	00373561 	eorseq	r3, r7, r1, ror #10
    371c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3720:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3724:	6d5f5550 	cfldr64vs	mvdx5, [pc, #-320]	; 35ec <__core1_unwind_stub-0xffca14>
    3728:	726f6370 	rsbvc	r6, pc, #112, 6	; 0xc0000001
    372c:	73690065 	cmnvc	r9, #101	; 0x65
    3730:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3734:	66765f74 	uhsub16vs	r5, r6, r4
    3738:	00327670 	eorseq	r7, r2, r0, ror r6
    373c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3740:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3744:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    3748:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
    374c:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    3750:	5f6d7261 	svcpl	0x006d7261
    3754:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3758:	746f6e5f 	strbtvc	r6, [pc], #-3679	; 3760 <__core1_unwind_stub-0xffc8a0>
    375c:	4154006d 	cmpmi	r4, sp, rrx
    3760:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3764:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3768:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    376c:	36323031 			; <UNDEFINED> instruction: 0x36323031
    3770:	00736a65 	rsbseq	r6, r3, r5, ror #20
    3774:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    3778:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    377c:	4a365f48 	bmi	d9b4a4 <__core1_unwind_stub-0x264b5c>
    3780:	53414200 	movtpl	r4, #4608	; 0x1200
    3784:	52415f45 	subpl	r5, r1, #276	; 0x114
    3788:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    378c:	4142004b 	cmpmi	r2, fp, asr #32
    3790:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3794:	5f484352 	svcpl	0x00484352
    3798:	69004d36 	stmdbvs	r0, {r1, r2, r4, r5, r8, sl, fp, lr}
    379c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    37a0:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    37a4:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    37a8:	41540074 	cmpmi	r4, r4, ror r0
    37ac:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    37b0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    37b4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    37b8:	36333131 			; <UNDEFINED> instruction: 0x36333131
    37bc:	0073666a 	rsbseq	r6, r3, sl, ror #12
    37c0:	5f4d5241 	svcpl	0x004d5241
    37c4:	4100534c 	tstmi	r0, ip, asr #6
    37c8:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    37cc:	41420054 	qdaddmi	r0, r4, r2
    37d0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    37d4:	5f484352 	svcpl	0x00484352
    37d8:	41005a36 	tstmi	r0, r6, lsr sl
    37dc:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    37e0:	415f5343 	cmpmi	pc, r3, asr #6
    37e4:	53435041 	movtpl	r5, #12353	; 0x3041
    37e8:	5046565f 	subpl	r5, r6, pc, asr r6
    37ec:	52415400 	subpl	r5, r1, #0, 8
    37f0:	5f544547 	svcpl	0x00544547
    37f4:	5f555043 	svcpl	0x00555043
    37f8:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    37fc:	00327478 	eorseq	r7, r2, r8, ror r4
    3800:	5f617369 	svcpl	0x00617369
    3804:	5f746962 	svcpl	0x00746962
    3808:	6e6f656e 	cdpvs	5, 6, cr6, cr15, cr14, {3}
    380c:	6d726100 	ldfvse	f6, [r2, #-0]
    3810:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    3814:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    3818:	73690072 	cmnvc	r9, #114	; 0x72
    381c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3820:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    3824:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0xfffff993
    3828:	4154006d 	cmpmi	r4, sp, rrx
    382c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3830:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3834:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    3838:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    383c:	52415400 	subpl	r5, r1, #0, 8
    3840:	5f544547 	svcpl	0x00544547
    3844:	5f555043 	svcpl	0x00555043
    3848:	7672616d 	ldrbtvc	r6, [r2], -sp, ror #2
    384c:	5f6c6c65 	svcpl	0x006c6c65
    3850:	00346a70 	eorseq	r6, r4, r0, ror sl
    3854:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    3858:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    385c:	6f705f68 	svcvs	0x00705f68
    3860:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    3864:	72610072 	rsbvc	r0, r1, #114	; 0x72
    3868:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    386c:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
    3870:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3874:	39615f78 	stmdbcc	r1!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3878:	61736900 	cmnvs	r3, r0, lsl #18
    387c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3880:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    3884:	3274786d 	rsbscc	r7, r4, #7143424	; 0x6d0000
    3888:	52415400 	subpl	r5, r1, #0, 8
    388c:	5f544547 	svcpl	0x00544547
    3890:	5f555043 	svcpl	0x00555043
    3894:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3898:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    389c:	726f6332 	rsbvc	r6, pc, #-939524096	; 0xc8000000
    38a0:	61786574 	cmnvs	r8, r4, ror r5
    38a4:	69003335 	stmdbvs	r0, {r0, r2, r4, r5, r8, r9, ip, sp}
    38a8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    38ac:	745f7469 	ldrbvc	r7, [pc], #-1129	; 38b4 <__core1_unwind_stub-0xffc74c>
    38b0:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    38b4:	41420032 	cmpmi	r2, r2, lsr r0
    38b8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    38bc:	5f484352 	svcpl	0x00484352
    38c0:	69004137 	stmdbvs	r0, {r0, r1, r2, r4, r5, r8, lr}
    38c4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    38c8:	645f7469 	ldrbvs	r7, [pc], #-1129	; 38d0 <__core1_unwind_stub-0xffc730>
    38cc:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
    38d0:	6100646f 	tstvs	r0, pc, ror #8
    38d4:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    38d8:	5f363170 	svcpl	0x00363170
    38dc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    38e0:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 38e8 <__core1_unwind_stub-0xffc718>
    38e4:	52410065 	subpl	r0, r1, #101	; 0x65
    38e8:	494d5f4d 	stmdbmi	sp, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    38ec:	6d726100 	ldfvse	f6, [r2, #-0]
    38f0:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    38f4:	006b3668 	rsbeq	r3, fp, r8, ror #12
    38f8:	5f6d7261 	svcpl	0x006d7261
    38fc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3900:	42006d36 	andmi	r6, r0, #3456	; 0xd80
    3904:	5f455341 	svcpl	0x00455341
    3908:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    390c:	0052375f 	subseq	r3, r2, pc, asr r7
    3910:	6f705f5f 	svcvs	0x00705f5f
    3914:	756f6370 	strbvc	r6, [pc, #-880]!	; 35ac <__core1_unwind_stub-0xffca54>
    3918:	745f746e 	ldrbvc	r7, [pc], #-1134	; 3920 <__core1_unwind_stub-0xffc6e0>
    391c:	69006261 	stmdbvs	r0, {r0, r5, r6, r9, sp, lr}
    3920:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3924:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    3928:	0065736d 	rsbeq	r7, r5, sp, ror #6
    392c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3930:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3934:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3938:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    393c:	33376178 	teqcc	r7, #120, 2
    3940:	52415400 	subpl	r5, r1, #0, 8
    3944:	5f544547 	svcpl	0x00544547
    3948:	5f555043 	svcpl	0x00555043
    394c:	656e6567 	strbvs	r6, [lr, #-1383]!	; 0xfffffa99
    3950:	76636972 			; <UNDEFINED> instruction: 0x76636972
    3954:	54006137 	strpl	r6, [r0], #-311	; 0xfffffec9
    3958:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    395c:	50435f54 	subpl	r5, r3, r4, asr pc
    3960:	6f635f55 	svcvs	0x00635f55
    3964:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3968:	00363761 	eorseq	r3, r6, r1, ror #14
    396c:	5f6d7261 	svcpl	0x006d7261
    3970:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3974:	5f6f6e5f 	svcpl	0x006f6e5f
    3978:	616c6f76 	smcvs	50934	; 0xc6f6
    397c:	656c6974 	strbvs	r6, [ip, #-2420]!	; 0xfffff68c
    3980:	0065635f 	rsbeq	r6, r5, pc, asr r3
    3984:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    3988:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    398c:	41385f48 	teqmi	r8, r8, asr #30
    3990:	61736900 	cmnvs	r3, r0, lsl #18
    3994:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3998:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    399c:	00743576 	rsbseq	r3, r4, r6, ror r5
    39a0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    39a4:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    39a8:	52385f48 	eorspl	r5, r8, #72, 30	; 0x120
    39ac:	52415400 	subpl	r5, r1, #0, 8
    39b0:	5f544547 	svcpl	0x00544547
    39b4:	5f555043 	svcpl	0x00555043
    39b8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    39bc:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    39c0:	726f6333 	rsbvc	r6, pc, #-872415232	; 0xcc000000
    39c4:	61786574 	cmnvs	r8, r4, ror r5
    39c8:	41003533 	tstmi	r0, r3, lsr r5
    39cc:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    39d0:	72610056 	rsbvc	r0, r1, #86	; 0x56
    39d4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    39d8:	00346863 	eorseq	r6, r4, r3, ror #16
    39dc:	5f6d7261 	svcpl	0x006d7261
    39e0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    39e4:	72610036 	rsbvc	r0, r1, #54	; 0x36
    39e8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    39ec:	00376863 	eorseq	r6, r7, r3, ror #16
    39f0:	5f6d7261 	svcpl	0x006d7261
    39f4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    39f8:	72610038 	rsbvc	r0, r1, #56	; 0x38
    39fc:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    3a00:	785f656e 	ldmdavc	pc, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    3a04:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    3a08:	616d0065 	cmnvs	sp, r5, rrx
    3a0c:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
    3a10:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    3a14:	745f7473 	ldrbvc	r7, [pc], #-1139	; 3a1c <__core1_unwind_stub-0xffc5e4>
    3a18:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3a1c:	75687400 	strbvc	r7, [r8, #-1024]!	; 0xfffffc00
    3a20:	635f626d 	cmpvs	pc, #-805306362	; 0xd0000006
    3a24:	5f6c6c61 	svcpl	0x006c6c61
    3a28:	5f616976 	svcpl	0x00616976
    3a2c:	6562616c 	strbvs	r6, [r2, #-364]!	; 0xfffffe94
    3a30:	7369006c 	cmnvc	r9, #108	; 0x6c
    3a34:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3a38:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    3a3c:	6b36766d 	blvs	da13f8 <__core1_unwind_stub-0x25ec08>
    3a40:	52415400 	subpl	r5, r1, #0, 8
    3a44:	5f544547 	svcpl	0x00544547
    3a48:	5f555043 	svcpl	0x00555043
    3a4c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3a50:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    3a54:	52415400 	subpl	r5, r1, #0, 8
    3a58:	5f544547 	svcpl	0x00544547
    3a5c:	5f555043 	svcpl	0x00555043
    3a60:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3a64:	38617865 	stmdacc	r1!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    3a68:	52415400 	subpl	r5, r1, #0, 8
    3a6c:	5f544547 	svcpl	0x00544547
    3a70:	5f555043 	svcpl	0x00555043
    3a74:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3a78:	39617865 	stmdbcc	r1!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    3a7c:	4d524100 	ldfmie	f4, [r2, #-0]
    3a80:	5343505f 	movtpl	r5, #12383	; 0x305f
    3a84:	4350415f 	cmpmi	r0, #-1073741801	; 0xc0000017
    3a88:	52410053 	subpl	r0, r1, #83	; 0x53
    3a8c:	43505f4d 	cmpmi	r0, #308	; 0x134
    3a90:	54415f53 	strbpl	r5, [r1], #-3923	; 0xfffff0ad
    3a94:	00534350 	subseq	r4, r3, r0, asr r3
    3a98:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    3a9c:	2078656c 	rsbscs	r6, r8, ip, ror #10
    3aa0:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
    3aa4:	5400656c 	strpl	r6, [r0], #-1388	; 0xfffffa94
    3aa8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3aac:	50435f54 	subpl	r5, r3, r4, asr pc
    3ab0:	6f635f55 	svcvs	0x00635f55
    3ab4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3ab8:	63333761 	teqvs	r3, #25427968	; 0x1840000
    3abc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3ac0:	33356178 	teqcc	r5, #120, 2
    3ac4:	52415400 	subpl	r5, r1, #0, 8
    3ac8:	5f544547 	svcpl	0x00544547
    3acc:	5f555043 	svcpl	0x00555043
    3ad0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3ad4:	306d7865 	rsbcc	r7, sp, r5, ror #16
    3ad8:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    3adc:	6d726100 	ldfvse	f6, [r2, #-0]
    3ae0:	0063635f 	rsbeq	r6, r3, pc, asr r3
    3ae4:	5f617369 	svcpl	0x00617369
    3ae8:	5f746962 	svcpl	0x00746962
    3aec:	61637378 	smcvs	14136	; 0x3738
    3af0:	5f00656c 	svcpl	0x0000656c
    3af4:	746e6f64 	strbtvc	r6, [lr], #-3940	; 0xfffff09c
    3af8:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0xfffffaa1
    3afc:	6572745f 	ldrbvs	r7, [r2, #-1119]!	; 0xfffffba1
    3b00:	65685f65 	strbvs	r5, [r8, #-3941]!	; 0xfffff09b
    3b04:	005f6572 	subseq	r6, pc, r2, ror r5	; <UNPREDICTABLE>
    3b08:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3b0c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3b10:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    3b14:	30316d72 	eorscc	r6, r1, r2, ror sp
    3b18:	696d6474 	stmdbvs	sp!, {r2, r4, r5, r6, sl, sp, lr}^
    3b1c:	52415400 	subpl	r5, r1, #0, 8
    3b20:	5f544547 	svcpl	0x00544547
    3b24:	5f555043 	svcpl	0x00555043
    3b28:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    3b2c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    3b30:	73616200 	cmnvc	r1, #0, 4
    3b34:	72615f65 	rsbvc	r5, r1, #404	; 0x194
    3b38:	74696863 	strbtvc	r6, [r9], #-2147	; 0xfffff79d
    3b3c:	75746365 	ldrbvc	r6, [r4, #-869]!	; 0xfffffc9b
    3b40:	61006572 	tstvs	r0, r2, ror r5
    3b44:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    3b48:	5f686372 	svcpl	0x00686372
    3b4c:	00637263 	rsbeq	r7, r3, r3, ror #4
    3b50:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3b54:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3b58:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3b5c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3b60:	73316d78 	teqvc	r1, #120, 26	; 0x1e00
    3b64:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    3b68:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    3b6c:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    3b70:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    3b74:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
    3b78:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
    3b7c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
    3b80:	31393130 	teqcc	r9, r0, lsr r1
    3b84:	20353230 	eorscs	r3, r5, r0, lsr r2
    3b88:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
    3b8c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    3b90:	415b2029 	cmpmi	fp, r9, lsr #32
    3b94:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
    3b98:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
    3b9c:	6172622d 	cmnvs	r2, sp, lsr #4
    3ba0:	2068636e 	rsbcs	r6, r8, lr, ror #6
    3ba4:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    3ba8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    3bac:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
    3bb0:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
    3bb4:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    3bb8:	613d7570 	teqvs	sp, r0, ror r5
    3bbc:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    3bc0:	20696d64 	rsbcs	r6, r9, r4, ror #26
    3bc4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    3bc8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    3bcc:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    3bd0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    3bd4:	616d2d20 	cmnvs	sp, r0, lsr #26
    3bd8:	2d206d72 	stccs	13, cr6, [r0, #-456]!	; 0xfffffe38
    3bdc:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    3be0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    3be4:	7434766d 	ldrtvc	r7, [r4], #-1645	; 0xfffff993
    3be8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    3bec:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    3bf0:	4f2d2067 	svcmi	0x002d2067
    3bf4:	4f2d2032 	svcmi	0x002d2032
    3bf8:	4f2d2032 	svcmi	0x002d2032
    3bfc:	662d2032 			; <UNDEFINED> instruction: 0x662d2032
    3c00:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    3c04:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    3c08:	62696c2d 	rsbvs	r6, r9, #11520	; 0x2d00
    3c0c:	20636367 	rsbcs	r6, r3, r7, ror #6
    3c10:	6f6e662d 	svcvs	0x006e662d
    3c14:	6174732d 	cmnvs	r4, sp, lsr #6
    3c18:	702d6b63 	eorvc	r6, sp, r3, ror #22
    3c1c:	65746f72 	ldrbvs	r6, [r4, #-3954]!	; 0xfffff08e
    3c20:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    3c24:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    3c28:	6e692d6f 	cdpvs	13, 6, cr2, cr9, cr15, {3}
    3c2c:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    3c30:	65662d20 	strbvs	r2, [r6, #-3360]!	; 0xfffff2e0
    3c34:	70656378 	rsbvc	r6, r5, r8, ror r3
    3c38:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    3c3c:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    3c40:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3c44:	696c6962 	stmdbvs	ip!, {r1, r5, r6, r8, fp, sp, lr}^
    3c48:	683d7974 	ldmdavs	sp!, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    3c4c:	65646469 	strbvs	r6, [r4, #-1129]!	; 0xfffffb97
    3c50:	7261006e 	rsbvc	r0, r1, #110	; 0x6e
    3c54:	75635f6d 	strbvc	r5, [r3, #-3949]!	; 0xfffff093
    3c58:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    3c5c:	63635f74 	cmnvs	r3, #116, 30	; 0x1d0
    3c60:	61736900 	cmnvs	r3, r0, lsl #18
    3c64:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3c68:	6372635f 	cmnvs	r2, #2080374785	; 0x7c000001
    3c6c:	41003233 	tstmi	r0, r3, lsr r2
    3c70:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    3c74:	7369004c 	cmnvc	r9, #76	; 0x4c
    3c78:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3c7c:	66765f74 	uhsub16vs	r5, r6, r4
    3c80:	00337670 	eorseq	r7, r3, r0, ror r6
    3c84:	5f617369 	svcpl	0x00617369
    3c88:	5f746962 	svcpl	0x00746962
    3c8c:	76706676 			; <UNDEFINED> instruction: 0x76706676
    3c90:	41420034 	cmpmi	r2, r4, lsr r0
    3c94:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    3c98:	5f484352 	svcpl	0x00484352
    3c9c:	00325436 	eorseq	r5, r2, r6, lsr r4
    3ca0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    3ca4:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    3ca8:	4d385f48 	ldcmi	15, cr5, [r8, #-288]!	; 0xfffffee0
    3cac:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    3cb0:	4154004e 	cmpmi	r4, lr, asr #32
    3cb4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3cb8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3cbc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3cc0:	6d647439 	cfstrdvs	mvd7, [r4, #-228]!	; 0xffffff1c
    3cc4:	52410069 	subpl	r0, r1, #105	; 0x69
    3cc8:	4c415f4d 	mcrrmi	15, 4, r5, r1, cr13
    3ccc:	53414200 	movtpl	r4, #4608	; 0x1200
    3cd0:	52415f45 	subpl	r5, r1, #276	; 0x114
    3cd4:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    3cd8:	7261004d 	rsbvc	r0, r1, #77	; 0x4d
    3cdc:	61745f6d 	cmnvs	r4, sp, ror #30
    3ce0:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    3ce4:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
    3ce8:	61006c65 	tstvs	r0, r5, ror #24
    3cec:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 3cf4 <__core1_unwind_stub-0xffc30c>
    3cf0:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3cf4:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    3cf8:	54006e73 	strpl	r6, [r0], #-3699	; 0xfffff18d
    3cfc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3d00:	50435f54 	subpl	r5, r3, r4, asr pc
    3d04:	6f635f55 	svcvs	0x00635f55
    3d08:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3d0c:	54003472 	strpl	r3, [r0], #-1138	; 0xfffffb8e
    3d10:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3d14:	50435f54 	subpl	r5, r3, r4, asr pc
    3d18:	6f635f55 	svcvs	0x00635f55
    3d1c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3d20:	54003572 	strpl	r3, [r0], #-1394	; 0xfffffa8e
    3d24:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3d28:	50435f54 	subpl	r5, r3, r4, asr pc
    3d2c:	6f635f55 	svcvs	0x00635f55
    3d30:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3d34:	54003772 	strpl	r3, [r0], #-1906	; 0xfffff88e
    3d38:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3d3c:	50435f54 	subpl	r5, r3, r4, asr pc
    3d40:	6f635f55 	svcvs	0x00635f55
    3d44:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3d48:	69003872 	stmdbvs	r0, {r1, r4, r5, r6, fp, ip, sp}
    3d4c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3d50:	6c5f7469 	cfldrdvs	mvd7, [pc], {105}	; 0x69
    3d54:	00656170 	rsbeq	r6, r5, r0, ror r1
    3d58:	5f617369 	svcpl	0x00617369
    3d5c:	5f746962 	svcpl	0x00746962
    3d60:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    3d64:	72615f6b 	rsbvc	r5, r1, #428	; 0x1ac
    3d68:	6b36766d 	blvs	da1724 <__core1_unwind_stub-0x25e8dc>
    3d6c:	7369007a 	cmnvc	r9, #122	; 0x7a
    3d70:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3d74:	6f6e5f74 	svcvs	0x006e5f74
    3d78:	69006d74 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, fp, sp, lr}
    3d7c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3d80:	615f7469 	cmpvs	pc, r9, ror #8
    3d84:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    3d88:	61736900 	cmnvs	r3, r0, lsl #18
    3d8c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3d90:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3d94:	69003676 	stmdbvs	r0, {r1, r2, r4, r5, r6, r9, sl, ip, sp}
    3d98:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3d9c:	615f7469 	cmpvs	pc, r9, ror #8
    3da0:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    3da4:	61736900 	cmnvs	r3, r0, lsl #18
    3da8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    3dac:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3db0:	5f003876 	svcpl	0x00003876
    3db4:	746e6f64 	strbtvc	r6, [lr], #-3940	; 0xfffff09c
    3db8:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0xfffffaa1
    3dbc:	7874725f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}^
    3dc0:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    3dc4:	55005f65 	strpl	r5, [r0, #-3941]	; 0xfffff09b
    3dc8:	79744951 	ldmdbvc	r4!, {r0, r4, r6, r8, fp, lr}^
    3dcc:	69006570 	stmdbvs	r0, {r4, r5, r6, r8, sl, sp, lr}
    3dd0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    3dd4:	615f7469 	cmpvs	pc, r9, ror #8
    3dd8:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    3ddc:	61006574 	tstvs	r0, r4, ror r5
    3de0:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 3de8 <__core1_unwind_stub-0xffc218>
    3de4:	00656e75 	rsbeq	r6, r5, r5, ror lr
    3de8:	5f6d7261 	svcpl	0x006d7261
    3dec:	5f707063 	svcpl	0x00707063
    3df0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    3df4:	726f7772 	rsbvc	r7, pc, #29884416	; 0x1c80000
    3df8:	4154006b 	cmpmi	r4, fp, rrx
    3dfc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3e00:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3e04:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    3e08:	74303239 	ldrtvc	r3, [r0], #-569	; 0xfffffdc7
    3e0c:	61746800 	cmnvs	r4, r0, lsl #16
    3e10:	71655f62 	cmnvc	r5, r2, ror #30
    3e14:	52415400 	subpl	r5, r1, #0, 8
    3e18:	5f544547 	svcpl	0x00544547
    3e1c:	5f555043 	svcpl	0x00555043
    3e20:	32356166 	eorscc	r6, r5, #-2147483623	; 0x80000019
    3e24:	72610036 	rsbvc	r0, r1, #54	; 0x36
    3e28:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3e2c:	745f6863 	ldrbvc	r6, [pc], #-2147	; 3e34 <__core1_unwind_stub-0xffc1cc>
    3e30:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    3e34:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    3e38:	68007669 	stmdavs	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
    3e3c:	5f626174 	svcpl	0x00626174
    3e40:	705f7165 	subsvc	r7, pc, r5, ror #2
    3e44:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    3e48:	61007265 	tstvs	r0, r5, ror #4
    3e4c:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    3e50:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    3e54:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    3e58:	00726574 	rsbseq	r6, r2, r4, ror r5
    3e5c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3e60:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3e64:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    3e68:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3e6c:	73306d78 	teqvc	r0, #120, 26	; 0x1e00
    3e70:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    3e74:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    3e78:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    3e7c:	52415400 	subpl	r5, r1, #0, 8
    3e80:	5f544547 	svcpl	0x00544547
    3e84:	5f555043 	svcpl	0x00555043
    3e88:	6f63706d 	svcvs	0x0063706d
    3e8c:	6f6e6572 	svcvs	0x006e6572
    3e90:	00706676 	rsbseq	r6, r0, r6, ror r6
    3e94:	5f617369 	svcpl	0x00617369
    3e98:	5f746962 	svcpl	0x00746962
    3e9c:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    3ea0:	6d635f6b 	stclvs	15, cr5, [r3, #-428]!	; 0xfffffe54
    3ea4:	646c5f33 	strbtvs	r5, [ip], #-3891	; 0xfffff0cd
    3ea8:	41006472 	tstmi	r0, r2, ror r4
    3eac:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    3eb0:	72610043 	rsbvc	r0, r1, #67	; 0x43
    3eb4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3eb8:	5f386863 	svcpl	0x00386863
    3ebc:	72610032 	rsbvc	r0, r1, #50	; 0x32
    3ec0:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3ec4:	5f386863 	svcpl	0x00386863
    3ec8:	72610033 	rsbvc	r0, r1, #51	; 0x33
    3ecc:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3ed0:	5f386863 	svcpl	0x00386863
    3ed4:	41540034 	cmpmi	r4, r4, lsr r0
    3ed8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3edc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3ee0:	706d665f 	rsbvc	r6, sp, pc, asr r6
    3ee4:	00363236 	eorseq	r3, r6, r6, lsr r2
    3ee8:	5f4d5241 	svcpl	0x004d5241
    3eec:	61005343 	tstvs	r0, r3, asr #6
    3ef0:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    3ef4:	5f363170 	svcpl	0x00363170
    3ef8:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xfffff197
    3efc:	6d726100 	ldfvse	f6, [r2, #-0]
    3f00:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    3f04:	72615f65 	rsbvc	r5, r1, #404	; 0x194
    3f08:	54006863 	strpl	r6, [r0], #-2147	; 0xfffff79d
    3f0c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3f10:	50435f54 	subpl	r5, r3, r4, asr pc
    3f14:	6f635f55 	svcvs	0x00635f55
    3f18:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3f1c:	63353161 	teqvs	r5, #1073741848	; 0x40000018
    3f20:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3f24:	00376178 	eorseq	r6, r7, r8, ror r1
    3f28:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3f2c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3f30:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3f34:	2f636367 	svccs	0x00636367
    3f38:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    3f3c:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    3f40:	72610063 	rsbvc	r0, r1, #99	; 0x63
    3f44:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    3f48:	65376863 	ldrvs	r6, [r7, #-2147]!	; 0xfffff79d
    3f4c:	4154006d 	cmpmi	r4, sp, rrx
    3f50:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    3f54:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3f58:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3f5c:	61786574 	cmnvs	r8, r4, ror r5
    3f60:	61003237 	tstvs	r0, r7, lsr r2
    3f64:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    3f68:	645f7363 	ldrbvs	r7, [pc], #-867	; 3f70 <__core1_unwind_stub-0xffc090>
    3f6c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    3f70:	4100746c 	tstmi	r0, ip, ror #8
    3f74:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    3f78:	415f5343 	cmpmi	pc, r3, asr #6
    3f7c:	53435041 	movtpl	r5, #12353	; 0x3041
    3f80:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    3f84:	54004c41 	strpl	r4, [r0], #-3137	; 0xfffff3bf
    3f88:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3f8c:	50435f54 	subpl	r5, r3, r4, asr pc
    3f90:	6f635f55 	svcvs	0x00635f55
    3f94:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3f98:	00353761 	eorseq	r3, r5, r1, ror #14
    3f9c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    3fa0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    3fa4:	735f5550 	cmpvc	pc, #80, 10	; 0x14000000
    3fa8:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    3fac:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    3fb0:	6d726100 	ldfvse	f6, [r2, #-0]
    3fb4:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    3fb8:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3fbc:	31626d75 	smccc	9941	; 0x26d5
    3fc0:	6d726100 	ldfvse	f6, [r2, #-0]
    3fc4:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    3fc8:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3fcc:	32626d75 	rsbcc	r6, r2, #7488	; 0x1d40
    3fd0:	52415400 	subpl	r5, r1, #0, 8
    3fd4:	5f544547 	svcpl	0x00544547
    3fd8:	5f555043 	svcpl	0x00555043
    3fdc:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    3fe0:	61007478 	tstvs	r0, r8, ror r4
    3fe4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    3fe8:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    3fec:	73690074 	cmnvc	r9, #116	; 0x74
    3ff0:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    3ff4:	706d5f74 	rsbvc	r5, sp, r4, ror pc
    3ff8:	6d726100 	ldfvse	f6, [r2, #-0]
    3ffc:	5f646c5f 	svcpl	0x00646c5f
    4000:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    4004:	72610064 	rsbvc	r0, r1, #100	; 0x64
    4008:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    400c:	5f386863 	svcpl	0x00386863
    4010:	Address 0x0000000000004010 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
{
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0xb4d24>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
    ALT_PRINTF("\n");
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  40:	6172622d 	cmnvs	r2, sp, lsr #4
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
{
   0:	00003441 	andeq	r3, r0, r1, asr #8
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000002a 	andeq	r0, r0, sl, lsr #32
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	412d3705 			; <UNDEFINED> instruction: 0x412d3705
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
    ALT_PRINTF("\n");
  18:	09010841 	stmdbeq	r1, {r0, r6, fp}
  1c:	0c030a02 			; <UNDEFINED> instruction: 0x0c030a02
  20:	14041201 	strne	r1, [r4], #-513	; 0xfffffdff
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__core1_unwind_stub-0xfb9fc4>
  2c:	22061e01 	andcs	r1, r6, #1, 28
  30:	44012a01 	strmi	r2, [r1], #-2561	; 0xfffff5ff
  34:	Address 0x0000000000000034 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
{
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
    ALT_PRINTF("\n");
      1c:	00000098 	muleq	r0, r8, r0
      20:	8b040e42 	blhi	103930 <__core1_unwind_stub-0xefc6d0>
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
      24:	0b0d4201 	bleq	350830 <__core1_unwind_stub-0xcaf7d0>
      28:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
      2c:	000ecb42 	andeq	ip, lr, r2, asr #22
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	01000004 	tsteq	r0, r4
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
      3c:	00000038 	andeq	r0, r0, r8, lsr r0
      40:	8b040e42 	blhi	103950 <__core1_unwind_stub-0xefc6b0>
      44:	0b0d4201 	bleq	350850 <__core1_unwind_stub-0xcaf7b0>
      48:	420d0d54 	andmi	r0, sp, #84, 26	; 0x1500
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
      4c:	00000ecb 	andeq	r0, r0, fp, asr #29
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	0100003c 	tsteq	r0, ip, lsr r0
      5c:	00000054 	andeq	r0, r0, r4, asr r0
      60:	8b040e42 	blhi	103970 <__core1_unwind_stub-0xefc690>
      64:	0b0d4201 	bleq	350870 <__core1_unwind_stub-0xcaf790>
      68:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
      6c:	00000ecb 	andeq	r0, r0, fp, asr #29
}
      70:	0000001c 	andeq	r0, r0, ip, lsl r0
      74:	00000000 	andeq	r0, r0, r0
      78:	01000090 	swpeq	r0, r0, [r0]	; <UNPREDICTABLE>
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
      7c:	00000054 	andeq	r0, r0, r4, asr r0
      80:	8b040e42 	blhi	103990 <__core1_unwind_stub-0xefc670>
      84:	0b0d4201 	bleq	350890 <__core1_unwind_stub-0xcaf770>
      88:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
      8c:	00000ecb 	andeq	r0, r0, fp, asr #29
      90:	0000001c 	andeq	r0, r0, ip, lsl r0
      *(pmem->toptr)=0;
      94:	00000000 	andeq	r0, r0, r0
      98:	010000e4 	smlatteq	r0, r4, r0, r0
      9c:	00000158 	andeq	r0, r0, r8, asr r1
      a0:	8b080e42 	blhi	2039b0 <__core1_unwind_stub-0xdfc650>
}
      a4:	42018e02 	andmi	r8, r1, #2, 28
      a8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
      ac:	080d0ca6 	stmdaeq	sp, {r1, r2, r5, r7, sl, fp}
      b0:	0000001c 	andeq	r0, r0, ip, lsl r0
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
      b4:	00000000 	andeq	r0, r0, r0
      b8:	0100023c 	tsteq	r0, ip, lsr r2
        break;
      bc:	00000190 	muleq	r0, r0, r1
    return ALT_E_SUCCESS;
      c0:	8b080e42 	blhi	2039d0 <__core1_unwind_stub-0xdfc630>
      c4:	42018e02 	andmi	r8, r1, #2, 28
        return ALT_E_ERROR;
      c8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
}
      cc:	080d0cc2 	stmdaeq	sp, {r1, r6, r7, sl, fp}
      d0:	00000020 	andeq	r0, r0, r0, lsr #32
      d4:	00000000 	andeq	r0, r0, r0
      d8:	010003cc 	smlabteq	r0, ip, r3, r0
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      dc:	00000220 	andeq	r0, r0, r0, lsr #4
      e0:	8b080e42 	blhi	2039f0 <__core1_unwind_stub-0xdfc610>
      e4:	42018e02 	andmi	r8, r1, #2, 28
      e8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
      ec:	0d0c010a 	stfeqs	f0, [ip, #-40]	; 0xffffffd8
      f0:	00000008 	andeq	r0, r0, r8
    return dst;
      f4:	0000001c 	andeq	r0, r0, ip, lsl r0
}
      f8:	00000000 	andeq	r0, r0, r0
      fc:	010005ec 	smlatteq	r0, ip, r5, r0
     100:	0000006c 	andeq	r0, r0, ip, rrx
     104:	8b080e42 	blhi	203a14 <__core1_unwind_stub-0xdfc5ec>
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
     108:	42018e02 	andmi	r8, r1, #2, 28
     10c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     110:	00080d0c 	andeq	r0, r8, ip, lsl #26
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
     114:	0000001c 	andeq	r0, r0, ip, lsl r0
     118:	00000000 	andeq	r0, r0, r0
     11c:	01000658 	tsteq	r0, r8, asr r6
     120:	00000040 	andeq	r0, r0, r0, asr #32
     124:	8b080e42 	blhi	203a34 <__core1_unwind_stub-0xdfc5cc>
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     128:	42018e02 	andmi	r8, r1, #2, 28
     12c:	5a040b0c 	bpl	102d64 <__core1_unwind_stub-0xefd29c>
     130:	00080d0c 	andeq	r0, r8, ip, lsl #26
     134:	0000001c 	andeq	r0, r0, ip, lsl r0
     138:	00000000 	andeq	r0, r0, r0
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	01000698 			; <UNDEFINED> instruction: 0x01000698
     140:	00000040 	andeq	r0, r0, r0, asr #32
     144:	8b080e42 	blhi	203a54 <__core1_unwind_stub-0xdfc5ac>
     148:	42018e02 	andmi	r8, r1, #2, 28
     14c:	5a040b0c 	bpl	102d84 <__core1_unwind_stub-0xefd27c>
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	00080d0c 	andeq	r0, r8, ip, lsl #26
     154:	0000001c 	andeq	r0, r0, ip, lsl r0
     158:	00000000 	andeq	r0, r0, r0
     15c:	010006d8 	ldrdeq	r0, [r0, -r8]
     160:	0000006c 	andeq	r0, r0, ip, rrx
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	8b080e42 	blhi	203a74 <__core1_unwind_stub-0xdfc58c>
     168:	42018e02 	andmi	r8, r1, #2, 28
     16c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     170:	00080d0c 	andeq	r0, r8, ip, lsl #26
     174:	0000001c 	andeq	r0, r0, ip, lsl r0
    return ALT_E_SUCCESS;
     178:	00000000 	andeq	r0, r0, r0
}
     17c:	01000744 	tsteq	r0, r4, asr #14
     180:	00000040 	andeq	r0, r0, r0, asr #32
     184:	8b080e42 	blhi	203a94 <__core1_unwind_stub-0xdfc56c>
    while (coalesce->size)
     188:	42018e02 	andmi	r8, r1, #2, 28
     18c:	5a040b0c 	bpl	102dc4 <__core1_unwind_stub-0xefd23c>
            break;
     190:	00080d0c 	andeq	r0, r8, ip, lsl #26
    *segpa   = thissegpa;
     194:	0000001c 	andeq	r0, r0, ip, lsl r0
     198:	00000000 	andeq	r0, r0, r0
     19c:	01000784 	smlabbeq	r0, r4, r7, r0
    *segsize = thissegsize;
     1a0:	00000068 	andeq	r0, r0, r8, rrx
     1a4:	8b080e42 	blhi	203ab4 <__core1_unwind_stub-0xdfc54c>
     1a8:	42018e02 	andmi	r8, r1, #2, 28
    return ALT_E_SUCCESS;
     1ac:	6e040b0c 	vmlavs.f64	d0, d4, d12
}
     1b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b8:	00000000 	andeq	r0, r0, r0
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
     1bc:	010007ec 	smlatteq	r0, ip, r7, r0
     1c0:	0000006c 	andeq	r0, r0, ip, rrx
     1c4:	8b080e42 	blhi	203ad4 <__core1_unwind_stub-0xdfc52c>
     1c8:	42018e02 	andmi	r8, r1, #2, 28
     1cc:	70040b0c 	andvc	r0, r4, ip, lsl #22
    clkStep = 9 * clk100; /* 900MHz */
     1d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	01000858 	tsteq	r0, r8, asr r8
     1e0:	0000006c 	andeq	r0, r0, ip, rrx
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     1e4:	8b080e42 	blhi	203af4 <__core1_unwind_stub-0xdfc50c>
     1e8:	42018e02 	andmi	r8, r1, #2, 28
     1ec:	70040b0c 	andvc	r0, r4, ip, lsl #22
     1f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	010008c4 	smlabteq	r0, r4, r8, r0
     200:	0000006c 	andeq	r0, r0, ip, rrx
     204:	8b080e42 	blhi	203b14 <__core1_unwind_stub-0xdfc4ec>
     208:	42018e02 	andmi	r8, r1, #2, 28
     20c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     210:	00080d0c 	andeq	r0, r8, ip, lsl #26
        clkStep += clk100;
     214:	0000001c 	andeq	r0, r0, ip, lsl r0
     218:	00000000 	andeq	r0, r0, r0
     21c:	01000930 	tsteq	r0, r0, lsr r9
     220:	0000006c 	andeq	r0, r0, ip, rrx
        time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     224:	8b080e42 	blhi	203b34 <__core1_unwind_stub-0xdfc4cc>
     228:	42018e02 	andmi	r8, r1, #2, 28
     22c:	70040b0c 	andvc	r0, r4, ip, lsl #22
        alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     230:	00080d0c 	andeq	r0, r8, ip, lsl #26
     234:	0000001c 	andeq	r0, r0, ip, lsl r0
     238:	00000000 	andeq	r0, r0, r0
     23c:	0100099c 			; <UNDEFINED> instruction: 0x0100099c
    } while(cfg->mainpll.vco1_numer > (clkStep >> 16 ) - 1);
     240:	0000006c 	andeq	r0, r0, ip, rrx
     244:	8b080e42 	blhi	203b54 <__core1_unwind_stub-0xdfc4ac>
     248:	42018e02 	andmi	r8, r1, #2, 28
     24c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     250:	00080d0c 	andeq	r0, r8, ip, lsl #26
     254:	0000001c 	andeq	r0, r0, ip, lsl r0
     258:	00000000 	andeq	r0, r0, r0
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO1_ADDR,
     25c:	01000a08 	tsteq	r0, r8, lsl #20
     260:	0000006c 	andeq	r0, r0, ip, rrx
     264:	8b080e42 	blhi	203b74 <__core1_unwind_stub-0xdfc48c>
     268:	42018e02 	andmi	r8, r1, #2, 28
     26c:	70040b0c 	andvc	r0, r4, ip, lsl #22
     270:	00080d0c 	andeq	r0, r8, ip, lsl #26
     274:	0000001c 	andeq	r0, r0, ip, lsl r0
     278:	00000000 	andeq	r0, r0, r0
     27c:	01000a74 	tsteq	r0, r4, ror sl
     280:	000000dc 	ldrdeq	r0, [r0], -ip
     284:	8b080e42 	blhi	203b94 <__core1_unwind_stub-0xdfc46c>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     288:	42018e02 	andmi	r8, r1, #2, 28
     28c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     290:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     294:	0000001c 	andeq	r0, r0, ip, lsl r0
     298:	00000000 	andeq	r0, r0, r0
     29c:	01000b50 	tsteq	r0, r0, asr fp
     2a0:	00000030 	andeq	r0, r0, r0, lsr r0
  alt_write_word(ALT_CLKMGR_PERPLL_VCO1_ADDR,
     2a4:	8b080e42 	blhi	203bb4 <__core1_unwind_stub-0xdfc44c>
     2a8:	42018e02 	andmi	r8, r1, #2, 28
     2ac:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
     2b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2b8:	00000000 	andeq	r0, r0, r0
     2bc:	01000b80 	smlabbeq	r0, r0, fp, r0
     2c0:	00000030 	andeq	r0, r0, r0, lsr r0
     2c4:	8b080e42 	blhi	203bd4 <__core1_unwind_stub-0xdfc42c>
     2c8:	42018e02 	andmi	r8, r1, #2, 28
     2cc:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     2d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2d8:	00000000 	andeq	r0, r0, r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 5000);
     2dc:	01000bb0 			; <UNDEFINED> instruction: 0x01000bb0
     2e0:	00000030 	andeq	r0, r0, r0, lsr r0
     2e4:	8b080e42 	blhi	203bf4 <__core1_unwind_stub-0xdfc40c>
     2e8:	42018e02 	andmi	r8, r1, #2, 28
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     2ec:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
     2f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f8:	00000000 	andeq	r0, r0, r0
     2fc:	01000be0 	smlatteq	r0, r0, fp, r0
     300:	00000068 	andeq	r0, r0, r8, rrx
     304:	8b080e42 	blhi	203c14 <__core1_unwind_stub-0xdfc3ec>
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     308:	42018e02 	andmi	r8, r1, #2, 28
     30c:	6e040b0c 	vmlavs.f64	d0, d4, d12
     310:	00080d0c 	andeq	r0, r8, ip, lsl #26
     314:	0000001c 	andeq	r0, r0, ip, lsl r0
     318:	00000000 	andeq	r0, r0, r0
     31c:	01000c48 	tsteq	r0, r8, asr #24
     320:	000000a4 	andeq	r0, r0, r4, lsr #1
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     324:	8b080e42 	blhi	203c34 <__core1_unwind_stub-0xdfc3cc>
     328:	42018e02 	andmi	r8, r1, #2, 28
     32c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 7000);
     330:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
     334:	0000001c 	andeq	r0, r0, ip, lsl r0
     338:	00000000 	andeq	r0, r0, r0
     33c:	01000cec 	smlatteq	r0, ip, ip, r0
  data32 = alt_read_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR);
     340:	00000068 	andeq	r0, r0, r8, rrx
     344:	8b080e42 	blhi	203c54 <__core1_unwind_stub-0xdfc3ac>
     348:	42018e02 	andmi	r8, r1, #2, 28
     34c:	6e040b0c 	vmlavs.f64	d0, d4, d12
  alt_write_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     350:	00080d0c 	andeq	r0, r8, ip, lsl #26
     354:	0000001c 	andeq	r0, r0, ip, lsl r0
     358:	00000000 	andeq	r0, r0, r0
     35c:	01000d54 	tsteq	r0, r4, asr sp
     360:	00000028 	andeq	r0, r0, r8, lsr #32
     364:	8b080e42 	blhi	203c74 <__core1_unwind_stub-0xdfc38c>
  data32 = alt_read_word(ALT_CLKMGR_PERPLL_VCO0_ADDR);
     368:	42018e02 	andmi	r8, r1, #2, 28
     36c:	4e040b0c 	vmlami.f64	d0, d4, d12
     370:	00080d0c 	andeq	r0, r8, ip, lsl #26
     374:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  alt_write_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     380:	0000005c 	andeq	r0, r0, ip, asr r0
     384:	8b080e42 	blhi	203c94 <__core1_unwind_stub-0xdfc36c>
     388:	42018e02 	andmi	r8, r1, #2, 28
     38c:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
  alt_write_word (ALT_CLKMGR_MPUCLK_ADDR,
     390:	00080d0c 	andeq	r0, r8, ip, lsl #26
     394:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     3a0:	0000005c 	andeq	r0, r0, ip, asr r0
  alt_write_word (ALT_CLKMGR_NOCCLK_ADDR,
     3a4:	8b080e42 	blhi	203cb4 <__core1_unwind_stub-0xdfc34c>
     3a8:	42018e02 	andmi	r8, r1, #2, 28
     3ac:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
     3b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_write_word (ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	01000d7c 	tsteq	r0, ip, ror sp
     3c0:	00000068 	andeq	r0, r0, r8, rrx
     3c4:	8b080e42 	blhi	203cd4 <__core1_unwind_stub-0xdfc32c>
     3c8:	42018e02 	andmi	r8, r1, #2, 28
     3cc:	6e040b0c 	vmlavs.f64	d0, d4, d12
     3d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d8:	00000000 	andeq	r0, r0, r0
     3dc:	01000de4 	smlatteq	r0, r4, sp, r0
     3e0:	00000068 	andeq	r0, r0, r8, rrx
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCCLK_ADDR,
     3e4:	8b080e42 	blhi	203cf4 <__core1_unwind_stub-0xdfc30c>
     3e8:	42018e02 	andmi	r8, r1, #2, 28
     3ec:	6e040b0c 	vmlavs.f64	d0, d4, d12
     3f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	01000e4c 	tsteq	r0, ip, asr #28
     400:	00000068 	andeq	r0, r0, r8, rrx
     404:	8b080e42 	blhi	203d14 <__core1_unwind_stub-0xdfc2ec>
     408:	42018e02 	andmi	r8, r1, #2, 28
     40c:	6e040b0c 	vmlavs.f64	d0, d4, d12
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR2CLK_ADDR,
     410:	00080d0c 	andeq	r0, r8, ip, lsl #26
     414:	00000020 	andeq	r0, r0, r0, lsr #32
     418:	00000000 	andeq	r0, r0, r0
     41c:	01000eb4 			; <UNDEFINED> instruction: 0x01000eb4
     420:	0000023c 	andeq	r0, r0, ip, lsr r2
     424:	8b080e42 	blhi	203d34 <__core1_unwind_stub-0xdfc2cc>
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR3CLK_ADDR,
     428:	42018e02 	andmi	r8, r1, #2, 28
     42c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     430:	0d0c0118 	stfeqs	f0, [ip, #-96]	; 0xffffffa0
     434:	00000008 	andeq	r0, r0, r8
     438:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR4CLK_ADDR,
     444:	00000034 	andeq	r0, r0, r4, lsr r0
     448:	8b040e42 	blhi	103d58 <__core1_unwind_stub-0xefc2a8>
     44c:	0b0d4201 	bleq	350c58 <__core1_unwind_stub-0xcaf3a8>
     450:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     454:	00000ecb 	andeq	r0, r0, fp, asr #29
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR5CLK_ADDR,
     458:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     464:	00000264 	andeq	r0, r0, r4, ror #4
     468:	8b080e42 	blhi	203d78 <__core1_unwind_stub-0xdfc288>
     46c:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR6CLK_ADDR,
     470:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     474:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     478:	00000008 	andeq	r0, r0, r8
     47c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR7CLK_ADDR,
     488:	00000034 	andeq	r0, r0, r4, lsr r0
     48c:	8b040e42 	blhi	103d9c <__core1_unwind_stub-0xefc264>
     490:	0b0d4201 	bleq	350c9c <__core1_unwind_stub-0xcaf364>
     494:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     498:	00000ecb 	andeq	r0, r0, fp, asr #29
     49c:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     4a8:	00000264 	andeq	r0, r0, r4, ror #4
     4ac:	8b080e42 	blhi	203dbc <__core1_unwind_stub-0xdfc244>
     4b0:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR8CLK_ADDR,
     4b4:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     4b8:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     4bc:	00000008 	andeq	r0, r0, r8
     4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c4:	00000000 	andeq	r0, r0, r0
     4c8:	010010f0 	strdeq	r1, [r0, -r0]
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR9CLK_ADDR,
     4cc:	00000048 	andeq	r0, r0, r8, asr #32
     4d0:	8b040e42 	blhi	103de0 <__core1_unwind_stub-0xefc220>
     4d4:	0b0d4201 	bleq	350ce0 <__core1_unwind_stub-0xcaf320>
     4d8:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     4dc:	00000ecb 	andeq	r0, r0, fp, asr #29
     4e0:	00000020 	andeq	r0, r0, r0, lsr #32
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	01001138 	tsteq	r0, r8, lsr r1
     4ec:	00000264 	andeq	r0, r0, r4, ror #4
     4f0:	8b080e42 	blhi	203e00 <__core1_unwind_stub-0xdfc200>
     4f4:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_MAINPLL_CNTR15CLK_ADDR,
     4f8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     4fc:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     500:	00000008 	andeq	r0, r0, r8
     504:	00000020 	andeq	r0, r0, r0, lsr #32
	...
  alt_write_word (ALT_CLKMGR_MAINPLL_NOCDIV_ADDR,
     510:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     514:	8b080e42 	blhi	203e24 <__core1_unwind_stub-0xdfc1dc>
     518:	42018e02 	andmi	r8, r1, #2, 28
     51c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     520:	0d0c0472 	cfstrseq	mvf0, [ip, #-456]	; 0xfffffe38
     524:	00000008 	andeq	r0, r0, r8
     528:	0000000c 	andeq	r0, r0, ip
     52c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     530:	7c020001 	stcvc	0, cr0, [r2], {1}
     534:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     538:	0000001c 	andeq	r0, r0, ip, lsl r0
     53c:	00000528 	andeq	r0, r0, r8, lsr #10
     540:	0100139c 			; <UNDEFINED> instruction: 0x0100139c
     544:	00000028 	andeq	r0, r0, r8, lsr #32
     548:	8b040e42 	blhi	103e58 <__core1_unwind_stub-0xefc1a8>
     54c:	0b0d4201 	bleq	350d58 <__core1_unwind_stub-0xcaf2a8>
     550:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
     554:	00000ecb 	andeq	r0, r0, fp, asr #29
     558:	0000001c 	andeq	r0, r0, ip, lsl r0
     55c:	00000528 	andeq	r0, r0, r8, lsr #10
     560:	010013c4 	smlabteq	r0, r4, r3, r1
     564:	00000120 	andeq	r0, r0, r0, lsr #2
     568:	8b040e42 	blhi	103e78 <__core1_unwind_stub-0xefc188>
     56c:	0b0d4201 	bleq	350d78 <__core1_unwind_stub-0xcaf288>
     570:	0d0d8802 	stceq	8, cr8, [sp, #-8]
     574:	000ecb42 	andeq	ip, lr, r2, asr #22
     578:	0000001c 	andeq	r0, r0, ip, lsl r0
     57c:	00000528 	andeq	r0, r0, r8, lsr #10
     580:	010014e4 	smlatteq	r0, r4, r4, r1
     584:	00000158 	andeq	r0, r0, r8, asr r1
     588:	8b080e42 	blhi	203e98 <__core1_unwind_stub-0xdfc168>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR2CLK_ADDR,
     58c:	42018e02 	andmi	r8, r1, #2, 28
     590:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     594:	080d0ca6 	stmdaeq	sp, {r1, r2, r5, r7, sl, fp}
     598:	0000001c 	andeq	r0, r0, ip, lsl r0
     59c:	00000528 	andeq	r0, r0, r8, lsr #10
     5a0:	0100163c 	tsteq	r0, ip, lsr r6
     5a4:	0000015c 	andeq	r0, r0, ip, asr r1
     5a8:	8b080e42 	blhi	203eb8 <__core1_unwind_stub-0xdfc148>
     5ac:	42018e02 	andmi	r8, r1, #2, 28
     5b0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5b4:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR3CLK_ADDR,
     5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5bc:	00000528 	andeq	r0, r0, r8, lsr #10
     5c0:	00000000 	andeq	r0, r0, r0
     5c4:	00000090 	muleq	r0, r0, r0
     5c8:	8b080e42 	blhi	203ed8 <__core1_unwind_stub-0xdfc128>
     5cc:	42018e02 	andmi	r8, r1, #2, 28
     5d0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5d4:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5dc:	00000528 	andeq	r0, r0, r8, lsr #10
     5e0:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR4CLK_ADDR,
     5e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     5e8:	8b080e42 	blhi	203ef8 <__core1_unwind_stub-0xdfc108>
     5ec:	42018e02 	andmi	r8, r1, #2, 28
     5f0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     5f4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5fc:	00000528 	andeq	r0, r0, r8, lsr #10
     600:	01001798 			; <UNDEFINED> instruction: 0x01001798
     604:	00000048 	andeq	r0, r0, r8, asr #32
     608:	8b080e42 	blhi	203f18 <__core1_unwind_stub-0xdfc0e8>
     60c:	42018e02 	andmi	r8, r1, #2, 28
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR5CLK_ADDR,
     610:	5e040b0c 	vmlapl.f64	d0, d4, d12
     614:	00080d0c 	andeq	r0, r8, ip, lsl #26
     618:	0000001c 	andeq	r0, r0, ip, lsl r0
     61c:	00000528 	andeq	r0, r0, r8, lsr #10
     620:	00000000 	andeq	r0, r0, r0
     624:	0000002c 	andeq	r0, r0, ip, lsr #32
     628:	8b080e42 	blhi	203f38 <__core1_unwind_stub-0xdfc0c8>
     62c:	42018e02 	andmi	r8, r1, #2, 28
     630:	50040b0c 	andpl	r0, r4, ip, lsl #22
     634:	00080d0c 	andeq	r0, r8, ip, lsl #26
     638:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR6CLK_ADDR,
     63c:	00000528 	andeq	r0, r0, r8, lsr #10
     640:	00000000 	andeq	r0, r0, r0
     644:	000000a4 	andeq	r0, r0, r4, lsr #1
     648:	8b040e42 	blhi	103f58 <__core1_unwind_stub-0xefc0a8>
     64c:	0b0d4201 	bleq	350e58 <__core1_unwind_stub-0xcaf1a8>
     650:	0d0d4a02 	vstreq	s8, [sp, #-8]
     654:	000ecb42 	andeq	ip, lr, r2, asr #22
     658:	0000001c 	andeq	r0, r0, ip, lsl r0
     65c:	00000528 	andeq	r0, r0, r8, lsr #10
     660:	00000000 	andeq	r0, r0, r0
     664:	000000a0 	andeq	r0, r0, r0, lsr #1
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR7CLK_ADDR,
     668:	8b040e42 	blhi	103f78 <__core1_unwind_stub-0xefc088>
     66c:	0b0d4201 	bleq	350e78 <__core1_unwind_stub-0xcaf188>
     670:	0d0d4802 	stceq	8, cr4, [sp, #-8]
     674:	000ecb42 	andeq	ip, lr, r2, asr #22
     678:	0000001c 	andeq	r0, r0, ip, lsl r0
     67c:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR8CLK_ADDR,
     680:	010017e0 	smlatteq	r0, r0, r7, r1
     684:	00000080 	andeq	r0, r0, r0, lsl #1
     688:	8b040e42 	blhi	103f98 <__core1_unwind_stub-0xefc068>
     68c:	0b0d4201 	bleq	350e98 <__core1_unwind_stub-0xcaf168>
     690:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     694:	00000ecb 	andeq	r0, r0, fp, asr #29
     698:	0000001c 	andeq	r0, r0, ip, lsl r0
     69c:	00000528 	andeq	r0, r0, r8, lsr #10
     6a0:	01001860 	tsteq	r0, r0, ror #16
     6a4:	00000080 	andeq	r0, r0, r0, lsl #1
     6a8:	8b040e42 	blhi	103fb8 <__core1_unwind_stub-0xefc048>
  alt_write_word (ALT_CLKMGR_PERPLL_CNTR9CLK_ADDR,
     6ac:	0b0d4201 	bleq	350eb8 <__core1_unwind_stub-0xcaf148>
     6b0:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     6b4:	00000ecb 	andeq	r0, r0, fp, asr #29
     6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6bc:	00000528 	andeq	r0, r0, r8, lsr #10
     6c0:	00000000 	andeq	r0, r0, r0
  alt_write_word (ALT_CLKMGR_PERPLL_EMACCTL_ADDR,
     6c4:	000000d8 	ldrdeq	r0, [r0], -r8
     6c8:	8b040e42 	blhi	103fd8 <__core1_unwind_stub-0xefc028>
     6cc:	0b0d4201 	bleq	350ed8 <__core1_unwind_stub-0xcaf128>
     6d0:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
     6d4:	000ecb42 	andeq	ip, lr, r2, asr #22
     6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6dc:	00000528 	andeq	r0, r0, r8, lsr #10
     6e0:	010018e0 	smlatteq	r0, r0, r8, r1
     6e4:	00000104 	andeq	r0, r0, r4, lsl #2
     6e8:	8b040e42 	blhi	103ff8 <__core1_unwind_stub-0xefc008>
     6ec:	0b0d4201 	bleq	350ef8 <__core1_unwind_stub-0xcaf108>
     6f0:	0d0d7a02 	vstreq	s14, [sp, #-8]
     6f4:	000ecb42 	andeq	ip, lr, r2, asr #22
     6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6fc:	00000528 	andeq	r0, r0, r8, lsr #10
     700:	00000000 	andeq	r0, r0, r0
     704:	0000003c 	andeq	r0, r0, ip, lsr r0
  alt_write_word (ALT_CLKMGR_PERPLL_GPIODIV_ADDR,
     708:	8b080e42 	blhi	204018 <__core1_unwind_stub-0xdfbfe8>
     70c:	42018e02 	andmi	r8, r1, #2, 28
     710:	58040b0c 	stmdapl	r4, {r2, r3, r8, r9, fp}
     714:	00080d0c 	andeq	r0, r8, ip, lsl #26
     718:	0000001c 	andeq	r0, r0, ip, lsl r0
     71c:	00000528 	andeq	r0, r0, r8, lsr #10
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     720:	00000000 	andeq	r0, r0, r0
     724:	000000a8 	andeq	r0, r0, r8, lsr #1
     728:	8b040e42 	blhi	104038 <__core1_unwind_stub-0xefbfc8>
     72c:	0b0d4201 	bleq	350f38 <__core1_unwind_stub-0xcaf0c8>
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     730:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     734:	000ecb42 	andeq	ip, lr, r2, asr #22
           (ALT_CLKMGR_CLKMGR_STAT_PERPLLLOCKED_GET(data32) == 0));
     738:	0000001c 	andeq	r0, r0, ip, lsl r0
     73c:	00000528 	andeq	r0, r0, r8, lsr #10
     740:	00000000 	andeq	r0, r0, r0
     744:	000000a8 	andeq	r0, r0, r8, lsr #1
  } while ((ALT_CLKMGR_CLKMGR_STAT_MAINPLLLOCKED_GET(data32) == 0) ||
     748:	8b040e42 	blhi	104058 <__core1_unwind_stub-0xefbfa8>
     74c:	0b0d4201 	bleq	350f58 <__core1_unwind_stub-0xcaf0a8>
  alt_setbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     750:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     754:	000ecb42 	andeq	ip, lr, r2, asr #22
     758:	0000001c 	andeq	r0, r0, ip, lsl r0
     75c:	00000528 	andeq	r0, r0, r8, lsr #10
     760:	00000000 	andeq	r0, r0, r0
     764:	000000a8 	andeq	r0, r0, r8, lsr #1
     768:	8b040e42 	blhi	104078 <__core1_unwind_stub-0xefbf88>
  alt_setbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     76c:	0b0d4201 	bleq	350f78 <__core1_unwind_stub-0xcaf088>
     770:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     774:	000ecb42 	andeq	ip, lr, r2, asr #22
     778:	0000001c 	andeq	r0, r0, ip, lsl r0
     77c:	00000528 	andeq	r0, r0, r8, lsr #10
     780:	00000000 	andeq	r0, r0, r0
     784:	000000a8 	andeq	r0, r0, r8, lsr #1
  alt_clrbits_word(ALT_CLKMGR_MAINPLL_VCO0_ADDR,
     788:	8b040e42 	blhi	104098 <__core1_unwind_stub-0xefbf68>
     78c:	0b0d4201 	bleq	350f98 <__core1_unwind_stub-0xcaf068>
     790:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     794:	000ecb42 	andeq	ip, lr, r2, asr #22
     798:	0000001c 	andeq	r0, r0, ip, lsl r0
     79c:	00000528 	andeq	r0, r0, r8, lsr #10
     7a0:	00000000 	andeq	r0, r0, r0
  alt_clrbits_word(ALT_CLKMGR_PERPLL_VCO0_ADDR,
     7a4:	000000a8 	andeq	r0, r0, r8, lsr #1
     7a8:	8b040e42 	blhi	1040b8 <__core1_unwind_stub-0xefbf48>
     7ac:	0b0d4201 	bleq	350fb8 <__core1_unwind_stub-0xcaf048>
     7b0:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     7b4:	000ecb42 	andeq	ip, lr, r2, asr #22
     7b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7bc:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_write_word (ALT_CLKMGR_MAINPLL_BYPASSR_ADDR,
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	0000009c 	muleq	r0, ip, r0
     7c8:	8b040e42 	blhi	1040d8 <__core1_unwind_stub-0xefbf28>
     7cc:	0b0d4201 	bleq	350fd8 <__core1_unwind_stub-0xcaf028>
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     7d0:	0d0d4602 	stceq	6, cr4, [sp, #-8]
     7d4:	000ecb42 	andeq	ip, lr, r2, asr #22
     7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     7dc:	00000528 	andeq	r0, r0, r8, lsr #10
     7e0:	00000000 	andeq	r0, r0, r0
     7e4:	0000009c 	muleq	r0, ip, r0
     7e8:	8b040e42 	blhi	1040f8 <__core1_unwind_stub-0xefbf08>
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     7ec:	0b0d4201 	bleq	350ff8 <__core1_unwind_stub-0xcaf008>
     7f0:	0d0d4602 	stceq	6, cr4, [sp, #-8]
     7f4:	000ecb42 	andeq	ip, lr, r2, asr #22
     7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     7fc:	00000528 	andeq	r0, r0, r8, lsr #10
     800:	00000000 	andeq	r0, r0, r0
     804:	000000dc 	ldrdeq	r0, [r0], -ip
     808:	8b040e42 	blhi	104118 <__core1_unwind_stub-0xefbee8>
  alt_write_word (ALT_CLKMGR_PERPLL_BYPASSR_ADDR,
     80c:	0b0d4201 	bleq	351018 <__core1_unwind_stub-0xcaefe8>
     810:	0d0d6602 	stceq	6, cr6, [sp, #-8]
     814:	000ecb42 	andeq	ip, lr, r2, asr #22
     818:	0000001c 	andeq	r0, r0, ip, lsl r0
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     81c:	00000528 	andeq	r0, r0, r8, lsr #10
     820:	00000000 	andeq	r0, r0, r0
     824:	000000dc 	ldrdeq	r0, [r0], -ip
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     828:	8b040e42 	blhi	104138 <__core1_unwind_stub-0xefbec8>
     82c:	0b0d4201 	bleq	351038 <__core1_unwind_stub-0xcaefc8>
     830:	0d0d6602 	stceq	6, cr6, [sp, #-8]
     834:	000ecb42 	andeq	ip, lr, r2, asr #22
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     838:	0000001c 	andeq	r0, r0, ip, lsl r0
     83c:	00000528 	andeq	r0, r0, r8, lsr #10
     840:	00000000 	andeq	r0, r0, r0
     844:	0000005c 	andeq	r0, r0, ip, asr r0
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     848:	8b080e42 	blhi	204158 <__core1_unwind_stub-0xdfbea8>
     84c:	42018e02 	andmi	r8, r1, #2, 28
     850:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
     854:	00080d0c 	andeq	r0, r8, ip, lsl #26
  alt_clrbits_word (ALT_CLKMGR_CLKMGR_CTL_ADDR,
     858:	0000001c 	andeq	r0, r0, ip, lsl r0
     85c:	00000528 	andeq	r0, r0, r8, lsr #10
     860:	010019e4 	smlatteq	r0, r4, r9, r1
     864:	00000074 	andeq	r0, r0, r4, ror r0
     868:	8b080e42 	blhi	204178 <__core1_unwind_stub-0xdfbe88>
     86c:	42018e02 	andmi	r8, r1, #2, 28
     870:	74040b0c 	strvc	r0, [r4], #-2828	; 0xfffff4f4
  time = alt_gpt_counter_get(ALT_GPT_OSC1_TMR0);
     874:	00080d0c 	andeq	r0, r8, ip, lsl #26
     878:	0000001c 	andeq	r0, r0, ip, lsl r0
     87c:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_gpt_delay_ns(ALT_GPT_OSC1_TMR0, time, 500);
     880:	00000000 	andeq	r0, r0, r0
     884:	0000003c 	andeq	r0, r0, ip, lsr r0
     888:	8b040e42 	blhi	104198 <__core1_unwind_stub-0xefbe68>
     88c:	0b0d4201 	bleq	351098 <__core1_unwind_stub-0xcaef68>
    data32 = alt_read_word (ALT_CLKMGR_CLKMGR_STAT_ADDR);
     890:	420d0d56 	andmi	r0, sp, #5504	; 0x1580
     894:	00000ecb 	andeq	r0, r0, fp, asr #29
     898:	0000001c 	andeq	r0, r0, ip, lsl r0
     89c:	00000528 	andeq	r0, r0, r8, lsr #10
  } while ((ALT_CLKMGR_CLKMGR_STAT_BUSY_GET(data32) != ALT_CLKMGR_CLKMGR_STAT_BUSY_E_IDLE));
     8a0:	01001a58 	tsteq	r0, r8, asr sl
     8a4:	00000078 	andeq	r0, r0, r8, ror r0
     8a8:	8b040e42 	blhi	1041b8 <__core1_unwind_stub-0xefbe48>
     8ac:	0b0d4201 	bleq	3510b8 <__core1_unwind_stub-0xcaef48>
  alt_write_word (ALT_CLKMGR_MAINPLL_ENS_ADDR,
     8b0:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     8b4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8bc:	00000528 	andeq	r0, r0, r8, lsr #10
  alt_write_word (ALT_CLKMGR_PERPLL_ENS_ADDR,
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	00000080 	andeq	r0, r0, r0, lsl #1
     8c8:	8b040e42 	blhi	1041d8 <__core1_unwind_stub-0xefbe28>
     8cc:	0b0d4201 	bleq	3510d8 <__core1_unwind_stub-0xcaef28>
  alt_write_word (ALT_CLKMGR_CLKMGR_INTR_ADDR,
     8d0:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     8d4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8dc:	00000528 	andeq	r0, r0, r8, lsr #10
    return ALT_E_SUCCESS;
     8e0:	01001ad0 	ldrdeq	r1, [r0, -r0]
}
     8e4:	00000084 	andeq	r0, r0, r4, lsl #1
     8e8:	8b040e42 	blhi	1041f8 <__core1_unwind_stub-0xefbe08>
     8ec:	0b0d4201 	bleq	3510f8 <__core1_unwind_stub-0xcaef08>
     8f0:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
     8f4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8fc:	00000528 	andeq	r0, r0, r8, lsr #10
     900:	00000000 	andeq	r0, r0, r0
     904:	0000002c 	andeq	r0, r0, ip, lsr #32
     908:	8b080e42 	blhi	204218 <__core1_unwind_stub-0xdfbde8>
     90c:	42018e02 	andmi	r8, r1, #2, 28
     910:	50040b0c 	andpl	r0, r4, ip, lsl #22
     914:	00080d0c 	andeq	r0, r8, ip, lsl #26
     918:	0000001c 	andeq	r0, r0, ip, lsl r0
     91c:	00000528 	andeq	r0, r0, r8, lsr #10
     920:	00000000 	andeq	r0, r0, r0
     924:	0000002c 	andeq	r0, r0, ip, lsr #32
     928:	8b080e42 	blhi	204238 <__core1_unwind_stub-0xdfbdc8>
     92c:	42018e02 	andmi	r8, r1, #2, 28
     930:	50040b0c 	andpl	r0, r4, ip, lsl #22
     934:	00080d0c 	andeq	r0, r8, ip, lsl #26
     938:	0000001c 	andeq	r0, r0, ip, lsl r0
     93c:	00000528 	andeq	r0, r0, r8, lsr #10
     940:	00000000 	andeq	r0, r0, r0
     944:	0000002c 	andeq	r0, r0, ip, lsr #32
     948:	8b080e42 	blhi	204258 <__core1_unwind_stub-0xdfbda8>
     94c:	42018e02 	andmi	r8, r1, #2, 28
     950:	50040b0c 	andpl	r0, r4, ip, lsl #22
     954:	00080d0c 	andeq	r0, r8, ip, lsl #26
     958:	0000001c 	andeq	r0, r0, ip, lsl r0
     95c:	00000528 	andeq	r0, r0, r8, lsr #10
     960:	00000000 	andeq	r0, r0, r0
     964:	0000002c 	andeq	r0, r0, ip, lsr #32
     968:	8b080e42 	blhi	204278 <__core1_unwind_stub-0xdfbd88>
     96c:	42018e02 	andmi	r8, r1, #2, 28
     970:	50040b0c 	andpl	r0, r4, ip, lsl #22
     974:	00080d0c 	andeq	r0, r8, ip, lsl #26
     978:	0000001c 	andeq	r0, r0, ip, lsl r0
     97c:	00000528 	andeq	r0, r0, r8, lsr #10
     980:	00000000 	andeq	r0, r0, r0
     984:	0000002c 	andeq	r0, r0, ip, lsr #32
     988:	8b080e42 	blhi	204298 <__core1_unwind_stub-0xdfbd68>
     98c:	42018e02 	andmi	r8, r1, #2, 28
     990:	50040b0c 	andpl	r0, r4, ip, lsl #22
     994:	00080d0c 	andeq	r0, r8, ip, lsl #26
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
     99c:	00000528 	andeq	r0, r0, r8, lsr #10
     9a0:	00000000 	andeq	r0, r0, r0
     9a4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9a8:	8b080e42 	blhi	2042b8 <__core1_unwind_stub-0xdfbd48>
     9ac:	42018e02 	andmi	r8, r1, #2, 28
     9b0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     9b4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9bc:	00000528 	andeq	r0, r0, r8, lsr #10
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9c8:	8b080e42 	blhi	2042d8 <__core1_unwind_stub-0xdfbd28>
     9cc:	42018e02 	andmi	r8, r1, #2, 28
     9d0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     9d4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9dc:	00000528 	andeq	r0, r0, r8, lsr #10
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9e8:	8b080e42 	blhi	2042f8 <__core1_unwind_stub-0xdfbd08>
     9ec:	42018e02 	andmi	r8, r1, #2, 28
     9f0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     9f4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9fc:	00000528 	andeq	r0, r0, r8, lsr #10
     a00:	01001b54 	tsteq	r0, r4, asr fp
     a04:	0000002c 	andeq	r0, r0, ip, lsr #32
     a08:	8b080e42 	blhi	204318 <__core1_unwind_stub-0xdfbce8>
     a0c:	42018e02 	andmi	r8, r1, #2, 28
     a10:	50040b0c 	andpl	r0, r4, ip, lsl #22
     a14:	00080d0c 	andeq	r0, r8, ip, lsl #26
     a18:	0000001c 	andeq	r0, r0, ip, lsl r0
     a1c:	00000528 	andeq	r0, r0, r8, lsr #10
     a20:	00000000 	andeq	r0, r0, r0
     a24:	0000007c 	andeq	r0, r0, ip, ror r0
     a28:	8b040e42 	blhi	104338 <__core1_unwind_stub-0xefbcc8>
     a2c:	0b0d4201 	bleq	351238 <__core1_unwind_stub-0xcaedc8>
     a30:	420d0d76 	andmi	r0, sp, #7552	; 0x1d80
     a34:	00000ecb 	andeq	r0, r0, fp, asr #29
     a38:	0000001c 	andeq	r0, r0, ip, lsl r0
     a3c:	00000528 	andeq	r0, r0, r8, lsr #10
     a40:	01001b80 	smlabbeq	r0, r0, fp, r1
     a44:	00000154 	andeq	r0, r0, r4, asr r1
     a48:	8b040e42 	blhi	104358 <__core1_unwind_stub-0xefbca8>
     a4c:	0b0d4201 	bleq	351258 <__core1_unwind_stub-0xcaeda8>
     a50:	0d0da202 	sfmeq	f2, 1, [sp, #-8]
     a54:	000ecb42 	andeq	ip, lr, r2, asr #22
     a58:	0000001c 	andeq	r0, r0, ip, lsl r0
     a5c:	00000528 	andeq	r0, r0, r8, lsr #10
     a60:	00000000 	andeq	r0, r0, r0
     a64:	00000078 	andeq	r0, r0, r8, ror r0
     a68:	8b040e42 	blhi	104378 <__core1_unwind_stub-0xefbc88>
     a6c:	0b0d4201 	bleq	351278 <__core1_unwind_stub-0xcaed88>
     a70:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     a74:	00000ecb 	andeq	r0, r0, fp, asr #29
     a78:	0000001c 	andeq	r0, r0, ip, lsl r0
     a7c:	00000528 	andeq	r0, r0, r8, lsr #10
     a80:	00000000 	andeq	r0, r0, r0
     a84:	00000078 	andeq	r0, r0, r8, ror r0
     a88:	8b040e42 	blhi	104398 <__core1_unwind_stub-0xefbc68>
     a8c:	0b0d4201 	bleq	351298 <__core1_unwind_stub-0xcaed68>
     a90:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     a94:	00000ecb 	andeq	r0, r0, fp, asr #29
     a98:	0000001c 	andeq	r0, r0, ip, lsl r0
     a9c:	00000528 	andeq	r0, r0, r8, lsr #10
     aa0:	00000000 	andeq	r0, r0, r0
     aa4:	0000006c 	andeq	r0, r0, ip, rrx
     aa8:	8b040e42 	blhi	1043b8 <__core1_unwind_stub-0xefbc48>
     aac:	0b0d4201 	bleq	3512b8 <__core1_unwind_stub-0xcaed48>
     ab0:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
     ab4:	00000ecb 	andeq	r0, r0, fp, asr #29
     ab8:	0000001c 	andeq	r0, r0, ip, lsl r0
     abc:	00000528 	andeq	r0, r0, r8, lsr #10
     ac0:	01001cd4 	ldrdeq	r1, [r0, -r4]
     ac4:	00000080 	andeq	r0, r0, r0, lsl #1
     ac8:	8b040e42 	blhi	1043d8 <__core1_unwind_stub-0xefbc28>
     acc:	0b0d4201 	bleq	3512d8 <__core1_unwind_stub-0xcaed28>
     ad0:	420d0d78 	andmi	r0, sp, #120, 26	; 0x1e00
     ad4:	00000ecb 	andeq	r0, r0, fp, asr #29
     ad8:	0000001c 	andeq	r0, r0, ip, lsl r0
     adc:	00000528 	andeq	r0, r0, r8, lsr #10
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	00000084 	andeq	r0, r0, r4, lsl #1
     ae8:	8b040e42 	blhi	1043f8 <__core1_unwind_stub-0xefbc08>
     aec:	0b0d4201 	bleq	3512f8 <__core1_unwind_stub-0xcaed08>
     af0:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
     af4:	00000ecb 	andeq	r0, r0, fp, asr #29
     af8:	0000001c 	andeq	r0, r0, ip, lsl r0
     afc:	00000528 	andeq	r0, r0, r8, lsr #10
     b00:	00000000 	andeq	r0, r0, r0
     b04:	00000080 	andeq	r0, r0, r0, lsl #1
     b08:	8b080e42 	blhi	204418 <__core1_unwind_stub-0xdfbbe8>
     b0c:	42018e02 	andmi	r8, r1, #2, 28
     b10:	7a040b0c 	bvc	103748 <__core1_unwind_stub-0xefc8b8>
     b14:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b18:	0000001c 	andeq	r0, r0, ip, lsl r0
     b1c:	00000528 	andeq	r0, r0, r8, lsr #10
     b20:	00000000 	andeq	r0, r0, r0
     b24:	0000002c 	andeq	r0, r0, ip, lsr #32
     b28:	8b080e42 	blhi	204438 <__core1_unwind_stub-0xdfbbc8>
     b2c:	42018e02 	andmi	r8, r1, #2, 28
     b30:	50040b0c 	andpl	r0, r4, ip, lsl #22
     b34:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b38:	0000001c 	andeq	r0, r0, ip, lsl r0
     b3c:	00000528 	andeq	r0, r0, r8, lsr #10
     b40:	00000000 	andeq	r0, r0, r0
     b44:	00000044 	andeq	r0, r0, r4, asr #32
     b48:	8b080e42 	blhi	204458 <__core1_unwind_stub-0xdfbba8>
     b4c:	42018e02 	andmi	r8, r1, #2, 28
     b50:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
     b54:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b58:	0000001c 	andeq	r0, r0, ip, lsl r0
     b5c:	00000528 	andeq	r0, r0, r8, lsr #10
     b60:	00000000 	andeq	r0, r0, r0
     b64:	0000002c 	andeq	r0, r0, ip, lsr #32
     b68:	8b080e42 	blhi	204478 <__core1_unwind_stub-0xdfbb88>
     b6c:	42018e02 	andmi	r8, r1, #2, 28
     b70:	50040b0c 	andpl	r0, r4, ip, lsl #22
     b74:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b78:	0000001c 	andeq	r0, r0, ip, lsl r0
     b7c:	00000528 	andeq	r0, r0, r8, lsr #10
     b80:	00000000 	andeq	r0, r0, r0
     b84:	0000002c 	andeq	r0, r0, ip, lsr #32
     b88:	8b080e42 	blhi	204498 <__core1_unwind_stub-0xdfbb68>
     b8c:	42018e02 	andmi	r8, r1, #2, 28
     b90:	50040b0c 	andpl	r0, r4, ip, lsl #22
     b94:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b98:	0000001c 	andeq	r0, r0, ip, lsl r0
     b9c:	00000528 	andeq	r0, r0, r8, lsr #10
     ba0:	00000000 	andeq	r0, r0, r0
     ba4:	0000002c 	andeq	r0, r0, ip, lsr #32
     ba8:	8b080e42 	blhi	2044b8 <__core1_unwind_stub-0xdfbb48>
     bac:	42018e02 	andmi	r8, r1, #2, 28
     bb0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     bb4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     bb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bbc:	00000528 	andeq	r0, r0, r8, lsr #10
     bc0:	00000000 	andeq	r0, r0, r0
     bc4:	0000002c 	andeq	r0, r0, ip, lsr #32
     bc8:	8b080e42 	blhi	2044d8 <__core1_unwind_stub-0xdfbb28>
     bcc:	42018e02 	andmi	r8, r1, #2, 28
     bd0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     bd4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     bd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bdc:	00000528 	andeq	r0, r0, r8, lsr #10
     be0:	00000000 	andeq	r0, r0, r0
     be4:	0000002c 	andeq	r0, r0, ip, lsr #32
     be8:	8b080e42 	blhi	2044f8 <__core1_unwind_stub-0xdfbb08>
     bec:	42018e02 	andmi	r8, r1, #2, 28
     bf0:	50040b0c 	andpl	r0, r4, ip, lsl #22
     bf4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     bf8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bfc:	00000528 	andeq	r0, r0, r8, lsr #10
     c00:	01001d54 	tsteq	r0, r4, asr sp
     c04:	0000002c 	andeq	r0, r0, ip, lsr #32
     c08:	8b080e42 	blhi	204518 <__core1_unwind_stub-0xdfbae8>
     c0c:	42018e02 	andmi	r8, r1, #2, 28
     c10:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c14:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c18:	0000001c 	andeq	r0, r0, ip, lsl r0
     c1c:	00000528 	andeq	r0, r0, r8, lsr #10
     c20:	00000000 	andeq	r0, r0, r0
     c24:	0000002c 	andeq	r0, r0, ip, lsr #32
     c28:	8b080e42 	blhi	204538 <__core1_unwind_stub-0xdfbac8>
     c2c:	42018e02 	andmi	r8, r1, #2, 28
     c30:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c34:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c38:	0000001c 	andeq	r0, r0, ip, lsl r0
     c3c:	00000528 	andeq	r0, r0, r8, lsr #10
     c40:	01001d80 	smlabbeq	r0, r0, sp, r1
     c44:	0000002c 	andeq	r0, r0, ip, lsr #32
     c48:	8b080e42 	blhi	204558 <__core1_unwind_stub-0xdfbaa8>
     c4c:	42018e02 	andmi	r8, r1, #2, 28
     c50:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c54:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c58:	0000001c 	andeq	r0, r0, ip, lsl r0
     c5c:	00000528 	andeq	r0, r0, r8, lsr #10
     c60:	00000000 	andeq	r0, r0, r0
     c64:	0000002c 	andeq	r0, r0, ip, lsr #32
     c68:	8b080e42 	blhi	204578 <__core1_unwind_stub-0xdfba88>
     c6c:	42018e02 	andmi	r8, r1, #2, 28
     c70:	50040b0c 	andpl	r0, r4, ip, lsl #22
     c74:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c78:	0000001c 	andeq	r0, r0, ip, lsl r0
     c7c:	00000528 	andeq	r0, r0, r8, lsr #10
     c80:	00000000 	andeq	r0, r0, r0
     c84:	0000006c 	andeq	r0, r0, ip, rrx
     c88:	8b040e42 	blhi	104598 <__core1_unwind_stub-0xefba68>
     c8c:	0b0d4201 	bleq	351498 <__core1_unwind_stub-0xcaeb68>
     c90:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
     c94:	00000ecb 	andeq	r0, r0, fp, asr #29
     c98:	0000000c 	andeq	r0, r0, ip
     c9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ca0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ca4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ca8:	00000030 	andeq	r0, r0, r0, lsr r0
     cac:	00000c98 	muleq	r0, r8, ip
     cb0:	01001dac 	smlatbeq	r0, ip, sp, r1
     cb4:	00000024 	andeq	r0, r0, r4, lsr #32
     cb8:	80100e42 	andshi	r0, r0, r2, asr #28
     cbc:	82038104 	andhi	r8, r3, #4, 2
     cc0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     cc4:	058b140e 	streq	r1, [fp, #1038]	; 0x40e
     cc8:	460b0d42 	strmi	r0, [fp], -r2, asr #26
     ccc:	cb420d0d 	blgt	1084108 <__bss_end__+0x68108>
     cd0:	c342100e 	movtgt	r1, #8206	; 0x200e
     cd4:	0ec0c1c2 	acseqdm	f4, f2
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ce0:	00000c98 	muleq	r0, r8, ip
     ce4:	01001dd0 	ldrdeq	r1, [r0, -r0]
     ce8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cec:	8b040e42 	blhi	1045fc <__core1_unwind_stub-0xefba04>
     cf0:	0b0d4201 	bleq	3514fc <__core1_unwind_stub-0xcaeb04>
     cf4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     cf8:	00000ecb 	andeq	r0, r0, fp, asr #29
     cfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     d00:	00000c98 	muleq	r0, r8, ip
     d04:	00000000 	andeq	r0, r0, r0
     d08:	0000001c 	andeq	r0, r0, ip, lsl r0
     d0c:	8b040e42 	blhi	10461c <__core1_unwind_stub-0xefb9e4>
     d10:	0b0d4201 	bleq	35151c <__core1_unwind_stub-0xcaeae4>
     d14:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     d18:	00000ecb 	andeq	r0, r0, fp, asr #29
     d1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d20:	00000c98 	muleq	r0, r8, ip
     d24:	01001dec 	smlatteq	r0, ip, sp, r1
     d28:	0000008c 	andeq	r0, r0, ip, lsl #1
     d2c:	8b080e42 	blhi	20463c <__core1_unwind_stub-0xdfb9c4>
     d30:	42018e02 	andmi	r8, r1, #2, 28
     d34:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     d38:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
     d3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d40:	00000c98 	muleq	r0, r8, ip
     d44:	00000000 	andeq	r0, r0, r0
     d48:	00000150 	andeq	r0, r0, r0, asr r1
     d4c:	8b040e42 	blhi	10465c <__core1_unwind_stub-0xefb9a4>
     d50:	0b0d4201 	bleq	35155c <__core1_unwind_stub-0xcaeaa4>
     d54:	0d0da002 	stceq	0, cr10, [sp, #-8]
     d58:	000ecb42 	andeq	ip, lr, r2, asr #22
     d5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d60:	00000c98 	muleq	r0, r8, ip
     d64:	00000000 	andeq	r0, r0, r0
     d68:	00000168 	andeq	r0, r0, r8, ror #2
     d6c:	8b040e42 	blhi	10467c <__core1_unwind_stub-0xefb984>
     d70:	0b0d4201 	bleq	35157c <__core1_unwind_stub-0xcaea84>
     d74:	0d0dac02 	stceq	12, cr10, [sp, #-8]
     d78:	000ecb42 	andeq	ip, lr, r2, asr #22
     d7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d80:	00000c98 	muleq	r0, r8, ip
     d84:	00000000 	andeq	r0, r0, r0
     d88:	00000068 	andeq	r0, r0, r8, rrx
     d8c:	8b080e42 	blhi	20469c <__core1_unwind_stub-0xdfb964>
     d90:	42018e02 	andmi	r8, r1, #2, 28
     d94:	6e040b0c 	vmlavs.f64	d0, d4, d12
     d98:	00080d0c 	andeq	r0, r8, ip, lsl #26
     d9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     da0:	00000c98 	muleq	r0, r8, ip
     da4:	01001e78 	tsteq	r0, r8, ror lr
     da8:	00000050 	andeq	r0, r0, r0, asr r0
     dac:	8b080e42 	blhi	2046bc <__core1_unwind_stub-0xdfb944>
     db0:	42018e02 	andmi	r8, r1, #2, 28
     db4:	62040b0c 	andvs	r0, r4, #12, 22	; 0x3000
     db8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     dbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     dc0:	00000c98 	muleq	r0, r8, ip
     dc4:	00000000 	andeq	r0, r0, r0
     dc8:	00000074 	andeq	r0, r0, r4, ror r0
     dcc:	8b040e42 	blhi	1046dc <__core1_unwind_stub-0xefb924>
     dd0:	0b0d4201 	bleq	3515dc <__core1_unwind_stub-0xcaea24>
     dd4:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
     dd8:	00000ecb 	andeq	r0, r0, fp, asr #29
     ddc:	0000001c 	andeq	r0, r0, ip, lsl r0
     de0:	00000c98 	muleq	r0, r8, ip
     de4:	01001ec8 	smlabteq	r0, r8, lr, r1
     de8:	000000e0 	andeq	r0, r0, r0, ror #1
     dec:	8b040e42 	blhi	1046fc <__core1_unwind_stub-0xefb904>
     df0:	0b0d4201 	bleq	3515fc <__core1_unwind_stub-0xcaea04>
     df4:	0d0d6802 	stceq	8, cr6, [sp, #-8]
     df8:	000ecb42 	andeq	ip, lr, r2, asr #22
     dfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     e00:	00000c98 	muleq	r0, r8, ip
     e04:	00000000 	andeq	r0, r0, r0
     e08:	00000038 	andeq	r0, r0, r8, lsr r0
     e0c:	8b040e42 	blhi	10471c <__core1_unwind_stub-0xefb8e4>
     e10:	0b0d4201 	bleq	35161c <__core1_unwind_stub-0xcae9e4>
     e14:	420d0d54 	andmi	r0, sp, #84, 26	; 0x1500
     e18:	00000ecb 	andeq	r0, r0, fp, asr #29
     e1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e20:	00000c98 	muleq	r0, r8, ip
     e24:	00000000 	andeq	r0, r0, r0
     e28:	0000007c 	andeq	r0, r0, ip, ror r0
     e2c:	8b040e42 	blhi	10473c <__core1_unwind_stub-0xefb8c4>
     e30:	0b0d4201 	bleq	35163c <__core1_unwind_stub-0xcae9c4>
     e34:	420d0d76 	andmi	r0, sp, #7552	; 0x1d80
     e38:	00000ecb 	andeq	r0, r0, fp, asr #29
     e3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e40:	00000c98 	muleq	r0, r8, ip
     e44:	01001fa8 	smlatbeq	r0, r8, pc, r1	; <UNPREDICTABLE>
     e48:	000000b4 	strheq	r0, [r0], -r4
     e4c:	8b040e42 	blhi	10475c <__core1_unwind_stub-0xefb8a4>
     e50:	0b0d4201 	bleq	35165c <__core1_unwind_stub-0xcae9a4>
     e54:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
     e58:	000ecb42 	andeq	ip, lr, r2, asr #22
     e5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e60:	00000c98 	muleq	r0, r8, ip
     e64:	0100205c 	qaddeq	r2, ip, r0
     e68:	000000e0 	andeq	r0, r0, r0, ror #1
     e6c:	8b040e42 	blhi	10477c <__core1_unwind_stub-0xefb884>
     e70:	0b0d4201 	bleq	35167c <__core1_unwind_stub-0xcae984>
     e74:	0d0d6802 	stceq	8, cr6, [sp, #-8]
     e78:	000ecb42 	andeq	ip, lr, r2, asr #22
     e7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e80:	00000c98 	muleq	r0, r8, ip
     e84:	00000000 	andeq	r0, r0, r0
     e88:	00000078 	andeq	r0, r0, r8, ror r0
     e8c:	8b040e42 	blhi	10479c <__core1_unwind_stub-0xefb864>
     e90:	0b0d4201 	bleq	35169c <__core1_unwind_stub-0xcae964>
     e94:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
     e98:	00000ecb 	andeq	r0, r0, fp, asr #29
     e9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     ea0:	00000c98 	muleq	r0, r8, ip
     ea4:	0100213c 	tsteq	r0, ip, lsr r1
     ea8:	00000034 	andeq	r0, r0, r4, lsr r0
     eac:	8b040e42 	blhi	1047bc <__core1_unwind_stub-0xefb844>
     eb0:	0b0d4201 	bleq	3516bc <__core1_unwind_stub-0xcae944>
     eb4:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     eb8:	00000ecb 	andeq	r0, r0, fp, asr #29
     ebc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ec0:	00000c98 	muleq	r0, r8, ip
     ec4:	00000000 	andeq	r0, r0, r0
     ec8:	00000034 	andeq	r0, r0, r4, lsr r0
     ecc:	8b040e42 	blhi	1047dc <__core1_unwind_stub-0xefb824>
     ed0:	0b0d4201 	bleq	3516dc <__core1_unwind_stub-0xcae924>
     ed4:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     ed8:	00000ecb 	andeq	r0, r0, fp, asr #29
     edc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ee0:	00000c98 	muleq	r0, r8, ip
     ee4:	01002170 	tsteq	r0, r0, ror r1
     ee8:	00000068 	andeq	r0, r0, r8, rrx
     eec:	8b040e42 	blhi	1047fc <__core1_unwind_stub-0xefb804>
     ef0:	0b0d4201 	bleq	3516fc <__core1_unwind_stub-0xcae904>
     ef4:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
     ef8:	00000ecb 	andeq	r0, r0, fp, asr #29
     efc:	00000020 	andeq	r0, r0, r0, lsr #32
     f00:	00000c98 	muleq	r0, r8, ip
     f04:	010021d8 	ldrdeq	r2, [r0, -r8]
     f08:	00000328 	andeq	r0, r0, r8, lsr #6
     f0c:	8b080e42 	blhi	20481c <__core1_unwind_stub-0xdfb7e4>
     f10:	42018e02 	andmi	r8, r1, #2, 28
     f14:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     f18:	0d0c018e 	stfeqs	f0, [ip, #-568]	; 0xfffffdc8
     f1c:	00000008 	andeq	r0, r0, r8
     f20:	0000001c 	andeq	r0, r0, ip, lsl r0
     f24:	00000c98 	muleq	r0, r8, ip
     f28:	01002500 	tsteq	r0, r0, lsl #10
     f2c:	00000068 	andeq	r0, r0, r8, rrx
     f30:	8b080e42 	blhi	204840 <__core1_unwind_stub-0xdfb7c0>
     f34:	42018e02 	andmi	r8, r1, #2, 28
     f38:	6e040b0c 	vmlavs.f64	d0, d4, d12
     f3c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     f40:	0000001c 	andeq	r0, r0, ip, lsl r0
     f44:	00000c98 	muleq	r0, r8, ip
     f48:	01002568 	tsteq	r0, r8, ror #10
     f4c:	00000060 	andeq	r0, r0, r0, rrx
     f50:	8b040e42 	blhi	104860 <__core1_unwind_stub-0xefb7a0>
     f54:	0b0d4201 	bleq	351760 <__core1_unwind_stub-0xcae8a0>
     f58:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     f5c:	00000ecb 	andeq	r0, r0, fp, asr #29
     f60:	0000001c 	andeq	r0, r0, ip, lsl r0
     f64:	00000c98 	muleq	r0, r8, ip
     f68:	010025c8 	smlabteq	r0, r8, r5, r2
     f6c:	00000124 	andeq	r0, r0, r4, lsr #2
     f70:	8b040e42 	blhi	104880 <__core1_unwind_stub-0xefb780>
     f74:	0b0d4201 	bleq	351780 <__core1_unwind_stub-0xcae880>
     f78:	0d0d8a02 	vstreq	s16, [sp, #-8]
     f7c:	000ecb42 	andeq	ip, lr, r2, asr #22
     f80:	0000001c 	andeq	r0, r0, ip, lsl r0
     f84:	00000c98 	muleq	r0, r8, ip
     f88:	010026ec 	smlatteq	r0, ip, r6, r2
     f8c:	00000124 	andeq	r0, r0, r4, lsr #2
     f90:	8b040e42 	blhi	1048a0 <__core1_unwind_stub-0xefb760>
     f94:	0b0d4201 	bleq	3517a0 <__core1_unwind_stub-0xcae860>
     f98:	0d0d8a02 	vstreq	s16, [sp, #-8]
     f9c:	000ecb42 	andeq	ip, lr, r2, asr #22
     fa0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fa4:	00000c98 	muleq	r0, r8, ip
     fa8:	01002810 	tsteq	r0, r0, lsl r8
     fac:	0000010c 	andeq	r0, r0, ip, lsl #2
     fb0:	8b040e42 	blhi	1048c0 <__core1_unwind_stub-0xefb740>
     fb4:	0b0d4201 	bleq	3517c0 <__core1_unwind_stub-0xcae840>
     fb8:	0d0d7e02 	stceq	14, cr7, [sp, #-8]
     fbc:	000ecb42 	andeq	ip, lr, r2, asr #22
     fc0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fc4:	00000c98 	muleq	r0, r8, ip
     fc8:	0100291c 	tsteq	r0, ip, lsl r9
     fcc:	00000110 	andeq	r0, r0, r0, lsl r1
     fd0:	8b040e42 	blhi	1048e0 <__core1_unwind_stub-0xefb720>
     fd4:	0b0d4201 	bleq	3517e0 <__core1_unwind_stub-0xcae820>
     fd8:	0d0d8002 	stceq	0, cr8, [sp, #-8]
     fdc:	000ecb42 	andeq	ip, lr, r2, asr #22
     fe0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fe4:	00000c98 	muleq	r0, r8, ip
     fe8:	01002a2c 	tsteq	r0, ip, lsr #20
     fec:	00000048 	andeq	r0, r0, r8, asr #32
     ff0:	8b080e42 	blhi	204900 <__core1_unwind_stub-0xdfb700>
     ff4:	42018e02 	andmi	r8, r1, #2, 28
     ff8:	5e040b0c 	vmlapl.f64	d0, d4, d12
     ffc:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1000:	00000020 	andeq	r0, r0, r0, lsr #32
    1004:	00000c98 	muleq	r0, r8, ip
    1008:	01002a74 	tsteq	r0, r4, ror sl
    100c:	00000dd8 	ldrdeq	r0, [r0], -r8
    1010:	8b080e42 	blhi	204920 <__core1_unwind_stub-0xdfb6e0>
    1014:	42018e02 	andmi	r8, r1, #2, 28
    1018:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    101c:	0d0c06e6 	stceq	6, cr0, [ip, #-920]	; 0xfffffc68
    1020:	00000008 	andeq	r0, r0, r8
    1024:	0000001c 	andeq	r0, r0, ip, lsl r0
    1028:	00000c98 	muleq	r0, r8, ip
    102c:	0100384c 	tsteq	r0, ip, asr #16
    1030:	0000013c 	andeq	r0, r0, ip, lsr r1
    1034:	8b080e42 	blhi	204944 <__core1_unwind_stub-0xdfb6bc>
    1038:	42018e02 	andmi	r8, r1, #2, 28
    103c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1040:	080d0c98 	stmdaeq	sp, {r3, r4, r7, sl, fp}
    1044:	0000001c 	andeq	r0, r0, ip, lsl r0
    1048:	00000c98 	muleq	r0, r8, ip
    104c:	00000000 	andeq	r0, r0, r0
    1050:	00000184 	andeq	r0, r0, r4, lsl #3
    1054:	8b080e42 	blhi	204964 <__core1_unwind_stub-0xdfb69c>
    1058:	42018e02 	andmi	r8, r1, #2, 28
    105c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1060:	080d0cbc 	stmdaeq	sp, {r2, r3, r4, r5, r7, sl, fp}
    1064:	0000001c 	andeq	r0, r0, ip, lsl r0
    1068:	00000c98 	muleq	r0, r8, ip
    106c:	00000000 	andeq	r0, r0, r0
    1070:	000000e0 	andeq	r0, r0, r0, ror #1
    1074:	8b080e42 	blhi	204984 <__core1_unwind_stub-0xdfb67c>
    1078:	42018e02 	andmi	r8, r1, #2, 28
    107c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1080:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
    1084:	0000001c 	andeq	r0, r0, ip, lsl r0
    1088:	00000c98 	muleq	r0, r8, ip
    108c:	00000000 	andeq	r0, r0, r0
    1090:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1094:	8b080e42 	blhi	2049a4 <__core1_unwind_stub-0xdfb65c>
    1098:	42018e02 	andmi	r8, r1, #2, 28
    109c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    10a0:	080d0cd8 	stmdaeq	sp, {r3, r4, r6, r7, sl, fp}
    10a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10a8:	00000c98 	muleq	r0, r8, ip
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	00000044 	andeq	r0, r0, r4, asr #32
    10b4:	8b080e42 	blhi	2049c4 <__core1_unwind_stub-0xdfb63c>
    10b8:	42018e02 	andmi	r8, r1, #2, 28
    10bc:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
    10c0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    10d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10d8:	000010c4 	andeq	r1, r0, r4, asr #1
    10dc:	00000000 	andeq	r0, r0, r0
    10e0:	00000030 	andeq	r0, r0, r0, lsr r0
    10e4:	8b080e42 	blhi	2049f4 <__core1_unwind_stub-0xdfb60c>
    10e8:	42018e02 	andmi	r8, r1, #2, 28
    10ec:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
    10f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    10f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10f8:	000010c4 	andeq	r1, r0, r4, asr #1
    10fc:	00000000 	andeq	r0, r0, r0
    1100:	00000090 	muleq	r0, r0, r0
    1104:	8b080e42 	blhi	204a14 <__core1_unwind_stub-0xdfb5ec>
    1108:	42018e02 	andmi	r8, r1, #2, 28
    110c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1110:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
    1114:	0000001c 	andeq	r0, r0, ip, lsl r0
    1118:	000010c4 	andeq	r1, r0, r4, asr #1
    111c:	00000000 	andeq	r0, r0, r0
    1120:	000000b4 	strheq	r0, [r0], -r4
    1124:	8b040e42 	blhi	104a34 <__core1_unwind_stub-0xefb5cc>
    1128:	0b0d4201 	bleq	351934 <__core1_unwind_stub-0xcae6cc>
    112c:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
    1130:	000ecb42 	andeq	ip, lr, r2, asr #22
    1134:	0000002c 	andeq	r0, r0, ip, lsr #32
    1138:	000010c4 	andeq	r1, r0, r4, asr #1
    113c:	00000000 	andeq	r0, r0, r0
    1140:	00000078 	andeq	r0, r0, r8, ror r0
    1144:	82080e42 	andhi	r0, r8, #1056	; 0x420
    1148:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
    114c:	048b100e 	streq	r1, [fp], #14
    1150:	0c42038e 	mcrreq	3, 8, r0, r2, cr14
    1154:	0c700c0b 	ldcleq	12, cr0, [r0], #-44	; 0xffffffd4
    1158:	ce42100d 	cdpgt	0, 4, cr1, cr2, cr13, {0}
    115c:	42080ecb 	andmi	r0, r8, #3248	; 0xcb0
    1160:	000ec2c3 	andeq	ip, lr, r3, asr #5
    1164:	00000030 	andeq	r0, r0, r0, lsr r0
    1168:	000010c4 	andeq	r1, r0, r4, asr #1
    116c:	00000000 	andeq	r0, r0, r0
    1170:	00000068 	andeq	r0, r0, r8, rrx
    1174:	810c0e42 	tsthi	ip, r2, asr #28
    1178:	83028203 	movwhi	r8, #8707	; 0x2203
    117c:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
    1180:	048e058b 	streq	r0, [lr], #1419	; 0x58b
    1184:	100b0c42 	andne	r0, fp, r2, asr #24
    1188:	140d0c68 	strne	r0, [sp], #-3176	; 0xfffff398
    118c:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
    1190:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
    1194:	00000ec1 	andeq	r0, r0, r1, asr #29
    1198:	00000034 	andeq	r0, r0, r4, lsr r0
    119c:	000010c4 	andeq	r1, r0, r4, asr #1
    11a0:	01003988 	smlabbeq	r0, r8, r9, r3
    11a4:	00000050 	andeq	r0, r0, r0, asr r0
    11a8:	80100e42 	andshi	r0, r0, r2, asr #28
    11ac:	82038104 	andhi	r8, r3, #4, 2
    11b0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
    11b4:	068b180e 	streq	r1, [fp], lr, lsl #16
    11b8:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
    11bc:	0c5c140b 	cfldrdeq	mvd1, [ip], {11}
    11c0:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
    11c4:	42100ecb 	andsmi	r0, r0, #3248	; 0xcb0
    11c8:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
    11cc:	0000000e 	andeq	r0, r0, lr
    11d0:	00000030 	andeq	r0, r0, r0, lsr r0
    11d4:	000010c4 	andeq	r1, r0, r4, asr #1
    11d8:	00000000 	andeq	r0, r0, r0
    11dc:	00000048 	andeq	r0, r0, r8, asr #32
    11e0:	810c0e42 	tsthi	ip, r2, asr #28
    11e4:	83028203 	movwhi	r8, #8707	; 0x2203
    11e8:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
    11ec:	048e058b 	streq	r0, [lr], #1419	; 0x58b
    11f0:	100b0c42 	andne	r0, fp, r2, asr #24
    11f4:	140d0c58 	strne	r0, [sp], #-3160	; 0xfffff3a8
    11f8:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
    11fc:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
    1200:	00000ec1 	andeq	r0, r0, r1, asr #29
    1204:	0000001c 	andeq	r0, r0, ip, lsl r0
    1208:	000010c4 	andeq	r1, r0, r4, asr #1
    120c:	010039d8 	ldrdeq	r3, [r0, -r8]
    1210:	0000006c 	andeq	r0, r0, ip, rrx
    1214:	8b080e42 	blhi	204b24 <__core1_unwind_stub-0xdfb4dc>
    1218:	42018e02 	andmi	r8, r1, #2, 28
    121c:	70040b0c 	andvc	r0, r4, ip, lsl #22
    1220:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1224:	0000001c 	andeq	r0, r0, ip, lsl r0
    1228:	000010c4 	andeq	r1, r0, r4, asr #1
    122c:	01003a44 	tsteq	r0, r4, asr #20
    1230:	00000058 	andeq	r0, r0, r8, asr r0
    1234:	8b040e42 	blhi	104b44 <__core1_unwind_stub-0xefb4bc>
    1238:	0b0d4201 	bleq	351a44 <__core1_unwind_stub-0xcae5bc>
    123c:	420d0d64 	andmi	r0, sp, #100, 26	; 0x1900
    1240:	00000ecb 	andeq	r0, r0, fp, asr #29
    1244:	0000001c 	andeq	r0, r0, ip, lsl r0
    1248:	000010c4 	andeq	r1, r0, r4, asr #1
    124c:	01003a9c 			; <UNDEFINED> instruction: 0x01003a9c
    1250:	00000098 	muleq	r0, r8, r0
    1254:	8b080e42 	blhi	204b64 <__core1_unwind_stub-0xdfb49c>
    1258:	42018e02 	andmi	r8, r1, #2, 28
    125c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1260:	080d0c46 	stmdaeq	sp, {r1, r2, r6, sl, fp}
    1264:	0000001c 	andeq	r0, r0, ip, lsl r0
    1268:	000010c4 	andeq	r1, r0, r4, asr #1
    126c:	01003b34 	tsteq	r0, r4, lsr fp
    1270:	0000013c 	andeq	r0, r0, ip, lsr r1
    1274:	8b080e42 	blhi	204b84 <__core1_unwind_stub-0xdfb47c>
    1278:	42018e02 	andmi	r8, r1, #2, 28
    127c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1280:	080d0c98 	stmdaeq	sp, {r3, r4, r7, sl, fp}
    1284:	0000001c 	andeq	r0, r0, ip, lsl r0
    1288:	000010c4 	andeq	r1, r0, r4, asr #1
    128c:	01003c70 	tsteq	r0, r0, ror ip
    1290:	00000178 	andeq	r0, r0, r8, ror r1
    1294:	8b040e42 	blhi	104ba4 <__core1_unwind_stub-0xefb45c>
    1298:	0b0d4201 	bleq	351aa4 <__core1_unwind_stub-0xcae55c>
    129c:	0d0db402 	cfstrseq	mvf11, [sp, #-8]
    12a0:	000ecb42 	andeq	ip, lr, r2, asr #22
    12a4:	00000020 	andeq	r0, r0, r0, lsr #32
    12a8:	000010c4 	andeq	r1, r0, r4, asr #1
    12ac:	01003de8 	smlatteq	r0, r8, sp, r3
    12b0:	0000081c 	andeq	r0, r0, ip, lsl r8
    12b4:	8b080e42 	blhi	204bc4 <__core1_unwind_stub-0xdfb43c>
    12b8:	42018e02 	andmi	r8, r1, #2, 28
    12bc:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    12c0:	0d0c0408 	cfstrseq	mvf0, [ip, #-32]	; 0xffffffe0
    12c4:	00000008 	andeq	r0, r0, r8
    12c8:	00000020 	andeq	r0, r0, r0, lsr #32
    12cc:	000010c4 	andeq	r1, r0, r4, asr #1
    12d0:	01004604 	tsteq	r0, r4, lsl #12
    12d4:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    12d8:	8b080e42 	blhi	204be8 <__core1_unwind_stub-0xdfb418>
    12dc:	42018e02 	andmi	r8, r1, #2, 28
    12e0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    12e4:	0d0c0154 	stfeqs	f0, [ip, #-336]	; 0xfffffeb0
    12e8:	00000008 	andeq	r0, r0, r8
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    12f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1300:	000012ec 	andeq	r1, r0, ip, ror #5
    1304:	010048b8 			; <UNDEFINED> instruction: 0x010048b8
    1308:	00000080 	andeq	r0, r0, r0, lsl #1
    130c:	8b080e42 	blhi	204c1c <__core1_unwind_stub-0xdfb3e4>
    1310:	42018e02 	andmi	r8, r1, #2, 28
    1314:	7a040b0c 	bvc	103f4c <__core1_unwind_stub-0xefc0b4>
    1318:	00080d0c 	andeq	r0, r8, ip, lsl #26
    131c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1320:	000012ec 	andeq	r1, r0, ip, ror #5
    1324:	01004938 	tsteq	r0, r8, lsr r9
    1328:	000000d8 	ldrdeq	r0, [r0], -r8
    132c:	8b080e42 	blhi	204c3c <__core1_unwind_stub-0xdfb3c4>
    1330:	42018e02 	andmi	r8, r1, #2, 28
    1334:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1338:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
    133c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1340:	000012ec 	andeq	r1, r0, ip, ror #5
    1344:	00000000 	andeq	r0, r0, r0
    1348:	0000007c 	andeq	r0, r0, ip, ror r0
    134c:	8b080e42 	blhi	204c5c <__core1_unwind_stub-0xdfb3a4>
    1350:	42018e02 	andmi	r8, r1, #2, 28
    1354:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
    1358:	00080d0c 	andeq	r0, r8, ip, lsl #26
    135c:	0000000c 	andeq	r0, r0, ip
    1360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1364:	7c020001 	stcvc	0, cr0, [r2], {1}
    1368:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    136c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1370:	0000135c 	andeq	r1, r0, ip, asr r3
    1374:	01004a10 	tsteq	r0, r0, lsl sl
    1378:	0000005c 	andeq	r0, r0, ip, asr r0
    137c:	8b040e42 	blhi	104c8c <__core1_unwind_stub-0xefb374>
    1380:	0b0d4201 	bleq	351b8c <__core1_unwind_stub-0xcae474>
    1384:	420d0d66 	andmi	r0, sp, #6528	; 0x1980
    1388:	00000ecb 	andeq	r0, r0, fp, asr #29
    138c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1390:	0000135c 	andeq	r1, r0, ip, asr r3
    1394:	01004a6c 	tsteq	r0, ip, ror #20
    1398:	0000002c 	andeq	r0, r0, ip, lsr #32
    139c:	8b040e42 	blhi	104cac <__core1_unwind_stub-0xefb354>
    13a0:	0b0d4201 	bleq	351bac <__core1_unwind_stub-0xcae454>
    13a4:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
    13a8:	00000ecb 	andeq	r0, r0, fp, asr #29
    13ac:	00000018 	andeq	r0, r0, r8, lsl r0
    13b0:	0000135c 	andeq	r1, r0, ip, asr r3
    13b4:	01004a98 			; <UNDEFINED> instruction: 0x01004a98
    13b8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    13bc:	8b080e42 	blhi	204ccc <__core1_unwind_stub-0xdfb334>
    13c0:	42018e02 	andmi	r8, r1, #2, 28
    13c4:	00040b0c 	andeq	r0, r4, ip, lsl #22
    13c8:	0000000c 	andeq	r0, r0, ip
    13cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    13d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13d8:	00000018 	andeq	r0, r0, r8, lsl r0
    13dc:	000013c8 	andeq	r1, r0, r8, asr #7
    13e0:	01004b48 	tsteq	r0, r8, asr #22
    13e4:	00000050 	andeq	r0, r0, r0, asr r0
    13e8:	8b080e42 	blhi	204cf8 <__core1_unwind_stub-0xdfb308>
    13ec:	42018e02 	andmi	r8, r1, #2, 28
    13f0:	00040b0c 	andeq	r0, r4, ip, lsl #22
    13f4:	0000000c 	andeq	r0, r0, ip
    13f8:	000013c8 	andeq	r1, r0, r8, asr #7
    13fc:	01004b98 			; <UNDEFINED> instruction: 0x01004b98
    1400:	0000000c 	andeq	r0, r0, ip
    1404:	0000000c 	andeq	r0, r0, ip
    1408:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    140c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1410:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1414:	0000001c 	andeq	r0, r0, ip, lsl r0
    1418:	00001404 	andeq	r1, r0, r4, lsl #8
    141c:	01004ba8 	smlatbeq	r0, r8, fp, r4
    1420:	00000074 	andeq	r0, r0, r4, ror r0
    1424:	8b040e42 	blhi	104d34 <__core1_unwind_stub-0xefb2cc>
    1428:	0b0d4201 	bleq	351c34 <__core1_unwind_stub-0xcae3cc>
    142c:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
    1430:	00000ecb 	andeq	r0, r0, fp, asr #29
    1434:	0000001c 	andeq	r0, r0, ip, lsl r0
    1438:	00001404 	andeq	r1, r0, r4, lsl #8
    143c:	01004c1c 	tsteq	r0, ip, lsl ip
    1440:	00000084 	andeq	r0, r0, r4, lsl #1
    1444:	8b040e42 	blhi	104d54 <__core1_unwind_stub-0xefb2ac>
    1448:	0b0d4201 	bleq	351c54 <__core1_unwind_stub-0xcae3ac>
    144c:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
    1450:	00000ecb 	andeq	r0, r0, fp, asr #29
    1454:	0000001c 	andeq	r0, r0, ip, lsl r0
    1458:	00001404 	andeq	r1, r0, r4, lsl #8
    145c:	00000000 	andeq	r0, r0, r0
    1460:	00000108 	andeq	r0, r0, r8, lsl #2
    1464:	8b040e42 	blhi	104d74 <__core1_unwind_stub-0xefb28c>
    1468:	0b0d4201 	bleq	351c74 <__core1_unwind_stub-0xcae38c>
    146c:	0d0d7c02 	stceq	12, cr7, [sp, #-8]
    1470:	000ecb42 	andeq	ip, lr, r2, asr #22
    1474:	0000000c 	andeq	r0, r0, ip
    1478:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    147c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1480:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1484:	0000001c 	andeq	r0, r0, ip, lsl r0
    1488:	00001474 	andeq	r1, r0, r4, ror r4
    148c:	01004ca0 	smlatbeq	r0, r0, ip, r4
    1490:	0000001c 	andeq	r0, r0, ip, lsl r0
    1494:	8b040e42 	blhi	104da4 <__core1_unwind_stub-0xefb25c>
    1498:	0b0d4201 	bleq	351ca4 <__core1_unwind_stub-0xcae35c>
    149c:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
    14a0:	00000ecb 	andeq	r0, r0, fp, asr #29
    14a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14a8:	00001474 	andeq	r1, r0, r4, ror r4
    14ac:	01004cbc 			; <UNDEFINED> instruction: 0x01004cbc
    14b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    14b4:	8b040e42 	blhi	104dc4 <__core1_unwind_stub-0xefb23c>
    14b8:	0b0d4201 	bleq	351cc4 <__core1_unwind_stub-0xcae33c>
    14bc:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
    14c0:	00000ecb 	andeq	r0, r0, fp, asr #29
    14c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14c8:	00001474 	andeq	r1, r0, r4, ror r4
    14cc:	01004cd8 	ldrdeq	r4, [r0, -r8]
    14d0:	00000054 	andeq	r0, r0, r4, asr r0
    14d4:	8b040e42 	blhi	104de4 <__core1_unwind_stub-0xefb21c>
    14d8:	0b0d4201 	bleq	351ce4 <__core1_unwind_stub-0xcae31c>
    14dc:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
    14e0:	00000ecb 	andeq	r0, r0, fp, asr #29
    14e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14e8:	00001474 	andeq	r1, r0, r4, ror r4
    14ec:	01004d2c 	tsteq	r0, ip, lsr #26
    14f0:	0000008c 	andeq	r0, r0, ip, lsl #1
    14f4:	8b080e42 	blhi	204e04 <__core1_unwind_stub-0xdfb1fc>
    14f8:	42018e02 	andmi	r8, r1, #2, 28
    14fc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1500:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
    1504:	0000001c 	andeq	r0, r0, ip, lsl r0
    1508:	00001474 	andeq	r1, r0, r4, ror r4
    150c:	01004db8 			; <UNDEFINED> instruction: 0x01004db8
    1510:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1514:	8b040e42 	blhi	104e24 <__core1_unwind_stub-0xefb1dc>
    1518:	0b0d4201 	bleq	351d24 <__core1_unwind_stub-0xcae2dc>
    151c:	0d0d6002 	stceq	0, cr6, [sp, #-8]
    1520:	000ecb42 	andeq	ip, lr, r2, asr #22
    1524:	0000001c 	andeq	r0, r0, ip, lsl r0
    1528:	00001474 	andeq	r1, r0, r4, ror r4
    152c:	01004e88 	smlabbeq	r0, r8, lr, r4
    1530:	00000118 	andeq	r0, r0, r8, lsl r1
    1534:	8b080e42 	blhi	204e44 <__core1_unwind_stub-0xdfb1bc>
    1538:	42018e02 	andmi	r8, r1, #2, 28
    153c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1540:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
    1544:	0000001c 	andeq	r0, r0, ip, lsl r0
    1548:	00001474 	andeq	r1, r0, r4, ror r4
    154c:	00000000 	andeq	r0, r0, r0
    1550:	0000005c 	andeq	r0, r0, ip, asr r0
    1554:	8b040e42 	blhi	104e64 <__core1_unwind_stub-0xefb19c>
    1558:	0b0d4201 	bleq	351d64 <__core1_unwind_stub-0xcae29c>
    155c:	420d0d66 	andmi	r0, sp, #6528	; 0x1980
    1560:	00000ecb 	andeq	r0, r0, fp, asr #29
    1564:	0000001c 	andeq	r0, r0, ip, lsl r0
    1568:	00001474 	andeq	r1, r0, r4, ror r4
    156c:	01004fa0 	smlatbeq	r0, r0, pc, r4	; <UNPREDICTABLE>
    1570:	0000003c 	andeq	r0, r0, ip, lsr r0
    1574:	8b080e42 	blhi	204e84 <__core1_unwind_stub-0xdfb17c>
    1578:	42018e02 	andmi	r8, r1, #2, 28
    157c:	58040b0c 	stmdapl	r4, {r2, r3, r8, r9, fp}
    1580:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1584:	0000001c 	andeq	r0, r0, ip, lsl r0
    1588:	00001474 	andeq	r1, r0, r4, ror r4
    158c:	00000000 	andeq	r0, r0, r0
    1590:	00000030 	andeq	r0, r0, r0, lsr r0
    1594:	8b080e42 	blhi	204ea4 <__core1_unwind_stub-0xdfb15c>
    1598:	42018e02 	andmi	r8, r1, #2, 28
    159c:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
    15a0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    15a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15a8:	00001474 	andeq	r1, r0, r4, ror r4
    15ac:	00000000 	andeq	r0, r0, r0
    15b0:	000000dc 	ldrdeq	r0, [r0], -ip
    15b4:	8b080e42 	blhi	204ec4 <__core1_unwind_stub-0xdfb13c>
    15b8:	42018e02 	andmi	r8, r1, #2, 28
    15bc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    15c0:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
    15c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15c8:	00001474 	andeq	r1, r0, r4, ror r4
    15cc:	00000000 	andeq	r0, r0, r0
    15d0:	00000090 	muleq	r0, r0, r0
    15d4:	8b080e42 	blhi	204ee4 <__core1_unwind_stub-0xdfb11c>
    15d8:	42018e02 	andmi	r8, r1, #2, 28
    15dc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    15e0:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
    15e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15e8:	00001474 	andeq	r1, r0, r4, ror r4
    15ec:	00000000 	andeq	r0, r0, r0
    15f0:	00000084 	andeq	r0, r0, r4, lsl #1
    15f4:	8b080e42 	blhi	204f04 <__core1_unwind_stub-0xdfb0fc>
    15f8:	42018e02 	andmi	r8, r1, #2, 28
    15fc:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
    1600:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1604:	0000001c 	andeq	r0, r0, ip, lsl r0
    1608:	00001474 	andeq	r1, r0, r4, ror r4
    160c:	00000000 	andeq	r0, r0, r0
    1610:	00000028 	andeq	r0, r0, r8, lsr #32
    1614:	8b040e42 	blhi	104f24 <__core1_unwind_stub-0xefb0dc>
    1618:	0b0d4201 	bleq	351e24 <__core1_unwind_stub-0xcae1dc>
    161c:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
    1620:	00000ecb 	andeq	r0, r0, fp, asr #29
    1624:	0000001c 	andeq	r0, r0, ip, lsl r0
    1628:	00001474 	andeq	r1, r0, r4, ror r4
    162c:	00000000 	andeq	r0, r0, r0
    1630:	000000ec 	andeq	r0, r0, ip, ror #1
    1634:	8b080e42 	blhi	204f44 <__core1_unwind_stub-0xdfb0bc>
    1638:	42018e02 	andmi	r8, r1, #2, 28
    163c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1640:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
    1644:	0000001c 	andeq	r0, r0, ip, lsl r0
    1648:	00001474 	andeq	r1, r0, r4, ror r4
    164c:	00000000 	andeq	r0, r0, r0
    1650:	0000006c 	andeq	r0, r0, ip, rrx
    1654:	8b080e42 	blhi	204f64 <__core1_unwind_stub-0xdfb09c>
    1658:	42018e02 	andmi	r8, r1, #2, 28
    165c:	70040b0c 	andvc	r0, r4, ip, lsl #22
    1660:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1664:	0000001c 	andeq	r0, r0, ip, lsl r0
    1668:	00001474 	andeq	r1, r0, r4, ror r4
    166c:	00000000 	andeq	r0, r0, r0
    1670:	00000044 	andeq	r0, r0, r4, asr #32
    1674:	8b040e42 	blhi	104f84 <__core1_unwind_stub-0xefb07c>
    1678:	0b0d4201 	bleq	351e84 <__core1_unwind_stub-0xcae17c>
    167c:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
    1680:	00000ecb 	andeq	r0, r0, fp, asr #29
    1684:	0000001c 	andeq	r0, r0, ip, lsl r0
    1688:	00001474 	andeq	r1, r0, r4, ror r4
    168c:	00000000 	andeq	r0, r0, r0
    1690:	00000088 	andeq	r0, r0, r8, lsl #1
    1694:	8b040e42 	blhi	104fa4 <__core1_unwind_stub-0xefb05c>
    1698:	0b0d4201 	bleq	351ea4 <__core1_unwind_stub-0xcae15c>
    169c:	420d0d7c 	andmi	r0, sp, #124, 26	; 0x1f00
    16a0:	00000ecb 	andeq	r0, r0, fp, asr #29
    16a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16a8:	00001474 	andeq	r1, r0, r4, ror r4
    16ac:	00000000 	andeq	r0, r0, r0
    16b0:	0000006c 	andeq	r0, r0, ip, rrx
    16b4:	8b080e42 	blhi	204fc4 <__core1_unwind_stub-0xdfb03c>
    16b8:	42018e02 	andmi	r8, r1, #2, 28
    16bc:	70040b0c 	andvc	r0, r4, ip, lsl #22
    16c0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    16c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16c8:	00001474 	andeq	r1, r0, r4, ror r4
    16cc:	00000000 	andeq	r0, r0, r0
    16d0:	00000188 	andeq	r0, r0, r8, lsl #3
    16d4:	8b080e42 	blhi	204fe4 <__core1_unwind_stub-0xdfb01c>
    16d8:	42018e02 	andmi	r8, r1, #2, 28
    16dc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    16e0:	080d0cbe 	stmdaeq	sp, {r1, r2, r3, r4, r5, r7, sl, fp}
    16e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16e8:	00001474 	andeq	r1, r0, r4, ror r4
    16ec:	00000000 	andeq	r0, r0, r0
    16f0:	000000ac 	andeq	r0, r0, ip, lsr #1
    16f4:	8b040e42 	blhi	105004 <__core1_unwind_stub-0xefaffc>
    16f8:	0b0d4201 	bleq	351f04 <__core1_unwind_stub-0xcae0fc>
    16fc:	0d0d4e02 	stceq	14, cr4, [sp, #-8]
    1700:	000ecb42 	andeq	ip, lr, r2, asr #22
    1704:	0000000c 	andeq	r0, r0, ip
    1708:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    170c:	7c010001 	stcvc	0, cr0, [r1], {1}
    1710:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1714:	0000000c 	andeq	r0, r0, ip
    1718:	00001704 	andeq	r1, r0, r4, lsl #14
    171c:	01004fdc 	ldrdeq	r4, [r0, -ip]
    1720:	000000f4 	strdeq	r0, [r0], -r4
    1724:	0000000c 	andeq	r0, r0, ip
    1728:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    172c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1730:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1734:	00000018 	andeq	r0, r0, r8, lsl r0
    1738:	00001724 	andeq	r1, r0, r4, lsr #14
    173c:	010050f4 	strdeq	r5, [r0, -r4]
    1740:	0000003c 	andeq	r0, r0, ip, lsr r0
    1744:	8e100e54 	mrchi	14, 0, r0, cr0, cr4, {2}
    1748:	0ece4803 	cdpeq	8, 12, cr4, cr14, cr3, {0}
    174c:	00000010 	andeq	r0, r0, r0, lsl r0
    1750:	0000000c 	andeq	r0, r0, ip
    1754:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1758:	7c020001 	stcvc	0, cr0, [r2], {1}
    175c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1760:	0000002c 	andeq	r0, r0, ip, lsr #32
    1764:	00001750 	andeq	r1, r0, r0, asr r7
    1768:	01005130 	tsteq	r0, r0, lsr r1
    176c:	00000130 	andeq	r0, r0, r0, lsr r1
    1770:	84200e46 	strthi	r0, [r0], #-3654	; 0xfffff1ba
    1774:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1778:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    177c:	8a038904 	bhi	e3b94 <__core1_unwind_stub-0xf1c46c>
    1780:	02018e02 	andeq	r8, r1, #2, 28
    1784:	c9cace90 	stmibgt	sl, {r4, r7, r9, sl, fp, lr, pc}^
    1788:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
    178c:	00000ec4 	andeq	r0, r0, r4, asr #29

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	...
{
   8:	00000014 	andeq	r0, r0, r4, lsl r0
   c:	93500006 	cmpls	r0, #6
    UART_INFO_t *p_uart = (UART_INFO_t *) op;
  10:	04935104 	ldreq	r5, [r3], #260	; 0x104
  14:	00000014 	andeq	r0, r0, r4, lsl r0
    ALT_PRINTF("\n");
  18:	00000130 	andeq	r0, r0, r0, lsr r1
  1c:	03f30006 	mvnseq	r0, #6
  20:	9f2500f5 	svcls	0x002500f5
	...
        alt_16550_line_status_get(&p_uart->mUart, &line_status);
  34:	00000037 	andeq	r0, r0, r7, lsr r0
  38:	93520006 	cmpls	r2, #6
    } while ((line_status & ALT_16550_LINE_STATUS_TEMT) == 0);
  3c:	04935304 	ldreq	r5, [r3], #772	; 0x304
  40:	00000037 	andeq	r0, r0, r7, lsr r0
  44:	00000130 	andeq	r0, r0, r0, lsr r1
  48:	03f30006 	mvnseq	r0, #6
    alt_clrbits_word(ALT_UART_IER_DLH_ADDR(p_uart->mUart.location), ALT_UART_IER_DLH_PTIME_DLH7_SET_MSK);
  4c:	9f2502f5 	svcls	0x002502f5
	...
  58:	00000002 	andeq	r0, r0, r2
	...
  64:	00000090 	muleq	r0, r0, r0
  68:	089e000a 	ldmeq	lr, {r1, r3}
	...
}
  74:	00000090 	muleq	r0, r0, r0
  78:	000000f8 	strdeq	r0, [r0], -r8
    if ((pmem->toptr == pmem->maxptr) && (pmem->maxptr!=NULL))
  7c:	93500006 	cmpls	r0, #6
  80:	04935104 	ldreq	r5, [r3], #260	; 0x104
  84:	00000104 	andeq	r0, r0, r4, lsl #2
  88:	00000118 	andeq	r0, r0, r8, lsl r1
  8c:	93500006 	cmpls	r0, #6
  90:	04935104 	ldreq	r5, [r3], #260	; 0x104
      *(pmem->toptr)=0;
  94:	00000120 	andeq	r0, r0, r0, lsr #2
  98:	00000130 	andeq	r0, r0, r0, lsr r1
  9c:	93500006 	cmpls	r0, #6
  a0:	04935104 	ldreq	r5, [r3], #260	; 0x104
	...
        alt_write_word(ALT_UART_FCR_ADDR(handle->location), handle->fcr);
  b4:	00180000 	andseq	r0, r8, r0
  b8:	00800000 	addeq	r0, r0, r0
        break;
  bc:	00060000 	andeq	r0, r6, r0
    return ALT_E_SUCCESS;
  c0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  c4:	008c0493 	umulleq	r0, ip, r3, r4
        return ALT_E_ERROR;
  c8:	00c00000 	sbceq	r0, r0, r0
}
  cc:	00060000 	andeq	r0, r6, r0
  d0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  d4:	00c40493 	smulleq	r0, r4, r3, r4
  d8:	00dc0000 	sbcseq	r0, ip, r0
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  dc:	00060000 	andeq	r0, r6, r0
  e0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  e4:	00e00493 	smlaleq	r0, r0, r3, r4	; <UNPREDICTABLE>
  e8:	00fc0000 	rscseq	r0, ip, r0
  ec:	00060000 	andeq	r0, r6, r0
  f0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
    return dst;
  f4:	01080493 			; <UNDEFINED> instruction: 0x01080493
}
  f8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
  fc:	00060000 	andeq	r0, r6, r0
 100:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
 104:	00000493 	muleq	r0, r3, r4
	...
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
 110:	00680000 	rsbeq	r0, r8, r0
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
 114:	00a80000 	adceq	r0, r8, r0
 118:	00060000 	andeq	r0, r6, r0
 11c:	53049352 	movwpl	r9, #17234	; 0x4352
 120:	00a80493 	umlaleq	r0, r8, r3, r4
 124:	01200000 			; <UNDEFINED> instruction: 0x01200000
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 128:	00060000 	andeq	r0, r6, r0
 12c:	57049356 	smlsdpl	r4, r6, r3, r9
 130:	00000493 	muleq	r0, r3, r4
	...
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	00400000 	subeq	r0, r0, r0
 140:	00440000 	subeq	r0, r4, r0
 144:	00010000 	andeq	r0, r1, r0
 148:	00004450 	andeq	r4, r0, r0, asr r4
 14c:	00005000 	andeq	r5, r0, r0
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 150:	59000100 	stmdbpl	r0, {r8}
	...
 15c:	00480000 	subeq	r0, r8, r0
 160:	00700000 	rsbseq	r0, r0, r0
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	00010000 	andeq	r0, r1, r0
 168:	00000050 	andeq	r0, r0, r0, asr r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	01010100 	mrseq	r0, (UNDEF: 17)
 174:	01010000 	mrseq	r0, (UNDEF: 1)
    return ALT_E_SUCCESS;
 178:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
}
 17c:	c4000000 	strgt	r0, [r0], #-0
 180:	01000000 	mrseq	r0, (UNDEF: 0)
 184:	00c45e00 	sbceq	r5, r4, r0, lsl #28
    while (coalesce->size)
 188:	00c80000 	sbceq	r0, r8, r0
 18c:	00030000 	andeq	r0, r3, r0
            break;
 190:	c89f7f7e 	ldmgt	pc, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    *segpa   = thissegpa;
 194:	e0000000 	and	r0, r0, r0
 198:	01000000 	mrseq	r0, (UNDEF: 0)
 19c:	00e05e00 	rsceq	r5, r0, r0, lsl #28
    *segsize = thissegsize;
 1a0:	00e40000 	rsceq	r0, r4, r0
 1a4:	00030000 	andeq	r0, r3, r0
 1a8:	e49f7f7e 	ldr	r7, [pc], #3966	; 1b0 <__core1_unwind_stub-0xfffe50>
    return ALT_E_SUCCESS;
 1ac:	20000000 	andcs	r0, r0, r0
}
 1b0:	01000001 	tsteq	r0, r1
 1b4:	00005e00 	andeq	r5, r0, r0, lsl #28
	...
  if(cfg->mainpll.vco1_numer + 1 > (clk100 * 9)>>16) /* Are we going to a value > 1.2 GHz? */
 1c0:	004c0000 	subeq	r0, ip, r0
 1c4:	01140000 	tsteq	r4, r0
 1c8:	00010000 	andeq	r0, r1, r0
 1cc:	0001145c 	andeq	r1, r1, ip, asr r4
    clkStep = 9 * clk100; /* 900MHz */
 1d0:	00012000 	andeq	r2, r1, r0
 1d4:	79000300 	stmdbvc	r0, {r8, r9}
 1d8:	00009f20 	andeq	r9, r0, r0, lsr #30
 1dc:	00000000 	andeq	r0, r0, r0
	...


app_core1.axf:     file format elf32-littlearm


Disassembly of section .text:

01000000 <__core1_unwind_stub>:
    .global __core1_unwind_stub
    .type   __core1_unwind_stub, %function
    .hidden __core1_unwind_stub
__core1_unwind_stub:
    .fnstart
    bx      lr
 1000000:	e12fff1e 	bx	lr

01000004 <null_printf>:
#endif

extern FILE *term0;
extern FILE *term1;

static __inline int null_printf(__attribute__ ((unused))const char *format, ...){return 0;}
 1000004:	e92d000f 	push	{r0, r1, r2, r3}
 1000008:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 100000c:	e28db000 	add	fp, sp, #0
 1000010:	e3a03000 	mov	r3, #0
 1000014:	e1a00003 	mov	r0, r3
 1000018:	e28bd000 	add	sp, fp, #0
 100001c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000020:	e28dd010 	add	sp, sp, #16
 1000024:	e12fff1e 	bx	lr

01000028 <alt_mmu_init>:
    __asm("MCR p15, 0, %0,       c2, c0, 1" : : "r" (ttbr1));
#endif
}

ALT_STATUS_CODE alt_mmu_init(void)
{
 1000028:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 100002c:	e28db000 	add	fp, sp, #0
    return ALT_E_SUCCESS;
 1000030:	e3a03000 	mov	r3, #0
}
 1000034:	e1a00003 	mov	r0, r3
 1000038:	e28bd000 	add	sp, fp, #0
 100003c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000040:	e12fff1e 	bx	lr

01000044 <alt_mmu_ttb1_init>:
{
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_ttb1_init(uint32_t* ttb1)
{
 1000044:	e92d4800 	push	{fp, lr}
 1000048:	e28db004 	add	fp, sp, #4
 100004c:	e24dd018 	sub	sp, sp, #24
 1000050:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
 1000054:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
 1000058:	e50b3010 	str	r3, [fp, #-16]
    return ttbcr;
 100005c:	e51b3010 	ldr	r3, [fp, #-16]
    uint32_t ttbcr = ttbcr_get_helper();
 1000060:	e50b3008 	str	r3, [fp, #-8]
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
 1000064:	e51b3008 	ldr	r3, [fp, #-8]
 1000068:	e2033007 	and	r3, r3, #7
 100006c:	e50b300c 	str	r3, [fp, #-12]

    /* Verify ttb1 buffer alignment. */
    if ((uintptr_t)ttb1 & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
 1000070:	e51b300c 	ldr	r3, [fp, #-12]
 1000074:	e2833012 	add	r3, r3, #18
 1000078:	e3a02001 	mov	r2, #1
 100007c:	e1a03312 	lsl	r3, r2, r3
 1000080:	e2432001 	sub	r2, r3, #1
 1000084:	e51b300c 	ldr	r3, [fp, #-12]
 1000088:	e263300e 	rsb	r3, r3, #14
 100008c:	e1a03312 	lsl	r3, r2, r3
 1000090:	e1e03003 	mvn	r3, r3
 1000094:	e1a02003 	mov	r2, r3
 1000098:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100009c:	e0033002 	and	r3, r3, r2
 10000a0:	e3530000 	cmp	r3, #0
 10000a4:	0a000001 	beq	10000b0 <alt_mmu_ttb1_init+0x6c>
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
 10000a8:	e3e03008 	mvn	r3, #8
 10000ac:	ea000004 	b	10000c4 <alt_mmu_ttb1_init+0x80>

    /* The TTB1 size really depends on TTBCR.N value and if it will be used for
     / TTBR0 or TTBR1. The documentation just states that it should be 16 KiB.
     / See ARMv7-A,R, section B3.5.4. */

    memset(ttb1, 0, ALT_MMU_TTB1_SIZE);
 10000b0:	e3a02901 	mov	r2, #16384	; 0x4000
 10000b4:	e3a01000 	mov	r1, #0
 10000b8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10000bc:	eb000729 	bl	1001d68 <memset>

    return ALT_E_SUCCESS;
 10000c0:	e3a03000 	mov	r3, #0
}
 10000c4:	e1a00003 	mov	r0, r3
 10000c8:	e24bd004 	sub	sp, fp, #4
 10000cc:	e8bd8800 	pop	{fp, pc}

010000d0 <alt_mmu_enable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_enable(void)
{
 10000d0:	e92d4800 	push	{fp, lr}
 10000d4:	e28db004 	add	fp, sp, #4
 10000d8:	e24dd010 	sub	sp, sp, #16
    uint32_t sctlr;
    alt_mmu_tlb_invalidate();
 10000dc:	eb0000ac 	bl	1000394 <alt_mmu_tlb_invalidate>
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
 10000e0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
 10000e4:	e50b3010 	str	r3, [fp, #-16]
    return sctlr;
 10000e8:	e51b3010 	ldr	r3, [fp, #-16]

    sctlr = sctlr_get_helper();
 10000ec:	e50b3008 	str	r3, [fp, #-8]
    sctlr |= ALT_CPU_SCTLR_M_SET_MSK;
 10000f0:	e51b3008 	ldr	r3, [fp, #-8]
 10000f4:	e3833001 	orr	r3, r3, #1
 10000f8:	e50b3008 	str	r3, [fp, #-8]
 10000fc:	e51b3008 	ldr	r3, [fp, #-8]
 1000100:	e50b300c 	str	r3, [fp, #-12]
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
 1000104:	e51b300c 	ldr	r3, [fp, #-12]
 1000108:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
}
 100010c:	e320f000 	nop	{0}
    sctlr_set_helper(sctlr);

    return ALT_E_SUCCESS;
 1000110:	e3a03000 	mov	r3, #0
}
 1000114:	e1a00003 	mov	r0, r3
 1000118:	e24bd004 	sub	sp, fp, #4
 100011c:	e8bd8800 	pop	{fp, pc}

01000120 <alt_mmu_TTBR0_set>:

    return (void *)(ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n) & ttbr0);
}

ALT_STATUS_CODE alt_mmu_TTBR0_set(const void* addr)
{
 1000120:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000124:	e28db000 	add	fp, sp, #0
 1000128:	e24dd024 	sub	sp, sp, #36	; 0x24
 100012c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
 1000130:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
 1000134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return ttbcr;
 1000138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    uint32_t ttbcr = ttbcr_get_helper();
 100013c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
 1000140:	e51b3008 	ldr	r3, [fp, #-8]
 1000144:	e2033007 	and	r3, r3, #7
 1000148:	e50b300c 	str	r3, [fp, #-12]
    uint32_t ttbr0; 

    if ((uintptr_t)addr & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
 100014c:	e51b300c 	ldr	r3, [fp, #-12]
 1000150:	e2833012 	add	r3, r3, #18
 1000154:	e3a02001 	mov	r2, #1
 1000158:	e1a03312 	lsl	r3, r2, r3
 100015c:	e2432001 	sub	r2, r3, #1
 1000160:	e51b300c 	ldr	r3, [fp, #-12]
 1000164:	e263300e 	rsb	r3, r3, #14
 1000168:	e1a03312 	lsl	r3, r2, r3
 100016c:	e1e03003 	mvn	r3, r3
 1000170:	e1a02003 	mov	r2, r3
 1000174:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1000178:	e0033002 	and	r3, r3, r2
 100017c:	e3530000 	cmp	r3, #0
 1000180:	0a000001 	beq	100018c <alt_mmu_TTBR0_set+0x6c>
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
 1000184:	e3e03008 	mvn	r3, #8
 1000188:	ea000018 	b	10001f0 <alt_mmu_TTBR0_set+0xd0>
    }

    /* The Translation table must reside in Normal Memory, so pick the most
     / performant attributes. */
    ttbr0 =   ALT_CPU_TTBR0_RGN_WBA   /* Translation table is WBA for outer cacheability */
 100018c:	e3a03048 	mov	r3, #72	; 0x48
 1000190:	e50b3010 	str	r3, [fp, #-16]
              | ALT_CPU_TTBR0_IRGN_WBA; /* Translation table is WBA for inner cacheability */
    ttbr0 &= ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n);
 1000194:	e51b300c 	ldr	r3, [fp, #-12]
 1000198:	e2833012 	add	r3, r3, #18
 100019c:	e3a02001 	mov	r2, #1
 10001a0:	e1a03312 	lsl	r3, r2, r3
 10001a4:	e2432001 	sub	r2, r3, #1
 10001a8:	e51b300c 	ldr	r3, [fp, #-12]
 10001ac:	e263300e 	rsb	r3, r3, #14
 10001b0:	e1a03312 	lsl	r3, r2, r3
 10001b4:	e1e03003 	mvn	r3, r3
 10001b8:	e1a02003 	mov	r2, r3
 10001bc:	e51b3010 	ldr	r3, [fp, #-16]
 10001c0:	e0033002 	and	r3, r3, r2
 10001c4:	e50b3010 	str	r3, [fp, #-16]
    ttbr0 |= (uint32_t)addr;
 10001c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10001cc:	e51b2010 	ldr	r2, [fp, #-16]
 10001d0:	e1823003 	orr	r3, r2, r3
 10001d4:	e50b3010 	str	r3, [fp, #-16]
 10001d8:	e51b3010 	ldr	r3, [fp, #-16]
 10001dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    __asm("MCR p15, 0, %0,       c2, c0, 0" : : "r" (ttbr0));
 10001e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10001e4:	ee023f10 	mcr	15, 0, r3, cr2, cr0, {0}
}
 10001e8:	e320f000 	nop	{0}

    ttbr0_set_helper(ttbr0);

    return ALT_E_SUCCESS;
 10001ec:	e3a03000 	mov	r3, #0
}
 10001f0:	e1a00003 	mov	r0, r3
 10001f4:	e28bd000 	add	sp, fp, #0
 10001f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10001fc:	e12fff1e 	bx	lr

01000200 <alt_mmu_TTBCR_set>:
}

ALT_STATUS_CODE alt_mmu_TTBCR_set(const bool enable_ttbr0_walk,
                                  const bool enable_ttbr1_walk,
                                  const uint32_t base_addr_width)
{
 1000200:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000204:	e28db000 	add	fp, sp, #0
 1000208:	e24dd014 	sub	sp, sp, #20
 100020c:	e1a03000 	mov	r3, r0
 1000210:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
 1000214:	e54b300d 	strb	r3, [fp, #-13]
 1000218:	e1a03001 	mov	r3, r1
 100021c:	e54b300e 	strb	r3, [fp, #-14]
    uint32_t ttbcr = 0;
 1000220:	e3a03000 	mov	r3, #0
 1000224:	e50b3008 	str	r3, [fp, #-8]

    if (!enable_ttbr0_walk)
 1000228:	e55b300d 	ldrb	r3, [fp, #-13]
 100022c:	e2233001 	eor	r3, r3, #1
 1000230:	e6ef3073 	uxtb	r3, r3
 1000234:	e3530000 	cmp	r3, #0
 1000238:	0a000002 	beq	1000248 <alt_mmu_TTBCR_set+0x48>
    {
        ttbcr |= ALT_CPU_TTBCR_PD0_SET_MSK;
 100023c:	e51b3008 	ldr	r3, [fp, #-8]
 1000240:	e3833010 	orr	r3, r3, #16
 1000244:	e50b3008 	str	r3, [fp, #-8]
    }

    if (!enable_ttbr1_walk)
 1000248:	e55b300e 	ldrb	r3, [fp, #-14]
 100024c:	e2233001 	eor	r3, r3, #1
 1000250:	e6ef3073 	uxtb	r3, r3
 1000254:	e3530000 	cmp	r3, #0
 1000258:	0a000002 	beq	1000268 <alt_mmu_TTBCR_set+0x68>
    {
        ttbcr |= ALT_CPU_TTBCR_PD1_SET_MSK;
 100025c:	e51b3008 	ldr	r3, [fp, #-8]
 1000260:	e3833020 	orr	r3, r3, #32
 1000264:	e50b3008 	str	r3, [fp, #-8]
    }

    if (base_addr_width > 7)
 1000268:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100026c:	e3530007 	cmp	r3, #7
 1000270:	9a000001 	bls	100027c <alt_mmu_TTBCR_set+0x7c>
    {
        return ALT_E_BAD_ARG;
 1000274:	e3e03008 	mvn	r3, #8
 1000278:	ea000009 	b	10002a4 <alt_mmu_TTBCR_set+0xa4>
    }

    ttbcr |= base_addr_width;
 100027c:	e51b2008 	ldr	r2, [fp, #-8]
 1000280:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1000284:	e1823003 	orr	r3, r2, r3
 1000288:	e50b3008 	str	r3, [fp, #-8]
 100028c:	e51b3008 	ldr	r3, [fp, #-8]
 1000290:	e50b300c 	str	r3, [fp, #-12]
    __asm("MCR p15, 0, %0,       c2, c0, 2" : : "r" (ttbcr));
 1000294:	e51b300c 	ldr	r3, [fp, #-12]
 1000298:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
}
 100029c:	e320f000 	nop	{0}

    ttbcr_set_helper(ttbcr);

    return ALT_E_SUCCESS;
 10002a0:	e3a03000 	mov	r3, #0
}
 10002a4:	e1a00003 	mov	r0, r3
 10002a8:	e28bd000 	add	sp, fp, #0
 10002ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10002b0:	e12fff1e 	bx	lr

010002b4 <alt_mmu_DACR_set>:

ALT_STATUS_CODE alt_mmu_DACR_set(const ALT_MMU_DAP_t domain_ap[],
                                 const size_t num_elem)
{
 10002b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10002b8:	e28db000 	add	fp, sp, #0
 10002bc:	e24dd01c 	sub	sp, sp, #28
 10002c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 10002c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t dacr = 0;
 10002c8:	e3a03000 	mov	r3, #0
 10002cc:	e50b3008 	str	r3, [fp, #-8]
    uint32_t i;

    if (num_elem > 16)
 10002d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10002d4:	e3530010 	cmp	r3, #16
 10002d8:	9a000001 	bls	10002e4 <alt_mmu_DACR_set+0x30>
    {
        return ALT_E_BAD_ARG;
 10002dc:	e3e03008 	mvn	r3, #8
 10002e0:	ea000027 	b	1000384 <alt_mmu_DACR_set+0xd0>
    }

    for (i = 0; i < num_elem; ++i)
 10002e4:	e3a03000 	mov	r3, #0
 10002e8:	e50b300c 	str	r3, [fp, #-12]
 10002ec:	ea00001a 	b	100035c <alt_mmu_DACR_set+0xa8>
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
 10002f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 10002f4:	e51b300c 	ldr	r3, [fp, #-12]
 10002f8:	e0823003 	add	r3, r2, r3
 10002fc:	e5d33000 	ldrb	r3, [r3]
 1000300:	e54b300d 	strb	r3, [fp, #-13]

        switch (ap)
 1000304:	e55b300d 	ldrb	r3, [fp, #-13]
 1000308:	e3530001 	cmp	r3, #1
 100030c:	ca000002 	bgt	100031c <alt_mmu_DACR_set+0x68>
 1000310:	e3530000 	cmp	r3, #0
 1000314:	aa000002 	bge	1000324 <alt_mmu_DACR_set+0x70>
 1000318:	ea00000a 	b	1000348 <alt_mmu_DACR_set+0x94>
 100031c:	e3530003 	cmp	r3, #3
 1000320:	1a000008 	bne	1000348 <alt_mmu_DACR_set+0x94>
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
 1000324:	e55b200d 	ldrb	r2, [fp, #-13]
 1000328:	e51b300c 	ldr	r3, [fp, #-12]
 100032c:	e1a03083 	lsl	r3, r3, #1
 1000330:	e1a03312 	lsl	r3, r2, r3
 1000334:	e1a02003 	mov	r2, r3
 1000338:	e51b3008 	ldr	r3, [fp, #-8]
 100033c:	e1833002 	orr	r3, r3, r2
 1000340:	e50b3008 	str	r3, [fp, #-8]
            break;
 1000344:	ea000001 	b	1000350 <alt_mmu_DACR_set+0x9c>
        default:
        case ALT_MMU_DAP_RESERVED:
            return ALT_E_BAD_ARG;
 1000348:	e3e03008 	mvn	r3, #8
 100034c:	ea00000c 	b	1000384 <alt_mmu_DACR_set+0xd0>
    for (i = 0; i < num_elem; ++i)
 1000350:	e51b300c 	ldr	r3, [fp, #-12]
 1000354:	e2833001 	add	r3, r3, #1
 1000358:	e50b300c 	str	r3, [fp, #-12]
 100035c:	e51b200c 	ldr	r2, [fp, #-12]
 1000360:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000364:	e1520003 	cmp	r2, r3
 1000368:	3affffe0 	bcc	10002f0 <alt_mmu_DACR_set+0x3c>
 100036c:	e51b3008 	ldr	r3, [fp, #-8]
 1000370:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    __asm("MCR p15, 0, %0,      c3, c0, 0" : : "r" (dacr));
 1000374:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1000378:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
}
 100037c:	e320f000 	nop	{0}
        }
    }

    dacr_set_helper(dacr);

    return ALT_E_SUCCESS;
 1000380:	e3a03000 	mov	r3, #0
}
 1000384:	e1a00003 	mov	r0, r3
 1000388:	e28bd000 	add	sp, fp, #0
 100038c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000390:	e12fff1e 	bx	lr

01000394 <alt_mmu_tlb_invalidate>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_tlb_invalidate(void)
{
 1000394:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000398:	e28db000 	add	fp, sp, #0
 100039c:	e24dd00c 	sub	sp, sp, #12
    /* Issue TLBIALL (TLB Invalidate All)
     / See ARMv7-A,R, section B4.1.135. */

    uint32_t dummy = 0;
 10003a0:	e3a03000 	mov	r3, #0
 10003a4:	e50b3008 	str	r3, [fp, #-8]
#if   defined(__ARMCOMPILER_VERSION)
    __asm("MCR p15, 0, %[dummy], c8, c3, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c8, c3, 0");
#else
    __asm("MCR p15, 0, %0,       c8, c3, 0" : : "r" (dummy));
 10003a8:	e51b3008 	ldr	r3, [fp, #-8]
 10003ac:	ee083f13 	mcr	15, 0, r3, cr8, cr3, {0}
#endif

    /* Ensure all TLB maintenance operations complete before returning. */
    __asm("dsb");
 10003b0:	f57ff04f 	dsb	sy

    return ALT_E_SUCCESS;
 10003b4:	e3a03000 	mov	r3, #0
}
 10003b8:	e1a00003 	mov	r0, r3
 10003bc:	e28bd000 	add	sp, fp, #0
 10003c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 10003c4:	e12fff1e 	bx	lr

010003c8 <alt_vregion_mark_pagetable>:
#define ALT_VREGION_1MIB         (2)                              /* 2 */
#define ALT_VREGION_PAGETABLE_S  ((int)ALT_MMU_TTB_NS_SECURE)     /* 0 */
#define ALT_VREGION_PAGETABLE_NS ((int)ALT_MMU_TTB_NS_NON_SECURE) /* 1 */

static ALT_STATUS_CODE alt_vregion_mark_pagetable(char * vregion, ALT_MMU_TTB_NS_t security)
{
 10003c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10003cc:	e28db000 	add	fp, sp, #0
 10003d0:	e24dd00c 	sub	sp, sp, #12
 10003d4:	e50b0008 	str	r0, [fp, #-8]
 10003d8:	e1a03001 	mov	r3, r1
 10003dc:	e54b3009 	strb	r3, [fp, #-9]
    if (*vregion == ALT_VREGION_1MIB)
 10003e0:	e51b3008 	ldr	r3, [fp, #-8]
 10003e4:	e5d33000 	ldrb	r3, [r3]
 10003e8:	e3530002 	cmp	r3, #2
 10003ec:	1a000003 	bne	1000400 <alt_vregion_mark_pagetable+0x38>
    {
        *vregion = (int)security;
 10003f0:	e51b3008 	ldr	r3, [fp, #-8]
 10003f4:	e55b2009 	ldrb	r2, [fp, #-9]
 10003f8:	e5c32000 	strb	r2, [r3]
 10003fc:	ea000006 	b	100041c <alt_vregion_mark_pagetable+0x54>
    }
    else if (*vregion != (int)security)
 1000400:	e51b3008 	ldr	r3, [fp, #-8]
 1000404:	e5d33000 	ldrb	r3, [r3]
 1000408:	e55b2009 	ldrb	r2, [fp, #-9]
 100040c:	e1520003 	cmp	r2, r3
 1000410:	0a000001 	beq	100041c <alt_vregion_mark_pagetable+0x54>
    {
        return ALT_E_ERROR;
 1000414:	e3e03000 	mvn	r3, #0
 1000418:	ea000000 	b	1000420 <alt_vregion_mark_pagetable+0x58>
    }

    return ALT_E_SUCCESS;
 100041c:	e3a03000 	mov	r3, #0
}
 1000420:	e1a00003 	mov	r0, r3
 1000424:	e28bd000 	add	sp, fp, #0
 1000428:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100042c:	e12fff1e 	bx	lr

01000430 <alt_mmu_va_space_storage_required_internal>:

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
                                                         const size_t num_mem_regions,
                                                         char * vregion)
{
 1000430:	e92d4800 	push	{fp, lr}
 1000434:	e28db004 	add	fp, sp, #4
 1000438:	e24dd030 	sub	sp, sp, #48	; 0x30
 100043c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
 1000440:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
 1000444:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    size_t reqsize;
    uint32_t i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 1000448:	e3a03000 	mov	r3, #0
 100044c:	e50b300c 	str	r3, [fp, #-12]
 1000450:	ea000007 	b	1000474 <alt_mmu_va_space_storage_required_internal+0x44>
    {
        vregion[i] = ALT_VREGION_1MIB;
 1000454:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1000458:	e51b300c 	ldr	r3, [fp, #-12]
 100045c:	e0823003 	add	r3, r2, r3
 1000460:	e3a02002 	mov	r2, #2
 1000464:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 1000468:	e51b300c 	ldr	r3, [fp, #-12]
 100046c:	e2833001 	add	r3, r3, #1
 1000470:	e50b300c 	str	r3, [fp, #-12]
 1000474:	e51b300c 	ldr	r3, [fp, #-12]
 1000478:	e3530a01 	cmp	r3, #4096	; 0x1000
 100047c:	3afffff4 	bcc	1000454 <alt_mmu_va_space_storage_required_internal+0x24>
    }

    /* For each region entry, mark the TTB1 as either fault, section, pagetable.
     * The total space required is the space required for the TTB1 (16 KiB) + pagetables * (1 KiB) */

    for (i = 0; i < num_mem_regions; ++i)
 1000480:	e3a03000 	mov	r3, #0
 1000484:	e50b300c 	str	r3, [fp, #-12]
 1000488:	ea000096 	b	10006e8 <alt_mmu_va_space_storage_required_internal+0x2b8>
    {
        uintptr_t        va       = (uintptr_t)mem_regions[i].va;
 100048c:	e51b200c 	ldr	r2, [fp, #-12]
 1000490:	e1a03002 	mov	r3, r2
 1000494:	e1a03103 	lsl	r3, r3, #2
 1000498:	e0833002 	add	r3, r3, r2
 100049c:	e1a03103 	lsl	r3, r3, #2
 10004a0:	e1a02003 	mov	r2, r3
 10004a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10004a8:	e0833002 	add	r3, r3, r2
 10004ac:	e5933000 	ldr	r3, [r3]
 10004b0:	e50b3010 	str	r3, [fp, #-16]
        uintptr_t        pa       = (uintptr_t)mem_regions[i].pa;
 10004b4:	e51b200c 	ldr	r2, [fp, #-12]
 10004b8:	e1a03002 	mov	r3, r2
 10004bc:	e1a03103 	lsl	r3, r3, #2
 10004c0:	e0833002 	add	r3, r3, r2
 10004c4:	e1a03103 	lsl	r3, r3, #2
 10004c8:	e1a02003 	mov	r2, r3
 10004cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10004d0:	e0833002 	add	r3, r3, r2
 10004d4:	e5933004 	ldr	r3, [r3, #4]
 10004d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        uint32_t         size     = mem_regions[i].size;
 10004dc:	e51b200c 	ldr	r2, [fp, #-12]
 10004e0:	e1a03002 	mov	r3, r2
 10004e4:	e1a03103 	lsl	r3, r3, #2
 10004e8:	e0833002 	add	r3, r3, r2
 10004ec:	e1a03103 	lsl	r3, r3, #2
 10004f0:	e1a02003 	mov	r2, r3
 10004f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10004f8:	e0833002 	add	r3, r3, r2
 10004fc:	e5933008 	ldr	r3, [r3, #8]
 1000500:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        ALT_MMU_TTB_NS_t security = mem_regions[i].security;
 1000504:	e51b200c 	ldr	r2, [fp, #-12]
 1000508:	e1a03002 	mov	r3, r2
 100050c:	e1a03103 	lsl	r3, r3, #2
 1000510:	e0833002 	add	r3, r3, r2
 1000514:	e1a03103 	lsl	r3, r3, #2
 1000518:	e1a02003 	mov	r2, r3
 100051c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 1000520:	e0833002 	add	r3, r3, r2
 1000524:	e5d33010 	ldrb	r3, [r3, #16]
 1000528:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

        /* Verify [va] aligns to 4 KiB */
        if (va & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 100052c:	e51b3010 	ldr	r3, [fp, #-16]
 1000530:	e7eb3053 	ubfx	r3, r3, #0, #12
 1000534:	e3530000 	cmp	r3, #0
 1000538:	0a000001 	beq	1000544 <alt_mmu_va_space_storage_required_internal+0x114>
        {
            return 0;
 100053c:	e3a03000 	mov	r3, #0
 1000540:	ea000081 	b	100074c <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Verify [pa] aligns to 4 KiB */
        if (pa & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 1000544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1000548:	e7eb3053 	ubfx	r3, r3, #0, #12
 100054c:	e3530000 	cmp	r3, #0
 1000550:	0a000001 	beq	100055c <alt_mmu_va_space_storage_required_internal+0x12c>
        {
            return 0;
 1000554:	e3a03000 	mov	r3, #0
 1000558:	ea00007b 	b	100074c <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Verify [size] aligns to 4 KiB */
        if (size & (ALT_MMU_SMALL_PAGE_SIZE - 1))
 100055c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000560:	e7eb3053 	ubfx	r3, r3, #0, #12
 1000564:	e3530000 	cmp	r3, #0
 1000568:	0a000001 	beq	1000574 <alt_mmu_va_space_storage_required_internal+0x144>
        {
            return 0;
 100056c:	e3a03000 	mov	r3, #0
 1000570:	ea000075 	b	100074c <alt_mmu_va_space_storage_required_internal+0x31c>
        }

        /* Mark the regions at the start of an unaligned 1 MiB as pagetable.
         * Align the [va] to 1 MiB and subtract that from the [size] left to describe. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
 1000574:	e51b3010 	ldr	r3, [fp, #-16]
 1000578:	e7f33053 	ubfx	r3, r3, #0, #20
 100057c:	e3530000 	cmp	r3, #0
 1000580:	0a000020 	beq	1000608 <alt_mmu_va_space_storage_required_internal+0x1d8>
        {
            uint32_t segment = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
 1000584:	e51b3010 	ldr	r3, [fp, #-16]
 1000588:	e7f33053 	ubfx	r3, r3, #0, #20
 100058c:	e2633601 	rsb	r3, r3, #1048576	; 0x100000
 1000590:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 1000594:	e1520003 	cmp	r2, r3
 1000598:	31a03002 	movcc	r3, r2
 100059c:	21a03003 	movcs	r3, r3
 10005a0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

            /* Pagetables must be either S or NS. If the pagetable was
             * previously marked as something different, the regions described
             * will not be implementable. */
            if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 10005a4:	e51b3010 	ldr	r3, [fp, #-16]
 10005a8:	e1a03a23 	lsr	r3, r3, #20
 10005ac:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 10005b0:	e0823003 	add	r3, r2, r3
 10005b4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 10005b8:	e1a01002 	mov	r1, r2
 10005bc:	e1a00003 	mov	r0, r3
 10005c0:	ebffff80 	bl	10003c8 <alt_vregion_mark_pagetable>
 10005c4:	e1a03000 	mov	r3, r0
 10005c8:	e3530000 	cmp	r3, #0
 10005cc:	0a000001 	beq	10005d8 <alt_mmu_va_space_storage_required_internal+0x1a8>
                                           security) != ALT_E_SUCCESS)
            {
                return 0;
 10005d0:	e3a03000 	mov	r3, #0
 10005d4:	ea00005c 	b	100074c <alt_mmu_va_space_storage_required_internal+0x31c>
            }

            va   += segment;
 10005d8:	e51b2010 	ldr	r2, [fp, #-16]
 10005dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10005e0:	e0823003 	add	r3, r2, r3
 10005e4:	e50b3010 	str	r3, [fp, #-16]
            pa   += segment;
 10005e8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 10005ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10005f0:	e0823003 	add	r3, r2, r3
 10005f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            size -= segment;
 10005f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 10005fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1000600:	e0423003 	sub	r3, r2, r3
 1000604:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        /* Skip each 1 MiB aligned segment of size 1 MiB. These regions require
         * pagetable if the PA is not 1 MiB aligned. */

        /* [pa] is not used after this point. */

        if (pa & (ALT_MMU_SECTION_SIZE - 1))
 1000608:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100060c:	e7f33053 	ubfx	r3, r3, #0, #20
 1000610:	e3530000 	cmp	r3, #0
 1000614:	0a00001d 	beq	1000690 <alt_mmu_va_space_storage_required_internal+0x260>
        {
            /* PA is not 1 MiB aligned. Everything must use pagetables. */

            while (size >= ALT_MMU_SECTION_SIZE)
 1000618:	ea000012 	b	1000668 <alt_mmu_va_space_storage_required_internal+0x238>
            {
                /* Pagetables must be either S or NS. If the pagetable was
                 * previously marked as something different, the regions described
                 * will not be implementable. */
                if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 100061c:	e51b3010 	ldr	r3, [fp, #-16]
 1000620:	e1a03a23 	lsr	r3, r3, #20
 1000624:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1000628:	e0823003 	add	r3, r2, r3
 100062c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 1000630:	e1a01002 	mov	r1, r2
 1000634:	e1a00003 	mov	r0, r3
 1000638:	ebffff62 	bl	10003c8 <alt_vregion_mark_pagetable>
 100063c:	e1a03000 	mov	r3, r0
 1000640:	e3530000 	cmp	r3, #0
 1000644:	0a000001 	beq	1000650 <alt_mmu_va_space_storage_required_internal+0x220>
                                               security) != ALT_E_SUCCESS)
                {
                    return 0;
 1000648:	e3a03000 	mov	r3, #0
 100064c:	ea00003e 	b	100074c <alt_mmu_va_space_storage_required_internal+0x31c>
                }

                va   += ALT_MMU_SECTION_SIZE;
 1000650:	e51b3010 	ldr	r3, [fp, #-16]
 1000654:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1000658:	e50b3010 	str	r3, [fp, #-16]
                /* pa   += ALT_MMU_SECTION_SIZE; */
                size -= ALT_MMU_SECTION_SIZE;
 100065c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000660:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1000664:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            while (size >= ALT_MMU_SECTION_SIZE)
 1000668:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100066c:	e3530601 	cmp	r3, #1048576	; 0x100000
 1000670:	2affffe9 	bcs	100061c <alt_mmu_va_space_storage_required_internal+0x1ec>
 1000674:	ea000008 	b	100069c <alt_mmu_va_space_storage_required_internal+0x26c>
        {
            /* PA is 1 MiB aligned. Sections or supersections can be used. */

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                va   += ALT_MMU_SECTION_SIZE;
 1000678:	e51b3010 	ldr	r3, [fp, #-16]
 100067c:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1000680:	e50b3010 	str	r3, [fp, #-16]
                /* pa   += ALT_MMU_SECTION_SIZE; */
                size -= ALT_MMU_SECTION_SIZE;
 1000684:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000688:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 100068c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            while (size >= ALT_MMU_SECTION_SIZE)
 1000690:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000694:	e3530601 	cmp	r3, #1048576	; 0x100000
 1000698:	2afffff6 	bcs	1000678 <alt_mmu_va_space_storage_required_internal+0x248>
            }
        }

        /* The remainder should be a 1 MiB aligned segment of less than 1 MiB. Mark that region as pagetable. */
        if (size)
 100069c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10006a0:	e3530000 	cmp	r3, #0
 10006a4:	0a00000c 	beq	10006dc <alt_mmu_va_space_storage_required_internal+0x2ac>
        {
            /* Pagetables must be either S or NS. If the pagetable was
             * previously marked as something different, the regions described
             * will not be implementable. */
            if (alt_vregion_mark_pagetable(&vregion[va >> 20],
 10006a8:	e51b3010 	ldr	r3, [fp, #-16]
 10006ac:	e1a03a23 	lsr	r3, r3, #20
 10006b0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 10006b4:	e0823003 	add	r3, r2, r3
 10006b8:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 10006bc:	e1a01002 	mov	r1, r2
 10006c0:	e1a00003 	mov	r0, r3
 10006c4:	ebffff3f 	bl	10003c8 <alt_vregion_mark_pagetable>
 10006c8:	e1a03000 	mov	r3, r0
 10006cc:	e3530000 	cmp	r3, #0
 10006d0:	0a000001 	beq	10006dc <alt_mmu_va_space_storage_required_internal+0x2ac>
                                           security) != ALT_E_SUCCESS)
            {
                return 0;
 10006d4:	e3a03000 	mov	r3, #0
 10006d8:	ea00001b 	b	100074c <alt_mmu_va_space_storage_required_internal+0x31c>
    for (i = 0; i < num_mem_regions; ++i)
 10006dc:	e51b300c 	ldr	r3, [fp, #-12]
 10006e0:	e2833001 	add	r3, r3, #1
 10006e4:	e50b300c 	str	r3, [fp, #-12]
 10006e8:	e51b200c 	ldr	r2, [fp, #-12]
 10006ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 10006f0:	e1520003 	cmp	r2, r3
 10006f4:	3affff64 	bcc	100048c <alt_mmu_va_space_storage_required_internal+0x5c>
            }
        }
    }

    /* Calculate the size as 16 KiB (TTB1) + 1 KiB * (TTB2 or the number of pagetables) */
    reqsize = ALT_MMU_TTB1_SIZE;
 10006f8:	e3a03901 	mov	r3, #16384	; 0x4000
 10006fc:	e50b3008 	str	r3, [fp, #-8]

    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 1000700:	e3a03000 	mov	r3, #0
 1000704:	e50b300c 	str	r3, [fp, #-12]
 1000708:	ea00000b 	b	100073c <alt_mmu_va_space_storage_required_internal+0x30c>
    {
        if (vregion[i] != ALT_VREGION_1MIB)
 100070c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1000710:	e51b300c 	ldr	r3, [fp, #-12]
 1000714:	e0823003 	add	r3, r2, r3
 1000718:	e5d33000 	ldrb	r3, [r3]
 100071c:	e3530002 	cmp	r3, #2
 1000720:	0a000002 	beq	1000730 <alt_mmu_va_space_storage_required_internal+0x300>
        {
            reqsize += ALT_MMU_TTB2_SIZE;
 1000724:	e51b3008 	ldr	r3, [fp, #-8]
 1000728:	e2833b01 	add	r3, r3, #1024	; 0x400
 100072c:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
 1000730:	e51b300c 	ldr	r3, [fp, #-12]
 1000734:	e2833001 	add	r3, r3, #1
 1000738:	e50b300c 	str	r3, [fp, #-12]
 100073c:	e51b300c 	ldr	r3, [fp, #-12]
 1000740:	e3530a01 	cmp	r3, #4096	; 0x1000
 1000744:	3afffff0 	bcc	100070c <alt_mmu_va_space_storage_required_internal+0x2dc>
        }
    }

    return reqsize;
 1000748:	e51b3008 	ldr	r3, [fp, #-8]
}
 100074c:	e1a00003 	mov	r0, r3
 1000750:	e24bd004 	sub	sp, fp, #4
 1000754:	e8bd8800 	pop	{fp, pc}

01000758 <alt_mmu_va_space_storage_required>:

size_t alt_mmu_va_space_storage_required(const ALT_MMU_MEM_REGION_t* mem_regions,
                                         const size_t num_mem_regions)
{
 1000758:	e92d4800 	push	{fp, lr}
 100075c:	e28db004 	add	fp, sp, #4
 1000760:	e24dda01 	sub	sp, sp, #4096	; 0x1000
 1000764:	e24dd008 	sub	sp, sp, #8
 1000768:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 100076c:	e2433004 	sub	r3, r3, #4
 1000770:	e5030004 	str	r0, [r3, #-4]
 1000774:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000778:	e2433004 	sub	r3, r3, #4
 100077c:	e5031008 	str	r1, [r3, #-8]
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    return alt_mmu_va_space_storage_required_internal(mem_regions,
 1000780:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000784:	e2433004 	sub	r3, r3, #4
 1000788:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 100078c:	e2422004 	sub	r2, r2, #4
 1000790:	e1a01002 	mov	r1, r2
 1000794:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1000798:	e2422004 	sub	r2, r2, #4
 100079c:	e1a00002 	mov	r0, r2
 10007a0:	e1a02003 	mov	r2, r3
 10007a4:	e5111008 	ldr	r1, [r1, #-8]
 10007a8:	e5100004 	ldr	r0, [r0, #-4]
 10007ac:	ebffff1f 	bl	1000430 <alt_mmu_va_space_storage_required_internal>
 10007b0:	e1a03000 	mov	r3, r0
                                                      num_mem_regions,
                                                      vregion);
}
 10007b4:	e1a00003 	mov	r0, r3
 10007b8:	e24bd004 	sub	sp, fp, #4
 10007bc:	e8bd8800 	pop	{fp, pc}

010007c0 <alt_mmu_va_space_gen_pagetable>:

static __inline uint32_t alt_mmu_va_space_gen_pagetable(uintptr_t pagetable,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 10007c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 10007c4:	e28db000 	add	fp, sp, #0
 10007c8:	e24dd00c 	sub	sp, sp, #12
 10007cc:	e50b0008 	str	r0, [fp, #-8]
 10007d0:	e50b100c 	str	r1, [fp, #-12]
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 10007d4:	e51b300c 	ldr	r3, [fp, #-12]
 10007d8:	e5d3300d 	ldrb	r3, [r3, #13]
 10007dc:	e35300ff 	cmp	r3, #255	; 0xff
 10007e0:	1a000001 	bne	10007ec <alt_mmu_va_space_gen_pagetable+0x2c>
    {
        return 0;
 10007e4:	e3a03000 	mov	r3, #0
 10007e8:	ea000008 	b	1000810 <alt_mmu_va_space_gen_pagetable+0x50>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x1)
        | ALT_MMU_TTB1_PAGE_TBL_NS_SET(mem->security)
 10007ec:	e51b300c 	ldr	r3, [fp, #-12]
 10007f0:	e5d33010 	ldrb	r3, [r3, #16]
 10007f4:	e1a03183 	lsl	r3, r3, #3
        | ALT_MMU_TTB1_PAGE_TBL_DOMAIN_SET(0)
        | ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_SET(pagetable >> 10);
 10007f8:	e2032008 	and	r2, r3, #8
 10007fc:	e51b3008 	ldr	r3, [fp, #-8]
 1000800:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1000804:	e3c33003 	bic	r3, r3, #3
 1000808:	e1823003 	orr	r3, r2, r3
 100080c:	e3833001 	orr	r3, r3, #1
}
 1000810:	e1a00003 	mov	r0, r3
 1000814:	e28bd000 	add	sp, fp, #0
 1000818:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100081c:	e12fff1e 	bx	lr

01000820 <alt_mmu_va_space_gen_section>:

static __inline uint32_t alt_mmu_va_space_gen_section(uintptr_t pa,
                                                    const ALT_MMU_MEM_REGION_t * mem)
{
 1000820:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000824:	e28db000 	add	fp, sp, #0
 1000828:	e24dd01c 	sub	sp, sp, #28
 100082c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1000830:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1000834:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000838:	e5d3300d 	ldrb	r3, [r3, #13]
 100083c:	e1a03223 	lsr	r3, r3, #4
 1000840:	e6ef3073 	uxtb	r3, r3
 1000844:	e2033007 	and	r3, r3, #7
 1000848:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 100084c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000850:	e5d3300d 	ldrb	r3, [r3, #13]
 1000854:	e1a030a3 	lsr	r3, r3, #1
 1000858:	e6ef3073 	uxtb	r3, r3
 100085c:	e2033001 	and	r3, r3, #1
 1000860:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1000864:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000868:	e5d3300d 	ldrb	r3, [r3, #13]
 100086c:	e2033001 	and	r3, r3, #1
 1000870:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1000874:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000878:	e5d3300d 	ldrb	r3, [r3, #13]
 100087c:	e35300ff 	cmp	r3, #255	; 0xff
 1000880:	1a000001 	bne	100088c <alt_mmu_va_space_gen_section+0x6c>
    {
        return 0;
 1000884:	e3a03000 	mov	r3, #0
 1000888:	ea000029 	b	1000934 <alt_mmu_va_space_gen_section+0x114>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
 100088c:	e51b3010 	ldr	r3, [fp, #-16]
 1000890:	e1a03103 	lsl	r3, r3, #2
 1000894:	e2033004 	and	r3, r3, #4
 1000898:	e3832002 	orr	r2, r3, #2
        | ALT_MMU_TTB1_SECTION_C_SET(c)
 100089c:	e51b300c 	ldr	r3, [fp, #-12]
 10008a0:	e1a03183 	lsl	r3, r3, #3
 10008a4:	e2033008 	and	r3, r3, #8
 10008a8:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
 10008ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10008b0:	e5d3300f 	ldrb	r3, [r3, #15]
 10008b4:	e1a03203 	lsl	r3, r3, #4
 10008b8:	e2033010 	and	r3, r3, #16
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
 10008bc:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
 10008c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10008c4:	e5d3300c 	ldrb	r3, [r3, #12]
 10008c8:	e1a03683 	lsl	r3, r3, #13
 10008cc:	e2031902 	and	r1, r3, #32768	; 0x8000
 10008d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10008d4:	e5d3300c 	ldrb	r3, [r3, #12]
 10008d8:	e1a03503 	lsl	r3, r3, #10
 10008dc:	e2033b03 	and	r3, r3, #3072	; 0xc00
 10008e0:	e1813003 	orr	r3, r1, r3
 10008e4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
 10008e8:	e51b3008 	ldr	r3, [fp, #-8]
 10008ec:	e1a03603 	lsl	r3, r3, #12
 10008f0:	e2033a07 	and	r3, r3, #28672	; 0x7000
 10008f4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
 10008f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10008fc:	e5d3300e 	ldrb	r3, [r3, #14]
 1000900:	e1a03803 	lsl	r3, r3, #16
 1000904:	e2033801 	and	r3, r3, #65536	; 0x10000
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
 1000908:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
 100090c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000910:	e5d33010 	ldrb	r3, [r3, #16]
 1000914:	e1a03983 	lsl	r3, r3, #19
 1000918:	e2033702 	and	r3, r3, #524288	; 0x80000
 100091c:	e1823003 	orr	r3, r2, r3
 1000920:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB1_SECTION_BASE_ADDR_SET(pa >> 20);
 1000924:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000928:	e1a03a23 	lsr	r3, r3, #20
 100092c:	e1a03a03 	lsl	r3, r3, #20
 1000930:	e1823003 	orr	r3, r2, r3
}
 1000934:	e1a00003 	mov	r0, r3
 1000938:	e28bd000 	add	sp, fp, #0
 100093c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000940:	e12fff1e 	bx	lr

01000944 <alt_mmu_va_space_gen_supersection>:

static __inline uint32_t alt_mmu_va_space_gen_supersection(uintptr_t pa,
                                                         const ALT_MMU_MEM_REGION_t * mem)
{
 1000944:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000948:	e28db000 	add	fp, sp, #0
 100094c:	e24dd01c 	sub	sp, sp, #28
 1000950:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1000954:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1000958:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100095c:	e5d3300d 	ldrb	r3, [r3, #13]
 1000960:	e1a03223 	lsr	r3, r3, #4
 1000964:	e6ef3073 	uxtb	r3, r3
 1000968:	e2033007 	and	r3, r3, #7
 100096c:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 1000970:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000974:	e5d3300d 	ldrb	r3, [r3, #13]
 1000978:	e1a030a3 	lsr	r3, r3, #1
 100097c:	e6ef3073 	uxtb	r3, r3
 1000980:	e2033001 	and	r3, r3, #1
 1000984:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1000988:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100098c:	e5d3300d 	ldrb	r3, [r3, #13]
 1000990:	e2033001 	and	r3, r3, #1
 1000994:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1000998:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100099c:	e5d3300d 	ldrb	r3, [r3, #13]
 10009a0:	e35300ff 	cmp	r3, #255	; 0xff
 10009a4:	1a000001 	bne	10009b0 <alt_mmu_va_space_gen_supersection+0x6c>
    {
        return 0;
 10009a8:	e3a03000 	mov	r3, #0
 10009ac:	ea000029 	b	1000a58 <alt_mmu_va_space_gen_supersection+0x114>
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
 10009b0:	e51b3010 	ldr	r3, [fp, #-16]
 10009b4:	e1a03103 	lsl	r3, r3, #2
 10009b8:	e2033004 	and	r3, r3, #4
 10009bc:	e3833701 	orr	r3, r3, #262144	; 0x40000
 10009c0:	e3833002 	orr	r3, r3, #2
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
 10009c4:	e51b200c 	ldr	r2, [fp, #-12]
 10009c8:	e1a02182 	lsl	r2, r2, #3
 10009cc:	e2022008 	and	r2, r2, #8
 10009d0:	e1832002 	orr	r2, r3, r2
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
 10009d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10009d8:	e5d3300f 	ldrb	r3, [r3, #15]
 10009dc:	e1a03203 	lsl	r3, r3, #4
 10009e0:	e2033010 	and	r3, r3, #16
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
 10009e4:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
 10009e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10009ec:	e5d3300c 	ldrb	r3, [r3, #12]
 10009f0:	e1a03683 	lsl	r3, r3, #13
 10009f4:	e2031902 	and	r1, r3, #32768	; 0x8000
 10009f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10009fc:	e5d3300c 	ldrb	r3, [r3, #12]
 1000a00:	e1a03503 	lsl	r3, r3, #10
 1000a04:	e2033b03 	and	r3, r3, #3072	; 0xc00
 1000a08:	e1813003 	orr	r3, r1, r3
 1000a0c:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
 1000a10:	e51b3008 	ldr	r3, [fp, #-8]
 1000a14:	e1a03603 	lsl	r3, r3, #12
 1000a18:	e2033a07 	and	r3, r3, #28672	; 0x7000
 1000a1c:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
 1000a20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000a24:	e5d3300e 	ldrb	r3, [r3, #14]
 1000a28:	e1a03803 	lsl	r3, r3, #16
 1000a2c:	e2033801 	and	r3, r3, #65536	; 0x10000
        | ALT_MMU_TTB1_SUPERSECTION_NG_SET(0)
 1000a30:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_NS_SET(mem->security)
 1000a34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000a38:	e5d33010 	ldrb	r3, [r3, #16]
 1000a3c:	e1a03983 	lsl	r3, r3, #19
 1000a40:	e2033702 	and	r3, r3, #524288	; 0x80000
 1000a44:	e1823003 	orr	r3, r2, r3
 1000a48:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB1_SUPERSECTION_BASE_ADDR_SET(pa >> 24);
 1000a4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000a50:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
 1000a54:	e1823003 	orr	r3, r2, r3
}
 1000a58:	e1a00003 	mov	r0, r3
 1000a5c:	e28bd000 	add	sp, fp, #0
 1000a60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000a64:	e12fff1e 	bx	lr

01000a68 <alt_mmu_va_space_gen_smallpage>:

static __inline uint32_t alt_mmu_va_space_gen_smallpage(uintptr_t pa,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 1000a68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000a6c:	e28db000 	add	fp, sp, #0
 1000a70:	e24dd01c 	sub	sp, sp, #28
 1000a74:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1000a78:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1000a7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000a80:	e5d3300d 	ldrb	r3, [r3, #13]
 1000a84:	e1a03223 	lsr	r3, r3, #4
 1000a88:	e6ef3073 	uxtb	r3, r3
 1000a8c:	e2033007 	and	r3, r3, #7
 1000a90:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 1000a94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000a98:	e5d3300d 	ldrb	r3, [r3, #13]
 1000a9c:	e1a030a3 	lsr	r3, r3, #1
 1000aa0:	e6ef3073 	uxtb	r3, r3
 1000aa4:	e2033001 	and	r3, r3, #1
 1000aa8:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1000aac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000ab0:	e5d3300d 	ldrb	r3, [r3, #13]
 1000ab4:	e2033001 	and	r3, r3, #1
 1000ab8:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1000abc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000ac0:	e5d3300d 	ldrb	r3, [r3, #13]
 1000ac4:	e35300ff 	cmp	r3, #255	; 0xff
 1000ac8:	1a000001 	bne	1000ad4 <alt_mmu_va_space_gen_smallpage+0x6c>
    {
        return 0;
 1000acc:	e3a03000 	mov	r3, #0
 1000ad0:	ea000023 	b	1000b64 <alt_mmu_va_space_gen_smallpage+0xfc>

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
 1000ad4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000ad8:	e5d3300f 	ldrb	r3, [r3, #15]
 1000adc:	e2033001 	and	r3, r3, #1
 1000ae0:	e3832002 	orr	r2, r3, #2
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
 1000ae4:	e51b3010 	ldr	r3, [fp, #-16]
 1000ae8:	e1a03103 	lsl	r3, r3, #2
 1000aec:	e2033004 	and	r3, r3, #4
 1000af0:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
 1000af4:	e51b300c 	ldr	r3, [fp, #-12]
 1000af8:	e1a03183 	lsl	r3, r3, #3
 1000afc:	e2033008 	and	r3, r3, #8
 1000b00:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
 1000b04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000b08:	e5d3300c 	ldrb	r3, [r3, #12]
 1000b0c:	e1a03383 	lsl	r3, r3, #7
 1000b10:	e2031c02 	and	r1, r3, #512	; 0x200
 1000b14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000b18:	e5d3300c 	ldrb	r3, [r3, #12]
 1000b1c:	e1a03203 	lsl	r3, r3, #4
 1000b20:	e2033030 	and	r3, r3, #48	; 0x30
 1000b24:	e1813003 	orr	r3, r1, r3
 1000b28:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
 1000b2c:	e51b3008 	ldr	r3, [fp, #-8]
 1000b30:	e1a03303 	lsl	r3, r3, #6
 1000b34:	e2033d07 	and	r3, r3, #448	; 0x1c0
 1000b38:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
 1000b3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000b40:	e5d3300e 	ldrb	r3, [r3, #14]
 1000b44:	e1a03503 	lsl	r3, r3, #10
 1000b48:	e2033b01 	and	r3, r3, #1024	; 0x400
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
 1000b4c:	e1823003 	orr	r3, r2, r3
 1000b50:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
 1000b54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000b58:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
 1000b5c:	e3c3300f 	bic	r3, r3, #15
 1000b60:	e1823003 	orr	r3, r2, r3
}
 1000b64:	e1a00003 	mov	r0, r3
 1000b68:	e28bd000 	add	sp, fp, #0
 1000b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000b70:	e12fff1e 	bx	lr

01000b74 <alt_mmu_va_space_gen_largepage>:

static __inline uint32_t alt_mmu_va_space_gen_largepage(uintptr_t pa,
                                                      const ALT_MMU_MEM_REGION_t * mem)
{
 1000b74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1000b78:	e28db000 	add	fp, sp, #0
 1000b7c:	e24dd01c 	sub	sp, sp, #28
 1000b80:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1000b84:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int tex = (mem->attributes >> 4) & 0x7;
 1000b88:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000b8c:	e5d3300d 	ldrb	r3, [r3, #13]
 1000b90:	e1a03223 	lsr	r3, r3, #4
 1000b94:	e6ef3073 	uxtb	r3, r3
 1000b98:	e2033007 	and	r3, r3, #7
 1000b9c:	e50b3008 	str	r3, [fp, #-8]
    int c   = (mem->attributes >> 1) & 0x1;
 1000ba0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000ba4:	e5d3300d 	ldrb	r3, [r3, #13]
 1000ba8:	e1a030a3 	lsr	r3, r3, #1
 1000bac:	e6ef3073 	uxtb	r3, r3
 1000bb0:	e2033001 	and	r3, r3, #1
 1000bb4:	e50b300c 	str	r3, [fp, #-12]
    int b   = (mem->attributes >> 0) & 0x1;
 1000bb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000bbc:	e5d3300d 	ldrb	r3, [r3, #13]
 1000bc0:	e2033001 	and	r3, r3, #1
 1000bc4:	e50b3010 	str	r3, [fp, #-16]

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
 1000bc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000bcc:	e5d3300d 	ldrb	r3, [r3, #13]
 1000bd0:	e35300ff 	cmp	r3, #255	; 0xff
 1000bd4:	1a000001 	bne	1000be0 <alt_mmu_va_space_gen_largepage+0x6c>
    {
        return 0;
 1000bd8:	e3a03000 	mov	r3, #0
 1000bdc:	ea000024 	b	1000c74 <alt_mmu_va_space_gen_largepage+0x100>

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
 1000be0:	e51b3010 	ldr	r3, [fp, #-16]
 1000be4:	e1a03103 	lsl	r3, r3, #2
 1000be8:	e2033004 	and	r3, r3, #4
 1000bec:	e3832001 	orr	r2, r3, #1
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
 1000bf0:	e51b300c 	ldr	r3, [fp, #-12]
 1000bf4:	e1a03183 	lsl	r3, r3, #3
 1000bf8:	e2033008 	and	r3, r3, #8
 1000bfc:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
 1000c00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000c04:	e5d3300c 	ldrb	r3, [r3, #12]
 1000c08:	e1a03383 	lsl	r3, r3, #7
 1000c0c:	e2031c02 	and	r1, r3, #512	; 0x200
 1000c10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000c14:	e5d3300c 	ldrb	r3, [r3, #12]
 1000c18:	e1a03203 	lsl	r3, r3, #4
 1000c1c:	e2033030 	and	r3, r3, #48	; 0x30
 1000c20:	e1813003 	orr	r3, r1, r3
 1000c24:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
 1000c28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000c2c:	e5d3300e 	ldrb	r3, [r3, #14]
 1000c30:	e1a03503 	lsl	r3, r3, #10
 1000c34:	e2033b01 	and	r3, r3, #1024	; 0x400
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
 1000c38:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
 1000c3c:	e51b3008 	ldr	r3, [fp, #-8]
 1000c40:	e1a03603 	lsl	r3, r3, #12
 1000c44:	e2033a07 	and	r3, r3, #28672	; 0x7000
 1000c48:	e1822003 	orr	r2, r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
 1000c4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1000c50:	e5d3300f 	ldrb	r3, [r3, #15]
 1000c54:	e1a03783 	lsl	r3, r3, #15
 1000c58:	e6ff3073 	uxth	r3, r3
 1000c5c:	e1823003 	orr	r3, r2, r3
 1000c60:	e1a02003 	mov	r2, r3
        | ALT_MMU_TTB2_LARGE_PAGE_BASE_ADDR_SET(pa >> 16);
 1000c64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1000c68:	e1a03823 	lsr	r3, r3, #16
 1000c6c:	e1a03803 	lsl	r3, r3, #16
 1000c70:	e1823003 	orr	r3, r2, r3
}
 1000c74:	e1a00003 	mov	r0, r3
 1000c78:	e28bd000 	add	sp, fp, #0
 1000c7c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1000c80:	e12fff1e 	bx	lr

01000c84 <alt_mmu_ttb2_init>:

static ALT_STATUS_CODE alt_mmu_ttb2_init(uint32_t * ttb2)
{
 1000c84:	e92d4800 	push	{fp, lr}
 1000c88:	e28db004 	add	fp, sp, #4
 1000c8c:	e24dd008 	sub	sp, sp, #8
 1000c90:	e50b0008 	str	r0, [fp, #-8]
    /* For TTB2 (page tables), the page table base address in TTB1 is
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    if ((uintptr_t)ttb2 & ((1 << 10) - 1))
 1000c94:	e51b3008 	ldr	r3, [fp, #-8]
 1000c98:	e7e93053 	ubfx	r3, r3, #0, #10
 1000c9c:	e3530000 	cmp	r3, #0
 1000ca0:	0a000001 	beq	1000cac <alt_mmu_ttb2_init+0x28>
    {
        return ALT_E_BAD_ARG;
 1000ca4:	e3e03008 	mvn	r3, #8
 1000ca8:	ea000004 	b	1000cc0 <alt_mmu_ttb2_init+0x3c>
    }

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
 1000cac:	e3a02b01 	mov	r2, #1024	; 0x400
 1000cb0:	e3a01000 	mov	r1, #0
 1000cb4:	e51b0008 	ldr	r0, [fp, #-8]
 1000cb8:	eb00042a 	bl	1001d68 <memset>
    return ALT_E_SUCCESS;
 1000cbc:	e3a03000 	mov	r3, #0
}
 1000cc0:	e1a00003 	mov	r0, r3
 1000cc4:	e24bd004 	sub	sp, fp, #4
 1000cc8:	e8bd8800 	pop	{fp, pc}

01000ccc <alt_mmu_va_space_create>:
ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
                                        const ALT_MMU_MEM_REGION_t* mem_regions,
                                        const size_t num_mem_regions,
                                        alt_mmu_ttb_alloc_t ttb_alloc,
                                        void * ttb_alloc_context)
{
 1000ccc:	e92d4800 	push	{fp, lr}
 1000cd0:	e28db004 	add	fp, sp, #4
 1000cd4:	e24ddd43 	sub	sp, sp, #4288	; 0x10c0
 1000cd8:	e24bca01 	sub	ip, fp, #4096	; 0x1000
 1000cdc:	e24cc004 	sub	ip, ip, #4
 1000ce0:	e50c00b4 	str	r0, [ip, #-180]	; 0xffffff4c
 1000ce4:	e24b0a01 	sub	r0, fp, #4096	; 0x1000
 1000ce8:	e2400004 	sub	r0, r0, #4
 1000cec:	e50010b8 	str	r1, [r0, #-184]	; 0xffffff48
 1000cf0:	e24b1a01 	sub	r1, fp, #4096	; 0x1000
 1000cf4:	e2411004 	sub	r1, r1, #4
 1000cf8:	e50120bc 	str	r2, [r1, #-188]	; 0xffffff44
 1000cfc:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1000d00:	e2422004 	sub	r2, r2, #4
 1000d04:	e50230c0 	str	r3, [r2, #-192]	; 0xffffff40
    int k;
    size_t i;
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    size_t reqsize = alt_mmu_va_space_storage_required_internal(mem_regions,
 1000d08:	e24b3d42 	sub	r3, fp, #4224	; 0x1080
 1000d0c:	e2433004 	sub	r3, r3, #4
 1000d10:	e243300c 	sub	r3, r3, #12
 1000d14:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1000d18:	e2422004 	sub	r2, r2, #4
 1000d1c:	e1a01002 	mov	r1, r2
 1000d20:	e24b2a01 	sub	r2, fp, #4096	; 0x1000
 1000d24:	e2422004 	sub	r2, r2, #4
 1000d28:	e1a00002 	mov	r0, r2
 1000d2c:	e1a02003 	mov	r2, r3
 1000d30:	e51110bc 	ldr	r1, [r1, #-188]	; 0xffffff44
 1000d34:	e51000b8 	ldr	r0, [r0, #-184]	; 0xffffff48
 1000d38:	ebfffdbc 	bl	1000430 <alt_mmu_va_space_storage_required_internal>
 1000d3c:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
                                                                num_mem_regions,
                                                                vregion);
    char * memory;
    size_t allocated = 0;
 1000d40:	e3a03000 	mov	r3, #0
 1000d44:	e50b3010 	str	r3, [fp, #-16]
    if (reqsize == 0)
 1000d48:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 1000d4c:	e3530000 	cmp	r3, #0
 1000d50:	1a000001 	bne	1000d5c <alt_mmu_va_space_create+0x90>
    {
        return ALT_E_ERROR;
 1000d54:	e3e03000 	mvn	r3, #0
 1000d58:	ea00034e 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
    }

    memory    = ttb_alloc(reqsize, ttb_alloc_context);
 1000d5c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000d60:	e2433004 	sub	r3, r3, #4
 1000d64:	e51330c0 	ldr	r3, [r3, #-192]	; 0xffffff40
 1000d68:	e59b1004 	ldr	r1, [fp, #4]
 1000d6c:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
 1000d70:	e12fff33 	blx	r3
 1000d74:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0

    /* Verify allocation */

    if (memory == NULL)
 1000d78:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1000d7c:	e3530000 	cmp	r3, #0
 1000d80:	1a000001 	bne	1000d8c <alt_mmu_va_space_create+0xc0>
    {
        return ALT_E_ERROR;
 1000d84:	e3e03000 	mvn	r3, #0
 1000d88:	ea000342 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    /* The stricter of the two alignment is 16 KiB. */

    if ((uintptr_t)memory & ((1 << 14) - 1))
 1000d8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 1000d90:	e7ed3053 	ubfx	r3, r3, #0, #14
 1000d94:	e3530000 	cmp	r3, #0
 1000d98:	0a000001 	beq	1000da4 <alt_mmu_va_space_create+0xd8>
    {
        return ALT_E_BAD_ARG;
 1000d9c:	e3e03008 	mvn	r3, #8
 1000da0:	ea00033c 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
    }

    /* "allocate" space for the TTB1. */
    if (allocated + ALT_MMU_TTB1_SIZE > reqsize)
 1000da4:	e51b3010 	ldr	r3, [fp, #-16]
 1000da8:	e2833901 	add	r3, r3, #16384	; 0x4000
 1000dac:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1000db0:	e1520003 	cmp	r2, r3
 1000db4:	2a000001 	bcs	1000dc0 <alt_mmu_va_space_create+0xf4>
    {
        return ALT_E_ERROR;
 1000db8:	e3e03000 	mvn	r3, #0
 1000dbc:	ea000335 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
    }
    *ttb1 = (uint32_t *)memory;
 1000dc0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000dc4:	e2433004 	sub	r3, r3, #4
 1000dc8:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1000dcc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1000dd0:	e5832000 	str	r2, [r3]
    allocated += ALT_MMU_TTB1_SIZE;
 1000dd4:	e51b3010 	ldr	r3, [fp, #-16]
 1000dd8:	e2833901 	add	r3, r3, #16384	; 0x4000
 1000ddc:	e50b3010 	str	r3, [fp, #-16]

    if (alt_mmu_ttb1_init(*ttb1) != ALT_E_SUCCESS)
 1000de0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000de4:	e2433004 	sub	r3, r3, #4
 1000de8:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1000dec:	e5933000 	ldr	r3, [r3]
 1000df0:	e1a00003 	mov	r0, r3
 1000df4:	ebfffc92 	bl	1000044 <alt_mmu_ttb1_init>
 1000df8:	e1a03000 	mov	r3, r0
 1000dfc:	e3530000 	cmp	r3, #0
 1000e00:	0a000001 	beq	1000e0c <alt_mmu_va_space_create+0x140>
    {
        return ALT_E_ERROR;
 1000e04:	e3e03000 	mvn	r3, #0
 1000e08:	ea000322 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
    }

    /* "allocate" space for each pagetable in [vregion] */
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
 1000e0c:	e3a03000 	mov	r3, #0
 1000e10:	e50b3008 	str	r3, [fp, #-8]
 1000e14:	ea00003a 	b	1000f04 <alt_mmu_va_space_create+0x238>
    {
        if (vregion[k] != ALT_VREGION_1MIB)
 1000e18:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000e1c:	e2433004 	sub	r3, r3, #4
 1000e20:	e1a02003 	mov	r2, r3
 1000e24:	e51b3008 	ldr	r3, [fp, #-8]
 1000e28:	e0823003 	add	r3, r2, r3
 1000e2c:	e243308c 	sub	r3, r3, #140	; 0x8c
 1000e30:	e5d33000 	ldrb	r3, [r3]
 1000e34:	e3530002 	cmp	r3, #2
 1000e38:	0a00002e 	beq	1000ef8 <alt_mmu_va_space_create+0x22c>
        {
            uint32_t desc;
            ALT_MMU_MEM_REGION_t mem_region;
            uint32_t * pagetable = (uint32_t *)(memory + allocated);
 1000e3c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
 1000e40:	e51b3010 	ldr	r3, [fp, #-16]
 1000e44:	e0823003 	add	r3, r2, r3
 1000e48:	e50b308c 	str	r3, [fp, #-140]	; 0xffffff74
            if (allocated + ALT_MMU_TTB2_SIZE > reqsize)
 1000e4c:	e51b3010 	ldr	r3, [fp, #-16]
 1000e50:	e2833b01 	add	r3, r3, #1024	; 0x400
 1000e54:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1000e58:	e1520003 	cmp	r2, r3
 1000e5c:	2a000001 	bcs	1000e68 <alt_mmu_va_space_create+0x19c>
            {
                return ALT_E_ERROR;
 1000e60:	e3e03000 	mvn	r3, #0
 1000e64:	ea00030b 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
            }
            allocated += ALT_MMU_TTB2_SIZE;
 1000e68:	e51b3010 	ldr	r3, [fp, #-16]
 1000e6c:	e2833b01 	add	r3, r3, #1024	; 0x400
 1000e70:	e50b3010 	str	r3, [fp, #-16]
            alt_mmu_ttb2_init(pagetable);
 1000e74:	e51b008c 	ldr	r0, [fp, #-140]	; 0xffffff74
 1000e78:	ebffff81 	bl	1000c84 <alt_mmu_ttb2_init>

            mem_region.attributes = ALT_MMU_ATTR_STRONG; /* Any non-FAULT will work. */
 1000e7c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000e80:	e2433004 	sub	r3, r3, #4
 1000e84:	e3a02000 	mov	r2, #0
 1000e88:	e5432093 	strb	r2, [r3, #-147]	; 0xffffff6d
            mem_region.security   = (ALT_MMU_TTB_NS_t)vregion[k];
 1000e8c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000e90:	e2433004 	sub	r3, r3, #4
 1000e94:	e1a02003 	mov	r2, r3
 1000e98:	e51b3008 	ldr	r3, [fp, #-8]
 1000e9c:	e0823003 	add	r3, r2, r3
 1000ea0:	e243308c 	sub	r3, r3, #140	; 0x8c
 1000ea4:	e5d32000 	ldrb	r2, [r3]
 1000ea8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000eac:	e2433004 	sub	r3, r3, #4
 1000eb0:	e5432090 	strb	r2, [r3, #-144]	; 0xffffff70
            desc = alt_mmu_va_space_gen_pagetable((uintptr_t)pagetable, &mem_region);
 1000eb4:	e51b208c 	ldr	r2, [fp, #-140]	; 0xffffff74
 1000eb8:	e24b3d42 	sub	r3, fp, #4224	; 0x1080
 1000ebc:	e2433004 	sub	r3, r3, #4
 1000ec0:	e2433020 	sub	r3, r3, #32
 1000ec4:	e1a01003 	mov	r1, r3
 1000ec8:	e1a00002 	mov	r0, r2
 1000ecc:	ebfffe3b 	bl	10007c0 <alt_mmu_va_space_gen_pagetable>
 1000ed0:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70

            (*ttb1)[k] = desc;
 1000ed4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000ed8:	e2433004 	sub	r3, r3, #4
 1000edc:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1000ee0:	e5932000 	ldr	r2, [r3]
 1000ee4:	e51b3008 	ldr	r3, [fp, #-8]
 1000ee8:	e1a03103 	lsl	r3, r3, #2
 1000eec:	e0823003 	add	r3, r2, r3
 1000ef0:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
 1000ef4:	e5832000 	str	r2, [r3]
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
 1000ef8:	e51b3008 	ldr	r3, [fp, #-8]
 1000efc:	e2833001 	add	r3, r3, #1
 1000f00:	e50b3008 	str	r3, [fp, #-8]
 1000f04:	e51b3008 	ldr	r3, [fp, #-8]
 1000f08:	e3530a01 	cmp	r3, #4096	; 0x1000
 1000f0c:	baffffc1 	blt	1000e18 <alt_mmu_va_space_create+0x14c>
    }

    /* The allocated size should match the requested size. If not, this means
     * that the regions descriptor changed between calling
     * alt_mmu_va_space_storage_required() and alt_mmu_va_space_create(). */
    if (reqsize != allocated)
 1000f10:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
 1000f14:	e51b3010 	ldr	r3, [fp, #-16]
 1000f18:	e1520003 	cmp	r2, r3
 1000f1c:	0a000001 	beq	1000f28 <alt_mmu_va_space_create+0x25c>
    {
        return ALT_E_ERROR;
 1000f20:	e3e03000 	mvn	r3, #0
 1000f24:	ea0002db 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
    }

    /* Iterate through all region descriptors */

    for (i = 0; i < num_mem_regions; ++i)
 1000f28:	e3a03000 	mov	r3, #0
 1000f2c:	e50b300c 	str	r3, [fp, #-12]
 1000f30:	ea0002d1 	b	1001a7c <alt_mmu_va_space_create+0xdb0>
    {
        uintptr_t va   = (uintptr_t)mem_regions[i].va;
 1000f34:	e51b200c 	ldr	r2, [fp, #-12]
 1000f38:	e1a03002 	mov	r3, r2
 1000f3c:	e1a03103 	lsl	r3, r3, #2
 1000f40:	e0833002 	add	r3, r3, r2
 1000f44:	e1a03103 	lsl	r3, r3, #2
 1000f48:	e1a02003 	mov	r2, r3
 1000f4c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000f50:	e2433004 	sub	r3, r3, #4
 1000f54:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1000f58:	e0833002 	add	r3, r3, r2
 1000f5c:	e5933000 	ldr	r3, [r3]
 1000f60:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        uintptr_t pa   = (uintptr_t)mem_regions[i].pa;
 1000f64:	e51b200c 	ldr	r2, [fp, #-12]
 1000f68:	e1a03002 	mov	r3, r2
 1000f6c:	e1a03103 	lsl	r3, r3, #2
 1000f70:	e0833002 	add	r3, r3, r2
 1000f74:	e1a03103 	lsl	r3, r3, #2
 1000f78:	e1a02003 	mov	r2, r3
 1000f7c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000f80:	e2433004 	sub	r3, r3, #4
 1000f84:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1000f88:	e0833002 	add	r3, r3, r2
 1000f8c:	e5933004 	ldr	r3, [r3, #4]
 1000f90:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        uint32_t  size = mem_regions[i].size;
 1000f94:	e51b200c 	ldr	r2, [fp, #-12]
 1000f98:	e1a03002 	mov	r3, r2
 1000f9c:	e1a03103 	lsl	r3, r3, #2
 1000fa0:	e0833002 	add	r3, r3, r2
 1000fa4:	e1a03103 	lsl	r3, r3, #2
 1000fa8:	e1a02003 	mov	r2, r3
 1000fac:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000fb0:	e2433004 	sub	r3, r3, #4
 1000fb4:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1000fb8:	e0833002 	add	r3, r3, r2
 1000fbc:	e5933008 	ldr	r3, [r3, #8]
 1000fc0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        uint32_t j;

        /* Determine the va/pa relative alignment: 4 KiB, 64 KiB, 1 MiB, 16 MiB */

        uint32_t alignopt[] =
 1000fc4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1000fc8:	e2433004 	sub	r3, r3, #4
 1000fcc:	e1a02003 	mov	r2, r3
 1000fd0:	e3023344 	movw	r3, #9028	; 0x2344
 1000fd4:	e3403100 	movt	r3, #256	; 0x100
 1000fd8:	e242c0ac 	sub	ip, r2, #172	; 0xac
 1000fdc:	e8930007 	ldm	r3, {r0, r1, r2}
 1000fe0:	e88c0007 	stm	ip, {r0, r1, r2}
            ALT_MMU_SECTION_SIZE,
            ALT_MMU_LARGE_PAGE_SIZE
        };

        /* Relative alignment of [va] and [pa]. */
        uint32_t relalign = ALT_MMU_SMALL_PAGE_SIZE;
 1000fe4:	e3a03a01 	mov	r3, #4096	; 0x1000
 1000fe8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

        for (j = 0; j < ARRAY_COUNT(alignopt); ++j)
 1000fec:	e3a03000 	mov	r3, #0
 1000ff0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1000ff4:	ea000019 	b	1001060 <alt_mmu_va_space_create+0x394>
        {
            if ( (va & (alignopt[j] - 1)) ==
 1000ff8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1000ffc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001000:	e0222003 	eor	r2, r2, r3
 1001004:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1001008:	e2433004 	sub	r3, r3, #4
 100100c:	e1a01003 	mov	r1, r3
 1001010:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001014:	e1a03103 	lsl	r3, r3, #2
 1001018:	e0813003 	add	r3, r1, r3
 100101c:	e51330ac 	ldr	r3, [r3, #-172]	; 0xffffff54
 1001020:	e2433001 	sub	r3, r3, #1
 1001024:	e0033002 	and	r3, r3, r2
 1001028:	e3530000 	cmp	r3, #0
 100102c:	1a000008 	bne	1001054 <alt_mmu_va_space_create+0x388>
                 (pa & (alignopt[j] - 1)) )
            {
                relalign = alignopt[j];
 1001030:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1001034:	e2433004 	sub	r3, r3, #4
 1001038:	e1a02003 	mov	r2, r3
 100103c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001040:	e1a03103 	lsl	r3, r3, #2
 1001044:	e0823003 	add	r3, r2, r3
 1001048:	e51330ac 	ldr	r3, [r3, #-172]	; 0xffffff54
 100104c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                break;
 1001050:	ea000005 	b	100106c <alt_mmu_va_space_create+0x3a0>
        for (j = 0; j < ARRAY_COUNT(alignopt); ++j)
 1001054:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001058:	e2833001 	add	r3, r3, #1
 100105c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1001060:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001064:	e3530002 	cmp	r3, #2
 1001068:	9affffe2 	bls	1000ff8 <alt_mmu_va_space_create+0x32c>
        }

        /* Page the 1 MiB unaligned segment of [va]. Areas requiring page tables
         * should already have those page tables created previously in this
         * function. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
 100106c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001070:	e7f33053 	ubfx	r3, r3, #0, #20
 1001074:	e3530000 	cmp	r3, #0
 1001078:	0a00010f 	beq	10014bc <alt_mmu_va_space_create+0x7f0>
        {
            /* This is the size of the memory segment after paging which will cause the [va] to align to a 1 MiB,
             * or up to the size of the region being processed, whichever is smaller. */
            uint32_t segsize = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
 100107c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001080:	e7f33053 	ubfx	r3, r3, #0, #20
 1001084:	e2633601 	rsb	r3, r3, #1048576	; 0x100000
 1001088:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 100108c:	e1520003 	cmp	r2, r3
 1001090:	31a03002 	movcc	r3, r2
 1001094:	21a03003 	movcs	r3, r3
 1001098:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
 100109c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 10010a0:	e3530801 	cmp	r3, #65536	; 0x10000
 10010a4:	3a000101 	bcc	10014b0 <alt_mmu_va_space_create+0x7e4>
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
 10010a8:	ea000038 	b	1001190 <alt_mmu_va_space_create+0x4c4>
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 10010ac:	e51b200c 	ldr	r2, [fp, #-12]
 10010b0:	e1a03002 	mov	r3, r2
 10010b4:	e1a03103 	lsl	r3, r3, #2
 10010b8:	e0833002 	add	r3, r3, r2
 10010bc:	e1a03103 	lsl	r3, r3, #2
 10010c0:	e1a02003 	mov	r2, r3
 10010c4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10010c8:	e2433004 	sub	r3, r3, #4
 10010cc:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10010d0:	e0833002 	add	r3, r3, r2
 10010d4:	e1a01003 	mov	r1, r3
 10010d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10010dc:	ebfffe61 	bl	1000a68 <alt_mmu_va_space_gen_smallpage>
 10010e0:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10010e4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10010e8:	e2433004 	sub	r3, r3, #4
 10010ec:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10010f0:	e5932000 	ldr	r2, [r3]
 10010f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10010f8:	e1a03a23 	lsr	r3, r3, #20
 10010fc:	e1a03103 	lsl	r3, r3, #2
 1001100:	e0823003 	add	r3, r2, r3
 1001104:	e5933000 	ldr	r3, [r3]
 1001108:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 100110c:	e3c33003 	bic	r3, r3, #3
 1001110:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1001114:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001118:	e1a03623 	lsr	r3, r3, #12
 100111c:	e6ef3073 	uxtb	r3, r3
 1001120:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8

                    /* Detect if an existing non-fault region has already been created.
                     * We cannot detect if a fault region is requested and a region description is already a fault,
                     * which it is by default. */
                    if (pagetable[ptindex] != 0)
 1001124:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
 1001128:	e1a03103 	lsl	r3, r3, #2
 100112c:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
 1001130:	e0823003 	add	r3, r2, r3
 1001134:	e5933000 	ldr	r3, [r3]
 1001138:	e3530000 	cmp	r3, #0
 100113c:	0a000001 	beq	1001148 <alt_mmu_va_space_create+0x47c>
                    {
                        return ALT_E_ERROR;
 1001140:	e3e03000 	mvn	r3, #0
 1001144:	ea000253 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 1001148:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
 100114c:	e1a03103 	lsl	r3, r3, #2
 1001150:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
 1001154:	e0823003 	add	r3, r2, r3
 1001158:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
 100115c:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 1001160:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001164:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1001168:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 100116c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001170:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1001174:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 1001178:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 100117c:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1001180:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 1001184:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001188:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 100118c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
 1001190:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001194:	e6ff3073 	uxth	r3, r3
 1001198:	e3530000 	cmp	r3, #0
 100119c:	0a000049 	beq	10012c8 <alt_mmu_va_space_create+0x5fc>
 10011a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10011a4:	e3530a01 	cmp	r3, #4096	; 0x1000
 10011a8:	2affffbf 	bcs	10010ac <alt_mmu_va_space_create+0x3e0>
                }

                /* Use large pages for the rest of the 64 KiB aligned areas. */
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
 10011ac:	ea000045 	b	10012c8 <alt_mmu_va_space_create+0x5fc>
                {
                    uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);
 10011b0:	e51b200c 	ldr	r2, [fp, #-12]
 10011b4:	e1a03002 	mov	r3, r2
 10011b8:	e1a03103 	lsl	r3, r3, #2
 10011bc:	e0833002 	add	r3, r3, r2
 10011c0:	e1a03103 	lsl	r3, r3, #2
 10011c4:	e1a02003 	mov	r2, r3
 10011c8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10011cc:	e2433004 	sub	r3, r3, #4
 10011d0:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10011d4:	e0833002 	add	r3, r3, r2
 10011d8:	e1a01003 	mov	r1, r3
 10011dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10011e0:	ebfffe63 	bl	1000b74 <alt_mmu_va_space_gen_largepage>
 10011e4:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10011e8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10011ec:	e2433004 	sub	r3, r3, #4
 10011f0:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10011f4:	e5932000 	ldr	r2, [r3]
 10011f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10011fc:	e1a03a23 	lsr	r3, r3, #20
 1001200:	e1a03103 	lsl	r3, r3, #2
 1001204:	e0823003 	add	r3, r2, r3
 1001208:	e5933000 	ldr	r3, [r3]
 100120c:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1001210:	e3c33003 	bic	r3, r3, #3
 1001214:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1001218:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100121c:	e1a03623 	lsr	r3, r3, #12
 1001220:	e6ef3073 	uxtb	r3, r3
 1001224:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0

                    for (j = 0; j < 16; ++j)
 1001228:	e3a03000 	mov	r3, #0
 100122c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 1001230:	ea000015 	b	100128c <alt_mmu_va_space_create+0x5c0>
                    {
                        if (pagetable[ptindex + j] != 0)
 1001234:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
 1001238:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100123c:	e0823003 	add	r3, r2, r3
 1001240:	e1a03103 	lsl	r3, r3, #2
 1001244:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
 1001248:	e0823003 	add	r3, r2, r3
 100124c:	e5933000 	ldr	r3, [r3]
 1001250:	e3530000 	cmp	r3, #0
 1001254:	0a000001 	beq	1001260 <alt_mmu_va_space_create+0x594>
                        {
                            return ALT_E_ERROR;
 1001258:	e3e03000 	mvn	r3, #0
 100125c:	ea00020d 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
                        }

                        pagetable[ptindex + j] = desc;
 1001260:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
 1001264:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001268:	e0823003 	add	r3, r2, r3
 100126c:	e1a03103 	lsl	r3, r3, #2
 1001270:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
 1001274:	e0823003 	add	r3, r2, r3
 1001278:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
 100127c:	e5832000 	str	r2, [r3]
                    for (j = 0; j < 16; ++j)
 1001280:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001284:	e2833001 	add	r3, r3, #1
 1001288:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 100128c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001290:	e353000f 	cmp	r3, #15
 1001294:	9affffe6 	bls	1001234 <alt_mmu_va_space_create+0x568>
                    }

                    va      += ALT_MMU_LARGE_PAGE_SIZE;
 1001298:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100129c:	e2833801 	add	r3, r3, #65536	; 0x10000
 10012a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_LARGE_PAGE_SIZE;
 10012a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 10012a8:	e2833801 	add	r3, r3, #65536	; 0x10000
 10012ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_LARGE_PAGE_SIZE;
 10012b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10012b4:	e2433801 	sub	r3, r3, #65536	; 0x10000
 10012b8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
 10012bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10012c0:	e2433801 	sub	r3, r3, #65536	; 0x10000
 10012c4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
 10012c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10012cc:	e3530801 	cmp	r3, #65536	; 0x10000
 10012d0:	2affffb6 	bcs	10011b0 <alt_mmu_va_space_create+0x4e4>
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 10012d4:	ea000038 	b	10013bc <alt_mmu_va_space_create+0x6f0>
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 10012d8:	e51b200c 	ldr	r2, [fp, #-12]
 10012dc:	e1a03002 	mov	r3, r2
 10012e0:	e1a03103 	lsl	r3, r3, #2
 10012e4:	e0833002 	add	r3, r3, r2
 10012e8:	e1a03103 	lsl	r3, r3, #2
 10012ec:	e1a02003 	mov	r2, r3
 10012f0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10012f4:	e2433004 	sub	r3, r3, #4
 10012f8:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10012fc:	e0833002 	add	r3, r3, r2
 1001300:	e1a01003 	mov	r1, r3
 1001304:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1001308:	ebfffdd6 	bl	1000a68 <alt_mmu_va_space_gen_smallpage>
 100130c:	e50b004c 	str	r0, [fp, #-76]	; 0xffffffb4

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1001310:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1001314:	e2433004 	sub	r3, r3, #4
 1001318:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 100131c:	e5932000 	ldr	r2, [r3]
 1001320:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001324:	e1a03a23 	lsr	r3, r3, #20
 1001328:	e1a03103 	lsl	r3, r3, #2
 100132c:	e0823003 	add	r3, r2, r3
 1001330:	e5933000 	ldr	r3, [r3]
 1001334:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 1001338:	e3c33003 	bic	r3, r3, #3
 100133c:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1001340:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001344:	e1a03623 	lsr	r3, r3, #12
 1001348:	e6ef3073 	uxtb	r3, r3
 100134c:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac

                    if (pagetable[ptindex] != 0)
 1001350:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
 1001354:	e1a03103 	lsl	r3, r3, #2
 1001358:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
 100135c:	e0823003 	add	r3, r2, r3
 1001360:	e5933000 	ldr	r3, [r3]
 1001364:	e3530000 	cmp	r3, #0
 1001368:	0a000001 	beq	1001374 <alt_mmu_va_space_create+0x6a8>
                    {
                        return ALT_E_ERROR;
 100136c:	e3e03000 	mvn	r3, #0
 1001370:	ea0001c8 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 1001374:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
 1001378:	e1a03103 	lsl	r3, r3, #2
 100137c:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
 1001380:	e0823003 	add	r3, r2, r3
 1001384:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
 1001388:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 100138c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001390:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1001394:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 1001398:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100139c:	e2833a01 	add	r3, r3, #4096	; 0x1000
 10013a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 10013a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10013a8:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 10013ac:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 10013b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10013b4:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 10013b8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 10013bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10013c0:	e3530a01 	cmp	r3, #4096	; 0x1000
 10013c4:	2affffc3 	bcs	10012d8 <alt_mmu_va_space_create+0x60c>
 10013c8:	ea00003b 	b	10014bc <alt_mmu_va_space_create+0x7f0>
            else
            {
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 10013cc:	e51b200c 	ldr	r2, [fp, #-12]
 10013d0:	e1a03002 	mov	r3, r2
 10013d4:	e1a03103 	lsl	r3, r3, #2
 10013d8:	e0833002 	add	r3, r3, r2
 10013dc:	e1a03103 	lsl	r3, r3, #2
 10013e0:	e1a02003 	mov	r2, r3
 10013e4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10013e8:	e2433004 	sub	r3, r3, #4
 10013ec:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10013f0:	e0833002 	add	r3, r3, r2
 10013f4:	e1a01003 	mov	r1, r3
 10013f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10013fc:	ebfffd99 	bl	1000a68 <alt_mmu_va_space_gen_smallpage>
 1001400:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 1001404:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1001408:	e2433004 	sub	r3, r3, #4
 100140c:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1001410:	e5932000 	ldr	r2, [r3]
 1001414:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001418:	e1a03a23 	lsr	r3, r3, #20
 100141c:	e1a03103 	lsl	r3, r3, #2
 1001420:	e0823003 	add	r3, r2, r3
 1001424:	e5933000 	ldr	r3, [r3]
 1001428:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 100142c:	e3c33003 	bic	r3, r3, #3
 1001430:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 1001434:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001438:	e1a03623 	lsr	r3, r3, #12
 100143c:	e6ef3073 	uxtb	r3, r3
 1001440:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

                    if (pagetable[ptindex] != 0)
 1001444:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 1001448:	e1a03103 	lsl	r3, r3, #2
 100144c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 1001450:	e0823003 	add	r3, r2, r3
 1001454:	e5933000 	ldr	r3, [r3]
 1001458:	e3530000 	cmp	r3, #0
 100145c:	0a000001 	beq	1001468 <alt_mmu_va_space_create+0x79c>
                    {
                        return ALT_E_ERROR;
 1001460:	e3e03000 	mvn	r3, #0
 1001464:	ea00018b 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex] = desc;
 1001468:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 100146c:	e1a03103 	lsl	r3, r3, #2
 1001470:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 1001474:	e0823003 	add	r3, r2, r3
 1001478:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
 100147c:	e5832000 	str	r2, [r3]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
 1001480:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001484:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1001488:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
 100148c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001490:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1001494:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
 1001498:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 100149c:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 10014a0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
 10014a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10014a8:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 10014ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
 10014b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 10014b4:	e3530a01 	cmp	r3, #4096	; 0x1000
 10014b8:	2affffc3 	bcs	10013cc <alt_mmu_va_space_create+0x700>
        /* If [va] and [pa] are relatively 1 MiB aligned and the size remaining
         * to be described is greater than 1 MiB, use sections. */

        /* Otherwise use pagetables for everything remaining. */

        if (   (relalign >= ALT_MMU_SUPERSECTION_SIZE)
 10014bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 10014c0:	e3530401 	cmp	r3, #16777216	; 0x1000000
 10014c4:	3a0000aa 	bcc	1001774 <alt_mmu_va_space_create+0xaa8>
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
 10014c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10014cc:	e3530401 	cmp	r3, #16777216	; 0x1000000
 10014d0:	3a0000a7 	bcc	1001774 <alt_mmu_va_space_create+0xaa8>
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
 10014d4:	ea00002d 	b	1001590 <alt_mmu_va_space_create+0x8c4>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 10014d8:	e51b200c 	ldr	r2, [fp, #-12]
 10014dc:	e1a03002 	mov	r3, r2
 10014e0:	e1a03103 	lsl	r3, r3, #2
 10014e4:	e0833002 	add	r3, r3, r2
 10014e8:	e1a03103 	lsl	r3, r3, #2
 10014ec:	e1a02003 	mov	r2, r3
 10014f0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10014f4:	e2433004 	sub	r3, r3, #4
 10014f8:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10014fc:	e0833002 	add	r3, r3, r2
 1001500:	e1a01003 	mov	r1, r3
 1001504:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 1001508:	ebfffcc4 	bl	1000820 <alt_mmu_va_space_gen_section>
 100150c:	e50b0064 	str	r0, [fp, #-100]	; 0xffffff9c

                if ((*ttb1)[va >> 20] != 0)
 1001510:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1001514:	e2433004 	sub	r3, r3, #4
 1001518:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 100151c:	e5932000 	ldr	r2, [r3]
 1001520:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001524:	e1a03a23 	lsr	r3, r3, #20
 1001528:	e1a03103 	lsl	r3, r3, #2
 100152c:	e0823003 	add	r3, r2, r3
 1001530:	e5933000 	ldr	r3, [r3]
 1001534:	e3530000 	cmp	r3, #0
 1001538:	0a000001 	beq	1001544 <alt_mmu_va_space_create+0x878>
                {
                    return ALT_E_ERROR;
 100153c:	e3e03000 	mvn	r3, #0
 1001540:	ea000154 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 1001544:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1001548:	e2433004 	sub	r3, r3, #4
 100154c:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1001550:	e5932000 	ldr	r2, [r3]
 1001554:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001558:	e1a03a23 	lsr	r3, r3, #20
 100155c:	e1a03103 	lsl	r3, r3, #2
 1001560:	e0823003 	add	r3, r2, r3
 1001564:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
 1001568:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 100156c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001570:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1001574:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 1001578:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 100157c:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1001580:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 1001584:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001588:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 100158c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
 1001590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001594:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 1001598:	e3530000 	cmp	r3, #0
 100159c:	0a00003e 	beq	100169c <alt_mmu_va_space_create+0x9d0>
 10015a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10015a4:	e3530601 	cmp	r3, #1048576	; 0x100000
 10015a8:	2affffca 	bcs	10014d8 <alt_mmu_va_space_create+0x80c>
            }

            /* Use supersections for the 16 MiB aligned areas */
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
 10015ac:	ea00003a 	b	100169c <alt_mmu_va_space_create+0x9d0>
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);
 10015b0:	e51b200c 	ldr	r2, [fp, #-12]
 10015b4:	e1a03002 	mov	r3, r2
 10015b8:	e1a03103 	lsl	r3, r3, #2
 10015bc:	e0833002 	add	r3, r3, r2
 10015c0:	e1a03103 	lsl	r3, r3, #2
 10015c4:	e1a02003 	mov	r2, r3
 10015c8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10015cc:	e2433004 	sub	r3, r3, #4
 10015d0:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10015d4:	e0833002 	add	r3, r3, r2
 10015d8:	e1a01003 	mov	r1, r3
 10015dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10015e0:	ebfffcd7 	bl	1000944 <alt_mmu_va_space_gen_supersection>
 10015e4:	e50b006c 	str	r0, [fp, #-108]	; 0xffffff94

                for (j = 0; j < 16; ++j)
 10015e8:	e3a03000 	mov	r3, #0
 10015ec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 10015f0:	ea00001d 	b	100166c <alt_mmu_va_space_create+0x9a0>
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
 10015f4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10015f8:	e2433004 	sub	r3, r3, #4
 10015fc:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1001600:	e5932000 	ldr	r2, [r3]
 1001604:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001608:	e1a01a23 	lsr	r1, r3, #20
 100160c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001610:	e0813003 	add	r3, r1, r3
 1001614:	e1a03103 	lsl	r3, r3, #2
 1001618:	e0823003 	add	r3, r2, r3
 100161c:	e5933000 	ldr	r3, [r3]
 1001620:	e3530000 	cmp	r3, #0
 1001624:	0a000001 	beq	1001630 <alt_mmu_va_space_create+0x964>
                    {
                        return ALT_E_ERROR;
 1001628:	e3e03000 	mvn	r3, #0
 100162c:	ea000119 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
 1001630:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1001634:	e2433004 	sub	r3, r3, #4
 1001638:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 100163c:	e5932000 	ldr	r2, [r3]
 1001640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001644:	e1a01a23 	lsr	r1, r3, #20
 1001648:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 100164c:	e0813003 	add	r3, r1, r3
 1001650:	e1a03103 	lsl	r3, r3, #2
 1001654:	e0823003 	add	r3, r2, r3
 1001658:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
 100165c:	e5832000 	str	r2, [r3]
                for (j = 0; j < 16; ++j)
 1001660:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001664:	e2833001 	add	r3, r3, #1
 1001668:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 100166c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001670:	e353000f 	cmp	r3, #15
 1001674:	9affffde 	bls	10015f4 <alt_mmu_va_space_create+0x928>
                }

                va   += ALT_MMU_SUPERSECTION_SIZE;
 1001678:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100167c:	e2833401 	add	r3, r3, #16777216	; 0x1000000
 1001680:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SUPERSECTION_SIZE;
 1001684:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001688:	e2833401 	add	r3, r3, #16777216	; 0x1000000
 100168c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SUPERSECTION_SIZE;
 1001690:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001694:	e28334ff 	add	r3, r3, #-16777216	; 0xff000000
 1001698:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
 100169c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 10016a0:	e3530401 	cmp	r3, #16777216	; 0x1000000
 10016a4:	2affffc1 	bcs	10015b0 <alt_mmu_va_space_create+0x8e4>
            }

            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
 10016a8:	ea00002d 	b	1001764 <alt_mmu_va_space_create+0xa98>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 10016ac:	e51b200c 	ldr	r2, [fp, #-12]
 10016b0:	e1a03002 	mov	r3, r2
 10016b4:	e1a03103 	lsl	r3, r3, #2
 10016b8:	e0833002 	add	r3, r3, r2
 10016bc:	e1a03103 	lsl	r3, r3, #2
 10016c0:	e1a02003 	mov	r2, r3
 10016c4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10016c8:	e2433004 	sub	r3, r3, #4
 10016cc:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10016d0:	e0833002 	add	r3, r3, r2
 10016d4:	e1a01003 	mov	r1, r3
 10016d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10016dc:	ebfffc4f 	bl	1000820 <alt_mmu_va_space_gen_section>
 10016e0:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98

                if ((*ttb1)[va >> 20] != 0)
 10016e4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10016e8:	e2433004 	sub	r3, r3, #4
 10016ec:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10016f0:	e5932000 	ldr	r2, [r3]
 10016f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10016f8:	e1a03a23 	lsr	r3, r3, #20
 10016fc:	e1a03103 	lsl	r3, r3, #2
 1001700:	e0823003 	add	r3, r2, r3
 1001704:	e5933000 	ldr	r3, [r3]
 1001708:	e3530000 	cmp	r3, #0
 100170c:	0a000001 	beq	1001718 <alt_mmu_va_space_create+0xa4c>
                {
                    return ALT_E_ERROR;
 1001710:	e3e03000 	mvn	r3, #0
 1001714:	ea0000df 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 1001718:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 100171c:	e2433004 	sub	r3, r3, #4
 1001720:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1001724:	e5932000 	ldr	r2, [r3]
 1001728:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100172c:	e1a03a23 	lsr	r3, r3, #20
 1001730:	e1a03103 	lsl	r3, r3, #2
 1001734:	e0823003 	add	r3, r2, r3
 1001738:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
 100173c:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 1001740:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001744:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1001748:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 100174c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001750:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1001754:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 1001758:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100175c:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1001760:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SECTION_SIZE)
 1001764:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001768:	e3530601 	cmp	r3, #1048576	; 0x100000
 100176c:	2affffce 	bcs	10016ac <alt_mmu_va_space_create+0x9e0>
        if (   (relalign >= ALT_MMU_SUPERSECTION_SIZE)
 1001770:	ea000037 	b	1001854 <alt_mmu_va_space_create+0xb88>
            }
        }
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
 1001774:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1001778:	e3530601 	cmp	r3, #1048576	; 0x100000
 100177c:	3a000034 	bcc	1001854 <alt_mmu_va_space_create+0xb88>
                 && (size     >= ALT_MMU_SECTION_SIZE))
 1001780:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001784:	e3530601 	cmp	r3, #1048576	; 0x100000
 1001788:	3a000031 	bcc	1001854 <alt_mmu_va_space_create+0xb88>
        {
            /* No supersection possible. Use regular sections only. */

            while (size >= ALT_MMU_SECTION_SIZE)
 100178c:	ea00002d 	b	1001848 <alt_mmu_va_space_create+0xb7c>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);
 1001790:	e51b200c 	ldr	r2, [fp, #-12]
 1001794:	e1a03002 	mov	r3, r2
 1001798:	e1a03103 	lsl	r3, r3, #2
 100179c:	e0833002 	add	r3, r3, r2
 10017a0:	e1a03103 	lsl	r3, r3, #2
 10017a4:	e1a02003 	mov	r2, r3
 10017a8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10017ac:	e2433004 	sub	r3, r3, #4
 10017b0:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10017b4:	e0833002 	add	r3, r3, r2
 10017b8:	e1a01003 	mov	r1, r3
 10017bc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10017c0:	ebfffc16 	bl	1000820 <alt_mmu_va_space_gen_section>
 10017c4:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90

                if ((*ttb1)[va >> 20] != 0)
 10017c8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10017cc:	e2433004 	sub	r3, r3, #4
 10017d0:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10017d4:	e5932000 	ldr	r2, [r3]
 10017d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10017dc:	e1a03a23 	lsr	r3, r3, #20
 10017e0:	e1a03103 	lsl	r3, r3, #2
 10017e4:	e0823003 	add	r3, r2, r3
 10017e8:	e5933000 	ldr	r3, [r3]
 10017ec:	e3530000 	cmp	r3, #0
 10017f0:	0a000001 	beq	10017fc <alt_mmu_va_space_create+0xb30>
                {
                    return ALT_E_ERROR;
 10017f4:	e3e03000 	mvn	r3, #0
 10017f8:	ea0000a6 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
                }

                (*ttb1)[va >> 20] = desc;
 10017fc:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1001800:	e2433004 	sub	r3, r3, #4
 1001804:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 1001808:	e5932000 	ldr	r2, [r3]
 100180c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001810:	e1a03a23 	lsr	r3, r3, #20
 1001814:	e1a03103 	lsl	r3, r3, #2
 1001818:	e0823003 	add	r3, r2, r3
 100181c:	e51b2070 	ldr	r2, [fp, #-112]	; 0xffffff90
 1001820:	e5832000 	str	r2, [r3]

                va   += ALT_MMU_SECTION_SIZE;
 1001824:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001828:	e2833601 	add	r3, r3, #1048576	; 0x100000
 100182c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_SECTION_SIZE;
 1001830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001834:	e2833601 	add	r3, r3, #1048576	; 0x100000
 1001838:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_SECTION_SIZE;
 100183c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001840:	e2433601 	sub	r3, r3, #1048576	; 0x100000
 1001844:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_SECTION_SIZE)
 1001848:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 100184c:	e3530601 	cmp	r3, #1048576	; 0x100000
 1001850:	2affffce 	bcs	1001790 <alt_mmu_va_space_create+0xac4>

        /* The remainder should be [va] 1 MiB aligned segment not able to use
         * sections or supersections. Mark that region as pagetable. */

        /* Use large pages if it is suitable. */
        if ((relalign >= ALT_MMU_LARGE_PAGE_SIZE) && (size >= ALT_MMU_LARGE_PAGE_SIZE))
 1001854:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 1001858:	e3530801 	cmp	r3, #65536	; 0x10000
 100185c:	3a000080 	bcc	1001a64 <alt_mmu_va_space_create+0xd98>
 1001860:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001864:	e3530801 	cmp	r3, #65536	; 0x10000
 1001868:	3a00007d 	bcc	1001a64 <alt_mmu_va_space_create+0xd98>
        {
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
 100186c:	ea000042 	b	100197c <alt_mmu_va_space_create+0xcb0>
            {
                uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);
 1001870:	e51b200c 	ldr	r2, [fp, #-12]
 1001874:	e1a03002 	mov	r3, r2
 1001878:	e1a03103 	lsl	r3, r3, #2
 100187c:	e0833002 	add	r3, r3, r2
 1001880:	e1a03103 	lsl	r3, r3, #2
 1001884:	e1a02003 	mov	r2, r3
 1001888:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 100188c:	e2433004 	sub	r3, r3, #4
 1001890:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 1001894:	e0833002 	add	r3, r3, r2
 1001898:	e1a01003 	mov	r1, r3
 100189c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10018a0:	ebfffcb3 	bl	1000b74 <alt_mmu_va_space_gen_largepage>
 10018a4:	e50b0074 	str	r0, [fp, #-116]	; 0xffffff8c

                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10018a8:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10018ac:	e2433004 	sub	r3, r3, #4
 10018b0:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10018b4:	e5932000 	ldr	r2, [r3]
 10018b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10018bc:	e1a03a23 	lsr	r3, r3, #20
 10018c0:	e1a03103 	lsl	r3, r3, #2
 10018c4:	e0823003 	add	r3, r2, r3
 10018c8:	e5933000 	ldr	r3, [r3]
 10018cc:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10018d0:	e3c33003 	bic	r3, r3, #3
 10018d4:	e50b3078 	str	r3, [fp, #-120]	; 0xffffff88
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 10018d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10018dc:	e1a03623 	lsr	r3, r3, #12
 10018e0:	e6ef3073 	uxtb	r3, r3
 10018e4:	e50b307c 	str	r3, [fp, #-124]	; 0xffffff84

                for (j = 0; j < 16; ++j)
 10018e8:	e3a03000 	mov	r3, #0
 10018ec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 10018f0:	ea000015 	b	100194c <alt_mmu_va_space_create+0xc80>
                {
                    if (pagetable[ptindex + j] != 0)
 10018f4:	e51b207c 	ldr	r2, [fp, #-124]	; 0xffffff84
 10018f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 10018fc:	e0823003 	add	r3, r2, r3
 1001900:	e1a03103 	lsl	r3, r3, #2
 1001904:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
 1001908:	e0823003 	add	r3, r2, r3
 100190c:	e5933000 	ldr	r3, [r3]
 1001910:	e3530000 	cmp	r3, #0
 1001914:	0a000001 	beq	1001920 <alt_mmu_va_space_create+0xc54>
                    {
                        return ALT_E_ERROR;
 1001918:	e3e03000 	mvn	r3, #0
 100191c:	ea00005d 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
                    }

                    pagetable[ptindex + j] = desc;
 1001920:	e51b207c 	ldr	r2, [fp, #-124]	; 0xffffff84
 1001924:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001928:	e0823003 	add	r3, r2, r3
 100192c:	e1a03103 	lsl	r3, r3, #2
 1001930:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
 1001934:	e0823003 	add	r3, r2, r3
 1001938:	e51b2074 	ldr	r2, [fp, #-116]	; 0xffffff8c
 100193c:	e5832000 	str	r2, [r3]
                for (j = 0; j < 16; ++j)
 1001940:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001944:	e2833001 	add	r3, r3, #1
 1001948:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 100194c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001950:	e353000f 	cmp	r3, #15
 1001954:	9affffe6 	bls	10018f4 <alt_mmu_va_space_create+0xc28>
                }

                va   += ALT_MMU_LARGE_PAGE_SIZE;
 1001958:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 100195c:	e2833801 	add	r3, r3, #65536	; 0x10000
 1001960:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
 1001964:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001968:	e2833801 	add	r3, r3, #65536	; 0x10000
 100196c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                size -= ALT_MMU_LARGE_PAGE_SIZE;
 1001970:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001974:	e2433801 	sub	r3, r3, #65536	; 0x10000
 1001978:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
 100197c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001980:	e3530801 	cmp	r3, #65536	; 0x10000
 1001984:	2affffb9 	bcs	1001870 <alt_mmu_va_space_create+0xba4>
            }
        }

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
 1001988:	ea000035 	b	1001a64 <alt_mmu_va_space_create+0xd98>
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);
 100198c:	e51b200c 	ldr	r2, [fp, #-12]
 1001990:	e1a03002 	mov	r3, r2
 1001994:	e1a03103 	lsl	r3, r3, #2
 1001998:	e0833002 	add	r3, r3, r2
 100199c:	e1a03103 	lsl	r3, r3, #2
 10019a0:	e1a02003 	mov	r2, r3
 10019a4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10019a8:	e2433004 	sub	r3, r3, #4
 10019ac:	e51330b8 	ldr	r3, [r3, #-184]	; 0xffffff48
 10019b0:	e0833002 	add	r3, r3, r2
 10019b4:	e1a01003 	mov	r1, r3
 10019b8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 10019bc:	ebfffc29 	bl	1000a68 <alt_mmu_va_space_gen_smallpage>
 10019c0:	e50b0080 	str	r0, [fp, #-128]	; 0xffffff80

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
 10019c4:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 10019c8:	e2433004 	sub	r3, r3, #4
 10019cc:	e51330b4 	ldr	r3, [r3, #-180]	; 0xffffff4c
 10019d0:	e5932000 	ldr	r2, [r3]
 10019d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10019d8:	e1a03a23 	lsr	r3, r3, #20
 10019dc:	e1a03103 	lsl	r3, r3, #2
 10019e0:	e0823003 	add	r3, r2, r3
 10019e4:	e5933000 	ldr	r3, [r3]
 10019e8:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc
 10019ec:	e3c33003 	bic	r3, r3, #3
 10019f0:	e50b3084 	str	r3, [fp, #-132]	; 0xffffff7c
            uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
 10019f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 10019f8:	e1a03623 	lsr	r3, r3, #12
 10019fc:	e6ef3073 	uxtb	r3, r3
 1001a00:	e50b3088 	str	r3, [fp, #-136]	; 0xffffff78

            if (pagetable[ptindex] != 0)
 1001a04:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
 1001a08:	e1a03103 	lsl	r3, r3, #2
 1001a0c:	e51b2084 	ldr	r2, [fp, #-132]	; 0xffffff7c
 1001a10:	e0823003 	add	r3, r2, r3
 1001a14:	e5933000 	ldr	r3, [r3]
 1001a18:	e3530000 	cmp	r3, #0
 1001a1c:	0a000001 	beq	1001a28 <alt_mmu_va_space_create+0xd5c>
            {
                return ALT_E_ERROR;
 1001a20:	e3e03000 	mvn	r3, #0
 1001a24:	ea00001b 	b	1001a98 <alt_mmu_va_space_create+0xdcc>
            }

            pagetable[ptindex] = desc;
 1001a28:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
 1001a2c:	e1a03103 	lsl	r3, r3, #2
 1001a30:	e51b2084 	ldr	r2, [fp, #-132]	; 0xffffff7c
 1001a34:	e0823003 	add	r3, r2, r3
 1001a38:	e51b2080 	ldr	r2, [fp, #-128]	; 0xffffff80
 1001a3c:	e5832000 	str	r2, [r3]

            va   += ALT_MMU_SMALL_PAGE_SIZE;
 1001a40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 1001a44:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1001a48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            pa   += ALT_MMU_SMALL_PAGE_SIZE;
 1001a4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001a50:	e2833a01 	add	r3, r3, #4096	; 0x1000
 1001a54:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            size -= ALT_MMU_SMALL_PAGE_SIZE;
 1001a58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001a5c:	e2433a01 	sub	r3, r3, #4096	; 0x1000
 1001a60:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
 1001a64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001a68:	e3530a01 	cmp	r3, #4096	; 0x1000
 1001a6c:	2affffc6 	bcs	100198c <alt_mmu_va_space_create+0xcc0>
    for (i = 0; i < num_mem_regions; ++i)
 1001a70:	e51b300c 	ldr	r3, [fp, #-12]
 1001a74:	e2833001 	add	r3, r3, #1
 1001a78:	e50b300c 	str	r3, [fp, #-12]
 1001a7c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
 1001a80:	e2433004 	sub	r3, r3, #4
 1001a84:	e51b200c 	ldr	r2, [fp, #-12]
 1001a88:	e51330bc 	ldr	r3, [r3, #-188]	; 0xffffff44
 1001a8c:	e1520003 	cmp	r2, r3
 1001a90:	3afffd27 	bcc	1000f34 <alt_mmu_va_space_create+0x268>
        }

    } /* for (size_t i = 0; i < num_mem_regions; ++i) */

    return ALT_E_SUCCESS;
 1001a94:	e3a03000 	mov	r3, #0
}
 1001a98:	e1a00003 	mov	r0, r3
 1001a9c:	e24bd004 	sub	sp, fp, #4
 1001aa0:	e8bd8800 	pop	{fp, pc}

01001aa4 <alt_mmu_va_space_enable>:

ALT_STATUS_CODE alt_mmu_va_space_enable(const uint32_t * ttb1)
{
 1001aa4:	e92d4800 	push	{fp, lr}
 1001aa8:	e28db004 	add	fp, sp, #4
 1001aac:	e24dd020 	sub	sp, sp, #32
 1001ab0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
 1001ab4:	e3a03000 	mov	r3, #0
 1001ab8:	e50b3008 	str	r3, [fp, #-8]

    /* Set TTBCR to use N=0 */
    if (status == ALT_E_SUCCESS)
 1001abc:	e51b3008 	ldr	r3, [fp, #-8]
 1001ac0:	e3530000 	cmp	r3, #0
 1001ac4:	1a00000b 	bne	1001af8 <alt_mmu_va_space_enable+0x54>
    {
        status = alt_mmu_TTBCR_set(true,
 1001ac8:	e3a02000 	mov	r2, #0
 1001acc:	e3a01001 	mov	r1, #1
 1001ad0:	e3a00001 	mov	r0, #1
 1001ad4:	ebfff9c9 	bl	1000200 <alt_mmu_TTBCR_set>
 1001ad8:	e50b0008 	str	r0, [fp, #-8]
                                   true,
                                   0);
        if (status != ALT_E_SUCCESS)
 1001adc:	e51b3008 	ldr	r3, [fp, #-8]
 1001ae0:	e3530000 	cmp	r3, #0
 1001ae4:	0a000003 	beq	1001af8 <alt_mmu_va_space_enable+0x54>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1001ae8:	e3a01d15 	mov	r1, #1344	; 0x540
 1001aec:	e3020350 	movw	r0, #9040	; 0x2350
 1001af0:	e3400100 	movt	r0, #256	; 0x100
 1001af4:	ebfff942 	bl	1000004 <null_printf>
        }
    }

    /* Set TTBR0 to use ttb1 */

    if (status == ALT_E_SUCCESS)
 1001af8:	e51b3008 	ldr	r3, [fp, #-8]
 1001afc:	e3530000 	cmp	r3, #0
 1001b00:	1a000009 	bne	1001b2c <alt_mmu_va_space_enable+0x88>
    {
        status = alt_mmu_TTBR0_set(ttb1);
 1001b04:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 1001b08:	ebfff984 	bl	1000120 <alt_mmu_TTBR0_set>
 1001b0c:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 1001b10:	e51b3008 	ldr	r3, [fp, #-8]
 1001b14:	e3530000 	cmp	r3, #0
 1001b18:	0a000003 	beq	1001b2c <alt_mmu_va_space_enable+0x88>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1001b1c:	e300154b 	movw	r1, #1355	; 0x54b
 1001b20:	e3020350 	movw	r0, #9040	; 0x2350
 1001b24:	e3400100 	movt	r0, #256	; 0x100
 1001b28:	ebfff935 	bl	1000004 <null_printf>
        }
    }

    /* Configure DACRs to be client domain. */

    if (status == ALT_E_SUCCESS)
 1001b2c:	e51b3008 	ldr	r3, [fp, #-8]
 1001b30:	e3530000 	cmp	r3, #0
 1001b34:	1a000019 	bne	1001ba0 <alt_mmu_va_space_enable+0xfc>
    {
        int i;
        ALT_MMU_DAP_t domain_ap[16];
        for (i = 0; i < 16; ++i)
 1001b38:	e3a03000 	mov	r3, #0
 1001b3c:	e50b300c 	str	r3, [fp, #-12]
 1001b40:	ea000007 	b	1001b64 <alt_mmu_va_space_enable+0xc0>
        {
            domain_ap[i] = ALT_MMU_DAP_CLIENT;
 1001b44:	e24b201c 	sub	r2, fp, #28
 1001b48:	e51b300c 	ldr	r3, [fp, #-12]
 1001b4c:	e0823003 	add	r3, r2, r3
 1001b50:	e3a02001 	mov	r2, #1
 1001b54:	e5c32000 	strb	r2, [r3]
        for (i = 0; i < 16; ++i)
 1001b58:	e51b300c 	ldr	r3, [fp, #-12]
 1001b5c:	e2833001 	add	r3, r3, #1
 1001b60:	e50b300c 	str	r3, [fp, #-12]
 1001b64:	e51b300c 	ldr	r3, [fp, #-12]
 1001b68:	e353000f 	cmp	r3, #15
 1001b6c:	dafffff4 	ble	1001b44 <alt_mmu_va_space_enable+0xa0>
        }

        status = alt_mmu_DACR_set(domain_ap, 16);
 1001b70:	e24b301c 	sub	r3, fp, #28
 1001b74:	e3a01010 	mov	r1, #16
 1001b78:	e1a00003 	mov	r0, r3
 1001b7c:	ebfff9cc 	bl	10002b4 <alt_mmu_DACR_set>
 1001b80:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 1001b84:	e51b3008 	ldr	r3, [fp, #-8]
 1001b88:	e3530000 	cmp	r3, #0
 1001b8c:	0a000003 	beq	1001ba0 <alt_mmu_va_space_enable+0xfc>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1001b90:	e300155d 	movw	r1, #1373	; 0x55d
 1001b94:	e3020350 	movw	r0, #9040	; 0x2350
 1001b98:	e3400100 	movt	r0, #256	; 0x100
 1001b9c:	ebfff918 	bl	1000004 <null_printf>
        }
    }

    /* Enable MMU (implicitly invalidates TLBs) */

    if (status == ALT_E_SUCCESS)
 1001ba0:	e51b3008 	ldr	r3, [fp, #-8]
 1001ba4:	e3530000 	cmp	r3, #0
 1001ba8:	1a000008 	bne	1001bd0 <alt_mmu_va_space_enable+0x12c>
    {
        status = alt_mmu_enable();
 1001bac:	ebfff947 	bl	10000d0 <alt_mmu_enable>
 1001bb0:	e50b0008 	str	r0, [fp, #-8]
        if (status != ALT_E_SUCCESS)
 1001bb4:	e51b3008 	ldr	r3, [fp, #-8]
 1001bb8:	e3530000 	cmp	r3, #0
 1001bbc:	0a000003 	beq	1001bd0 <alt_mmu_va_space_enable+0x12c>
        {
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
 1001bc0:	e3001568 	movw	r1, #1384	; 0x568
 1001bc4:	e3020350 	movw	r0, #9040	; 0x2350
 1001bc8:	e3400100 	movt	r0, #256	; 0x100
 1001bcc:	ebfff90c 	bl	1000004 <null_printf>
        }
    }

    return status;
 1001bd0:	e51b3008 	ldr	r3, [fp, #-8]
}
 1001bd4:	e1a00003 	mov	r0, r3
 1001bd8:	e24bd004 	sub	sp, fp, #4
 1001bdc:	e8bd8800 	pop	{fp, pc}

01001be0 <zero_bss>:

#include "arm_mem_regions.h"
#include "shared_ipc.h"

static inline void zero_bss(void)
{
 1001be0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001be4:	e28db000 	add	fp, sp, #0
 1001be8:	e24dd00c 	sub	sp, sp, #12
    extern uint8_t __bss_start__;
    extern uint8_t __bss_end__;
    for (uint8_t *p = &__bss_start__; p < &__bss_end__; ++p) *p = 0;
 1001bec:	e3043000 	movw	r3, #16384	; 0x4000
 1001bf0:	e3403100 	movt	r3, #256	; 0x100
 1001bf4:	e50b3008 	str	r3, [fp, #-8]
 1001bf8:	ea000005 	b	1001c14 <zero_bss+0x34>
 1001bfc:	e51b3008 	ldr	r3, [fp, #-8]
 1001c00:	e3a02000 	mov	r2, #0
 1001c04:	e5c32000 	strb	r2, [r3]
 1001c08:	e51b3008 	ldr	r3, [fp, #-8]
 1001c0c:	e2833001 	add	r3, r3, #1
 1001c10:	e50b3008 	str	r3, [fp, #-8]
 1001c14:	e51b2008 	ldr	r2, [fp, #-8]
 1001c18:	e3043000 	movw	r3, #16384	; 0x4000
 1001c1c:	e3403101 	movt	r3, #257	; 0x101
 1001c20:	e1520003 	cmp	r2, r3
 1001c24:	3afffff4 	bcc	1001bfc <zero_bss+0x1c>
}
 1001c28:	e320f000 	nop	{0}
 1001c2c:	e320f000 	nop	{0}
 1001c30:	e28bd000 	add	sp, fp, #0
 1001c34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001c38:	e12fff1e 	bx	lr

01001c3c <set_vbar>:

extern char _vectors;  // dichiarazione simbolo dal linker/HWLIB
static inline void set_vbar(void *addr) {
 1001c3c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001c40:	e28db000 	add	fp, sp, #0
 1001c44:	e24dd00c 	sub	sp, sp, #12
 1001c48:	e50b0008 	str	r0, [fp, #-8]
    __asm__ volatile ("mcr p15,0,%0,c12,c0,0" :: "r"(addr) : "memory");
 1001c4c:	e51b3008 	ldr	r3, [fp, #-8]
 1001c50:	ee0c3f10 	mcr	15, 0, r3, cr12, cr0, {0}
    __asm__ volatile ("isb");
 1001c54:	f57ff06f 	isb	sy
}
 1001c58:	e320f000 	nop	{0}
 1001c5c:	e28bd000 	add	sp, fp, #0
 1001c60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001c64:	e12fff1e 	bx	lr

01001c68 <core1_main>:


void core1_main(void)
{
 1001c68:	e92d4800 	push	{fp, lr}
 1001c6c:	e28db004 	add	fp, sp, #4
	set_vbar(&_vectors);
 1001c70:	e3000000 	movw	r0, #0
 1001c74:	e3400100 	movt	r0, #256	; 0x100
 1001c78:	ebffffef 	bl	1001c3c <set_vbar>
    zero_bss();
 1001c7c:	ebffffd7 	bl	1001be0 <zero_bss>

    // MMU di Core1 (crea le regioni: DDR WBWA + SHM NON-CACHEABLE + Device)
    (void)arm_mmu_setup_core1();
 1001c80:	eb00012c 	bl	1002138 <arm_mmu_setup_core1>
    // UART (se Core0 l’ha già messa su, puoi solo usare printf;
    // in alternativa, re-inizializza uart1 qui)
    //uart_stdio_init_uart1(115200);

    // Attendi che Core0 abbia inizializzato tutto e “aperto” l’handshake
    while (SHM_CTRL->magic != SHM_MAGIC_BOOT) { /* spin */ }
 1001c84:	e320f000 	nop	{0}
 1001c88:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1001c8c:	e5932000 	ldr	r2, [r3]
 1001c90:	e3013dea 	movw	r3, #7658	; 0x1dea
 1001c94:	e34c30de 	movt	r3, #49374	; 0xc0de
 1001c98:	e1520003 	cmp	r2, r3
 1001c9c:	1afffff9 	bne	1001c88 <core1_main+0x20>
    while (SHM_CTRL->core0_ready != 1u)        { /* spin */ }
 1001ca0:	e320f000 	nop	{0}
 1001ca4:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1001ca8:	e5933004 	ldr	r3, [r3, #4]
 1001cac:	e3530001 	cmp	r3, #1
 1001cb0:	1afffffb 	bne	1001ca4 <core1_main+0x3c>

    // Saluta e dichiara “ready”
    //printf("\n[Core1] hello from DDR low. SHM @ 0x%08X ready.", SHM_BASE);
    SHM_CTRL->core1_ready = 1u;
 1001cb4:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1001cb8:	e5d32008 	ldrb	r2, [r3, #8]
 1001cbc:	e3a02000 	mov	r2, #0
 1001cc0:	e3822001 	orr	r2, r2, #1
 1001cc4:	e5c32008 	strb	r2, [r3, #8]
 1001cc8:	e5d32009 	ldrb	r2, [r3, #9]
 1001ccc:	e3a02000 	mov	r2, #0
 1001cd0:	e5c32009 	strb	r2, [r3, #9]
 1001cd4:	e5d3200a 	ldrb	r2, [r3, #10]
 1001cd8:	e3a02000 	mov	r2, #0
 1001cdc:	e5c3200a 	strb	r2, [r3, #10]
 1001ce0:	e5d3200b 	ldrb	r2, [r3, #11]
 1001ce4:	e3a02000 	mov	r2, #0
 1001ce8:	e5c3200b 	strb	r2, [r3, #11]
    __asm__ volatile("dmb sy" ::: "memory");
 1001cec:	f57ff05f 	dmb	sy

    // Esempio d’uso: aggiorna un contatore condiviso
    for (;;) {
        SHM_CTRL->trig_count++;
 1001cf0:	e3a0343f 	mov	r3, #1056964608	; 0x3f000000
 1001cf4:	e593200c 	ldr	r2, [r3, #12]
 1001cf8:	e2822001 	add	r2, r2, #1
 1001cfc:	e583200c 	str	r2, [r3, #12]
        __asm__ volatile("dmb sy" ::: "memory");
 1001d00:	f57ff05f 	dmb	sy
        SHM_CTRL->trig_count++;
 1001d04:	eafffff9 	b	1001cf0 <core1_main+0x88>

01001d08 <core1_startup_body>:
extern unsigned long __data_start__, __data_end__, __data_load__;
extern void core1_main(void);

/* Entry linkata nel linker: ENTRY(_start_core1) */
static void __attribute__((used)) core1_startup_body(void)
{
 1001d08:	e92d4800 	push	{fp, lr}
 1001d0c:	e28db004 	add	fp, sp, #4
 1001d10:	e24dd008 	sub	sp, sp, #8

    /* azzera BSS */
    for (unsigned long *p = &__bss_start__; p < &__bss_end__; ++p) {
 1001d14:	e3043000 	movw	r3, #16384	; 0x4000
 1001d18:	e3403100 	movt	r3, #256	; 0x100
 1001d1c:	e50b3008 	str	r3, [fp, #-8]
 1001d20:	ea000005 	b	1001d3c <core1_startup_body+0x34>
        *p = 0UL;
 1001d24:	e51b3008 	ldr	r3, [fp, #-8]
 1001d28:	e3a02000 	mov	r2, #0
 1001d2c:	e5832000 	str	r2, [r3]
    for (unsigned long *p = &__bss_start__; p < &__bss_end__; ++p) {
 1001d30:	e51b3008 	ldr	r3, [fp, #-8]
 1001d34:	e2833004 	add	r3, r3, #4
 1001d38:	e50b3008 	str	r3, [fp, #-8]
 1001d3c:	e51b2008 	ldr	r2, [fp, #-8]
 1001d40:	e3043000 	movw	r3, #16384	; 0x4000
 1001d44:	e3403101 	movt	r3, #257	; 0x101
 1001d48:	e1520003 	cmp	r2, r3
 1001d4c:	3afffff4 	bcc	1001d24 <core1_startup_body+0x1c>
       // uint32_t vectors = (uint32_t)&__vectors_start__;
       // __asm__ volatile ("mcr p15,0,%0,c12,c0,0" :: "r"(vectors) : "memory");
       // __asm__ volatile("isb");
    */

    (void)core1_main();
 1001d50:	ebffffc4 	bl	1001c68 <core1_main>

    for (;;) { /* stop */ }
 1001d54:	eafffffe 	b	1001d54 <core1_startup_body+0x4c>

01001d58 <_start_core1>:

/* Entry linkata nel linker: ENTRY(_start_core1) */
void __attribute__((naked)) _start_core1(void)
{
    /* set SP in cima alla regione DDR_PRIV */
    __asm__ volatile (
 1001d58:	e59fd004 	ldr	sp, [pc, #4]	; 1001d64 <_start_core1+0xc>
 1001d5c:	eaffffe9 	b	1001d08 <core1_startup_body>
        "ldr sp, =__stack_top__\n\t"
        "b core1_startup_body\n\t"
        ::: "memory");
}
 1001d60:	e320f000 	nop	{0}
 1001d64:	3f000000 	svccc	0x00000000

01001d68 <memset>:
// src/core1/libc_min.c
#include <stddef.h>
#include <stdint.h>

void *memset(void *s, int c, size_t n)
{
 1001d68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001d6c:	e28db000 	add	fp, sp, #0
 1001d70:	e24dd01c 	sub	sp, sp, #28
 1001d74:	e50b0010 	str	r0, [fp, #-16]
 1001d78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 1001d7c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint8_t *p = (uint8_t *)s;
 1001d80:	e51b3010 	ldr	r3, [fp, #-16]
 1001d84:	e50b300c 	str	r3, [fp, #-12]
    for (size_t i = 0; i < n; ++i) p[i] = (uint8_t)c;
 1001d88:	e3a03000 	mov	r3, #0
 1001d8c:	e50b3008 	str	r3, [fp, #-8]
 1001d90:	ea000008 	b	1001db8 <memset+0x50>
 1001d94:	e51b200c 	ldr	r2, [fp, #-12]
 1001d98:	e51b3008 	ldr	r3, [fp, #-8]
 1001d9c:	e0823003 	add	r3, r2, r3
 1001da0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 1001da4:	e6ef2072 	uxtb	r2, r2
 1001da8:	e5c32000 	strb	r2, [r3]
 1001dac:	e51b3008 	ldr	r3, [fp, #-8]
 1001db0:	e2833001 	add	r3, r3, #1
 1001db4:	e50b3008 	str	r3, [fp, #-8]
 1001db8:	e51b2008 	ldr	r2, [fp, #-8]
 1001dbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001dc0:	e1520003 	cmp	r2, r3
 1001dc4:	3afffff2 	bcc	1001d94 <memset+0x2c>
    return s;
 1001dc8:	e51b3010 	ldr	r3, [fp, #-16]
}
 1001dcc:	e1a00003 	mov	r0, r3
 1001dd0:	e28bd000 	add	sp, fp, #0
 1001dd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001dd8:	e12fff1e 	bx	lr

01001ddc <memcpy>:

void *memcpy(void *dst, const void *src, size_t n)
{
 1001ddc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001de0:	e28db000 	add	fp, sp, #0
 1001de4:	e24dd024 	sub	sp, sp, #36	; 0x24
 1001de8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1001dec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 1001df0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    uint8_t *d = (uint8_t *)dst;
 1001df4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001df8:	e50b300c 	str	r3, [fp, #-12]
    const uint8_t *s = (const uint8_t *)src;
 1001dfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001e00:	e50b3010 	str	r3, [fp, #-16]
    for (size_t i = 0; i < n; ++i) d[i] = s[i];
 1001e04:	e3a03000 	mov	r3, #0
 1001e08:	e50b3008 	str	r3, [fp, #-8]
 1001e0c:	ea00000a 	b	1001e3c <memcpy+0x60>
 1001e10:	e51b2010 	ldr	r2, [fp, #-16]
 1001e14:	e51b3008 	ldr	r3, [fp, #-8]
 1001e18:	e0822003 	add	r2, r2, r3
 1001e1c:	e51b100c 	ldr	r1, [fp, #-12]
 1001e20:	e51b3008 	ldr	r3, [fp, #-8]
 1001e24:	e0813003 	add	r3, r1, r3
 1001e28:	e5d22000 	ldrb	r2, [r2]
 1001e2c:	e5c32000 	strb	r2, [r3]
 1001e30:	e51b3008 	ldr	r3, [fp, #-8]
 1001e34:	e2833001 	add	r3, r3, #1
 1001e38:	e50b3008 	str	r3, [fp, #-8]
 1001e3c:	e51b2008 	ldr	r2, [fp, #-8]
 1001e40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 1001e44:	e1520003 	cmp	r2, r3
 1001e48:	3afffff0 	bcc	1001e10 <memcpy+0x34>
    return dst;
 1001e4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
 1001e50:	e1a00003 	mov	r0, r3
 1001e54:	e28bd000 	add	sp, fp, #0
 1001e58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001e5c:	e12fff1e 	bx	lr

01001e60 <dsb>:

// ---------------------------
// Helpers CP15 / barriere
// ---------------------------
static inline void dmb(void){ __asm__ volatile("dmb sy" ::: "memory"); }
static inline void dsb(void){ __asm__ volatile("dsb sy" ::: "memory"); }
 1001e60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001e64:	e28db000 	add	fp, sp, #0
 1001e68:	f57ff04f 	dsb	sy
 1001e6c:	e320f000 	nop	{0}
 1001e70:	e28bd000 	add	sp, fp, #0
 1001e74:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001e78:	e12fff1e 	bx	lr

01001e7c <isb>:
static inline void isb(void){ __asm__ volatile("isb" ::: "memory"); }
 1001e7c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001e80:	e28db000 	add	fp, sp, #0
 1001e84:	f57ff06f 	isb	sy
 1001e88:	e320f000 	nop	{0}
 1001e8c:	e28bd000 	add	sp, fp, #0
 1001e90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001e94:	e12fff1e 	bx	lr

01001e98 <a9_sanitize_before_mmu>:


// Disabilita MMU/I/D/BP e invalida TLB (presume IRQ/FIQ OFF e VBAR già ok)
static inline void a9_sanitize_before_mmu(void)
{
 1001e98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001e9c:	e28db000 	add	fp, sp, #0
 1001ea0:	e24dd00c 	sub	sp, sp, #12
    // qui presumiamo già IRQ/FIQ disabilitati (cpsid if) e VBAR corretto
    uint32_t sctlr;
    __asm__ volatile("mrc p15,0,%0,c1,c0,0" : "=r"(sctlr));
 1001ea4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
 1001ea8:	e50b3008 	str	r3, [fp, #-8]

    // spegni MMU (M), D-cache (C), I-cache (I), Branch predictor (Z)
    sctlr &= ~( (1u<<0) | (1u<<2) | (1u<<12) | (1u<<11) );
 1001eac:	e51b3008 	ldr	r3, [fp, #-8]
 1001eb0:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
 1001eb4:	e3c33005 	bic	r3, r3, #5
 1001eb8:	e50b3008 	str	r3, [fp, #-8]
    __asm__ volatile("mcr p15,0,%0,c1,c0,0" :: "r"(sctlr));
 1001ebc:	e51b3008 	ldr	r3, [fp, #-8]
 1001ec0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    __asm__ volatile("dsb sy; isb");
 1001ec4:	f57ff04f 	dsb	sy
 1001ec8:	f57ff06f 	isb	sy

    // invalida TLB unificati
    __asm__ volatile("mcr p15,0,%0,c8,c7,0" :: "r"(0));
 1001ecc:	e3a03000 	mov	r3, #0
 1001ed0:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    __asm__ volatile("dsb sy; isb");
 1001ed4:	f57ff04f 	dsb	sy
 1001ed8:	f57ff06f 	isb	sy
}
 1001edc:	e320f000 	nop	{0}
 1001ee0:	e28bd000 	add	sp, fp, #0
 1001ee4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 1001ee8:	e12fff1e 	bx	lr

01001eec <arm_enable_smp_and_scu>:

// Abilita SMP + SCU (prima di accendere cache/MMU)
void arm_enable_smp_and_scu(void)
{
 1001eec:	e92d4800 	push	{fp, lr}
 1001ef0:	e28db004 	add	fp, sp, #4
 1001ef4:	e24dd008 	sub	sp, sp, #8
    uint32_t actlr;
    __asm__ volatile("mrc p15,0,%0,c1,c0,1":"=r"(actlr));
 1001ef8:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
 1001efc:	e50b3008 	str	r3, [fp, #-8]
    actlr |= (1u<<6); // ACTLR.SMP=1
 1001f00:	e51b3008 	ldr	r3, [fp, #-8]
 1001f04:	e3833040 	orr	r3, r3, #64	; 0x40
 1001f08:	e50b3008 	str	r3, [fp, #-8]
    __asm__ volatile("mcr p15,0,%0,c1,c0,1"::"r"(actlr));
 1001f0c:	e51b3008 	ldr	r3, [fp, #-8]
 1001f10:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    dsb(); isb();
 1001f14:	ebffffd1 	bl	1001e60 <dsb>
 1001f18:	ebffffd7 	bl	1001e7c <isb>

    volatile uint32_t *SCU_CTRL = (volatile uint32_t *)(uintptr_t)(A9_SCU_BASE + 0x00u);
 1001f1c:	e3a03903 	mov	r3, #49152	; 0xc000
 1001f20:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 1001f24:	e50b300c 	str	r3, [fp, #-12]
    *SCU_CTRL |= 1u; // enable SCU
 1001f28:	e51b300c 	ldr	r3, [fp, #-12]
 1001f2c:	e5933000 	ldr	r3, [r3]
 1001f30:	e3832001 	orr	r2, r3, #1
 1001f34:	e51b300c 	ldr	r3, [fp, #-12]
 1001f38:	e5832000 	str	r2, [r3]
    dsb(); isb();
 1001f3c:	ebffffc7 	bl	1001e60 <dsb>
 1001f40:	ebffffcd 	bl	1001e7c <isb>
}
 1001f44:	e320f000 	nop	{0}
 1001f48:	e24bd004 	sub	sp, fp, #4
 1001f4c:	e8bd8800 	pop	{fp, pc}

01001f50 <mmu_aux_alloc>:
static uint8_t   s_mmu_aux_pool[64 * 1024] __attribute__((aligned(16384)));
static mmu_pool_t s_mmu_pool = { s_mmu_aux_pool, sizeof(s_mmu_aux_pool), 0 };

/* Allocatore con la FIRMA CORRETTA: (const unsigned int size, void *user_ctx) */
static void *mmu_aux_alloc(const unsigned int size, void *user_ctx)
{
 1001f50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1001f54:	e28db000 	add	fp, sp, #0
 1001f58:	e24dd01c 	sub	sp, sp, #28
 1001f5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 1001f60:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mmu_pool_t *pool = (mmu_pool_t *)user_ctx;
 1001f64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 1001f68:	e50b3008 	str	r3, [fp, #-8]
    if (!pool) return NULL;
 1001f6c:	e51b3008 	ldr	r3, [fp, #-8]
 1001f70:	e3530000 	cmp	r3, #0
 1001f74:	1a000001 	bne	1001f80 <mmu_aux_alloc+0x30>
 1001f78:	e3a03000 	mov	r3, #0
 1001f7c:	ea000023 	b	1002010 <mmu_aux_alloc+0xc0>

    /* Allineo a 16KB per richieste grandi (TTB), altrimenti 64B */
    const size_t align = (size >= 16384u) ? 16384u : 64u;
 1001f80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001f84:	e3530901 	cmp	r3, #16384	; 0x4000
 1001f88:	3a000001 	bcc	1001f94 <mmu_aux_alloc+0x44>
 1001f8c:	e3a03901 	mov	r3, #16384	; 0x4000
 1001f90:	ea000000 	b	1001f98 <mmu_aux_alloc+0x48>
 1001f94:	e3a03040 	mov	r3, #64	; 0x40
 1001f98:	e50b300c 	str	r3, [fp, #-12]
    size_t off = (pool->off + (align - 1u)) & ~(align - 1u);
 1001f9c:	e51b3008 	ldr	r3, [fp, #-8]
 1001fa0:	e5932008 	ldr	r2, [r3, #8]
 1001fa4:	e51b300c 	ldr	r3, [fp, #-12]
 1001fa8:	e0823003 	add	r3, r2, r3
 1001fac:	e2432001 	sub	r2, r3, #1
 1001fb0:	e51b300c 	ldr	r3, [fp, #-12]
 1001fb4:	e2633000 	rsb	r3, r3, #0
 1001fb8:	e0033002 	and	r3, r3, r2
 1001fbc:	e50b3010 	str	r3, [fp, #-16]

    if (off + size > pool->size) return NULL;
 1001fc0:	e51b2010 	ldr	r2, [fp, #-16]
 1001fc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1001fc8:	e0822003 	add	r2, r2, r3
 1001fcc:	e51b3008 	ldr	r3, [fp, #-8]
 1001fd0:	e5933004 	ldr	r3, [r3, #4]
 1001fd4:	e1520003 	cmp	r2, r3
 1001fd8:	9a000001 	bls	1001fe4 <mmu_aux_alloc+0x94>
 1001fdc:	e3a03000 	mov	r3, #0
 1001fe0:	ea00000a 	b	1002010 <mmu_aux_alloc+0xc0>

    void *ptr = pool->base + off;
 1001fe4:	e51b3008 	ldr	r3, [fp, #-8]
 1001fe8:	e5932000 	ldr	r2, [r3]
 1001fec:	e51b3010 	ldr	r3, [fp, #-16]
 1001ff0:	e0823003 	add	r3, r2, r3
 1001ff4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pool->off = off + size;
 1001ff8:	e51b2010 	ldr	r2, [fp, #-16]
 1001ffc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 1002000:	e0822003 	add	r2, r2, r3
 1002004:	e51b3008 	ldr	r3, [fp, #-8]
 1002008:	e5832008 	str	r2, [r3, #8]
    return ptr;
 100200c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
 1002010:	e1a00003 	mov	r0, r3
 1002014:	e28bd000 	add	sp, fp, #0
 1002018:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 100201c:	e12fff1e 	bx	lr

01002020 <create_va_space_core1_ddr>:


// VA space per CORE1: Shared low DDR + DDR privata core1 + SHM non-cache + periferiche HPS.
static ALT_STATUS_CODE create_va_space_core1_ddr(uint32_t **ttb_out)
{
 1002020:	e92d4800 	push	{fp, lr}
 1002024:	e28db004 	add	fp, sp, #4
 1002028:	e24dd070 	sub	sp, sp, #112	; 0x70
 100202c:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98
    ALT_STATUS_CODE s = alt_mmu_init();
 1002030:	ebfff7fc 	bl	1000028 <alt_mmu_init>
 1002034:	e50b0008 	str	r0, [fp, #-8]
    if (s != ALT_E_SUCCESS) return s;
 1002038:	e51b3008 	ldr	r3, [fp, #-8]
 100203c:	e3530000 	cmp	r3, #0
 1002040:	0a000001 	beq	100204c <create_va_space_core1_ddr+0x2c>
 1002044:	e51b3008 	ldr	r3, [fp, #-8]
 1002048:	ea000037 	b	100212c <create_va_space_core1_ddr+0x10c>

    s_mmu_pool.off = 0;
 100204c:	e3023610 	movw	r3, #9744	; 0x2610
 1002050:	e3403100 	movt	r3, #256	; 0x100
 1002054:	e3a02000 	mov	r2, #0
 1002058:	e5832008 	str	r2, [r3, #8]

    ALT_MMU_MEM_REGION_t regions[] = {
 100205c:	e3023588 	movw	r3, #9608	; 0x2588
 1002060:	e3403100 	movt	r3, #256	; 0x100
 1002064:	e24b0060 	sub	r0, fp, #96	; 0x60
 1002068:	e1a01003 	mov	r1, r3
 100206c:	e3a03050 	mov	r3, #80	; 0x50
 1002070:	e1a02003 	mov	r2, r3
 1002074:	ebffff58 	bl	1001ddc <memcpy>
            .execute    = ALT_MMU_TTB_XN_ENABLE,
            .security   = ALT_MMU_TTB_NS_SECURE
        }
    };

    size_t region_count = sizeof(regions)/sizeof(regions[0]);
 1002078:	e3a03004 	mov	r3, #4
 100207c:	e50b300c 	str	r3, [fp, #-12]
    size_t need = alt_mmu_va_space_storage_required(regions, region_count);
 1002080:	e24b3060 	sub	r3, fp, #96	; 0x60
 1002084:	e51b100c 	ldr	r1, [fp, #-12]
 1002088:	e1a00003 	mov	r0, r3
 100208c:	ebfff9b1 	bl	1000758 <alt_mmu_va_space_storage_required>
 1002090:	e50b0010 	str	r0, [fp, #-16]
    if (need > sizeof(s_ttb_storage)) return ALT_E_BAD_ARG;
 1002094:	e51b3010 	ldr	r3, [fp, #-16]
 1002098:	e3530801 	cmp	r3, #65536	; 0x10000
 100209c:	9a000001 	bls	10020a8 <create_va_space_core1_ddr+0x88>
 10020a0:	e3e03008 	mvn	r3, #8
 10020a4:	ea000020 	b	100212c <create_va_space_core1_ddr+0x10c>

    uint32_t *ttb1 = NULL;
 10020a8:	e3a03000 	mov	r3, #0
 10020ac:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    s = alt_mmu_va_space_create(&ttb1, regions, region_count,
 10020b0:	e24b1060 	sub	r1, fp, #96	; 0x60
 10020b4:	e24b0064 	sub	r0, fp, #100	; 0x64
 10020b8:	e3023610 	movw	r3, #9744	; 0x2610
 10020bc:	e3403100 	movt	r3, #256	; 0x100
 10020c0:	e58d3000 	str	r3, [sp]
 10020c4:	e3013f50 	movw	r3, #8016	; 0x1f50
 10020c8:	e3403100 	movt	r3, #256	; 0x100
 10020cc:	e51b200c 	ldr	r2, [fp, #-12]
 10020d0:	ebfffafd 	bl	1000ccc <alt_mmu_va_space_create>
 10020d4:	e50b0008 	str	r0, [fp, #-8]
                                /*ttb_alloc=*/mmu_aux_alloc,
                                /*ttb_alloc_user=*/&s_mmu_pool);
    if (s != ALT_E_SUCCESS) return s;
 10020d8:	e51b3008 	ldr	r3, [fp, #-8]
 10020dc:	e3530000 	cmp	r3, #0
 10020e0:	0a000001 	beq	10020ec <create_va_space_core1_ddr+0xcc>
 10020e4:	e51b3008 	ldr	r3, [fp, #-8]
 10020e8:	ea00000f 	b	100212c <create_va_space_core1_ddr+0x10c>

    s = alt_mmu_va_space_enable(ttb1);
 10020ec:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
 10020f0:	e1a00003 	mov	r0, r3
 10020f4:	ebfffe6a 	bl	1001aa4 <alt_mmu_va_space_enable>
 10020f8:	e50b0008 	str	r0, [fp, #-8]
    if (s != ALT_E_SUCCESS) return s;
 10020fc:	e51b3008 	ldr	r3, [fp, #-8]
 1002100:	e3530000 	cmp	r3, #0
 1002104:	0a000001 	beq	1002110 <create_va_space_core1_ddr+0xf0>
 1002108:	e51b3008 	ldr	r3, [fp, #-8]
 100210c:	ea000006 	b	100212c <create_va_space_core1_ddr+0x10c>

    if (ttb_out) *ttb_out = ttb1;
 1002110:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
 1002114:	e3530000 	cmp	r3, #0
 1002118:	0a000002 	beq	1002128 <create_va_space_core1_ddr+0x108>
 100211c:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
 1002120:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
 1002124:	e5832000 	str	r2, [r3]
    return ALT_E_SUCCESS;
 1002128:	e3a03000 	mov	r3, #0
}
 100212c:	e1a00003 	mov	r0, r3
 1002130:	e24bd004 	sub	sp, fp, #4
 1002134:	e8bd8800 	pop	{fp, pc}

01002138 <arm_mmu_setup_core1>:
	    return ALT_E_SUCCESS;
}

// Core1 → mappa [C1]
ALT_STATUS_CODE arm_mmu_setup_core1(void)
{
 1002138:	e92d4800 	push	{fp, lr}
 100213c:	e28db004 	add	fp, sp, #4
 1002140:	e24dd008 	sub	sp, sp, #8
    a9_sanitize_before_mmu();
 1002144:	ebffff53 	bl	1001e98 <a9_sanitize_before_mmu>
    arm_enable_smp_and_scu();
 1002148:	ebffff67 	bl	1001eec <arm_enable_smp_and_scu>

    uint32_t *ttb = NULL;
 100214c:	e3a03000 	mov	r3, #0
 1002150:	e50b300c 	str	r3, [fp, #-12]
    int s;
    s=create_va_space_core1_ddr(&ttb);
 1002154:	e24b300c 	sub	r3, fp, #12
 1002158:	e1a00003 	mov	r0, r3
 100215c:	ebffffaf 	bl	1002020 <create_va_space_core1_ddr>
 1002160:	e50b0008 	str	r0, [fp, #-8]
    //return create_va_space_core1(&ttb);
    return s;
 1002164:	e51b3008 	ldr	r3, [fp, #-8]
}
 1002168:	e1a00003 	mov	r0, r3
 100216c:	e24bd004 	sub	sp, fp, #4
 1002170:	e8bd8800 	pop	{fp, pc}

01002174 <__udivmoddi4>:
 1002174:	e1510003 	cmp	r1, r3
 1002178:	01500002 	cmpeq	r0, r2
 100217c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1002180:	e1a04000 	mov	r4, r0
 1002184:	33a00000 	movcc	r0, #0
 1002188:	e1a05001 	mov	r5, r1
 100218c:	e59d8020 	ldr	r8, [sp, #32]
 1002190:	31a01000 	movcc	r1, r0
 1002194:	3a00003e 	bcc	1002294 <__udivmoddi4+0x120>
 1002198:	e1a01003 	mov	r1, r3
 100219c:	e1a00002 	mov	r0, r2
 10021a0:	e1a06002 	mov	r6, r2
 10021a4:	e1a07003 	mov	r7, r3
 10021a8:	eb00003d 	bl	10022a4 <__clzdi2>
 10021ac:	e1a01005 	mov	r1, r5
 10021b0:	e1a09000 	mov	r9, r0
 10021b4:	e1a00004 	mov	r0, r4
 10021b8:	eb000039 	bl	10022a4 <__clzdi2>
 10021bc:	e049c000 	sub	ip, r9, r0
 10021c0:	e24c9020 	sub	r9, ip, #32
 10021c4:	e1a03c17 	lsl	r3, r7, ip
 10021c8:	e1833916 	orr	r3, r3, r6, lsl r9
 10021cc:	e26ca020 	rsb	sl, ip, #32
 10021d0:	e1833a36 	orr	r3, r3, r6, lsr sl
 10021d4:	e1550003 	cmp	r5, r3
 10021d8:	e1a02c16 	lsl	r2, r6, ip
 10021dc:	01540002 	cmpeq	r4, r2
 10021e0:	33a00000 	movcc	r0, #0
 10021e4:	31a01000 	movcc	r1, r0
 10021e8:	3a000005 	bcc	1002204 <__udivmoddi4+0x90>
 10021ec:	e3a00001 	mov	r0, #1
 10021f0:	e0544002 	subs	r4, r4, r2
 10021f4:	e1a01910 	lsl	r1, r0, r9
 10021f8:	e1811a30 	orr	r1, r1, r0, lsr sl
 10021fc:	e0c55003 	sbc	r5, r5, r3
 1002200:	e1a00c10 	lsl	r0, r0, ip
 1002204:	e35c0000 	cmp	ip, #0
 1002208:	0a000021 	beq	1002294 <__udivmoddi4+0x120>
 100220c:	e1a060a2 	lsr	r6, r2, #1
 1002210:	e1a0e00c 	mov	lr, ip
 1002214:	e1866f83 	orr	r6, r6, r3, lsl #31
 1002218:	e1a070a3 	lsr	r7, r3, #1
 100221c:	ea000007 	b	1002240 <__udivmoddi4+0xcc>
 1002220:	e0543006 	subs	r3, r4, r6
 1002224:	e0c52007 	sbc	r2, r5, r7
 1002228:	e0933003 	adds	r3, r3, r3
 100222c:	e0a22002 	adc	r2, r2, r2
 1002230:	e2934001 	adds	r4, r3, #1
 1002234:	e2a25000 	adc	r5, r2, #0
 1002238:	e25ee001 	subs	lr, lr, #1
 100223c:	0a000006 	beq	100225c <__udivmoddi4+0xe8>
 1002240:	e1550007 	cmp	r5, r7
 1002244:	01540006 	cmpeq	r4, r6
 1002248:	2afffff4 	bcs	1002220 <__udivmoddi4+0xac>
 100224c:	e0944004 	adds	r4, r4, r4
 1002250:	e0a55005 	adc	r5, r5, r5
 1002254:	e25ee001 	subs	lr, lr, #1
 1002258:	1afffff8 	bne	1002240 <__udivmoddi4+0xcc>
 100225c:	e1a03c34 	lsr	r3, r4, ip
 1002260:	e1833a15 	orr	r3, r3, r5, lsl sl
 1002264:	e1833935 	orr	r3, r3, r5, lsr r9
 1002268:	e0900004 	adds	r0, r0, r4
 100226c:	e1a04003 	mov	r4, r3
 1002270:	e1a02c35 	lsr	r2, r5, ip
 1002274:	e0a11005 	adc	r1, r1, r5
 1002278:	e1a05002 	mov	r5, r2
 100227c:	e1a03c12 	lsl	r3, r2, ip
 1002280:	e1833914 	orr	r3, r3, r4, lsl r9
 1002284:	e1a0cc14 	lsl	ip, r4, ip
 1002288:	e050000c 	subs	r0, r0, ip
 100228c:	e1833a34 	orr	r3, r3, r4, lsr sl
 1002290:	e0c11003 	sbc	r1, r1, r3
 1002294:	e3580000 	cmp	r8, #0
 1002298:	18880030 	stmne	r8, {r4, r5}
 100229c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 10022a0:	e12fff1e 	bx	lr

010022a4 <__clzdi2>:
 10022a4:	e92d4010 	push	{r4, lr}
 10022a8:	e3510000 	cmp	r1, #0
 10022ac:	1a000002 	bne	10022bc <__clzdi2+0x18>
 10022b0:	eb000005 	bl	10022cc <__clzsi2>
 10022b4:	e2800020 	add	r0, r0, #32
 10022b8:	ea000001 	b	10022c4 <__clzdi2+0x20>
 10022bc:	e1a00001 	mov	r0, r1
 10022c0:	eb000001 	bl	10022cc <__clzsi2>
 10022c4:	e8bd4010 	pop	{r4, lr}
 10022c8:	e12fff1e 	bx	lr

010022cc <__clzsi2>:
 10022cc:	e3a0101c 	mov	r1, #28
 10022d0:	e3500801 	cmp	r0, #65536	; 0x10000
 10022d4:	21a00820 	lsrcs	r0, r0, #16
 10022d8:	22411010 	subcs	r1, r1, #16
 10022dc:	e3500c01 	cmp	r0, #256	; 0x100
 10022e0:	21a00420 	lsrcs	r0, r0, #8
 10022e4:	22411008 	subcs	r1, r1, #8
 10022e8:	e3500010 	cmp	r0, #16
 10022ec:	21a00220 	lsrcs	r0, r0, #4
 10022f0:	22411004 	subcs	r1, r1, #4
 10022f4:	e28f2008 	add	r2, pc, #8
 10022f8:	e7d20000 	ldrb	r0, [r2, r0]
 10022fc:	e0800001 	add	r0, r0, r1
 1002300:	e12fff1e 	bx	lr
 1002304:	02020304 	andeq	r0, r2, #4, 6	; 0x10000000
 1002308:	01010101 	tsteq	r1, r1, lsl #2
	...

Disassembly of section .ARM.exidx:

01002314 <__exidx_start>:
 1002314:	7fffdcec 	svcvc	0x00ffdcec
 1002318:	00000001 	andeq	r0, r0, r1

Disassembly of section .rodata:

0100231c <__rodata_start__>:
 100231c:	4e524157 	mrcmi	1, 2, r4, cr2, cr7, {2}
 1002320:	554d4d5b 	strbpl	r4, [sp, #-3419]	; 0xfffff2a5
 1002324:	44203a5d 	strtmi	r3, [r0], #-2653	; 0xfffff5a3
 1002328:	20617461 	rsbcs	r7, r1, r1, ror #8
 100232c:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
 1002330:	74732065 	ldrbtvc	r2, [r3], #-101	; 0xffffff9b
 1002334:	206c6c69 	rsbcs	r6, ip, r9, ror #24
 1002338:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 100233c:	0a2e6576 	beq	1b9b91c <__bss_end__+0xb8791c>
 1002340:	00000000 	andeq	r0, r0, r0
 1002344:	01000000 	mrseq	r0, (UNDEF: 0)
 1002348:	00100000 	andseq	r0, r0, r0
 100234c:	00010000 	andeq	r0, r1, r0
 1002350:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 1002354:	4d4d5b47 	vstrmi	d21, [sp, #-284]	; 0xfffffee4
 1002358:	41563a55 	cmpmi	r6, r5, asr sl
 100235c:	46203a5d 			; <UNDEFINED> instruction: 0x46203a5d
 1002360:	756c6961 	strbvc	r6, [ip, #-2401]!	; 0xfffff69f
 1002364:	6f206572 	svcvs	0x00206572
 1002368:	696c206e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, sp}^
 100236c:	2520656e 	strcs	r6, [r0, #-1390]!	; 0xfffffa92
 1002370:	000a2e64 	andeq	r2, sl, r4, ror #28
 1002374:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 1002378:	61635b47 	cmnvs	r3, r7, asr #22
 100237c:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 1002380:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 1002384:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 1002388:	6146203a 	cmpvs	r6, sl, lsr r0
 100238c:	20746c75 	rsbscs	r6, r4, r5, ror ip
 1002390:	65746564 	ldrbvs	r6, [r4, #-1380]!	; 0xfffffa9c
 1002394:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 1002398:	4644202e 	strbmi	r2, [r4], -lr, lsr #32
 100239c:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	; 0xfffffeb4
 10023a0:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 10023a4:	0a2e786c 	beq	1ba055c <__bss_end__+0xb8c55c>
 10023a8:	00000000 	andeq	r0, r0, r0
 10023ac:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 10023b0:	61635b47 	cmnvs	r3, r7, asr #22
 10023b4:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 10023b8:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 10023bc:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 10023c0:	6170203a 	cmnvs	r0, sl, lsr r0
 10023c4:	5d53535b 	ldclpl	3, cr5, [r3, #-364]	; 0xfffffe94
 10023c8:	30203d20 	eorcc	r3, r0, r0, lsr #26
 10023cc:	3b782578 	blcc	2e0b9b4 <__bss_end__+0x1df79b4>
 10023d0:	66666f20 	strbtvs	r6, [r6], -r0, lsr #30
 10023d4:	20746573 	rsbscs	r6, r4, r3, ror r5
 10023d8:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 10023dc:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 10023e0:	0000000a 	andeq	r0, r0, sl
 10023e4:	55424544 	strbpl	r4, [r2, #-1348]	; 0xfffffabc
 10023e8:	61635b47 	cmnvs	r3, r7, asr #22
 10023ec:	5d656863 	stclpl	8, cr6, [r5, #-396]!	; 0xfffffe74
 10023f0:	2d61765b 	stclcs	6, cr7, [r1, #-364]!	; 0xfffffe94
 10023f4:	5d61703e 	stclpl	0, cr7, [r1, #-248]!	; 0xffffff08
 10023f8:	6170203a 	cmnvs	r0, sl, lsr r0
 10023fc:	6761705b 			; <UNDEFINED> instruction: 0x6761705b
 1002400:	3d205d65 	stccc	13, cr5, [r0, #-404]!	; 0xfffffe6c
 1002404:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 1002408:	6f203b78 	svcvs	0x00203b78
 100240c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
 1002410:	203d2074 	eorscs	r2, sp, r4, ror r0
 1002414:	6c257830 	stcvs	8, cr7, [r5], #-192	; 0xffffff40
 1002418:	000a2e78 	andeq	r2, sl, r8, ror lr
 100241c:	5b554d4d 	blpl	2555958 <__bss_end__+0x1541958>
 1002420:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1002424:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1002428:	62203a5d 	eorvs	r3, r0, #380928	; 0x5d000
 100242c:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
 1002430:	203a2928 	eorscs	r2, sl, r8, lsr #18
 1002434:	61766e49 	cmnvs	r6, r9, asr #28
 1002438:	2064696c 	rsbcs	r6, r4, ip, ror #18
 100243c:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
 1002440:	74616c73 	strbtvc	r6, [r1], #-3187	; 0xfffff38d
 1002444:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 1002448:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
 100244c:	2e747365 	cdpcs	3, 7, cr7, cr4, cr5, {3}
 1002450:	0000000a 	andeq	r0, r0, sl
 1002454:	5b554d4d 	blpl	2555990 <__bss_end__+0x1541990>
 1002458:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 100245c:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1002460:	62203a5d 	eorvs	r3, r0, #380928	; 0x5d000
 1002464:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
 1002468:	203a2928 	eorscs	r2, sl, r8, lsr #18
 100246c:	74204156 	strtvc	r4, [r0], #-342	; 0xfffffeaa
 1002470:	4150206f 	cmpmi	r0, pc, rrx
 1002474:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
 1002478:	6620726f 	strtvs	r7, [r0], -pc, ror #4
 100247c:	2520726f 	strcs	r7, [r0, #-623]!	; 0xfffffd91
 1002480:	44202e70 	strtmi	r2, [r0], #-3696	; 0xfffff190
 1002484:	20525346 	subscs	r5, r2, r6, asr #6
 1002488:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 100248c:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 1002490:	0000000a 	andeq	r0, r0, sl
 1002494:	5b554d4d 	blpl	25559d0 <__bss_end__+0x15419d0>
 1002498:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 100249c:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 10024a0:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 10024a4:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 10024a8:	54203a29 	strtpl	r3, [r0], #-2601	; 0xfffff5d7
 10024ac:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
 10024b0:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
 10024b4:	61206e6f 			; <UNDEFINED> instruction: 0x61206e6f
 10024b8:	6165726c 	cmnvs	r5, ip, ror #4
 10024bc:	63207964 			; <UNDEFINED> instruction: 0x63207964
 10024c0:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
 10024c4:	64657465 	strbtvs	r7, [r5], #-1125	; 0xfffffb9b
 10024c8:	00000a2e 	andeq	r0, r0, lr, lsr #20
 10024cc:	5b554d4d 	blpl	2555a08 <__bss_end__+0x1541a08>
 10024d0:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 10024d4:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 10024d8:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 10024dc:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 10024e0:	56203a29 	strtpl	r3, [r0], -r9, lsr #20
 10024e4:	6f742041 	svcvs	0x00742041
 10024e8:	20415020 	subcs	r5, r1, r0, lsr #32
 10024ec:	6f727265 	svcvs	0x00727265
 10024f0:	6f662072 	svcvs	0x00662072
 10024f4:	70252072 	eorvc	r2, r5, r2, ror r0
 10024f8:	4644202e 	strbmi	r2, [r4], -lr, lsr #32
 10024fc:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	; 0xfffffeb4
 1002500:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 1002504:	0a2e786c 	beq	1ba06bc <__bss_end__+0xb8c6bc>
 1002508:	00000000 	andeq	r0, r0, r0
 100250c:	5b554d4d 	blpl	2555a48 <__bss_end__+0x1541a48>
 1002510:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1002514:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 1002518:	6e203a5d 			; <UNDEFINED> instruction: 0x6e203a5d
 100251c:	28747865 	ldmdacs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 1002520:	43203a29 			; <UNDEFINED> instruction: 0x43203a29
 1002524:	656c616f 	strbvs	r6, [ip, #-367]!	; 0xfffffe91
 1002528:	64656373 	strbtvs	r6, [r5], #-883	; 0xfffffc8d
 100252c:	78656e20 	stmdavc	r5!, {r5, r9, sl, fp, sp, lr}^
 1002530:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 1002534:	6e656d67 	cdpvs	13, 6, cr6, cr5, cr7, {3}
 1002538:	4e202e74 	mcrmi	14, 1, r2, cr0, cr4, {3}
 100253c:	73207765 			; <UNDEFINED> instruction: 0x73207765
 1002540:	20657a69 	rsbcs	r7, r5, r9, ror #20
 1002544:	7830203d 	ldmdavc	r0!, {r0, r2, r3, r4, r5, sp}
 1002548:	2e786c25 	cdpcs	12, 7, cr6, cr8, cr5, {1}
 100254c:	0000000a 	andeq	r0, r0, sl
 1002550:	5b554d4d 	blpl	2555a8c <__bss_end__+0x1541a8c>
 1002554:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
 1002558:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
 100255c:	65203a5d 	strvs	r3, [r0, #-2653]!	; 0xfffff5a3
 1002560:	2928646e 	stmdbcs	r8!, {r1, r2, r3, r5, r6, sl, sp, lr}
 1002564:	7254203a 	subsvc	r2, r4, #58	; 0x3a
 1002568:	6c736e61 	ldclvs	14, cr6, [r3], #-388	; 0xfffffe7c
 100256c:	6f697461 	svcvs	0x00697461
 1002570:	7270206e 	rsbsvc	r2, r0, #110	; 0x6e
 1002574:	6572676f 	ldrbvs	r6, [r2, #-1903]!	; 0xfffff891
 1002578:	75207373 	strvc	r7, [r0, #-883]!	; 0xfffffc8d
 100257c:	6d6f636e 	stclvs	3, cr6, [pc, #-440]!	; 10023cc <__rodata_start__+0xb0>
 1002580:	74656c70 	strbtvc	r6, [r5], #-3184	; 0xfffff390
 1002584:	000a2e65 	andeq	r2, sl, r5, ror #28
	...
 1002590:	01000000 	mrseq	r0, (UNDEF: 0)
 1002594:	00011303 	andeq	r1, r1, r3, lsl #6
 1002598:	00000000 	andeq	r0, r0, r0
 100259c:	01000000 	mrseq	r0, (UNDEF: 0)
 10025a0:	01000000 	mrseq	r0, (UNDEF: 0)
 10025a4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 10025a8:	00001303 	andeq	r1, r0, r3, lsl #6
 10025ac:	00000000 	andeq	r0, r0, r0
 10025b0:	3f000000 	svccc	0x00000000
 10025b4:	3f000000 	svccc	0x00000000
 10025b8:	01000000 	mrseq	r0, (UNDEF: 0)
 10025bc:	00010103 	andeq	r0, r1, r3, lsl #2
 10025c0:	00000000 	andeq	r0, r0, r0
 10025c4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 10025c8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 10025cc:	01000000 	mrseq	r0, (UNDEF: 0)
 10025d0:	01010103 	tsteq	r1, r3, lsl #2
 10025d4:	00000000 	andeq	r0, r0, r0
 10025d8:	6361430a 	cmnvs	r1, #671088640	; 0x28000000
 10025dc:	53206568 			; <UNDEFINED> instruction: 0x53206568
 10025e0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 10025e4:	53203a73 			; <UNDEFINED> instruction: 0x53203a73
 10025e8:	524c5443 	subpl	r5, ip, #1124073472	; 0x43000000
 10025ec:	2578303d 	ldrbcs	r3, [r8, #-61]!	; 0xffffffc3
 10025f0:	586c3830 	stmdapl	ip!, {r4, r5, fp, ip, sp}^
 10025f4:	4d4d2020 	stclmi	0, cr2, [sp, #-128]	; 0xffffff80
 10025f8:	75253a55 	strvc	r3, [r5, #-2645]!	; 0xfffff5ab
 10025fc:	3a492020 	bcc	224a684 <__bss_end__+0x1236684>
 1002600:	20207525 	eorcs	r7, r0, r5, lsr #10
 1002604:	75253a44 	strvc	r3, [r5, #-2628]!	; 0xfffff5bc
 1002608:	50422020 	subpl	r2, r2, r0, lsr #32
 100260c:	0075253a 	rsbseq	r2, r5, sl, lsr r5

Disassembly of section .data:

01002610 <s_mmu_pool>:
 1002610:	01004000 	mrseq	r4, (UNDEF: 0)
 1002614:	00010000 	andeq	r0, r1, r0
 1002618:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss:

01004000 <s_mmu_aux_pool>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:

void *memmove(void *dst, const void *src, size_t n)
{
       0:	00001cec 	andeq	r1, r0, ip, ror #25
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000007e8 	andeq	r0, r0, r8, ror #15
      10:	0000d60c 	andeq	sp, r0, ip, lsl #12
      14:	000e4100 	andeq	r4, lr, r0, lsl #2
    uint8_t *d = (uint8_t *)dst;
      18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
    const uint8_t *s = (const uint8_t *)src;
      24:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    if (d == s || n == 0) return dst;
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	00040d03 	andeq	r0, r4, r3, lsl #26
      30:	17d10300 	ldrbne	r0, [r1, r0, lsl #6]
      34:	0000003d 	andeq	r0, r0, sp, lsr r0
      38:	00002c04 	andeq	r2, r0, r4, lsl #24
      3c:	07040500 	streq	r0, [r4, -r0, lsl #10]
      40:	00000353 	andeq	r0, r0, r3, asr r3
      44:	b9050805 	stmdblt	r5, {r0, r2, fp}
      48:	05000006 	streq	r0, [r0, #-6]
    if (d < s) {
      4c:	09550408 	ldmdbeq	r5, {r3, sl}^
      50:	01050000 	mrseq	r0, (UNDEF: 5)
      54:	000bbf06 	andeq	fp, fp, r6, lsl #30
      58:	05020500 	streq	r0, [r2, #-1280]	; 0xfffffb00
        for (size_t i = 0; i < n; ++i) d[i] = s[i];
      5c:	0000099b 	muleq	r0, fp, r9
      60:	0002c403 	andeq	ip, r2, r3, lsl #8
      64:	18280400 	stmdane	r8!, {sl}
      68:	0000006c 	andeq	r0, r0, ip, rrx
      6c:	be050405 	cdplt	4, 0, cr0, cr5, cr5, {0}
      70:	05000006 	streq	r0, [r0, #-6]
      74:	0bbd0801 	bleq	fef42080 <__shm_end__+0xbef42080>
      78:	02050000 	andeq	r0, r5, #0
      7c:	000d0707 	andeq	r0, sp, r7, lsl #14
      80:	02c30300 	sbceq	r0, r3, #0, 6
      84:	34040000 	strcc	r0, [r4], #-0
      88:	00009219 	andeq	r9, r0, r9, lsl r2
      8c:	00810400 	addeq	r0, r1, r0, lsl #8
      90:	04050000 	streq	r0, [r5], #-0
      94:	00034e07 	andeq	r4, r3, r7, lsl #28
      98:	07080500 	streq	r0, [r8, -r0, lsl #10]
      9c:	00000349 	andeq	r0, r0, r9, asr #6
      a0:	000ad903 	andeq	sp, sl, r3, lsl #18
      a4:	1a560400 	bne	15810ac <__bss_end__+0x56d0ac>
    } else {
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      a8:	0000003d 	andeq	r0, r0, sp, lsr r0
      ac:	00041403 	andeq	r1, r4, r3, lsl #8
      b0:	1d410500 	cfstr64ne	mvdx0, [r1, #-0]
      b4:	00000060 	andeq	r0, r0, r0, rrx
      b8:	00026006 	andeq	r6, r2, r6
      bc:	73010700 	movwvc	r0, #5888	; 0x1700
      c0:	06000000 	streq	r0, [r0], -r0
      c4:	00d70e65 	sbcseq	r0, r7, r5, ror #28
      c8:	51070000 	mrspl	r0, (UNDEF: 7)
      cc:	0000000b 	andeq	r0, r0, fp
      d0:	00023307 	andeq	r3, r2, r7, lsl #6
      d4:	03000100 	movweq	r0, #256	; 0x100
      d8:	000002ac 	andeq	r0, r0, ip, lsr #5
      dc:	b8036906 	stmdalt	r3, {r1, r2, r8, fp, sp, lr}
      e0:	06000000 	streq	r0, [r0], -r0
      e4:	00000bdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      e8:	00730107 	rsbseq	r0, r3, r7, lsl #2
      ec:	73060000 	movwvc	r0, #24576	; 0x6000
      f0:	0001020e 	andeq	r0, r1, lr, lsl #4
    }
    return dst;
      f4:	092e0700 	stmdbeq	lr!, {r8, r9, sl}
}
      f8:	07000000 	streq	r0, [r0, -r0]
      fc:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     100:	20030001 	andcs	r0, r3, r1
     104:	0600000c 	streq	r0, [r0], -ip
    g_arm_msgdma0_desc = (volatile uint32_t*)(uintptr_t) MSGDMA0_DESC_BASE;
    g_arm_msgdma1_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA1_CSR_BASE;
    g_arm_msgdma1_desc = (volatile uint32_t*)(uintptr_t) MSGDMA1_DESC_BASE;
    g_arm_msgdma2_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA2_CSR_BASE;
    g_arm_msgdma2_desc = (volatile uint32_t*)(uintptr_t) MSGDMA2_DESC_BASE;
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
     108:	00e30377 	rsceq	r0, r3, r7, ror r3
     10c:	44060000 	strmi	r0, [r6], #-0
     110:	07000009 	streq	r0, [r0, -r9]
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
     114:	00007301 	andeq	r7, r0, r1, lsl #6
     118:	0e7e0600 	cdpeq	6, 7, cr0, cr14, cr0, {0}
     11c:	0000012d 	andeq	r0, r0, sp, lsr #2
     120:	000a8107 	andeq	r8, sl, r7, lsl #2
     124:	af070000 	svcge	0x00070000
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     128:	0100000e 	tsteq	r0, lr
     12c:	09790300 	ldmdbeq	r9!, {r8, r9}^
     130:	8d060000 	stchi	0, cr0, [r6, #-0]
     134:	00010e03 	andeq	r0, r1, r3, lsl #28
     138:	00870600 	addeq	r0, r7, r0, lsl #12
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	01070000 	mrseq	r0, (UNDEF: 7)
     140:	00000073 	andeq	r0, r0, r3, ror r0
     144:	640e9306 	strvs	r9, [lr], #-774	; 0xfffffcfa
     148:	07000001 	streq	r0, [r0, -r1]
     14c:	00000ae8 	andeq	r0, r0, r8, ror #21
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	016b0700 	cmneq	fp, r0, lsl #14
     154:	07010000 	streq	r0, [r1, -r0]
     158:	00000eec 	andeq	r0, r0, ip, ror #29
     15c:	05fc0702 	ldrbeq	r0, [ip, #1794]!	; 0x702
     160:	00030000 	andeq	r0, r3, r0
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	0000bc03 	andeq	fp, r0, r3, lsl #24
     168:	03a10600 			; <UNDEFINED> instruction: 0x03a10600
     16c:	00000139 	andeq	r0, r0, r9, lsr r1
     170:	00016404 	andeq	r6, r1, r4, lsl #8
     174:	0c510600 	mrrceq	6, 0, r0, r1, cr0

    return ALT_E_SUCCESS;
     178:	01070000 	mrseq	r0, (UNDEF: 7)
}
     17c:	00000073 	andeq	r0, r0, r3, ror r0
     180:	ac06bc06 	stcge	12, cr11, [r6], {6}
     184:	07000001 	streq	r0, [r0, -r1]
    }

    coalesce->va   += thissegsize;
    coalesce->size -= thissegsize;

    while (coalesce->size)
     188:	000009d4 	ldrdeq	r0, [r0], -r4
     18c:	059c0700 	ldreq	r0, [ip, #1792]	; 0x700
            dprintf("MMU[coalesce]: next(): Coalesced next segment. New size = 0x%" PRIx32 ".\n", thissegsize);
        }
        else
        {
            /* Cannot coalesce. */
            break;
     190:	07010000 	streq	r0, [r1, -r0]
        }
    }

    *segpa   = thissegpa;
     194:	000008d1 	ldrdeq	r0, [r0], -r1
     198:	00620702 	rsbeq	r0, r2, r2, lsl #14
     19c:	07030000 	streq	r0, [r3, -r0]
    *segsize = thissegsize;
     1a0:	00000cde 	ldrdeq	r0, [r0], -lr
     1a4:	07c10705 	strbeq	r0, [r1, r5, lsl #14]
     1a8:	00070000 	andeq	r0, r7, r0

    return ALT_E_SUCCESS;
     1ac:	000c7c03 	andeq	r7, ip, r3, lsl #24
}
     1b0:	21c60600 	biccs	r0, r6, r0, lsl #12
     1b4:	00000175 	andeq	r0, r0, r5, ror r1
     1b8:	0004d606 	andeq	sp, r4, r6, lsl #12
     1bc:	73010700 	movwvc	r0, #5888	; 0x1700
     1c0:	06000000 	streq	r0, [r0], -r0
     1c4:	025b06f7 	subseq	r0, fp, #258998272	; 0xf700000
     1c8:	ac070000 	stcge	0, cr0, [r7], {-0}
     1cc:	ff00000a 			; <UNDEFINED> instruction: 0xff00000a
     1d0:	00032307 	andeq	r2, r3, r7, lsl #6
     1d4:	fb070000 	blx	1c01de <__core1_unwind_stub-0xe3fe22>
     1d8:	01000008 	tsteq	r0, r8
     1dc:	00001307 	andeq	r1, r0, r7, lsl #6
     1e0:	c5070200 	strgt	r0, [r7, #-512]	; 0xfffffe00
     1e4:	0300000e 	movweq	r0, #14
     1e8:	00056e07 	andeq	r6, r5, r7, lsl #28
     1ec:	bf071000 	svclt	0x00071000
     1f0:	1300000a 	movwne	r0, #10
     1f4:	00037507 	andeq	r7, r3, r7, lsl #10
     1f8:	ee072000 	cdp	0, 0, cr2, cr7, cr0, {0}
     1fc:	40000002 	andmi	r0, r0, r2
     200:	0000a307 	andeq	sl, r0, r7, lsl #6
     204:	99075000 	stmdbls	r7, {ip, lr}
     208:	6000000b 	andvs	r0, r0, fp
     20c:	000b6d07 	andeq	r6, fp, r7, lsl #26
     210:	59077000 	stmdbpl	r7, {ip, sp, lr}
     214:	41000006 	tstmi	r0, r6
     218:	00046d07 	andeq	r6, r4, r7, lsl #26
     21c:	4b075100 	blmi	1d4624 <__core1_unwind_stub-0xe2b9dc>
     220:	61000001 	tstvs	r0, r1
     224:	00012707 	andeq	r2, r1, r7, lsl #14
     228:	fe077100 	cdp2	1, 0, cr7, cr7, cr0, {0}
     22c:	4200000a 	andmi	r0, r0, #10
     230:	00076d07 	andeq	r6, r7, r7, lsl #26
     234:	30075200 	andcc	r5, r7, r0, lsl #4
     238:	62000005 	andvs	r0, r0, #5
     23c:	0004e507 	andeq	lr, r4, r7, lsl #10
     240:	5b077200 	blpl	1dca48 <__core1_unwind_stub-0xe235b8>
     244:	43000005 	movwmi	r0, #5
     248:	000bcb07 	andeq	ip, fp, r7, lsl #22
     24c:	00075300 	andeq	r5, r7, r0, lsl #6
     250:	63000000 	movwvs	r0, #0
     254:	00054307 	andeq	r4, r5, r7, lsl #6
     258:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
     25c:	0000050f 	andeq	r0, r0, pc, lsl #10
     260:	21011806 	tstcs	r1, r6, lsl #16
     264:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     268:	000d2209 	andeq	r2, sp, r9, lsl #4
     26c:	cf061400 	svcgt	0x00061400
     270:	02e51005 	rsceq	r1, r5, #5
     274:	760a0000 	strvc	r0, [sl], -r0
     278:	d1060061 	tstle	r6, r1, rrx
     27c:	02e51a05 	rsceq	r1, r5, #20480	; 0x5000
     280:	0a000000 	beq	288 <__core1_unwind_stub-0xfffd78>
     284:	06006170 			; <UNDEFINED> instruction: 0x06006170
     288:	e51a05d5 	ldr	r0, [sl, #-1493]	; 0xfffffa2b
     28c:	04000002 	streq	r0, [r0], #-2
     290:	000dda0b 	andeq	sp, sp, fp, lsl #20
     294:	05da0600 	ldrbeq	r0, [sl, #1536]	; 0x600
     298:	0000811a 	andeq	r8, r0, sl, lsl r1
     29c:	eb0b0800 	bl	2c22a4 <__core1_unwind_stub-0xd3dd5c>
     2a0:	06000008 	streq	r0, [r0], -r8
     2a4:	ac1a05de 	cfldr32ge	mvfx0, [sl], {222}	; 0xde
     2a8:	0c000001 	stceq	0, cr0, [r0], {1}
     2ac:	000c310b 	andeq	r3, ip, fp, lsl #2
     2b0:	05df0600 	ldrbeq	r0, [pc, #1536]	; 8b8 <__core1_unwind_stub-0xfff748>
     2b4:	00025b1a 	andeq	r5, r2, sl, lsl fp
     2b8:	b60b0d00 	strlt	r0, [fp], -r0, lsl #26
     2bc:	06000009 	streq	r0, [r0], -r9
     2c0:	d71a05e4 	ldrle	r0, [sl, -r4, ror #11]
     2c4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     2c8:	00066d0b 	andeq	r6, r6, fp, lsl #26
     2cc:	05e50600 	strbeq	r0, [r5, #1536]!	; 0x600
     2d0:	00012d1a 	andeq	r2, r1, sl, lsl sp
     2d4:	290b0f00 	stmdbcs	fp, {r8, r9, sl, fp}
     2d8:	0600000b 	streq	r0, [r0], -fp
     2dc:	021a05e8 	andseq	r0, sl, #232, 10	; 0x3a000000
     2e0:	10000001 	andne	r0, r0, r1
     2e4:	08040c00 	stmdaeq	r4, {sl, fp}
     2e8:	00000d37 	andeq	r0, r0, r7, lsr sp
     2ec:	0305ec06 	movweq	lr, #23558	; 0x5c06
     2f0:	00000268 	andeq	r0, r0, r8, ror #4
     2f4:	0002e704 	andeq	lr, r2, r4, lsl #14
     2f8:	0d630800 	stcleq	8, cr0, [r3, #-0]
     2fc:	0b060000 	bleq	180304 <__core1_unwind_stub-0xe7fcfc>
     300:	03061106 	movweq	r1, #24838	; 0x6106
     304:	040d0000 	streq	r0, [sp], #-0
     308:	0000030c 	andeq	r0, r0, ip, lsl #6
     30c:	0002e50e 	andeq	lr, r2, lr, lsl #10
     310:	00032000 	andeq	r2, r3, r0
     314:	00380f00 	eorseq	r0, r8, r0, lsl #30
     318:	e50f0000 	str	r0, [pc, #-0]	; 320 <__core1_unwind_stub-0xfffce0>
     31c:	00000002 	andeq	r0, r0, r2
     320:	000d7709 	andeq	r7, sp, r9, lsl #14
     324:	7b061000 	blvc	18432c <__core1_unwind_stub-0xe7bcd4>
     328:	03661006 	cmneq	r6, #6
     32c:	760a0000 	strvc	r0, [sl], -r0
     330:	7d060061 	stcvc	0, cr0, [r6, #-388]	; 0xfffffe7c
     334:	03661206 	cmneq	r6, #1610612736	; 0x60000000
     338:	0b000000 	bleq	340 <__core1_unwind_stub-0xfffcc0>
     33c:	00000dda 	ldrdeq	r0, [r0], -sl
     340:	12067e06 	andne	r7, r6, #6, 28	; 0x60
     344:	0000002c 	andeq	r0, r0, ip, lsr #32
     348:	0dcf0b04 	vstreq	d16, [pc, #16]	; 360 <__core1_unwind_stub-0xfffca0>
     34c:	80060000 	andhi	r0, r6, r0
     350:	00a00f06 	adceq	r0, r0, r6, lsl #30
     354:	0b080000 	bleq	20035c <__core1_unwind_stub-0xdffca4>
     358:	00000a98 	muleq	r0, r8, sl
     35c:	0f068106 	svceq	0x00068106
     360:	00000081 	andeq	r0, r0, r1, lsl #1
     364:	040d000c 	streq	r0, [sp], #-12
     368:	00000373 	andeq	r0, r0, r3, ror r3
     36c:	c6080105 	strgt	r0, [r8], -r5, lsl #2
     370:	0400000b 	streq	r0, [r0], #-11
     374:	0000036c 	andeq	r0, r0, ip, ror #6
     378:	000d9308 	andeq	r9, sp, r8, lsl #6
     37c:	06830600 	streq	r0, [r3], r0, lsl #12
     380:	00032003 	andeq	r2, r3, r3
     384:	0b390800 	bleq	e4238c <__core1_unwind_stub-0x1bdc74>
     388:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
     38c:	003d1701 	eorseq	r1, sp, r1, lsl #14
     390:	df030000 	svcle	0x00030000
     394:	0700000d 	streq	r0, [r0, -sp]
     398:	006c0e2e 	rsbeq	r0, ip, lr, lsr #28
     39c:	4b030000 	blmi	c03a4 <__core1_unwind_stub-0xf3fc5c>
     3a0:	07000002 	streq	r0, [r0, -r2]
     3a4:	006c0e74 	rsbeq	r0, ip, r4, ror lr
     3a8:	04100000 	ldreq	r0, [r0], #-0
     3ac:	cc03a507 	cfstr32gt	mvfx10, [r3], {7}
     3b0:	11000003 	tstne	r0, r3
     3b4:	00000619 	andeq	r0, r0, r9, lsl r6
     3b8:	850ca707 	strhi	sl, [ip, #-1799]	; 0xfffff8f9
     3bc:	11000003 	tstne	r0, r3
     3c0:	000009fb 	strdeq	r0, [r0], -fp
     3c4:	cc13a807 	ldcgt	8, cr10, [r3], {7}
     3c8:	00000003 	andeq	r0, r0, r3
     3cc:	00007312 	andeq	r7, r0, r2, lsl r3
     3d0:	0003dc00 	andeq	sp, r3, r0, lsl #24
     3d4:	003d1300 	eorseq	r1, sp, r0, lsl #6
     3d8:	00030000 	andeq	r0, r3, r0
     3dc:	a2070814 	andge	r0, r7, #20, 16	; 0x140000
     3e0:	00040009 	andeq	r0, r4, r9
     3e4:	02e61500 	rsceq	r1, r6, #0, 10
     3e8:	a4070000 	strge	r0, [r7], #-0
     3ec:	00002507 	andeq	r2, r0, r7, lsl #10
     3f0:	37150000 	ldrcc	r0, [r5, -r0]
     3f4:	07000004 	streq	r0, [r0, -r4]
     3f8:	03aa05a9 			; <UNDEFINED> instruction: 0x03aa05a9
     3fc:	00040000 	andeq	r0, r4, r0
     400:	00076203 	andeq	r6, r7, r3, lsl #4
     404:	03aa0700 			; <UNDEFINED> instruction: 0x03aa0700
     408:	000003dc 	ldrdeq	r0, [r0], -ip
     40c:	00070003 	andeq	r0, r7, r3
     410:	19160800 	ldmdbne	r6, {fp}
     414:	00000092 	muleq	r0, r2, r0
     418:	0001a903 	andeq	sl, r1, r3, lsl #18
     41c:	0d0c0900 	vstreq.16	s0, [ip, #-0]	; <UNPREDICTABLE>
     420:	00000025 	andeq	r0, r0, r5, lsr #32
     424:	00061003 	andeq	r1, r6, r3
     428:	1b230800 	blne	8c2430 <__core1_unwind_stub-0x73dbd0>
     42c:	00000418 	andeq	r0, r0, r8, lsl r4
     430:	00027016 	andeq	r7, r2, r6, lsl r0
     434:	34081800 	strcc	r1, [r8], #-2048	; 0xfffff800
     438:	00048a08 	andeq	r8, r4, r8, lsl #20
     43c:	0e981500 	cdpeq	5, 9, cr1, cr8, cr0, {0}
     440:	36080000 	strcc	r0, [r8], -r0
     444:	00048a13 	andeq	r8, r4, r3, lsl sl
     448:	5f170000 	svcpl	0x00170000
     44c:	3708006b 	strcc	r0, [r8, -fp, rrx]
     450:	00002507 	andeq	r2, r0, r7, lsl #10
     454:	6f150400 	svcvs	0x00150400
     458:	0800000a 	stmdaeq	r0, {r1, r3}
     45c:	00250b37 	eoreq	r0, r5, r7, lsr fp
     460:	15080000 	strne	r0, [r8, #-0]
     464:	000009e9 	andeq	r0, r0, r9, ror #19
     468:	25143708 	ldrcs	r3, [r4, #-1800]	; 0xfffff8f8
     46c:	0c000000 	stceq	0, cr0, [r0], {-0}
     470:	00073315 	andeq	r3, r7, r5, lsl r3
     474:	1b370800 	blne	dc247c <__core1_unwind_stub-0x23db84>
     478:	00000025 	andeq	r0, r0, r5, lsr #32
     47c:	785f1710 	ldmdavc	pc, {r4, r8, r9, sl, ip}^	; <UNPREDICTABLE>
     480:	0b380800 	bleq	e02488 <__core1_unwind_stub-0x1fdb78>
     484:	00000490 	muleq	r0, r0, r4
     488:	040d0014 	streq	r0, [sp], #-20	; 0xffffffec
     48c:	00000430 	andeq	r0, r0, r0, lsr r4
     490:	00040c12 	andeq	r0, r4, r2, lsl ip
     494:	0004a000 	andeq	sl, r4, r0
     498:	003d1300 	eorseq	r1, sp, r0, lsl #6
     49c:	00000000 	andeq	r0, r0, r0
     4a0:	000ae316 	andeq	lr, sl, r6, lsl r3
     4a4:	3c082400 	cfstrscc	mvf2, [r8], {-0}
     4a8:	00052308 	andeq	r2, r5, r8, lsl #6
     4ac:	04241500 	strteq	r1, [r4], #-1280	; 0xfffffb00
     4b0:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
     4b4:	00002509 	andeq	r2, r0, r9, lsl #10
     4b8:	01150000 	tsteq	r5, r0
     4bc:	08000003 	stmdaeq	r0, {r0, r1}
     4c0:	0025093f 	eoreq	r0, r5, pc, lsr r9
     4c4:	15040000 	strne	r0, [r4, #-0]
     4c8:	000002cc 	andeq	r0, r0, ip, asr #5
     4cc:	25094008 	strcs	r4, [r9, #-8]
     4d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     4d4:	0005b315 	andeq	fp, r5, r5, lsl r3
     4d8:	09410800 	stmdbeq	r1, {fp}^
     4dc:	00000025 	andeq	r0, r0, r5, lsr #32
     4e0:	08f2150c 	ldmeq	r2!, {r2, r3, r8, sl, ip}^
     4e4:	42080000 	andmi	r0, r8, #0
     4e8:	00002509 	andeq	r2, r0, r9, lsl #10
     4ec:	15151000 	ldrne	r1, [r5, #-0]
     4f0:	0800000a 	stmdaeq	r0, {r1, r3}
     4f4:	00250943 	eoreq	r0, r5, r3, asr #18
     4f8:	15140000 	ldrne	r0, [r4, #-0]
     4fc:	00000278 	andeq	r0, r0, r8, ror r2
     500:	25094408 	strcs	r4, [r9, #-1032]	; 0xfffffbf8
     504:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     508:	00042d15 	andeq	r2, r4, r5, lsl sp
     50c:	09450800 	stmdbeq	r5, {fp}^
     510:	00000025 	andeq	r0, r0, r5, lsr #32
     514:	0789151c 	usada8eq	r9, ip, r5, r1
     518:	46080000 	strmi	r0, [r8], -r0
     51c:	00002509 	andeq	r2, r0, r9, lsl #10
     520:	18002000 	stmdane	r0, {sp}
     524:	00000079 	andeq	r0, r0, r9, ror r0
     528:	4f080108 	svcmi	0x00080108
     52c:	00056808 	andeq	r6, r5, r8, lsl #16
     530:	0cf81500 	cfldr64eq	mvdx1, [r8]
     534:	50080000 	andpl	r0, r8, r0
     538:	0005680a 	andeq	r6, r5, sl, lsl #16
     53c:	80150000 	andshi	r0, r5, r0
     540:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     544:	05680951 	strbeq	r0, [r8, #-2385]!	; 0xfffff6af
     548:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
     54c:	00000daf 	andeq	r0, r0, pc, lsr #27
     550:	0c0a5308 	stceq	3, cr5, [sl], {8}
     554:	00000004 	andeq	r0, r0, r4
     558:	0e391901 	vaddeq.f16	s2, s18, s2	; <UNPREDICTABLE>
     55c:	56080000 	strpl	r0, [r8], -r0
     560:	00040c0a 	andeq	r0, r4, sl, lsl #24
     564:	00010400 	andeq	r0, r1, r0, lsl #8
     568:	0002e512 	andeq	lr, r2, r2, lsl r5
     56c:	00057800 	andeq	r7, r5, r0, lsl #16
     570:	003d1300 	eorseq	r1, sp, r0, lsl #6
     574:	001f0000 	andseq	r0, pc, r0
     578:	00098a18 	andeq	r8, r9, r8, lsl sl
     57c:	08019000 	stmdaeq	r1, {ip, pc}
     580:	05bb0862 	ldreq	r0, [fp, #2146]!	; 0x862
     584:	98150000 	ldmdals	r5, {}	; <UNPREDICTABLE>
     588:	0800000e 	stmdaeq	r0, {r1, r2, r3}
     58c:	05bb1263 	ldreq	r1, [fp, #611]!	; 0x263
     590:	15000000 	strne	r0, [r0, #-0]
     594:	00000444 	andeq	r0, r0, r4, asr #8
     598:	25066408 	strcs	r6, [r6, #-1032]	; 0xfffffbf8
     59c:	04000000 	streq	r0, [r0], #-0
     5a0:	00025315 	andeq	r5, r2, r5, lsl r3
     5a4:	09660800 	stmdbeq	r6!, {fp}^
     5a8:	000005c1 	andeq	r0, r0, r1, asr #11
     5ac:	00791508 	rsbseq	r1, r9, r8, lsl #10
     5b0:	67080000 	strvs	r0, [r8, -r0]
     5b4:	0005231e 	andeq	r2, r5, lr, lsl r3
     5b8:	0d008800 	stceq	8, cr8, [r0, #-0]
     5bc:	00057804 	andeq	r7, r5, r4, lsl #16
     5c0:	05d11200 	ldrbeq	r1, [r1, #512]	; 0x200
     5c4:	05d10000 	ldrbeq	r0, [r1]
     5c8:	3d130000 	ldccc	0, cr0, [r3, #-0]
     5cc:	1f000000 	svcne	0x00000000
     5d0:	d7040d00 	strle	r0, [r4, -r0, lsl #26]
     5d4:	1a000005 	bne	5f0 <__core1_unwind_stub-0xfffa10>
     5d8:	000c6b16 	andeq	r6, ip, r6, lsl fp
     5dc:	7a080800 	bvc	2025e4 <__core1_unwind_stub-0xdfda1c>
     5e0:	00060008 	andeq	r0, r6, r8
     5e4:	06ea1500 	strbteq	r1, [sl], r0, lsl #10
     5e8:	7b080000 	blvc	2005f0 <__core1_unwind_stub-0xdffa10>
     5ec:	00060011 	andeq	r0, r6, r1, lsl r0
     5f0:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
     5f4:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     5f8:	0025067c 	eoreq	r0, r5, ip, ror r6
     5fc:	00040000 	andeq	r0, r4, r0
     600:	0073040d 	rsbseq	r0, r3, sp, lsl #8
     604:	6d160000 	ldcvs	0, cr0, [r6, #-0]
     608:	68000003 	stmdavs	r0, {r0, r1}
     60c:	4908ba08 	stmdbmi	r8, {r3, r9, fp, ip, sp, pc}
     610:	17000007 	strne	r0, [r0, -r7]
     614:	0800705f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
     618:	060012bb 			; <UNDEFINED> instruction: 0x060012bb
     61c:	17000000 	strne	r0, [r0, -r0]
     620:	0800725f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
     624:	002507bc 	strhteq	r0, [r5], -ip
     628:	17040000 	strne	r0, [r4, -r0]
     62c:	0800775f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}
     630:	002507bd 	strhteq	r0, [r5], -sp
     634:	15080000 	strne	r0, [r8, #-0]
     638:	00000144 	andeq	r0, r0, r4, asr #2
     63c:	5909be08 	stmdbpl	r9, {r3, r9, sl, fp, ip, sp, pc}
     640:	0c000000 	stceq	0, cr0, [r0], {-0}
     644:	00071715 	andeq	r1, r7, r5, lsl r7
     648:	09bf0800 	ldmibeq	pc!, {fp}	; <UNPREDICTABLE>
     64c:	00000059 	andeq	r0, r0, r9, asr r0
     650:	625f170e 	subsvs	r1, pc, #3670016	; 0x380000
     654:	c0080066 	andgt	r0, r8, r6, rrx
     658:	0005d811 	andeq	sp, r5, r1, lsl r8
     65c:	3b151000 	blcc	544664 <__core1_unwind_stub-0xabb99c>
     660:	08000001 	stmdaeq	r0, {r0}
     664:	002507c1 	eoreq	r0, r5, r1, asr #15
     668:	15180000 	ldrne	r0, [r8, #-0]
     66c:	00000258 	andeq	r0, r0, r8, asr r2
     670:	e50ac808 	str	ip, [sl, #-2056]	; 0xfffff7f8
     674:	1c000002 	stcne	0, cr0, [r0], {2}
     678:	0001eb15 	andeq	lr, r1, r5, lsl fp
     67c:	1dca0800 	stclne	8, cr0, [sl]
     680:	000008c1 	andeq	r0, r0, r1, asr #17
     684:	09721520 	ldmdbeq	r2!, {r5, r8, sl, ip}^
     688:	cc080000 	stcgt	0, cr0, [r8], {-0}
     68c:	0008e51d 	andeq	lr, r8, sp, lsl r5
     690:	a9152400 	ldmdbge	r5, {sl, sp}
     694:	0800000e 	stmdaeq	r0, {r1, r2, r3}
     698:	09090dcf 	stmdbeq	r9, {r0, r1, r2, r3, r6, r7, r8, sl, fp}
     69c:	15280000 	strne	r0, [r8, #-0]!
     6a0:	00001118 	andeq	r1, r0, r8, lsl r1
     6a4:	2309d008 	movwcs	sp, #36872	; 0x9008
     6a8:	2c000009 	stccs	0, cr0, [r0], {9}
     6ac:	62755f17 	rsbsvs	r5, r5, #23, 30	; 0x5c
     6b0:	11d30800 	bicsne	r0, r3, r0, lsl #16
     6b4:	000005d8 	ldrdeq	r0, [r0], -r8
     6b8:	755f1730 	ldrbvc	r1, [pc, #-1840]	; ffffff90 <__shm_end__+0xbfffff90>
     6bc:	d4080070 	strle	r0, [r8], #-112	; 0xffffff90
     6c0:	00060012 	andeq	r0, r6, r2, lsl r0
     6c4:	5f173800 	svcpl	0x00173800
     6c8:	08007275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, ip, sp, lr}
     6cc:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
     6d0:	153c0000 	ldrne	r0, [ip, #-0]!
     6d4:	00000ee6 	andeq	r0, r0, r6, ror #29
     6d8:	2911d808 	ldmdbcs	r1, {r3, fp, ip, lr, pc}
     6dc:	40000009 	andmi	r0, r0, r9
     6e0:	000de615 	andeq	lr, sp, r5, lsl r6
     6e4:	11d90800 	bicsne	r0, r9, r0, lsl #16
     6e8:	00000939 	andeq	r0, r0, r9, lsr r9
     6ec:	6c5f1743 	mrrcvs	7, 4, r1, pc, cr3	; <UNPREDICTABLE>
     6f0:	dc080062 	stcle	0, cr0, [r8], {98}	; 0x62
     6f4:	0005d811 	andeq	sp, r5, r1, lsl r8
     6f8:	d0154400 	andsle	r4, r5, r0, lsl #8
     6fc:	0800000a 	stmdaeq	r0, {r1, r3}
     700:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
     704:	154c0000 	strbne	r0, [ip, #-0]
     708:	00000393 	muleq	r0, r3, r3
     70c:	920ae008 	andls	lr, sl, #8
     710:	50000003 	andpl	r0, r0, r3
     714:	00110c15 	andseq	r0, r1, r5, lsl ip
     718:	12e30800 	rscne	r0, r3, #0, 16
     71c:	00000767 	andeq	r0, r0, r7, ror #14
     720:	0b111554 	bleq	445c78 <__core1_unwind_stub-0xbba388>
     724:	e7080000 	str	r0, [r8, -r0]
     728:	0004240c 	andeq	r2, r4, ip, lsl #8
     72c:	92155800 	andsls	r5, r5, #0, 16
     730:	08000009 	stmdaeq	r0, {r0, r3}
     734:	04000ee9 	streq	r0, [r0], #-3817	; 0xfffff117
     738:	155c0000 	ldrbne	r0, [ip, #-0]
     73c:	00000e31 	andeq	r0, r0, r1, lsr lr
     740:	2509ea08 	strcs	lr, [r9, #-2568]	; 0xfffff5f8
     744:	64000000 	strvs	r0, [r0], #-0
     748:	00250e00 	eoreq	r0, r5, r0, lsl #28
     74c:	07670000 	strbeq	r0, [r7, -r0]!
     750:	670f0000 	strvs	r0, [pc, -r0]
     754:	0f000007 	svceq	0x00000007
     758:	000002e5 	andeq	r0, r0, r5, ror #5
     75c:	0008bb0f 	andeq	fp, r8, pc, lsl #22
     760:	00250f00 	eoreq	r0, r5, r0, lsl #30
     764:	0d000000 	stceq	0, cr0, [r0, #-0]
     768:	00077204 	andeq	r7, r7, r4, lsl #4
     76c:	07670400 	strbeq	r0, [r7, -r0, lsl #8]!
     770:	001b0000 	andseq	r0, fp, r0
     774:	2800000d 	stmdacs	r0, {r0, r2, r3}
     778:	02650804 	rsbeq	r0, r5, #4, 16	; 0x40000
     77c:	0008bb08 	andeq	fp, r8, r8, lsl #22
     780:	07d80b00 	ldrbeq	r0, [r8, r0, lsl #22]
     784:	67080000 	strvs	r0, [r8, -r0]
     788:	00250702 	eoreq	r0, r5, r2, lsl #14
     78c:	0b000000 	bleq	794 <__core1_unwind_stub-0xfff86c>
     790:	000006a3 	andeq	r0, r0, r3, lsr #13
     794:	0b026c08 	bleq	9b7bc <__core1_unwind_stub-0xf64844>
     798:	00000995 	muleq	r0, r5, r9
     79c:	021a0b04 	andseq	r0, sl, #4, 22	; 0x1000
     7a0:	6c080000 	stcvs	0, cr0, [r8], {-0}
     7a4:	09951402 	ldmibeq	r5, {r1, sl, ip}
     7a8:	0b080000 	bleq	2007b0 <__core1_unwind_stub-0xdff850>
     7ac:	00000ed5 	ldrdeq	r0, [r0], -r5
     7b0:	1e026c08 	cdpne	12, 0, cr6, cr2, cr8, {0}
     7b4:	00000995 	muleq	r0, r5, r9
     7b8:	043f0b0c 	ldrteq	r0, [pc], #-2828	; 7c0 <__core1_unwind_stub-0xfff840>
     7bc:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
     7c0:	00250802 	eoreq	r0, r5, r2, lsl #16
     7c4:	0b100000 	bleq	4007cc <__core1_unwind_stub-0xbff834>
     7c8:	000003e5 	andeq	r0, r0, r5, ror #7
     7cc:	08026f08 	stmdaeq	r2, {r3, r8, r9, sl, fp, sp, lr}
     7d0:	00000b95 	muleq	r0, r5, fp
     7d4:	0e180b14 	vmoveq.32	r0, d8[0]
     7d8:	72080000 	andvc	r0, r8, #0
     7dc:	00250702 	eoreq	r0, r5, r2, lsl #14
     7e0:	0b300000 	bleq	c007e8 <__core1_unwind_stub-0x3ff818>
     7e4:	00000d1a 	andeq	r0, r0, sl, lsl sp
     7e8:	16027308 	strne	r7, [r2], -r8, lsl #6
     7ec:	00000baa 	andeq	r0, r0, sl, lsr #23
     7f0:	064e0b34 			; <UNDEFINED> instruction: 0x064e0b34
     7f4:	75080000 	strvc	r0, [r8, #-0]
     7f8:	00250702 	eoreq	r0, r5, r2, lsl #14
     7fc:	0b380000 	bleq	e00804 <__core1_unwind_stub-0x1ff7fc>
     800:	0000074e 	andeq	r0, r0, lr, asr #14
     804:	0a027708 	beq	9e42c <__core1_unwind_stub-0xf61bd4>
     808:	00000bbb 			; <UNDEFINED> instruction: 0x00000bbb
     80c:	02a40b3c 	adceq	r0, r4, #60, 22	; 0xf000
     810:	7a080000 	bvc	200818 <__core1_unwind_stub-0xdff7e8>
     814:	048a1302 	streq	r1, [sl], #770	; 0x302
     818:	0b400000 	bleq	1000820 <alt_mmu_va_space_gen_section>
     81c:	0000033f 	andeq	r0, r0, pc, lsr r3
     820:	07027b08 	streq	r7, [r2, -r8, lsl #22]
     824:	00000025 	andeq	r0, r0, r5, lsr #32
     828:	05560b44 	ldrbeq	r0, [r6, #-2884]	; 0xfffff4bc
     82c:	7c080000 	stcvc	0, cr0, [r8], {-0}
     830:	048a1302 	streq	r1, [sl], #770	; 0x302
     834:	0b480000 	bleq	120083c <__bss_end__+0x1ec83c>
     838:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     83c:	14027d08 	strne	r7, [r2], #-3336	; 0xfffff2f8
     840:	00000bc1 	andeq	r0, r0, r1, asr #23
     844:	0a670b4c 	beq	19c357c <__bss_end__+0x9af57c>
     848:	80080000 	andhi	r0, r8, r0
     84c:	00250702 	eoreq	r0, r5, r2, lsl #14
     850:	0b500000 	bleq	1400858 <__bss_end__+0x3ec858>
     854:	00000bb5 			; <UNDEFINED> instruction: 0x00000bb5
     858:	09028108 	stmdbeq	r2, {r3, r8, pc}
     85c:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
     860:	0a5d0b54 	beq	17435b8 <__bss_end__+0x72f5b8>
     864:	a4080000 	strge	r0, [r8], #-0
     868:	0b700702 	bleq	1c02478 <__bss_end__+0xbee478>
     86c:	1c580000 	mrane	r0, r8, acc0
     870:	0000098a 	andeq	r0, r0, sl, lsl #19
     874:	1302a808 	movwne	sl, #10248	; 0x2808
     878:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
     87c:	d61c0148 	ldrle	r0, [ip], -r8, asr #2
     880:	08000005 	stmdaeq	r0, {r0, r2}
     884:	781202a9 	ldmdavc	r2, {r0, r3, r5, r7, r9}
     888:	4c000005 	stcmi	0, cr0, [r0], {5}
     88c:	05bd1c01 	ldreq	r1, [sp, #3073]!	; 0xc01
     890:	ad080000 	stcge	0, cr0, [r8, #-0]
     894:	0bd20c02 	bleq	ff4838a4 <__shm_end__+0xbf4838a4>
     898:	02dc0000 	sbcseq	r0, ip, #0
     89c:	000c971c 	andeq	r9, ip, ip, lsl r7
     8a0:	02b20800 	adcseq	r0, r2, #0, 16
     8a4:	00095610 	andeq	r5, r9, r0, lsl r6
     8a8:	1c02e000 	stcne	0, cr14, [r2], {-0}
     8ac:	00000a62 	andeq	r0, r0, r2, ror #20
     8b0:	0a02b408 	beq	ad8d8 <__core1_unwind_stub-0xf52728>
     8b4:	00000bde 	ldrdeq	r0, [r0], -lr
     8b8:	0d0002ec 	sfmeq	f0, 4, [r0, #-944]	; 0xfffffc50
     8bc:	00036c04 	andeq	r6, r3, r4, lsl #24
     8c0:	49040d00 	stmdbmi	r4, {r8, sl, fp}
     8c4:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
     8c8:	00000025 	andeq	r0, r0, r5, lsr #32
     8cc:	000008e5 	andeq	r0, r0, r5, ror #17
     8d0:	0007670f 	andeq	r6, r7, pc, lsl #14
     8d4:	02e50f00 	rsceq	r0, r5, #0, 30
     8d8:	660f0000 	strvs	r0, [pc], -r0
     8dc:	0f000003 	svceq	0x00000003
     8e0:	00000025 	andeq	r0, r0, r5, lsr #32
     8e4:	c7040d00 	strgt	r0, [r4, -r0, lsl #26]
     8e8:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
     8ec:	0000039e 	muleq	r0, lr, r3
     8f0:	00000909 	andeq	r0, r0, r9, lsl #18
     8f4:	0007670f 	andeq	r6, r7, pc, lsl #14
     8f8:	02e50f00 	rsceq	r0, r5, #0, 30
     8fc:	9e0f0000 	cdpls	0, 0, cr0, cr15, cr0, {0}
     900:	0f000003 	svceq	0x00000003
     904:	00000025 	andeq	r0, r0, r5, lsr #32
     908:	eb040d00 	bl	103d10 <__core1_unwind_stub-0xefc2f0>
     90c:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
     910:	00000025 	andeq	r0, r0, r5, lsr #32
     914:	00000923 	andeq	r0, r0, r3, lsr #18
     918:	0007670f 	andeq	r6, r7, pc, lsl #14
     91c:	02e50f00 	rsceq	r0, r5, #0, 30
     920:	0d000000 	stceq	0, cr0, [r0, #-0]
     924:	00090f04 	andeq	r0, r9, r4, lsl #30
     928:	00731200 	rsbseq	r1, r3, r0, lsl #4
     92c:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
     930:	3d130000 	ldccc	0, cr0, [r3, #-0]
     934:	02000000 	andeq	r0, r0, #0
     938:	00731200 	rsbseq	r1, r3, r0, lsl #4
     93c:	09490000 	stmdbeq	r9, {}^	; <UNPREDICTABLE>
     940:	3d130000 	ldccc	0, cr0, [r3, #-0]
     944:	00000000 	andeq	r0, r0, r0
     948:	038c0800 	orreq	r0, ip, #0, 16
     94c:	24080000 	strcs	r0, [r8], #-0
     950:	06061a01 	streq	r1, [r6], -r1, lsl #20
     954:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
     958:	0c00000c 	stceq	0, cr0, [r0], {12}
     95c:	08012808 	stmdaeq	r1, {r3, fp, sp}
     960:	0000098f 	andeq	r0, r0, pc, lsl #19
     964:	000e980b 	andeq	r9, lr, fp, lsl #16
     968:	012a0800 			; <UNDEFINED> instruction: 0x012a0800
     96c:	00098f11 	andeq	r8, r9, r1, lsl pc
     970:	320b0000 	andcc	r0, fp, #0
     974:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     978:	2507012b 	strcs	r0, [r7, #-299]	; 0xfffffed5
     97c:	04000000 	streq	r0, [r0], #-0
     980:	00061f0b 	andeq	r1, r6, fp, lsl #30
     984:	012c0800 			; <UNDEFINED> instruction: 0x012c0800
     988:	0009950b 	andeq	r9, r9, fp, lsl #10
     98c:	0d000800 	stceq	8, cr0, [r0, #-0]
     990:	00095604 	andeq	r5, r9, r4, lsl #12
     994:	49040d00 	stmdbmi	r4, {r8, sl, fp}
     998:	09000009 	stmdbeq	r0, {r0, r3}
     99c:	00000337 	andeq	r0, r0, r7, lsr r3
     9a0:	0144080e 	cmpeq	r4, lr, lsl #16
     9a4:	0009d408 	andeq	sp, r9, r8, lsl #8
     9a8:	0e8d0b00 	vdiveq.f64	d0, d13, d0
     9ac:	45080000 	strmi	r0, [r8, #-0]
     9b0:	09d41201 	ldmibeq	r4, {r0, r9, ip}^
     9b4:	0b000000 	bleq	9bc <__core1_unwind_stub-0xfff644>
     9b8:	000006fa 	strdeq	r0, [r0], -sl
     9bc:	12014608 	andne	r4, r1, #8, 12	; 0x800000
     9c0:	000009d4 	ldrdeq	r0, [r0], -r4
     9c4:	0c4c0b06 	mcrreq	11, 0, r0, ip, cr6
     9c8:	47080000 	strmi	r0, [r8, -r0]
     9cc:	007a1201 	rsbseq	r1, sl, r1, lsl #4
     9d0:	000c0000 	andeq	r0, ip, r0
     9d4:	00007a12 	andeq	r7, r0, r2, lsl sl
     9d8:	0009e400 	andeq	lr, r9, r0, lsl #8
     9dc:	003d1300 	eorseq	r1, sp, r0, lsl #6
     9e0:	00020000 	andeq	r0, r2, r0
     9e4:	8508d01d 	strhi	sp, [r8, #-29]	; 0xffffffe3
     9e8:	0af90702 	beq	ffe425f8 <__shm_end__+0xbfe425f8>
     9ec:	ec0b0000 	stc	0, cr0, [fp], {-0}
     9f0:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     9f4:	3d180287 	lfmcc	f0, 4, [r8, #-540]	; 0xfffffde4
     9f8:	00000000 	andeq	r0, r0, r0
     9fc:	000cba0b 	andeq	fp, ip, fp, lsl #20
     a00:	02880800 	addeq	r0, r8, #0, 16
     a04:	0008bb12 	andeq	fp, r8, r2, lsl fp
     a08:	600b0400 	andvs	r0, fp, r0, lsl #8
     a0c:	08000003 	stmdaeq	r0, {r0, r1}
     a10:	f9100289 			; <UNDEFINED> instruction: 0xf9100289
     a14:	0800000a 	stmdaeq	r0, {r1, r3}
     a18:	000a460b 	andeq	r4, sl, fp, lsl #12
     a1c:	028a0800 	addeq	r0, sl, #0, 16
     a20:	0004a017 	andeq	sl, r4, r7, lsl r0
     a24:	aa0b2400 	bge	2c9a2c <__core1_unwind_stub-0xd365d4>
     a28:	08000006 	stmdaeq	r0, {r1, r2}
     a2c:	250f028b 	strcs	r0, [pc, #-651]	; 7a9 <__core1_unwind_stub-0xfff857>
     a30:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     a34:	000e930b 	andeq	r9, lr, fp, lsl #6
     a38:	028c0800 	addeq	r0, ip, #0, 16
     a3c:	0000992c 	andeq	r9, r0, ip, lsr #18
     a40:	b70b5000 	strlt	r5, [fp, -r0]
     a44:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     a48:	9b1a028d 	blls	681484 <__core1_unwind_stub-0x97eb7c>
     a4c:	58000009 	stmdapl	r0, {r0, r3}
     a50:	00058f0b 	andeq	r8, r5, fp, lsl #30
     a54:	028e0800 	addeq	r0, lr, #0, 16
     a58:	00040016 	andeq	r0, r4, r6, lsl r0
     a5c:	c70b6800 	strgt	r6, [fp, -r0, lsl #16]
     a60:	0800000c 	stmdaeq	r0, {r2, r3}
     a64:	0016028f 	andseq	r0, r6, pc, lsl #5
     a68:	70000004 	andvc	r0, r0, r4
     a6c:	0000950b 	andeq	r9, r0, fp, lsl #10
     a70:	02900800 	addseq	r0, r0, #0, 16
     a74:	00040016 	andeq	r0, r4, r6, lsl r0
     a78:	770b7800 	strvc	r7, [fp, -r0, lsl #16]
     a7c:	0800000a 	stmdaeq	r0, {r1, r3}
     a80:	09100291 	ldmdbeq	r0, {r0, r4, r7, r9}
     a84:	8000000b 	andhi	r0, r0, fp
     a88:	0000ca0b 	andeq	ip, r0, fp, lsl #20
     a8c:	02920800 	addseq	r0, r2, #0, 16
     a90:	000b1910 	andeq	r1, fp, r0, lsl r9
     a94:	130b8800 	movwne	r8, #47104	; 0xb800
     a98:	0800000c 	stmdaeq	r0, {r2, r3}
     a9c:	250f0293 	strcs	r0, [pc, #-659]	; 811 <__core1_unwind_stub-0xfff7ef>
     aa0:	a0000000 	andge	r0, r0, r0
     aa4:	0001f10b 	andeq	pc, r1, fp, lsl #2
     aa8:	02940800 	addseq	r0, r4, #0, 16
     aac:	00040016 	andeq	r0, r4, r6, lsl r0
     ab0:	c70ba400 	strgt	sl, [fp, -r0, lsl #8]
     ab4:	08000005 	stmdaeq	r0, {r0, r2}
     ab8:	00160295 	mulseq	r6, r5, r2
     abc:	ac000004 	stcge	0, cr0, [r0], {4}
     ac0:	0004b50b 	andeq	fp, r4, fp, lsl #10
     ac4:	02960800 	addseq	r0, r6, #0, 16
     ac8:	00040016 	andeq	r0, r4, r6, lsl r0
     acc:	080bb400 	stmdaeq	fp, {sl, ip, sp, pc}
     ad0:	08000007 	stmdaeq	r0, {r0, r1, r2}
     ad4:	00160297 	mulseq	r6, r7, r2
     ad8:	bc000004 	stclt	0, cr0, [r0], {4}
     adc:	00057e0b 	andeq	r7, r5, fp, lsl #28
     ae0:	02980800 	addseq	r0, r8, #0, 16
     ae4:	00040016 	andeq	r0, r4, r6, lsl r0
     ae8:	d60bc400 	strle	ip, [fp], -r0, lsl #8
     aec:	08000007 	stmdaeq	r0, {r0, r1, r2}
     af0:	25080299 	strcs	r0, [r8, #-665]	; 0xfffffd67
     af4:	cc000000 	stcgt	0, cr0, [r0], {-0}
     af8:	036c1200 	cmneq	ip, #0, 4
     afc:	0b090000 	bleq	240b04 <__core1_unwind_stub-0xdbf4fc>
     b00:	3d130000 	ldccc	0, cr0, [r3, #-0]
     b04:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     b08:	036c1200 	cmneq	ip, #0, 4
     b0c:	0b190000 	bleq	640b14 <__core1_unwind_stub-0x9bf4ec>
     b10:	3d130000 	ldccc	0, cr0, [r3, #-0]
     b14:	07000000 	streq	r0, [r0, -r0]
     b18:	036c1200 	cmneq	ip, #0, 4
     b1c:	0b290000 	bleq	a40b24 <__core1_unwind_stub-0x5bf4dc>
     b20:	3d130000 	ldccc	0, cr0, [r3, #-0]
     b24:	17000000 	strne	r0, [r0, -r0]
     b28:	08f01d00 	ldmeq	r0!, {r8, sl, fp, ip}^
     b2c:	5007029e 	mulpl	r7, lr, r2
     b30:	0b00000b 	bleq	b64 <__core1_unwind_stub-0xfff49c>
     b34:	0000031c 	andeq	r0, r0, ip, lsl r3
     b38:	1b02a108 	blne	a8f60 <__core1_unwind_stub-0xf570a0>
     b3c:	00000b50 	andeq	r0, r0, r0, asr fp
     b40:	0edd0b00 	vfnmseq.f64	d16, d13, d0
     b44:	a2080000 	andge	r0, r8, #0
     b48:	0b601802 	bleq	1806b58 <__bss_end__+0x7f2b58>
     b4c:	00780000 	rsbseq	r0, r8, r0
     b50:	00060012 	andeq	r0, r6, r2, lsl r0
     b54:	000b6000 	andeq	r6, fp, r0
     b58:	003d1300 	eorseq	r1, sp, r0, lsl #6
     b5c:	001d0000 	andseq	r0, sp, r0
     b60:	00003d12 	andeq	r3, r0, r2, lsl sp
     b64:	000b7000 	andeq	r7, fp, r0
     b68:	003d1300 	eorseq	r1, sp, r0, lsl #6
     b6c:	001d0000 	andseq	r0, sp, r0
     b70:	8308f01e 	movwhi	pc, #32798	; 0x801e	; <UNPREDICTABLE>
     b74:	0b950302 	bleq	fe541784 <__shm_end__+0xbe541784>
     b78:	001f0000 	andseq	r0, pc, r0
     b7c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     b80:	e40b029a 	str	r0, [fp], #-666	; 0xfffffd66
     b84:	1f000009 	svcne	0x00000009
     b88:	00000a55 	andeq	r0, r0, r5, asr sl
     b8c:	0b02a308 	bleq	a97b4 <__core1_unwind_stub-0xf5684c>
     b90:	00000b29 	andeq	r0, r0, r9, lsr #22
     b94:	036c1200 	cmneq	ip, #0, 4
     b98:	0ba50000 	bleq	fe940ba0 <__shm_end__+0xbe940ba0>
     b9c:	3d130000 	ldccc	0, cr0, [r3, #-0]
     ba0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     ba4:	0e9e2000 	cdpeq	0, 9, cr2, cr14, cr0, {0}
     ba8:	040d0000 	streq	r0, [sp], #-0
     bac:	00000ba5 	andeq	r0, r0, r5, lsr #23
     bb0:	000bbb21 	andeq	fp, fp, r1, lsr #22
     bb4:	07670f00 	strbeq	r0, [r7, -r0, lsl #30]!
     bb8:	0d000000 	stceq	0, cr0, [r0, #-0]
     bbc:	000bb004 	andeq	fp, fp, r4
     bc0:	8a040d00 	bhi	103fc8 <__core1_unwind_stub-0xefc038>
     bc4:	21000004 	tstcs	r0, r4
     bc8:	00000bd2 	ldrdeq	r0, [r0], -r2
     bcc:	0000250f 	andeq	r2, r0, pc, lsl #10
     bd0:	040d0000 	streq	r0, [sp], #-0
     bd4:	00000bd8 	ldrdeq	r0, [r0], -r8
     bd8:	0bc7040d 	bleq	ff1c1c14 <__shm_end__+0xbf1c1c14>
     bdc:	49120000 	ldmdbmi	r2, {}	; <UNPREDICTABLE>
     be0:	ee000009 	cdp	0, 0, cr0, cr0, cr9, {0}
     be4:	1300000b 	movwne	r0, #11
     be8:	0000003d 	andeq	r0, r0, sp, lsr r0
     bec:	09220002 	stmdbeq	r2!, {r1}
     bf0:	0800000a 	stmdaeq	r0, {r1, r3}
     bf4:	67170333 			; <UNDEFINED> instruction: 0x67170333
     bf8:	22000007 	andcs	r0, r0, #7
     bfc:	00000a02 	andeq	r0, r0, r2, lsl #20
     c00:	1d033408 	cfstrsne	mvf3, [r3, #-32]	; 0xffffffe0
     c04:	0000076d 	andeq	r0, r0, sp, ror #14
     c08:	00038e03 	andeq	r8, r3, r3, lsl #28
     c0c:	10420a00 	subne	r0, r2, r0, lsl #20
     c10:	00000949 	andeq	r0, r0, r9, asr #18
     c14:	0c08040d 	cfstrseq	mvf0, [r8], {13}
     c18:	5f230000 	svcpl	0x00230000
     c1c:	01000001 	tsteq	r0, r1
     c20:	0c140e36 	ldceq	14, cr0, [r4], {54}	; 0x36
     c24:	65230000 	strvs	r0, [r3, #-0]!
     c28:	01000001 	tsteq	r0, r1
     c2c:	0c140e37 	ldceq	14, cr0, [r4], {55}	; 0x37
     c30:	94240000 	strtls	r0, [r4], #-0
     c34:	02000007 	andeq	r0, r0, #7
     c38:	ac110603 	ldcge	6, cr0, [r1], {3}
     c3c:	00000000 	andeq	r0, r0, r0
     c40:	44000000 	strmi	r0, [r0], #-0
     c44:	01000000 	mrseq	r0, (UNDEF: 0)
     c48:	000c5e9c 	muleq	ip, ip, lr
     c4c:	0bac2500 	bleq	feb0a054 <__shm_end__+0xbeb0a054>
     c50:	03020000 	movweq	r0, #8192	; 0x2000
     c54:	0c5e4d06 	mrrceq	13, 0, r4, lr, cr6
     c58:	91020000 	mrsls	r0, (UNDEF: 2)
     c5c:	040d0074 	streq	r0, [sp], #-116	; 0xffffff8c
     c60:	00000378 	andeq	r0, r0, r8, ror r3
     c64:	000df924 	andeq	pc, sp, r4, lsr #18
     c68:	05d20200 	ldrbeq	r0, [r2, #512]	; 0x200
     c6c:	0000ac11 	andeq	sl, r0, r1, lsl ip
     c70:	00000000 	andeq	r0, r0, r0
     c74:	0001bc00 	andeq	fp, r1, r0, lsl #24
     c78:	e69c0100 	ldr	r0, [ip], r0, lsl #2
     c7c:	2500000c 	strcs	r0, [r0, #-12]
     c80:	00000bac 	andeq	r0, r0, ip, lsr #23
     c84:	4e05d202 	cdpmi	2, 0, cr13, cr5, cr2, {0}
     c88:	00000c5e 	andeq	r0, r0, lr, asr ip
     c8c:	25649102 	strbcs	r9, [r4, #-258]!	; 0xfffffefe
     c90:	000009c4 	andeq	r0, r0, r4, asr #19
     c94:	6405d202 	strvs	sp, [r5], #-514	; 0xfffffdfe
     c98:	00000ce6 	andeq	r0, r0, r6, ror #25
     c9c:	25609102 	strbcs	r9, [r0, #-258]!	; 0xfffffefe
     ca0:	000009f3 	strdeq	r0, [r0], -r3
     ca4:	7605d202 	strvc	sp, [r5], -r2, lsl #4
     ca8:	00000cec 	andeq	r0, r0, ip, ror #25
     cac:	265c9102 	ldrbcs	r9, [ip], -r2, lsl #2
     cb0:	000009c0 	andeq	r0, r0, r0, asr #19
     cb4:	0f05d402 	svceq	0x0005d402
     cb8:	000000a0 	andeq	r0, r0, r0, lsr #1
     cbc:	26709102 	ldrbtcs	r9, [r0], -r2, lsl #2
     cc0:	000009ef 	andeq	r0, r0, pc, ror #19
     cc4:	0f05d502 	svceq	0x0005d502
     cc8:	00000081 	andeq	r0, r0, r1, lsl #1
     ccc:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
     cd0:	00000000 	andeq	r0, r0, r0
     cd4:	00050a26 	andeq	r0, r5, r6, lsr #20
     cd8:	05e20200 	strbeq	r0, [r2, #512]!	; 0x200
     cdc:	00008112 	andeq	r8, r0, r2, lsl r1
     ce0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     ce4:	040d0000 	streq	r0, [sp], #-0
     ce8:	000000a0 	andeq	r0, r0, r0, lsr #1
     cec:	0081040d 	addeq	r0, r1, sp, lsl #8
     cf0:	a1240000 			; <UNDEFINED> instruction: 0xa1240000
     cf4:	02000003 	andeq	r0, r0, #3
     cf8:	ac1105b8 	cfldr32ge	mvfx0, [r1], {184}	; 0xb8
     cfc:	00000000 	andeq	r0, r0, r0
     d00:	e0000000 	and	r0, r0, r0
     d04:	01000000 	mrseq	r0, (UNDEF: 0)
     d08:	000d4d9c 	muleq	sp, ip, sp
     d0c:	0bac2500 	bleq	feb0a114 <__shm_end__+0xbeb0a114>
     d10:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
     d14:	0c5e4f05 	mrrceq	15, 0, r4, lr, cr5
     d18:	91020000 	mrsls	r0, (UNDEF: 2)
     d1c:	6176286c 	cmnvs	r6, ip, ror #16
     d20:	05b80200 	ldreq	r0, [r8, #512]!	; 0x200
     d24:	000d4d66 	andeq	r4, sp, r6, ror #26
     d28:	68910200 	ldmvs	r1, {r9}
     d2c:	000dda25 	andeq	sp, sp, r5, lsr #20
     d30:	05b80200 	ldreq	r0, [r8, #512]!	; 0x200
     d34:	00002c71 	andeq	r2, r0, r1, ror ip
     d38:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     d3c:	00050a26 	andeq	r0, r5, r6, lsr #20
     d40:	05ba0200 	ldreq	r0, [sl, #512]!	; 0x200
     d44:	0000810e 	andeq	r8, r0, lr, lsl #2
     d48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d4c:	53040d00 	movwpl	r0, #19712	; 0x4d00
     d50:	2900000d 	stmdbcs	r0, {r0, r2, r3}
     d54:	00048224 	andeq	r8, r4, r4, lsr #4
     d58:	05730200 	ldrbeq	r0, [r3, #-512]!	; 0xfffffe00
     d5c:	0000a00b 	andeq	sl, r0, fp
     d60:	00000000 	andeq	r0, r0, r0
     d64:	00018400 	andeq	r8, r1, r0, lsl #8
     d68:	039c0100 	orrseq	r0, ip, #0, 2
     d6c:	2800000e 	stmdacs	r0, {r1, r2, r3}
     d70:	02006176 	andeq	r6, r0, #-2147483619	; 0x8000001d
     d74:	4d290573 	cfstr32mi	mvfx0, [r9, #-460]!	; 0xfffffe34
     d78:	0200000d 	andeq	r0, r0, #13
     d7c:	10256491 	mlane	r5, r1, r4, r6
     d80:	02000002 	andeq	r0, r0, #2
     d84:	ec380573 	cfldr32	mvfx0, [r8], #-460	; 0xfffffe34
     d88:	0200000c 	andeq	r0, r0, #12
     d8c:	0a256091 	beq	958fd8 <__core1_unwind_stub-0x6a7028>
     d90:	02000005 	andeq	r0, r0, #5
     d94:	ec4e0573 	cfstr64	mvdx0, [lr], {115}	; 0x73
     d98:	0200000c 	andeq	r0, r0, #12
     d9c:	702a5c91 	mlavc	sl, r1, ip, r5
     da0:	75020061 	strvc	r0, [r2, #-97]	; 0xffffff9f
     da4:	00a00f05 	adceq	r0, r0, r5, lsl #30
     da8:	91020000 	mrsls	r0, (UNDEF: 2)
     dac:	00002b74 	andeq	r2, r0, r4, ror fp
     db0:	00500000 	subseq	r0, r0, r0
     db4:	0dca0000 	stcleq	0, cr0, [sl]
     db8:	662a0000 	strtvs	r0, [sl], -r0
     dbc:	8d020073 	stchi	0, cr0, [r2, #-460]	; 0xfffffe34
     dc0:	00811205 	addeq	r1, r1, r5, lsl #4
     dc4:	91020000 	mrsls	r0, (UNDEF: 2)
     dc8:	002b0068 	eoreq	r0, fp, r8, rrx
     dcc:	60000000 	andvs	r0, r0, r0
     dd0:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     dd4:	2600000d 	strcs	r0, [r0], -sp
     dd8:	00000394 	muleq	r0, r4, r3
     ddc:	12059a02 	andne	r9, r5, #8192	; 0x2000
     de0:	00000081 	andeq	r0, r0, r1, lsl #1
     de4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     de8:	0000002c 	andeq	r0, r0, ip, lsr #32
     dec:	00006800 	andeq	r6, r0, r0, lsl #16
     df0:	03942600 	orrseq	r2, r4, #0, 12
     df4:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
     df8:	00811205 	addeq	r1, r1, r5, lsl #4
     dfc:	91020000 	mrsls	r0, (UNDEF: 2)
     e00:	24000070 	strcs	r0, [r0], #-112	; 0xffffff90
     e04:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     e08:	11053402 	tstne	r5, r2, lsl #8
     e0c:	000000ac 	andeq	r0, r0, ip, lsr #1
     e10:	01001aa4 	smlatbeq	r0, r4, sl, r1
     e14:	0000013c 	andeq	r0, r0, ip, lsr r1
     e18:	0e679c01 	cdpeq	12, 6, cr9, cr7, cr1, {0}
     e1c:	72250000 	eorvc	r0, r5, #0
     e20:	0200000c 	andeq	r0, r0, #12
     e24:	673a0534 			; <UNDEFINED> instruction: 0x673a0534
     e28:	0200000e 	andeq	r0, r0, #14
     e2c:	bb265c91 	bllt	998078 <__core1_unwind_stub-0x667f88>
     e30:	02000011 	andeq	r0, r0, #17
     e34:	ac150536 	cfldr32ge	mvfx0, [r5], {54}	; 0x36
     e38:	02000000 	andeq	r0, r0, #0
     e3c:	382c7491 	stmdacc	ip!, {r0, r4, r7, sl, ip, sp, lr}
     e40:	6801001b 	stmdavs	r1, {r0, r1, r3, r4}
     e44:	2a000000 	bcs	e4c <__core1_unwind_stub-0xfff1b4>
     e48:	53020069 	movwpl	r0, #8297	; 0x2069
     e4c:	00250d05 	eoreq	r0, r5, r5, lsl #26
     e50:	91020000 	mrsls	r0, (UNDEF: 2)
     e54:	07582670 			; <UNDEFINED> instruction: 0x07582670
     e58:	54020000 	strpl	r0, [r2], #-0
     e5c:	0e6d1705 	cdpeq	7, 6, cr1, cr13, cr5, {0}
     e60:	91020000 	mrsls	r0, (UNDEF: 2)
     e64:	0d000060 	stceq	0, cr0, [r0, #-384]	; 0xfffffe80
     e68:	00008d04 	andeq	r8, r0, r4, lsl #26
     e6c:	01641200 	cmneq	r4, r0, lsl #4
     e70:	0e7d0000 	cdpeq	0, 7, cr0, cr13, cr0, {0}
     e74:	3d130000 	ldccc	0, cr0, [r3, #-0]
     e78:	0f000000 	svceq	0x00000000
     e7c:	0bf02400 	bleq	ffc09e84 <__shm_end__+0xbfc09e84>
     e80:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
     e84:	00ac1103 	adceq	r1, ip, r3, lsl #2
     e88:	0ccc0000 	stcleq	0, cr0, [ip], {0}
     e8c:	0dd80100 	ldfeqe	f0, [r8]
     e90:	9c010000 	stcls	0, cr0, [r1], {-0}
     e94:	00001207 	andeq	r1, r0, r7, lsl #4
     e98:	000c7225 	andeq	r7, ip, r5, lsr #4
     e9c:	03be0200 			; <UNDEFINED> instruction: 0x03be0200
     ea0:	00120734 	andseq	r0, r2, r4, lsr r7
     ea4:	c4910300 	ldrgt	r0, [r1], #768	; 0x300
     ea8:	02da255e 	sbcseq	r2, sl, #394264576	; 0x17800000
     eac:	bf020000 	svclt	0x00020000
     eb0:	120d4503 	andne	r4, sp, #12582912	; 0xc00000
     eb4:	91030000 	mrsls	r0, (UNDEF: 3)
     eb8:	d6255ec0 	strtle	r5, [r5], -r0, asr #29
     ebc:	02000002 	andeq	r0, r0, #2
     ec0:	383603c0 	ldmdacc	r6!, {r6, r7, r8, r9}
     ec4:	03000000 	movweq	r0, #0
     ec8:	255ebc91 	ldrbcs	fp, [lr, #-3217]	; 0xfffff36f
     ecc:	00000e83 	andeq	r0, r0, r3, lsl #29
     ed0:	3d03c102 	stfccd	f4, [r3, #-8]
     ed4:	000002f9 	strdeq	r0, [r0], -r9
     ed8:	5eb89103 	asnple	f1, f3
     edc:	0003d325 	andeq	sp, r3, r5, lsr #6
     ee0:	03c20200 	biceq	r0, r2, #0, 4
     ee4:	0002e530 	andeq	lr, r2, r0, lsr r5
     ee8:	00910200 	addseq	r0, r1, r0, lsl #4
     eec:	02006b2a 	andeq	r6, r0, #43008	; 0xa800
     ef0:	250903c4 	strcs	r0, [r9, #-964]	; 0xfffffc3c
     ef4:	02000000 	andeq	r0, r0, #0
     ef8:	692a7491 	stmdbvs	sl!, {r0, r4, r7, sl, ip, sp, lr}
     efc:	03c50200 	biceq	r0, r5, #0, 4
     f00:	00002c0c 	andeq	r2, r0, ip, lsl #24
     f04:	70910200 	addsvc	r0, r1, r0, lsl #4
     f08:	00078126 	andeq	r8, r7, r6, lsr #2
     f0c:	03c60200 	biceq	r0, r6, #0, 4
     f10:	0012130a 	andseq	r1, r2, sl, lsl #6
     f14:	ec910300 	ldc	3, cr0, [r1], {0}
     f18:	0c8f265e 	stceq	6, cr2, [pc], {94}	; 0x5e
     f1c:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
     f20:	002c0c03 	eoreq	r0, ip, r3, lsl #24
     f24:	91020000 	mrsls	r0, (UNDEF: 2)
     f28:	0b8c2650 	bleq	fe30a870 <__shm_end__+0xbe30a870>
     f2c:	cb020000 	blgt	80f34 <__core1_unwind_stub-0xf7f0cc>
     f30:	08bb0c03 	ldmeq	fp!, {r0, r1, sl, fp}
     f34:	91020000 	mrsls	r0, (UNDEF: 2)
     f38:	09ca264c 	stmibeq	sl, {r2, r3, r6, r9, sl, sp}^
     f3c:	cc020000 	stcgt	0, cr0, [r2], {-0}
     f40:	002c0c03 	eoreq	r0, ip, r3, lsl #24
     f44:	91020000 	mrsls	r0, (UNDEF: 2)
     f48:	0e3c2b6c 	vsubeq.f64	d2, d12, d28
     f4c:	00bc0100 	adcseq	r0, ip, r0, lsl #2
     f50:	0f8a0000 	svceq	0x008a0000
     f54:	62260000 	eorvs	r0, r6, #0
     f58:	02000012 	andeq	r0, r0, #18
     f5c:	811603ff 			; <UNDEFINED> instruction: 0x811603ff
     f60:	03000000 	movweq	r0, #0
     f64:	267eec91 			; <UNDEFINED> instruction: 0x267eec91
     f68:	00000c08 	andeq	r0, r0, r8, lsl #24
     f6c:	22040002 	andcs	r0, r4, #2
     f70:	000002e7 	andeq	r0, r0, r7, ror #5
     f74:	5ed89103 	atnple	f1, f3
     f78:	000cb026 	andeq	fp, ip, r6, lsr #32
     f7c:	04010200 	streq	r0, [r1], #-512	; 0xfffffe00
     f80:	000cec18 	andeq	lr, ip, r8, lsl ip
     f84:	f0910300 			; <UNDEFINED> instruction: 0xf0910300
     f88:	342c007e 	strtcc	r0, [ip], #-126	; 0xffffff82
     f8c:	3c01000f 	stccc	0, cr0, [r1], {15}
     f90:	2a00000b 	bcs	fc4 <__core1_unwind_stub-0xfff03c>
     f94:	02006176 	andeq	r6, r0, #-2147483619	; 0x8000001d
     f98:	a013041d 	andsge	r0, r3, sp, lsl r4
     f9c:	02000000 	andeq	r0, r0, #0
     fa0:	702a6891 	mlavc	sl, r1, r8, r6
     fa4:	1e020061 	cdpne	0, 0, cr0, cr2, cr1, {3}
     fa8:	00a01304 	adceq	r1, r0, r4, lsl #6
     fac:	91020000 	mrsls	r0, (UNDEF: 2)
     fb0:	0dda2664 	ldcleq	6, cr2, [sl, #400]	; 0x190
     fb4:	1f020000 	svcne	0x00020000
     fb8:	00811304 	addeq	r1, r1, r4, lsl #6
     fbc:	91020000 	mrsls	r0, (UNDEF: 2)
     fc0:	006a2a60 	rsbeq	r2, sl, r0, ror #20
     fc4:	12042002 	andne	r2, r4, #2
     fc8:	00000081 	andeq	r0, r0, r1, lsl #1
     fcc:	265c9102 	ldrbcs	r9, [ip], -r2, lsl #2
     fd0:	000006c7 	andeq	r0, r0, r7, asr #13
     fd4:	12042402 	andne	r2, r4, #33554432	; 0x2000000
     fd8:	00001224 	andeq	r1, r0, r4, lsr #4
     fdc:	5ecc9103 	acsple	f1, f3
     fe0:	0007df26 	andeq	sp, r7, r6, lsr #30
     fe4:	042c0200 	strteq	r0, [ip], #-512	; 0xfffffe00
     fe8:	00008112 	andeq	r8, r0, r2, lsl r1
     fec:	58910200 	ldmpl	r1, {r9}
     ff0:	00107c2b 	andseq	r7, r0, fp, lsr #24
     ff4:	00044001 	andeq	r4, r4, r1
     ff8:	00110b00 	andseq	r0, r1, r0, lsl #22
     ffc:	09f32600 	ldmibeq	r3!, {r9, sl, sp}^
    1000:	3f020000 	svccc	0x00020000
    1004:	00811604 	addeq	r1, r1, r4, lsl #12
    1008:	91020000 	mrsls	r0, (UNDEF: 2)
    100c:	10ac2b54 	adcne	r2, ip, r4, asr fp
    1010:	00e40100 	rsceq	r0, r4, r0, lsl #2
    1014:	104e0000 	subne	r0, lr, r0
    1018:	62260000 	eorvs	r0, r6, #0
    101c:	02000012 	andeq	r0, r0, #18
    1020:	811e0448 	tsthi	lr, r8, asr #8
    1024:	03000000 	movweq	r0, #0
    1028:	267fbc91 			; <UNDEFINED> instruction: 0x267fbc91
    102c:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    1030:	20044a02 	andcs	r4, r4, r2, lsl #20
    1034:	00000cec 	andeq	r0, r0, ip, ror #25
    1038:	7fb89103 	svcvc	0x00b89103
    103c:	000aa426 	andeq	sl, sl, r6, lsr #8
    1040:	044b0200 	strbeq	r0, [fp], #-512	; 0xfffffe00
    1044:	0000811e 	andeq	r8, r0, lr, lsl r1
    1048:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
    104c:	b02b007f 	eorlt	r0, fp, pc, ror r0
    1050:	18010011 	stmdane	r1, {r0, r4}
    1054:	8f000001 	svchi	0x00000001
    1058:	26000010 			; <UNDEFINED> instruction: 0x26000010
    105c:	00001262 	andeq	r1, r0, r2, ror #4
    1060:	1e046002 	cdpne	0, 0, cr6, cr4, cr2, {0}
    1064:	00000081 	andeq	r0, r0, r1, lsl #1
    1068:	7fa49103 	svcvc	0x00a49103
    106c:	000cb026 	andeq	fp, ip, r6, lsr #32
    1070:	04620200 	strbteq	r0, [r2], #-512	; 0xfffffe00
    1074:	000cec20 	andeq	lr, ip, r0, lsr #24
    1078:	a0910300 	addsge	r0, r1, r0, lsl #6
    107c:	0aa4267f 	beq	fe90aa80 <__shm_end__+0xbe90aa80>
    1080:	63020000 	movwvs	r0, #8192	; 0x2000
    1084:	00811e04 	addeq	r1, r1, r4, lsl #28
    1088:	91030000 	mrsls	r0, (UNDEF: 3)
    108c:	2b007f9c 	blcs	20f04 <__core1_unwind_stub-0xfdf0fc>
    1090:	010012d8 	ldrdeq	r1, [r0, -r8]
    1094:	000000e4 	andeq	r0, r0, r4, ror #1
    1098:	000010d0 	ldrdeq	r1, [r0], -r0
    109c:	00126226 	andseq	r6, r2, r6, lsr #4
    10a0:	04790200 	ldrbteq	r0, [r9], #-512	; 0xfffffe00
    10a4:	0000811e 	andeq	r8, r0, lr, lsl r1
    10a8:	b0910300 	addslt	r0, r1, r0, lsl #6
    10ac:	0cb0267f 	ldceq	6, cr2, [r0], #508	; 0x1fc
    10b0:	7b020000 	blvc	810b8 <__core1_unwind_stub-0xf7ef48>
    10b4:	0cec2004 	stcleq	0, cr2, [ip], #16
    10b8:	91030000 	mrsls	r0, (UNDEF: 3)
    10bc:	a4267fac 	strtge	r7, [r6], #-4012	; 0xfffff054
    10c0:	0200000a 	andeq	r0, r0, #10
    10c4:	811e047c 	tsthi	lr, ip, ror r4
    10c8:	03000000 	movweq	r0, #0
    10cc:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    10d0:	0013cc2c 	andseq	ip, r3, ip, lsr #24
    10d4:	0000e401 	andeq	lr, r0, r1, lsl #8
    10d8:	12622600 	rsbne	r2, r2, #0, 12
    10dc:	90020000 	andls	r0, r2, r0
    10e0:	00811e04 	addeq	r1, r1, r4, lsl #28
    10e4:	91020000 	mrsls	r0, (UNDEF: 2)
    10e8:	0cb02648 	ldceq	6, cr2, [r0], #288	; 0x120
    10ec:	92020000 	andls	r0, r2, #0
    10f0:	0cec2004 	stcleq	0, cr2, [ip], #16
    10f4:	91020000 	mrsls	r0, (UNDEF: 2)
    10f8:	0aa42644 	beq	fe90aa10 <__shm_end__+0xbe90aa10>
    10fc:	93020000 	movwls	r0, #8192	; 0x2000
    1100:	00811e04 	addeq	r1, r1, r4, lsl #28
    1104:	91020000 	mrsls	r0, (UNDEF: 2)
    1108:	2b000040 	blcs	1210 <__core1_unwind_stub-0xffedf0>
    110c:	010014d8 	ldrdeq	r1, [r0, -r8]
    1110:	000000b8 	strheq	r0, [r0], -r8
    1114:	0000112a 	andeq	r1, r0, sl, lsr #2
    1118:	00126226 	andseq	r6, r2, r6, lsr #4
    111c:	04b60200 	ldrteq	r0, [r6], #512	; 0x200
    1120:	0000811a 	andeq	r8, r0, sl, lsl r1
    1124:	98910300 	ldmls	r1, {r8, r9}
    1128:	b02b007f 	eorlt	r0, fp, pc, ror r0
    112c:	ec010015 	stc	0, cr0, [r1], {21}
    1130:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    1134:	26000011 			; <UNDEFINED> instruction: 0x26000011
    1138:	00001262 	andeq	r1, r0, r2, ror #4
    113c:	1a04c702 	bne	132d4c <__core1_unwind_stub-0xecd2b4>
    1140:	00000081 	andeq	r0, r0, r1, lsl #1
    1144:	7f909103 	svcvc	0x00909103
    1148:	16ac2b00 	strtne	r2, [ip], r0, lsl #22
    114c:	00b80100 	adcseq	r0, r8, r0, lsl #2
    1150:	11680000 	cmnne	r8, r0
    1154:	62260000 	eorvs	r0, r6, #0
    1158:	02000012 	andeq	r0, r0, #18
    115c:	811a04db 			; <UNDEFINED> instruction: 0x811a04db
    1160:	03000000 	movweq	r0, #0
    1164:	007f9491 			; <UNDEFINED> instruction: 0x007f9491
    1168:	0017902b 	andseq	r9, r7, fp, lsr #32
    116c:	0000b801 	andeq	fp, r0, r1, lsl #16
    1170:	00118700 	andseq	r8, r1, r0, lsl #14
    1174:	12622600 	rsbne	r2, r2, #0, 12
    1178:	f0020000 			; <UNDEFINED> instruction: 0xf0020000
    117c:	00811a04 	addeq	r1, r1, r4, lsl #20
    1180:	91030000 	mrsls	r0, (UNDEF: 3)
    1184:	2b007f8c 	blcs	20fbc <__core1_unwind_stub-0xfdf044>
    1188:	01001870 	tsteq	r0, r0, ror r8
    118c:	0000010c 	andeq	r0, r0, ip, lsl #2
    1190:	000011c8 	andeq	r1, r0, r8, asr #3
    1194:	00126226 	andseq	r6, r2, r6, lsr #4
    1198:	05070200 	streq	r0, [r7, #-512]	; 0xfffffe00
    119c:	0000811a 	andeq	r8, r0, sl, lsl r1
    11a0:	88910300 	ldmhi	r1, {r8, r9}
    11a4:	0cb0267f 	ldceq	6, cr2, [r0], #508	; 0x1fc
    11a8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    11ac:	0cec1c05 	stcleq	12, cr1, [ip], #20
    11b0:	91030000 	mrsls	r0, (UNDEF: 3)
    11b4:	a4267f84 	strtge	r7, [r6], #-3972	; 0xfffff07c
    11b8:	0200000a 	andeq	r0, r0, #10
    11bc:	811a050a 	tsthi	sl, sl, lsl #10
    11c0:	03000000 	movweq	r0, #0
    11c4:	007f8091 			; <UNDEFINED> instruction: 0x007f8091
    11c8:	00198c2c 	andseq	r8, r9, ip, lsr #24
    11cc:	0000d801 	andeq	sp, r0, r1, lsl #16
    11d0:	12622600 	rsbne	r2, r2, #0, 12
    11d4:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    11d8:	00811605 	addeq	r1, r1, r5, lsl #12
    11dc:	91030000 	mrsls	r0, (UNDEF: 3)
    11e0:	b0267efc 	strdlt	r7, [r6], -ip	; <UNPREDICTABLE>
    11e4:	0200000c 	andeq	r0, r0, #12
    11e8:	ec180520 	cfldr32	mvfx0, [r8], {32}
    11ec:	0300000c 	movweq	r0, #12
    11f0:	267ef891 			; <UNDEFINED> instruction: 0x267ef891
    11f4:	00000aa4 	andeq	r0, r0, r4, lsr #21
    11f8:	16052102 	strne	r2, [r5], -r2, lsl #2
    11fc:	00000081 	andeq	r0, r0, r1, lsl #1
    1200:	7ef49103 	nrmvcs	f1, f3
    1204:	0d000000 	stceq	0, cr0, [r0, #-0]
    1208:	000cec04 	andeq	lr, ip, r4, lsl #24
    120c:	f4040d00 			; <UNDEFINED> instruction: 0xf4040d00
    1210:	12000002 	andne	r0, r0, #2
    1214:	0000036c 	andeq	r0, r0, ip, ror #6
    1218:	00001224 	andeq	r1, r0, r4, lsr #4
    121c:	00003d2d 	andeq	r3, r0, sp, lsr #26
    1220:	000fff00 	andeq	pc, pc, r0, lsl #30
    1224:	00008112 	andeq	r8, r0, r2, lsl r1
    1228:	00123400 	andseq	r3, r2, r0, lsl #8
    122c:	003d1300 	eorseq	r1, sp, r0, lsl #6
    1230:	00020000 	andeq	r0, r2, r0
    1234:	00003e2e 	andeq	r3, r0, lr, lsr #28
    1238:	03af0200 			; <UNDEFINED> instruction: 0x03af0200
    123c:	0000ac18 	andeq	sl, r0, r8, lsl ip
    1240:	000c8400 	andeq	r8, ip, r0, lsl #8
    1244:	00004801 	andeq	r4, r0, r1, lsl #16
    1248:	609c0100 	addsvs	r0, ip, r0, lsl #2
    124c:	25000012 	strcs	r0, [r0, #-18]	; 0xffffffee
    1250:	00000c77 	andeq	r0, r0, r7, ror ip
    1254:	3503af02 	strcc	sl, [r3, #-3842]	; 0xfffff0fe
    1258:	00000cec 	andeq	r0, r0, ip, ror #25
    125c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1260:	00090f2f 	andeq	r0, r9, pc, lsr #30
    1264:	03950200 	orrseq	r0, r5, #0, 4
    1268:	0000811a 	andeq	r8, r0, sl, lsl r1
    126c:	000b7400 	andeq	r7, fp, r0, lsl #8
    1270:	00011001 	andeq	r1, r1, r1
    1274:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    1278:	28000012 	stmdacs	r0, {r1, r4}
    127c:	02006170 	andeq	r6, r0, #112, 2
    1280:	a0430395 	umaalge	r0, r3, r5, r3
    1284:	02000000 	andeq	r0, r0, #0
    1288:	6d286491 	cfstrsvs	mvf6, [r8, #-580]!	; 0xfffffdbc
    128c:	02006d65 	andeq	r6, r0, #6464	; 0x1940
    1290:	0d540396 	ldcleq	3, cr0, [r4, #-600]	; 0xfffffda8
    1294:	02000012 	andeq	r0, r0, #18
    1298:	742a6091 	strtvc	r6, [sl], #-145	; 0xffffff6f
    129c:	02007865 	andeq	r7, r0, #6619136	; 0x650000
    12a0:	25090398 	strcs	r0, [r9, #-920]	; 0xfffffc68
    12a4:	02000000 	andeq	r0, r0, #0
    12a8:	632a7491 			; <UNDEFINED> instruction: 0x632a7491
    12ac:	03990200 	orrseq	r0, r9, #0, 4
    12b0:	00002509 	andeq	r2, r0, r9, lsl #10
    12b4:	70910200 	addsvc	r0, r1, r0, lsl #4
    12b8:	0200622a 	andeq	r6, r0, #-1610612734	; 0xa0000002
    12bc:	2509039a 	strcs	r0, [r9, #-922]	; 0xfffffc66
    12c0:	02000000 	andeq	r0, r0, #0
    12c4:	2f006c91 	svccs	0x00006c91
    12c8:	00000108 	andeq	r0, r0, r8, lsl #2
    12cc:	1a037b02 	bne	dfedc <__core1_unwind_stub-0xf20124>
    12d0:	00000081 	andeq	r0, r0, r1, lsl #1
    12d4:	01000a68 	tsteq	r0, r8, ror #20
    12d8:	0000010c 	andeq	r0, r0, ip, lsl #2
    12dc:	132e9c01 			; <UNDEFINED> instruction: 0x132e9c01
    12e0:	70280000 	eorvc	r0, r8, r0
    12e4:	7b020061 	blvc	81470 <__core1_unwind_stub-0xf7eb90>
    12e8:	00a04303 	adceq	r4, r0, r3, lsl #6
    12ec:	91020000 	mrsls	r0, (UNDEF: 2)
    12f0:	656d2864 	strbvs	r2, [sp, #-2148]!	; 0xfffff79c
    12f4:	7c02006d 	stcvc	0, cr0, [r2], {109}	; 0x6d
    12f8:	120d5403 	andne	r5, sp, #50331648	; 0x3000000
    12fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1300:	65742a60 	ldrbvs	r2, [r4, #-2656]!	; 0xfffff5a0
    1304:	7e020078 	mcrvc	0, 0, r0, cr2, cr8, {3}
    1308:	00250903 	eoreq	r0, r5, r3, lsl #18
    130c:	91020000 	mrsls	r0, (UNDEF: 2)
    1310:	00632a74 	rsbeq	r2, r3, r4, ror sl
    1314:	09037f02 	stmdbeq	r3, {r1, r8, r9, sl, fp, ip, sp, lr}
    1318:	00000025 	andeq	r0, r0, r5, lsr #32
    131c:	2a709102 	bcs	1c2572c <__bss_end__+0xc1172c>
    1320:	80020062 	andhi	r0, r2, r2, rrx
    1324:	00250903 	eoreq	r0, r5, r3, lsl #18
    1328:	91020000 	mrsls	r0, (UNDEF: 2)
    132c:	752f006c 	strvc	r0, [pc, #-108]!	; 12c8 <__core1_unwind_stub-0xffed38>
    1330:	02000006 	andeq	r0, r0, #6
    1334:	811a0361 	tsthi	sl, r1, ror #6
    1338:	44000000 	strmi	r0, [r0], #-0
    133c:	24010009 	strcs	r0, [r1], #-9
    1340:	01000001 	tsteq	r0, r1
    1344:	0013959c 	mulseq	r3, ip, r5
    1348:	61702800 	cmnvs	r0, r0, lsl #16
    134c:	03610200 	cmneq	r1, #0, 4
    1350:	0000a046 	andeq	sl, r0, r6, asr #32
    1354:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1358:	6d656d28 	stclvs	13, cr6, [r5, #-160]!	; 0xffffff60
    135c:	03620200 	cmneq	r2, #0, 4
    1360:	00120d57 	andseq	r0, r2, r7, asr sp
    1364:	60910200 	addsvs	r0, r1, r0, lsl #4
    1368:	7865742a 	stmdavc	r5!, {r1, r3, r5, sl, ip, sp, lr}^
    136c:	03640200 	cmneq	r4, #0, 4
    1370:	00002509 	andeq	r2, r0, r9, lsl #10
    1374:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1378:	0200632a 	andeq	r6, r0, #-1476395008	; 0xa8000000
    137c:	25090365 	strcs	r0, [r9, #-869]	; 0xfffffc9b
    1380:	02000000 	andeq	r0, r0, #0
    1384:	622a7091 	eorvs	r7, sl, #145	; 0x91
    1388:	03660200 	cmneq	r6, #0, 4
    138c:	00002509 	andeq	r2, r0, r9, lsl #10
    1390:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1394:	05df2f00 	ldrbeq	r2, [pc, #3840]	; 229c <__core1_unwind_stub-0xffdd64>
    1398:	47020000 	strmi	r0, [r2, -r0]
    139c:	00811a03 	addeq	r1, r1, r3, lsl #20
    13a0:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    13a4:	01240100 			; <UNDEFINED> instruction: 0x01240100
    13a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    13ac:	000013fc 	strdeq	r1, [r0], -ip
    13b0:	00617028 	rsbeq	r7, r1, r8, lsr #32
    13b4:	41034702 	tstmi	r3, r2, lsl #14
    13b8:	000000a0 	andeq	r0, r0, r0, lsr #1
    13bc:	28649102 	stmdacs	r4!, {r1, r8, ip, pc}^
    13c0:	006d656d 	rsbeq	r6, sp, sp, ror #10
    13c4:	52034802 	andpl	r4, r3, #131072	; 0x20000
    13c8:	0000120d 	andeq	r1, r0, sp, lsl #4
    13cc:	2a609102 	bcs	18257dc <__bss_end__+0x8117dc>
    13d0:	00786574 	rsbseq	r6, r8, r4, ror r5
    13d4:	09034a02 	stmdbeq	r3, {r1, r9, fp, lr}
    13d8:	00000025 	andeq	r0, r0, r5, lsr #32
    13dc:	2a749102 	bcs	1d257ec <__bss_end__+0xd117ec>
    13e0:	4b020063 	blmi	81574 <__core1_unwind_stub-0xf7ea8c>
    13e4:	00250903 	eoreq	r0, r5, r3, lsl #18
    13e8:	91020000 	mrsls	r0, (UNDEF: 2)
    13ec:	00622a70 	rsbeq	r2, r2, r0, ror sl
    13f0:	09034c02 	stmdbeq	r3, {r1, sl, fp, lr}
    13f4:	00000025 	andeq	r0, r0, r5, lsr #32
    13f8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    13fc:	00044e2f 	andeq	r4, r4, pc, lsr #28
    1400:	03380200 	teqeq	r8, #0, 4
    1404:	0000811a 	andeq	r8, r0, sl, lsl r1
    1408:	0007c000 	andeq	ip, r7, r0
    140c:	00006001 	andeq	r6, r0, r1
    1410:	389c0100 	ldmcc	ip, {r8}
    1414:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    1418:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    141c:	43033802 	movwmi	r3, #14338	; 0x3802
    1420:	000000a0 	andeq	r0, r0, r0, lsr #1
    1424:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    1428:	006d656d 	rsbeq	r6, sp, sp, ror #10
    142c:	54033902 	strpl	r3, [r3], #-2306	; 0xfffff6fe
    1430:	0000120d 	andeq	r1, r0, sp, lsl #4
    1434:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1438:	00049324 	andeq	r9, r4, r4, lsr #6
    143c:	032e0200 			; <UNDEFINED> instruction: 0x032e0200
    1440:	00002c08 	andeq	r2, r0, r8, lsl #24
    1444:	00075800 	andeq	r5, r7, r0, lsl #16
    1448:	00006801 	andeq	r6, r0, r1, lsl #16
    144c:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
    1450:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    1454:	000002da 	ldrdeq	r0, [r0], -sl
    1458:	46032e02 	strmi	r2, [r3], -r2, lsl #28
    145c:	0000120d 	andeq	r1, r0, sp, lsl #4
    1460:	5ff49103 	svcpl	0x00f49103
    1464:	0002d625 	andeq	sp, r2, r5, lsr #12
    1468:	032f0200 			; <UNDEFINED> instruction: 0x032f0200
    146c:	00003837 	andeq	r3, r0, r7, lsr r8
    1470:	f0910300 			; <UNDEFINED> instruction: 0xf0910300
    1474:	0781265f 			; <UNDEFINED> instruction: 0x0781265f
    1478:	31020000 	mrscc	r0, (UNDEF: 2)
    147c:	12130a03 	andsne	r0, r3, #12288	; 0x3000
    1480:	91030000 	mrsls	r0, (UNDEF: 3)
    1484:	2e005ff8 	mcrcs	15, 0, r5, cr0, cr8, {7}
    1488:	000001c0 	andeq	r0, r0, r0, asr #3
    148c:	0f02b202 	svceq	0x0002b202
    1490:	0000002c 	andeq	r0, r0, ip, lsr #32
    1494:	01000430 	tsteq	r0, r0, lsr r4
    1498:	00000328 	andeq	r0, r0, r8, lsr #6
    149c:	15539c01 	ldrbne	r9, [r3, #-3073]	; 0xfffff3ff
    14a0:	da250000 	ble	9414a8 <__core1_unwind_stub-0x6beb58>
    14a4:	02000002 	andeq	r0, r0, #2
    14a8:	0d5602b2 	lfmeq	f0, 2, [r6, #-712]	; 0xfffffd38
    14ac:	02000012 	andeq	r0, r0, #18
    14b0:	d6255491 			; <UNDEFINED> instruction: 0xd6255491
    14b4:	02000002 	andeq	r0, r0, #2
    14b8:	384702b3 	stmdacc	r7, {r0, r1, r4, r5, r7, r9}^
    14bc:	02000000 	andeq	r0, r0, #0
    14c0:	81255091 			; <UNDEFINED> instruction: 0x81255091
    14c4:	02000007 	andeq	r0, r0, #7
    14c8:	bb4102b4 	bllt	1041fa0 <__bss_end__+0x2dfa0>
    14cc:	02000008 	andeq	r0, r0, #8
    14d0:	8f264c91 	svchi	0x00264c91
    14d4:	0200000c 	andeq	r0, r0, #12
    14d8:	2c0c02b6 	sfmcs	f0, 4, [ip], {182}	; 0xb6
    14dc:	02000000 	andeq	r0, r0, #0
    14e0:	692a7491 	stmdbvs	sl!, {r0, r4, r7, sl, ip, sp, lr}
    14e4:	02b70200 	adcseq	r0, r7, #0, 4
    14e8:	0000810e 	andeq	r8, r0, lr, lsl #2
    14ec:	70910200 	addsvc	r0, r1, r0, lsl #4
    14f0:	00048c2c 	andeq	r8, r4, ip, lsr #24
    14f4:	00025001 	andeq	r5, r2, r1
    14f8:	61762a00 	cmnvs	r6, r0, lsl #20
    14fc:	02c20200 	sbceq	r0, r2, #0, 4
    1500:	0000a01a 	andeq	sl, r0, sl, lsl r0
    1504:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1508:	0061702a 	rsbeq	r7, r1, sl, lsr #32
    150c:	1a02c302 	bne	b211c <__core1_unwind_stub-0xf4dee4>
    1510:	000000a0 	andeq	r0, r0, r0, lsr #1
    1514:	26689102 	strbtcs	r9, [r8], -r2, lsl #2
    1518:	00000dda 	ldrdeq	r0, [r0], -sl
    151c:	1a02c402 	bne	b252c <__core1_unwind_stub-0xf4dad4>
    1520:	00000081 	andeq	r0, r0, r1, lsl #1
    1524:	26649102 	strbtcs	r9, [r4], -r2, lsl #2
    1528:	00000b29 	andeq	r0, r0, r9, lsr #22
    152c:	1a02c502 	bne	b293c <__core1_unwind_stub-0xf4d6c4>
    1530:	00000102 	andeq	r0, r0, r2, lsl #2
    1534:	2c639102 	stfcsp	f1, [r3], #-8
    1538:	01000584 	smlabbeq	r0, r4, r5, r0
    153c:	00000084 	andeq	r0, r0, r4, lsl #1
    1540:	00018f26 	andeq	r8, r1, r6, lsr #30
    1544:	02dd0200 	sbcseq	r0, sp, #0, 4
    1548:	00008116 	andeq	r8, r0, r6, lsl r1
    154c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1550:	2f000000 	svccs	0x00000000
    1554:	00000c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1558:	1802a402 	stmdane	r2, {r1, sl, sp, pc}
    155c:	000000ac 	andeq	r0, r0, ip, lsr #1
    1560:	010003c8 	smlabteq	r0, r8, r3, r0
    1564:	00000068 	andeq	r0, r0, r8, rrx
    1568:	158f9c01 	strne	r9, [pc, #3073]	; 2171 <__core1_unwind_stub-0xffde8f>
    156c:	81250000 			; <UNDEFINED> instruction: 0x81250000
    1570:	02000007 	andeq	r0, r0, #7
    1574:	bb3a02a4 	bllt	e8200c <__core1_unwind_stub-0x17dff4>
    1578:	02000008 	andeq	r0, r0, #8
    157c:	29257491 	stmdbcs	r5!, {r0, r4, r7, sl, ip, sp, lr}
    1580:	0200000b 	andeq	r0, r0, #11
    1584:	025402a4 	subseq	r0, r4, #164, 4	; 0x4000000a
    1588:	02000001 	andeq	r0, r0, #1
    158c:	30007391 	mulcc	r0, r1, r3
    1590:	00000634 	andeq	r0, r0, r4, lsr r6
    1594:	11028a02 	tstne	r2, r2, lsl #20
    1598:	000000ac 	andeq	r0, r0, ip, lsr #1
    159c:	00000000 	andeq	r0, r0, r0
    15a0:	00000034 	andeq	r0, r0, r4, lsr r0
    15a4:	15bb9c01 	ldrne	r9, [fp, #3073]!	; 0xc01
    15a8:	9b260000 	blls	9815b0 <__core1_unwind_stub-0x67ea50>
    15ac:	02000003 	andeq	r0, r0, #3
    15b0:	810e028f 	smlabbhi	lr, pc, r2, r0	; <UNPREDICTABLE>
    15b4:	02000000 	andeq	r0, r0, #0
    15b8:	30007491 	mulcc	r0, r1, r4
    15bc:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    15c0:	11027502 	tstne	r2, r2, lsl #10
    15c4:	000000ac 	andeq	r0, r0, ip, lsr #1
    15c8:	01000394 			; <UNDEFINED> instruction: 0x01000394
    15cc:	00000034 	andeq	r0, r0, r4, lsr r0
    15d0:	15e79c01 	strbne	r9, [r7, #3073]!	; 0xc01
    15d4:	9b260000 	blls	9815dc <__core1_unwind_stub-0x67ea24>
    15d8:	02000003 	andeq	r0, r0, #3
    15dc:	810e027a 	tsthi	lr, sl, ror r2
    15e0:	02000000 	andeq	r0, r0, #0
    15e4:	30007491 	mulcc	r0, r1, r4
    15e8:	00000d4c 	andeq	r0, r0, ip, asr #26
    15ec:	11026202 	tstne	r2, r2, lsl #4
    15f0:	000000ac 	andeq	r0, r0, ip, lsr #1
    15f4:	00000000 	andeq	r0, r0, r0
    15f8:	00000078 	andeq	r0, r0, r8, ror r0
    15fc:	164d9c01 	strbne	r9, [sp], -r1, lsl #24
    1600:	bc250000 	stclt	0, cr0, [r5], #-0
    1604:	02000002 	andeq	r0, r0, #2
    1608:	8d370262 	lfmhi	f0, 4, [r7, #-392]!	; 0xfffffe78
    160c:	02000000 	andeq	r0, r0, #0
    1610:	bb256c91 	bllt	95c85c <__core1_unwind_stub-0x6a37a4>
    1614:	02000001 	andeq	r0, r0, #1
    1618:	8d4e0262 	sfmhi	f0, 2, [lr, #-392]	; 0xfffffe78
    161c:	02000000 	andeq	r0, r0, #0
    1620:	1f266891 	svcne	0x00266891
    1624:	0200000a 	andeq	r0, r0, #10
    1628:	810e0264 	tsthi	lr, r4, ror #4
    162c:	02000000 	andeq	r0, r0, #0
    1630:	76317491 			; <UNDEFINED> instruction: 0x76317491
    1634:	0000001c 	andeq	r0, r0, ip, lsl r0
    1638:	0c000000 	stceq	0, cr0, [r0], {-0}
    163c:	02000000 	andeq	r0, r0, #0
    1640:	32050270 	andcc	r0, r5, #112, 4
    1644:	00001c83 	andeq	r1, r0, r3, lsl #25
    1648:	00709102 	rsbseq	r9, r0, r2, lsl #2
    164c:	02933000 	addseq	r3, r3, #0
    1650:	41020000 	mrsmi	r0, (UNDEF: 2)
    1654:	00ac1102 	adceq	r1, ip, r2, lsl #2
    1658:	02b40000 	adcseq	r0, r4, #0
    165c:	00e00100 	rsceq	r0, r0, r0, lsl #2
    1660:	9c010000 	stcls	0, cr0, [r1], {-0}
    1664:	000016de 	ldrdeq	r1, [r0], -lr
    1668:	00075825 	andeq	r5, r7, r5, lsr #16
    166c:	02410200 	subeq	r0, r1, #0, 4
    1670:	0016de36 	andseq	sp, r6, r6, lsr lr
    1674:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1678:	000cd525 	andeq	sp, ip, r5, lsr #10
    167c:	02420200 	subeq	r0, r2, #0, 4
    1680:	0000382f 	andeq	r3, r0, pc, lsr #16
    1684:	60910200 	addsvs	r0, r1, r0, lsl #4
    1688:	00044926 	andeq	r4, r4, r6, lsr #18
    168c:	02440200 	subeq	r0, r4, #0, 4
    1690:	0000810e 	andeq	r8, r0, lr, lsl #2
    1694:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1698:	0200692a 	andeq	r6, r0, #688128	; 0xa8000
    169c:	810e0245 	tsthi	lr, r5, asr #4
    16a0:	02000000 	andeq	r0, r0, #0
    16a4:	f02b7091 			; <UNDEFINED> instruction: 0xf02b7091
    16a8:	60010002 	andvs	r0, r1, r2
    16ac:	c3000000 	movwgt	r0, #0
    16b0:	2a000016 	bcs	1710 <__core1_unwind_stub-0xffe8f0>
    16b4:	02007061 	andeq	r7, r0, #97	; 0x61
    16b8:	6417024e 	ldrvs	r0, [r7], #-590	; 0xfffffdb2
    16bc:	02000001 	andeq	r0, r0, #1
    16c0:	31006f91 			; <UNDEFINED> instruction: 0x31006f91
    16c4:	00001c5c 	andeq	r1, r0, ip, asr ip
    16c8:	01000374 	tsteq	r0, r4, ror r3
    16cc:	0000000c 	andeq	r0, r0, ip
    16d0:	05025d02 	streq	r5, [r2, #-3330]	; 0xfffff2fe
    16d4:	001c6932 	andseq	r6, ip, r2, lsr r9
    16d8:	68910200 	ldmvs	r1, {r9}
    16dc:	040d0000 	streq	r0, [sp], #-0
    16e0:	00000170 	andeq	r0, r0, r0, ror r1
    16e4:	00030a30 	andeq	r0, r3, r0, lsr sl
    16e8:	02250200 	eoreq	r0, r5, #0, 4
    16ec:	0000ac11 	andeq	sl, r0, r1, lsl ip
    16f0:	00020000 	andeq	r0, r2, r0
    16f4:	0000b401 	andeq	fp, r0, r1, lsl #8
    16f8:	5a9c0100 	bpl	fe701b00 <__shm_end__+0xbe701b00>
    16fc:	25000017 	strcs	r0, [r0, #-23]	; 0xffffffe9
    1700:	000003c1 	andeq	r0, r0, r1, asr #7
    1704:	2e022502 	cfsh32cs	mvfx2, mvfx2, #2
    1708:	00001761 	andeq	r1, r0, r1, ror #14
    170c:	256f9102 	strbcs	r9, [pc, #-258]!	; 1612 <__core1_unwind_stub-0xffe9ee>
    1710:	00000f01 	andeq	r0, r0, r1, lsl #30
    1714:	2e022602 	cfmadd32cs	mvax0, mvfx2, mvfx2, mvfx2
    1718:	00001761 	andeq	r1, r0, r1, ror #14
    171c:	256e9102 	strbcs	r9, [lr, #-258]!	; 0xfffffefe
    1720:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1724:	32022702 	andcc	r2, r2, #524288	; 0x80000
    1728:	0000008d 	andeq	r0, r0, sp, lsl #1
    172c:	26689102 	strbtcs	r9, [r8], -r2, lsl #2
    1730:	00000b93 	muleq	r0, r3, fp
    1734:	0e022902 	vmlaeq.f16	s4, s4, s4	; <UNPREDICTABLE>
    1738:	00000081 	andeq	r0, r0, r1, lsl #1
    173c:	31749102 	cmncc	r4, r2, lsl #2
    1740:	00001c24 	andeq	r1, r0, r4, lsr #24
    1744:	01000294 			; <UNDEFINED> instruction: 0x01000294
    1748:	0000000c 	andeq	r0, r0, ip
    174c:	05023c02 	streq	r3, [r2, #-3074]	; 0xfffff3fe
    1750:	001c3132 	andseq	r3, ip, r2, lsr r1
    1754:	70910200 	addsvc	r0, r1, r0, lsl #4
    1758:	01050000 	mrseq	r0, (UNDEF: 5)
    175c:	0008cb02 	andeq	ip, r8, r2, lsl #22
    1760:	175a0400 	ldrbne	r0, [sl, -r0, lsl #8]
    1764:	17300000 	ldrne	r0, [r0, -r0]!
    1768:	0200000b 	andeq	r0, r0, #11
    176c:	ac110212 	lfmge	f0, 4, [r1], {18}
    1770:	00000000 	andeq	r0, r0, r0
    1774:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1778:	01000000 	mrseq	r0, (UNDEF: 0)
    177c:	0017da9c 	mulseq	r7, ip, sl
    1780:	0c5e2500 	cfldr64eq	mvdx2, [lr], {-0}
    1784:	12020000 	andne	r0, r2, #0
    1788:	0d4d2f02 	stcleq	15, cr2, [sp, #-8]
    178c:	91020000 	mrsls	r0, (UNDEF: 2)
    1790:	0a302664 	beq	c0b128 <__core1_unwind_stub-0x3f4ed8>
    1794:	14020000 	strne	r0, [r2], #-0
    1798:	00810e02 	addeq	r0, r1, r2, lsl #28
    179c:	91020000 	mrsls	r0, (UNDEF: 2)
    17a0:	1bcc3374 	blne	ff30e578 <__shm_end__+0xbf30e578>
    17a4:	00000000 	andeq	r0, r0, r0
    17a8:	000c0000 	andeq	r0, ip, r0
    17ac:	1c020000 	stcne	0, cr0, [r2], {-0}
    17b0:	17bf0d02 	ldrne	r0, [pc, r2, lsl #26]!
    17b4:	de340000 	cdple	0, 3, cr0, cr4, cr0, {0}
    17b8:	0200001b 	andeq	r0, r0, #27
    17bc:	31006c91 			; <UNDEFINED> instruction: 0x31006c91
    17c0:	00001bb0 			; <UNDEFINED> instruction: 0x00001bb0
    17c4:	00000000 	andeq	r0, r0, r0
    17c8:	0000000c 	andeq	r0, r0, ip
    17cc:	05022002 	streq	r2, [r2, #-2]
    17d0:	001bbe32 	andseq	fp, fp, r2, lsr lr
    17d4:	70910200 	addsvc	r0, r1, r0, lsl #4
    17d8:	50300000 	eorspl	r0, r0, r0
    17dc:	02000000 	andeq	r0, r0, #0
    17e0:	e508020b 	str	r0, [r8, #-523]	; 0xfffffdf5
    17e4:	00000002 	andeq	r0, r0, r2
    17e8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    17ec:	01000000 	mrseq	r0, (UNDEF: 0)
    17f0:	0018209c 	mulseq	r8, ip, r0
    17f4:	0a302600 	beq	c0affc <__core1_unwind_stub-0x3f5004>
    17f8:	0d020000 	stceq	0, cr0, [r2, #-0]
    17fc:	00810e02 	addeq	r0, r1, r2, lsl #28
    1800:	91020000 	mrsls	r0, (UNDEF: 2)
    1804:	1bcc3174 	blne	ff30dddc <__shm_end__+0xbf30dddc>
    1808:	00000000 	andeq	r0, r0, r0
    180c:	000c0000 	andeq	r0, ip, r0
    1810:	0d020000 	stceq	0, cr0, [r2, #-0]
    1814:	de341602 	cfmsuba32le	mvax0, mvax1, mvfx4, mvfx2
    1818:	0200001b 	andeq	r0, r0, #27
    181c:	00007091 	muleq	r0, r1, r0
    1820:	00019730 	andeq	r9, r1, r0, lsr r7
    1824:	01f30200 	mvnseq	r0, r0, lsl #4
    1828:	0000ac11 	andeq	sl, r0, r1, lsl ip
    182c:	00012000 	andeq	r2, r1, r0
    1830:	0000e001 	andeq	lr, r0, r1
    1834:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    1838:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
    183c:	00000c5e 	andeq	r0, r0, lr, asr ip
    1840:	2f01f302 	svccs	0x0001f302
    1844:	00000d4d 	andeq	r0, r0, sp, asr #26
    1848:	265c9102 	ldrbcs	r9, [ip], -r2, lsl #2
    184c:	00000b93 	muleq	r0, r3, fp
    1850:	0e01f502 	cfsh32eq	mvfx15, mvfx1, #2
    1854:	00000081 	andeq	r0, r0, r1, lsl #1
    1858:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    185c:	00000c63 	andeq	r0, r0, r3, ror #24
    1860:	0e01f602 	cfmadd32eq	mvax0, mvfx15, mvfx1, mvfx2
    1864:	00000081 	andeq	r0, r0, r1, lsl #1
    1868:	26709102 	ldrbtcs	r9, [r0], -r2, lsl #2
    186c:	00000a2a 	andeq	r0, r0, sl, lsr #20
    1870:	0e01f702 	cdpeq	7, 0, cr15, cr1, cr2, {0}
    1874:	00000081 	andeq	r0, r0, r1, lsl #1
    1878:	336c9102 	cmncc	ip, #-2147483648	; 0x80000000
    187c:	00001c3e 	andeq	r1, r0, lr, lsr ip
    1880:	01000130 	tsteq	r0, r0, lsr r1
    1884:	0000000c 	andeq	r0, r0, ip
    1888:	1601f502 	strne	pc, [r1], -r2, lsl #10
    188c:	00001899 	muleq	r0, r9, r8
    1890:	001c4f34 	andseq	r4, ip, r4, lsr pc
    1894:	68910200 	ldmvs	r1, {r9}
    1898:	1bec3100 	blne	ffb0dca0 <__shm_end__+0xbfb0dca0>
    189c:	01e00000 	mvneq	r0, r0
    18a0:	000c0100 	andeq	r0, ip, r0, lsl #2
    18a4:	06020000 	streq	r0, [r2], -r0
    18a8:	f9320502 			; <UNDEFINED> instruction: 0xf9320502
    18ac:	0200001b 	andeq	r0, r0, #27
    18b0:	00006491 	muleq	r0, r1, r4
    18b4:	0004f830 	andeq	pc, r4, r0, lsr r8	; <UNPREDICTABLE>
    18b8:	01ea0200 	mvneq	r0, r0, lsl #4
    18bc:	0002e508 	andeq	lr, r2, r8, lsl #10
    18c0:	00000000 	andeq	r0, r0, r0
    18c4:	00007400 	andeq	r7, r0, r0, lsl #8
    18c8:	389c0100 	ldmcc	ip, {r8}
    18cc:	26000019 			; <UNDEFINED> instruction: 0x26000019
    18d0:	00000b93 	muleq	r0, r3, fp
    18d4:	0e01ec02 	cdpeq	12, 0, cr14, cr1, cr2, {0}
    18d8:	00000081 	andeq	r0, r0, r1, lsl #1
    18dc:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    18e0:	00000c63 	andeq	r0, r0, r3, ror #24
    18e4:	0e01ed02 	cdpeq	13, 0, cr14, cr1, cr2, {0}
    18e8:	00000081 	andeq	r0, r0, r1, lsl #1
    18ec:	26709102 	ldrbtcs	r9, [r0], -r2, lsl #2
    18f0:	00000a2a 	andeq	r0, r0, sl, lsr #20
    18f4:	0e01ee02 	cdpeq	14, 0, cr14, cr1, cr2, {0}
    18f8:	00000081 	andeq	r0, r0, r1, lsl #1
    18fc:	336c9102 	cmncc	ip, #-2147483648	; 0x80000000
    1900:	00001c3e 	andeq	r1, r0, lr, lsr ip
    1904:	00000000 	andeq	r0, r0, r0
    1908:	0000000c 	andeq	r0, r0, ip
    190c:	1601ec02 	strne	lr, [r1], -r2, lsl #24
    1910:	0000191d 	andeq	r1, r0, sp, lsl r9
    1914:	001c4f34 	andseq	r4, ip, r4, lsr pc
    1918:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    191c:	1c063100 	stfnes	f3, [r6], {-0}
    1920:	00000000 	andeq	r0, r0, r0
    1924:	000c0000 	andeq	r0, ip, r0
    1928:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
    192c:	17341601 	ldrne	r1, [r4, -r1, lsl #12]!
    1930:	0200001c 	andeq	r0, r0, #28
    1934:	00006891 	muleq	r0, r1, r8
    1938:	0007b224 	andeq	fp, r7, r4, lsr #4
    193c:	01de0200 	bicseq	r0, lr, r0, lsl #4
    1940:	0000ac11 	andeq	sl, r0, r1, lsl ip
    1944:	0000d000 	andeq	sp, r0, r0
    1948:	00005001 	andeq	r5, r0, r1
    194c:	9c9c0100 	ldflss	f0, [ip], {0}
    1950:	26000019 			; <UNDEFINED> instruction: 0x26000019
    1954:	000012c9 	andeq	r1, r0, r9, asr #5
    1958:	0e01e002 	cdpeq	0, 0, cr14, cr1, cr2, {0}
    195c:	00000081 	andeq	r0, r0, r1, lsl #1
    1960:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
    1964:	00001caa 	andeq	r1, r0, sl, lsr #25
    1968:	010000e0 	smlatteq	r0, r0, r0, r0
    196c:	0000000c 	andeq	r0, r0, ip
    1970:	0d01e302 	stceq	3, cr14, [r1, #-8]
    1974:	00001981 	andeq	r1, r0, r1, lsl #19
    1978:	001cbb34 	andseq	fp, ip, r4, lsr fp
    197c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1980:	1c903100 	ldfnes	f3, [r0], {0}
    1984:	01040000 	mrseq	r0, (UNDEF: 4)
    1988:	000c0100 	andeq	r0, ip, r0, lsl #2
    198c:	e5020000 	str	r0, [r2, #-0]
    1990:	9d320501 	cfldr32ls	mvfx0, [r2, #-4]!
    1994:	0200001c 	andeq	r0, r0, #28
    1998:	00007091 	muleq	r0, r1, r0
    199c:	000a3624 	andeq	r3, sl, r4, lsr #12
    19a0:	01d10200 	bicseq	r0, r1, r0, lsl #4
    19a4:	0000ac11 	andeq	sl, r0, r1, lsl ip
    19a8:	00000000 	andeq	r0, r0, r0
    19ac:	00006800 	andeq	r6, r0, r0, lsl #16
    19b0:	009c0100 	addseq	r0, ip, r0, lsl #2
    19b4:	2600001a 			; <UNDEFINED> instruction: 0x2600001a
    19b8:	000012c9 	andeq	r1, r0, r9, asr #5
    19bc:	0e01d302 	cdpeq	3, 0, cr13, cr1, cr2, {0}
    19c0:	00000081 	andeq	r0, r0, r1, lsl #1
    19c4:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
    19c8:	00001caa 	andeq	r1, r0, sl, lsr #25
    19cc:	00000000 	andeq	r0, r0, r0
    19d0:	0000000c 	andeq	r0, r0, ip
    19d4:	1601d302 	strne	sp, [r1], -r2, lsl #6
    19d8:	000019e5 	andeq	r1, r0, r5, ror #19
    19dc:	001cbb34 	andseq	fp, ip, r4, lsr fp
    19e0:	70910200 	addsvc	r0, r1, r0, lsl #4
    19e4:	1c903100 	ldfnes	f3, [r0], {0}
    19e8:	00000000 	andeq	r0, r0, r0
    19ec:	000c0000 	andeq	r0, ip, r0
    19f0:	d9020000 	stmdble	r2, {}	; <UNPREDICTABLE>
    19f4:	9d320501 	cfldr32ls	mvfx0, [r2, #-4]!
    19f8:	0200001c 	andeq	r0, r0, #28
    19fc:	00006c91 	muleq	r0, r1, ip
    1a00:	00071d30 	andeq	r1, r7, r0, lsr sp
    1a04:	01900200 	orrseq	r0, r0, r0, lsl #4
    1a08:	0000ac11 	andeq	sl, r0, r1, lsl ip
    1a0c:	00000000 	andeq	r0, r0, r0
    1a10:	00016800 	andeq	r6, r1, r0, lsl #16
    1a14:	a39c0100 	orrsge	r0, ip, #0, 2
    1a18:	2500001a 	strcs	r0, [r0, #-26]	; 0xffffffe6
    1a1c:	00000c72 	andeq	r0, r0, r2, ror ip
    1a20:	37019002 	strcc	r9, [r1, -r2]
    1a24:	00000e67 	andeq	r0, r0, r7, ror #28
    1a28:	285c9102 	ldmdacs	ip, {r1, r8, ip, pc}^
    1a2c:	02006176 	andeq	r6, r0, #-2147483619	; 0x8000001d
    1a30:	4d330191 	ldfmis	f0, [r3, #-580]!	; 0xfffffdbc
    1a34:	0200000d 	andeq	r0, r0, #13
    1a38:	62255891 	eorvs	r5, r5, #9502720	; 0x910000
    1a3c:	02000012 	andeq	r0, r0, #18
    1a40:	8d360192 	ldfhis	f0, [r6, #-584]!	; 0xfffffdb8
    1a44:	02000000 	andeq	r0, r0, #0
    1a48:	24265491 	strtcs	r5, [r6], #-1169	; 0xfffffb6f
    1a4c:	02000009 	andeq	r0, r0, #9
    1a50:	5a0a0194 	bpl	2820a8 <__core1_unwind_stub-0xd7df58>
    1a54:	02000017 	andeq	r0, r0, #23
    1a58:	23267791 			; <UNDEFINED> instruction: 0x23267791
    1a5c:	02000000 	andeq	r0, r0, #0
    1a60:	810e0195 			; <UNDEFINED> instruction: 0x810e0195
    1a64:	02000000 	andeq	r0, r0, #0
    1a68:	77266c91 			; <UNDEFINED> instruction: 0x77266c91
    1a6c:	0200000c 	andeq	r0, r0, #12
    1a70:	ec0f0196 	stfs	f0, [pc], {150}	; 0x96
    1a74:	0200000c 	andeq	r0, r0, #12
    1a78:	a6266891 			; <UNDEFINED> instruction: 0xa6266891
    1a7c:	0200000a 	andeq	r0, r0, #10
    1a80:	810e0197 			; <UNDEFINED> instruction: 0x810e0197
    1a84:	02000000 	andeq	r0, r0, #0
    1a88:	002c6491 	mlaeq	ip, r1, r4, r6
    1a8c:	44000000 	strmi	r0, [r0], #-0
    1a90:	2a000000 	bcs	1a98 <__core1_unwind_stub-0xffe568>
    1a94:	c6020069 	strgt	r0, [r2], -r9, rrx
    1a98:	00250d01 	eoreq	r0, r5, r1, lsl #26
    1a9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1aa0:	30000070 	andcc	r0, r0, r0, ror r0
    1aa4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1aa8:	11014902 	tstne	r1, r2, lsl #18
    1aac:	000000ac 	andeq	r0, r0, ip, lsr #1
    1ab0:	00000000 	andeq	r0, r0, r0
    1ab4:	00000150 	andeq	r0, r0, r0, asr r1
    1ab8:	1b1c9c01 	blne	728ac4 <__core1_unwind_stub-0x8d753c>
    1abc:	72250000 	eorvc	r0, r5, #0
    1ac0:	0200000c 	andeq	r0, r0, #12
    1ac4:	ec310149 	ldfs	f0, [r1], #-292	; 0xfffffedc
    1ac8:	0200000c 	andeq	r0, r0, #12
    1acc:	76286491 			; <UNDEFINED> instruction: 0x76286491
    1ad0:	4a020061 	bmi	81c5c <__core1_unwind_stub-0xf7e3a4>
    1ad4:	0d4d3301 	stcleq	3, cr3, [sp, #-4]
    1ad8:	91020000 	mrsls	r0, (UNDEF: 2)
    1adc:	12622560 	rsbne	r2, r2, #96, 10	; 0x18000000
    1ae0:	4b020000 	blmi	81ae8 <__core1_unwind_stub-0xf7e518>
    1ae4:	008d3601 	addeq	r3, sp, r1, lsl #12
    1ae8:	91020000 	mrsls	r0, (UNDEF: 2)
    1aec:	00692a5c 	rsbeq	r2, r9, ip, asr sl
    1af0:	09014d02 	stmdbeq	r1, {r1, r8, sl, fp, lr}
    1af4:	00000025 	andeq	r0, r0, r5, lsr #32
    1af8:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    1afc:	00000aa6 	andeq	r0, r0, r6, lsr #21
    1b00:	0e014e02 	cdpeq	14, 0, cr4, cr1, cr2, {0}
    1b04:	00000081 	andeq	r0, r0, r1, lsl #1
    1b08:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    1b0c:	0000068a 	andeq	r0, r0, sl, lsl #13
    1b10:	0a014f02 	beq	55720 <__core1_unwind_stub-0xfaa8e0>
    1b14:	0000175a 	andeq	r1, r0, sl, asr r7
    1b18:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1b1c:	00051e24 	andeq	r1, r5, r4, lsr #28
    1b20:	01340200 	teqeq	r4, r0, lsl #4
    1b24:	0000ac11 	andeq	sl, r0, r1, lsl ip
    1b28:	00004400 	andeq	r4, r0, r0, lsl #8
    1b2c:	00008c01 	andeq	r8, r0, r1, lsl #24
    1b30:	829c0100 	addshi	r0, ip, #0, 2
    1b34:	2500001b 	strcs	r0, [r0, #-27]	; 0xffffffe5
    1b38:	00000c72 	andeq	r0, r0, r2, ror ip
    1b3c:	2d013402 	cfstrscs	mvf3, [r1, #-8]
    1b40:	00000cec 	andeq	r0, r0, ip, ror #25
    1b44:	26649102 	strbtcs	r9, [r4], -r2, lsl #2
    1b48:	00000b93 	muleq	r0, r3, fp
    1b4c:	0e013602 	cfmadd32eq	mvax0, mvfx3, mvfx1, mvfx2
    1b50:	00000081 	andeq	r0, r0, r1, lsl #1
    1b54:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    1b58:	00000c63 	andeq	r0, r0, r3, ror #24
    1b5c:	0e013702 	cdpeq	7, 0, cr3, cr1, cr2, {0}
    1b60:	00000081 	andeq	r0, r0, r1, lsl #1
    1b64:	31709102 	cmncc	r0, r2, lsl #2
    1b68:	00001c3e 	andeq	r1, r0, lr, lsr ip
    1b6c:	01000054 	qaddeq	r0, r4, r0
    1b70:	0000000c 	andeq	r0, r0, ip
    1b74:	16013602 	strne	r3, [r1], -r2, lsl #12
    1b78:	001c4f34 	andseq	r4, ip, r4, lsr pc
    1b7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1b80:	25350000 	ldrcs	r0, [r5, #-0]!
    1b84:	02000006 	andeq	r0, r0, #6
    1b88:	ac11012f 	ldfges	f0, [r1], {47}	; 0x2f
    1b8c:	00000000 	andeq	r0, r0, r0
    1b90:	1c000000 	stcne	0, cr0, [r0], {-0}
    1b94:	01000000 	mrseq	r0, (UNDEF: 0)
    1b98:	08be359c 	ldmeq	lr!, {r2, r3, r4, r7, r8, sl, ip, sp}
    1b9c:	2a020000 	bcs	81ba4 <__core1_unwind_stub-0xf7e45c>
    1ba0:	00ac1101 	adceq	r1, ip, r1, lsl #2
    1ba4:	00280000 	eoreq	r0, r8, r0
    1ba8:	001c0100 	andseq	r0, ip, r0, lsl #2
    1bac:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bb0:	000b4036 	andeq	r4, fp, r6, lsr r0
    1bb4:	011c0200 	tsteq	ip, r0, lsl #4
    1bb8:	1bcc0335 	blne	ff302894 <__shm_end__+0xbf302894>
    1bbc:	30370000 	eorscc	r0, r7, r0
    1bc0:	0200000a 	andeq	r0, r0, #10
    1bc4:	814f011c 	cmphi	pc, ip, lsl r1	; <UNPREDICTABLE>
    1bc8:	00000000 	andeq	r0, r0, r0
    1bcc:	0009a538 	andeq	sl, r9, r8, lsr r5
    1bd0:	010a0200 	mrseq	r0, R10_fiq
    1bd4:	00008139 	andeq	r8, r0, r9, lsr r1
    1bd8:	1bec0300 	blne	ffb027e0 <__shm_end__+0xbfb027e0>
    1bdc:	30390000 	eorscc	r0, r9, r0
    1be0:	0200000a 	andeq	r0, r0, #10
    1be4:	810e010f 	tsthi	lr, pc, lsl #2
    1be8:	00000000 	andeq	r0, r0, r0
    1bec:	0009613a 	andeq	r6, r9, sl, lsr r1
    1bf0:	35fc0200 	ldrbcc	r0, [ip, #512]!	; 0x200
    1bf4:	001c0603 	andseq	r0, ip, r3, lsl #12
    1bf8:	0a2a3b00 	beq	a90800 <__core1_unwind_stub-0x56f800>
    1bfc:	fc020000 	stc2	0, cr0, [r2], {-0}
    1c00:	0000814f 	andeq	r8, r0, pc, asr #2
    1c04:	7e3c0000 	cdpvc	0, 3, cr0, cr12, cr0, {0}
    1c08:	02000001 	andeq	r0, r0, #1
    1c0c:	008139ea 	addeq	r3, r1, sl, ror #19
    1c10:	24030000 	strcs	r0, [r3], #-0
    1c14:	3d00001c 	stccc	0, cr0, [r0, #-112]	; 0xffffff90
    1c18:	00000a2a 	andeq	r0, r0, sl, lsr #20
    1c1c:	810eef02 	tsthi	lr, r2, lsl #30
    1c20:	00000000 	andeq	r0, r0, r0
    1c24:	0001ff3a 	andeq	pc, r1, sl, lsr pc	; <UNPREDICTABLE>
    1c28:	35dc0200 	ldrbcc	r0, [ip, #512]	; 0x200
    1c2c:	001c3e03 	andseq	r3, ip, r3, lsl #28
    1c30:	0b933b00 	bleq	fe4d0838 <__shm_end__+0xbe4d0838>
    1c34:	dc020000 	stcle	0, cr0, [r2], {-0}
    1c38:	0000814f 	andeq	r8, r0, pc, asr #2
    1c3c:	223c0000 	eorscs	r0, ip, #0
    1c40:	02000002 	andeq	r0, r0, #2
    1c44:	008139ca 	addeq	r3, r1, sl, asr #19
    1c48:	5c030000 	stcpl	0, cr0, [r3], {-0}
    1c4c:	3d00001c 	stccc	0, cr0, [r0, #-112]	; 0xffffff90
    1c50:	00000b93 	muleq	r0, r3, fp
    1c54:	810ecf02 	tsthi	lr, r2, lsl #30
    1c58:	00000000 	andeq	r0, r0, r0
    1c5c:	0004c63a 	andeq	ip, r4, sl, lsr r6
    1c60:	35bc0200 	ldrcc	r0, [ip, #512]!	; 0x200
    1c64:	001c7603 	andseq	r7, ip, r3, lsl #12
    1c68:	04493b00 	strbeq	r3, [r9], #-2816	; 0xfffff500
    1c6c:	bc020000 	stclt	0, cr0, [r2], {-0}
    1c70:	0000814e 	andeq	r8, r0, lr, asr #2
    1c74:	383a0000 	ldmdacc	sl!, {}	; <UNPREDICTABLE>
    1c78:	02000007 	andeq	r0, r0, #7
    1c7c:	9003359a 	mulls	r3, sl, r5
    1c80:	3b00001c 	blcc	1cf8 <__core1_unwind_stub-0xffe308>
    1c84:	00000a1f 	andeq	r0, r0, pc, lsl sl
    1c88:	81549a02 	cmphi	r4, r2, lsl #20
    1c8c:	00000000 	andeq	r0, r0, r0
    1c90:	00002d3a 	andeq	r2, r0, sl, lsr sp
    1c94:	35780200 	ldrbcc	r0, [r8, #-512]!	; 0xfffffe00
    1c98:	001caa03 	andseq	sl, ip, r3, lsl #20
    1c9c:	12c93b00 	sbcne	r3, r9, #0, 22
    1ca0:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
    1ca4:	0000814f 	andeq	r8, r0, pc, asr #2
    1ca8:	823c0000 	eorshi	r0, ip, #0
    1cac:	02000002 	andeq	r0, r0, #2
    1cb0:	00813966 	addeq	r3, r1, r6, ror #18
    1cb4:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    1cb8:	3d00001c 	stccc	0, cr0, [r0, #-112]	; 0xffffff90
    1cbc:	000012c9 	andeq	r1, r0, r9, asr #5
    1cc0:	810e6b02 	tsthi	lr, r2, lsl #22
    1cc4:	00000000 	andeq	r0, r0, r0
    1cc8:	0006973e 	andeq	r9, r6, lr, lsr r7
    1ccc:	15390100 	ldrne	r0, [r9, #-256]!	; 0xffffff00
    1cd0:	00000025 	andeq	r0, r0, r5, lsr #32
    1cd4:	01000004 	tsteq	r0, r4
    1cd8:	00000024 	andeq	r0, r0, r4, lsr #32
    1cdc:	063f9c01 	ldrteq	r9, [pc], -r1, lsl #24
    1ce0:	01000004 	tsteq	r0, r4
    1ce4:	03664539 	cmneq	r6, #239075328	; 0xe400000
    1ce8:	91020000 	mrsls	r0, (UNDEF: 2)
    1cec:	00004070 	andeq	r4, r0, r0, ror r0
    1cf0:	00000b09 	andeq	r0, r0, r9, lsl #22
    1cf4:	03d30004 	bicseq	r0, r3, #4
    1cf8:	01040000 	mrseq	r0, (UNDEF: 4)
    1cfc:	000007e8 	andeq	r0, r0, r8, ror #15
    1d00:	000fe30c 	andeq	lr, pc, ip, lsl #6
    1d04:	000e4100 	andeq	r4, lr, r0, lsl #2
    1d08:	00012000 	andeq	r2, r1, r0
    1d0c:	00000000 	andeq	r0, r0, r0
    1d10:	000e4700 	andeq	r4, lr, r0, lsl #14
    1d14:	06010200 	streq	r0, [r1], -r0, lsl #4
    1d18:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
    1d1c:	9b050202 	blls	14252c <__core1_unwind_stub-0xebdad4>
    1d20:	03000009 	movweq	r0, #9
    1d24:	000002c4 	andeq	r0, r0, r4, asr #5
    1d28:	3f182802 	svccc	0x00182802
    1d2c:	02000000 	andeq	r0, r0, #0
    1d30:	06be0504 	ldrteq	r0, [lr], r4, lsl #10
    1d34:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1d38:	0006b905 	andeq	fp, r6, r5, lsl #18
    1d3c:	10150300 	andsne	r0, r5, r0, lsl #6
    1d40:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    1d44:	00005918 	andeq	r5, r0, r8, lsl r9
    1d48:	08010200 	stmdaeq	r1, {r9}
    1d4c:	00000bbd 			; <UNDEFINED> instruction: 0x00000bbd
    1d50:	07070202 	streq	r0, [r7, -r2, lsl #4]
    1d54:	0300000d 	movweq	r0, #13
    1d58:	000002c3 	andeq	r0, r0, r3, asr #5
    1d5c:	7d193402 	cfldrsvc	mvf3, [r9, #-8]
    1d60:	04000000 	streq	r0, [r0], #-0
    1d64:	00000067 	andeq	r0, r0, r7, rrx
    1d68:	00006705 	andeq	r6, r0, r5, lsl #14
    1d6c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1d70:	0000034e 	andeq	r0, r0, lr, asr #6
    1d74:	49070802 	stmdbmi	r7, {r1, fp}
    1d78:	06000003 	streq	r0, [r0], -r3
    1d7c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1d80:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1d84:	00035307 	andeq	r5, r3, r7, lsl #6
    1d88:	0ad90300 	beq	ff642990 <__shm_end__+0xbf642990>
    1d8c:	56020000 	strpl	r0, [r2], -r0
    1d90:	0000921a 	andeq	r9, r0, sl, lsl r2
    1d94:	ab040700 	blge	10399c <__core1_unwind_stub-0xefc664>
    1d98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d9c:	00000e9e 	muleq	r0, lr, lr
    1da0:	55040802 	strpl	r0, [r4, #-2050]	; 0xfffff7fe
    1da4:	09000009 	stmdbeq	r0, {r0, r3}
    1da8:	0b390a04 	bleq	e445c0 <__core1_unwind_stub-0x1bba40>
    1dac:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
    1db0:	00921701 	addseq	r1, r2, r1, lsl #14
    1db4:	df030000 	svcle	0x00030000
    1db8:	0400000d 	streq	r0, [r0], #-13
    1dbc:	003f0e2e 	eorseq	r0, pc, lr, lsr #28
    1dc0:	4b030000 	blmi	c1dc8 <__core1_unwind_stub-0xf3e238>
    1dc4:	04000002 	streq	r0, [r0], #-2
    1dc8:	003f0e74 	eorseq	r0, pc, r4, ror lr	; <UNPREDICTABLE>
    1dcc:	040b0000 	streq	r0, [fp], #-0
    1dd0:	0003a504 	andeq	sl, r3, r4, lsl #10
    1dd4:	0c000001 	stceq	0, cr0, [r0], {1}
    1dd8:	00000619 	andeq	r0, r0, r9, lsl r6
    1ddc:	b90ca704 	stmdblt	ip, {r2, r8, r9, sl, sp, pc}
    1de0:	0c000000 	stceq	0, cr0, [r0], {-0}
    1de4:	000009fb 	strdeq	r0, [r0], -fp
    1de8:	0013a804 	andseq	sl, r3, r4, lsl #16
    1dec:	00000001 	andeq	r0, r0, r1
    1df0:	0000590d 	andeq	r5, r0, sp, lsl #18
    1df4:	00011000 	andeq	r1, r1, r0
    1df8:	00920e00 	addseq	r0, r2, r0, lsl #28
    1dfc:	00030000 	andeq	r0, r3, r0
    1e00:	a204080f 	andge	r0, r4, #983040	; 0xf0000
    1e04:	00013409 	andeq	r3, r1, r9, lsl #8
    1e08:	02e61000 	rsceq	r1, r6, #0
    1e0c:	a4040000 	strge	r0, [r4], #-0
    1e10:	00008b07 	andeq	r8, r0, r7, lsl #22
    1e14:	37100000 	ldrcc	r0, [r0, -r0]
    1e18:	04000004 	streq	r0, [r0], #-4
    1e1c:	00de05a9 	sbcseq	r0, lr, r9, lsr #11
    1e20:	00040000 	andeq	r0, r4, r0
    1e24:	00076203 	andeq	r6, r7, r3, lsl #4
    1e28:	03aa0400 			; <UNDEFINED> instruction: 0x03aa0400
    1e2c:	00000110 	andeq	r0, r0, r0, lsl r1
    1e30:	00070003 	andeq	r0, r7, r3
    1e34:	19160500 	ldmdbne	r6, {r8, sl}
    1e38:	0000007d 	andeq	r0, r0, sp, ror r0
    1e3c:	0001a903 	andeq	sl, r1, r3, lsl #18
    1e40:	0d0c0600 	stceq	6, cr0, [ip, #-0]
    1e44:	0000008b 	andeq	r0, r0, fp, lsl #1
    1e48:	00061003 	andeq	r1, r6, r3
    1e4c:	1b230500 	blne	8c3254 <__core1_unwind_stub-0x73cdac>
    1e50:	0000014c 	andeq	r0, r0, ip, asr #2
    1e54:	00027011 	andeq	r7, r2, r1, lsl r0
    1e58:	34051800 	strcc	r1, [r5], #-2048	; 0xfffff800
    1e5c:	0001be08 	andeq	fp, r1, r8, lsl #28
    1e60:	0e981000 	cdpeq	0, 9, cr1, cr8, cr0, {0}
    1e64:	36050000 	strcc	r0, [r5], -r0
    1e68:	0001be13 	andeq	fp, r1, r3, lsl lr
    1e6c:	5f120000 	svcpl	0x00120000
    1e70:	3705006b 	strcc	r0, [r5, -fp, rrx]
    1e74:	00008b07 	andeq	r8, r0, r7, lsl #22
    1e78:	6f100400 	svcvs	0x00100400
    1e7c:	0500000a 	streq	r0, [r0, #-10]
    1e80:	008b0b37 	addeq	r0, fp, r7, lsr fp
    1e84:	10080000 	andne	r0, r8, r0
    1e88:	000009e9 	andeq	r0, r0, r9, ror #19
    1e8c:	8b143705 	blhi	50faa8 <__core1_unwind_stub-0xaf0558>
    1e90:	0c000000 	stceq	0, cr0, [r0], {-0}
    1e94:	00073310 	andeq	r3, r7, r0, lsl r3
    1e98:	1b370500 	blne	dc32a0 <__core1_unwind_stub-0x23cd60>
    1e9c:	0000008b 	andeq	r0, r0, fp, lsl #1
    1ea0:	785f1210 	ldmdavc	pc, {r4, r9, ip}^	; <UNPREDICTABLE>
    1ea4:	0b380500 	bleq	e032ac <__core1_unwind_stub-0x1fcd54>
    1ea8:	000001c4 	andeq	r0, r0, r4, asr #3
    1eac:	04070014 	streq	r0, [r7], #-20	; 0xffffffec
    1eb0:	00000164 	andeq	r0, r0, r4, ror #2
    1eb4:	0001400d 	andeq	r4, r1, sp
    1eb8:	0001d400 	andeq	sp, r1, r0, lsl #8
    1ebc:	00920e00 	addseq	r0, r2, r0, lsl #28
    1ec0:	00000000 	andeq	r0, r0, r0
    1ec4:	000ae311 	andeq	lr, sl, r1, lsl r3
    1ec8:	3c052400 	cfstrscc	mvf2, [r5], {-0}
    1ecc:	00025708 	andeq	r5, r2, r8, lsl #14
    1ed0:	04241000 	strteq	r1, [r4], #-0
    1ed4:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    1ed8:	00008b09 	andeq	r8, r0, r9, lsl #22
    1edc:	01100000 	tsteq	r0, r0
    1ee0:	05000003 	streq	r0, [r0, #-3]
    1ee4:	008b093f 	addeq	r0, fp, pc, lsr r9
    1ee8:	10040000 	andne	r0, r4, r0
    1eec:	000002cc 	andeq	r0, r0, ip, asr #5
    1ef0:	8b094005 	blhi	251f0c <__core1_unwind_stub-0xdae0f4>
    1ef4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1ef8:	0005b310 	andeq	fp, r5, r0, lsl r3
    1efc:	09410500 	stmdbeq	r1, {r8, sl}^
    1f00:	0000008b 	andeq	r0, r0, fp, lsl #1
    1f04:	08f2100c 	ldmeq	r2!, {r2, r3, ip}^
    1f08:	42050000 	andmi	r0, r5, #0
    1f0c:	00008b09 	andeq	r8, r0, r9, lsl #22
    1f10:	15101000 	ldrne	r1, [r0, #-0]
    1f14:	0500000a 	streq	r0, [r0, #-10]
    1f18:	008b0943 	addeq	r0, fp, r3, asr #18
    1f1c:	10140000 	andsne	r0, r4, r0
    1f20:	00000278 	andeq	r0, r0, r8, ror r2
    1f24:	8b094405 	blhi	252f40 <__core1_unwind_stub-0xdad0c0>
    1f28:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1f2c:	00042d10 	andeq	r2, r4, r0, lsl sp
    1f30:	09450500 	stmdbeq	r5, {r8, sl}^
    1f34:	0000008b 	andeq	r0, r0, fp, lsl #1
    1f38:	0789101c 	usada8eq	r9, ip, r0, r1
    1f3c:	46050000 	strmi	r0, [r5], -r0
    1f40:	00008b09 	andeq	r8, r0, r9, lsl #22
    1f44:	13002000 	movwne	r2, #0
    1f48:	00000079 	andeq	r0, r0, r9, ror r0
    1f4c:	4f050108 	svcmi	0x00050108
    1f50:	00029c08 	andeq	r9, r2, r8, lsl #24
    1f54:	0cf81000 	ldcleq	0, cr1, [r8]
    1f58:	50050000 	andpl	r0, r5, r0
    1f5c:	00029c0a 	andeq	r9, r2, sl, lsl #24
    1f60:	80100000 	andshi	r0, r0, r0
    1f64:	0500000b 	streq	r0, [r0, #-11]
    1f68:	029c0951 	addseq	r0, ip, #1327104	; 0x144000
    1f6c:	14800000 	strne	r0, [r0], #0
    1f70:	00000daf 	andeq	r0, r0, pc, lsr #27
    1f74:	400a5305 	andmi	r5, sl, r5, lsl #6
    1f78:	00000001 	andeq	r0, r0, r1
    1f7c:	0e391401 	cdpeq	4, 3, cr1, cr9, cr1, {0}
    1f80:	56050000 	strpl	r0, [r5], -r0
    1f84:	0001400a 	andeq	r4, r1, sl
    1f88:	00010400 	andeq	r0, r1, r0, lsl #8
    1f8c:	0000b70d 	andeq	fp, r0, sp, lsl #14
    1f90:	0002ac00 	andeq	sl, r2, r0, lsl #24
    1f94:	00920e00 	addseq	r0, r2, r0, lsl #28
    1f98:	001f0000 	andseq	r0, pc, r0
    1f9c:	00098a13 	andeq	r8, r9, r3, lsl sl
    1fa0:	05019000 	streq	r9, [r1, #-0]
    1fa4:	02ef0862 	rsceq	r0, pc, #6422528	; 0x620000
    1fa8:	98100000 	ldmdals	r0, {}	; <UNPREDICTABLE>
    1fac:	0500000e 	streq	r0, [r0, #-14]
    1fb0:	02ef1263 	rsceq	r1, pc, #805306374	; 0x30000006
    1fb4:	10000000 	andne	r0, r0, r0
    1fb8:	00000444 	andeq	r0, r0, r4, asr #8
    1fbc:	8b066405 	blhi	19afd8 <__core1_unwind_stub-0xe65028>
    1fc0:	04000000 	streq	r0, [r0], #-0
    1fc4:	00025310 	andeq	r5, r2, r0, lsl r3
    1fc8:	09660500 	stmdbeq	r6!, {r8, sl}^
    1fcc:	000002f5 	strdeq	r0, [r0], -r5
    1fd0:	00791008 	rsbseq	r1, r9, r8
    1fd4:	67050000 	strvs	r0, [r5, -r0]
    1fd8:	0002571e 	andeq	r5, r2, lr, lsl r7
    1fdc:	07008800 	streq	r8, [r0, -r0, lsl #16]
    1fe0:	0002ac04 	andeq	sl, r2, r4, lsl #24
    1fe4:	03050d00 	movweq	r0, #23808	; 0x5d00
    1fe8:	03050000 	movweq	r0, #20480	; 0x5000
    1fec:	920e0000 	andls	r0, lr, #0
    1ff0:	1f000000 	svcne	0x00000000
    1ff4:	0b040700 	bleq	103bfc <__core1_unwind_stub-0xefc404>
    1ff8:	15000003 	strne	r0, [r0, #-3]
    1ffc:	000c6b11 	andeq	r6, ip, r1, lsl fp
    2000:	7a050800 	bvc	144008 <__core1_unwind_stub-0xebbff8>
    2004:	00033408 	andeq	r3, r3, r8, lsl #8
    2008:	06ea1000 	strbteq	r1, [sl], r0
    200c:	7b050000 	blvc	142014 <__core1_unwind_stub-0xebdfec>
    2010:	00033411 	andeq	r3, r3, r1, lsl r4
    2014:	d9100000 	ldmdble	r0, {}	; <UNPREDICTABLE>
    2018:	0500000d 	streq	r0, [r0, #-13]
    201c:	008b067c 	addeq	r0, fp, ip, ror r6
    2020:	00040000 	andeq	r0, r4, r0
    2024:	00590407 	subseq	r0, r9, r7, lsl #8
    2028:	6d110000 	ldcvs	0, cr0, [r1, #-0]
    202c:	68000003 	stmdavs	r0, {r0, r1}
    2030:	7d08ba05 	vstrvc	s22, [r8, #-20]	; 0xffffffec
    2034:	12000004 	andne	r0, r0, #4
    2038:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    203c:	033412bb 	teqeq	r4, #-1342177269	; 0xb000000b
    2040:	12000000 	andne	r0, r0, #0
    2044:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
    2048:	008b07bc 			; <UNDEFINED> instruction: 0x008b07bc
    204c:	12040000 	andne	r0, r4, #0
    2050:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
    2054:	008b07bd 			; <UNDEFINED> instruction: 0x008b07bd
    2058:	10080000 	andne	r0, r8, r0
    205c:	00000144 	andeq	r0, r0, r4, asr #2
    2060:	2c09be05 	stccs	14, cr11, [r9], {5}
    2064:	0c000000 	stceq	0, cr0, [r0], {-0}
    2068:	00071710 	andeq	r1, r7, r0, lsl r7
    206c:	09bf0500 	ldmibeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    2070:	0000002c 	andeq	r0, r0, ip, lsr #32
    2074:	625f120e 	subsvs	r1, pc, #-536870912	; 0xe0000000
    2078:	c0050066 	andgt	r0, r5, r6, rrx
    207c:	00030c11 	andeq	r0, r3, r1, lsl ip
    2080:	3b101000 	blcc	406088 <__core1_unwind_stub-0xbf9f78>
    2084:	05000001 	streq	r0, [r0, #-1]
    2088:	008b07c1 	addeq	r0, fp, r1, asr #15
    208c:	10180000 	andsne	r0, r8, r0
    2090:	00000258 	andeq	r0, r0, r8, asr r2
    2094:	b70ac805 	strlt	ip, [sl, -r5, lsl #16]
    2098:	1c000000 	stcne	0, cr0, [r0], {-0}
    209c:	0001eb10 	andeq	lr, r1, r0, lsl fp
    20a0:	1dca0500 	cfstr64ne	mvdx0, [sl]
    20a4:	00000601 	andeq	r0, r0, r1, lsl #12
    20a8:	09721020 	ldmdbeq	r2!, {r5, ip}^
    20ac:	cc050000 	stcgt	0, cr0, [r5], {-0}
    20b0:	00062b1d 	andeq	r2, r6, sp, lsl fp
    20b4:	a9102400 	ldmdbge	r0, {sl, sp}
    20b8:	0500000e 	streq	r0, [r0, #-14]
    20bc:	064f0dcf 	strbeq	r0, [pc], -pc, asr #27
    20c0:	10280000 	eorne	r0, r8, r0
    20c4:	00001118 	andeq	r1, r0, r8, lsl r1
    20c8:	6909d005 	stmdbvs	r9, {r0, r2, ip, lr, pc}
    20cc:	2c000006 	stccs	0, cr0, [r0], {6}
    20d0:	62755f12 	rsbsvs	r5, r5, #18, 30	; 0x48
    20d4:	11d30500 	bicsne	r0, r3, r0, lsl #10
    20d8:	0000030c 	andeq	r0, r0, ip, lsl #6
    20dc:	755f1230 	ldrbvc	r1, [pc, #-560]	; 1eb4 <__core1_unwind_stub-0xffe14c>
    20e0:	d4050070 	strle	r0, [r5], #-112	; 0xffffff90
    20e4:	00033412 	andeq	r3, r3, r2, lsl r4
    20e8:	5f123800 	svcpl	0x00123800
    20ec:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
    20f0:	008b07d5 	ldrdeq	r0, [fp], r5
    20f4:	103c0000 	eorsne	r0, ip, r0
    20f8:	00000ee6 	andeq	r0, r0, r6, ror #29
    20fc:	6f11d805 	svcvs	0x0011d805
    2100:	40000006 	andmi	r0, r0, r6
    2104:	000de610 	andeq	lr, sp, r0, lsl r6
    2108:	11d90500 	bicsne	r0, r9, r0, lsl #10
    210c:	0000067f 	andeq	r0, r0, pc, ror r6
    2110:	6c5f1243 	lfmvs	f1, 2, [pc], {67}	; 0x43
    2114:	dc050062 	stcle	0, cr0, [r5], {98}	; 0x62
    2118:	00030c11 	andeq	r0, r3, r1, lsl ip
    211c:	d0104400 	andsle	r4, r0, r0, lsl #8
    2120:	0500000a 	streq	r0, [r0, #-10]
    2124:	008b07df 	ldrdeq	r0, [fp], pc	; <UNPREDICTABLE>
    2128:	104c0000 	subne	r0, ip, r0
    212c:	00000393 	muleq	r0, r3, r3
    2130:	c60ae005 	strgt	lr, [sl], -r5
    2134:	50000000 	andpl	r0, r0, r0
    2138:	00110c10 	andseq	r0, r1, r0, lsl ip
    213c:	12e30500 	rscne	r0, r3, #0, 10
    2140:	0000049b 	muleq	r0, fp, r4
    2144:	0b111054 	bleq	44629c <__core1_unwind_stub-0xbb9d64>
    2148:	e7050000 	str	r0, [r5, -r0]
    214c:	0001580c 	andeq	r5, r1, ip, lsl #16
    2150:	92105800 	andsls	r5, r0, #0, 16
    2154:	05000009 	streq	r0, [r0, #-9]
    2158:	01340ee9 	teqeq	r4, r9, ror #29
    215c:	105c0000 	subsne	r0, ip, r0
    2160:	00000e31 	andeq	r0, r0, r1, lsr lr
    2164:	8b09ea05 	blhi	27c980 <__core1_unwind_stub-0xd83680>
    2168:	64000000 	strvs	r0, [r0], #-0
    216c:	008b1600 	addeq	r1, fp, r0, lsl #12
    2170:	049b0000 	ldreq	r0, [fp], #0
    2174:	9b170000 	blls	5c217c <__core1_unwind_stub-0xa3de84>
    2178:	17000004 	strne	r0, [r0, -r4]
    217c:	000000b7 	strheq	r0, [r0], -r7
    2180:	0005ef17 	andeq	lr, r5, r7, lsl pc
    2184:	008b1700 	addeq	r1, fp, r0, lsl #14
    2188:	07000000 	streq	r0, [r0, -r0]
    218c:	0004a604 	andeq	sl, r4, r4, lsl #12
    2190:	049b0400 	ldreq	r0, [fp], #1024	; 0x400
    2194:	00180000 	andseq	r0, r8, r0
    2198:	2800000d 	stmdacs	r0, {r0, r2, r3}
    219c:	02650504 	rsbeq	r0, r5, #4, 10	; 0x1000000
    21a0:	0005ef08 	andeq	lr, r5, r8, lsl #30
    21a4:	07d81900 	ldrbeq	r1, [r8, r0, lsl #18]
    21a8:	67050000 	strvs	r0, [r5, -r0]
    21ac:	008b0702 	addeq	r0, fp, r2, lsl #14
    21b0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    21b4:	000006a3 	andeq	r0, r0, r3, lsr #13
    21b8:	0b026c05 	bleq	9d1d4 <__core1_unwind_stub-0xf62e2c>
    21bc:	000006db 	ldrdeq	r0, [r0], -fp
    21c0:	021a1904 	andseq	r1, sl, #4, 18	; 0x10000
    21c4:	6c050000 	stcvs	0, cr0, [r5], {-0}
    21c8:	06db1402 	ldrbeq	r1, [fp], r2, lsl #8
    21cc:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    21d0:	00000ed5 	ldrdeq	r0, [r0], -r5
    21d4:	1e026c05 	cdpne	12, 0, cr6, cr2, cr5, {0}
    21d8:	000006db 	ldrdeq	r0, [r0], -fp
    21dc:	043f190c 	ldrteq	r1, [pc], #-2316	; 21e4 <__core1_unwind_stub-0xffde1c>
    21e0:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    21e4:	008b0802 	addeq	r0, fp, r2, lsl #16
    21e8:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
    21ec:	000003e5 	andeq	r0, r0, r5, ror #7
    21f0:	08026f05 	stmdaeq	r2, {r0, r2, r8, r9, sl, fp, sp, lr}
    21f4:	000008db 	ldrdeq	r0, [r0], -fp
    21f8:	0e181914 			; <UNDEFINED> instruction: 0x0e181914
    21fc:	72050000 	andvc	r0, r5, #0
    2200:	008b0702 	addeq	r0, fp, r2, lsl #14
    2204:	19300000 	ldmdbne	r0!, {}	; <UNPREDICTABLE>
    2208:	00000d1a 	andeq	r0, r0, sl, lsl sp
    220c:	16027305 	strne	r7, [r2], -r5, lsl #6
    2210:	000000a5 	andeq	r0, r0, r5, lsr #1
    2214:	064e1934 			; <UNDEFINED> instruction: 0x064e1934
    2218:	75050000 	strvc	r0, [r5, #-0]
    221c:	008b0702 	addeq	r0, fp, r2, lsl #14
    2220:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
    2224:	0000074e 	andeq	r0, r0, lr, asr #14
    2228:	0a027705 	beq	9fe44 <__core1_unwind_stub-0xf601bc>
    222c:	000008f6 	strdeq	r0, [r0], -r6
    2230:	02a4193c 	adceq	r1, r4, #60, 18	; 0xf0000
    2234:	7a050000 	bvc	14223c <__core1_unwind_stub-0xebddc4>
    2238:	01be1302 			; <UNDEFINED> instruction: 0x01be1302
    223c:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    2240:	0000033f 	andeq	r0, r0, pc, lsr r3
    2244:	07027b05 	streq	r7, [r2, -r5, lsl #22]
    2248:	0000008b 	andeq	r0, r0, fp, lsl #1
    224c:	05561944 	ldrbeq	r1, [r6, #-2372]	; 0xfffff6bc
    2250:	7c050000 	stcvc	0, cr0, [r5], {-0}
    2254:	01be1302 			; <UNDEFINED> instruction: 0x01be1302
    2258:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
    225c:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2260:	14027d05 	strne	r7, [r2], #-3333	; 0xfffff2fb
    2264:	000008fc 	strdeq	r0, [r0], -ip
    2268:	0a67194c 	beq	19c87a0 <__bss_end__+0x9b47a0>
    226c:	80050000 	andhi	r0, r5, r0
    2270:	008b0702 	addeq	r0, fp, r2, lsl #14
    2274:	19500000 	ldmdbne	r0, {}^	; <UNPREDICTABLE>
    2278:	00000bb5 			; <UNDEFINED> instruction: 0x00000bb5
    227c:	09028105 	stmdbeq	r2, {r0, r2, r8, pc}
    2280:	000005ef 	andeq	r0, r0, pc, ror #11
    2284:	0a5d1954 	beq	17487dc <__bss_end__+0x7347dc>
    2288:	a4050000 	strge	r0, [r5], #-0
    228c:	08b60702 	ldmeq	r6!, {r1, r8, r9, sl}
    2290:	1a580000 	bne	1602298 <__bss_end__+0x5ee298>
    2294:	0000098a 	andeq	r0, r0, sl, lsl #19
    2298:	1302a805 	movwne	sl, #10245	; 0x2805
    229c:	000002ef 	andeq	r0, r0, pc, ror #5
    22a0:	d61a0148 	ldrle	r0, [sl], -r8, asr #2
    22a4:	05000005 	streq	r0, [r0, #-5]
    22a8:	ac1202a9 	lfmge	f0, 4, [r2], {169}	; 0xa9
    22ac:	4c000002 	stcmi	0, cr0, [r0], {2}
    22b0:	05bd1a01 	ldreq	r1, [sp, #2561]!	; 0xa01
    22b4:	ad050000 	stcge	0, cr0, [r5, #-0]
    22b8:	090d0c02 	stmdbeq	sp, {r1, sl, fp}
    22bc:	02dc0000 	sbcseq	r0, ip, #0
    22c0:	000c971a 	andeq	r9, ip, sl, lsl r7
    22c4:	02b20500 	adcseq	r0, r2, #0, 10
    22c8:	00069c10 	andeq	r9, r6, r0, lsl ip
    22cc:	1a02e000 	bne	ba2d4 <__core1_unwind_stub-0xf45d2c>
    22d0:	00000a62 	andeq	r0, r0, r2, ror #20
    22d4:	0a02b405 	beq	af2f0 <__core1_unwind_stub-0xf50d10>
    22d8:	00000919 	andeq	r0, r0, r9, lsl r9
    22dc:	070002ec 	streq	r0, [r0, -ip, ror #5]
    22e0:	0005f504 	andeq	pc, r5, r4, lsl #10
    22e4:	08010200 	stmdaeq	r1, {r9}
    22e8:	00000bc6 	andeq	r0, r0, r6, asr #23
    22ec:	0005f504 	andeq	pc, r5, r4, lsl #10
    22f0:	7d040700 	stcvc	7, cr0, [r4, #-0]
    22f4:	16000004 	strne	r0, [r0], -r4
    22f8:	0000008b 	andeq	r0, r0, fp, lsl #1
    22fc:	00000625 	andeq	r0, r0, r5, lsr #12
    2300:	00049b17 	andeq	r9, r4, r7, lsl fp
    2304:	00b71700 	adcseq	r1, r7, r0, lsl #14
    2308:	25170000 	ldrcs	r0, [r7, #-0]
    230c:	17000006 	strne	r0, [r0, -r6]
    2310:	0000008b 	andeq	r0, r0, fp, lsl #1
    2314:	fc040700 	stc2	7, cr0, [r4], {-0}
    2318:	07000005 	streq	r0, [r0, -r5]
    231c:	00060704 	andeq	r0, r6, r4, lsl #14
    2320:	00d21600 	sbcseq	r1, r2, r0, lsl #12
    2324:	064f0000 	strbeq	r0, [pc], -r0
    2328:	9b170000 	blls	5c2330 <__core1_unwind_stub-0xa3dcd0>
    232c:	17000004 	strne	r0, [r0, -r4]
    2330:	000000b7 	strheq	r0, [r0], -r7
    2334:	0000d217 	andeq	sp, r0, r7, lsl r2
    2338:	008b1700 	addeq	r1, fp, r0, lsl #14
    233c:	07000000 	streq	r0, [r0, -r0]
    2340:	00063104 	andeq	r3, r6, r4, lsl #2
    2344:	008b1600 	addeq	r1, fp, r0, lsl #12
    2348:	06690000 	strbteq	r0, [r9], -r0
    234c:	9b170000 	blls	5c2354 <__core1_unwind_stub-0xa3dcac>
    2350:	17000004 	strne	r0, [r0, -r4]
    2354:	000000b7 	strheq	r0, [r0], -r7
    2358:	55040700 	strpl	r0, [r4, #-1792]	; 0xfffff900
    235c:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    2360:	00000059 	andeq	r0, r0, r9, asr r0
    2364:	0000067f 	andeq	r0, r0, pc, ror r6
    2368:	0000920e 	andeq	r9, r0, lr, lsl #4
    236c:	0d000200 	sfmeq	f0, 4, [r0, #-0]
    2370:	00000059 	andeq	r0, r0, r9, asr r0
    2374:	0000068f 	andeq	r0, r0, pc, lsl #13
    2378:	0000920e 	andeq	r9, r0, lr, lsl #4
    237c:	0a000000 	beq	2384 <__core1_unwind_stub-0xffdc7c>
    2380:	0000038c 	andeq	r0, r0, ip, lsl #7
    2384:	1a012405 	bne	4b3a0 <__core1_unwind_stub-0xfb4c60>
    2388:	0000033a 	andeq	r0, r0, sl, lsr r3
    238c:	000c891b 	andeq	r8, ip, fp, lsl r9
    2390:	28050c00 	stmdacs	r5, {sl, fp}
    2394:	06d50801 	ldrbeq	r0, [r5], r1, lsl #16
    2398:	98190000 	ldmdals	r9, {}	; <UNPREDICTABLE>
    239c:	0500000e 	streq	r0, [r0, #-14]
    23a0:	d511012a 	ldrle	r0, [r1, #-298]	; 0xfffffed6
    23a4:	00000006 	andeq	r0, r0, r6
    23a8:	000b3219 	andeq	r3, fp, r9, lsl r2
    23ac:	012b0500 			; <UNDEFINED> instruction: 0x012b0500
    23b0:	00008b07 	andeq	r8, r0, r7, lsl #22
    23b4:	1f190400 	svcne	0x00190400
    23b8:	05000006 	streq	r0, [r0, #-6]
    23bc:	db0b012c 	blle	2c2874 <__core1_unwind_stub-0xd3d78c>
    23c0:	08000006 	stmdaeq	r0, {r1, r2}
    23c4:	9c040700 	stcls	7, cr0, [r4], {-0}
    23c8:	07000006 	streq	r0, [r0, -r6]
    23cc:	00068f04 	andeq	r8, r6, r4, lsl #30
    23d0:	03371b00 	teqeq	r7, #0, 22
    23d4:	050e0000 	streq	r0, [lr, #-0]
    23d8:	1a080144 	bne	2028f0 <__core1_unwind_stub-0xdfd710>
    23dc:	19000007 	stmdbne	r0, {r0, r1, r2}
    23e0:	00000e8d 	andeq	r0, r0, sp, lsl #29
    23e4:	12014505 	andne	r4, r1, #20971520	; 0x1400000
    23e8:	0000071a 	andeq	r0, r0, sl, lsl r7
    23ec:	06fa1900 	ldrbteq	r1, [sl], r0, lsl #18
    23f0:	46050000 	strmi	r0, [r5], -r0
    23f4:	071a1201 	ldreq	r1, [sl, -r1, lsl #4]
    23f8:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
    23fc:	00000c4c 	andeq	r0, r0, ip, asr #24
    2400:	12014705 	andne	r4, r1, #1310720	; 0x140000
    2404:	00000060 	andeq	r0, r0, r0, rrx
    2408:	600d000c 	andvs	r0, sp, ip
    240c:	2a000000 	bcs	2414 <__core1_unwind_stub-0xffdbec>
    2410:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    2414:	00000092 	muleq	r0, r2, r0
    2418:	d01c0002 	andsle	r0, ip, r2
    241c:	07028505 	streq	r8, [r2, -r5, lsl #10]
    2420:	0000083f 	andeq	r0, r0, pc, lsr r8
    2424:	000dec19 	andeq	lr, sp, r9, lsl ip
    2428:	02870500 	addeq	r0, r7, #0, 10
    242c:	00009218 	andeq	r9, r0, r8, lsl r2
    2430:	ba190000 	blt	642438 <__core1_unwind_stub-0x9bdbc8>
    2434:	0500000c 	streq	r0, [r0, #-12]
    2438:	ef120288 	svc	0x00120288
    243c:	04000005 	streq	r0, [r0], #-5
    2440:	00036019 	andeq	r6, r3, r9, lsl r0
    2444:	02890500 	addeq	r0, r9, #0, 10
    2448:	00083f10 	andeq	r3, r8, r0, lsl pc
    244c:	46190800 	ldrmi	r0, [r9], -r0, lsl #16
    2450:	0500000a 	streq	r0, [r0, #-10]
    2454:	d417028a 	ldrle	r0, [r7], #-650	; 0xfffffd76
    2458:	24000001 	strcs	r0, [r0], #-1
    245c:	0006aa19 	andeq	sl, r6, r9, lsl sl
    2460:	028b0500 	addeq	r0, fp, #0, 10
    2464:	00008b0f 	andeq	r8, r0, pc, lsl #22
    2468:	93194800 	tstls	r9, #0, 16
    246c:	0500000e 	streq	r0, [r0, #-14]
    2470:	842c028c 	strthi	r0, [ip], #-652	; 0xfffffd74
    2474:	50000000 	andpl	r0, r0, r0
    2478:	0000b719 	andeq	fp, r0, r9, lsl r7
    247c:	028d0500 	addeq	r0, sp, #0, 10
    2480:	0006e11a 	andeq	lr, r6, sl, lsl r1
    2484:	8f195800 	svchi	0x00195800
    2488:	05000005 	streq	r0, [r0, #-5]
    248c:	3416028e 	ldrcc	r0, [r6], #-654	; 0xfffffd72
    2490:	68000001 	stmdavs	r0, {r0}
    2494:	000cc719 	andeq	ip, ip, r9, lsl r7
    2498:	028f0500 	addeq	r0, pc, #0, 10
    249c:	00013416 	andeq	r3, r1, r6, lsl r4
    24a0:	95197000 	ldrls	r7, [r9, #-0]
    24a4:	05000000 	streq	r0, [r0, #-0]
    24a8:	34160290 	ldrcc	r0, [r6], #-656	; 0xfffffd70
    24ac:	78000001 	stmdavc	r0, {r0}
    24b0:	000a7719 	andeq	r7, sl, r9, lsl r7
    24b4:	02910500 	addseq	r0, r1, #0, 10
    24b8:	00084f10 	andeq	r4, r8, r0, lsl pc
    24bc:	ca198000 	bgt	6624c4 <__core1_unwind_stub-0x99db3c>
    24c0:	05000000 	streq	r0, [r0, #-0]
    24c4:	5f100292 	svcpl	0x00100292
    24c8:	88000008 	stmdahi	r0, {r3}
    24cc:	000c1319 	andeq	r1, ip, r9, lsl r3
    24d0:	02930500 	addseq	r0, r3, #0, 10
    24d4:	00008b0f 	andeq	r8, r0, pc, lsl #22
    24d8:	f119a000 			; <UNDEFINED> instruction: 0xf119a000
    24dc:	05000001 	streq	r0, [r0, #-1]
    24e0:	34160294 	ldrcc	r0, [r6], #-660	; 0xfffffd6c
    24e4:	a4000001 	strge	r0, [r0], #-1
    24e8:	0005c719 	andeq	ip, r5, r9, lsl r7
    24ec:	02950500 	addseq	r0, r5, #0, 10
    24f0:	00013416 	andeq	r3, r1, r6, lsl r4
    24f4:	b519ac00 	ldrlt	sl, [r9, #-3072]	; 0xfffff400
    24f8:	05000004 	streq	r0, [r0, #-4]
    24fc:	34160296 	ldrcc	r0, [r6], #-662	; 0xfffffd6a
    2500:	b4000001 	strlt	r0, [r0], #-1
    2504:	00070819 	andeq	r0, r7, r9, lsl r8
    2508:	02970500 	addseq	r0, r7, #0, 10
    250c:	00013416 	andeq	r3, r1, r6, lsl r4
    2510:	7e19bc00 	cdpvc	12, 1, cr11, cr9, cr0, {0}
    2514:	05000005 	streq	r0, [r0, #-5]
    2518:	34160298 	ldrcc	r0, [r6], #-664	; 0xfffffd68
    251c:	c4000001 	strgt	r0, [r0], #-1
    2520:	0007d619 	andeq	sp, r7, r9, lsl r6
    2524:	02990500 	addseq	r0, r9, #0, 10
    2528:	00008b08 	andeq	r8, r0, r8, lsl #22
    252c:	0d00cc00 	stceq	12, cr12, [r0, #-0]
    2530:	000005f5 	strdeq	r0, [r0], -r5
    2534:	0000084f 	andeq	r0, r0, pc, asr #16
    2538:	0000920e 	andeq	r9, r0, lr, lsl #4
    253c:	0d001900 	vstreq.16	s2, [r0, #-0]	; <UNPREDICTABLE>
    2540:	000005f5 	strdeq	r0, [r0], -r5
    2544:	0000085f 	andeq	r0, r0, pc, asr r8
    2548:	0000920e 	andeq	r9, r0, lr, lsl #4
    254c:	0d000700 	stceq	7, cr0, [r0, #-0]
    2550:	000005f5 	strdeq	r0, [r0], -r5
    2554:	0000086f 	andeq	r0, r0, pc, ror #16
    2558:	0000920e 	andeq	r9, r0, lr, lsl #4
    255c:	1c001700 	stcne	7, cr1, [r0], {-0}
    2560:	029e05f0 	addseq	r0, lr, #240, 10	; 0x3c000000
    2564:	00089607 	andeq	r9, r8, r7, lsl #12
    2568:	031c1900 	tsteq	ip, #0, 18
    256c:	a1050000 	mrsge	r0, (UNDEF: 5)
    2570:	08961b02 	ldmeq	r6, {r1, r8, r9, fp, ip}
    2574:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2578:	00000edd 	ldrdeq	r0, [r0], -sp
    257c:	1802a205 	stmdane	r2, {r0, r2, r9, sp, pc}
    2580:	000008a6 	andeq	r0, r0, r6, lsr #17
    2584:	340d0078 	strcc	r0, [sp], #-120	; 0xffffff88
    2588:	a6000003 	strge	r0, [r0], -r3
    258c:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    2590:	00000092 	muleq	r0, r2, r0
    2594:	920d001d 	andls	r0, sp, #29
    2598:	b6000000 	strlt	r0, [r0], -r0
    259c:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    25a0:	00000092 	muleq	r0, r2, r0
    25a4:	f01d001d 			; <UNDEFINED> instruction: 0xf01d001d
    25a8:	03028305 	movweq	r8, #8965	; 0x2305
    25ac:	000008db 	ldrdeq	r0, [r0], -fp
    25b0:	000d001e 	andeq	r0, sp, lr, lsl r0
    25b4:	029a0500 	addseq	r0, sl, #0, 10
    25b8:	00072a0b 	andeq	r2, r7, fp, lsl #20
    25bc:	0a551e00 	beq	1549dc4 <__bss_end__+0x535dc4>
    25c0:	a3050000 	movwge	r0, #20480	; 0x5000
    25c4:	086f0b02 	stmdaeq	pc!, {r1, r8, r9, fp}^	; <UNPREDICTABLE>
    25c8:	0d000000 	stceq	0, cr0, [r0, #-0]
    25cc:	000005f5 	strdeq	r0, [r0], -r5
    25d0:	000008eb 	andeq	r0, r0, fp, ror #17
    25d4:	0000920e 	andeq	r9, r0, lr, lsl #4
    25d8:	1f001800 	svcne	0x00001800
    25dc:	000008f6 	strdeq	r0, [r0], -r6
    25e0:	00049b17 	andeq	r9, r4, r7, lsl fp
    25e4:	04070000 	streq	r0, [r7], #-0
    25e8:	000008eb 	andeq	r0, r0, fp, ror #17
    25ec:	01be0407 			; <UNDEFINED> instruction: 0x01be0407
    25f0:	0d1f0000 	ldceq	0, cr0, [pc, #-0]	; 25f8 <__core1_unwind_stub-0xffda08>
    25f4:	17000009 	strne	r0, [r0, -r9]
    25f8:	0000008b 	andeq	r0, r0, fp, lsl #1
    25fc:	13040700 	movwne	r0, #18176	; 0x4700
    2600:	07000009 	streq	r0, [r0, -r9]
    2604:	00090204 	andeq	r0, r9, r4, lsl #4
    2608:	068f0d00 	streq	r0, [pc], r0, lsl #26
    260c:	09290000 	stmdbeq	r9!, {}	; <UNPREDICTABLE>
    2610:	920e0000 	andls	r0, lr, #0
    2614:	02000000 	andeq	r0, r0, #0
    2618:	0a092000 	beq	24a620 <__core1_unwind_stub-0xdb59e0>
    261c:	33050000 	movwcc	r0, #20480	; 0x5000
    2620:	049b1703 	ldreq	r1, [fp], #1795	; 0x703
    2624:	02200000 	eoreq	r0, r0, #0
    2628:	0500000a 	streq	r0, [r0, #-10]
    262c:	a11d0334 	tstge	sp, r4, lsr r3
    2630:	03000004 	movweq	r0, #4
    2634:	0000038e 	andeq	r0, r0, lr, lsl #7
    2638:	8f104207 	svchi	0x00104207
    263c:	07000006 	streq	r0, [r0, -r6]
    2640:	00094304 	andeq	r4, r9, r4, lsl #6
    2644:	015f2100 	cmpeq	pc, r0, lsl #2
    2648:	36080000 	strcc	r0, [r8], -r0
    264c:	00094f0e 	andeq	r4, r9, lr, lsl #30
    2650:	01652100 	cmneq	r5, r0, lsl #2
    2654:	37080000 	strcc	r0, [r8, -r0]
    2658:	00094f0e 	andeq	r4, r9, lr, lsl #30
    265c:	02010200 	andeq	r0, r1, #0, 4
    2660:	000008cb 	andeq	r0, r0, fp, asr #17
    2664:	0000730d 	andeq	r7, r0, sp, lsl #6
    2668:	00098400 	andeq	r8, r9, r0, lsl #8
    266c:	00920e00 	addseq	r0, r2, r0, lsl #28
    2670:	00030000 	andeq	r0, r3, r0
    2674:	00097404 	andeq	r7, r9, r4, lsl #8
    2678:	0ffa2200 	svceq	0x00fa2200
    267c:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    2680:	00098417 	andeq	r8, r9, r7, lsl r4
    2684:	00030500 	andeq	r0, r3, r0, lsl #10
    2688:	22000000 	andcs	r0, r0, #0
    268c:	00000f13 	andeq	r0, r0, r3, lsl pc
    2690:	84170a09 	ldrhi	r0, [r7], #-2569	; 0xfffff5f7
    2694:	05000009 	streq	r0, [r0, #-9]
    2698:	00000003 	andeq	r0, r0, r3
    269c:	0fa32200 	svceq	0x00a32200
    26a0:	0d090000 	stceq	0, cr0, [r9, #-0]
    26a4:	00098417 	andeq	r8, r9, r7, lsl r4
    26a8:	00030500 	andeq	r0, r3, r0, lsl #10
    26ac:	22000000 	andcs	r0, r0, #0
    26b0:	00000f8e 	andeq	r0, r0, lr, lsl #31
    26b4:	84170e09 	ldrhi	r0, [r7], #-3593	; 0xfffff1f7
    26b8:	05000009 	streq	r0, [r0, #-9]
    26bc:	00000003 	andeq	r0, r0, r3
    26c0:	0f272100 	svceq	0x00272100
    26c4:	11090000 	mrsne	r0, (UNDEF: 9)
    26c8:	0000781a 	andeq	r7, r0, sl, lsl r8
    26cc:	0fd62100 	svceq	0x00d62100
    26d0:	12090000 	andne	r0, r9, #0
    26d4:	0000781a 	andeq	r7, r0, sl, lsl r8
    26d8:	10262100 	eorne	r2, r6, r0, lsl #2
    26dc:	13090000 	movwne	r0, #36864	; 0x9000
    26e0:	0000781a 	andeq	r7, r0, sl, lsl r8
    26e4:	01002300 	mrseq	r2, LR_irq
    26e8:	5b09070a 	blpl	244318 <__core1_unwind_stub-0xdbbce8>
    26ec:	1000000a 	andne	r0, r0, sl
    26f0:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    26f4:	7817090a 	ldmdavc	r7, {r1, r3, r8, fp}
    26f8:	00000000 	andeq	r0, r0, r0
    26fc:	000f5010 	andeq	r5, pc, r0, lsl r0	; <UNPREDICTABLE>
    2700:	170a0a00 	strne	r0, [sl, -r0, lsl #20]
    2704:	00000078 	andeq	r0, r0, r8, ror r0
    2708:	0f5c1004 	svceq	0x005c1004
    270c:	0b0a0000 	bleq	282714 <__core1_unwind_stub-0xd7d8ec>
    2710:	00007817 	andeq	r7, r0, r7, lsl r8
    2714:	45100800 	ldrmi	r0, [r0, #-2048]	; 0xfffff800
    2718:	0a00000f 	beq	275c <__core1_unwind_stub-0xffd8a4>
    271c:	0078170c 	rsbseq	r1, r8, ip, lsl #14
    2720:	100c0000 	andne	r0, ip, r0
    2724:	0000100c 	andeq	r1, r0, ip
    2728:	78170d0a 	ldmdavc	r7, {r1, r3, r8, sl, fp}
    272c:	10000000 	andne	r0, r0, r0
    2730:	000f6810 	andeq	r6, pc, r0, lsl r8	; <UNPREDICTABLE>
    2734:	170e0a00 	strne	r0, [lr, -r0, lsl #20]
    2738:	00000078 	andeq	r0, r0, r8, ror r0
    273c:	0f7c1014 	svceq	0x007c1014
    2740:	0f0a0000 	svceq	0x000a0000
    2744:	000a6b17 	andeq	r6, sl, r7, lsl fp
    2748:	0d001800 	stceq	8, cr1, [r0, #-0]
    274c:	00000078 	andeq	r0, r0, r8, ror r0
    2750:	00000a6b 	andeq	r0, r0, fp, ror #20
    2754:	0000920e 	andeq	r9, r0, lr, lsl #4
    2758:	05003900 	streq	r3, [r0, #-2304]	; 0xfffff700
    275c:	00000a5b 	andeq	r0, r0, fp, asr sl
    2760:	000f3103 	andeq	r3, pc, r3, lsl #2
    2764:	03110a00 	tsteq	r1, #0, 20
    2768:	000009f5 	strdeq	r0, [r0], -r5
    276c:	000f3c21 	andeq	r3, pc, r1, lsr #24
    2770:	0d230100 	stfeqs	f0, [r3, #-0]
    2774:	000005f5 	strdeq	r0, [r0], -r5
    2778:	000f7124 	andeq	r7, pc, r4, lsr #2
    277c:	062a0100 	strteq	r0, [sl], -r0, lsl #2
    2780:	01001c68 	tsteq	r0, r8, ror #24
    2784:	000000a0 	andeq	r0, r0, r0, lsr #1
    2788:	85259c01 	strhi	r9, [r5, #-3073]!	; 0xfffff3ff
    278c:	0100000f 	tsteq	r0, pc
    2790:	1c3c1424 	cfldrsne	mvf1, [ip], #-144	; 0xffffff70
    2794:	002c0100 	eoreq	r0, ip, r0, lsl #2
    2798:	9c010000 	stcls	0, cr0, [r1], {-0}
    279c:	00000ac0 	andeq	r0, r0, r0, asr #21
    27a0:	000c5e26 	andeq	r5, ip, r6, lsr #28
    27a4:	23240100 			; <UNDEFINED> instruction: 0x23240100
    27a8:	000000b7 	strheq	r0, [r0], -r7
    27ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    27b0:	00101d25 	andseq	r1, r0, r5, lsr #26
    27b4:	141c0100 	ldrne	r0, [ip], #-256	; 0xffffff00
    27b8:	01001be0 	smlatteq	r0, r0, fp, r1
    27bc:	0000005c 	andeq	r0, r0, ip, asr r0
    27c0:	0b069c01 	bleq	1a97cc <__core1_unwind_stub-0xe56834>
    27c4:	b6210000 	strtlt	r0, [r1], -r0
    27c8:	0100000f 	tsteq	r0, pc
    27cc:	004d141e 	subeq	r1, sp, lr, lsl r4
    27d0:	c4210000 	strtgt	r0, [r1], #-0
    27d4:	0100000f 	tsteq	r0, pc
    27d8:	004d141f 	subeq	r1, sp, pc, lsl r4
    27dc:	ec270000 	stc	0, cr0, [r7], #-0
    27e0:	3c01001b 	stccc	0, cr0, [r1], {27}
    27e4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    27e8:	20010070 	andcs	r0, r1, r0, ror r0
    27ec:	000b0613 	andeq	r0, fp, r3, lsl r6
    27f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    27f4:	04070000 	streq	r0, [r7], #-0
    27f8:	0000004d 	andeq	r0, r0, sp, asr #32
    27fc:	0000f600 	andeq	pc, r0, r0, lsl #12
    2800:	0e000400 	cfcpyseq	mvf0, mvf0
    2804:	04000006 	streq	r0, [r0], #-6
    2808:	0007e801 	andeq	lr, r7, r1, lsl #16
    280c:	107f0c00 	rsbsne	r0, pc, r0, lsl #24
    2810:	0e410000 	cdpeq	0, 4, cr0, cr1, cr0, {0}
    2814:	01400000 	mrseq	r0, (UNDEF: 64)
    2818:	00000000 	andeq	r0, r0, r0
    281c:	0ffe0000 	svceq	0x00fe0000
    2820:	01020000 	mrseq	r0, (UNDEF: 2)
    2824:	000bbf06 	andeq	fp, fp, r6, lsl #30
    2828:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    282c:	0000099b 	muleq	r0, fp, r9
    2830:	be050402 	cdplt	4, 0, cr0, cr5, cr2, {0}
    2834:	02000006 	andeq	r0, r0, #6
    2838:	06b90508 	ldrteq	r0, [r9], r8, lsl #10
    283c:	01020000 	mrseq	r0, (UNDEF: 2)
    2840:	000bbd08 	andeq	fp, fp, r8, lsl #26
    2844:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2848:	00000d07 	andeq	r0, r0, r7, lsl #26
    284c:	4e070402 	cdpmi	4, 0, cr0, cr7, cr2, {0}
    2850:	02000003 	andeq	r0, r0, #3
    2854:	03490708 	movteq	r0, #38664	; 0x9708
    2858:	04030000 	streq	r0, [r3], #-0
    285c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2860:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2864:	00000353 	andeq	r0, r0, r3, asr r3
    2868:	000fb604 	andeq	fp, pc, r4, lsl #12
    286c:	16030100 	strne	r0, [r3], -r0, lsl #2
    2870:	0000004f 	andeq	r0, r0, pc, asr #32
    2874:	000fc404 	andeq	ip, pc, r4, lsl #8
    2878:	25030100 	strcs	r0, [r3, #-256]	; 0xffffff00
    287c:	0000004f 	andeq	r0, r0, pc, asr #32
    2880:	00106204 	andseq	r6, r0, r4, lsl #4
    2884:	32030100 	andcc	r0, r3, #0, 2
    2888:	0000004f 	andeq	r0, r0, pc, asr #32
    288c:	00107004 	andseq	r7, r0, r4
    2890:	16040100 	strne	r0, [r4], -r0, lsl #2
    2894:	0000004f 	andeq	r0, r0, pc, asr #32
    2898:	00104204 	andseq	r4, r0, r4, lsl #4
    289c:	26040100 	strcs	r0, [r4], -r0, lsl #2
    28a0:	0000004f 	andeq	r0, r0, pc, asr #32
    28a4:	00103404 	andseq	r3, r0, r4, lsl #8
    28a8:	34040100 	strcc	r0, [r4], #-256	; 0xffffff00
    28ac:	0000004f 	andeq	r0, r0, pc, asr #32
    28b0:	00109905 	andseq	r9, r0, r5, lsl #18
    28b4:	1d1c0100 	ldfnes	f0, [ip, #-0]
    28b8:	01001d58 	tsteq	r0, r8, asr sp
    28bc:	0000000c 	andeq	r0, r0, ip
    28c0:	4f069c01 	svcmi	0x00069c01
    28c4:	01000010 	tsteq	r0, r0, lsl r0
    28c8:	1d082308 	stcne	3, cr2, [r8, #-32]	; 0xffffffe0
    28cc:	00500100 	subseq	r0, r0, r0, lsl #2
    28d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    28d4:	000000f3 	strdeq	r0, [r0], -r3
    28d8:	001d1407 	andseq	r1, sp, r7, lsl #8
    28dc:	00003c01 	andeq	r3, r0, r1, lsl #24
    28e0:	00700800 	rsbseq	r0, r0, r0, lsl #16
    28e4:	f3190c01 			; <UNDEFINED> instruction: 0xf3190c01
    28e8:	02000000 	andeq	r0, r0, #0
    28ec:	00007491 	muleq	r0, r1, r4
    28f0:	004f0409 	subeq	r0, pc, r9, lsl #8
    28f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    28f8:	04000002 	streq	r0, [r0], #-2
    28fc:	0006a200 	andeq	sl, r6, r0, lsl #4
    2900:	e8010400 	stmda	r1, {sl}
    2904:	0c000007 	stceq	0, cr0, [r0], {7}
    2908:	000010b5 	strheq	r1, [r0], -r5
    290c:	00000e41 	andeq	r0, r0, r1, asr #28
    2910:	00000158 	andeq	r0, r0, r8, asr r1
    2914:	00000000 	andeq	r0, r0, r0
    2918:	00001081 	andeq	r1, r0, r1, lsl #1
    291c:	69050402 	stmdbvs	r5, {r1, sl}
    2920:	0300746e 	movweq	r7, #1134	; 0x46e
    2924:	0000040d 	andeq	r0, r0, sp, lsl #8
    2928:	3817d102 	ldmdacc	r7, {r1, r8, ip, lr, pc}
    292c:	04000000 	streq	r0, [r0], #-0
    2930:	03530704 	cmpeq	r3, #4, 14	; 0x100000
    2934:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    2938:	0006b905 	andeq	fp, r6, r5, lsl #18
    293c:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    2940:	00000955 	andeq	r0, r0, r5, asr r9
    2944:	bf060104 	svclt	0x00060104
    2948:	0400000b 	streq	r0, [r0], #-11
    294c:	099b0502 	ldmibeq	fp, {r1, r8, sl}
    2950:	04040000 	streq	r0, [r4], #-0
    2954:	0006be05 	andeq	fp, r6, r5, lsl #28
    2958:	10150300 	andsne	r0, r5, r0, lsl #6
    295c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    2960:	00007318 	andeq	r7, r0, r8, lsl r3
    2964:	00620500 	rsbeq	r0, r2, r0, lsl #10
    2968:	01040000 	mrseq	r0, (UNDEF: 4)
    296c:	000bbd08 	andeq	fp, fp, r8, lsl #26
    2970:	07020400 	streq	r0, [r2, -r0, lsl #8]
    2974:	00000d07 	andeq	r0, r0, r7, lsl #26
    2978:	4e070404 	cdpmi	4, 0, cr0, cr7, cr4, {0}
    297c:	04000003 	streq	r0, [r0], #-3
    2980:	03490708 	movteq	r0, #38664	; 0x9708
    2984:	a6060000 	strge	r0, [r6], -r0
    2988:	01000010 	tsteq	r0, r0, lsl r0
    298c:	01210714 			; <UNDEFINED> instruction: 0x01210714
    2990:	00000000 	andeq	r0, r0, r0
    2994:	01080000 	mrseq	r0, (UNDEF: 8)
    2998:	9c010000 	stcls	0, cr0, [r1], {-0}
    299c:	00000121 	andeq	r0, r0, r1, lsr #2
    29a0:	74736407 	ldrbtvc	r6, [r3], #-1031	; 0xfffffbf9
    29a4:	15140100 	ldrne	r0, [r4, #-256]	; 0xffffff00
    29a8:	00000121 	andeq	r0, r0, r1, lsr #2
    29ac:	07649102 	strbeq	r9, [r4, -r2, lsl #2]!
    29b0:	00637273 	rsbeq	r7, r3, r3, ror r2
    29b4:	23261401 			; <UNDEFINED> instruction: 0x23261401
    29b8:	02000001 	andeq	r0, r0, #1
    29bc:	6e076091 	mcrvs	0, 0, r6, cr7, cr1, {4}
    29c0:	32140100 	andscc	r0, r4, #0, 2
    29c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    29c8:	085c9102 	ldmdaeq	ip, {r1, r8, ip, pc}^
    29cc:	16010064 	strne	r0, [r1], -r4, rrx
    29d0:	00012a0e 	andeq	r2, r1, lr, lsl #20
    29d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    29d8:	01007308 	tsteq	r0, r8, lsl #6
    29dc:	01301417 	teqeq	r0, r7, lsl r4
    29e0:	91020000 	mrsls	r0, (UNDEF: 2)
    29e4:	00000968 	andeq	r0, r0, r8, ror #18
    29e8:	004c0000 	subeq	r0, ip, r0
    29ec:	01090000 	mrseq	r0, (UNDEF: 9)
    29f0:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    29f4:	151a0100 	ldrne	r0, [sl, #-256]	; 0xffffff00
    29f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    29fc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2a00:	0000000a 	andeq	r0, r0, sl
    2a04:	00004c00 	andeq	r4, r0, r0, lsl #24
    2a08:	00690800 	rsbeq	r0, r9, r0, lsl #16
    2a0c:	2c151c01 	ldccs	12, cr1, [r5], {1}
    2a10:	02000000 	andeq	r0, r0, #0
    2a14:	00007091 	muleq	r0, r1, r0
    2a18:	040c040b 	streq	r0, [ip], #-1035	; 0xfffffbf5
    2a1c:	00000129 	andeq	r0, r0, r9, lsr #2
    2a20:	62040c0d 	andvs	r0, r4, #3328	; 0xd00
    2a24:	0c000000 	stceq	0, cr0, [r0], {-0}
    2a28:	00006e04 	andeq	r6, r0, r4, lsl #28
    2a2c:	10ca0600 	sbcne	r0, sl, r0, lsl #12
    2a30:	0c010000 	stceq	0, cr0, [r1], {-0}
    2a34:	00012107 	andeq	r2, r1, r7, lsl #2
    2a38:	001ddc00 	andseq	sp, sp, r0, lsl #24
    2a3c:	00008401 	andeq	r8, r0, r1, lsl #8
    2a40:	ad9c0100 	ldfges	f0, [ip]
    2a44:	07000001 	streq	r0, [r0, -r1]
    2a48:	00747364 	rsbseq	r7, r4, r4, ror #6
    2a4c:	21140c01 	tstcs	r4, r1, lsl #24
    2a50:	02000001 	andeq	r0, r0, #1
    2a54:	73076491 	movwvc	r6, #29841	; 0x7491
    2a58:	01006372 	tsteq	r0, r2, ror r3
    2a5c:	0123250c 			; <UNDEFINED> instruction: 0x0123250c
    2a60:	91020000 	mrsls	r0, (UNDEF: 2)
    2a64:	006e0760 	rsbeq	r0, lr, r0, ror #14
    2a68:	2c310c01 	ldccs	12, cr0, [r1], #-4
    2a6c:	02000000 	andeq	r0, r0, #0
    2a70:	64085c91 	strvs	r5, [r8], #-3217	; 0xfffff36f
    2a74:	0e0e0100 	adfeqe	f0, f6, f0
    2a78:	0000012a 	andeq	r0, r0, sl, lsr #2
    2a7c:	08709102 	ldmdaeq	r0!, {r1, r8, ip, pc}^
    2a80:	0f010073 	svceq	0x00010073
    2a84:	00013014 	andeq	r3, r1, r4, lsl r0
    2a88:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2a8c:	001e040a 	andseq	r0, lr, sl, lsl #8
    2a90:	00004801 	andeq	r4, r0, r1, lsl #16
    2a94:	00690800 	rsbeq	r0, r9, r0, lsl #16
    2a98:	2c111001 	ldccs	0, cr1, [r1], {1}
    2a9c:	02000000 	andeq	r0, r0, #0
    2aa0:	00007491 	muleq	r0, r1, r4
    2aa4:	0010ae0e 	andseq	sl, r0, lr, lsl #28
    2aa8:	07050100 	streq	r0, [r5, -r0, lsl #2]
    2aac:	00000121 	andeq	r0, r0, r1, lsr #2
    2ab0:	01001d68 	tsteq	r0, r8, ror #26
    2ab4:	00000074 	andeq	r0, r0, r4, ror r0
    2ab8:	73079c01 	movwvc	r9, #31745	; 0x7c01
    2abc:	14050100 	strne	r0, [r5], #-256	; 0xffffff00
    2ac0:	00000121 	andeq	r0, r0, r1, lsr #2
    2ac4:	076c9102 	strbeq	r9, [ip, -r2, lsl #2]!
    2ac8:	05010063 	streq	r0, [r1, #-99]	; 0xffffff9d
    2acc:	0000251b 	andeq	r2, r0, fp, lsl r5
    2ad0:	68910200 	ldmvs	r1, {r9}
    2ad4:	01006e07 	tsteq	r0, r7, lsl #28
    2ad8:	002c2505 	eoreq	r2, ip, r5, lsl #10
    2adc:	91020000 	mrsls	r0, (UNDEF: 2)
    2ae0:	00700864 	rsbseq	r0, r0, r4, ror #16
    2ae4:	2a0e0701 	bcs	3846f0 <__core1_unwind_stub-0xc7b910>
    2ae8:	02000001 	andeq	r0, r0, #1
    2aec:	880a7091 	stmdahi	sl, {r0, r4, r7, ip, sp, lr}
    2af0:	4001001d 	andmi	r0, r1, sp, lsl r0
    2af4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2af8:	08010069 	stmdaeq	r1, {r0, r3, r5, r6}
    2afc:	00002c11 	andeq	r2, r0, r1, lsl ip
    2b00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b04:	22000000 	andcs	r0, r0, #0
    2b08:	02000000 	andeq	r0, r0, #0
    2b0c:	00076700 	andeq	r6, r7, r0, lsl #14
    2b10:	16010400 	strne	r0, [r1], -r0, lsl #8
    2b14:	00000012 	andeq	r0, r0, r2, lsl r0
    2b18:	04010000 	streq	r0, [r1], #-0
    2b1c:	d1010000 	mrsle	r0, (UNDEF: 1)
    2b20:	41000010 	tstmi	r0, r0, lsl r0
    2b24:	ee00000e 	cdp	0, 0, cr0, cr0, cr14, {0}
    2b28:	01000010 	tsteq	r0, r0, lsl r0
    2b2c:	00124280 	andseq	r4, r2, r0, lsl #5
    2b30:	7b000400 	blvc	3b38 <__core1_unwind_stub-0xffc4c8>
    2b34:	04000007 	streq	r0, [r0], #-7
    2b38:	0007e801 	andeq	lr, r7, r1, lsl #16
    2b3c:	13060c00 	movwne	r0, #27648	; 0x6c00
    2b40:	0e410000 	cdpeq	0, 4, cr0, cr1, cr0, {0}
    2b44:	01900000 	orrseq	r0, r0, r0
    2b48:	00000000 	andeq	r0, r0, r0
    2b4c:	12620000 	rsbne	r0, r2, #0
    2b50:	01020000 	mrseq	r0, (UNDEF: 2)
    2b54:	000bbf06 	andeq	fp, fp, r6, lsl #30
    2b58:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    2b5c:	0000099b 	muleq	r0, fp, r9
    2b60:	0002c403 	andeq	ip, r2, r3, lsl #8
    2b64:	18280200 	stmdane	r8!, {r9}
    2b68:	0000003f 	andeq	r0, r0, pc, lsr r0
    2b6c:	be050402 	cdplt	4, 0, cr0, cr5, cr2, {0}
    2b70:	02000006 	andeq	r0, r0, #6
    2b74:	06b90508 	ldrteq	r0, [r9], r8, lsl #10
    2b78:	15030000 	strne	r0, [r3, #-0]
    2b7c:	02000010 	andeq	r0, r0, #16
    2b80:	0059182e 	subseq	r1, r9, lr, lsr #16
    2b84:	01020000 	mrseq	r0, (UNDEF: 2)
    2b88:	000bbd08 	andeq	fp, fp, r8, lsl #26
    2b8c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2b90:	00000d07 	andeq	r0, r0, r7, lsl #26
    2b94:	0002c303 	andeq	ip, r2, r3, lsl #6
    2b98:	19340200 	ldmdbne	r4!, {r9}
    2b9c:	00000078 	andeq	r0, r0, r8, ror r0
    2ba0:	00006704 	andeq	r6, r0, r4, lsl #14
    2ba4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2ba8:	0000034e 	andeq	r0, r0, lr, asr #6
    2bac:	49070802 	stmdbmi	r7, {r1, fp}
    2bb0:	05000003 	streq	r0, [r0, #-3]
    2bb4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2bb8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2bbc:	00035307 	andeq	r5, r3, r7, lsl #6
    2bc0:	008d0600 	addeq	r0, sp, r0, lsl #12
    2bc4:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    2bc8:	0200000a 	andeq	r0, r0, #10
    2bcc:	008d1a56 	addeq	r1, sp, r6, asr sl
    2bd0:	0d030000 	stceq	0, cr0, [r3, #-0]
    2bd4:	03000004 	movweq	r0, #4
    2bd8:	008d17d1 	ldrdeq	r1, [sp], r1	; <UNPREDICTABLE>
    2bdc:	a5060000 	strge	r0, [r6, #-0]
    2be0:	02000000 	andeq	r0, r0, #0
    2be4:	09550408 	ldmdbeq	r5, {r3, sl}^
    2be8:	14030000 	strne	r0, [r3], #-0
    2bec:	04000004 	streq	r0, [r0], #-4
    2bf0:	00331d41 	eorseq	r1, r3, r1, asr #26
    2bf4:	60070000 	andvs	r0, r7, r0
    2bf8:	07000002 	streq	r0, [r0, -r2]
    2bfc:	00005901 	andeq	r5, r0, r1, lsl #18
    2c00:	0e650500 	cdpeq	5, 6, cr0, cr5, cr0, {0}
    2c04:	000000e8 	andeq	r0, r0, r8, ror #1
    2c08:	000b5108 	andeq	r5, fp, r8, lsl #2
    2c0c:	33080000 	movwcc	r0, #32768	; 0x8000
    2c10:	01000002 	tsteq	r0, r2
    2c14:	02ac0300 	adceq	r0, ip, #0, 6
    2c18:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    2c1c:	0000c903 	andeq	ip, r0, r3, lsl #18
    2c20:	0bdf0700 	bleq	ff7c4828 <__shm_end__+0xbf7c4828>
    2c24:	01070000 	mrseq	r0, (UNDEF: 7)
    2c28:	00000059 	andeq	r0, r0, r9, asr r0
    2c2c:	130e7305 	movwne	r7, #58117	; 0xe305
    2c30:	08000001 	stmdaeq	r0, {r0}
    2c34:	0000092e 	andeq	r0, r0, lr, lsr #18
    2c38:	06d00800 	ldrbeq	r0, [r0], r0, lsl #16
    2c3c:	00010000 	andeq	r0, r1, r0
    2c40:	000c2003 	andeq	r2, ip, r3
    2c44:	03770500 	cmneq	r7, #0, 10
    2c48:	000000f4 	strdeq	r0, [r0], -r4
    2c4c:	00094407 	andeq	r4, r9, r7, lsl #8
    2c50:	59010700 	stmdbpl	r1, {r8, r9, sl}
    2c54:	05000000 	streq	r0, [r0, #-0]
    2c58:	013e0e7e 	teqeq	lr, lr, ror lr
    2c5c:	81080000 	mrshi	r0, (UNDEF: 8)
    2c60:	0000000a 	andeq	r0, r0, sl
    2c64:	000eaf08 	andeq	sl, lr, r8, lsl #30
    2c68:	03000100 	movweq	r0, #256	; 0x100
    2c6c:	00000979 	andeq	r0, r0, r9, ror r9
    2c70:	1f038d05 	svcne	0x00038d05
    2c74:	07000001 	streq	r0, [r0, -r1]
    2c78:	00000c51 	andeq	r0, r0, r1, asr ip
    2c7c:	00590107 	subseq	r0, r9, r7, lsl #2
    2c80:	bc050000 	stclt	0, cr0, [r5], {-0}
    2c84:	00018106 	andeq	r8, r1, r6, lsl #2
    2c88:	09d40800 	ldmibeq	r4, {fp}^
    2c8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2c90:	0000059c 	muleq	r0, ip, r5
    2c94:	08d10801 	ldmeq	r1, {r0, fp}^
    2c98:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2c9c:	00000062 	andeq	r0, r0, r2, rrx
    2ca0:	0cde0803 	ldcleq	8, cr0, [lr], {3}
    2ca4:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    2ca8:	000007c1 	andeq	r0, r0, r1, asr #15
    2cac:	7c030007 	stcvc	0, cr0, [r3], {7}
    2cb0:	0500000c 	streq	r0, [r0, #-12]
    2cb4:	014a21c6 	smlalbteq	r2, sl, r6, r1
    2cb8:	d6070000 	strle	r0, [r7], -r0
    2cbc:	07000004 	streq	r0, [r0, -r4]
    2cc0:	00005901 	andeq	r5, r0, r1, lsl #18
    2cc4:	06f70500 	ldrbteq	r0, [r7], r0, lsl #10
    2cc8:	00000230 	andeq	r0, r0, r0, lsr r2
    2ccc:	000aac08 	andeq	sl, sl, r8, lsl #24
    2cd0:	2308ff00 	movwcs	pc, #36608	; 0x8f00	; <UNPREDICTABLE>
    2cd4:	00000003 	andeq	r0, r0, r3
    2cd8:	0008fb08 	andeq	pc, r8, r8, lsl #22
    2cdc:	13080100 	movwne	r0, #33024	; 0x8100
    2ce0:	02000000 	andeq	r0, r0, #0
    2ce4:	000ec508 	andeq	ip, lr, r8, lsl #10
    2ce8:	6e080300 	cdpvs	3, 0, cr0, cr8, cr0, {0}
    2cec:	10000005 	andne	r0, r0, r5
    2cf0:	000abf08 	andeq	fp, sl, r8, lsl #30
    2cf4:	75081300 	strvc	r1, [r8, #-768]	; 0xfffffd00
    2cf8:	20000003 	andcs	r0, r0, r3
    2cfc:	0002ee08 	andeq	lr, r2, r8, lsl #28
    2d00:	a3084000 	movwge	r4, #32768	; 0x8000
    2d04:	50000000 	andpl	r0, r0, r0
    2d08:	000b9908 	andeq	r9, fp, r8, lsl #18
    2d0c:	6d086000 	stcvs	0, cr6, [r8, #-0]
    2d10:	7000000b 	andvc	r0, r0, fp
    2d14:	00065908 	andeq	r5, r6, r8, lsl #18
    2d18:	6d084100 	stfvss	f4, [r8, #-0]
    2d1c:	51000004 	tstpl	r0, r4
    2d20:	00014b08 	andeq	r4, r1, r8, lsl #22
    2d24:	27086100 	strcs	r6, [r8, -r0, lsl #2]
    2d28:	71000001 	tstvc	r0, r1
    2d2c:	000afe08 	andeq	pc, sl, r8, lsl #28
    2d30:	6d084200 	sfmvs	f4, 4, [r8, #-0]
    2d34:	52000007 	andpl	r0, r0, #7
    2d38:	00053008 	andeq	r3, r5, r8
    2d3c:	e5086200 	str	r6, [r8, #-512]	; 0xfffffe00
    2d40:	72000004 	andvc	r0, r0, #4
    2d44:	00055b08 	andeq	r5, r5, r8, lsl #22
    2d48:	cb084300 	blgt	213950 <__core1_unwind_stub-0xdec6b0>
    2d4c:	5300000b 	movwpl	r0, #11
    2d50:	00000008 	andeq	r0, r0, r8
    2d54:	43086300 	movwmi	r6, #33536	; 0x8300
    2d58:	73000005 	movwvc	r0, #5
    2d5c:	050f0900 	streq	r0, [pc, #-2304]	; 2464 <__core1_unwind_stub-0xffdb9c>
    2d60:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
    2d64:	018d2101 	orreq	r2, sp, r1, lsl #2
    2d68:	220a0000 	andcs	r0, sl, #0
    2d6c:	1400000d 	strne	r0, [r0], #-13
    2d70:	1005cf05 	andne	ip, r5, r5, lsl #30
    2d74:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    2d78:	0061760b 	rsbeq	r7, r1, fp, lsl #12
    2d7c:	1a05d105 	bne	177198 <__core1_unwind_stub-0xe88e68>
    2d80:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    2d84:	61700b00 	cmnvs	r0, r0, lsl #22
    2d88:	05d50500 	ldrbeq	r0, [r5, #1280]	; 0x500
    2d8c:	0002ba1a 	andeq	fp, r2, sl, lsl sl
    2d90:	da0c0400 	ble	303d98 <__core1_unwind_stub-0xcfc268>
    2d94:	0500000d 	streq	r0, [r0, #-13]
    2d98:	671a05da 			; <UNDEFINED> instruction: 0x671a05da
    2d9c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2da0:	0008eb0c 	andeq	lr, r8, ip, lsl #22
    2da4:	05de0500 	ldrbeq	r0, [lr, #1280]	; 0x500
    2da8:	0001811a 	andeq	r8, r1, sl, lsl r1
    2dac:	310c0c00 	tstcc	ip, r0, lsl #24
    2db0:	0500000c 	streq	r0, [r0, #-12]
    2db4:	301a05df 			; <UNDEFINED> instruction: 0x301a05df
    2db8:	0d000002 	stceq	0, cr0, [r0, #-8]
    2dbc:	0009b60c 	andeq	fp, r9, ip, lsl #12
    2dc0:	05e40500 	strbeq	r0, [r4, #1280]!	; 0x500
    2dc4:	0000e81a 	andeq	lr, r0, sl, lsl r8
    2dc8:	6d0c0e00 	stcvs	14, cr0, [ip, #-0]
    2dcc:	05000006 	streq	r0, [r0, #-6]
    2dd0:	3e1a05e5 	cdpcc	5, 1, cr0, cr10, cr5, {7}
    2dd4:	0f000001 	svceq	0x00000001
    2dd8:	000b290c 	andeq	r2, fp, ip, lsl #18
    2ddc:	05e80500 	strbeq	r0, [r8, #1280]!	; 0x500
    2de0:	0001131a 	andeq	r1, r1, sl, lsl r3
    2de4:	0d001000 	stceq	0, cr1, [r0, #-0]
    2de8:	0d370904 			; <UNDEFINED> instruction: 0x0d370904
    2dec:	ec050000 	stc	0, cr0, [r5], {-0}
    2df0:	023d0305 	eorseq	r0, sp, #335544320	; 0x14000000
    2df4:	040e0000 	streq	r0, [lr], #-0
    2df8:	000002d6 	ldrdeq	r0, [r0], -r6
    2dfc:	c6080102 	strgt	r0, [r8], -r2, lsl #2
    2e00:	0600000b 	streq	r0, [r0], -fp
    2e04:	000002cf 	andeq	r0, r0, pc, asr #5
    2e08:	00146007 	andseq	r6, r4, r7
    2e0c:	59010700 	stmdbpl	r1, {r8, r9, sl}
    2e10:	06000000 	streq	r0, [r0], -r0
    2e14:	03060e41 	movweq	r0, #28225	; 0x6e41
    2e18:	45080000 	strmi	r0, [r8, #-0]
    2e1c:	00000012 	andeq	r0, r0, r2, lsl r0
    2e20:	00116608 	andseq	r6, r1, r8, lsl #12
    2e24:	9d080100 	stflss	f0, [r8, #-0]
    2e28:	02000012 	andeq	r0, r0, #18
    2e2c:	00127908 	andseq	r7, r2, r8, lsl #18
    2e30:	09000300 	stmdbeq	r0, {r8, r9}
    2e34:	00000b39 	andeq	r0, r0, r9, lsr fp
    2e38:	17015e03 	strne	r5, [r1, -r3, lsl #28]
    2e3c:	0000008d 	andeq	r0, r0, sp, lsl #1
    2e40:	000ddf03 	andeq	sp, sp, r3, lsl #30
    2e44:	0e2e0700 	cdpeq	7, 2, cr0, cr14, cr0, {0}
    2e48:	0000003f 	andeq	r0, r0, pc, lsr r0
    2e4c:	00024b03 	andeq	r4, r2, r3, lsl #22
    2e50:	0e740700 	cdpeq	7, 7, cr0, cr4, cr0, {0}
    2e54:	0000003f 	andeq	r0, r0, pc, lsr r0
    2e58:	a507040f 	strge	r0, [r7, #-1039]	; 0xfffffbf1
    2e5c:	00034d03 	andeq	r4, r3, r3, lsl #26
    2e60:	06191000 	ldreq	r1, [r9], -r0
    2e64:	a7070000 	strge	r0, [r7, -r0]
    2e68:	0003060c 	andeq	r0, r3, ip, lsl #12
    2e6c:	09fb1000 	ldmibeq	fp!, {ip}^
    2e70:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    2e74:	00034d13 	andeq	r4, r3, r3, lsl sp
    2e78:	59110000 	ldmdbpl	r1, {}	; <UNPREDICTABLE>
    2e7c:	5d000000 	stcpl	0, cr0, [r0, #-0]
    2e80:	12000003 	andne	r0, r0, #3
    2e84:	0000008d 	andeq	r0, r0, sp, lsl #1
    2e88:	08130003 	ldmdaeq	r3, {r0, r1}
    2e8c:	8109a207 	tsthi	r9, r7, lsl #4
    2e90:	14000003 	strne	r0, [r0], #-3
    2e94:	000002e6 	andeq	r0, r0, r6, ror #5
    2e98:	8607a407 	strhi	sl, [r7], -r7, lsl #8
    2e9c:	00000000 	andeq	r0, r0, r0
    2ea0:	00043714 	andeq	r3, r4, r4, lsl r7
    2ea4:	05a90700 	streq	r0, [r9, #1792]!	; 0x700
    2ea8:	0000032b 	andeq	r0, r0, fp, lsr #6
    2eac:	62030004 	andvs	r0, r3, #4
    2eb0:	07000007 	streq	r0, [r0, -r7]
    2eb4:	035d03aa 	cmpeq	sp, #-1476395006	; 0xa8000002
    2eb8:	00030000 	andeq	r0, r3, r0
    2ebc:	08000007 	stmdaeq	r0, {r0, r1, r2}
    2ec0:	00781916 	rsbseq	r1, r8, r6, lsl r9
    2ec4:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    2ec8:	09000001 	stmdbeq	r0, {r0}
    2ecc:	00860d0c 	addeq	r0, r6, ip, lsl #26
    2ed0:	10030000 	andne	r0, r3, r0
    2ed4:	08000006 	stmdaeq	r0, {r1, r2}
    2ed8:	03991b23 	orrseq	r1, r9, #35840	; 0x8c00
    2edc:	70150000 	andsvc	r0, r5, r0
    2ee0:	18000002 	stmdane	r0, {r1}
    2ee4:	0b083408 	bleq	20ff0c <__core1_unwind_stub-0xdf00f4>
    2ee8:	14000004 	strne	r0, [r0], #-4
    2eec:	00000e98 	muleq	r0, r8, lr
    2ef0:	0b133608 	bleq	4d0718 <__core1_unwind_stub-0xb2f8e8>
    2ef4:	00000004 	andeq	r0, r0, r4
    2ef8:	006b5f16 	rsbeq	r5, fp, r6, lsl pc
    2efc:	86073708 	strhi	r3, [r7], -r8, lsl #14
    2f00:	04000000 	streq	r0, [r0], #-0
    2f04:	000a6f14 	andeq	r6, sl, r4, lsl pc
    2f08:	0b370800 	bleq	dc4f10 <__core1_unwind_stub-0x23b0f0>
    2f0c:	00000086 	andeq	r0, r0, r6, lsl #1
    2f10:	09e91408 	stmibeq	r9!, {r3, sl, ip}^
    2f14:	37080000 	strcc	r0, [r8, -r0]
    2f18:	00008614 	andeq	r8, r0, r4, lsl r6
    2f1c:	33140c00 	tstcc	r4, #0, 24
    2f20:	08000007 	stmdaeq	r0, {r0, r1, r2}
    2f24:	00861b37 	addeq	r1, r6, r7, lsr fp
    2f28:	16100000 	ldrne	r0, [r0], -r0
    2f2c:	0800785f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    2f30:	04110b38 	ldreq	r0, [r1], #-2872	; 0xfffff4c8
    2f34:	00140000 	andseq	r0, r4, r0
    2f38:	03b1040e 			; <UNDEFINED> instruction: 0x03b1040e
    2f3c:	8d110000 	ldchi	0, cr0, [r1, #-0]
    2f40:	21000003 	tstcs	r0, r3
    2f44:	12000004 	andne	r0, r0, #4
    2f48:	0000008d 	andeq	r0, r0, sp, lsl #1
    2f4c:	e3150000 	tst	r5, #0
    2f50:	2400000a 	strcs	r0, [r0], #-10
    2f54:	a4083c08 	strge	r3, [r8], #-3080	; 0xfffff3f8
    2f58:	14000004 	strne	r0, [r0], #-4
    2f5c:	00000424 	andeq	r0, r0, r4, lsr #8
    2f60:	86093e08 	strhi	r3, [r9], -r8, lsl #28
    2f64:	00000000 	andeq	r0, r0, r0
    2f68:	00030114 	andeq	r0, r3, r4, lsl r1
    2f6c:	093f0800 	ldmdbeq	pc!, {fp}	; <UNPREDICTABLE>
    2f70:	00000086 	andeq	r0, r0, r6, lsl #1
    2f74:	02cc1404 	sbceq	r1, ip, #4, 8	; 0x4000000
    2f78:	40080000 	andmi	r0, r8, r0
    2f7c:	00008609 	andeq	r8, r0, r9, lsl #12
    2f80:	b3140800 	tstlt	r4, #0, 16
    2f84:	08000005 	stmdaeq	r0, {r0, r2}
    2f88:	00860941 	addeq	r0, r6, r1, asr #18
    2f8c:	140c0000 	strne	r0, [ip], #-0
    2f90:	000008f2 	strdeq	r0, [r0], -r2
    2f94:	86094208 	strhi	r4, [r9], -r8, lsl #4
    2f98:	10000000 	andne	r0, r0, r0
    2f9c:	000a1514 	andeq	r1, sl, r4, lsl r5
    2fa0:	09430800 	stmdbeq	r3, {fp}^
    2fa4:	00000086 	andeq	r0, r0, r6, lsl #1
    2fa8:	02781414 	rsbseq	r1, r8, #20, 8	; 0x14000000
    2fac:	44080000 	strmi	r0, [r8], #-0
    2fb0:	00008609 	andeq	r8, r0, r9, lsl #12
    2fb4:	2d141800 	ldccs	8, cr1, [r4, #-0]
    2fb8:	08000004 	stmdaeq	r0, {r2}
    2fbc:	00860945 	addeq	r0, r6, r5, asr #18
    2fc0:	141c0000 	ldrne	r0, [ip], #-0
    2fc4:	00000789 	andeq	r0, r0, r9, lsl #15
    2fc8:	86094608 	strhi	r4, [r9], -r8, lsl #12
    2fcc:	20000000 	andcs	r0, r0, r0
    2fd0:	00791700 	rsbseq	r1, r9, r0, lsl #14
    2fd4:	01080000 	mrseq	r0, (UNDEF: 8)
    2fd8:	e9084f08 	stmdb	r8, {r3, r8, r9, sl, fp, lr}
    2fdc:	14000004 	strne	r0, [r0], #-4
    2fe0:	00000cf8 	strdeq	r0, [r0], -r8
    2fe4:	e90a5008 	stmdb	sl, {r3, ip, lr}
    2fe8:	00000004 	andeq	r0, r0, r4
    2fec:	000b8014 	andeq	r8, fp, r4, lsl r0
    2ff0:	09510800 	ldmdbeq	r1, {fp}^
    2ff4:	000004e9 	andeq	r0, r0, r9, ror #9
    2ff8:	0daf1880 	stceq	8, cr1, [pc, #512]!	; 3200 <__core1_unwind_stub-0xffce00>
    2ffc:	53080000 	movwpl	r0, #32768	; 0x8000
    3000:	00038d0a 	andeq	r8, r3, sl, lsl #26
    3004:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    3008:	00000e39 	andeq	r0, r0, r9, lsr lr
    300c:	8d0a5608 	stchi	6, cr5, [sl, #-32]	; 0xffffffe0
    3010:	04000003 	streq	r0, [r0], #-3
    3014:	ba110001 	blt	443020 <__core1_unwind_stub-0xbbcfe0>
    3018:	f9000002 			; <UNDEFINED> instruction: 0xf9000002
    301c:	12000004 	andne	r0, r0, #4
    3020:	0000008d 	andeq	r0, r0, sp, lsl #1
    3024:	8a17001f 	bhi	5c30a8 <__core1_unwind_stub-0xa3cf58>
    3028:	90000009 	andls	r0, r0, r9
    302c:	08620801 	stmdaeq	r2!, {r0, fp}^
    3030:	0000053c 	andeq	r0, r0, ip, lsr r5
    3034:	000e9814 	andeq	r9, lr, r4, lsl r8
    3038:	12630800 	rsbne	r0, r3, #0, 16
    303c:	0000053c 	andeq	r0, r0, ip, lsr r5
    3040:	04441400 	strbeq	r1, [r4], #-1024	; 0xfffffc00
    3044:	64080000 	strvs	r0, [r8], #-0
    3048:	00008606 	andeq	r8, r0, r6, lsl #12
    304c:	53140400 	tstpl	r4, #0, 8
    3050:	08000002 	stmdaeq	r0, {r1}
    3054:	05420966 	strbeq	r0, [r2, #-2406]	; 0xfffff69a
    3058:	14080000 	strne	r0, [r8], #-0
    305c:	00000079 	andeq	r0, r0, r9, ror r0
    3060:	a41e6708 	ldrge	r6, [lr], #-1800	; 0xfffff8f8
    3064:	88000004 	stmdahi	r0, {r2}
    3068:	f9040e00 			; <UNDEFINED> instruction: 0xf9040e00
    306c:	11000004 	tstne	r0, r4
    3070:	00000552 	andeq	r0, r0, r2, asr r5
    3074:	00000552 	andeq	r0, r0, r2, asr r5
    3078:	00008d12 	andeq	r8, r0, r2, lsl sp
    307c:	0e001f00 	cdpeq	15, 0, cr1, cr0, cr0, {0}
    3080:	00055804 	andeq	r5, r5, r4, lsl #16
    3084:	6b151900 	blvs	54948c <__core1_unwind_stub-0xab6b74>
    3088:	0800000c 	stmdaeq	r0, {r2, r3}
    308c:	81087a08 	tsthi	r8, r8, lsl #20
    3090:	14000005 	strne	r0, [r0], #-5
    3094:	000006ea 	andeq	r0, r0, sl, ror #13
    3098:	81117b08 	tsthi	r1, r8, lsl #22
    309c:	00000005 	andeq	r0, r0, r5
    30a0:	000dd914 	andeq	sp, sp, r4, lsl r9
    30a4:	067c0800 	ldrbteq	r0, [ip], -r0, lsl #16
    30a8:	00000086 	andeq	r0, r0, r6, lsl #1
    30ac:	040e0004 	streq	r0, [lr], #-4
    30b0:	00000059 	andeq	r0, r0, r9, asr r0
    30b4:	00036d15 	andeq	r6, r3, r5, lsl sp
    30b8:	ba086800 	blt	21d0c0 <__core1_unwind_stub-0xde2f40>
    30bc:	0006ca08 	andeq	ip, r6, r8, lsl #20
    30c0:	705f1600 	subsvc	r1, pc, r0, lsl #12
    30c4:	12bb0800 	adcsne	r0, fp, #0, 16
    30c8:	00000581 	andeq	r0, r0, r1, lsl #11
    30cc:	725f1600 	subsvc	r1, pc, #0, 12
    30d0:	07bc0800 	ldreq	r0, [ip, r0, lsl #16]!
    30d4:	00000086 	andeq	r0, r0, r6, lsl #1
    30d8:	775f1604 	ldrbvc	r1, [pc, -r4, lsl #12]
    30dc:	07bd0800 	ldreq	r0, [sp, r0, lsl #16]!
    30e0:	00000086 	andeq	r0, r0, r6, lsl #1
    30e4:	01441408 	cmpeq	r4, r8, lsl #8
    30e8:	be080000 	cdplt	0, 0, cr0, cr8, cr0, {0}
    30ec:	00002c09 	andeq	r2, r0, r9, lsl #24
    30f0:	17140c00 	ldrne	r0, [r4, -r0, lsl #24]
    30f4:	08000007 	stmdaeq	r0, {r0, r1, r2}
    30f8:	002c09bf 	strhteq	r0, [ip], -pc
    30fc:	160e0000 	strne	r0, [lr], -r0
    3100:	0066625f 	rsbeq	r6, r6, pc, asr r2
    3104:	5911c008 	ldmdbpl	r1, {r3, lr, pc}
    3108:	10000005 	andne	r0, r0, r5
    310c:	00013b14 	andeq	r3, r1, r4, lsl fp
    3110:	07c10800 	strbeq	r0, [r1, r0, lsl #16]
    3114:	00000086 	andeq	r0, r0, r6, lsl #1
    3118:	02581418 	subseq	r1, r8, #24, 8	; 0x18000000
    311c:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    3120:	0002ba0a 	andeq	fp, r2, sl, lsl #20
    3124:	eb141c00 	bl	50a12c <__core1_unwind_stub-0xaf5ed4>
    3128:	08000001 	stmdaeq	r0, {r0}
    312c:	08421dca 	stmdaeq	r2, {r1, r3, r6, r7, r8, sl, fp, ip}^
    3130:	14200000 	strtne	r0, [r0], #-0
    3134:	00000972 	andeq	r0, r0, r2, ror r9
    3138:	661dcc08 	ldrvs	ip, [sp], -r8, lsl #24
    313c:	24000008 	strcs	r0, [r0], #-8
    3140:	000ea914 	andeq	sl, lr, r4, lsl r9
    3144:	0dcf0800 	stcleq	8, cr0, [pc]	; 314c <__core1_unwind_stub-0xffceb4>
    3148:	0000088a 	andeq	r0, r0, sl, lsl #17
    314c:	11181428 	tstne	r8, r8, lsr #8
    3150:	d0080000 	andle	r0, r8, r0
    3154:	0008a409 	andeq	sl, r8, r9, lsl #8
    3158:	5f162c00 	svcpl	0x00162c00
    315c:	08006275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
    3160:	055911d3 	ldrbeq	r1, [r9, #-467]	; 0xfffffe2d
    3164:	16300000 	ldrtne	r0, [r0], -r0
    3168:	0070755f 	rsbseq	r7, r0, pc, asr r5
    316c:	8112d408 	tsthi	r2, r8, lsl #8
    3170:	38000005 	stmdacc	r0, {r0, r2}
    3174:	72755f16 	rsbsvc	r5, r5, #22, 30	; 0x58
    3178:	07d50800 	ldrbeq	r0, [r5, r0, lsl #16]
    317c:	00000086 	andeq	r0, r0, r6, lsl #1
    3180:	0ee6143c 	mcreq	4, 7, r1, cr6, cr12, {1}
    3184:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    3188:	0008aa11 	andeq	sl, r8, r1, lsl sl
    318c:	e6144000 	ldr	r4, [r4], -r0
    3190:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    3194:	08ba11d9 	ldmeq	sl!, {r0, r3, r4, r6, r7, r8, ip}
    3198:	16430000 	strbne	r0, [r3], -r0
    319c:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    31a0:	5911dc08 	ldmdbpl	r1, {r3, sl, fp, ip, lr, pc}
    31a4:	44000005 	strmi	r0, [r0], #-5
    31a8:	000ad014 	andeq	sp, sl, r4, lsl r0
    31ac:	07df0800 	ldrbeq	r0, [pc, r0, lsl #16]
    31b0:	00000086 	andeq	r0, r0, r6, lsl #1
    31b4:	0393144c 	orrseq	r1, r3, #76, 8	; 0x4c000000
    31b8:	e0080000 	and	r0, r8, r0
    31bc:	0003130a 	andeq	r1, r3, sl, lsl #6
    31c0:	0c145000 	ldceq	0, cr5, [r4], {-0}
    31c4:	08000011 	stmdaeq	r0, {r0, r4}
    31c8:	06e812e3 	strbteq	r1, [r8], r3, ror #5
    31cc:	14540000 	ldrbne	r0, [r4], #-0
    31d0:	00000b11 	andeq	r0, r0, r1, lsl fp
    31d4:	a50ce708 	strge	lr, [ip, #-1800]	; 0xfffff8f8
    31d8:	58000003 	stmdapl	r0, {r0, r1}
    31dc:	00099214 	andeq	r9, r9, r4, lsl r2
    31e0:	0ee90800 	cdpeq	8, 14, cr0, cr9, cr0, {0}
    31e4:	00000381 	andeq	r0, r0, r1, lsl #7
    31e8:	0e31145c 	mrceq	4, 1, r1, cr1, cr12, {2}
    31ec:	ea080000 	b	2031f4 <__core1_unwind_stub-0xdfce0c>
    31f0:	00008609 	andeq	r8, r0, r9, lsl #12
    31f4:	1a006400 	bne	1c1fc <__core1_unwind_stub-0xfe3e04>
    31f8:	00000086 	andeq	r0, r0, r6, lsl #1
    31fc:	000006e8 	andeq	r0, r0, r8, ror #13
    3200:	0006e81b 	andeq	lr, r6, fp, lsl r8
    3204:	02ba1b00 	adcseq	r1, sl, #0, 22
    3208:	3c1b0000 	ldccc	0, cr0, [fp], {-0}
    320c:	1b000008 	blne	3234 <__core1_unwind_stub-0xffcdcc>
    3210:	00000086 	andeq	r0, r0, r6, lsl #1
    3214:	f3040e00 	vcge.f32	d0, d4, d0
    3218:	06000006 	streq	r0, [r0], -r6
    321c:	000006e8 	andeq	r0, r0, r8, ror #13
    3220:	000d001c 	andeq	r0, sp, ip, lsl r0
    3224:	08042800 	stmdaeq	r4, {fp, sp}
    3228:	3c080265 	sfmcc	f0, 4, [r8], {101}	; 0x65
    322c:	0c000008 	stceq	0, cr0, [r0], {8}
    3230:	000007d8 	ldrdeq	r0, [r0], -r8
    3234:	07026708 	streq	r6, [r2, -r8, lsl #14]
    3238:	00000086 	andeq	r0, r0, r6, lsl #1
    323c:	06a30c00 	strteq	r0, [r3], r0, lsl #24
    3240:	6c080000 	stcvs	0, cr0, [r8], {-0}
    3244:	09160b02 	ldmdbeq	r6, {r1, r8, r9, fp}
    3248:	0c040000 	stceq	0, cr0, [r4], {-0}
    324c:	0000021a 	andeq	r0, r0, sl, lsl r2
    3250:	14026c08 	strne	r6, [r2], #-3080	; 0xfffff3f8
    3254:	00000916 	andeq	r0, r0, r6, lsl r9
    3258:	0ed50c08 	cdpeq	12, 13, cr0, cr5, cr8, {0}
    325c:	6c080000 	stcvs	0, cr0, [r8], {-0}
    3260:	09161e02 	ldmdbeq	r6, {r1, r9, sl, fp, ip}
    3264:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3268:	0000043f 	andeq	r0, r0, pc, lsr r4
    326c:	08026e08 	stmdaeq	r2, {r3, r9, sl, fp, sp, lr}
    3270:	00000086 	andeq	r0, r0, r6, lsl #1
    3274:	03e50c10 	mvneq	r0, #16, 24	; 0x1000
    3278:	6f080000 	svcvs	0x00080000
    327c:	0b160802 	bleq	58528c <__core1_unwind_stub-0xa7ad74>
    3280:	0c140000 	ldceq	0, cr0, [r4], {-0}
    3284:	00000e18 	andeq	r0, r0, r8, lsl lr
    3288:	07027208 	streq	r7, [r2, -r8, lsl #4]
    328c:	00000086 	andeq	r0, r0, r6, lsl #1
    3290:	0d1a0c30 	ldceq	12, cr0, [sl, #-192]	; 0xffffff40
    3294:	73080000 	movwvc	r0, #32768	; 0x8000
    3298:	0b2b1602 	bleq	ac8aa8 <__core1_unwind_stub-0x537558>
    329c:	0c340000 	ldceq	0, cr0, [r4], #-0
    32a0:	0000064e 	andeq	r0, r0, lr, asr #12
    32a4:	07027508 	streq	r7, [r2, -r8, lsl #10]
    32a8:	00000086 	andeq	r0, r0, r6, lsl #1
    32ac:	074e0c38 	smlaldxeq	r0, lr, r8, ip
    32b0:	77080000 	strvc	r0, [r8, -r0]
    32b4:	0b3c0a02 	bleq	f05ac4 <__core1_unwind_stub-0xfa53c>
    32b8:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    32bc:	000002a4 	andeq	r0, r0, r4, lsr #5
    32c0:	13027a08 	movwne	r7, #10760	; 0x2a08
    32c4:	0000040b 	andeq	r0, r0, fp, lsl #8
    32c8:	033f0c40 	teqeq	pc, #64, 24	; 0x4000
    32cc:	7b080000 	blvc	2032d4 <__core1_unwind_stub-0xdfcd2c>
    32d0:	00860702 	addeq	r0, r6, r2, lsl #14
    32d4:	0c440000 	mareq	acc0, r0, r4
    32d8:	00000556 	andeq	r0, r0, r6, asr r5
    32dc:	13027c08 	movwne	r7, #11272	; 0x2c08
    32e0:	0000040b 	andeq	r0, r0, fp, lsl #8
    32e4:	06f00c48 	ldrbteq	r0, [r0], r8, asr #24
    32e8:	7d080000 	stcvc	0, cr0, [r8, #-0]
    32ec:	0b421402 	bleq	10882fc <__bss_end__+0x742fc>
    32f0:	0c4c0000 	mareq	acc0, r0, ip
    32f4:	00000a67 	andeq	r0, r0, r7, ror #20
    32f8:	07028008 	streq	r8, [r2, -r8]
    32fc:	00000086 	andeq	r0, r0, r6, lsl #1
    3300:	0bb50c50 	bleq	fed46448 <__shm_end__+0xbed46448>
    3304:	81080000 	mrshi	r0, (UNDEF: 8)
    3308:	083c0902 	ldmdaeq	ip!, {r1, r8, fp}
    330c:	0c540000 	mraeq	r0, r4, acc0
    3310:	00000a5d 	andeq	r0, r0, sp, asr sl
    3314:	0702a408 	streq	sl, [r2, -r8, lsl #8]
    3318:	00000af1 	strdeq	r0, [r0], -r1
    331c:	098a1d58 	stmibeq	sl, {r3, r4, r6, r8, sl, fp, ip}
    3320:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
    3324:	053c1302 	ldreq	r1, [ip, #-770]!	; 0xfffffcfe
    3328:	01480000 	mrseq	r0, (UNDEF: 72)
    332c:	0005d61d 	andeq	sp, r5, sp, lsl r6
    3330:	02a90800 	adceq	r0, r9, #0, 16
    3334:	0004f912 	andeq	pc, r4, r2, lsl r9	; <UNPREDICTABLE>
    3338:	1d014c00 	stcne	12, cr4, [r1, #-0]
    333c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    3340:	0c02ad08 	stceq	13, cr10, [r2], {8}
    3344:	00000b53 	andeq	r0, r0, r3, asr fp
    3348:	971d02dc 			; <UNDEFINED> instruction: 0x971d02dc
    334c:	0800000c 	stmdaeq	r0, {r2, r3}
    3350:	d71002b2 			; <UNDEFINED> instruction: 0xd71002b2
    3354:	e0000008 	and	r0, r0, r8
    3358:	0a621d02 	beq	188a768 <__bss_end__+0x876768>
    335c:	b4080000 	strlt	r0, [r8], #-0
    3360:	0b5f0a02 	bleq	17c5b70 <__bss_end__+0x7b1b70>
    3364:	02ec0000 	rsceq	r0, ip, #0
    3368:	cf040e00 	svcgt	0x00040e00
    336c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3370:	0006ca04 	andeq	ip, r6, r4, lsl #20
    3374:	00861a00 	addeq	r1, r6, r0, lsl #20
    3378:	08660000 	stmdaeq	r6!, {}^	; <UNPREDICTABLE>
    337c:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    3380:	1b000006 	blne	33a0 <__core1_unwind_stub-0xffcc60>
    3384:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    3388:	0002c91b 	andeq	ip, r2, fp, lsl r9
    338c:	00861b00 	addeq	r1, r6, r0, lsl #22
    3390:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3394:	00084804 	andeq	r4, r8, r4, lsl #16
    3398:	031f1a00 	tsteq	pc, #0, 20
    339c:	088a0000 	stmeq	sl, {}	; <UNPREDICTABLE>
    33a0:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    33a4:	1b000006 	blne	33c4 <__core1_unwind_stub-0xffcc3c>
    33a8:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    33ac:	00031f1b 	andeq	r1, r3, fp, lsl pc
    33b0:	00861b00 	addeq	r1, r6, r0, lsl #22
    33b4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    33b8:	00086c04 	andeq	r6, r8, r4, lsl #24
    33bc:	00861a00 	addeq	r1, r6, r0, lsl #20
    33c0:	08a40000 	stmiaeq	r4!, {}	; <UNPREDICTABLE>
    33c4:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    33c8:	1b000006 	blne	33e8 <__core1_unwind_stub-0xffcc18>
    33cc:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    33d0:	90040e00 	andls	r0, r4, r0, lsl #28
    33d4:	11000008 	tstne	r0, r8
    33d8:	00000059 	andeq	r0, r0, r9, asr r0
    33dc:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    33e0:	00008d12 	andeq	r8, r0, r2, lsl sp
    33e4:	11000200 	mrsne	r0, R8_usr
    33e8:	00000059 	andeq	r0, r0, r9, asr r0
    33ec:	000008ca 	andeq	r0, r0, sl, asr #17
    33f0:	00008d12 	andeq	r8, r0, r2, lsl sp
    33f4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    33f8:	0000038c 	andeq	r0, r0, ip, lsl #7
    33fc:	1a012408 	bne	4c424 <__core1_unwind_stub-0xfb3bdc>
    3400:	00000587 	andeq	r0, r0, r7, lsl #11
    3404:	000c890a 	andeq	r8, ip, sl, lsl #18
    3408:	28080c00 	stmdacs	r8, {sl, fp}
    340c:	09100801 	ldmdbeq	r0, {r0, fp}
    3410:	980c0000 	stmdals	ip, {}	; <UNPREDICTABLE>
    3414:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    3418:	1011012a 	andsne	r0, r1, sl, lsr #2
    341c:	00000009 	andeq	r0, r0, r9
    3420:	000b320c 	andeq	r3, fp, ip, lsl #4
    3424:	012b0800 			; <UNDEFINED> instruction: 0x012b0800
    3428:	00008607 	andeq	r8, r0, r7, lsl #12
    342c:	1f0c0400 	svcne	0x000c0400
    3430:	08000006 	stmdaeq	r0, {r1, r2}
    3434:	160b012c 	strne	r0, [fp], -ip, lsr #2
    3438:	08000009 	stmdaeq	r0, {r0, r3}
    343c:	d7040e00 	strle	r0, [r4, -r0, lsl #28]
    3440:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    3444:	0008ca04 	andeq	ip, r8, r4, lsl #20
    3448:	03370a00 	teqeq	r7, #0, 20
    344c:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    3450:	55080144 	strpl	r0, [r8, #-324]	; 0xfffffebc
    3454:	0c000009 	stceq	0, cr0, [r0], {9}
    3458:	00000e8d 	andeq	r0, r0, sp, lsl #29
    345c:	12014508 	andne	r4, r1, #8, 10	; 0x2000000
    3460:	00000955 	andeq	r0, r0, r5, asr r9
    3464:	06fa0c00 	ldrbteq	r0, [sl], r0, lsl #24
    3468:	46080000 	strmi	r0, [r8], -r0
    346c:	09551201 	ldmdbeq	r5, {r0, r9, ip}^
    3470:	0c060000 	stceq	0, cr0, [r6], {-0}
    3474:	00000c4c 	andeq	r0, r0, ip, asr #24
    3478:	12014708 	andne	r4, r1, #8, 14	; 0x200000
    347c:	00000060 	andeq	r0, r0, r0, rrx
    3480:	6011000c 	andsvs	r0, r1, ip
    3484:	65000000 	strvs	r0, [r0, #-0]
    3488:	12000009 	andne	r0, r0, #9
    348c:	0000008d 	andeq	r0, r0, sp, lsl #1
    3490:	d01e0002 	andsle	r0, lr, r2
    3494:	07028508 	streq	r8, [r2, -r8, lsl #10]
    3498:	00000a7a 	andeq	r0, r0, sl, ror sl
    349c:	000dec0c 	andeq	lr, sp, ip, lsl #24
    34a0:	02870800 	addeq	r0, r7, #0, 16
    34a4:	00008d18 	andeq	r8, r0, r8, lsl sp
    34a8:	ba0c0000 	blt	3034b0 <__core1_unwind_stub-0xcfcb50>
    34ac:	0800000c 	stmdaeq	r0, {r2, r3}
    34b0:	3c120288 	lfmcc	f0, 4, [r2], {136}	; 0x88
    34b4:	04000008 	streq	r0, [r0], #-8
    34b8:	0003600c 	andeq	r6, r3, ip
    34bc:	02890800 	addeq	r0, r9, #0, 16
    34c0:	000a7a10 	andeq	r7, sl, r0, lsl sl
    34c4:	460c0800 	strmi	r0, [ip], -r0, lsl #16
    34c8:	0800000a 	stmdaeq	r0, {r1, r3}
    34cc:	2117028a 	tstcs	r7, sl, lsl #5
    34d0:	24000004 	strcs	r0, [r0], #-4
    34d4:	0006aa0c 	andeq	sl, r6, ip, lsl #20
    34d8:	028b0800 	addeq	r0, fp, #0, 16
    34dc:	0000860f 	andeq	r8, r0, pc, lsl #12
    34e0:	930c4800 	movwls	r4, #51200	; 0xc800
    34e4:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    34e8:	7f2c028c 	svcvc	0x002c028c
    34ec:	50000000 	andpl	r0, r0, r0
    34f0:	0000b70c 	andeq	fp, r0, ip, lsl #14
    34f4:	028d0800 	addeq	r0, sp, #0, 16
    34f8:	00091c1a 	andeq	r1, r9, sl, lsl ip
    34fc:	8f0c5800 	svchi	0x000c5800
    3500:	08000005 	stmdaeq	r0, {r0, r2}
    3504:	8116028e 	tsthi	r6, lr, lsl #5
    3508:	68000003 	stmdavs	r0, {r0, r1}
    350c:	000cc70c 	andeq	ip, ip, ip, lsl #14
    3510:	028f0800 	addeq	r0, pc, #0, 16
    3514:	00038116 	andeq	r8, r3, r6, lsl r1
    3518:	950c7000 	strls	r7, [ip, #-0]
    351c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3520:	81160290 			; <UNDEFINED> instruction: 0x81160290
    3524:	78000003 	stmdavc	r0, {r0, r1}
    3528:	000a770c 	andeq	r7, sl, ip, lsl #14
    352c:	02910800 	addseq	r0, r1, #0, 16
    3530:	000a8a10 	andeq	r8, sl, r0, lsl sl
    3534:	ca0c8000 	bgt	32353c <__core1_unwind_stub-0xcdcac4>
    3538:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    353c:	9a100292 	bls	403f8c <__core1_unwind_stub-0xbfc074>
    3540:	8800000a 	stmdahi	r0, {r1, r3}
    3544:	000c130c 	andeq	r1, ip, ip, lsl #6
    3548:	02930800 	addseq	r0, r3, #0, 16
    354c:	0000860f 	andeq	r8, r0, pc, lsl #12
    3550:	f10ca000 			; <UNDEFINED> instruction: 0xf10ca000
    3554:	08000001 	stmdaeq	r0, {r0}
    3558:	81160294 			; <UNDEFINED> instruction: 0x81160294
    355c:	a4000003 	strge	r0, [r0], #-3
    3560:	0005c70c 	andeq	ip, r5, ip, lsl #14
    3564:	02950800 	addseq	r0, r5, #0, 16
    3568:	00038116 	andeq	r8, r3, r6, lsl r1
    356c:	b50cac00 	strlt	sl, [ip, #-3072]	; 0xfffff400
    3570:	08000004 	stmdaeq	r0, {r2}
    3574:	81160296 			; <UNDEFINED> instruction: 0x81160296
    3578:	b4000003 	strlt	r0, [r0], #-3
    357c:	0007080c 	andeq	r0, r7, ip, lsl #16
    3580:	02970800 	addseq	r0, r7, #0, 16
    3584:	00038116 	andeq	r8, r3, r6, lsl r1
    3588:	7e0cbc00 	cdpvc	12, 0, cr11, cr12, cr0, {0}
    358c:	08000005 	stmdaeq	r0, {r0, r2}
    3590:	81160298 			; <UNDEFINED> instruction: 0x81160298
    3594:	c4000003 	strgt	r0, [r0], #-3
    3598:	0007d60c 	andeq	sp, r7, ip, lsl #12
    359c:	02990800 	addseq	r0, r9, #0, 16
    35a0:	00008608 	andeq	r8, r0, r8, lsl #12
    35a4:	1100cc00 	tstne	r0, r0, lsl #24
    35a8:	000002cf 	andeq	r0, r0, pc, asr #5
    35ac:	00000a8a 	andeq	r0, r0, sl, lsl #21
    35b0:	00008d12 	andeq	r8, r0, r2, lsl sp
    35b4:	11001900 	tstne	r0, r0, lsl #18
    35b8:	000002cf 	andeq	r0, r0, pc, asr #5
    35bc:	00000a9a 	muleq	r0, sl, sl
    35c0:	00008d12 	andeq	r8, r0, r2, lsl sp
    35c4:	11000700 	tstne	r0, r0, lsl #14
    35c8:	000002cf 	andeq	r0, r0, pc, asr #5
    35cc:	00000aaa 	andeq	r0, r0, sl, lsr #21
    35d0:	00008d12 	andeq	r8, r0, r2, lsl sp
    35d4:	1e001700 	cdpne	7, 0, cr1, cr0, cr0, {0}
    35d8:	029e08f0 	addseq	r0, lr, #240, 16	; 0xf00000
    35dc:	000ad107 	andeq	sp, sl, r7, lsl #2
    35e0:	031c0c00 	tsteq	ip, #0, 24
    35e4:	a1080000 	mrsge	r0, (UNDEF: 8)
    35e8:	0ad11b02 	beq	ff44a1f8 <__shm_end__+0xbf44a1f8>
    35ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    35f0:	00000edd 	ldrdeq	r0, [r0], -sp
    35f4:	1802a208 	stmdane	r2, {r3, r9, sp, pc}
    35f8:	00000ae1 	andeq	r0, r0, r1, ror #21
    35fc:	81110078 	tsthi	r1, r8, ror r0
    3600:	e1000005 	tst	r0, r5
    3604:	1200000a 	andne	r0, r0, #10
    3608:	0000008d 	andeq	r0, r0, sp, lsl #1
    360c:	8d11001d 	ldchi	0, cr0, [r1, #-116]	; 0xffffff8c
    3610:	f1000000 	cps	#0
    3614:	1200000a 	andne	r0, r0, #10
    3618:	0000008d 	andeq	r0, r0, sp, lsl #1
    361c:	f01f001d 			; <UNDEFINED> instruction: 0xf01f001d
    3620:	03028308 	movweq	r8, #8968	; 0x2308
    3624:	00000b16 	andeq	r0, r0, r6, lsl fp
    3628:	000d0020 	andeq	r0, sp, r0, lsr #32
    362c:	029a0800 	addseq	r0, sl, #0, 16
    3630:	0009650b 	andeq	r6, r9, fp, lsl #10
    3634:	0a552000 	beq	154b63c <__bss_end__+0x53763c>
    3638:	a3080000 	movwge	r0, #32768	; 0x8000
    363c:	0aaa0b02 	beq	fea8624c <__shm_end__+0xbea8624c>
    3640:	11000000 	mrsne	r0, (UNDEF: 0)
    3644:	000002cf 	andeq	r0, r0, pc, asr #5
    3648:	00000b26 	andeq	r0, r0, r6, lsr #22
    364c:	00008d12 	andeq	r8, r0, r2, lsl sp
    3650:	21001800 	tstcs	r0, r0, lsl #16
    3654:	00000e9e 	muleq	r0, lr, lr
    3658:	0b26040e 	bleq	984698 <__core1_unwind_stub-0x67b968>
    365c:	3c220000 	stccc	0, cr0, [r2], #-0
    3660:	1b00000b 	blne	3694 <__core1_unwind_stub-0xffc96c>
    3664:	000006e8 	andeq	r0, r0, r8, ror #13
    3668:	31040e00 	tstcc	r4, r0, lsl #28
    366c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    3670:	00040b04 	andeq	r0, r4, r4, lsl #22
    3674:	0b532200 	bleq	14cbe7c <__bss_end__+0x4b7e7c>
    3678:	861b0000 	ldrhi	r0, [fp], -r0
    367c:	00000000 	andeq	r0, r0, r0
    3680:	0b59040e 	bleq	16446c0 <__bss_end__+0x6306c0>
    3684:	040e0000 	streq	r0, [lr], #-0
    3688:	00000b48 	andeq	r0, r0, r8, asr #22
    368c:	0008ca11 	andeq	ip, r8, r1, lsl sl
    3690:	000b6f00 	andeq	r6, fp, r0, lsl #30
    3694:	008d1200 	addeq	r1, sp, r0, lsl #4
    3698:	00020000 	andeq	r0, r2, r0
    369c:	000a0923 	andeq	r0, sl, r3, lsr #18
    36a0:	03330800 	teqeq	r3, #0, 16
    36a4:	0006e817 	andeq	lr, r6, r7, lsl r8
    36a8:	0a022300 	beq	8c2b0 <__core1_unwind_stub-0xf73d50>
    36ac:	34080000 	strcc	r0, [r8], #-0
    36b0:	06ee1d03 	strbteq	r1, [lr], r3, lsl #26
    36b4:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
    36b8:	0a000003 	beq	36cc <__core1_unwind_stub-0xffc934>
    36bc:	08ca1042 	stmiaeq	sl, {r1, r6, ip}^
    36c0:	040e0000 	streq	r0, [lr], #-0
    36c4:	00000b89 	andeq	r0, r0, r9, lsl #23
    36c8:	00015f24 	andeq	r5, r1, r4, lsr #30
    36cc:	0e360b00 	vaddeq.f64	d0, d6, d0
    36d0:	00000b95 	muleq	r0, r5, fp
    36d4:	00016524 	andeq	r6, r1, r4, lsr #10
    36d8:	0e370b00 	vaddeq.f64	d0, d7, d0
    36dc:	00000b95 	muleq	r0, r5, fp
    36e0:	00006711 	andeq	r6, r0, r1, lsl r7
    36e4:	000bc400 	andeq	ip, fp, r0, lsl #8
    36e8:	008d2500 	addeq	r2, sp, r0, lsl #10
    36ec:	3fff0000 	svccc	0x00ff0000
    36f0:	12372600 	eorsne	r2, r7, #0, 12
    36f4:	40010000 	andmi	r0, r1, r0
    36f8:	000bb311 	andeq	fp, fp, r1, lsl r3
    36fc:	05400000 	strbeq	r0, [r0, #-0]
    3700:	00000003 	andeq	r0, r0, r3
    3704:	010c1300 	mrseq	r1, LR_mon
    3708:	0c090944 			; <UNDEFINED> instruction: 0x0c090944
    370c:	eb140000 	bl	503714 <__core1_unwind_stub-0xafc8ec>
    3710:	01000006 	tsteq	r0, r6
    3714:	0c090e45 	stceq	14, cr0, [r9], {69}	; 0x45
    3718:	14000000 	strne	r0, [r0], #-0
    371c:	00000dda 	ldrdeq	r0, [r0], -sl
    3720:	a50e4601 	strge	r4, [lr, #-1537]	; 0xfffff9ff
    3724:	04000000 	streq	r0, [r0], #-0
    3728:	66666f16 	uqadd16vs	r6, r6, r6
    372c:	0e470100 	dvfeqs	f0, f7, f0
    3730:	000000a5 	andeq	r0, r0, r5, lsr #1
    3734:	040e0008 	streq	r0, [lr], #-8
    3738:	0000004d 	andeq	r0, r0, sp, asr #32
    373c:	00118003 	andseq	r8, r1, r3
    3740:	03480100 	movteq	r0, #33024	; 0x8100
    3744:	00000bd8 	ldrdeq	r0, [r0], -r8
    3748:	00004d11 	andeq	r4, r0, r1, lsl sp
    374c:	000c2c00 	andeq	r2, ip, r0, lsl #24
    3750:	008d2500 	addeq	r2, sp, r0, lsl #10
    3754:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
    3758:	113d2600 	teqne	sp, r0, lsl #12
    375c:	4a010000 	bmi	43764 <__core1_unwind_stub-0xfbc89c>
    3760:	000c1b12 	andeq	r1, ip, r2, lsl fp
    3764:	05400000 	strbeq	r0, [r0, #-0]
    3768:	00400003 	subeq	r0, r0, r3
    376c:	14352701 	ldrtne	r2, [r5], #-1793	; 0xfffff8ff
    3770:	4b010000 	blmi	43778 <__core1_unwind_stub-0xfbc888>
    3774:	000c0f13 	andeq	r0, ip, r3, lsl pc
    3778:	10030500 	andne	r0, r3, r0, lsl #10
    377c:	28010026 	stmdacs	r1, {r1, r2, r5}
    3780:	00001425 	andeq	r1, r0, r5, lsr #8
    3784:	14014d01 	strne	r4, [r1], #-3329	; 0xfffff2ff
    3788:	00000c65 	andeq	r0, r0, r5, ror #24
    378c:	00000305 	andeq	r0, r0, r5, lsl #6
    3790:	040e0000 	streq	r0, [lr], #-0
    3794:	00000073 	andeq	r0, r0, r3, ror r0
    3798:	00115528 	andseq	r5, r1, r8, lsr #10
    379c:	014e0100 	mrseq	r0, (UNDEF: 94)
    37a0:	000c6514 	andeq	r6, ip, r4, lsl r5
    37a4:	00030500 	andeq	r0, r3, r0, lsl #10
    37a8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    37ac:	00001103 	andeq	r1, r0, r3, lsl #2
    37b0:	14014f01 	strne	r4, [r1], #-3841	; 0xfffff0ff
    37b4:	00000c65 	andeq	r0, r0, r5, ror #24
    37b8:	00000305 	andeq	r0, r0, r5, lsl #6
    37bc:	67280000 	strvs	r0, [r8, -r0]!
    37c0:	01000012 	tsteq	r0, r2, lsl r0
    37c4:	65140150 	ldrvs	r0, [r4, #-336]	; 0xfffffeb0
    37c8:	0500000c 	streq	r0, [r0, #-12]
    37cc:	00000003 	andeq	r0, r0, r3
    37d0:	12542800 	subsne	r2, r4, #0, 16
    37d4:	51010000 	mrspl	r0, (UNDEF: 1)
    37d8:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    37dc:	03050000 	movweq	r0, #20480	; 0x5000
    37e0:	00000000 	andeq	r0, r0, r0
    37e4:	00148628 	andseq	r8, r4, r8, lsr #12
    37e8:	01520100 	cmpeq	r2, r0, lsl #2
    37ec:	000c6514 	andeq	r6, ip, r4, lsl r5
    37f0:	00030500 	andeq	r0, r3, r0, lsl #10
    37f4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    37f8:	000012cf 	andeq	r1, r0, pc, asr #5
    37fc:	14015301 	strne	r5, [r1], #-769	; 0xfffffcff
    3800:	00000c65 	andeq	r0, r0, r5, ror #24
    3804:	00000305 	andeq	r0, r0, r5, lsl #6
    3808:	67280000 	strvs	r0, [r8, -r0]!
    380c:	01000013 	tsteq	r0, r3, lsl r0
    3810:	65140154 	ldrvs	r0, [r4, #-340]	; 0xfffffeac
    3814:	0500000c 	streq	r0, [r0, #-12]
    3818:	00000003 	andeq	r0, r0, r3
    381c:	12f32800 	rscsne	r2, r3, #0, 16
    3820:	55010000 	strpl	r0, [r1, #-0]
    3824:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    3828:	03050000 	movweq	r0, #20480	; 0x5000
    382c:	00000000 	andeq	r0, r0, r0
    3830:	00120728 	andseq	r0, r2, r8, lsr #14
    3834:	01560100 	cmpeq	r6, r0, lsl #2
    3838:	000c6514 	andeq	r6, ip, r4, lsl r5
    383c:	00030500 	andeq	r0, r3, r0, lsl #10
    3840:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3844:	0000118b 	andeq	r1, r0, fp, lsl #3
    3848:	14015701 	strne	r5, [r1], #-1793	; 0xfffff8ff
    384c:	00000c65 	andeq	r0, r0, r5, ror #24
    3850:	00000305 	andeq	r0, r0, r5, lsl #6
    3854:	6d280000 	stcvs	0, cr0, [r8, #-0]
    3858:	01000014 	tsteq	r0, r4, lsl r0
    385c:	65140158 	ldrvs	r0, [r4, #-344]	; 0xfffffea8
    3860:	0500000c 	streq	r0, [r0, #-12]
    3864:	00000003 	andeq	r0, r0, r3
    3868:	14052800 	strne	r2, [r5], #-2048	; 0xfffff800
    386c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    3870:	0c651401 	cfstrdeq	mvd1, [r5], #-4
    3874:	03050000 	movweq	r0, #20480	; 0x5000
    3878:	00000000 	andeq	r0, r0, r0
    387c:	0012ae28 	andseq	sl, r2, r8, lsr #28
    3880:	015a0100 	cmpeq	sl, r0, lsl #2
    3884:	000c6514 	andeq	r6, ip, r4, lsl r5
    3888:	00030500 	andeq	r0, r3, r0, lsl #10
    388c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3890:	000013f3 	strdeq	r1, [r0], -r3
    3894:	14015b01 	strne	r5, [r1], #-2817	; 0xfffff4ff
    3898:	00000c65 	andeq	r0, r0, r5, ror #24
    389c:	00000305 	andeq	r0, r0, r5, lsl #6
    38a0:	1c290000 	stcne	0, cr0, [r9], #-0
    38a4:	01000013 	tsteq	r0, r3, lsl r0
    38a8:	880d015d 	stmdahi	sp, {r0, r2, r3, r4, r6, r8}
    38ac:	0500000d 	streq	r0, [r0, #-13]
    38b0:	00000003 	andeq	r0, r0, r3
    38b4:	02010200 	andeq	r0, r1, #0, 4
    38b8:	000008cb 	andeq	r0, r0, fp, asr #17
    38bc:	0011122a 	andseq	r1, r1, sl, lsr #4
    38c0:	01930100 	orrseq	r0, r3, r0, lsl #2
    38c4:	0000bd11 	andeq	fp, r0, r1, lsl sp
    38c8:	00000000 	andeq	r0, r0, r0
    38cc:	0000ac00 	andeq	sl, r0, r0, lsl #24
    38d0:	2b9c0100 	blcs	fe703cd8 <__shm_end__+0xbe703cd8>
    38d4:	00001393 	muleq	r0, r3, r3
    38d8:	11017601 	tstne	r1, r1, lsl #12
    38dc:	000000bd 	strheq	r0, [r0], -sp
    38e0:	00000000 	andeq	r0, r0, r0
    38e4:	00000188 	andeq	r0, r0, r8, lsl #3
    38e8:	0dd09c01 	ldcleq	12, cr9, [r0, #4]
    38ec:	732c0000 			; <UNDEFINED> instruction: 0x732c0000
    38f0:	01780100 	cmneq	r8, r0, lsl #2
    38f4:	0000bd15 	andeq	fp, r0, r5, lsl sp
    38f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    38fc:	11ee2b00 	mvnne	r2, r0, lsl #22
    3900:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    3904:	00bd1101 	adcseq	r1, sp, r1, lsl #2
    3908:	00000000 	andeq	r0, r0, r0
    390c:	006c0000 	rsbeq	r0, ip, r0
    3910:	9c010000 	stcls	0, cr0, [r1], {-0}
    3914:	00000dfa 	strdeq	r0, [r0], -sl
    3918:	0100732c 	tsteq	r0, ip, lsr #6
    391c:	bd15016b 	ldflts	f0, [r5, #-428]	; 0xfffffe54
    3920:	02000000 	andeq	r0, r0, #0
    3924:	2a007491 	bcs	20b70 <__core1_unwind_stub-0xfdf490>
    3928:	00001219 	andeq	r1, r0, r9, lsl r2
    392c:	11015f01 	tstne	r1, r1, lsl #30
    3930:	000000bd 	strheq	r0, [r0], -sp
    3934:	00000000 	andeq	r0, r0, r0
    3938:	00000088 	andeq	r0, r0, r8, lsl #1
    393c:	dc2d9c01 	stcle	12, cr9, [sp], #-4
    3940:	01000011 	tsteq	r0, r1, lsl r0
    3944:	8806013f 	stmdahi	r6, {r0, r1, r2, r3, r4, r5, r8}
    3948:	0000000d 	andeq	r0, r0, sp
    394c:	44000000 	strmi	r0, [r0], #-0
    3950:	01000000 	mrseq	r0, (UNDEF: 0)
    3954:	000e3d9c 	muleq	lr, ip, sp
    3958:	114c2900 	cmpne	ip, r0, lsl #18
    395c:	42010000 	andmi	r0, r1, #0
    3960:	0c651801 	stcleq	8, cr1, [r5], #-4
    3964:	91020000 	mrsls	r0, (UNDEF: 2)
    3968:	ac2e0074 	stcge	0, cr0, [lr], #-464	; 0xfffffe30
    396c:	01000011 	tsteq	r0, r1, lsl r0
    3970:	00060137 	andeq	r0, r6, r7, lsr r1
    3974:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3978:	01000000 	mrseq	r0, (UNDEF: 0)
    397c:	000e639c 	muleq	lr, ip, r3
    3980:	00732c00 	rsbseq	r2, r3, r0, lsl #24
    3984:	0e013901 	vmlaeq.f16	s6, s2, s2	; <UNPREDICTABLE>
    3988:	00000067 	andeq	r0, r0, r7, rrx
    398c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3990:	0012882e 	andseq	r8, r2, lr, lsr #16
    3994:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    3998:	00000006 	andeq	r0, r0, r6
    399c:	0000ec00 	andeq	lr, r0, r0, lsl #24
    39a0:	c99c0100 	ldmibgt	ip, {r8}
    39a4:	2f00000e 	svccs	0x0000000e
    39a8:	00001136 	andeq	r1, r0, r6, lsr r1
    39ac:	21012e01 	tstcs	r1, r1, lsl #28
    39b0:	00000ec9 	andeq	r0, r0, r9, asr #29
    39b4:	2f6c9102 	svccs	0x006c9102
    39b8:	000011fd 	strdeq	r1, [r0], -sp
    39bc:	2f012e01 	svccs	0x00012e01
    39c0:	00000ec9 	andeq	r0, r0, r9, asr #29
    39c4:	2f689102 	svccs	0x00689102
    39c8:	00001456 	andeq	r1, r0, r6, asr r4
    39cc:	40012e01 	andmi	r2, r1, r1, lsl #28
    39d0:	00000ec9 	andeq	r0, r0, r9, asr #29
    39d4:	2f649102 	svccs	0x00649102
    39d8:	000012e8 	andeq	r1, r0, r8, ror #5
    39dc:	51012e01 	tstpl	r1, r1, lsl #28
    39e0:	00000ec9 	andeq	r0, r0, r9, asr #29
    39e4:	2c609102 	stfcsp	f1, [r0], #-8
    39e8:	30010073 	andcc	r0, r1, r3, ror r0
    39ec:	00670e01 	rsbeq	r0, r7, r1, lsl #28
    39f0:	91020000 	mrsls	r0, (UNDEF: 2)
    39f4:	040e0074 	streq	r0, [lr], #-116	; 0xffffff8c
    39f8:	00000d88 	andeq	r0, r0, r8, lsl #27
    39fc:	0012c030 	andseq	ip, r2, r0, lsr r0
    3a00:	01270100 			; <UNDEFINED> instruction: 0x01270100
    3a04:	00006718 	andeq	r6, r0, r8, lsl r7
    3a08:	00000000 	andeq	r0, r0, r0
    3a0c:	00002800 	andeq	r2, r0, r0, lsl #16
    3a10:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    3a14:	2c00000e 	stccs	0, cr0, [r0], {14}
    3a18:	29010073 	stmdbcs	r1, {r0, r1, r4, r5, r6}
    3a1c:	00670e01 	rsbeq	r0, r7, r1, lsl #28
    3a20:	91020000 	mrsls	r0, (UNDEF: 2)
    3a24:	402b0074 	eormi	r0, fp, r4, ror r0
    3a28:	01000014 	tsteq	r0, r4, lsl r0
    3a2c:	bd110109 	ldflts	f0, [r1, #-36]	; 0xffffffdc
    3a30:	00000000 	andeq	r0, r0, r0
    3a34:	84000000 	strhi	r0, [r0], #-0
    3a38:	01000000 	mrseq	r0, (UNDEF: 0)
    3a3c:	000f5d9c 	muleq	pc, ip, sp	; <UNPREDICTABLE>
    3a40:	01012f00 	tsteq	r1, r0, lsl #30
    3a44:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    3a48:	0d882c01 	stceq	12, cr2, [r8, #4]
    3a4c:	91020000 	mrsls	r0, (UNDEF: 2)
    3a50:	0000316f 	andeq	r3, r0, pc, ror #2
    3a54:	00280000 	eoreq	r0, r8, r0
    3a58:	0f420000 	svceq	0x00420000
    3a5c:	ee290000 	cdp	0, 2, cr0, cr9, cr0, {0}
    3a60:	01000012 	tsteq	r0, r2, lsl r0
    3a64:	67120110 			; <UNDEFINED> instruction: 0x67120110
    3a68:	02000000 	andeq	r0, r0, #0
    3a6c:	32007091 	andcc	r7, r0, #145	; 0x91
    3a70:	00000000 	andeq	r0, r0, r0
    3a74:	00000028 	andeq	r0, r0, r8, lsr #32
    3a78:	0012ee29 	andseq	lr, r2, r9, lsr #28
    3a7c:	011a0100 	tsteq	sl, r0, lsl #2
    3a80:	00006712 	andeq	r6, r0, r2, lsl r7
    3a84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3a88:	c0330000 	eorsgt	r0, r3, r0
    3a8c:	01000013 	tsteq	r0, r3, lsl r0
    3a90:	000014f7 	strdeq	r1, [r0], -r7
    3a94:	00900000 	addseq	r0, r0, r0
    3a98:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a9c:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    3aa0:	00010134 	andeq	r0, r1, r4, lsr r1
    3aa4:	2cf70100 	ldfcse	f0, [r7]
    3aa8:	00000d88 	andeq	r0, r0, r8, lsl #27
    3aac:	276f9102 	strbcs	r9, [pc, -r2, lsl #2]!
    3ab0:	000012c9 	andeq	r1, r0, r9, asr #5
    3ab4:	670ef901 	strvs	pc, [lr, -r1, lsl #18]
    3ab8:	02000000 	andeq	r0, r0, #0
    3abc:	35007491 	strcc	r7, [r0, #-1169]	; 0xfffffb6f
    3ac0:	000013d3 	ldrdeq	r1, [r0], -r3
    3ac4:	0006da01 	andeq	sp, r6, r1, lsl #20
    3ac8:	dc000000 	stcle	0, cr0, [r0], {-0}
    3acc:	01000000 	mrseq	r0, (UNDEF: 0)
    3ad0:	0010269c 	mulseq	r0, ip, r6
    3ad4:	135b2700 	cmpne	fp, #0, 14
    3ad8:	dc010000 	stcle	0, cr0, [r1], {-0}
    3adc:	0000670e 	andeq	r6, r0, lr, lsl #14
    3ae0:	68910200 	ldmvs	r1, {r9}
    3ae4:	00133f27 	andseq	r3, r3, r7, lsr #30
    3ae8:	16dc0100 	ldrbne	r0, [ip], r0, lsl #2
    3aec:	00000067 	andeq	r0, r0, r7, rrx
    3af0:	27609102 	strbcs	r9, [r0, -r2, lsl #2]!
    3af4:	00001362 	andeq	r1, r0, r2, ror #6
    3af8:	671cdc01 	ldrvs	sp, [ip, -r1, lsl #24]
    3afc:	02000000 	andeq	r0, r0, #0
    3b00:	73365c91 	teqvc	r6, #37120	; 0x9100
    3b04:	01007465 	tsteq	r0, r5, ror #8
    3b08:	006722dc 	ldrdeq	r2, [r7], #-44	; 0xffffffd4	; <UNPREDICTABLE>
    3b0c:	91020000 	mrsls	r0, (UNDEF: 2)
    3b10:	61773674 	cmnvs	r7, r4, ror r6
    3b14:	dc010079 	stcle	0, cr0, [r1], {121}	; 0x79
    3b18:	00006727 	andeq	r6, r0, r7, lsr #14
    3b1c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3b20:	00117527 	andseq	r7, r1, r7, lsr #10
    3b24:	2cdc0100 	ldfcse	f0, [ip], {0}
    3b28:	00000067 	andeq	r0, r0, r7, rrx
    3b2c:	27649102 	strbcs	r9, [r4, -r2, lsl #2]!
    3b30:	0000147f 	andeq	r1, r0, pc, ror r4
    3b34:	670edf01 	strvs	sp, [lr, -r1, lsl #30]
    3b38:	02000000 	andeq	r0, r0, #0
    3b3c:	78376c91 	ldmdavc	r7!, {r0, r4, r7, sl, fp, sp, lr}
    3b40:	36000001 	strcc	r0, [r0], -r1
    3b44:	01007773 	tsteq	r0, r3, ror r7
    3b48:	006716ed 	rsbeq	r1, r7, sp, ror #13
    3b4c:	91020000 	mrsls	r0, (UNDEF: 2)
    3b50:	35000058 	strcc	r0, [r0, #-88]	; 0xffffffa8
    3b54:	000011c2 	andeq	r1, r0, r2, asr #3
    3b58:	0006d201 	andeq	sp, r6, r1, lsl #4
    3b5c:	30000000 	andcc	r0, r0, r0
    3b60:	01000000 	mrseq	r0, (UNDEF: 0)
    3b64:	00104c9c 	mulseq	r0, ip, ip
    3b68:	12ee2700 	rscne	r2, lr, #0, 14
    3b6c:	d4010000 	strle	r0, [r1], #-0
    3b70:	0000670e 	andeq	r6, r0, lr, lsl #14
    3b74:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3b78:	132b3800 			; <UNDEFINED> instruction: 0x132b3800
    3b7c:	c2010000 	andgt	r0, r1, #0
    3b80:	0000bd11 	andeq	fp, r0, r1, lsl sp
    3b84:	00213800 	eoreq	r3, r1, r0, lsl #16
    3b88:	00003c01 	andeq	r3, r0, r1, lsl #24
    3b8c:	839c0100 	orrshi	r0, ip, #0, 2
    3b90:	36000010 			; <UNDEFINED> instruction: 0x36000010
    3b94:	00627474 	rsbeq	r7, r2, r4, ror r4
    3b98:	830fc701 	movwhi	ip, #63233	; 0xf701
    3b9c:	02000010 	andeq	r0, r0, #16
    3ba0:	73367091 	teqvc	r6, #145	; 0x91
    3ba4:	09c80100 	stmibeq	r8, {r8}^
    3ba8:	00000086 	andeq	r0, r0, r6, lsl #1
    3bac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3bb0:	0067040e 	rsbeq	r0, r7, lr, lsl #8
    3bb4:	ac390000 	ldcge	0, cr0, [r9], #-0
    3bb8:	01000013 	tsteq	r0, r3, lsl r0
    3bbc:	00bd11ab 	adcseq	r1, sp, fp, lsr #3
    3bc0:	00000000 	andeq	r0, r0, r0
    3bc4:	005c0000 	subseq	r0, ip, r0
    3bc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bcc:	000010bf 	strheq	r1, [r0], -pc	; <UNPREDICTABLE>
    3bd0:	000f3c24 	andeq	r3, pc, r4, lsr #24
    3bd4:	0ead0100 	fdveqe	f0, f5, f0
    3bd8:	000002cf 	andeq	r0, r0, pc, asr #5
    3bdc:	0012c927 	andseq	ip, r2, r7, lsr #18
    3be0:	0fb70100 	svceq	0x00b70100
    3be4:	00000067 	andeq	r0, r0, r7, rrx
    3be8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3bec:	0013793a 	andseq	r7, r3, sl, lsr r9
    3bf0:	18600100 	stmdane	r0!, {r8}^
    3bf4:	000000bd 	strheq	r0, [r0], -sp
    3bf8:	01002020 	tsteq	r0, r0, lsr #32
    3bfc:	00000118 	andeq	r0, r0, r8, lsl r1
    3c00:	11359c01 	teqne	r5, r1, lsl #24
    3c04:	1d340000 	ldcne	0, cr0, [r4, #-0]
    3c08:	01000014 	tsteq	r0, r4, lsl r0
    3c0c:	11353d60 	teqne	r5, r0, ror #26
    3c10:	91030000 	mrsls	r0, (UNDEF: 3)
    3c14:	73367f94 	teqvc	r6, #148, 30	; 0x250
    3c18:	15620100 	strbne	r0, [r2, #-256]!	; 0xffffff00
    3c1c:	000000bd 	strheq	r0, [r0], -sp
    3c20:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    3c24:	000002de 	ldrdeq	r0, [r0], -lr
    3c28:	3b1a6701 	blcc	69d834 <__core1_unwind_stub-0x9627cc>
    3c2c:	03000011 	movweq	r0, #17
    3c30:	277f9c91 			; <UNDEFINED> instruction: 0x277f9c91
    3c34:	0000139f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    3c38:	a50c9801 	strge	r9, [ip, #-2049]	; 0xfffff7ff
    3c3c:	02000000 	andeq	r0, r0, #0
    3c40:	18277091 	stmdane	r7!, {r0, r4, r7, ip, sp, lr}
    3c44:	01000014 	tsteq	r0, r4, lsl r0
    3c48:	00a50c99 	umlaleq	r0, r5, r9, ip
    3c4c:	91020000 	mrsls	r0, (UNDEF: 2)
    3c50:	0c72276c 	ldcleq	7, cr2, [r2], #-432	; 0xfffffe50
    3c54:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c58:	0010830f 	andseq	r8, r0, pc, lsl #6
    3c5c:	98910300 	ldmls	r1, {r8, r9}
    3c60:	040e007f 	streq	r0, [lr], #-127	; 0xffffff81
    3c64:	00001083 	andeq	r1, r0, r3, lsl #1
    3c68:	0002bc11 	andeq	fp, r2, r1, lsl ip
    3c6c:	00114b00 	andseq	r4, r1, r0, lsl #22
    3c70:	008d1200 	addeq	r1, sp, r0, lsl #4
    3c74:	00030000 	andeq	r0, r3, r0
    3c78:	00119e3b 	andseq	r9, r1, fp, lsr lr
    3c7c:	0e4e0100 	dvfeqe	f0, f6, f0
    3c80:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    3c84:	01001f50 	tsteq	r0, r0, asr pc
    3c88:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3c8c:	11c09c01 	bicne	r9, r0, r1, lsl #24
    3c90:	da340000 	ble	d03c98 <__core1_unwind_stub-0x2fc368>
    3c94:	0100000d 	tsteq	r0, sp
    3c98:	00942f4e 	addseq	r2, r4, lr, asr #30
    3c9c:	91020000 	mrsls	r0, (UNDEF: 2)
    3ca0:	122e3464 	eorne	r3, lr, #100, 8	; 0x64000000
    3ca4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    3ca8:	0002ba3b 	andeq	fp, r2, fp, lsr sl
    3cac:	60910200 	addsvs	r0, r1, r0, lsl #4
    3cb0:	00143b27 	andseq	r3, r4, r7, lsr #22
    3cb4:	11500100 	cmpne	r0, r0, lsl #2
    3cb8:	000011c0 	andeq	r1, r0, r0, asr #3
    3cbc:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    3cc0:	000007e2 	andeq	r0, r0, r2, ror #15
    3cc4:	b1125401 	tstlt	r2, r1, lsl #8
    3cc8:	02000000 	andeq	r0, r0, #0
    3ccc:	6f367091 	svcvs	0x00367091
    3cd0:	01006666 	tsteq	r0, r6, ror #12
    3cd4:	00a50c55 	adceq	r0, r5, r5, asr ip
    3cd8:	91020000 	mrsls	r0, (UNDEF: 2)
    3cdc:	7470366c 	ldrbtvc	r3, [r0], #-1644	; 0xfffff994
    3ce0:	59010072 	stmdbpl	r1, {r1, r4, r5, r6}
    3ce4:	0002ba0b 	andeq	fp, r2, fp, lsl #20
    3ce8:	68910200 	ldmvs	r1, {r9}
    3cec:	0f040e00 	svceq	0x00040e00
    3cf0:	3500000c 	strcc	r0, [r0, #-12]
    3cf4:	00001344 	andeq	r1, r0, r4, asr #6
    3cf8:	ec063001 	stc	0, cr3, [r6], {1}
    3cfc:	6401001e 	strvs	r0, [r1], #-30	; 0xffffffe2
    3d00:	01000000 	mrseq	r0, (UNDEF: 0)
    3d04:	0011fb9c 	mulseq	r1, ip, fp
    3d08:	12e22700 	rscne	r2, r2, #0, 14
    3d0c:	32010000 	andcc	r0, r1, #0
    3d10:	0000670e 	andeq	r6, r0, lr, lsl #14
    3d14:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3d18:	0010fa27 	andseq	pc, r0, r7, lsr #20
    3d1c:	18380100 	ldmdane	r8!, {r8}
    3d20:	00000c65 	andeq	r0, r0, r5, ror #24
    3d24:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3d28:	00111f3c 	andseq	r1, r1, ip, lsr pc
    3d2c:	141f0100 	ldrne	r0, [pc], #-256	; 3d34 <__core1_unwind_stub-0xffc2cc>
    3d30:	01001e98 			; <UNDEFINED> instruction: 0x01001e98
    3d34:	00000054 	andeq	r0, r0, r4, asr r0
    3d38:	12219c01 	eorne	r9, r1, #256	; 0x100
    3d3c:	c9270000 	stmdbgt	r7!, {}	; <UNPREDICTABLE>
    3d40:	01000012 	tsteq	r0, r2, lsl r0
    3d44:	00670e22 	rsbeq	r0, r7, r2, lsr #28
    3d48:	91020000 	mrsls	r0, (UNDEF: 2)
    3d4c:	693d0074 	ldmdbvs	sp!, {r2, r4, r5, r6}
    3d50:	01006273 	tsteq	r0, r3, ror r2
    3d54:	1e7c141b 	mrcne	4, 3, r1, cr12, cr11, {0}
    3d58:	001c0100 	andseq	r0, ip, r0, lsl #2
    3d5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d60:	6273643d 	rsbsvs	r6, r3, #1023410176	; 0x3d000000
    3d64:	141a0100 	ldrne	r0, [sl], #-256	; 0xffffff00
    3d68:	01001e60 	tsteq	r0, r0, ror #28
    3d6c:	0000001c 	andeq	r0, r0, ip, lsl r0
    3d70:	e5009c01 	str	r9, [r0, #-3073]	; 0xfffff3ff
    3d74:	04000009 	streq	r0, [r0], #-9
    3d78:	000b8300 	andeq	r8, fp, r0, lsl #6
    3d7c:	f5010400 			; <UNDEFINED> instruction: 0xf5010400
    3d80:	0c000020 	stceq	0, cr0, [r0], {32}
    3d84:	000024ac 	andeq	r2, r0, ip, lsr #9
    3d88:	000015d0 	ldrdeq	r1, [r0], -r0
    3d8c:	01002174 	tsteq	r0, r4, ror r1
    3d90:	00000130 	andeq	r0, r0, r0, lsr r1
    3d94:	000017de 	ldrdeq	r1, [r0], -lr
    3d98:	49070802 	stmdbmi	r7, {r1, fp}
    3d9c:	03000003 	movweq	r0, #3
    3da0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3da4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3da8:	00035307 	andeq	r5, r3, r7, lsl #6
    3dac:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    3db0:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    3db4:	55040802 	strpl	r0, [r4, #-2050]	; 0xfffff7fe
    3db8:	04000009 	streq	r0, [r0], #-9
    3dbc:	000017d9 	ldrdeq	r1, [r0], -r9
    3dc0:	33162a02 	tstcc	r6, #8192	; 0x2000
    3dc4:	04000000 	streq	r0, [r0], #-0
    3dc8:	00001bb0 			; <UNDEFINED> instruction: 0x00001bb0
    3dcc:	60152f02 	andsvs	r2, r5, r2, lsl #30
    3dd0:	05000000 	streq	r0, [r0, #-0]
    3dd4:	00006604 	andeq	r6, r0, r4, lsl #12
    3dd8:	00480600 	subeq	r0, r8, r0, lsl #12
    3ddc:	00750000 	rsbseq	r0, r5, r0
    3de0:	75070000 	strvc	r0, [r7, #-0]
    3de4:	00000000 	andeq	r0, r0, r0
    3de8:	007b0405 	rsbseq	r0, fp, r5, lsl #8
    3dec:	04080000 	streq	r0, [r8], #-0
    3df0:	00002391 	muleq	r0, r1, r3
    3df4:	880f3602 	stmdahi	pc, {r1, r9, sl, ip, sp}	; <UNPREDICTABLE>
    3df8:	05000000 	streq	r0, [r0, #-0]
    3dfc:	00008e04 	andeq	r8, r0, r4, lsl #28
    3e00:	002c0600 	eoreq	r0, ip, r0, lsl #12
    3e04:	00a20000 	adceq	r0, r2, r0
    3e08:	75070000 	strvc	r0, [r7, #-0]
    3e0c:	07000000 	streq	r0, [r0, -r0]
    3e10:	00000075 	andeq	r0, r0, r5, ror r0
    3e14:	08010200 	stmdaeq	r1, {r9}
    3e18:	00000bbd 			; <UNDEFINED> instruction: 0x00000bbd
    3e1c:	001dd809 	andseq	sp, sp, r9, lsl #16
    3e20:	12bb0200 	adcsne	r0, fp, #0, 4
    3e24:	00000054 	andeq	r0, r0, r4, asr r0
    3e28:	0023bf09 	eoreq	fp, r3, r9, lsl #30
    3e2c:	10be0200 	adcsne	r0, lr, r0, lsl #4
    3e30:	0000007c 	andeq	r0, r0, ip, ror r0
    3e34:	bf060102 	svclt	0x00060102
    3e38:	0a00000b 	beq	3e6c <__core1_unwind_stub-0xffc194>
    3e3c:	00001ad0 	ldrdeq	r1, [r0], -r0
    3e40:	00a20107 	adceq	r0, r2, r7, lsl #2
    3e44:	17030000 	strne	r0, [r3, -r0]
    3e48:	0001f506 	andeq	pc, r1, r6, lsl #10
    3e4c:	16680b00 	strbtne	r0, [r8], -r0, lsl #22
    3e50:	0b000000 	bleq	3e58 <__core1_unwind_stub-0xffc1a8>
    3e54:	000019cf 	andeq	r1, r0, pc, asr #19
    3e58:	1ea30b01 	vfmane.f64	d0, d3, d1
    3e5c:	0b020000 	bleq	83e64 <__core1_unwind_stub-0xf7c19c>
    3e60:	000022dc 	ldrdeq	r2, [r0], -ip
    3e64:	1e470b03 	vmlane.f64	d16, d7, d3
    3e68:	0b040000 	bleq	103e70 <__core1_unwind_stub-0xefc190>
    3e6c:	000021e5 	andeq	r2, r0, r5, ror #3
    3e70:	20680b05 	rsbcs	r0, r8, r5, lsl #22
    3e74:	0b060000 	bleq	183e7c <__core1_unwind_stub-0xe7c184>
    3e78:	00001cb2 			; <UNDEFINED> instruction: 0x00001cb2
    3e7c:	21fa0b07 	mvnscs	r0, r7, lsl #22
    3e80:	0b080000 	bleq	203e88 <__core1_unwind_stub-0xdfc178>
    3e84:	00002208 	andeq	r2, r0, r8, lsl #4
    3e88:	22cf0b09 	sbccs	r0, pc, #9216	; 0x2400
    3e8c:	0b0a0000 	bleq	283e94 <__core1_unwind_stub-0xd7c16c>
    3e90:	00001d9e 	muleq	r0, lr, sp
    3e94:	181a0b0b 	ldmdane	sl, {r0, r1, r3, r8, r9, fp}
    3e98:	0b0c0000 	bleq	303ea0 <__core1_unwind_stub-0xcfc160>
    3e9c:	0000182e 	andeq	r1, r0, lr, lsr #16
    3ea0:	1b140b0d 	blne	506adc <__core1_unwind_stub-0xaf9524>
    3ea4:	0b0e0000 	bleq	383eac <__core1_unwind_stub-0xc7c154>
    3ea8:	00001b2a 	andeq	r1, r0, sl, lsr #22
    3eac:	1a090b0f 	bne	246af0 <__core1_unwind_stub-0xdb9510>
    3eb0:	0b100000 	bleq	403eb8 <__core1_unwind_stub-0xbfc148>
    3eb4:	00001e2b 	andeq	r1, r0, fp, lsr #28
    3eb8:	1a930b11 	bne	fe4c6b04 <__shm_end__+0xbe4c6b04>
    3ebc:	0b120000 	bleq	483ec4 <__core1_unwind_stub-0xb7c13c>
    3ec0:	00002572 	andeq	r2, r0, r2, ror r5
    3ec4:	16e40b13 	usatne	r0, #4, r3, lsl #22
    3ec8:	0b140000 	bleq	503ed0 <__core1_unwind_stub-0xafc130>
    3ecc:	00001ab7 			; <UNDEFINED> instruction: 0x00001ab7
    3ed0:	16270b15 			; <UNDEFINED> instruction: 0x16270b15
    3ed4:	0b160000 	bleq	583edc <__core1_unwind_stub-0xa7c124>
    3ed8:	000022ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    3edc:	24180b17 	ldrcs	r0, [r8], #-2839	; 0xfffff4e9
    3ee0:	0b180000 	bleq	603ee8 <__core1_unwind_stub-0x9fc118>
    3ee4:	00001adc 	ldrdeq	r1, [r0], -ip
    3ee8:	1f150b19 	svcne	0x00150b19
    3eec:	0b1a0000 	bleq	683ef4 <__core1_unwind_stub-0x97c10c>
    3ef0:	0000230d 	andeq	r2, r0, sp, lsl #6
    3ef4:	14ea0b1b 	strbtne	r0, [sl], #2843	; 0xb1b
    3ef8:	0b1c0000 	bleq	703f00 <__core1_unwind_stub-0x8fc100>
    3efc:	0000231b 	andeq	r2, r0, fp, lsl r3
    3f00:	23290b1d 			; <UNDEFINED> instruction: 0x23290b1d
    3f04:	0b1e0000 	bleq	783f0c <__core1_unwind_stub-0x87c0f4>
    3f08:	00001498 	muleq	r0, r8, r4
    3f0c:	23530b1f 	cmpcs	r3, #31744	; 0x7c00
    3f10:	0b200000 	bleq	803f18 <__core1_unwind_stub-0x7fc0e8>
    3f14:	000018c9 	andeq	r1, r0, r9, asr #17
    3f18:	1dfd0b21 			; <UNDEFINED> instruction: 0x1dfd0b21
    3f1c:	0b220000 	bleq	883f24 <__core1_unwind_stub-0x77c0dc>
    3f20:	000022f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    3f24:	1d1f0b23 	vldrne	d0, [pc, #-140]	; 3ea0 <__core1_unwind_stub-0xffc160>
    3f28:	0b240000 	bleq	903f30 <__core1_unwind_stub-0x6fc0d0>
    3f2c:	00001c13 	andeq	r1, r0, r3, lsl ip
    3f30:	18f20b25 	ldmne	r2!, {r0, r2, r5, r8, r9, fp}^
    3f34:	0b260000 	bleq	983f3c <__core1_unwind_stub-0x67c0c4>
    3f38:	00001c31 	andeq	r1, r0, r1, lsr ip
    3f3c:	19ab0b27 	stmibne	fp!, {r0, r1, r2, r5, r8, r9, fp}
    3f40:	0b280000 	bleq	a03f48 <__core1_unwind_stub-0x5fc0b8>
    3f44:	00001c41 	andeq	r1, r0, r1, asr #24
    3f48:	1c510b29 	mrrcne	11, 2, r0, r1, cr9
    3f4c:	0b2a0000 	bleq	a83f54 <__core1_unwind_stub-0x57c0ac>
    3f50:	00001d84 	andeq	r1, r0, r4, lsl #27
    3f54:	1bba0b2b 	blne	fee86c08 <__shm_end__+0xbee86c08>
    3f58:	0b2c0000 	bleq	b03f60 <__core1_unwind_stub-0x4fc0a0>
    3f5c:	00001fb6 			; <UNDEFINED> instruction: 0x00001fb6
    3f60:	19500b2d 	ldmdbne	r0, {r0, r2, r3, r5, r8, r9, fp}^
    3f64:	002e0000 	eoreq	r0, lr, r0
    3f68:	001b4c0a 	andseq	r4, fp, sl, lsl #24
    3f6c:	a2010700 	andge	r0, r1, #0, 14
    3f70:	04000000 	streq	r0, [r0], #-0
    3f74:	03d60617 	bicseq	r0, r6, #24117248	; 0x1700000
    3f78:	500b0000 	andpl	r0, fp, r0
    3f7c:	00000018 	andeq	r0, r0, r8, lsl r0
    3f80:	00153d0b 	andseq	r3, r5, fp, lsl #26
    3f84:	200b0100 	andcs	r0, fp, r0, lsl #2
    3f88:	02000025 	andeq	r0, r0, #37	; 0x25
    3f8c:	0023990b 	eoreq	r9, r3, fp, lsl #18
    3f90:	700b0300 	andvc	r0, fp, r0, lsl #6
    3f94:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    3f98:	0016540b 	andseq	r5, r6, fp, lsl #8
    3f9c:	2c0b0500 	cfstr32cs	mvfx0, [fp], {-0}
    3fa0:	06000019 			; <UNDEFINED> instruction: 0x06000019
    3fa4:	0018600b 	andseq	r6, r8, fp
    3fa8:	360b0700 	strcc	r0, [fp], -r0, lsl #14
    3fac:	08000022 	stmdaeq	r0, {r1, r5}
    3fb0:	00237e0b 	eoreq	r7, r3, fp, lsl #28
    3fb4:	8c0b0900 			; <UNDEFINED> instruction: 0x8c0b0900
    3fb8:	0a000020 	beq	4040 <__core1_unwind_stub-0xffbfc0>
    3fbc:	0016990b 	andseq	r9, r6, fp, lsl #18
    3fc0:	a30b0b00 	movwge	r0, #47872	; 0xbb00
    3fc4:	0c000018 	stceq	0, cr0, [r0], {24}
    3fc8:	0015be0b 	andseq	fp, r5, fp, lsl #28
    3fcc:	550b0d00 	strpl	r0, [fp, #-3328]	; 0xfffff300
    3fd0:	0e000025 	cdpeq	0, 0, cr0, cr0, cr5, {1}
    3fd4:	001d710b 	andseq	r7, sp, fp, lsl #2
    3fd8:	5e0b0f00 	cdppl	15, 0, cr0, cr11, cr0, {0}
    3fdc:	1000001a 	andne	r0, r0, sl, lsl r0
    3fe0:	001dae0b 	andseq	sl, sp, fp, lsl #28
    3fe4:	5a0b1100 	bpl	2c83ec <__core1_unwind_stub-0xd37c14>
    3fe8:	12000024 	andne	r0, r0, #36	; 0x24
    3fec:	00175c0b 	andseq	r5, r7, fp, lsl #24
    3ff0:	710b1300 	mrsvc	r1, (UNDEF: 59)
    3ff4:	1400001a 	strne	r0, [r0], #-26	; 0xffffffe6
    3ff8:	001ce20b 	andseq	lr, ip, fp, lsl #4
    3ffc:	3b0b1500 	blcc	2c9404 <__core1_unwind_stub-0xd36bfc>
    4000:	16000018 			; <UNDEFINED> instruction: 0x16000018
    4004:	001d2e0b 	andseq	r2, sp, fp, lsl #28
    4008:	360b1700 	strcc	r1, [fp], -r0, lsl #14
    400c:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
    4010:	0016720b 	andseq	r7, r6, fp, lsl #4
    4014:	010b1900 	tsteq	fp, r0, lsl #18
    4018:	1a000024 	bne	40b0 <__core1_unwind_stub-0xffbf50>
    401c:	001ca00b 	andseq	sl, ip, fp
    4020:	2a0b1b00 	bcs	2cac28 <__core1_unwind_stub-0xd353d8>
    4024:	1c00001a 	stcne	0, cr0, [r0], {26}
    4028:	0014d30b 	andseq	sp, r4, fp, lsl #6
    402c:	eb0b1d00 	bl	2cb434 <__core1_unwind_stub-0xd34bcc>
    4030:	1e00001b 	mcrne	0, 0, r0, cr0, cr11, {0}
    4034:	001bd70b 	andseq	sp, fp, fp, lsl #14
    4038:	490b1f00 	stmdbmi	fp, {r8, r9, sl, fp, ip}
    403c:	20000020 	andcs	r0, r0, r0, lsr #32
    4040:	0020d40b 	eoreq	sp, r0, fp, lsl #8
    4044:	e00b2100 	and	r2, fp, r0, lsl #2
    4048:	22000023 	andcs	r0, r0, #35	; 0x23
    404c:	00195d0b 	andseq	r5, r9, fp, lsl #26
    4050:	c50b2300 	strgt	r2, [fp, #-768]	; 0xfffffd00
    4054:	2400001e 	strcs	r0, [r0], #-30	; 0xffffffe2
    4058:	0020a10b 	eoreq	sl, r0, fp, lsl #2
    405c:	c50b2500 	strgt	r2, [fp, #-1280]	; 0xfffffb00
    4060:	2600001f 			; <UNDEFINED> instruction: 0x2600001f
    4064:	001fd90b 	andseq	sp, pc, fp, lsl #18
    4068:	ed0b2700 	stc	7, cr2, [fp, #-0]
    406c:	2800001f 	stmdacs	r0, {r0, r1, r2, r3, r4}
    4070:	0017c40b 	andseq	ip, r7, fp, lsl #8
    4074:	470b2900 	strmi	r2, [fp, -r0, lsl #18]
    4078:	2a000017 	bcs	40dc <__core1_unwind_stub-0xffbf24>
    407c:	00176f0b 	andseq	r6, r7, fp, lsl #30
    4080:	7f0b2b00 	svcvc	0x000b2b00
    4084:	2c000022 	stccs	0, cr0, [r0], {34}	; 0x22
    4088:	0017a10b 	andseq	sl, r7, fp, lsl #2
    408c:	930b2d00 	movwls	r2, #48384	; 0xbd00
    4090:	2e000022 	cdpcs	0, 0, cr0, cr0, cr2, {1}
    4094:	0022a70b 	eoreq	sl, r2, fp, lsl #14
    4098:	bb0b2f00 	bllt	2cfca0 <__core1_unwind_stub-0xd30360>
    409c:	30000022 	andcc	r0, r0, r2, lsr #32
    40a0:	0018b50b 	andseq	fp, r8, fp, lsl #10
    40a4:	8f0b3100 	svchi	0x000b3100
    40a8:	32000018 	andcc	r0, r0, #24
    40ac:	001bff0b 	andseq	pc, fp, fp, lsl #30
    40b0:	c10b3300 	mrsgt	r3, (UNDEF: 59)
    40b4:	3400001d 	strcc	r0, [r0], #-29	; 0xffffffe3
    40b8:	00248f0b 	eoreq	r8, r4, fp, lsl #30
    40bc:	0f0b3500 	svceq	0x000b3500
    40c0:	36000019 			; <UNDEFINED> instruction: 0x36000019
    40c4:	0019df0b 	andseq	sp, r9, fp, lsl #30
    40c8:	f40b3700 	vst1.8	{d3}, [fp], r0
    40cc:	38000019 	stmdacc	r0, {r0, r3, r4}
    40d0:	001c610b 	andseq	r6, ip, fp, lsl #2
    40d4:	8b0b3900 	blhi	2d24dc <__core1_unwind_stub-0xd2db24>
    40d8:	3a00001c 	bcc	4150 <__core1_unwind_stub-0xffbeb0>
    40dc:	0024d20b 	eoreq	sp, r4, fp, lsl #4
    40e0:	b00b3b00 	andlt	r3, fp, r0, lsl #22
    40e4:	3c00001e 	stccc	0, cr0, [r0], {30}
    40e8:	0019820b 	andseq	r8, r9, fp, lsl #4
    40ec:	4f0b3d00 	svcmi	0x000b3d00
    40f0:	3e000015 	mcrcc	0, 0, r0, cr0, cr5, {0}
    40f4:	0015000b 	andseq	r0, r5, fp
    40f8:	0d0b3f00 	stceq	15, cr3, [fp, #-0]
    40fc:	4000001e 	andmi	r0, r0, lr, lsl r0
    4100:	001f310b 	andseq	r3, pc, fp, lsl #2
    4104:	2b0b4100 	blcs	2d450c <__core1_unwind_stub-0xd2baf4>
    4108:	42000020 	andmi	r0, r0, #32
    410c:	001c760b 	andseq	r7, ip, fp, lsl #12
    4110:	0b0b4300 	bleq	2d4d18 <__core1_unwind_stub-0xd2b2e8>
    4114:	44000025 	strmi	r0, [r0], #-37	; 0xffffffdb
    4118:	001edb0b 	andseq	sp, lr, fp, lsl #22
    411c:	8b0b4500 	blhi	2d5524 <__core1_unwind_stub-0xd2aadc>
    4120:	46000017 			; <UNDEFINED> instruction: 0x46000017
    4124:	001a400b 	andseq	r4, sl, fp
    4128:	840b4700 	strhi	r4, [fp], #-1792	; 0xfffff900
    412c:	4800001b 	stmdami	r0, {r0, r1, r3, r4}
    4130:	0014b70b 	andseq	fp, r4, fp, lsl #14
    4134:	370b4900 	strcc	r4, [fp, -r0, lsl #18]
    4138:	4a000016 	bmi	4198 <__core1_unwind_stub-0xffbe68>
    413c:	0019960b 	andseq	r9, r9, fp, lsl #12
    4140:	c00b4b00 	andgt	r4, fp, r0, lsl #22
    4144:	4c00001c 	stcmi	0, cr0, [r0], {28}
    4148:	07020200 	streq	r0, [r2, -r0, lsl #4]
    414c:	00000d07 	andeq	r0, r0, r7, lsl #26
    4150:	0003f30c 	andeq	pc, r3, ip, lsl #6
    4154:	0003e800 	andeq	lr, r3, r0, lsl #16
    4158:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    415c:	000003dd 	ldrdeq	r0, [r0], -sp
    4160:	03ff0405 	mvnseq	r0, #83886080	; 0x5000000
    4164:	ed0e0000 	stc	0, cr0, [lr, #-0]
    4168:	02000003 	andeq	r0, r0, #3
    416c:	0bc60801 	bleq	ff186178 <__shm_end__+0xbf186178>
    4170:	f80e0000 			; <UNDEFINED> instruction: 0xf80e0000
    4174:	0f000003 	svceq	0x00000003
    4178:	000016d5 	ldrdeq	r1, [r0], -r5
    417c:	1a014c05 	bne	57198 <__core1_unwind_stub-0xfa8e68>
    4180:	000003e8 	andeq	r0, r0, r8, ror #7
    4184:	001a1a0f 	andseq	r1, sl, pc, lsl #20
    4188:	01820500 	orreq	r0, r2, r0, lsl #10
    418c:	0003e81a 	andeq	lr, r3, sl, lsl r8
    4190:	03f80c00 	mvnseq	r0, #0, 24
    4194:	04290000 	strteq	r0, [r9], #-0
    4198:	000d0000 	andeq	r0, sp, r0
    419c:	001c2309 	andseq	r2, ip, r9, lsl #6
    41a0:	0d2d0600 	stceq	6, cr0, [sp, #-0]
    41a4:	0000041e 	andeq	r0, r0, lr, lsl r4
    41a8:	00236309 	eoreq	r6, r3, r9, lsl #6
    41ac:	1c380600 	ldcne	6, cr0, [r8], #-0
    41b0:	000001f5 	strdeq	r0, [r0], -r5
    41b4:	0018d60a 	andseq	sp, r8, sl, lsl #12
    41b8:	a2010700 	andge	r0, r1, #0, 14
    41bc:	06000000 	streq	r0, [r0], -r0
    41c0:	04b40e3a 	ldrteq	r0, [r4], #3642	; 0xe3a
    41c4:	cc0b0000 	stcgt	0, cr0, [fp], {-0}
    41c8:	00000014 	andeq	r0, r0, r4, lsl r0
    41cc:	001b230b 	andseq	r2, fp, fp, lsl #6
    41d0:	6c0b0100 	stfvss	f0, [fp], {-0}
    41d4:	02000024 	andeq	r0, r0, #36	; 0x24
    41d8:	00242f0b 	eoreq	r2, r4, fp, lsl #30
    41dc:	6a0b0300 	bvs	2c4de4 <__core1_unwind_stub-0xd3b21c>
    41e0:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
    41e4:	0021f30b 	eoreq	pc, r1, fp, lsl #6
    41e8:	180b0500 	stmdane	fp, {r8, sl}
    41ec:	06000017 			; <UNDEFINED> instruction: 0x06000017
    41f0:	0016fa0b 	andseq	pc, r6, fp, lsl #20
    41f4:	270b0700 	strcs	r0, [fp, -r0, lsl #14]
    41f8:	08000018 	stmdaeq	r0, {r3, r4}
    41fc:	001d440b 	andseq	r4, sp, fp, lsl #8
    4200:	1f0b0900 	svcne	0x000b0900
    4204:	0a000017 	beq	4268 <__core1_unwind_stub-0xffbd98>
    4208:	001d4b0b 	andseq	r4, sp, fp, lsl #22
    420c:	840b0b00 	strhi	r0, [fp], #-2816	; 0xfffff500
    4210:	0c000017 	stceq	0, cr0, [r0], {23}
    4214:	0017110b 	andseq	r1, r7, fp, lsl #2
    4218:	4a0b0d00 	bmi	2c7620 <__core1_unwind_stub-0xd389e0>
    421c:	0e000022 	cdpeq	0, 0, cr0, cr0, cr2, {1}
    4220:	001f4f0b 	andseq	r4, pc, fp, lsl #30
    4224:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
    4228:	00002061 	andeq	r2, r0, r1, rrx
    422c:	41013f06 	tstmi	r1, r6, lsl #30
    4230:	09000004 	stmdbeq	r0, {r2}
    4234:	000021d6 	ldrdeq	r2, [r0], -r6
    4238:	b40f4106 	strlt	r4, [pc], #-262	; 4240 <__core1_unwind_stub-0xffbdc0>
    423c:	09000004 	stmdbeq	r0, {r2}
    4240:	0000225e 	andeq	r2, r0, lr, asr r2
    4244:	2c0c4a06 			; <UNDEFINED> instruction: 0x2c0c4a06
    4248:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    424c:	000016b9 			; <UNDEFINED> instruction: 0x000016b9
    4250:	2c0c4b06 			; <UNDEFINED> instruction: 0x2c0c4b06
    4254:	10000000 	andne	r0, r0, r0
    4258:	00002337 	andeq	r2, r0, r7, lsr r3
    425c:	00226f09 	eoreq	r6, r2, r9, lsl #30
    4260:	144c0600 	strbne	r0, [ip], #-1536	; 0xfffffa00
    4264:	000004f5 	strdeq	r0, [r0], -r5
    4268:	04e40405 	strbteq	r0, [r4], #1029	; 0x405
    426c:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
    4270:	00001aed 	andeq	r1, r0, sp, ror #21
    4274:	080f4e06 	stmdaeq	pc, {r1, r2, r9, sl, fp, lr}	; <UNPREDICTABLE>
    4278:	05000005 	streq	r0, [r0, #-5]
    427c:	0004fb04 	andeq	pc, r4, r4, lsl #22
    4280:	20771200 	rsbscs	r1, r7, r0, lsl #4
    4284:	57090000 	strpl	r0, [r9, -r0]
    4288:	0600001e 			; <UNDEFINED> instruction: 0x0600001e
    428c:	051f0d52 	ldreq	r0, [pc, #-3410]	; 3542 <__core1_unwind_stub-0xffcabe>
    4290:	04050000 	streq	r0, [r5], #-0
    4294:	0000050e 	andeq	r0, r0, lr, lsl #10
    4298:	00180d13 	andseq	r0, r8, r3, lsl sp
    429c:	67063400 	strvs	r3, [r6, -r0, lsl #8]
    42a0:	05501501 	ldrbeq	r1, [r0, #-1281]	; 0xfffffaff
    42a4:	2c140000 	ldccs	0, cr0, [r4], {-0}
    42a8:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    42ac:	ed0f0169 	stfs	f0, [pc, #-420]	; 4110 <__core1_unwind_stub-0xffbef0>
    42b0:	00000003 	andeq	r0, r0, r3
    42b4:	0017f114 	andseq	pc, r7, r4, lsl r1	; <UNPREDICTABLE>
    42b8:	016a0600 	cmneq	sl, r0, lsl #12
    42bc:	00055514 	andeq	r5, r5, r4, lsl r5
    42c0:	0e000400 	cfcpyseq	mvf0, mvf0
    42c4:	00000525 	andeq	r0, r0, r5, lsr #10
    42c8:	0000c80c 	andeq	ip, r0, ip, lsl #16
    42cc:	00056500 	andeq	r6, r5, r0, lsl #10
    42d0:	00331500 	eorseq	r1, r3, r0, lsl #10
    42d4:	002d0000 	eoreq	r0, sp, r0
    42d8:	0005500c 	andeq	r5, r5, ip
    42dc:	00057000 	andeq	r7, r5, r0
    42e0:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    42e4:	00000565 	andeq	r0, r0, r5, ror #10
    42e8:	001b5b0f 	andseq	r5, fp, pc, lsl #22
    42ec:	016b0600 	cmneq	fp, r0, lsl #12
    42f0:	00057003 	andeq	r7, r5, r3
    42f4:	1d910f00 	ldcne	15, cr0, [r1]
    42f8:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    42fc:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    4300:	b5160000 	ldrlt	r0, [r6, #-0]
    4304:	07000020 	streq	r0, [r0, -r0, lsr #32]
    4308:	0000a201 	andeq	sl, r0, r1, lsl #4
    430c:	01810600 	orreq	r0, r1, r0, lsl #12
    4310:	00063906 	andeq	r3, r6, r6, lsl #18
    4314:	15760b00 	ldrbne	r0, [r6, #-2816]!	; 0xfffff500
    4318:	0b000000 	bleq	4320 <__core1_unwind_stub-0xffbce0>
    431c:	00001582 	andeq	r1, r0, r2, lsl #11
    4320:	158e0b02 	strne	r0, [lr, #2818]	; 0xb02
    4324:	0b030000 	bleq	c432c <__core1_unwind_stub-0xf3bcd4>
    4328:	00001902 	andeq	r1, r0, r2, lsl #18
    432c:	159a0b03 	ldrne	r0, [sl, #2819]	; 0xb03
    4330:	0b040000 	bleq	104338 <__core1_unwind_stub-0xefbcc8>
    4334:	00001a86 	andeq	r1, r0, r6, lsl #21
    4338:	1b6c0b04 	blne	1b06f50 <__bss_end__+0xaf2f50>
    433c:	0b050000 	bleq	144344 <__core1_unwind_stub-0xebbcbc>
    4340:	00001ac2 	andeq	r1, r0, r2, asr #21
    4344:	16aa0b05 	strtne	r0, [sl], r5, lsl #22
    4348:	0b050000 	bleq	144350 <__core1_unwind_stub-0xebbcb0>
    434c:	000015a6 	andeq	r1, r0, r6, lsr #11
    4350:	1cf80b06 	vldmiane	r8!, {d16-d18}
    4354:	0b060000 	bleq	18435c <__core1_unwind_stub-0xe7bca4>
    4358:	000017e3 	andeq	r1, r0, r3, ror #15
    435c:	1d050b06 	vstrne	d0, [r5, #-24]	; 0xffffffe8
    4360:	0b060000 	bleq	184368 <__core1_unwind_stub-0xe7bc98>
    4364:	00002216 	andeq	r2, r0, r6, lsl r2
    4368:	1d120b06 	vldrne	d0, [r2, #-24]	; 0xffffffe8
    436c:	0b060000 	bleq	184374 <__core1_unwind_stub-0xe7bc8c>
    4370:	00001d52 	andeq	r1, r0, r2, asr sp
    4374:	15b20b06 	ldrne	r0, [r2, #2822]!	; 0xb06
    4378:	0b070000 	bleq	1c4380 <__core1_unwind_stub-0xe3bc80>
    437c:	00001e3a 	andeq	r1, r0, sl, lsr lr
    4380:	1e870b07 	vdivne.f64	d0, d7, d7
    4384:	0b070000 	bleq	1c438c <__core1_unwind_stub-0xe3bc74>
    4388:	00002251 	andeq	r2, r0, r1, asr r2
    438c:	17b60b07 	ldrne	r0, [r6, r7, lsl #22]!
    4390:	0b070000 	bleq	1c4398 <__core1_unwind_stub-0xe3bc68>
    4394:	00001f08 	andeq	r1, r0, r8, lsl #30
    4398:	152b0b08 	strne	r0, [fp, #-2824]!	; 0xfffff4f8
    439c:	0b080000 	bleq	2043a4 <__core1_unwind_stub-0xdfbc5c>
    43a0:	00002224 	andeq	r2, r0, r4, lsr #4
    43a4:	1f240b08 	svcne	0x00240b08
    43a8:	00080000 	andeq	r0, r8, r0
    43ac:	0024810f 	eoreq	r8, r4, pc, lsl #2
    43b0:	019f0600 	orrseq	r0, pc, r0, lsl #12
    43b4:	00058f1f 	andeq	r8, r5, pc, lsl pc
    43b8:	1f560f00 	svcne	0x00560f00
    43bc:	a2060000 	andge	r0, r6, #0
    43c0:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    43c4:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    43c8:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    43cc:	2c0c01a5 	stfcss	f0, [ip], {165}	; 0xa5
    43d0:	0f000000 	svceq	0x00000000
    43d4:	00002567 	andeq	r2, r0, r7, ror #10
    43d8:	0c01a806 	stceq	8, cr10, [r1], {6}
    43dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    43e0:	0016c90f 	andseq	ip, r6, pc, lsl #18
    43e4:	01ab0600 			; <UNDEFINED> instruction: 0x01ab0600
    43e8:	00002c0c 	andeq	r2, r0, ip, lsl #24
    43ec:	1f600f00 	svcne	0x00600f00
    43f0:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
    43f4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    43f8:	710f0000 	mrsvc	r0, CPSR
    43fc:	0600001e 			; <UNDEFINED> instruction: 0x0600001e
    4400:	2c0c01b1 	stfcss	f0, [ip], {177}	; 0xb1
    4404:	0f000000 	svceq	0x00000000
    4408:	00001e7c 	andeq	r1, r0, ip, ror lr
    440c:	0c01b406 	cfstrseq	mvf11, [r1], {6}
    4410:	0000002c 	andeq	r0, r0, ip, lsr #32
    4414:	001f6a0f 	andseq	r6, pc, pc, lsl #20
    4418:	01b70600 			; <UNDEFINED> instruction: 0x01b70600
    441c:	00002c0c 	andeq	r2, r0, ip, lsl #24
    4420:	1cd40f00 	ldclne	15, cr0, [r4], {0}
    4424:	ba060000 	blt	18442c <__core1_unwind_stub-0xe7bbd4>
    4428:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    442c:	c60f0000 	strgt	r0, [pc], -r0
    4430:	06000024 	streq	r0, [r0], -r4, lsr #32
    4434:	2c0c01bd 	stfcss	f0, [ip], {189}	; 0xbd
    4438:	0f000000 	svceq	0x00000000
    443c:	00001f74 	andeq	r1, r0, r4, ror pc
    4440:	0c01c006 	stceq	0, cr12, [r1], {6}
    4444:	0000002c 	andeq	r0, r0, ip, lsr #32
    4448:	00258a0f 	eoreq	r8, r5, pc, lsl #20
    444c:	01c30600 	biceq	r0, r3, r0, lsl #12
    4450:	00002c0c 	andeq	r2, r0, ip, lsl #24
    4454:	24360f00 	ldrtcs	r0, [r6], #-3840	; 0xfffff100
    4458:	c6060000 	strgt	r0, [r6], -r0
    445c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    4460:	420f0000 	andmi	r0, pc, #0
    4464:	06000024 	streq	r0, [r0], -r4, lsr #32
    4468:	2c0c01c9 	stfcss	f0, [ip], {201}	; 0xc9
    446c:	0f000000 	svceq	0x00000000
    4470:	0000244e 	andeq	r2, r0, lr, asr #8
    4474:	0c01cc06 	stceq	12, cr12, [r1], {6}
    4478:	0000002c 	andeq	r0, r0, ip, lsr #32
    447c:	0024730f 	eoreq	r7, r4, pc, lsl #6
    4480:	01d00600 	bicseq	r0, r0, r0, lsl #12
    4484:	00002c0c 	andeq	r2, r0, ip, lsl #24
    4488:	257d0f00 	ldrbcs	r0, [sp, #-3840]!	; 0xfffff100
    448c:	d3060000 	movwle	r0, #24576	; 0x6000
    4490:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    4494:	260f0000 	strcs	r0, [pc], -r0
    4498:	06000017 			; <UNDEFINED> instruction: 0x06000017
    449c:	2c0c01d6 	stfcss	f0, [ip], {214}	; 0xd6
    44a0:	0f000000 	svceq	0x00000000
    44a4:	000014a7 	andeq	r1, r0, r7, lsr #9
    44a8:	0c01d906 			; <UNDEFINED> instruction: 0x0c01d906
    44ac:	0000002c 	andeq	r0, r0, ip, lsr #32
    44b0:	00193f0f 	andseq	r3, r9, pc, lsl #30
    44b4:	01dc0600 	bicseq	r0, ip, r0, lsl #12
    44b8:	00002c0c 	andeq	r2, r0, ip, lsl #24
    44bc:	17010f00 	strne	r0, [r1, -r0, lsl #30]
    44c0:	df060000 	svcle	0x00060000
    44c4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    44c8:	7e0f0000 	cdpvc	0, 0, cr0, cr15, cr0, {0}
    44cc:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    44d0:	2c0c01e2 	stfcss	f0, [ip], {226}	; 0xe2
    44d4:	0f000000 	svceq	0x00000000
    44d8:	00001ba2 	andeq	r1, r0, r2, lsr #23
    44dc:	0c01e506 	cfstr32eq	mvfx14, [r1], {6}
    44e0:	0000002c 	andeq	r0, r0, ip, lsr #32
    44e4:	001dea0f 	andseq	lr, sp, pc, lsl #20
    44e8:	01e80600 	mvneq	r0, r0, lsl #12
    44ec:	00002c0c 	andeq	r2, r0, ip, lsl #24
    44f0:	236c0f00 	cmncs	ip, #0, 30
    44f4:	ef060000 	svc	0x00060000
    44f8:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    44fc:	350f0000 	strcc	r0, [pc, #-0]	; 4504 <__core1_unwind_stub-0xffbafc>
    4500:	06000025 	streq	r0, [r0], -r5, lsr #32
    4504:	2c0c01f2 	stfcss	f0, [ip], {242}	; 0xf2
    4508:	0f000000 	svceq	0x00000000
    450c:	00002545 	andeq	r2, r0, r5, asr #10
    4510:	0c01f506 	cfstr32eq	mvfx15, [r1], {6}
    4514:	0000002c 	andeq	r0, r0, ip, lsr #32
    4518:	0017fa0f 	andseq	pc, r7, pc, lsl #20
    451c:	01f80600 	mvnseq	r0, r0, lsl #12
    4520:	00002c0c 	andeq	r2, r0, ip, lsl #24
    4524:	23aa0f00 			; <UNDEFINED> instruction: 0x23aa0f00
    4528:	fb060000 	blx	184532 <__core1_unwind_stub-0xe7bace>
    452c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
    4530:	f00f0000 			; <UNDEFINED> instruction: 0xf00f0000
    4534:	0600001e 			; <UNDEFINED> instruction: 0x0600001e
    4538:	2c0c01fe 	stfcss	f0, [ip], {254}	; 0xfe
    453c:	0f000000 	svceq	0x00000000
    4540:	000019b8 			; <UNDEFINED> instruction: 0x000019b8
    4544:	0c020206 	sfmeq	f0, 4, [r2], {6}
    4548:	0000002c 	andeq	r0, r0, ip, lsr #32
    454c:	0020c70f 	eoreq	ip, r0, pc, lsl #14
    4550:	020a0600 	andeq	r0, sl, #0, 12
    4554:	00002c0c 	andeq	r2, r0, ip, lsl #24
    4558:	18810f00 	stmne	r1, {r8, r9, sl, fp}
    455c:	0d060000 	stceq	0, cr0, [r6, #-0]
    4560:	002c0c02 	eoreq	r0, ip, r2, lsl #24
    4564:	2c0c0000 	stccs	0, cr0, [ip], {-0}
    4568:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    456c:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    4570:	1aa20f00 	bne	fe888178 <__shm_end__+0xbe888178>
    4574:	fb060000 	blx	18457e <__core1_unwind_stub-0xe7ba82>
    4578:	07f30c03 	ldrbeq	r0, [r3, r3, lsl #24]!
    457c:	f50c0000 			; <UNDEFINED> instruction: 0xf50c0000
    4580:	1b000004 	blne	4598 <__core1_unwind_stub-0xffba68>
    4584:	15000008 	strne	r0, [r0, #-8]
    4588:	00000033 	andeq	r0, r0, r3, lsr r0
    458c:	a10f000d 	tstge	pc, sp
    4590:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    4594:	0b140584 	bleq	505bac <__core1_unwind_stub-0xafa454>
    4598:	16000008 	strne	r0, [r0], -r8
    459c:	00001b64 	andeq	r1, r0, r4, ror #22
    45a0:	00a20107 	adceq	r0, r2, r7, lsl #2
    45a4:	8b060000 	blhi	1845ac <__core1_unwind_stub-0xe7ba54>
    45a8:	08660605 	stmdaeq	r6!, {r0, r2, r9, sl}^
    45ac:	e40b0000 	str	r0, [fp], #-0
    45b0:	00000018 	andeq	r0, r0, r8, lsl r0
    45b4:	001d5f0b 	andseq	r5, sp, fp, lsl #30
    45b8:	610b0100 	mrsvs	r0, (UNDEF: 27)
    45bc:	02000015 	andeq	r0, r0, #21
    45c0:	0024f70b 	eoreq	pc, r4, fp, lsl #14
    45c4:	0e0b0300 	cdpeq	3, 0, cr0, cr11, cr0, {0}
    45c8:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    45cc:	0020010b 	eoreq	r0, r0, fp, lsl #2
    45d0:	890b0500 	stmdbhi	fp, {r8, sl}
    45d4:	06000016 			; <UNDEFINED> instruction: 0x06000016
    45d8:	24e70f00 	strbtcs	r0, [r7], #3840	; 0xf00
    45dc:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
    45e0:	08281505 	stmdaeq	r8!, {r0, r2, r8, sl, ip}
    45e4:	cf0f0000 	svcgt	0x000f0000
    45e8:	06000023 	streq	r0, [r0], -r3, lsr #32
    45ec:	33110799 	tstcc	r1, #40108032	; 0x2640000
    45f0:	0f000000 	svceq	0x00000000
    45f4:	00001f8e 	andeq	r1, r0, lr, lsl #31
    45f8:	0c07ae06 	stceq	14, cr10, [r7], {6}
    45fc:	0000002c 	andeq	r0, r0, ip, lsr #32
    4600:	00234b04 	eoreq	r4, r3, r4, lsl #22
    4604:	167b0700 	ldrbtne	r0, [fp], -r0, lsl #14
    4608:	000000a2 	andeq	r0, r0, r2, lsr #1
    460c:	00088d0e 	andeq	r8, r8, lr, lsl #26
    4610:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4614:	0000099b 	muleq	r0, fp, r9
    4618:	00164c04 	andseq	r4, r6, r4, lsl #24
    461c:	16810700 	strne	r0, [r1], r0, lsl #14
    4620:	00000033 	andeq	r0, r0, r3, lsr r0
    4624:	0014f804 	andseq	pc, r4, r4, lsl #16
    4628:	16850700 	strne	r0, [r5], r0, lsl #14
    462c:	00000025 	andeq	r0, r0, r5, lsr #32
    4630:	41040402 	tstmi	r4, r2, lsl #8
    4634:	02000017 	andeq	r0, r0, #23
    4638:	17390308 	ldrne	r0, [r9, -r8, lsl #6]!
    463c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4640:	00095a04 	andeq	r5, r9, r4, lsl #20
    4644:	03100200 	tsteq	r0, #0, 4
    4648:	0000201c 	andeq	r2, r0, ip, lsl r0
    464c:	0008990c 	andeq	r9, r8, ip, lsl #18
    4650:	0008e900 	andeq	lr, r8, r0, lsl #18
    4654:	00331500 	eorseq	r1, r3, r0, lsl #10
    4658:	00ff0000 	rscseq	r0, pc, r0
    465c:	0008d90e 	andeq	sp, r8, lr, lsl #18
    4660:	1e940f00 	cdpne	15, 9, cr0, cr4, cr0, {0}
    4664:	fc070000 	stc2	0, cr0, [r7], {-0}
    4668:	08e91601 	stmiaeq	r9!, {r0, r9, sl, ip}^
    466c:	f00f0000 			; <UNDEFINED> instruction: 0xf00f0000
    4670:	07000016 	smladeq	r0, r6, r0, r0
    4674:	e9160202 	ldmdb	r6, {r1, r9}
    4678:	17000008 	strne	r0, [r0, -r8]
    467c:	0000151e 	andeq	r1, r0, lr, lsl r5
    4680:	0103b301 	tsteq	r3, r1, lsl #6
    4684:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    4688:	01002174 	tsteq	r0, r4, ror r1
    468c:	00000130 	andeq	r0, r0, r0, lsr r1
    4690:	09e29c01 	stmibeq	r2!, {r0, sl, fp, ip, pc}^
    4694:	6e180000 	cdpvs	0, 1, cr0, cr8, cr0, {0}
    4698:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    469c:	0008b117 	andeq	fp, r8, r7, lsl r1
    46a0:	00000400 	andeq	r0, r0, r0, lsl #8
    46a4:	00000000 	andeq	r0, r0, r0
    46a8:	00641800 	rsbeq	r1, r4, r0, lsl #16
    46ac:	2203b301 	andcs	fp, r3, #67108864	; 0x4000000
    46b0:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    46b4:	00000030 	andeq	r0, r0, r0, lsr r0
    46b8:	0000002c 	andeq	r0, r0, ip, lsr #32
    46bc:	00707219 	rsbseq	r7, r0, r9, lsl r2
    46c0:	2e03b301 	cdpcs	3, 0, cr11, cr3, cr1, {0}
    46c4:	000009e2 	andeq	r0, r0, r2, ror #19
    46c8:	1a009102 	bne	28ad8 <__core1_unwind_stub-0xfd7528>
    46cc:	b5010071 	strlt	r0, [r1, #-113]	; 0xffffff8f
    46d0:	08b10b03 	ldmeq	r1!, {r0, r1, r8, r9, fp}
    46d4:	00600000 	rsbeq	r0, r0, r0
    46d8:	00580000 	subseq	r0, r8, r0
    46dc:	721a0000 	andsvc	r0, sl, #0
    46e0:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    46e4:	0008b112 	andeq	fp, r8, r2, lsl r1
    46e8:	0000b600 	andeq	fp, r0, r0, lsl #12
    46ec:	0000ac00 	andeq	sl, r0, r0, lsl #24
    46f0:	00791a00 	rsbseq	r1, r9, r0, lsl #20
    46f4:	1903b501 	stmdbne	r3, {r0, r8, sl, ip, sp, pc}
    46f8:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    46fc:	00000112 	andeq	r0, r0, r2, lsl r1
    4700:	0000010e 	andeq	r0, r0, lr, lsl #2
    4704:	317a6c1a 	cmncc	sl, sl, lsl ip
    4708:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    470c:	0008a50a 	andeq	sl, r8, sl, lsl #10
    4710:	00013e00 	andeq	r3, r1, r0, lsl #28
    4714:	00013a00 	andeq	r3, r1, r0, lsl #20
    4718:	7a6c1a00 	bvc	1b0af20 <__bss_end__+0xaf6f20>
    471c:	b6010032 			; <UNDEFINED> instruction: 0xb6010032
    4720:	08a50f03 	stmiaeq	r5!, {r0, r1, r8, r9, sl, fp}
    4724:	015e0000 	cmpeq	lr, r0
    4728:	015c0000 	cmpeq	ip, r0
    472c:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    4730:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    4734:	0008a514 	andeq	sl, r8, r4, lsl r5
    4738:	00017b00 	andeq	r7, r1, r0, lsl #22
    473c:	00017100 	andeq	r7, r1, r0, lsl #2
    4740:	006b1a00 	rsbeq	r1, fp, r0, lsl #20
    4744:	1703b601 	strne	fp, [r3, -r1, lsl #12]
    4748:	000008a5 	andeq	r0, r0, r5, lsr #17
    474c:	000001c2 	andeq	r0, r0, r2, asr #3
    4750:	000001be 			; <UNDEFINED> instruction: 0x000001be
    4754:	b1040500 	tstlt	r4, r0, lsl #10
    4758:	00000008 	andeq	r0, r0, r8
    475c:	00000022 	andeq	r0, r0, r2, lsr #32
    4760:	0ce50002 	stcleq	0, cr0, [r5], #8
    4764:	01040000 	mrseq	r0, (UNDEF: 4)
    4768:	000019cb 	andeq	r1, r0, fp, asr #19
    476c:	010022a4 	smlatbeq	r0, r4, r2, r2
    4770:	010022cc 	smlabteq	r0, ip, r2, r2
    4774:	00002596 	muleq	r0, r6, r5
    4778:	000015d0 	ldrdeq	r1, [r0], -r0
    477c:	000010ee 	andeq	r1, r0, lr, ror #1
    4780:	00228001 	eoreq	r8, r2, r1
    4784:	00020000 	andeq	r0, r2, r0
    4788:	00000cf9 	strdeq	r0, [r0], -r9
    478c:	1a2c0104 	bne	b04ba4 <__core1_unwind_stub-0x4fb45c>
    4790:	22cc0000 	sbccs	r0, ip, #0
    4794:	23140100 	tstcs	r4, #0, 2
    4798:	25960100 	ldrcs	r0, [r6, #256]	; 0x100
    479c:	15d00000 	ldrbne	r0, [r0]
    47a0:	10ee0000 	rscne	r0, lr, r0
    47a4:	80010000 	andhi	r0, r1, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
{
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__core1_unwind_stub-0xd3ff54>
    uint8_t *d = (uint8_t *)dst;
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	16030000 	strne	r0, [r3], -r0
    const uint8_t *s = (const uint8_t *)src;
  20:	3a0e0300 	bcc	380c28 <__core1_unwind_stub-0xc7f3d8>
  24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    if (d == s || n == 0) return dst;
  28:	0013490b 	andseq	r4, r3, fp, lsl #18
  2c:	00260400 	eoreq	r0, r6, r0, lsl #8
  30:	00001349 	andeq	r1, r0, r9, asr #6
  34:	0b002405 	bleq	9050 <__core1_unwind_stub-0xff6fb0>
  38:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  3c:	0600000e 	streq	r0, [r0], -lr
  40:	0e030104 	adfeqs	f0, f3, f4
  44:	0b0b0b3e 	bleq	2c2d44 <__core1_unwind_stub-0xd3d2bc>
  48:	0b3a1349 	bleq	e84d74 <__core1_unwind_stub-0x17b28c>
    if (d < s) {
  4c:	0b390b3b 	bleq	e42d40 <__core1_unwind_stub-0x1bd2c0>
  50:	00001301 	andeq	r1, r0, r1, lsl #6
  54:	03002807 	movweq	r2, #2055	; 0x807
  58:	000b1c0e 	andeq	r1, fp, lr, lsl #24
        for (size_t i = 0; i < n; ++i) d[i] = s[i];
  5c:	00160800 	andseq	r0, r6, r0, lsl #16
  60:	0b3a0e03 	bleq	e83874 <__core1_unwind_stub-0x17c78c>
  64:	0b39053b 	bleq	e41558 <__core1_unwind_stub-0x1beaa8>
  68:	00001349 	andeq	r1, r0, r9, asr #6
  6c:	03011309 	movweq	r1, #4873	; 0x1309
  70:	3a0b0b0e 	bcc	2c2cb0 <__core1_unwind_stub-0xd3d350>
  74:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  78:	0013010b 	andseq	r0, r3, fp, lsl #2
  7c:	000d0a00 	andeq	r0, sp, r0, lsl #20
  80:	0b3a0803 	bleq	e82094 <__core1_unwind_stub-0x17df6c>
  84:	0b39053b 	bleq	e41578 <__core1_unwind_stub-0x1bea88>
  88:	0b381349 	bleq	e04db4 <__core1_unwind_stub-0x1fb24c>
  8c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  90:	3a0e0300 	bcc	380c98 <__core1_unwind_stub-0xc7f368>
  94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  98:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  9c:	0c00000b 	stceq	0, cr0, [r0], {11}
  a0:	0b0b000f 	bleq	2c00e4 <__core1_unwind_stub-0xd3ff1c>
  a4:	0f0d0000 	svceq	0x000d0000
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  a8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  ac:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  b0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  b4:	13011349 	movwne	r1, #4937	; 0x1349
  b8:	050f0000 	streq	r0, [pc, #-0]	; c0 <__core1_unwind_stub-0xffff40>
  bc:	00134900 	andseq	r4, r3, r0, lsl #18
  c0:	01171000 	tsteq	r7, r0
  c4:	0b3a0b0b 	bleq	e82cf8 <__core1_unwind_stub-0x17d308>
  c8:	0b390b3b 	bleq	e42dbc <__core1_unwind_stub-0x1bd244>
  cc:	00001301 	andeq	r1, r0, r1, lsl #6
  d0:	03000d11 	movweq	r0, #3345	; 0xd11
  d4:	3b0b3a0e 	blcc	2ce914 <__core1_unwind_stub-0xd316ec>
  d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  dc:	12000013 	andne	r0, r0, #19
  e0:	13490101 	movtne	r0, #37121	; 0x9101
  e4:	00001301 	andeq	r1, r0, r1, lsl #6
  e8:	49002113 	stmdbmi	r0, {r0, r1, r4, r8, sp}
  ec:	000b2f13 	andeq	r2, fp, r3, lsl pc
  f0:	01131400 	tsteq	r3, r0, lsl #8
    return dst;
  f4:	0b3a0b0b 	bleq	e82d28 <__core1_unwind_stub-0x17d2d8>
}
  f8:	0b390b3b 	bleq	e42dec <__core1_unwind_stub-0x1bd214>
  fc:	00001301 	andeq	r1, r0, r1, lsl #6
 100:	03000d15 	movweq	r0, #3349	; 0xd15
 104:	3b0b3a0e 	blcc	2ce944 <__core1_unwind_stub-0xd316bc>
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
 108:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 10c:	000b3813 	andeq	r3, fp, r3, lsl r8
 110:	01131600 	tsteq	r3, r0, lsl #12
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
 114:	0b0b0e03 	bleq	2c3928 <__core1_unwind_stub-0xd3c6d8>
 118:	0b3b0b3a 	bleq	ec2e08 <__core1_unwind_stub-0x13d1f8>
 11c:	13010b39 	movwne	r0, #6969	; 0x1b39
 120:	0d170000 	ldceq	0, cr0, [r7, #-0]
 124:	3a080300 	bcc	200d2c <__core1_unwind_stub-0xdff2d4>
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 128:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 12c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 130:	1800000b 	stmdane	r0, {r0, r1, r3}
 134:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 138:	0b3a050b 	bleq	e8156c <__core1_unwind_stub-0x17ea94>
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	0b390b3b 	bleq	e42e30 <__core1_unwind_stub-0x1bd1d0>
 140:	00001301 	andeq	r1, r0, r1, lsl #6
 144:	03000d19 	movweq	r0, #3353	; 0xd19
 148:	3b0b3a0e 	blcc	2ce988 <__core1_unwind_stub-0xd31678>
 14c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 150:	00053813 	andeq	r3, r5, r3, lsl r8
 154:	00151a00 	andseq	r1, r5, r0, lsl #20
 158:	00001927 	andeq	r1, r0, r7, lsr #18
 15c:	0301131b 	movweq	r1, #4891	; 0x131b
 160:	3a050b0e 	bcc	142da0 <__core1_unwind_stub-0xebd260>
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 168:	0013010b 	andseq	r0, r3, fp, lsl #2
 16c:	000d1c00 	andeq	r1, sp, r0, lsl #24
 170:	0b3a0e03 	bleq	e83984 <__core1_unwind_stub-0x17c67c>
 174:	0b39053b 	bleq	e41668 <__core1_unwind_stub-0x1be998>
    return ALT_E_SUCCESS;
 178:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
}
 17c:	131d0000 	tstne	sp, #0
 180:	3a0b0b01 	bcc	2c2d8c <__core1_unwind_stub-0xd3d274>
 184:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    while (coalesce->size)
 188:	0013010b 	andseq	r0, r3, fp, lsl #2
 18c:	01171e00 	tsteq	r7, r0, lsl #28
            break;
 190:	0b3a0b0b 	bleq	e82dc4 <__core1_unwind_stub-0x17d23c>
    *segpa   = thissegpa;
 194:	0b39053b 	bleq	e41688 <__core1_unwind_stub-0x1be978>
 198:	00001301 	andeq	r1, r0, r1, lsl #6
 19c:	03000d1f 	movweq	r0, #3359	; 0xd1f
    *segsize = thissegsize;
 1a0:	3b0b3a0e 	blcc	2ce9e0 <__core1_unwind_stub-0xd31620>
 1a4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 1a8:	20000013 	andcs	r0, r0, r3, lsl r0
    return ALT_E_SUCCESS;
 1ac:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
}
 1b0:	0000193c 	andeq	r1, r0, ip, lsr r9
 1b4:	27011521 	strcs	r1, [r1, -r1, lsr #10]
 1b8:	00130119 	andseq	r0, r3, r9, lsl r1
 1bc:	00342200 	eorseq	r2, r4, r0, lsl #4
 1c0:	0b3a0e03 	bleq	e839d4 <__core1_unwind_stub-0x17c62c>
 1c4:	0b39053b 	bleq	e416b8 <__core1_unwind_stub-0x1be948>
 1c8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1cc:	0000193c 	andeq	r1, r0, ip, lsr r9
 1d0:	03003423 	movweq	r3, #1059	; 0x423
 1d4:	3b0b3a0e 	blcc	2cea14 <__core1_unwind_stub-0xd315ec>
 1d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1dc:	3c193f13 	ldccc	15, cr3, [r9], {19}
 1e0:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
 1e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1e8:	0b3a0e03 	bleq	e839fc <__core1_unwind_stub-0x17c604>
 1ec:	0b39053b 	bleq	e416e0 <__core1_unwind_stub-0x1be920>
 1f0:	13491927 	movtne	r1, #39207	; 0x9927
 1f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1fc:	00130119 	andseq	r0, r3, r9, lsl r1
 200:	00052500 	andeq	r2, r5, r0, lsl #10
 204:	0b3a0e03 	bleq	e83a18 <__core1_unwind_stub-0x17c5e8>
 208:	0b39053b 	bleq	e416fc <__core1_unwind_stub-0x1be904>
 20c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 210:	34260000 	strtcc	r0, [r6], #-0
 214:	3a0e0300 	bcc	380e1c <__core1_unwind_stub-0xc7f1e4>
 218:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 21c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 220:	27000018 	smladcs	r0, r8, r0, r0
 224:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 228:	05280000 	streq	r0, [r8, #-0]!
 22c:	3a080300 	bcc	200e34 <__core1_unwind_stub-0xdff1cc>
 230:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 234:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 238:	29000018 	stmdbcs	r0, {r3, r4}
 23c:	00000026 	andeq	r0, r0, r6, lsr #32
 240:	0300342a 	movweq	r3, #1066	; 0x42a
 244:	3b0b3a08 	blcc	2cea6c <__core1_unwind_stub-0xd31594>
 248:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 24c:	00180213 	andseq	r0, r8, r3, lsl r2
 250:	010b2b00 	tsteq	fp, r0, lsl #22
 254:	06120111 			; <UNDEFINED> instruction: 0x06120111
 258:	00001301 	andeq	r1, r0, r1, lsl #6
 25c:	11010b2c 	tstne	r1, ip, lsr #22
 260:	00061201 	andeq	r1, r6, r1, lsl #4
 264:	00212d00 	eoreq	r2, r1, r0, lsl #26
 268:	052f1349 	streq	r1, [pc, #-841]!	; ffffff27 <__shm_end__+0xbfffff27>
 26c:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
 270:	3a0e0301 	bcc	380e7c <__core1_unwind_stub-0xc7f184>
 274:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 278:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 27c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 280:	96184006 	ldrls	r4, [r8], -r6
 284:	13011942 	movwne	r1, #6466	; 0x1942
 288:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
 28c:	3a0e0301 	bcc	380e98 <__core1_unwind_stub-0xc7f168>
 290:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 294:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 298:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 29c:	97184006 	ldrls	r4, [r8, -r6]
 2a0:	13011942 	movwne	r1, #6466	; 0x1942
 2a4:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
 2a8:	03193f01 	tsteq	r9, #1, 30
 2ac:	3b0b3a0e 	blcc	2ceaec <__core1_unwind_stub-0xd31514>
 2b0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 2b4:	11134919 	tstne	r3, r9, lsl r9
 2b8:	40061201 	andmi	r1, r6, r1, lsl #4
 2bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2c0:	00001301 	andeq	r1, r0, r1, lsl #6
 2c4:	31011d31 	tstcc	r1, r1, lsr sp
 2c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2cc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 2d0:	000b5705 	andeq	r5, fp, r5, lsl #14
 2d4:	00053200 	andeq	r3, r5, r0, lsl #4
 2d8:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
 2dc:	1d330000 	ldcne	0, cr0, [r3, #-0]
 2e0:	11133101 	tstne	r3, r1, lsl #2
 2e4:	58061201 	stmdapl	r6, {r0, r9, ip}
 2e8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
 2ec:	0013010b 	andseq	r0, r3, fp, lsl #2
 2f0:	00343400 	eorseq	r3, r4, r0, lsl #8
 2f4:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
 2f8:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
 2fc:	03193f00 	tsteq	r9, #0, 30
 300:	3b0b3a0e 	blcc	2ceb40 <__core1_unwind_stub-0xd314c0>
 304:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 308:	11134919 	tstne	r3, r9, lsl r9
 30c:	40061201 	andmi	r1, r6, r1, lsl #4
 310:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 314:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
 318:	3a0e0301 	bcc	380f24 <__core1_unwind_stub-0xc7f0dc>
 31c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 320:	2019270b 	andscs	r2, r9, fp, lsl #14
 324:	0013010b 	andseq	r0, r3, fp, lsl #2
 328:	00053700 	andeq	r3, r5, r0, lsl #14
 32c:	0b3a0e03 	bleq	e83b40 <__core1_unwind_stub-0x17c4c0>
 330:	0b39053b 	bleq	e41824 <__core1_unwind_stub-0x1be7dc>
 334:	00001349 	andeq	r1, r0, r9, asr #6
 338:	03012e38 	movweq	r2, #7736	; 0x1e38
 33c:	3b0b3a0e 	blcc	2ceb7c <__core1_unwind_stub-0xd31484>
 340:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 344:	20134919 	andscs	r4, r3, r9, lsl r9
 348:	0013010b 	andseq	r0, r3, fp, lsl #2
 34c:	00343900 	eorseq	r3, r4, r0, lsl #18
 350:	0b3a0e03 	bleq	e83b64 <__core1_unwind_stub-0x17c49c>
 354:	0b39053b 	bleq	e41848 <__core1_unwind_stub-0x1be7b8>
 358:	00001349 	andeq	r1, r0, r9, asr #6
 35c:	03012e3a 	movweq	r2, #7738	; 0x1e3a
 360:	3b0b3a0e 	blcc	2ceba0 <__core1_unwind_stub-0xd31460>
 364:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 368:	010b2019 	tsteq	fp, r9, lsl r0
 36c:	3b000013 	blcc	3c0 <__core1_unwind_stub-0xfffc40>
 370:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 374:	0b3b0b3a 	bleq	ec3064 <__core1_unwind_stub-0x13cf9c>
 378:	13490b39 	movtne	r0, #39737	; 0x9b39
 37c:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
 380:	3a0e0301 	bcc	380f8c <__core1_unwind_stub-0xc7f074>
 384:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 388:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 38c:	010b2013 	tsteq	fp, r3, lsl r0
 390:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
 394:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 398:	0b3b0b3a 	bleq	ec3088 <__core1_unwind_stub-0x13cf78>
 39c:	13490b39 	movtne	r0, #39737	; 0x9b39
 3a0:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
 3a4:	3a0e0301 	bcc	380fb0 <__core1_unwind_stub-0xc7f050>
 3a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 3b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 3b4:	97184006 	ldrls	r4, [r8, -r6]
 3b8:	00001942 	andeq	r1, r0, r2, asr #18
 3bc:	0300053f 	movweq	r0, #1343	; 0x53f
 3c0:	3b0b3a0e 	blcc	2cec00 <__core1_unwind_stub-0xd31400>
 3c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 3c8:	00180213 	andseq	r0, r8, r3, lsl r2
 3cc:	00184000 	andseq	r4, r8, r0
 3d0:	01000000 	mrseq	r0, (UNDEF: 0)
 3d4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 3d8:	0e030b13 	vmoveq.32	d3[0], r0
 3dc:	17550e1b 	smmlane	r5, fp, lr, r0
 3e0:	17100111 			; <UNDEFINED> instruction: 0x17100111
 3e4:	24020000 	strcs	r0, [r2], #-0
 3e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3ec:	000e030b 	andeq	r0, lr, fp, lsl #6
 3f0:	00160300 	andseq	r0, r6, r0, lsl #6
 3f4:	0b3a0e03 	bleq	e83c08 <__core1_unwind_stub-0x17c3f8>
 3f8:	0b390b3b 	bleq	e430ec <__core1_unwind_stub-0x1bcf14>
 3fc:	00001349 	andeq	r1, r0, r9, asr #6
 400:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
 404:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 408:	13490035 	movtne	r0, #36917	; 0x9035
 40c:	24060000 	strcs	r0, [r6], #-0
 410:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 414:	0008030b 	andeq	r0, r8, fp, lsl #6
 418:	000f0700 	andeq	r0, pc, r0, lsl #14
 41c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 420:	13080000 	movwne	r0, #32768	; 0x8000
 424:	3c0e0300 	stccc	3, cr0, [lr], {-0}
 428:	09000019 	stmdbeq	r0, {r0, r3, r4}
 42c:	0b0b000f 	bleq	2c0470 <__core1_unwind_stub-0xd3fb90>
 430:	160a0000 	strne	r0, [sl], -r0
 434:	3a0e0300 	bcc	38103c <__core1_unwind_stub-0xc7efc4>
 438:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 43c:	0013490b 	andseq	r4, r3, fp, lsl #18
 440:	01170b00 	tsteq	r7, r0, lsl #22
 444:	0b3a0b0b 	bleq	e83078 <__core1_unwind_stub-0x17cf88>
 448:	0b390b3b 	bleq	e4313c <__core1_unwind_stub-0x1bcec4>
 44c:	00001301 	andeq	r1, r0, r1, lsl #6
 450:	03000d0c 	movweq	r0, #3340	; 0xd0c
 454:	3b0b3a0e 	blcc	2cec94 <__core1_unwind_stub-0xd3136c>
 458:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 45c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 460:	13490101 	movtne	r0, #37121	; 0x9101
 464:	00001301 	andeq	r1, r0, r1, lsl #6
 468:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 46c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 470:	01130f00 	tsteq	r3, r0, lsl #30
 474:	0b3a0b0b 	bleq	e830a8 <__core1_unwind_stub-0x17cf58>
 478:	0b390b3b 	bleq	e4316c <__core1_unwind_stub-0x1bce94>
 47c:	00001301 	andeq	r1, r0, r1, lsl #6
 480:	03000d10 	movweq	r0, #3344	; 0xd10
 484:	3b0b3a0e 	blcc	2cecc4 <__core1_unwind_stub-0xd3133c>
 488:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 48c:	000b3813 	andeq	r3, fp, r3, lsl r8
 490:	01131100 	tsteq	r3, r0, lsl #2
 494:	0b0b0e03 	bleq	2c3ca8 <__core1_unwind_stub-0xd3c358>
 498:	0b3b0b3a 	bleq	ec3188 <__core1_unwind_stub-0x13ce78>
 49c:	13010b39 	movwne	r0, #6969	; 0x1b39
 4a0:	0d120000 	ldceq	0, cr0, [r2, #-0]
 4a4:	3a080300 	bcc	2010ac <__core1_unwind_stub-0xdfef54>
 4a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4ac:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 4b0:	1300000b 	movwne	r0, #11
 4b4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 4b8:	0b3a050b 	bleq	e818ec <__core1_unwind_stub-0x17e714>
 4bc:	0b390b3b 	bleq	e431b0 <__core1_unwind_stub-0x1bce50>
 4c0:	00001301 	andeq	r1, r0, r1, lsl #6
 4c4:	03000d14 	movweq	r0, #3348	; 0xd14
 4c8:	3b0b3a0e 	blcc	2ced08 <__core1_unwind_stub-0xd312f8>
 4cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4d0:	00053813 	andeq	r3, r5, r3, lsl r8
 4d4:	00151500 	andseq	r1, r5, r0, lsl #10
 4d8:	00001927 	andeq	r1, r0, r7, lsr #18
 4dc:	27011516 	smladcs	r1, r6, r5, r1
 4e0:	01134919 	tsteq	r3, r9, lsl r9
 4e4:	17000013 	smladne	r0, r3, r0, r0
 4e8:	13490005 	movtne	r0, #36869	; 0x9005
 4ec:	13180000 	tstne	r8, #0
 4f0:	0b0e0301 	bleq	3810fc <__core1_unwind_stub-0xc7ef04>
 4f4:	3b0b3a05 	blcc	2ced10 <__core1_unwind_stub-0xd312f0>
 4f8:	010b3905 	tsteq	fp, r5, lsl #18
 4fc:	19000013 	stmdbne	r0, {r0, r1, r4}
 500:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 504:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 508:	13490b39 	movtne	r0, #39737	; 0x9b39
 50c:	00000b38 	andeq	r0, r0, r8, lsr fp
 510:	03000d1a 	movweq	r0, #3354	; 0xd1a
 514:	3b0b3a0e 	blcc	2ced54 <__core1_unwind_stub-0xd312ac>
 518:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 51c:	00053813 	andeq	r3, r5, r3, lsl r8
 520:	01131b00 	tsteq	r3, r0, lsl #22
 524:	0b0b0e03 	bleq	2c3d38 <__core1_unwind_stub-0xd3c2c8>
 528:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 52c:	13010b39 	movwne	r0, #6969	; 0x1b39
 530:	131c0000 	tstne	ip, #0
 534:	3a0b0b01 	bcc	2c3140 <__core1_unwind_stub-0xd3cec0>
 538:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 53c:	0013010b 	andseq	r0, r3, fp, lsl #2
 540:	01171d00 	tsteq	r7, r0, lsl #26
 544:	0b3a0b0b 	bleq	e83178 <__core1_unwind_stub-0x17ce88>
 548:	0b39053b 	bleq	e41a3c <__core1_unwind_stub-0x1be5c4>
 54c:	00001301 	andeq	r1, r0, r1, lsl #6
 550:	03000d1e 	movweq	r0, #3358	; 0xd1e
 554:	3b0b3a0e 	blcc	2ced94 <__core1_unwind_stub-0xd3126c>
 558:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 55c:	1f000013 	svcne	0x00000013
 560:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 564:	00001301 	andeq	r1, r0, r1, lsl #6
 568:	03003420 	movweq	r3, #1056	; 0x420
 56c:	3b0b3a0e 	blcc	2cedac <__core1_unwind_stub-0xd31254>
 570:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 574:	3c193f13 	ldccc	15, cr3, [r9], {19}
 578:	21000019 	tstcs	r0, r9, lsl r0
 57c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 580:	0b3b0b3a 	bleq	ec3270 <__core1_unwind_stub-0x13cd90>
 584:	13490b39 	movtne	r0, #39737	; 0x9b39
 588:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 58c:	34220000 	strtcc	r0, [r2], #-0
 590:	3a0e0300 	bcc	381198 <__core1_unwind_stub-0xc7ee68>
 594:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 598:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 59c:	23000018 	movwcs	r0, #24
 5a0:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 5a4:	0b3b0b3a 	bleq	ec3294 <__core1_unwind_stub-0x13cd6c>
 5a8:	13010b39 	movwne	r0, #6969	; 0x1b39
 5ac:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
 5b0:	03193f00 	tsteq	r9, #0, 30
 5b4:	3b0b3a0e 	blcc	2cedf4 <__core1_unwind_stub-0xd3120c>
 5b8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 5bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5c0:	96184006 	ldrls	r4, [r8], -r6
 5c4:	00001942 	andeq	r1, r0, r2, asr #18
 5c8:	03012e25 	movweq	r2, #7717	; 0x1e25
 5cc:	3b0b3a0e 	blcc	2cee0c <__core1_unwind_stub-0xd311f4>
 5d0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 5d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5d8:	97184006 	ldrls	r4, [r8, -r6]
 5dc:	13011942 	movwne	r1, #6466	; 0x1942
 5e0:	05260000 	streq	r0, [r6, #-0]!
 5e4:	3a0e0300 	bcc	3811ec <__core1_unwind_stub-0xc7ee14>
 5e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5f0:	27000018 	smladcs	r0, r8, r0, r0
 5f4:	0111010b 	tsteq	r1, fp, lsl #2
 5f8:	00000612 	andeq	r0, r0, r2, lsl r6
 5fc:	03003428 	movweq	r3, #1064	; 0x428
 600:	3b0b3a08 	blcc	2cee28 <__core1_unwind_stub-0xd311d8>
 604:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 608:	00180213 	andseq	r0, r8, r3, lsl r2
 60c:	11010000 	mrsne	r0, (UNDEF: 1)
 610:	130e2501 	movwne	r2, #58625	; 0xe501
 614:	1b0e030b 	blne	381248 <__core1_unwind_stub-0xc7edb8>
 618:	1117550e 	tstne	r7, lr, lsl #10
 61c:	00171001 	andseq	r1, r7, r1
 620:	00240200 	eoreq	r0, r4, r0, lsl #4
 624:	0b3e0b0b 	bleq	f83258 <__core1_unwind_stub-0x7cda8>
 628:	00000e03 	andeq	r0, r0, r3, lsl #28
 62c:	0b002403 	bleq	9640 <__core1_unwind_stub-0xff69c0>
 630:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 634:	04000008 	streq	r0, [r0], #-8
 638:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 63c:	0b3b0b3a 	bleq	ec332c <__core1_unwind_stub-0x13ccd4>
 640:	13490b39 	movtne	r0, #39737	; 0x9b39
 644:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 648:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 64c:	03193f00 	tsteq	r9, #0, 30
 650:	3b0b3a0e 	blcc	2cee90 <__core1_unwind_stub-0xd31170>
 654:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 658:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 65c:	97184006 	ldrls	r4, [r8, -r6]
 660:	00001942 	andeq	r1, r0, r2, asr #18
 664:	03012e06 	movweq	r2, #7686	; 0x1e06
 668:	3b0b3a0e 	blcc	2ceea8 <__core1_unwind_stub-0xd31158>
 66c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 670:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 674:	96184006 	ldrls	r4, [r8], -r6
 678:	13011942 	movwne	r1, #6466	; 0x1942
 67c:	0b070000 	bleq	1c0684 <__core1_unwind_stub-0xe3f97c>
 680:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 684:	08000006 	stmdaeq	r0, {r1, r2}
 688:	08030034 	stmdaeq	r3, {r2, r4, r5}
 68c:	0b3b0b3a 	bleq	ec337c <__core1_unwind_stub-0x13cc84>
 690:	13490b39 	movtne	r0, #39737	; 0x9b39
 694:	00001802 	andeq	r1, r0, r2, lsl #16
 698:	0b000f09 	bleq	42c4 <__core1_unwind_stub-0xffbd3c>
 69c:	0013490b 	andseq	r4, r3, fp, lsl #18
 6a0:	11010000 	mrsne	r0, (UNDEF: 1)
 6a4:	130e2501 	movwne	r2, #58625	; 0xe501
 6a8:	1b0e030b 	blne	3812dc <__core1_unwind_stub-0xc7ed24>
 6ac:	1117550e 	tstne	r7, lr, lsl #10
 6b0:	00171001 	andseq	r1, r7, r1
 6b4:	00240200 	eoreq	r0, r4, r0, lsl #4
 6b8:	0b3e0b0b 	bleq	f832ec <__core1_unwind_stub-0x7cd14>
 6bc:	00000803 	andeq	r0, r0, r3, lsl #16
 6c0:	03001603 	movweq	r1, #1539	; 0x603
 6c4:	3b0b3a0e 	blcc	2cef04 <__core1_unwind_stub-0xd310fc>
 6c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6cc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 6d0:	0b0b0024 	bleq	2c0768 <__core1_unwind_stub-0xd3f898>
 6d4:	0e030b3e 	vmoveq.16	d3[0], r0
 6d8:	26050000 	strcs	r0, [r5], -r0
 6dc:	00134900 	andseq	r4, r3, r0, lsl #18
 6e0:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
 6e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6e8:	0b3b0b3a 	bleq	ec33d8 <__core1_unwind_stub-0x13cc28>
 6ec:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 6f0:	01111349 	tsteq	r1, r9, asr #6
 6f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6f8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6fc:	07000013 	smladeq	r0, r3, r0, r0
 700:	08030005 	stmdaeq	r3, {r0, r2}
 704:	0b3b0b3a 	bleq	ec33f4 <__core1_unwind_stub-0x13cc0c>
 708:	13490b39 	movtne	r0, #39737	; 0x9b39
 70c:	00001802 	andeq	r1, r0, r2, lsl #16
 710:	03003408 	movweq	r3, #1032	; 0x408
 714:	3b0b3a08 	blcc	2cef3c <__core1_unwind_stub-0xd310c4>
 718:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 71c:	00180213 	andseq	r0, r8, r3, lsl r2
 720:	010b0900 	tsteq	fp, r0, lsl #18
 724:	06120111 			; <UNDEFINED> instruction: 0x06120111
 728:	00001301 	andeq	r1, r0, r1, lsl #6
 72c:	11010b0a 	tstne	r1, sl, lsl #22
 730:	00061201 	andeq	r1, r6, r1, lsl #4
 734:	000f0b00 	andeq	r0, pc, r0, lsl #22
 738:	00000b0b 	andeq	r0, r0, fp, lsl #22
 73c:	0b000f0c 	bleq	4374 <__core1_unwind_stub-0xffbc8c>
 740:	0013490b 	andseq	r4, r3, fp, lsl #18
 744:	00260d00 	eoreq	r0, r6, r0, lsl #26
 748:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 74c:	03193f01 	tsteq	r9, #1, 30
 750:	3b0b3a0e 	blcc	2cef90 <__core1_unwind_stub-0xd31070>
 754:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 758:	11134919 	tstne	r3, r9, lsl r9
 75c:	40061201 	andmi	r1, r6, r1, lsl #4
 760:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 764:	01000000 	mrseq	r0, (UNDEF: 0)
 768:	06100011 			; <UNDEFINED> instruction: 0x06100011
 76c:	01120111 	tsteq	r2, r1, lsl r1
 770:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 774:	05130e25 	ldreq	r0, [r3, #-3621]	; 0xfffff1db
 778:	01000000 	mrseq	r0, (UNDEF: 0)
 77c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 780:	0e030b13 	vmoveq.32	d3[0], r0
 784:	17550e1b 	smmlane	r5, fp, lr, r0
 788:	17100111 			; <UNDEFINED> instruction: 0x17100111
 78c:	24020000 	strcs	r0, [r2], #-0
 790:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 794:	000e030b 	andeq	r0, lr, fp, lsl #6
 798:	00160300 	andseq	r0, r6, r0, lsl #6
 79c:	0b3a0e03 	bleq	e83fb0 <__core1_unwind_stub-0x17c050>
 7a0:	0b390b3b 	bleq	e43494 <__core1_unwind_stub-0x1bcb6c>
 7a4:	00001349 	andeq	r1, r0, r9, asr #6
 7a8:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
 7ac:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 7b0:	0b0b0024 	bleq	2c0848 <__core1_unwind_stub-0xd3f7b8>
 7b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 7b8:	26060000 	strcs	r0, [r6], -r0
 7bc:	00134900 	andseq	r4, r3, r0, lsl #18
 7c0:	01040700 	tsteq	r4, r0, lsl #14
 7c4:	0b3e0e03 	bleq	f83fd8 <__core1_unwind_stub-0x7c028>
 7c8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 7cc:	0b3b0b3a 	bleq	ec34bc <__core1_unwind_stub-0x13cb44>
 7d0:	13010b39 	movwne	r0, #6969	; 0x1b39
 7d4:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
 7d8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 7dc:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 7e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 7e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7e8:	13490b39 	movtne	r0, #39737	; 0x9b39
 7ec:	130a0000 	movwne	r0, #40960	; 0xa000
 7f0:	0b0e0301 	bleq	3813fc <__core1_unwind_stub-0xc7ec04>
 7f4:	3b0b3a0b 	blcc	2cf028 <__core1_unwind_stub-0xd30fd8>
 7f8:	010b3905 	tsteq	fp, r5, lsl #18
 7fc:	0b000013 	bleq	850 <__core1_unwind_stub-0xfff7b0>
 800:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 804:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 808:	13490b39 	movtne	r0, #39737	; 0x9b39
 80c:	00000b38 	andeq	r0, r0, r8, lsr fp
 810:	03000d0c 	movweq	r0, #3340	; 0xd0c
 814:	3b0b3a0e 	blcc	2cf054 <__core1_unwind_stub-0xd30fac>
 818:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 81c:	000b3813 	andeq	r3, fp, r3, lsl r8
 820:	000f0d00 	andeq	r0, pc, r0, lsl #26
 824:	00000b0b 	andeq	r0, r0, fp, lsl #22
 828:	0b000f0e 	bleq	4468 <__core1_unwind_stub-0xffbb98>
 82c:	0013490b 	andseq	r4, r3, fp, lsl #18
 830:	01170f00 	tsteq	r7, r0, lsl #30
 834:	0b3a0b0b 	bleq	e83468 <__core1_unwind_stub-0x17cb98>
 838:	0b390b3b 	bleq	e4352c <__core1_unwind_stub-0x1bcad4>
 83c:	00001301 	andeq	r1, r0, r1, lsl #6
 840:	03000d10 	movweq	r0, #3344	; 0xd10
 844:	3b0b3a0e 	blcc	2cf084 <__core1_unwind_stub-0xd30f7c>
 848:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 84c:	11000013 	tstne	r0, r3, lsl r0
 850:	13490101 	movtne	r0, #37121	; 0x9101
 854:	00001301 	andeq	r1, r0, r1, lsl #6
 858:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
 85c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 860:	01131300 	tsteq	r3, r0, lsl #6
 864:	0b3a0b0b 	bleq	e83498 <__core1_unwind_stub-0x17cb68>
 868:	0b390b3b 	bleq	e4355c <__core1_unwind_stub-0x1bcaa4>
 86c:	00001301 	andeq	r1, r0, r1, lsl #6
 870:	03000d14 	movweq	r0, #3348	; 0xd14
 874:	3b0b3a0e 	blcc	2cf0b4 <__core1_unwind_stub-0xd30f4c>
 878:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 87c:	000b3813 	andeq	r3, fp, r3, lsl r8
 880:	01131500 	tsteq	r3, r0, lsl #10
 884:	0b0b0e03 	bleq	2c4098 <__core1_unwind_stub-0xd3bf68>
 888:	0b3b0b3a 	bleq	ec3578 <__core1_unwind_stub-0x13ca88>
 88c:	13010b39 	movwne	r0, #6969	; 0x1b39
 890:	0d160000 	ldceq	0, cr0, [r6, #-0]
 894:	3a080300 	bcc	20149c <__core1_unwind_stub-0xdfeb64>
 898:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 89c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 8a0:	1700000b 	strne	r0, [r0, -fp]
 8a4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 8a8:	0b3a050b 	bleq	e81cdc <__core1_unwind_stub-0x17e324>
 8ac:	0b390b3b 	bleq	e435a0 <__core1_unwind_stub-0x1bca60>
 8b0:	00001301 	andeq	r1, r0, r1, lsl #6
 8b4:	03000d18 	movweq	r0, #3352	; 0xd18
 8b8:	3b0b3a0e 	blcc	2cf0f8 <__core1_unwind_stub-0xd30f08>
 8bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 8c0:	00053813 	andeq	r3, r5, r3, lsl r8
 8c4:	00151900 	andseq	r1, r5, r0, lsl #18
 8c8:	00001927 	andeq	r1, r0, r7, lsr #18
 8cc:	2701151a 	smladcs	r1, sl, r5, r1
 8d0:	01134919 	tsteq	r3, r9, lsl r9
 8d4:	1b000013 	blne	928 <__core1_unwind_stub-0xfff6d8>
 8d8:	13490005 	movtne	r0, #36869	; 0x9005
 8dc:	131c0000 	tstne	ip, #0
 8e0:	0b0e0301 	bleq	3814ec <__core1_unwind_stub-0xc7eb14>
 8e4:	3b0b3a05 	blcc	2cf100 <__core1_unwind_stub-0xd30f00>
 8e8:	010b3905 	tsteq	fp, r5, lsl #18
 8ec:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 8f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 8f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 8f8:	13490b39 	movtne	r0, #39737	; 0x9b39
 8fc:	00000538 	andeq	r0, r0, r8, lsr r5
 900:	0b01131e 	bleq	45580 <__core1_unwind_stub-0xfbaa80>
 904:	3b0b3a0b 	blcc	2cf138 <__core1_unwind_stub-0xd30ec8>
 908:	010b3905 	tsteq	fp, r5, lsl #18
 90c:	1f000013 	svcne	0x00000013
 910:	0b0b0117 	bleq	2c0d74 <__core1_unwind_stub-0xd3f28c>
 914:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 918:	13010b39 	movwne	r0, #6969	; 0x1b39
 91c:	0d200000 	stceq	0, cr0, [r0, #-0]
 920:	3a0e0300 	bcc	381528 <__core1_unwind_stub-0xc7ead8>
 924:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 928:	0013490b 	andseq	r4, r3, fp, lsl #18
 92c:	00132100 	andseq	r2, r3, r0, lsl #2
 930:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
 934:	15220000 	strne	r0, [r2, #-0]!
 938:	01192701 	tsteq	r9, r1, lsl #14
 93c:	23000013 	movwcs	r0, #19
 940:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 944:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 948:	13490b39 	movtne	r0, #39737	; 0x9b39
 94c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 950:	34240000 	strtcc	r0, [r4], #-0
 954:	3a0e0300 	bcc	38155c <__core1_unwind_stub-0xc7eaa4>
 958:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 95c:	3f13490b 	svccc	0x0013490b
 960:	00193c19 	andseq	r3, r9, r9, lsl ip
 964:	00212500 	eoreq	r2, r1, r0, lsl #10
 968:	052f1349 	streq	r1, [pc, #-841]!	; 627 <__core1_unwind_stub-0xfff9d9>
 96c:	34260000 	strtcc	r0, [r6], #-0
 970:	3a0e0300 	bcc	381578 <__core1_unwind_stub-0xc7ea88>
 974:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 978:	8813490b 	ldmdahi	r3, {r0, r1, r3, r8, fp, lr}
 97c:	18020501 	stmdane	r2, {r0, r8, sl}
 980:	34270000 	strtcc	r0, [r7], #-0
 984:	3a0e0300 	bcc	38158c <__core1_unwind_stub-0xc7ea74>
 988:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 98c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 990:	28000018 	stmdacs	r0, {r3, r4}
 994:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 998:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 99c:	13490b39 	movtne	r0, #39737	; 0x9b39
 9a0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 9a4:	34290000 	strtcc	r0, [r9], #-0
 9a8:	3a0e0300 	bcc	3815b0 <__core1_unwind_stub-0xc7ea50>
 9ac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 9b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9b4:	2a000018 	bcs	a1c <__core1_unwind_stub-0xfff5e4>
 9b8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 9bc:	0b3a0e03 	bleq	e841d0 <__core1_unwind_stub-0x17be30>
 9c0:	0b39053b 	bleq	e41eb4 <__core1_unwind_stub-0x1be14c>
 9c4:	13491927 	movtne	r1, #39207	; 0x9927
 9c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9d0:	2b000019 	blcs	a3c <__core1_unwind_stub-0xfff5c4>
 9d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9d8:	0b3a0e03 	bleq	e841ec <__core1_unwind_stub-0x17be14>
 9dc:	0b39053b 	bleq	e41ed0 <__core1_unwind_stub-0x1be130>
 9e0:	13491927 	movtne	r1, #39207	; 0x9927
 9e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9e8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 9ec:	00130119 	andseq	r0, r3, r9, lsl r1
 9f0:	00342c00 	eorseq	r2, r4, r0, lsl #24
 9f4:	0b3a0803 	bleq	e82a08 <__core1_unwind_stub-0x17d5f8>
 9f8:	0b39053b 	bleq	e41eec <__core1_unwind_stub-0x1be114>
 9fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 a00:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
 a04:	03193f01 	tsteq	r9, #1, 30
 a08:	3b0b3a0e 	blcc	2cf248 <__core1_unwind_stub-0xd30db8>
 a0c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 a10:	11134919 	tstne	r3, r9, lsl r9
 a14:	40061201 	andmi	r1, r6, r1, lsl #4
 a18:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 a1c:	00001301 	andeq	r1, r0, r1, lsl #6
 a20:	3f012e2e 	svccc	0x00012e2e
 a24:	3a0e0319 	bcc	381690 <__core1_unwind_stub-0xc7e970>
 a28:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 a2c:	1119270b 	tstne	r9, fp, lsl #14
 a30:	40061201 	andmi	r1, r6, r1, lsl #4
 a34:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 a38:	00001301 	andeq	r1, r0, r1, lsl #6
 a3c:	0300052f 	movweq	r0, #1327	; 0x52f
 a40:	3b0b3a0e 	blcc	2cf280 <__core1_unwind_stub-0xd30d80>
 a44:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 a48:	00180213 	andseq	r0, r8, r3, lsl r2
 a4c:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
 a50:	0b3a0e03 	bleq	e84264 <__core1_unwind_stub-0x17bd9c>
 a54:	0b39053b 	bleq	e41f48 <__core1_unwind_stub-0x1be0b8>
 a58:	13491927 	movtne	r1, #39207	; 0x9927
 a5c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a60:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 a64:	00130119 	andseq	r0, r3, r9, lsl r1
 a68:	010b3100 	mrseq	r3, (UNDEF: 27)
 a6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a70:	00001301 	andeq	r1, r0, r1, lsl #6
 a74:	11010b32 	tstne	r1, r2, lsr fp
 a78:	00061201 	andeq	r1, r6, r1, lsl #4
 a7c:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
 a80:	0b3a0e03 	bleq	e84294 <__core1_unwind_stub-0x17bd6c>
 a84:	0b390b3b 	bleq	e43778 <__core1_unwind_stub-0x1bc888>
 a88:	01111927 	tsteq	r1, r7, lsr #18
 a8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 a90:	01194296 			; <UNDEFINED> instruction: 0x01194296
 a94:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
 a98:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 a9c:	0b3b0b3a 	bleq	ec378c <__core1_unwind_stub-0x13c874>
 aa0:	13490b39 	movtne	r0, #39737	; 0x9b39
 aa4:	00001802 	andeq	r1, r0, r2, lsl #16
 aa8:	3f012e35 	svccc	0x00012e35
 aac:	3a0e0319 	bcc	381718 <__core1_unwind_stub-0xc7e8e8>
 ab0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ab4:	1119270b 	tstne	r9, fp, lsl #14
 ab8:	40061201 	andmi	r1, r6, r1, lsl #4
 abc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 ac0:	00001301 	andeq	r1, r0, r1, lsl #6
 ac4:	03003436 	movweq	r3, #1078	; 0x436
 ac8:	3b0b3a08 	blcc	2cf2f0 <__core1_unwind_stub-0xd30d10>
 acc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 ad0:	00180213 	andseq	r0, r8, r3, lsl r2
 ad4:	010b3700 	tsteq	fp, r0, lsl #14
 ad8:	00001755 	andeq	r1, r0, r5, asr r7
 adc:	3f012e38 	svccc	0x00012e38
 ae0:	3a0e0319 	bcc	38174c <__core1_unwind_stub-0xc7e8b4>
 ae4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ae8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 aec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 af0:	96184006 	ldrls	r4, [r8], -r6
 af4:	13011942 	movwne	r1, #6466	; 0x1942
 af8:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
 afc:	03193f01 	tsteq	r9, #1, 30
 b00:	3b0b3a0e 	blcc	2cf340 <__core1_unwind_stub-0xd30cc0>
 b04:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 b08:	11134919 	tstne	r3, r9, lsl r9
 b0c:	40061201 	andmi	r1, r6, r1, lsl #4
 b10:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 b14:	00001301 	andeq	r1, r0, r1, lsl #6
 b18:	03012e3a 	movweq	r2, #7738	; 0x1e3a
 b1c:	3b0b3a0e 	blcc	2cf35c <__core1_unwind_stub-0xd30ca4>
 b20:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 b24:	11134919 	tstne	r3, r9, lsl r9
 b28:	40061201 	andmi	r1, r6, r1, lsl #4
 b2c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 b30:	00001301 	andeq	r1, r0, r1, lsl #6
 b34:	03012e3b 	movweq	r2, #7739	; 0x1e3b
 b38:	3b0b3a0e 	blcc	2cf378 <__core1_unwind_stub-0xd30c88>
 b3c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 b40:	11134919 	tstne	r3, r9, lsl r9
 b44:	40061201 	andmi	r1, r6, r1, lsl #4
 b48:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 b4c:	00001301 	andeq	r1, r0, r1, lsl #6
 b50:	03012e3c 	movweq	r2, #7740	; 0x1e3c
 b54:	3b0b3a0e 	blcc	2cf394 <__core1_unwind_stub-0xd30c6c>
 b58:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 b5c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 b60:	97184006 	ldrls	r4, [r8, -r6]
 b64:	13011942 	movwne	r1, #6466	; 0x1942
 b68:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
 b6c:	3a080300 	bcc	201774 <__core1_unwind_stub-0xdfe88c>
 b70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b74:	1119270b 	tstne	r9, fp, lsl #14
 b78:	40061201 	andmi	r1, r6, r1, lsl #4
 b7c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 b80:	01000000 	mrseq	r0, (UNDEF: 0)
 b84:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 b88:	0e030b13 	vmoveq.32	d3[0], r0
 b8c:	01110e1b 	tsteq	r1, fp, lsl lr
 b90:	17100612 			; <UNDEFINED> instruction: 0x17100612
 b94:	24020000 	strcs	r0, [r2], #-0
 b98:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b9c:	000e030b 	andeq	r0, lr, fp, lsl #6
 ba0:	00240300 	eoreq	r0, r4, r0, lsl #6
 ba4:	0b3e0b0b 	bleq	f837d8 <__core1_unwind_stub-0x7c828>
 ba8:	00000803 	andeq	r0, r0, r3, lsl #16
 bac:	03001604 	movweq	r1, #1540	; 0x604
 bb0:	3b0b3a0e 	blcc	2cf3f0 <__core1_unwind_stub-0xd30c10>
 bb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 bb8:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 bbc:	0b0b000f 	bleq	2c0c00 <__core1_unwind_stub-0xd3f400>
 bc0:	00001349 	andeq	r1, r0, r9, asr #6
 bc4:	27011506 	strcs	r1, [r1, -r6, lsl #10]
 bc8:	01134919 	tsteq	r3, r9, lsl r9
 bcc:	07000013 	smladeq	r0, r3, r0, r0
 bd0:	13490005 	movtne	r0, #36869	; 0x9005
 bd4:	26080000 	strcs	r0, [r8], -r0
 bd8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 bdc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 be0:	0b3b0b3a 	bleq	ec38d0 <__core1_unwind_stub-0x13c730>
 be4:	13490b39 	movtne	r0, #39737	; 0x9b39
 be8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 bec:	040a0000 	streq	r0, [sl], #-0
 bf0:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
 bf4:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 bf8:	3b0b3a13 	blcc	2cf44c <__core1_unwind_stub-0xd30bb4>
 bfc:	010b390b 	tsteq	fp, fp, lsl #18
 c00:	0b000013 	bleq	c54 <__core1_unwind_stub-0xfff3ac>
 c04:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 c08:	00000b1c 	andeq	r0, r0, ip, lsl fp
 c0c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
 c10:	00130113 	andseq	r0, r3, r3, lsl r1
 c14:	00210d00 	eoreq	r0, r1, r0, lsl #26
 c18:	260e0000 	strcs	r0, [lr], -r0
 c1c:	00134900 	andseq	r4, r3, r0, lsl #18
 c20:	00340f00 	eorseq	r0, r4, r0, lsl #30
 c24:	0b3a0e03 	bleq	e84438 <__core1_unwind_stub-0x17bbc8>
 c28:	0b39053b 	bleq	e4211c <__core1_unwind_stub-0x1bdee4>
 c2c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 c30:	0000193c 	andeq	r1, r0, ip, lsr r9
 c34:	03001310 	movweq	r1, #784	; 0x310
 c38:	00193c0e 	andseq	r3, r9, lr, lsl #24
 c3c:	00151100 	andseq	r1, r5, r0, lsl #2
 c40:	00001927 	andeq	r1, r0, r7, lsr #18
 c44:	03001712 	movweq	r1, #1810	; 0x712
 c48:	00193c0e 	andseq	r3, r9, lr, lsl #24
 c4c:	01131300 	tsteq	r3, r0, lsl #6
 c50:	0b0b0e03 	bleq	2c4464 <__core1_unwind_stub-0xd3bb9c>
 c54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 c58:	13010b39 	movwne	r0, #6969	; 0x1b39
 c5c:	0d140000 	ldceq	0, cr0, [r4, #-0]
 c60:	3a0e0300 	bcc	381868 <__core1_unwind_stub-0xc7e798>
 c64:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 c68:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 c6c:	1500000b 	strne	r0, [r0, #-11]
 c70:	13490021 	movtne	r0, #36897	; 0x9021
 c74:	00000b2f 	andeq	r0, r0, pc, lsr #22
 c78:	03010416 	movweq	r0, #5142	; 0x1416
 c7c:	0b0b3e0e 	bleq	2d04bc <__core1_unwind_stub-0xd2fb44>
 c80:	3a13490b 	bcc	4d30b4 <__core1_unwind_stub-0xb2cf4c>
 c84:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 c88:	0013010b 	andseq	r0, r3, fp, lsl #2
 c8c:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 c90:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 c94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 c98:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 c9c:	01111349 	tsteq	r1, r9, asr #6
 ca0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 ca4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 ca8:	18000013 	stmdane	r0, {r0, r1, r4}
 cac:	08030005 	stmdaeq	r3, {r0, r2}
 cb0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 cb4:	13490b39 	movtne	r0, #39737	; 0x9b39
 cb8:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
 cbc:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
 cc0:	08030005 	stmdaeq	r3, {r0, r2}
 cc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 cc8:	13490b39 	movtne	r0, #39737	; 0x9b39
 ccc:	00001802 	andeq	r1, r0, r2, lsl #16
 cd0:	0300341a 	movweq	r3, #1050	; 0x41a
 cd4:	3b0b3a08 	blcc	2cf4fc <__core1_unwind_stub-0xd30b04>
 cd8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 cdc:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
 ce0:	00001742 	andeq	r1, r0, r2, asr #14
 ce4:	00110100 	andseq	r0, r1, r0, lsl #2
 ce8:	01110610 	tsteq	r1, r0, lsl r6
 cec:	0e030112 	mcreq	1, 0, r0, cr3, cr2, {0}
 cf0:	0e250e1b 	mcreq	14, 1, r0, cr5, cr11, {0}
 cf4:	00000513 	andeq	r0, r0, r3, lsl r5
 cf8:	00110100 	andseq	r0, r1, r0, lsl #2
 cfc:	01110610 	tsteq	r1, r0, lsl r6
 d00:	0e030112 	mcreq	1, 0, r0, cr3, cr2, {0}
 d04:	0e250e1b 	mcreq	14, 1, r0, cr5, cr11, {0}
 d08:	00000513 	andeq	r0, r0, r3, lsl r5
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
{
   0:	00000114 	andeq	r0, r0, r4, lsl r1
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	01000004 	tsteq	r0, r4
  14:	00000024 	andeq	r0, r0, r4, lsr #32
    uint8_t *d = (uint8_t *)dst;
  18:	01000028 	tsteq	r0, r8, lsr #32
  1c:	0000001c 	andeq	r0, r0, ip, lsl r0
    const uint8_t *s = (const uint8_t *)src;
  20:	00000000 	andeq	r0, r0, r0
  24:	0000001c 	andeq	r0, r0, ip, lsl r0
    if (d == s || n == 0) return dst;
  28:	01000044 	tsteq	r0, r4, asr #32
  2c:	0000008c 	andeq	r0, r0, ip, lsl #1
  30:	00000000 	andeq	r0, r0, r0
  34:	00000150 	andeq	r0, r0, r0, asr r1
  38:	00000000 	andeq	r0, r0, r0
  3c:	00000168 	andeq	r0, r0, r8, ror #2
  40:	00000000 	andeq	r0, r0, r0
  44:	00000068 	andeq	r0, r0, r8, rrx
  48:	010000d0 	ldrdeq	r0, [r0, -r0]
    if (d < s) {
  4c:	00000050 	andeq	r0, r0, r0, asr r0
  50:	00000000 	andeq	r0, r0, r0
  54:	00000074 	andeq	r0, r0, r4, ror r0
  58:	01000120 	tsteq	r0, r0, lsr #2
        for (size_t i = 0; i < n; ++i) d[i] = s[i];
  5c:	000000e0 	andeq	r0, r0, r0, ror #1
  60:	00000000 	andeq	r0, r0, r0
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	0000007c 	andeq	r0, r0, ip, ror r0
  70:	01000200 	mrseq	r0, R8_usr
  74:	000000b4 	strheq	r0, [r0], -r4
  78:	010002b4 			; <UNDEFINED> instruction: 0x010002b4
  7c:	000000e0 	andeq	r0, r0, r0, ror #1
  80:	00000000 	andeq	r0, r0, r0
  84:	00000078 	andeq	r0, r0, r8, ror r0
  88:	01000394 			; <UNDEFINED> instruction: 0x01000394
  8c:	00000034 	andeq	r0, r0, r4, lsr r0
  90:	00000000 	andeq	r0, r0, r0
  94:	00000034 	andeq	r0, r0, r4, lsr r0
  98:	010003c8 	smlabteq	r0, r8, r3, r0
  9c:	00000068 	andeq	r0, r0, r8, rrx
  a0:	01000430 	tsteq	r0, r0, lsr r4
  a4:	00000328 	andeq	r0, r0, r8, lsr #6
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  a8:	01000758 	tsteq	r0, r8, asr r7
  ac:	00000068 	andeq	r0, r0, r8, rrx
  b0:	010007c0 	smlabteq	r0, r0, r7, r0
  b4:	00000060 	andeq	r0, r0, r0, rrx
  b8:	01000820 	tsteq	r0, r0, lsr #16
  bc:	00000124 	andeq	r0, r0, r4, lsr #2
  c0:	01000944 	tsteq	r0, r4, asr #18
  c4:	00000124 	andeq	r0, r0, r4, lsr #2
  c8:	01000a68 	tsteq	r0, r8, ror #20
  cc:	0000010c 	andeq	r0, r0, ip, lsl #2
  d0:	01000b74 	tsteq	r0, r4, ror fp
  d4:	00000110 	andeq	r0, r0, r0, lsl r1
  d8:	01000c84 	smlabbeq	r0, r4, ip, r0
  dc:	00000048 	andeq	r0, r0, r8, asr #32
  e0:	01000ccc 	smlabteq	r0, ip, ip, r0
  e4:	00000dd8 	ldrdeq	r0, [r0], -r8
  e8:	01001aa4 	smlatbeq	r0, r4, sl, r1
  ec:	0000013c 	andeq	r0, r0, ip, lsr r1
  f0:	00000000 	andeq	r0, r0, r0
    return dst;
  f4:	00000184 	andeq	r0, r0, r4, lsl #3
}
  f8:	00000000 	andeq	r0, r0, r0
  fc:	000000e0 	andeq	r0, r0, r0, ror #1
 100:	00000000 	andeq	r0, r0, r0
 104:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
 108:	00000000 	andeq	r0, r0, r0
 10c:	00000044 	andeq	r0, r0, r4, asr #32
	...
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
 118:	0000002c 	andeq	r0, r0, ip, lsr #32
 11c:	1cf00002 	ldclne	0, cr0, [r0], #8
 120:	00040000 	andeq	r0, r4, r0
 124:	00000000 	andeq	r0, r0, r0
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 128:	01001be0 	smlatteq	r0, r0, fp, r1
 12c:	0000005c 	andeq	r0, r0, ip, asr r0
 130:	01001c3c 	tsteq	r0, ip, lsr ip
 134:	0000002c 	andeq	r0, r0, ip, lsr #32
 138:	01001c68 	tsteq	r0, r8, ror #24
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 148:	00000024 	andeq	r0, r0, r4, lsr #32
 14c:	27fd0002 	ldrbcs	r0, [sp, r2]!
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	01001d08 	tsteq	r0, r8, lsl #26
 15c:	00000050 	andeq	r0, r0, r0, asr r0
 160:	01001d58 	tsteq	r0, r8, asr sp
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	0000000c 	andeq	r0, r0, ip
	...
 170:	0000002c 	andeq	r0, r0, ip, lsr #32
 174:	28f70002 	ldmcs	r7!, {r1}^
    return ALT_E_SUCCESS;
 178:	00040000 	andeq	r0, r4, r0
}
 17c:	00000000 	andeq	r0, r0, r0
 180:	01001d68 	tsteq	r0, r8, ror #26
 184:	00000074 	andeq	r0, r0, r4, ror r0
    while (coalesce->size)
 188:	01001ddc 	ldrdeq	r1, [r0, -ip]
 18c:	00000084 	andeq	r0, r0, r4, lsl #1
            break;
 190:	00000000 	andeq	r0, r0, r0
    *segpa   = thissegpa;
 194:	00000108 	andeq	r0, r0, r8, lsl #2
	...
    *segsize = thissegsize;
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	2b070002 	blcs	1c01b4 <__core1_unwind_stub-0xe3fe4c>
 1a8:	00040000 	andeq	r0, r4, r0
    return ALT_E_SUCCESS;
 1ac:	00000000 	andeq	r0, r0, r0
}
 1b0:	01000000 	mrseq	r0, (UNDEF: 0)
 1b4:	00000004 	andeq	r0, r0, r4
	...
 1c0:	000000b4 	strheq	r0, [r0], -r4
 1c4:	2b2d0002 	blcs	b401d4 <__core1_unwind_stub-0x4bfe2c>
 1c8:	00040000 	andeq	r0, r4, r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	01001e60 	tsteq	r0, r0, ror #28
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	01001e7c 	tsteq	r0, ip, ror lr
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	01001e98 			; <UNDEFINED> instruction: 0x01001e98
 1e4:	00000054 	andeq	r0, r0, r4, asr r0
 1e8:	01001eec 	smlatteq	r0, ip, lr, r1
 1ec:	00000064 	andeq	r0, r0, r4, rrx
 1f0:	01001f50 	tsteq	r0, r0, asr pc
 1f4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1f8:	01002020 	tsteq	r0, r0, lsr #32
 1fc:	00000118 	andeq	r0, r0, r8, lsl r1
 200:	00000000 	andeq	r0, r0, r0
 204:	0000005c 	andeq	r0, r0, ip, asr r0
 208:	01002138 	tsteq	r0, r8, lsr r1
 20c:	0000003c 	andeq	r0, r0, ip, lsr r0
 210:	00000000 	andeq	r0, r0, r0
 214:	00000030 	andeq	r0, r0, r0, lsr r0
 218:	00000000 	andeq	r0, r0, r0
 21c:	000000dc 	ldrdeq	r0, [r0], -ip
 220:	00000000 	andeq	r0, r0, r0
 224:	00000090 	muleq	r0, r0, r0
 228:	00000000 	andeq	r0, r0, r0
 22c:	00000084 	andeq	r0, r0, r4, lsl #1
 230:	00000000 	andeq	r0, r0, r0
 234:	00000028 	andeq	r0, r0, r8, lsr #32
 238:	00000000 	andeq	r0, r0, r0
 23c:	000000ec 	andeq	r0, r0, ip, ror #1
 240:	00000000 	andeq	r0, r0, r0
 244:	0000006c 	andeq	r0, r0, ip, rrx
 248:	00000000 	andeq	r0, r0, r0
 24c:	00000044 	andeq	r0, r0, r4, asr #32
 250:	00000000 	andeq	r0, r0, r0
 254:	00000088 	andeq	r0, r0, r8, lsl #1
 258:	00000000 	andeq	r0, r0, r0
 25c:	0000006c 	andeq	r0, r0, ip, rrx
 260:	00000000 	andeq	r0, r0, r0
 264:	00000188 	andeq	r0, r0, r8, lsl #3
 268:	00000000 	andeq	r0, r0, r0
 26c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	3d730002 	ldclcc	0, cr0, [r3, #-8]!
 280:	00040000 	andeq	r0, r4, r0
 284:	00000000 	andeq	r0, r0, r0
 288:	01002174 	tsteq	r0, r4, ror r1
 28c:	00000130 	andeq	r0, r0, r0, lsr r1
	...
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	475c0002 	ldrbmi	r0, [ip, -r2]
 2a0:	00040000 	andeq	r0, r4, r0
 2a4:	00000000 	andeq	r0, r0, r0
 2a8:	010022a4 	smlatbeq	r0, r4, r2, r2
 2ac:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	47820002 	strmi	r0, [r2, r2]
 2c0:	00040000 	andeq	r0, r4, r0
 2c4:	00000000 	andeq	r0, r0, r0
 2c8:	010022cc 	smlabteq	r0, ip, r2, r2
 2cc:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
{
   0:	00000001 	andeq	r0, r0, r1
   4:	00000001 	andeq	r0, r0, r1
   8:	00000001 	andeq	r0, r0, r1
   c:	00000001 	andeq	r0, r0, r1
	...
    uint8_t *d = (uint8_t *)dst;
  18:	01000004 	tsteq	r0, r4
  1c:	01000028 	tsteq	r0, r8, lsr #32
    const uint8_t *s = (const uint8_t *)src;
  20:	01000028 	tsteq	r0, r8, lsr #32
  24:	01000044 	tsteq	r0, r4, asr #32
    if (d == s || n == 0) return dst;
  28:	00000001 	andeq	r0, r0, r1
  2c:	00000001 	andeq	r0, r0, r1
  30:	01000044 	tsteq	r0, r4, asr #32
  34:	010000d0 	ldrdeq	r0, [r0, -r0]
  38:	00000001 	andeq	r0, r0, r1
  3c:	00000001 	andeq	r0, r0, r1
  40:	00000001 	andeq	r0, r0, r1
  44:	00000001 	andeq	r0, r0, r1
  48:	00000001 	andeq	r0, r0, r1
    if (d < s) {
  4c:	00000001 	andeq	r0, r0, r1
  50:	010000d0 	ldrdeq	r0, [r0, -r0]
  54:	01000120 	tsteq	r0, r0, lsr #2
  58:	00000001 	andeq	r0, r0, r1
        for (size_t i = 0; i < n; ++i) d[i] = s[i];
  5c:	00000001 	andeq	r0, r0, r1
  60:	01000120 	tsteq	r0, r0, lsr #2
  64:	01000200 	mrseq	r0, R8_usr
  68:	00000001 	andeq	r0, r0, r1
  6c:	00000001 	andeq	r0, r0, r1
  70:	00000001 	andeq	r0, r0, r1
  74:	00000001 	andeq	r0, r0, r1
  78:	01000200 	mrseq	r0, R8_usr
  7c:	010002b4 			; <UNDEFINED> instruction: 0x010002b4
  80:	010002b4 			; <UNDEFINED> instruction: 0x010002b4
  84:	01000394 			; <UNDEFINED> instruction: 0x01000394
  88:	00000001 	andeq	r0, r0, r1
  8c:	00000001 	andeq	r0, r0, r1
  90:	01000394 			; <UNDEFINED> instruction: 0x01000394
  94:	010003c8 	smlabteq	r0, r8, r3, r0
  98:	00000001 	andeq	r0, r0, r1
  9c:	00000001 	andeq	r0, r0, r1
  a0:	010003c8 	smlabteq	r0, r8, r3, r0
  a4:	01000430 	tsteq	r0, r0, lsr r4
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  a8:	01000430 	tsteq	r0, r0, lsr r4
  ac:	01000758 	tsteq	r0, r8, asr r7
  b0:	01000758 	tsteq	r0, r8, asr r7
  b4:	010007c0 	smlabteq	r0, r0, r7, r0
  b8:	010007c0 	smlabteq	r0, r0, r7, r0
  bc:	01000820 	tsteq	r0, r0, lsr #16
  c0:	01000820 	tsteq	r0, r0, lsr #16
  c4:	01000944 	tsteq	r0, r4, asr #18
  c8:	01000944 	tsteq	r0, r4, asr #18
  cc:	01000a68 	tsteq	r0, r8, ror #20
  d0:	01000a68 	tsteq	r0, r8, ror #20
  d4:	01000b74 	tsteq	r0, r4, ror fp
  d8:	01000b74 	tsteq	r0, r4, ror fp
  dc:	01000c84 	smlabbeq	r0, r4, ip, r0
  e0:	01000c84 	smlabbeq	r0, r4, ip, r0
  e4:	01000ccc 	smlabteq	r0, ip, ip, r0
  e8:	01000ccc 	smlabteq	r0, ip, ip, r0
  ec:	01001aa4 	smlatbeq	r0, r4, sl, r1
  f0:	01001aa4 	smlatbeq	r0, r4, sl, r1
    return dst;
  f4:	01001be0 	smlatteq	r0, r0, fp, r1
}
  f8:	00000001 	andeq	r0, r0, r1
  fc:	00000001 	andeq	r0, r0, r1
 100:	00000001 	andeq	r0, r0, r1
 104:	00000001 	andeq	r0, r0, r1
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
 108:	00000001 	andeq	r0, r0, r1
 10c:	00000001 	andeq	r0, r0, r1
 110:	00000001 	andeq	r0, r0, r1
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
 114:	00000001 	andeq	r0, r0, r1
	...
 120:	01001be0 	smlatteq	r0, r0, fp, r1
 124:	01001c3c 	tsteq	r0, ip, lsr ip
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 128:	01001c3c 	tsteq	r0, ip, lsr ip
 12c:	01001c68 	tsteq	r0, r8, ror #24
 130:	01001c68 	tsteq	r0, r8, ror #24
 134:	01001d08 	tsteq	r0, r8, lsl #26
	...
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 140:	01001d08 	tsteq	r0, r8, lsl #26
 144:	01001d58 	tsteq	r0, r8, asr sp
 148:	01001d58 	tsteq	r0, r8, asr sp
 14c:	01001d64 	tsteq	r0, r4, ror #26
	...
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 158:	01001d68 	tsteq	r0, r8, ror #26
 15c:	01001ddc 	ldrdeq	r1, [r0, -ip]
 160:	01001ddc 	ldrdeq	r1, [r0, -ip]
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	01001e60 	tsteq	r0, r0, ror #28
 168:	00000001 	andeq	r0, r0, r1
 16c:	00000001 	andeq	r0, r0, r1
	...
    return ALT_E_SUCCESS;
 178:	00000001 	andeq	r0, r0, r1
}
 17c:	00000001 	andeq	r0, r0, r1
 180:	00000001 	andeq	r0, r0, r1
 184:	00000001 	andeq	r0, r0, r1
	...
            break;
 190:	01001e60 	tsteq	r0, r0, ror #28
    *segpa   = thissegpa;
 194:	01001e7c 	tsteq	r0, ip, ror lr
 198:	01001e7c 	tsteq	r0, ip, ror lr
 19c:	01001e98 			; <UNDEFINED> instruction: 0x01001e98
    *segsize = thissegsize;
 1a0:	01001e98 			; <UNDEFINED> instruction: 0x01001e98
 1a4:	01001eec 	smlatteq	r0, ip, lr, r1
 1a8:	01001eec 	smlatteq	r0, ip, lr, r1
    return ALT_E_SUCCESS;
 1ac:	01001f50 	tsteq	r0, r0, asr pc
}
 1b0:	01001f50 	tsteq	r0, r0, asr pc
 1b4:	01002020 	tsteq	r0, r0, lsr #32
 1b8:	01002020 	tsteq	r0, r0, lsr #32
 1bc:	01002138 	tsteq	r0, r8, lsr r1
 1c0:	00000001 	andeq	r0, r0, r1
 1c4:	00000001 	andeq	r0, r0, r1
 1c8:	01002138 	tsteq	r0, r8, lsr r1
 1cc:	01002174 	tsteq	r0, r4, ror r1
 1d0:	00000001 	andeq	r0, r0, r1
 1d4:	00000001 	andeq	r0, r0, r1
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	00000001 	andeq	r0, r0, r1
 1e4:	00000001 	andeq	r0, r0, r1
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	00000001 	andeq	r0, r0, r1
 1f0:	00000001 	andeq	r0, r0, r1
 1f4:	00000001 	andeq	r0, r0, r1
 1f8:	00000001 	andeq	r0, r0, r1
 1fc:	00000001 	andeq	r0, r0, r1
 200:	00000001 	andeq	r0, r0, r1
 204:	00000001 	andeq	r0, r0, r1
 208:	00000001 	andeq	r0, r0, r1
 20c:	00000001 	andeq	r0, r0, r1
 210:	00000001 	andeq	r0, r0, r1
 214:	00000001 	andeq	r0, r0, r1
 218:	00000001 	andeq	r0, r0, r1
 21c:	00000001 	andeq	r0, r0, r1
 220:	00000001 	andeq	r0, r0, r1
 224:	00000001 	andeq	r0, r0, r1
 228:	00000001 	andeq	r0, r0, r1
 22c:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
{
       0:	00000e43 	andeq	r0, r0, r3, asr #28
       4:	00ff0003 	rscseq	r0, pc, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    uint8_t *d = (uint8_t *)dst;
      18:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
      1c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    const uint8_t *s = (const uint8_t *)src;
      20:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      24:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    if (d == s || n == 0) return dst;
      28:	6c776800 	ldclvs	8, cr6, [r7], #-0
      2c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
      30:	682f6372 	stmdavs	pc!, {r1, r4, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
      34:	72676d77 	rsbvc	r6, r7, #7616	; 0x1dc0
      38:	73752f00 	cmnvc	r5, #0, 30
      3c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
      40:	63672f62 	cmnvs	r7, #392	; 0x188
      44:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
      48:	6f6e2d6d 	svcvs	0x006e2d6d
    if (d < s) {
      4c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
      50:	2f696261 	svccs	0x00696261
      54:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
      58:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
        for (size_t i = 0; i < n; ++i) d[i] = s[i];
      5c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      60:	752f0065 	strvc	r0, [pc, #-101]!	; 3 <__core1_unwind_stub-0xfffffd>
      64:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
      68:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
      6c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
      70:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
      74:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
      78:	752f0073 	strvc	r0, [pc, #-115]!	; d <__core1_unwind_stub-0xfffff3>
      7c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
      80:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
      84:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
      88:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
      8c:	61000062 	tstvs	r0, r2, rrx
      90:	705f746c 	subsvc	r7, pc, ip, ror #8
      94:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
      98:	00682e66 	rsbeq	r2, r8, r6, ror #28
      9c:	61000001 	tstvs	r0, r1
      a0:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; fffffef8 <__shm_end__+0xbffffef8>
      a4:	632e756d 			; <UNDEFINED> instruction: 0x632e756d
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      a8:	00000200 	andeq	r0, r0, r0, lsl #4
      ac:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
      b0:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
      b4:	00000300 	andeq	r0, r0, r0, lsl #6
      b8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
      bc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
      c0:	00000300 	andeq	r0, r0, r0, lsl #6
      c4:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
      c8:	00682e62 	rsbeq	r2, r8, r2, ror #28
      cc:	61000001 	tstvs	r0, r1
      d0:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; ffffff28 <__shm_end__+0xbfffff28>
      d4:	682e756d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}
      d8:	00000100 	andeq	r0, r0, r0, lsl #2
      dc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
      e0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
      e4:	00000400 	andeq	r0, r0, r0, lsl #8
      e8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
      ec:	00682e74 	rsbeq	r2, r8, r4, ror lr
      f0:	6c000004 	stcvs	0, cr0, [r0], {4}
    return dst;
      f4:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
}
      f8:	00040068 	andeq	r0, r4, r8, rrx
      fc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     100:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     104:	00000500 	andeq	r0, r0, r0, lsl #10
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
     108:	00510500 	subseq	r0, r1, r0, lsl #10
     10c:	00040205 	andeq	r0, r4, r5, lsl #4
     110:	38030100 	stmdacc	r3, {r8}
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
     114:	66590501 	ldrbvs	r0, [r9], -r1, lsl #10
     118:	022e0105 	eoreq	r0, lr, #1073741825	; 0x40000001
     11c:	0101000a 	tsteq	r1, sl
     120:	01050204 	tsteq	r5, r4, lsl #4
     124:	28020500 	stmdacs	r2, {r8, sl}
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     128:	03010000 	movweq	r0, #4096	; 0x1000
     12c:	050102aa 	streq	r0, [r1, #-682]	; 0xfffffd56
     130:	01054b0c 	tsteq	r5, ip, lsl #22
     134:	0008022f 	andeq	r0, r8, pc, lsr #4
     138:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     140:	00000002 	andeq	r0, r0, r2
     144:	02af0300 	adceq	r0, pc, #0, 6
     148:	4b0c0501 	blmi	301554 <__core1_unwind_stub-0xcfeaac>
     14c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	01010008 	tsteq	r1, r8
     154:	01050204 	tsteq	r5, r4, lsl #4
     158:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
     15c:	03010000 	movweq	r0, #4096	; 0x1000
     160:	050102b4 	streq	r0, [r1, #-692]	; 0xfffffd4c
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	7fa10305 	svcvc	0x00a10305
     168:	4d0c0582 	cfstr32mi	mvfx0, [ip, #-520]	; 0xfffffdf8
     16c:	dd031605 	stcle	6, cr1, [r3, #-20]	; 0xffffffec
     170:	0e052e00 	cdpeq	14, 0, cr2, cr5, cr0, {0}
     174:	691c052f 	ldmdbvs	ip, {r0, r1, r2, r3, r5, r8, sl}
    return ALT_E_SUCCESS;
     178:	05f21b05 	ldrbeq	r1, [r2, #2821]!	; 0xb05
}
     17c:	19054a09 	stmdbne	r5, {r0, r3, r9, fp, lr}
     180:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
     184:	054d1005 	strbeq	r1, [sp, #-5]
    while (coalesce->size)
     188:	0c055105 	stfeqs	f5, [r5], {5}
     18c:	2f010584 	svccs	0x00010584
            break;
     190:	01000602 	tsteq	r0, r2, lsl #12
    *segpa   = thissegpa;
     194:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
     198:	02050001 	andeq	r0, r5, #1
     19c:	00000000 	andeq	r0, r0, r0
    *segsize = thissegsize;
     1a0:	0102cb03 	tsteq	r2, r3, lsl #22
     1a4:	05bd0a05 	ldreq	r0, [sp, #2565]!	; 0xa05
     1a8:	0505510d 	streq	r5, [r5, #-269]	; 0xfffffef3
    return ALT_E_SUCCESS;
     1ac:	f612054a 			; <UNDEFINED> instruction: 0xf612054a
}
     1b0:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
     1b4:	11054d1a 	tstne	r5, sl, lsl sp
     1b8:	2e1f054d 	cfmac32cs	mvfx0, mvfx15, mvfx13
     1bc:	052e1005 	streq	r1, [lr, #-5]!
     1c0:	11054c18 	tstne	r5, r8, lsl ip
     1c4:	2e1f0550 	mrccs	5, 0, r0, cr15, cr0, {2}
     1c8:	052e1005 	streq	r1, [lr, #-5]!
     1cc:	0d054c18 	stceq	12, cr4, [r5, #-96]	; 0xffffffa0
     1d0:	2e1b0551 	mrccs	5, 0, r0, cr11, cr1, {2}
     1d4:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
     1d8:	10054c14 	andne	r4, r5, r4, lsl ip
     1dc:	0309054f 	movweq	r0, #38223	; 0x954f
     1e0:	05524a75 	ldrbeq	r4, [r2, #-2677]	; 0xfffff58b
     1e4:	2e09030d 	cdpcs	3, 0, cr0, cr9, cr13, {0}
     1e8:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     1ec:	08054c16 	stmdaeq	r5, {r1, r2, r4, sl, fp, lr}
     1f0:	4c0d0566 	cfstr32mi	mvfx0, [sp], {102}	; 0x66
     1f4:	05821505 	streq	r1, [r2, #1285]	; 0x505
     1f8:	09056b10 	stmdbeq	r5, {r4, r8, r9, fp, sp, lr}
     1fc:	0018054a 	andseq	r0, r8, sl, asr #10
     200:	30030402 	andcc	r0, r3, r2, lsl #8
     204:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
     208:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
     20c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
     210:	02006603 	andeq	r6, r0, #3145728	; 0x300000
     214:	05480304 	strbeq	r0, [r8, #-772]	; 0xfffffcfc
     218:	04020009 	streq	r0, [r2], #-9
     21c:	0c056601 	stceq	6, cr6, [r5], {1}
     220:	2f01056c 	svccs	0x0001056c
     224:	01000802 	tsteq	r0, r2, lsl #16
     228:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
     22c:	02050001 	andeq	r0, r5, #1
     230:	00000000 	andeq	r0, r0, r0
     234:	01039203 	tsteq	r3, r3, lsl #4
     238:	05bb0a05 	ldreq	r0, [fp, #2565]!	; 0xa05
     23c:	4a09030d 	bmi	240e78 <__core1_unwind_stub-0xdbf188>
     240:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     244:	0525080d 	streq	r0, [r5, #-2061]!	; 0xfffff7f3
     248:	0c052e1b 	stceq	14, cr2, [r5], {27}
     24c:	4c14052e 	cfldr32mi	mvfx0, [r4], {46}	; 0x2e
     250:	054e0d05 	strbeq	r0, [lr, #-3333]	; 0xfffff2fb
     254:	0c052e1b 	stceq	14, cr2, [r5], {27}
     258:	4c14052e 	cfldr32mi	mvfx0, [r4], {46}	; 0x2e
     25c:	054c1305 	strbeq	r1, [ip, #-773]	; 0xfffffcfb
     260:	79034b09 	stmdbvc	r3, {r0, r3, r8, r9, fp, lr}
     264:	0316052e 	tsteq	r6, #192937984	; 0xb800000
     268:	24052e0d 	strcs	r2, [r5], #-3597	; 0xfffff1f3
     26c:	2e15052e 	cfmul64cs	mvdx0, mvdx5, mvdx14
     270:	05660f05 	strbeq	r0, [r6, #-3845]!	; 0xfffff0fb
     274:	08054d09 	stmdaeq	r5, {r0, r3, r8, sl, fp, lr}
     278:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
     27c:	054e2305 	strbeq	r2, [lr, #-773]	; 0xfffffcfb
     280:	0d05660a 	stceq	6, cr6, [r5, #-40]	; 0xffffffd8
     284:	4a0b0531 	bmi	2c1750 <__core1_unwind_stub-0xd3e8b0>
     288:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
     28c:	0d056608 	stceq	6, cr6, [r5, #-32]	; 0xffffffe0
     290:	8215054c 	andshi	r0, r5, #76, 10	; 0x13000000
     294:	056c1005 	strbeq	r1, [ip, #-5]!
     298:	18054a09 	stmdane	r5, {r0, r3, r9, fp, lr}
     29c:	03040200 	movweq	r0, #16896	; 0x4200
     2a0:	00110530 	andseq	r0, r1, r0, lsr r5
     2a4:	66030402 	strvs	r0, [r3], -r2, lsl #8
     2a8:	02001d05 	andeq	r1, r0, #320	; 0x140
     2ac:	00660304 	rsbeq	r0, r6, r4, lsl #6
     2b0:	48030402 	stmdami	r3, {r1, sl}
     2b4:	02000905 	andeq	r0, r0, #81920	; 0x14000
     2b8:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
     2bc:	01056c0c 	tsteq	r5, ip, lsl #24
     2c0:	0008022f 	andeq	r0, r8, pc, lsr #4
     2c4:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     2c8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     2cc:	00000002 	andeq	r0, r0, r2
     2d0:	03d10300 	bicseq	r0, r1, #0, 6
     2d4:	03050501 	movweq	r0, #21761	; 0x5501
     2d8:	05667da0 	strbeq	r7, [r6, #-3488]!	; 0xfffff260
     2dc:	16054d0c 	strne	r4, [r5], -ip, lsl #26
     2e0:	2e02de03 	cdpcs	14, 0, cr13, cr2, cr3, {0}
     2e4:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff3e7 <__shm_end__+0xbffff3e7>
     2e8:	09054a08 	stmdbeq	r5, {r3, r9, fp, lr}
     2ec:	680b054c 	stmdavs	fp, {r2, r3, r6, r8, sl}
     2f0:	aa030505 	bge	c170c <__core1_unwind_stub-0xf3e8f4>
     2f4:	01059e7d 	tsteq	r5, sp, ror lr
     2f8:	030c054c 	movweq	r0, #50508	; 0xc54c
     2fc:	052e02d7 	streq	r0, [lr, #-727]!	; 0xfffffd29
     300:	06022f01 	streq	r2, [r2], -r1, lsl #30
     304:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     308:	00010502 	andeq	r0, r1, r2, lsl #10
     30c:	00d00205 	sbcseq	r0, r0, r5, lsl #4
     310:	de030100 	adfles	f0, f3, f0
     314:	05050103 	streq	r0, [r5, #-259]	; 0xfffffefd
     318:	7d910368 	ldcvc	3, cr0, [r1, #416]	; 0x1a0
     31c:	4d0c052e 	cfstr32mi	mvfx0, [ip, #-184]	; 0xffffff48
     320:	ee030d05 	cdp	13, 0, cr0, cr3, cr5, {0}
     324:	0b052e02 	bleq	14bb34 <__core1_unwind_stub-0xeb44cc>
     328:	0305052f 	movweq	r0, #21807	; 0x552f
     32c:	059e7d9e 	ldreq	r7, [lr, #3486]	; 0xd9e
     330:	0c054c01 	stceq	12, cr4, [r5], {1}
     334:	2e02e303 	cdpcs	3, 0, cr14, cr2, cr3, {0}
     338:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     33c:	01010006 	tsteq	r1, r6
     340:	01050204 	tsteq	r5, r4, lsl #4
     344:	00020500 	andeq	r0, r2, r0, lsl #10
     348:	03000000 	movweq	r0, #0
     34c:	050103ea 	streq	r0, [r1, #-1002]	; 0xfffffc16
     350:	7deb0305 	stclvc	3, cr0, [fp, #20]!
     354:	4d0c0566 	cfstr32mi	mvfx0, [ip, #-408]	; 0xfffffe68
     358:	93031605 	movwls	r1, #13829	; 0x3605
     35c:	0e052e02 	cdpeq	14, 0, cr2, cr5, cr2, {0}
     360:	0305052f 	movweq	r0, #21807	; 0x552f
     364:	05667e89 	strbeq	r7, [r6, #-3721]!	; 0xfffff177
     368:	16054d0c 	strne	r4, [r5], -ip, lsl #26
     36c:	2e01f503 	cfsh32cs	mvfx15, mvfx1, #3
     370:	05301505 	ldreq	r1, [r0, #-1285]!	; 0xfffffafb
     374:	05200841 	streq	r0, [r0, #-2113]!	; 0xfffff7bf
     378:	08024b01 	stmdaeq	r2, {r0, r8, r9, fp, lr}
     37c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     380:	00010502 	andeq	r0, r1, r2, lsl #10
     384:	01200205 			; <UNDEFINED> instruction: 0x01200205
     388:	f3030100 	vrhadd.u8	d0, d3, d0
     38c:	05050103 	streq	r0, [r5, #-259]	; 0xfffffefd
     390:	827de203 	rsbshi	lr, sp, #805306368	; 0x30000000
     394:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     398:	029c0316 	addseq	r0, ip, #1476395008	; 0x58000000
     39c:	2f0e052e 	svccs	0x000e052e
     3a0:	05691c05 	strbeq	r1, [r9, #-3077]!	; 0xfffff3fb
     3a4:	0905f21b 	stmdbeq	r5, {r0, r1, r3, r4, r9, ip, sp, lr, pc}
     3a8:	2e19054a 	cfmac32cs	mvfx0, mvfx9, mvfx10
     3ac:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
     3b0:	0b054d10 	bleq	1537f8 <__core1_unwind_stub-0xeac808>
     3b4:	4c0f054f 	cfstr32mi	mvfx0, [pc], {79}	; 0x4f
     3b8:	05f20e05 	ldrbeq	r0, [r2, #3589]!	; 0xe05
     3bc:	0e054a0b 	vmlaeq.f32	s8, s10, s22
     3c0:	2e0b0567 	cfsh32cs	mvfx0, mvfx11, #55
     3c4:	82030505 	andhi	r0, r3, #20971520	; 0x1400000
     3c8:	01059e7e 	tsteq	r5, lr, ror lr
     3cc:	030c054c 	movweq	r0, #50508	; 0xc54c
     3d0:	052e0280 	streq	r0, [lr, #-640]!	; 0xfffffd80
     3d4:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     3d8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     3dc:	00010502 	andeq	r0, r1, r2, lsl #10
     3e0:	00000205 	andeq	r0, r0, r5, lsl #4
     3e4:	8b030000 	blhi	c03ec <__core1_unwind_stub-0xf3fc14>
     3e8:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
     3ec:	667e8a03 	ldrbtvs	r8, [lr], -r3, lsl #20
     3f0:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
     3f4:	01f40316 	mvnseq	r0, r6, lsl r3
     3f8:	3038052e 	eorscc	r0, r8, lr, lsr #10
     3fc:	02670105 	rsbeq	r0, r7, #1073741825	; 0x40000001
     400:	01010008 	tsteq	r1, r8
     404:	01050204 	tsteq	r5, r4, lsl #4
     408:	00020500 	andeq	r0, r2, r0, lsl #10
     40c:	03000000 	movweq	r0, #0
     410:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
     414:	19058509 	stmdbne	r5, {r0, r3, r8, sl, pc}
     418:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
     41c:	054d1005 	strbeq	r1, [sp, #-5]
     420:	7dfd0305 	ldclvc	3, cr0, [sp, #20]!
     424:	4d0c054a 	cfstr32mi	mvfx0, [ip, #-296]	; 0xfffffed8
     428:	83030d05 	movwhi	r0, #15621	; 0x3d05
     42c:	0b052e02 	bleq	14bc3c <__core1_unwind_stub-0xeb43c4>
     430:	670e052f 	strvs	r0, [lr, -pc, lsr #10]
     434:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     438:	7e880305 	cdpvc	3, 8, cr0, cr8, cr5, {0}
     43c:	4c01059e 	cfstr32mi	mvfx0, [r1], {158}	; 0x9e
     440:	fa030c05 	blx	c345c <__core1_unwind_stub-0xf3cba4>
     444:	01052e01 	tsteq	r5, r1, lsl #28
     448:	0008022f 	andeq	r0, r8, pc, lsr #4
     44c:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     450:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     454:	00020002 	andeq	r0, r2, r2
     458:	04a70301 	strteq	r0, [r7], #769	; 0x301
     45c:	f30e0501 	vrshl.u8	d0, d1, d14
     460:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
     464:	0f056608 	svceq	0x00056608
     468:	6909054c 	stmdbvs	r9, {r2, r3, r6, r8, sl}
     46c:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
     470:	08054c0f 	stmdaeq	r5, {r0, r1, r2, r3, sl, fp, lr}
     474:	68100569 	ldmdavs	r0, {r0, r3, r5, r6, r8, sl}
     478:	054d0b05 	strbeq	r0, [sp, #-2821]	; 0xfffff4fb
     47c:	7dac0305 	stcvc	3, cr0, [ip, #20]!
     480:	4c0105ba 	cfstr32mi	mvfx0, [r1], {186}	; 0xba
     484:	d6030c05 	strle	r0, [r3], -r5, lsl #24
     488:	01052e02 	tsteq	r5, r2, lsl #28
     48c:	0008022f 	andeq	r0, r8, pc, lsr #4
     490:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     494:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     498:	0002b402 	andeq	fp, r2, r2, lsl #8
     49c:	04c20301 	strbeq	r0, [r2], #769	; 0x301
     4a0:	9f0e0501 	svcls	0x000e0501
     4a4:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
     4a8:	0c056810 	stceq	8, cr6, [r5], {16}
     4ac:	4a05054d 	bmi	1419e8 <__core1_unwind_stub-0xebe618>
     4b0:	05302505 	ldreq	r2, [r0, #-1285]!	; 0xfffffafb
     4b4:	09056617 	stmdbeq	r5, {r0, r1, r2, r4, r9, sl, sp, lr}
     4b8:	f718054c 			; <UNDEFINED> instruction: 0xf718054c
     4bc:	052e1e05 	streq	r1, [lr, #-3589]!	; 0xfffff1fb
     4c0:	12054a18 	andne	r4, r5, #24, 20	; 0x18000
     4c4:	670d054a 	strvs	r0, [sp, -sl, asr #10]
     4c8:	05311405 	ldreq	r1, [r1, #-1029]!	; 0xfffffbfb
     4cc:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
     4d0:	4a730302 	bmi	1cc10e0 <__bss_end__+0xcad0e0>
     4d4:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
     4d8:	03660104 	cmneq	r6, #4, 2
     4dc:	05ba7cfa 	ldreq	r7, [sl, #3322]!	; 0xcfa
     4e0:	0c054c01 	stceq	12, cr4, [r5], {1}
     4e4:	2e039703 	cdpcs	7, 0, cr9, cr3, cr3, {0}
     4e8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     4ec:	01010008 	tsteq	r1, r8
     4f0:	01050204 	tsteq	r5, r4, lsl #4
     4f4:	00020500 	andeq	r0, r2, r0, lsl #10
     4f8:	03000000 	movweq	r0, #0
     4fc:	050104e2 	streq	r0, [r1, #-1250]	; 0xfffffb1e
     500:	0e059f23 	cdpeq	15, 0, cr9, cr5, cr3, {1}
     504:	6808054a 	stmdavs	r8, {r1, r3, r6, r8, sl}
     508:	05681005 	strbeq	r1, [r8, #-5]!
     50c:	10054d08 	andne	r4, r5, r8, lsl #26
     510:	03050568 	movweq	r0, #21864	; 0x5568
     514:	05827cb7 	streq	r7, [r2, #3255]	; 0xcb7
     518:	0c054c01 	stceq	12, cr4, [r5], {1}
     51c:	2e03cc03 	cdpcs	12, 0, cr12, cr3, cr3, {0}
     520:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     524:	01010008 	tsteq	r1, r8
     528:	01050204 	tsteq	r5, r4, lsl #4
     52c:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
     530:	03010003 	movweq	r0, #4099	; 0x1003
     534:	050104f5 	streq	r0, [r1, #-1269]	; 0xfffffb0b
     538:	05056a0e 	streq	r6, [r5, #-2574]	; 0xfffff5f2
     53c:	0c054e51 	stceq	14, cr4, [r5], {81}	; 0x51
     540:	2f010530 	svccs	0x00010530
     544:	01000802 	tsteq	r0, r2, lsl #16
     548:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
     54c:	02050001 	andeq	r0, r5, #1
     550:	00000000 	andeq	r0, r0, r0
     554:	01058a03 	tsteq	r5, r3, lsl #20
     558:	056a0e05 	strbeq	r0, [sl, #-3589]!	; 0xfffff1fb
     55c:	054e5105 	strbeq	r5, [lr, #-261]	; 0xfffffefb
     560:	0105300c 	tsteq	r5, ip
     564:	0008022f 	andeq	r0, r8, pc, lsr #4
     568:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     56c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     570:	0003c802 	andeq	ip, r3, r2, lsl #16
     574:	05a40301 	streq	r0, [r4, #769]!	; 0x301
     578:	bb090501 	bllt	241984 <__core1_unwind_stub-0xdbe67c>
     57c:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     580:	0e054c12 	mcreq	12, 0, r4, cr5, cr2, {0}
     584:	4a0d0584 	bmi	341b9c <__core1_unwind_stub-0xcbe464>
     588:	05681005 	strbeq	r1, [r8, #-5]!
     58c:	01054d0c 	tsteq	r5, ip, lsl #26
     590:	0008022f 	andeq	r0, r8, pc, lsr #4
     594:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     598:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     59c:	00043002 	andeq	r3, r4, r2
     5a0:	05b40301 	ldreq	r0, [r4, #769]!	; 0x301
     5a4:	bd0c0501 	cfstr32lt	mvfx0, [ip, #-4]
     5a8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     5ac:	04020010 	streq	r0, [r2], #-16
     5b0:	14053003 	strne	r3, [r5], #-3
     5b4:	03040200 	movweq	r0, #16896	; 0x4200
     5b8:	00310566 	eorseq	r0, r1, r6, ror #10
     5bc:	48030402 	stmdami	r3, {r1, sl}
     5c0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
     5c4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
     5c8:	05056e0c 	streq	r6, [r5, #-3596]	; 0xfffff1f4
     5cc:	303b054a 	eorscc	r0, fp, sl, asr #10
     5d0:	05f23e05 	ldrbeq	r3, [r2, #3589]!	; 0xe05
     5d4:	3b052e1a 	blcc	14be44 <__core1_unwind_stub-0xeb41bc>
     5d8:	f23e052f 	vrshl.s64	d0, d31, d14
     5dc:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
     5e0:	1a052f30 	bne	14c2a8 <__core1_unwind_stub-0xeb3d58>
     5e4:	4b3005f2 	blmi	c01db4 <__core1_unwind_stub-0x3fe24c>
     5e8:	05f21a05 	ldrbeq	r1, [r2, #2565]!	; 0xa05
     5ec:	0c054d10 	stceq	13, cr4, [r5], {16}
     5f0:	4c14054a 	cfldr32mi	mvfx0, [r4], {74}	; 0x4a
     5f4:	054e1005 	strbeq	r1, [lr, #-5]
     5f8:	14054a0c 	strne	r4, [r5], #-2572	; 0xfffff5f4
     5fc:	4e12054c 	cfmac32mi	mvfx0, mvfx2, mvfx12
     600:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
     604:	10054c14 	andne	r4, r5, r4, lsl ip
     608:	4a0c054f 	bmi	301b4c <__core1_unwind_stub-0xcfe4b4>
     60c:	054c2005 	strbeq	r2, [ip, #-5]
     610:	38056616 	stmdacc	r5, {r1, r2, r4, r9, sl, sp, lr}
     614:	4a1105a3 	bmi	441ca8 <__core1_unwind_stub-0xbbe358>
     618:	05d61005 	ldrbeq	r1, [r6, #5]
     61c:	12054d18 	andne	r4, r5, #24, 26	; 0x600
     620:	0583834d 	streq	r8, [r3, #845]	; 0x34d
     624:	0c058a10 			; <UNDEFINED> instruction: 0x0c058a10
     628:	4e13054a 	cfmac32mi	mvfx0, mvfx3, mvfx10
     62c:	05333c05 	ldreq	r3, [r3, #-3077]!	; 0xfffff3fb
     630:	14054a15 	strne	r4, [r5], #-2581	; 0xfffff5eb
     634:	4d1c05d6 	cfldr32mi	mvfx0, [ip, #-856]	; 0xfffffca8
     638:	684d1605 	stmdavs	sp, {r0, r2, r9, sl, ip}^
     63c:	73031305 	movwvc	r1, #13061	; 0x3305
     640:	03160566 	tsteq	r6, #427819008	; 0x19800000
     644:	05688216 	strbeq	r8, [r8, #-534]!	; 0xfffffdea
     648:	0c056213 	sfmeq	f6, 4, [r5], {19}
     64c:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
     650:	11056b38 	tstne	r5, r8, lsr fp
     654:	d610054a 	ldrle	r0, [r0], -sl, asr #10
     658:	054d1805 	strbeq	r1, [sp, #-2053]	; 0xfffff7fb
     65c:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
     660:	7fa50302 	svcvc	0x00a50302
     664:	0005054a 	andeq	r0, r5, sl, asr #10
     668:	66010402 	strvs	r0, [r1], -r2, lsl #8
     66c:	e1030d05 	tst	r3, r5, lsl #26
     670:	0c058200 	sfmeq	f0, 1, [r5], {-0}
     674:	4a05054c 	bmi	141bac <__core1_unwind_stub-0xebe454>
     678:	05301405 	ldreq	r1, [r0, #-1029]!	; 0xfffffbfb
     67c:	1505820c 	strne	r8, [r5, #-524]	; 0xfffffdf4
     680:	0031054c 	eorseq	r0, r1, ip, asr #10
     684:	62020402 	andvs	r0, r2, #33554432	; 0x2000000
     688:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
     68c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
     690:	01056e0c 	tsteq	r5, ip, lsl #28
     694:	0006022f 	andeq	r0, r6, pc, lsr #4
     698:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     69c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     6a0:	00075802 	andeq	r5, r7, r2, lsl #16
     6a4:	06af0301 	strteq	r0, [pc], r1, lsl #6
     6a8:	080c0501 	stmdaeq	ip, {r0, r8, sl}
     6ac:	0801053f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, sl}
     6b0:	00060293 	muleq	r6, r3, r2
     6b4:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     6b8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     6bc:	0007c002 	andeq	ip, r7, r2
     6c0:	06b90301 	ldrteq	r0, [r9], r1, lsl #6
     6c4:	9f0c0501 	svcls	0x000c0501
     6c8:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     6cc:	0b054c10 	bleq	153714 <__core1_unwind_stub-0xeac8ec>
     6d0:	6809054f 	stmdavs	r9, {r0, r1, r2, r3, r6, r8, sl}
     6d4:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     6d8:	01056609 	tsteq	r5, r9, lsl #12
     6dc:	0008024b 	andeq	r0, r8, fp, asr #4
     6e0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     6e4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     6e8:	00082002 	andeq	r2, r8, r2
     6ec:	06c80301 	strbeq	r0, [r8], r1, lsl #6
     6f0:	9f130501 	svcls	0x00130501
     6f4:	054a2605 	strbeq	r2, [sl, #-1541]	; 0xfffff9fb
     6f8:	13054a09 	movwne	r4, #23049	; 0x5a09
     6fc:	4a26054b 	bmi	981c30 <__core1_unwind_stub-0x67e3d0>
     700:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     704:	09054b13 	stmdbeq	r5, {r0, r1, r4, r8, r9, fp, lr}
     708:	4c0c054a 	cfstr32mi	mvfx0, [ip], {74}	; 0x4a
     70c:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     710:	0b054c10 	bleq	153758 <__core1_unwind_stub-0xeac8a8>
     714:	6609054f 	strvs	r0, [r9], -pc, asr #10
     718:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffc1b <__shm_end__+0xbffffc1b>
     71c:	0b056609 	bleq	159f48 <__core1_unwind_stub-0xea60b8>
     720:	8309052f 	movwhi	r0, #38191	; 0x952f
     724:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffc27 <__shm_end__+0xbffffc27>
     728:	05200809 	streq	r0, [r0, #-2057]!	; 0xfffff7f7
     72c:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
     730:	2f0b0566 	svccs	0x000b0566
     734:	05830905 	streq	r0, [r3, #2309]	; 0x905
     738:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
     73c:	4b0b0582 	blmi	2c1d4c <__core1_unwind_stub-0xd3e2b4>
     740:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
     744:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     748:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     74c:	00010502 	andeq	r0, r1, r2, lsl #10
     750:	09440205 	stmdbeq	r4, {r0, r2, r9}^
     754:	e2030100 	and	r0, r3, #0, 2
     758:	13050106 	movwne	r0, #20742	; 0x5106
     75c:	4a26059f 	bmi	981de0 <__core1_unwind_stub-0x67e220>
     760:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     764:	26054b13 			; <UNDEFINED> instruction: 0x26054b13
     768:	4a09054a 	bmi	241c98 <__core1_unwind_stub-0xdbe368>
     76c:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
     770:	0c054a09 			; <UNDEFINED> instruction: 0x0c054a09
     774:	4a08054c 	bmi	201cac <__core1_unwind_stub-0xdfe354>
     778:	054c1005 	strbeq	r1, [ip, #-5]
     77c:	09054f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, lr}
     780:	4b0b0566 	blmi	2c1d20 <__core1_unwind_stub-0xd3e2e0>
     784:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
     788:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
     78c:	2f0b0583 	svccs	0x000b0583
     790:	20080905 	andcs	r0, r8, r5, lsl #18
     794:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffc97 <__shm_end__+0xbffffc97>
     798:	0b056609 	bleq	159fc4 <__core1_unwind_stub-0xea603c>
     79c:	8309052f 	movwhi	r0, #38191	; 0x952f
     7a0:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffca3 <__shm_end__+0xbffffca3>
     7a4:	0b058209 	bleq	160fd0 <__core1_unwind_stub-0xe9f030>
     7a8:	4a09054b 	bmi	241cdc <__core1_unwind_stub-0xdbe324>
     7ac:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     7b0:	01010008 	tsteq	r1, r8
     7b4:	01050204 	tsteq	r5, r4, lsl #4
     7b8:	68020500 	stmdavs	r2, {r8, sl}
     7bc:	0301000a 	movweq	r0, #4106	; 0x100a
     7c0:	050106fc 	streq	r0, [r1, #-1788]	; 0xfffff904
     7c4:	26059f13 			; <UNDEFINED> instruction: 0x26059f13
     7c8:	4a09054a 	bmi	241cf8 <__core1_unwind_stub-0xdbe308>
     7cc:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
     7d0:	09054a26 	stmdbeq	r5, {r1, r2, r5, r9, fp, lr}
     7d4:	4b13054a 	blmi	4c1d04 <__core1_unwind_stub-0xb3e2fc>
     7d8:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     7dc:	08054c0c 	stmdaeq	r5, {r2, r3, sl, fp, lr}
     7e0:	4c10054a 	cfldr32mi	mvfx0, [r0], {74}	; 0x4a
     7e4:	05510b05 	ldrbeq	r0, [r1, #-2821]	; 0xfffff4fb
     7e8:	0b056609 	bleq	15a014 <__core1_unwind_stub-0xea5fec>
     7ec:	6609052f 	strvs	r0, [r9], -pc, lsr #10
     7f0:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffcf3 <__shm_end__+0xbffffcf3>
     7f4:	0b056609 	bleq	15a020 <__core1_unwind_stub-0xea5fe0>
     7f8:	0809052f 	stmdaeq	r9, {r0, r1, r2, r3, r5, r8, sl}
     7fc:	2f0b0520 	svccs	0x000b0520
     800:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
     804:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
     808:	4b0b0583 	blmi	2c1e1c <__core1_unwind_stub-0xd3e1e4>
     80c:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
     810:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     814:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     818:	00010502 	andeq	r0, r1, r2, lsl #10
     81c:	0b740205 	bleq	1d01038 <__bss_end__+0xced038>
     820:	96030100 	strls	r0, [r3], -r0, lsl #2
     824:	13050107 	movwne	r0, #20743	; 0x5107
     828:	4a26059f 	bmi	981eac <__core1_unwind_stub-0x67e154>
     82c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     830:	26054b13 			; <UNDEFINED> instruction: 0x26054b13
     834:	4a09054a 	bmi	241d64 <__core1_unwind_stub-0xdbe29c>
     838:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
     83c:	0c054a09 			; <UNDEFINED> instruction: 0x0c054a09
     840:	4a08054c 	bmi	201d78 <__core1_unwind_stub-0xdfe288>
     844:	054c1005 	strbeq	r1, [ip, #-5]
     848:	0905510b 	stmdbeq	r5, {r0, r1, r3, r8, ip, lr}
     84c:	2f0b0566 	svccs	0x000b0566
     850:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
     854:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
     858:	0b052008 	bleq	148880 <__core1_unwind_stub-0xeb7780>
     85c:	8309052f 	movwhi	r0, #38191	; 0x952f
     860:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffd63 <__shm_end__+0xbffffd63>
     864:	0b056609 	bleq	15a090 <__core1_unwind_stub-0xea5f70>
     868:	8209052f 	andhi	r0, r9, #197132288	; 0xbc00000
     86c:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
     870:	01056609 	tsteq	r5, r9, lsl #12
     874:	0008022f 	andeq	r0, r8, pc, lsr #4
     878:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     87c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     880:	000c8402 	andeq	r8, ip, r2, lsl #8
     884:	07af0301 	streq	r0, [pc, r1, lsl #6]!
     888:	87090501 	strhi	r0, [r9, -r1, lsl #10]
     88c:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
     890:	10052e08 	andne	r2, r5, r8, lsl #28
     894:	4d05054c 	cfstr32mi	mvfx0, [r5, #-304]	; 0xfffffed0
     898:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
     89c:	06022f01 	streq	r2, [r2], -r1, lsl #30
     8a0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     8a4:	00010502 	andeq	r0, r1, r2, lsl #10
     8a8:	0ccc0205 	sfmeq	f0, 2, [ip], {5}
     8ac:	c2030100 	andgt	r0, r3, #0, 2
     8b0:	16050107 	strne	r0, [r5], -r7, lsl #2
     8b4:	0c05cd08 	stceq	13, cr12, [r5], {8}
     8b8:	0805b008 	stmdaeq	r5, {r3, ip, sp, pc}
     8bc:	6810054b 	ldmdavs	r0, {r0, r1, r3, r6, r8, sl}
     8c0:	054d1105 	strbeq	r1, [sp, #-261]	; 0xfffffefb
     8c4:	1005da08 	andne	sp, r5, r8, lsl #20
     8c8:	03090568 	movweq	r0, #38248	; 0x9568
     8cc:	1b054a10 	blne	153114 <__core1_unwind_stub-0xeaceec>
     8d0:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
     8d4:	054c1005 	strbeq	r1, [ip, #-5]
     8d8:	08054e13 	stmdaeq	r5, {r0, r1, r4, r9, sl, fp, lr}
     8dc:	6810054a 	ldmdavs	r0, {r1, r3, r6, r8, sl}
     8e0:	054c0b05 	strbeq	r0, [ip, #-2821]	; 0xfffff4fb
     8e4:	09059f0f 	stmdbeq	r5, {r0, r1, r2, r3, r8, r9, sl, fp, ip, pc}
     8e8:	d6080568 	strle	r0, [r8], -r8, ror #10
     8ec:	054c1005 	strbeq	r1, [ip, #-5]
     8f0:	05054e0c 	streq	r4, [r5, #-3596]	; 0xfffff1f4
     8f4:	3014054a 	andscc	r0, r4, sl, asr #10
     8f8:	05d60c05 	ldrbeq	r0, [r6, #3077]	; 0xc05
     8fc:	1b054e18 	blne	154164 <__core1_unwind_stub-0xeabe9c>
     900:	4a100583 	bmi	401f14 <__core1_unwind_stub-0xbfe0ec>
     904:	05681805 	strbeq	r1, [r8, #-2053]!	; 0xfffff7fb
     908:	0d054c17 	stceq	12, cr4, [r5, #-92]	; 0xffffffa4
     90c:	4c230567 	cfstr32mi	mvfx0, [r3], #-412	; 0xfffffe64
     910:	05833e05 	streq	r3, [r3, #3589]	; 0xe05
     914:	1405d623 	strne	sp, [r5], #-1571	; 0xfffff9dd
     918:	f40e0567 	vst3.16	{d0,d2,d4}, [lr :128], r7
     91c:	05821405 	streq	r1, [r2, #1029]	; 0x405
     920:	31056618 	tstcc	r5, r8, lsl r6
     924:	02040200 	andeq	r0, r4, #0, 4
     928:	054a6e03 	strbeq	r6, [sl, #-3587]	; 0xfffff1fd
     92c:	04020005 	streq	r0, [r2], #-5
     930:	08056601 	stmdaeq	r5, {r0, r9, sl, sp, lr}
     934:	05661903 	strbeq	r1, [r6, #-2307]!	; 0xfffff6fd
     938:	0c058410 	cfstrseq	mvf8, [r5], {16}
     93c:	4a05054f 	bmi	141e80 <__core1_unwind_stub-0xebe180>
     940:	05303005 	ldreq	r3, [r0, #-5]!
     944:	053c0833 	ldreq	r0, [ip, #-2099]!	; 0xfffff7cd
     948:	30052e13 	andcc	r2, r5, r3, lsl lr
     94c:	0833052f 	ldmdaeq	r3!, {r0, r1, r2, r3, r5, r8, sl}
     950:	2e13053c 	mrccs	5, 0, r0, cr3, cr12, {1}
     954:	052f2505 	streq	r2, [pc, #-1285]!	; 457 <__core1_unwind_stub-0xfffba9>
     958:	053c0813 	ldreq	r0, [ip, #-2067]!	; 0xfffff7ed
     95c:	05fa4f12 	ldrbeq	r4, [sl, #3858]!	; 0xf12
     960:	09054c10 	stmdbeq	r5, {r4, sl, fp, lr}
     964:	302b054a 	eorcc	r0, fp, sl, asr #10
     968:	05662105 	strbeq	r2, [r6, #-261]!	; 0xfffffefb
     96c:	2b05d625 	blcs	176208 <__core1_unwind_stub-0xe89df8>
     970:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
     974:	054d1a05 	strbeq	r1, [sp, #-2565]	; 0xfffff5fb
     978:	3005f311 	andcc	pc, r5, r1, lsl r3	; <UNPREDICTABLE>
     97c:	02040200 	andeq	r0, r4, #0, 4
     980:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
     984:	04020009 	streq	r0, [r2], #-9
     988:	10056601 	andne	r6, r5, r1, lsl #12
     98c:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
     990:	20054a0c 	andcs	r4, r5, ip, lsl #20
     994:	6616054e 	ldrvs	r0, [r6], -lr, asr #10
     998:	05a01005 	streq	r1, [r0, #5]!
     99c:	54056b17 	strpl	r6, [r5], #-2839	; 0xfffff4e9
     9a0:	ba250530 	blt	941e68 <__core1_unwind_stub-0x6be198>
     9a4:	05f43a05 	ldrbeq	r3, [r4, #2565]!	; 0xa05
     9a8:	40058244 	andmi	r8, r5, r4, asr #4
     9ac:	664b054a 	strbvs	r0, [fp], -sl, asr #10
     9b0:	054a2005 	strbeq	r2, [sl, #-5]
     9b4:	1e052f28 	cdpne	15, 0, cr2, cr5, cr8, {1}
     9b8:	4f22054a 	svcmi	0x0022054a
     9bc:	059e1805 	ldreq	r1, [lr, #2053]	; 0x805
     9c0:	1e054c20 	cdpne	12, 0, cr4, cr5, cr0, {1}
     9c4:	8228054d 	eorhi	r0, r8, #322961408	; 0x13400000
     9c8:	674c1d05 	strbvs	r1, [ip, -r5, lsl #26]
     9cc:	6c036767 	stcvs	7, cr6, [r3], {103}	; 0x67
     9d0:	4a170566 	bmi	5c1f70 <__core1_unwind_stub-0xa3e090>
     9d4:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
     9d8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     9dc:	66180317 			; <UNDEFINED> instruction: 0x66180317
     9e0:	05305405 	ldreq	r5, [r0, #-1029]!	; 0xfffffbfb
     9e4:	3a05ba25 	bcc	16f280 <__core1_unwind_stub-0xe90d80>
     9e8:	824405f4 	subhi	r0, r4, #244, 10	; 0x3d000000
     9ec:	054a4005 	strbeq	r4, [sl, #-5]
     9f0:	2005664b 	andcs	r6, r5, fp, asr #12
     9f4:	2f28054a 	svccs	0x0028054a
     9f8:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
     9fc:	15054c1c 	strne	r4, [r5, #-3100]	; 0xfffff3e4
     a00:	302f054a 	eorcc	r0, pc, sl, asr #10
     a04:	05662605 	strbeq	r2, [r6, #-1541]!	; 0xfffff9fb
     a08:	2405821c 	strcs	r8, [r5], #-540	; 0xfffffde4
     a0c:	002b054c 	eoreq	r0, fp, ip, asr #10
     a10:	4d020402 	cfstrsmi	mvf0, [r2, #-8]
     a14:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
     a18:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
     a1c:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
     a20:	29056602 	stmdbcs	r5, {r1, r9, sl, sp, lr}
     a24:	02040200 	andeq	r0, r4, #0, 4
     a28:	054a7903 	strbeq	r7, [sl, #-2307]	; 0xfffff6fd
     a2c:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
     a30:	1d056601 	stcne	6, cr6, [r5, #-4]
     a34:	67660a03 	strbvs	r0, [r6, -r3, lsl #20]!
     a38:	17056767 	strne	r6, [r5, -r7, ror #14]
     a3c:	03666c03 	cmneq	r6, #768	; 0x300
     a40:	54056619 	strpl	r6, [r5], #-1561	; 0xfffff9e7
     a44:	ba250530 	blt	941f0c <__core1_unwind_stub-0x6be0f4>
     a48:	05f43a05 	ldrbeq	r3, [r4, #2565]!	; 0xa05
     a4c:	40058244 	andmi	r8, r5, r4, asr #4
     a50:	664b054a 	strbvs	r0, [fp], -sl, asr #10
     a54:	054a2005 	strbeq	r2, [sl, #-5]
     a58:	1e052f28 	cdpne	15, 0, cr2, cr5, cr8, {1}
     a5c:	4c22054a 	cfstr32mi	mvfx0, [r2], #-296	; 0xfffffed8
     a60:	059e1805 	ldreq	r1, [lr, #2053]	; 0x805
     a64:	1e054c20 	cdpne	12, 0, cr4, cr5, cr0, {1}
     a68:	8228054d 	eorhi	r0, r8, #322961408	; 0x13400000
     a6c:	674c1d05 	strbvs	r1, [ip, -r5, lsl #26]
     a70:	17056767 	strne	r6, [r5, -r7, ror #14]
     a74:	05666f03 	strbeq	r6, [r6, #-3843]!	; 0xfffff0fd
     a78:	82190354 	andshi	r0, r9, #84, 6	; 0x50000001
     a7c:	05ba2505 	ldreq	r2, [sl, #1285]!	; 0x505
     a80:	4405f43a 	strmi	pc, [r5], #-1082	; 0xfffffbc6
     a84:	4a400582 	bmi	1002094 <create_va_space_core1_ddr+0x74>
     a88:	05664b05 	strbeq	r4, [r6, #-2821]!	; 0xfffff4fb
     a8c:	28054a20 	stmdacs	r5, {r5, r9, fp, lr}
     a90:	4a1e052f 	bmi	781f54 <__core1_unwind_stub-0x87e0ac>
     a94:	054c2205 	strbeq	r2, [ip, #-517]	; 0xfffffdfb
     a98:	20059e18 	andcs	r9, r5, r8, lsl lr
     a9c:	4d1e054c 	cfldr32mi	mvfx0, [lr, #-304]	; 0xfffffed0
     aa0:	05822805 	streq	r2, [r2, #2053]	; 0x805
     aa4:	67674c1d 			; <UNDEFINED> instruction: 0x67674c1d
     aa8:	03170567 	tsteq	r7, #432013312	; 0x19c00000
     aac:	0c05666f 	stceq	6, cr6, [r5], {111}	; 0x6f
     ab0:	05662003 	strbeq	r2, [r6, #-3]!
     ab4:	1305670d 	movwne	r6, #22285	; 0x570d
     ab8:	304e056b 	subcc	r0, lr, fp, ror #10
     abc:	05ba2105 	ldreq	r2, [sl, #261]!	; 0x105
     ac0:	2005f416 	andcs	pc, r5, r6, lsl r4	; <UNPREDICTABLE>
     ac4:	4a1c0582 	bmi	7020d4 <__core1_unwind_stub-0x8fdf2c>
     ac8:	05661405 	strbeq	r1, [r6, #-1029]!	; 0xfffffbfb
     acc:	12054c1c 	andne	r4, r5, #28, 24	; 0x1c00
     ad0:	821c054d 	andshi	r0, ip, #322961408	; 0x13400000
     ad4:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     ad8:	16054a23 	strne	r4, [r5], -r3, lsr #20
     adc:	0567674c 	strbeq	r6, [r7, #-1868]!	; 0xfffff8b4
     ae0:	66730319 			; <UNDEFINED> instruction: 0x66730319
     ae4:	054a1305 	strbeq	r1, [sl, #-773]	; 0xfffffcfb
     ae8:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
     aec:	13054a01 	movwne	r4, #23041	; 0x5a01
     af0:	05661103 	strbeq	r1, [r6, #-259]!	; 0xfffffefd
     af4:	21053053 	qaddcs	r3, r3, r5
     af8:	f41805ba 			; <UNDEFINED> instruction: 0xf41805ba
     afc:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
     b00:	2505301a 	strcs	r3, [r5, #-26]	; 0xffffffe6
     b04:	4a2c0582 	bmi	b02114 <__core1_unwind_stub-0x4fdeec>
     b08:	054a2005 	strbeq	r2, [sl, #-5]
     b0c:	20056618 	andcs	r6, r5, r8, lsl r6
     b10:	0016054c 	andseq	r0, r6, ip, asr #10
     b14:	4d020402 	cfstrsmi	mvf0, [r2, #-8]
     b18:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
     b1c:	05820204 	streq	r0, [r2, #516]	; 0x204
     b20:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
     b24:	1c054a02 			; <UNDEFINED> instruction: 0x1c054a02
     b28:	02040200 	andeq	r0, r4, #0, 4
     b2c:	002d054a 	eoreq	r0, sp, sl, asr #10
     b30:	4a020402 	bmi	81b40 <__core1_unwind_stub-0xf7e4c0>
     b34:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
     b38:	79030204 	stmdbvc	r3, {r2, r9}
     b3c:	0011054a 	andseq	r0, r1, sl, asr #10
     b40:	66010402 	strvs	r0, [r1], -r2, lsl #8
     b44:	0a031605 	beq	c6360 <__core1_unwind_stub-0xf39ca0>
     b48:	05676766 	strbeq	r6, [r7, #-1894]!	; 0xfffff89a
     b4c:	66700313 			; <UNDEFINED> instruction: 0x66700313
     b50:	05661403 	strbeq	r1, [r6, #-1027]!	; 0xfffffbfd
     b54:	2105304e 	tstcs	r5, lr, asr #32
     b58:	f41605ba 			; <UNDEFINED> instruction: 0xf41605ba
     b5c:	05822005 	streq	r2, [r2, #5]
     b60:	14054a1c 	strne	r4, [r5], #-2588	; 0xfffff5e4
     b64:	4c1c0566 	cfldr32mi	mvfx0, [ip], {102}	; 0x66
     b68:	054d1205 	strbeq	r1, [sp, #-517]	; 0xfffffdfb
     b6c:	1805821c 	stmdane	r5, {r2, r3, r4, r9, pc}
     b70:	4a23054a 	bmi	8c20a0 <__core1_unwind_stub-0x73df60>
     b74:	674c1605 	strbvs	r1, [ip, -r5, lsl #12]
     b78:	03130567 	tsteq	r3, #432013312	; 0x19c00000
     b7c:	0c056673 	stceq	6, cr6, [r5], {115}	; 0x73
     b80:	05665503 	strbeq	r5, [r6, #-1283]!	; 0xfffffafd
     b84:	2e3b0311 	mrccs	3, 1, r0, cr11, cr1, {0}
     b88:	05671205 	strbeq	r1, [r7, #-517]!	; 0xfffffdfb
     b8c:	4e056a13 			; <UNDEFINED> instruction: 0x4e056a13
     b90:	ba210530 	blt	842058 <__core1_unwind_stub-0x7bdfa8>
     b94:	05f41605 	ldrbeq	r1, [r4, #1541]!	; 0x605
     b98:	1c058220 	sfmne	f0, 1, [r5], {32}
     b9c:	6614054a 	ldrvs	r0, [r4], -sl, asr #10
     ba0:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
     ba4:	1c054d12 	stcne	13, cr4, [r5], {18}
     ba8:	4a180582 	bmi	6021b8 <__core1_unwind_stub-0x9fde48>
     bac:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
     bb0:	67674c16 			; <UNDEFINED> instruction: 0x67674c16
     bb4:	73031305 	movwvc	r1, #13061	; 0x3305
     bb8:	030c0566 	movweq	r0, #50534	; 0xc566
     bbc:	33056615 	movwcc	r6, #22037	; 0x5615
     bc0:	01040200 	mrseq	r0, R12_usr
     bc4:	68130566 	ldmdavs	r3, {r1, r2, r5, r6, r8, sl}
     bc8:	05305005 	ldreq	r5, [r0, #-5]!
     bcc:	3605ba21 	strcc	fp, [r5], -r1, lsr #20
     bd0:	824005f4 	subhi	r0, r0, #244, 10	; 0x3d000000
     bd4:	054a3c05 	strbeq	r3, [sl, #-3077]	; 0xfffff3fb
     bd8:	1c056647 	stcne	6, cr6, [r5], {71}	; 0x47
     bdc:	2f24054a 	svccs	0x0024054a
     be0:	054a1a05 	strbeq	r1, [sl, #-2565]	; 0xfffff5fb
     be4:	11054c18 	tstne	r5, r8, lsl ip
     be8:	302b054a 	eorcc	r0, fp, sl, asr #10
     bec:	05662205 	strbeq	r2, [r6, #-517]!	; 0xfffffdfb
     bf0:	20058218 	andcs	r8, r5, r8, lsl r2
     bf4:	0027054c 	eoreq	r0, r7, ip, asr #10
     bf8:	4d020402 	cfstrsmi	mvf0, [r2, #-8]
     bfc:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
     c00:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
     c04:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
     c08:	25056602 	strcs	r6, [r5, #-1538]	; 0xfffff9fe
     c0c:	02040200 	andeq	r0, r4, #0, 4
     c10:	054a7903 	strbeq	r7, [sl, #-2307]	; 0xfffff6fd
     c14:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
     c18:	16056601 	strne	r6, [r5], -r1, lsl #12
     c1c:	67660a03 	strbvs	r0, [r6, -r3, lsl #20]!
     c20:	03130567 	tsteq	r3, #432013312	; 0x19c00000
     c24:	0f05666d 	svceq	0x0005666d
     c28:	05661703 	strbeq	r1, [r6, #-1795]!	; 0xfffff8fd
     c2c:	1d05304c 	stcne	0, cr3, [r5, #-304]	; 0xfffffed0
     c30:	f43205ba 			; <UNDEFINED> instruction: 0xf43205ba
     c34:	05823c05 	streq	r3, [r2, #3077]	; 0xc05
     c38:	43054a38 	movwmi	r4, #23096	; 0x5a38
     c3c:	4a180566 	bmi	6021dc <__core1_unwind_stub-0x9fde24>
     c40:	052f2005 	streq	r2, [pc, #-5]!	; c43 <__core1_unwind_stub-0xfff3bd>
     c44:	1a054a16 	bne	1534a4 <__core1_unwind_stub-0xeacb5c>
     c48:	9e10054c 	cfmac32ls	mvfx0, mvfx0, mvfx12
     c4c:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
     c50:	20054d16 	andcs	r4, r5, r6, lsl sp
     c54:	4c120582 	cfldr32mi	mvfx0, [r2], {130}	; 0x82
     c58:	0f056767 	svceq	0x00056767
     c5c:	05667003 	strbeq	r7, [r6, #-3]!
     c60:	7dff0326 	ldclvc	3, cr0, [pc, #152]!	; d00 <__core1_unwind_stub-0xfff300>
     c64:	00050566 	andeq	r0, r5, r6, ror #10
     c68:	66010402 	strvs	r0, [r1], -r2, lsl #8
     c6c:	96030c05 	strls	r0, [r3], -r5, lsl #24
     c70:	0105ba02 	tsteq	r5, r2, lsl #20
     c74:	01040200 	mrseq	r0, R12_usr
     c78:	0006022f 	andeq	r0, r6, pc, lsr #4
     c7c:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     c80:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     c84:	001aa402 	andseq	sl, sl, r2, lsl #8
     c88:	0ab40301 	beq	fed01894 <__shm_end__+0xbed01894>
     c8c:	83150501 	tsthi	r5, #4194304	; 0x400000
     c90:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
     c94:	0c056812 	stceq	8, cr6, [r5], {18}
     c98:	680d05a1 	stmdavs	sp, {r0, r5, r7, r8, sl}
     c9c:	05880805 	streq	r0, [r8, #2053]	; 0x805
     ca0:	0c056812 	stceq	8, cr6, [r5], {18}
     ca4:	680d0567 	stmdavs	sp, {r0, r1, r2, r5, r6, r8, sl}
     ca8:	05880805 	streq	r0, [r8, #2053]	; 0x805
     cac:	09056a10 	stmdbeq	r5, {r4, r9, fp, sp, lr}
     cb0:	001a054a 	andseq	r0, sl, sl, asr #10
     cb4:	30030402 	andcc	r0, r3, r2, lsl #8
     cb8:	02001d05 	andeq	r1, r0, #320	; 0x140
     cbc:	059c0304 	ldreq	r0, [ip, #772]	; 0x304
     cc0:	04020009 	streq	r0, [r2], #-9
     cc4:	12056601 	andne	r6, r5, #1048576	; 0x100000
     cc8:	9f0c056b 	svcls	0x000c056b
     ccc:	05680d05 	strbeq	r0, [r8, #-3333]!	; 0xfffff2fb
     cd0:	12058808 	andne	r8, r5, #8, 16	; 0x80000
     cd4:	4b0c0568 	blmi	30227c <__core1_unwind_stub-0xcfdd84>
     cd8:	05680d05 	strbeq	r0, [r8, #-3333]!	; 0xfffff2fb
     cdc:	0105860c 	tsteq	r5, ip, lsl #12
     ce0:	0006022f 	andeq	r0, r6, pc, lsr #4
     ce4:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     ce8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     cec:	00000002 	andeq	r0, r0, r2
     cf0:	0af30300 	beq	ffcc18f8 <__shm_end__+0xbfcc18f8>
     cf4:	bb0f0501 	bllt	3c2100 <__core1_unwind_stub-0xc3df00>
     cf8:	0e030505 	cfsh32eq	mvfx0, mvfx3, #5
     cfc:	052f4b4a 	streq	r4, [pc, #-2890]!	; 1ba <__core1_unwind_stub-0xfffe46>
     d00:	08054d0c 	stmdaeq	r5, {r2, r3, r8, sl, fp, lr}
     d04:	4f17054a 	svcmi	0x0017054a
     d08:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     d0c:	05674d1e 	strbeq	r4, [r7, #-3358]!	; 0xfffff2e2
     d10:	1e056524 	cfsh32ne	mvfx6, mvfx5, #20
     d14:	49240530 	stmdbmi	r4!, {r4, r5, r8, sl}
     d18:	052d0f05 	streq	r0, [sp, #-3845]!	; 0xfffff0fb
     d1c:	11054e09 	tstne	r5, r9, lsl #28
     d20:	4a0d05a0 	bmi	3423a8 <__core1_unwind_stub-0xcbdc58>
     d24:	054e1b05 	strbeq	r1, [lr, #-2821]	; 0xfffff4fb
     d28:	0c052e12 	stceq	14, cr2, [r5], {18}
     d2c:	0905674b 	stmdbeq	r5, {r0, r1, r3, r6, r8, r9, sl, sp, lr}
     d30:	da300584 	ble	c02348 <__core1_unwind_stub-0x3fdcb8>
     d34:	4b4a1405 	blmi	1285d50 <__bss_end__+0x271d50>
     d38:	05881b05 	streq	r1, [r8, #2821]	; 0xb05
     d3c:	0c052e12 	stceq	14, cr2, [r5], {18}
     d40:	0905834b 	stmdbeq	r5, {r0, r1, r3, r6, r8, r9, pc}
     d44:	f62e0584 			; <UNDEFINED> instruction: 0xf62e0584
     d48:	4b4a1405 	blmi	1285d64 <__bss_end__+0x271d64>
     d4c:	05690c05 	strbeq	r0, [r9, #-3077]!	; 0xfffff3fb
     d50:	06022f01 	streq	r2, [r2], -r1, lsl #30
     d54:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     d58:	00010502 	andeq	r0, r1, r2, lsl #10
     d5c:	00000205 	andeq	r0, r0, r5, lsl #4
     d60:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
     d64:	0905010b 	stmdbeq	r5, {r0, r1, r3, r8}
     d68:	2e1705bd 	cfcmp64cs	r0, mvdx7, mvdx13
     d6c:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
     d70:	08052e24 	stmdaeq	r5, {r2, r5, r9, sl, fp, sp}
     d74:	4c09052e 	cfstr32mi	mvfx0, [r9], {46}	; 0x2e
     d78:	05671005 	strbeq	r1, [r7, #-5]!
     d7c:	19054d1b 	stmdbne	r5, {r0, r1, r3, r4, r8, sl, fp, lr}
     d80:	4b0905d6 	blmi	2424e0 <__core1_unwind_stub-0xdbdb20>
     d84:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
     d88:	10054c09 	andne	r4, r5, r9, lsl #24
     d8c:	4d1d05bc 	cfldr32mi	mvfx0, [sp, #-752]	; 0xfffffd10
     d90:	05ba1b05 	ldreq	r1, [sl, #2821]!	; 0xb05
     d94:	05674c14 	strbeq	r4, [r7, #-3092]!	; 0xfffff3ec
     d98:	0105680c 	tsteq	r5, ip, lsl #16
     d9c:	01040200 	mrseq	r0, R12_usr
     da0:	0006022f 	andeq	r0, r6, pc, lsr #4
     da4:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     da8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     dac:	00000002 	andeq	r0, r0, r2
     db0:	0bd20300 	bleq	ff4819b8 <__shm_end__+0xbf4819b8>
     db4:	bb0f0501 	bllt	3c21c0 <__core1_unwind_stub-0xc3de40>
     db8:	68110567 	ldmdavs	r1, {r0, r1, r2, r5, r6, r8, sl}
     dbc:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     dc0:	10054c09 	andne	r4, r5, r9, lsl #24
     dc4:	4d140567 	cfldr32mi	mvfx0, [r4, #-412]	; 0xfffffe64
     dc8:	bc0b05bb 	cfstr32lt	mvfx0, [fp], {187}	; 0xbb
     dcc:	05313805 	ldreq	r3, [r1, #-2053]!	; 0xfffff7fb
     dd0:	1d054a1f 	vstrne	s8, [r5, #-124]	; 0xffffff84
     dd4:	4b0d05ba 	blmi	3424c4 <__core1_unwind_stub-0xcbdb3c>
     dd8:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
     ddc:	14054c0d 	strne	r4, [r5], #-3085	; 0xfffff3f3
     de0:	4d2105d8 	cfstr32mi	mvfx0, [r1, #-864]!	; 0xfffffca0
     de4:	05d61f05 	ldrbeq	r1, [r6, #3845]	; 0xf05
     de8:	2e054c15 	mcrcs	12, 0, r4, cr5, cr5, {0}
     dec:	660c054a 	strvs	r0, [ip], -sl, asr #10
     df0:	054d2705 	strbeq	r2, [sp, #-1797]	; 0xfffff8fb
     df4:	05674a1c 	strbeq	r4, [r7, #-2588]!	; 0xfffff5e4
     df8:	1c054a27 			; <UNDEFINED> instruction: 0x1c054a27
     dfc:	2705674a 	strcs	r6, [r5, -sl, asr #14]
     e00:	4a1c054a 	bmi	702330 <__core1_unwind_stub-0x8fdcd0>
     e04:	05680d05 	strbeq	r0, [r8, #-3333]!	; 0xfffff2fb
     e08:	826c0314 	rsbhi	r0, ip, #20, 6	; 0x50000000
     e0c:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
     e10:	6619030d 	ldrvs	r0, [r9], -sp, lsl #6
     e14:	67320e05 	ldrvs	r0, [r2, -r5, lsl #28]!
     e18:	05680c05 	strbeq	r0, [r8, #-3077]!	; 0xfffff3fb
     e1c:	06022f01 	streq	r2, [r2], -r1, lsl #30
     e20:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     e24:	00010502 	andeq	r0, r1, r2, lsl #10
     e28:	00000205 	andeq	r0, r0, r5, lsl #4
     e2c:	83030000 	movwhi	r0, #12288	; 0x3000
     e30:	1105010c 	tstne	r5, ip, lsl #2
     e34:	4a080583 	bmi	202448 <__core1_unwind_stub-0xdfdbb8>
     e38:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
     e3c:	054e6710 	strbeq	r6, [lr, #-1808]	; 0xfffff8f0
     e40:	06023001 	streq	r3, [r2], -r1
     e44:	b3010100 	movwlt	r0, #4352	; 0x1100
     e48:	03000001 	movweq	r0, #1
     e4c:	00010800 	andeq	r0, r1, r0, lsl #16
     e50:	fb010200 	blx	4165a <__core1_unwind_stub-0xfbe9a6>
     e54:	01000d0e 	tsteq	r0, lr, lsl #26
     e58:	00010101 	andeq	r0, r1, r1, lsl #2
     e5c:	00010000 	andeq	r0, r1, r0
     e60:	72730100 	rsbsvc	r0, r3, #0, 2
     e64:	6f632f63 	svcvs	0x00632f63
     e68:	00316572 	eorseq	r6, r1, r2, ror r5
     e6c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     e70:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     e74:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     e78:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     e7c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     e80:	61652d65 	cmnvs	r5, r5, ror #26
     e84:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     e88:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     e8c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     e90:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     e94:	73752f00 	cmnvc	r5, #0, 30
     e98:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     e9c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     ea0:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     ea4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     ea8:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     eac:	73752f00 	cmnvc	r5, #0, 30
     eb0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     eb4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     eb8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     ebc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     ec0:	6c776800 	ldclvs	8, cr6, [r7], #-0
     ec4:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     ec8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     ecc:	69006564 	stmdbvs	r0, {r2, r5, r6, r8, sl, sp, lr}
     ed0:	0000636e 	andeq	r6, r0, lr, ror #6
     ed4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     ed8:	616d5f31 	cmnvs	sp, r1, lsr pc
     edc:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
     ee0:	00000100 	andeq	r0, r0, r0, lsl #2
     ee4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     ee8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     eec:	00000200 	andeq	r0, r0, r0, lsl #4
     ef0:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
     ef4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     ef8:	00000200 	andeq	r0, r0, r0, lsl #4
     efc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     f00:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     f04:	00000300 	andeq	r0, r0, r0, lsl #6
     f08:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     f0c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     f10:	6c000003 	stcvs	0, cr0, [r0], {3}
     f14:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
     f18:	00030068 	andeq	r0, r3, r8, rrx
     f1c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     f20:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     f24:	00000400 	andeq	r0, r0, r0, lsl #8
     f28:	5f746c61 	svcpl	0x00746c61
     f2c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     f30:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
     f34:	00000500 	andeq	r0, r0, r0, lsl #10
     f38:	5f616d64 	svcpl	0x00616d64
     f3c:	6f79616c 	svcvs	0x0079616c
     f40:	682e7475 	stmdavs	lr!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
     f44:	00000600 	andeq	r0, r0, r0, lsl #12
     f48:	72616873 	rsbvc	r6, r1, #7536640	; 0x730000
     f4c:	695f6465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
     f50:	682e6370 	stmdavs	lr!, {r4, r5, r6, r8, r9, sp, lr}
     f54:	00000600 	andeq	r0, r0, r0, lsl #12
     f58:	00010500 	andeq	r0, r1, r0, lsl #10
     f5c:	1be00205 	blne	ff801778 <__shm_end__+0xbf801778>
     f60:	1c030100 	stfnes	f0, [r3], {-0}
     f64:	69130501 	ldmdbvs	r3, {r0, r8, sl}
     f68:	05660505 	strbeq	r0, [r6, #-1285]!	; 0xfffffafb
     f6c:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
     f70:	39052e03 	stmdbcc	r5, {r0, r1, r9, sl, fp, sp}
     f74:	03040200 	movweq	r0, #16896	; 0x4200
     f78:	00050566 	andeq	r0, r5, r6, ror #10
     f7c:	66010402 	strvs	r0, [r1], -r2, lsl #8
     f80:	029f0105 	addseq	r0, pc, #1073741825	; 0x40000001
     f84:	0101000a 	tsteq	r1, sl
     f88:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
     f8c:	001c3c02 	andseq	r3, ip, r2, lsl #24
     f90:	01230301 			; <UNDEFINED> instruction: 0x01230301
     f94:	4b830505 	blmi	fe0c23b0 <__shm_end__+0xbe0c23b0>
     f98:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     f9c:	01010008 	tsteq	r1, r8
     fa0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     fa4:	001c6802 	andseq	r6, ip, r2, lsl #16
     fa8:	012a0301 			; <UNDEFINED> instruction: 0x012a0301
     fac:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
     fb0:	0b056705 	bleq	15abcc <__core1_unwind_stub-0xea5434>
     fb4:	14053531 	strne	r3, [r5], #-1329	; 0xfffffacf
     fb8:	01040200 	mrseq	r0, R12_usr
     fbc:	000b052e 	andeq	r0, fp, lr, lsr #10
     fc0:	4a010402 	bmi	41fd0 <__core1_unwind_stub-0xfbe030>
     fc4:	00140583 	andseq	r0, r4, r3, lsl #11
     fc8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
     fcc:	02000b05 	andeq	r0, r0, #5120	; 0x1400
     fd0:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     fd4:	1b054e0d 	blne	154810 <__core1_unwind_stub-0xeab7f0>
     fd8:	0805052e 	stmdaeq	r5, {r1, r2, r3, r5, r8, sl}
     fdc:	00110591 	mulseq	r1, r1, r5
     fe0:	32010402 	andcc	r0, r1, #33554432	; 0x2000000
     fe4:	02001d05 	andeq	r1, r0, #320	; 0x140
     fe8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     fec:	04020009 	streq	r0, [r2], #-9
     ff0:	1d054b01 	vstrne	d4, [r5, #-4]
     ff4:	01040200 	mrseq	r0, R12_usr
     ff8:	0002022d 	andeq	r0, r2, sp, lsr #4
     ffc:	007f0101 	rsbseq	r0, pc, r1, lsl #2
    1000:	00030000 	andeq	r0, r3, r0
    1004:	00000030 	andeq	r0, r0, r0, lsr r0
    1008:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    100c:	0101000d 	tsteq	r1, sp
    1010:	00000101 	andeq	r0, r0, r1, lsl #2
    1014:	00000100 	andeq	r0, r0, r0, lsl #2
    1018:	63727301 	cmnvs	r2, #67108864	; 0x4000000
    101c:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    1020:	00003165 	andeq	r3, r0, r5, ror #2
    1024:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1028:	74735f31 	ldrbtvc	r5, [r3], #-3889	; 0xfffff0cf
    102c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    1030:	00632e70 	rsbeq	r2, r3, r0, ror lr
    1034:	00000001 	andeq	r0, r0, r1
    1038:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    103c:	001d0802 	andseq	r0, sp, r2, lsl #16
    1040:	19051a01 	stmdbne	r5, {r0, r9, fp, ip}
    1044:	66050569 	strvs	r0, [r5], -r9, ror #10
    1048:	02000c05 	andeq	r0, r0, #1280	; 0x500
    104c:	052f0304 	streq	r0, [pc, #-772]!	; d50 <__core1_unwind_stub-0xfff2b0>
    1050:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    1054:	05056503 	streq	r6, [r5, #-1283]	; 0xfffffafd
    1058:	01040200 	mrseq	r0, R12_usr
    105c:	9e0a0366 	cdpls	3, 0, cr0, cr10, cr6, {3}
    1060:	01040200 	mrseq	r0, R12_usr
    1064:	00020230 	andeq	r0, r2, r0, lsr r2
    1068:	01050101 	tsteq	r5, r1, lsl #2
    106c:	58020500 	stmdapl	r2, {r8, sl}
    1070:	0301001d 	movweq	r0, #4125	; 0x101d
    1074:	0505011c 	streq	r0, [r5, #-284]	; 0xfffffee4
    1078:	4e010514 	mcrmi	5, 0, r0, cr1, cr4, {0}
    107c:	01000402 	tsteq	r0, r2, lsl #8
    1080:	00019101 	andeq	r9, r1, r1, lsl #2
    1084:	6c000300 	stcvs	3, cr0, [r0], {-0}
    1088:	02000000 	andeq	r0, r0, #0
    108c:	0d0efb01 	vstreq	d15, [lr, #-4]
    1090:	01010100 	mrseq	r0, (UNDEF: 17)
    1094:	00000001 	andeq	r0, r0, r1
    1098:	01000001 	tsteq	r0, r1
    109c:	2f637273 	svccs	0x00637273
    10a0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    10a4:	752f0031 	strvc	r0, [pc, #-49]!	; 107b <__core1_unwind_stub-0xffef85>
    10a8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; ee4 <__core1_unwind_stub-0xfff11c>
    10ac:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    10b0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    10b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    10b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    10bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    10c0:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    10c4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    10c8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    10cc:	00006564 	andeq	r6, r0, r4, ror #10
    10d0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    10d4:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
    10d8:	0100632e 	tsteq	r0, lr, lsr #6
    10dc:	74730000 	ldrbtvc	r0, [r3], #-0
    10e0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    10e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    10e8:	74730000 	ldrbtvc	r0, [r3], #-0
    10ec:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    10f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    10f4:	05000000 	streq	r0, [r0, #-0]
    10f8:	02050001 	andeq	r0, r5, #1
    10fc:	01001d68 	tsteq	r0, r8, ror #26
    1100:	bb0e0517 	bllt	382564 <__core1_unwind_stub-0xc7da9c>
    1104:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
    1108:	25054a05 	strcs	r4, [r5, #-2565]	; 0xfffff5fb
    110c:	03040200 	movweq	r0, #16896	; 0x4200
    1110:	002b052e 	eoreq	r0, fp, lr, lsr #10
    1114:	66030402 	strvs	r0, [r3], -r2, lsl #8
    1118:	02002905 	andeq	r2, r0, #81920	; 0x14000
    111c:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    1120:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    1124:	05052e03 	streq	r2, [r5, #-3587]	; 0xfffff1fd
    1128:	01040200 	mrseq	r0, R12_usr
    112c:	830c0566 	movwhi	r0, #50534	; 0xc566
    1130:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1134:	01010008 	tsteq	r1, r8
    1138:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    113c:	001ddc02 	andseq	sp, sp, r2, lsl #24
    1140:	010c0301 	tsteq	ip, r1, lsl #6
    1144:	05bb0e05 	ldreq	r0, [fp, #3589]!	; 0xe05
    1148:	11054b14 	tstne	r5, r4, lsl fp
    114c:	4a05054b 	bmi	142680 <__core1_unwind_stub-0xebd980>
    1150:	02002c05 	andeq	r2, r0, #1280	; 0x500
    1154:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    1158:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    115c:	2c056603 	stccs	6, cr6, [r5], {3}
    1160:	03040200 	movweq	r0, #16896	; 0x4200
    1164:	00290566 	eoreq	r0, r9, r6, ror #10
    1168:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    116c:	02001f05 	andeq	r1, r0, #5, 30
    1170:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    1174:	04020005 	streq	r0, [r2], #-5
    1178:	0c056601 	stceq	6, cr6, [r5], {1}
    117c:	2f010583 	svccs	0x00010583
    1180:	01000802 	tsteq	r0, r2, lsl #16
    1184:	00010501 	andeq	r0, r1, r1, lsl #10
    1188:	00000205 	andeq	r0, r0, r5, lsl #4
    118c:	14030000 	strne	r0, [r3], #-0
    1190:	bb0e0501 	bllt	38259c <__core1_unwind_stub-0xc7da64>
    1194:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
    1198:	10054b08 	andne	r4, r5, r8, lsl #22
    119c:	02040200 	andeq	r0, r4, #0, 4
    11a0:	00220582 	eoreq	r0, r2, r2, lsl #11
    11a4:	66030402 	strvs	r0, [r3], -r2, lsl #8
    11a8:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    11ac:	09058315 	stmdbeq	r5, {r0, r2, r4, r8, r9, pc}
    11b0:	0030054a 	eorseq	r0, r0, sl, asr #10
    11b4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    11b8:	02002905 	andeq	r2, r0, #81920	; 0x14000
    11bc:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    11c0:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    11c4:	2d056603 	stccs	6, cr6, [r5, #-12]
    11c8:	03040200 	movweq	r0, #16896	; 0x4200
    11cc:	0023052e 	eoreq	r0, r3, lr, lsr #10
    11d0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    11d4:	02000905 	andeq	r0, r0, #81920	; 0x14000
    11d8:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    11dc:	0905a015 	stmdbeq	r5, {r0, r2, r4, sp, pc}
    11e0:	0032054a 	eorseq	r0, r2, sl, asr #10
    11e4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    11e8:	02002905 	andeq	r2, r0, #81920	; 0x14000
    11ec:	05820304 	streq	r0, [r2, #772]	; 0x304
    11f0:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    11f4:	2f058203 	svccs	0x00058203
    11f8:	03040200 	movweq	r0, #16896	; 0x4200
    11fc:	0023052e 	eoreq	r0, r3, lr, lsr #10
    1200:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    1204:	02000905 	andeq	r0, r0, #81920	; 0x14000
    1208:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    120c:	0105680c 	tsteq	r5, ip, lsl #16
    1210:	0008022f 	andeq	r0, r8, pc, lsr #4
    1214:	00480101 	subeq	r0, r8, r1, lsl #2
    1218:	00030000 	andeq	r0, r3, r0
    121c:	00000033 	andeq	r0, r0, r3, lsr r0
    1220:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1224:	0101000d 	tsteq	r1, sp
    1228:	00000101 	andeq	r0, r0, r1, lsl #2
    122c:	00000100 	andeq	r0, r0, r0, lsl #2
    1230:	63727301 	cmnvs	r2, #67108864	; 0x4000000
    1234:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    1238:	00003165 	andeq	r3, r0, r5, ror #2
    123c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1240:	78655f31 	stmdavc	r5!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    1244:	5f786469 	svcpl	0x00786469
    1248:	62757473 	rsbsvs	r7, r5, #1929379840	; 0x73000000
    124c:	0100532e 	tsteq	r0, lr, lsr #6
    1250:	00000000 	andeq	r0, r0, r0
    1254:	00000205 	andeq	r0, r0, r5, lsl #4
    1258:	15030100 	strne	r0, [r3, #-256]	; 0xffffff00
    125c:	00020201 	andeq	r0, r2, r1, lsl #4
    1260:	05780101 	ldrbeq	r0, [r8, #-257]!	; 0xfffffeff
    1264:	00030000 	andeq	r0, r3, r0
    1268:	00000129 	andeq	r0, r0, r9, lsr #2
    126c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1270:	0101000d 	tsteq	r1, sp
    1274:	00000101 	andeq	r0, r0, r1, lsl #2
    1278:	00000100 	andeq	r0, r0, r0, lsl #2
    127c:	63727301 	cmnvs	r2, #67108864	; 0x4000000
    1280:	73752f00 	cmnvc	r5, #0, 30
    1284:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1288:	63672f62 	cmnvs	r7, #392	; 0x188
    128c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    1290:	6f6e2d6d 	svcvs	0x006e2d6d
    1294:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1298:	2f696261 	svccs	0x00696261
    129c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    12a0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    12a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    12a8:	77680065 	strbvc	r0, [r8, -r5, rrx]!
    12ac:	2f62696c 	svccs	0x0062696c
    12b0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    12b4:	00656475 	rsbeq	r6, r5, r5, ror r4
    12b8:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    12bc:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    12c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    12c4:	6f732f65 	svcvs	0x00732f65
    12c8:	31615f63 	cmncc	r1, r3, ror #30
    12cc:	752f0030 	strvc	r0, [pc, #-48]!	; 12a4 <__core1_unwind_stub-0xffed5c>
    12d0:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    12d4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    12d8:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    12dc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    12e0:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    12e4:	752f0073 	strvc	r0, [pc, #-115]!	; 1279 <__core1_unwind_stub-0xffed87>
    12e8:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    12ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    12f0:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    12f4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    12f8:	61000062 	tstvs	r0, r2, rrx
    12fc:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 113c <__core1_unwind_stub-0xffeec4>
    1300:	725f6d65 	subsvc	r6, pc, #6464	; 0x1940
    1304:	6f696765 	svcvs	0x00696765
    1308:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    130c:	00000100 	andeq	r0, r0, r0, lsl #2
    1310:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1314:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1318:	00000200 	andeq	r0, r0, r0, lsl #4
    131c:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    1320:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1324:	00000200 	andeq	r0, r0, r0, lsl #4
    1328:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    132c:	00682e62 	rsbeq	r2, r8, r2, ror #28
    1330:	61000003 	tstvs	r0, r3
    1334:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 118c <__core1_unwind_stub-0xffee74>
    1338:	682e756d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}
    133c:	00000300 	andeq	r0, r0, r0, lsl #6
    1340:	5f746c61 	svcpl	0x00746c61
    1344:	64697262 	strbtvs	r7, [r9], #-610	; 0xfffffd9e
    1348:	6d5f6567 	cfldr64vs	mvdx6, [pc, #-412]	; 11b4 <__core1_unwind_stub-0xffee4c>
    134c:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
    1350:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    1354:	00000400 	andeq	r0, r0, r0, lsl #8
    1358:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    135c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1360:	00000500 	andeq	r0, r0, r0, lsl #10
    1364:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    1368:	00682e74 	rsbeq	r2, r8, r4, ror lr
    136c:	6c000005 	stcvs	0, cr0, [r0], {5}
    1370:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    1374:	00050068 	andeq	r0, r5, r8, rrx
    1378:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    137c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    1380:	00000600 	andeq	r0, r0, r0, lsl #12
    1384:	5f746c61 	svcpl	0x00746c61
    1388:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    138c:	682e6674 	stmdavs	lr!, {r2, r4, r5, r6, r9, sl, sp, lr}
    1390:	00000300 	andeq	r0, r0, r0, lsl #6
    1394:	001d0500 	andseq	r0, sp, r0, lsl #10
    1398:	1e600205 	cdpne	2, 6, cr0, cr0, cr5, {0}
    139c:	19030100 	stmdbne	r3, {r8}
    13a0:	4a1f0501 	bmi	7c27ac <__core1_unwind_stub-0x83d854>
    13a4:	022e0105 	eoreq	r0, lr, #1073741825	; 0x40000001
    13a8:	01010008 	tsteq	r1, r8
    13ac:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
    13b0:	001e7c02 	andseq	r7, lr, r2, lsl #24
    13b4:	011a0301 	tsteq	sl, r1, lsl #6
    13b8:	054a1f05 	strbeq	r1, [sl, #-3845]	; 0xfffff0fb
    13bc:	08022e01 	stmdaeq	r2, {r0, r9, sl, fp, sp}
    13c0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13c4:	02050001 	andeq	r0, r5, #1
    13c8:	01001e98 			; <UNDEFINED> instruction: 0x01001e98
    13cc:	05011f03 	streq	r1, [r1, #-3843]	; 0xfffff0fd
    13d0:	0b056905 	bleq	15b7ec <__core1_unwind_stub-0xea4814>
    13d4:	8305054d 	movwhi	r0, #21837	; 0x554d
    13d8:	054b4d4b 	strbeq	r4, [fp, #-3403]	; 0xfffff2b5
    13dc:	08024b01 	stmdaeq	r2, {r0, r8, r9, fp, lr}
    13e0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13e4:	02050001 	andeq	r0, r5, #1
    13e8:	01001eec 	smlatteq	r0, ip, lr, r1
    13ec:	05013003 	streq	r3, [r1, #-3]
    13f0:	0b056805 	bleq	15b40c <__core1_unwind_stub-0xea4bf4>
    13f4:	6705054b 	strvs	r0, [r5, -fp, asr #10]
    13f8:	2e0c054b 	cfsh32cs	mvfx0, mvfx12, #43
    13fc:	05301805 	ldreq	r1, [r0, #-2053]!	; 0xfffff7fb
    1400:	0505670f 	streq	r6, [r5, #-1807]	; 0xfffff8f1
    1404:	2e0c059f 	mcrcs	5, 0, r0, cr12, cr15, {4}
    1408:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    140c:	01010006 	tsteq	r1, r6
    1410:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1414:	001f5002 	andseq	r5, pc, r2
    1418:	00ce0301 	sbceq	r0, lr, r1, lsl #6
    141c:	9f110501 	svcls	0x00110501
    1420:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    1424:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
    1428:	34056601 	strcc	r6, [r5], #-1537	; 0xfffff9ff
    142c:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    1430:	00660601 	rsbeq	r0, r6, r1, lsl #12
    1434:	4a020402 	bmi	82444 <__core1_unwind_stub-0xf7dbbc>
    1438:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
    143c:	2e060404 	cdpcs	4, 0, cr0, cr6, cr4, {0}
    1440:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    1444:	052f0404 	streq	r0, [pc, #-1028]!	; 1048 <__core1_unwind_stub-0xffefb8>
    1448:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    144c:	2f054a04 	svccs	0x00054a04
    1450:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1454:	000c0566 	andeq	r0, ip, r6, ror #10
    1458:	4a040402 	bmi	102468 <__core1_unwind_stub-0xefdb98>
    145c:	02000d05 	andeq	r0, r0, #320	; 0x140
    1460:	054c0404 	strbeq	r0, [ip, #-1028]	; 0xfffffbfc
    1464:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    1468:	08056604 	stmdaeq	r5, {r2, r9, sl, sp, lr}
    146c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1470:	0029054a 	eoreq	r0, r9, sl, asr #10
    1474:	4a010402 	bmi	42484 <__core1_unwind_stub-0xfbdb7c>
    1478:	054c1505 	strbeq	r1, [ip, #-1285]	; 0xfffffafb
    147c:	15054a0b 	strne	r4, [r5, #-2571]	; 0xfffff5f5
    1480:	660f0567 	strvs	r0, [pc], -r7, ror #10
    1484:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    1488:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
    148c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1490:	02050001 	andeq	r0, r5, #1
    1494:	01002020 	tsteq	r0, r0, lsr #32
    1498:	0100e003 	tsteq	r0, r3
    149c:	05831905 	streq	r1, [r3, #2309]	; 0x905
    14a0:	24054b08 	strcs	r4, [r5], #-2824	; 0xfffff4f8
    14a4:	01040200 	mrseq	r0, R12_usr
    14a8:	4c140566 	cfldr32mi	mvfx0, [r4], {102}	; 0x66
    14ac:	05841a05 	streq	r1, [r4, #2565]	; 0xa05
    14b0:	d631030c 	ldrtle	r0, [r1], -ip, lsl #6
    14b4:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    14b8:	2e059f08 	cdpcs	15, 0, cr9, cr5, cr8, {0}
    14bc:	01040200 	mrseq	r0, R12_usr
    14c0:	4c0f0566 	cfstr32mi	mvfx0, [pc], {102}	; 0x66
    14c4:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    14c8:	053f0808 	ldreq	r0, [pc, #-2056]!	; cc8 <__core1_unwind_stub-0xfff338>
    14cc:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    14d0:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    14d4:	8308054c 	movwhi	r0, #34124	; 0x854c
    14d8:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    14dc:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    14e0:	1b054c08 	blne	154508 <__core1_unwind_stub-0xeabaf8>
    14e4:	01040200 	mrseq	r0, R12_usr
    14e8:	670c0566 	strvs	r0, [ip, -r6, ror #10]
    14ec:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    14f0:	022f0104 	eoreq	r0, pc, #4, 2
    14f4:	01010006 	tsteq	r1, r6
    14f8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    14fc:	00000002 	andeq	r0, r0, r2
    1500:	01ab0300 			; <UNDEFINED> instruction: 0x01ab0300
    1504:	6a060501 	bvs	182910 <__core1_unwind_stub-0xe7d6f0>
    1508:	05326731 	ldreq	r6, [r2, #-1841]!	; 0xfffff8cf
    150c:	06054b0c 	streq	r4, [r5], -ip, lsl #22
    1510:	0d054b83 	vstreq	d4, [r5, #-524]	; 0xfffffdf4
    1514:	2f01054d 	svccs	0x0001054d
    1518:	01000802 	tsteq	r0, r2, lsl #16
    151c:	00010501 	andeq	r0, r1, r1, lsl #10
    1520:	21380205 	teqcs	r8, r5, lsl #4
    1524:	c2030100 	andgt	r0, r3, #0, 2
    1528:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    152c:	0f052f67 	svceq	0x00052f67
    1530:	4c070530 	cfstr32mi	mvfx0, [r7], {48}	; 0x30
    1534:	05840c05 	streq	r0, [r4, #3077]	; 0xc05
    1538:	06022f01 	streq	r2, [r2], -r1, lsl #30
    153c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1540:	02050001 	andeq	r0, r5, #1
    1544:	00000000 	andeq	r0, r0, r0
    1548:	0101d203 	tsteq	r1, r3, lsl #4
    154c:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    1550:	054b4b05 	strbeq	r4, [fp, #-2821]	; 0xfffff4fb
    1554:	01052e0c 	tsteq	r5, ip, lsl #28
    1558:	0006022f 	andeq	r0, r6, pc, lsr #4
    155c:	01050101 	tsteq	r5, r1, lsl #2
    1560:	00020500 	andeq	r0, r2, r0, lsl #10
    1564:	03000000 	movweq	r0, #0
    1568:	050101da 	streq	r0, [r1, #-474]	; 0xfffffe26
    156c:	05056a0e 	streq	r6, [r5, #-2574]	; 0xfffff5f2
    1570:	05314b4b 	ldreq	r4, [r1, #-2891]!	; 0xfffff4b5
    1574:	10054d1b 	andne	r4, r5, fp, lsl sp
    1578:	4b1b054a 	blmi	6c2aa8 <__core1_unwind_stub-0x93d558>
    157c:	054a1005 	strbeq	r1, [sl, #-5]
    1580:	10054b1b 	andne	r4, r5, fp, lsl fp
    1584:	4c0e054a 	cfstr32mi	mvfx0, [lr], {74}	; 0x4a
    1588:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
    158c:	2e054b20 	vmlacs.f64	d4, d5, d16
    1590:	6616054a 	ldrvs	r0, [r6], -sl, asr #10
    1594:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    1598:	1f054b10 	svcne	0x00054b10
    159c:	66230563 	strtvs	r0, [r3], -r3, ror #10
    15a0:	05310d05 	ldreq	r0, [r1, #-3333]!	; 0xfffff2fb
    15a4:	1b05300c 	blne	14d5dc <__core1_unwind_stub-0xeb2a24>
    15a8:	05667a03 	strbeq	r7, [r6, #-2563]!	; 0xfffff5fd
    15ac:	09056712 	stmdbeq	r5, {r1, r4, r8, r9, sl, sp, lr}
    15b0:	30050533 	andcc	r0, r5, r3, lsr r5
    15b4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    15b8:	01010006 	tsteq	r1, r6
    15bc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    15c0:	00000002 	andeq	r0, r0, r2
    15c4:	01f70300 	mvnseq	r0, r0, lsl #6
    15c8:	a0050501 	andge	r0, r5, r1, lsl #10
    15cc:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    15d0:	6767670f 	strbvs	r6, [r7, -pc, lsl #14]!
    15d4:	05676784 	strbeq	r6, [r7, #-1924]!	; 0xfffff87c
    15d8:	054b6805 	strbeq	r6, [fp, #-2053]	; 0xfffff7fb
    15dc:	01052e0c 	tsteq	r5, ip, lsl #28
    15e0:	0006022f 	andeq	r0, r6, pc, lsr #4
    15e4:	01050101 	tsteq	r5, r1, lsl #2
    15e8:	00020500 	andeq	r0, r2, r0, lsl #10
    15ec:	03000000 	movweq	r0, #0
    15f0:	05010289 	streq	r0, [r1, #-649]	; 0xfffffd77
    15f4:	09059f08 	stmdbeq	r5, {r3, r8, r9, sl, fp, ip, pc}
    15f8:	12052f68 	andne	r2, r5, #104, 30	; 0x1a0
    15fc:	4b090530 	blmi	242ac4 <__core1_unwind_stub-0xdbd53c>
    1600:	2e10054b 	cfmac32cs	mvfx0, mvfx0, mvfx11
    1604:	69300905 	ldmdbvs	r0!, {r0, r2, r8, fp}
    1608:	2f120530 	svccs	0x00120530
    160c:	4b4b0905 	blmi	12c3a28 <__bss_end__+0x2afa28>
    1610:	052e1005 	streq	r1, [lr, #-5]!
    1614:	0c053009 	stceq	0, cr3, [r5], {9}
    1618:	2f01054c 	svccs	0x0001054c
    161c:	01000602 	tsteq	r0, r2, lsl #12
    1620:	00010501 	andeq	r0, r1, r1, lsl #10
    1624:	00000205 	andeq	r0, r0, r5, lsl #4
    1628:	a7030000 	strge	r0, [r3, -r0]
    162c:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    1630:	4b0c0568 	blmi	302bd8 <__core1_unwind_stub-0xcfd428>
    1634:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1638:	01010008 	tsteq	r1, r8
    163c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1640:	00000002 	andeq	r0, r0, r2
    1644:	02ae0300 	adceq	r0, lr, #0, 6
    1648:	d7120501 	ldrle	r0, [r2, -r1, lsl #10]
    164c:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    1650:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    1654:	1f056601 	svcne	0x00056601
    1658:	01040200 	mrseq	r0, R12_usr
    165c:	4b0805ba 	blmi	202d4c <__core1_unwind_stub-0xdfd2b4>
    1660:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    1664:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1668:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    166c:	1f054a01 	svcne	0x00054a01
    1670:	01040200 	mrseq	r0, R12_usr
    1674:	4b08059e 	blmi	202cf4 <__core1_unwind_stub-0xdfd30c>
    1678:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    167c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1680:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    1684:	1f054a01 	svcne	0x00054a01
    1688:	01040200 	mrseq	r0, R12_usr
    168c:	4b08059e 	blmi	202d0c <__core1_unwind_stub-0xdfd2f4>
    1690:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    1694:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1698:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    169c:	1f054a01 	svcne	0x00054a01
    16a0:	01040200 	mrseq	r0, R12_usr
    16a4:	4b01059e 	blmi	42d24 <__core1_unwind_stub-0xfbd2dc>
    16a8:	01000602 	tsteq	r0, r2, lsl #12
    16ac:	00010501 	andeq	r0, r1, r1, lsl #10
    16b0:	00000205 	andeq	r0, r0, r5, lsl #4
    16b4:	b7030000 	strlt	r0, [r3, -r0]
    16b8:	12050102 	andne	r0, r5, #-2147483648	; 0x80000000
    16bc:	4c050567 	cfstr32mi	mvfx0, [r5], {103}	; 0x67
    16c0:	054b1b05 	strbeq	r1, [fp, #-2821]	; 0xfffff4fb
    16c4:	26054905 	strcs	r4, [r5], -r5, lsl #18
    16c8:	4905052f 	stmdbmi	r5, {r0, r1, r2, r3, r5, r8, sl}
    16cc:	052f3005 	streq	r3, [pc, #-5]!	; 16cf <__core1_unwind_stub-0xffe931>
    16d0:	01054905 	tsteq	r5, r5, lsl #18
    16d4:	06022208 	streq	r2, [r2], -r8, lsl #4
    16d8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    16dc:	02050001 	andeq	r0, r5, #1
    16e0:	00000000 	andeq	r0, r0, r0
    16e4:	0102bf03 	tsteq	r2, r3, lsl #30
    16e8:	05681805 	strbeq	r1, [r8, #-2053]!	; 0xfffff7fb
    16ec:	1905670e 	stmdbne	r5, {r1, r2, r3, r8, r9, sl, sp, lr}
    16f0:	2e1f054a 	cfmac32cs	mvfx0, mvfx15, mvfx10
    16f4:	02860105 	addeq	r0, r6, #1073741825	; 0x40000001
    16f8:	01010008 	tsteq	r1, r8
    16fc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1700:	00000002 	andeq	r0, r0, r2
    1704:	02df0300 	sbcseq	r0, pc, #0, 6
    1708:	4b090501 	blmi	242b14 <__core1_unwind_stub-0xdbd4ec>
    170c:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    1710:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    1714:	1b054a01 	blne	153f20 <__core1_unwind_stub-0xeac0e0>
    1718:	0031059f 	mlaseq	r1, pc, r5, r0	; <UNPREDICTABLE>
    171c:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    1720:	059f1b05 	ldreq	r1, [pc, #2821]	; 222d <__core1_unwind_stub-0xffddd3>
    1724:	0c059f10 	stceq	15, cr9, [r5], {16}
    1728:	2f01054b 	svccs	0x0001054b
    172c:	01000802 	tsteq	r0, r2, lsl #16
    1730:	00010501 	andeq	r0, r1, r1, lsl #10
    1734:	00000205 	andeq	r0, r0, r5, lsl #4
    1738:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    173c:	19050102 	stmdbne	r5, {r1, r8}
    1740:	67080568 	strvs	r0, [r8, -r8, ror #10]
    1744:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    1748:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    174c:	08054d09 	stmdaeq	r5, {r0, r3, r8, sl, fp, lr}
    1750:	00240567 	eoreq	r0, r4, r7, ror #10
    1754:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1758:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    175c:	0105830c 	tsteq	r5, ip, lsl #6
    1760:	0006022f 	andeq	r0, r6, pc, lsr #4
    1764:	01050101 	tsteq	r5, r1, lsl #2
    1768:	00020500 	andeq	r0, r2, r0, lsl #10
    176c:	03000000 	movweq	r0, #0
    1770:	050102f6 	streq	r0, [r1, #-758]	; 0xfffffd0a
    1774:	09056715 	stmdbeq	r5, {r0, r2, r4, r8, r9, sl, sp, lr}
    1778:	9e08054c 	cfsh32ls	mvfx0, mvfx8, #44
    177c:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    1780:	28054b0c 	stmdacs	r5, {r2, r3, r8, r9, fp, lr}
    1784:	01040200 	mrseq	r0, R12_usr
    1788:	4e180566 	cfmsc32mi	mvfx0, mvfx8, mvfx6
    178c:	9f9f9f9f 	svcls	0x009f9f9f
    1790:	9f9f9f9f 	svcls	0x009f9f9f
    1794:	9f15059f 	svcls	0x0015059f
    1798:	9f16059f 	svcls	0x0016059f
    179c:	9f9f1805 	svcls	0x009f1805
    17a0:	05a00c05 	streq	r0, [r0, #3077]!	; 0xc05
    17a4:	06022f01 	streq	r2, [r2], -r1, lsl #30
    17a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    17ac:	02050001 	andeq	r0, r5, #1
    17b0:	00000000 	andeq	r0, r0, r0
    17b4:	01039303 	tsteq	r3, r3, lsl #6
    17b8:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
    17bc:	14058313 	strne	r8, [r5], #-787	; 0xfffffced
    17c0:	83170583 	tsthi	r7, #549453824	; 0x20c00000
    17c4:	05831805 	streq	r1, [r3, #2053]	; 0x805
    17c8:	18058317 	stmdane	r5, {r0, r1, r2, r4, r8, r9, pc}
    17cc:	83170583 	tsthi	r7, #549453824	; 0x20c00000
    17d0:	05831405 	streq	r1, [r3, #1029]	; 0x405
    17d4:	0105840c 	tsteq	r5, ip, lsl #8
    17d8:	0008022f 	andeq	r0, r8, pc, lsr #4
    17dc:	01e90101 	mvneq	r0, r1, lsl #2
    17e0:	00030000 	andeq	r0, r3, r0
    17e4:	000000ca 	andeq	r0, r0, sl, asr #1
    17e8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    17ec:	0101000d 	tsteq	r1, sp
    17f0:	00000101 	andeq	r0, r0, r1, lsl #2
    17f4:	00000100 	andeq	r0, r0, r0, lsl #2
    17f8:	2f2e2e01 	svccs	0x002e2e01
    17fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1800:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    1804:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    1808:	2f2e2e00 	svccs	0x002e2e00
    180c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1810:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    1814:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    1818:	2f2e2e2f 	svccs	0x002e2e2f
    181c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1820:	00656475 	rsbeq	r6, r5, r5, ror r4
    1824:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1828:	2f2e2f2e 	svccs	0x002e2f2e
    182c:	00636367 	rsbeq	r6, r3, r7, ror #6
    1830:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1834:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1838:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    183c:	2f636367 	svccs	0x00636367
    1840:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    1844:	632f6363 			; <UNDEFINED> instruction: 0x632f6363
    1848:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    184c:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
    1850:	6c00006d 	stcvs	0, cr0, [r0], {109}	; 0x6d
    1854:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    1858:	632e3263 			; <UNDEFINED> instruction: 0x632e3263
    185c:	00000100 	andeq	r0, r0, r0, lsl #2
    1860:	68736168 	ldmdavs	r3!, {r3, r5, r6, r8, sp, lr}^
    1864:	2e626174 	mcrcs	1, 3, r6, cr2, cr4, {3}
    1868:	00020068 	andeq	r0, r2, r8, rrx
    186c:	6d726100 	ldfvse	f6, [r2, #-0]
    1870:	6173692d 	cmnvs	r3, sp, lsr #18
    1874:	0300682e 	movweq	r6, #2094	; 0x82e
    1878:	72610000 	rsbvc	r0, r1, #0
    187c:	70632d6d 	rsbvc	r2, r3, sp, ror #26
    1880:	00682e75 	rsbeq	r2, r8, r5, ror lr
    1884:	69000003 	stmdbvs	r0, {r0, r1}
    1888:	2d6e736e 	stclcs	3, cr7, [lr, #-440]!	; 0xfffffe48
    188c:	736e6f63 	cmnvc	lr, #396	; 0x18c
    1890:	746e6174 	strbtvc	r6, [lr], #-372	; 0xfffffe8c
    1894:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1898:	61000003 	tstvs	r0, r3
    189c:	682e6d72 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}
    18a0:	00000400 	andeq	r0, r0, r0, lsl #8
    18a4:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    18a8:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    18ac:	00010068 	andeq	r0, r1, r8, rrx
    18b0:	01050000 	mrseq	r0, (UNDEF: 5)
    18b4:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    18b8:	03010021 	movweq	r0, #4129	; 0x1021
    18bc:	050107b3 	streq	r0, [r1, #-1971]	; 0xfffff84d
    18c0:	06051303 	streq	r1, [r5], -r3, lsl #6
    18c4:	010b0306 	tsteq	fp, r6, lsl #6
    18c8:	74030105 	strvc	r0, [r3], #-261	; 0xfffffefb
    18cc:	0b052e4a 	bleq	14d1fc <__core1_unwind_stub-0xeb2e04>
    18d0:	2d01052f 	cfstr32cs	mvfx0, [r1, #-188]	; 0xffffff44
    18d4:	30060305 	andcc	r0, r6, r5, lsl #6
    18d8:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    18dc:	74030601 	strvc	r0, [r3], #-1537	; 0xfffff9ff
    18e0:	2f0b0501 	svccs	0x000b0501
    18e4:	0b030605 	bleq	c3100 <__core1_unwind_stub-0xf3cf00>
    18e8:	0607052e 	streq	r0, [r7], -lr, lsr #10
    18ec:	060d0530 			; <UNDEFINED> instruction: 0x060d0530
    18f0:	052d9f01 	streq	r9, [sp, #-3841]!	; 0xfffff0ff
    18f4:	052f0607 	streq	r0, [pc, #-1543]!	; 12f5 <__core1_unwind_stub-0xffed0b>
    18f8:	2e01060d 	cfmadd32cs	mvax0, mvfx0, mvfx1, mvfx13
    18fc:	30060705 	andcc	r0, r6, r5, lsl #14
    1900:	01060905 	tsteq	r6, r5, lsl #18
    1904:	2f060705 	svccs	0x00060705
    1908:	01060905 	tsteq	r6, r5, lsl #18
    190c:	890a052e 	stmdbhi	sl, {r1, r2, r3, r5, r8, sl}
    1910:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    1914:	0607052e 	streq	r0, [r7], -lr, lsr #10
    1918:	060a0535 			; <UNDEFINED> instruction: 0x060a0535
    191c:	030b0501 	movweq	r0, #46337	; 0xb501
    1920:	052e2e68 	streq	r2, [lr, #-3688]!	; 0xfffff198
    1924:	2e18030a 	cdpcs	3, 1, cr0, cr8, cr10, {0}
    1928:	30060405 	andcc	r0, r6, r5, lsl #8
    192c:	13060605 	movwne	r0, #26117	; 0x6605
    1930:	05492f2d 	strbeq	r2, [r9, #-3885]	; 0xfffff0d3
    1934:	052f0604 	streq	r0, [pc, #-1540]!	; 1338 <__core1_unwind_stub-0xffecc8>
    1938:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    193c:	05310607 	ldreq	r0, [r1, #-1543]!	; 0xfffff9f9
    1940:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    1944:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    1948:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    194c:	06860604 	streq	r0, [r6], r4, lsl #12
    1950:	320b0501 	andcc	r0, fp, #4194304	; 0x400000
    1954:	054a1005 	strbeq	r1, [sl, #-5]
    1958:	052e4a05 	streq	r4, [lr, #-2565]!	; 0xfffff5fb
    195c:	05310608 	ldreq	r0, [r1, #-1544]!	; 0xfffff9f8
    1960:	0605130e 	streq	r1, [r5], -lr, lsl #6
    1964:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    1968:	79030604 	stmdbvc	r3, {r2, r9, sl}
    196c:	1408052e 	strne	r0, [r8], #-1326	; 0xfffffad2
    1970:	14130305 	ldrne	r0, [r3], #-773	; 0xfffffcfb
    1974:	0f060b05 	svceq	0x00060b05
    1978:	2e690505 	cdpcs	5, 6, cr0, cr9, cr5, {0}
    197c:	2f060805 	svccs	0x00060805
    1980:	05130e05 	ldreq	r0, [r3, #-3589]	; 0xfffff1fb
    1984:	2e010606 	cfmadd32cs	mvax0, mvfx0, mvfx1, mvfx6
    1988:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    198c:	13060605 	movwne	r0, #26117	; 0x6605
    1990:	2d2e2f65 	stccs	15, cr2, [lr, #-404]!	; 0xfffffe6c
    1994:	2f060405 	svccs	0x00060405
    1998:	01060605 	tsteq	r6, r5, lsl #12
    199c:	2f060405 	svccs	0x00060405
    19a0:	01060f05 	tsteq	r6, r5, lsl #30
    19a4:	05660605 	strbeq	r0, [r6, #-1541]!	; 0xfffff9fb
    19a8:	06052e0f 	streq	r2, [r5], -pc, lsl #28
    19ac:	0603052e 	streq	r0, [r3], -lr, lsr #10
    19b0:	06060532 			; <UNDEFINED> instruction: 0x06060532
    19b4:	06050501 	streq	r0, [r5], -r1, lsl #10
    19b8:	0609052f 	streq	r0, [r9], -pc, lsr #10
    19bc:	06030501 	streq	r0, [r3], -r1, lsl #10
    19c0:	0601052f 	streq	r0, [r1], -pc, lsr #10
    19c4:	02022e13 	andeq	r2, r2, #304	; 0x130
    19c8:	5d010100 	stfpls	f0, [r1, #-0]
    19cc:	03000000 	movweq	r0, #0
    19d0:	00003d00 	andeq	r3, r0, r0, lsl #26
    19d4:	fb010200 	blx	421de <__core1_unwind_stub-0xfbde22>
    19d8:	01000d0e 	tsteq	r0, lr, lsl #26
    19dc:	00010101 	andeq	r0, r1, r1, lsl #2
    19e0:	00010000 	andeq	r0, r1, r0
    19e4:	2e2e0100 	sufcse	f0, f6, f0
    19e8:	2f2e2e2f 	svccs	0x002e2e2f
    19ec:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 193c <__core1_unwind_stub-0xffe6c4>
    19f0:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    19f4:	6f632f63 	svcvs	0x00632f63
    19f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    19fc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1a00:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    1a04:	75663162 	strbvc	r3, [r6, #-354]!	; 0xfffffe9e
    1a08:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
    1a0c:	00010053 	andeq	r0, r1, r3, asr r0
    1a10:	05000000 	streq	r0, [r0, #-0]
    1a14:	0022a402 	eoreq	sl, r2, r2, lsl #8
    1a18:	0de10301 	stcleq	3, cr0, [r1, #4]!
    1a1c:	032f3001 			; <UNDEFINED> instruction: 0x032f3001
    1a20:	2f2f2e09 	svccs	0x002f2e09
    1a24:	02342f30 	eorseq	r2, r4, #48, 30	; 0xc0
    1a28:	01010004 	tsteq	r1, r4
    1a2c:	00000060 	andeq	r0, r0, r0, rrx
    1a30:	003d0003 	eorseq	r0, sp, r3
    1a34:	01020000 	mrseq	r0, (UNDEF: 2)
    1a38:	000d0efb 	strdeq	r0, [sp], -fp
    1a3c:	01010101 	tsteq	r1, r1, lsl #2
    1a40:	01000000 	mrseq	r0, (UNDEF: 0)
    1a44:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1a48:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1a4c:	2f2e2e2f 	svccs	0x002e2e2f
    1a50:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    1a54:	632f6363 			; <UNDEFINED> instruction: 0x632f6363
    1a58:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a5c:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
    1a60:	6c00006d 	stcvs	0, cr0, [r0], {109}	; 0x6d
    1a64:	66316269 	ldrtvs	r6, [r1], -r9, ror #4
    1a68:	73636e75 	cmnvc	r3, #1872	; 0x750
    1a6c:	0100532e 	tsteq	r0, lr, lsr #6
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	22cc0205 	sbccs	r0, ip, #1342177280	; 0x50000000
    1a78:	c0030100 	andgt	r0, r3, r0, lsl #2
    1a7c:	302f010d 	eorcc	r0, pc, sp, lsl #2
    1a80:	2f302f2f 	svccs	0x00302f2f
    1a84:	2f2f302f 	svccs	0x002f302f
    1a88:	022f2f2f 	eoreq	r2, pc, #47, 30	; 0xbc
    1a8c:	0101000a 	tsteq	r1, sl

Disassembly of section .debug_str:

00000000 <.debug_str>:
{
       0:	5f544c41 	svcpl	0x00544c41
       4:	5f554d4d 	svcpl	0x00554d4d
       8:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
       c:	5f42575f 	svcpl	0x0042575f
      10:	41005457 	tstmi	r0, r7, asr r4
      14:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; fffffeec <__shm_end__+0xbffffeec>
    uint8_t *d = (uint8_t *)dst;
      18:	415f554d 	cmpmi	pc, sp, asr #10
      1c:	5f525454 	svcpl	0x00525454
    const uint8_t *s = (const uint8_t *)src;
      20:	74005457 	strvc	r5, [r0], #-1111	; 0xfffffba9
      24:	5f316274 	svcpl	0x00316274
    if (d == s || n == 0) return dst;
      28:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
      2c:	74637300 	strbtvc	r7, [r3], #-768	; 0xfffffd00
      30:	735f726c 	cmpvc	pc, #108, 4	; 0xc0000006
      34:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
      38:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
      3c:	6c610072 	stclvs	0, cr0, [r1], #-456	; 0xfffffe38
      40:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
      44:	74745f75 	ldrbtvc	r5, [r4], #-3957	; 0xfffff08b
      48:	695f3262 	ldmdbvs	pc, {r1, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    if (d < s) {
      4c:	0074696e 	rsbseq	r6, r4, lr, ror #18
      50:	5f746c61 	svcpl	0x00746c61
      54:	5f756d6d 	svcpl	0x00756d6d
      58:	52425454 	subpl	r5, r2, #84, 8	; 0x54000000
        for (size_t i = 0; i < n; ++i) d[i] = s[i];
      5c:	65675f31 	strbvs	r5, [r7, #-3889]!	; 0xfffff0cf
      60:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
      64:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
      68:	50415f55 	subpl	r5, r1, r5, asr pc
      6c:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
      70:	43415f4c 	movtmi	r5, #8012	; 0x1f4c
      74:	53534543 	cmppl	r3, #281018368	; 0x10c00000
      78:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
      7c:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
      80:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
      84:	41007367 	tstmi	r0, r7, ror #6
      88:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; ffffff60 <__shm_end__+0xbfffff60>
      8c:	445f554d 	ldrbmi	r5, [pc], #-1357	; 94 <__core1_unwind_stub-0xffff6c>
      90:	655f5041 	ldrbvs	r5, [pc, #-65]	; 57 <__core1_unwind_stub-0xffffa9>
      94:	63775f00 	cmnvs	r7, #0, 30
      98:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
      9c:	6174735f 	cmnvs	r4, pc, asr r3
      a0:	41006574 	tstmi	r0, r4, ror r5
      a4:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; ffffff7c <__shm_end__+0xbfffff7c>
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
      a8:	415f554d 	cmpmi	pc, sp, asr #10
      ac:	5f525454 	svcpl	0x00525454
      b0:	575f434e 	ldrbpl	r4, [pc, -lr, asr #6]
      b4:	5f004142 	svcpl	0x00004142
      b8:	00383472 	eorseq	r3, r8, r2, ror r4
      bc:	5f544c41 	svcpl	0x00544c41
      c0:	5f554d4d 	svcpl	0x00554d4d
      c4:	5f504144 	svcpl	0x00504144
      c8:	735f0074 	cmpvc	pc, #116	; 0x74
      cc:	616e6769 	cmnvs	lr, r9, ror #14
      d0:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
      d4:	77680066 	strbvc	r0, [r8, -r6, rrx]!
      d8:	2f62696c 	svccs	0x0062696c
      dc:	2f637273 	svccs	0x00637273
      e0:	676d7768 	strbvs	r7, [sp, -r8, ror #14]!
      e4:	6c612f72 	stclvs	15, cr2, [r1], #-456	; 0xfffffe38
      e8:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
      ec:	00632e75 	rsbeq	r2, r3, r5, ror lr
      f0:	5f746c61 	svcpl	0x00746c61
    return dst;
      f4:	5f756d6d 	svcpl	0x00756d6d
}
      f8:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
      fc:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
     100:	616e655f 	cmnvs	lr, pc, asr r5
     104:	00656c62 	rsbeq	r6, r5, r2, ror #24
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
     108:	5f746c61 	svcpl	0x00746c61
     10c:	5f756d6d 	svcpl	0x00756d6d
     110:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
     114:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
     118:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
     11c:	616d735f 	cmnvs	sp, pc, asr r3
     120:	61706c6c 	cmnvs	r0, ip, ror #24
     124:	41006567 	tstmi	r0, r7, ror #10
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
     128:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 0 <__core1_unwind_stub-0x1000000>
     12c:	415f554d 	cmpmi	pc, sp, asr #10
     130:	5f525454 	svcpl	0x00525454
     134:	5f414257 	svcpl	0x00414257
     138:	5f004257 	svcpl	0x00004257
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
     13c:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
     140:	00657a69 	rsbeq	r7, r5, r9, ror #20
     144:	616c665f 	cmnvs	ip, pc, asr r6
     148:	41007367 	tstmi	r0, r7, ror #6
     14c:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 24 <__core1_unwind_stub-0xffffdc>
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
     150:	415f554d 	cmpmi	pc, sp, asr #10
     154:	5f525454 	svcpl	0x00525454
     158:	5f414257 	svcpl	0x00414257
     15c:	74005457 	strvc	r5, [r0], #-1111	; 0xfffffba9
     160:	306d7265 	rsbcc	r7, sp, r5, ror #4
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
     164:	72657400 	rsbvc	r7, r5, #0, 8
     168:	4100316d 	tstmi	r0, sp, ror #2
     16c:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 44 <__core1_unwind_stub-0xffffbc>
     170:	445f554d 	ldrbmi	r5, [pc], #-1357	; 178 <__core1_unwind_stub-0xfffe88>
     174:	435f5041 	cmpmi	pc, #65	; 0x41
    return ALT_E_SUCCESS;
     178:	4e45494c 	vmlsmi.f16	s9, s10, s24	; <UNPREDICTABLE>
}
     17c:	74740054 	ldrbtvc	r0, [r4], #-84	; 0xffffffac
     180:	5f307262 	svcpl	0x00307262
     184:	5f746567 	svcpl	0x00746567
    while (coalesce->size)
     188:	706c6568 	rsbvc	r6, ip, r8, ror #10
     18c:	73007265 	movwvc	r7, #613	; 0x265
            break;
     190:	656d6765 	strbvs	r6, [sp, #-1893]!	; 0xfffff89b
    *segpa   = thissegpa;
     194:	6100746e 	tstvs	r0, lr, ror #8
     198:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; fffffff0 <__shm_end__+0xbffffff0>
     19c:	545f756d 	ldrbpl	r7, [pc], #-1389	; 1a4 <__core1_unwind_stub-0xfffe5c>
    *segsize = thissegsize;
     1a0:	30524254 	subscc	r4, r2, r4, asr r2
     1a4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     1a8:	4f4c5f00 	svcmi	0x004c5f00
    return ALT_E_SUCCESS;
     1ac:	525f4b43 	subspl	r4, pc, #68608	; 0x10c00
}
     1b0:	52554345 	subspl	r4, r5, #335544321	; 0x14000001
     1b4:	45564953 	ldrbmi	r4, [r6, #-2387]	; 0xfffff6ad
     1b8:	6100545f 	tstvs	r0, pc, asr r4
     1bc:	00646973 	rsbeq	r6, r4, r3, ror r9
     1c0:	5f746c61 	svcpl	0x00746c61
     1c4:	5f756d6d 	svcpl	0x00756d6d
     1c8:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
     1cc:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
     1d0:	6f74735f 	svcvs	0x0074735f
     1d4:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
     1d8:	7165725f 	cmnvc	r5, pc, asr r2
     1dc:	65726975 	ldrbvs	r6, [r2, #-2421]!	; 0xfffff68b
     1e0:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
     1e4:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
     1e8:	5f006c61 	svcpl	0x00006c61
     1ec:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     1f0:	626d5f00 	rsbvs	r5, sp, #0, 30
     1f4:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
     1f8:	6174735f 	cmnvs	r4, pc, asr r3
     1fc:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
     200:	72636274 	rsbvc	r6, r3, #116, 4	; 0x40000007
     204:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     208:	6c65685f 	stclvs	8, cr6, [r5], #-380	; 0xfffffe84
     20c:	00726570 	rsbseq	r6, r2, r0, ror r5
     210:	6c676573 	cfstr64vs	mvdx6, [r7], #-460	; 0xfffffe34
     214:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     218:	735f0068 	cmpvc	pc, #104	; 0x68
     21c:	756f6474 	strbvc	r6, [pc, #-1140]!	; fffffdb0 <__shm_end__+0xbffffdb0>
     220:	74740074 	ldrbtvc	r0, [r4], #-116	; 0xffffff8c
     224:	5f726362 	svcpl	0x00726362
     228:	5f746567 	svcpl	0x00746567
     22c:	706c6568 	rsbvc	r6, ip, r8, ror #10
     230:	41007265 	tstmi	r0, r5, ror #4
     234:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 10c <__core1_unwind_stub-0xfffef4>
     238:	545f554d 	ldrbpl	r5, [pc], #-1357	; 240 <__core1_unwind_stub-0xfffdc0>
     23c:	535f4254 	cmppl	pc, #84, 4	; 0x40000005
     240:	4148535f 	cmpmi	r8, pc, asr r3
     244:	42414552 	submi	r4, r1, #343932928	; 0x14800000
     248:	5f00454c 	svcpl	0x0000454c
     24c:	736f7066 	cmnvc	pc, #102	; 0x66
     250:	5f00745f 	svcpl	0x0000745f
     254:	00736e66 	rsbseq	r6, r3, r6, ror #28
     258:	6f6f635f 	svcvs	0x006f635f
     25c:	0065696b 	rsbeq	r6, r5, fp, ror #18
     260:	5f544c41 	svcpl	0x00544c41
     264:	5f554d4d 	svcpl	0x00554d4d
     268:	5f425454 	svcpl	0x00425454
     26c:	00655f53 	rsbeq	r5, r5, r3, asr pc
     270:	6769425f 			; <UNDEFINED> instruction: 0x6769425f
     274:	00746e69 	rsbseq	r6, r4, r9, ror #28
     278:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     27c:	6164775f 	cmnvs	r4, pc, asr r7
     280:	63730079 	cmnvs	r3, #121	; 0x79
     284:	5f726c74 	svcpl	0x00726c74
     288:	5f746567 	svcpl	0x00746567
     28c:	706c6568 	rsbvc	r6, ip, r8, ror #10
     290:	61007265 	tstvs	r0, r5, ror #4
     294:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; ec <__core1_unwind_stub-0xffff14>
     298:	445f756d 	ldrbmi	r7, [pc], #-1389	; 2a0 <__core1_unwind_stub-0xfffd60>
     29c:	5f524341 	svcpl	0x00524341
     2a0:	00746573 	rsbseq	r6, r4, r3, ror r5
     2a4:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     2a8:	00746c75 	rsbseq	r6, r4, r5, ror ip
     2ac:	5f544c41 	svcpl	0x00544c41
     2b0:	5f554d4d 	svcpl	0x00554d4d
     2b4:	5f425454 	svcpl	0x00425454
     2b8:	00745f53 	rsbseq	r5, r4, r3, asr pc
     2bc:	636f7270 	cmnvs	pc, #112, 4
     2c0:	75006469 	strvc	r6, [r0, #-1129]	; 0xfffffb97
     2c4:	33746e69 	cmncc	r4, #1680	; 0x690
     2c8:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     2cc:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     2d0:	756f685f 	strbvc	r6, [pc, #-2143]!	; fffffa79 <__shm_end__+0xbffffa79>
     2d4:	756e0072 	strbvc	r0, [lr, #-114]!	; 0xffffff8e
     2d8:	656d5f6d 	strbvs	r5, [sp, #-3949]!	; 0xfffff093
     2dc:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
     2e0:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
     2e4:	5f5f0073 	svcpl	0x005f0073
     2e8:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     2ec:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
     2f0:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
     2f4:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
     2f8:	4e5f5254 	mrcmi	2, 2, r5, cr15, cr4, {2}
     2fc:	434e5f43 	movtmi	r5, #61251	; 0xef43
     300:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 308 <__core1_unwind_stub-0xfffcf8>
     304:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     308:	6c61006e 	stclvs	0, cr0, [r1], #-440	; 0xfffffe48
     30c:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
     310:	54545f75 	ldrbpl	r5, [r4], #-3957	; 0xfffff08b
     314:	5f524342 	svcpl	0x00524342
     318:	00746573 	rsbseq	r6, r4, r3, ror r5
     31c:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     320:	41006674 	tstmi	r0, r4, ror r6
     324:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 1fc <__core1_unwind_stub-0xfffe04>
     328:	415f554d 	cmpmi	pc, sp, asr #10
     32c:	5f525454 	svcpl	0x00525454
     330:	4f525453 	svcmi	0x00525453
     334:	5f00474e 	svcpl	0x0000474e
     338:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     33c:	5f003834 	svcpl	0x00003834
     340:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
     344:	6b5f746c 	blvs	17dd4fc <__bss_end__+0x7c94fc>
     348:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     34c:	6f6c2067 	svcvs	0x006c2067
     350:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     354:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     358:	2064656e 	rsbcs	r6, r4, lr, ror #10
     35c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     360:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
     364:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     368:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     36c:	735f5f00 	cmpvc	pc, #0, 30
     370:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
     374:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     378:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     37c:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
     380:	45445f52 	strbmi	r5, [r4, #-3922]	; 0xfffff0ae
     384:	45434956 	strbmi	r4, [r3, #-2390]	; 0xfffff6aa
     388:	00534e5f 	subseq	r4, r3, pc, asr lr
     38c:	49465f5f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     390:	5f00454c 	svcpl	0x0000454c
     394:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
     398:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
     39c:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
     3a0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     3a4:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
     3a8:	5f61765f 	svcpl	0x0061765f
     3ac:	705f6f74 	subsvc	r6, pc, r4, ror pc	; <UNPREDICTABLE>
     3b0:	6f635f61 	svcvs	0x00635f61
     3b4:	73656c61 	cmnvc	r5, #24832	; 0x6100
     3b8:	625f6563 	subsvs	r6, pc, #415236096	; 0x18c00000
     3bc:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
     3c0:	616e6500 	cmnvs	lr, r0, lsl #10
     3c4:	5f656c62 	svcpl	0x00656c62
     3c8:	72627474 	rsbvc	r7, r2, #116, 8	; 0x74000000
     3cc:	61775f30 	cmnvs	r7, r0, lsr pc
     3d0:	74006b6c 	strvc	r6, [r0], #-2924	; 0xfffff494
     3d4:	615f6274 	cmpvs	pc, r4, ror r2	; <UNPREDICTABLE>
     3d8:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     3dc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     3e0:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     3e4:	6d655f00 	stclvs	15, cr5, [r5, #-0]
     3e8:	65677265 	strbvs	r7, [r7, #-613]!	; 0xfffffd9b
     3ec:	0079636e 	rsbseq	r6, r9, lr, ror #6
     3f0:	5f746c61 	svcpl	0x00746c61
     3f4:	5f756d6d 	svcpl	0x00756d6d
     3f8:	31627474 	smccc	10052	; 0x2744
     3fc:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     400:	65735f63 	ldrbvs	r5, [r3, #-3939]!	; 0xfffff09d
     404:	6f660074 	svcvs	0x00660074
     408:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
     40c:	7a697300 	bvc	1a5d014 <__bss_end__+0xa49014>
     410:	00745f65 	rsbseq	r5, r4, r5, ror #30
     414:	5f544c41 	svcpl	0x00544c41
     418:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
     41c:	435f5355 	cmpmi	pc, #1409286145	; 0x54000001
     420:	0045444f 	subeq	r4, r5, pc, asr #8
     424:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     428:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
     42c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 434 <__core1_unwind_stub-0xfffbcc>
     430:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
     434:	5f007961 	svcpl	0x00007961
     438:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
     43c:	5f006575 	svcpl	0x00006575
     440:	00636e69 	rsbeq	r6, r3, r9, ror #28
     444:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     448:	63616400 	cmnvs	r1, #0, 8
     44c:	6c610072 	stclvs	0, cr0, [r1], #-456	; 0xfffffe38
     450:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
     454:	61765f75 	cmnvs	r6, r5, ror pc
     458:	6170735f 	cmnvs	r0, pc, asr r3
     45c:	675f6563 	ldrbvs	r6, [pc, -r3, ror #10]
     460:	705f6e65 	subsvc	r6, pc, r5, ror #28
     464:	74656761 	strbtvc	r6, [r5], #-1889	; 0xfffff89f
     468:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     46c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     470:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     474:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
     478:	42575f52 	subsmi	r5, r7, #328	; 0x148
     47c:	42575f41 	subsmi	r5, r7, #260	; 0x104
     480:	6c610041 	stclvs	0, cr0, [r1], #-260	; 0xfffffefc
     484:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
     488:	61765f75 	cmnvs	r6, r5, ror pc
     48c:	5f6f745f 	svcpl	0x006f745f
     490:	61006170 	tstvs	r0, r0, ror r1
     494:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 2ec <__core1_unwind_stub-0xfffd14>
     498:	765f756d 	ldrbvc	r7, [pc], -sp, ror #10
     49c:	70735f61 	rsbsvc	r5, r3, r1, ror #30
     4a0:	5f656361 	svcpl	0x00656361
     4a4:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
     4a8:	5f656761 	svcpl	0x00656761
     4ac:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     4b0:	64657269 	strbtvs	r7, [r5], #-617	; 0xfffffd97
     4b4:	626d5f00 	rsbvs	r5, sp, #0, 30
     4b8:	6f747273 	svcvs	0x00747273
     4bc:	5f736377 	svcpl	0x00736377
     4c0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     4c4:	61640065 	cmnvs	r4, r5, rrx
     4c8:	735f7263 	cmpvc	pc, #805306374	; 0x30000006
     4cc:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     4d0:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
     4d4:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
     4d8:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
     4dc:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
     4e0:	655f5254 	ldrbvs	r5, [pc, #-596]	; 294 <__core1_unwind_stub-0xfffd6c>
     4e4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     4e8:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     4ec:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
     4f0:	54575f52 	ldrbpl	r5, [r7], #-3922	; 0xfffff0ae
     4f4:	0042575f 	subeq	r5, r2, pc, asr r7
     4f8:	5f746c61 	svcpl	0x00746c61
     4fc:	5f756d6d 	svcpl	0x00756d6d
     500:	52425454 	subpl	r5, r2, #84, 8	; 0x54000000
     504:	65675f30 	strbvs	r5, [r7, #-3888]!	; 0xfffff0d0
     508:	66640074 			; <UNDEFINED> instruction: 0x66640074
     50c:	41007273 	tstmi	r0, r3, ror r2
     510:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 3e8 <__core1_unwind_stub-0xfffc18>
     514:	415f554d 	cmpmi	pc, sp, asr #10
     518:	5f525454 	svcpl	0x00525454
     51c:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
     520:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
     524:	74745f75 	ldrbtvc	r5, [r4], #-3957	; 0xfffff08b
     528:	695f3162 	ldmdbvs	pc, {r1, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     52c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     530:	5f544c41 	svcpl	0x00544c41
     534:	5f554d4d 	svcpl	0x00554d4d
     538:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
     53c:	5f54575f 	svcpl	0x0054575f
     540:	41005457 	tstmi	r0, r7, asr r4
     544:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 41c <__core1_unwind_stub-0xfffbe4>
     548:	415f554d 	cmpmi	pc, sp, asr #10
     54c:	5f525454 	svcpl	0x00525454
     550:	575f4257 			; <UNDEFINED> instruction: 0x575f4257
     554:	705f0042 	subsvc	r0, pc, r2, asr #32
     558:	41007335 	tstmi	r0, r5, lsr r3
     55c:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 434 <__core1_unwind_stub-0xfffbcc>
     560:	415f554d 	cmpmi	pc, sp, asr #10
     564:	5f525454 	svcpl	0x00525454
     568:	4e5f4257 	mrcmi	2, 2, r4, cr15, cr7, {2}
     56c:	4c410043 	mcrrmi	0, 4, r0, r1, cr3
     570:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
     574:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
     578:	4e5f5254 	mrcmi	2, 2, r5, cr15, cr4, {2}
     57c:	775f0043 	ldrbvc	r0, [pc, -r3, asr #32]
     580:	74727363 	ldrbtvc	r7, [r2], #-867	; 0xfffffc9d
     584:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
     588:	6174735f 	cmnvs	r4, pc, asr r3
     58c:	5f006574 	svcpl	0x00006574
     590:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
     594:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
     598:	00657461 	rsbeq	r7, r5, r1, ror #8
     59c:	5f544c41 	svcpl	0x00544c41
     5a0:	5f554d4d 	svcpl	0x00554d4d
     5a4:	505f5041 	subspl	r5, pc, r1, asr #32
     5a8:	5f564952 	svcpl	0x00564952
     5ac:	45434341 	strbmi	r4, [r3, #-833]	; 0xfffffcbf
     5b0:	5f005353 	svcpl	0x00005353
     5b4:	5f6d745f 	svcpl	0x006d745f
     5b8:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
     5bc:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     5c0:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     5c4:	5f00636e 	svcpl	0x0000636e
     5c8:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
     5cc:	5f63776f 	svcpl	0x0063776f
     5d0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     5d4:	615f0065 	cmpvs	pc, r5, rrx
     5d8:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     5dc:	61003074 	tstvs	r0, r4, ror r0
     5e0:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 438 <__core1_unwind_stub-0xfffbc8>
     5e4:	765f756d 	ldrbvc	r7, [pc], -sp, ror #10
     5e8:	70735f61 	rsbsvc	r5, r3, r1, ror #30
     5ec:	5f656361 	svcpl	0x00656361
     5f0:	5f6e6567 	svcpl	0x006e6567
     5f4:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
     5f8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     5fc:	5f544c41 	svcpl	0x00544c41
     600:	5f554d4d 	svcpl	0x00554d4d
     604:	5f504144 	svcpl	0x00504144
     608:	414e414d 	cmpmi	lr, sp, asr #2
     60c:	00524547 	subseq	r4, r2, r7, asr #10
     610:	6f6c665f 	svcvs	0x006c665f
     614:	745f6b63 	ldrbvc	r6, [pc], #-2915	; 61c <__core1_unwind_stub-0xfff9e4>
     618:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
     61c:	5f006863 	svcpl	0x00006863
     620:	73626f69 	cmnvc	r2, #420	; 0x1a4
     624:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     628:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
     62c:	696e755f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
     630:	0074696e 	rsbseq	r6, r4, lr, ror #18
     634:	5f746c61 	svcpl	0x00746c61
     638:	5f756d6d 	svcpl	0x00756d6d
     63c:	5f626c74 	svcpl	0x00626c74
     640:	61766e69 	cmnvs	r6, r9, ror #28
     644:	6164696c 	cmnvs	r4, ip, ror #18
     648:	695f6574 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     64c:	5f5f0073 	svcpl	0x005f0073
     650:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
     654:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     658:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     65c:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     660:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
     664:	42575f52 	subsmi	r5, r7, #328	; 0x148
     668:	434e5f41 	movtmi	r5, #61249	; 0xef41
     66c:	65786500 	ldrbvs	r6, [r8, #-1280]!	; 0xfffffb00
     670:	65747563 	ldrbvs	r7, [r4, #-1379]!	; 0xfffffa9d
     674:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     678:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
     67c:	5f61765f 	svcpl	0x0061765f
     680:	63617073 	cmnvs	r1, #115	; 0x73
     684:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
     688:	75735f6e 	ldrbvc	r5, [r3, #-3950]!	; 0xfffff092
     68c:	73726570 	cmnvc	r2, #112, 10	; 0x1c000000
     690:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     694:	6e006e6f 	cdpvs	14, 0, cr6, cr0, cr15, {3}
     698:	5f6c6c75 	svcpl	0x006c6c75
     69c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     6a0:	5f006674 	svcpl	0x00006674
     6a4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     6a8:	675f006e 	ldrbvs	r0, [pc, -lr, rrx]
     6ac:	616d6d61 	cmnvs	sp, r1, ror #26
     6b0:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     6b4:	6d61676e 	stclvs	7, cr6, [r1, #-440]!	; 0xfffffe48
     6b8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     6bc:	6f6c2067 	svcvs	0x006c2067
     6c0:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     6c4:	6100746e 	tstvs	r0, lr, ror #8
     6c8:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
     6cc:	0074706f 	rsbseq	r7, r4, pc, rrx
     6d0:	5f544c41 	svcpl	0x00544c41
     6d4:	5f554d4d 	svcpl	0x00554d4d
     6d8:	5f425454 	svcpl	0x00425454
     6dc:	4e5f534e 	cdpmi	3, 5, cr5, cr15, cr14, {2}
     6e0:	535f4e4f 	cmppl	pc, #1264	; 0x4f0
     6e4:	52554345 	subspl	r4, r5, #335544321	; 0x14000001
     6e8:	625f0045 	subsvs	r0, pc, #69	; 0x45
     6ec:	00657361 	rsbeq	r7, r5, r1, ror #6
     6f0:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     6f4:	73696c65 	cmnvc	r9, #25856	; 0x6500
     6f8:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 530 <__core1_unwind_stub-0xfffad0>
     6fc:	00746c75 	rsbseq	r6, r4, r5, ror ip
     700:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15	; <UNPREDICTABLE>
     704:	00676e6f 	rsbeq	r6, r7, pc, ror #28
     708:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
     70c:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     710:	6174735f 	cmnvs	r4, pc, asr r3
     714:	5f006574 	svcpl	0x00006574
     718:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
     71c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     720:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
     724:	6274745f 	rsbsvs	r7, r4, #1593835520	; 0x5f000000
     728:	65645f32 	strbvs	r5, [r4, #-3890]!	; 0xfffff0ce
     72c:	735f6373 	cmpvc	pc, #-872415231	; 0xcc000001
     730:	5f007465 	svcpl	0x00007465
     734:	00736477 	rsbseq	r6, r3, r7, ror r4
     738:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
     73c:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
     740:	735f7264 	cmpvc	pc, #100, 4	; 0x40000006
     744:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     748:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
     74c:	5f5f0072 	svcpl	0x005f0072
     750:	61656c63 	cmnvs	r5, r3, ror #24
     754:	0070756e 	rsbseq	r7, r0, lr, ror #10
     758:	616d6f64 	cmnvs	sp, r4, ror #30
     75c:	615f6e69 	cmpvs	pc, r9, ror #28
     760:	6d5f0070 	ldclvs	0, cr0, [pc, #-448]	; 5a8 <__core1_unwind_stub-0xfffa58>
     764:	61747362 	cmnvs	r4, r2, ror #6
     768:	745f6574 	ldrbvc	r6, [pc], #-1396	; 770 <__core1_unwind_stub-0xfff890>
     76c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     770:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     774:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
     778:	54575f52 	ldrbpl	r5, [r7], #-3922	; 0xfffff0ae
     77c:	4142575f 	cmpmi	r2, pc, asr r7
     780:	65727600 	ldrbvs	r7, [r2, #-1536]!	; 0xfffffa00
     784:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
     788:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 790 <__core1_unwind_stub-0xfff870>
     78c:	73695f6d 	cmnvc	r9, #436	; 0x1b4
     790:	00747364 	rsbseq	r7, r4, r4, ror #6
     794:	5f746c61 	svcpl	0x00746c61
     798:	5f756d6d 	svcpl	0x00756d6d
     79c:	745f6176 	ldrbvc	r6, [pc], #-374	; 7a4 <__core1_unwind_stub-0xfff85c>
     7a0:	61705f6f 	cmnvs	r0, pc, ror #30
     7a4:	616f635f 	cmnvs	pc, pc, asr r3	; <UNPREDICTABLE>
     7a8:	6373656c 	cmnvs	r3, #108, 10	; 0x1b000000
     7ac:	6e655f65 	cdpvs	15, 6, cr5, cr5, cr5, {3}
     7b0:	6c610064 	stclvs	0, cr0, [r1], #-400	; 0xfffffe70
     7b4:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
     7b8:	6e655f75 	mcrvs	15, 3, r5, cr5, cr5, {3}
     7bc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     7c0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     7c4:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     7c8:	5f50415f 	svcpl	0x0050415f
     7cc:	44414552 	strbmi	r4, [r1], #-1362	; 0xfffffaae
     7d0:	4c4e4f5f 	mcrrmi	15, 5, r4, lr, cr15
     7d4:	685f0059 	ldmdavs	pc, {r0, r3, r4, r6}^	; <UNPREDICTABLE>
     7d8:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     7dc:	72006f6e 	andvc	r6, r0, #440	; 0x1b8
     7e0:	6c616c65 	stclvs	12, cr6, [r1], #-404	; 0xfffffe6c
     7e4:	006e6769 	rsbeq	r6, lr, r9, ror #14
     7e8:	20554e47 	subscs	r4, r5, r7, asr #28
     7ec:	20373143 	eorscs	r3, r7, r3, asr #2
     7f0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
     7f4:	30322031 	eorscc	r2, r2, r1, lsr r0
     7f8:	30313931 	eorscc	r3, r1, r1, lsr r9
     7fc:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
     800:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     804:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     808:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     80c:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
     810:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
     814:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
     818:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
     81c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
     820:	206e6f69 	rsbcs	r6, lr, r9, ror #30
     824:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
     828:	205d3939 	subscs	r3, sp, r9, lsr r9
     82c:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
     830:	6f633d75 	svcvs	0x00633d75
     834:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
     838:	2039612d 	eorscs	r6, r9, sp, lsr #2
     83c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     840:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     844:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     848:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     84c:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
     850:	7570666d 	ldrbvc	r6, [r0, #-1645]!	; 0xfffff993
     854:	6f656e3d 	svcvs	0x00656e3d
     858:	6d2d206e 	stcvs	0, cr2, [sp, #-440]!	; 0xfffffe48
     85c:	206d7261 	rsbcs	r7, sp, r1, ror #4
     860:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     864:	613d6863 	teqvs	sp, r3, ror #16
     868:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
     86c:	6d2b612d 	stfvss	f6, [fp, #-180]!	; 0xffffff4c
     870:	65732b70 	ldrbvs	r2, [r3, #-2928]!	; 0xfffff490
     874:	69732b63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, r9, fp, sp}^
     878:	2d20646d 	cfstrscs	mvf6, [r0, #-436]!	; 0xfffffe4c
     87c:	4f2d2067 	svcmi	0x002d2067
     880:	662d2030 			; <UNDEFINED> instruction: 0x662d2030
     884:	61746164 	cmnvs	r4, r4, ror #2
     888:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     88c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     890:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     894:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     898:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     89c:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     8a0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     8a4:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     8a8:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     8ac:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
     8b0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     8b4:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     8b8:	69702d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp}^
     8bc:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
     8c0:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
     8c4:	6e695f75 	mcrvs	15, 3, r5, cr9, cr5, {3}
     8c8:	5f007469 	svcpl	0x00007469
     8cc:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 7cc <__core1_unwind_stub-0xfff834>
     8d0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     8d4:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     8d8:	5f50415f 	svcpl	0x0050415f
     8dc:	52455355 	subpl	r5, r5, #1409286145	; 0x54000001
     8e0:	4145525f 	cmpmi	r5, pc, asr r2
     8e4:	4e4f5f44 	cdpmi	15, 4, cr5, cr15, cr4, {2}
     8e8:	6100594c 	tstvs	r0, ip, asr #18
     8ec:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
     8f0:	5f5f0073 	svcpl	0x005f0073
     8f4:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 72c <__core1_unwind_stub-0xfff8d4>
     8f8:	41006e6f 	tstmi	r0, pc, ror #28
     8fc:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 7d4 <__core1_unwind_stub-0xfff82c>
     900:	415f554d 	cmpmi	pc, sp, asr #10
     904:	5f525454 	svcpl	0x00525454
     908:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     90c:	61004543 	tstvs	r0, r3, asr #10
     910:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 768 <__core1_unwind_stub-0xfff898>
     914:	765f756d 	ldrbvc	r7, [pc], -sp, ror #10
     918:	70735f61 	rsbsvc	r5, r3, r1, ror #30
     91c:	5f656361 	svcpl	0x00656361
     920:	5f6e6567 	svcpl	0x006e6567
     924:	6772616c 	ldrbvs	r6, [r2, -ip, ror #2]!
     928:	67617065 	strbvs	r7, [r1, -r5, rrx]!
     92c:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
     930:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
     934:	54545f55 	ldrbpl	r5, [r4], #-3925	; 0xfffff0ab
     938:	534e5f42 	movtpl	r5, #61250	; 0xef42
     93c:	4345535f 	movtmi	r5, #21343	; 0x535f
     940:	00455255 	subeq	r5, r5, r5, asr r2
     944:	5f544c41 	svcpl	0x00544c41
     948:	5f554d4d 	svcpl	0x00554d4d
     94c:	5f425454 	svcpl	0x00425454
     950:	655f4e58 	ldrbvs	r4, [pc, #-3672]	; fffffb00 <__shm_end__+0xbffffb00>
     954:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     958:	6f642067 	svcvs	0x00642067
     95c:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
     960:	62747400 	rsbsvs	r7, r4, #0, 8
     964:	735f3072 	cmpvc	pc, #114	; 0x72
     968:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     96c:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
     970:	775f0072 			; <UNDEFINED> instruction: 0x775f0072
     974:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     978:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     97c:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     980:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
     984:	5f4e585f 	svcpl	0x004e585f
     988:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
     98c:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     990:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 7c8 <__core1_unwind_stub-0xfff838>
     994:	61747362 	cmnvs	r4, r2, ror #6
     998:	73006574 	movwvc	r6, #1396	; 0x574
     99c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     9a0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     9a4:	62747400 	rsbsvs	r7, r4, #0, 8
     9a8:	675f3172 			; <UNDEFINED> instruction: 0x675f3172
     9ac:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     9b0:	65706c65 	ldrbvs	r6, [r0, #-3173]!	; 0xfffff39b
     9b4:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
     9b8:	61657261 	cmnvs	r5, r1, ror #4
     9bc:	00656c62 	rsbeq	r6, r5, r2, ror #24
     9c0:	73696874 	cmnvc	r9, #116, 16	; 0x740000
     9c4:	70676573 	rsbvc	r6, r7, r3, ror r5
     9c8:	6c610061 	stclvs	0, cr0, [r1], #-388	; 0xfffffe7c
     9cc:	61636f6c 	cmnvs	r3, ip, ror #30
     9d0:	00646574 	rsbeq	r6, r4, r4, ror r5
     9d4:	5f544c41 	svcpl	0x00544c41
     9d8:	5f554d4d 	svcpl	0x00554d4d
     9dc:	4e5f5041 	cdpmi	0, 5, cr5, cr15, cr1, {2}
     9e0:	43415f4f 	movtmi	r5, #8015	; 0x1f4f
     9e4:	53534543 	cmppl	r3, #281018368	; 0x10c00000
     9e8:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     9ec:	74006e67 	strvc	r6, [r0], #-3687	; 0xfffff199
     9f0:	73736968 	cmnvc	r3, #104, 18	; 0x1a0000
     9f4:	69736765 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, sp, lr}^
     9f8:	5f00657a 	svcpl	0x0000657a
     9fc:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     a00:	675f0062 	ldrbvs	r0, [pc, -r2, rrx]
     a04:	61626f6c 	cmnvs	r2, ip, ror #30
     a08:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
     a0c:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
     a10:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     a14:	745f5f00 	ldrbvc	r5, [pc], #-3840	; a1c <__core1_unwind_stub-0xfff5e4>
     a18:	65795f6d 	ldrbvs	r5, [r9, #-3949]!	; 0xfffff093
     a1c:	63007261 	movwvs	r7, #609	; 0x261
     a20:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
     a24:	64697478 	strbtvs	r7, [r9], #-1144	; 0xfffffb88
     a28:	74740072 	ldrbtvc	r0, [r4], #-114	; 0xffffff8e
     a2c:	00307262 	eorseq	r7, r0, r2, ror #4
     a30:	72627474 	rsbvc	r7, r2, #116, 8	; 0x74000000
     a34:	6c610031 	stclvs	0, cr0, [r1], #-196	; 0xffffff3c
     a38:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
     a3c:	69645f75 	stmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a40:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     a44:	6c5f0065 	mrrcvs	0, 6, r0, pc, cr5	; <UNPREDICTABLE>
     a48:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     a4c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     a50:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     a54:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     a58:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     a5c:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
     a60:	5f5f0077 	svcpl	0x005f0077
     a64:	5f006673 	svcpl	0x00006673
     a68:	6c747663 	ldclvs	6, cr7, [r4], #-396	; 0xfffffe74
     a6c:	5f006e65 	svcpl	0x00006e65
     a70:	7778616d 	ldrbvc	r6, [r8, -sp, ror #2]!
     a74:	5f007364 	svcpl	0x00007364
     a78:	6134366c 	teqvs	r4, ip, ror #12
     a7c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     a80:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     a84:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     a88:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
     a8c:	5f4e585f 	svcpl	0x004e585f
     a90:	41534944 	cmpmi	r3, r4, asr #18
     a94:	00454c42 	subeq	r4, r5, r2, asr #24
     a98:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     a9c:	73676573 	cmnvc	r7, #482344960	; 0x1cc00000
     aa0:	00657a69 	rsbeq	r7, r5, r9, ror #20
     aa4:	6e697470 	mcrvs	4, 3, r7, cr9, cr0, {3}
     aa8:	00786564 	rsbseq	r6, r8, r4, ror #10
     aac:	5f544c41 	svcpl	0x00544c41
     ab0:	5f554d4d 	svcpl	0x00554d4d
     ab4:	52545441 	subspl	r5, r4, #1090519040	; 0x41000000
     ab8:	5541465f 	strbpl	r4, [r1, #-1631]	; 0xfffff9a1
     abc:	4100544c 	tstmi	r0, ip, asr #8
     ac0:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; 998 <__core1_unwind_stub-0xfff668>
     ac4:	415f554d 	cmpmi	pc, sp, asr #10
     ac8:	5f525454 	svcpl	0x00525454
     acc:	00414257 	subeq	r4, r1, r7, asr r2
     ad0:	6b6c625f 	blvs	1b19454 <__bss_end__+0xb05454>
     ad4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     ad8:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
     adc:	72747074 	rsbsvc	r7, r4, #116	; 0x74
     ae0:	5f00745f 	svcpl	0x0000745f
     ae4:	006d745f 	rsbeq	r7, sp, pc, asr r4
     ae8:	5f544c41 	svcpl	0x00544c41
     aec:	5f554d4d 	svcpl	0x00554d4d
     af0:	5f504144 	svcpl	0x00504144
     af4:	415f4f4e 	cmpmi	pc, lr, asr #30
     af8:	53454343 	movtpl	r4, #21315	; 0x5343
     afc:	4c410053 	mcrrmi	0, 5, r0, r1, cr3
     b00:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
     b04:	54415f55 	strbpl	r5, [r1], #-3925	; 0xfffff0ab
     b08:	575f5254 			; <UNDEFINED> instruction: 0x575f5254
     b0c:	434e5f54 	movtmi	r5, #61268	; 0xef54
     b10:	6f6c5f00 	svcvs	0x006c5f00
     b14:	61006b63 	tstvs	r0, r3, ror #22
     b18:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 970 <__core1_unwind_stub-0xfff690>
     b1c:	545f756d 	ldrbpl	r7, [pc], #-1389	; b24 <__core1_unwind_stub-0xfff4dc>
     b20:	31524254 	cmpcc	r2, r4, asr r2
     b24:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     b28:	63657300 	cmnvs	r5, #0, 6
     b2c:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
     b30:	6e5f0079 	mrcvs	0, 2, r0, cr15, cr9, {3}
     b34:	73626f69 	cmnvc	r2, #420	; 0x1a4
     b38:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
     b3c:	00745f74 	rsbseq	r5, r4, r4, ror pc
     b40:	72627474 	rsbvc	r7, r2, #116, 8	; 0x74000000
     b44:	65735f31 	ldrbvs	r5, [r3, #-3889]!	; 0xfffff0cf
     b48:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xfffff08c
     b4c:	7265706c 	rsbvc	r7, r5, #108	; 0x6c
     b50:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     b54:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     b58:	4254545f 	subsmi	r5, r4, #1593835520	; 0x5f000000
     b5c:	4e5f535f 	mrcmi	3, 2, r5, cr15, cr15, {2}
     b60:	535f4e4f 	cmppl	pc, #1264	; 0x4f0
     b64:	45524148 	ldrbmi	r4, [r2, #-328]	; 0xfffffeb8
     b68:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     b6c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     b70:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     b74:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
     b78:	434e5f52 	movtmi	r5, #61266	; 0xef52
     b7c:	0042575f 	subeq	r5, r2, pc, asr r7
     b80:	6f73645f 	svcvs	0x0073645f
     b84:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
     b88:	00656c64 	rsbeq	r6, r5, r4, ror #24
     b8c:	6f6d656d 	svcvs	0x006d656d
     b90:	74007972 	strvc	r7, [r0], #-2418	; 0xfffff68e
     b94:	72636274 	rsbvc	r6, r3, #116, 4	; 0x40000007
     b98:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     b9c:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     ba0:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
     ba4:	434e5f52 	movtmi	r5, #61266	; 0xef52
     ba8:	0054575f 	subseq	r5, r4, pc, asr r7
     bac:	6c616f63 	stclvs	15, cr6, [r1], #-396	; 0xfffffe74
     bb0:	65637365 	strbvs	r7, [r3, #-869]!	; 0xfffffc9b
     bb4:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
     bb8:	66756274 			; <UNDEFINED> instruction: 0x66756274
     bbc:	736e7500 	cmnvc	lr, #0, 10
     bc0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     bc4:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     bc8:	41007261 	tstmi	r0, r1, ror #4
     bcc:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; aa4 <__core1_unwind_stub-0xfff55c>
     bd0:	415f554d 	cmpmi	pc, sp, asr #10
     bd4:	5f525454 	svcpl	0x00525454
     bd8:	575f4257 			; <UNDEFINED> instruction: 0x575f4257
     bdc:	41004142 	tstmi	r0, r2, asr #2
     be0:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; ab8 <__core1_unwind_stub-0xfff548>
     be4:	545f554d 	ldrbpl	r5, [pc], #-1357	; bec <__core1_unwind_stub-0xfff414>
     be8:	4e5f4254 	mrcmi	2, 2, r4, cr15, cr4, {2}
     bec:	00655f53 	rsbeq	r5, r5, r3, asr pc
     bf0:	5f746c61 	svcpl	0x00746c61
     bf4:	5f756d6d 	svcpl	0x00756d6d
     bf8:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
     bfc:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
     c00:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
     c04:	00657461 	rsbeq	r7, r5, r1, ror #8
     c08:	5f6d656d 	svcpl	0x006d656d
     c0c:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     c10:	5f006e6f 	svcpl	0x00006e6f
     c14:	64746567 	ldrbtvs	r6, [r4], #-1383	; 0xfffffa99
     c18:	5f657461 	svcpl	0x00657461
     c1c:	00727265 	rsbseq	r7, r2, r5, ror #4
     c20:	5f544c41 	svcpl	0x00544c41
     c24:	5f554d4d 	svcpl	0x00554d4d
     c28:	5f425454 	svcpl	0x00425454
     c2c:	745f534e 	ldrbvc	r5, [pc], #-846	; c34 <__core1_unwind_stub-0xfff3cc>
     c30:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
     c34:	75626972 	strbvc	r6, [r2, #-2418]!	; 0xfffff68e
     c38:	00736574 	rsbseq	r6, r3, r4, ror r5
     c3c:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
     c40:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     c44:	69775f72 	ldmdbvs	r7!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c48:	00687464 	rsbeq	r7, r8, r4, ror #8
     c4c:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     c50:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     c54:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     c58:	5f50415f 	svcpl	0x0050415f
     c5c:	64610065 	strbtvs	r0, [r1], #-101	; 0xffffff9b
     c60:	74007264 	strvc	r7, [r0], #-612	; 0xfffffd9c
     c64:	72636274 	rsbvc	r6, r3, #116, 4	; 0x40000007
     c68:	5f006e5f 	svcpl	0x00006e5f
     c6c:	7562735f 	strbvc	r7, [r2, #-863]!	; 0xfffffca1
     c70:	74740066 	ldrbtvc	r0, [r4], #-102	; 0xffffff9a
     c74:	74003162 	strvc	r3, [r0], #-354	; 0xfffffe9e
     c78:	00326274 	eorseq	r6, r2, r4, ror r2
     c7c:	5f544c41 	svcpl	0x00544c41
     c80:	5f554d4d 	svcpl	0x00554d4d
     c84:	745f5041 	ldrbvc	r5, [pc], #-65	; c8c <__core1_unwind_stub-0xfff374>
     c88:	6c675f00 	stclvs	15, cr5, [r7], #-0
     c8c:	72006575 	andvc	r6, r0, #490733568	; 0x1d400000
     c90:	69737165 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, ip, sp, lr}^
     c94:	5f00657a 	svcpl	0x0000657a
     c98:	6c67735f 	stclvs	3, cr7, [r7], #-380	; 0xfffffe84
     c9c:	61006575 	tstvs	r0, r5, ror r5
     ca0:	765f746c 	ldrbvc	r7, [pc], -ip, ror #8
     ca4:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     ca8:	6d5f6e6f 	ldclvs	14, cr6, [pc, #-444]	; af4 <__core1_unwind_stub-0xfff50c>
     cac:	5f6b7261 	svcpl	0x006b7261
     cb0:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
     cb4:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     cb8:	735f0065 	cmpvc	pc, #101	; 0x65
     cbc:	6f747274 	svcvs	0x00747274
     cc0:	616c5f6b 	cmnvs	ip, fp, ror #30
     cc4:	5f007473 	svcpl	0x00007473
     cc8:	6f74626d 	svcvs	0x0074626d
     ccc:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
     cd0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     cd4:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
     cd8:	656c655f 	strbvs	r6, [ip, #-1375]!	; 0xfffffaa1
     cdc:	4c41006d 	mcrrmi	0, 6, r0, r1, cr13
     ce0:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
     ce4:	50415f55 	subpl	r5, r1, r5, asr pc
     ce8:	4952505f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, ip, lr}^
     cec:	45525f56 	ldrbmi	r5, [r2, #-3926]	; 0xfffff0aa
     cf0:	4f5f4441 	svcmi	0x005f4441
     cf4:	00594c4e 	subseq	r4, r9, lr, asr #24
     cf8:	616e665f 	cmnvs	lr, pc, asr r6
     cfc:	00736772 	rsbseq	r6, r3, r2, ror r7
     d00:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
     d04:	7300746e 	movwvc	r7, #1134	; 0x46e
     d08:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     d0c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     d10:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     d14:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     d18:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
     d1c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     d20:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
     d24:	4d4d5f54 	stclmi	15, cr5, [sp, #-336]	; 0xfffffeb0
     d28:	454d5f55 	strbmi	r5, [sp, #-3925]	; 0xfffff0ab
     d2c:	45525f4d 	ldrbmi	r5, [r2, #-3917]	; 0xfffff0b3
     d30:	4e4f4947 	vmlsmi.f16	s9, s30, s14	; <UNPREDICTABLE>
     d34:	4100735f 	tstmi	r0, pc, asr r3
     d38:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; c10 <__core1_unwind_stub-0xfff3f0>
     d3c:	4d5f554d 	cfldr64mi	mvdx5, [pc, #-308]	; c10 <__core1_unwind_stub-0xfff3f0>
     d40:	525f4d45 	subspl	r4, pc, #4416	; 0x1140
     d44:	4f494745 	svcmi	0x00494745
     d48:	00745f4e 	rsbseq	r5, r4, lr, asr #30
     d4c:	5f746c61 	svcpl	0x00746c61
     d50:	5f756d6d 	svcpl	0x00756d6d
     d54:	544e4f43 	strbpl	r4, [lr], #-3907	; 0xfffff0bd
     d58:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     d5c:	735f5244 	cmpvc	pc, #68, 4	; 0x40000004
     d60:	61007465 	tstvs	r0, r5, ror #8
     d64:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; bbc <__core1_unwind_stub-0xfff444>
     d68:	745f756d 	ldrbvc	r7, [pc], #-1389	; d70 <__core1_unwind_stub-0xfff290>
     d6c:	615f6274 	cmpvs	pc, r4, ror r2	; <UNPREDICTABLE>
     d70:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     d74:	4100745f 	tstmi	r0, pc, asr r4
     d78:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; c50 <__core1_unwind_stub-0xfff3b0>
     d7c:	565f554d 	ldrbpl	r5, [pc], -sp, asr #10
     d80:	4f545f41 	svcmi	0x00545f41
     d84:	5f41505f 	svcpl	0x0041505f
     d88:	4c414f43 	mcrrmi	15, 4, r4, r1, cr3
     d8c:	45435345 	strbmi	r5, [r3, #-837]	; 0xfffffcbb
     d90:	4100735f 	tstmi	r0, pc, asr r3
     d94:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; c6c <__core1_unwind_stub-0xfff394>
     d98:	565f554d 	ldrbpl	r5, [pc], -sp, asr #10
     d9c:	4f545f41 	svcmi	0x00545f41
     da0:	5f41505f 	svcpl	0x0041505f
     da4:	4c414f43 	mcrrmi	15, 4, r4, r1, cr3
     da8:	45435345 	strbmi	r5, [r3, #-837]	; 0xfffffcbb
     dac:	5f00745f 	svcpl	0x0000745f
     db0:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
     db4:	00736570 	rsbseq	r6, r3, r0, ror r5
     db8:	5f746c61 	svcpl	0x00746c61
     dbc:	5f756d6d 	svcpl	0x00756d6d
     dc0:	5f626c74 	svcpl	0x00626c74
     dc4:	61766e69 	cmnvs	r6, r9, ror #28
     dc8:	6164696c 	cmnvs	r4, ip, ror #18
     dcc:	6e006574 	cfrshl64vs	mvdx0, mvdx4, r6
     dd0:	73747865 	cmnvc	r4, #6619136	; 0x650000
     dd4:	61706765 	cmnvs	r0, r5, ror #14
     dd8:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     ddc:	5f00657a 	svcpl	0x0000657a
     de0:	5f66666f 	svcpl	0x0066666f
     de4:	6e5f0074 	mrcvs	0, 2, r0, cr15, cr4, {3}
     de8:	00667562 	rsbeq	r7, r6, r2, ror #10
     dec:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
     df0:	5f646573 	svcpl	0x00646573
     df4:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     df8:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     dfc:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xfffff2a1
     e00:	5f61765f 	svcpl	0x0061765f
     e04:	705f6f74 	subsvc	r6, pc, r4, ror pc	; <UNPREDICTABLE>
     e08:	6f635f61 	svcvs	0x00635f61
     e0c:	73656c61 	cmnvc	r5, #24832	; 0x6100
     e10:	6e5f6563 	cdpvs	5, 5, cr6, cr15, cr3, {3}
     e14:	00747865 	rsbseq	r7, r4, r5, ror #16
     e18:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
     e1c:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
     e20:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
     e24:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     e28:	5f656c61 	svcpl	0x00656c61
     e2c:	6f666e69 	svcvs	0x00666e69
     e30:	6c665f00 	stclvs	15, cr5, [r6], #-0
     e34:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
     e38:	73695f00 	cmnvc	r9, #0, 30
     e3c:	6178635f 	cmnvs	r8, pc, asr r3
     e40:	6f682f00 	svcvs	0x00682f00
     e44:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; c98 <__core1_unwind_stub-0xfff368>
     e48:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
     e4c:	612f696c 			; <UNDEFINED> instruction: 0x612f696c
     e50:	2f6f746e 	svccs	0x006f746e
     e54:	5f303161 	svcpl	0x00303161
     e58:	2f736369 	svccs	0x00736369
     e5c:	5f303161 	svcpl	0x00303161
     e60:	34636d66 	strbtcc	r6, [r3], #-3430	; 0xfffff29a
     e64:	732f3030 			; <UNDEFINED> instruction: 0x732f3030
     e68:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
     e6c:	2f657261 	svccs	0x00657261
     e70:	2d737068 	ldclcs	0, cr7, [r3, #-416]!	; 0xfffffe60
     e74:	34636d46 	strbtcc	r6, [r3], #-3398	; 0xfffff2ba
     e78:	732d3030 			; <UNDEFINED> instruction: 0x732d3030
     e7c:	30762d77 	rsbscc	r2, r6, r7, ror sp
     e80:	74002f31 	strvc	r2, [r0], #-3889	; 0xfffff0cf
     e84:	615f6274 	cmpvs	pc, r4, ror r2	; <UNPREDICTABLE>
     e88:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     e8c:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
     e90:	5f006465 	svcpl	0x00006465
     e94:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     e98:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     e9c:	5f5f0074 	svcpl	0x005f0074
     ea0:	61636f6c 	cmnvs	r3, ip, ror #30
     ea4:	745f656c 	ldrbvc	r6, [pc], #-1388	; eac <__core1_unwind_stub-0xfff154>
     ea8:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
     eac:	41006b65 	tstmi	r0, r5, ror #22
     eb0:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; d88 <__core1_unwind_stub-0xfff278>
     eb4:	545f554d 	ldrbpl	r5, [pc], #-1357	; ebc <__core1_unwind_stub-0xfff144>
     eb8:	585f4254 	ldmdapl	pc, {r2, r4, r6, r9, lr}^	; <UNPREDICTABLE>
     ebc:	4e455f4e 	cdpmi	15, 4, cr5, cr5, cr14, {2}
     ec0:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     ec4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     ec8:	554d4d5f 	strbpl	r4, [sp, #-3423]	; 0xfffff2a1
     ecc:	5454415f 	ldrbpl	r4, [r4], #-351	; 0xfffffea1
     ed0:	42575f52 	subsmi	r5, r7, #328	; 0x148
     ed4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     ed8:	72726564 	rsbsvc	r6, r2, #100, 10	; 0x19000000
     edc:	6d6e5f00 	stclvs	15, cr5, [lr, #-0]
     ee0:	6f6c6c61 	svcvs	0x006c6c61
     ee4:	755f0063 	ldrbvc	r0, [pc, #-99]	; e89 <__core1_unwind_stub-0xfff177>
     ee8:	00667562 	rsbeq	r7, r6, r2, ror #10
     eec:	5f544c41 	svcpl	0x00544c41
     ef0:	5f554d4d 	svcpl	0x00554d4d
     ef4:	5f504144 	svcpl	0x00504144
     ef8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     efc:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     f00:	616e6500 	cmnvs	lr, r0, lsl #10
     f04:	5f656c62 	svcpl	0x00656c62
     f08:	72627474 	rsbvc	r7, r2, #116, 8	; 0x74000000
     f0c:	61775f31 	cmnvs	r7, r1, lsr pc
     f10:	67006b6c 	strvs	r6, [r0, -ip, ror #22]
     f14:	656f635f 	strbvs	r6, [pc, #-863]!	; bbd <__core1_unwind_stub-0xfff443>
     f18:	74735f66 	ldrbtvc	r5, [r3], #-3942	; 0xfffff09a
     f1c:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
     f20:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
     f24:	67007365 	strvs	r7, [r0, -r5, ror #6]
     f28:	6168635f 	cmnvs	r8, pc, asr r3
     f2c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     f30:	6d687300 	stclvs	3, cr7, [r8, #-0]
     f34:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     f38:	00745f6c 	rsbseq	r5, r4, ip, ror #30
     f3c:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
     f40:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
     f44:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
     f48:	6f635f67 	svcvs	0x00635f67
     f4c:	00746e75 	rsbseq	r6, r4, r5, ror lr
     f50:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     f54:	65725f30 	ldrbvs	r5, [r2, #-3888]!	; 0xfffff0d0
     f58:	00796461 	rsbseq	r6, r9, r1, ror #8
     f5c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     f60:	65725f31 	ldrbvs	r5, [r2, #-3889]!	; 0xfffff0cf
     f64:	00796461 	rsbseq	r6, r9, r1, ror #8
     f68:	5f676f6c 	svcpl	0x00676f6c
     f6c:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
     f70:	726f6300 	rsbvc	r6, pc, #0, 6
     f74:	6d5f3165 	ldfvse	f3, [pc, #-404]	; de8 <__core1_unwind_stub-0xfff218>
     f78:	006e6961 	rsbeq	r6, lr, r1, ror #18
     f7c:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     f80:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
     f84:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
     f88:	6162765f 	cmnvs	r2, pc, asr r6
     f8c:	5f670072 	svcpl	0x00670072
     f90:	736c7570 	cmnvc	ip, #112, 10	; 0x1c000000
     f94:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
     f98:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
     f9c:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
     fa0:	67007365 	strvs	r7, [r0, -r5, ror #6]
     fa4:	6c75705f 	ldclvs	0, cr7, [r5], #-380	; 0xfffffe84
     fa8:	705f6573 	subsvc	r6, pc, r3, ror r5	; <UNPREDICTABLE>
     fac:	5f726961 	svcpl	0x00726961
     fb0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
     fb4:	5f5f0073 	svcpl	0x005f0073
     fb8:	5f737362 	svcpl	0x00737362
     fbc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     fc0:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
     fc4:	73625f5f 	cmnvc	r2, #380	; 0x17c
     fc8:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
     fcc:	005f5f64 	subseq	r5, pc, r4, ror #30
     fd0:	6967616d 	stmdbvs	r7!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     fd4:	5f670063 	svcpl	0x00670063
     fd8:	66656f63 	strbtvs	r6, [r5], -r3, ror #30
     fdc:	756f635f 	strbvc	r6, [pc, #-863]!	; c85 <__core1_unwind_stub-0xfff37b>
     fe0:	7300746e 	movwvc	r7, #1134	; 0x46e
     fe4:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
     fe8:	3165726f 	cmncc	r5, pc, ror #4
     fec:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
     ff0:	6d5f3165 	ldfvse	f3, [pc, #-404]	; e64 <__core1_unwind_stub-0xfff19c>
     ff4:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
     ff8:	5f670063 	svcpl	0x00670063
     ffc:	66656f63 	strbtvs	r6, [r5], -r3, ror #30
    1000:	6961705f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    1004:	79625f72 	stmdbvc	r2!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1008:	00736574 	rsbseq	r6, r3, r4, ror r5
    100c:	5f676f6c 	svcpl	0x00676f6c
    1010:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
    1014:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
    1018:	745f3874 	ldrbvc	r3, [pc], #-2164	; 1020 <__core1_unwind_stub-0xffefe0>
    101c:	72657a00 	rsbvc	r7, r5, #0, 20
    1020:	73625f6f 	cmnvc	r2, #444	; 0x1bc
    1024:	5f670073 	svcpl	0x00670073
    1028:	736c7570 	cmnvc	ip, #112, 10	; 0x1c000000
    102c:	6f635f65 	svcvs	0x00635f65
    1030:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1034:	61645f5f 	cmnvs	r4, pc, asr pc
    1038:	6c5f6174 	ldfvse	f6, [pc], {116}	; 0x74
    103c:	5f64616f 	svcpl	0x0064616f
    1040:	5f5f005f 	svcpl	0x005f005f
    1044:	61746164 	cmnvs	r4, r4, ror #2
    1048:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
    104c:	63005f5f 	movwvs	r5, #3935	; 0xf5f
    1050:	3165726f 	cmncc	r5, pc, ror #4
    1054:	6174735f 	cmnvs	r4, pc, asr r3
    1058:	70757472 	rsbsvc	r7, r5, r2, ror r4
    105c:	646f625f 	strbtvs	r6, [pc], #-607	; 1064 <__core1_unwind_stub-0xffef9c>
    1060:	5f5f0079 	svcpl	0x005f0079
    1064:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    1068:	6f745f6b 	svcvs	0x00745f6b
    106c:	005f5f70 	subseq	r5, pc, r0, ror pc	; <UNPREDICTABLE>
    1070:	61645f5f 	cmnvs	r4, pc, asr pc
    1074:	735f6174 	cmpvc	pc, #116, 2
    1078:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    107c:	73005f5f 	movwvc	r5, #3935	; 0xf5f
    1080:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    1084:	3165726f 	cmncc	r5, pc, ror #4
    1088:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    108c:	735f3165 	cmpvc	pc, #1073741849	; 0x40000019
    1090:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1094:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    1098:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    109c:	5f747261 	svcpl	0x00747261
    10a0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    10a4:	656d0031 	strbvs	r0, [sp, #-49]!	; 0xffffffcf
    10a8:	766f6d6d 	strbtvc	r6, [pc], -sp, ror #26
    10ac:	656d0065 	strbvs	r0, [sp, #-101]!	; 0xffffff9b
    10b0:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
    10b4:	63727300 	cmnvs	r2, #0, 6
    10b8:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    10bc:	6c2f3165 	stfvss	f3, [pc], #-404	; f30 <__core1_unwind_stub-0xfff0d0>
    10c0:	5f636269 	svcpl	0x00636269
    10c4:	2e6e696d 	vnmulcs.f16	s13, s28, s27	; <UNPREDICTABLE>
    10c8:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
    10cc:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    10d0:	63727300 	cmnvs	r2, #0, 6
    10d4:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    10d8:	632f3165 			; <UNDEFINED> instruction: 0x632f3165
    10dc:	3165726f 	cmncc	r5, pc, ror #4
    10e0:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    10e4:	735f7864 	cmpvc	pc, #100, 16	; 0x640000
    10e8:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    10ec:	4e470053 	mcrmi	0, 2, r0, cr7, cr3, {2}
    10f0:	53412055 	movtpl	r2, #4181	; 0x1055
    10f4:	332e3220 			; <UNDEFINED> instruction: 0x332e3220
    10f8:	43530034 	cmpmi	r3, #52	; 0x34
    10fc:	54435f55 	strbpl	r5, [r3], #-3925	; 0xfffff0ab
    1100:	67004c52 	smlsdvs	r0, r2, ip, r4
    1104:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1108:	6f69705f 	svcvs	0x0069705f
    110c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1110:	72610061 	rsbvc	r0, r1, #97	; 0x61
    1114:	6d6d5f6d 	stclvs	15, cr5, [sp, #-436]!	; 0xfffffe4c
    1118:	6f6c635f 	svcvs	0x006c635f
    111c:	61006573 	tstvs	r0, r3, ror r5
    1120:	61735f39 	cmnvs	r3, r9, lsr pc
    1124:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    1128:	625f657a 	subsvs	r6, pc, #511705088	; 0x1e800000
    112c:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    1130:	6d6d5f65 	stclvs	15, cr5, [sp, #-404]!	; 0xfffffe6c
    1134:	6d6d0075 	stclvs	0, cr0, [sp, #-468]!	; 0xfffffe2c
    1138:	6e6f5f75 	mcrvs	15, 3, r5, cr15, cr5, {3}
    113c:	6d5f7300 	ldclvs	3, cr7, [pc, #-0]	; 1144 <__core1_unwind_stub-0xffeebc>
    1140:	615f756d 	cmpvs	pc, sp, ror #10
    1144:	705f7875 	subsvc	r7, pc, r5, ror r8	; <UNPREDICTABLE>
    1148:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
    114c:	5f43324c 	svcpl	0x0043324c
    1150:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
    1154:	625f6700 	subsvs	r6, pc, #0, 14
    1158:	5f6b6e61 	svcpl	0x006b6e61
    115c:	736c7570 	cmnvc	ip, #112, 10	; 0x1c000000
    1160:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xfffff09b
    1164:	4c41006c 	mcrrmi	0, 6, r0, r1, cr12
    1168:	52425f54 	subpl	r5, r2, #84, 30	; 0x150
    116c:	45474449 	strbmi	r4, [r7, #-1097]	; 0xfffffbb7
    1170:	4632485f 			; <UNDEFINED> instruction: 0x4632485f
    1174:	6e696c00 	cdpvs	12, 6, cr6, cr9, cr0, {0}
    1178:	68735f65 	ldmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    117c:	00746669 	rsbseq	r6, r4, r9, ror #12
    1180:	5f756d6d 	svcpl	0x00756d6d
    1184:	6c6f6f70 	stclvs	15, cr6, [pc], #-448	; fcc <__core1_unwind_stub-0xfff034>
    1188:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
    118c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1190:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    1194:	33616d64 	cmncc	r1, #100, 26	; 0x1900
    1198:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    119c:	6d6d0063 	stclvs	0, cr0, [sp, #-396]!	; 0xfffffe74
    11a0:	75615f75 	strbvc	r5, [r1, #-3957]!	; 0xfffff08b
    11a4:	6c615f78 	stclvs	15, cr5, [r1], #-480	; 0xfffffe20
    11a8:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    11ac:	5f6d7261 	svcpl	0x006d7261
    11b0:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    11b4:	75645f65 	strbvc	r5, [r4, #-3941]!	; 0xfffff09b
    11b8:	735f706d 	cmpvc	pc, #109	; 0x6d
    11bc:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    11c0:	72610073 	rsbvc	r0, r1, #115	; 0x73
    11c4:	63695f6d 	cmnvs	r9, #436	; 0x1b4
    11c8:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
    11cc:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    11d0:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
    11d4:	5f657461 	svcpl	0x00657461
    11d8:	006c6c61 	rsbeq	r6, ip, r1, ror #24
    11dc:	5f6d7261 	svcpl	0x006d7261
    11e0:	695f326c 	ldmdbvs	pc, {r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    11e4:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
    11e8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    11ec:	72610064 	rsbvc	r0, r1, #100	; 0x64
    11f0:	6d6d5f6d 	stclvs	15, cr5, [sp, #-436]!	; 0xfffffe4c
    11f4:	5f77685f 	svcpl	0x0077685f
    11f8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    11fc:	61636900 	cmnvs	r3, r0, lsl #18
    1200:	5f656863 	svcpl	0x00656863
    1204:	67006e6f 	strvs	r6, [r0, -pc, ror #28]
    1208:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    120c:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    1210:	33616d64 	cmncc	r1, #100, 26	; 0x1900
    1214:	7273635f 	rsbsvc	r6, r3, #2080374785	; 0x7c000001
    1218:	6d726100 	ldfvse	f6, [r2, #-0]
    121c:	5f6d6d5f 	svcpl	0x006d6d5f
    1220:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1224:	5f657269 	svcpl	0x00657269
    1228:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    122c:	73750079 	cmnvc	r5, #121	; 0x79
    1230:	635f7265 	cmpvs	pc, #1342177286	; 0x50000006
    1234:	73007874 	movwvc	r7, #2164	; 0x874
    1238:	6274745f 	rsbsvs	r7, r4, #1593835520	; 0x5f000000
    123c:	6f74735f 	svcvs	0x0074735f
    1240:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    1244:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1248:	4952425f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r9, lr}^
    124c:	5f454744 	svcpl	0x00454744
    1250:	00483246 	subeq	r3, r8, r6, asr #4
    1254:	72615f67 	rsbvc	r5, r1, #412	; 0x19c
    1258:	736d5f6d 	cmnvc	sp, #436	; 0x1b4
    125c:	616d6467 	cmnvs	sp, r7, ror #8
    1260:	65645f30 	strbvs	r5, [r4, #-3888]!	; 0xfffff0d0
    1264:	67006373 	smlsdxvs	r0, r3, r3, r6
    1268:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    126c:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    1270:	30616d64 	rsbcc	r6, r1, r4, ror #26
    1274:	7273635f 	rsbsvc	r6, r3, #2080374785	; 0x7c000001
    1278:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    127c:	4952425f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r9, lr}^
    1280:	5f454744 	svcpl	0x00454744
    1284:	00533246 	subseq	r3, r3, r6, asr #4
    1288:	5f6d7261 	svcpl	0x006d7261
    128c:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    1290:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    1294:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
    1298:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    129c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    12a0:	4952425f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r9, lr}^
    12a4:	5f454744 	svcpl	0x00454744
    12a8:	3248574c 	subcc	r5, r8, #76, 14	; 0x1300000
    12ac:	5f670046 	svcpl	0x00670046
    12b0:	5f6d7261 	svcpl	0x006d7261
    12b4:	5f683266 	svcpl	0x00683266
    12b8:	30717269 	rsbscc	r7, r1, r9, ror #4
    12bc:	006e655f 	rsbeq	r6, lr, pc, asr r5
    12c0:	5f6d7261 	svcpl	0x006d7261
    12c4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    12c8:	7463735f 	strbtvc	r7, [r3], #-863	; 0xfffffca1
    12cc:	6700726c 	strvs	r7, [r0, -ip, ror #4]
    12d0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    12d4:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    12d8:	31616d64 	cmncc	r1, r4, ror #26
    12dc:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    12e0:	63610063 	cmnvs	r1, #99	; 0x63
    12e4:	00726c74 	rsbseq	r6, r2, r4, ror ip
    12e8:	6f5f7062 	svcvs	0x005f7062
    12ec:	657a006e 	ldrbvs	r0, [sl, #-110]!	; 0xffffff92
    12f0:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
    12f4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    12f8:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    12fc:	32616d64 	rsbcc	r6, r1, #100, 26	; 0x1900
    1300:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    1304:	72730063 	rsbsvc	r0, r3, #99	; 0x63
    1308:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    130c:	656d5f6d 	strbvs	r5, [sp, #-3949]!	; 0xfffff093
    1310:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    1314:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
    1318:	00632e73 	rsbeq	r2, r3, r3, ror lr
    131c:	72625f67 	rsbvc	r5, r2, #412	; 0x19c
    1320:	65676469 	strbvs	r6, [r7, #-1129]!	; 0xfffffb97
    1324:	6165725f 	cmnvs	r5, pc, asr r2
    1328:	61007964 	tstvs	r0, r4, ror #18
    132c:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 116c <__core1_unwind_stub-0xffee94>
    1330:	735f756d 	cmpvc	pc, #457179136	; 0x1b400000
    1334:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1338:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    133c:	73003165 	movwvc	r3, #357	; 0x165
    1340:	00737465 	rsbseq	r7, r3, r5, ror #8
    1344:	5f6d7261 	svcpl	0x006d7261
    1348:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    134c:	735f656c 	cmpvc	pc, #108, 10	; 0x1b000000
    1350:	615f706d 	cmpvs	pc, sp, rrx
    1354:	735f646e 	cmpvc	pc, #1845493760	; 0x6e000000
    1358:	63007563 	movwvs	r7, #1379	; 0x563
    135c:	64697363 	strbtvs	r7, [r9], #-867	; 0xfffffc9d
    1360:	61770072 	cmnvs	r7, r2, ror r0
    1364:	67007379 	smlsdxvs	r0, r9, r3, r7
    1368:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    136c:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    1370:	32616d64 	rsbcc	r6, r1, #100, 26	; 0x1900
    1374:	7273635f 	rsbsvc	r6, r3, #2080374785	; 0x7c000001
    1378:	65726300 	ldrbvs	r6, [r2, #-768]!	; 0xfffffd00
    137c:	5f657461 	svcpl	0x00657461
    1380:	735f6176 	cmpvc	pc, #-2147483619	; 0x8000001d
    1384:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    1388:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    138c:	645f3165 	ldrbvs	r3, [pc], #-357	; 1394 <__core1_unwind_stub-0xffec6c>
    1390:	61007264 	tstvs	r0, r4, ror #4
    1394:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 11d4 <__core1_unwind_stub-0xffee2c>
    1398:	706f5f6d 	rsbvc	r5, pc, sp, ror #30
    139c:	72006e65 	andvc	r6, r0, #1616	; 0x650
    13a0:	6f696765 	svcvs	0x00696765
    13a4:	6f635f6e 	svcvs	0x00635f6e
    13a8:	00746e75 	rsbseq	r6, r4, r5, ror lr
    13ac:	5f6d7261 	svcpl	0x006d7261
    13b0:	5f756d6d 	svcpl	0x00756d6d
    13b4:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    13b8:	6f635f70 	svcvs	0x00635f70
    13bc:	00306572 	eorseq	r6, r0, r2, ror r5
    13c0:	5f6d7261 	svcpl	0x006d7261
    13c4:	5f746573 	svcpl	0x00746573
    13c8:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    13cc:	69625f65 	stmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    13d0:	61007374 	tstvs	r0, r4, ror r3
    13d4:	645f6d72 	ldrbvs	r6, [pc], #-3442	; 13dc <__core1_unwind_stub-0xffec24>
    13d8:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    13dc:	6c635f65 	stclvs	15, cr5, [r3], #-404	; 0xfffffe6c
    13e0:	5f6e6165 	svcpl	0x006e6165
    13e4:	61766e69 	cmnvs	r6, r9, ror #28
    13e8:	6164696c 	cmnvs	r4, ip, ror #18
    13ec:	615f6574 	cmpvs	pc, r4, ror r5	; <UNPREDICTABLE>
    13f0:	67006c6c 	strvs	r6, [r0, -ip, ror #24]
    13f4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    13f8:	6672705f 			; <UNDEFINED> instruction: 0x6672705f
    13fc:	756f635f 	strbvc	r6, [pc, #-863]!	; 10a5 <__core1_unwind_stub-0xffef5b>
    1400:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1404:	615f6700 	cmpvs	pc, r0, lsl #14
    1408:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 1248 <__core1_unwind_stub-0xffedb8>
    140c:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    1410:	645f3461 	ldrbvs	r3, [pc], #-1121	; 1418 <__core1_unwind_stub-0xffebe8>
    1414:	00637365 	rsbeq	r7, r3, r5, ror #6
    1418:	6465656e 	strbtvs	r6, [r5], #-1390	; 0xfffffa92
    141c:	62747400 	rsbsvs	r7, r4, #0, 8
    1420:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    1424:	625f6700 	subsvs	r6, pc, #0, 14
    1428:	5f6b6e61 	svcpl	0x006b6e61
    142c:	66656f63 	strbtvs	r6, [r5], -r3, ror #30
    1430:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
    1434:	6d5f7300 	ldclvs	3, cr7, [pc, #-0]	; 143c <__core1_unwind_stub-0xffebc4>
    1438:	705f756d 	subsvc	r7, pc, sp, ror #10
    143c:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
    1440:	5f6d7261 	svcpl	0x006d7261
    1444:	68636163 	stmdavs	r3!, {r0, r1, r5, r6, r8, sp, lr}^
    1448:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xfffff09b
    144c:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
    1450:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1454:	63640064 	cmnvs	r4, #100	; 0x64
    1458:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
    145c:	006e6f5f 	rsbeq	r6, lr, pc, asr pc
    1460:	5f544c41 	svcpl	0x00544c41
    1464:	44495242 	strbmi	r5, [r9], #-578	; 0xfffffdbe
    1468:	655f4547 	ldrbvs	r4, [pc, #-1351]	; f29 <__core1_unwind_stub-0xfff0d7>
    146c:	615f6700 	cmpvs	pc, r0, lsl #14
    1470:	6d5f6d72 	ldclvs	13, cr6, [pc, #-456]	; 12b0 <__core1_unwind_stub-0xffed50>
    1474:	6d646773 	stclvs	7, cr6, [r4, #-460]!	; 0xfffffe34
    1478:	635f3461 	cmpvs	pc, #1627389952	; 0x61000000
    147c:	63007273 	movwvs	r7, #627	; 0x273
    1480:	6c657373 	stclvs	3, cr7, [r5], #-460	; 0xfffffe34
    1484:	5f670072 	svcpl	0x00670072
    1488:	5f6d7261 	svcpl	0x006d7261
    148c:	6467736d 	strbtvs	r7, [r7], #-877	; 0xfffffc93
    1490:	5f31616d 	svcpl	0x0031616d
    1494:	00727363 	rsbseq	r7, r2, r3, ror #6
    1498:	5f617369 	svcpl	0x00617369
    149c:	5f746962 	svcpl	0x00746962
    14a0:	645f7066 	ldrbvs	r7, [pc], #-102	; 14a8 <__core1_unwind_stub-0xffeb58>
    14a4:	61006c62 	tstvs	r0, r2, ror #24
    14a8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    14ac:	5f686372 	svcpl	0x00686372
    14b0:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    14b4:	54007478 	strpl	r7, [r0], #-1144	; 0xfffffb88
    14b8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    14bc:	50435f54 	subpl	r5, r3, r4, asr pc
    14c0:	6f635f55 	svcvs	0x00635f55
    14c4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    14c8:	0033326d 	eorseq	r3, r3, sp, ror #4
    14cc:	5f4d5241 	svcpl	0x004d5241
    14d0:	54005145 	strpl	r5, [r0], #-325	; 0xfffffebb
    14d4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    14d8:	50435f54 	subpl	r5, r3, r4, asr pc
    14dc:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    14e0:	3531316d 	ldrcc	r3, [r1, #-365]!	; 0xfffffe93
    14e4:	66327436 			; <UNDEFINED> instruction: 0x66327436
    14e8:	73690073 	cmnvc	r9, #115	; 0x73
    14ec:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    14f0:	68745f74 	ldmdavs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    14f4:	00626d75 	rsbeq	r6, r2, r5, ror sp
    14f8:	74494455 	strbvc	r4, [r9], #-1109	; 0xfffffbab
    14fc:	00657079 	rsbeq	r7, r5, r9, ror r0
    1500:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1504:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1508:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    150c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    1510:	37356178 			; <UNDEFINED> instruction: 0x37356178
    1514:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    1518:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    151c:	5f5f0033 	svcpl	0x005f0033
    1520:	76696475 			; <UNDEFINED> instruction: 0x76696475
    1524:	64646f6d 	strbtvs	r6, [r4], #-3949	; 0xfffff093
    1528:	42003469 	andmi	r3, r0, #1761607680	; 0x69000000
    152c:	5f455341 	svcpl	0x00455341
    1530:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    1534:	5f4d385f 	svcpl	0x004d385f
    1538:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    153c:	52415400 	subpl	r5, r1, #0, 8
    1540:	5f544547 	svcpl	0x00544547
    1544:	5f555043 	svcpl	0x00555043
    1548:	386d7261 	stmdacc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    154c:	54003031 	strpl	r3, [r0], #-49	; 0xffffffcf
    1550:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1554:	50435f54 	subpl	r5, r3, r4, asr pc
    1558:	67785f55 			; <UNDEFINED> instruction: 0x67785f55
    155c:	31656e65 	cmncc	r5, r5, ror #28
    1560:	4d524100 	ldfmie	f4, [r2, #-0]
    1564:	5343505f 	movtpl	r5, #12383	; 0x305f
    1568:	5041415f 	subpl	r4, r1, pc, asr r1
    156c:	495f5343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    1570:	584d4d57 	stmdapl	sp, {r0, r1, r2, r4, r6, r8, sl, fp, lr}^
    1574:	41420054 	qdaddmi	r0, r4, r2
    1578:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    157c:	5f484352 	svcpl	0x00484352
    1580:	41420030 	cmpmi	r2, r0, lsr r0
    1584:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    1588:	5f484352 	svcpl	0x00484352
    158c:	41420032 	cmpmi	r2, r2, lsr r0
    1590:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    1594:	5f484352 	svcpl	0x00484352
    1598:	41420033 	cmpmi	r2, r3, lsr r0
    159c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    15a0:	5f484352 	svcpl	0x00484352
    15a4:	41420034 	cmpmi	r2, r4, lsr r0
    15a8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    15ac:	5f484352 	svcpl	0x00484352
    15b0:	41420036 	cmpmi	r2, r6, lsr r0
    15b4:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    15b8:	5f484352 	svcpl	0x00484352
    15bc:	41540037 	cmpmi	r4, r7, lsr r0
    15c0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    15c4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    15c8:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    15cc:	00656c61 	rsbeq	r6, r5, r1, ror #24
    15d0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    15d4:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    15d8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    15dc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    15e0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    15e4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    15e8:	396c472d 	stmdbcc	ip!, {r0, r2, r3, r5, r8, r9, sl, lr}^
    15ec:	2f39546b 	svccs	0x0039546b
    15f0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    15f4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    15f8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    15fc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1600:	2d392d69 	ldccs	13, cr2, [r9, #-420]!	; 0xfffffe5c
    1604:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    1608:	2f34712d 	svccs	0x0034712d
    160c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1610:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    1614:	6f6e2d6d 	svcvs	0x006e2d6d
    1618:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    161c:	2f696261 	svccs	0x00696261
    1620:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    1624:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    1628:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    162c:	705f7469 	subsvc	r7, pc, r9, ror #8
    1630:	72646572 	rsbvc	r6, r4, #478150656	; 0x1c800000
    1634:	54007365 	strpl	r7, [r0], #-869	; 0xfffffc9b
    1638:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    163c:	50435f54 	subpl	r5, r3, r4, asr pc
    1640:	6f635f55 	svcvs	0x00635f55
    1644:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1648:	0033336d 	eorseq	r3, r3, sp, ror #6
    164c:	74495355 	strbvc	r5, [r9], #-853	; 0xfffffcab
    1650:	00657079 	rsbeq	r7, r5, r9, ror r0
    1654:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1658:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    165c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    1660:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    1664:	00696d64 	rsbeq	r6, r9, r4, ror #26
    1668:	5f617369 	svcpl	0x00617369
    166c:	69626f6e 	stmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1670:	41540074 	cmpmi	r4, r4, ror r0
    1674:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    1678:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    167c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1680:	36373131 			; <UNDEFINED> instruction: 0x36373131
    1684:	73667a6a 	cmnvc	r6, #434176	; 0x6a000
    1688:	4d524100 	ldfmie	f4, [r2, #-0]
    168c:	5343505f 	movtpl	r5, #12383	; 0x305f
    1690:	4b4e555f 	blmi	1396c14 <__bss_end__+0x382c14>
    1694:	4e574f4e 	cdpmi	15, 5, cr4, cr7, cr14, {2}
    1698:	52415400 	subpl	r5, r1, #0, 8
    169c:	5f544547 	svcpl	0x00544547
    16a0:	5f555043 	svcpl	0x00555043
    16a4:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    16a8:	41420065 	cmpmi	r2, r5, rrx
    16ac:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    16b0:	5f484352 	svcpl	0x00484352
    16b4:	4a455435 	bmi	1156790 <__bss_end__+0x142790>
    16b8:	6d726100 	ldfvse	f6, [r2, #-0]
    16bc:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    16c0:	735f6d73 	cmpvc	pc, #7360	; 0x1cc0
    16c4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    16c8:	6d726100 	ldfvse	f6, [r2, #-0]
    16cc:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    16d0:	65743568 	ldrbvs	r3, [r4, #-1384]!	; 0xfffffa98
    16d4:	736e7500 	cmnvc	lr, #0, 10
    16d8:	5f636570 	svcpl	0x00636570
    16dc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    16e0:	0073676e 	rsbseq	r6, r3, lr, ror #14
    16e4:	5f617369 	svcpl	0x00617369
    16e8:	5f746962 	svcpl	0x00746962
    16ec:	00636573 	rsbeq	r6, r3, r3, ror r5
    16f0:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
    16f4:	61745f7a 	cmnvs	r4, sl, ror pc
    16f8:	52410062 	subpl	r0, r1, #98	; 0x62
    16fc:	43565f4d 	cmpmi	r6, #308	; 0x134
    1700:	6d726100 	ldfvse	f6, [r2, #-0]
    1704:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    1708:	73785f68 	cmnvc	r8, #104, 30	; 0x1a0
    170c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1710:	4d524100 	ldfmie	f4, [r2, #-0]
    1714:	00454c5f 	subeq	r4, r5, pc, asr ip
    1718:	5f4d5241 	svcpl	0x004d5241
    171c:	41005356 	tstmi	r0, r6, asr r3
    1720:	475f4d52 			; <UNDEFINED> instruction: 0x475f4d52
    1724:	72610045 	rsbvc	r0, r1, #69	; 0x45
    1728:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    172c:	735f656e 	cmpvc	pc, #461373440	; 0x1b800000
    1730:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    1734:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    1738:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 1740 <__core1_unwind_stub-0xffe8c0>
    173c:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    1740:	6f6c6620 	svcvs	0x006c6620
    1744:	54007461 	strpl	r7, [r0], #-1121	; 0xfffffb9f
    1748:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    174c:	50435f54 	subpl	r5, r3, r4, asr pc
    1750:	6f635f55 	svcvs	0x00635f55
    1754:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1758:	00353161 	eorseq	r3, r5, r1, ror #2
    175c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1760:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1764:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    1768:	36323761 	ldrtcc	r3, [r2], -r1, ror #14
    176c:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    1770:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1774:	50435f54 	subpl	r5, r3, r4, asr pc
    1778:	6f635f55 	svcvs	0x00635f55
    177c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1780:	00373161 	eorseq	r3, r7, r1, ror #2
    1784:	5f4d5241 	svcpl	0x004d5241
    1788:	54005447 	strpl	r5, [r0], #-1095	; 0xfffffbb9
    178c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1790:	50435f54 	subpl	r5, r3, r4, asr pc
    1794:	656e5f55 	strbvs	r5, [lr, #-3925]!	; 0xfffff0ab
    1798:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    179c:	316e6573 	smccc	58963	; 0xe653
    17a0:	52415400 	subpl	r5, r1, #0, 8
    17a4:	5f544547 	svcpl	0x00544547
    17a8:	5f555043 	svcpl	0x00555043
    17ac:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    17b0:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    17b4:	41420066 	cmpmi	r2, r6, rrx
    17b8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    17bc:	5f484352 	svcpl	0x00484352
    17c0:	004d4537 	subeq	r4, sp, r7, lsr r5
    17c4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    17c8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    17cc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    17d0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    17d4:	32316178 	eorscc	r6, r1, #120, 2
    17d8:	73616800 	cmnvc	r1, #0, 16
    17dc:	6c617668 	stclvs	6, cr7, [r1], #-416	; 0xfffffe60
    17e0:	4200745f 	andmi	r7, r0, #1593835520	; 0x5f000000
    17e4:	5f455341 	svcpl	0x00455341
    17e8:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    17ec:	5a4b365f 	bpl	12cf170 <__bss_end__+0x2bb170>
    17f0:	61736900 	cmnvs	r3, r0, lsl #18
    17f4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    17f8:	72610073 	rsbvc	r0, r1, #115	; 0x73
    17fc:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    1800:	615f6863 	cmpvs	pc, r3, ror #16
    1804:	685f6d72 	ldmdavs	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1808:	76696477 			; <UNDEFINED> instruction: 0x76696477
    180c:	6d726100 	ldfvse	f6, [r2, #-0]
    1810:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    1814:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    1818:	73690063 	cmnvc	r9, #99	; 0x63
    181c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1820:	70665f74 	rsbvc	r5, r6, r4, ror pc
    1824:	41003631 	tstmi	r0, r1, lsr r6
    1828:	485f4d52 	ldmdami	pc, {r1, r4, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    182c:	73690049 	cmnvc	r9, #73	; 0x49
    1830:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1834:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
    1838:	54007669 	strpl	r7, [r0], #-1641	; 0xfffff997
    183c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1840:	50435f54 	subpl	r5, r3, r4, asr pc
    1844:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    1848:	3331316d 	teqcc	r1, #1073741851	; 0x4000001b
    184c:	00736a36 	rsbseq	r6, r3, r6, lsr sl
    1850:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1854:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1858:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    185c:	00386d72 	eorseq	r6, r8, r2, ror sp
    1860:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1864:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1868:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    186c:	00396d72 	eorseq	r6, r9, r2, ror sp
    1870:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1874:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1878:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    187c:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    1880:	6d726100 	ldfvse	f6, [r2, #-0]
    1884:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    1888:	6d635f68 	stclvs	15, cr5, [r3, #-416]!	; 0xfffffe60
    188c:	54006573 	strpl	r6, [r0], #-1395	; 0xfffffa8d
    1890:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1894:	50435f54 	subpl	r5, r3, r4, asr pc
    1898:	6f635f55 	svcvs	0x00635f55
    189c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    18a0:	5400346d 	strpl	r3, [r0], #-1133	; 0xfffffb93
    18a4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    18a8:	50435f54 	subpl	r5, r3, r4, asr pc
    18ac:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    18b0:	6530316d 	ldrvs	r3, [r0, #-365]!	; 0xfffffe93
    18b4:	52415400 	subpl	r5, r1, #0, 8
    18b8:	5f544547 	svcpl	0x00544547
    18bc:	5f555043 	svcpl	0x00555043
    18c0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    18c4:	376d7865 	strbcc	r7, [sp, -r5, ror #16]!
    18c8:	61736900 	cmnvs	r3, r0, lsl #18
    18cc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    18d0:	7670665f 			; <UNDEFINED> instruction: 0x7670665f
    18d4:	72610035 	rsbvc	r0, r1, #53	; 0x35
    18d8:	6f635f6d 	svcvs	0x00635f6d
    18dc:	635f646e 	cmpvs	pc, #1845493760	; 0x6e000000
    18e0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    18e4:	5f4d5241 	svcpl	0x004d5241
    18e8:	5f534350 	svcpl	0x00534350
    18ec:	43504141 	cmpmi	r0, #1073741840	; 0x40000010
    18f0:	73690053 	cmnvc	r9, #83	; 0x53
    18f4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    18f8:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    18fc:	5f38766d 	svcpl	0x0038766d
    1900:	41420032 	cmpmi	r2, r2, lsr r0
    1904:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    1908:	5f484352 	svcpl	0x00484352
    190c:	54004d33 	strpl	r4, [r0], #-3379	; 0xfffff2cd
    1910:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1914:	50435f54 	subpl	r5, r3, r4, asr pc
    1918:	6f635f55 	svcvs	0x00635f55
    191c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1920:	63373161 	teqvs	r7, #1073741848	; 0x40000018
    1924:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    1928:	00376178 	eorseq	r6, r7, r8, ror r1
    192c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1930:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1934:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    1938:	31376d72 	teqcc	r7, r2, ror sp
    193c:	61007430 	tstvs	r0, r0, lsr r4
    1940:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    1944:	5f686372 	svcpl	0x00686372
    1948:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    194c:	00327478 	eorseq	r7, r2, r8, ror r4
    1950:	5f617369 	svcpl	0x00617369
    1954:	5f6d756e 	svcpl	0x006d756e
    1958:	73746962 	cmnvc	r4, #1605632	; 0x188000
    195c:	52415400 	subpl	r5, r1, #0, 8
    1960:	5f544547 	svcpl	0x00544547
    1964:	5f555043 	svcpl	0x00555043
    1968:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    196c:	306d7865 	rsbcc	r7, sp, r5, ror #16
    1970:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    1974:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    1978:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    197c:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    1980:	41540079 	cmpmi	r4, r9, ror r0
    1984:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    1988:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    198c:	7978655f 	ldmdbvc	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    1990:	6d736f6e 	ldclvs	15, cr6, [r3, #-440]!	; 0xfffffe48
    1994:	41540031 	cmpmi	r4, r1, lsr r0
    1998:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    199c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    19a0:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    19a4:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    19a8:	69003235 	stmdbvs	r0, {r0, r2, r4, r5, r9, ip, sp}
    19ac:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    19b0:	745f7469 	ldrbvc	r7, [pc], #-1129	; 19b8 <__core1_unwind_stub-0xffe648>
    19b4:	00766964 	rsbseq	r6, r6, r4, ror #18
    19b8:	66657270 			; <UNDEFINED> instruction: 0x66657270
    19bc:	6e5f7265 	cdpvs	2, 5, cr7, cr15, cr5, {3}
    19c0:	5f6e6f65 	svcpl	0x006e6f65
    19c4:	5f726f66 	svcpl	0x00726f66
    19c8:	69623436 	stmdbvs	r2!, {r1, r2, r4, r5, sl, ip, sp}^
    19cc:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    19d0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    19d4:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    19d8:	66363170 			; <UNDEFINED> instruction: 0x66363170
    19dc:	54006c6d 	strpl	r6, [r0], #-3181	; 0xfffff393
    19e0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    19e4:	50435f54 	subpl	r5, r3, r4, asr pc
    19e8:	6f635f55 	svcvs	0x00635f55
    19ec:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    19f0:	00323361 	eorseq	r3, r2, r1, ror #6
    19f4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    19f8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    19fc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    1a00:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    1a04:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    1a08:	61736900 	cmnvs	r3, r0, lsl #18
    1a0c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1a10:	3170665f 	cmncc	r0, pc, asr r6
    1a14:	6e6f6336 	mcrvs	3, 3, r6, cr15, cr6, {1}
    1a18:	6e750076 	mrcvs	0, 3, r0, cr5, cr6, {3}
    1a1c:	63657073 	cmnvs	r5, #115	; 0x73
    1a20:	74735f76 	ldrbtvc	r5, [r3], #-3958	; 0xfffff08a
    1a24:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    1a28:	41540073 	cmpmi	r4, r3, ror r0
    1a2c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    1a30:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    1a34:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1a38:	36353131 			; <UNDEFINED> instruction: 0x36353131
    1a3c:	00733274 	rsbseq	r3, r3, r4, ror r2
    1a40:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1a44:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1a48:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    1a4c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    1a50:	35376178 	ldrcc	r6, [r7, #-376]!	; 0xfffffe88
    1a54:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    1a58:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    1a5c:	41540035 	cmpmi	r4, r5, lsr r0
    1a60:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    1a64:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    1a68:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    1a6c:	65743630 	ldrbvs	r3, [r4, #-1584]!	; 0xfffff9d0
    1a70:	52415400 	subpl	r5, r1, #0, 8
    1a74:	5f544547 	svcpl	0x00544547
    1a78:	5f555043 	svcpl	0x00555043
    1a7c:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    1a80:	6a653632 	bvs	194f350 <__bss_end__+0x93b350>
    1a84:	41420073 	hvcmi	8195	; 0x2003
    1a88:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    1a8c:	5f484352 	svcpl	0x00484352
    1a90:	69005434 	stmdbvs	r0, {r2, r4, r5, sl, ip, lr}
    1a94:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    1a98:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    1a9c:	74707972 	ldrbtvc	r7, [r0], #-2418	; 0xfffff68e
    1aa0:	7261006f 	rsbvc	r0, r1, #111	; 0x6f
    1aa4:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    1aa8:	695f7367 	ldmdbvs	pc, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1aac:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    1ab0:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1ab4:	69006563 	stmdbvs	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    1ab8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    1abc:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    1ac0:	41420062 	cmpmi	r2, r2, rrx
    1ac4:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    1ac8:	5f484352 	svcpl	0x00484352
    1acc:	00455435 	subeq	r5, r5, r5, lsr r4
    1ad0:	5f617369 	svcpl	0x00617369
    1ad4:	74616566 	strbtvc	r6, [r1], #-1382	; 0xfffffa9a
    1ad8:	00657275 	rsbeq	r7, r5, r5, ror r2
    1adc:	5f617369 	svcpl	0x00617369
    1ae0:	5f746962 	svcpl	0x00746962
    1ae4:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    1ae8:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    1aec:	6d726100 	ldfvse	f6, [r2, #-0]
    1af0:	6e616c5f 	mcrvs	12, 3, r6, cr1, cr15, {2}
    1af4:	756f5f67 	strbvc	r5, [pc, #-3943]!	; b95 <__core1_unwind_stub-0xfff46b>
    1af8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1afc:	6a626f5f 	bvs	189d880 <__bss_end__+0x889880>
    1b00:	5f746365 	svcpl	0x00746365
    1b04:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    1b08:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
    1b0c:	685f7365 	ldmdavs	pc, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1b10:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    1b14:	5f617369 	svcpl	0x00617369
    1b18:	5f746962 	svcpl	0x00746962
    1b1c:	645f7066 	ldrbvs	r7, [pc], #-102	; 1b24 <__core1_unwind_stub-0xffe4dc>
    1b20:	41003233 	tstmi	r0, r3, lsr r2
    1b24:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    1b28:	73690045 	cmnvc	r9, #69	; 0x45
    1b2c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1b30:	65625f74 	strbvs	r5, [r2, #-3956]!	; 0xfffff08c
    1b34:	41540038 	cmpmi	r4, r8, lsr r0
    1b38:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    1b3c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    1b40:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1b44:	36373131 			; <UNDEFINED> instruction: 0x36373131
    1b48:	00737a6a 	rsbseq	r7, r3, sl, ror #20
    1b4c:	636f7270 	cmnvs	pc, #112, 4
    1b50:	6f737365 	svcvs	0x00737365
    1b54:	79745f72 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1b58:	61006570 	tstvs	r0, r0, ror r5
    1b5c:	665f6c6c 	ldrbvs	r6, [pc], -ip, ror #24
    1b60:	00737570 	rsbseq	r7, r3, r0, ror r5
    1b64:	5f6d7261 	svcpl	0x006d7261
    1b68:	00736370 	rsbseq	r6, r3, r0, ror r3
    1b6c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    1b70:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    1b74:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    1b78:	6d726100 	ldfvse	f6, [r2, #-0]
    1b7c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    1b80:	00743468 	rsbseq	r3, r4, r8, ror #8
    1b84:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1b88:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1b8c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    1b90:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    1b94:	36376178 			; <UNDEFINED> instruction: 0x36376178
    1b98:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    1b9c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    1ba0:	72610035 	rsbvc	r0, r1, #53	; 0x35
    1ba4:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    1ba8:	775f656e 	ldrbvc	r6, [pc, -lr, ror #10]
    1bac:	00667562 	rsbeq	r7, r6, r2, ror #10
    1bb0:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    1bb4:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    1bb8:	73690068 	cmnvc	r9, #104	; 0x68
    1bbc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1bc0:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    1bc4:	5f6b7269 	svcpl	0x006b7269
    1bc8:	765f6f6e 	ldrbvc	r6, [pc], -lr, ror #30
    1bcc:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    1bd0:	5f656c69 	svcpl	0x00656c69
    1bd4:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    1bd8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1bdc:	50435f54 	subpl	r5, r3, r4, asr pc
    1be0:	6f635f55 	svcvs	0x00635f55
    1be4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1be8:	5400306d 	strpl	r3, [r0], #-109	; 0xffffff93
    1bec:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1bf0:	50435f54 	subpl	r5, r3, r4, asr pc
    1bf4:	6f635f55 	svcvs	0x00635f55
    1bf8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1bfc:	5400316d 	strpl	r3, [r0], #-365	; 0xfffffe93
    1c00:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1c04:	50435f54 	subpl	r5, r3, r4, asr pc
    1c08:	6f635f55 	svcvs	0x00635f55
    1c0c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1c10:	6900336d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    1c14:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    1c18:	615f7469 	cmpvs	pc, r9, ror #8
    1c1c:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1c20:	6100315f 	tstvs	r0, pc, asr r1
    1c24:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    1c28:	5f686372 	svcpl	0x00686372
    1c2c:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    1c30:	61736900 	cmnvs	r3, r0, lsl #18
    1c34:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1c38:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1c3c:	335f3876 	cmpcc	pc, #7733248	; 0x760000
    1c40:	61736900 	cmnvs	r3, r0, lsl #18
    1c44:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1c48:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1c4c:	345f3876 	ldrbcc	r3, [pc], #-2166	; 1c54 <__core1_unwind_stub-0xffe3ac>
    1c50:	61736900 	cmnvs	r3, r0, lsl #18
    1c54:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1c58:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1c5c:	355f3876 	ldrbcc	r3, [pc, #-2166]	; 13ee <__core1_unwind_stub-0xffec12>
    1c60:	52415400 	subpl	r5, r1, #0, 8
    1c64:	5f544547 	svcpl	0x00544547
    1c68:	5f555043 	svcpl	0x00555043
    1c6c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    1c70:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    1c74:	41540033 	cmpmi	r4, r3, lsr r0
    1c78:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    1c7c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    1c80:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    1c84:	61786574 	cmnvs	r8, r4, ror r5
    1c88:	54003535 	strpl	r3, [r0], #-1333	; 0xfffffacb
    1c8c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1c90:	50435f54 	subpl	r5, r3, r4, asr pc
    1c94:	6f635f55 	svcvs	0x00635f55
    1c98:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1c9c:	00373561 	eorseq	r3, r7, r1, ror #10
    1ca0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1ca4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1ca8:	6d5f5550 	cfldr64vs	mvdx5, [pc, #-320]	; 1b70 <__core1_unwind_stub-0xffe490>
    1cac:	726f6370 	rsbvc	r6, pc, #112, 6	; 0xc0000001
    1cb0:	73690065 	cmnvc	r9, #101	; 0x65
    1cb4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1cb8:	66765f74 	uhsub16vs	r5, r6, r4
    1cbc:	00327670 	eorseq	r7, r2, r0, ror r6
    1cc0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1cc4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1cc8:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    1ccc:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
    1cd0:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    1cd4:	5f6d7261 	svcpl	0x006d7261
    1cd8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1cdc:	746f6e5f 	strbtvc	r6, [pc], #-3679	; 1ce4 <__core1_unwind_stub-0xffe31c>
    1ce0:	4154006d 	cmpmi	r4, sp, rrx
    1ce4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    1ce8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    1cec:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1cf0:	36323031 			; <UNDEFINED> instruction: 0x36323031
    1cf4:	00736a65 	rsbseq	r6, r3, r5, ror #20
    1cf8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    1cfc:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    1d00:	4a365f48 	bmi	d99a28 <__core1_unwind_stub-0x2665d8>
    1d04:	53414200 	movtpl	r4, #4608	; 0x1200
    1d08:	52415f45 	subpl	r5, r1, #276	; 0x114
    1d0c:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    1d10:	4142004b 	cmpmi	r2, fp, asr #32
    1d14:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    1d18:	5f484352 	svcpl	0x00484352
    1d1c:	69004d36 	stmdbvs	r0, {r1, r2, r4, r5, r8, sl, fp, lr}
    1d20:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    1d24:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1d28:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    1d2c:	41540074 	cmpmi	r4, r4, ror r0
    1d30:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    1d34:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    1d38:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1d3c:	36333131 			; <UNDEFINED> instruction: 0x36333131
    1d40:	0073666a 	rsbseq	r6, r3, sl, ror #12
    1d44:	5f4d5241 	svcpl	0x004d5241
    1d48:	4100534c 	tstmi	r0, ip, asr #6
    1d4c:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    1d50:	41420054 	qdaddmi	r0, r4, r2
    1d54:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    1d58:	5f484352 	svcpl	0x00484352
    1d5c:	41005a36 	tstmi	r0, r6, lsr sl
    1d60:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    1d64:	415f5343 	cmpmi	pc, r3, asr #6
    1d68:	53435041 	movtpl	r5, #12353	; 0x3041
    1d6c:	5046565f 	subpl	r5, r6, pc, asr r6
    1d70:	52415400 	subpl	r5, r1, #0, 8
    1d74:	5f544547 	svcpl	0x00544547
    1d78:	5f555043 	svcpl	0x00555043
    1d7c:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    1d80:	00327478 	eorseq	r7, r2, r8, ror r4
    1d84:	5f617369 	svcpl	0x00617369
    1d88:	5f746962 	svcpl	0x00746962
    1d8c:	6e6f656e 	cdpvs	5, 6, cr6, cr15, cr14, {3}
    1d90:	6d726100 	ldfvse	f6, [r2, #-0]
    1d94:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    1d98:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    1d9c:	73690072 	cmnvc	r9, #114	; 0x72
    1da0:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1da4:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    1da8:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0xfffff993
    1dac:	4154006d 	cmpmi	r4, sp, rrx
    1db0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    1db4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    1db8:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    1dbc:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    1dc0:	52415400 	subpl	r5, r1, #0, 8
    1dc4:	5f544547 	svcpl	0x00544547
    1dc8:	5f555043 	svcpl	0x00555043
    1dcc:	7672616d 	ldrbtvc	r6, [r2], -sp, ror #2
    1dd0:	5f6c6c65 	svcpl	0x006c6c65
    1dd4:	00346a70 	eorseq	r6, r4, r0, ror sl
    1dd8:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    1ddc:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    1de0:	6f705f68 	svcvs	0x00705f68
    1de4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    1de8:	72610072 	rsbvc	r0, r1, #114	; 0x72
    1dec:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    1df0:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
    1df4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    1df8:	39615f78 	stmdbcc	r1!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1dfc:	61736900 	cmnvs	r3, r0, lsl #18
    1e00:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1e04:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    1e08:	3274786d 	rsbscc	r7, r4, #7143424	; 0x6d0000
    1e0c:	52415400 	subpl	r5, r1, #0, 8
    1e10:	5f544547 	svcpl	0x00544547
    1e14:	5f555043 	svcpl	0x00555043
    1e18:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    1e1c:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    1e20:	726f6332 	rsbvc	r6, pc, #-939524096	; 0xc8000000
    1e24:	61786574 	cmnvs	r8, r4, ror r5
    1e28:	69003335 	stmdbvs	r0, {r0, r2, r4, r5, r8, r9, ip, sp}
    1e2c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    1e30:	745f7469 	ldrbvc	r7, [pc], #-1129	; 1e38 <__core1_unwind_stub-0xffe1c8>
    1e34:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    1e38:	41420032 	cmpmi	r2, r2, lsr r0
    1e3c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    1e40:	5f484352 	svcpl	0x00484352
    1e44:	69004137 	stmdbvs	r0, {r0, r1, r2, r4, r5, r8, lr}
    1e48:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    1e4c:	645f7469 	ldrbvs	r7, [pc], #-1129	; 1e54 <__core1_unwind_stub-0xffe1ac>
    1e50:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
    1e54:	6100646f 	tstvs	r0, pc, ror #8
    1e58:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    1e5c:	5f363170 	svcpl	0x00363170
    1e60:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1e64:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 1e6c <__core1_unwind_stub-0xffe194>
    1e68:	52410065 	subpl	r0, r1, #101	; 0x65
    1e6c:	494d5f4d 	stmdbmi	sp, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1e70:	6d726100 	ldfvse	f6, [r2, #-0]
    1e74:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    1e78:	006b3668 	rsbeq	r3, fp, r8, ror #12
    1e7c:	5f6d7261 	svcpl	0x006d7261
    1e80:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1e84:	42006d36 	andmi	r6, r0, #3456	; 0xd80
    1e88:	5f455341 	svcpl	0x00455341
    1e8c:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    1e90:	0052375f 	subseq	r3, r2, pc, asr r7
    1e94:	6f705f5f 	svcvs	0x00705f5f
    1e98:	756f6370 	strbvc	r6, [pc, #-880]!	; 1b30 <__core1_unwind_stub-0xffe4d0>
    1e9c:	745f746e 	ldrbvc	r7, [pc], #-1134	; 1ea4 <__core1_unwind_stub-0xffe15c>
    1ea0:	69006261 	stmdbvs	r0, {r0, r5, r6, r9, sp, lr}
    1ea4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    1ea8:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    1eac:	0065736d 	rsbeq	r7, r5, sp, ror #6
    1eb0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    1eb4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    1eb8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    1ebc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    1ec0:	33376178 	teqcc	r7, #120, 2
    1ec4:	52415400 	subpl	r5, r1, #0, 8
    1ec8:	5f544547 	svcpl	0x00544547
    1ecc:	5f555043 	svcpl	0x00555043
    1ed0:	656e6567 	strbvs	r6, [lr, #-1383]!	; 0xfffffa99
    1ed4:	76636972 			; <UNDEFINED> instruction: 0x76636972
    1ed8:	54006137 	strpl	r6, [r0], #-311	; 0xfffffec9
    1edc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    1ee0:	50435f54 	subpl	r5, r3, r4, asr pc
    1ee4:	6f635f55 	svcvs	0x00635f55
    1ee8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1eec:	00363761 	eorseq	r3, r6, r1, ror #14
    1ef0:	5f6d7261 	svcpl	0x006d7261
    1ef4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1ef8:	5f6f6e5f 	svcpl	0x006f6e5f
    1efc:	616c6f76 	smcvs	50934	; 0xc6f6
    1f00:	656c6974 	strbvs	r6, [ip, #-2420]!	; 0xfffff68c
    1f04:	0065635f 	rsbeq	r6, r5, pc, asr r3
    1f08:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    1f0c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    1f10:	41385f48 	teqmi	r8, r8, asr #30
    1f14:	61736900 	cmnvs	r3, r0, lsl #18
    1f18:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1f1c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    1f20:	00743576 	rsbseq	r3, r4, r6, ror r5
    1f24:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    1f28:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    1f2c:	52385f48 	eorspl	r5, r8, #72, 30	; 0x120
    1f30:	52415400 	subpl	r5, r1, #0, 8
    1f34:	5f544547 	svcpl	0x00544547
    1f38:	5f555043 	svcpl	0x00555043
    1f3c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    1f40:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    1f44:	726f6333 	rsbvc	r6, pc, #-872415232	; 0xcc000000
    1f48:	61786574 	cmnvs	r8, r4, ror r5
    1f4c:	41003533 	tstmi	r0, r3, lsr r5
    1f50:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    1f54:	72610056 	rsbvc	r0, r1, #86	; 0x56
    1f58:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    1f5c:	00346863 	eorseq	r6, r4, r3, ror #16
    1f60:	5f6d7261 	svcpl	0x006d7261
    1f64:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1f68:	72610036 	rsbvc	r0, r1, #54	; 0x36
    1f6c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    1f70:	00376863 	eorseq	r6, r7, r3, ror #16
    1f74:	5f6d7261 	svcpl	0x006d7261
    1f78:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1f7c:	72610038 	rsbvc	r0, r1, #56	; 0x38
    1f80:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    1f84:	785f656e 	ldmdavc	pc, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1f88:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1f8c:	616d0065 	cmnvs	sp, r5, rrx
    1f90:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
    1f94:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1f98:	745f7473 	ldrbvc	r7, [pc], #-1139	; 1fa0 <__core1_unwind_stub-0xffe060>
    1f9c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1fa0:	75687400 	strbvc	r7, [r8, #-1024]!	; 0xfffffc00
    1fa4:	635f626d 	cmpvs	pc, #-805306362	; 0xd0000006
    1fa8:	5f6c6c61 	svcpl	0x006c6c61
    1fac:	5f616976 	svcpl	0x00616976
    1fb0:	6562616c 	strbvs	r6, [r2, #-364]!	; 0xfffffe94
    1fb4:	7369006c 	cmnvc	r9, #108	; 0x6c
    1fb8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1fbc:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    1fc0:	6b36766d 	blvs	d9f97c <__core1_unwind_stub-0x260684>
    1fc4:	52415400 	subpl	r5, r1, #0, 8
    1fc8:	5f544547 	svcpl	0x00544547
    1fcc:	5f555043 	svcpl	0x00555043
    1fd0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    1fd4:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    1fd8:	52415400 	subpl	r5, r1, #0, 8
    1fdc:	5f544547 	svcpl	0x00544547
    1fe0:	5f555043 	svcpl	0x00555043
    1fe4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    1fe8:	38617865 	stmdacc	r1!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    1fec:	52415400 	subpl	r5, r1, #0, 8
    1ff0:	5f544547 	svcpl	0x00544547
    1ff4:	5f555043 	svcpl	0x00555043
    1ff8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    1ffc:	39617865 	stmdbcc	r1!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    2000:	4d524100 	ldfmie	f4, [r2, #-0]
    2004:	5343505f 	movtpl	r5, #12383	; 0x305f
    2008:	4350415f 	cmpmi	r0, #-1073741801	; 0xc0000017
    200c:	52410053 	subpl	r0, r1, #83	; 0x53
    2010:	43505f4d 	cmpmi	r0, #308	; 0x134
    2014:	54415f53 	strbpl	r5, [r1], #-3923	; 0xfffff0ad
    2018:	00534350 	subseq	r4, r3, r0, asr r3
    201c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    2020:	2078656c 	rsbscs	r6, r8, ip, ror #10
    2024:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
    2028:	5400656c 	strpl	r6, [r0], #-1388	; 0xfffffa94
    202c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    2030:	50435f54 	subpl	r5, r3, r4, asr pc
    2034:	6f635f55 	svcvs	0x00635f55
    2038:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    203c:	63333761 	teqvs	r3, #25427968	; 0x1840000
    2040:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    2044:	33356178 	teqcc	r5, #120, 2
    2048:	52415400 	subpl	r5, r1, #0, 8
    204c:	5f544547 	svcpl	0x00544547
    2050:	5f555043 	svcpl	0x00555043
    2054:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    2058:	306d7865 	rsbcc	r7, sp, r5, ror #16
    205c:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    2060:	6d726100 	ldfvse	f6, [r2, #-0]
    2064:	0063635f 	rsbeq	r6, r3, pc, asr r3
    2068:	5f617369 	svcpl	0x00617369
    206c:	5f746962 	svcpl	0x00746962
    2070:	61637378 	smcvs	14136	; 0x3738
    2074:	5f00656c 	svcpl	0x0000656c
    2078:	746e6f64 	strbtvc	r6, [lr], #-3940	; 0xfffff09c
    207c:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0xfffffaa1
    2080:	6572745f 	ldrbvs	r7, [r2, #-1119]!	; 0xfffffba1
    2084:	65685f65 	strbvs	r5, [r8, #-3941]!	; 0xfffff09b
    2088:	005f6572 	subseq	r6, pc, r2, ror r5	; <UNPREDICTABLE>
    208c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    2090:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    2094:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    2098:	30316d72 	eorscc	r6, r1, r2, ror sp
    209c:	696d6474 	stmdbvs	sp!, {r2, r4, r5, r6, sl, sp, lr}^
    20a0:	52415400 	subpl	r5, r1, #0, 8
    20a4:	5f544547 	svcpl	0x00544547
    20a8:	5f555043 	svcpl	0x00555043
    20ac:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    20b0:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    20b4:	73616200 	cmnvc	r1, #0, 4
    20b8:	72615f65 	rsbvc	r5, r1, #404	; 0x194
    20bc:	74696863 	strbtvc	r6, [r9], #-2147	; 0xfffff79d
    20c0:	75746365 	ldrbvc	r6, [r4, #-869]!	; 0xfffffc9b
    20c4:	61006572 	tstvs	r0, r2, ror r5
    20c8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    20cc:	5f686372 	svcpl	0x00686372
    20d0:	00637263 	rsbeq	r7, r3, r3, ror #4
    20d4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    20d8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    20dc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    20e0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    20e4:	73316d78 	teqvc	r1, #120, 26	; 0x1e00
    20e8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    20ec:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    20f0:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    20f4:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    20f8:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
    20fc:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
    2100:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
    2104:	31393130 	teqcc	r9, r0, lsr r1
    2108:	20353230 	eorscs	r3, r5, r0, lsr r2
    210c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
    2110:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    2114:	415b2029 	cmpmi	fp, r9, lsr #32
    2118:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
    211c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
    2120:	6172622d 	cmnvs	r2, sp, lsr #4
    2124:	2068636e 	rsbcs	r6, r8, lr, ror #6
    2128:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    212c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    2130:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
    2134:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
    2138:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    213c:	613d7570 	teqvs	sp, r0, ror r5
    2140:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    2144:	20696d64 	rsbcs	r6, r9, r4, ror #26
    2148:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    214c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    2150:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    2154:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    2158:	616d2d20 	cmnvs	sp, r0, lsr #26
    215c:	2d206d72 	stccs	13, cr6, [r0, #-456]!	; 0xfffffe38
    2160:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    2164:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    2168:	7434766d 	ldrtvc	r7, [r4], #-1645	; 0xfffff993
    216c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    2170:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    2174:	4f2d2067 	svcmi	0x002d2067
    2178:	4f2d2032 	svcmi	0x002d2032
    217c:	4f2d2032 	svcmi	0x002d2032
    2180:	662d2032 			; <UNDEFINED> instruction: 0x662d2032
    2184:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2188:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    218c:	62696c2d 	rsbvs	r6, r9, #11520	; 0x2d00
    2190:	20636367 	rsbcs	r6, r3, r7, ror #6
    2194:	6f6e662d 	svcvs	0x006e662d
    2198:	6174732d 	cmnvs	r4, sp, lsr #6
    219c:	702d6b63 	eorvc	r6, sp, r3, ror #22
    21a0:	65746f72 	ldrbvs	r6, [r4, #-3954]!	; 0xfffff08e
    21a4:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    21a8:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    21ac:	6e692d6f 	cdpvs	13, 6, cr2, cr9, cr15, {3}
    21b0:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    21b4:	65662d20 	strbvs	r2, [r6, #-3360]!	; 0xfffff2e0
    21b8:	70656378 	rsbvc	r6, r5, r8, ror r3
    21bc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    21c0:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    21c4:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    21c8:	696c6962 	stmdbvs	ip!, {r1, r5, r6, r8, fp, sp, lr}^
    21cc:	683d7974 	ldmdavs	sp!, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    21d0:	65646469 	strbvs	r6, [r4, #-1129]!	; 0xfffffb97
    21d4:	7261006e 	rsbvc	r0, r1, #110	; 0x6e
    21d8:	75635f6d 	strbvc	r5, [r3, #-3949]!	; 0xfffff093
    21dc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    21e0:	63635f74 	cmnvs	r3, #116, 30	; 0x1d0
    21e4:	61736900 	cmnvs	r3, r0, lsl #18
    21e8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    21ec:	6372635f 	cmnvs	r2, #2080374785	; 0x7c000001
    21f0:	41003233 	tstmi	r0, r3, lsr r2
    21f4:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    21f8:	7369004c 	cmnvc	r9, #76	; 0x4c
    21fc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    2200:	66765f74 	uhsub16vs	r5, r6, r4
    2204:	00337670 	eorseq	r7, r3, r0, ror r6
    2208:	5f617369 	svcpl	0x00617369
    220c:	5f746962 	svcpl	0x00746962
    2210:	76706676 			; <UNDEFINED> instruction: 0x76706676
    2214:	41420034 	cmpmi	r2, r4, lsr r0
    2218:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    221c:	5f484352 	svcpl	0x00484352
    2220:	00325436 	eorseq	r5, r2, r6, lsr r4
    2224:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    2228:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    222c:	4d385f48 	ldcmi	15, cr5, [r8, #-288]!	; 0xfffffee0
    2230:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    2234:	4154004e 	cmpmi	r4, lr, asr #32
    2238:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    223c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2240:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2244:	6d647439 	cfstrdvs	mvd7, [r4, #-228]!	; 0xffffff1c
    2248:	52410069 	subpl	r0, r1, #105	; 0x69
    224c:	4c415f4d 	mcrrmi	15, 4, r5, r1, cr13
    2250:	53414200 	movtpl	r4, #4608	; 0x1200
    2254:	52415f45 	subpl	r5, r1, #276	; 0x114
    2258:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    225c:	7261004d 	rsbvc	r0, r1, #77	; 0x4d
    2260:	61745f6d 	cmnvs	r4, sp, ror #30
    2264:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    2268:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
    226c:	61006c65 	tstvs	r0, r5, ror #24
    2270:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 2278 <__core1_unwind_stub-0xffdd88>
    2274:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    2278:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    227c:	54006e73 	strpl	r6, [r0], #-3699	; 0xfffff18d
    2280:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    2284:	50435f54 	subpl	r5, r3, r4, asr pc
    2288:	6f635f55 	svcvs	0x00635f55
    228c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    2290:	54003472 	strpl	r3, [r0], #-1138	; 0xfffffb8e
    2294:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    2298:	50435f54 	subpl	r5, r3, r4, asr pc
    229c:	6f635f55 	svcvs	0x00635f55
    22a0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    22a4:	54003572 	strpl	r3, [r0], #-1394	; 0xfffffa8e
    22a8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    22ac:	50435f54 	subpl	r5, r3, r4, asr pc
    22b0:	6f635f55 	svcvs	0x00635f55
    22b4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    22b8:	54003772 	strpl	r3, [r0], #-1906	; 0xfffff88e
    22bc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    22c0:	50435f54 	subpl	r5, r3, r4, asr pc
    22c4:	6f635f55 	svcvs	0x00635f55
    22c8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    22cc:	69003872 	stmdbvs	r0, {r1, r4, r5, r6, fp, ip, sp}
    22d0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    22d4:	6c5f7469 	cfldrdvs	mvd7, [pc], {105}	; 0x69
    22d8:	00656170 	rsbeq	r6, r5, r0, ror r1
    22dc:	5f617369 	svcpl	0x00617369
    22e0:	5f746962 	svcpl	0x00746962
    22e4:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    22e8:	72615f6b 	rsbvc	r5, r1, #428	; 0x1ac
    22ec:	6b36766d 	blvs	d9fca8 <__core1_unwind_stub-0x260358>
    22f0:	7369007a 	cmnvc	r9, #122	; 0x7a
    22f4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    22f8:	6f6e5f74 	svcvs	0x006e5f74
    22fc:	69006d74 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, fp, sp, lr}
    2300:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    2304:	615f7469 	cmpvs	pc, r9, ror #8
    2308:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    230c:	61736900 	cmnvs	r3, r0, lsl #18
    2310:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    2314:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2318:	69003676 	stmdbvs	r0, {r1, r2, r4, r5, r6, r9, sl, ip, sp}
    231c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    2320:	615f7469 	cmpvs	pc, r9, ror #8
    2324:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    2328:	61736900 	cmnvs	r3, r0, lsl #18
    232c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    2330:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    2334:	5f003876 	svcpl	0x00003876
    2338:	746e6f64 	strbtvc	r6, [lr], #-3940	; 0xfffff09c
    233c:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0xfffffaa1
    2340:	7874725f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}^
    2344:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    2348:	55005f65 	strpl	r5, [r0, #-3941]	; 0xfffff09b
    234c:	79744951 	ldmdbvc	r4!, {r0, r4, r6, r8, fp, lr}^
    2350:	69006570 	stmdbvs	r0, {r4, r5, r6, r8, sl, sp, lr}
    2354:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    2358:	615f7469 	cmpvs	pc, r9, ror #8
    235c:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    2360:	61006574 	tstvs	r0, r4, ror r5
    2364:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 236c <__core1_unwind_stub-0xffdc94>
    2368:	00656e75 	rsbeq	r6, r5, r5, ror lr
    236c:	5f6d7261 	svcpl	0x006d7261
    2370:	5f707063 	svcpl	0x00707063
    2374:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    2378:	726f7772 	rsbvc	r7, pc, #29884416	; 0x1c80000
    237c:	4154006b 	cmpmi	r4, fp, rrx
    2380:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    2384:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2388:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    238c:	74303239 	ldrtvc	r3, [r0], #-569	; 0xfffffdc7
    2390:	61746800 	cmnvs	r4, r0, lsl #16
    2394:	71655f62 	cmnvc	r5, r2, ror #30
    2398:	52415400 	subpl	r5, r1, #0, 8
    239c:	5f544547 	svcpl	0x00544547
    23a0:	5f555043 	svcpl	0x00555043
    23a4:	32356166 	eorscc	r6, r5, #-2147483623	; 0x80000019
    23a8:	72610036 	rsbvc	r0, r1, #54	; 0x36
    23ac:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    23b0:	745f6863 	ldrbvc	r6, [pc], #-2147	; 23b8 <__core1_unwind_stub-0xffdc48>
    23b4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    23b8:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    23bc:	68007669 	stmdavs	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
    23c0:	5f626174 	svcpl	0x00626174
    23c4:	705f7165 	subsvc	r7, pc, r5, ror #2
    23c8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    23cc:	61007265 	tstvs	r0, r5, ror #4
    23d0:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    23d4:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    23d8:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    23dc:	00726574 	rsbseq	r6, r2, r4, ror r5
    23e0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    23e4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    23e8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    23ec:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    23f0:	73306d78 	teqvc	r0, #120, 26	; 0x1e00
    23f4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    23f8:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    23fc:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    2400:	52415400 	subpl	r5, r1, #0, 8
    2404:	5f544547 	svcpl	0x00544547
    2408:	5f555043 	svcpl	0x00555043
    240c:	6f63706d 	svcvs	0x0063706d
    2410:	6f6e6572 	svcvs	0x006e6572
    2414:	00706676 	rsbseq	r6, r0, r6, ror r6
    2418:	5f617369 	svcpl	0x00617369
    241c:	5f746962 	svcpl	0x00746962
    2420:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    2424:	6d635f6b 	stclvs	15, cr5, [r3, #-428]!	; 0xfffffe54
    2428:	646c5f33 	strbtvs	r5, [ip], #-3891	; 0xfffff0cd
    242c:	41006472 	tstmi	r0, r2, ror r4
    2430:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    2434:	72610043 	rsbvc	r0, r1, #67	; 0x43
    2438:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    243c:	5f386863 	svcpl	0x00386863
    2440:	72610032 	rsbvc	r0, r1, #50	; 0x32
    2444:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    2448:	5f386863 	svcpl	0x00386863
    244c:	72610033 	rsbvc	r0, r1, #51	; 0x33
    2450:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    2454:	5f386863 	svcpl	0x00386863
    2458:	41540034 	cmpmi	r4, r4, lsr r0
    245c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    2460:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2464:	706d665f 	rsbvc	r6, sp, pc, asr r6
    2468:	00363236 	eorseq	r3, r6, r6, lsr r2
    246c:	5f4d5241 	svcpl	0x004d5241
    2470:	61005343 	tstvs	r0, r3, asr #6
    2474:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    2478:	5f363170 	svcpl	0x00363170
    247c:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xfffff197
    2480:	6d726100 	ldfvse	f6, [r2, #-0]
    2484:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    2488:	72615f65 	rsbvc	r5, r1, #404	; 0x194
    248c:	54006863 	strpl	r6, [r0], #-2147	; 0xfffff79d
    2490:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    2494:	50435f54 	subpl	r5, r3, r4, asr pc
    2498:	6f635f55 	svcvs	0x00635f55
    249c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    24a0:	63353161 	teqvs	r5, #1073741848	; 0x40000018
    24a4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    24a8:	00376178 	eorseq	r6, r7, r8, ror r1
    24ac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    24b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    24b4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    24b8:	2f636367 	svccs	0x00636367
    24bc:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    24c0:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    24c4:	72610063 	rsbvc	r0, r1, #99	; 0x63
    24c8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    24cc:	65376863 	ldrvs	r6, [r7, #-2147]!	; 0xfffff79d
    24d0:	4154006d 	cmpmi	r4, sp, rrx
    24d4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    24d8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    24dc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    24e0:	61786574 	cmnvs	r8, r4, ror r5
    24e4:	61003237 	tstvs	r0, r7, lsr r2
    24e8:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    24ec:	645f7363 	ldrbvs	r7, [pc], #-867	; 24f4 <__core1_unwind_stub-0xffdb0c>
    24f0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    24f4:	4100746c 	tstmi	r0, ip, ror #8
    24f8:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    24fc:	415f5343 	cmpmi	pc, r3, asr #6
    2500:	53435041 	movtpl	r5, #12353	; 0x3041
    2504:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    2508:	54004c41 	strpl	r4, [r0], #-3137	; 0xfffff3bf
    250c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    2510:	50435f54 	subpl	r5, r3, r4, asr pc
    2514:	6f635f55 	svcvs	0x00635f55
    2518:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    251c:	00353761 	eorseq	r3, r5, r1, ror #14
    2520:	47524154 			; <UNDEFINED> instruction: 0x47524154
    2524:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    2528:	735f5550 	cmpvc	pc, #80, 10	; 0x14000000
    252c:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    2530:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    2534:	6d726100 	ldfvse	f6, [r2, #-0]
    2538:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    253c:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2540:	31626d75 	smccc	9941	; 0x26d5
    2544:	6d726100 	ldfvse	f6, [r2, #-0]
    2548:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    254c:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2550:	32626d75 	rsbcc	r6, r2, #7488	; 0x1d40
    2554:	52415400 	subpl	r5, r1, #0, 8
    2558:	5f544547 	svcpl	0x00544547
    255c:	5f555043 	svcpl	0x00555043
    2560:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    2564:	61007478 	tstvs	r0, r8, ror r4
    2568:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    256c:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    2570:	73690074 	cmnvc	r9, #116	; 0x74
    2574:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    2578:	706d5f74 	rsbvc	r5, sp, r4, ror pc
    257c:	6d726100 	ldfvse	f6, [r2, #-0]
    2580:	5f646c5f 	svcpl	0x00646c5f
    2584:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    2588:	72610064 	rsbvc	r0, r1, #100	; 0x64
    258c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    2590:	5f386863 	svcpl	0x00386863
    2594:	2e2e0031 	mcrcs	0, 1, r0, cr14, cr1, {1}
    2598:	2f2e2e2f 	svccs	0x002e2e2f
    259c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 24ec <__core1_unwind_stub-0xffdb14>
    25a0:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    25a4:	6f632f63 	svcvs	0x00632f63
    25a8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25ac:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    25b0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    25b4:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
    25b8:	532e7363 			; <UNDEFINED> instruction: 0x532e7363
	...

Disassembly of section .comment:

00000000 <.comment>:
{
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0xbcd24>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
    uint8_t *d = (uint8_t *)dst;
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
    const uint8_t *s = (const uint8_t *)src;
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
    if (d == s || n == 0) return dst;
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  40:	6172622d 	cmnvs	r2, sp, lsr #4
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    if (d < s) {
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
{
   0:	00003441 	andeq	r3, r0, r1, asr #8
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000002a 	andeq	r0, r0, sl, lsr #32
  10:	412d3705 			; <UNDEFINED> instruction: 0x412d3705
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
    uint8_t *d = (uint8_t *)dst;
  18:	09010841 	stmdbeq	r1, {r0, r6, fp}
  1c:	0c030a02 			; <UNDEFINED> instruction: 0x0c030a02
    const uint8_t *s = (const uint8_t *)src;
  20:	14041201 	strne	r1, [r4], #-513	; 0xfffffdff
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
    if (d == s || n == 0) return dst;
  28:	1a011803 	bne	4603c <__core1_unwind_stub-0xfb9fc4>
  2c:	22061e01 	andcs	r1, r6, #1, 28
  30:	44012a01 	strmi	r2, [r1], #-2561	; 0xfffff5ff
  34:	Address 0x0000000000000034 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
{
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000030 	andeq	r0, r0, r0, lsr r0
  14:	00000000 	andeq	r0, r0, r0
    uint8_t *d = (uint8_t *)dst;
  18:	01000004 	tsteq	r0, r4
  1c:	00000024 	andeq	r0, r0, r4, lsr #32
    const uint8_t *s = (const uint8_t *)src;
  20:	80100e42 	andshi	r0, r0, r2, asr #28
  24:	82038104 	andhi	r8, r3, #4, 2
    if (d == s || n == 0) return dst;
  28:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
  2c:	058b140e 	streq	r1, [fp, #1038]	; 0x40e
  30:	460b0d42 	strmi	r0, [fp], -r2, asr #26
  34:	cb420d0d 	blgt	1083470 <__bss_end__+0x6f470>
  38:	c342100e 	movtgt	r1, #8206	; 0x200e
  3c:	0ec0c1c2 	acseqdm	f4, f2
  40:	00000000 	andeq	r0, r0, r0
  44:	0000001c 	andeq	r0, r0, ip, lsl r0
  48:	00000000 	andeq	r0, r0, r0
    if (d < s) {
  4c:	01000028 	tsteq	r0, r8, lsr #32
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	8b040e42 	blhi	103964 <__core1_unwind_stub-0xefc69c>
  58:	0b0d4201 	bleq	350864 <__core1_unwind_stub-0xcaf79c>
        for (size_t i = 0; i < n; ++i) d[i] = s[i];
  5c:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
  60:	00000ecb 	andeq	r0, r0, fp, asr #29
  64:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	8b040e42 	blhi	103984 <__core1_unwind_stub-0xefc67c>
  78:	0b0d4201 	bleq	350884 <__core1_unwind_stub-0xcaf77c>
  7c:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
  80:	00000ecb 	andeq	r0, r0, fp, asr #29
  84:	0000001c 	andeq	r0, r0, ip, lsl r0
  88:	00000000 	andeq	r0, r0, r0
  8c:	01000044 	tsteq	r0, r4, asr #32
  90:	0000008c 	andeq	r0, r0, ip, lsl #1
  94:	8b080e42 	blhi	2039a4 <__core1_unwind_stub-0xdfc65c>
  98:	42018e02 	andmi	r8, r1, #2, 28
  9c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  a0:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
  a4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  b0:	00000150 	andeq	r0, r0, r0, asr r1
  b4:	8b040e42 	blhi	1039c4 <__core1_unwind_stub-0xefc63c>
  b8:	0b0d4201 	bleq	3508c4 <__core1_unwind_stub-0xcaf73c>
  bc:	0d0da002 	stceq	0, cr10, [sp, #-8]
  c0:	000ecb42 	andeq	ip, lr, r2, asr #22
  c4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  d0:	00000168 	andeq	r0, r0, r8, ror #2
  d4:	8b040e42 	blhi	1039e4 <__core1_unwind_stub-0xefc61c>
  d8:	0b0d4201 	bleq	3508e4 <__core1_unwind_stub-0xcaf71c>
  dc:	0d0dac02 	stceq	12, cr10, [sp, #-8]
  e0:	000ecb42 	andeq	ip, lr, r2, asr #22
  e4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
  f0:	00000068 	andeq	r0, r0, r8, rrx
    return dst;
  f4:	8b080e42 	blhi	203a04 <__core1_unwind_stub-0xdfc5fc>
}
  f8:	42018e02 	andmi	r8, r1, #2, 28
  fc:	6e040b0c 	vmlavs.f64	d0, d4, d12
 100:	00080d0c 	andeq	r0, r8, ip, lsl #26
 104:	0000001c 	andeq	r0, r0, ip, lsl r0
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
 108:	00000000 	andeq	r0, r0, r0
 10c:	010000d0 	ldrdeq	r0, [r0, -r0]
 110:	00000050 	andeq	r0, r0, r0, asr r0
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
 114:	8b080e42 	blhi	203a24 <__core1_unwind_stub-0xdfc5dc>
 118:	42018e02 	andmi	r8, r1, #2, 28
 11c:	62040b0c 	andvs	r0, r4, #12, 22	; 0x3000
 120:	00080d0c 	andeq	r0, r8, ip, lsl #26
 124:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 130:	00000074 	andeq	r0, r0, r4, ror r0
 134:	8b040e42 	blhi	103a44 <__core1_unwind_stub-0xefc5bc>
 138:	0b0d4201 	bleq	350944 <__core1_unwind_stub-0xcaf6bc>
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
 140:	00000ecb 	andeq	r0, r0, fp, asr #29
 144:	0000001c 	andeq	r0, r0, ip, lsl r0
 148:	00000000 	andeq	r0, r0, r0
 14c:	01000120 	tsteq	r0, r0, lsr #2
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 150:	000000e0 	andeq	r0, r0, r0, ror #1
 154:	8b040e42 	blhi	103a64 <__core1_unwind_stub-0xefc59c>
 158:	0b0d4201 	bleq	350964 <__core1_unwind_stub-0xcaf69c>
 15c:	0d0d6802 	stceq	8, cr6, [sp, #-8]
 160:	000ecb42 	andeq	ip, lr, r2, asr #22
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 170:	00000038 	andeq	r0, r0, r8, lsr r0
 174:	8b040e42 	blhi	103a84 <__core1_unwind_stub-0xefc57c>
    return ALT_E_SUCCESS;
 178:	0b0d4201 	bleq	350984 <__core1_unwind_stub-0xcaf67c>
}
 17c:	420d0d54 	andmi	r0, sp, #84, 26	; 0x1500
 180:	00000ecb 	andeq	r0, r0, fp, asr #29
 184:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
            break;
 190:	0000007c 	andeq	r0, r0, ip, ror r0
    *segpa   = thissegpa;
 194:	8b040e42 	blhi	103aa4 <__core1_unwind_stub-0xefc55c>
 198:	0b0d4201 	bleq	3509a4 <__core1_unwind_stub-0xcaf65c>
 19c:	420d0d76 	andmi	r0, sp, #7552	; 0x1d80
    *segsize = thissegsize;
 1a0:	00000ecb 	andeq	r0, r0, fp, asr #29
 1a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a8:	00000000 	andeq	r0, r0, r0
    return ALT_E_SUCCESS;
 1ac:	01000200 	mrseq	r0, R8_usr
}
 1b0:	000000b4 	strheq	r0, [r0], -r4
 1b4:	8b040e42 	blhi	103ac4 <__core1_unwind_stub-0xefc53c>
 1b8:	0b0d4201 	bleq	3509c4 <__core1_unwind_stub-0xcaf63c>
 1bc:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
 1c0:	000ecb42 	andeq	ip, lr, r2, asr #22
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	010002b4 			; <UNDEFINED> instruction: 0x010002b4
 1d0:	000000e0 	andeq	r0, r0, r0, ror #1
 1d4:	8b040e42 	blhi	103ae4 <__core1_unwind_stub-0xefc51c>
 1d8:	0b0d4201 	bleq	3509e4 <__core1_unwind_stub-0xcaf61c>
 1dc:	0d0d6802 	stceq	8, cr6, [sp, #-8]
 1e0:	000ecb42 	andeq	ip, lr, r2, asr #22
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 1f0:	00000078 	andeq	r0, r0, r8, ror r0
 1f4:	8b040e42 	blhi	103b04 <__core1_unwind_stub-0xefc4fc>
 1f8:	0b0d4201 	bleq	350a04 <__core1_unwind_stub-0xcaf5fc>
 1fc:	420d0d74 	andmi	r0, sp, #116, 26	; 0x1d00
 200:	00000ecb 	andeq	r0, r0, fp, asr #29
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	00000000 	andeq	r0, r0, r0
 20c:	01000394 			; <UNDEFINED> instruction: 0x01000394
 210:	00000034 	andeq	r0, r0, r4, lsr r0
 214:	8b040e42 	blhi	103b24 <__core1_unwind_stub-0xefc4dc>
 218:	0b0d4201 	bleq	350a24 <__core1_unwind_stub-0xcaf5dc>
 21c:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
 220:	00000ecb 	andeq	r0, r0, fp, asr #29
 224:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 230:	00000034 	andeq	r0, r0, r4, lsr r0
 234:	8b040e42 	blhi	103b44 <__core1_unwind_stub-0xefc4bc>
 238:	0b0d4201 	bleq	350a44 <__core1_unwind_stub-0xcaf5bc>
 23c:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
 240:	00000ecb 	andeq	r0, r0, fp, asr #29
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	010003c8 	smlabteq	r0, r8, r3, r0
 250:	00000068 	andeq	r0, r0, r8, rrx
 254:	8b040e42 	blhi	103b64 <__core1_unwind_stub-0xefc49c>
 258:	0b0d4201 	bleq	350a64 <__core1_unwind_stub-0xcaf59c>
 25c:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
 260:	00000ecb 	andeq	r0, r0, fp, asr #29
 264:	00000020 	andeq	r0, r0, r0, lsr #32
 268:	00000000 	andeq	r0, r0, r0
 26c:	01000430 	tsteq	r0, r0, lsr r4
 270:	00000328 	andeq	r0, r0, r8, lsr #6
 274:	8b080e42 	blhi	203b84 <__core1_unwind_stub-0xdfc47c>
 278:	42018e02 	andmi	r8, r1, #2, 28
 27c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
 280:	0d0c018e 	stfeqs	f0, [ip, #-568]	; 0xfffffdc8
 284:	00000008 	andeq	r0, r0, r8
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	00000000 	andeq	r0, r0, r0
 290:	01000758 	tsteq	r0, r8, asr r7
 294:	00000068 	andeq	r0, r0, r8, rrx
 298:	8b080e42 	blhi	203ba8 <__core1_unwind_stub-0xdfc458>
 29c:	42018e02 	andmi	r8, r1, #2, 28
 2a0:	6e040b0c 	vmlavs.f64	d0, d4, d12
 2a4:	00080d0c 	andeq	r0, r8, ip, lsl #26
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	00000000 	andeq	r0, r0, r0
 2b0:	010007c0 	smlabteq	r0, r0, r7, r0
 2b4:	00000060 	andeq	r0, r0, r0, rrx
 2b8:	8b040e42 	blhi	103bc8 <__core1_unwind_stub-0xefc438>
 2bc:	0b0d4201 	bleq	350ac8 <__core1_unwind_stub-0xcaf538>
 2c0:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
 2c4:	00000ecb 	andeq	r0, r0, fp, asr #29
 2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	01000820 	tsteq	r0, r0, lsr #16
 2d4:	00000124 	andeq	r0, r0, r4, lsr #2
 2d8:	8b040e42 	blhi	103be8 <__core1_unwind_stub-0xefc418>
 2dc:	0b0d4201 	bleq	350ae8 <__core1_unwind_stub-0xcaf518>
 2e0:	0d0d8a02 	vstreq	s16, [sp, #-8]
 2e4:	000ecb42 	andeq	ip, lr, r2, asr #22
 2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ec:	00000000 	andeq	r0, r0, r0
 2f0:	01000944 	tsteq	r0, r4, asr #18
 2f4:	00000124 	andeq	r0, r0, r4, lsr #2
 2f8:	8b040e42 	blhi	103c08 <__core1_unwind_stub-0xefc3f8>
 2fc:	0b0d4201 	bleq	350b08 <__core1_unwind_stub-0xcaf4f8>
 300:	0d0d8a02 	vstreq	s16, [sp, #-8]
 304:	000ecb42 	andeq	ip, lr, r2, asr #22
 308:	0000001c 	andeq	r0, r0, ip, lsl r0
 30c:	00000000 	andeq	r0, r0, r0
 310:	01000a68 	tsteq	r0, r8, ror #20
 314:	0000010c 	andeq	r0, r0, ip, lsl #2
 318:	8b040e42 	blhi	103c28 <__core1_unwind_stub-0xefc3d8>
 31c:	0b0d4201 	bleq	350b28 <__core1_unwind_stub-0xcaf4d8>
 320:	0d0d7e02 	stceq	14, cr7, [sp, #-8]
 324:	000ecb42 	andeq	ip, lr, r2, asr #22
 328:	0000001c 	andeq	r0, r0, ip, lsl r0
 32c:	00000000 	andeq	r0, r0, r0
 330:	01000b74 	tsteq	r0, r4, ror fp
 334:	00000110 	andeq	r0, r0, r0, lsl r1
 338:	8b040e42 	blhi	103c48 <__core1_unwind_stub-0xefc3b8>
 33c:	0b0d4201 	bleq	350b48 <__core1_unwind_stub-0xcaf4b8>
 340:	0d0d8002 	stceq	0, cr8, [sp, #-8]
 344:	000ecb42 	andeq	ip, lr, r2, asr #22
 348:	0000001c 	andeq	r0, r0, ip, lsl r0
 34c:	00000000 	andeq	r0, r0, r0
 350:	01000c84 	smlabbeq	r0, r4, ip, r0
 354:	00000048 	andeq	r0, r0, r8, asr #32
 358:	8b080e42 	blhi	203c68 <__core1_unwind_stub-0xdfc398>
 35c:	42018e02 	andmi	r8, r1, #2, 28
 360:	5e040b0c 	vmlapl.f64	d0, d4, d12
 364:	00080d0c 	andeq	r0, r8, ip, lsl #26
 368:	00000020 	andeq	r0, r0, r0, lsr #32
 36c:	00000000 	andeq	r0, r0, r0
 370:	01000ccc 	smlabteq	r0, ip, ip, r0
 374:	00000dd8 	ldrdeq	r0, [r0], -r8
 378:	8b080e42 	blhi	203c88 <__core1_unwind_stub-0xdfc378>
 37c:	42018e02 	andmi	r8, r1, #2, 28
 380:	03040b0c 	movweq	r0, #19212	; 0x4b0c
 384:	0d0c06e6 	stceq	6, cr0, [ip, #-920]	; 0xfffffc68
 388:	00000008 	andeq	r0, r0, r8
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	01001aa4 	smlatbeq	r0, r4, sl, r1
 398:	0000013c 	andeq	r0, r0, ip, lsr r1
 39c:	8b080e42 	blhi	203cac <__core1_unwind_stub-0xdfc354>
 3a0:	42018e02 	andmi	r8, r1, #2, 28
 3a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 3a8:	080d0c98 	stmdaeq	sp, {r3, r4, r7, sl, fp}
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 3b8:	00000184 	andeq	r0, r0, r4, lsl #3
 3bc:	8b080e42 	blhi	203ccc <__core1_unwind_stub-0xdfc334>
 3c0:	42018e02 	andmi	r8, r1, #2, 28
 3c4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 3c8:	080d0cbc 	stmdaeq	sp, {r2, r3, r4, r5, r7, sl, fp}
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 3d8:	000000e0 	andeq	r0, r0, r0, ror #1
 3dc:	8b080e42 	blhi	203cec <__core1_unwind_stub-0xdfc314>
 3e0:	42018e02 	andmi	r8, r1, #2, 28
 3e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 3e8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 3f8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 3fc:	8b080e42 	blhi	203d0c <__core1_unwind_stub-0xdfc2f4>
 400:	42018e02 	andmi	r8, r1, #2, 28
 404:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 408:	080d0cd8 	stmdaeq	sp, {r3, r4, r6, r7, sl, fp}
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 418:	00000044 	andeq	r0, r0, r4, asr #32
 41c:	8b080e42 	blhi	203d2c <__core1_unwind_stub-0xdfc2d4>
 420:	42018e02 	andmi	r8, r1, #2, 28
 424:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
 428:	00080d0c 	andeq	r0, r8, ip, lsl #26
 42c:	0000000c 	andeq	r0, r0, ip
 430:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 434:	7c020001 	stcvc	0, cr0, [r2], {1}
 438:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	0000042c 	andeq	r0, r0, ip, lsr #8
 444:	01001be0 	smlatteq	r0, r0, fp, r1
 448:	0000005c 	andeq	r0, r0, ip, asr r0
 44c:	8b040e42 	blhi	103d5c <__core1_unwind_stub-0xefc2a4>
 450:	0b0d4201 	bleq	350c5c <__core1_unwind_stub-0xcaf3a4>
 454:	420d0d66 	andmi	r0, sp, #6528	; 0x1980
 458:	00000ecb 	andeq	r0, r0, fp, asr #29
 45c:	0000001c 	andeq	r0, r0, ip, lsl r0
 460:	0000042c 	andeq	r0, r0, ip, lsr #8
 464:	01001c3c 	tsteq	r0, ip, lsr ip
 468:	0000002c 	andeq	r0, r0, ip, lsr #32
 46c:	8b040e42 	blhi	103d7c <__core1_unwind_stub-0xefc284>
 470:	0b0d4201 	bleq	350c7c <__core1_unwind_stub-0xcaf384>
 474:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
 478:	00000ecb 	andeq	r0, r0, fp, asr #29
 47c:	00000018 	andeq	r0, r0, r8, lsl r0
 480:	0000042c 	andeq	r0, r0, ip, lsr #8
 484:	01001c68 	tsteq	r0, r8, ror #24
 488:	000000a0 	andeq	r0, r0, r0, lsr #1
 48c:	8b080e42 	blhi	203d9c <__core1_unwind_stub-0xdfc264>
 490:	42018e02 	andmi	r8, r1, #2, 28
 494:	00040b0c 	andeq	r0, r4, ip, lsl #22
 498:	0000000c 	andeq	r0, r0, ip
 49c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4a8:	00000018 	andeq	r0, r0, r8, lsl r0
 4ac:	00000498 	muleq	r0, r8, r4
 4b0:	01001d08 	tsteq	r0, r8, lsl #26
 4b4:	00000050 	andeq	r0, r0, r0, asr r0
 4b8:	8b080e42 	blhi	203dc8 <__core1_unwind_stub-0xdfc238>
 4bc:	42018e02 	andmi	r8, r1, #2, 28
 4c0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 4c4:	0000000c 	andeq	r0, r0, ip
 4c8:	00000498 	muleq	r0, r8, r4
 4cc:	01001d58 	tsteq	r0, r8, asr sp
 4d0:	0000000c 	andeq	r0, r0, ip
 4d4:	0000000c 	andeq	r0, r0, ip
 4d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 4e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e8:	000004d4 	ldrdeq	r0, [r0], -r4
 4ec:	01001d68 	tsteq	r0, r8, ror #26
 4f0:	00000074 	andeq	r0, r0, r4, ror r0
 4f4:	8b040e42 	blhi	103e04 <__core1_unwind_stub-0xefc1fc>
 4f8:	0b0d4201 	bleq	350d04 <__core1_unwind_stub-0xcaf2fc>
 4fc:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
 500:	00000ecb 	andeq	r0, r0, fp, asr #29
 504:	0000001c 	andeq	r0, r0, ip, lsl r0
 508:	000004d4 	ldrdeq	r0, [r0], -r4
 50c:	01001ddc 	ldrdeq	r1, [r0, -ip]
 510:	00000084 	andeq	r0, r0, r4, lsl #1
 514:	8b040e42 	blhi	103e24 <__core1_unwind_stub-0xefc1dc>
 518:	0b0d4201 	bleq	350d24 <__core1_unwind_stub-0xcaf2dc>
 51c:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
 520:	00000ecb 	andeq	r0, r0, fp, asr #29
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	000004d4 	ldrdeq	r0, [r0], -r4
 52c:	00000000 	andeq	r0, r0, r0
 530:	00000108 	andeq	r0, r0, r8, lsl #2
 534:	8b040e42 	blhi	103e44 <__core1_unwind_stub-0xefc1bc>
 538:	0b0d4201 	bleq	350d44 <__core1_unwind_stub-0xcaf2bc>
 53c:	0d0d7c02 	stceq	12, cr7, [sp, #-8]
 540:	000ecb42 	andeq	ip, lr, r2, asr #22
 544:	0000000c 	andeq	r0, r0, ip
 548:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 54c:	7c020001 	stcvc	0, cr0, [r2], {1}
 550:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 554:	0000001c 	andeq	r0, r0, ip, lsl r0
 558:	00000544 	andeq	r0, r0, r4, asr #10
 55c:	01001e60 	tsteq	r0, r0, ror #28
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	8b040e42 	blhi	103e74 <__core1_unwind_stub-0xefc18c>
 568:	0b0d4201 	bleq	350d74 <__core1_unwind_stub-0xcaf28c>
 56c:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
 570:	00000ecb 	andeq	r0, r0, fp, asr #29
 574:	0000001c 	andeq	r0, r0, ip, lsl r0
 578:	00000544 	andeq	r0, r0, r4, asr #10
 57c:	01001e7c 	tsteq	r0, ip, ror lr
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	8b040e42 	blhi	103e94 <__core1_unwind_stub-0xefc16c>
 588:	0b0d4201 	bleq	350d94 <__core1_unwind_stub-0xcaf26c>
 58c:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
 590:	00000ecb 	andeq	r0, r0, fp, asr #29
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	00000544 	andeq	r0, r0, r4, asr #10
 59c:	01001e98 			; <UNDEFINED> instruction: 0x01001e98
 5a0:	00000054 	andeq	r0, r0, r4, asr r0
 5a4:	8b040e42 	blhi	103eb4 <__core1_unwind_stub-0xefc14c>
 5a8:	0b0d4201 	bleq	350db4 <__core1_unwind_stub-0xcaf24c>
 5ac:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
 5b0:	00000ecb 	andeq	r0, r0, fp, asr #29
 5b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b8:	00000544 	andeq	r0, r0, r4, asr #10
 5bc:	01001eec 	smlatteq	r0, ip, lr, r1
 5c0:	00000064 	andeq	r0, r0, r4, rrx
 5c4:	8b080e42 	blhi	203ed4 <__core1_unwind_stub-0xdfc12c>
 5c8:	42018e02 	andmi	r8, r1, #2, 28
 5cc:	6c040b0c 			; <UNDEFINED> instruction: 0x6c040b0c
 5d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 5d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d8:	00000544 	andeq	r0, r0, r4, asr #10
 5dc:	01001f50 	tsteq	r0, r0, asr pc
 5e0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5e4:	8b040e42 	blhi	103ef4 <__core1_unwind_stub-0xefc10c>
 5e8:	0b0d4201 	bleq	350df4 <__core1_unwind_stub-0xcaf20c>
 5ec:	0d0d6002 	stceq	0, cr6, [sp, #-8]
 5f0:	000ecb42 	andeq	ip, lr, r2, asr #22
 5f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f8:	00000544 	andeq	r0, r0, r4, asr #10
 5fc:	01002020 	tsteq	r0, r0, lsr #32
 600:	00000118 	andeq	r0, r0, r8, lsl r1
 604:	8b080e42 	blhi	203f14 <__core1_unwind_stub-0xdfc0ec>
 608:	42018e02 	andmi	r8, r1, #2, 28
 60c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 610:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
 614:	0000001c 	andeq	r0, r0, ip, lsl r0
 618:	00000544 	andeq	r0, r0, r4, asr #10
 61c:	00000000 	andeq	r0, r0, r0
 620:	0000005c 	andeq	r0, r0, ip, asr r0
 624:	8b040e42 	blhi	103f34 <__core1_unwind_stub-0xefc0cc>
 628:	0b0d4201 	bleq	350e34 <__core1_unwind_stub-0xcaf1cc>
 62c:	420d0d66 	andmi	r0, sp, #6528	; 0x1980
 630:	00000ecb 	andeq	r0, r0, fp, asr #29
 634:	0000001c 	andeq	r0, r0, ip, lsl r0
 638:	00000544 	andeq	r0, r0, r4, asr #10
 63c:	01002138 	tsteq	r0, r8, lsr r1
 640:	0000003c 	andeq	r0, r0, ip, lsr r0
 644:	8b080e42 	blhi	203f54 <__core1_unwind_stub-0xdfc0ac>
 648:	42018e02 	andmi	r8, r1, #2, 28
 64c:	58040b0c 	stmdapl	r4, {r2, r3, r8, r9, fp}
 650:	00080d0c 	andeq	r0, r8, ip, lsl #26
 654:	0000001c 	andeq	r0, r0, ip, lsl r0
 658:	00000544 	andeq	r0, r0, r4, asr #10
 65c:	00000000 	andeq	r0, r0, r0
 660:	00000030 	andeq	r0, r0, r0, lsr r0
 664:	8b080e42 	blhi	203f74 <__core1_unwind_stub-0xdfc08c>
 668:	42018e02 	andmi	r8, r1, #2, 28
 66c:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
 670:	00080d0c 	andeq	r0, r8, ip, lsl #26
 674:	0000001c 	andeq	r0, r0, ip, lsl r0
 678:	00000544 	andeq	r0, r0, r4, asr #10
 67c:	00000000 	andeq	r0, r0, r0
 680:	000000dc 	ldrdeq	r0, [r0], -ip
 684:	8b080e42 	blhi	203f94 <__core1_unwind_stub-0xdfc06c>
 688:	42018e02 	andmi	r8, r1, #2, 28
 68c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 690:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
 694:	0000001c 	andeq	r0, r0, ip, lsl r0
 698:	00000544 	andeq	r0, r0, r4, asr #10
 69c:	00000000 	andeq	r0, r0, r0
 6a0:	00000090 	muleq	r0, r0, r0
 6a4:	8b080e42 	blhi	203fb4 <__core1_unwind_stub-0xdfc04c>
 6a8:	42018e02 	andmi	r8, r1, #2, 28
 6ac:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 6b0:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 6b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b8:	00000544 	andeq	r0, r0, r4, asr #10
 6bc:	00000000 	andeq	r0, r0, r0
 6c0:	00000084 	andeq	r0, r0, r4, lsl #1
 6c4:	8b080e42 	blhi	203fd4 <__core1_unwind_stub-0xdfc02c>
 6c8:	42018e02 	andmi	r8, r1, #2, 28
 6cc:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
 6d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 6d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d8:	00000544 	andeq	r0, r0, r4, asr #10
 6dc:	00000000 	andeq	r0, r0, r0
 6e0:	00000028 	andeq	r0, r0, r8, lsr #32
 6e4:	8b040e42 	blhi	103ff4 <__core1_unwind_stub-0xefc00c>
 6e8:	0b0d4201 	bleq	350ef4 <__core1_unwind_stub-0xcaf10c>
 6ec:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
 6f0:	00000ecb 	andeq	r0, r0, fp, asr #29
 6f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f8:	00000544 	andeq	r0, r0, r4, asr #10
 6fc:	00000000 	andeq	r0, r0, r0
 700:	000000ec 	andeq	r0, r0, ip, ror #1
 704:	8b080e42 	blhi	204014 <__core1_unwind_stub-0xdfbfec>
 708:	42018e02 	andmi	r8, r1, #2, 28
 70c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 710:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 714:	0000001c 	andeq	r0, r0, ip, lsl r0
 718:	00000544 	andeq	r0, r0, r4, asr #10
 71c:	00000000 	andeq	r0, r0, r0
 720:	0000006c 	andeq	r0, r0, ip, rrx
 724:	8b080e42 	blhi	204034 <__core1_unwind_stub-0xdfbfcc>
 728:	42018e02 	andmi	r8, r1, #2, 28
 72c:	70040b0c 	andvc	r0, r4, ip, lsl #22
 730:	00080d0c 	andeq	r0, r8, ip, lsl #26
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	00000544 	andeq	r0, r0, r4, asr #10
 73c:	00000000 	andeq	r0, r0, r0
 740:	00000044 	andeq	r0, r0, r4, asr #32
 744:	8b040e42 	blhi	104054 <__core1_unwind_stub-0xefbfac>
 748:	0b0d4201 	bleq	350f54 <__core1_unwind_stub-0xcaf0ac>
 74c:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
 750:	00000ecb 	andeq	r0, r0, fp, asr #29
 754:	0000001c 	andeq	r0, r0, ip, lsl r0
 758:	00000544 	andeq	r0, r0, r4, asr #10
 75c:	00000000 	andeq	r0, r0, r0
 760:	00000088 	andeq	r0, r0, r8, lsl #1
 764:	8b040e42 	blhi	104074 <__core1_unwind_stub-0xefbf8c>
 768:	0b0d4201 	bleq	350f74 <__core1_unwind_stub-0xcaf08c>
 76c:	420d0d7c 	andmi	r0, sp, #124, 26	; 0x1f00
 770:	00000ecb 	andeq	r0, r0, fp, asr #29
 774:	0000001c 	andeq	r0, r0, ip, lsl r0
 778:	00000544 	andeq	r0, r0, r4, asr #10
 77c:	00000000 	andeq	r0, r0, r0
 780:	0000006c 	andeq	r0, r0, ip, rrx
 784:	8b080e42 	blhi	204094 <__core1_unwind_stub-0xdfbf6c>
 788:	42018e02 	andmi	r8, r1, #2, 28
 78c:	70040b0c 	andvc	r0, r4, ip, lsl #22
 790:	00080d0c 	andeq	r0, r8, ip, lsl #26
 794:	0000001c 	andeq	r0, r0, ip, lsl r0
 798:	00000544 	andeq	r0, r0, r4, asr #10
 79c:	00000000 	andeq	r0, r0, r0
 7a0:	00000188 	andeq	r0, r0, r8, lsl #3
 7a4:	8b080e42 	blhi	2040b4 <__core1_unwind_stub-0xdfbf4c>
 7a8:	42018e02 	andmi	r8, r1, #2, 28
 7ac:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 7b0:	080d0cbe 	stmdaeq	sp, {r1, r2, r3, r4, r5, r7, sl, fp}
 7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b8:	00000544 	andeq	r0, r0, r4, asr #10
 7bc:	00000000 	andeq	r0, r0, r0
 7c0:	000000ac 	andeq	r0, r0, ip, lsr #1
 7c4:	8b040e42 	blhi	1040d4 <__core1_unwind_stub-0xefbf2c>
 7c8:	0b0d4201 	bleq	350fd4 <__core1_unwind_stub-0xcaf02c>
 7cc:	0d0d4e02 	stceq	14, cr4, [sp, #-8]
 7d0:	000ecb42 	andeq	ip, lr, r2, asr #22
 7d4:	0000000c 	andeq	r0, r0, ip
 7d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 7e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7e4:	0000002c 	andeq	r0, r0, ip, lsr #32
 7e8:	000007d4 	ldrdeq	r0, [r0], -r4
 7ec:	01002174 	tsteq	r0, r4, ror r1
 7f0:	00000130 	andeq	r0, r0, r0, lsr r1
 7f4:	84200e46 	strthi	r0, [r0], #-3654	; 0xfffff1ba
 7f8:	86078508 	strhi	r8, [r7], -r8, lsl #10
 7fc:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
 800:	8a038904 	bhi	e2c18 <__core1_unwind_stub-0xf1d3e8>
 804:	02018e02 	andeq	r8, r1, #2, 28
 808:	c9cace90 	stmibgt	sl, {r4, r7, r9, sl, fp, lr, pc}^
 80c:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
 810:	00000ec4 	andeq	r0, r0, r4, asr #29

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	...
{
   8:	00000014 	andeq	r0, r0, r4, lsl r0
   c:	93500006 	cmpls	r0, #6
  10:	04935104 	ldreq	r5, [r3], #260	; 0x104
  14:	00000014 	andeq	r0, r0, r4, lsl r0
    uint8_t *d = (uint8_t *)dst;
  18:	00000130 	andeq	r0, r0, r0, lsr r1
  1c:	03f30006 	mvnseq	r0, #6
    const uint8_t *s = (const uint8_t *)src;
  20:	9f2500f5 	svcls	0x002500f5
	...
    if (d == s || n == 0) return dst;
  34:	00000037 	andeq	r0, r0, r7, lsr r0
  38:	93520006 	cmpls	r2, #6
  3c:	04935304 	ldreq	r5, [r3], #772	; 0x304
  40:	00000037 	andeq	r0, r0, r7, lsr r0
  44:	00000130 	andeq	r0, r0, r0, lsr r1
  48:	03f30006 	mvnseq	r0, #6
    if (d < s) {
  4c:	9f2502f5 	svcls	0x002502f5
	...
  58:	00000002 	andeq	r0, r0, r2
	...
        for (size_t i = 0; i < n; ++i) d[i] = s[i];
  64:	00000090 	muleq	r0, r0, r0
  68:	089e000a 	ldmeq	lr, {r1, r3}
	...
  74:	00000090 	muleq	r0, r0, r0
  78:	000000f8 	strdeq	r0, [r0], -r8
  7c:	93500006 	cmpls	r0, #6
  80:	04935104 	ldreq	r5, [r3], #260	; 0x104
  84:	00000104 	andeq	r0, r0, r4, lsl #2
  88:	00000118 	andeq	r0, r0, r8, lsl r1
  8c:	93500006 	cmpls	r0, #6
  90:	04935104 	ldreq	r5, [r3], #260	; 0x104
  94:	00000120 	andeq	r0, r0, r0, lsr #2
  98:	00000130 	andeq	r0, r0, r0, lsr r1
  9c:	93500006 	cmpls	r0, #6
  a0:	04935104 	ldreq	r5, [r3], #260	; 0x104
	...
        for (size_t i = n; i > 0; --i) d[i-1] = s[i-1];
  b4:	00180000 	andseq	r0, r8, r0
  b8:	00800000 	addeq	r0, r0, r0
  bc:	00060000 	andeq	r0, r6, r0
  c0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  c4:	008c0493 	umulleq	r0, ip, r3, r4
  c8:	00c00000 	sbceq	r0, r0, r0
  cc:	00060000 	andeq	r0, r6, r0
  d0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  d4:	00c40493 	smulleq	r0, r4, r3, r4
  d8:	00dc0000 	sbcseq	r0, ip, r0
  dc:	00060000 	andeq	r0, r6, r0
  e0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
  e4:	00e00493 	smlaleq	r0, r0, r3, r4	; <UNPREDICTABLE>
  e8:	00fc0000 	rscseq	r0, ip, r0
  ec:	00060000 	andeq	r0, r6, r0
  f0:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
    return dst;
  f4:	01080493 			; <UNDEFINED> instruction: 0x01080493
}
  f8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
  fc:	00060000 	andeq	r0, r6, r0
 100:	55049354 	strpl	r9, [r4, #-852]	; 0xfffffcac
 104:	00000493 	muleq	r0, r3, r4
	...
    g_arm_msgdma3_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA3_CSR_BASE;
 110:	00680000 	rsbeq	r0, r8, r0
	g_arm_msgdma3_desc = (volatile uint32_t*)(uintptr_t) MSGDMA3_DESC_BASE;
 114:	00a80000 	adceq	r0, r8, r0
 118:	00060000 	andeq	r0, r6, r0
 11c:	53049352 	movwpl	r9, #17234	; 0x4352
 120:	00a80493 	umlaleq	r0, r8, r3, r4
 124:	01200000 			; <UNDEFINED> instruction: 0x01200000
	g_arm_msgdma4_csr  = (volatile uint32_t*)(uintptr_t) MSGDMA4_CSR_BASE;
 128:	00060000 	andeq	r0, r6, r0
 12c:	57049356 	smlsdpl	r4, r6, r3, r9
 130:	00000493 	muleq	r0, r3, r4
	...
 	g_arm_msgdma4_desc = (volatile uint32_t*)(uintptr_t) MSGDMA4_DESC_BASE;
 13c:	00400000 	subeq	r0, r0, r0
 140:	00440000 	subeq	r0, r4, r0
 144:	00010000 	andeq	r0, r1, r0
 148:	00004450 	andeq	r4, r0, r0, asr r4
 14c:	00005000 	andeq	r5, r0, r0
    g_arm_f2h_irq0_en  = (volatile uint32_t*)(uintptr_t) F2H_IRQ0_EN_ADDR;
 150:	59000100 	stmdbpl	r0, {r8}
	...
 15c:	00480000 	subeq	r0, r8, r0
 160:	00700000 	rsbseq	r0, r0, r0
    g_arm_prf_counter  = (volatile uint32_t*)(uintptr_t) PRF_COUNT_ADDR;
 164:	00010000 	andeq	r0, r1, r0
 168:	00000050 	andeq	r0, r0, r0, asr r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	01010100 	mrseq	r0, (UNDEF: 17)
 174:	01010000 	mrseq	r0, (UNDEF: 1)
    return ALT_E_SUCCESS;
 178:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
}
 17c:	c4000000 	strgt	r0, [r0], #-0
 180:	01000000 	mrseq	r0, (UNDEF: 0)
 184:	00c45e00 	sbceq	r5, r4, r0, lsl #28
    while (coalesce->size)
 188:	00c80000 	sbceq	r0, r8, r0
 18c:	00030000 	andeq	r0, r3, r0
            break;
 190:	c89f7f7e 	ldmgt	pc, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    *segpa   = thissegpa;
 194:	e0000000 	and	r0, r0, r0
 198:	01000000 	mrseq	r0, (UNDEF: 0)
 19c:	00e05e00 	rsceq	r5, r0, r0, lsl #28
    *segsize = thissegsize;
 1a0:	00e40000 	rsceq	r0, r4, r0
 1a4:	00030000 	andeq	r0, r3, r0
 1a8:	e49f7f7e 	ldr	r7, [pc], #3966	; 1b0 <__core1_unwind_stub-0xfffe50>
    return ALT_E_SUCCESS;
 1ac:	20000000 	andcs	r0, r0, r0
}
 1b0:	01000001 	tsteq	r0, r1
 1b4:	00005e00 	andeq	r5, r0, r0, lsl #28
	...
 1c0:	004c0000 	subeq	r0, ip, r0
 1c4:	01140000 	tsteq	r4, r0
 1c8:	00010000 	andeq	r0, r1, r0
 1cc:	0001145c 	andeq	r1, r1, ip, asr r4
 1d0:	00012000 	andeq	r2, r1, r0
 1d4:	79000300 	stmdbvc	r0, {r8, r9}
 1d8:	00009f20 	andeq	r9, r0, r0, lsr #30
 1dc:	00000000 	andeq	r0, r0, r0
	...
